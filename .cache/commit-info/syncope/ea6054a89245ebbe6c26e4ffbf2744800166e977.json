{"sha":"ea6054a89245ebbe6c26e4ffbf2744800166e977","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmVhNjA1NGE4OTI0NWViYmU2YzI2ZTRmZmJmMjc0NDgwMDE2NmU5Nzc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-08-16T10:31:51Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-08-16T11:26:36Z"},"message":"[SYNCOPE-1357] Wiser equals() and hashCode()","tree":{"sha":"71213c902b9cc7de6261fdeef953d8ce71db915b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/71213c902b9cc7de6261fdeef953d8ce71db915b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ea6054a89245ebbe6c26e4ffbf2744800166e977","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ea6054a89245ebbe6c26e4ffbf2744800166e977","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ea6054a89245ebbe6c26e4ffbf2744800166e977","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ea6054a89245ebbe6c26e4ffbf2744800166e977/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"3eaf7103b94860a332fcce14f3dabe5a61b19f9f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3eaf7103b94860a332fcce14f3dabe5a61b19f9f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3eaf7103b94860a332fcce14f3dabe5a61b19f9f"}],"stats":{"total":79,"additions":67,"deletions":12},"files":[{"sha":"59e1839c4efbb929e92f74bfc0bbfd57e426eb1b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheKey.java","status":"modified","additions":26,"deletions":9,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ea6054a89245ebbe6c26e4ffbf2744800166e977/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheKey.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ea6054a89245ebbe6c26e4ffbf2744800166e977/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheKey.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheKey.java?ref=ea6054a89245ebbe6c26e4ffbf2744800166e977","patch":"@@ -18,10 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.cache;\n \n-import org.apache.commons.lang3.builder.EqualsBuilder;\n-import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n-import org.apache.commons.lang3.builder.ToStringStyle;\n+import java.util.Objects;\n \n /**\n  * Cache entry key.\n@@ -62,17 +59,37 @@ public String getVirSchema() {\n     }\n \n     @Override\n-    public boolean equals(final Object obj) {\n-        return EqualsBuilder.reflectionEquals(this, obj, true);\n+    public int hashCode() {\n+        int hash = 5;\n+        hash = 89 * hash + Objects.hashCode(this.type);\n+        hash = 89 * hash + Objects.hashCode(this.key);\n+        hash = 89 * hash + Objects.hashCode(this.virSchema);\n+        return hash;\n     }\n \n     @Override\n-    public int hashCode() {\n-        return HashCodeBuilder.reflectionHashCode(this, true);\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final VirAttrCacheKey other = (VirAttrCacheKey) obj;\n+        if (!Objects.equals(this.type, other.type)) {\n+            return false;\n+        }\n+        if (!Objects.equals(this.key, other.key)) {\n+            return false;\n+        }\n+        return Objects.equals(this.virSchema, other.virSchema);\n     }\n \n     @Override\n     public String toString() {\n-        return ReflectionToStringBuilder.toString(this, ToStringStyle.JSON_STYLE, true);\n+        return \"VirAttrCacheKey{\" + \"type=\" + type + \", key=\" + key + \", virSchema=\" + virSchema + '}';\n     }\n }"},{"sha":"83a729b1de9b93f96526cf31b525e88b316ae296","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheValue.java","status":"modified","additions":40,"deletions":2,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ea6054a89245ebbe6c26e4ffbf2744800166e977/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ea6054a89245ebbe6c26e4ffbf2744800166e977/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValue.java?ref=ea6054a89245ebbe6c26e4ffbf2744800166e977","patch":"@@ -22,6 +22,7 @@\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n+import java.util.Objects;\n \n /**\n  * Cache entry value.\n@@ -53,9 +54,9 @@ public void setValues(final Collection<Object> values) {\n         this.values.clear();\n \n         if (values != null) {\n-            for (Object value : values) {\n+            values.forEach(value -> {\n                 this.values.add(value.toString());\n-            }\n+            });\n         }\n     }\n \n@@ -88,4 +89,41 @@ public void setLastAccessDate(final Date lastAccessDate) {\n             this.lastAccessDate = null;\n         }\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 5;\n+        hash = 67 * hash + Objects.hashCode(this.values);\n+        hash = 67 * hash + Objects.hashCode(this.creationDate);\n+        hash = 67 * hash + Objects.hashCode(this.lastAccessDate);\n+        return hash;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final VirAttrCacheValue other = (VirAttrCacheValue) obj;\n+        if (!Objects.equals(this.values, other.values)) {\n+            return false;\n+        }\n+        if (!Objects.equals(this.creationDate, other.creationDate)) {\n+            return false;\n+        }\n+        return Objects.equals(this.lastAccessDate, other.lastAccessDate);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"VirAttrCacheValue{\"\n+                + \"values=\" + values + \", creationDate=\" + creationDate + \", lastAccessDate=\" + lastAccessDate\n+                + '}';\n+    }\n }"},{"sha":"2af9933caa4d68acf627fb34afd04b36a1ffd045","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ea6054a89245ebbe6c26e4ffbf2744800166e977/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ea6054a89245ebbe6c26e4ffbf2744800166e977/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java?ref=ea6054a89245ebbe6c26e4ffbf2744800166e977","patch":"@@ -82,7 +82,7 @@ private Map<VirSchema, List<String>> getValues(final Any<?> any, final Set<VirSc\n                 if (virAttrCache.isValidEntry(virAttrCacheValue)) {\n                     LOG.debug(\"Values for {} found in cache: {}\", schema, virAttrCacheValue);\n                     result.put(schema, virAttrCacheValue.getValues());\n-                } else {\n+                } else if (schema.getProvision().getAnyType().equals(any.getType())) {\n                     Set<VirSchema> schemasToRead = toRead.get(schema.getProvision());\n                     if (schemasToRead == null) {\n                         schemasToRead = new HashSet<>();"}]}