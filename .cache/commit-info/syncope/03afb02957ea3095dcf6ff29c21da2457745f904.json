{"sha":"03afb02957ea3095dcf6ff29c21da2457745f904","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjAzYWZiMDI5NTdlYTMwOTVkY2Y2ZmYyOWMyMWRhMjQ1Nzc0NWY5MDQ=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-15T15:32:45Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-15T15:32:45Z"},"message":"[SYNCOPE-259]\nSwitching console to use Spring REST Proxies\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1433457 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a23f327821f990e4be7acad633eb4ee0e1ef4f50","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a23f327821f990e4be7acad633eb4ee0e1ef4f50"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/03afb02957ea3095dcf6ff29c21da2457745f904","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/03afb02957ea3095dcf6ff29c21da2457745f904","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/03afb02957ea3095dcf6ff29c21da2457745f904","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/03afb02957ea3095dcf6ff29c21da2457745f904/comments","author":null,"committer":null,"parents":[{"sha":"86dd15ee6dc29a9303d6762d9f7496b767b86239","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/86dd15ee6dc29a9303d6762d9f7496b767b86239","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/86dd15ee6dc29a9303d6762d9f7496b767b86239"}],"stats":{"total":918,"additions":407,"deletions":511},"files":[{"sha":"bd5f942bfa661d43ddfe5df58bf0db669c3ec96e","filename":"client/src/main/java/org/apache/syncope/services/proxy/ConfigurationServiceProxy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConfigurationServiceProxy.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -26,11 +26,12 @@\n \r\n import org.apache.syncope.client.to.ConfigurationTO;\r\n import org.apache.syncope.services.ConfigurationService;\r\n+import org.springframework.web.client.RestTemplate;\r\n \r\n public class ConfigurationServiceProxy extends SpringServiceProxy implements ConfigurationService {\r\n \r\n-    public ConfigurationServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n-        super(baseUrl, callback);\r\n+    public ConfigurationServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r"},{"sha":"111cda827bda5f2a9dfd4a3b9c6d0c32bfb236c8","filename":"client/src/main/java/org/apache/syncope/services/proxy/ConnectorServiceProxy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConnectorServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConnectorServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConnectorServiceProxy.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -25,11 +25,12 @@\n import org.apache.syncope.client.to.ConnInstanceTO;\r\n import org.apache.syncope.services.ConnectorService;\r\n import org.apache.syncope.types.ConnConfProperty;\r\n+import org.springframework.web.client.RestTemplate;\r\n \r\n public class ConnectorServiceProxy extends SpringServiceProxy implements ConnectorService {\r\n \r\n-    public ConnectorServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n-        super(baseUrl, callback);\r\n+    public ConnectorServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r"},{"sha":"ab2b98eb9560dcbcb435128690ae34e6bb73d12d","filename":"client/src/main/java/org/apache/syncope/services/proxy/EntitlementServiceProxy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FEntitlementServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FEntitlementServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FEntitlementServiceProxy.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -27,8 +27,8 @@\n \r\n public class EntitlementServiceProxy extends SpringServiceProxy implements EntitlementService {\r\n \r\n-    public EntitlementServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n-        super(baseUrl, callback);\r\n+    public EntitlementServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r"},{"sha":"0015c4a04783c2b662f18e85a5e520f1d017c8d3","filename":"client/src/main/java/org/apache/syncope/services/proxy/LoggerServiceProxy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FLoggerServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FLoggerServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FLoggerServiceProxy.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -24,13 +24,14 @@\n import org.apache.syncope.client.to.LoggerTO;\r\n import org.apache.syncope.services.LoggerService;\r\n import org.apache.syncope.types.AuditLoggerName;\r\n+import org.springframework.web.client.RestTemplate;\r\n \r\n import ch.qos.logback.classic.Level;\r\n \r\n public class LoggerServiceProxy extends SpringServiceProxy implements LoggerService {\r\n \r\n-    public LoggerServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n-        super(baseUrl, callback);\r\n+    public LoggerServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r"},{"sha":"8175f810185ffc2de17420d76da66a9c48f0bfa8","filename":"client/src/main/java/org/apache/syncope/services/proxy/NotificationServiceProxy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FNotificationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FNotificationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FNotificationServiceProxy.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -23,11 +23,12 @@\n \r\n import org.apache.syncope.client.to.NotificationTO;\r\n import org.apache.syncope.services.NotificationService;\r\n+import org.springframework.web.client.RestTemplate;\r\n \r\n public class NotificationServiceProxy extends SpringServiceProxy implements NotificationService {\r\n \r\n-    public NotificationServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n-        super(baseUrl, callback);\r\n+    public NotificationServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r"},{"sha":"dc389bfe7737e295c30b763fa3f7ca035bbc7ce5","filename":"client/src/main/java/org/apache/syncope/services/proxy/PolicyServiceProxy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FPolicyServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FPolicyServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FPolicyServiceProxy.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -27,11 +27,12 @@\n import org.apache.syncope.client.to.SyncPolicyTO;\r\n import org.apache.syncope.services.PolicyService;\r\n import org.apache.syncope.types.PolicyType;\r\n+import org.springframework.web.client.RestTemplate;\r\n \r\n public class PolicyServiceProxy extends SpringServiceProxy implements PolicyService {\r\n \r\n-    public PolicyServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n-        super(baseUrl, callback);\r\n+    public PolicyServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r"},{"sha":"b1b8ea19e7de28a20fe6ca1403295af0c1e3d742","filename":"client/src/main/java/org/apache/syncope/services/proxy/ReportServiceProxy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FReportServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FReportServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FReportServiceProxy.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -25,11 +25,12 @@\n import org.apache.syncope.client.to.ReportTO;\r\n import org.apache.syncope.services.ReportService;\r\n import org.apache.syncope.types.ReportExecExportFormat;\r\n+import org.springframework.web.client.RestTemplate;\r\n \r\n public class ReportServiceProxy extends SpringServiceProxy implements ReportService {\r\n \r\n-    public ReportServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n-        super(baseUrl, callback);\r\n+    public ReportServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r"},{"sha":"b4b63c19ec440e4ff6dd92e046e4207075fb12f0","filename":"client/src/main/java/org/apache/syncope/services/proxy/ResourceServiceProxy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FResourceServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FResourceServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FResourceServiceProxy.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -28,11 +28,12 @@\n import org.apache.syncope.client.to.ResourceTO;\r\n import org.apache.syncope.services.ResourceService;\r\n import org.apache.syncope.types.AttributableType;\r\n+import org.springframework.web.client.RestTemplate;\r\n \r\n public class ResourceServiceProxy extends SpringServiceProxy implements ResourceService {\r\n \r\n-    public ResourceServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n-        super(baseUrl, callback);\r\n+    public ResourceServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r"},{"sha":"aaad4d2ce2df19aa892a95842af957d851c3916c","filename":"client/src/main/java/org/apache/syncope/services/proxy/RoleServiceProxy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FRoleServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FRoleServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FRoleServiceProxy.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -25,11 +25,12 @@\n import org.apache.syncope.client.search.NodeCond;\r\n import org.apache.syncope.client.to.RoleTO;\r\n import org.apache.syncope.services.RoleService;\r\n+import org.springframework.web.client.RestTemplate;\r\n \r\n public class RoleServiceProxy extends SpringServiceProxy implements RoleService {\r\n \r\n-    public RoleServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n-        super(baseUrl, callback);\r\n+    public RoleServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r"},{"sha":"83b89de3379a203c948232ae2fc38cae2f11051e","filename":"client/src/main/java/org/apache/syncope/services/proxy/SchemaServiceProxy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -27,12 +27,13 @@\n import org.apache.syncope.client.to.VirtualSchemaTO;\r\n import org.apache.syncope.services.SchemaService;\r\n import org.apache.syncope.types.AttributableType;\r\n+import org.springframework.web.client.RestTemplate;\r\n \r\n @SuppressWarnings(\"unchecked\")\r\n public class SchemaServiceProxy extends SpringServiceProxy implements SchemaService {\r\n \r\n-    public SchemaServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n-        super(baseUrl, callback);\r\n+    public SchemaServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r"},{"sha":"3224168ad24c57e8e1ca8b4bcbaa44b20e11ffcc","filename":"client/src/main/java/org/apache/syncope/services/proxy/SpringServiceProxy.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSpringServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSpringServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSpringServiceProxy.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -24,14 +24,19 @@ public abstract class SpringServiceProxy {\n \r\n \tprotected String baseUrl;\r\n \r\n-\tprivate final SpringRestTemplate callback;\r\n+\tprivate RestTemplate restTemplate;\r\n \r\n-\tpublic SpringServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n+\tpublic SpringServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n \t\tthis.baseUrl = baseUrl;\r\n-\t\tthis.callback = callback;\r\n+\t\tthis.restTemplate = restTemplate;\r\n \t}\r\n \r\n+\tpublic void setRestTemplate(RestTemplate restTemplate) {\r\n+        this.restTemplate = restTemplate;\r\n+    }\r\n+\r\n     public RestTemplate getRestTemplate() {\r\n-        return callback.getRestTemplate();\r\n+        //return callback.getRestTemplate();\r\n+        return restTemplate;\r\n     }\r\n }\r"},{"sha":"b2c1358fe9acd23fb533b8c108c4b7eefed3537f","filename":"client/src/main/java/org/apache/syncope/services/proxy/TaskServiceProxy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FTaskServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FTaskServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FTaskServiceProxy.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -32,12 +32,13 @@\n import org.apache.syncope.services.TaskService;\r\n import org.apache.syncope.types.PropagationTaskExecStatus;\r\n import org.apache.syncope.types.TaskType;\r\n+import org.springframework.web.client.RestTemplate;\r\n \r\n @SuppressWarnings(\"unchecked\")\r\n public class TaskServiceProxy extends SpringServiceProxy implements TaskService {\r\n \r\n-    public TaskServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n-        super(baseUrl, callback);\r\n+    public TaskServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r"},{"sha":"9fc36ae33914d1bbed3c3d6802563fef25f81f52","filename":"client/src/main/java/org/apache/syncope/services/proxy/UserRequestServiceProxy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserRequestServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserRequestServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserRequestServiceProxy.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -24,11 +24,12 @@\n import org.apache.syncope.client.to.UserRequestTO;\r\n import org.apache.syncope.client.to.UserTO;\r\n import org.apache.syncope.services.UserRequestService;\r\n+import org.springframework.web.client.RestTemplate;\r\n \r\n public class UserRequestServiceProxy extends SpringServiceProxy implements UserRequestService {\r\n \r\n-    public UserRequestServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n-        super(baseUrl, callback);\r\n+    public UserRequestServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r"},{"sha":"ad161ac39dc1eab1833ea227f7ae2f6f4cb70277","filename":"client/src/main/java/org/apache/syncope/services/proxy/UserServiceProxy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserServiceProxy.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -27,11 +27,12 @@\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.client.to.WorkflowFormTO;\n import org.apache.syncope.services.UserService;\n+import org.springframework.web.client.RestTemplate;\n \n public class UserServiceProxy extends SpringServiceProxy implements UserService {\n \n-    public UserServiceProxy(String baseUrl, SpringRestTemplate callback) {\n-        super(baseUrl, callback);\n+    public UserServiceProxy(String baseUrl, RestTemplate restTemplate) {\n+        super(baseUrl, restTemplate);\n     }\n \n     @Override"},{"sha":"5fa456948d19e53ed0901f9a7e5363125c9d17ef","filename":"client/src/main/java/org/apache/syncope/services/proxy/WorkflowServiceProxy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FWorkflowServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FWorkflowServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FWorkflowServiceProxy.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -23,11 +23,12 @@\n \r\n import org.apache.syncope.client.to.WorkflowDefinitionTO;\r\n import org.apache.syncope.services.WorkflowService;\r\n+import org.springframework.web.client.RestTemplate;\r\n \r\n public class WorkflowServiceProxy extends SpringServiceProxy implements WorkflowService {\r\n \r\n-    public WorkflowServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n-        super(baseUrl, callback);\r\n+    public WorkflowServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r"},{"sha":"300c6d8ed22eed198f28bc3960cc38b416182653","filename":"console/src/main/java/org/apache/syncope/console/SyncopeApplication.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeApplication.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -170,7 +170,6 @@ public void onUnauthorizedInstantiation(final Component component) {\n \n     @Override\n     public boolean hasAnyRole(final org.apache.wicket.authroles.authorization.strategies.role.Roles roles) {\n-\n         return SyncopeSession.get().hasAnyRole(roles);\n     }\n }"},{"sha":"25036a7533c5e08d923175d3cb7f5b2b0c93b776","filename":"console/src/main/java/org/apache/syncope/console/SyncopeSession.java","status":"modified","additions":57,"deletions":1,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -19,7 +19,38 @@\n package org.apache.syncope.console;\n \n import java.text.SimpleDateFormat;\n+import java.util.HashMap;\n+\n import org.apache.syncope.console.commons.Constants;\n+import org.apache.syncope.services.ConfigurationService;\n+import org.apache.syncope.services.ConnectorService;\n+import org.apache.syncope.services.EntitlementService;\n+import org.apache.syncope.services.LoggerService;\n+import org.apache.syncope.services.NotificationService;\n+import org.apache.syncope.services.PolicyService;\n+import org.apache.syncope.services.ReportService;\n+import org.apache.syncope.services.ResourceService;\n+import org.apache.syncope.services.RoleService;\n+import org.apache.syncope.services.SchemaService;\n+import org.apache.syncope.services.TaskService;\n+import org.apache.syncope.services.UserRequestService;\n+import org.apache.syncope.services.UserService;\n+import org.apache.syncope.services.WorkflowService;\n+import org.apache.syncope.services.proxy.ConfigurationServiceProxy;\n+import org.apache.syncope.services.proxy.ConnectorServiceProxy;\n+import org.apache.syncope.services.proxy.EntitlementServiceProxy;\n+import org.apache.syncope.services.proxy.LoggerServiceProxy;\n+import org.apache.syncope.services.proxy.NotificationServiceProxy;\n+import org.apache.syncope.services.proxy.PolicyServiceProxy;\n+import org.apache.syncope.services.proxy.ReportServiceProxy;\n+import org.apache.syncope.services.proxy.ResourceServiceProxy;\n+import org.apache.syncope.services.proxy.RoleServiceProxy;\n+import org.apache.syncope.services.proxy.SchemaServiceProxy;\n+import org.apache.syncope.services.proxy.SpringServiceProxy;\n+import org.apache.syncope.services.proxy.TaskServiceProxy;\n+import org.apache.syncope.services.proxy.UserRequestServiceProxy;\n+import org.apache.syncope.services.proxy.UserServiceProxy;\n+import org.apache.syncope.services.proxy.WorkflowServiceProxy;\n import org.apache.wicket.Session;\n import org.apache.wicket.authroles.authorization.strategies.role.Roles;\n import org.apache.wicket.protocol.http.WebApplication;\n@@ -42,7 +73,11 @@ public class SyncopeSession extends WebSession {\n \n     private Roles roles = new Roles();\n \n-    private RestTemplate restTemplate;\n+    protected String baseURL;\n+\n+    private final RestTemplate restTemplate;\n+\n+    private final HashMap<Class<?>, SpringServiceProxy> services = new HashMap<Class<?>, SpringServiceProxy>();\n \n     public static SyncopeSession get() {\n         return (SyncopeSession) Session.get();\n@@ -55,6 +90,27 @@ public SyncopeSession(final Request request) {\n                 WebApplicationContextUtils.getWebApplicationContext(WebApplication.get().getServletContext());\n \n         restTemplate = applicationContext.getBean(RestTemplate.class);\n+        baseURL = applicationContext.getBean(\"baseURL\", String.class);\n+\n+        services.put(ConfigurationService.class, new ConfigurationServiceProxy(baseURL, restTemplate));\n+        services.put(ConnectorService.class, new ConnectorServiceProxy(baseURL, restTemplate));\n+        services.put(EntitlementService.class, new EntitlementServiceProxy(baseURL, restTemplate));\n+        services.put(LoggerService.class, new LoggerServiceProxy(baseURL, restTemplate));\n+        services.put(NotificationService.class, new NotificationServiceProxy(baseURL, restTemplate));\n+        services.put(PolicyService.class, new PolicyServiceProxy(baseURL, restTemplate));\n+        services.put(ReportService.class, new ReportServiceProxy(baseURL, restTemplate));\n+        services.put(ResourceService.class, new ResourceServiceProxy(baseURL, restTemplate));\n+        services.put(RoleService.class, new RoleServiceProxy(baseURL, restTemplate));\n+        services.put(SchemaService.class, new SchemaServiceProxy(baseURL, restTemplate));\n+        services.put(TaskService.class, new TaskServiceProxy(baseURL, restTemplate));\n+        services.put(UserRequestService.class, new UserRequestServiceProxy(baseURL, restTemplate));\n+        services.put(UserService.class, new UserServiceProxy(baseURL, restTemplate));\n+        services.put(WorkflowService.class, new WorkflowServiceProxy(baseURL, restTemplate));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T getService(Class<T> service) {\n+        return (T) services.get(service);\n     }\n \n     public RestTemplate getRestTemplate() {"},{"sha":"941164fabcc5486761a6f7a060461b6f40a5df31","filename":"console/src/main/java/org/apache/syncope/console/rest/AbstractAttributableRestClient.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAbstractAttributableRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAbstractAttributableRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAbstractAttributableRestClient.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -25,6 +25,8 @@\n \n public abstract class AbstractAttributableRestClient extends BaseRestClient {\n \n+    private static final long serialVersionUID = 1962529678091410544L;\n+\n     public abstract Integer count();\n \n     public abstract List<? extends AbstractAttributableTO> list(int page, int size);"},{"sha":"708040d9118eb57d129e68050a2ca35cde267c98","filename":"console/src/main/java/org/apache/syncope/console/rest/ApprovalRestClient.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FApprovalRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FApprovalRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FApprovalRestClient.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -18,11 +18,10 @@\n  */\n package org.apache.syncope.console.rest;\n \n-import java.util.Arrays;\n import java.util.List;\n-import org.apache.syncope.client.to.UserTO;\n+\n import org.apache.syncope.client.to.WorkflowFormTO;\n-import org.apache.syncope.console.SyncopeSession;\n+import org.apache.syncope.services.UserService;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -31,18 +30,17 @@\n @Component\n public class ApprovalRestClient extends BaseRestClient {\n \n+    private static final long serialVersionUID = -4785231164900813921L;\n+\n     public List<WorkflowFormTO> getForms() {\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"user/workflow/form/list\", WorkflowFormTO[].class));\n+        return getService(UserService.class).getForms();\n     }\n \n     public WorkflowFormTO claimForm(final String taskId) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class, taskId);\n+        return getService(UserService.class).claimForm(taskId);\n     }\n \n     public void submitForm(final WorkflowFormTO form) {\n-        SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"user/workflow/form/submit\", form, UserTO.class);\n+        getService(UserService.class).submitForm(form);\n     }\n }"},{"sha":"f7711c33a6cdbef47d6c3842c4801a5043414bf0","filename":"console/src/main/java/org/apache/syncope/console/rest/AuthRestClient.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAuthRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAuthRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAuthRestClient.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -18,9 +18,10 @@\n  */\n package org.apache.syncope.console.rest;\n \n-import java.util.Arrays;\n+import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.console.SyncopeSession;\n+\n+import org.apache.syncope.services.EntitlementService;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -37,8 +38,7 @@ public class AuthRestClient extends BaseRestClient {\n      * @return List<String>\n      */\n     public List<String> getAllEntitlements() {\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"auth/allentitlements.json\", String[].class));\n+        return new ArrayList<String>(getService(EntitlementService.class).getAllEntitlements());\n     }\n \n     /**\n@@ -47,7 +47,6 @@ public List<String> getAllEntitlements() {\n      * @return List<String>\n      */\n     public List<String> getOwnedEntitlements() {\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"auth/entitlements.json\", String[].class));\n+        return new ArrayList<String>(getService(EntitlementService.class).getMyEntitlements());\n     }\n }"},{"sha":"3022879c266dc1cdc15d7b86d49d3c163d7d690c","filename":"console/src/main/java/org/apache/syncope/console/rest/BaseRestClient.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FBaseRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FBaseRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FBaseRestClient.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -19,11 +19,12 @@\n package org.apache.syncope.console.rest;\n \n import java.io.Serializable;\n+\n+import org.apache.syncope.console.SyncopeSession;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n-public class BaseRestClient implements Serializable {\n+public abstract class BaseRestClient implements Serializable {\n \n     /**\n      * Logger.\n@@ -32,10 +33,7 @@ public class BaseRestClient implements Serializable {\n \n     private static final long serialVersionUID = 1523999867826481989L;\n \n-    @Autowired\n-    protected String baseURL;\n-\n-    protected BaseRestClient() {\n-        // Empty, only to prevent direct instantiation\n+    protected <T> T getService(Class<T> serviceClass) {\n+        return SyncopeSession.get().getService(serviceClass);\n     }\n }"},{"sha":"4cff6377562acf20bed403d48297a6ea9558bc19","filename":"console/src/main/java/org/apache/syncope/console/rest/ConfigurationRestClient.java","status":"modified","additions":10,"deletions":13,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -18,28 +18,28 @@\n  */\n package org.apache.syncope.console.rest;\n \n-import java.util.Arrays;\n import java.util.List;\n-import org.springframework.stereotype.Component;\n+\n import org.apache.syncope.client.to.ConfigurationTO;\n-import org.apache.syncope.console.SyncopeSession;\n+import org.apache.syncope.services.ConfigurationService;\n+import org.springframework.stereotype.Component;\n \n @Component\n public class ConfigurationRestClient extends BaseRestClient {\n \n+    private static final long serialVersionUID = 7692363064029538722L;\n+\n     /**\n      * Get all stored configurations.\n      *\n      * @return ConfigurationTOs\n      */\n     public List<ConfigurationTO> getAllConfigurations() {\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"configuration/list.json\", ConfigurationTO[].class));\n+        return getService(ConfigurationService.class).list();\n     }\n \n     public ConfigurationTO readConfiguration(final String key) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"configuration/read/{key}.json\", ConfigurationTO.class, key);\n+        return getService(ConfigurationService.class).read(key);\n     }\n \n     /**\n@@ -48,8 +48,7 @@ public ConfigurationTO readConfiguration(final String key) {\n      * @param configurationTO\n      */\n     public void createConfiguration(ConfigurationTO configurationTO) {\n-        SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"configuration/create\", configurationTO, ConfigurationTO.class);\n+        getService(ConfigurationService.class).create(configurationTO);\n     }\n \n     /**\n@@ -58,15 +57,13 @@ public void createConfiguration(ConfigurationTO configurationTO) {\n      * @param configurationTO\n      */\n     public void updateConfiguration(final ConfigurationTO configurationTO) {\n-        SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"configuration/update\", configurationTO, ConfigurationTO.class);\n+        getService(ConfigurationService.class).update(configurationTO.getKey(), configurationTO);\n     }\n \n     /**\n      * Delete a configuration by key.\n      */\n     public ConfigurationTO deleteConfiguration(final String key) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"configuration/delete/{key}.json\", ConfigurationTO.class, key);\n+        return getService(ConfigurationService.class).delete(key);\n     }\n }"},{"sha":"b056735e5d149e1db81a31e892537feb272e64ca","filename":"console/src/main/java/org/apache/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":20,"deletions":26,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -19,45 +19,47 @@\n package org.apache.syncope.console.rest;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.springframework.beans.BeanUtils;\n-import org.springframework.stereotype.Component;\n+\n import org.apache.syncope.client.to.ConnBundleTO;\n import org.apache.syncope.client.to.ConnInstanceTO;\n import org.apache.syncope.client.to.ResourceTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.SyncopeSession;\n+import org.apache.syncope.services.ConnectorService;\n+import org.apache.syncope.services.ResourceService;\n import org.apache.syncope.types.ConnConfProperty;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.stereotype.Component;\n \n /**\n  * Console client for invoking Rest Connectors services.\n  */\n @Component\n public class ConnectorRestClient extends BaseRestClient {\n \n+    private static final long serialVersionUID = -6870366819966266617L;\n+\n     /**\n      * Get all connectors.\n      *\n      * @return ConnectorInstanceTOs\n      */\n     public List<ConnInstanceTO> getAllConnectors() {\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"connector/list.json?lang=\" + SyncopeSession.get().getLocale(), ConnInstanceTO[].class));\n+        return getService(ConnectorService.class).list(SyncopeSession.get().getLocale().toString());\n     }\n \n     /**\n      * Create new connector.\n      *\n-     * @param schemaTO\n+     * @param connectorTO\n      */\n     public void create(final ConnInstanceTO connectorTO) {\n         connectorTO.setConfiguration(filterProperties(connectorTO.getConfiguration()));\n-        SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"connector/create.json\", connectorTO, ConnInstanceTO.class);\n+        getService(ConnectorService.class).create(connectorTO);\n     }\n \n     /**\n@@ -70,8 +72,7 @@ public ConnInstanceTO read(final Long connectorInstanceId) {\n         ConnInstanceTO connectorTO = null;\n \n         try {\n-            connectorTO = SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"connector/read/\" + connectorInstanceId, ConnInstanceTO.class);\n+            connectorTO = getService(ConnectorService.class).read(connectorInstanceId);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading a connector\", e);\n         }\n@@ -81,21 +82,18 @@ public ConnInstanceTO read(final Long connectorInstanceId) {\n \n     public void update(final ConnInstanceTO connectorTO) {\n         connectorTO.setConfiguration(filterProperties(connectorTO.getConfiguration()));\n-        SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"connector/update.json\", connectorTO, ConnInstanceTO.class);\n+        getService(ConnectorService.class).update(connectorTO.getId(), connectorTO);\n     }\n \n     public ConnInstanceTO delete(Long id) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"connector/delete/{connectorId}.json\", ConnInstanceTO.class, id.toString());\n+        return getService(ConnectorService.class).delete(id);\n     }\n \n     public List<ConnBundleTO> getAllBundles() {\n         List<ConnBundleTO> bundles = null;\n \n         try {\n-            bundles = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"connector/bundle/list?lang=\" + SyncopeSession.get().getLocale(), ConnBundleTO[].class));\n+            bundles = getService(ConnectorService.class).getBundles(SyncopeSession.get().getLocale().toString());\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting connector bundles\", e);\n         }\n@@ -113,8 +111,7 @@ public List<ConnConfProperty> getConnectorProperties(final Long connectorId) {\n         List<ConnConfProperty> properties = null;\n \n         try {\n-            properties = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(baseURL\n-                    + \"connector/{connectorId}/configurationProperty/list\", ConnConfProperty[].class, connectorId));\n+            properties = getService(ConnectorService.class).getConfigurationProperties(connectorId);\n \n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting connector configuration properties\", e);\n@@ -131,7 +128,7 @@ private Set<ConnConfProperty> filterProperties(final Set<ConnConfProperty> prope\n             prop.setSchema(property.getSchema());\n             prop.setOverridable(property.isOverridable());\n \n-            final List parsed = new ArrayList();\n+            final List<Object> parsed = new ArrayList<Object>();\n \n             for (Object obj : property.getValues()) {\n                 if (obj != null && !obj.toString().isEmpty()) {\n@@ -158,8 +155,7 @@ public Boolean check(final ConnInstanceTO connectorTO) {\n         connector.setConfiguration(filterProperties(connector.getConfiguration()));\n \n         try {\n-            return SyncopeSession.get().getRestTemplate().postForObject(\n-                    baseURL + \"connector/check.json\", connector, Boolean.class);\n+            return getService(ConnectorService.class).validate(connectorTO);\n         } catch (Exception e) {\n             LOG.error(\"Connector not found {}\", connector, e);\n             return false;\n@@ -169,14 +165,13 @@ public Boolean check(final ConnInstanceTO connectorTO) {\n     /**\n      * Test resource connection.\n      *\n-     * @param connectorTO connector.\n+     * @param resourceTO\n      * @return Connection status.\n      */\n     public Boolean check(final ResourceTO resourceTO) {\n \n         try {\n-            return SyncopeSession.get().getRestTemplate().postForObject(\n-                    baseURL + \"resource/check.json\", resourceTO, Boolean.class);\n+            return getService(ResourceService.class).check(resourceTO);\n         } catch (Exception e) {\n             LOG.error(\"Connector not found {}\", resourceTO.getConnectorId(), e);\n             return false;\n@@ -187,8 +182,7 @@ public List<String> getSchemaNames(final ConnInstanceTO connectorTO) {\n         List<String> schemaNames = null;\n \n         try {\n-            schemaNames = Arrays.asList(SyncopeSession.get().getRestTemplate().postForObject(\n-                    baseURL + \"connector/schema/list\", connectorTO, String[].class));\n+            schemaNames = getService(ConnectorService.class).getSchemaNames(connectorTO.getId(), connectorTO, false);\n \n             // re-order schema names list\n             Collections.sort(schemaNames);"},{"sha":"aec7d78dab39b298b5e384de3074682865f527bb","filename":"console/src/main/java/org/apache/syncope/console/rest/LoggerRestClient.java","status":"modified","additions":11,"deletions":15,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -18,31 +18,31 @@\n  */\n package org.apache.syncope.console.rest;\n \n-import java.util.Arrays;\n import java.util.EnumMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import org.springframework.stereotype.Component;\n+\n import org.apache.syncope.client.to.LoggerTO;\n-import org.apache.syncope.console.SyncopeSession;\n+import org.apache.syncope.services.LoggerService;\n import org.apache.syncope.types.AuditElements;\n import org.apache.syncope.types.AuditElements.Category;\n import org.apache.syncope.types.AuditLoggerName;\n import org.apache.syncope.types.SyncopeLoggerLevel;\n+import org.springframework.stereotype.Component;\n \n @Component\n public class LoggerRestClient extends BaseRestClient {\n \n+    private static final long serialVersionUID = 4579786978763032240L;\n+\n     public List<LoggerTO> listLogs() {\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"logger/log/list\", LoggerTO[].class));\n+        return getService(LoggerService.class).listLogs();\n     }\n \n     public List<AuditLoggerName> listAudits() {\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"logger/audit/list\", AuditLoggerName[].class));\n+        return getService(LoggerService.class).listAudits();\n     }\n \n     public Map<AuditElements.Category, Set<AuditLoggerName>> listAuditsByCategory() {\n@@ -59,22 +59,18 @@ public Map<AuditElements.Category, Set<AuditLoggerName>> listAuditsByCategory()\n     }\n \n     public void setLogLevel(final String name, final SyncopeLoggerLevel level) {\n-        SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"logger/log/{name}/{level}\", null, LoggerTO.class, name, level);\n+        getService(LoggerService.class).update(name, level.getLevel());\n     }\n \n     public void enableAudit(final AuditLoggerName auditLoggerName) {\n-        SyncopeSession.get().getRestTemplate().put(\n-                baseURL + \"logger/audit/enable\", auditLoggerName);\n+        getService(LoggerService.class).enableAudit(auditLoggerName);\n     }\n \n     public LoggerTO deleteLog(final String name) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"logger/log/delete/{name}\", LoggerTO.class, name);\n+        return getService(LoggerService.class).delete(name);\n     }\n \n     public void disableAudit(final AuditLoggerName auditLoggerName) {\n-        SyncopeSession.get().getRestTemplate().put(\n-                baseURL + \"logger/audit/disable\", auditLoggerName);\n+        getService(LoggerService.class).disableAudit(auditLoggerName);\n     }\n }"},{"sha":"3c35a7bead32f62fa9783be9cab0960b94f712e7","filename":"console/src/main/java/org/apache/syncope/console/rest/NotificationRestClient.java","status":"modified","additions":21,"deletions":30,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -18,55 +18,46 @@\n  */\n package org.apache.syncope.console.rest;\n \n-import java.util.Arrays;\n+import java.util.ArrayList;\n import java.util.List;\n+\n import org.apache.syncope.client.to.NotificationTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.console.SyncopeSession;\n+import org.apache.syncope.services.ConfigurationService;\n+import org.apache.syncope.services.NotificationService;\n+import org.apache.syncope.services.WorkflowService;\n import org.springframework.stereotype.Component;\n \n @Component\n public class NotificationRestClient extends BaseRestClient {\n \n-    public List<NotificationTO> getAllNotifications()\n-            throws SyncopeClientCompositeErrorException {\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"notification/list.json\", NotificationTO[].class));\n+    private static final long serialVersionUID = 6328933265096511690L;\n+\n+    public List<NotificationTO> getAllNotifications() throws SyncopeClientCompositeErrorException {\n+        return getService(NotificationService.class).list();\n     }\n \n-    public NotificationTO readNotification(final Long id)\n-            throws SyncopeClientCompositeErrorException {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"notification/read/{notificationId}.json\", NotificationTO.class, id);\n+    public NotificationTO readNotification(final Long id) throws SyncopeClientCompositeErrorException {\n+        return getService(NotificationService.class).read(id);\n     }\n \n-    public void createNotification(final NotificationTO notificationTO)\n-            throws SyncopeClientCompositeErrorException {\n-        SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"notification/create.json\", notificationTO, NotificationTO.class);\n+    public void createNotification(final NotificationTO notificationTO) throws SyncopeClientCompositeErrorException {\n+        getService(NotificationService.class).create(notificationTO);\n     }\n \n-    public void updateNotification(final NotificationTO notificationTO)\n-            throws SyncopeClientCompositeErrorException {\n-        SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"notification/update.json\", notificationTO, NotificationTO.class);\n+    public void updateNotification(final NotificationTO notificationTO) throws SyncopeClientCompositeErrorException {\n+        getService(NotificationService.class).update(notificationTO.getId(), notificationTO);\n     }\n \n-    public void deleteNotification(final Long id)\n-            throws SyncopeClientCompositeErrorException {\n-        SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"notification/delete/{notificationId}.json\", NotificationTO.class, id);\n+    public void deleteNotification(final Long id) throws SyncopeClientCompositeErrorException {\n+        getService(NotificationService.class).delete(id);\n     }\n \n-    public List<String> getMailTemplates()\n-            throws SyncopeClientCompositeErrorException {\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"configuration/mailTemplates.json\", String[].class));\n+    public List<String> getMailTemplates() throws SyncopeClientCompositeErrorException {\n+        return new ArrayList<String>(getService(ConfigurationService.class).getMailTemplates());\n     }\n \n-    public List<String> getEvents()\n-            throws SyncopeClientCompositeErrorException {\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"workflow/tasks/user.json\", String[].class));\n+    public List<String> getEvents() throws SyncopeClientCompositeErrorException {\n+        return getService(WorkflowService.class).getDefinedTasks(\"user\");\n     }\n }"},{"sha":"df514724f4ba51ef6189ac61cd5c422a6f2f42b3","filename":"console/src/main/java/org/apache/syncope/console/rest/PolicyRestClient.java","status":"modified","additions":47,"deletions":126,"changes":173,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -19,173 +19,94 @@\n package org.apache.syncope.console.rest;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n-import org.springframework.stereotype.Component;\n+\n import org.apache.syncope.client.to.AccountPolicyTO;\n import org.apache.syncope.client.to.PasswordPolicyTO;\n import org.apache.syncope.client.to.PolicyTO;\n import org.apache.syncope.client.to.SyncPolicyTO;\n-import org.apache.syncope.console.SyncopeSession;\n+import org.apache.syncope.services.PolicyService;\n import org.apache.syncope.types.PolicyType;\n+import org.springframework.stereotype.Component;\n \n /**\n  * Console client for invoking Rest Policy services.\n  */\n @Component\n public class PolicyRestClient extends BaseRestClient {\n \n+    private static final long serialVersionUID = -1392090291817187902L;\n+\n+    @SuppressWarnings(\"unchecked\")\n     public <T extends PolicyTO> T getGlobalPolicy(final PolicyType type) {\n \n         T policy = null;\n \n         try {\n+            policy = getService(PolicyService.class).readGlobal(type);\n+        } catch (Exception e) {\n+            LOG.warn(\"No global \" + type + \" policy found\", e);\n             switch (type) {\n-                case GLOBAL_ACCOUNT:\n-                    try {\n-                        policy = (T) SyncopeSession.get().getRestTemplate().getForObject(\n-                                baseURL + \"policy/account/global/read\", AccountPolicyTO.class);\n-                    } catch (Exception e) {\n-                        LOG.debug(\"No account policy found\", e);\n-                        policy = (T) new AccountPolicyTO();\n-                    }\n-                    break;\n-                case GLOBAL_PASSWORD:\n-                    try {\n-                        policy = (T) SyncopeSession.get().getRestTemplate().getForObject(\n-                                baseURL + \"policy/password/global/read\", PasswordPolicyTO.class);\n-                    } catch (Exception e) {\n-                        LOG.debug(\"No password policy found\", e);\n-                        policy = (T) new PasswordPolicyTO();\n-                    }\n-                    break;\n-                case GLOBAL_SYNC:\n-                    try {\n-                        policy = (T) SyncopeSession.get().getRestTemplate().getForObject(\n-                                baseURL + \"policy/sync/global/read\", SyncPolicyTO.class);\n-                    } catch (Exception e) {\n-                        LOG.debug(\"No password policy found\", e);\n-                        policy = (T) new SyncPolicyTO();\n-                    }\n-                    break;\n-                default:\n-                    throw new Exception(\"Invalid policy type\");\n+            case GLOBAL_ACCOUNT:\n+                policy = (T) new AccountPolicyTO();\n+                break;\n+            case GLOBAL_PASSWORD:\n+                policy = (T) new PasswordPolicyTO();\n+                break;\n+            case GLOBAL_SYNC:\n+                policy = (T) new SyncPolicyTO();\n+                break;\n+            default:\n+                LOG.warn(\"Invalid policy type\");\n             }\n-        } catch (Exception ignore) {\n-            LOG.error(\"Invalid policy type\", ignore);\n         }\n-\n         return policy;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public <T extends PolicyTO> List<T> getPolicies(final PolicyType type, final boolean includeGlobal) {\n         final List<T> res = new ArrayList<T>();\n-\n-        T[] policies = null;\n-\n-        final Class reference;\n-        final Class globalReference;\n-        final String policy;\n+        List<T> policies = new ArrayList<T>();\n \n         try {\n+            policies = (List<T>) getService(PolicyService.class).listByType(type);\n+            res.addAll(policies);\n+        } catch (Exception ignore) {\n+            LOG.debug(\"No policy found\", ignore);\n+        }\n \n-            switch (type) {\n-                case ACCOUNT:\n-                    reference = AccountPolicyTO[].class;\n-                    globalReference = AccountPolicyTO.class;\n-                    policy = \"account\";\n-                    break;\n-                case PASSWORD:\n-                    reference = PasswordPolicyTO[].class;\n-                    globalReference = PasswordPolicyTO.class;\n-                    policy = \"password\";\n-                    break;\n-                case SYNC:\n-                    reference = SyncPolicyTO[].class;\n-                    globalReference = SyncPolicyTO.class;\n-                    policy = \"sync\";\n-                    break;\n-                default:\n-                    throw new Exception(\"Invalid policy type\");\n-            }\n-\n+        if (includeGlobal) {\n             try {\n-                policies = (T[]) SyncopeSession.get().getRestTemplate().getForObject(\n-                        baseURL + \"policy/\" + policy + \"/list\", reference);\n+                PolicyTO globalPolicy = getGlobalPolicy(type);\n+                res.add(0, (T) globalPolicy);\n             } catch (Exception ignore) {\n-                LOG.debug(\"No policy found\", ignore);\n+                LOG.warn(\"No global policy found\", ignore);\n             }\n-\n-            if (policies != null) {\n-                res.addAll(Arrays.asList(policies));\n-            }\n-\n-            if (includeGlobal) {\n-                PolicyTO globalPolicy = null;\n-\n-                try {\n-                    globalPolicy = (T) SyncopeSession.get().getRestTemplate().getForObject(\n-                            baseURL + \"policy/\" + policy + \"/global/read\", globalReference);\n-                } catch (Exception ignore) {\n-                    LOG.warn(\"No global policy found\", ignore);\n-                }\n-\n-                if (globalPolicy != null) {\n-                    res.add(0, (T) globalPolicy);\n-                }\n-            }\n-\n-        } catch (Exception ignore) {\n-            LOG.error(\"No policy found\", ignore);\n         }\n \n         return res;\n     }\n \n-    public <T extends PolicyTO> T createPolicy(final T policy)\n-            throws InvalidPolicyType {\n-\n-        switch (policy.getType()) {\n-            case GLOBAL_ACCOUNT:\n-            case ACCOUNT:\n-                return (T) SyncopeSession.get().getRestTemplate().postForObject(\n-                        baseURL + \"policy/account/create\", policy, AccountPolicyTO.class);\n-            case GLOBAL_PASSWORD:\n-            case PASSWORD:\n-                return (T) SyncopeSession.get().getRestTemplate().postForObject(\n-                        baseURL + \"policy/password/create\", policy,\n-                        PasswordPolicyTO.class);\n-            case GLOBAL_SYNC:\n-            case SYNC:\n-                return (T) SyncopeSession.get().getRestTemplate().postForObject(\n-                        baseURL + \"policy/sync/create\", policy, SyncPolicyTO.class);\n-            default:\n-                throw new InvalidPolicyType(\"Invalid type \" + policy.getType());\n-        }\n+    public <T extends PolicyTO> T createPolicy(final T policy) throws InvalidPolicyType {\n+        return getService(PolicyService.class).create(policy.getType(), policy);\n     }\n \n-    public <T extends PolicyTO> T updatePolicy(final T policy)\n-            throws InvalidPolicyType {\n-\n-        switch (policy.getType()) {\n-            case GLOBAL_ACCOUNT:\n-            case ACCOUNT:\n-                return (T) SyncopeSession.get().getRestTemplate().postForObject(\n-                        baseURL + \"policy/account/update\", policy, AccountPolicyTO.class);\n-            case GLOBAL_PASSWORD:\n-            case PASSWORD:\n-                return (T) SyncopeSession.get().getRestTemplate().postForObject(\n-                        baseURL + \"policy/password/update\", policy, PasswordPolicyTO.class);\n-            case GLOBAL_SYNC:\n-            case SYNC:\n-                return (T) SyncopeSession.get().getRestTemplate().postForObject(\n-                        baseURL + \"policy/sync/update\", policy, SyncPolicyTO.class);\n-            default:\n-                throw new InvalidPolicyType(\"Invalid type \" + policy.getType());\n-        }\n+    public <T extends PolicyTO> T updatePolicy(final T policy) throws InvalidPolicyType {\n+        return getService(PolicyService.class).update(policy.getType(), policy.getId(), policy);\n     }\n \n     public PolicyTO delete(final Long id, Class<? extends PolicyTO> policyClass) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(baseURL + \"policy/delete/\" + id, policyClass);\n+        return getService(PolicyService.class).delete(getPolicyType(policyClass), id);\n+    }\n+\n+    private PolicyType getPolicyType(Class<? extends PolicyTO> clazz) {\n+        if (AccountPolicyTO.class.equals(clazz))\n+            return PolicyType.ACCOUNT;\n+        else if (PasswordPolicyTO.class.equals(clazz))\n+            return PolicyType.PASSWORD;\n+        else if (SyncPolicyTO.class.equals(clazz))\n+            return PolicyType.SYNC;\n+        else\n+            throw new IllegalArgumentException(\"Policy Type not supported\");\n     }\n }"},{"sha":"da979e8a8e61acc29b31fed24f2d8bf658051abf","filename":"console/src/main/java/org/apache/syncope/console/rest/ReportRestClient.java","status":"modified","additions":16,"deletions":25,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -18,57 +18,52 @@\n  */\n package org.apache.syncope.console.rest;\n \n-import java.util.Arrays;\n import java.util.List;\n+\n import org.apache.syncope.client.to.ReportExecTO;\n import org.apache.syncope.client.to.ReportTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.console.SyncopeSession;\n+import org.apache.syncope.services.ReportService;\n import org.springframework.stereotype.Component;\n \n @Component\n public class ReportRestClient extends BaseRestClient implements ExecutionRestClient {\n \n+    private static final long serialVersionUID = 1644689667998953604L;\n+\n     public List<String> getReportletConfClasses() {\n         List<String> reportletClasses = null;\n \n         try {\n-            reportletClasses = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"report/reportletConfClasses.json\", String[].class));\n+            reportletClasses = getService(ReportService.class).getReportletConfClasses();\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting available reportlet classes\", e);\n         }\n         return reportletClasses;\n     }\n-    \n+\n     public ReportTO read(final Long reportId) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"report/read/{taskId}\", ReportTO.class, reportId);\n+        return getService(ReportService.class).read(reportId);\n     }\n \n     public List<ReportTO> list() {\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"report/list\", ReportTO[].class));\n+        return getService(ReportService.class).list();\n     }\n \n     public List<ReportTO> list(final int page, final int size) {\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"report/list/{page}/{size}.json\", ReportTO[].class, page, size));\n+        return getService(ReportService.class).list(page, size);\n     }\n \n     public int count() {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"report/count.json\", Integer.class);\n+        return getService(ReportService.class).count();\n     }\n \n     public ReportTO create(final ReportTO reportTO) {\n-        return SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"report/create\", reportTO, ReportTO.class);\n+        return getService(ReportService.class).create(reportTO);\n     }\n \n     public ReportTO update(final ReportTO reportTO) {\n-        return SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"report/update\", reportTO, ReportTO.class);\n+        return getService(ReportService.class).update(reportTO.getId(), reportTO);\n     }\n \n     /**\n@@ -77,8 +72,7 @@ public ReportTO update(final ReportTO reportTO) {\n      * @param reportId report to delete\n      */\n     public ReportTO delete(final Long reportId) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"report/delete/{reportId}\", ReportTO.class, reportId);\n+        return getService(ReportService.class).delete(reportId);\n     }\n \n     /**\n@@ -88,8 +82,7 @@ public ReportTO delete(final Long reportId) {\n      */\n     @Override\n     public void startExecution(final Long reportId) {\n-        SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"report/execute/{reportId}\", null, ReportExecTO.class, reportId);\n+        getService(ReportService.class).execute(reportId);\n     }\n \n     /**\n@@ -99,8 +92,7 @@ public void startExecution(final Long reportId) {\n      */\n     @Override\n     public void deleteExecution(final Long reportExecId) {\n-        SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"report/execution/delete/{execId}\", ReportExecTO.class, reportExecId);\n+        getService(ReportService.class).deleteExecution(reportExecId);\n     }\n \n     /**\n@@ -110,7 +102,6 @@ public void deleteExecution(final Long reportExecId) {\n      */\n     @Override\n     public List<ReportExecTO> listExecutions() {\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"report/execution/list\", ReportExecTO[].class));\n+        return getService(ReportService.class).listExecutions();\n     }\n }"},{"sha":"74d8f4c618e669e9f8b0c0ed790d804f55b2c6f2","filename":"console/src/main/java/org/apache/syncope/console/rest/ResourceRestClient.java","status":"modified","additions":11,"deletions":13,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -18,11 +18,12 @@\n  */\n package org.apache.syncope.console.rest;\n \n-import java.util.Arrays;\n+import java.util.ArrayList;\n import java.util.List;\n+\n import org.apache.syncope.client.to.ResourceTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.console.SyncopeSession;\n+import org.apache.syncope.services.ResourceService;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -31,12 +32,13 @@\n @Component\n public class ResourceRestClient extends BaseRestClient {\n \n+    private static final long serialVersionUID = -6898907679835668987L;\n+\n     public List<String> getPropagationActionsClasses() {\n         List<String> actions = null;\n \n         try {\n-            actions = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"resource/propagationActionsClasses.json\", String[].class));\n+            actions = new ArrayList<String>(getService(ResourceService.class).getPropagationActionsClasses());\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting all propagation actions classes\", e);\n         }\n@@ -47,8 +49,7 @@ public List<ResourceTO> getAllResources() {\n         List<ResourceTO> resources = null;\n \n         try {\n-            resources = Arrays.asList(SyncopeSession.get().getRestTemplate().\n-                    getForObject(baseURL + \"resource/list.json\", ResourceTO[].class));\n+            resources = getService(ResourceService.class).list();\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading all resources\", e);\n         }\n@@ -57,28 +58,25 @@ public List<ResourceTO> getAllResources() {\n     }\n \n     public void create(final ResourceTO resourceTO) {\n-        SyncopeSession.get().getRestTemplate().postForObject(baseURL + \"resource/create\", resourceTO, ResourceTO.class);\n+        getService(ResourceService.class).create(resourceTO);\n     }\n \n     public ResourceTO read(final String name) {\n         ResourceTO resourceTO = null;\n \n         try {\n-            resourceTO = SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"resource/read/\" + name + \".json\", ResourceTO.class);\n+            resourceTO = getService(ResourceService.class).read(name);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading a resource\", e);\n         }\n         return resourceTO;\n     }\n \n     public void update(final ResourceTO resourceTO) {\n-        SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"resource/update.json\", resourceTO, ResourceTO.class);\n+        getService(ResourceService.class).update(resourceTO.getName(), resourceTO);\n     }\n \n     public ResourceTO delete(final String name) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"resource/delete/{resourceName}.json\", ResourceTO.class, name);\n+        return getService(ResourceService.class).delete(name);\n     }\n }"},{"sha":"20d109c85c76c8edcc4581dcc29eb0af13483986","filename":"console/src/main/java/org/apache/syncope/console/rest/RoleRestClient.java","status":"modified","additions":16,"deletions":23,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -18,14 +18,16 @@\n  */\n package org.apache.syncope.console.rest;\n \n-import java.util.Arrays;\n import java.util.List;\n+\n import org.apache.syncope.client.mod.RoleMod;\n import org.apache.syncope.client.search.NodeCond;\n import org.apache.syncope.client.to.ConnObjectTO;\n import org.apache.syncope.client.to.RoleTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.console.SyncopeSession;\n+import org.apache.syncope.services.ResourceService;\n+import org.apache.syncope.services.RoleService;\n+import org.apache.syncope.types.AttributableType;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -34,62 +36,53 @@\n @Component\n public class RoleRestClient extends AbstractAttributableRestClient {\n \n+    private static final long serialVersionUID = -8549081557283519638L;\n+\n     @Override\n     public Integer count() {\n-        return SyncopeSession.get().getRestTemplate().getForObject(baseURL + \"role/count.json\", Integer.class);\n+        return getService(RoleService.class).count();\n     }\n \n     public List<RoleTO> list() {\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"role/list.json\", RoleTO[].class));\n+        return getService(RoleService.class).list();\n     }\n \n     @Override\n     public List<RoleTO> list(final int page, final int size) {\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"role/list.json\", RoleTO[].class, page, size));\n+        return getService(RoleService.class).list(page, size);\n     }\n \n     @Override\n     public Integer searchCount(final NodeCond searchCond) {\n-        return SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"role/search/count.json\", searchCond, Integer.class);\n+        return getService(RoleService.class).searchCount(searchCond);\n     }\n \n     @Override\n     public List<RoleTO> search(final NodeCond searchCond, final int page, final int size)\n             throws SyncopeClientCompositeErrorException {\n-\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"role/search/{page}/{size}\", searchCond, RoleTO[].class, page, size));\n+        return getService(RoleService.class).search(searchCond, page, size);\n     }\n \n     @Override\n     public ConnObjectTO getRemoteObject(final String resourceName, final String objectId)\n             throws SyncopeClientCompositeErrorException {\n-\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"/resource/{resourceName}/read/ROLE/{objectId}.json\",\n-                ConnObjectTO.class, resourceName, objectId);\n+        return getService(ResourceService.class).getConnector(resourceName, AttributableType.ROLE, objectId);\n     }\n \n     public RoleTO create(final RoleTO roleTO) {\n-        return SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"role/create\", roleTO, RoleTO.class);\n+        return getService(RoleService.class).create(roleTO);\n     }\n \n     public RoleTO read(final Long id) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"role/read/{roleId}.json\", RoleTO.class, id);\n+        return getService(RoleService.class).read(id);\n     }\n \n     public RoleTO update(final RoleMod roleMod) {\n-        return SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"role/update\", roleMod, RoleTO.class);\n+        return getService(RoleService.class).update(roleMod.getId(), roleMod);\n     }\n \n     @Override\n     public RoleTO delete(final Long id) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(baseURL + \"role/delete/{roleId}\", RoleTO.class, id);\n+        return getService(RoleService.class).delete(id);\n     }\n }"},{"sha":"fd3f89794cb2358c47493772849b2a019ea65d5b","filename":"console/src/main/java/org/apache/syncope/console/rest/SchemaRestClient.java","status":"modified","additions":25,"deletions":46,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -19,22 +19,26 @@\n package org.apache.syncope.console.rest;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n-import org.springframework.stereotype.Component;\n+\n import org.apache.syncope.client.to.DerivedSchemaTO;\n import org.apache.syncope.client.to.SchemaTO;\n import org.apache.syncope.client.to.VirtualSchemaTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.console.SyncopeSession;\n+import org.apache.syncope.services.ConfigurationService;\n+import org.apache.syncope.services.SchemaService;\n+import org.apache.syncope.services.SchemaService.SchemaType;\n import org.apache.syncope.types.AttributableType;\n+import org.springframework.stereotype.Component;\n \n /**\n  * Console client for invoking rest schema services.\n  */\n @Component\n public class SchemaRestClient extends BaseRestClient {\n \n+    private static final long serialVersionUID = -2479730152700312373L;\n+\n     /**\n      * Get schemas.\n      *\n@@ -44,8 +48,7 @@ public List<SchemaTO> getSchemas(final AttributableType type) {\n         List<SchemaTO> schemas = null;\n \n         try {\n-            schemas = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"schema/\" + type.name().toLowerCase() + \"/list.json\", SchemaTO[].class));\n+            schemas = getService(SchemaService.class).list(type, SchemaType.NORMAL);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting all schemas\", e);\n         }\n@@ -62,9 +65,7 @@ public List<String> getSchemaNames(final AttributableType type) {\n         final List<String> schemaNames = new ArrayList<String>();\n \n         try {\n-            final List<SchemaTO> schemas = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"schema/\" + type.name().toLowerCase() + \"/list.json\", SchemaTO[].class));\n-\n+            final List<SchemaTO> schemas = getService(SchemaService.class).list(type, SchemaType.NORMAL);\n             for (SchemaTO schemaTO : schemas) {\n                 schemaNames.add(schemaTO.getName());\n             }\n@@ -85,8 +86,7 @@ public List<DerivedSchemaTO> getDerivedSchemas(final AttributableType type) {\n         List<DerivedSchemaTO> userDerivedSchemas = null;\n \n         try {\n-            userDerivedSchemas = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"derivedSchema/\" + type.name().toLowerCase() + \"/list.json\", DerivedSchemaTO[].class));\n+            userDerivedSchemas = getService(SchemaService.class).list(type, SchemaType.DERIVED);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting all user derived schemas\", e);\n         }\n@@ -104,9 +104,7 @@ public List<String> getDerivedSchemaNames(final AttributableType type) {\n         final List<String> userDerivedSchemasNames = new ArrayList<String>();\n \n         try {\n-            final List<DerivedSchemaTO> userDerivedSchemas =\n-                    Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"derivedSchema/\" + type.name().toLowerCase() + \"/list.json\", DerivedSchemaTO[].class));\n+            final List<DerivedSchemaTO> userDerivedSchemas = getService(SchemaService.class).list(type, SchemaType.DERIVED);\n \n             for (DerivedSchemaTO schemaTO : userDerivedSchemas) {\n                 userDerivedSchemasNames.add(schemaTO.getName());\n@@ -128,8 +126,7 @@ public List<VirtualSchemaTO> getVirtualSchemas(final AttributableType type) {\n         List<VirtualSchemaTO> userVirtualSchemas = null;\n \n         try {\n-            userVirtualSchemas = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"virtualSchema/\" + type.name().toLowerCase() + \"/list.json\", VirtualSchemaTO[].class));\n+            userVirtualSchemas = getService(SchemaService.class).list(type, SchemaType.VIRTUAL);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting all user derived schemas\", e);\n         }\n@@ -146,10 +143,7 @@ public List<String> getVirtualSchemaNames(final AttributableType type) {\n         final List<String> userVirtualSchemasNames = new ArrayList<String>();\n \n         try {\n-            final List<VirtualSchemaTO> userVirtualSchemas =\n-                    Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"virtualSchema/\" + type.name().toLowerCase() + \"/list.json\", VirtualSchemaTO[].class));\n-\n+            final List<VirtualSchemaTO> userVirtualSchemas = getService(SchemaService.class).list(type, SchemaType.VIRTUAL);\n             for (VirtualSchemaTO schemaTO : userVirtualSchemas) {\n                 userVirtualSchemasNames.add(schemaTO.getName());\n             }\n@@ -166,8 +160,7 @@ public List<String> getVirtualSchemaNames(final AttributableType type) {\n      * @param schemaTO\n      */\n     public void createSchema(final AttributableType type, final SchemaTO schemaTO) {\n-        SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"schema/\" + type.name().toLowerCase() + \"/create\", schemaTO, SchemaTO.class);\n+        getService(SchemaService.class).create(type, SchemaType.NORMAL, schemaTO);\n     }\n \n     /**\n@@ -180,8 +173,7 @@ public SchemaTO readSchema(final AttributableType type, final String name) {\n         SchemaTO schema = null;\n \n         try {\n-            schema = SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"schema/\" + type.name().toLowerCase() + \"/read/\" + name + \".json\", SchemaTO.class);\n+            schema = getService(SchemaService.class).read(type, SchemaType.NORMAL, name);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading a user schema\", e);\n         }\n@@ -194,8 +186,7 @@ public SchemaTO readSchema(final AttributableType type, final String name) {\n      * @param schemaTO updated\n      */\n     public void updateSchema(final AttributableType type, SchemaTO schemaTO) {\n-        SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"schema/\" + type.name().toLowerCase() + \"/update\", schemaTO, SchemaTO.class);\n+        getService(SchemaService.class).update(type, SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n     }\n \n     /**\n@@ -205,8 +196,7 @@ public void updateSchema(final AttributableType type, SchemaTO schemaTO) {\n      * @return schemaTO\n      */\n     public SchemaTO deleteSchema(final AttributableType type, String name) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"schema/\" + type.name().toLowerCase() + \"/delete/\" + name + \".json\", SchemaTO.class);\n+        return getService(SchemaService.class).delete(type, SchemaType.NORMAL, name);\n     }\n \n     /**\n@@ -215,8 +205,7 @@ public SchemaTO deleteSchema(final AttributableType type, String name) {\n      * @param schemaTO\n      */\n     public void createDerivedSchema(final AttributableType type, final DerivedSchemaTO schemaTO) {\n-        SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"derivedSchema/\" + type.name().toLowerCase() + \"/create\", schemaTO, DerivedSchemaTO.class);\n+        getService(SchemaService.class).create(type, SchemaType.DERIVED, schemaTO);\n     }\n \n     /**\n@@ -225,8 +214,7 @@ public void createDerivedSchema(final AttributableType type, final DerivedSchema\n      * @param schemaTO\n      */\n     public void createVirtualSchema(final AttributableType type, final VirtualSchemaTO schemaTO) {\n-        SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"virtualSchema/\" + type.name().toLowerCase() + \"/create\", schemaTO, VirtualSchemaTO.class);\n+        getService(SchemaService.class).create(type, SchemaType.VIRTUAL, schemaTO);\n     }\n \n     /**\n@@ -238,9 +226,7 @@ public void createVirtualSchema(final AttributableType type, final VirtualSchema\n     public DerivedSchemaTO readDerivedSchema(final AttributableType type, final String name) {\n         DerivedSchemaTO derivedSchemaTO = null;\n         try {\n-            derivedSchemaTO = SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"derivedSchema/\" + type.name().toLowerCase() + \"/read/\" + name + \".json\",\n-                    DerivedSchemaTO.class);\n+            derivedSchemaTO = getService(SchemaService.class).read(type, SchemaType.DERIVED, name);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading a derived user schema\", e);\n         }\n@@ -253,8 +239,7 @@ public DerivedSchemaTO readDerivedSchema(final AttributableType type, final Stri\n      * @param schemaTO updated\n      */\n     public void updateDerivedSchema(final AttributableType type, final DerivedSchemaTO schemaTO) {\n-        SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"derivedSchema/\" + type.name().toLowerCase() + \"/update\", schemaTO, DerivedSchemaTO.class);\n+        getService(SchemaService.class).update(type, SchemaType.DERIVED, schemaTO.getName(), schemaTO);\n     }\n \n     /**\n@@ -263,8 +248,7 @@ public void updateDerivedSchema(final AttributableType type, final DerivedSchema\n      * @param schemaTO updated\n      */\n     public void updateVirtualSchema(final AttributableType type, final VirtualSchemaTO schemaTO) {\n-        SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"virtualSchema/\" + type.name().toLowerCase() + \"/update\", schemaTO, VirtualSchemaTO.class);\n+        getService(SchemaService.class).update(type, SchemaType.VIRTUAL, schemaTO.getName(), schemaTO);\n     }\n \n     /**\n@@ -273,9 +257,7 @@ public void updateVirtualSchema(final AttributableType type, final VirtualSchema\n      * @param name (e.g.:surname)\n      */\n     public DerivedSchemaTO deleteDerivedSchema(final AttributableType type, String name) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"derivedSchema/\" + type.name().toLowerCase() + \"/delete/\" + name + \".json\",\n-                DerivedSchemaTO.class);\n+        return getService(SchemaService.class).delete(type, SchemaType.DERIVED, name);\n     }\n \n     /**\n@@ -284,9 +266,7 @@ public DerivedSchemaTO deleteDerivedSchema(final AttributableType type, String n\n      * @param name (e.g.:surname)\n      */\n     public VirtualSchemaTO deleteVirtualSchema(final AttributableType type, final String name) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"virtualSchema/\" + type.name().toLowerCase() + \"/delete/\" + name + \".json\",\n-                VirtualSchemaTO.class);\n+        return getService(SchemaService.class).delete(type, SchemaType.VIRTUAL, name);\n     }\n \n     /**\n@@ -296,8 +276,7 @@ public List<String> getAllValidatorClasses() {\n         List<String> validators = null;\n \n         try {\n-            validators = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"configuration/validators.json\", String[].class));\n+            validators = new ArrayList<String>(getService(ConfigurationService.class).getValidators());\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting all validators\", e);\n         }"},{"sha":"3bf978c1b2db7fc46ecdc36b1cbc39d33a8a79f0","filename":"console/src/main/java/org/apache/syncope/console/rest/TaskRestClient.java","status":"modified","additions":36,"deletions":48,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -18,17 +18,19 @@\n  */\n package org.apache.syncope.console.rest;\n \n-import java.util.Arrays;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+\n import org.apache.syncope.client.to.NotificationTaskTO;\n import org.apache.syncope.client.to.PropagationTaskTO;\n import org.apache.syncope.client.to.SchedTaskTO;\n import org.apache.syncope.client.to.SyncTaskTO;\n import org.apache.syncope.client.to.TaskExecTO;\n import org.apache.syncope.client.to.TaskTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.console.SyncopeSession;\n+import org.apache.syncope.services.TaskService;\n+import org.apache.syncope.types.TaskType;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -37,6 +39,8 @@\n @Component\n public class TaskRestClient extends BaseRestClient implements ExecutionRestClient {\n \n+    private static final long serialVersionUID = 6284485820911028843L;\n+\n     /**\n      * Return a list of job classes.\n      *\n@@ -46,8 +50,7 @@ public List<String> getJobClasses() {\n         List<String> jobClasses = null;\n \n         try {\n-            jobClasses = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"task/jobClasses.json\", String[].class));\n+            jobClasses = new ArrayList<String>(getService(TaskService.class).getJobClasses());\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting all job classes\", e);\n         }\n@@ -58,8 +61,7 @@ public List<String> getSyncActionsClasses() {\n         List<String> actions = null;\n \n         try {\n-            actions = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"task/syncActionsClasses.json\", String[].class));\n+            actions = new ArrayList<String>(getService(TaskService.class).getSyncActionsClasses());\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting all sync actions classes\", e);\n         }\n@@ -73,8 +75,7 @@ public List<String> getSyncActionsClasses() {\n      * @return number of stored tasks.\n      */\n     public Integer count(final String kind) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"task/{kind}/count.json\", Integer.class, kind);\n+        return getService(TaskService.class).count(TaskType.fromString(kind));\n     }\n \n     /**\n@@ -86,42 +87,34 @@ public Integer count(final String kind) {\n      */\n     public <T extends TaskTO> List<T> listTasks(final Class<T> reference, final int page, final int size) {\n         List<T> result = Collections.emptyList();\n+        result = getService(TaskService.class).list(getTaskType(reference), page, size);\n+        return result;\n+    }\n \n-        if (PropagationTaskTO.class == reference) {\n-            result = (List<T>) Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"task/propagation/list/{page}/{size}.json\", PropagationTaskTO[].class, page, size));\n-        } else if (NotificationTaskTO.class == reference) {\n-            result = (List<T>) Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"task/notification/list/{page}/{size}.json\", NotificationTaskTO[].class, page, size));\n-        } else if (SchedTaskTO.class == reference) {\n-            result = (List<T>) Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"task/sched/list/{page}/{size}.json\", SchedTaskTO[].class, page, size));\n-        } else if (SyncTaskTO.class == reference) {\n-            result = (List<T>) Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"task/sync/list/{page}/{size}.json\", SyncTaskTO[].class, page, size));\n+    private TaskType getTaskType(Class<?> reference) {\n+        TaskType result = null;\n+        if (PropagationTaskTO.class.equals(reference)) {\n+            result = TaskType.PROPAGATION;\n+        } else if (NotificationTaskTO.class.equals(reference)) {\n+            result = TaskType.NOTIFICATION;\n+        } else if (SchedTaskTO.class.equals(reference)) {\n+            result = TaskType.SCHEDULED;\n+        } else if (SyncTaskTO.class.equals(reference)) {\n+            result = TaskType.SYNCHRONIZATION;\n         }\n-\n         return result;\n     }\n \n     public PropagationTaskTO readPropagationTask(final Long taskId) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"task/read/{taskId}\", PropagationTaskTO.class, taskId);\n+        return getService(TaskService.class).read(TaskType.PROPAGATION, taskId);\n     }\n \n     public NotificationTaskTO readNotificationTask(final Long taskId) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"task/read/{taskId}\", NotificationTaskTO.class, taskId);\n+        return getService(TaskService.class).read(TaskType.NOTIFICATION, taskId);\n     }\n \n     public <T extends SchedTaskTO> T readSchedTask(final Class<T> reference, final Long taskId) {\n-        if (SyncTaskTO.class.getName().equals(reference.getName())) {\n-            return (T) SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"task/read/{taskId}\", SyncTaskTO.class, taskId);\n-        } else {\n-            return (T) SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"task/read/{taskId}\", SchedTaskTO.class, taskId);\n-        }\n+            return getService(TaskService.class).read(getTaskType(reference), taskId);\n     }\n \n     /**\n@@ -131,8 +124,10 @@ public <T extends SchedTaskTO> T readSchedTask(final Class<T> reference, final L\n      */\n     @Override\n     public List<TaskExecTO> listExecutions() {\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"task/execution/list\", TaskExecTO[].class));\n+        throw new UnsupportedOperationException(\"You need to specify type of executed tasks to be listed\");\n+//        return getService(TaskService.class).listExecutions();\n+//                Arrays.asList(SyncopeSession.get().getRestTemplate()\n+//                .getForObject(baseURL + \"task/execution/list\", TaskExecTO[].class)); FIXME interface?\n     }\n \n     /**\n@@ -141,8 +136,7 @@ public List<TaskExecTO> listExecutions() {\n      * @param taskId task to delete\n      */\n     public TaskTO delete(final Long taskId, final Class<? extends TaskTO> taskToClass) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"task/delete/{taskId}\", taskToClass, taskId);\n+        return getService(TaskService.class).delete(getTaskType(taskToClass), taskId);\n     }\n \n     @Override\n@@ -156,8 +150,7 @@ public void startExecution(final Long taskId) {\n      * @param taskId task id\n      */\n     public void startExecution(final Long taskId, boolean dryRun) {\n-        SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"task/execute/{taskId}?dryRun={dryRun}\", null, TaskExecTO.class, taskId, dryRun);\n+        getService(TaskService.class).execute(taskId, dryRun);\n     }\n \n     /**\n@@ -167,27 +160,22 @@ public void startExecution(final Long taskId, boolean dryRun) {\n      */\n     @Override\n     public void deleteExecution(final Long taskExecId) {\n-        SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"task/execution/delete/{execId}\", TaskExecTO.class, taskExecId);\n+        getService(TaskService.class).deleteExecution(taskExecId);\n     }\n \n     public SyncTaskTO createSyncTask(final SyncTaskTO taskTO) {\n-        return SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"task/create/sync\", taskTO, SyncTaskTO.class);\n+        return getService(TaskService.class).create(taskTO);\n     }\n \n     public SchedTaskTO createSchedTask(final SchedTaskTO taskTO) {\n-        return SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"task/create/sched\", taskTO, SchedTaskTO.class);\n+        return getService(TaskService.class).create(taskTO);\n     }\n \n     public SchedTaskTO updateSchedTask(final SchedTaskTO taskTO) {\n-        return SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"task/update/sched\", taskTO, SchedTaskTO.class);\n+        return getService(TaskService.class).update(taskTO.getId(), taskTO);\n     }\n \n     public SyncTaskTO updateSyncTask(final SyncTaskTO taskTO) {\n-        return SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"task/update/sync\", taskTO, SyncTaskTO.class);\n+        return getService(TaskService.class).update(taskTO.getId(), taskTO);\n     }\n }"},{"sha":"bb4a7247e4bccb086c059597776852f359ffef25","filename":"console/src/main/java/org/apache/syncope/console/rest/UserRequestRestClient.java","status":"modified","additions":9,"deletions":12,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -18,39 +18,36 @@\n  */\n package org.apache.syncope.console.rest;\n \n-import java.util.Arrays;\n import java.util.List;\n+\n import org.apache.syncope.client.mod.UserMod;\n import org.apache.syncope.client.to.UserRequestTO;\n import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.console.SyncopeSession;\n+import org.apache.syncope.services.UserRequestService;\n import org.springframework.stereotype.Component;\n \n @Component\n public class UserRequestRestClient extends BaseRestClient {\n \n+    private static final long serialVersionUID = 171408947099311191L;\n+\n     public List<UserRequestTO> list() {\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"user/request/list\", UserRequestTO[].class));\n+        return getService(UserRequestService.class).list();\n     }\n \n     public UserRequestTO delete(final Long requestId) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"user/request/deleteRequest/{requestId}\", UserRequestTO.class, requestId);\n+        return getService(UserRequestService.class).delete(requestId);\n     }\n \n     public UserRequestTO requestCreate(final UserTO userTO) {\n-        return SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"user/request/create\", userTO, UserRequestTO.class);\n+        return getService(UserRequestService.class).create(userTO);\n     }\n \n     public UserRequestTO requestUpdate(final UserMod userMod) {\n-        return SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"user/request/update\", userMod, UserRequestTO.class);\n+        return getService(UserRequestService.class).update(userMod);\n     }\n \n     public UserRequestTO requestDelete(final Long userId) {\n-        return SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"user/request/delete/\", userId, UserRequestTO.class);\n+        return getService(UserRequestService.class).delete(userId);\n     }\n }"},{"sha":"7aab07c0259636f68212d665036787d6e205f3fa","filename":"console/src/main/java/org/apache/syncope/console/rest/UserRestClient.java","status":"modified","additions":36,"deletions":48,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -18,15 +18,19 @@\n  */\n package org.apache.syncope.console.rest;\n \n-import java.util.Arrays;\n import java.util.List;\n+\n+import org.apache.syncope.client.mod.StatusMod;\n+import org.apache.syncope.client.mod.StatusMod.Status;\n import org.apache.syncope.client.mod.UserMod;\n import org.apache.syncope.client.search.NodeCond;\n import org.apache.syncope.client.to.ConnObjectTO;\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.console.SyncopeSession;\n import org.apache.syncope.console.commons.StatusBean;\n+import org.apache.syncope.services.ResourceService;\n+import org.apache.syncope.services.UserService;\n+import org.apache.syncope.types.AttributableType;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -35,9 +39,11 @@\n @Component\n public class UserRestClient extends AbstractAttributableRestClient {\n \n+    private static final long serialVersionUID = -1575748964398293968L;\n+\n     @Override\n     public Integer count() {\n-        return SyncopeSession.get().getRestTemplate().getForObject(baseURL + \"user/count.json\", Integer.class);\n+        return getService(UserService.class).count();\n     }\n \n     /**\n@@ -49,32 +55,26 @@ public Integer count() {\n      */\n     @Override\n     public List<UserTO> list(final int page, final int size) {\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"user/list/{page}/{size}.json\", UserTO[].class, page, size));\n+        return getService(UserService.class).list(page, size);\n     }\n \n-    public UserTO create(final UserTO userTO)\n-            throws SyncopeClientCompositeErrorException {\n-\n-        return SyncopeSession.get().getRestTemplate().postForObject(baseURL + \"user/create\", userTO, UserTO.class);\n+    public UserTO create(final UserTO userTO) throws SyncopeClientCompositeErrorException {\n+        return getService(UserService.class).create(userTO);\n     }\n \n-    public UserTO update(UserMod userModTO)\n-            throws SyncopeClientCompositeErrorException {\n-\n-        return SyncopeSession.get().getRestTemplate().postForObject(baseURL + \"user/update\", userModTO, UserTO.class);\n+    public UserTO update(UserMod userModTO) throws SyncopeClientCompositeErrorException {\n+        return getService(UserService.class).update(userModTO.getId(), userModTO);\n     }\n \n     @Override\n     public UserTO delete(final Long id) {\n-        return SyncopeSession.get().getRestTemplate().getForObject(baseURL + \"user/delete/{userId}\", UserTO.class, id);\n+        return getService(UserService.class).delete(id);\n     }\n \n     public UserTO read(final Long id) {\n         UserTO userTO = null;\n         try {\n-            userTO = SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"user/read/{userId}.json\", UserTO.class, id);\n+            userTO = getService(UserService.class).read(id);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading a user\", e);\n         }\n@@ -84,80 +84,68 @@ public UserTO read(final Long id) {\n     public UserTO read(final String username) {\n         UserTO userTO = null;\n         try {\n-            userTO = SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"user/readByUsername/{username}.json\", UserTO.class, username);\n+            userTO = getService(UserService.class).read(username);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading a user\", e);\n         }\n         return userTO;\n     }\n \n     public UserTO readProfile() {\n-        return SyncopeSession.get().getRestTemplate().getForObject(baseURL + \"user/read/self\", UserTO.class);\n+        return getService(UserService.class).readSelf();\n     }\n \n     @Override\n     public Integer searchCount(final NodeCond searchCond) {\n-        return SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"user/search/count.json\", searchCond, Integer.class);\n+        return getService(UserService.class).searchCount(searchCond);\n     }\n \n     @Override\n     public List<UserTO> search(final NodeCond searchCond, final int page, final int size)\n             throws SyncopeClientCompositeErrorException {\n-\n-        return Arrays.asList(SyncopeSession.get().getRestTemplate().postForObject(\n-                baseURL + \"user/search/{page}/{size}\", searchCond, UserTO[].class, page, size));\n+        return getService(UserService.class).search(searchCond, page, size);\n     }\n \n     @Override\n     public ConnObjectTO getRemoteObject(final String resourceName, final String objectId)\n             throws SyncopeClientCompositeErrorException {\n-\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"/resource/{resourceName}/read/USER/{objectId}.json\",\n-                ConnObjectTO.class, resourceName, objectId);\n+        return getService(ResourceService.class).getConnector(resourceName, AttributableType.USER, objectId);\n     }\n \n-    public UserTO reactivate(long userId, List<StatusBean> statuses)\n-            throws SyncopeClientCompositeErrorException {\n-\n+    public UserTO reactivate(long userId, List<StatusBean> statuses) throws SyncopeClientCompositeErrorException {\n         return enable(userId, statuses, true);\n     }\n \n-    public UserTO suspend(long userId, List<StatusBean> statuses)\n-            throws SyncopeClientCompositeErrorException {\n-\n+    public UserTO suspend(long userId, List<StatusBean> statuses) throws SyncopeClientCompositeErrorException {\n         return enable(userId, statuses, false);\n     }\n \n     private UserTO enable(final long userId, final List<StatusBean> statuses, final boolean enable)\n             throws SyncopeClientCompositeErrorException {\n \n-        final StringBuilder query = new StringBuilder();\n+        StatusMod statusMod = new StatusMod();\n+        statusMod.setId(userId);\n+\n+        statusMod.setStatus(enable\n+                ? Status.REACTIVATE\n+                : Status.SUSPEND);\n \n-        query.append(baseURL).append(\"user/\").append(enable\n-                ? \"reactivate/\"\n-                : \"suspend/\").append(userId).append(\"?\").\n-                // perform on resource if and only if resources have been speciofied\n-                append(\"performRemotely=\").append(!statuses.isEmpty()).append(\"&\");\n+        // perform on resource if and only if resources have been speciofied\n+        statusMod.setUpdateRemote(!statuses.isEmpty());\n \n-        boolean performLocal = false;\n+        // perform on syncope if and only if it has been requested\n+        statusMod.setUpdateInternal(false);\n \n         for (StatusBean status : statuses) {\n             if ((enable && !status.getStatus().isActive()) || (!enable && status.getStatus().isActive())) {\n-\n                 if (\"Syncope\".equals(status.getResourceName())) {\n-                    performLocal = true;\n+                    statusMod.setUpdateInternal(true);\n                 } else {\n-                    query.append(\"resourceNames=\").append(status.getResourceName()).append(\"&\");\n+                    statusMod.getExcludeResources().add(status.getResourceName());\n                 }\n             }\n         }\n \n-        // perform on syncope if and only if it has been requested\n-        query.append(\"performLocally=\").append(performLocal);\n-\n-        return SyncopeSession.get().getRestTemplate().getForObject(query.toString(), UserTO.class);\n+        return getService(UserService.class).setStatus(userId, statusMod);\n     }\n }"},{"sha":"099cb337c87084e7b4a1b28734b0eff94b8280af","filename":"console/src/main/java/org/apache/syncope/console/rest/WorkflowRestClient.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FWorkflowRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FWorkflowRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FWorkflowRestClient.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -18,22 +18,21 @@\n  */\n package org.apache.syncope.console.rest;\n \n-import org.springframework.stereotype.Component;\n import org.apache.syncope.client.to.WorkflowDefinitionTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.console.SyncopeSession;\n+import org.apache.syncope.services.WorkflowService;\n+import org.springframework.stereotype.Component;\n \n @Component\n public class WorkflowRestClient extends BaseRestClient {\n \n-    public WorkflowDefinitionTO getDefinition()\n-            throws SyncopeClientCompositeErrorException {\n-        return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"workflow/definition/user.json\", WorkflowDefinitionTO.class);\n+    private static final long serialVersionUID = 5049285686167071017L;\n+\n+    public WorkflowDefinitionTO getDefinition() throws SyncopeClientCompositeErrorException {\n+        return getService(WorkflowService.class).getDefinition(\"user\");\n     }\n \n-    public void updateDefinition(final WorkflowDefinitionTO workflowDef)\n-            throws SyncopeClientCompositeErrorException {\n-        SyncopeSession.get().getRestTemplate().put(baseURL + \"workflow/definition/user.json\", workflowDef);\n+    public void updateDefinition(final WorkflowDefinitionTO workflowDef) throws SyncopeClientCompositeErrorException {\n+        getService(WorkflowService.class).updateDefinition(\"user\", workflowDef);\n     }\n }"},{"sha":"8e3cf912e30e63d812385a65266dc136432bc820","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":15,"deletions":21,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03afb02957ea3095dcf6ff29c21da2457745f904/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03afb02957ea3095dcf6ff29c21da2457745f904/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=03afb02957ea3095dcf6ff29c21da2457745f904","patch":"@@ -50,7 +50,6 @@\n import org.apache.syncope.services.proxy.ResourceServiceProxy;\n import org.apache.syncope.services.proxy.RoleServiceProxy;\n import org.apache.syncope.services.proxy.SchemaServiceProxy;\n-import org.apache.syncope.services.proxy.SpringRestTemplate;\n import org.apache.syncope.services.proxy.TaskServiceProxy;\n import org.apache.syncope.services.proxy.UserRequestServiceProxy;\n import org.apache.syncope.services.proxy.UserServiceProxy;\n@@ -66,7 +65,7 @@\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = { \"classpath:restClientContext.xml\", \"classpath:testJDBCContext.xml\" })\n-public abstract class AbstractTest implements SpringRestTemplate {\n+public abstract class AbstractTest {\n \n     protected static AttributeTO attributeTO(final String schema, final String value) {\n         AttributeTO attr = new AttributeTO();\n@@ -146,25 +145,20 @@ public void setupRestTemplate(final String uid, final String pwd) {\n     @Before\n     public void resetRestTemplate() {\n         setupRestTemplate(ADMIN_UID, ADMIN_PWD);\n-        userService = new UserServiceProxy(BASE_URL, this);\n-        roleService = new RoleServiceProxy(BASE_URL, this);\n-        resourceService = new ResourceServiceProxy(BASE_URL, this);\n-        entitlementService = new EntitlementServiceProxy(BASE_URL, this);\n-        configurationService = new ConfigurationServiceProxy(BASE_URL, this);\n-        connectorService = new ConnectorServiceProxy(BASE_URL, this);\n-        loggerService = new LoggerServiceProxy(BASE_URL, this);\n-        reportService = new ReportServiceProxy(BASE_URL, this);\n-        taskService = new TaskServiceProxy(BASE_URL, this);\n-        policyService = new PolicyServiceProxy(BASE_URL, this);\n-        workflowService = new WorkflowServiceProxy(BASE_URL, this);\n-        notificationService = new NotificationServiceProxy(BASE_URL, this);\n-        schemaService = new SchemaServiceProxy(BASE_URL, this);\n-        userRequestService = new UserRequestServiceProxy(BASE_URL, this);\n-    }\n-\n-    @Override\n-    public RestTemplate getRestTemplate() {\n-        return restTemplate;\n+        userService = new UserServiceProxy(BASE_URL, restTemplate);\n+        roleService = new RoleServiceProxy(BASE_URL, restTemplate);\n+        resourceService = new ResourceServiceProxy(BASE_URL, restTemplate);\n+        entitlementService = new EntitlementServiceProxy(BASE_URL, restTemplate);\n+        configurationService = new ConfigurationServiceProxy(BASE_URL, restTemplate);\n+        connectorService = new ConnectorServiceProxy(BASE_URL, restTemplate);\n+        loggerService = new LoggerServiceProxy(BASE_URL, restTemplate);\n+        reportService = new ReportServiceProxy(BASE_URL, restTemplate);\n+        taskService = new TaskServiceProxy(BASE_URL, restTemplate);\n+        policyService = new PolicyServiceProxy(BASE_URL, restTemplate);\n+        workflowService = new WorkflowServiceProxy(BASE_URL, restTemplate);\n+        notificationService = new NotificationServiceProxy(BASE_URL, restTemplate);\n+        schemaService = new SchemaServiceProxy(BASE_URL, restTemplate);\n+        userRequestService = new UserRequestServiceProxy(BASE_URL, restTemplate);\n     }\n \n }"}]}