{"sha":"d42c2cf923d22b1cb865ef263d55db945589d5d9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ0MmMyY2Y5MjNkMjJiMWNiODY1ZWYyNjNkNTVkYjk0NTU4OWQ1ZDk=","commit":{"author":{"name":"Marco Di Sabatino","email":"mdisabatino@apache.org","date":"2020-04-09T11:45:46Z"},"committer":{"name":"Francesco ChicchiriccÃ²","email":"ilgrosso@users.noreply.github.com","date":"2020-04-10T08:27:53Z"},"message":"[SYNCOPE-160] Preliminary settings","tree":{"sha":"ed41de45a6fc68d8f6b71d17702681bfc17665eb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ed41de45a6fc68d8f6b71d17702681bfc17665eb"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d42c2cf923d22b1cb865ef263d55db945589d5d9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d42c2cf923d22b1cb865ef263d55db945589d5d9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d42c2cf923d22b1cb865ef263d55db945589d5d9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d42c2cf923d22b1cb865ef263d55db945589d5d9/comments","author":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d50672f307a5718c027c0ea489822d243c56dcc2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d50672f307a5718c027c0ea489822d243c56dcc2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d50672f307a5718c027c0ea489822d243c56dcc2"}],"stats":{"total":1215,"additions":1111,"deletions":104},"files":[{"sha":"f1733f52a38403b8ee04bb33e7fce86b7b2fb139","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/init/ClassPathScanImplementationLookup.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -241,7 +241,7 @@ public void load() {\n         idmPages.sort(Comparator.comparing(o -> o.getAnnotation(IdMPage.class).priority()));\n         idmPages = Collections.unmodifiableList(idmPages);\n \n-        amPages.sort(Comparator.comparing(o -> o.getAnnotation(IdMPage.class).priority()));\n+        amPages.sort(Comparator.comparing(o -> o.getAnnotation(AMPage.class).priority()));\n         amPages = Collections.unmodifiableList(amPages);\n \n         extPages.sort(Comparator.comparing(o -> o.getAnnotation(ExtPage.class).priority()));"},{"sha":"503eff0041dbc57e2fab4f5abcaa74738f1972ba","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/client/package-info.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2Fpackage-info.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+@XmlSchema(namespace = SyncopeConstants.NS)\n+@XmlJavaTypeAdapters({ @XmlJavaTypeAdapter(type = Date.class, value = DateAdapter.class), })\n+package org.apache.syncope.common.lib.to.client;\n+\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.jaxb.DateAdapter;\n+\n+import javax.xml.bind.annotation.XmlSchema;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapters;\n+\n+import java.util.Date;"},{"sha":"54e71baf275b1a0f40a8e64cf9fcfd0ed1a0b937","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/package-info.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fpackage-info.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+@XmlSchema(namespace = SyncopeConstants.NS)\n+@XmlJavaTypeAdapters({ @XmlJavaTypeAdapter(type = Date.class, value = DateAdapter.class), })\n+package org.apache.syncope.common.lib.to;\n+\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.jaxb.DateAdapter;\n+\n+import javax.xml.bind.annotation.XmlSchema;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapters;\n+\n+import java.util.Date;"},{"sha":"5938dd92de05806913d5a3c03c5bd5bc33230388","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMEntitlement.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -34,6 +34,26 @@ public final class AMEntitlement {\n \n     public static final String GATEWAY_ROUTE_PUSH = \"GATEWAY_ROUTE_PUSH\";\n \n+    public static final String CLIENTAPP_READ = \"CLIENTAPP_READ\";\n+\n+    public static final String CLIENTAPP_LIST = \"CLIENTAPP_LIST\";\n+\n+    public static final String CLIENTAPP_CREATE = \"CLIENTAPP_CREATE\";\n+\n+    public static final String CLIENTAPP_UPDATE = \"CLIENTAPP_CREATE\";\n+\n+    public static final String CLIENTAPP_DELETE = \"CLIENTAPP_DELETE\";\n+\n+    public static final String AUTH_MODULE_LIST = \"AUTH_MODULE_LIST\";\n+\n+    public static final String AUTH_MODULE_CREATE = \"AUTH_MODULE_CREATE\";\n+\n+    public static final String AUTH_MODULE_READ = \"AUTH_MODULE_READ\";\n+\n+    public static final String AUTH_MODULE_UPDATE = \"AUTH_MODULE_UPDATE\";\n+\n+    public static final String AUTH_MODULE_DELETE = \"AUTH_MODULE_DELETE\";\n+\n     private static final Set<String> VALUES;\n \n     static {"},{"sha":"1c05727aca3b6375777e8766f38d2e7552876cff","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMImplementationType.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMImplementationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMImplementationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMImplementationType.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import java.util.Map;\n+\n+public final class AMImplementationType {\n+\n+    public static final String AUTH_POLICY_CONFIGURATIONS = \"AUTH_POLICY_CONFIGURATIONS\";\n+\n+    public static final String ACCESS_POLICY_CONFIGURATIONS = \"ACCESS_POLICY_CONFIGURATIONS\";\n+\n+    public static final String ATTR_RELEASE_POLICY_CONFIGURATIONS = \"ATTR_RELEASE_CONFIGURATIONS\";\n+\n+    private AMImplementationType() {\n+        // private constructor for static utility class\n+    }\n+\n+    private static final Map<String, String> VALUES = Map.ofEntries(\n+            Pair.of(AUTH_POLICY_CONFIGURATIONS,\n+                    \"org.apache.syncope.common.lib.policy.AuthPolicyConf\"),\n+            Pair.of(ATTR_RELEASE_POLICY_CONFIGURATIONS,\n+                    \"org.apache.syncope.common.lib.policy.AttrReleasePolicyConf\"),\n+            Pair.of(ACCESS_POLICY_CONFIGURATIONS,\n+                    \"org.apache.syncope.common.lib.policy.AccessPolicyConf\"));\n+\n+    public static Map<String, String> values() {\n+        return VALUES;\n+    }\n+}"},{"sha":"93966a524023f5c03c6f781da1e094fd8c947cf6","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/OIDCSubjectType.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCSubjectType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCSubjectType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCSubjectType.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum OIDCSubjectType {\n+    PAIRWISE,\n+    PUBLIC\n+\n+}"},{"sha":"945ab808c201babd1b4ffa69a64b99d4e92f6125","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/ResourceTO.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -82,6 +82,10 @@ public class ResourceTO implements EntityTO {\n \n     private String provisionSorter;\n \n+    private String authPolicy;\n+\n+    private String accessPolicy;\n+\n     private final List<ConnConfProperty> confOverride = new ArrayList<>();\n \n     private boolean overrideCapabilities = false;\n@@ -205,6 +209,22 @@ public void setProvisionSorter(final String provisionSorter) {\n         this.provisionSorter = provisionSorter;\n     }\n \n+    public String getAuthPolicy() {\n+        return authPolicy;\n+    }\n+\n+    public void setAuthPolicy(final String authPolicy) {\n+        this.authPolicy = authPolicy;\n+    }\n+\n+    public String getAccessPolicy() {\n+        return accessPolicy;\n+    }\n+\n+    public void setAccessPolicy(final String accessPolicy) {\n+        this.accessPolicy = accessPolicy;\n+    }\n+\n     @JsonIgnore\n     public Optional<ProvisionTO> getProvision(final String anyType) {\n         return provisions.stream().filter(\n@@ -294,9 +314,12 @@ public boolean equals(final Object obj) {\n                 append(accountPolicy, other.accountPolicy).\n                 append(pullPolicy, other.pullPolicy).\n                 append(pushPolicy, other.pushPolicy).\n+                append(authPolicy, other.authPolicy).\n+                append(accessPolicy, other.accessPolicy).\n                 append(confOverride, other.confOverride).\n                 append(capabilitiesOverride, other.capabilitiesOverride).\n                 append(propagationActions, other.propagationActions).\n+                append(provisionSorter, other.provisionSorter).\n                 build();\n     }\n \n@@ -319,10 +342,13 @@ public int hashCode() {\n                 append(accountPolicy).\n                 append(pullPolicy).\n                 append(pushPolicy).\n+                append(authPolicy).\n+                append(accessPolicy).\n                 append(confOverride).\n                 append(overrideCapabilities).\n                 append(capabilitiesOverride).\n                 append(propagationActions).\n+                append(provisionSorter).\n                 build();\n     }\n }"},{"sha":"037f782e2179b15d2a7761df0ebb4294a6f888e2","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/RealmTO.java","status":"modified","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -54,6 +54,12 @@ public class RealmTO extends BaseBean implements NamedEntityTO, TemplatableTO {\n \n     private String passwordPolicy;\n \n+    private String authPolicy;\n+\n+    private String accessPolicy;\n+\n+    private String attrReleasePolicy;\n+\n     private final List<String> actions = new ArrayList<>();\n \n     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n@@ -114,6 +120,30 @@ public void setPasswordPolicy(final String passwordPolicy) {\n         this.passwordPolicy = passwordPolicy;\n     }\n \n+    public String getAuthPolicy() {\n+        return authPolicy;\n+    }\n+\n+    public void setAuthPolicy(final String authPolicy) {\n+        this.authPolicy = authPolicy;\n+    }\n+\n+    public String getAccessPolicy() {\n+        return accessPolicy;\n+    }\n+\n+    public void setAccessPolicy(final String accessPolicy) {\n+        this.accessPolicy = accessPolicy;\n+    }\n+\n+    public String getAttrReleasePolicy() {\n+        return attrReleasePolicy;\n+    }\n+\n+    public void setAttrReleasePolicy(final String attrReleasePolicy) {\n+        this.attrReleasePolicy = attrReleasePolicy;\n+    }\n+\n     @XmlElementWrapper(name = \"actions\")\n     @XmlElement(name = \"action\")\n     @JsonProperty(\"actions\")\n@@ -153,6 +183,9 @@ public boolean equals(final Object obj) {\n                 append(fullPath, other.fullPath).\n                 append(accountPolicy, other.accountPolicy).\n                 append(passwordPolicy, other.passwordPolicy).\n+                append(authPolicy, other.authPolicy).\n+                append(accessPolicy, other.accessPolicy).\n+                append(attrReleasePolicy, other.attrReleasePolicy).\n                 append(actions, other.actions).\n                 append(templates, other.templates).\n                 append(resources, other.resources).\n@@ -168,6 +201,9 @@ public int hashCode() {\n                 append(fullPath).\n                 append(accountPolicy).\n                 append(passwordPolicy).\n+                append(authPolicy).\n+                append(accessPolicy).\n+                append(attrReleasePolicy).\n                 append(actions).\n                 append(templates).\n                 append(resources)."},{"sha":"e4ad8017d159b68793c9ec622ee93378573bffd2","filename":"core/am/logic/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fam%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fam%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fpom.xml?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -43,6 +43,12 @@ under the License.\n       <artifactId>syncope-core-idrepo-logic</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.syncope.common.am</groupId>\n+      <artifactId>syncope-common-am-lib</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n   </dependencies>\n \n   <build>"},{"sha":"da5d3932df4c5a51a0c250ff33060f4cabda1db2","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/init/AMImplementationTypeLoader.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAMImplementationTypeLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAMImplementationTypeLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAMImplementationTypeLoader.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.init;\n+\n+import org.apache.syncope.common.lib.types.AMImplementationType;\n+import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n+import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n+import org.springframework.core.Ordered;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AMImplementationTypeLoader implements SyncopeCoreLoader {\n+\n+    @Override\n+    public int getOrder() {\n+        return Ordered.HIGHEST_PRECEDENCE;\n+    }\n+\n+    @Override\n+    public void load() {\n+        ImplementationTypesHolder.getInstance().putAll(AMImplementationType.values());\n+    }\n+}"},{"sha":"e887aefecda6ebdefce5b67be3cfb09e9bffa1d1","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.init;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n+import org.apache.syncope.common.lib.types.AMImplementationType;\n+import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.type.filter.AssignableTypeFilter;\n+import org.springframework.util.ClassUtils;\n+import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n+\n+/**\n+ * Cache class names for all implementations of Syncope interfaces found in classpath, for later usage.\n+ */\n+public class ClassPathScanImplementationLookup implements SyncopeCoreLoader {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ImplementationLookup.class);\n+\n+    private static final String DEFAULT_BASE_PACKAGE = \"org.apache.syncope.core\";\n+\n+    private Map<String, Set<String>> classNames;\n+\n+    private Map<Class<? extends AuthPolicyConf>, Class<? extends AuthPolicyConf>> authPolicyClasses;\n+\n+    private Map<Class<? extends AccessPolicyConf>, Class<? extends AccessPolicyConf>> accessPolicyClasses;\n+\n+    @Override\n+    public int getOrder() {\n+        return Ordered.HIGHEST_PRECEDENCE;\n+    }\n+\n+    /**\n+     * This method can be overridden by subclasses to customize classpath scan.\n+     *\n+     * @return basePackage for classpath scanning\n+     */\n+    protected static String getBasePackage() {\n+        return DEFAULT_BASE_PACKAGE;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void load() {\n+        classNames = new HashMap<>();\n+        ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n+        ImplementationTypesHolder.getInstance().getValues().forEach((typeName, typeInterface) -> {\n+            classNames.put(typeName, new HashSet<>());\n+            try {\n+                scanner.addIncludeFilter(new AssignableTypeFilter(\n+                        ClassUtils.resolveClassName(typeInterface, ClassUtils.getDefaultClassLoader())));\n+            } catch (IllegalArgumentException e) {\n+                LOG.error(\"Could not find class, ignoring...\", e);\n+            }\n+        });\n+\n+        authPolicyClasses = new HashMap<>();\n+        accessPolicyClasses = new HashMap<>();\n+\n+        scanner.findCandidateComponents(getBasePackage()).forEach(bd -> {\n+            try {\n+                Class<?> clazz = ClassUtils.resolveClassName(\n+                        Objects.requireNonNull(bd.getBeanClassName()), ClassUtils.getDefaultClassLoader());\n+                boolean isAbstractClazz = Modifier.isAbstract(clazz.getModifiers());\n+\n+                if (AuthPolicyConf.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n+                    classNames.get(AMImplementationType.AUTH_POLICY_CONFIGURATIONS).add(bd.getBeanClassName());\n+                }\n+                if (AccessPolicyConf.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n+                    classNames.get(AMImplementationType.ACCESS_POLICY_CONFIGURATIONS).add(bd.getBeanClassName());\n+                }\n+            } catch (Throwable t) {\n+                LOG.warn(\"Could not inspect class {}\", bd.getBeanClassName(), t);\n+            }\n+        });\n+\n+        classNames = Collections.unmodifiableMap(classNames);\n+        LOG.debug(\"Implementation classes found: {}\", classNames);\n+\n+        authPolicyClasses = Collections.unmodifiableMap(authPolicyClasses);\n+        accessPolicyClasses = Collections.unmodifiableMap(accessPolicyClasses);\n+    }\n+\n+    public Set<String> getClassNames(final String type) {\n+        return classNames.get(type);\n+    }\n+\n+    public Class<? extends AuthPolicyConf> getAuthPolicyConfClass(\n+            final Class<? extends AuthPolicyConf> authPolicyConfClass) {\n+\n+        return authPolicyClasses.get(authPolicyConfClass);\n+    }\n+\n+    public Class<? extends AccessPolicyConf> getAccessPolicyConfClass(\n+            final Class<? extends AccessPolicyConf> accessPolicyConfClass) {\n+\n+        return accessPolicyClasses.get(accessPolicyConfClass);\n+    }\n+}"},{"sha":"5af1669ab8a20d45b6ffcb6c9e5498bfe6721847","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/cocoon/FopSerializer.java","status":"modified","additions":14,"deletions":12,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FFopSerializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FFopSerializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FFopSerializer.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -1,18 +1,20 @@\n /*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.core.logic.cocoon;\n "},{"sha":"8d6085504339fbdbfc9bcffc0cca4ec2ead7eb66","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/cocoon/TextSerializer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FTextSerializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FTextSerializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FTextSerializer.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -7,7 +7,7 @@\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an"},{"sha":"eb5dab6366b5b8082eda6d1b122beeb0e9372940","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/cocoon/XSLTTransformer.java","status":"modified","additions":14,"deletions":12,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -1,18 +1,20 @@\n /*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.core.logic.cocoon;\n "},{"sha":"3e2b23b37fa798882b5e966db79b25a35eb18d82","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Realm.java","status":"modified","additions":21,"deletions":6,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -18,31 +18,46 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import java.util.List;\n-import java.util.Optional;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n \n public interface Realm extends Entity {\n \n     String getName();\n \n+    void setName(String name);\n+\n     Realm getParent();\n \n+    void setParent(Realm parent);\n+\n     String getFullPath();\n \n     AccountPolicy getAccountPolicy();\n \n+    void setAccountPolicy(AccountPolicy accountPolicy);\n+\n     PasswordPolicy getPasswordPolicy();\n \n-    void setName(String name);\n+    void setPasswordPolicy(PasswordPolicy passwordPolicy);\n \n-    void setParent(Realm parent);\n+    void setAuthPolicy(AuthPolicy authPolicy);\n \n-    void setAccountPolicy(AccountPolicy accountPolicy);\n+    AuthPolicy getAuthPolicy();\n \n-    void setPasswordPolicy(PasswordPolicy passwordPolicy);\n+    void setAccessPolicy(AccessPolicy accessPolicy);\n+\n+    AccessPolicy getAccessPolicy();\n+\n+    void setAttrReleasePolicy(AttrReleasePolicy policy);\n+\n+    AttrReleasePolicy getAttrReleasePolicy();\n \n     boolean add(Implementation action);\n "},{"sha":"8ad9c40aac4ec6a2f2eca1b8f752f53053349a50","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/ExternalResource.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -63,7 +63,7 @@ public interface ExternalResource extends ProvidedKeyEntity {\n     void setPullPolicy(PullPolicy pullPolicy);\n \n     PushPolicy getPushPolicy();\n-    \n+\n     Implementation getProvisionSorter();\n \n     void setProvisionSorter(Implementation provisionSorter);"},{"sha":"8e824927c8f376121e94cbd13544de85afc41579","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":43,"deletions":1,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -43,6 +43,48 @@ under the License.\n   <Implementation id=\"DefaultPasswordRuleConf3\" type=\"PASSWORD_RULE\" engine=\"JAVA\"\n                   body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <PasswordPolicyRule policy_id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" implementation_id=\"DefaultPasswordRuleConf3\"/>\n+  \n+  <!-- authentication policies -->\n+  <Implementation id=\"MyDefaultAuthPolicyConf\" type=\"AUTH_POLICY_CONFIGURATIONS\" engine=\"JAVA\"\n+                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf\",\"authModules\":[\"LdapAuthenticationTest\"]}'/>\n+  <AuthPolicy id=\"659b9906-4b6e-4bc0-aca0-6809dff346d4\" name=\"MyDefaultAuthPolicyConf\" description=\"an authentication policy\"/>\n+  <AuthPolicy id=\"b912a0d4-a890-416f-9ab8-84ab077eb028\" name=\"DefaultAuthPolicy\" description=\"Default authentication policy\"/>\n+\n+  <!-- access policies -->\n+  <Implementation id=\"MyDefaultAccessPolicyConf\" type=\"ACCESS_POLICY_CONFIGURATIONS\" engine=\"JAVA\"\n+                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf\",\"name\":\"MyDefaultAccessPolicyConf\",\"enabled\":true,\"ssoEnabled\":true}'/>\n+  <AccessPolicy id=\"419935c7-deb3-40b3-8a9a-683037e523a2\" name=\"MyDefaultAccessPolicyConf\" description=\"an access policy\"/>\n+\n+  <!-- Attr Release Policies -->\n+  <Implementation id=\"AllowedAttrReleasePolicyConf\" type=\"ATTR_RELEASE_CONFIGURATIONS\" engine=\"JAVA\"\n+                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"AllowedAttrReleasePolicy\",\"allowedAttributes\":[\"cn\",\"givenName\",\"uid\"]}'/>\n+  <AttrReleasePolicy id=\"319935c7-deb3-40b3-8a9a-683037e523a2\" name=\"AllowedAttrReleasePolicy\" description=\"allowed attribute release policy policy\"/>\n+\n+  <Implementation id=\"DenyAttrReleasePolicyConf\" type=\"ATTR_RELEASE_CONFIGURATIONS\" engine=\"JAVA\"\n+                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"DenyAttrReleasePolicyConf\"}'/>\n+  <AttrReleasePolicy id=\"219935c7-deb3-40b3-8a9a-683037e523a2\" name=\"DenyAttrReleasePolicy\" description=\"deny attribute release policy policy\"/>\n+  \n+  <!-- Authentication modules -->\n+  <AuthModule id=\"be456831-593d-4003-b273-4c3fb61700df\" name=\"DefaultLDAPAuthModule\" \n+              description=\"LDAP auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.LDAPAuthModuleConf\",\"name\":\"MyLDAPAuthModuleConf\",\"userIdAttribute\":\"uid\",\"bindCredential\":\"Password\",\"ldapUrl\":\"ldap://localhost:1389\",\"searchFilter\":\"cn={user}\",\"baseDn\":\"dc=example,dc=org\",\"subtreeSearch\":true}'/>\n+  <AuthModule id=\"4c3ed7e8-7008-11ea-bc55-0242ac130003\" name=\"DefaultJDBCAuthModule\"\n+              description=\"JDBC auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.JDBCAuthModuleConf\",\"name\":\"MyJDBCAuthModuleConf\", \"sql\":\"SELECT * FROM table WHERE name=?\"}'/>\n+  <AuthModule id=\"4c3ed4e6-7008-11ea-bc55-0242ac130003\" name=\"DefaultGoogleMfaAuthModule\"\n+              description=\"Google Mfa auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf\",\"name\":\"MyGoogleMfaAuthModuleConf\",\"codeDigits\":6,\"issuer\":\"SyncopeTest\"}'/>\n+  <AuthModule id=\"4c3ed8f6-7008-11ea-bc55-0242ac130003\" name=\"DefaultOIDCAuthModule\"\n+              description=\"OIDC auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"name\":\"MyOIDCAuthModuleConf\", \"discoveryUri\":\"www.testurl.com\"}'/>\n+  <AuthModule id=\"4c3ed9d2-7008-11ea-bc55-0242ac130003\" name=\"DefaultSAML2IdPAuthModule\"\n+              description=\"SAML2 IdP auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf\",\"name\":\"MySAML2IdPAuthModuleConf\", \"providerName\":\"testProviderName\",\"serviceProviderMetadataPath\":\"file:/etc/metadata\"}'/>\n+  <AuthModule id=\"4c3edbbc-7008-11ea-bc55-0242ac130003\" name=\"DefaultJaasAuthModule\"\n+              description=\"Jaas auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.JaasAuthModuleConf\",\"name\":\"MyJaasAuthModuleConf\",\"realm\":\"SYNCOPE\",\"kerberosRealmSystemProperty\":\"sample-value\"}'/>\n+  <AuthModule id=\"4c3edc98-7008-11ea-bc55-0242ac130003\" name=\"DefaultStaticAuthModule\"\n+              description=\"Static auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.StaticAuthModuleConf\",\"name\":\"MyStaticAuthModuleConf\",\"users\":{\"user1\": \"testUserPassword123\"}}'/>\n+  <AuthModule id=\"4c3edd60-7008-11ea-bc55-0242ac130003\" name=\"DefaultSyncopeAuthModule\"\n+              description=\"Syncope auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf\",\"name\":\"MySyncopeAuthModuleConf\",\"domain\":\"Master\",\"url\":\"http://mydomain.com/syncope/rest\"}'/>\n+  <AuthModule id=\"07c528f3-63b4-4dc1-a4da-87f35b8bdec8\" name=\"DefaultRadiusAuthModule\"\n+              description=\"Radius auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.RadiusAuthModuleConf\",\"name\":\"MyRadiusAuthModuleConf\",\"protocol\":\"MSCHAPv2\",\"inetAddress\":\"1.2.3.4\", \"sharedSecret\":\"thesecret\"}'/>\n+  <AuthModule id=\"f6e1288d-50d9-45fe-82ee-597c42242205\" name=\"DefaultU2FAuthModule\"\n+              description=\"U2F auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.U2FAuthModuleConf\",\"name\":\"MyU2FAuthModuleConf\",\"expireDevices\":40}'/>\n \n   <RelationshipType id=\"inclusion\" description=\"Models the act that an object is included in another\"/>\n   <RelationshipType id=\"neighborhood\" description=\"Models the act that an object is near another\"/>\n@@ -2383,4 +2425,4 @@ $$ }&#10;\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unassign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unlink]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-</dataset>\n\\ No newline at end of file\n+</dataset>"},{"sha":"899c3a500c88311961b4df63cafedcc25dd5f66a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -19,10 +19,10 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import javax.persistence.EntityManager;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.DAO;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Configurable;"},{"sha":"b0abd085c0bc8290446656f8340b277681157cd5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -32,6 +32,8 @@\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.ProvisioningPolicy;\n@@ -41,6 +43,7 @@\n import org.springframework.context.annotation.Lazy;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n \n @Repository\n public class JPARealmDAO extends AbstractDAO<Realm> implements RealmDAO {\n@@ -147,10 +150,22 @@ public <T extends Policy> List<Realm> findByPolicy(final T policy) {\n         if (ProvisioningPolicy.class.isAssignableFrom(policy.getClass())) {\n             return Collections.<Realm>emptyList();\n         }\n+        String policyColumn = null;\n+        if (policy instanceof AccountPolicy) {\n+            policyColumn = \"accountPolicy\";\n+        } else if (policy instanceof PasswordPolicy) {\n+            policyColumn = \"passwordPolicy\";\n+        } else if (policy instanceof AuthPolicy) {\n+            policyColumn = \"authPolicy\";\n+        } else if (policy instanceof AccessPolicy) {\n+            policyColumn = \"accessPolicy\";\n+        } else if (policy instanceof AttrReleasePolicy) {\n+            policyColumn = \"attrReleasePolicy\";\n+        }\n \n         TypedQuery<Realm> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPARealm.class.getSimpleName() + \" e WHERE e.\"\n-                + (policy instanceof AccountPolicy ? \"accountPolicy\" : \"passwordPolicy\") + \"=:policy\", Realm.class);\n+                + policyColumn + \"=:policy\", Realm.class);\n         query.setParameter(\"policy\", policy);\n \n         List<Realm> result = new ArrayList<>();"},{"sha":"a0344490c50f54b116cbaa109ec5749ed85a9159","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":69,"deletions":41,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -19,15 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPASecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n-import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n import org.apache.syncope.core.persistence.api.entity.AnyTemplateRealm;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -37,22 +29,25 @@\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.ConnPoolConf;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.user.DynRoleMembership;\n+import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n-import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n+import org.apache.syncope.core.persistence.api.entity.Remediation;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.apache.syncope.core.persistence.api.entity.ReportTemplate;\n import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.api.entity.SchemaLabel;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n@@ -61,20 +56,43 @@\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthModuleItem;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTaskAnyFilter;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.core.persistence.api.entity.user.DynRoleMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n@@ -83,64 +101,60 @@\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCRP;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SP;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccessPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAttrReleasePolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAuthPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullCorrelationRuleEntity;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushCorrelationRuleEntity;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnit;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnitItem;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n-import org.apache.syncope.core.persistence.jpa.entity.task.JPAPushTaskAnyFilter;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplatePullTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPANotificationTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPropagationTask;\n+import org.apache.syncope.core.persistence.jpa.entity.task.JPAPullTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPushTask;\n+import org.apache.syncope.core.persistence.jpa.entity.task.JPAPushTaskAnyFilter;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPASchedTask;\n-import org.apache.syncope.core.persistence.jpa.entity.task.JPAPullTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPATaskExec;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPALAPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPALAPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPALAPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPALinkedAccount;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPASecurityQuestion;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n-import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n-import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n-import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.DynRealm;\n-import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;\n-import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.Privilege;\n-import org.apache.syncope.core.persistence.api.entity.Remediation;\n-import org.apache.syncope.core.persistence.api.entity.SchemaLabel;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n-import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullCorrelationRuleEntity;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnitItem;\n-import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n-import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n-import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n-import org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO;\n-import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushCorrelationRuleEntity;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPALAPlainAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPALAPlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPALAPlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPALinkedAccount;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthModule;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthModuleItem;\n \n public class JPAEntityFactory implements EntityFactory {\n \n@@ -293,6 +307,20 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPABatch();\n         } else if (reference.equals(GatewayRoute.class)) {\n             result = (E) new JPAGatewayRoute();\n+        } else if (reference.equals(AuthModule.class)) {\n+            result = (E) new JPAAuthModule();\n+        } else if (reference.equals(AuthModuleItem.class)) {\n+            result = (E) new JPAAuthModuleItem();\n+        } else if (reference.equals(AuthPolicy.class)) {\n+            result = (E) new JPAAuthPolicy();\n+        } else if (reference.equals(AccessPolicy.class)) {\n+            result = (E) new JPAAccessPolicy();\n+        } else if (reference.equals(AttrReleasePolicy.class)) {\n+            result = (E) new JPAAttrReleasePolicy();\n+        } else if (reference.equals(OIDCRP.class)) {\n+            result = (E) new JPAOIDCRP();\n+        } else if (reference.equals(SAML2SP.class)) {\n+            result = (E) new JPASAML2SP();\n         } else {\n             throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n         }"},{"sha":"abe881c4a5dd39d2b4a0f3c1acafeda2807a075f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARealm.java","status":"modified","additions":49,"deletions":1,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -40,11 +40,17 @@\n import org.apache.syncope.core.persistence.api.entity.AnyTemplateRealm;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccessPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAttrReleasePolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAuthPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.validation.entity.RealmCheck;\n@@ -72,6 +78,15 @@ public class JPARealm extends AbstractGeneratedKeyEntity implements Realm {\n     @ManyToOne(fetch = FetchType.EAGER)\n     private JPAAccountPolicy accountPolicy;\n \n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAAuthPolicy authPolicy;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAAccessPolicy accessPolicy;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAAttrReleasePolicy attrReleasePolicy;\n+\n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(name = TABLE + \"Action\",\n             joinColumns =\n@@ -144,6 +159,28 @@ public void setPasswordPolicy(final PasswordPolicy passwordPolicy) {\n         this.passwordPolicy = (JPAPasswordPolicy) passwordPolicy;\n     }\n \n+    @Override\n+    public AuthPolicy getAuthPolicy() {\n+        return authPolicy;\n+    }\n+\n+    @Override\n+    public void setAuthPolicy(final AuthPolicy authPolicy) {\n+        checkType(authPolicy, JPAAuthPolicy.class);\n+        this.authPolicy = (JPAAuthPolicy) authPolicy;\n+    }\n+\n+    @Override\n+    public AccessPolicy getAccessPolicy() {\n+        return accessPolicy;\n+    }\n+\n+    @Override\n+    public void setAccessPolicy(final AccessPolicy accessPolicy) {\n+        checkType(accessPolicy, JPAAccessPolicy.class);\n+        this.accessPolicy = (JPAAccessPolicy) accessPolicy;\n+    }\n+\n     @Override\n     public boolean add(final Implementation action) {\n         checkType(action, JPAImplementation.class);\n@@ -174,6 +211,17 @@ public List<? extends AnyTemplateRealm> getTemplates() {\n         return templates;\n     }\n \n+    @Override\n+    public void setAttrReleasePolicy(final AttrReleasePolicy policy) {\n+        checkType(policy, JPAAttrReleasePolicy.class);\n+        this.attrReleasePolicy = (JPAAttrReleasePolicy) policy;\n+    }\n+\n+    @Override\n+    public AttrReleasePolicy getAttrReleasePolicy() {\n+        return this.attrReleasePolicy;\n+    }\n+\n     @Override\n     public boolean add(final ExternalResource resource) {\n         checkType(resource, JPAExternalResource.class);"},{"sha":"f34a7e756609a9a9673188a4214b0944245c7c32","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ImplementationTest.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -23,6 +23,7 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n import java.util.List;\n+import org.apache.syncope.common.lib.types.AMImplementationType;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n@@ -44,7 +45,7 @@ public void findAll() {\n         List<Implementation> implementations = implementationDAO.findAll();\n         assertFalse(implementations.isEmpty());\n \n-        assertEquals(18, implementations.size());\n+        assertEquals(22, implementations.size());\n \n         implementations = implementationDAO.findByType(IdMImplementationType.PULL_ACTIONS);\n         assertEquals(1, implementations.size());\n@@ -72,6 +73,12 @@ public void findAll() {\n \n         implementations = implementationDAO.findByType(IdMImplementationType.PUSH_CORRELATION_RULE);\n         assertEquals(1, implementations.size());\n+\n+        implementations = implementationDAO.findByType(AMImplementationType.AUTH_POLICY_CONFIGURATIONS);\n+        assertEquals(1, implementations.size());\n+\n+        implementations = implementationDAO.findByType(AMImplementationType.ACCESS_POLICY_CONFIGURATIONS);\n+        assertEquals(1, implementations.size());\n     }\n \n     @Test"},{"sha":"b4849568f282c3788b96b2faecc4735c8642fb32","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":45,"deletions":3,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -43,6 +43,48 @@ under the License.\n   <Implementation id=\"DefaultPasswordRuleConf3\" type=\"PASSWORD_RULE\" engine=\"JAVA\"\n                   body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <PasswordPolicyRule policy_id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" implementation_id=\"DefaultPasswordRuleConf3\"/>\n+  \n+  <!-- Authentication policies -->\n+  <Implementation id=\"MyDefaultAuthPolicyConf\" type=\"AUTH_POLICY_CONFIGURATIONS\" engine=\"JAVA\"\n+                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf\",\"authModules\":[\"LdapAuthenticationTest\"]}'/>\n+  <AuthPolicy id=\"659b9906-4b6e-4bc0-aca0-6809dff346d4\" name=\"MyDefaultAuthPolicyConf\" description=\"an authentication policy\"/>\n+  <AuthPolicy id=\"b912a0d4-a890-416f-9ab8-84ab077eb028\" name=\"DefaultAuthPolicy\" description=\"Default authentication policy\"/>\n+\n+  <!-- Access policies -->\n+  <Implementation id=\"MyDefaultAccessPolicyConf\" type=\"ACCESS_POLICY_CONFIGURATIONS\" engine=\"JAVA\"\n+                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf\",\"name\":\"MyDefaultAccessPolicyConf\",\"enabled\":true,\"ssoEnabled\":true}'/>\n+  <AccessPolicy id=\"419935c7-deb3-40b3-8a9a-683037e523a2\" name=\"MyDefaultAccessPolicyConf\" description=\"an access policy\"/>\n+\n+  <!-- Attr Release Policies -->\n+  <Implementation id=\"AllowedAttrReleasePolicyConf\" type=\"ATTR_RELEASE_CONFIGURATIONS\" engine=\"JAVA\"\n+                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"AllowedAttrReleasePolicy\",\"allowedAttributes\":[\"cn\",\"givenName\",\"uid\"]}'/>\n+  <AttrReleasePolicy id=\"319935c7-deb3-40b3-8a9a-683037e523a2\" name=\"AllowedAttrReleasePolicy\" description=\"allowed attribute release policy policy\"/>\n+\n+  <Implementation id=\"DenyAttrReleasePolicyConf\" type=\"ATTR_RELEASE_CONFIGURATIONS\" engine=\"JAVA\"\n+                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"DenyAttrReleasePolicyConf\"}'/>\n+  <AttrReleasePolicy id=\"219935c7-deb3-40b3-8a9a-683037e523a2\" name=\"DenyAttrReleasePolicy\" description=\"deny attribute release policy policy\"/>\n+  \n+  <!-- Authentication modules -->\n+  <AuthModule id=\"be456831-593d-4003-b273-4c3fb61700df\" name=\"DefaultLDAPAuthModule\" \n+              description=\"LDAP auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.LDAPAuthModuleConf\",\"name\":\"MyLDAPAuthModuleConf\",\"userIdAttribute\":\"uid\",\"bindCredential\":\"Password\",\"ldapUrl\":\"ldap://localhost:1389\",\"searchFilter\":\"cn={user}\",\"baseDn\":\"dc=example,dc=org\",\"subtreeSearch\":true}'/>\n+  <AuthModule id=\"4c3ed7e8-7008-11ea-bc55-0242ac130003\" name=\"DefaultJDBCAuthModule\"\n+              description=\"JDBC auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.JDBCAuthModuleConf\",\"name\":\"MyJDBCAuthModuleConf\", \"sql\":\"SELECT * FROM table WHERE name=?\"}'/>\n+  <AuthModule id=\"4c3ed4e6-7008-11ea-bc55-0242ac130003\" name=\"DefaultGoogleMfaAuthModule\"\n+              description=\"Google Mfa auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf\",\"name\":\"MyGoogleMfaAuthModuleConf\",\"codeDigits\":6,\"issuer\":\"SyncopeTest\"}'/>\n+  <AuthModule id=\"4c3ed8f6-7008-11ea-bc55-0242ac130003\" name=\"DefaultOIDCAuthModule\"\n+              description=\"OIDC auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"name\":\"MyOIDCAuthModuleConf\", \"discoveryUri\":\"www.testurl.com\"}'/>\n+  <AuthModule id=\"4c3ed9d2-7008-11ea-bc55-0242ac130003\" name=\"DefaultSAML2IdPAuthModule\"\n+              description=\"SAML2 IdP auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf\",\"name\":\"MySAML2IdPAuthModuleConf\", \"providerName\":\"testProviderName\",\"serviceProviderMetadataPath\":\"file:/etc/metadata\"}'/>\n+  <AuthModule id=\"4c3edbbc-7008-11ea-bc55-0242ac130003\" name=\"DefaultJaasAuthModule\"\n+              description=\"Jaas auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.JaasAuthModuleConf\",\"name\":\"MyJaasAuthModuleConf\",\"realm\":\"SYNCOPE\",\"kerberosRealmSystemProperty\":\"sample-value\"}'/>\n+  <AuthModule id=\"4c3edc98-7008-11ea-bc55-0242ac130003\" name=\"DefaultStaticAuthModule\"\n+              description=\"Static auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.StaticAuthModuleConf\",\"name\":\"MyStaticAuthModuleConf\",\"users\":{\"user1\": \"testUserPassword123\"}}'/>\n+  <AuthModule id=\"4c3edd60-7008-11ea-bc55-0242ac130003\" name=\"DefaultSyncopeAuthModule\"\n+              description=\"Syncope auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf\",\"name\":\"MySyncopeAuthModuleConf\",\"domain\":\"Master\",\"url\":\"http://mydomain.com/syncope/rest\"}'/>\n+  <AuthModule id=\"07c528f3-63b4-4dc1-a4da-87f35b8bdec8\" name=\"DefaultRadiusAuthModule\"\n+              description=\"Radius auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.RadiusAuthModuleConf\",\"name\":\"MyRadiusAuthModuleConf\",\"protocol\":\"MSCHAPv2\",\"inetAddress\":\"1.2.3.4\", \"sharedSecret\":\"thesecret\"}'/>\n+  <AuthModule id=\"f6e1288d-50d9-45fe-82ee-597c42242205\" name=\"DefaultU2FAuthModule\"\n+              description=\"U2F auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.U2FAuthModuleConf\",\"name\":\"MyU2FAuthModuleConf\",\"expireDevices\":40}'/>\n \n   <RelationshipType id=\"inclusion\" description=\"Models the act that an object is included in another\"/>\n   <RelationshipType id=\"neighborhood\" description=\"Models the act that an object is near another\"/>\n@@ -500,7 +542,7 @@ under the License.\n   \n   <GPlainAttr id=\"22690472-ed3f-4972-8979-4c9251fab044\" owner_id=\"ba9ed509-b1f5-48ab-a334-c8530a6422dc\" schema_id=\"title\"/>\n   <GPlainAttrValue attribute_id=\"22690472-ed3f-4972-8979-4c9251fab044\" id=\"e16765e6-f806-469e-ae34-1ddf56f2102a\" stringValue=\"r13\"/>\n-\n+  \n   <!-- pull policies -->\n   <PullPolicy id=\"66691e96-285f-4464-bc19-e68384ea4c85\" description=\"a pull policy\" conflictResolutionAction=\"IGNORE\"/>\n   <PullPolicy id=\"880f8553-069b-4aed-9930-2cd53873f544\" description=\"another pull policy\" conflictResolutionAction=\"ALL\"/>\n@@ -2451,7 +2493,6 @@ $$ }&#10;\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[unassign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[unlink]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[assign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[deprovision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n@@ -2469,4 +2510,5 @@ $$ }&#10;\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unassign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unlink]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-</dataset>\n\\ No newline at end of file\n+\n+</dataset>"},{"sha":"9502a5d10d0f722b08def5064df5cc43348ae445","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -24,7 +24,6 @@\n import java.util.List;\n import java.util.Optional;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n@@ -59,9 +58,6 @@ public class ConnInstanceDataBinderImpl implements ConnInstanceDataBinder {\n     @Autowired\n     private RealmDAO realmDAO;\n \n-    @Autowired\n-    private ConfParamOps confParamOps;\n-\n     @Autowired\n     private EntityFactory entityFactory;\n "},{"sha":"9df9f8c937f351c443acbf99cbecf251629dea69","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java","status":"modified","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -21,9 +21,12 @@\n import java.lang.reflect.Modifier;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n+import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.RuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.types.AMImplementationType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n@@ -34,6 +37,8 @@\n import org.apache.syncope.core.persistence.api.dao.Reportlet;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.apache.syncope.core.provisioning.api.data.ImplementationDataBinder;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n@@ -51,6 +56,8 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n+import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n \n @Component\n public class ImplementationDataBinderImpl implements ImplementationDataBinder {\n@@ -149,6 +156,17 @@ public void update(final Implementation implementation, final ImplementationTO i\n                     base = ProvisionSorter.class;\n                     break;\n \n+                case AMImplementationType.ACCESS_POLICY_CONFIGURATIONS:\n+                    base = AccessPolicy.class;\n+                    break;\n+\n+                case AMImplementationType.AUTH_POLICY_CONFIGURATIONS:\n+                    base = AuthPolicy.class;\n+                    break;\n+\n+                case AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS:\n+                    base = AttrReleasePolicy.class;\n+                    break;\n                 default:\n             }\n \n@@ -158,6 +176,30 @@ public void update(final Implementation implementation, final ImplementationTO i\n             }\n \n             switch (implementation.getType()) {\n+                case AMImplementationType.ACCESS_POLICY_CONFIGURATIONS:\n+                    AccessPolicyConf accessPolicyConf =\n+                            POJOHelper.deserialize(implementation.getBody(), AccessPolicyConf.class);\n+                    if (accessPolicyConf == null) {\n+                        sce.getElements().add(\"Could not deserialize as AccessPolicy\");\n+                        throw sce;\n+                    }\n+                    break;\n+                case AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS:\n+                    AttrReleasePolicyConf policyConf =\n+                            POJOHelper.deserialize(implementation.getBody(), AttrReleasePolicyConf.class);\n+                    if (policyConf == null) {\n+                        sce.getElements().add(\"Could not deserialize as AttrReleasePolicy\");\n+                        throw sce;\n+                    }\n+                    break;\n+                case AMImplementationType.AUTH_POLICY_CONFIGURATIONS:\n+                    AuthPolicyConf authPolicyConf =\n+                            POJOHelper.deserialize(implementation.getBody(), AuthPolicyConf.class);\n+                    if (authPolicyConf == null) {\n+                        sce.getElements().add(\"Could not deserialize as AuthPolicy\");\n+                        throw sce;\n+                    }\n+                    break;\n                 case IdRepoImplementationType.REPORTLET:\n                     ReportletConf reportlet = POJOHelper.deserialize(implementation.getBody(), ReportletConf.class);\n                     if (reportlet == null) {"},{"sha":"00599ff5842a25cd8dfd20cbac74837c2d98fc1b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java","status":"modified","additions":83,"deletions":3,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -36,13 +36,16 @@\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.provisioning.api.data.RealmDataBinder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n \n @Component\n public class RealmDataBinderImpl implements RealmDataBinder {\n@@ -67,9 +70,6 @@ public class RealmDataBinderImpl implements RealmDataBinder {\n     @Autowired\n     private EntityFactory entityFactory;\n \n-    @Autowired\n-    private TemplateUtils templateUtils;\n-\n     private void setTemplates(final RealmTO realmTO, final Realm realm) {\n         // validate JEXL expressions from templates and proceed if fine\n         TemplateUtils.check(realmTO.getTemplates(), ClientExceptionType.InvalidRealm);\n@@ -123,6 +123,39 @@ public Realm create(final Realm parent, final RealmTO realmTO) {\n                 throw sce;\n             }\n         }\n+        if (realmTO.getAuthPolicy() != null) {\n+            Policy policy = policyDAO.find(realmTO.getAuthPolicy());\n+            if (policy instanceof AuthPolicy) {\n+                realm.setAuthPolicy((AuthPolicy) policy);\n+            } else {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n+                sce.getElements().add(\"Expected \" + AuthPolicy.class.getSimpleName()\n+                        + \", found \" + policy.getClass().getSimpleName());\n+                throw sce;\n+            }\n+        }\n+        if (realmTO.getAccessPolicy() != null) {\n+            Policy policy = policyDAO.find(realmTO.getAccessPolicy());\n+            if (policy instanceof AccessPolicy) {\n+                realm.setAccessPolicy((AccessPolicy) policy);\n+            } else {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n+                sce.getElements().add(\"Expected \" + AccessPolicy.class.getSimpleName()\n+                        + \", found \" + policy.getClass().getSimpleName());\n+                throw sce;\n+            }\n+        }\n+        if (realmTO.getAttrReleasePolicy() != null) {\n+            Policy policy = policyDAO.find(realmTO.getAttrReleasePolicy());\n+            if (policy instanceof AttrReleasePolicy) {\n+                realm.setAttrReleasePolicy((AttrReleasePolicy) policy);\n+            } else {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n+                sce.getElements().add(\"Expected \" + AttrReleasePolicy.class.getSimpleName()\n+                        + \", found \" + policy.getClass().getSimpleName());\n+                throw sce;\n+            }\n+        }\n \n         realmTO.getActions().forEach(logicActionsKey -> {\n             Implementation logicAction = implementationDAO.find(logicActionsKey);\n@@ -180,6 +213,48 @@ public PropagationByResource<String> update(final Realm realm, final RealmTO rea\n             }\n         }\n \n+        if (realmTO.getAuthPolicy() == null) {\n+            realm.setAuthPolicy(null);\n+        } else {\n+            Policy policy = policyDAO.find(realmTO.getAuthPolicy());\n+            if (policy instanceof AuthPolicy) {\n+                realm.setAuthPolicy((AuthPolicy) policy);\n+            } else {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n+                sce.getElements().add(\"Expected \" + AuthPolicy.class.getSimpleName()\n+                        + \", found \" + policy.getClass().getSimpleName());\n+                throw sce;\n+            }\n+        }\n+\n+        if (realmTO.getAccessPolicy() == null) {\n+            realm.setAccessPolicy(null);\n+        } else {\n+            Policy policy = policyDAO.find(realmTO.getAccessPolicy());\n+            if (policy instanceof AccessPolicy) {\n+                realm.setAccessPolicy((AccessPolicy) policy);\n+            } else {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n+                sce.getElements().add(\"Expected \" + AccessPolicy.class.getSimpleName()\n+                        + \", found \" + policy.getClass().getSimpleName());\n+                throw sce;\n+            }\n+        }\n+\n+        if (realmTO.getAttrReleasePolicy() == null) {\n+            realm.setAttrReleasePolicy(null);\n+        } else {\n+            Policy policy = policyDAO.find(realmTO.getAttrReleasePolicy());\n+            if (policy instanceof AttrReleasePolicy) {\n+                realm.setAttrReleasePolicy((AttrReleasePolicy) policy);\n+            } else {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n+                sce.getElements().add(\"Expected \" + AttrReleasePolicy.class.getSimpleName()\n+                        + \", found \" + policy.getClass().getSimpleName());\n+                throw sce;\n+            }\n+        }\n+\n         realmTO.getActions().forEach(logicActionsKey -> {\n             Implementation logicActions = implementationDAO.find(logicActionsKey);\n             if (logicActions == null) {\n@@ -228,6 +303,11 @@ public RealmTO getRealmTO(final Realm realm, final boolean admin) {\n         if (admin) {\n             realmTO.setAccountPolicy(realm.getAccountPolicy() == null ? null : realm.getAccountPolicy().getKey());\n             realmTO.setPasswordPolicy(realm.getPasswordPolicy() == null ? null : realm.getPasswordPolicy().getKey());\n+            realmTO.setAuthPolicy(\n+                    realm.getAuthPolicy() == null ? null : realm.getAuthPolicy().getKey());\n+            realmTO.setAccessPolicy(realm.getAccessPolicy() == null ? null : realm.getAccessPolicy().getKey());\n+            realmTO.setAttrReleasePolicy(\n+                    realm.getAttrReleasePolicy() == null ? null : realm.getAttrReleasePolicy().getKey());\n \n             realm.getActions().forEach(action -> realmTO.getActions().add(action.getKey()));\n "},{"sha":"34fd19b0237f886b6c65b62217024a10aeb0a2a2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -27,7 +27,6 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n@@ -96,9 +95,6 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {\n     @Autowired\n     private AnyTypeClassDAO anyTypeClassDAO;\n \n-    @Autowired\n-    private ConfParamOps confParamOps;\n-\n     @Autowired\n     private ImplementationDAO implementationDAO;\n "},{"sha":"c8f8129e56a2f7a5940c640f0e3aa8dad2295c22","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":102,"deletions":3,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.fit;\n \n-import static de.agilecoders.wicket.extensions.markup.html.bootstrap.icon.FontAwesome5IconType.java;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.fail;\n@@ -66,6 +65,7 @@\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.to.AccessPolicyTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -75,9 +75,17 @@\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.to.AuthModuleTO;\n+import org.apache.syncope.common.lib.to.AuthPolicyTO;\n+import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.types.OIDCSubjectType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.lib.types.SAML2SPNameId;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -87,11 +95,14 @@\n import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n import org.apache.syncope.common.rest.api.service.AnyTypeService;\n import org.apache.syncope.common.rest.api.service.ApplicationService;\n+import org.apache.syncope.common.rest.api.service.AuthModuleService;\n import org.apache.syncope.common.rest.api.service.CamelRouteService;\n+import org.apache.syncope.common.rest.api.service.ClientAppService;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.common.rest.api.service.DynRealmService;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n+import org.apache.syncope.common.rest.api.service.SAML2SPService;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n@@ -107,7 +118,6 @@\n import org.apache.syncope.common.rest.api.service.ReportTemplateService;\n import org.apache.syncope.common.rest.api.service.RoleService;\n import org.apache.syncope.common.rest.api.service.SAML2IdPService;\n-import org.apache.syncope.common.rest.api.service.SAML2SPService;\n import org.apache.syncope.common.rest.api.service.SCIMConfService;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.syncope.common.rest.api.service.SecurityQuestionService;\n@@ -268,6 +278,8 @@ public abstract class AbstractITCase {\n \n     protected static PolicyService policyService;\n \n+    protected static AuthModuleService authModuleService;\n+\n     protected static SecurityQuestionService securityQuestionService;\n \n     protected static ImplementationService implementationService;\n@@ -288,6 +300,8 @@ public abstract class AbstractITCase {\n \n     protected static SCIMConfService scimConfService;\n \n+    protected static ClientAppService clientAppService;\n+\n     @BeforeAll\n     public static void securitySetup() {\n         try (InputStream propStream = Encryptor.class.getResourceAsStream(\"/security.properties\")) {\n@@ -352,11 +366,13 @@ public static void restSetup() {\n         remediationService = adminClient.getService(RemediationService.class);\n         gatewayRouteService = adminClient.getService(GatewayRouteService.class);\n         camelRouteService = adminClient.getService(CamelRouteService.class);\n-        saml2SpService = adminClient.getService(SAML2SPService.class);\n+        saml2SpService = adminClient.getService(org.apache.syncope.common.rest.api.service.SAML2SPService.class);\n         saml2IdPService = adminClient.getService(SAML2IdPService.class);\n         oidcClientService = adminClient.getService(OIDCClientService.class);\n         oidcProviderService = adminClient.getService(OIDCProviderService.class);\n         scimConfService = adminClient.getService(SCIMConfService.class);\n+        clientAppService = adminClient.getService(ClientAppService.class);\n+        authModuleService = adminClient.getService(AuthModuleService.class);\n     }\n \n     @Autowired\n@@ -559,6 +575,18 @@ protected <T extends PolicyTO> T createPolicy(final PolicyType type, final T pol\n         return (T) getObject(response.getLocation(), PolicyService.class, policy.getClass());\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    protected AuthModuleTO createAuthModule(final AuthModuleTO authModule) {\n+        Response response = authModuleService.create(authModule);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+        return getObject(response.getLocation(), AuthModuleService.class, authModule.getClass());\n+    }\n+\n     protected ResourceTO createResource(final ResourceTO resourceTO) {\n         Response response = resourceService.create(resourceTO);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n@@ -695,4 +723,75 @@ protected <T> T queryForObject(\n \n         return object;\n     }\n+\n+    protected OIDCRPTO buildOIDCRP() {\n+        AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n+        authPolicyTO.setKey(\"AuthPolicyTest_\" + getUUIDString());\n+        authPolicyTO.setDescription(\"Authentication Policy\");\n+        authPolicyTO = createPolicy(PolicyType.AUTH, authPolicyTO);\n+        assertNotNull(authPolicyTO);\n+\n+        AccessPolicyTO accessPolicyTO = new AccessPolicyTO();\n+        accessPolicyTO.setKey(\"AccessPolicyTest_\" + getUUIDString());\n+        accessPolicyTO.setDescription(\"Access policy\");\n+        accessPolicyTO = createPolicy(PolicyType.ACCESS, accessPolicyTO);\n+        assertNotNull(accessPolicyTO);\n+\n+        OIDCRPTO oidcrpTO = new OIDCRPTO();\n+        oidcrpTO.setName(\"ExampleRP_\" + getUUIDString());\n+        oidcrpTO.setClientAppId(UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE);\n+        oidcrpTO.setDescription(\"Example OIDC RP application\");\n+        oidcrpTO.setClientId(\"clientId_\" + getUUIDString());\n+        oidcrpTO.setClientSecret(\"secret\");\n+        oidcrpTO.setSubjectType(OIDCSubjectType.PUBLIC);\n+        oidcrpTO.getSupportedGrantTypes().add(\"something\");\n+        oidcrpTO.getSupportedResponseTypes().add(\"something\");\n+\n+        oidcrpTO.setAuthPolicy(authPolicyTO.getKey());\n+        oidcrpTO.setAccessPolicy(accessPolicyTO.getKey());\n+\n+        return oidcrpTO;\n+    }\n+\n+    protected SAML2SPTO buildSAML2SP() {\n+        AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n+        authPolicyTO.setKey(\"AuthPolicyTest_\" + getUUIDString());\n+        authPolicyTO.setDescription(\"Authentication Policy\");\n+        authPolicyTO = createPolicy(PolicyType.AUTH, authPolicyTO);\n+        assertNotNull(authPolicyTO);\n+\n+        AccessPolicyTO accessPolicyTO = new AccessPolicyTO();\n+        accessPolicyTO.setKey(\"AccessPolicyTest_\" + getUUIDString());\n+        accessPolicyTO.setDescription(\"Access policy\");\n+        accessPolicyTO = createPolicy(PolicyType.ACCESS, accessPolicyTO);\n+        assertNotNull(accessPolicyTO);\n+\n+        SAML2SPTO saml2spto = new SAML2SPTO();\n+        saml2spto.setName(\"ExampleSAML2SP_\" + getUUIDString());\n+        saml2spto.setClientAppId(UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE);\n+        saml2spto.setDescription(\"Example SAML 2.0 service provider\");\n+        saml2spto.setEntityId(\"SAML2SPEntityId_\" + getUUIDString());\n+        saml2spto.setMetadataLocation(\"file:./test.xml\");\n+        saml2spto.setRequiredNameIdFormat(SAML2SPNameId.EMAIL_ADDRESS);\n+        saml2spto.setEncryptionOptional(true);\n+        saml2spto.setEncryptAssertions(true);\n+\n+        saml2spto.setAuthPolicy(authPolicyTO.getKey());\n+        saml2spto.setAccessPolicy(accessPolicyTO.getKey());\n+\n+        return saml2spto;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T extends ClientAppTO> T createClientApp(final ClientAppType type, final T clientAppTO) {\n+        Response response = clientAppService.create(type, clientAppTO);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+        return (T) getObject(response.getLocation(), ClientAppService.class, clientAppTO.getClass());\n+    }\n+\n }"},{"sha":"8a0d9b2d913cdff0d8556f4e9cd358d935d953d2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":165,"deletions":1,"changes":166,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -27,17 +27,25 @@\n \n import java.util.List;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.UUID;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n+import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n+import org.apache.syncope.common.lib.to.AccessPolicyTO;\n+import org.apache.syncope.common.lib.to.AttrReleasePolicyTO;\n+import org.apache.syncope.common.lib.to.AuthPolicyTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.types.AMImplementationType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.PolicyType;\n@@ -99,11 +107,17 @@ public void createUpdate() {\n         // 2. update setting policies\n         actual.setAccountPolicy(\"06e2ed52-6966-44aa-a177-a0ca7434201f\");\n         actual.setPasswordPolicy(\"986d1236-3ac5-4a19-810c-5ab21d79cba1\");\n+        actual.setAuthPolicy(\"b912a0d4-a890-416f-9ab8-84ab077eb028\");\n+        actual.setAccessPolicy(\"419935c7-deb3-40b3-8a9a-683037e523a2\");\n+        actual.setAttrReleasePolicy(\"319935c7-deb3-40b3-8a9a-683037e523a2\");\n         realmService.update(actual);\n \n         actual = getRealm(actual.getFullPath()).get();\n         assertNotNull(actual.getAccountPolicy());\n         assertNotNull(actual.getPasswordPolicy());\n+        assertNotNull(actual.getAuthPolicy());\n+        assertNotNull(actual.getAccessPolicy());\n+        assertNotNull(actual.getAttrReleasePolicy());\n \n         // 3. update changing parent\n         actual.setParent(getRealm(\"/odd\").get().getKey());\n@@ -170,7 +184,7 @@ public void deletingAccountPolicy() {\n \n         // 2. create realm with policy assigned\n         RealmTO realm = new RealmTO();\n-        realm.setName(\"withppolicy\");\n+        realm.setName(\"withPolicy\");\n \n         response = realmService.create(SyncopeConstants.ROOT_REALM, realm);\n         RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n@@ -197,6 +211,156 @@ public void deletingAccountPolicy() {\n         assertEquals(existingAccountPolicy, actual.getAccountPolicy());\n     }\n \n+    @Test\n+    public void deletingAuthPolicy() {\n+        // 1. create authentication policy\n+        DefaultAuthPolicyConf ruleConf = new DefaultAuthPolicyConf();\n+        ruleConf.getAuthModules().addAll(List.of(\"LdapAuthentication1\"));\n+\n+        ImplementationTO rule = new ImplementationTO();\n+        rule.setKey(\"TestAuthPolicy\" + getUUIDString());\n+        rule.setEngine(ImplementationEngine.JAVA);\n+        rule.setType(AMImplementationType.AUTH_POLICY_CONFIGURATIONS);\n+        rule.setBody(POJOHelper.serialize(ruleConf));\n+        Response response = implementationService.create(rule);\n+        rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+\n+        AuthPolicyTO policy = new AuthPolicyTO();\n+        policy.setDescription(\"Test Authentication policy\");\n+        policy.setKey(rule.getKey());\n+        policy = createPolicy(PolicyType.AUTH, policy);\n+        assertNotNull(policy);\n+\n+        // 2. create realm with policy assigned\n+        RealmTO realm = new RealmTO();\n+        realm.setName(\"withAuthPolicy\");\n+\n+        response = realmService.create(SyncopeConstants.ROOT_REALM, realm);\n+        RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n+        assertNotNull(actuals);\n+        assertTrue(actuals.length > 0);\n+        realm = actuals[0];\n+\n+        String existingAuthPolicy = realm.getAuthPolicy();\n+\n+        realm.setAuthPolicy(policy.getKey());\n+        realmService.update(realm);\n+\n+        actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n+        assertNotNull(actuals);\n+        assertTrue(actuals.length > 0);\n+        RealmTO actual = actuals[0];\n+        assertEquals(policy.getKey(), actual.getAuthPolicy());\n+\n+        // 3. remove policy\n+        policyService.delete(PolicyType.AUTH, policy.getKey());\n+\n+        // 4. verify\n+        actual = getRealm(actual.getFullPath()).get();\n+        assertEquals(existingAuthPolicy, actual.getAuthPolicy());\n+    }\n+\n+    @Test\n+    public void deletingAccessPolicy() {\n+        // 1. create access policy\n+        DefaultAccessPolicyConf ruleConf = new DefaultAccessPolicyConf();\n+        ruleConf.setEnabled(true);\n+        ruleConf.setName(\"TestAccessPolicyConf\" + getUUIDString());\n+        ruleConf.getRequiredAttributes().put(\"cn\", Set.of(\"admin\", \"Admin\", \"TheAdmin\"));\n+\n+        ImplementationTO rule = new ImplementationTO();\n+        rule.setKey(\"TestAccessPolicy\" + getUUIDString());\n+        rule.setEngine(ImplementationEngine.JAVA);\n+        rule.setType(AMImplementationType.ACCESS_POLICY_CONFIGURATIONS);\n+        rule.setBody(POJOHelper.serialize(ruleConf));\n+        Response response = implementationService.create(rule);\n+        rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+\n+        AccessPolicyTO policy = new AccessPolicyTO();\n+        policy.setDescription(\"Test Access policy\");\n+        policy.setKey(rule.getKey());\n+        policy = createPolicy(PolicyType.ACCESS, policy);\n+        assertNotNull(policy);\n+\n+        // 2. create realm with policy assigned\n+        RealmTO realm = new RealmTO();\n+        realm.setName(\"withAccessPolicy\");\n+\n+        response = realmService.create(SyncopeConstants.ROOT_REALM, realm);\n+        RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n+        assertNotNull(actuals);\n+        assertTrue(actuals.length > 0);\n+        realm = actuals[0];\n+\n+        String existingAccessPolicy = realm.getAccessPolicy();\n+\n+        realm.setAccessPolicy(policy.getKey());\n+        realmService.update(realm);\n+\n+        actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n+        assertNotNull(actuals);\n+        assertTrue(actuals.length > 0);\n+        RealmTO actual = actuals[0];\n+        assertEquals(policy.getKey(), actual.getAccessPolicy());\n+\n+        // 3. remove policy\n+        policyService.delete(PolicyType.ACCESS, policy.getKey());\n+\n+        // 4. verify\n+        actual = getRealm(actual.getFullPath()).get();\n+        assertEquals(existingAccessPolicy, actual.getAccessPolicy());\n+    }\n+\n+    @Test\n+    public void deletingAttributeReleasePolicy() {\n+        // 1. create attribute release policy\n+        AllowedAttrReleasePolicyConf ruleConf = new AllowedAttrReleasePolicyConf();\n+        ruleConf.setName(\"MyDefaultAttrReleasePolicyConf\" + getUUIDString());\n+        ruleConf.getAllowedAttributes().addAll(List.of(\"cn\", \"givenName\"));\n+\n+        ImplementationTO rule = new ImplementationTO();\n+        rule.setKey(\"TestAttrReleasePolicy\" + getUUIDString());\n+        rule.setEngine(ImplementationEngine.JAVA);\n+        rule.setType(AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS);\n+        rule.setBody(POJOHelper.serialize(ruleConf));\n+        Response response = implementationService.create(rule);\n+        rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+\n+        AttrReleasePolicyTO policy = new AttrReleasePolicyTO();\n+        policy.setDescription(\"Test Attribute Release policy\");\n+        policy.setKey(rule.getKey());\n+        policy = createPolicy(PolicyType.ATTR_RELEASE, policy);\n+        assertNotNull(policy);\n+\n+        // 2. create realm with policy assigned\n+        RealmTO realm = new RealmTO();\n+        realm.setName(\"withAttrReleasePolicy\");\n+\n+        response = realmService.create(SyncopeConstants.ROOT_REALM, realm);\n+        RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n+        assertNotNull(actuals);\n+        assertTrue(actuals.length > 0);\n+        realm = actuals[0];\n+\n+        String existingAttrReleasePolicy = realm.getAttrReleasePolicy();\n+\n+        realm.setAttrReleasePolicy(policy.getKey());\n+        realmService.update(realm);\n+\n+        actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n+        assertNotNull(actuals);\n+        assertTrue(actuals.length > 0);\n+        RealmTO actual = actuals[0];\n+        assertEquals(policy.getKey(), actual.getAttrReleasePolicy());\n+\n+        // 3. remove policy\n+        policyService.delete(PolicyType.ATTR_RELEASE, policy.getKey());\n+\n+        // 4. verify\n+        actual = getRealm(actual.getFullPath()).get();\n+        assertEquals(existingAttrReleasePolicy, actual.getAttrReleasePolicy());\n+    }\n+\n     @Test\n     public void delete() {\n         RealmTO realm = new RealmTO();"},{"sha":"d66f64c6646ac3d18a198106fe8e523cd3ca7c0c","filename":"pom.xml","status":"modified","additions":46,"deletions":6,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d42c2cf923d22b1cb865ef263d55db945589d5d9/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d42c2cf923d22b1cb865ef263d55db945589d5d9/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=d42c2cf923d22b1cb865ef263d55db945589d5d9","patch":"@@ -1463,6 +1463,11 @@ under the License.\n         <artifactId>cas-server-core-configuration-api</artifactId>\n         <version>${cas.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-core-util-api</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.apereo.cas</groupId>\n         <artifactId>cas-server-core-configuration</artifactId>\n@@ -1488,6 +1493,16 @@ under the License.\n         <artifactId>cas-server-core-services</artifactId>\n         <version>${cas.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-core-services-registry</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-core-services-api</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.apereo.cas</groupId>\n         <artifactId>cas-server-core-tickets</artifactId>\n@@ -1558,11 +1573,36 @@ under the License.\n         <artifactId>cas-server-support-themes</artifactId>\n         <version>${cas.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-support-radius</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-support-radius-mfa</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-support-saml-idp</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-support-saml-idp-core</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.apereo.cas</groupId>\n         <artifactId>cas-server-support-oidc</artifactId>\n         <version>${cas.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-support-oauth-services</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.apereo.cas</groupId>\n         <artifactId>cas-server-support-validation</artifactId>\n@@ -1921,6 +1961,11 @@ under the License.\n           </exclusion>\n         </exclusions>\n       </dependency>\n+      <dependency>\n+        <groupId>org.bouncycastle</groupId>\n+        <artifactId>bcpkix-jdk15on</artifactId>\n+        <version>1.65</version>\n+      </dependency>\n \n       <!-- TEST -->\n       <dependency>\n@@ -1941,18 +1986,13 @@ under the License.\n         <version>${spring-cloud-gateway.version}</version>\n         <scope>test</scope>\n       </dependency>\n-      <dependency>\n-        <groupId>org.bouncycastle</groupId>\n-        <artifactId>bcpkix-jdk15on</artifactId>\n-        <version>1.65</version>\n-        <scope>test</scope>\n-      </dependency>\n       <dependency>\n         <groupId>org.eclipse.jetty</groupId>\n         <artifactId>jetty-client</artifactId>\n         <version>9.4.20.v20190813</version>\n         <scope>test</scope>\n       </dependency>\n+\n       <dependency>\n         <groupId>org.springframework</groupId>\n         <artifactId>spring-test</artifactId>"}]}