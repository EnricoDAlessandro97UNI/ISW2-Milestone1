{"sha":"34453842397fc2fa9228aca0c015a87ac5134796","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM0NDUzODQyMzk3ZmMyZmE5MjI4YWNhMGMwMTVhODdhYzUxMzQ3OTY=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-01-19T09:19:39Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-01-19T09:19:39Z"},"message":"Using plain VIEWS for native search, so removing criteria API implementation\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246740 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0bd8c8180b1a0de6f332ea688a188b135e221a19","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0bd8c8180b1a0de6f332ea688a188b135e221a19"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/34453842397fc2fa9228aca0c015a87ac5134796","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/34453842397fc2fa9228aca0c015a87ac5134796","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/34453842397fc2fa9228aca0c015a87ac5134796","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/34453842397fc2fa9228aca0c015a87ac5134796/comments","author":null,"committer":null,"parents":[{"sha":"7f40d387fb0ac52d93869022c53f689174af6536","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7f40d387fb0ac52d93869022c53f689174af6536","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7f40d387fb0ac52d93869022c53f689174af6536"}],"stats":{"total":712,"additions":62,"deletions":650},"files":[{"sha":"ac533d25e408e5fbfcc11c3c25e07adbf2a81803","filename":"core/pom.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34453842397fc2fa9228aca0c015a87ac5134796/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34453842397fc2fa9228aca0c015a87ac5134796/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=34453842397fc2fa9228aca0c015a87ac5134796","patch":"@@ -385,7 +385,6 @@\n                                        dest=\"${cargo.run.dir}\">\n                                     <patternset>\n                                         <exclude name=\"**/content.xml\"/>\n-                                        <exclude name=\"**/views.xml\"/>\n                                         <exclude name=\"**/ehcache.xml\"/>\n                                         <exclude name=\"**/persistence.properties\"/>\n                                         <exclude name=\"**/security.properties\"/>"},{"sha":"55f367a409726ffa4d85325910d4ff7507500667","filename":"core/src/main/java/org/syncope/core/persistence/DefaultContentLoader.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34453842397fc2fa9228aca0c015a87ac5134796/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34453842397fc2fa9228aca0c015a87ac5134796/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java?ref=34453842397fc2fa9228aca0c015a87ac5134796","patch":"@@ -36,7 +36,6 @@\n import org.springframework.web.context.WebApplicationContext;\n import org.springframework.web.context.support.WebApplicationContextUtils;\n import org.syncope.core.persistence.beans.SyncopeConf;\n-import org.syncope.core.rest.controller.UserController;\n \n /**\n  * Load default content in the database.\n@@ -67,16 +66,14 @@ public final void contextInitialized(final ServletContextEvent sce) {\n                 (DataSource) springContext.getBean(\"localDataSource\");\n         Connection conn = DataSourceUtils.getConnection(dataSource);\n \n-        // 1. read persistence.properties and set search mode\n+        // 1. read persistence.properties\n         String dbSchema = null;\n-        String searchMode = null;\n         try {\n             InputStream dbPropsStream = getClass().getResourceAsStream(\n                     \"/persistence.properties\");\n             Properties dbProps = new Properties();\n             dbProps.load(dbPropsStream);\n             dbSchema = dbProps.getProperty(\"database.schema\");\n-            searchMode = dbProps.getProperty(\"search.mode\");\n         } catch (Throwable t) {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Could not find persistence.properties\", t);\n@@ -85,10 +82,6 @@ public final void contextInitialized(final ServletContextEvent sce) {\n             }\n         }\n \n-        LOG.debug(\"Setting search mode to \" + searchMode);\n-        UserController.setSearchMode(searchMode);\n-        LOG.debug(\"Search mode set to {}\", UserController.getSearchMode());\n-\n         // 2. Check wether we are allowed to load default content into the DB\n         Statement statement = null;\n         ResultSet resultSet = null;"},{"sha":"279c1c495b88e9a1daf9d58667bdc4685ed580d4","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AbstractUserSearchDAOImpl.java","status":"removed","additions":0,"deletions":63,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7f40d387fb0ac52d93869022c53f689174af6536/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractUserSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7f40d387fb0ac52d93869022c53f689174af6536/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractUserSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractUserSearchDAOImpl.java?ref=7f40d387fb0ac52d93869022c53f689174af6536","patch":"@@ -1,63 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.persistence.dao.impl;\n-\n-import java.util.Collections;\n-import java.util.List;\n-import org.syncope.client.search.NodeCond;\n-import org.syncope.client.search.PaginatedResult;\n-import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.dao.UserSearchDAO;\n-\n-public abstract class AbstractUserSearchDAOImpl extends AbstractDAOImpl\n-        implements UserSearchDAO {\n-\n-    @Override\n-    public List<SyncopeUser> search(final NodeCond searchCondition) {\n-        return search(searchCondition, -1, -1, null);\n-    }\n-\n-    @Override\n-    public List<SyncopeUser> search(final NodeCond searchCondition,\n-            final int page,\n-            final int itemsPerPage,\n-            final PaginatedResult paginatedResult) {\n-\n-        List<SyncopeUser> result;\n-\n-        LOG.debug(\"Search condition:\\n{}\", searchCondition);\n-        if (!searchCondition.checkValidity()) {\n-            LOG.error(\"Invalid search condition:\\n{}\", searchCondition);\n-\n-            result = Collections.EMPTY_LIST;\n-        }\n-\n-        try {\n-            result = doSearch(searchCondition,\n-                    page, itemsPerPage, paginatedResult);\n-        } catch (Throwable t) {\n-            LOG.error(\"While searching users\", t);\n-\n-            result = Collections.EMPTY_LIST;\n-        }\n-\n-        return result;\n-    }\n-\n-    protected abstract List<SyncopeUser> doSearch(final NodeCond nodeCond,\n-            final int page,\n-            final int itemsPerPage,\n-            final PaginatedResult paginatedResult);\n-}"},{"sha":"cf8972287abc7350508b484e1d824d9003f83a0c","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserSearchDAOCriteriaImpl.java","status":"removed","additions":0,"deletions":395,"changes":395,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7f40d387fb0ac52d93869022c53f689174af6536/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOCriteriaImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7f40d387fb0ac52d93869022c53f689174af6536/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOCriteriaImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOCriteriaImpl.java?ref=7f40d387fb0ac52d93869022c53f689174af6536","patch":"@@ -1,395 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.persistence.dao.impl;\n-\n-import java.util.Collections;\n-import java.util.List;\n-import javax.persistence.Query;\n-import javax.validation.ValidationException;\n-import org.hibernate.Criteria;\n-import org.hibernate.Session;\n-import org.hibernate.criterion.Conjunction;\n-import org.hibernate.criterion.Criterion;\n-import org.hibernate.criterion.Restrictions;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n-import org.syncope.client.search.AttributeCond;\n-import org.syncope.client.search.MembershipCond;\n-import org.syncope.client.search.NodeCond;\n-import org.syncope.client.search.PaginatedResult;\n-import org.syncope.core.persistence.beans.AbstractAttrValue;\n-import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.beans.user.UAttrValue;\n-import org.syncope.core.persistence.beans.user.USchema;\n-import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.UserSearchDAO;\n-\n-@Repository\n-public class UserSearchDAOCriteriaImpl extends AbstractUserSearchDAOImpl\n-        implements UserSearchDAO {\n-\n-    @Autowired\n-    private SchemaDAO schemaDAO;\n-\n-    @Override\n-    protected List<SyncopeUser> doSearch(final NodeCond nodeCond,\n-            final int page,\n-            final int itemsPerPage,\n-            final PaginatedResult paginatedResult) {\n-\n-        List<SyncopeUser> result = doSearch(nodeCond);\n-\n-        if (paginatedResult != null) {\n-            paginatedResult.setTotalRecords(result.size());\n-        }\n-\n-        // TODO: temporary solution to the paginated search\n-        int from = itemsPerPage * (page <= 0 ? 0 : page - 1);\n-\n-        int to = itemsPerPage <= 0 || from + itemsPerPage > result.size()\n-                ? result.size() : from + itemsPerPage;\n-\n-        return from > to ? Collections.EMPTY_LIST : result.subList(from, to);\n-    }\n-\n-    private List<SyncopeUser> doSearch(final NodeCond nodeCond) {\n-        List<SyncopeUser> result;\n-        List<SyncopeUser> rightResult;\n-\n-        switch (nodeCond.getType()) {\n-            case LEAF:\n-            case NOT_LEAF:\n-                if (nodeCond.getAttributeCond() != null\n-                        && nodeCond.getAttributeCond().getType()\n-                        == AttributeCond.Type.ISNULL) {\n-\n-                    if (nodeCond.getType() == NodeCond.Type.NOT_LEAF) {\n-                        nodeCond.setType(NodeCond.Type.LEAF);\n-                        nodeCond.getAttributeCond().setType(\n-                                AttributeCond.Type.ISNOTNULL);\n-\n-                        result = doSearch(nodeCond);\n-                    } else {\n-                        Query query = entityManager.createQuery(\n-                                \"SELECT e FROM SyncopeUser e WHERE e NOT IN (\"\n-                                + \"SELECT u FROM SyncopeUser u \"\n-                                + \"LEFT OUTER JOIN u.attributes ua \"\n-                                + \"WHERE ua.schema.name = :schemaName)\");\n-                        query.setParameter(\"schemaName\",\n-                                nodeCond.getAttributeCond().getSchema());\n-                        LOG.debug(\"[ISNOTULL] \"\n-                                + \"Search query to be performed: {}\", query);\n-\n-                        result = query.getResultList();\n-                    }\n-                } else {\n-                    Criteria criteria = getCriteria(nodeCond);\n-                    LOG.debug(\"Criteria to be performed: {}\", criteria);\n-\n-                    result = criteria.list();\n-                }\n-\n-                LOG.debug(\"Leaf result: {}\", result);\n-                break;\n-\n-            case AND:\n-                // TODO: not paginable\n-                result = doSearch(nodeCond.getLeftNodeCond());\n-                rightResult = doSearch(nodeCond.getRightNodeCond());\n-                result.retainAll(rightResult);\n-                break;\n-\n-            case OR:\n-                // TODO: not paginable\n-                result = doSearch(nodeCond.getLeftNodeCond());\n-                rightResult = doSearch(nodeCond.getRightNodeCond());\n-\n-                List<SyncopeUser> from = null;\n-                List<SyncopeUser> to = null;\n-\n-                if (rightResult.size() > result.size()) {\n-                    from = result;\n-                    to = rightResult;\n-                } else {\n-                    from = rightResult;\n-                    to = result;\n-                }\n-\n-                for (SyncopeUser user : from) {\n-                    if (!to.contains(user)) {\n-                        to.add(user);\n-                    }\n-                }\n-\n-                result = to;\n-                break;\n-\n-            default:\n-                result = Collections.EMPTY_LIST;\n-        }\n-\n-        return result;\n-    }\n-\n-    private Criteria getCriteria(final NodeCond leafCond) {\n-        Session hibernateSess = (Session) entityManager.getDelegate();\n-        Criteria criteria = hibernateSess.createCriteria(SyncopeUser.class);\n-        criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);\n-\n-        if (leafCond.getMembershipCond() != null) {\n-            criteria = criteria.createAlias(\"memberships\", \"m\").\n-                    createAlias(\"m.syncopeRole\", \"r\");\n-\n-            criteria.add(getCriterion(leafCond.getMembershipCond(),\n-                    leafCond.getType()));\n-        }\n-\n-        USchema schema = null;\n-        if (leafCond.getAttributeCond() != null) {\n-            schema = schemaDAO.find(leafCond.getAttributeCond().getSchema(),\n-                    USchema.class);\n-            if (schema == null) {\n-                LOG.warn(\"Ignoring invalid schema '{}'\",\n-                        leafCond.getAttributeCond().getSchema());\n-            } else {\n-                criteria = criteria.createAlias(\"attributes\", \"a\");\n-                if (schema.isUniqueConstraint()) {\n-                    criteria = criteria.createAlias(\"a.uniqueValue\", \"av\");\n-                } else {\n-                    criteria = criteria.createAlias(\"a.values\", \"av\");\n-                }\n-\n-                criteria.add(getCriterion(leafCond.getAttributeCond(),\n-                        leafCond.getType(), schema));\n-            }\n-        }\n-\n-        return criteria;\n-    }\n-\n-    private Criterion getCriterion(final MembershipCond cond,\n-            final NodeCond.Type nodeCondType) {\n-\n-        Criterion criterion = null;\n-\n-        if (cond.getRoleId() != null) {\n-            criterion = Restrictions.eq(\"r.id\", cond.getRoleId());\n-        }\n-        if (cond.getRoleName() != null) {\n-            criterion = Restrictions.eq(\"r.name\", cond.getRoleName());\n-        }\n-\n-        if (nodeCondType == NodeCond.Type.NOT_LEAF) {\n-            criterion = Restrictions.not(criterion);\n-        }\n-\n-        return criterion;\n-    }\n-\n-    private Criterion getCriterion(final AttributeCond cond,\n-            final NodeCond.Type nodeCondType, final USchema schema) {\n-\n-        Criterion criterion = null;\n-\n-        UAttrValue attrValue = new UAttrValue();\n-        try {\n-            if (cond.getType() == AttributeCond.Type.LIKE) {\n-                attrValue.setStringValue(cond.getExpression());\n-            } else {\n-                attrValue = schema.getValidator().\n-                        getValue(cond.getExpression(), attrValue);\n-            }\n-\n-            criterion = Restrictions.and(\n-                    Restrictions.eq(\"a.schema.name\", schema.getName()),\n-                    nodeCondType == NodeCond.Type.LEAF\n-                    ? getCriterion(cond.getType(), attrValue)\n-                    : Restrictions.not(\n-                    getCriterion(cond.getType(), attrValue)));\n-        } catch (ValidationException e) {\n-            LOG.error(\"Could not validate expression '\"\n-                    + cond.getExpression() + \"'\", e);\n-        }\n-\n-        return criterion;\n-    }\n-\n-    private Criterion getCriterion(final AttributeCond.Type type,\n-            final AbstractAttrValue attrValue) {\n-\n-        Criterion result = null;\n-        Conjunction conjunction;\n-        switch (type) {\n-            case EQ:\n-                conjunction = Restrictions.conjunction();\n-\n-                if (attrValue.getStringValue() != null) {\n-                    conjunction.add(Restrictions.eq(\"av.stringValue\",\n-                            attrValue.getStringValue()));\n-                }\n-                if (attrValue.getBooleanValue() != null) {\n-                    conjunction.add(Restrictions.eq(\"av.booleanValue\",\n-                            attrValue.getBooleanAsInteger(\n-                            attrValue.getBooleanValue())));\n-                }\n-                if (attrValue.getLongValue() != null) {\n-                    conjunction.add(Restrictions.eq(\"av.longValue\",\n-                            attrValue.getLongValue()));\n-                }\n-                if (attrValue.getDoubleValue() != null) {\n-                    conjunction.add(Restrictions.eq(\"av.doubleValue\",\n-                            attrValue.getDoubleValue()));\n-                }\n-                if (attrValue.getDateValue() != null) {\n-                    conjunction.add(Restrictions.eq(\"av.dateValue\",\n-                            attrValue.getDateValue()));\n-                }\n-\n-                result = conjunction;\n-                break;\n-\n-            case GE:\n-                conjunction = Restrictions.conjunction();\n-\n-                if (attrValue.getStringValue() != null) {\n-                    conjunction.add(Restrictions.ge(\"av.stringValue\",\n-                            attrValue.getStringValue()));\n-                }\n-                if (attrValue.getBooleanValue() != null) {\n-                    conjunction.add(Restrictions.ge(\"av.booleanValue\",\n-                            attrValue.getBooleanAsInteger(\n-                            attrValue.getBooleanValue())));\n-                }\n-                if (attrValue.getLongValue() != null) {\n-                    conjunction.add(Restrictions.ge(\"av.longValue\",\n-                            attrValue.getLongValue()));\n-                }\n-                if (attrValue.getDoubleValue() != null) {\n-                    conjunction.add(Restrictions.ge(\"av.doubleValue\",\n-                            attrValue.getDoubleValue()));\n-                }\n-                if (attrValue.getDateValue() != null) {\n-                    conjunction.add(Restrictions.ge(\"av.dateValue\",\n-                            attrValue.getDateValue()));\n-                }\n-\n-                result = conjunction;\n-                break;\n-\n-            case GT:\n-                conjunction = Restrictions.conjunction();\n-\n-                if (attrValue.getStringValue() != null) {\n-                    conjunction.add(Restrictions.gt(\"av.stringValue\",\n-                            attrValue.getStringValue()));\n-                }\n-                if (attrValue.getBooleanValue() != null) {\n-                    conjunction.add(Restrictions.gt(\"av.booleanValue\",\n-                            attrValue.getBooleanAsInteger(\n-                            attrValue.getBooleanValue())));\n-                }\n-                if (attrValue.getLongValue() != null) {\n-                    conjunction.add(Restrictions.gt(\"av.longValue\",\n-                            attrValue.getLongValue()));\n-                }\n-                if (attrValue.getDoubleValue() != null) {\n-                    conjunction.add(Restrictions.gt(\"av.doubleValue\",\n-                            attrValue.getDoubleValue()));\n-                }\n-                if (attrValue.getDateValue() != null) {\n-                    conjunction.add(Restrictions.gt(\"av.dateValue\",\n-                            attrValue.getDateValue()));\n-                }\n-\n-                result = conjunction;\n-                break;\n-\n-            case ISNOTNULL:\n-                result = Restrictions.disjunction().\n-                        add(Restrictions.isNotNull(\"av.stringValue\")).\n-                        add(Restrictions.isNotNull(\"av.booleanValue\")).\n-                        add(Restrictions.isNotNull(\"av.longValue\")).\n-                        add(Restrictions.isNotNull(\"av.doubleValue\")).\n-                        add(Restrictions.isNotNull(\"av.dateValue\"));\n-                break;\n-\n-            case LE:\n-                conjunction = Restrictions.conjunction();\n-\n-                if (attrValue.getStringValue() != null) {\n-                    conjunction.add(Restrictions.le(\"av.stringValue\",\n-                            attrValue.getStringValue()));\n-                }\n-                if (attrValue.getBooleanValue() != null) {\n-                    conjunction.add(Restrictions.le(\"av.booleanValue\",\n-                            attrValue.getBooleanAsInteger(\n-                            attrValue.getBooleanValue())));\n-                }\n-                if (attrValue.getLongValue() != null) {\n-                    conjunction.add(Restrictions.le(\"av.longValue\",\n-                            attrValue.getLongValue()));\n-                }\n-                if (attrValue.getDoubleValue() != null) {\n-                    conjunction.add(Restrictions.le(\"av.doubleValue\",\n-                            attrValue.getDoubleValue()));\n-                }\n-                if (attrValue.getDateValue() != null) {\n-                    conjunction.add(Restrictions.le(\"av.dateValue\",\n-                            attrValue.getDateValue()));\n-                }\n-\n-                result = conjunction;\n-                break;\n-\n-            case LT:\n-                conjunction = Restrictions.conjunction();\n-\n-                if (attrValue.getStringValue() != null) {\n-                    conjunction.add(Restrictions.lt(\"av.stringValue\",\n-                            attrValue.getStringValue()));\n-                }\n-                if (attrValue.getBooleanValue() != null) {\n-                    conjunction.add(Restrictions.lt(\"av.booleanValue\",\n-                            attrValue.getBooleanAsInteger(\n-                            attrValue.getBooleanValue())));\n-                }\n-                if (attrValue.getLongValue() != null) {\n-                    conjunction.add(Restrictions.lt(\"av.longValue\",\n-                            attrValue.getLongValue()));\n-                }\n-                if (attrValue.getDoubleValue() != null) {\n-                    conjunction.add(Restrictions.lt(\"av.doubleValue\",\n-                            attrValue.getDoubleValue()));\n-                }\n-                if (attrValue.getDateValue() != null) {\n-                    conjunction.add(Restrictions.lt(\"av.dateValue\",\n-                            attrValue.getDateValue()));\n-                }\n-\n-                result = conjunction;\n-                break;\n-\n-            case LIKE:\n-                // LIKE operator is meaningful for strings only\n-                result = Restrictions.like(\"av.stringValue\",\n-                        attrValue.getStringValue());\n-                break;\n-\n-            default:\n-        }\n-\n-        return result;\n-    }\n-}"},{"sha":"37c66facaf1295166812c07d0586ec74266e0da6","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserSearchDAOImpl.java","status":"renamed","additions":53,"deletions":13,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34453842397fc2fa9228aca0c015a87ac5134796/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34453842397fc2fa9228aca0c015a87ac5134796/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java?ref=34453842397fc2fa9228aca0c015a87ac5134796","patch":"@@ -42,7 +42,7 @@\n import org.syncope.types.SchemaType;\n \n @Repository\n-public class UserSearchDAONativeImpl extends AbstractUserSearchDAOImpl\n+public class UserSearchDAOImpl extends AbstractDAOImpl\n         implements UserSearchDAO {\n \n     static final private String EMPTY_ATTR_QUERY =\n@@ -56,12 +56,44 @@ public class UserSearchDAONativeImpl extends AbstractUserSearchDAOImpl\n \n     private final Random random;\n \n-    public UserSearchDAONativeImpl() {\n+    public UserSearchDAOImpl() {\n         super();\n \n         random = new Random(Calendar.getInstance().getTimeInMillis());\n     }\n \n+    @Override\n+    public List<SyncopeUser> search(final NodeCond searchCondition) {\n+        return search(searchCondition, -1, -1, null);\n+    }\n+\n+    @Override\n+    public List<SyncopeUser> search(final NodeCond searchCondition,\n+            final int page,\n+            final int itemsPerPage,\n+            final PaginatedResult paginatedResult) {\n+\n+        List<SyncopeUser> result;\n+\n+        LOG.debug(\"Search condition:\\n{}\", searchCondition);\n+        if (!searchCondition.checkValidity()) {\n+            LOG.error(\"Invalid search condition:\\n{}\", searchCondition);\n+\n+            result = Collections.EMPTY_LIST;\n+        }\n+\n+        try {\n+            result = doSearch(searchCondition,\n+                    page, itemsPerPage, paginatedResult);\n+        } catch (Throwable t) {\n+            LOG.error(\"While searching users\", t);\n+\n+            result = Collections.EMPTY_LIST;\n+        }\n+\n+        return result;\n+    }\n+\n     private Integer setParameter(final Random random,\n             final Map<Integer, Object> parameters,\n             final Object parameter) {\n@@ -91,8 +123,7 @@ private void fillWithParameters(final Query query,\n         }\n     }\n \n-    @Override\n-    protected List<SyncopeUser> doSearch(final NodeCond nodeCond,\n+    private List<SyncopeUser> doSearch(final NodeCond nodeCond,\n             final int page,\n             final int itemsPerPage,\n             final PaginatedResult paginatedResult) {\n@@ -113,7 +144,7 @@ protected List<SyncopeUser> doSearch(final NodeCond nodeCond,\n         fillWithParameters(query, parameters);\n \n         LOG.debug(\"Native query\\n{}\\nwith parameters\\n{}\",\n-                query, parameters);\n+                queryString.toString(), parameters);\n \n         // Avoiding duplicates (set)\n         Set<Number> userIds = new HashSet<Number>();\n@@ -134,18 +165,20 @@ protected List<SyncopeUser> doSearch(final NodeCond nodeCond,\n         }\n \n         if (paginatedResult != null) {\n-            queryString.insert(0, \"SELECT COUNT(user_id) WHERE user_id IN (\");\n+            queryString.insert(0, \"SELECT COUNT(user_id) FROM (\");\n             queryString.append(\")\");\n \n             Query countQuery =\n                     entityManager.createNativeQuery(queryString.toString());\n             fillWithParameters(countQuery, parameters);\n \n             LOG.debug(\"Native count query\\n{}\\nwith parameters\\n{}\",\n-                    countQuery, parameters);\n+                    queryString.toString(), parameters);\n+            LOG.info(\"XXXXXXX Native count query\\n{}\\nwith parameters\\n{}\",\n+                    queryString.toString(), parameters);\n \n             paginatedResult.setTotalRecords(\n-                    ((Long) countQuery.getSingleResult()).intValue());\n+                    ((Integer) countQuery.getSingleResult()));\n \n             LOG.debug(\"Native count query result: {}\",\n                     paginatedResult.getTotalRecords());\n@@ -176,19 +209,23 @@ private StringBuilder getQuery(final NodeCond nodeCond,\n                 break;\n \n             case AND:\n-                query.append(getQuery(nodeCond.getLeftNodeCond(),\n+                query.append(\"(\").\n+                        append(getQuery(nodeCond.getLeftNodeCond(),\n                         parameters)).\n                         append(\" INTERSECT \").\n                         append(getQuery(nodeCond.getRightNodeCond(),\n-                        parameters));\n+                        parameters).\n+                        append(\")\"));\n                 break;\n \n             case OR:\n-                query.append(getQuery(nodeCond.getLeftNodeCond(),\n+                query.append(\"(\").\n+                        append(getQuery(nodeCond.getLeftNodeCond(),\n                         parameters)).\n                         append(\" UNION \").\n                         append(getQuery(nodeCond.getRightNodeCond(),\n-                        parameters));\n+                        parameters).\n+                        append(\")\"));\n                 break;\n \n             default:\n@@ -270,7 +307,10 @@ private String getQuery(final AttributeCond cond,\n \n         UAttrValue attrValue = new UAttrValue();\n         try {\n-            if (cond.getType() != AttributeCond.Type.LIKE) {\n+            if (cond.getType() != AttributeCond.Type.LIKE\n+                    && cond.getType() != AttributeCond.Type.ISNULL\n+                    && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n+\n                 attrValue = schema.getValidator().\n                         getValue(cond.getExpression(), attrValue);\n             }","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserSearchDAONativeImpl.java"},{"sha":"0110ad2b7f98738fb6f6782a1b8d43a31adfb860","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":5,"deletions":47,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34453842397fc2fa9228aca0c015a87ac5134796/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34453842397fc2fa9228aca0c015a87ac5134796/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=34453842397fc2fa9228aca0c015a87ac5134796","patch":"@@ -39,7 +39,6 @@\n import java.util.Map;\n import java.util.Set;\n import javassist.NotFoundException;\n-import javax.annotation.Resource;\n import javax.servlet.http.HttpServletResponse;\n import jpasymphony.dao.JPAWorkflowEntryDAO;\n import org.springframework.dao.DataIntegrityViolationException;\n@@ -76,11 +75,8 @@ public enum SearchMode {\n     @Autowired\n     private UserDAO userDAO;\n \n-    @Resource(name = \"userSearchDAOCriteriaImpl\")\n-    private UserSearchDAO userSearchCriteriaDAO;\n-\n-    @Resource(name = \"userSearchDAONativeImpl\")\n-    private UserSearchDAO userSearchNativeDAO;\n+    @Autowired\n+    private UserSearchDAO userSearchDAO;\n \n     @Autowired\n     private JPAWorkflowEntryDAO workflowEntryDAO;\n@@ -94,43 +90,6 @@ public enum SearchMode {\n     @Autowired\n     private PropagationManager propagationManager;\n \n-    protected static SearchMode searchMode;\n-\n-    public static SearchMode getSearchMode() {\n-        return searchMode;\n-    }\n-\n-    public static void setSearchMode(String searchMode) {\n-        try {\n-            UserController.searchMode = SearchMode.valueOf(\n-                    searchMode.toUpperCase());\n-        } catch (IllegalArgumentException e) {\n-            LOG.error(\"Invalid search mode specified: '\" + searchMode\n-                    + \"', reverting to CRITERIA\");\n-\n-            UserController.searchMode = SearchMode.CRITERIA;\n-        }\n-    }\n-\n-    private UserSearchDAO getSelectedUserSearchDAO() {\n-        UserSearchDAO result;\n-\n-        switch (getSearchMode()) {\n-            case CRITERIA:\n-                result = userSearchCriteriaDAO;\n-                break;\n-\n-            case NATIVE:\n-                result = userSearchNativeDAO;\n-                break;\n-\n-            default:\n-                result = userSearchCriteriaDAO;\n-        }\n-\n-        return result;\n-    }\n-\n     public Integer findWorkflowAction(final Long workflowId,\n             final String actionName) {\n \n@@ -356,8 +315,7 @@ public List<UserTO> search(@RequestBody NodeCond searchCondition)\n             throw new InvalidSearchConditionException();\n         }\n \n-        List<SyncopeUser> matchingUsers =\n-                getSelectedUserSearchDAO().search(searchCondition);\n+        List<SyncopeUser> matchingUsers = userSearchDAO.search(searchCondition);\n         List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n             result.add(userDataBinder.getUserTO(user, userWorkflow));\n@@ -387,8 +345,8 @@ public PaginatedResult paginatedSearch(\n             throw new InvalidSearchConditionException();\n         }\n \n-        final List<SyncopeUser> matchingUsers = getSelectedUserSearchDAO().\n-                search(searchCondition, page, size, paginatedResult);\n+        final List<SyncopeUser> matchingUsers = userSearchDAO.search(\n+                searchCondition, page, size, paginatedResult);\n \n         final List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {"},{"sha":"154a2b2840e63b736e5152727113b9898da73c38","filename":"core/src/main/resources/indexes.xml","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34453842397fc2fa9228aca0c015a87ac5134796/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34453842397fc2fa9228aca0c015a87ac5134796/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml?ref=34453842397fc2fa9228aca0c015a87ac5134796","patch":"@@ -16,16 +16,6 @@\n <properties>\n     <comment>Additional indexes (in respect to JPA's)</comment>\n \n-    <entry key=\"v_schema_nameIndex\">CREATE INDEX v_schema_nameIndex ON user_search_attr(schema_name)</entry>\n-    <entry key=\"v_booleanvalueIndex\">CREATE INDEX v_booleanvalueIndex ON user_search_attr(v_booleanvalue)</entry>\n-    <entry key=\"v_datevalueIndex\">CREATE INDEX v_datevalueIndex ON user_search_attr(v_datevalue)</entry>\n-    <entry key=\"v_doublevalueIndex\">CREATE INDEX v_doublevalueIndex ON user_search_attr(v_doublevalue)</entry>\n-    <entry key=\"v_longvalueIndex\">CREATE INDEX v_longvalueIndex ON user_search_attr(v_longvalue)</entry>\n-    <entry key=\"v_stringvalueIndex\">CREATE INDEX v_stringvalueIndex ON user_search_attr(v_stringvalue)</entry>\n-\n-    <entry key=\"v_role_idIndex\">CREATE INDEX v_role_idIndex ON user_search_membership(role_id)</entry>\n-    <entry key=\"v_role_nameIndex\">CREATE INDEX v_role_nameIndex ON user_search_membership(role_name)</entry>\n-\n     <entry key=\"roleNameIndex\">CREATE INDEX roleNameIndex ON SyncopeRole(name)</entry>\n     <entry key=\"UAttrUniqueValueSchemaIndex\">CREATE INDEX UAttrUniqueValueSchemaIndex ON UAttrUniqueValue(schema_name)</entry>\n     <entry key=\"MAttrUniqueValueSchemaIndex\">CREATE INDEX MAttrUniqueValueSchemaIndex ON MAttrUniqueValue(schema_name)</entry>"},{"sha":"e67678456ac6963317724671513084320af6835d","filename":"core/src/main/resources/persistence.properties","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34453842397fc2fa9228aca0c015a87ac5134796/core%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34453842397fc2fa9228aca0c015a87ac5134796/core%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=34453842397fc2fa9228aca0c015a87ac5134796","patch":"@@ -20,6 +20,3 @@ hibernate.dialect=org.hibernate.dialect.Oracle10gDialect\n #dbUnitDataTypeFactory=org.dbunit.ext.postgresql.PostgresqlDataTypeFactory\n dbUnitDataTypeFactory=org.dbunit.ext.oracle.Oracle10DataTypeFactory\n database.schema=SYNCOPE\n-\n-# criteria | native\n-search.mode=criteria"},{"sha":"154d63e4df86ae3c874841095cc99ff601ea5c53","filename":"core/src/main/resources/views.xml.oracle","status":"removed","additions":0,"deletions":71,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7f40d387fb0ac52d93869022c53f689174af6536/core%2Fsrc%2Fmain%2Fresources%2Fviews.xml.oracle","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7f40d387fb0ac52d93869022c53f689174af6536/core%2Fsrc%2Fmain%2Fresources%2Fviews.xml.oracle","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fviews.xml.oracle?ref=7f40d387fb0ac52d93869022c53f689174af6536","patch":"@@ -1,71 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n-<!--\n-  Licensed under the Apache License, Version 2.0 (the \"License\");\n-  you may not use this file except in compliance with the License.\n-  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-  Unless required by applicable law or agreed to in writing, software\n-  distributed under the License is distributed on an \"AS IS\" BASIS,\n-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-  See the License for the specific language governing permissions and\n-  limitations under the License.\n--->\n-<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n-<properties>\n-    <comment>Views</comment>\n-    <entry key=\"user_search_attr\">\n-CREATE MATERIALIZED VIEW user_search_attr\n-PARALLEL\n-BUILD IMMEDIATE\n-REFRESH FORCE\n-AS\n-\n-SELECT ua.owner_id AS user_id,\n-ua.schema_name AS schema_name,\n-uav.booleanvalue AS booleanvalue,\n-uav.datevalue AS datevalue,\n-uav.doublevalue AS doublevalue,\n-uav.longvalue AS longvalue,\n-uav.stringvalue AS stringvalue\n-FROM uattruniquevalue uav, uattr ua\n-WHERE uav.attribute_id = ua.id\n-\n-UNION ALL\n-\n-SELECT ua.owner_id AS user_id,\n-ua.schema_name AS schema_name,\n-uav.booleanvalue AS booleanvalue,\n-uav.datevalue AS datevalue,\n-uav.doublevalue AS doublevalue,\n-uav.longvalue AS longvalue,\n-uav.stringvalue AS stringvalue\n-FROM uattrvalue uav, uattr ua\n-WHERE uav.attribute_id = ua.id\n-\n-UNION ALL\n-\n-SELECT u.id AS user_id,\n-uschema.name AS schema_name,\n-NULL AS booleanvalue,\n-NULL AS datevalue,\n-NULL AS doublevalue,\n-NULL AS longvalue,\n-NULL AS stringvalue\n-FROM syncopeuser u CROSS JOIN uschema\n-LEFT OUTER JOIN uattr ua ON (uschema.name = ua.schema_name AND ua.owner_id = u.id)\n-WHERE ua.id IS NULL\n-    </entry>\n-    <entry key=\"user_search_membership\">\n-CREATE MATERIALIZED VIEW user_search_membership\n-PARALLEL\n-BUILD IMMEDIATE\n-REFRESH FORCE\n-AS\n-\n-SELECT m.syncopeuser_id AS user_id, r.id AS role_id, r.name AS role_name\n-FROM membership m, syncoperole r\n-WHERE m.syncoperole_id = r.id\n-    </entry>\n-</properties>"},{"sha":"3fe45bfd05028528b4510ed659999f668ff123f6","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserSearchTest.java","status":"modified","additions":2,"deletions":36,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34453842397fc2fa9228aca0c015a87ac5134796/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34453842397fc2fa9228aca0c015a87ac5134796/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java?ref=34453842397fc2fa9228aca0c015a87ac5134796","patch":"@@ -25,7 +25,6 @@\n import java.util.List;\n import java.util.Properties;\n import java.util.Set;\n-import javax.annotation.Resource;\n import org.dbunit.database.DatabaseConfig;\n import org.dbunit.database.DatabaseConnection;\n import org.dbunit.database.IDatabaseConnection;\n@@ -62,11 +61,8 @@ public class UserSearchTest {\n     private static final Logger LOG = LoggerFactory.getLogger(\n             UserSearchTest.class);\n \n-    @Resource(name = \"userSearchDAOCriteriaImpl\")\n-    private UserSearchDAO userSearchCriteriaDAO;\n-\n-    @Resource(name = \"userSearchDAONativeImpl\")\n-    private UserSearchDAO userSearchNativeDAO;\n+    @Autowired\n+    private UserSearchDAO searchDAO;\n \n     @Autowired\n     private DataSource dataSource;\n@@ -133,11 +129,6 @@ public void createDataAndSearchViews()\n \n     @Test\n     public final void searchWithLikeCondition() {\n-        searchWithLikeCondition(userSearchCriteriaDAO);\n-        searchWithLikeCondition(userSearchNativeDAO);\n-    }\n-\n-    private void searchWithLikeCondition(UserSearchDAO searchDAO) {\n         AttributeCond usernameLeafCond =\n                 new AttributeCond(AttributeCond.Type.LIKE);\n         usernameLeafCond.setSchema(\"username\");\n@@ -168,11 +159,6 @@ private void searchWithLikeCondition(UserSearchDAO searchDAO) {\n \n     @Test\n     public final void searchWithNotCondition() {\n-        searchWithNotCondition(userSearchCriteriaDAO);\n-        searchWithNotCondition(userSearchNativeDAO);\n-    }\n-\n-    private void searchWithNotCondition(UserSearchDAO searchDAO) {\n         final AttributeCond usernameLeafCond =\n                 new AttributeCond(AttributeCond.Type.EQ);\n         usernameLeafCond.setSchema(\"username\");\n@@ -194,11 +180,6 @@ private void searchWithNotCondition(UserSearchDAO searchDAO) {\n \n     @Test\n     public final void searchByBoolean() {\n-        searchByBoolean(userSearchCriteriaDAO);\n-        searchByBoolean(userSearchNativeDAO);\n-    }\n-\n-    private void searchByBoolean(UserSearchDAO searchDAO) {\n         final AttributeCond coolLeafCond =\n                 new AttributeCond(AttributeCond.Type.EQ);\n         coolLeafCond.setSchema(\"cool\");\n@@ -216,11 +197,6 @@ private void searchByBoolean(UserSearchDAO searchDAO) {\n \n     @Test\n     public final void searchByPageAndSize() {\n-        searchByPageAndSize(userSearchCriteriaDAO);\n-        searchByPageAndSize(userSearchNativeDAO);\n-    }\n-\n-    private void searchByPageAndSize(UserSearchDAO searchDAO) {\n         AttributeCond usernameLeafCond =\n                 new AttributeCond(AttributeCond.Type.LIKE);\n         usernameLeafCond.setSchema(\"username\");\n@@ -255,11 +231,6 @@ private void searchByPageAndSize(UserSearchDAO searchDAO) {\n \n     @Test\n     public final void searchByMembership() {\n-        searchByMembership(userSearchCriteriaDAO);\n-        searchByMembership(userSearchNativeDAO);\n-    }\n-\n-    private void searchByMembership(UserSearchDAO searchDAO) {\n         MembershipCond membershipCond = new MembershipCond();\n         membershipCond.setRoleId(1L);\n \n@@ -278,11 +249,6 @@ private void searchByMembership(UserSearchDAO searchDAO) {\n \n     @Test\n     public void searchByIsNull() {\n-        searchByIsNull(userSearchCriteriaDAO);\n-        searchByIsNull(userSearchNativeDAO);\n-    }\n-\n-    private void searchByIsNull(UserSearchDAO searchDAO) {\n         AttributeCond coolLeafCond =\n                 new AttributeCond(AttributeCond.Type.ISNULL);\n         coolLeafCond.setSchema(\"cool\");"},{"sha":"9129dd30fbb2301868f6749611203ffd238933f3","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34453842397fc2fa9228aca0c015a87ac5134796/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34453842397fc2fa9228aca0c015a87ac5134796/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=34453842397fc2fa9228aca0c015a87ac5134796","patch":"@@ -494,8 +494,7 @@ public final void search() {\n         searchCondition = NodeCond.getLeafCond(isNullCond);\n \n         matchedUsers = Arrays.asList(\n-                restTemplate.postForObject(\n-                BASE_URL + \"user/search\",\n+                restTemplate.postForObject(BASE_URL + \"user/search\",\n                 searchCondition, UserTO[].class));\n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.isEmpty());"},{"sha":"3f4c07a4e67816015068e9e0710a50413fa333ce","filename":"core/src/test/resources/persistence.properties","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34453842397fc2fa9228aca0c015a87ac5134796/core%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34453842397fc2fa9228aca0c015a87ac5134796/core%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties?ref=34453842397fc2fa9228aca0c015a87ac5134796","patch":"@@ -15,4 +15,3 @@ hibernate.connection.username=sa\n hibernate.connection.password=\n hibernate.dialect=org.hibernate.dialect.HSQLDialect\n dbUnitDataTypeFactory=org.dbunit.ext.hsqldb.HsqldbDataTypeFactory\n-search.mode=criteria"}]}