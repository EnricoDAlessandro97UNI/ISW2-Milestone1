{"sha":"73d0975b015308a673767cb5aa890782a75afde5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjczZDA5NzViMDE1MzA4YTY3Mzc2N2NiNWFhODkwNzgyYTc1YWZkZTU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-07-13T08:47:41Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-07-13T08:47:41Z"},"message":"[SYNCOPE-678] Default values for min / max provided","tree":{"sha":"07d18eda03df90debc196492b1ade0113bc621c6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/07d18eda03df90debc196492b1ade0113bc621c6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/73d0975b015308a673767cb5aa890782a75afde5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/73d0975b015308a673767cb5aa890782a75afde5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/73d0975b015308a673767cb5aa890782a75afde5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/73d0975b015308a673767cb5aa890782a75afde5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"22c91a79422831acd8007a2a17c85f7d27c9445c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/22c91a79422831acd8007a2a17c85f7d27c9445c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/22c91a79422831acd8007a2a17c85f7d27c9445c"}],"stats":{"total":140,"additions":81,"deletions":59},"files":[{"sha":"108dcb35bc1c1e9a56d475dcd0d547f42e32ff2f","filename":"core/src/main/java/org/apache/syncope/core/connid/PasswordGenerator.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/73d0975b015308a673767cb5aa890782a75afde5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/73d0975b015308a673767cb5aa890782a75afde5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java?ref=73d0975b015308a673767cb5aa890782a75afde5","patch":"@@ -36,6 +36,7 @@\n \n /**\n  * Generate random passwords according to given policies.\n+ * When no minimum and / or maximum length are specified, default values are set.\n  *\n  * @see PasswordPolicy\n  */\n@@ -44,6 +45,12 @@ public class PasswordGenerator {\n \n     private static final char[] SPECIAL_CHARS = { '!', '£', '%', '&', '(', ')', '?', '#', '$' };\n \n+    private static final int VERY_MIN_LENGTH = 0;\n+\n+    private static final int VERY_MAX_LENGTH = 64;\n+\n+    private static final int MIN_LENGTH_IF_ZERO = 6;\n+\n     @Autowired\n     private PolicyDAO policyDAO;\n \n@@ -90,8 +97,8 @@ public String generate(final SyncopeUser user)\n \n     private PasswordPolicySpec merge(final List<PasswordPolicySpec> ppSpecs) {\n         PasswordPolicySpec fpps = new PasswordPolicySpec();\n-        fpps.setMinLength(0);\n-        fpps.setMaxLength(1000);\n+        fpps.setMinLength(VERY_MIN_LENGTH);\n+        fpps.setMaxLength(VERY_MAX_LENGTH);\n \n         for (PasswordPolicySpec policySpec : ppSpecs) {\n             if (policySpec.getMinLength() > fpps.getMinLength()) {\n@@ -158,15 +165,17 @@ private PasswordPolicySpec merge(final List<PasswordPolicySpec> ppSpecs) {\n                 fpps.setMustntEndWithAlpha(policySpec.isMustntEndWithAlpha());\n             }\n         }\n+\n+        if (fpps.getMinLength() == 0) {\n+            fpps.setMinLength(fpps.getMaxLength() < MIN_LENGTH_IF_ZERO ? fpps.getMaxLength() : MIN_LENGTH_IF_ZERO);\n+        }\n+\n         return fpps;\n     }\n \n     private void check(final PasswordPolicySpec policySpec)\n             throws InvalidPasswordPolicySpecException {\n \n-        if (policySpec.getMinLength() == 0) {\n-            throw new InvalidPasswordPolicySpecException(\"Minimum length is zero\");\n-        }\n         if (policySpec.isMustEndWithAlpha() && policySpec.isMustntEndWithAlpha()) {\n             throw new InvalidPasswordPolicySpecException(\n                     \"mustEndWithAlpha and mustntEndWithAlpha are both true\");"},{"sha":"54fb4d6935cdf4c358429b5b9ee2f1478d48e979","filename":"core/src/test/java/org/apache/syncope/core/connid/PasswordGeneratorTest.java","status":"modified","additions":67,"deletions":54,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/73d0975b015308a673767cb5aa890782a75afde5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/73d0975b015308a673767cb5aa890782a75afde5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java?ref=73d0975b015308a673767cb5aa890782a75afde5","patch":"@@ -23,6 +23,7 @@\n import static org.junit.Assert.fail;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.common.types.CipherAlgorithm;\n import org.apache.syncope.common.types.PasswordPolicySpec;\n@@ -45,42 +46,46 @@ public class PasswordGeneratorTest extends AbstractNonDAOTest {\n     private UserDAO userDAO;\n \n     @Test\n-    public void issueSYNCOPE226() {\n+    public void forUser() {\n         SyncopeUser user = userDAO.find(5L);\n-        String password = \"\";\n+        String password = null;\n         try {\n             password = passwordGenerator.generate(user);\n         } catch (InvalidPasswordPolicySpecException ex) {\n             fail(ex.getMessage());\n         }\n         assertNotNull(password);\n \n-        user.setPassword(password, CipherAlgorithm.AES);\n-\n-        SyncopeUser actual = userDAO.save(user);\n-        assertNotNull(actual);\n-    }\n-\n-    @Test\n-    public void testPasswordGenerator() {\n-        SyncopeUser user = userDAO.find(5L);\n-\n-        String password = \"\";\n-        try {\n-            password = passwordGenerator.generate(user);\n-\n-        } catch (InvalidPasswordPolicySpecException ex) {\n-            fail(ex.getMessage());\n-        }\n-        assertNotNull(password);\n         user.setPassword(password, CipherAlgorithm.SHA);\n         userDAO.save(user);\n     }\n \n-    @Test\n-    public void startEndWithDigit()\n-            throws InvalidPasswordPolicySpecException {\n+    private PasswordPolicySpec createBasePasswordPolicySpec() {\n+        PasswordPolicySpec basePasswordPolicySpec = new PasswordPolicySpec();\n+        basePasswordPolicySpec.setAlphanumericRequired(false);\n+        basePasswordPolicySpec.setDigitRequired(false);\n+        basePasswordPolicySpec.setLowercaseRequired(false);\n+        basePasswordPolicySpec.setMaxLength(1000);\n+        basePasswordPolicySpec.setMinLength(8);\n+        basePasswordPolicySpec.setMustEndWithAlpha(false);\n+        basePasswordPolicySpec.setMustEndWithDigit(false);\n+        basePasswordPolicySpec.setMustEndWithNonAlpha(false);\n+        basePasswordPolicySpec.setMustStartWithAlpha(false);\n+        basePasswordPolicySpec.setMustStartWithDigit(false);\n+        basePasswordPolicySpec.setMustStartWithNonAlpha(false);\n+        basePasswordPolicySpec.setMustntEndWithAlpha(false);\n+        basePasswordPolicySpec.setMustntEndWithDigit(false);\n+        basePasswordPolicySpec.setMustntEndWithNonAlpha(false);\n+        basePasswordPolicySpec.setMustntStartWithAlpha(false);\n+        basePasswordPolicySpec.setMustntStartWithDigit(false);\n+        basePasswordPolicySpec.setMustntStartWithNonAlpha(false);\n+        basePasswordPolicySpec.setNonAlphanumericRequired(false);\n+        basePasswordPolicySpec.setUppercaseRequired(false);\n+        return basePasswordPolicySpec;\n+    }\n \n+    @Test\n+    public void startEndWithDigit() throws InvalidPasswordPolicySpecException {\n         PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n         passwordPolicySpec.setMustStartWithDigit(true);\n \n@@ -95,9 +100,7 @@ public void startEndWithDigit()\n     }\n \n     @Test\n-    public void startWithDigitAndWithAlpha()\n-            throws InvalidPasswordPolicySpecException {\n-\n+    public void startWithDigitAndWithAlpha() throws InvalidPasswordPolicySpecException {\n         PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n         passwordPolicySpec.setMustStartWithDigit(true);\n \n@@ -112,9 +115,7 @@ public void startWithDigitAndWithAlpha()\n     }\n \n     @Test\n-    public void passwordWithNonAlpha()\n-            throws InvalidPasswordPolicySpecException {\n-\n+    public void passwordWithNonAlpha() throws InvalidPasswordPolicySpecException {\n         PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n         passwordPolicySpec.setNonAlphanumericRequired(true);\n \n@@ -129,9 +130,7 @@ public void passwordWithNonAlpha()\n     }\n \n     @Test(expected = InvalidPasswordPolicySpecException.class)\n-    public void incopatiblePolicies()\n-            throws InvalidPasswordPolicySpecException {\n-\n+    public void incopatiblePolicies() throws InvalidPasswordPolicySpecException {\n         PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n         passwordPolicySpec.setMinLength(12);\n \n@@ -144,27 +143,41 @@ public void incopatiblePolicies()\n         passwordGenerator.generate(passwordPolicySpecs);\n     }\n \n-    private PasswordPolicySpec createBasePasswordPolicySpec() {\n-        PasswordPolicySpec basePasswordPolicySpec = new PasswordPolicySpec();\n-        basePasswordPolicySpec.setAlphanumericRequired(false);\n-        basePasswordPolicySpec.setDigitRequired(false);\n-        basePasswordPolicySpec.setLowercaseRequired(false);\n-        basePasswordPolicySpec.setMaxLength(1000);\n-        basePasswordPolicySpec.setMinLength(8);\n-        basePasswordPolicySpec.setMustEndWithAlpha(false);\n-        basePasswordPolicySpec.setMustEndWithDigit(false);\n-        basePasswordPolicySpec.setMustEndWithNonAlpha(false);\n-        basePasswordPolicySpec.setMustStartWithAlpha(false);\n-        basePasswordPolicySpec.setMustStartWithDigit(false);\n-        basePasswordPolicySpec.setMustStartWithNonAlpha(false);\n-        basePasswordPolicySpec.setMustntEndWithAlpha(false);\n-        basePasswordPolicySpec.setMustntEndWithDigit(false);\n-        basePasswordPolicySpec.setMustntEndWithNonAlpha(false);\n-        basePasswordPolicySpec.setMustntStartWithAlpha(false);\n-        basePasswordPolicySpec.setMustntStartWithDigit(false);\n-        basePasswordPolicySpec.setMustntStartWithNonAlpha(false);\n-        basePasswordPolicySpec.setNonAlphanumericRequired(false);\n-        basePasswordPolicySpec.setUppercaseRequired(false);\n-        return basePasswordPolicySpec;\n+    @Test\n+    public void issueSYNCOPE226() {\n+        SyncopeUser user = userDAO.find(5L);\n+        String password = null;\n+        try {\n+            password = passwordGenerator.generate(user);\n+        } catch (InvalidPasswordPolicySpecException e) {\n+            fail(e.getMessage());\n+        }\n+        assertNotNull(password);\n+\n+        user.setPassword(password, CipherAlgorithm.AES);\n+\n+        SyncopeUser actual = userDAO.save(user);\n+        assertNotNull(actual);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE678() {\n+        String password = null;\n+        try {\n+            password = passwordGenerator.generate(Collections.<PasswordPolicySpec>emptyList());\n+        } catch (InvalidPasswordPolicySpecException e) {\n+            fail(e.getMessage());\n+        }\n+        assertNotNull(password);\n+\n+        PasswordPolicySpec ppSpec = createBasePasswordPolicySpec();\n+        ppSpec.setMinLength(0);\n+        password = null;\n+        try {\n+            password = passwordGenerator.generate(Collections.singletonList(ppSpec));\n+        } catch (InvalidPasswordPolicySpecException e) {\n+            fail(e.getMessage());\n+        }\n+        assertNotNull(password);\n     }\n }"}]}