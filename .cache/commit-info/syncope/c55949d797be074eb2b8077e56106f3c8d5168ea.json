{"sha":"c55949d797be074eb2b8077e56106f3c8d5168ea","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM1NTk0OWQ3OTdiZTA3NGViMmI4MDc3ZTU2MTA2ZjNjOGQ1MTY4ZWE=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-05-19T14:35:21Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-05-19T14:35:21Z"},"message":"Defined UserAttributeSchema plus some refactoring\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1245966 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5204fae5b73eb3e28d19eb425afb8c3190ec2270","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5204fae5b73eb3e28d19eb425afb8c3190ec2270"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c55949d797be074eb2b8077e56106f3c8d5168ea","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c55949d797be074eb2b8077e56106f3c8d5168ea","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c55949d797be074eb2b8077e56106f3c8d5168ea","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c55949d797be074eb2b8077e56106f3c8d5168ea/comments","author":null,"committer":null,"parents":[{"sha":"6b63aea1c3eb836dbc1bb08ede15f4cea3ac3f28","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6b63aea1c3eb836dbc1bb08ede15f4cea3ac3f28","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6b63aea1c3eb836dbc1bb08ede15f4cea3ac3f28"}],"stats":{"total":577,"additions":495,"deletions":82},"files":[{"sha":"2c77dcd1c6f4931627a2fd925fa722594c476e44","filename":"console/src/main/resources/log4j.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c55949d797be074eb2b8077e56106f3c8d5168ea/console%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c55949d797be074eb2b8077e56106f3c8d5168ea/console%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Flog4j.xml?ref=c55949d797be074eb2b8077e56106f3c8d5168ea","patch":"@@ -7,7 +7,7 @@\n         <param name=\"MaxFileSize\" value=\"10240KB\" />\n         <param name=\"MaxBackupIndex\" value=\"10\" />\n         <layout class=\"org.apache.log4j.PatternLayout\">\n-            <param name=\"ConversionPattern\" value=\"%-5p %d %C{1}.%M:%L %m%n\"/>\n+            <param name=\"ConversionPattern\" value=\"%-5p %d %C.%M:%L %m%n\"/>\n         </layout>\n     </appender>\n \n@@ -17,7 +17,7 @@\n         <param name=\"MaxFileSize\" value=\"10240KB\" />\n         <param name=\"MaxBackupIndex\" value=\"10\" />\n         <layout class=\"org.apache.log4j.PatternLayout\">\n-            <param name=\"ConversionPattern\" value=\"%-5p %d %C{1}.%M:%L %m%n\"/>\n+            <param name=\"ConversionPattern\" value=\"%-5p %d %C.%M:%L %m%n\"/>\n         </layout>\n     </appender>\n "},{"sha":"62773465421b8b3097c30fae864dfe827ac3b74d","filename":"core/src/main/java/org/syncope/core/beans/SyncopeUser.java","status":"modified","additions":17,"deletions":6,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FSyncopeUser.java?ref=c55949d797be074eb2b8077e56106f3c8d5168ea","patch":"@@ -23,10 +23,10 @@\n @Entity\n public class SyncopeUser implements Serializable {\n \n-    private Long id;\n-\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n+    private Long id;\n+\n     public Long getId() {\n         return id;\n     }\n@@ -37,18 +37,29 @@ public void setId(Long id) {\n \n     @Override\n     public boolean equals(Object obj) {\n-        if (!(obj instanceof SyncopeUser)) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n             return false;\n         }\n \n-        SyncopeUser other = (SyncopeUser) obj;\n+        final SyncopeUser other = (SyncopeUser) obj;\n+        if (this.id != other.id\n+                && (this.id == null || !this.id.equals(other.id))) {\n \n-        return id.equals(other.id);\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     @Override\n     public int hashCode() {\n-        return id.hashCode();\n+        int hash = 5;\n+        hash = 83 * hash + (this.id != null ? this.id.hashCode() : 0);\n+\n+        return hash;\n     }\n \n     @Override"},{"sha":"4c9d4aeb74c8fbc7e8c24dad2f46e8504539f3b4","filename":"core/src/main/java/org/syncope/core/beans/UserAttributeSchema.java","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeSchema.java?ref=c55949d797be074eb2b8077e56106f3c8d5168ea","patch":"@@ -0,0 +1,126 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.beans;\n+\n+import static javax.persistence.EnumType.STRING;\n+\n+import java.io.Serializable;\n+import javax.persistence.Entity;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Id;\n+import org.syncope.core.enums.AttributeType;\n+\n+@Entity\n+public class UserAttributeSchema implements Serializable {\n+\n+    @Id\n+    private String name;\n+    @Enumerated(STRING)\n+    private AttributeType type;\n+    private String conversionPattern;\n+    private String conversionClass;\n+\n+    public String getConversionClass() {\n+        return conversionClass;\n+    }\n+\n+    public void setConversionClass(String conversionClass) {\n+        this.conversionClass = conversionClass;\n+    }\n+\n+    public String getConversionPattern() {\n+        return conversionPattern;\n+    }\n+\n+    public void setConversionPattern(String conversionPattern) {\n+        this.conversionPattern = conversionPattern;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public AttributeType getType() {\n+        return type;\n+    }\n+\n+    public void setType(AttributeType type) {\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+\n+        final UserAttributeSchema other = (UserAttributeSchema) obj;\n+        if ((this.name == null)\n+                ? (other.name != null) : !this.name.equals(other.name)) {\n+\n+            return false;\n+        }\n+        if (this.type != other.type\n+                && (this.type == null || !this.type.equals(other.type))) {\n+\n+            return false;\n+        }\n+        if ((this.conversionPattern == null)\n+                ? (other.conversionPattern != null)\n+                : !this.conversionPattern.equals(other.conversionPattern)) {\n+\n+            return false;\n+        }\n+        if ((this.conversionClass == null)\n+                ? (other.conversionClass != null)\n+                : !this.conversionClass.equals(other.conversionClass)) {\n+\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 7;\n+\n+        hash = 19 * hash + (this.name != null ? this.name.hashCode() : 0);\n+        hash = 19 * hash + (this.type != null ? this.type.hashCode() : 0);\n+        hash = 19 * hash + (this.conversionPattern != null\n+                ? this.conversionPattern.hashCode() : 0);\n+        hash = 19 * hash + (this.conversionClass != null\n+                ? this.conversionClass.hashCode() : 0);\n+\n+        return hash;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\"\n+                + \"name=\" + name + \",\"\n+                + \"type=\" + type + \",\"\n+                + \"conversionPattern=\" + conversionPattern + \",\"\n+                + \"conversionClass=\" + conversionClass + \",\"\n+                + \")\";\n+    }\n+}"},{"sha":"c7421abe79b27edb5aa5bc7e75a1b2931771e176","filename":"core/src/main/java/org/syncope/core/dao/DAO.java","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FDAO.java?ref=c55949d797be074eb2b8077e56106f3c8d5168ea","patch":"@@ -0,0 +1,18 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.dao;\n+\n+public interface DAO {\n+}"},{"sha":"d8fb44d1f27d8e1344313beb471b01f4876c25a2","filename":"core/src/main/java/org/syncope/core/dao/SyncopeUserDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FSyncopeUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FSyncopeUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FSyncopeUserDAO.java?ref=c55949d797be074eb2b8077e56106f3c8d5168ea","patch":"@@ -17,13 +17,13 @@\n import java.util.List;\n import org.syncope.core.beans.SyncopeUser;\n \n-public interface SyncopeUserDAO {\n+public interface SyncopeUserDAO extends DAO {\n \n     SyncopeUser find(long id);\n \n     List<SyncopeUser> findAll();\n \n-    void save(SyncopeUser syncopeUser);\n+    SyncopeUser save(SyncopeUser syncopeUser);\n \n     void delete(long id);\n }"},{"sha":"7c039af287b54a95da381dd0c183c283f403401e","filename":"core/src/main/java/org/syncope/core/dao/UserAttributeSchemaDAO.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FUserAttributeSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FUserAttributeSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FUserAttributeSchemaDAO.java?ref=c55949d797be074eb2b8077e56106f3c8d5168ea","patch":"@@ -0,0 +1,29 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.dao;\n+\n+import java.util.List;\n+import org.syncope.core.beans.UserAttributeSchema;\n+\n+public interface UserAttributeSchemaDAO extends DAO {\n+\n+    UserAttributeSchema find(String name);\n+\n+    List<UserAttributeSchema> findAll();\n+\n+    UserAttributeSchema save(UserAttributeSchema userAttributeSchema);\n+\n+    void delete(String name);\n+}"},{"sha":"49cbb8949b50b6007636f16fe42089a6ef460ac7","filename":"core/src/main/java/org/syncope/core/dao/impl/AbstractDAOImpl.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FAbstractDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FAbstractDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FAbstractDAOImpl.java?ref=c55949d797be074eb2b8077e56106f3c8d5168ea","patch":"@@ -0,0 +1,30 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.dao.impl;\n+\n+import javax.persistence.EntityManager;\n+\n+public abstract class AbstractDAOImpl {\n+\n+    protected EntityManager entityManager;\n+\n+    public EntityManager getEntityManager() {\n+        return entityManager;\n+    }\n+\n+    public void setEntityManager(EntityManager entityManager) {\n+        this.entityManager = entityManager;\n+    }\n+}"},{"sha":"35aa29760f057041b20e1a8491d7b754829cef8e","filename":"core/src/main/java/org/syncope/core/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":7,"deletions":15,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=c55949d797be074eb2b8077e56106f3c8d5168ea","patch":"@@ -15,23 +15,13 @@\n package org.syncope.core.dao.impl;\n \n import java.util.List;\n-import javax.persistence.EntityManager;\n import javax.persistence.Query;\n+import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.beans.SyncopeUser;\n import org.syncope.core.dao.SyncopeUserDAO;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-public class SyncopeUserDAOImpl implements SyncopeUserDAO {\n-\n-    private EntityManager entityManager;\n \n-    public EntityManager getEntityManager() {\n-        return entityManager;\n-    }\n-\n-    public void setEntityManager(EntityManager entityManager) {\n-        this.entityManager = entityManager;\n-    }\n+public class SyncopeUserDAOImpl extends AbstractDAOImpl\n+        implements SyncopeUserDAO {\n \n     @Override\n     public SyncopeUser find(long id) {\n@@ -46,8 +36,10 @@ public List<SyncopeUser> findAll() {\n \n     @Override\n     @Transactional\n-    public void save(SyncopeUser syncopeUser) {\n-        entityManager.merge(syncopeUser);\n+    public SyncopeUser save(SyncopeUser syncopeUser) {\n+        SyncopeUser result = entityManager.merge(syncopeUser);\n+        entityManager.flush();\n+        return result;\n     }\n \n     @Override"},{"sha":"98288e1de120ca69ba165182cef03a51936d559d","filename":"core/src/main/java/org/syncope/core/dao/impl/UserAttributeSchemaDAOImpl.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserAttributeSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserAttributeSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserAttributeSchemaDAOImpl.java?ref=c55949d797be074eb2b8077e56106f3c8d5168ea","patch":"@@ -0,0 +1,51 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.dao.impl;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.beans.UserAttributeSchema;\n+import org.syncope.core.dao.UserAttributeSchemaDAO;\n+\n+public class UserAttributeSchemaDAOImpl extends AbstractDAOImpl\n+        implements UserAttributeSchemaDAO {\n+\n+    @Override\n+    public UserAttributeSchema find(String name) {\n+        return entityManager.find(UserAttributeSchema.class, name);\n+    }\n+\n+    @Override\n+    public List<UserAttributeSchema> findAll() {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM UserAttributeSchema e\");\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    @Transactional\n+    public UserAttributeSchema save(UserAttributeSchema userAttributeSchema) {\n+        UserAttributeSchema result = entityManager.merge(userAttributeSchema);\n+        entityManager.flush();\n+        return result;\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void delete(String name) {\n+        entityManager.remove(find(name));\n+    }\n+}"},{"sha":"8cb88685a7b25ca08af78fab5a98dadfd566d113","filename":"core/src/main/java/org/syncope/core/enums/AttributeType.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fenums%2FAttributeType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fenums%2FAttributeType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fenums%2FAttributeType.java?ref=c55949d797be074eb2b8077e56106f3c8d5168ea","patch":"@@ -0,0 +1,24 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.enums;\n+\n+public enum AttributeType {\n+\n+    String,\n+    Integer,\n+    Long,\n+    Boolean,\n+    Date\n+}"},{"sha":"e749e3b4ffe4d6f6adbfc7eea7535a4ecb3f3953","filename":"core/src/main/resources/META-INF/persistence.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpersistence.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpersistence.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpersistence.xml?ref=c55949d797be074eb2b8077e56106f3c8d5168ea","patch":"@@ -4,6 +4,7 @@\n              http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\n              version=\"1.0\">\n     <persistence-unit name=\"syncopePersistenceUnit\" transaction-type=\"RESOURCE_LOCAL\">\n-        <!-- all this is configured via spring -->\n+        <properties>\n+        </properties>\n     </persistence-unit>\n </persistence>\n\\ No newline at end of file"},{"sha":"17abd9f783930ae2edd8a0d533f3b58c1ef984de","filename":"core/src/main/resources/applicationContext.xml","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml?ref=c55949d797be074eb2b8077e56106f3c8d5168ea","patch":"@@ -34,7 +34,10 @@\n     </bean>\n \n     <!-- DAOs -->\n-    <bean id=\"userDAO\" class=\"org.syncope.core.dao.impl.SyncopeUserDAOImpl\">\n+    <bean id=\"syncopeUserDAO\" class=\"org.syncope.core.dao.impl.SyncopeUserDAOImpl\">\n+        <property name=\"entityManager\" ref=\"entityManager\" />\n+    </bean>\n+    <bean id=\"userAttributeSchemaDAO\" class=\"org.syncope.core.dao.impl.UserAttributeSchemaDAOImpl\">\n         <property name=\"entityManager\" ref=\"entityManager\" />\n     </bean>\n "},{"sha":"e57173a1222cf80e8e0886f234220222b70b56f1","filename":"core/src/main/resources/log4j.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml?ref=c55949d797be074eb2b8077e56106f3c8d5168ea","patch":"@@ -7,7 +7,7 @@\n         <param name=\"MaxFileSize\" value=\"10240KB\" />\n         <param name=\"MaxBackupIndex\" value=\"10\" />\n         <layout class=\"org.apache.log4j.PatternLayout\">\n-            <param name=\"ConversionPattern\" value=\"%-5p %d %C{1}.%M:%L %m%n\"/>\n+            <param name=\"ConversionPattern\" value=\"%-5p %d %C.%M:%L %m%n\"/>\n         </layout>\n     </appender>\n \n@@ -17,7 +17,7 @@\n         <param name=\"MaxFileSize\" value=\"10240KB\" />\n         <param name=\"MaxBackupIndex\" value=\"10\" />\n         <layout class=\"org.apache.log4j.PatternLayout\">\n-            <param name=\"ConversionPattern\" value=\"%-5p %d %C{1}.%M:%L %m%n\"/>\n+            <param name=\"ConversionPattern\" value=\"%-5p %d %C.%M:%L %m%n\"/>\n         </layout>\n     </appender>\n "},{"sha":"bf647b15d74949d02dd7225ebf9e89f7aaf2b87b","filename":"core/src/test/java/org/syncope/core/test/dao/AbstractDAOTest.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FAbstractDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FAbstractDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FAbstractDAOTest.java?ref=c55949d797be074eb2b8077e56106f3c8d5168ea","patch":"@@ -0,0 +1,78 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.dao;\n+\n+import java.io.FileInputStream;\n+import java.sql.Connection;\n+import javax.sql.DataSource;\n+import org.dbunit.database.DatabaseConfig;\n+import org.dbunit.database.DatabaseConnection;\n+import org.dbunit.database.IDatabaseConnection;\n+import org.dbunit.dataset.IDataSet;\n+import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n+import org.dbunit.ext.hsqldb.HsqldbDataTypeFactory;\n+import org.dbunit.operation.DatabaseOperation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.jdbc.datasource.DataSourceUtils;\n+import org.springframework.test.jpa.AbstractJpaTests;\n+import org.syncope.core.dao.DAO;\n+\n+public abstract class AbstractDAOTest extends AbstractJpaTests {\n+\n+    protected String dataSetFileName;\n+    protected DAO dao;\n+    protected static final Logger log = LoggerFactory.getLogger(\n+            AbstractDAOTest.class);\n+\n+    protected AbstractDAOTest(String beanName, String dataSetFileName) {\n+        super();\n+        this.dataSetFileName = dataSetFileName;\n+\n+        ApplicationContext ctx = super.getApplicationContext();\n+        dao = (DAO) ctx.getBean(beanName);\n+        assertNotNull(dao);\n+    }\n+\n+    @Override\n+    protected String[] getConfigLocations() {\n+        return new String[]{\"applicationContext.xml\"};\n+    }\n+\n+    @Override\n+    protected void onSetUpInTransaction() throws Exception {\n+        DataSource dataSource = jdbcTemplate.getDataSource();\n+        Connection conn = DataSourceUtils.getConnection(dataSource);\n+        IDatabaseConnection dbUnitConn = new DatabaseConnection(conn);\n+\n+        DatabaseConfig config = dbUnitConn.getConfig();\n+        config.setProperty(\"http://www.dbunit.org/properties/datatypeFactory\",\n+                new HsqldbDataTypeFactory());\n+\n+        FlatXmlDataSetBuilder dataSetBuilder = new FlatXmlDataSetBuilder();\n+        IDataSet dataSet = dataSetBuilder.build(new FileInputStream(\n+                \"./src/test/resources/dbunit-test-data/\"\n+                + dataSetFileName + \".xml\"));\n+\n+        try {\n+            DatabaseOperation.REFRESH.execute(dbUnitConn, dataSet);\n+        } finally {\n+            DataSourceUtils.releaseConnection(conn, dataSource);\n+        }\n+    }\n+\n+    protected abstract DAO getDAO();\n+}"},{"sha":"f0700b606207a865f14a3df93c27dba8e1580a91","filename":"core/src/test/java/org/syncope/core/test/dao/SyncopeUserDAOTest.java","status":"modified","additions":13,"deletions":51,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FSyncopeUserDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FSyncopeUserDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FSyncopeUserDAOTest.java?ref=c55949d797be074eb2b8077e56106f3c8d5168ea","patch":"@@ -14,73 +14,35 @@\n  */\n package org.syncope.core.test.dao;\n \n-import java.io.FileInputStream;\n-import java.sql.Connection;\n import java.util.List;\n-import javax.sql.DataSource;\n-import org.dbunit.database.DatabaseConnection;\n-import org.dbunit.database.IDatabaseConnection;\n-import org.dbunit.dataset.IDataSet;\n-import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n-import org.dbunit.operation.DatabaseOperation;\n import org.junit.Test;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.jdbc.datasource.DataSourceUtils;\n-import org.springframework.test.jpa.AbstractJpaTests;\n import org.syncope.core.beans.SyncopeUser;\n import org.syncope.core.dao.SyncopeUserDAO;\n \n-public class SyncopeUserDAOTest extends AbstractJpaTests {\n-\n-    private SyncopeUserDAO dao;\n-    private static final Logger log = LoggerFactory.getLogger(\n-            SyncopeUserDAOTest.class);\n+public class SyncopeUserDAOTest extends AbstractDAOTest {\n \n     public SyncopeUserDAOTest() {\n-        super();\n-\n-        ApplicationContext ctx = super.getApplicationContext();\n-        dao = (SyncopeUserDAO) ctx.getBean(\"userDAO\");\n-        assertNotNull(dao);\n+        super(\"syncopeUserDAO\", \"SyncopeUserDaoImpl\");\n     }\n \n     @Override\n-    protected String[] getConfigLocations() {\n-        return new String[]{\"applicationContext.xml\"};\n-    }\n-\n-    @Override\n-    protected void onSetUpInTransaction() throws Exception {\n-        DataSource dataSource = jdbcTemplate.getDataSource();\n-        Connection conn = DataSourceUtils.getConnection(dataSource);\n-        IDatabaseConnection dbUnitConn = new DatabaseConnection(conn);\n-\n-        FlatXmlDataSetBuilder dataSetBuilder = new FlatXmlDataSetBuilder();\n-        IDataSet dataSet = dataSetBuilder.build(new FileInputStream(\n-                \"./src/test/resources/dbunit-test-data/SyncopeUserDaoImpl.xml\"));\n-\n-        try {\n-            DatabaseOperation.REFRESH.execute(dbUnitConn, dataSet);\n-        } finally {\n-            DataSourceUtils.releaseConnection(conn, dataSource);\n-        }\n+    protected SyncopeUserDAO getDAO() {\n+        return (SyncopeUserDAO) dao;\n     }\n \n     @Test\n     public final void testFindAll() {\n-        List<SyncopeUser> list = dao.findAll();\n+        List<SyncopeUser> list = getDAO().findAll();\n         assertEquals(\"did not get expected number of users \", 3, list.size());\n     }\n \n     @Test\n     public final void testFindById() {\n-        SyncopeUser user = dao.find(1L);\n+        SyncopeUser user = getDAO().find(1L);\n         assertNotNull(\"did not find expected user\", user);\n-        user = dao.find(3L);\n+        user = getDAO().find(3L);\n         assertNotNull(\"did not find expected user\", user);\n-        user = dao.find(4L);\n+        user = getDAO().find(4L);\n         assertNull(\"found user but did not expect it\", user);\n     }\n \n@@ -89,19 +51,19 @@ public final void testSave() {\n         SyncopeUser user = new SyncopeUser();\n         user.setId(4L);\n \n-        dao.save(user);\n+        getDAO().save(user);\n \n-        SyncopeUser actual = dao.find(4L);\n+        SyncopeUser actual = getDAO().find(4L);\n         assertNotNull(\"expected save to work\", actual);\n     }\n \n     @Test\n     public final void testDelete() {\n-        SyncopeUser user = dao.find(1L);\n+        SyncopeUser user = getDAO().find(1L);\n \n-        dao.delete(user.getId());\n+        getDAO().delete(user.getId());\n \n-        SyncopeUser actual = dao.find(1L);\n+        SyncopeUser actual = getDAO().find(1L);\n         assertNull(\"delete did not work\", actual);\n     }\n }"},{"sha":"18d281ea676a87c751ea6863ed1173fa6add2090","filename":"core/src/test/java/org/syncope/core/test/dao/UserAttributeSchemaDAOTest.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserAttributeSchemaDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserAttributeSchemaDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserAttributeSchemaDAOTest.java?ref=c55949d797be074eb2b8077e56106f3c8d5168ea","patch":"@@ -0,0 +1,72 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.dao;\n+\n+import java.util.List;\n+import org.junit.Test;\n+import org.syncope.core.beans.UserAttributeSchema;\n+import org.syncope.core.dao.UserAttributeSchemaDAO;\n+import org.syncope.core.enums.AttributeType;\n+\n+public class UserAttributeSchemaDAOTest extends AbstractDAOTest {\n+\n+    public UserAttributeSchemaDAOTest() {\n+        super(\"userAttributeSchemaDAO\", \"UserAttributeSchemaDAOImpl\");\n+    }\n+\n+    @Override\n+    protected UserAttributeSchemaDAO getDAO() {\n+        return (UserAttributeSchemaDAO) dao;\n+    }\n+\n+    @Test\n+    public final void testFindAll() {\n+        List<UserAttributeSchema> list = getDAO().findAll();\n+        assertEquals(\"did not get expected number of attribute schemas \",\n+                2, list.size());\n+    }\n+\n+    @Test\n+    public final void testFindByName() {\n+        UserAttributeSchema userAttributeSchema = getDAO().find(\"username\");\n+        assertNotNull(\"did not find expected attribute schema\",\n+                userAttributeSchema);\n+        userAttributeSchema = getDAO().find(\"birthdate\");\n+        assertNotNull(\"did not find expected attribute schema\",\n+                userAttributeSchema);\n+    }\n+\n+    @Test\n+    public final void testSave() {\n+        UserAttributeSchema userAttributeSchema = new UserAttributeSchema();\n+        userAttributeSchema.setName(\"email\");\n+        userAttributeSchema.setType(AttributeType.String);\n+\n+        getDAO().save(userAttributeSchema);\n+\n+        UserAttributeSchema actual = getDAO().find(\"email\");\n+        assertNotNull(\"expected save to work\", actual);\n+    }\n+\n+    @Test\n+    public final void testDelete() {\n+        UserAttributeSchema userAttributeSchema = getDAO().find(\"username\");\n+\n+        getDAO().delete(userAttributeSchema.getName());\n+\n+        UserAttributeSchema actual = getDAO().find(\"username\");\n+        assertNull(\"delete did not work\", actual);\n+    }\n+}"},{"sha":"ac506cb56fa301d3884421025a8acfe09cce1769","filename":"core/src/test/resources/dbunit-test-data/UserAttributeSchemaDAOImpl.xml","status":"added","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Ftest%2Fresources%2Fdbunit-test-data%2FUserAttributeSchemaDAOImpl.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c55949d797be074eb2b8077e56106f3c8d5168ea/core%2Fsrc%2Ftest%2Fresources%2Fdbunit-test-data%2FUserAttributeSchemaDAOImpl.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fdbunit-test-data%2FUserAttributeSchemaDAOImpl.xml?ref=c55949d797be074eb2b8077e56106f3c8d5168ea","patch":"@@ -0,0 +1,9 @@\n+<?xml version='1.0' encoding='UTF-8'?>\r\n+<dataset>\r\n+    <UserAttributeSchema name=\"username\" type=\"String\"\r\n+                         conversionPattern=\"NULL\"\r\n+                         conversionClass=\"NULL\"/>\r\n+    <UserAttributeSchema name=\"birthdate\" type=\"Date\"\r\n+                         conversionPattern=\"yyyy-MM-dd\"\r\n+                         conversionClass=\"java.text.SimpleDateFormat\" />\r\n+</dataset>\r"},{"sha":"e4f8ed5fa2f37e81cea91df181d72c5e76bbfd95","filename":"pom.xml","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c55949d797be074eb2b8077e56106f3c8d5168ea/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c55949d797be074eb2b8077e56106f3c8d5168ea/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=c55949d797be074eb2b8077e56106f3c8d5168ea","patch":"@@ -287,6 +287,13 @@\n                         <target>1.6</target>\n                     </configuration>\n                 </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-surefire-plugin</artifactId>\n+                    <configuration>\n+                        <redirectTestOutputToFile>true</redirectTestOutputToFile>\n+                    </configuration>\n+                </plugin>\n                 <plugin>\n                     <groupId>org.apache.maven.plugins</groupId>\n                     <artifactId>maven-checkstyle-plugin</artifactId>"},{"sha":"6a4db4eb08d4dc9a2acaf36036a09f1e96213678","filename":"rest/src/main/resources/log4j.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c55949d797be074eb2b8077e56106f3c8d5168ea/rest%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c55949d797be074eb2b8077e56106f3c8d5168ea/rest%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fresources%2Flog4j.xml?ref=c55949d797be074eb2b8077e56106f3c8d5168ea","patch":"@@ -7,7 +7,7 @@\n         <param name=\"MaxFileSize\" value=\"10240KB\" />\n         <param name=\"MaxBackupIndex\" value=\"10\" />\n         <layout class=\"org.apache.log4j.PatternLayout\">\n-            <param name=\"ConversionPattern\" value=\"%-5p %d %C{1}.%M:%L %m%n\"/>\n+            <param name=\"ConversionPattern\" value=\"%-5p %d %C.%M:%L %m%n\"/>\n         </layout>\n     </appender>\n \n@@ -17,7 +17,7 @@\n         <param name=\"MaxFileSize\" value=\"10240KB\" />\n         <param name=\"MaxBackupIndex\" value=\"10\" />\n         <layout class=\"org.apache.log4j.PatternLayout\">\n-            <param name=\"ConversionPattern\" value=\"%-5p %d %C{1}.%M:%L %m%n\"/>\n+            <param name=\"ConversionPattern\" value=\"%-5p %d %C.%M:%L %m%n\"/>\n         </layout>\n     </appender>\n "}]}