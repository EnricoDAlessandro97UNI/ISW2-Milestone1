{"sha":"fa9d913813be2b5bf1271afba1bd083c4f5dca80","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZhOWQ5MTM4MTNiZTJiNWJmMTI3MWFmYmExYmQwODNjNGY1ZGNhODA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-02-18T13:39:27Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-02-18T13:44:12Z"},"message":"Various cleanings","tree":{"sha":"dbce071fdd9256deb7574ca3723f5d694a10e083","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/dbce071fdd9256deb7574ca3723f5d694a10e083"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/fa9d913813be2b5bf1271afba1bd083c4f5dca80","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fa9d913813be2b5bf1271afba1bd083c4f5dca80","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fa9d913813be2b5bf1271afba1bd083c4f5dca80","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fa9d913813be2b5bf1271afba1bd083c4f5dca80/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"2d28f32878426e580d53d4545ce404fb72cf55b3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2d28f32878426e580d53d4545ce404fb72cf55b3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2d28f32878426e580d53d4545ce404fb72cf55b3"}],"stats":{"total":105,"additions":68,"deletions":37},"files":[{"sha":"93cd503e55d78bd052908d381197c11cce7109aa","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/any/ProvisioningReportsPanel.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa9d913813be2b5bf1271afba1bd083c4f5dca80/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa9d913813be2b5bf1271afba1bd083c4f5dca80/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel.java?ref=fa9d913813be2b5bf1271afba1bd083c4f5dca80","patch":"@@ -51,6 +51,7 @@ public WebMarkupContainer getPanel(final String panelId) {\n                 return new ListViewPanel.Builder<>(ProvisioningReport.class, pageRef).\n                         setItems(success).\n                         withChecks(ListViewPanel.CheckAvailability.NONE).\n+                        setCaptionVisible(false).\n                         includes(\"name\", \"message\").\n                         build(panelId);\n             }\n@@ -69,6 +70,7 @@ public WebMarkupContainer getPanel(final String panelId) {\n                 return new ListViewPanel.Builder<>(ProvisioningReport.class, pageRef).\n                         setItems(failure).\n                         withChecks(ListViewPanel.CheckAvailability.NONE).\n+                        setCaptionVisible(false).\n                         includes(\"name\", \"message\").\n                         build(panelId);\n             }\n@@ -87,6 +89,7 @@ public WebMarkupContainer getPanel(final String panelId) {\n                 return new ListViewPanel.Builder<>(ProvisioningReport.class, pageRef).\n                         setItems(ignore).\n                         withChecks(ListViewPanel.CheckAvailability.NONE).\n+                        setCaptionVisible(false).\n                         includes(\"name\", \"message\").\n                         build(panelId);\n             }"},{"sha":"a1aa8078f77f6adb6a3346f68bc2e7a6c59ec4c6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/AnyDataProvider.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa9d913813be2b5bf1271afba1bd083c4f5dca80/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa9d913813be2b5bf1271afba1bd083c4f5dca80/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java?ref=fa9d913813be2b5bf1271afba1bd083c4f5dca80","patch":"@@ -115,7 +115,6 @@ public Iterator<A> iterator(final long first, final long count) {\n                     -> ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(ajaxRequestTarget));\n         }\n \n-        result.sort(comparator);\n         return result.iterator();\n     }\n "},{"sha":"6c3f419cd8dff87544fd55b8f6c7381ae7b2a1bb","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ListViewPanel.java","status":"modified","additions":21,"deletions":4,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa9d913813be2b5bf1271afba1bd083c4f5dca80/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa9d913813be2b5bf1271afba1bd083c4f5dca80/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java?ref=fa9d913813be2b5bf1271afba1bd083c4f5dca80","patch":"@@ -40,6 +40,7 @@\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.core.util.lang.PropertyResolver;\n import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.Check;\n import org.apache.wicket.markup.html.form.CheckGroup;\n@@ -104,17 +105,25 @@ private ListViewPanel(\n             final CheckAvailability check,\n             final boolean reuseItem,\n             final boolean wizardInModal,\n+            final boolean captionVisible,\n             final IModel<? extends Collection<T>> model) {\n+\n         super(id, wizardInModal);\n         setOutputMarkupId(true);\n \n         togglePanel = getTogglePanel();\n \n         this.check = Model.of(check);\n \n-        addInnerObject(new Label(\"caption\", new ResourceModel(\"listview.caption\", StringUtils.EMPTY)));\n+        WebMarkupContainer captionContainer = new WebMarkupContainer(\"captionContainer\");\n+        captionContainer.setOutputMarkupPlaceholderTag(true);\n+        captionContainer.setVisible(captionVisible);\n+        addInnerObject(captionContainer);\n+\n+        Label caption = new Label(\"caption\", new ResourceModel(\"listview.caption\", StringUtils.EMPTY));\n+        captionContainer.add(caption);\n \n-        final CheckGroup<T> checkGroup = new CheckGroup<>(\"group\", model);\n+        CheckGroup<T> checkGroup = new CheckGroup<>(\"group\", model);\n         checkGroup.setOutputMarkupId(true);\n         checkGroup.add(new IndicatorAjaxFormChoiceComponentUpdatingBehavior() {\n \n@@ -273,6 +282,8 @@ public void setCheckAvailability(final CheckAvailability check) {\n \n         private boolean reuseItem = true;\n \n+        private boolean captionVisible = true;\n+\n         private final Class<T> reference;\n \n         public Builder(final Class<T> reference, final PageReference pageRef) {\n@@ -322,8 +333,14 @@ public Builder<T> withChecks(final CheckAvailability check) {\n             return this;\n         }\n \n-        public void setReuseItem(final boolean reuseItem) {\n+        public Builder<T> setReuseItem(final boolean reuseItem) {\n             this.reuseItem = reuseItem;\n+            return this;\n+        }\n+\n+        public Builder<T> setCaptionVisible(final boolean captionVisible) {\n+            this.captionVisible = captionVisible;\n+            return this;\n         }\n \n         /**\n@@ -406,7 +423,7 @@ protected T getActualItem(final T item, final List<T> list) {\n         @Override\n         protected WizardMgtPanel<T> newInstance(final String id, final boolean wizardInModal) {\n             return new ListViewPanel<T>(\n-                    id, items, reference, includes, actions, check, reuseItem, wizardInModal, model) {\n+                    id, items, reference, includes, actions, check, reuseItem, wizardInModal, captionVisible, model) {\n \n                 private static final long serialVersionUID = -1715389337530657988L;\n "},{"sha":"ca871d8f1f968ff4ef1eebea134570cb30b40384","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/ListViewPanel.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa9d913813be2b5bf1271afba1bd083c4f5dca80/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa9d913813be2b5bf1271afba1bd083c4f5dca80/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.html?ref=fa9d913813be2b5bf1271afba1bd083c4f5dca80","patch":"@@ -24,7 +24,7 @@\n     <wicket:extend>\n       <div class=\"col-xs-12\">\n         <div class=\"box\">\n-          <div class=\"box-header\">\n+          <div class=\"box-header\" wicket:id=\"captionContainer\">\n             <h3 class=\"box-title\">\n               <span wicket:id=\"caption\"/>\n             </h3>"},{"sha":"687f2aecd8fe0b5b2bb35da85152fdb5e8d7ebab","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":43,"deletions":31,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa9d913813be2b5bf1271afba1bd083c4f5dca80/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa9d913813be2b5bf1271afba1bd083c4f5dca80/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=fa9d913813be2b5bf1271afba1bd083c4f5dca80","patch":"@@ -170,7 +170,7 @@ protected <T extends Any<?>> List<T> doSearch(\n             LOG.debug(\"Query: {}, parameters: {}\", queryString, parameters);\n \n             // 2. take into account realms and ordering\n-            OrderBySupport obs = parseOrderBy(kind, svs, orderBy);\n+            OrderBySupport obs = parseOrderBy(svs, orderBy);\n             if (queryString.charAt(0) == '(') {\n                 queryString.insert(0, buildSelect(obs));\n                 queryString.append(buildWhere(svs, queryInfo.getRight(), obs));\n@@ -382,12 +382,20 @@ protected void parseOrderByForPlainSchema(\n         }\n     }\n \n+    protected void parseOrderByForCustom(\n+            final SearchSupport svs,\n+            final OrderByClause clause,\n+            final OrderBySupport.Item item,\n+            final OrderBySupport obs) {\n+\n+        // do nothing by default, meant for subclasses\n+    }\n+\n     private OrderBySupport parseOrderBy(\n-            final AnyTypeKind kind,\n             final SearchSupport svs,\n             final List<OrderByClause> orderBy) {\n \n-        AnyUtils anyUtils = anyUtilsFactory.getInstance(kind);\n+        AnyUtils anyUtils = anyUtilsFactory.getInstance(svs.anyTypeKind);\n \n         OrderBySupport obs = new OrderBySupport();\n \n@@ -396,38 +404,42 @@ private OrderBySupport parseOrderBy(\n         orderBy.forEach(clause -> {\n             OrderBySupport.Item item = new OrderBySupport.Item();\n \n-            if (anyUtils.getField(clause.getField()) == null) {\n-                PlainSchema schema = schemaDAO.find(clause.getField());\n-                if (schema != null) {\n-                    if (schema.isUniqueConstraint()) {\n-                        orderByUniquePlainSchemas.add(schema.getKey());\n-                    } else {\n-                        orderByNonUniquePlainSchemas.add(schema.getKey());\n-                    }\n-                    if (orderByUniquePlainSchemas.size() > 1 || orderByNonUniquePlainSchemas.size() > 1) {\n-                        SyncopeClientException invalidSearch =\n-                                SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n-                        invalidSearch.getElements().add(\"Order by more than one attribute is not allowed; \"\n-                                + \"remove one from \" + (orderByUniquePlainSchemas.size() > 1\n-                                ? orderByUniquePlainSchemas : orderByNonUniquePlainSchemas));\n-                        throw invalidSearch;\n+            parseOrderByForCustom(svs, clause, item, obs);\n+\n+            if (item.isEmpty()) {\n+                if (anyUtils.getField(clause.getField()) == null) {\n+                    PlainSchema schema = schemaDAO.find(clause.getField());\n+                    if (schema != null) {\n+                        if (schema.isUniqueConstraint()) {\n+                            orderByUniquePlainSchemas.add(schema.getKey());\n+                        } else {\n+                            orderByNonUniquePlainSchemas.add(schema.getKey());\n+                        }\n+                        if (orderByUniquePlainSchemas.size() > 1 || orderByNonUniquePlainSchemas.size() > 1) {\n+                            SyncopeClientException invalidSearch =\n+                                    SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+                            invalidSearch.getElements().add(\"Order by more than one attribute is not allowed; \"\n+                                    + \"remove one from \" + (orderByUniquePlainSchemas.size() > 1\n+                                    ? orderByUniquePlainSchemas : orderByNonUniquePlainSchemas));\n+                            throw invalidSearch;\n+                        }\n+                        parseOrderByForPlainSchema(svs, obs, item, clause, schema, clause.getField());\n                     }\n-                    parseOrderByForPlainSchema(svs, obs, item, clause, schema, clause.getField());\n-                }\n-            } else {\n-                // Manage difference among external key attribute and internal JPA @Id\n-                String fieldName = \"key\".equals(clause.getField()) ? \"id\" : clause.getField();\n+                } else {\n+                    // Manage difference among external key attribute and internal JPA @Id\n+                    String fieldName = \"key\".equals(clause.getField()) ? \"id\" : clause.getField();\n \n-                // Adjust field name to column name\n-                if (ArrayUtils.contains(RELATIONSHIP_FIELDS, fieldName)) {\n-                    fieldName += \"_id\";\n-                }\n+                    // Adjust field name to column name\n+                    if (ArrayUtils.contains(RELATIONSHIP_FIELDS, fieldName)) {\n+                        fieldName += \"_id\";\n+                    }\n \n-                obs.views.add(svs.field());\n+                    obs.views.add(svs.field());\n \n-                item.select = svs.field().alias + '.' + fieldName;\n-                item.where = StringUtils.EMPTY;\n-                item.orderBy = svs.field().alias + '.' + fieldName + ' ' + clause.getDirection().name();\n+                    item.select = svs.field().alias + '.' + fieldName;\n+                    item.where = StringUtils.EMPTY;\n+                    item.orderBy = svs.field().alias + '.' + fieldName + ' ' + clause.getDirection().name();\n+                }\n             }\n \n             if (item.isEmpty()) {"}]}