{"sha":"52e62d892e1393419e5bf752ff1e970821842a2d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUyZTYyZDg5MmUxMzkzNDE5ZTViZjc1MmZmMWU5NzA4MjE4NDJhMmQ=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2018-12-14T14:38:23Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2018-12-14T15:04:15Z"},"message":"[SYNCOPE-1416] merge on jsonb implementation","tree":{"sha":"23212aea2b61897058b22a45fc575f0e35d18c18","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/23212aea2b61897058b22a45fc575f0e35d18c18"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/52e62d892e1393419e5bf752ff1e970821842a2d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/52e62d892e1393419e5bf752ff1e970821842a2d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/52e62d892e1393419e5bf752ff1e970821842a2d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/52e62d892e1393419e5bf752ff1e970821842a2d/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"427db760a32c9989b7fd2248608286fc43037c9b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/427db760a32c9989b7fd2248608286fc43037c9b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/427db760a32c9989b7fd2248608286fc43037c9b"}],"stats":{"total":153,"additions":118,"deletions":35},"files":[{"sha":"75b8ff507a742d3d4c19b96594dd26790b3fce0f","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":84,"deletions":21,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52e62d892e1393419e5bf752ff1e970821842a2d/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52e62d892e1393419e5bf752ff1e970821842a2d/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=52e62d892e1393419e5bf752ff1e970821842a2d","patch":"@@ -18,10 +18,16 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.text.ParseException;\n import java.util.Arrays;\n import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n@@ -34,17 +40,60 @@\n \n public class PGJPAJSONAnySearchDAO extends JPAAnySearchDAO {\n \n+    private static final FastDateFormat DATE_FORMAT = FastDateFormat.getInstance(SyncopeConstants.DEFAULT_DATE_PATTERN);\n+\n     @Override\n     SearchSupport buildSearchSupport(final AnyTypeKind kind) {\n         return new SearchSupport(kind);\n     }\n \n     @Override\n-    protected void processOBS(final SearchSupport svs, final OrderBySupport obs, final StringBuilder where) {\n+    protected void processOBS(\n+            final SearchSupport svs,\n+            final Set<String> involvedPlainAttrs,\n+            final OrderBySupport obs,\n+            final StringBuilder where) {\n+\n+        Set<String> attrs = obs.items.stream().\n+                map(item -> item.orderBy.substring(0, item.orderBy.indexOf(\" \"))).collect(Collectors.toSet());\n+\n         obs.views.forEach(searchView -> {\n-            where.append(',').\n-                    append(searchView.name).\n-                    append(' ').append(searchView.alias);\n+            if (searchView.name.equals(svs.field().name)) {\n+                StringBuilder attrWhere = new StringBuilder();\n+                StringBuilder nullAttrWhere = new StringBuilder();\n+\n+                where.append(\", (SELECT * FROM \").append(searchView.name);\n+\n+                if (svs.nonMandatorySchemas || obs.nonMandatorySchemas) {\n+                    attrs.forEach(field -> {\n+                        if (attrWhere.length() == 0) {\n+                            attrWhere.append(\" WHERE \");\n+                        } else {\n+                            attrWhere.append(\" OR \");\n+                        }\n+                        attrWhere.append(\"plainAttrs @> '[{\\\"schema\\\":\\\"\").append(field).append(\"\\\"}]'::jsonb\");\n+\n+                        nullAttrWhere.append(\" UNION SELECT DISTINCT any_id,\").append(svs.table().alias).append(\".*, \").\n+                                append(\"'{\\\"schema\\\": \\\"\").\n+                                append(field).\n+                                append(\"\\\"}'::jsonb as attrs, '{}'::jsonb as attrValues\").\n+                                append(\" FROM \").append(svs.table().name).append(\" \").append(svs.table().alias).\n+                                append(\", \").append(svs.field().name).\n+                                append(\" WHERE \").\n+                                append(\"any_id NOT IN \").\n+                                append(\"(SELECT distinct any_id FROM \").\n+                                append(svs.field().name).\n+                                append(\" WHERE \").append(svs.table().alias).append(\".id=any_id AND \").\n+                                append(\"plainAttrs @> '[{\\\"schema\\\":\\\"\").append(field).append(\"\\\"}]'::jsonb)\");\n+                    });\n+                    where.append(attrWhere).append(nullAttrWhere);\n+                }\n+\n+                where.append(')');\n+            } else {\n+                where.append(',').append(searchView.name);\n+            }\n+            where.append(' ').append(searchView.alias);\n         });\n     }\n \n@@ -62,20 +111,12 @@ protected void parseOrderByForPlainSchema(\n \n         obs.views.add(svs.field());\n \n-        item.select = svs.field().alias + \".attrValues ->> '\" + fieldName + \"' AS \" + fieldName;\n+        item.select = svs.field().alias + \".attrValues ->> '\" + field(schema, null) + \"' AS \" + fieldName;\n         item.where = \"attrs ->> 'schema' = '\" + fieldName + \"'\";\n         item.orderBy = fieldName + \" \" + clause.getDirection().name();\n     }\n \n-    private void fillAttrQuery(\n-            final AnyUtils anyUtils,\n-            final StringBuilder query,\n-            final PlainAttrValue attrValue,\n-            final PlainSchema schema,\n-            final AttributeCond cond,\n-            final boolean not,\n-            final List<Object> parameters) {\n-\n+    private Pair<Boolean, String> field(final PlainSchema schema, final AttributeCond.Type type) {\n         String key;\n         boolean lower = false;\n         switch (schema.getType()) {\n@@ -100,9 +141,22 @@ private void fillAttrQuery(\n                 break;\n \n             default:\n-                lower = cond.getType() == AttributeCond.Type.IEQ || cond.getType() == AttributeCond.Type.ILIKE;\n+                lower = type == AttributeCond.Type.IEQ || type == AttributeCond.Type.ILIKE;\n                 key = \"stringValue\";\n         }\n+        return Pair.of(lower, key);\n+    }\n+\n+    private void fillAttrQuery(\n+            final AnyUtils anyUtils,\n+            final StringBuilder query,\n+            final PlainAttrValue attrValue,\n+            final PlainSchema schema,\n+            final AttributeCond cond,\n+            final boolean not,\n+            final List<Object> parameters) {\n+\n+        Pair<Boolean, String> field = field(schema, cond.getType());\n \n         if (!not && cond.getType() == AttributeCond.Type.EQ) {\n             PlainAttr<?> container = anyUtils.newPlainAttr();\n@@ -119,11 +173,11 @@ private void fillAttrQuery(\n         } else {\n             query.append(\"attrs ->> 'schema' = ?\").append(setParameter(parameters, cond.getSchema())).\n                     append(\" AND \").\n-                    append(lower ? \"LOWER(\" : \"\").\n+                    append(field.getLeft() ? \"LOWER(\" : \"\").\n                     append(schema.isUniqueConstraint()\n                             ? \"attrs -> 'uniqueValue'\" : \"attrValues\").\n-                    append(\" ->> '\").append(key).append(\"'\").\n-                    append(lower ? \")\" : \"\");\n+                    append(\" ->> '\").append(field.getRight()).append(\"'\").\n+                    append(field.getLeft() ? \")\" : \"\");\n \n             switch (cond.getType()) {\n                 case LIKE:\n@@ -175,9 +229,18 @@ private void fillAttrQuery(\n                     query.append('=');\n             }\n \n-            query.append(lower ? \"LOWER(\" : \"\").\n-                    append(\"?\").append(setParameter(parameters, cond.getExpression())).\n-                    append(lower ? \")\" : \"\");\n+            String value = cond.getExpression();\n+            if (schema.getType() == AttrSchemaType.Date) {\n+                try {\n+                    value = String.valueOf(DATE_FORMAT.parse(value).getTime());\n+                } catch (ParseException e) {\n+                    LOG.error(\"Could not parse {} as date\", value, e);\n+                }\n+            }\n+\n+            query.append(field.getLeft() ? \"LOWER(\" : \"\").\n+                    append(\"?\").append(setParameter(parameters, value)).\n+                    append(field.getLeft() ? \")\" : \"\");\n         }\n     }\n "},{"sha":"0a50b2d242f5811ec9d271bf41af2b6c10549520","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52e62d892e1393419e5bf752ff1e970821842a2d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52e62d892e1393419e5bf752ff1e970821842a2d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=52e62d892e1393419e5bf752ff1e970821842a2d","patch":"@@ -245,10 +245,8 @@ protected void processOBS(\n             final OrderBySupport obs,\n             final StringBuilder where) {\n \n-        Set<String> attrs = new HashSet<>(involvedPlainAttrs);\n-        for (OrderBySupport.Item item : obs.items) {\n-            attrs.add(item.orderBy.substring(0, item.orderBy.indexOf(\" \")));\n-        }\n+        Set<String> attrs = obs.items.stream().\n+                map(item -> item.orderBy.substring(0, item.orderBy.indexOf(\" \"))).collect(Collectors.toSet());\n \n         obs.views.forEach(searchView -> {\n             where.append(',');\n@@ -261,10 +259,11 @@ protected void processOBS(\n                 if (svs.nonMandatorySchemas || obs.nonMandatorySchemas) {\n                     attrs.forEach(field -> {\n                         if (attrWhere.length() == 0) {\n-                            attrWhere.append(\" WHERE schema_id='\").append(field).append(\"'\");\n+                            attrWhere.append(\" WHERE \");\n                         } else {\n-                            attrWhere.append(\" OR \").append(\"schema_id='\").append(field).append(\"'\");\n+                            attrWhere.append(\" OR \");\n                         }\n+                        attrWhere.append(\"schema_id='\").append(field).append(\"'\");\n \n                         nullAttrWhere.append(\" UNION SELECT any_id, \").\n                                 append(\"'\")."},{"sha":"f10b29a17bce5a95fb8cf5b313881f95bd148dc6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchSupport.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52e62d892e1393419e5bf752ff1e970821842a2d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52e62d892e1393419e5bf752ff1e970821842a2d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java?ref=52e62d892e1393419e5bf752ff1e970821842a2d","patch":"@@ -22,6 +22,9 @@\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n+import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n \n public class SearchSupport {\n \n@@ -103,6 +106,27 @@ public String fieldName(final AttrSchemaType attrSchemaType) {\n         return result;\n     }\n \n+    public SearchView table() {\n+        String result;\n+\n+        switch (anyTypeKind) {\n+            case ANY_OBJECT:\n+                result = JPAAnyObject.TABLE;\n+                break;\n+\n+            case GROUP:\n+                result = JPAGroup.TABLE;\n+                break;\n+\n+            case USER:\n+            default:\n+                result = JPAUser.TABLE;\n+                break;\n+        }\n+\n+        return new SearchView(\"t\", result);\n+    }\n+\n     public SearchView field() {\n         String result;\n "},{"sha":"93045f99ddea366d0ee6dc01be4227baa761ad99","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchViewSupport.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52e62d892e1393419e5bf752ff1e970821842a2d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchViewSupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52e62d892e1393419e5bf752ff1e970821842a2d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchViewSupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchViewSupport.java?ref=52e62d892e1393419e5bf752ff1e970821842a2d","patch":"@@ -30,10 +30,6 @@ public SearchView attr() {\n         return new SearchView(\"sva\", field().name + \"_attr\");\n     }\n \n-    public SearchView nullAttr() {\n-        return new SearchView(\"svna\", field().name + \"_null_attr\");\n-    }\n-\n     public SearchView uniqueAttr() {\n         return new SearchView(\"svua\", field().name + \"_unique_attr\");\n     }"},{"sha":"3c5156fbf7e41950ff17541e5b1a8b8df7a2d9c0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52e62d892e1393419e5bf752ff1e970821842a2d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52e62d892e1393419e5bf752ff1e970821842a2d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=52e62d892e1393419e5bf752ff1e970821842a2d","patch":"@@ -295,7 +295,7 @@ public void searchByDate() {\n         PagedResult<UserTO> issueSYNCOPE1416 = userService.search(new AnyQuery.Builder().\n                 realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().\n-                        is(\"loginDate\").lexicalNotBefore(\"2009-05-26\").\n+                        is(\"loginDate\").lexicalNotBefore(\"2009-05-26T00:00:00+0300\").\n                         and(\"username\").equalTo(\"rossini\").query()).\n                 orderBy(SyncopeClient.getOrderByClauseBuilder().asc(\"loginDate\").build()).\n                 build());\n@@ -440,9 +440,10 @@ public void member() {\n     @Test\n     public void orderBy() {\n         PagedResult<UserTO> matchingUsers = userService.search(\n-                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                        fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"userId\").equalTo(\"*@apache.org\").query()).\n-                        orderBy(SyncopeClient.getOrderByClauseBuilder().asc(\"status\").desc(\"firstname\").build()).build());\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).fiql(\n+                        SyncopeClient.getUserSearchConditionBuilder().is(\"userId\").equalTo(\"*@apache.org\").query()).\n+                        orderBy(SyncopeClient.getOrderByClauseBuilder().asc(\"status\").desc(\"firstname\").build()).\n+                        build());\n         assertNotNull(matchingUsers);\n \n         assertFalse(matchingUsers.getResult().isEmpty());"}]}