{"sha":"f88a6ac12d9d69e38bec450a5ef345412be908d4","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY4OGE2YWMxMmQ5ZDY5ZTM4YmVjNDUwYTVlZjM0NTQxMmJlOTA4ZDQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-01T15:30:14Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-01T15:30:14Z"},"message":"Merge from branch 1_0_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1392394 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f177ee23e64b6295b0163954d10085907632c94d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f177ee23e64b6295b0163954d10085907632c94d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f88a6ac12d9d69e38bec450a5ef345412be908d4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f88a6ac12d9d69e38bec450a5ef345412be908d4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f88a6ac12d9d69e38bec450a5ef345412be908d4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f88a6ac12d9d69e38bec450a5ef345412be908d4/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d7b5a8fd08abbeaa986654fc84ce79ad8001d82c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d7b5a8fd08abbeaa986654fc84ce79ad8001d82c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d7b5a8fd08abbeaa986654fc84ce79ad8001d82c"}],"stats":{"total":341,"additions":147,"deletions":194},"files":[{"sha":"b13797bf8fdad26d1f29a456e2f85da778df1241","filename":"core/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=f88a6ac12d9d69e38bec450a5ef345412be908d4","patch":"@@ -902,7 +902,7 @@ under the License.\n         <dependency>\n           <groupId>com.microsoft.sqlserver</groupId>\n           <artifactId>sqljdbc4</artifactId>\n-          <version>3.0</version>\n+          <version>4.0</version>\n           <scope>test</scope>\n         </dependency>\n       </dependencies>\n@@ -992,7 +992,7 @@ under the License.\n         <dependency>\n           <groupId>mysql</groupId>\n           <artifactId>mysql-connector-java</artifactId>\n-          <version>5.1.18</version>\n+          <version>5.1.21</version>\n           <scope>test</scope>\n         </dependency>\n       </dependencies>"},{"sha":"aeb111505e31c3ed5fb75470e9eed142487c7ed2","filename":"core/src/main/java/org/apache/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":22,"deletions":2,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=f88a6ac12d9d69e38bec450a5ef345412be908d4","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.init;\n \n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n@@ -38,6 +39,7 @@\n import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.quartz.Job;\n import org.quartz.JobDetail;\n+import org.quartz.JobExecutionContext;\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n import org.slf4j.Logger;\n@@ -110,6 +112,24 @@ public static String getTriggerName(final String jobName) {\n     }\n \n     private void registerJob(final String jobName, final Job jobInstance, final String cronExpression) throws Exception {\n+        synchronized (scheduler.getScheduler()) {\n+            boolean jobAlreadyRunning = false;\n+            for (JobExecutionContext jobCtx : (List<JobExecutionContext>) scheduler.getScheduler().\n+                    getCurrentlyExecutingJobs()) {\n+\n+                if (jobName.equals(jobCtx.getJobDetail().getName())\n+                        && Scheduler.DEFAULT_GROUP.equals(jobCtx.getJobDetail().getGroup())) {\n+\n+                    jobAlreadyRunning = true;\n+\n+                    LOG.debug(\"Job {} already running, cancel\", jobCtx.getJobDetail().getFullName());\n+                }\n+            }\n+\n+            if (jobAlreadyRunning) {\n+                return;\n+            }\n+        }\n \n         // 0. unregister job\n         unregisterJob(jobName);\n@@ -149,8 +169,8 @@ public void registerJob(final Task task, final String jobClassName, final String\n                 try {\n                     syncJobActionsClass = Class.forName(jobActionsClassName);\n                 } catch (Exception e) {\n-                    LOG.error(\"Class {} not found, reverting to {}\", new Object[] { jobActionsClassName,\n-                            syncJobActionsClass.getName(), e });\n+                    LOG.error(\"Class {} not found, reverting to {}\", new Object[]{jobActionsClassName,\n+                                syncJobActionsClass.getName(), e});\n                 }\n             }\n             SyncJobActions syncJobActions = (SyncJobActions) getBeanFactory().createBean(syncJobActionsClass,"},{"sha":"d2a9d89ca6ff8202e82d1310cb6696718bd844e7","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ReportController.java","status":"modified","additions":22,"deletions":34,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=f88a6ac12d9d69e38bec450a5ef345412be908d4","patch":"@@ -353,54 +353,42 @@ public void exportExecutionResult(final HttpServletResponse response,\n     @PreAuthorize(\"hasRole('REPORT_EXECUTE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/execute/{reportId}\")\n     public ReportExecTO execute(@PathVariable(\"reportId\") final Long reportId) throws NotFoundException {\n-\n         Report report = reportDAO.find(reportId);\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + reportId);\n         }\n \n         ReportExecTO result;\n \n-        ReportExec latestExec = reportExecDAO.findLatestStarted(report);\n-        if (latestExec != null\n-                && (ReportExecStatus.STARTED.name().equals(latestExec.getStatus())\n-                || ReportExecStatus.RUNNING.name().equals(latestExec.getStatus()))) {\n-\n-            LOG.debug(\"Found a non-terminated execution for report {}: not triggering a new execution\", report);\n-            \n-            result = binder.getReportExecTO(latestExec);\n-        } else {\n-            LOG.debug(\"Triggering a new execution of report {}\", report);\n-\n-            try {\n-                jobInstanceLoader.registerJob(report);\n+        LOG.debug(\"Triggering new execution of report {}\", report);\n \n-                JobDataMap map = new JobDataMap();\n-                scheduler.getScheduler().triggerJob(JobInstanceLoader.getJobName(report), Scheduler.DEFAULT_GROUP, map);\n+        try {\n+            jobInstanceLoader.registerJob(report);\n \n-                auditManager.audit(Category.report, ReportSubCategory.execute, Result.success,\n-                        \"Successfully started execution for report: \" + report.getId());\n-            } catch (Exception e) {\n-                LOG.error(\"While executing report {}\", report, e);\n+            scheduler.getScheduler().triggerJob(JobInstanceLoader.getJobName(report), Scheduler.DEFAULT_GROUP);\n \n-                auditManager.audit(Category.report, ReportSubCategory.execute, Result.failure,\n-                        \"Could not start execution for report: \" + report.getId(), e);\n+            auditManager.audit(Category.report, ReportSubCategory.execute, Result.success,\n+                    \"Successfully started execution for report: \" + report.getId());\n+        } catch (Exception e) {\n+            LOG.error(\"While executing report {}\", report, e);\n \n-                SyncopeClientCompositeErrorException scce =\n-                        new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n-                SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.Scheduling);\n-                sce.addElement(e.getMessage());\n-                scce.addException(sce);\n-                throw scce;\n-            }\n+            auditManager.audit(Category.report, ReportSubCategory.execute, Result.failure,\n+                    \"Could not start execution for report: \" + report.getId(), e);\n \n-            result = new ReportExecTO();\n-            result.setReport(reportId);\n-            result.setStartDate(new Date());\n-            result.setStatus(ReportExecStatus.STARTED);\n-            result.setMessage(\"Job fired; waiting for results...\");\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.Scheduling);\n+            sce.addElement(e.getMessage());\n+            scce.addException(sce);\n+            throw scce;\n         }\n \n+        result = new ReportExecTO();\n+        result.setReport(reportId);\n+        result.setStartDate(new Date());\n+        result.setStatus(ReportExecStatus.STARTED);\n+        result.setMessage(\"Job fired; waiting for results...\");\n+\n         return result;\n     }\n "},{"sha":"f39a470adef9606f73a3fe28b598cb21c1afea77","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=f88a6ac12d9d69e38bec450a5ef345412be908d4","patch":"@@ -67,8 +67,8 @@\n import org.springframework.web.servlet.ModelAndView;\n \n /**\n- * Note that this controller does not extend AbstractController, hence does not provide any Spring's @Transactional\n- * logic at class level.\n+ * Note that this controller does not extend AbstractController, hence does not provide any Spring's Transactional logic\n+ * at class level.\n  *\n  * @see AbstractController\n  */\n@@ -380,7 +380,7 @@ public void handle(final String resourceName, final PropagationTaskExecStatus ex\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/activate/{userId}\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = {Throwable.class})\n     public UserTO activate(\n             @PathVariable(\"userId\") final Long userId,\n             @RequestParam(required = true) final String token,\n@@ -401,7 +401,7 @@ public UserTO activate(\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/activateByUsername/{username}\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = {Throwable.class})\n     public UserTO activate(\n             @PathVariable(\"username\") final String username,\n             @RequestParam(required = true) final String token,\n@@ -558,7 +558,7 @@ public List<WorkflowFormTO> getForms() {\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_READ') and hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/workflow/form/{userId}\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = {Throwable.class})\n     public WorkflowFormTO getFormForUser(@PathVariable(\"userId\") final Long userId)\n             throws UnauthorizedRoleException, NotFoundException, WorkflowException {\n "},{"sha":"12d6da345b3f5b185f3cdad41c92ecead6e50ef3","filename":"core/src/main/java/org/apache/syncope/core/scheduling/NotificationJob.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java?ref=f88a6ac12d9d69e38bec450a5ef345412be908d4","patch":"@@ -23,14 +23,6 @@\n import java.util.Date;\n import javax.mail.internet.MimeMessage;\n import org.apache.commons.lang.StringUtils;\n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n-import org.quartz.StatefulJob;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.mail.javamail.JavaMailSenderImpl;\n-import org.springframework.mail.javamail.MimeMessageHelper;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.notification.NotificationManager;\n import org.apache.syncope.core.persistence.beans.NotificationTask;\n@@ -41,6 +33,14 @@\n import org.apache.syncope.types.AuditElements.NotificationSubCategory;\n import org.apache.syncope.types.AuditElements.Result;\n import org.apache.syncope.types.TraceLevel;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+import org.quartz.StatefulJob;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mail.javamail.JavaMailSenderImpl;\n+import org.springframework.mail.javamail.MimeMessageHelper;\n \n /**\n  * Periodically checks for notification to send."},{"sha":"d8e6cbe9ac31849bc52ab87703b32875eb35e0db","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=f88a6ac12d9d69e38bec450a5ef345412be908d4","patch":"@@ -44,10 +44,16 @@ under the License.\n   <bean id=\"xStream\" class=\"com.thoughtworks.xstream.XStream\"/>\n \n   <!-- Use JNDI datasource as default but, when not available, revert to\n-       local datasource, using different properties for execution and testing -->\n-  <bean id=\"dataSource\" class=\"org.springframework.jndi.JndiObjectFactoryBean\">\n-    <property name=\"jndiName\" value=\"java:comp/env/jdbc/syncopeDataSource\"/>\n-    <property name=\"defaultObject\" ref=\"localDataSource\"/>\n+  local datasource, with different properties for execution and testing. \n+  In any case, get all JDBC connections with a determined isolation level. -->\n+  <bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter\">\n+    <property name=\"targetDataSource\">\n+      <bean class=\"org.springframework.jndi.JndiObjectFactoryBean\">\n+        <property name=\"jndiName\" value=\"java:comp/env/jdbc/syncopeDataSource\"/>\n+        <property name=\"defaultObject\" ref=\"localDataSource\"/>\n+      </bean>\n+    </property>\n+    <property name=\"isolationLevelName\" value=\"ISOLATION_READ_COMMITTED\"/>\n   </bean>\n   <bean id=\"localDataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n     <property name=\"driverClassName\" value=\"${jpa.driverClassName}\"/>"},{"sha":"51e92b870accb13945ab54a3b20935f5d2c884f7","filename":"core/src/main/resources/persistenceContextEMFactory.xml","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml?ref=f88a6ac12d9d69e38bec450a5ef345412be908d4","patch":"@@ -45,10 +45,6 @@ under the License.\n         <entry key=\"openjpa.jdbc.SchemaFactory\" value=\"native(ForeignKeys=true)\"/>\n         <entry key=\"openjpa.jdbc.MappingDefaults\" value=\"ForeignKeyDeleteAction=restrict, JoinForeignKeyDeleteAction=restrict\"/>\n                 \n-        <entry key=\"openjpa.ReadLockLevel\" value=\"none\"/>\n-        <entry key=\"openjpa.WriteLockLevel\" value=\"write\"/>\n-        <entry key=\"openjpa.LockTimeout\" value=\"30000\"/>\n-                                \n         <entry key=\"openjpa.DataCache\" value=\"true\" />\n         <entry key=\"openjpa.QueryCache\" value=\"true\"/>\n         <entry key=\"openjpa.RemoteCommitProvider\" value=\"sjvm\"/>"},{"sha":"ae46cae524e740dbe673d6d11c2ba71f0569dfd1","filename":"core/src/main/resources/schedulingContext.xml","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Fmain%2Fresources%2FschedulingContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Fmain%2Fresources%2FschedulingContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FschedulingContext.xml?ref=f88a6ac12d9d69e38bec450a5ef345412be908d4","patch":"@@ -37,13 +37,12 @@ under the License.\n     </property>\n     <property name=\"quartzProperties\">\n       <props>\n-\t\t<!-- Job store -->\n         <prop key=\"org.quartz.jobStore.misfireThreshold\">6000000</prop>\n         <prop key=\"org.quartz.jobStore.driverDelegateClass\">${quartz.jobstore}</prop>\n \n         <prop key=\"org.quartz.jobStore.isClustered\">true</prop>\n         <prop key=\"org.quartz.jobStore.clusterCheckinInterval\">20000</prop>\n-\n+        \n         <prop key=\"org.quartz.scheduler.instanceName\">ClusteredScheduler</prop>\n         <prop key=\"org.quartz.scheduler.instanceId\">AUTO</prop>\n         <prop key=\"org.quartz.scheduler.jmx.export\">true</prop>"},{"sha":"3d643145952bf1b7f2987b19dfeb8b7fcd821c49","filename":"core/src/main/resources/workflowContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml?ref=f88a6ac12d9d69e38bec450a5ef345412be908d4","patch":"@@ -35,6 +35,7 @@ under the License.\n   <bean id=\"processEngineConfiguration\" class=\"org.activiti.spring.SpringProcessEngineConfiguration\">\n     <property name=\"dataSource\" ref=\"dataSource\" />\n     <property name=\"transactionManager\" ref=\"transactionManager\" />\n+    <property name=\"transactionsExternallyManaged\" value=\"true\"/>\n     <property name=\"databaseSchemaUpdate\" value=\"true\" />\n         \n     <property name=\"jpaEntityManagerFactory\" ref=\"entityManagerFactory\" />"},{"sha":"57b9fa839c1f2043957d75cfc89bbfe8c45139b6","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=f88a6ac12d9d69e38bec450a5ef345412be908d4","patch":"@@ -42,6 +42,10 @@ public abstract class AbstractTest {\n \n     protected static final String BASE_URL = \"http://localhost:9080/syncope/rest/\";\n \n+    public static final String ADMIN_UID = \"admin\";\n+\n+    public static final String ADMIN_PWD = \"password\";\n+\n     @Autowired\n     protected RestTemplate restTemplate;\n \n@@ -62,6 +66,6 @@ public void setupRestTemplate(final String uid, final String pwd) {\n \n     @Before\n     public void resetRestTemplate() {\n-        setupRestTemplate(\"admin\", \"password\");\n+        setupRestTemplate(ADMIN_UID, ADMIN_PWD);\n     }\n }"},{"sha":"4588155ddcebf86a41d3d25ac895b5993256cd1d","filename":"core/src/test/java/org/apache/syncope/core/rest/ReportTestITCase.java","status":"modified","additions":66,"deletions":121,"changes":187,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java?ref=f88a6ac12d9d69e38bec450a5ef345412be908d4","patch":"@@ -21,26 +21,17 @@\n import static org.junit.Assert.*;\n \n import java.io.IOException;\n+import java.io.StringWriter;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n import java.util.Arrays;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.http.HttpHost;\n-import org.apache.http.HttpResponse;\n-import org.apache.http.auth.AuthScope;\n-import org.apache.http.client.AuthCache;\n-import org.apache.http.client.HttpClient;\n-import org.apache.http.client.methods.HttpGet;\n-import org.apache.http.client.protocol.ClientContext;\n-import org.apache.http.impl.auth.BasicScheme;\n-import org.apache.http.impl.client.BasicAuthCache;\n-import org.apache.http.impl.conn.PoolingClientConnectionManager;\n-import org.apache.http.protocol.BasicHttpContext;\n-import org.apache.http.util.EntityUtils;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.io.IOUtils;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.web.client.HttpStatusCodeException;\n-import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n import org.apache.syncope.client.report.UserReportletConf;\n import org.apache.syncope.client.to.ReportExecTO;\n import org.apache.syncope.client.to.ReportTO;\n@@ -157,111 +148,106 @@ public void delete() {\n         }\n     }\n \n+    private void checkExport(final long execId, final String fmt, final String encodedAuth) throws IOException {\n+        URL url = new URL(BASE_URL + \"report/execution/export/\" + execId + \"?fmt=\" + fmt);\n+        int responseCode = 0;\n+        String export = null;\n+        HttpURLConnection connection = null;\n+        try {\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setRequestProperty(\"Authorization\", \"Basic \" + encodedAuth);\n+\n+            StringWriter writer = new StringWriter();\n+            IOUtils.copy(connection.getInputStream(), writer);\n+            export = writer.toString();\n+            responseCode = connection.getResponseCode();\n+        } catch (IOException e) {\n+            LOG.error(\"This should be a temporary exception: ignore\", e);\n+        } finally {\n+            if (connection != null) {\n+                connection.disconnect();\n+            }\n+        }\n+        assertEquals(200, responseCode);\n+        assertNotNull(export);\n+        assertFalse(export.isEmpty());\n+    }\n+\n     @Test\n     public void executeAndExport()\n             throws IOException {\n \n         ReportTO reportTO = restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, 1);\n+        reportTO.setId(0);\n+        reportTO.setName(\"executeAndExport\");\n+        reportTO = restTemplate.postForObject(BASE_URL + \"report/create\", reportTO, ReportTO.class);\n         assertNotNull(reportTO);\n \n-        Set<Long> preExecIds = new HashSet<Long>();\n-        for (ReportExecTO exec : reportTO.getExecutions()) {\n-            preExecIds.add(exec.getId());\n-        }\n-\n         ReportExecTO execution = restTemplate.postForObject(BASE_URL + \"report/execute/{reportId}\", null,\n                 ReportExecTO.class, reportTO.getId());\n         assertNotNull(execution);\n \n         int maxit = 50;\n-\n         do {\n             try {\n                 Thread.sleep(1000);\n             } catch (InterruptedException e) {\n             }\n \n-            reportTO = restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, 1);\n+            reportTO = restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, reportTO.getId());\n \n             maxit--;\n-        } while (preExecIds.size() == reportTO.getExecutions().size() && maxit > 0);\n-\n-        Set<Long> postExecIds = new HashSet<Long>();\n-        for (ReportExecTO exec : reportTO.getExecutions()) {\n-            postExecIds.add(exec.getId());\n-        }\n+        } while (reportTO.getExecutions().isEmpty() && maxit > 0);\n \n-        postExecIds.removeAll(preExecIds);\n-        assertEquals(1, postExecIds.size());\n+        long execId = reportTO.getExecutions().iterator().next().getId();\n \n         // Export\n-        // 1. XML (default)\n-\n-        final HttpClient client = ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient();\n-        final AuthScope scope = ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory()).getAuthScope();\n-        final HttpHost targetHost = new HttpHost(scope.getHost(), scope.getPort(), scope.getScheme());\n-\n-\n-        // Add AuthCache to the execution context\n-        BasicHttpContext localcontext = new BasicHttpContext();\n-\n-        // Generate BASIC scheme object and add it to the local auth cache\n-        AuthCache authCache = new BasicAuthCache();\n-        authCache.put(targetHost, new BasicScheme());\n-        localcontext.setAttribute(ClientContext.AUTH_CACHE, authCache);\n-\n-        HttpResponse response = null;\n-\n-        maxit = 10;\n-\n-        // issueSYNCOPE89\n-        ((PoolingClientConnectionManager) client.getConnectionManager()).setDefaultMaxPerRoute(10);\n-\n-        HttpGet getMethod = new HttpGet(BASE_URL + \"report/execution/export/\" + postExecIds.iterator().next());\n+        String encodedAuth = Base64.encodeBase64String((ADMIN_UID + \":\" + ADMIN_PWD).getBytes());\n+        URL url = new URL(BASE_URL + \"report/execution/export/\" + execId);\n \n+        // 1. XML\n+        maxit = 30;\n+        int responseCode = 0;\n+        String export = null;\n         do {\n             try {\n                 Thread.sleep(1000);\n             } catch (InterruptedException e) {\n             }\n \n-            response = client.execute(targetHost, getMethod, localcontext);\n-\n             maxit--;\n-        } while ((response == null || response.getStatusLine().getStatusCode() != 200) && maxit > 0);\n \n-        assertEquals(200, response.getStatusLine().getStatusCode());\n-\n-        String export = EntityUtils.toString(response.getEntity()).trim();\n+            HttpURLConnection connection = null;\n+            try {\n+                connection = (HttpURLConnection) url.openConnection();\n+                connection.setRequestMethod(\"GET\");\n+                connection.setRequestProperty(\"Authorization\", \"Basic \" + encodedAuth);\n+\n+                StringWriter writer = new StringWriter();\n+                IOUtils.copy(connection.getInputStream(), writer);\n+                export = writer.toString();\n+                responseCode = connection.getResponseCode();\n+            } catch (IOException e) {\n+                LOG.error(\"This should be a temporary exception: ignore\", e);\n+            } finally {\n+                if (connection != null) {\n+                    connection.disconnect();\n+                }\n+            }\n+        } while (responseCode != 200 && maxit > 0);\n+        assertEquals(200, responseCode);\n         assertNotNull(export);\n         assertFalse(export.isEmpty());\n \n         // 2. HTML\n-        getMethod = new HttpGet(BASE_URL + \"report/execution/export/\" + postExecIds.iterator().next() + \"?fmt=HTML\");\n-        response = client.execute(targetHost, getMethod, localcontext);\n-        assertEquals(200, response.getStatusLine().getStatusCode());\n-\n-        export = EntityUtils.toString(response.getEntity()).trim();\n-        assertNotNull(export);\n-        assertFalse(export.isEmpty());\n+        checkExport(execId, \"HTML\", encodedAuth);\n \n         // 3. PDF\n-        getMethod = new HttpGet(BASE_URL + \"report/execution/export/\" + postExecIds.iterator().next() + \"?fmt=PDF\");\n-        response = client.execute(targetHost, getMethod, localcontext);\n-        assertEquals(200, response.getStatusLine().getStatusCode());\n-\n-        export = EntityUtils.toString(response.getEntity()).trim();\n-        assertNotNull(export);\n-        assertFalse(export.isEmpty());\n+        checkExport(execId, \"PDF\", encodedAuth);\n \n         // 4. RTF\n-        getMethod = new HttpGet(BASE_URL + \"report/execution/export/\" + postExecIds.iterator().next() + \"?fmt=RTF\");\n-        response = client.execute(targetHost, getMethod, localcontext);\n-        assertEquals(200, response.getStatusLine().getStatusCode());\n-\n-        export = EntityUtils.toString(response.getEntity()).trim();\n-        assertNotNull(export);\n-        assertFalse(export.isEmpty());\n+        checkExport(execId, \"RTF\", encodedAuth);\n     }\n \n     @Test\n@@ -318,47 +304,6 @@ public void issueSYNCOPE102() throws IOException {\n \n             maxit--;\n         } while (reportTO.getExecutions().isEmpty() && maxit > 0);\n-\n-        assertTrue(!reportTO.getExecutions().isEmpty());\n-\n-        // Export\n-        final HttpClient client = ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient();\n-        final AuthScope scope = ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory()).getAuthScope();\n-        final HttpHost targetHost = new HttpHost(scope.getHost(), scope.getPort(), scope.getScheme());\n-\n-        // Add AuthCache to the execution context\n-        BasicHttpContext localcontext = new BasicHttpContext();\n-\n-        // Generate BASIC scheme object and add it to the local auth cache\n-        AuthCache authCache = new BasicAuthCache();\n-        authCache.put(targetHost, new BasicScheme());\n-        localcontext.setAttribute(ClientContext.AUTH_CACHE, authCache);\n-\n-        HttpResponse response = null;\n-\n-        maxit = 10;\n-\n-        // issueSYNCOPE89\n-        ((PoolingClientConnectionManager) client.getConnectionManager()).setDefaultMaxPerRoute(10);\n-\n-        HttpGet getMethod = new HttpGet(BASE_URL + \"report/execution/export/\" + reportTO.getExecutions().\n-                iterator().next().getId());\n-\n-        do {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-            }\n-\n-            response = client.execute(targetHost, getMethod, localcontext);\n-\n-            maxit--;\n-        } while ((response == null || response.getStatusLine().getStatusCode() != 200) && maxit > 0);\n-\n-        assertEquals(200, response.getStatusLine().getStatusCode());\n-\n-        String export = EntityUtils.toString(response.getEntity()).trim();\n-        assertNotNull(export);\n-        assertFalse(export.isEmpty());\n+        assertFalse(reportTO.getExecutions().isEmpty());\n     }\n }"},{"sha":"77964b12f4acefd9360aef874ab10e2d8b24d554","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=f88a6ac12d9d69e38bec450a5ef345412be908d4","patch":"@@ -659,7 +659,7 @@ public void issueSYNCOPE68() {\n         assertEquals(\"JOB_FIRED\", execution.getStatus());\n \n         int i = 0;\n-        int maxit = 20;\n+        int maxit = 50;\n \n         // wait for sync completion (executions incremented)\n         do {\n@@ -669,25 +669,20 @@ public void issueSYNCOPE68() {\n             }\n \n             actual = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, actual.getId());\n-\n             assertNotNull(actual);\n             assertNotNull(actual.getExecutions());\n \n             i++;\n-\n         } while (preSyncSize == actual.getExecutions().size() && i < maxit);\n-\n-        assertEquals(1, actual.getExecutions().size());\n+        assertEquals(preSyncSize + 1, actual.getExecutions().size());\n \n         final String status = actual.getExecutions().get(0).getStatus();\n         assertNotNull(status);\n         assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n \n         userTO = restTemplate.getForObject(BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"testuser2\");\n-\n         assertNotNull(userTO);\n         assertEquals(\"testuser2@syncope.apache.org\", userTO.getAttributeMap().get(\"userId\").getValues().get(0));\n-\n         assertEquals(2, userTO.getMemberships().size());\n         assertEquals(4, userTO.getResources().size());\n     }"},{"sha":"b6fb2ac4a23e1b8f8be8895583d897594f032a89","filename":"core/src/test/resources/content.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=f88a6ac12d9d69e38bec450a5ef345412be908d4","patch":"@@ -570,7 +570,7 @@ under the License.\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\"\n         jobClassName=\"org.apache.syncope.core.scheduling.SyncJob\"/>\n         \n-  <NotificationTask_Recipients notificationtask_id=\"8\" address=\"recipient@prova.org\"/>\n+  <NotificationTask_recipients notificationtask_id=\"8\" address=\"recipient@prova.org\"/>\n \n   <!-- Authentication and authorization -->\n   <Entitlement name=\"base\"/>"},{"sha":"8d046426187cba450a57dd7e50ecb2dbb1fffa53","filename":"core/src/test/resources/sqlserver/persistence.properties","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Ftest%2Fresources%2Fsqlserver%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f88a6ac12d9d69e38bec450a5ef345412be908d4/core%2Fsrc%2Ftest%2Fresources%2Fsqlserver%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fsqlserver%2Fpersistence.properties?ref=f88a6ac12d9d69e38bec450a5ef345412be908d4","patch":"@@ -16,11 +16,10 @@\n # under the License.\n \n jpa.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver\n-jpa.url=jdbc:sqlserver://192.168.0.141:49190;database=syncope;selectMethod=cursor;sendStringParametersAsUnicode=false\n+jpa.url=jdbc:sqlserver://acacia:1433;database=syncope;selectMethod=cursor;sendStringParametersAsUnicode=false\n jpa.username=syncope\n jpa.password=syncope\n jpa.dialect=org.apache.openjpa.jdbc.sql.SQLServerDictionary\n quartz.jobstore=org.quartz.impl.jdbcjobstore.MSSQLDelegate\n quartz.sql=tables_sqlserver.sql\n-logback.sql=sqlserver.sql\n-\n+logback.sql=sqlserver.sql\n\\ No newline at end of file"}]}