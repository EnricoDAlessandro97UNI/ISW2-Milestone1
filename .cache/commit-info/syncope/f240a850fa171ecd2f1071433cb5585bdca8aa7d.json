{"sha":"f240a850fa171ecd2f1071433cb5585bdca8aa7d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYyNDBhODUwZmExNzFlY2QyZjEwNzE0MzNjYjU1ODViZGNhOGFhN2Q=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-08T15:05:25Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-08T15:05:35Z"},"message":"[SYNCOPE-1097] Clean up","tree":{"sha":"bc6a313df7aee615b0ef439a5d5d637b57347df6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/bc6a313df7aee615b0ef439a5d5d637b57347df6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f240a850fa171ecd2f1071433cb5585bdca8aa7d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f240a850fa171ecd2f1071433cb5585bdca8aa7d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f240a850fa171ecd2f1071433cb5585bdca8aa7d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f240a850fa171ecd2f1071433cb5585bdca8aa7d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0e25463d89703b02db5759b15de46eca67272f42","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0e25463d89703b02db5759b15de46eca67272f42","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0e25463d89703b02db5759b15de46eca67272f42"}],"stats":{"total":64,"additions":34,"deletions":30},"files":[{"sha":"d2f4845763193d57422ba3d196c3b2818a5b9468","filename":"client/console/src/main/java/org/apache/syncope/client/console/init/MIMETypesLoader.java","status":"modified","additions":24,"deletions":21,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f240a850fa171ecd2f1071433cb5585bdca8aa7d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FMIMETypesLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f240a850fa171ecd2f1071433cb5585bdca8aa7d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FMIMETypesLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FMIMETypesLoader.java?ref=f240a850fa171ecd2f1071433cb5585bdca8aa7d","patch":"@@ -33,37 +33,40 @@ public class MIMETypesLoader {\n \n     private static final Logger LOG = LoggerFactory.getLogger(MIMETypesLoader.class);\n \n-    private Map<String, String> mimeTypes;\n-\n     private static final ObjectMapper MAPPER = new ObjectMapper();\n \n+    private Map<String, String> mimeTypesMap;\n+\n+    private List<String> mimeTypes;\n+\n     public void load() {\n-        if (mimeTypes == null || mimeTypes.isEmpty()) {\n-            mimeTypes = new HashMap<>();\n-            try {\n-                JsonNode jsonNode = MAPPER.readTree(\n-                        IOUtils.toString(getClass().getResourceAsStream(\"/MIMETypes.json\")));\n-                for (JsonNode node : jsonNode) {\n-                    JsonNode type = node.path(\"name\");\n-                    JsonNode ext = node.path(\"extension\");\n-                    if (!type.isMissingNode()) {\n-                        mimeTypes.put(type.asText(), !ext.isMissingNode() ? ext.asText() : \"\");\n-                    }\n+        mimeTypesMap = new HashMap<>();\n+        try {\n+            JsonNode jsonNode = MAPPER.readTree(IOUtils.toString(getClass().getResourceAsStream(\"/MIMETypes.json\")));\n+            for (JsonNode node : jsonNode) {\n+                JsonNode type = node.path(\"name\");\n+                JsonNode ext = node.path(\"extension\");\n+                if (!type.isMissingNode()) {\n+                    mimeTypesMap.put(type.asText(), ext.isMissingNode() ? \"\" : ext.asText());\n                 }\n-            } catch (Exception e) {\n-                LOG.error(\"Error reading file MIMETypes from resources\", e);\n             }\n+\n+            mimeTypesMap = Collections.unmodifiableMap(mimeTypesMap);\n+            LOG.debug(\"MIME types loaded: {}\", mimeTypesMap);\n+\n+            mimeTypes = new ArrayList<>(mimeTypesMap.keySet());\n+            Collections.sort(mimeTypes);\n+            mimeTypes = Collections.unmodifiableList(mimeTypes);\n+        } catch (Exception e) {\n+            LOG.error(\"Error reading file MIMETypes from resources\", e);\n         }\n     }\n \n     public List<String> getMimeTypes() {\n-        LOG.debug(\"Returning loaded MIME types list {}\", mimeTypes);\n-        List<String> list = new ArrayList<>(mimeTypes.keySet());\n-        Collections.sort(list);\n-        return list;\n+        return mimeTypes;\n     }\n \n-    public String getExtensionByMimeType(final String mimeType) {\n-        return mimeTypes.get(mimeType);\n+    public String getFileExt(final String mimeType) {\n+        return mimeTypesMap.get(mimeType);\n     }\n }"},{"sha":"4cd80b70cfb0386ac81cbf511103806b70c894f3","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/PlainSchemaDetails.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f240a850fa171ecd2f1071433cb5585bdca8aa7d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f240a850fa171ecd2f1071433cb5585bdca8aa7d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java?ref=f240a850fa171ecd2f1071433cb5585bdca8aa7d","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.PropertyList;\n+import org.apache.syncope.client.console.init.ConsoleInitializer;\n import org.apache.syncope.client.console.init.MIMETypesLoader;\n import org.apache.syncope.client.console.wicket.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n@@ -54,8 +55,8 @@ public class PlainSchemaDetails extends AbstractSchemaDetailsPanel {\n \n     private static final long serialVersionUID = 5378100729213456451L;\n \n-    private static final MIMETypesLoader MIME_TYPES_INITIALIZER = (MIMETypesLoader) SyncopeConsoleApplication.get().\n-            getServletContext().getAttribute(\"MIMETYPES_LOADER\");\n+    private static final MIMETypesLoader MIME_TYPES_LOADER = (MIMETypesLoader) SyncopeConsoleApplication.get().\n+            getServletContext().getAttribute(ConsoleInitializer.MIMETYPES_LOADER);\n \n     private final MultiFieldPanel<String> enumerationValues;\n \n@@ -393,7 +394,7 @@ private void showHide(final AbstractSchemaTO schema, final AjaxDropDownChoicePan\n             cipherAlgorithm.setModelObject(null);\n \n             binaryParams.setVisible(true);\n-            mimeType.setChoices(MIME_TYPES_INITIALIZER.getMimeTypes());\n+            mimeType.setChoices(MIME_TYPES_LOADER.getMimeTypes());\n         } else {\n             conversionParams.setVisible(false);\n             conversionPattern.setModelObject(null);"},{"sha":"da27e2b23d8a21368f76eedea77940a2555f6a39","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxDownload.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f240a850fa171ecd2f1071433cb5585bdca8aa7d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDownload.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f240a850fa171ecd2f1071433cb5585bdca8aa7d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDownload.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDownload.java?ref=f240a850fa171ecd2f1071433cb5585bdca8aa7d","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.client.console.wicket.markup.html.form;\n \n-\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleApplication;\n import org.apache.syncope.client.console.commons.HttpResourceStream;\n+import org.apache.syncope.client.console.init.ConsoleInitializer;\n import org.apache.syncope.client.console.init.MIMETypesLoader;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.behavior.AbstractAjaxBehavior;\n@@ -32,10 +32,10 @@ public abstract class AjaxDownload extends AbstractAjaxBehavior {\n \n     private static final long serialVersionUID = 7203445884857810583L;\n \n-    private final String name;\n+    private static final MIMETypesLoader MIME_TYPES_LOADER = (MIMETypesLoader) SyncopeConsoleApplication.get().\n+            getServletContext().getAttribute(ConsoleInitializer.MIMETYPES_LOADER);\n \n-    private static final MIMETypesLoader MIME_TYPES_INITIALIZER = (MIMETypesLoader) SyncopeConsoleApplication.get().\n-            getServletContext().getAttribute(\"MIMETYPES_LOADER\");\n+    private final String name;\n \n     private String fileKey;\n \n@@ -72,8 +72,8 @@ public void onRequest() {\n         String key = StringUtils.isNotBlank(fileKey) ? fileKey + \"_\" : \"\";\n         String ext = \"\";\n         if (StringUtils.isNotBlank(mimeType)) {\n-            String extByMimeType = MIME_TYPES_INITIALIZER.getExtensionByMimeType(mimeType);\n-            ext = !extByMimeType.isEmpty() ? (\".\" + extByMimeType) : \".bin\";\n+            String extByMimeType = MIME_TYPES_LOADER.getFileExt(mimeType);\n+            ext = StringUtils.isBlank(extByMimeType) ? \".bin\" : (\".\" + extByMimeType);\n         }\n         String fileName = key + (stream.getFilename() == null ? name : stream.getFilename()) + ext;\n "}]}