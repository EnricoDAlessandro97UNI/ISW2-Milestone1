{"sha":"026c0f3834336a5e25ca53ad09081b6f78ccd620","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjAyNmMwZjM4MzQzMzZhNWUyNWNhNTNhZDA5MDgxYjZmNzhjY2Q2MjA=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-20T13:28:55Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-20T13:28:55Z"},"message":"(Fixes issue #24)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246403 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"34a98bf431859d127aeb7b720f92976ee740d75e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/34a98bf431859d127aeb7b720f92976ee740d75e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/026c0f3834336a5e25ca53ad09081b6f78ccd620","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/026c0f3834336a5e25ca53ad09081b6f78ccd620","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/026c0f3834336a5e25ca53ad09081b6f78ccd620","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/026c0f3834336a5e25ca53ad09081b6f78ccd620/comments","author":null,"committer":null,"parents":[{"sha":"b2143576dfb8873d3d70a6c090029afd74928036","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b2143576dfb8873d3d70a6c090029afd74928036","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b2143576dfb8873d3d70a6c090029afd74928036"}],"stats":{"total":797,"additions":382,"deletions":415},"files":[{"sha":"319de757005531fe70ce305a8eb0ffed546d730c","filename":"core/src/main/java/org/syncope/core/persistence/ConnectorInstanceBeansLoader.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceBeansLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceBeansLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceBeansLoader.java?ref=026c0f3834336a5e25ca53ad09081b6f78ccd620","patch":"@@ -28,6 +28,7 @@\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.beans.SyncopeConfiguration;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n+import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n import org.syncope.core.persistence.util.ApplicationContextManager;\n import org.syncope.core.rest.controller.ConnectorInstanceController;\n@@ -61,9 +62,13 @@ public void contextInitialized(ServletContextEvent sce) {\n                 (SyncopeConfigurationDAO) context.getBean(\n                 \"syncopeConfigurationDAOImpl\");\n \n-        SyncopeConfiguration syncopeConfiguration =\n-                syncopeConfigurationDAO.find(\n-                \"identityconnectors.bundle.directory\");\n+        SyncopeConfiguration syncopeConfiguration = null;\n+        try {\n+            syncopeConfiguration = syncopeConfigurationDAO.find(\n+                    \"identityconnectors.bundle.directory\");\n+        } catch (MissingConfKeyException e) {\n+            log.error(\"Missing configuration\", e);\n+        }\n \n         List<ConnectorInstance> instances = connectorInstanceDAO.findAll();\n         Set<PropertyTO> properties = null;"},{"sha":"99e9bf52999fa0a31bac5e754a5dca1f4416f1bc","filename":"core/src/main/java/org/syncope/core/persistence/dao/MissingConfKeyException.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMissingConfKeyException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMissingConfKeyException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMissingConfKeyException.java?ref=026c0f3834336a5e25ca53ad09081b6f78ccd620","patch":"@@ -0,0 +1,28 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+public class MissingConfKeyException extends Exception {\n+\n+    private String confKey;\n+\n+    public MissingConfKeyException(String confKey) {\n+        this.confKey = confKey;\n+    }\n+\n+    public String getConfKey() {\n+        return confKey;\n+    }\n+}"},{"sha":"88d9846adc5703ce62c3001cc06db8c08054a823","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeConfigurationDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeConfigurationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeConfigurationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeConfigurationDAO.java?ref=026c0f3834336a5e25ca53ad09081b6f78ccd620","patch":"@@ -19,7 +19,7 @@\n \n public interface SyncopeConfigurationDAO extends DAO {\n \n-    SyncopeConfiguration find(String name);\n+    SyncopeConfiguration find(String name) throws MissingConfKeyException;\n \n     List<SyncopeConfiguration> findAll();\n "},{"sha":"2633166f5a2b2b04f808af36e92e98dd5a4d93e1","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeConfigurationDAOImpl.java","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeConfigurationDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeConfigurationDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeConfigurationDAOImpl.java?ref=026c0f3834336a5e25ca53ad09081b6f78ccd620","patch":"@@ -19,15 +19,25 @@\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.SyncopeConfiguration;\n+import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n \n @Repository\n public class SyncopeConfigurationDAOImpl extends AbstractDAOImpl\n         implements SyncopeConfigurationDAO {\n \n     @Override\n-    public SyncopeConfiguration find(String name) {\n-        return entityManager.find(SyncopeConfiguration.class, name);\n+    public SyncopeConfiguration find(String name)\n+            throws MissingConfKeyException {\n+\n+        SyncopeConfiguration syncopeConfiguration =\n+                entityManager.find(SyncopeConfiguration.class, name);\n+\n+        if (syncopeConfiguration == null) {\n+            throw new MissingConfKeyException(name);\n+        }\n+\n+        return syncopeConfiguration;\n     }\n \n     @Override\n@@ -45,6 +55,10 @@ public SyncopeConfiguration save(SyncopeConfiguration syncopeConfiguration) {\n     @Override\n     @Transactional\n     public void delete(String name) {\n-        entityManager.remove(find(name));\n+        try {\n+            entityManager.remove(find(name));\n+        } catch (MissingConfKeyException e) {\n+            log.error(\"Could not find \" + name, e);\n+        }\n     }\n }"},{"sha":"2f5eec47b3cb14af582b74dd6c0d651e2f245c7a","filename":"core/src/main/java/org/syncope/core/rest/SyncopeHandlerExceptionResolver.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSyncopeHandlerExceptionResolver.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSyncopeHandlerExceptionResolver.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSyncopeHandlerExceptionResolver.java?ref=026c0f3834336a5e25ca53ad09081b6f78ccd620","patch":"@@ -0,0 +1,114 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest;\n+\n+import com.opensymphony.workflow.WorkflowException;\n+import java.io.IOException;\n+import javassist.NotFoundException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.client.validation.SyncopeClientErrorHandler;\n+import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.dao.MissingConfKeyException;\n+import org.syncope.core.persistence.propagation.PropagationException;\n+import org.syncope.core.persistence.validation.MultiUniqueValueException;\n+import org.syncope.types.SyncopeClientExceptionType;\n+\n+public class SyncopeHandlerExceptionResolver\n+        extends DefaultHandlerExceptionResolver {\n+\n+    @Override\n+    protected ModelAndView doResolveException(HttpServletRequest request,\n+            HttpServletResponse response,\n+            Object handler,\n+            Exception ex) {\n+\n+        ModelAndView defaultResolution =\n+                super.doResolveException(request, response, handler, ex);\n+        if (defaultResolution != null) {\n+            return defaultResolution;\n+        }\n+\n+        logger.error(\"Unexpected exception\", ex);\n+\n+        int statusCode = HttpServletResponse.SC_BAD_REQUEST;\n+\n+        if (ex instanceof NotFoundException) {\n+            response.setHeader(\n+                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                    SyncopeClientExceptionType.NotFound.getHeaderValue());\n+            response.setHeader(\n+                    SyncopeClientExceptionType.NotFound.getElementHeaderName(),\n+                    ex.getMessage());\n+\n+            statusCode = HttpServletResponse.SC_NOT_FOUND;\n+        } else if (ex instanceof WorkflowException) {\n+            response.setHeader(\n+                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                    SyncopeClientExceptionType.Workflow.getHeaderValue());\n+            response.setHeader(\n+                    SyncopeClientExceptionType.Workflow.getElementHeaderName(),\n+                    ex.getMessage());\n+        } else if (ex instanceof PropagationException) {\n+            response.setHeader(\n+                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                    SyncopeClientExceptionType.Propagation.getHeaderValue());\n+            response.setHeader(\n+                    SyncopeClientExceptionType.Propagation.getElementHeaderName(),\n+                    ((PropagationException) ex).getResource());\n+        } else if (ex instanceof SyncopeClientCompositeErrorException) {\n+            for (SyncopeClientException exception :\n+                    ((SyncopeClientCompositeErrorException) ex).getExceptions()) {\n+\n+                response.addHeader(\n+                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                        exception.getType().getHeaderValue());\n+\n+                for (String attributeName : exception.getElements()) {\n+                    response.addHeader(\n+                            exception.getType().getElementHeaderName(),\n+                            attributeName);\n+                }\n+            }\n+\n+            statusCode = ((SyncopeClientCompositeErrorException) ex).getStatusCode().value();\n+        } else if (ex instanceof MultiUniqueValueException) {\n+            response.setHeader(\n+                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                    SyncopeClientExceptionType.InvalidSchemaDefinition.getHeaderValue());\n+        } else if (ex instanceof MissingConfKeyException) {\n+            response.setHeader(\n+                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                    SyncopeClientExceptionType.NotFound.getHeaderValue());\n+            response.setHeader(\n+                    SyncopeClientExceptionType.NotFound.getElementHeaderName(),\n+                    ((MissingConfKeyException)ex).getConfKey());\n+\n+            statusCode = HttpServletResponse.SC_NOT_FOUND;\n+        }\n+\n+        try {\n+            response.sendError(statusCode);\n+        } catch (IOException ioe) {\n+            logger.warn(\"Handling of [\" + ex.getClass().getName()\n+                    + \"] resulted in Exception\", ioe);\n+        }\n+\n+        return new ModelAndView();\n+    }\n+}"},{"sha":"89ca7f1d06e9304dd73c8832ef982e0257a5071f","filename":"core/src/main/java/org/syncope/core/rest/controller/AbstractController.java","status":"modified","additions":2,"deletions":89,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java?ref=026c0f3834336a5e25ca53ad09081b6f78ccd620","patch":"@@ -16,19 +16,12 @@\n package org.syncope.core.rest.controller;\n \n import org.syncope.core.rest.data.AttributableUtil;\n-import com.opensymphony.workflow.WorkflowException;\n-import java.io.IOException;\n-import javax.servlet.http.HttpServletResponse;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.TypeMismatchException;\n-import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.syncope.client.validation.SyncopeClientErrorHandler;\n-import org.syncope.client.validation.SyncopeClientException;\n-import org.syncope.core.persistence.propagation.PropagationException;\n-import org.syncope.core.persistence.validation.MultiUniqueValueException;\n-import org.syncope.types.SyncopeClientExceptionType;\n+import org.springframework.transaction.annotation.Transactional;\n \n+@Transactional(rollbackFor = {Throwable.class})\n public abstract class AbstractController {\n \n     protected static final Logger log =\n@@ -47,84 +40,4 @@ protected AttributableUtil getAttributableUtil(String kind) {\n \n         return result;\n     }\n-\n-    protected <T> T throwCompositeException(\n-            SyncopeClientCompositeErrorException compositeErrorException,\n-            HttpServletResponse response) throws IOException {\n-\n-        for (SyncopeClientException exception :\n-                compositeErrorException.getExceptions()) {\n-\n-            response.addHeader(\n-                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                    exception.getType().getHeaderValue());\n-\n-            for (String attributeName : exception.getElements()) {\n-                response.addHeader(\n-                        exception.getType().getElementHeaderName(),\n-                        attributeName);\n-            }\n-        }\n-\n-        response.sendError(compositeErrorException.getStatusCode().value());\n-\n-        return null;\n-    }\n-\n-    protected <T> T throwNotFoundException(String notFound,\n-            HttpServletResponse response) throws IOException {\n-\n-        response.setHeader(\n-                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                SyncopeClientExceptionType.NotFound.getHeaderValue());\n-        response.setHeader(\n-                SyncopeClientExceptionType.NotFound.getElementHeaderName(),\n-                notFound);\n-\n-        response.sendError(HttpServletResponse.SC_NOT_FOUND);\n-\n-        return null;\n-    }\n-\n-    protected <T> T throwMultiUniqueValueException(MultiUniqueValueException e,\n-            HttpServletResponse response) throws IOException {\n-\n-        response.setHeader(\n-                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                SyncopeClientExceptionType.InvalidSchemaDefinition.getHeaderValue());\n-\n-        response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n-\n-        return null;\n-    }\n-\n-    protected <T> T throwWorkflowException(WorkflowException we,\n-            HttpServletResponse response) throws IOException {\n-\n-        response.setHeader(\n-                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                SyncopeClientExceptionType.Workflow.getHeaderValue());\n-        response.setHeader(\n-                SyncopeClientExceptionType.Workflow.getElementHeaderName(),\n-                we.getMessage());\n-\n-        response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n-\n-        return null;\n-    }\n-\n-    protected <T> T throwPropagationException(PropagationException pe,\n-            HttpServletResponse response) throws IOException {\n-\n-        response.setHeader(\n-                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                SyncopeClientExceptionType.Propagation.getHeaderValue());\n-        response.setHeader(\n-                SyncopeClientExceptionType.Propagation.getElementHeaderName(),\n-                pe.getResource());\n-\n-        response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n-\n-        return null;\n-    }\n }"},{"sha":"2a0e5c6a2e7cfc25ecb9af92d5f4abf5c76523e6","filename":"core/src/main/java/org/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":7,"deletions":31,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=026c0f3834336a5e25ca53ad09081b6f78ccd620","patch":"@@ -14,21 +14,20 @@\n  */\n package org.syncope.core.rest.controller;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n-import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.syncope.client.to.ConfigurationTO;\n import org.syncope.client.to.ConfigurationTOs;\n import org.syncope.core.persistence.beans.SyncopeConfiguration;\n+import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n import org.syncope.core.rest.data.ConfigurationDataBinder;\n \n@@ -41,13 +40,11 @@ public class ConfigurationController extends AbstractController {\n     @Autowired\n     private ConfigurationDataBinder configurationDataBinder;\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n     public ConfigurationTO create(HttpServletRequest request,\n             HttpServletResponse response,\n-            @RequestBody ConfigurationTO configurationTO)\n-            throws IOException {\n+            @RequestBody ConfigurationTO configurationTO) {\n \n         if (log.isDebugEnabled()) {\n             log.debug(\"create called with parameters \" + configurationTO);\n@@ -65,28 +62,20 @@ public ConfigurationTO create(HttpServletRequest request,\n         return configurationDataBinder.getConfigurationTO(syncopeConfiguration);\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/delete/{confKey}\")\n     public void delete(HttpServletResponse response,\n             @PathVariable(\"confKey\") String confKey)\n-            throws IOException {\n+            throws MissingConfKeyException {\n \n         SyncopeConfiguration syncopeConfiguration =\n                 syncopeConfigurationDAO.find(confKey);\n-\n-        if (syncopeConfiguration == null) {\n-            log.error(\"Could not find configuration '\" + confKey + \"'\");\n-\n-            throwNotFoundException(String.valueOf(confKey), response);\n-        } else {\n-            syncopeConfigurationDAO.delete(confKey);\n-        }\n+        syncopeConfigurationDAO.delete(confKey);\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n-    public ConfigurationTOs list(HttpServletRequest request) throws IOException {\n+    public ConfigurationTOs list(HttpServletRequest request) {\n         List<SyncopeConfiguration> configurations =\n                 syncopeConfigurationDAO.findAll();\n         List<ConfigurationTO> configurationTOs =\n@@ -106,36 +95,23 @@ public ConfigurationTOs list(HttpServletRequest request) throws IOException {\n     value = \"/read/{confKey}\")\n     public ConfigurationTO read(HttpServletResponse response,\n             @PathVariable(\"confKey\") String confKey)\n-            throws IOException {\n+            throws MissingConfKeyException {\n \n         SyncopeConfiguration syncopeConfiguration =\n                 syncopeConfigurationDAO.find(confKey);\n \n-        if (syncopeConfiguration == null) {\n-            log.error(\"Could not find configuration '\" + confKey + \"'\");\n-\n-            return throwNotFoundException(String.valueOf(confKey), response);\n-        }\n-\n         return configurationDataBinder.getConfigurationTO(syncopeConfiguration);\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n     public ConfigurationTO update(HttpServletResponse response,\n             @RequestBody ConfigurationTO configurationTO)\n-            throws IOException {\n+            throws MissingConfKeyException {\n \n         SyncopeConfiguration syncopeConfiguration =\n                 syncopeConfigurationDAO.find(configurationTO.getConfKey());\n \n-        if (syncopeConfiguration == null) {\n-            log.error(\"Could not find configuration '\" + configurationTO + \"'\");\n-\n-            return throwNotFoundException(configurationTO.getConfKey(), response);\n-        }\n-\n         syncopeConfiguration.setConfValue(configurationTO.getConfValue());\n \n         return configurationDataBinder.getConfigurationTO(syncopeConfiguration);"},{"sha":"7dc4fb1cc396a4022dc3bd508ca32e83ea91c4f1","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnectorInstanceController.java","status":"modified","additions":48,"deletions":61,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java?ref=026c0f3834336a5e25ca53ad09081b6f78ccd620","patch":"@@ -21,11 +21,11 @@\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n-import java.io.IOException;\n import java.net.URL;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;\n+import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n import org.identityconnectors.common.IOUtil;\n import org.identityconnectors.framework.api.APIConfiguration;\n@@ -40,7 +40,6 @@\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.ConnectorBundleTO;\n@@ -52,6 +51,7 @@\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.beans.SyncopeConfiguration;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n+import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n import org.syncope.core.persistence.util.ApplicationContextManager;\n import org.syncope.core.rest.data.ConnectorInstanceDataBinder;\n@@ -62,15 +62,15 @@ public class ConnectorInstanceController extends AbstractController {\n \n     @Autowired\n     private ConnectorInstanceDAO connectorInstanceDAO;\n-\n     @Autowired\n     SyncopeConfigurationDAO syncopeConfigurationDAO;\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n     public ConnectorInstanceTO create(HttpServletResponse response,\n-            @RequestBody ConnectorInstanceTO connectorTO) throws IOException {\n+            @RequestBody ConnectorInstanceTO connectorTO)\n+            throws SyncopeClientCompositeErrorException, NotFoundException,\n+            MissingConfKeyException {\n \n         if (log.isDebugEnabled()) {\n             log.debug(\"Create called with configuration \" + connectorTO);\n@@ -91,21 +91,14 @@ public ConnectorInstanceTO create(HttpServletResponse response,\n \n         } catch (SyncopeClientCompositeErrorException e) {\n             log.error(\"Could not create for \" + connectorTO, e);\n-            return throwCompositeException(e, response);\n-        }\n \n-        if (actual == null) {\n-            throw new IOException(\"Connector bind failed\");\n+            throw e;\n         }\n \n         SyncopeConfiguration syncopeConfiguration =\n                 syncopeConfigurationDAO.find(\n                 \"identityconnectors.bundle.directory\");\n \n-        if (syncopeConfiguration == null) {\n-            throw new IOException(\"Syncope configuration not found\");\n-        }\n-\n         ConnectorInfoManager manager =\n                 getConnectorManager(syncopeConfiguration.getConfValue());\n \n@@ -139,11 +132,12 @@ public ConnectorInstanceTO create(HttpServletResponse response,\n         return binder.getConnectorInstanceTO(actual);\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n     public ConnectorInstanceTO update(HttpServletResponse response,\n-            @RequestBody ConnectorInstanceTO connectorTO) throws IOException {\n+            @RequestBody ConnectorInstanceTO connectorTO)\n+            throws SyncopeClientCompositeErrorException, NotFoundException,\n+            MissingConfKeyException {\n \n         if (log.isDebugEnabled()) {\n             log.debug(\"update called with configuration \" + connectorTO);\n@@ -165,11 +159,9 @@ public ConnectorInstanceTO update(HttpServletResponse response,\n \n         } catch (SyncopeClientCompositeErrorException e) {\n             log.error(\"Could not create for \" + connectorTO, e);\n-            return throwCompositeException(e, response);\n-        }\n \n-        if (actual == null)\n-            throw new IOException(\"Connector bind failed\");\n+            throw e;\n+        }\n \n         ConfigurableApplicationContext context =\n                 ApplicationContextManager.getApplicationContext();\n@@ -186,10 +178,6 @@ public ConnectorInstanceTO update(HttpServletResponse response,\n                     syncopeConfigurationDAO.find(\n                     \"identityconnectors.bundle.directory\");\n \n-            if (syncopeConfiguration == null) {\n-                throw new IOException(\"Syncope configuration not found\");\n-            }\n-\n             ConnectorInfoManager manager =\n                     getConnectorManager(syncopeConfiguration.getConfValue());\n \n@@ -218,12 +206,11 @@ public ConnectorInstanceTO update(HttpServletResponse response,\n         return binder.getConnectorInstanceTO(actual);\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/delete/{connectorId}\")\n     public void delete(HttpServletResponse response,\n             @PathVariable(\"connectorId\") Long connectorId)\n-            throws IOException {\n+            throws NotFoundException {\n \n         ConnectorInstance connectorInstance =\n                 connectorInstanceDAO.find(connectorId);\n@@ -234,7 +221,7 @@ public void delete(HttpServletResponse response,\n                 log.error(\"Could not find connector '\" + connectorId + \"'\");\n             }\n \n-            throwNotFoundException(String.valueOf(connectorId), response);\n+            throw new NotFoundException(String.valueOf(connectorId));\n \n         } else {\n             connectorInstanceDAO.delete(connectorId);\n@@ -281,14 +268,16 @@ public ConnectorInstanceTOs list() {\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{connectorId}\")\n     public ConnectorInstanceTO read(HttpServletResponse response,\n-            @PathVariable(\"connectorId\") Long connectorId) throws IOException {\n+            @PathVariable(\"connectorId\") Long connectorId)\n+            throws NotFoundException {\n \n         ConnectorInstance connectorInstance =\n                 connectorInstanceDAO.find(connectorId);\n \n         if (connectorInstance == null) {\n             log.error(\"Could not find connector '\" + connectorId + \"'\");\n-            return throwNotFoundException(\"Connector not found\", response);\n+\n+            throw new NotFoundException(String.valueOf(connectorId));\n         }\n \n         ConnectorInstanceDataBinder binder =\n@@ -300,7 +289,7 @@ public ConnectorInstanceTO read(HttpServletResponse response,\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/check/{connectorId}\")\n     public ModelAndView check(HttpServletResponse response,\n-            @PathVariable(\"connectorId\") Long connectorId) throws IOException {\n+            @PathVariable(\"connectorId\") Long connectorId) {\n \n         ConfigurableApplicationContext context =\n                 ApplicationContextManager.getApplicationContext();\n@@ -309,8 +298,8 @@ public ModelAndView check(HttpServletResponse response,\n                 (DefaultListableBeanFactory) context.getBeanFactory();\n \n         if (log.isDebugEnabled()) {\n-            log.debug(\"Singleton in bean factory: \" +\n-                    beanFactory.getSingletonNames());\n+            log.debug(\"Singleton in bean factory: \"\n+                    + beanFactory.getSingletonNames());\n         }\n \n         ConnectorFacade connector = (ConnectorFacade) beanFactory.getBean(\n@@ -340,17 +329,15 @@ public ModelAndView check(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/getBundles\")\n-    public ConnectorBundleTOs getBundles() throws IOException {\n+    public ConnectorBundleTOs getBundles()\n+            throws NotFoundException, MissingConfKeyException {\n+\n         ConnectorBundleTOs connectorBundleTOs = new ConnectorBundleTOs();\n \n         SyncopeConfiguration syncopeConfiguration =\n                 syncopeConfigurationDAO.find(\n                 \"identityconnectors.bundle.directory\");\n \n-        if (syncopeConfiguration == null) {\n-            throw new IOException(\"Syncope configuration not found\");\n-        }\n-\n         ConnectorInfoManager manager =\n                 getConnectorManager(syncopeConfiguration.getConfValue());\n \n@@ -370,9 +357,9 @@ public ConnectorBundleTOs getBundles() throws IOException {\n \n             if (log.isDebugEnabled()) {\n                 log.debug(\n-                        \"\\nBundle name: \" + key.getBundleName() +\n-                        \"\\nBundle version: \" + key.getBundleVersion() +\n-                        \"\\nBundle class: \" + key.getConnectorName());\n+                        \"\\nBundle name: \" + key.getBundleName()\n+                        + \"\\nBundle version: \" + key.getBundleVersion()\n+                        + \"\\nBundle class: \" + key.getConnectorName());\n             }\n \n             connectorBundleTO.setBundleName(key.getBundleName());\n@@ -385,8 +372,8 @@ public ConnectorBundleTOs getBundles() throws IOException {\n             connectorBundleTO.setProperties(properties.getPropertyNames());\n \n             if (log.isDebugEnabled()) {\n-                log.debug(\"Bundle properties: \" +\n-                        connectorBundleTO.getProperties());\n+                log.debug(\"Bundle properties: \"\n+                        + connectorBundleTO.getProperties());\n             }\n \n             connectorBundleTOs.addBundle(connectorBundleTO);\n@@ -396,7 +383,7 @@ public ConnectorBundleTOs getBundles() throws IOException {\n     }\n \n     public static List<ConnectorInfo> getBundles(\n-            ConnectorInfoManager manager) throws IOException {\n+            ConnectorInfoManager manager) {\n \n         List<ConnectorInfo> bundles = manager.getConnectorInfos();\n \n@@ -416,7 +403,7 @@ public static ConnectorFacade getConnectorFacade(\n             String bundlename,\n             String bundleversion,\n             String connectorname,\n-            Set<PropertyTO> configuration) throws IOException {\n+            Set<PropertyTO> configuration) throws NotFoundException {\n \n         // specify a connector.\n         ConnectorKey key = new ConnectorKey(\n@@ -425,36 +412,36 @@ public static ConnectorFacade getConnectorFacade(\n                 connectorname);\n \n         if (key == null) {\n-            throw new IOException(\"Connector Key not found\");\n+            throw new NotFoundException(\"Connector Key\");\n         }\n \n         if (log.isDebugEnabled()) {\n             log.debug(\n-                    \"\\nBundle name: \" + key.getBundleName() +\n-                    \"\\nBundle version: \" + key.getBundleVersion() +\n-                    \"\\nBundle class: \" + key.getConnectorName());\n+                    \"\\nBundle name: \" + key.getBundleName()\n+                    + \"\\nBundle version: \" + key.getBundleVersion()\n+                    + \"\\nBundle class: \" + key.getConnectorName());\n         }\n \n         // get the specified connector.\n         ConnectorInfo info = manager.findConnectorInfo(key);\n \n         if (info == null) {\n-            throw new IOException(\"Connector Info not found\");\n+            throw new NotFoundException(\"Connector Info\");\n         }\n \n         // create default configuration\n         APIConfiguration apiConfig = info.createDefaultAPIConfiguration();\n \n         if (apiConfig == null) {\n-            throw new IOException(\"Default API configuration not found\");\n+            throw new NotFoundException(\"Default API configuration\");\n         }\n \n         // retrieve the ConfigurationProperties.\n         ConfigurationProperties properties =\n                 apiConfig.getConfigurationProperties();\n \n         if (properties == null) {\n-            throw new IOException(\"Configuration properties not found\");\n+            throw new NotFoundException(\"Configuration properties\");\n         }\n \n         // Print out what the properties are (not necessary)\n@@ -465,8 +452,8 @@ public static ConnectorFacade getConnectorFacade(\n \n             if (log.isDebugEnabled()) {\n                 log.debug(\n-                        \"\\nProperty Name: \" + prop.getName() +\n-                        \"\\nProperty Type: \" + prop.getType());\n+                        \"\\nProperty Name: \" + prop.getName()\n+                        + \"\\nProperty Type: \" + prop.getType());\n             }\n         }\n \n@@ -482,7 +469,7 @@ public static ConnectorFacade getConnectorFacade(\n                 ConnectorFacadeFactory.getInstance().newInstance(apiConfig);\n \n         if (connector == null) {\n-            throw new IOException(\"Connector not found\");\n+            throw new NotFoundException(\"Connector\");\n         }\n \n         // Make sure we have set up the Configuration properly\n@@ -493,7 +480,7 @@ public static ConnectorFacade getConnectorFacade(\n     }\n \n     public static ConnectorInfoManager getConnectorManager(\n-            String bundledirectory) throws IOException {\n+            String bundledirectory) throws NotFoundException {\n \n         ConnectorInfoManagerFactory connectorInfoManagerFactory =\n                 ConnectorInfoManagerFactory.getInstance();\n@@ -505,7 +492,7 @@ public static ConnectorInfoManager getConnectorManager(\n         String[] files = bundleDirectory.list();\n \n         if (files == null) {\n-            throw new IOException(\"No bundles found\");\n+            throw new NotFoundException(\"Bundles\");\n         }\n \n         for (String file : files) {\n@@ -515,16 +502,16 @@ public static ConnectorInfoManager getConnectorManager(\n                 // ignore exception and don't add bundle\n                 if (log.isDebugEnabled()) {\n                     log.debug(\n-                            \"\\\"\" +\n-                            bundleDirectory.toString() + \"/\" + file +\n-                            \"\\\"\" +\n-                            \" is not a valid connector bundle.\", ignore);\n+                            \"\\\"\"\n+                            + bundleDirectory.toString() + \"/\" + file\n+                            + \"\\\"\"\n+                            + \" is not a valid connector bundle.\", ignore);\n                 }\n             }\n         }\n \n         if (urls.isEmpty()) {\n-            throw new IOException(\"No bundles found\");\n+            throw new NotFoundException(\"Bundles\");\n         }\n \n         if (log.isDebugEnabled()) {\n@@ -536,7 +523,7 @@ public static ConnectorInfoManager getConnectorManager(\n                 urls.toArray(new URL[0]));\n \n         if (manager == null) {\n-            throw new IOException(\"Connector Info Manager not found\");\n+            throw new NotFoundException(\"Connector Info Manager\");\n         }\n \n         return manager;"},{"sha":"29cb792b7f71869571bebe69ae32b79ac856c13f","filename":"core/src/main/java/org/syncope/core/rest/controller/DerivedSchemaController.java","status":"modified","additions":10,"deletions":15,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=026c0f3834336a5e25ca53ad09081b6f78ccd620","patch":"@@ -14,13 +14,12 @@\n  */\n package org.syncope.core.rest.controller;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n+import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n-import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n@@ -40,12 +39,10 @@ public class DerivedSchemaController extends AbstractController {\n     @Autowired\n     private DerivedSchemaDataBinder derivedSchemaDataBinder;\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n     public DerivedSchemaTO create(HttpServletResponse response,\n             @RequestBody DerivedSchemaTO derivedSchemaTO,\n-            @PathVariable(\"kind\") String kind)\n-            throws IOException {\n+            @PathVariable(\"kind\") String kind) {\n \n         AbstractDerivedSchema derivedSchema =\n                 getAttributableUtil(kind).newDerivedSchema();\n@@ -60,22 +57,21 @@ public DerivedSchemaTO create(HttpServletResponse response,\n         return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/{kind}/delete/{schema}\")\n     public void delete(HttpServletResponse response,\n             @PathVariable(\"kind\") String kind,\n             @PathVariable(\"schema\") String derivedSchemaName)\n-            throws IOException {\n+            throws NotFoundException {\n \n         Class reference = getAttributableUtil(kind).getDerivedSchemaClass();\n         AbstractDerivedSchema derivedSchema =\n                 derivedSchemaDAO.find(derivedSchemaName, reference);\n         if (derivedSchema == null) {\n             log.error(\"Could not find derived schema '\"\n                     + derivedSchemaName + \"'\");\n-            \n-            throwNotFoundException(derivedSchemaName, response);\n+\n+            throw new NotFoundException(derivedSchemaName);\n         } else {\n             derivedSchemaDAO.delete(derivedSchemaName, reference);\n         }\n@@ -106,27 +102,26 @@ public DerivedSchemaTOs list(@PathVariable(\"kind\") String kind) {\n     public DerivedSchemaTO read(HttpServletResponse response,\n             @PathVariable(\"kind\") String kind,\n             @PathVariable(\"derivedSchema\") String derivedSchemaName)\n-            throws IOException {\n+            throws NotFoundException {\n \n         Class reference = getAttributableUtil(kind).getDerivedSchemaClass();\n         AbstractDerivedSchema derivedSchema =\n                 derivedSchemaDAO.find(derivedSchemaName, reference);\n         if (derivedSchema == null) {\n             log.error(\"Could not find derived schema '\"\n                     + derivedSchemaName + \"'\");\n-            \n-            return throwNotFoundException(derivedSchemaName, response);\n+\n+            throw new NotFoundException(derivedSchemaName);\n         }\n \n         return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n     public DerivedSchemaTO update(HttpServletResponse response,\n             @RequestBody DerivedSchemaTO derivedSchemaTO,\n             @PathVariable(\"kind\") String kind)\n-            throws IOException {\n+            throws NotFoundException {\n \n         AbstractDerivedSchema derivedSchema =\n                 getAttributableUtil(kind).newDerivedSchema();\n@@ -138,7 +133,7 @@ public DerivedSchemaTO update(HttpServletResponse response,\n             log.error(\"Could not find schema '\"\n                     + derivedSchemaTO.getName() + \"'\");\n \n-            return throwNotFoundException(derivedSchemaTO.getName(), response);\n+            throw new NotFoundException(derivedSchemaTO.getName());\n         }\n \n         derivedSchema = derivedSchemaDAO.save(derivedSchema);"},{"sha":"91af2176c519737cfaba452a8ebd80c71cd112cb","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":36,"deletions":65,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=026c0f3834336a5e25ca53ad09081b6f78ccd620","patch":"@@ -20,13 +20,12 @@\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n-import java.io.IOException;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.http.HttpStatus;\n-import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.syncope.client.to.ResourceTO;\n import org.syncope.client.to.ResourceTOs;\n@@ -50,35 +49,31 @@ public class ResourceController extends AbstractController {\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n-\n     @Autowired\n     private SchemaDAO schemaDAO;\n-\n     @Autowired\n     private SyncopeRoleDAO syncopeRoleDAO;\n-\n     @Autowired\n     private SchemaMappingDAO schemaMappingDAO;\n-\n     @Autowired\n     ConnectorInstanceDAO connectorInstanceDAO;\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n     public ResourceTO create(HttpServletResponse response,\n-            @RequestBody ResourceTO resourceTO) throws IOException {\n+            @RequestBody ResourceTO resourceTO)\n+            throws SyncopeClientCompositeErrorException {\n \n         if (log.isDebugEnabled()) {\n             log.debug(\"Creation request received\");\n         }\n \n         if (resourceTO == null) {\n             if (log.isErrorEnabled()) {\n-                log.error(\"Missing resource.\");\n+                log.error(\"Missing resource\");\n             }\n \n-            return throwNotFoundException(\"Resource not found\", response);\n+            throw new NullPointerException(\"Missing resource\");\n         }\n \n         ResourceDataBinder binder =\n@@ -125,10 +120,6 @@ public ResourceTO create(HttpServletResponse response,\n                 throw ex;\n             }\n \n-        } catch (SyncopeClientCompositeErrorException e) {\n-\n-            return throwCompositeException(e, response);\n-\n         } catch (SyncopeClientException ex) {\n \n             SyncopeClientCompositeErrorException compositeErrorException =\n@@ -137,7 +128,7 @@ public ResourceTO create(HttpServletResponse response,\n \n             compositeErrorException.addException(ex);\n \n-            return throwCompositeException(compositeErrorException, response);\n+            throw compositeErrorException;\n \n         } catch (Throwable t) {\n \n@@ -154,18 +145,18 @@ public ResourceTO create(HttpServletResponse response,\n \n             compositeErrorException.addException(ex);\n \n-            return throwCompositeException(compositeErrorException, response);\n+            throw compositeErrorException;\n         }\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return binder.getResourceTO(actual);\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n     public ResourceTO update(HttpServletResponse response,\n-            @RequestBody ResourceTO resourceTO) throws IOException {\n+            @RequestBody ResourceTO resourceTO)\n+            throws SyncopeClientCompositeErrorException, NotFoundException {\n \n         if (log.isDebugEnabled()) {\n             log.debug(\"Update request received\");\n@@ -179,10 +170,10 @@ public ResourceTO update(HttpServletResponse response,\n \n         if (resource == null) {\n             if (log.isErrorEnabled()) {\n-                log.error(\"Missing resource.\");\n+                log.error(\"Missing resource\");\n             }\n \n-            return throwNotFoundException(\"Resource not found\", response);\n+            throw new NotFoundException(resourceTO.getName());\n         }\n \n         ResourceDataBinder binder =\n@@ -221,14 +212,6 @@ public ResourceTO update(HttpServletResponse response,\n                 schemaMappingDAO.delete(mapping.getId());\n             }\n \n-        } catch (SyncopeClientCompositeErrorException e) {\n-\n-            if (log.isErrorEnabled()) {\n-                log.error(\"Could not create mappings\", e);\n-            }\n-\n-            return throwCompositeException(e, response);\n-\n         } catch (SyncopeClientException ex) {\n \n             SyncopeClientCompositeErrorException compositeErrorException =\n@@ -237,7 +220,7 @@ public ResourceTO update(HttpServletResponse response,\n \n             compositeErrorException.addException(ex);\n \n-            return throwCompositeException(compositeErrorException, response);\n+            throw compositeErrorException;\n \n         } catch (Throwable t) {\n \n@@ -254,19 +237,18 @@ public ResourceTO update(HttpServletResponse response,\n \n             compositeErrorException.addException(ex);\n \n-            return throwCompositeException(compositeErrorException, response);\n+            throw compositeErrorException;\n         }\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return binder.getResourceTO(actual);\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/delete/{resourceName}\")\n     public void delete(HttpServletResponse response,\n             @PathVariable(\"resourceName\") String resourceName)\n-            throws IOException {\n+            throws NotFoundException {\n \n         Resource resource = resourceDAO.find(resourceName);\n \n@@ -276,7 +258,7 @@ public void delete(HttpServletResponse response,\n                 log.error(\"Could not find resource '\" + resourceName + \"'\");\n             }\n \n-            throwNotFoundException(String.valueOf(resourceName), response);\n+            throw new NotFoundException(resourceName);\n \n         } else {\n \n@@ -289,7 +271,7 @@ public void delete(HttpServletResponse response,\n     value = \"/read/{resourceName}\")\n     public ResourceTO read(HttpServletResponse response,\n             @PathVariable(\"resourceName\") String resourceName)\n-            throws IOException {\n+            throws NotFoundException {\n \n         ResourceDataBinder binder =\n                 new ResourceDataBinder(schemaDAO, connectorInstanceDAO);\n@@ -302,16 +284,15 @@ public ResourceTO read(HttpServletResponse response,\n                 log.error(\"Could not find resource '\" + resourceName + \"'\");\n             }\n \n-            return throwNotFoundException(resourceName, response);\n+            throw new NotFoundException(resourceName);\n         }\n \n         return binder.getResourceTO(resource);\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n-    public ResourceTOs list(HttpServletResponse response)\n-            throws IOException {\n+    public ResourceTOs list(HttpServletResponse response) {\n \n         ResourceDataBinder binder =\n                 new ResourceDataBinder(schemaDAO, connectorInstanceDAO);\n@@ -324,18 +305,18 @@ public ResourceTOs list(HttpServletResponse response)\n                 log.error(\"No resource found\");\n             }\n \n-            return throwNotFoundException(\"No resource found\", response);\n+            throw new NullPointerException(\"No resource found\");\n         }\n \n         return binder.getResourceTOs(resources);\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/{resourceName}/mappings/create\")\n     public SchemaMappingTOs createMappings(HttpServletResponse response,\n             @PathVariable(\"resourceName\") String resourceName,\n-            @RequestBody SchemaMappingTOs mappings) throws IOException {\n+            @RequestBody SchemaMappingTOs mappings)\n+            throws SyncopeClientCompositeErrorException {\n \n         Set<SchemaMapping> actuals = new HashSet<SchemaMapping>();\n \n@@ -351,7 +332,7 @@ public SchemaMappingTOs createMappings(HttpServletResponse response,\n \n             if (resource == null) {\n                 if (log.isErrorEnabled()) {\n-                    log.error(\"Missing resource.\");\n+                    log.error(\"Missing resource\");\n                 }\n \n                 SyncopeClientException ex = new SyncopeClientException(\n@@ -362,9 +343,9 @@ public SchemaMappingTOs createMappings(HttpServletResponse response,\n                 throw ex;\n             }\n \n-            if (mappings == null || mappings.getMappings().size() == 0) {\n+            if (mappings == null || mappings.getMappings().isEmpty()) {\n                 if (log.isErrorEnabled()) {\n-                    log.error(\"Missing mapping.\");\n+                    log.error(\"Missing mapping\");\n                 }\n \n                 SyncopeClientException ex = new SyncopeClientException(\n@@ -395,14 +376,6 @@ public SchemaMappingTOs createMappings(HttpServletResponse response,\n                 actuals.add(actual);\n             }\n \n-        } catch (SyncopeClientCompositeErrorException e) {\n-\n-            if (log.isErrorEnabled()) {\n-                log.error(\"Could not create mappings\", e);\n-            }\n-\n-            return throwCompositeException(e, response);\n-\n         } catch (SyncopeClientException ex) {\n \n             SyncopeClientCompositeErrorException compositeErrorException =\n@@ -411,7 +384,7 @@ public SchemaMappingTOs createMappings(HttpServletResponse response,\n \n             compositeErrorException.addException(ex);\n \n-            return throwCompositeException(compositeErrorException, response);\n+            throw compositeErrorException;\n \n         } catch (Throwable t) {\n \n@@ -428,19 +401,18 @@ public SchemaMappingTOs createMappings(HttpServletResponse response,\n \n             compositeErrorException.addException(ex);\n \n-            return throwCompositeException(compositeErrorException, response);\n+            throw compositeErrorException;\n         }\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return binder.getSchemaMappingTOs(actuals);\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/{resourceName}/mappings/delete\")\n     public void deleteMappings(HttpServletResponse response,\n             @PathVariable(\"resourceName\") String resourceName)\n-            throws IOException {\n+            throws NotFoundException {\n \n         Resource resource = resourceDAO.find(resourceName);\n \n@@ -450,7 +422,7 @@ public void deleteMappings(HttpServletResponse response,\n                 log.error(\"Could not find resource '\" + resourceName + \"'\");\n             }\n \n-            throwNotFoundException(resourceName, response);\n+            throw new NotFoundException(resourceName);\n \n         } else {\n \n@@ -471,7 +443,7 @@ public void deleteMappings(HttpServletResponse response,\n     value = \"/{resourceName}/mappings/list\")\n     public SchemaMappingTOs getResourceMapping(HttpServletResponse response,\n             @PathVariable(\"resourceName\") String resourceName)\n-            throws IOException {\n+            throws SyncopeClientCompositeErrorException {\n \n         Resource resource = null;\n         if (resourceName != null) {\n@@ -494,10 +466,9 @@ public SchemaMappingTOs getResourceMapping(HttpServletResponse response,\n \n             compositeErrorException.addException(ex);\n \n-            return throwCompositeException(compositeErrorException, response);\n+            throw compositeErrorException;\n         }\n \n-\n         Set<SchemaMapping> schemaMappings = resource.getMappings();\n \n         // resource.getMappings() can never return a null value\n@@ -512,7 +483,7 @@ public SchemaMappingTOs getResourceMapping(HttpServletResponse response,\n     value = \"/{roleName}/resources/mappings/list\")\n     public SchemaMappingTOs getRoleResourcesMapping(HttpServletResponse response,\n             @PathVariable(\"roleName\") Long roleId)\n-            throws IOException {\n+            throws SyncopeClientCompositeErrorException {\n \n         SyncopeRole role = null;\n         if (roleId != null) {\n@@ -535,7 +506,7 @@ public SchemaMappingTOs getRoleResourcesMapping(HttpServletResponse response,\n \n             compositeErrorException.addException(ex);\n \n-            return throwCompositeException(compositeErrorException, response);\n+            throw compositeErrorException;\n         }\n \n         SchemaMappingTOs roleMappings = new SchemaMappingTOs();\n@@ -555,15 +526,15 @@ public SchemaMappingTOs getRoleResourcesMapping(HttpServletResponse response,\n             Set<SchemaMapping> schemaMappings = resource.getMappings();\n \n             if (log.isDebugEnabled()) {\n-                log.debug(\"The mappings of '\" + resource + \"' are '\" +\n-                        schemaMappings + \"'\");\n+                log.debug(\"The mappings of '\" + resource + \"' are '\"\n+                        + schemaMappings + \"'\");\n             }\n \n             resourceMappings = binder.getSchemaMappingTOs(schemaMappings);\n \n             if (log.isDebugEnabled()) {\n-                log.debug(\"The mappings TO of '\" + resource + \"' are '\" +\n-                        resourceMappings.getMappings() + \"'\");\n+                log.debug(\"The mappings TO of '\" + resource + \"' are '\"\n+                        + resourceMappings.getMappings() + \"'\");\n             }\n \n             roleMappings.getMappings().addAll(resourceMappings.getMappings());"},{"sha":"aa785d52abdf979d338c00040054c0b012a6422d","filename":"core/src/main/java/org/syncope/core/rest/controller/RoleController.java","status":"modified","additions":15,"deletions":18,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=026c0f3834336a5e25ca53ad09081b6f78ccd620","patch":"@@ -14,14 +14,13 @@\n  */\n package org.syncope.core.rest.controller;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n+import javassist.NotFoundException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n-import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n@@ -42,13 +41,12 @@ public class RoleController extends AbstractController {\n     @Autowired\n     private RoleDataBinder roleDataBinder;\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n     public RoleTO create(HttpServletRequest request,\n             HttpServletResponse response,\n             @RequestBody RoleTO roleTO)\n-            throws IOException {\n+            throws SyncopeClientCompositeErrorException {\n \n         if (log.isDebugEnabled()) {\n             log.debug(\"create called with parameters \" + roleTO);\n@@ -60,34 +58,34 @@ public RoleTO create(HttpServletRequest request,\n         } catch (SyncopeClientCompositeErrorException e) {\n             log.error(\"Could not create for \" + roleTO, e);\n \n-            return throwCompositeException(e, response);\n+            throw e;\n         }\n         syncopeRole = syncopeRoleDAO.save(syncopeRole);\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return roleDataBinder.getRoleTO(syncopeRole);\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/delete/{roleId}\")\n     public void delete(HttpServletResponse response,\n             @PathVariable(\"roleId\") Long roleId)\n-            throws IOException {\n+            throws NotFoundException {\n \n         SyncopeRole role = syncopeRoleDAO.find(roleId);\n \n         if (role == null) {\n             log.error(\"Could not find role '\" + roleId + \"'\");\n-            throwNotFoundException(String.valueOf(roleId), response);\n+\n+            throw new NotFoundException(String.valueOf(roleId));\n         } else {\n             syncopeRoleDAO.delete(roleId);\n         }\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n-    public RoleTOs list(HttpServletRequest request) throws IOException {\n+    public RoleTOs list(HttpServletRequest request) {\n         List<SyncopeRole> roles = syncopeRoleDAO.findAll();\n         List<RoleTO> roleTOs = new ArrayList<RoleTO>(roles.size());\n \n@@ -104,13 +102,14 @@ public RoleTOs list(HttpServletRequest request) throws IOException {\n     value = \"/parent/{roleId}\")\n     public RoleTO parent(HttpServletResponse response,\n             @PathVariable(\"roleId\") Long roleId)\n-            throws IOException {\n+            throws NotFoundException {\n \n         SyncopeRole role = syncopeRoleDAO.find(roleId);\n \n         if (role == null) {\n             log.error(\"Could not find role '\" + roleId + \"'\");\n-            return throwNotFoundException(String.valueOf(roleId), response);\n+\n+            throw new NotFoundException(String.valueOf(roleId));\n         }\n \n         return role.getParent() == null ? null\n@@ -120,8 +119,7 @@ public RoleTO parent(HttpServletResponse response,\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/children/{roleId}\")\n     public RoleTOs children(HttpServletResponse response,\n-            @PathVariable(\"roleId\") Long roleId)\n-            throws IOException {\n+            @PathVariable(\"roleId\") Long roleId) {\n \n         List<SyncopeRole> roles = syncopeRoleDAO.findChildren(roleId);\n         List<RoleTO> roleTOs = new ArrayList<RoleTO>(roles.size());\n@@ -139,24 +137,23 @@ public RoleTOs children(HttpServletResponse response,\n     value = \"/read/{roleId}\")\n     public RoleTO read(HttpServletResponse response,\n             @PathVariable(\"roleId\") Long roleId)\n-            throws IOException {\n+            throws NotFoundException {\n \n         SyncopeRole role = syncopeRoleDAO.find(roleId);\n \n         if (role == null) {\n             log.error(\"Could not find role '\" + roleId + \"'\");\n-            return throwNotFoundException(String.valueOf(roleId), response);\n+\n+            throw new NotFoundException(String.valueOf(roleId));\n         }\n \n         return roleDataBinder.getRoleTO(role);\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n     public RoleTO update(HttpServletResponse response,\n-            @RequestBody RoleTO roleTO)\n-            throws IOException {\n+            @RequestBody RoleTO roleTO) {\n \n         log.info(\"update called with parameter \" + roleTO);\n "},{"sha":"4a11f4465efdc047dcb8ff59b80d989a8e3d592b","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":16,"deletions":26,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=026c0f3834336a5e25ca53ad09081b6f78ccd620","patch":"@@ -14,13 +14,12 @@\n  */\n package org.syncope.core.rest.controller;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n+import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n-import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n@@ -42,41 +41,35 @@ public class SchemaController extends AbstractController {\n     @Autowired\n     private SchemaDataBinder schemaDataBinder;\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n     public SchemaTO create(HttpServletResponse response,\n             @RequestBody SchemaTO schemaTO,\n             @PathVariable(\"kind\") String kind)\n-            throws IOException {\n+            throws MultiUniqueValueException {\n \n         AbstractSchema schema = getAttributableUtil(kind).newSchema();\n         schema = schemaDataBinder.createSchema(schemaTO, schema,\n                 getAttributableUtil(kind).getDerivedSchemaClass());\n-        try {\n-            schema = schemaDAO.save(schema);\n-        } catch (MultiUniqueValueException e) {\n-            log.error(\"While saving schema\", e);\n \n-            return throwMultiUniqueValueException(e, response);\n-        }\n+        schema = schemaDAO.save(schema);\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return schemaDataBinder.getSchemaTO(schema);\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/{kind}/delete/{schema}\")\n     public void delete(HttpServletResponse response,\n             @PathVariable(\"kind\") String kind,\n             @PathVariable(\"schema\") String schemaName)\n-            throws IOException {\n+            throws NotFoundException {\n \n         Class reference = getAttributableUtil(kind).getSchemaClass();\n         AbstractSchema schema = schemaDAO.find(schemaName, reference);\n         if (schema == null) {\n             log.error(\"Could not find schema '\" + schemaName + \"'\");\n-            throwNotFoundException(schemaName, response);\n+\n+            throw new NotFoundException(schemaName);\n         } else {\n             schemaDAO.delete(schemaName, reference);\n         }\n@@ -103,23 +96,24 @@ public SchemaTOs list(@PathVariable(\"kind\") String kind) {\n     public SchemaTO read(HttpServletResponse response,\n             @PathVariable(\"kind\") String kind,\n             @PathVariable(\"schema\") String schemaName)\n-            throws IOException {\n+            throws NotFoundException {\n \n         Class reference = getAttributableUtil(kind).getSchemaClass();\n         AbstractSchema schema = schemaDAO.find(schemaName, reference);\n         if (schema == null) {\n             log.error(\"Could not find schema '\" + schemaName + \"'\");\n-            return throwNotFoundException(schemaName, response);\n+\n+            throw new NotFoundException(schemaName);\n         }\n \n         return schemaDataBinder.getSchemaTO(schema);\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n     public SchemaTO update(HttpServletResponse response,\n             @RequestBody SchemaTO schemaTO, @PathVariable(\"kind\") String kind)\n-            throws IOException {\n+            throws SyncopeClientCompositeErrorException,\n+            MultiUniqueValueException, NotFoundException {\n \n         Class reference = getAttributableUtil(kind).getSchemaClass();\n         AbstractSchema schema = null;\n@@ -129,21 +123,17 @@ public SchemaTO update(HttpServletResponse response,\n                     getAttributableUtil(kind).getDerivedSchemaClass());\n             if (schema == null) {\n                 log.error(\"Could not find schema '\" + schemaTO.getName() + \"'\");\n-                return throwNotFoundException(schemaTO.getName(), response);\n+\n+                throw new NotFoundException(schemaTO.getName());\n             }\n         } catch (SyncopeClientCompositeErrorException e) {\n             log.error(\"Could not update for \" + schemaTO, e);\n-            return throwCompositeException(e, response);\n-        }\n-\n-        try {\n-            schema = schemaDAO.save(schema);\n-        } catch (MultiUniqueValueException e) {\n-            log.error(\"While saving schema\", e);\n \n-            return throwMultiUniqueValueException(e, response);\n+            throw e;\n         }\n \n+        schema = schemaDAO.save(schema);\n+\n         return schemaDataBinder.getSchemaTO(schema);\n     }\n }"},{"sha":"da587a6229ffedae233465fc7c90b01fa6fe6fe2","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":38,"deletions":77,"changes":115,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=026c0f3834336a5e25ca53ad09081b6f78ccd620","patch":"@@ -34,7 +34,6 @@\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n import org.syncope.core.persistence.propagation.PropagationException;\n import org.syncope.core.rest.data.UserDataBinder;\n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Date;\n@@ -43,10 +42,10 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import javassist.NotFoundException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.http.HttpStatus;\n-import org.springframework.transaction.annotation.Transactional;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.Resource;\n@@ -75,16 +74,16 @@ public class UserController extends AbstractController {\n     @Autowired\n     private PropagationManager propagationManager;\n \n-    @Transactional\n     private UserTO executeAction(String actionName,\n-            HttpServletResponse response, UserTO userTO) throws IOException {\n+            HttpServletResponse response, UserTO userTO)\n+            throws WorkflowException, NotFoundException {\n \n         SyncopeUser syncopeUser = syncopeUserDAO.find(userTO.getId());\n \n         if (syncopeUser == null) {\n             log.error(\"Could not find user '\" + userTO.getId() + \"'\");\n-            return throwNotFoundException(\n-                    String.valueOf(userTO.getId()), response);\n+\n+            throw new NotFoundException(String.valueOf(userTO.getId()));\n         }\n \n         Map<String, Object> inputs = new HashMap<String, Object>();\n@@ -105,33 +104,26 @@ private UserTO executeAction(String actionName,\n             }\n         }\n         if (actionId == null) {\n-            return throwNotFoundException(actionName, response);\n-        }\n \n-        try {\n-            userWorkflow.doAction(syncopeUser.getWorkflowEntryId(),\n-                    actionId, inputs);\n-        } catch (WorkflowException e) {\n-            log.error(\"While performing \" + actionName, e);\n-\n-            return throwWorkflowException(e, response);\n+            throw new NotFoundException(actionName);\n         }\n \n+        userWorkflow.doAction(syncopeUser.getWorkflowEntryId(),\n+                actionId, inputs);\n+\n         syncopeUser = syncopeUserDAO.save(syncopeUser);\n         return userDataBinder.getUserTO(syncopeUser);\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/activate\")\n     public UserTO activate(HttpServletResponse response,\n             @RequestBody UserTO userTO)\n-            throws IOException {\n+            throws WorkflowException, NotFoundException {\n \n         return executeAction(Constants.ACTION_ACTIVATE, response, userTO);\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n     public UserTO create(HttpServletRequest request,\n@@ -141,7 +133,8 @@ public UserTO create(HttpServletRequest request,\n             required = false) Set<Long> syncRoles,\n             @RequestParam(value = \"syncResources\",\n             required = false) Set<String> syncResources)\n-            throws IOException {\n+            throws SyncopeClientCompositeErrorException,\n+            WorkflowException, PropagationException {\n \n         if (syncRoles == null) {\n             syncRoles = Collections.EMPTY_SET;\n@@ -168,10 +161,6 @@ public UserTO create(HttpServletRequest request,\n             if (workflowStore != null && e.getWorkflowEntryId() != null) {\n                 workflowStore.delete(e.getWorkflowEntryId());\n             }\n-        } catch (WorkflowException e) {\n-            log.error(\"Unexpected workflow exception\", e);\n-\n-            return throwWorkflowException(e, response);\n         }\n \n         if (wie != null) {\n@@ -189,45 +178,15 @@ public UserTO create(HttpServletRequest request,\n                             String.valueOf(wie.getSyncopeUserId()));\n                     compositeException.addException(rejectedUserCreate);\n \n-                    return throwCompositeException(compositeException,\n-                            response);\n+                    throw compositeException;\n             }\n         }\n \n-        SyncopeUser syncopeUser = null;\n-        try {\n-            syncopeUser = userDataBinder.createSyncopeUser(userTO);\n-        } catch (SyncopeClientCompositeErrorException e) {\n-            log.error(\"Could not create for \" + userTO, e);\n-\n-            // Removing dirty workflow entry\n-            if (workflowStore != null) {\n-                workflowStore.delete(workflowId);\n-            }\n-\n-            return throwCompositeException(e, response);\n-        }\n+        SyncopeUser syncopeUser = userDataBinder.createSyncopeUser(userTO);\n         syncopeUser.setWorkflowEntryId(workflowId);\n         syncopeUser.setCreationTime(new Date());\n         syncopeUser = syncopeUserDAO.save(syncopeUser);\n \n-        Map<String, Object> inputs = new HashMap<String, Object>();\n-        inputs.put(Constants.SYNCOPE_USER, syncopeUser);\n-\n-        int[] availableWorkflowActions = userWorkflow.getAvailableActions(\n-                workflowId, null);\n-        for (int availableWorkflowAction : availableWorkflowActions) {\n-            try {\n-                userWorkflow.doAction(workflowId, availableWorkflowAction,\n-                        inputs);\n-            } catch (WorkflowException e) {\n-                log.error(\"Unexpected workflow exception\", e);\n-\n-                return throwWorkflowException(e, response);\n-            }\n-        }\n-        syncopeUser = syncopeUserDAO.save(syncopeUser);\n-\n         // Now that user is created locally, let's propagate\n         Set<String> synchronous = new HashSet<String>();\n         for (Resource resource : syncopeUser.getResources()) {\n@@ -246,31 +205,36 @@ public UserTO create(HttpServletRequest request,\n             log.debug(\"About to propagate synchronously on the following \"\n                     + \"resources \" + synchronous);\n         }\n+        propagationManager.provision(syncopeUser, synchronous);\n \n-        try {\n-            propagationManager.provision(syncopeUser, synchronous);\n-        } catch (PropagationException e) {\n-            log.error(\"Propagation exception\", e);\n+        // User is created locally and propagated, let's advance on the workflow\n+        Map<String, Object> inputs = new HashMap<String, Object>();\n+        inputs.put(Constants.SYNCOPE_USER, syncopeUser);\n \n-            return throwPropagationException(e, response);\n+        int[] availableWorkflowActions = userWorkflow.getAvailableActions(\n+                workflowId, null);\n+        for (int availableWorkflowAction : availableWorkflowActions) {\n+            userWorkflow.doAction(workflowId, availableWorkflowAction,\n+                    inputs);\n         }\n+        syncopeUser = syncopeUserDAO.save(syncopeUser);\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return userDataBinder.getUserTO(syncopeUser);\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/delete/{userId}\")\n     public void delete(HttpServletResponse response,\n             @PathVariable(\"userId\") Long userId)\n-            throws IOException {\n+            throws NotFoundException {\n \n         SyncopeUser user = syncopeUserDAO.find(userId);\n \n         if (user == null) {\n             log.error(\"Could not find user '\" + userId + \"'\");\n-            throwNotFoundException(String.valueOf(userId), response);\n+\n+            throw new NotFoundException(String.valueOf(userId));\n         } else {\n             if (workflowStore != null && user.getWorkflowEntryId() != null) {\n                 workflowStore.delete(user.getWorkflowEntryId());\n@@ -282,7 +246,7 @@ public void delete(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n-    public UserTOs list(HttpServletRequest request) throws IOException {\n+    public UserTOs list(HttpServletRequest request) {\n         List<SyncopeUser> users = syncopeUserDAO.findAll();\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n \n@@ -299,45 +263,43 @@ public UserTOs list(HttpServletRequest request) throws IOException {\n     value = \"/read/{userId}\")\n     public UserTO read(HttpServletResponse response,\n             @PathVariable(\"userId\") Long userId)\n-            throws IOException {\n+            throws NotFoundException {\n \n         SyncopeUser user = syncopeUserDAO.find(userId);\n \n         if (user == null) {\n             log.error(\"Could not find user '\" + userId + \"'\");\n-            return throwNotFoundException(String.valueOf(userId), response);\n+\n+            throw new NotFoundException(String.valueOf(userId));\n         }\n \n         return userDataBinder.getUserTO(user);\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/generateToken/{userId}\")\n     public UserTO generateToken(HttpServletResponse response,\n             @PathVariable(\"userId\") Long userId)\n-            throws IOException {\n+            throws WorkflowException, NotFoundException {\n \n         UserTO userTO = new UserTO();\n         userTO.setId(userId);\n         return executeAction(Constants.ACTION_GENERATE_TOKEN, response, userTO);\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/verifyToken\")\n     public UserTO verifyToken(HttpServletResponse response,\n             @RequestBody UserTO userTO)\n-            throws IOException {\n+            throws WorkflowException, NotFoundException {\n \n         return executeAction(Constants.ACTION_VERIFY_TOKEN, response, userTO);\n     }\n \n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/search\")\n     public UserTOs search(HttpServletResponse response,\n-            @RequestBody SearchParameters searchParameters)\n-            throws IOException {\n+            @RequestBody SearchParameters searchParameters) {\n \n         log.info(\"search called with parameter \" + searchParameters);\n \n@@ -352,13 +314,14 @@ public UserTOs search(HttpServletResponse response,\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/status/{userId}\")\n     public ModelAndView getStatus(HttpServletResponse response,\n-            @PathVariable(\"userId\") Long userId) throws IOException {\n+            @PathVariable(\"userId\") Long userId) throws NotFoundException {\n \n         SyncopeUser user = syncopeUserDAO.find(userId);\n \n         if (user == null) {\n             log.error(\"Could not find user '\" + userId + \"'\");\n-            return throwNotFoundException(String.valueOf(userId), response);\n+\n+            throw new NotFoundException(String.valueOf(userId));\n         }\n \n         List<Step> currentSteps = userWorkflow.getCurrentSteps(\n@@ -372,12 +335,10 @@ public ModelAndView getStatus(HttpServletResponse response,\n         return mav;\n     }\n \n-    @Transactional\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n     public UserTO update(HttpServletResponse response,\n-            @RequestBody UserTO userTO)\n-            throws IOException {\n+            @RequestBody UserTO userTO) {\n \n         log.info(\"update called with parameter \" + userTO);\n "},{"sha":"d7fed953f3c87268568aa61b1a5f6b5341e93461","filename":"core/src/main/java/org/syncope/core/workflow/BaseSendEmail.java","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FBaseSendEmail.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FBaseSendEmail.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FBaseSendEmail.java?ref=026c0f3834336a5e25ca53ad09081b6f78ccd620","patch":"@@ -25,6 +25,7 @@\n import org.apache.commons.mail.EmailException;\n import org.apache.commons.mail.HtmlEmail;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n \n public class BaseSendEmail extends OSWorkflowComponent\n@@ -70,12 +71,16 @@ protected HtmlEmail getHtmlEmail(Map<String, String> args,\n             throws EmailException, WorkflowException {\n \n         HtmlEmail email = new HtmlEmail();\n-        email.setHostName(syncopeConfigurationDAO.find(\n-                \"smtp.host\").getConfValue());\n-        email.setFrom(syncopeConfigurationDAO.find(\n-                args.get(\"from\")).getConfValue());\n-        email.setSubject(syncopeConfigurationDAO.find(\n-                args.get(\"subject\")).getConfValue());\n+        try {\n+            email.setHostName(syncopeConfigurationDAO.find(\n+                    \"smtp.host\").getConfValue());\n+            email.setFrom(syncopeConfigurationDAO.find(\n+                    args.get(\"from\")).getConfValue());\n+            email.setSubject(syncopeConfigurationDAO.find(\n+                    args.get(\"subject\")).getConfValue());\n+        } catch (MissingConfKeyException e) {\n+            throw new WorkflowException(e);\n+        }\n \n         return email;\n     }"},{"sha":"b5aa0bfb1db040e08bd5cbec3580c08994aa5df4","filename":"core/src/main/java/org/syncope/core/workflow/GenerateToken.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java?ref=026c0f3834336a5e25ca53ad09081b6f78ccd620","patch":"@@ -20,6 +20,7 @@\n import java.util.Map;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n \n public class GenerateToken extends OSWorkflowComponent\n@@ -40,12 +41,15 @@ public void execute(Map transientVars, Map args, PropertySet ps)\n \n         SyncopeUser syncopeUser = (SyncopeUser) transientVars.get(\n                 Constants.SYNCOPE_USER);\n-\n-        syncopeUser.generateToken(\n-                Integer.parseInt(syncopeConfigurationDAO.find(\n-                \"token.length\").getConfValue()),\n-                Integer.parseInt(syncopeConfigurationDAO.find(\n-                \"token.expireTime\").getConfValue()));\n+        try {\n+            syncopeUser.generateToken(\n+                    Integer.parseInt(syncopeConfigurationDAO.find(\n+                    \"token.length\").getConfValue()),\n+                    Integer.parseInt(syncopeConfigurationDAO.find(\n+                    \"token.expireTime\").getConfValue()));\n+        } catch (MissingConfKeyException e) {\n+            throw new WorkflowException(e);\n+        }\n \n         transientVars.put(Constants.SYNCOPE_USER, syncopeUser);\n     }"},{"sha":"f9ffd2a9ea625ca8aba0d4d7ca5b4a17da97963e","filename":"core/src/main/java/org/syncope/core/workflow/prcsiam/SendEmail.java","status":"modified","additions":17,"deletions":13,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Fprcsiam%2FSendEmail.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Fprcsiam%2FSendEmail.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Fprcsiam%2FSendEmail.java?ref=026c0f3834336a5e25ca53ad09081b6f78ccd620","patch":"@@ -15,12 +15,12 @@\n package org.syncope.core.workflow.prcsiam;\n \n import com.opensymphony.workflow.WorkflowException;\n-import java.io.UnsupportedEncodingException;\n import java.net.URLEncoder;\n import java.util.Map;\n import org.apache.commons.mail.EmailException;\n import org.apache.commons.mail.HtmlEmail;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.workflow.*;\n \n public class SendEmail extends BaseSendEmail {\n@@ -45,18 +45,22 @@ protected HtmlEmail getHtmlEmail(Map<String, String> args,\n \n         HtmlEmail email = super.getHtmlEmail(args, syncopeUser);\n         email.addTo(Utils.getUserId(syncopeUser));\n-        email.setHtmlMsg(getEmailBody(syncopeConfigurationDAO.find(\n-                \"mail.templates.url\").getConfValue(),\n-                syncopeConfigurationDAO.find(\n-                args.get(\"template.html\")).getConfValue(),\n-                urlSuffix,\n-                urlSuffix.substring(0, urlSuffix.indexOf('=') + 1)));\n-        email.setTextMsg(getEmailBody(syncopeConfigurationDAO.find(\n-                \"mail.templates.url\").getConfValue(),\n-                syncopeConfigurationDAO.find(\n-                args.get(\"template.txt\")).getConfValue(),\n-                urlSuffix,\n-                urlSuffix.substring(0, urlSuffix.indexOf('=') + 1)));\n+        try {\n+            email.setHtmlMsg(getEmailBody(syncopeConfigurationDAO.find(\n+                    \"mail.templates.url\").getConfValue(),\n+                    syncopeConfigurationDAO.find(\n+                    args.get(\"template.html\")).getConfValue(),\n+                    urlSuffix,\n+                    urlSuffix.substring(0, urlSuffix.indexOf('=') + 1)));\n+            email.setTextMsg(getEmailBody(syncopeConfigurationDAO.find(\n+                    \"mail.templates.url\").getConfValue(),\n+                    syncopeConfigurationDAO.find(\n+                    args.get(\"template.txt\")).getConfValue(),\n+                    urlSuffix,\n+                    urlSuffix.substring(0, urlSuffix.indexOf('=') + 1)));\n+        } catch (MissingConfKeyException e) {\n+            new WorkflowException(e);\n+        }\n \n         return email;\n     }"},{"sha":"f0b4b416a30f22344d2112147632f80bba34cdb9","filename":"core/src/main/webapp/WEB-INF/syncope-core-rest-servlet.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsyncope-core-rest-servlet.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsyncope-core-rest-servlet.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsyncope-core-rest-servlet.xml?ref=026c0f3834336a5e25ca53ad09081b6f78ccd620","patch":"@@ -31,6 +31,8 @@\n \n     <context:component-scan base-package=\"org.syncope.core.rest.controller\"/>\n \n+    <bean id=\"handlerExceptionResolver\" class=\"org.syncope.core.rest.SyncopeHandlerExceptionResolver\"/>\n+\n     <bean id=\"jacksonObjectMapper\" class=\"org.syncope.core.rest.jackson.UnwrappedObjectMapper\"/>\n     \n     <bean id=\"mappingJacksonHttpMessageConverter\""},{"sha":"0f5ced41c38bc93264122e2cedec3ee4166f4a32","filename":"core/src/test/java/org/syncope/core/test/rest/UserTestITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/026c0f3834336a5e25ca53ad09081b6f78ccd620/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java?ref=026c0f3834336a5e25ca53ad09081b6f78ccd620","patch":"@@ -95,7 +95,8 @@ public void create() {\n         UserTO newUserTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n                 userTO, UserTO.class);\n \n-        assertFalse(newUserTO.getAttributes().contains(attrWithInvalidSchemaTO));\n+        assertFalse(newUserTO.getAttributes().contains(\n+                attrWithInvalidSchemaTO));\n         userTO.removeAttribute(attrWithInvalidSchemaTO);\n \n         userTO.setId(newUserTO.getId());"}]}