{"sha":"3272f8bd60a97678bd73f51111d8e033f34f3169","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjMyNzJmOGJkNjBhOTc2NzhiZDczZjUxMTExZDhlMDMzZjM0ZjMxNjk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-03-22T17:05:41Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-03-22T17:05:41Z"},"message":"[SYNCOPE-343] Introduced a dedicated handler for (possibly empty) string collections\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1459902 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1c48cd64e759085075ee463ce4373761e86e042d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1c48cd64e759085075ee463ce4373761e86e042d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3272f8bd60a97678bd73f51111d8e033f34f3169","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3272f8bd60a97678bd73f51111d8e033f34f3169","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3272f8bd60a97678bd73f51111d8e033f34f3169","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3272f8bd60a97678bd73f51111d8e033f34f3169/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0438111af1088172eeb05c61d571dae2b80406b1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0438111af1088172eeb05c61d571dae2b80406b1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0438111af1088172eeb05c61d571dae2b80406b1"}],"stats":{"total":247,"additions":112,"deletions":135},"files":[{"sha":"80aba3ebe70cc9d3177fa2ba5192f1c68b6282f9","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ConfigurationServiceProxy.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -22,7 +22,6 @@\n import java.net.URI;\r\n import java.net.URLEncoder;\r\n import java.util.Arrays;\r\n-import java.util.HashSet;\r\n import java.util.List;\r\n import java.util.Set;\r\n import javax.ws.rs.InternalServerErrorException;\r\n@@ -81,16 +80,14 @@ public void update(final String key, final ConfigurationTO configurationTO) {\n \r\n     @Override\r\n     public Set<ValidatorTO> getValidators() {\r\n-        Set<String> response = new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(\r\n-                baseUrl + \"configuration/validators.json\", String[].class)));\r\n-        return CollectionWrapper.wrapValidator(response);\r\n+        return CollectionWrapper.wrapValidators(\r\n+                handlePossiblyEmptyStringCollection(baseUrl + \"configuration/validators.json\"));\r\n     }\r\n \r\n     @Override\r\n     public Set<MailTemplateTO> getMailTemplates() {\r\n-        Set<String> response = new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(\r\n-                baseUrl + \"configuration/mailTemplates.json\", String[].class)));\r\n-        return CollectionWrapper.wrapMailTemplates(response);\r\n+        return CollectionWrapper.wrapMailTemplates(\r\n+                handlePossiblyEmptyStringCollection(baseUrl + \"configuration/mailTemplates.json\"));\r\n     }\r\n \r\n     @Override\r"},{"sha":"896c0b897e024a1e879a6a109806e414818be3ed","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/PolicyServiceProxy.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -20,7 +20,7 @@\n \r\n import java.net.URI;\r\n import java.util.Arrays;\r\n-import java.util.HashSet;\r\n+import java.util.Collections;\r\n import java.util.List;\r\n import java.util.Set;\r\n import javax.ws.rs.NotFoundException;\r\n@@ -137,16 +137,15 @@ private String typeToUrl(final PolicyType type) {\n     }\r\n \r\n     @Override\r\n-    public Set<CorrelationRuleClassTO> getCorrelationRuleClasses(final PolicyType type) {\r\n-        Set<CorrelationRuleClassTO> result = null;\r\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\r\n+    public Set<CorrelationRuleClassTO> getSyncCorrelationRuleClasses(final PolicyType type) {\r\n+        Set<CorrelationRuleClassTO> result = Collections.<CorrelationRuleClassTO>emptySet();\r\n \r\n         switch (type) {\r\n             case SYNC:\r\n             case GLOBAL_SYNC:\r\n-                final Set<String> classes = new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(\r\n-                        baseUrl + \"policy/correlationRuleClasses.json\", String[].class)));\r\n-\r\n-                result = CollectionWrapper.wrapCorrelationRuleClasses(classes);\r\n+                result = CollectionWrapper.wrapSyncCorrelationRuleClasses(\r\n+                        handlePossiblyEmptyStringCollection(baseUrl + \"policy/syncCorrelationRuleClasses.json\"));\r\n                 break;\r\n \r\n             default:\r"},{"sha":"8f2ff677cd4cafccf4abd54c48a7f8b0485132b9","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ReportServiceProxy.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -66,9 +66,8 @@ public List<ReportTO> list(final int page, final int size) {\n \r\n     @Override\r\n     public ReportletConfClasses getReportletConfClasses() {\r\n-        List<String> confClasses = Arrays.asList(getRestTemplate().getForObject(\r\n-                baseUrl + \"report/reportletConfClasses.json\", String[].class));\r\n-        return new ReportletConfClasses(confClasses);\r\n+        return new ReportletConfClasses(\r\n+                handlePossiblyEmptyStringCollection(baseUrl + \"report/reportletConfClasses.json\"));\r\n     }\r\n \r\n     @Override\r"},{"sha":"ed042b45d0a76d0f3f079ad22bf9c16b21135d3d","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ResourceServiceProxy.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FResourceServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FResourceServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FResourceServiceProxy.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -22,7 +22,6 @@\n import java.net.URI;\r\n import java.net.URLEncoder;\r\n import java.util.Arrays;\r\n-import java.util.HashSet;\r\n import java.util.List;\r\n import java.util.Set;\r\n \r\n@@ -82,10 +81,8 @@ public ResourceTO read(final String resourceName) {\n \r\n     @Override\r\n     public Set<PropagationActionClassTO> getPropagationActionsClasses() {\r\n-        Set<String> classes = new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(\r\n-                baseUrl + \"resource/propagationActionsClasses.json\", String[].class)));\r\n-\r\n-        return CollectionWrapper.wrapPropagationActionClasses(classes);\r\n+        return CollectionWrapper.wrapPropagationActionClasses(\r\n+                handlePossiblyEmptyStringCollection(baseUrl + \"resource/propagationActionsClasses.json\"));\r\n     }\r\n \r\n     @Override\r"},{"sha":"b904882625c2ac2e33eaf9350f81429ac7c1eaff","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/SchemaServiceProxy.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -65,7 +65,6 @@ public <T extends AbstractSchemaTO> Response create(final AttributableType kind,\n \r\n     @Override\r\n     public void delete(final AttributableType kind, final SchemaType type, final String schemaName) {\r\n-\r\n         getRestTemplate().getForObject(baseUrl + type.toSpringURL() + \"/{kind}/delete/{name}.json\", getTOClass(type),\r\n                 kind, schemaName);\r\n     }\r"},{"sha":"6a049902aa494a916bc80eaf63492bbe7339fc96","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/SpringServiceProxy.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringServiceProxy.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.client.services.proxy;\r\n \r\n import java.io.IOException;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n import javax.ws.rs.InternalServerErrorException;\r\n import javax.ws.rs.core.Response;\r\n import org.apache.http.HttpEntity;\r\n@@ -87,4 +89,19 @@ protected Response handleStream(final String url) {\n             throw new InternalServerErrorException(e);\r\n         }\r\n     }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    protected Collection<String> handlePossiblyEmptyStringCollection(final String url) {\r\n+        Collection<String> result = Collections.<String>emptySet();\r\n+\r\n+        final Object object = getRestTemplate().getForObject(url, Object.class);\r\n+        if (object instanceof String) {\r\n+            String string = (String) object;\r\n+            result = Collections.singleton(string);\r\n+        } else if (object instanceof Collection) {\r\n+            result = (Collection<String>) object;\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n }\r"},{"sha":"1a9cf55011bd079cbab8ea21144928ff6e31b5f4","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/TaskServiceProxy.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -21,7 +21,6 @@\n import java.io.IOException;\r\n import java.net.URI;\r\n import java.util.Arrays;\r\n-import java.util.HashSet;\r\n import java.util.List;\r\n import java.util.Set;\r\n import javax.ws.rs.core.Response;\r\n@@ -106,18 +105,14 @@ public TaskExecTO execute(final Long taskId, final boolean dryRun) {\n \r\n     @Override\r\n     public Set<JobClassTO> getJobClasses() {\r\n-        Set<String> classes = new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(\r\n-                baseUrl + \"task/jobClasses.json\", String[].class)));\r\n-\r\n-        return CollectionWrapper.wrapJobClasses(classes);\r\n+        return CollectionWrapper.wrapJobClasses(\r\n+                handlePossiblyEmptyStringCollection(baseUrl + \"task/jobClasses.json\"));\r\n     }\r\n \r\n     @Override\r\n     public Set<SyncActionClassTO> getSyncActionsClasses() {\r\n-        Set<String> classes = new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(\r\n-                baseUrl + \"task/syncActionsClasses.json\", String[].class)));\r\n-\r\n-        return CollectionWrapper.wrapSyncActionClasses(classes);\r\n+        return CollectionWrapper.wrapSyncActionClasses(\r\n+                handlePossiblyEmptyStringCollection(baseUrl + \"task/syncActionsClasses.json\"));\r\n     }\r\n \r\n     @Override\r"},{"sha":"81ff85e4c192378609d070282be4d3165a940ed5","filename":"common/src/main/java/org/apache/syncope/common/services/PolicyService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -101,6 +101,6 @@ <T extends PolicyTO> void update(@PathParam(\"type\") PolicyType type, @PathParam(\n      * @return Returns correlation rules java classes.\r\n      */\r\n     @GET\r\n-    @Path(\"correlationRuleClasses\")\r\n-    Set<CorrelationRuleClassTO> getCorrelationRuleClasses(@PathParam(\"type\") PolicyType type);\r\n+    @Path(\"syncCorrelationRuleClasses\")\r\n+    Set<CorrelationRuleClassTO> getSyncCorrelationRuleClasses(@PathParam(\"type\") PolicyType type);\r\n }\r"},{"sha":"cde9d925b455b8d1ea2ed375b6e1ca5bde70681f","filename":"common/src/main/java/org/apache/syncope/common/util/CollectionWrapper.java","status":"modified","additions":44,"deletions":71,"changes":115,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -19,11 +19,11 @@\n package org.apache.syncope.common.util;\r\n \r\n import java.util.ArrayList;\r\n+import java.util.Collection;\r\n import java.util.HashSet;\r\n import java.util.List;\r\n import java.util.Set;\r\n import org.apache.syncope.common.to.CorrelationRuleClassTO;\r\n-\r\n import org.apache.syncope.common.to.EntitlementTO;\r\n import org.apache.syncope.common.to.JobClassTO;\r\n import org.apache.syncope.common.to.LoggerTO;\r\n@@ -38,85 +38,75 @@\n public final class CollectionWrapper {\r\n \r\n     private CollectionWrapper() {\r\n+        // empty constructor for static utility class\r\n     }\r\n \r\n-    public static Set<EntitlementTO> wrap(final Set<String> collection) {\r\n-        Set<EntitlementTO> respons = new HashSet<EntitlementTO>();\r\n-        for (String e : collection) {\r\n-            respons.add(EntitlementTO.instance(e));\r\n-        }\r\n-        return respons;\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public static List<String> wrapStrings(final ModelAndView modelAndView) {\r\n+        return (List<String>) modelAndView.getModel().values().iterator().next();\r\n     }\r\n \r\n-    public static List<EntitlementTO> wrap(final List<String> collection) {\r\n-        List<EntitlementTO> respons = new ArrayList<EntitlementTO>();\r\n+    public static Set<EntitlementTO> wrap(final Collection<String> collection) {\r\n+        Set<EntitlementTO> respons = new HashSet<EntitlementTO>();\r\n         for (String e : collection) {\r\n             respons.add(EntitlementTO.instance(e));\r\n         }\r\n         return respons;\r\n     }\r\n \r\n-    public static Set<String> unwrap(final Set<EntitlementTO> collection) {\r\n+    public static Set<String> unwrap(final Collection<EntitlementTO> collection) {\r\n         Set<String> respons = new HashSet<String>();\r\n         for (EntitlementTO e : collection) {\r\n             respons.add(e.getName());\r\n         }\r\n         return respons;\r\n     }\r\n \r\n-    public static List<String> unwrap(final List<EntitlementTO> collection) {\r\n-        List<String> respons = new ArrayList<String>();\r\n-        for (EntitlementTO e : collection) {\r\n-            respons.add(e.getName());\r\n-        }\r\n-        return respons;\r\n-    }\r\n-\r\n-    public static Set<MailTemplateTO> wrapMailTemplates(final ModelAndView mailTemplates) {\r\n-        @SuppressWarnings(\"unchecked\")\r\n-        Set<String> collection = (Set<String>) mailTemplates.getModel().values().iterator().next();\r\n-        return wrapMailTemplates(collection);\r\n-    }\r\n-\r\n-    public static Set<MailTemplateTO> wrapMailTemplates(final Set<String> collection) {\r\n+    public static Set<MailTemplateTO> wrapMailTemplates(final Collection<String> collection) {\r\n         Set<MailTemplateTO> respons = new HashSet<MailTemplateTO>();\r\n         for (String e : collection) {\r\n             respons.add(MailTemplateTO.instance(e));\r\n         }\r\n         return respons;\r\n     }\r\n \r\n-    public static Set<ValidatorTO> wrapValidator(final ModelAndView validators) {\r\n-        @SuppressWarnings(\"unchecked\")\r\n-        Set<String> collection = (Set<String>) validators.getModel().values().iterator().next();\r\n-        return wrapValidator(collection);\r\n-    }\r\n-\r\n-    public static List<String> unwrapValidator(final List<ValidatorTO> collection) {\r\n+    public static List<String> unwrapMailTemplates(final Collection<MailTemplateTO> collection) {\r\n         List<String> respons = new ArrayList<String>();\r\n-        for (ValidatorTO e : collection) {\r\n+        for (MailTemplateTO e : collection) {\r\n             respons.add(e.getName());\r\n         }\r\n         return respons;\r\n     }\r\n \r\n-    public static List<String> unwrapMailTemplates(final List<MailTemplateTO> collection) {\r\n+    public static Set<ValidatorTO> wrapValidators(final Collection<String> validators) {\r\n+        Set<ValidatorTO> respons = new HashSet<ValidatorTO>();\r\n+        for (String validator : validators) {\r\n+            respons.add(ValidatorTO.instance(validator));\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static List<String> unwrapValidator(final Collection<ValidatorTO> collection) {\r\n         List<String> respons = new ArrayList<String>();\r\n-        for (MailTemplateTO e : collection) {\r\n+        for (ValidatorTO e : collection) {\r\n             respons.add(e.getName());\r\n         }\r\n         return respons;\r\n     }\r\n \r\n-    public static Set<ValidatorTO> wrapValidator(final Set<String> collection) {\r\n-        Set<ValidatorTO> respons = new HashSet<ValidatorTO>();\r\n-        for (String e : collection) {\r\n-            respons.add(ValidatorTO.instance(e));\r\n+    public static List<AuditLoggerName> wrapLogger(final Collection<LoggerTO> logger) {\r\n+        List<AuditLoggerName> respons = new ArrayList<AuditLoggerName>();\r\n+        for (LoggerTO l : logger) {\r\n+            try {\r\n+                respons.add(AuditLoggerName.fromLoggerName(l.getName()));\r\n+            } catch (Exception e) {\r\n+                //TODO log event\r\n+            }\r\n         }\r\n         return respons;\r\n     }\r\n \r\n-    public static List<LoggerTO> unwrapLogger(List<AuditLoggerName> auditNames) {\r\n+    public static List<LoggerTO> unwrapLogger(final Collection<AuditLoggerName> auditNames) {\r\n         List<LoggerTO> respons = new ArrayList<LoggerTO>();\r\n         for (AuditLoggerName l : auditNames) {\r\n             LoggerTO loggerTO = new LoggerTO();\r\n@@ -127,84 +117,67 @@ public static List<LoggerTO> unwrapLogger(List<AuditLoggerName> auditNames) {\n         return respons;\r\n     }\r\n \r\n-    public static Set<JobClassTO> wrapJobClasses(Set<String> classes) {\r\n+    public static Set<JobClassTO> wrapJobClasses(final Collection<String> classes) {\r\n         Set<JobClassTO> respons = new HashSet<JobClassTO>();\r\n         for (String cl : classes) {\r\n             respons.add(JobClassTO.instance(cl));\r\n         }\r\n         return respons;\r\n     }\r\n \r\n-    public static Set<SyncActionClassTO> wrapSyncActionClasses(Set<String> classes) {\r\n-        Set<SyncActionClassTO> respons = new HashSet<SyncActionClassTO>();\r\n-        for (String cl : classes) {\r\n-            respons.add(SyncActionClassTO.instance(cl));\r\n-        }\r\n-        return respons;\r\n-    }\r\n-\r\n-    public static List<AuditLoggerName> wrapLogger(List<LoggerTO> logger) {\r\n-        List<AuditLoggerName> respons = new ArrayList<AuditLoggerName>();\r\n-        for (LoggerTO l : logger) {\r\n-            try {\r\n-                respons.add(AuditLoggerName.fromLoggerName(l.getName()));\r\n-            } catch (Exception e) {\r\n-                //TODO log event\r\n-            }\r\n+    public static List<String> unwrapJobClasses(final Collection<JobClassTO> jobClasses) {\r\n+        List<String> respons = new ArrayList<String>();\r\n+        for (JobClassTO e : jobClasses) {\r\n+            respons.add(e.getName());\r\n         }\r\n         return respons;\r\n     }\r\n \r\n-    public static List<String> unwrapJobClasses(List<JobClassTO> jobClasses) {\r\n-        List<String> respons = new ArrayList<String>();\r\n-        for (JobClassTO e : jobClasses) {\r\n-            respons.add(e.getName());\r\n+    public static Set<SyncActionClassTO> wrapSyncActionClasses(final Collection<String> classes) {\r\n+        Set<SyncActionClassTO> respons = new HashSet<SyncActionClassTO>();\r\n+        for (String cl : classes) {\r\n+            respons.add(SyncActionClassTO.instance(cl));\r\n         }\r\n         return respons;\r\n     }\r\n \r\n-    public static List<String> unwrapSyncActionClasses(List<SyncActionClassTO> actions) {\r\n+    public static List<String> unwrapSyncActionClasses(final Collection<SyncActionClassTO> actions) {\r\n         List<String> respons = new ArrayList<String>();\r\n         for (SyncActionClassTO e : actions) {\r\n             respons.add(e.getName());\r\n         }\r\n         return respons;\r\n     }\r\n \r\n-    public static Set<PropagationActionClassTO> wrapPropagationActionClasses(Set<String> classes) {\r\n+    public static Set<PropagationActionClassTO> wrapPropagationActionClasses(final Collection<String> classes) {\r\n         Set<PropagationActionClassTO> respons = new HashSet<PropagationActionClassTO>();\r\n         for (String cl : classes) {\r\n             respons.add(PropagationActionClassTO.instance(cl));\r\n         }\r\n         return respons;\r\n     }\r\n \r\n-    public static List<String> unwrapPropagationActionClasses(Set<PropagationActionClassTO> actions) {\r\n+    public static List<String> unwrapPropagationActionClasses(final Collection<PropagationActionClassTO> actions) {\r\n         List<String> respons = new ArrayList<String>();\r\n         for (PropagationActionClassTO e : actions) {\r\n             respons.add(e.getName());\r\n         }\r\n         return respons;\r\n     }\r\n \r\n-    public static Set<CorrelationRuleClassTO> wrapCorrelationRuleClasses(Set<String> classes) {\r\n+    public static Set<CorrelationRuleClassTO> wrapSyncCorrelationRuleClasses(final Collection<String> classes) {\r\n         Set<CorrelationRuleClassTO> respons = new HashSet<CorrelationRuleClassTO>();\r\n         for (String cl : classes) {\r\n             respons.add(CorrelationRuleClassTO.instance(cl));\r\n         }\r\n         return respons;\r\n     }\r\n \r\n-    public static List<String> unwrapCorrelationRuleClasses(Set<CorrelationRuleClassTO> actions) {\r\n+    public static List<String> unwrapSyncCorrelationRuleClasses(final Collection<CorrelationRuleClassTO> actions) {\r\n         List<String> respons = new ArrayList<String>();\r\n         for (CorrelationRuleClassTO e : actions) {\r\n             respons.add(e.getName());\r\n         }\r\n         return respons;\r\n     }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public static List<String> wrapStrings(final ModelAndView modelAndView) {\r\n-        return (List<String>) modelAndView.getModel().values().iterator().next();\r\n-    }\r\n }\r"},{"sha":"8c46ac8c7719a654c1fcd5bd801960d2e5ff499e","filename":"console/src/main/java/org/apache/syncope/console/rest/AuthRestClient.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAuthRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAuthRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAuthRestClient.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -22,7 +22,6 @@\n import java.util.List;\n \n import org.apache.syncope.common.services.EntitlementService;\n-import org.apache.syncope.common.to.EntitlementTO;\n import org.apache.syncope.common.util.CollectionWrapper;\n import org.springframework.stereotype.Component;\n \n@@ -40,9 +39,8 @@ public class AuthRestClient extends BaseRestClient {\n      * @return List<String>\n      */\n     public List<String> getAllEntitlements() {\n-        List<EntitlementTO> entitlemens = new ArrayList<EntitlementTO>(getService(EntitlementService.class)\n-                .getAllEntitlements());\n-        return CollectionWrapper.unwrap(entitlemens);\n+        return new ArrayList<String>(\n+                CollectionWrapper.unwrap(getService(EntitlementService.class).getAllEntitlements()));\n     }\n \n     /**\n@@ -51,8 +49,7 @@ public List<String> getAllEntitlements() {\n      * @return List<String>\n      */\n     public List<String> getOwnedEntitlements() {\n-        List<EntitlementTO> entitlemens = new ArrayList<EntitlementTO>(getService(EntitlementService.class)\n-                .getMyEntitlements());\n-        return CollectionWrapper.unwrap(entitlemens);\n+        return new ArrayList<String>(\n+                CollectionWrapper.unwrap(getService(EntitlementService.class).getMyEntitlements()));\n     }\n }"},{"sha":"4407ac266583fc4b8b16f173d26b01ee0259a576","filename":"console/src/main/java/org/apache/syncope/console/rest/PolicyRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -89,8 +89,8 @@ public List<String> getCorrelationRuleClasses() {\n         List<String> rules = null;\n \n         try {\n-            rules = CollectionWrapper.unwrapCorrelationRuleClasses(\n-                    getService(PolicyService.class).getCorrelationRuleClasses(PolicyType.SYNC));\n+            rules = CollectionWrapper.unwrapSyncCorrelationRuleClasses(\n+                    getService(PolicyService.class).getSyncCorrelationRuleClasses(PolicyType.SYNC));\n         } catch (Exception e) {\n             LOG.error(\"While getting all correlation rule classes\", e);\n         }"},{"sha":"c9e11bd9218521da2127aa41be4207f2d6ac1095","filename":"core/src/main/java/org/apache/syncope/core/init/ImplementationClassNamesLoader.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.core.report.ReportJob;\n import org.apache.syncope.core.report.Reportlet;\n import org.apache.syncope.core.sync.SyncActions;\n-import org.apache.syncope.core.sync.SyncRule;\n+import org.apache.syncope.core.sync.SyncCorrelationRule;\n import org.apache.syncope.core.sync.impl.SyncJob;\n import org.quartz.Job;\n import org.slf4j.Logger;\n@@ -103,7 +103,7 @@ public void load() {\n                         classNames.get(Type.SYNC_ACTIONS).add(metadata.getClassName());\n                     }\n \n-                    if (interfaces.contains(SyncRule.class) && !metadata.isAbstract()) {\n+                    if (interfaces.contains(SyncCorrelationRule.class) && !metadata.isAbstract()) {\n                         classNames.get(Type.SYNC_CORRELATION_RULES).add(metadata.getClassName());\n                     }\n "},{"sha":"9b0fb8ee30250ab7b65808c4c63bf1476c03e548","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -237,8 +237,8 @@ public PolicyTO delete(@PathVariable(\"id\") final Long id) {\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/correlationRuleClasses\")\n-    public ModelAndView getCorrelationRuleClasses() {\n+    @RequestMapping(method = RequestMethod.GET, value = \"/syncCorrelationRuleClasses\")\n+    public ModelAndView getSyncCorrelationRuleClasses() {\n         final Set<String> correlationRules =\n                 classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.SYNC_CORRELATION_RULES);\n "},{"sha":"3066c234d7296092d84e5de2d40364684d6e882f","filename":"core/src/main/java/org/apache/syncope/core/services/ConfigurationServiceImpl.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -79,13 +79,17 @@ public void delete(final String key) {\n     }\r\n \r\n     @Override\r\n+    @SuppressWarnings(\"unchecked\")\r\n     public Set<MailTemplateTO> getMailTemplates() {\r\n-        return CollectionWrapper.wrapMailTemplates(configurationController.getMailTemplates());\r\n+        return CollectionWrapper.wrapMailTemplates(\r\n+                (Set<String>) configurationController.getMailTemplates().getModel().values().iterator().next());\r\n     }\r\n \r\n     @Override\r\n+    @SuppressWarnings(\"unchecked\")\r\n     public Set<ValidatorTO> getValidators() {\r\n-        return CollectionWrapper.wrapValidator(configurationController.getValidators());\r\n+        return CollectionWrapper.wrapValidators(\r\n+                (Set<String>) configurationController.getValidators().getModel().values().iterator().next());\r\n     }\r\n \r\n     @Override\r"},{"sha":"2e62ceb6116e26d22f69404fccd26f10030592bf","filename":"core/src/main/java/org/apache/syncope/core/services/PolicyServiceImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -125,17 +125,17 @@ public void setUriInfo(final UriInfo ui) {\n     }\r\n \r\n     @Override\r\n-    public Set<CorrelationRuleClassTO> getCorrelationRuleClasses(final PolicyType type) {\r\n+    public Set<CorrelationRuleClassTO> getSyncCorrelationRuleClasses(final PolicyType type) {\r\n         Set<CorrelationRuleClassTO> result = null;\r\n \r\n         switch (type) {\r\n             case SYNC:\r\n             case GLOBAL_SYNC:\r\n \r\n                 @SuppressWarnings(\"unchecked\")\r\n-                final Set<String> classes = (Set<String>) policyController.getCorrelationRuleClasses().getModel().\r\n+                final Set<String> classes = (Set<String>) policyController.getSyncCorrelationRuleClasses().getModel().\r\n                         values().iterator().next();\r\n-                result = CollectionWrapper.wrapCorrelationRuleClasses(classes);\r\n+                result = CollectionWrapper.wrapSyncCorrelationRuleClasses(classes);\r\n                 break;\r\n \r\n             default:\r\n@@ -144,4 +144,4 @@ public Set<CorrelationRuleClassTO> getCorrelationRuleClasses(final PolicyType ty\n \r\n         return result;\r\n     }\r\n-}\n\\ No newline at end of file\n+}\r"},{"sha":"c49f5ccfd8d4f9712c8dad43ba41d25315d89c6d","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncCorrelationRule.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncCorrelationRule.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -24,13 +24,13 @@\n /**\n  * Interface for correlation rule to be evaluated during SyncJob execution.\n  */\n-public interface SyncRule {\n+public interface SyncCorrelationRule {\n \n     /**\n      * Return a search condition.\n      *\n      * @param connObj connector object.\n      * @return search condition.\n      */\n-    NodeCond getSearchCond(final ConnectorObject connObj);\n+    NodeCond getSearchCond(ConnectorObject connObj);\n }","previous_filename":"core/src/main/java/org/apache/syncope/core/sync/SyncRule.java"},{"sha":"d43397e761dc051c4cd2475ef5cdc827d3459583","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -72,7 +72,7 @@\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.sync.SyncActions;\n import org.apache.syncope.core.sync.SyncResult;\n-import org.apache.syncope.core.sync.SyncRule;\n+import org.apache.syncope.core.sync.SyncCorrelationRule;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.workflow.WorkflowResult;\n@@ -343,7 +343,7 @@ private List<Long> findByAccountIdItem(final String uid, final AttributableUtil\n     }\n \n     private List<Long> findByCorrelationRule(\n-            final ConnectorObject connObj, final SyncRule rule, final AttributableUtil attrUtil) {\n+            final ConnectorObject connObj, final SyncCorrelationRule rule, final AttributableUtil attrUtil) {\n         return search(rule.getSearchCond(connObj), attrUtil);\n     }\n \n@@ -441,7 +441,7 @@ protected List<Long> findExisting(final String uid, final ConnectorObject connOb\n             syncPolicySpec = syncTask.getResource().getSyncPolicy().<SyncPolicySpec>getSpecification();\n         }\n \n-        SyncRule syncRule = null;\n+        SyncCorrelationRule syncRule = null;\n         List<String> altSearchSchemas = null;\n \n         if (syncPolicySpec != null) {"},{"sha":"4a0a95078f950876521101ee2bed5ba9e7f422e9","filename":"core/src/main/java/org/apache/syncope/core/util/AttributableUtil.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -69,7 +69,7 @@\n import org.apache.syncope.core.persistence.beans.user.USchema;\n import org.apache.syncope.core.persistence.beans.user.UVirAttr;\n import org.apache.syncope.core.persistence.beans.user.UVirSchema;\n-import org.apache.syncope.core.sync.SyncRule;\n+import org.apache.syncope.core.sync.SyncCorrelationRule;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.slf4j.LoggerFactory;\n \n@@ -625,7 +625,7 @@ public List<String> getAltSearchSchemas(final SyncPolicySpec policySpec) {\n         return result;\n     }\n \n-    public SyncRule getCorrelationRule(final SyncPolicySpec policySpec) {\n+    public SyncCorrelationRule getCorrelationRule(final SyncPolicySpec policySpec) {\n \n         String clazz;\n \n@@ -641,11 +641,11 @@ public SyncRule getCorrelationRule(final SyncPolicySpec policySpec) {\n                 clazz = null;\n         }\n \n-        SyncRule res = null;\n+        SyncCorrelationRule res = null;\n \n         if (StringUtils.isNotBlank(clazz)) {\n             try {\n-                res = (SyncRule) Class.forName(clazz).newInstance();\n+                res = (SyncCorrelationRule) Class.forName(clazz).newInstance();\n             } catch (Exception e) {\n                 LOG.error(\"Failure instantiating correlation rule class '{}'\", clazz, e);\n             }"},{"sha":"c0b61d3950d7314e58a7e42578f18b252a60fd1b","filename":"core/src/test/java/org/apache/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -165,7 +165,7 @@ public void delete() {\n \n     @Test\n     public void getCorrelationRules() {\n-        assertEquals(1, policyService.getCorrelationRuleClasses(PolicyType.SYNC).size());\n+        assertEquals(1, policyService.getSyncCorrelationRuleClasses(PolicyType.SYNC).size());\n     }\n \n     private SyncPolicyTO buildSyncPolicyTO() {"},{"sha":"bd00747af03da0874850dc31c2626dfce469cd75","filename":"core/src/test/java/org/apache/syncope/core/sync/TestSyncRule.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3272f8bd60a97678bd73f51111d8e033f34f3169/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FTestSyncRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3272f8bd60a97678bd73f51111d8e033f34f3169/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FTestSyncRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FTestSyncRule.java?ref=3272f8bd60a97678bd73f51111d8e033f34f3169","patch":"@@ -22,7 +22,7 @@\n import org.apache.syncope.common.search.NodeCond;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n \n-public class TestSyncRule implements SyncRule {\n+public class TestSyncRule implements SyncCorrelationRule {\n \n     @Override\n     public NodeCond getSearchCond(ConnectorObject connObj) {"}]}