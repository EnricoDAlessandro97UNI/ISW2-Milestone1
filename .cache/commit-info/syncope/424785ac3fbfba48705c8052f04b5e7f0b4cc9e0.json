{"sha":"424785ac3fbfba48705c8052f04b5e7f0b4cc9e0","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQyNDc4NWFjM2ZiZmJhNDg3MDVjODA1MmYwNGI1ZTdmMGI0Y2M5ZTA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-10-24T15:21:25Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-10-24T15:21:25Z"},"message":"[SYNCOPE-558] Hiding special layour conf params","tree":{"sha":"60116adf229e03463ef22efa6667e212fe51d608","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/60116adf229e03463ef22efa6667e212fe51d608"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/424785ac3fbfba48705c8052f04b5e7f0b4cc9e0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/424785ac3fbfba48705c8052f04b5e7f0b4cc9e0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/424785ac3fbfba48705c8052f04b5e7f0b4cc9e0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/424785ac3fbfba48705c8052f04b5e7f0b4cc9e0/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0a768e4f9f95407e1ae9e370deda6789331f4dcb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0a768e4f9f95407e1ae9e370deda6789331f4dcb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0a768e4f9f95407e1ae9e370deda6789331f4dcb"}],"stats":{"total":50,"additions":38,"deletions":12},"files":[{"sha":"f18e2bdfe7808269245d7844f205ddabb1005360","filename":"console/src/main/java/org/apache/syncope/console/commons/AttrLayoutType.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/424785ac3fbfba48705c8052f04b5e7f0b4cc9e0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FAttrLayoutType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/424785ac3fbfba48705c8052f04b5e7f0b4cc9e0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FAttrLayoutType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FAttrLayoutType.java?ref=424785ac3fbfba48705c8052f04b5e7f0b4cc9e0","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.console.commons;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import org.apache.syncope.common.types.AttributableType;\n \n public enum AttrLayoutType {\n@@ -53,6 +55,15 @@ public AttributableType getAttrType() {\n         return attrType;\n     }\n \n+    public static List<String> confKeys() {\n+        List<String> confKeys = new ArrayList<String>();\n+        for (AttrLayoutType value : values()) {\n+            confKeys.add(value.getConfKey());\n+        }\n+\n+        return confKeys;\n+    }\n+\n     public static AttrLayoutType valueOf(final Mode mode, final AttributableType attrType) {\n         AttrLayoutType result = null;\n         if (mode == Mode.ADMIN) {"},{"sha":"da97a450ed4df90770993c9ab8ac1a520de6fab6","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AttributesPanel.java","status":"modified","additions":3,"deletions":12,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/424785ac3fbfba48705c8052f04b5e7f0b4cc9e0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/424785ac3fbfba48705c8052f04b5e7f0b4cc9e0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java?ref=424785ac3fbfba48705c8052f04b5e7f0b4cc9e0","patch":"@@ -145,15 +145,6 @@ protected void populateItem(final ListItem<AttributeTO> item) {\n         );\n     }\n \n-    private void filter(final List<SchemaTO> schemaTOs, final Collection<String> allowed) {\n-        for (ListIterator<SchemaTO> itor = schemaTOs.listIterator(); itor.hasNext();) {\n-            SchemaTO schema = itor.next();\n-            if (!allowed.contains(schema.getName())) {\n-                itor.remove();\n-            }\n-        }\n-    }\n-\n     private void setSchemas() {\n         AttributeTO attrLayout = null;\n         List<SchemaTO> schemaTOs;\n@@ -172,7 +163,7 @@ private void setSchemas() {\n                     allowed.addAll(roleRestClient.read(roleTO.getParent()).getRAttrTemplates());\n                 }\n             }\n-            filter(schemaTOs, allowed);\n+            schemaRestClient.filter(schemaTOs, allowed, true);\n         } else if (entityTO instanceof UserTO) {\n             attrLayout = confRestClient.readAttrLayout(AttrLayoutType.valueOf(mode, AttributableType.USER));\n             schemaTOs = schemaRestClient.getSchemas(AttributableType.USER);\n@@ -181,7 +172,7 @@ private void setSchemas() {\n             schemaTOs = schemaRestClient.getSchemas(AttributableType.MEMBERSHIP);\n             Set<String> allowed = new HashSet<String>(\n                     roleRestClient.read(((MembershipTO) entityTO).getRoleId()).getMAttrTemplates());\n-            filter(schemaTOs, allowed);\n+            schemaRestClient.filter(schemaTOs, allowed, true);\n         } else {\n             schemas = new TreeMap<String, SchemaTO>();\n             schemaTOs = schemaRestClient.getSchemas(AttributableType.CONFIGURATION);\n@@ -199,7 +190,7 @@ private void setSchemas() {\n \n         if (attrLayout != null && mode != Mode.TEMPLATE && !(entityTO instanceof ConfTO)) {\n             // 1. remove attributes not selected for display\n-            filter(schemaTOs, attrLayout.getValues());\n+            schemaRestClient.filter(schemaTOs, attrLayout.getValues(), true);\n             // 2. sort remainig attributes according to configuration, e.g. attrLayout\n             final Map<String, Integer> attrLayoutMap = new HashMap<String, Integer>(attrLayout.getValues().size());\n             for (int i = 0; i < attrLayout.getValues().size(); i++) {"},{"sha":"9eebf0e4ce170e5ab19eb63a8755f6762da6b069","filename":"console/src/main/java/org/apache/syncope/console/rest/SchemaRestClient.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/424785ac3fbfba48705c8052f04b5e7f0b4cc9e0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/424785ac3fbfba48705c8052f04b5e7f0b4cc9e0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java?ref=424785ac3fbfba48705c8052f04b5e7f0b4cc9e0","patch":"@@ -19,8 +19,10 @@\n package org.apache.syncope.console.rest;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.ListIterator;\n \n import org.apache.syncope.common.services.ConfigurationService;\n import org.apache.syncope.common.services.SchemaService;\n@@ -33,6 +35,7 @@\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.util.CollectionWrapper;\n import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.console.commons.AttrLayoutType;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -43,6 +46,23 @@ public class SchemaRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -2479730152700312373L;\n \n+    public void filter(\n+            final List<? extends AbstractSchemaTO> schemaTOs, final Collection<String> allowed, final boolean exclude) {\n+\n+        for (ListIterator<? extends AbstractSchemaTO> itor = schemaTOs.listIterator(); itor.hasNext();) {\n+            AbstractSchemaTO schema = itor.next();\n+            if (exclude) {\n+                if (!allowed.contains(schema.getName())) {\n+                    itor.remove();\n+                }\n+            } else {\n+                if (allowed.contains(schema.getName())) {\n+                    itor.remove();\n+                }\n+            }\n+        }\n+    }\n+\n     public List<? extends AbstractSchemaTO> getSchemas(final AttributableType attrType, final SchemaType schemaType) {\n         List<? extends AbstractSchemaTO> schemas = Collections.emptyList();\n \n@@ -52,6 +72,10 @@ public List<? extends AbstractSchemaTO> getSchemas(final AttributableType attrTy\n             LOG.error(\"While getting all schemas for {} and {}\", attrType, schemaType, e);\n         }\n \n+        if (attrType == AttributableType.CONFIGURATION) {\n+            filter(schemas, AttrLayoutType.confKeys(), false);\n+        }\n+\n         return schemas;\n     }\n "}]}