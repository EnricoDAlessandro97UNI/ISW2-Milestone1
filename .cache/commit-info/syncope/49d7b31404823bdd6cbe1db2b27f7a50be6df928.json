{"sha":"49d7b31404823bdd6cbe1db2b27f7a50be6df928","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ5ZDdiMzE0MDQ4MjNiZGQ2Y2JlMWRiMmIyN2Y3YTUwYmU2ZGY5Mjg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-22T11:38:32Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-22T11:38:32Z"},"message":"[SYNCOPE-186] Some preliminary refactoring and cleaning\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1400840 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bc91114a2c42391abd86f09304df094ec2132498","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/bc91114a2c42391abd86f09304df094ec2132498"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/49d7b31404823bdd6cbe1db2b27f7a50be6df928","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/49d7b31404823bdd6cbe1db2b27f7a50be6df928","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/49d7b31404823bdd6cbe1db2b27f7a50be6df928","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/49d7b31404823bdd6cbe1db2b27f7a50be6df928/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"80420a8e1eab1157f46f924e8a63812472163f65","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/80420a8e1eab1157f46f924e8a63812472163f65","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/80420a8e1eab1157f46f924e8a63812472163f65"}],"stats":{"total":81,"additions":39,"deletions":42},"files":[{"sha":"49654733b9b4473ef13e09934b17eef59ff40ca4","filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationManager.java","status":"modified","additions":38,"deletions":41,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49d7b31404823bdd6cbe1db2b27f7a50be6df928/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49d7b31404823bdd6cbe1db2b27f7a50be6df928/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java?ref=49d7b31404823bdd6cbe1db2b27f7a50be6df928","patch":"@@ -31,6 +31,7 @@\n import org.apache.commons.collections.keyvalue.DefaultMapEntry;\n import org.apache.commons.jexl2.JexlContext;\n import org.apache.commons.jexl2.MapContext;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.client.mod.AttributeMod;\n import org.apache.syncope.client.to.AttributeTO;\n import org.apache.syncope.core.init.ConnInstanceLoader;\n@@ -74,7 +75,6 @@\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.util.StringUtils;\n \n /**\n  * Manage the data propagation to external resources.\n@@ -334,7 +334,7 @@ public List<PropagationTask> getDeleteTaskIds(final Long userId, final String sy\n      * @param mapping schema mapping for the given attribute\n      * @param user given user\n      * @param password clear-text password\n-     * @return account link + prepare attributes\n+     * @return account link + prepared attribute\n      * @throws ClassNotFoundException if schema type for given mapping does not exists in current class loader\n      */\n     private Map.Entry<String, Attribute> prepareAttribute(final SchemaMapping mapping, final SyncopeUser user,\n@@ -427,12 +427,11 @@ private Map.Entry<String, Set<Attribute>> prepareAttributes(final SyncopeUser us\n         Set<Attribute> attributes = new HashSet<Attribute>();\n         String accountId = null;\n \n-        Map.Entry<String, Attribute> preparedAttribute;\n         for (SchemaMapping mapping : resource.getMappings()) {\n             LOG.debug(\"Processing schema {}\", SchemaMappingUtil.getIntAttrName(mapping));\n \n             try {\n-                preparedAttribute = prepareAttribute(mapping, user, password);\n+                Map.Entry<String, Attribute> preparedAttribute = prepareAttribute(mapping, user, password);\n \n                 if (preparedAttribute.getKey() != null) {\n                     accountId = preparedAttribute.getKey();\n@@ -459,31 +458,32 @@ private Map.Entry<String, Set<Attribute>> prepareAttributes(final SyncopeUser us\n             }\n         }\n \n-        if (!StringUtils.hasText(accountId)) {\n-            // LOG error but avoid to throw exception: leave it to the \n-            //external resource\n+        if (StringUtils.isNotBlank(accountId)) {\n+            // LOG error but avoid to throw exception: leave it to the external resource\n             LOG.error(\"Missing accountId for '{}': \", resource.getName());\n         }\n \n         // Evaluate AccountLink expression\n-        final JexlContext jexlContext = new MapContext();\n-        jexlUtil.addFieldsToContext(user, jexlContext);\n-        jexlUtil.addAttrsToContext(user.getAttributes(), jexlContext);\n-        jexlUtil.addDerAttrsToContext(user.getDerivedAttributes(), user.getAttributes(), jexlContext);\n-        String evalAccountLink = jexlUtil.evaluate(resource.getAccountLink(), jexlContext);\n-\n-        // AccountId must be propagated. It could be a simple attribute for\n-        // the target resource or the key (depending on the accountLink)\n-        if (evalAccountLink.isEmpty()) {\n-            // add accountId as __NAME__ attribute ...\n+        String evalAccountLink = null;\n+        if (StringUtils.isNotBlank(resource.getAccountLink())) {\n+            final JexlContext jexlContext = new MapContext();\n+            jexlUtil.addFieldsToContext(user, jexlContext);\n+            jexlUtil.addAttrsToContext(user.getAttributes(), jexlContext);\n+            jexlUtil.addDerAttrsToContext(user.getDerivedAttributes(), user.getAttributes(), jexlContext);\n+            evalAccountLink = jexlUtil.evaluate(resource.getAccountLink(), jexlContext);\n+        }\n+\n+        // If AccountLink evaluates to an empty string, just use the provided AccountId as Name(),\n+        // otherwise evaluated AccountLink expression is taken as Name().\n+        if (StringUtils.isBlank(evalAccountLink)) {\n+            // add AccountId as __NAME__ attribute ...\n             LOG.debug(\"Add AccountId [{}] as __NAME__\", accountId);\n             attributes.add(new Name(accountId));\n         } else {\n             LOG.debug(\"Add AccountLink [{}] as __NAME__\", evalAccountLink);\n             attributes.add(new Name(evalAccountLink));\n \n-            // AccountId not propagated: \n-            // it will be used to set the value for __UID__ attribute\n+            // AccountId not propagated: it will be used to set the value for __UID__ attribute\n             LOG.debug(\"AccountId will be used just as __UID__ attribute\");\n         }\n \n@@ -513,33 +513,30 @@ protected List<PropagationTask> provision(final SyncopeUser user, final String p\n         propByRes.purge();\n         LOG.debug(\"After purge: {}\", propByRes);\n \n-        List<PropagationTask> tasks = new ArrayList<PropagationTask>();\n+        final List<PropagationTask> tasks = new ArrayList<PropagationTask>();\n \n+        final List<ExternalResource> allResByPriority = resourceDAO.findAllByPriority();\n         for (PropagationOperation operation : PropagationOperation.values()) {\n-            List<ExternalResource> resourcesByPriority = new ArrayList<ExternalResource>();\n-            for (ExternalResource resource : resourceDAO.findAllByPriority()) {\n+            for (ExternalResource resource : allResByPriority) {\n                 if (propByRes.get(operation).contains(resource.getName())) {\n-                    resourcesByPriority.add(resource);\n-                }\n-            }\n-\n-            for (ExternalResource resource : resourcesByPriority) {\n-                PropagationTask task = new PropagationTask();\n-                task.setResource(resource);\n-                if (!deleteOnResource) {\n-                    task.setSyncopeUser(user);\n-                }\n-                task.setPropagationOperation(operation);\n-                task.setPropagationMode(resource.getPropagationMode());\n-                task.setOldAccountId(propByRes.getOldAccountId(resource.getName()));\n+                    PropagationTask task = new PropagationTask();\n+                    task.setResource(resource);\n+                    if (!deleteOnResource) {\n+                        task.setSyncopeUser(user);\n+                    }\n+                    task.setPropagationOperation(operation);\n+                    task.setPropagationMode(resource.getPropagationMode());\n+                    task.setOldAccountId(propByRes.getOldAccountId(resource.getName()));\n \n-                Map.Entry<String, Set<Attribute>> preparedAttrs = prepareAttributes(user, password, enable, resource);\n-                task.setAccountId(preparedAttrs.getKey());\n-                task.setAttributes(preparedAttrs.getValue());\n+                    Map.Entry<String, Set<Attribute>> preparedAttrs =\n+                            prepareAttributes(user, password, enable, resource);\n+                    task.setAccountId(preparedAttrs.getKey());\n+                    task.setAttributes(preparedAttrs.getValue());\n \n-                tasks.add(task);\n+                    tasks.add(task);\n \n-                LOG.debug(\"Execution started for {}\", task);\n+                    LOG.debug(\"Execution started for {}\", task);\n+                }\n             }\n         }\n \n@@ -679,7 +676,7 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n                             // 3. check if:\n                             //      * accountId is not blank;\n                             //      * accountId is not equal to Name.\n-                            if (StringUtils.hasText(accountId)\n+                            if (StringUtils.isNotBlank(accountId)\n                                     && (name == null || !accountId.equals(name.getNameValue()))) {\n \n                                 // 3.a retrieve uid"},{"sha":"012291d42af50460214e1b29f3f983fc7d340485","filename":"core/src/test/java/org/apache/syncope/core/notification/NotificationTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49d7b31404823bdd6cbe1db2b27f7a50be6df928/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49d7b31404823bdd6cbe1db2b27f7a50be6df928/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java?ref=49d7b31404823bdd6cbe1db2b27f7a50be6df928","patch":"@@ -31,7 +31,7 @@\n import javax.mail.Message;\n import javax.mail.Session;\n import javax.mail.Store;\n-import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.client.search.MembershipCond;\n import org.apache.syncope.client.search.NodeCond;\n import org.apache.syncope.client.to.MembershipTO;"}]}