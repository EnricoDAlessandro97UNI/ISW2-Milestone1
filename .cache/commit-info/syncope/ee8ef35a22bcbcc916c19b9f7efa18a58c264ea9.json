{"sha":"ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmVlOGVmMzVhMjJiY2JjYzkxNmMxOWI5ZjdlZmExOGE1OGMyNjRlYTk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-11-04T14:08:06Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-11-04T15:32:03Z"},"message":"[SYNCOPE-1508] PullActions and PropagationActions extended","tree":{"sha":"4afbcb23882050c3b696607b8ffe411432c9d08d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4afbcb23882050c3b696607b8ffe411432c9d08d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7e1267ff1d2b80a063112f6b62fd98361d1b0c54","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7e1267ff1d2b80a063112f6b62fd98361d1b0c54","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7e1267ff1d2b80a063112f6b62fd98361d1b0c54"}],"stats":{"total":256,"additions":211,"deletions":45},"files":[{"sha":"6f58ce0ae01b7992520599284263e770186f5d84","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPropagationActions.groovy","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPropagationActions.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPropagationActions.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPropagationActions.groovy?ref=ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9","patch":"@@ -18,6 +18,10 @@\n  * under the License.\n  */\n import groovy.transform.CompileStatic\n+import java.util.Collections\n+import java.util.Set\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions\n@@ -26,6 +30,16 @@ import org.identityconnectors.framework.common.objects.ConnectorObject\n @CompileStatic\n class MyPropagationActions implements PropagationActions {\n   \n+  @Override\n+  Set<String> moreAttrsToGet(PropagationTask task, OrgUnit orgUnit) {\n+    return Collections.emptySet();\n+  }\n+\n+  @Override\n+  Set<String> moreAttrsToGet(PropagationTask task, Provision provision) {\n+    return Collections.emptySet();\n+  }\n+\n   @Override\n   void before(PropagationTask task, ConnectorObject beforeObj) {\n     // do nothing"},{"sha":"9cd64e11189ac59795cadfad47eede706e1d187a","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullActions.groovy","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPullActions.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPullActions.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPullActions.groovy?ref=ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9","patch":"@@ -17,10 +17,14 @@\n  * under the License.\n  */\n import groovy.transform.CompileStatic\n+import java.util.Set\n import org.apache.syncope.common.lib.request.AnyCR\n import org.apache.syncope.common.lib.request.AnyUR\n-import org.apache.syncope.common.lib.to.EntityTO\n+import org.apache.syncope.common.lib.to.LinkedAccountTO\n import org.apache.syncope.common.lib.to.RealmTO\n+import org.apache.syncope.common.lib.to.EntityTO\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningActions\n@@ -32,6 +36,16 @@ import org.quartz.JobExecutionException\n \n @CompileStatic\n class MyPullActions implements PullActions {\n+\n+  @Override\n+  Set<String> moreAttrsToGet(ProvisioningProfile profile, OrgUnit orgUnit) {\n+    return Set.of();\n+  }\n+\n+  @Override\n+  Set<String> moreAttrsToGet(ProvisioningProfile profile, Provision provision) {\n+    return Set.of();\n+  }\n   \n   @Override\n   SyncDelta preprocess(ProvisioningProfile profile, SyncDelta delta) {"},{"sha":"ba2c5227398214cc3d988229859bcfef9d7568bc","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9","patch":"@@ -199,7 +199,9 @@ public ReconStatus status(final ReconQuery query) {\n                     connFactory.getConnector(provision.getResource()),\n                     connObjectKeyItem,\n                     query.getConnObjectKeyValue(),\n-                    provision).\n+                    provision,\n+                    Optional.empty(),\n+                    Optional.empty()).\n                     ifPresent(connObj -> {\n                         status.setOnResource(ConnObjectUtils.getConnObjectTO(connObj.getAttributes()));\n "},{"sha":"51b1bc698a8ab1d82dd8954cf44f91ab96b4f99e","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9","patch":"@@ -332,7 +332,9 @@ public ConnObjectTO readConnObjectByConnObjectKeyValue(\n                 connFactory.getConnector(provision.getResource()),\n                 connObjectKeyItem,\n                 connObjectKeyValue,\n-                provision);\n+                provision,\n+                Optional.empty(),\n+                Optional.empty());\n         if (connObj.isPresent()) {\n             return ConnObjectUtils.getConnObjectTO(connObj.get().getAttributes());\n         }"},{"sha":"9f4c40feb126e3c4ae5f5d438edd1aff98b8056d","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationActions.java","status":"modified","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationActions.java?ref=ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9","patch":"@@ -18,20 +18,67 @@\n  */\n package org.apache.syncope.core.provisioning.api.propagation;\n \n+import java.util.Set;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n \n public interface PropagationActions {\n \n+    /**\n+     * Return additional attributes to include in the result from the underlying connector.\n+     *\n+     * @param task propagation task\n+     * @param orgUnit Realm provisioning information\n+     * @return additional attributes to include in the result from the underlying connector\n+     */\n+    default Set<String> moreAttrsToGet(PropagationTask task, OrgUnit orgUnit) {\n+        return Set.of();\n+    }\n+\n+    /**\n+     * Return additional attributes to include in the result from the underlying connector.\n+     *\n+     * @param task propagation task\n+     * @param provision Any provisioning information\n+     * @return additional attributes to include in the result from the underlying connector\n+     */\n+    default Set<String> moreAttrsToGet(PropagationTask task, Provision provision) {\n+        return Set.of();\n+    }\n+\n+    /**\n+     * Executes logic before actual propagation.\n+     *\n+     * @param task propagation task\n+     * @param beforeObj connector object read before propagation\n+     */\n     default void before(PropagationTask task, ConnectorObject beforeObj) {\n         // do nothing\n     }\n \n+    /**\n+     * Executes logic in case of propagation error.\n+     * This method can throw {@link org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException} to\n+     * ignore the reported error and continue.\n+     *\n+     * @param task propagation task\n+     * @param execution execution result\n+     * @param error propagation error\n+     */\n     default void onError(PropagationTask task, TaskExec execution, Exception error) {\n         // do nothing\n     }\n \n+    /**\n+     * Executes logic after actual propagation.\n+     *\n+     * @param task propagation task\n+     * @param execution execution result\n+     * @param afterObj connector object read after propagation\n+     */\n     default void after(PropagationTask task, TaskExec execution, ConnectorObject afterObj) {\n         // do nothing\n     }"},{"sha":"ae97ff1b34a27701e619d6d4d2309951b1beae88","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullActions.java","status":"modified","additions":26,"deletions":1,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java?ref=ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9","patch":"@@ -18,11 +18,14 @@\n  */\n package org.apache.syncope.core.provisioning.api.pushpull;\n \n+import java.util.Set;\n import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.LinkedAccountTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;\n \n@@ -33,6 +36,28 @@\n  */\n public interface PullActions extends ProvisioningActions {\n \n+    /**\n+     * Return additional attributes to include in the result from the underlying connector.\n+     *\n+     * @param profile profile of the pull being executed.\n+     * @param orgUnit Realm provisioning information\n+     * @return additional attributes to include in the result from the underlying connector\n+     */\n+    default Set<String> moreAttrsToGet(ProvisioningProfile<?, ?> profile, OrgUnit orgUnit) {\n+        return Set.of();\n+    }\n+\n+    /**\n+     * Return additional attributes to include in the result from the underlying connector.\n+     *\n+     * @param profile profile of the pull being executed.\n+     * @param provision Any provisioning information\n+     * @return additional attributes to include in the result from the underlying connector\n+     */\n+    default Set<String> moreAttrsToGet(ProvisioningProfile<?, ?> profile, Provision provision) {\n+        return Set.of();\n+    }\n+\n     /**\n      * Pre-process the pull information received by the underlying connector, before any internal activity occurs.\n      *"},{"sha":"aa7bde019265f72319d0208fe42122b5c8d226aa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":29,"deletions":21,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9","patch":"@@ -295,28 +295,28 @@ protected Uid delete(\n                 switch (task.getAnyTypeKind()) {\n                     case USER:\n                         try {\n-                            resources = userDAO.findAllResourceKeys(task.getEntityKey());\n-                        } catch (Exception e) {\n-                            LOG.error(\"Could not read user {}\", task.getEntityKey(), e);\n-                        }\n-                        break;\n+                        resources = userDAO.findAllResourceKeys(task.getEntityKey());\n+                    } catch (Exception e) {\n+                        LOG.error(\"Could not read user {}\", task.getEntityKey(), e);\n+                    }\n+                    break;\n \n                     case GROUP:\n                         try {\n-                            resources = groupDAO.findAllResourceKeys(task.getEntityKey());\n-                        } catch (Exception e) {\n-                            LOG.error(\"Could not read group {}\", task.getEntityKey(), e);\n-                        }\n-                        break;\n+                        resources = groupDAO.findAllResourceKeys(task.getEntityKey());\n+                    } catch (Exception e) {\n+                        LOG.error(\"Could not read group {}\", task.getEntityKey(), e);\n+                    }\n+                    break;\n \n                     case ANY_OBJECT:\n                     default:\n                         try {\n-                            resources = anyObjectDAO.findAllResourceKeys(task.getEntityKey());\n-                        } catch (Exception e) {\n-                            LOG.error(\"Could not read any object {}\", task.getEntityKey(), e);\n-                        }\n-                        break;\n+                        resources = anyObjectDAO.findAllResourceKeys(task.getEntityKey());\n+                    } catch (Exception e) {\n+                        LOG.error(\"Could not read any object {}\", task.getEntityKey(), e);\n+                    }\n+                    break;\n                 }\n             }\n             if (task.getAnyTypeKind() == null || !resources.contains(task.getResource().getKey())) {\n@@ -394,8 +394,8 @@ public TaskExec execute(final PropagationTaskInfo taskInfo, final PropagationRep\n                 beforeObj = provision == null && orgUnit == null\n                         ? null\n                         : orgUnit == null\n-                                ? getRemoteObject(task, connector, provision, false)\n-                                : getRemoteObject(task, connector, orgUnit, false);\n+                                ? getRemoteObject(task, connector, provision, actions, false)\n+                                : getRemoteObject(task, connector, orgUnit, actions, false);\n             } else if (taskInfo.getBeforeObj().isPresent()) {\n                 beforeObj = taskInfo.getBeforeObj().get();\n             }\n@@ -462,8 +462,8 @@ public TaskExec execute(final PropagationTaskInfo taskInfo, final PropagationRep\n                     afterObj = provision == null && orgUnit == null\n                             ? null\n                             : orgUnit == null\n-                                    ? getRemoteObject(task, connector, provision, true)\n-                                    : getRemoteObject(task, connector, orgUnit, true);\n+                                    ? getRemoteObject(task, connector, provision, actions, true)\n+                                    : getRemoteObject(task, connector, orgUnit, actions, true);\n                 } catch (Exception ignore) {\n                     // ignore exception\n                     LOG.error(\"Error retrieving after object\", ignore);\n@@ -608,20 +608,22 @@ protected boolean hasToBeregistered(final PropagationTask task, final TaskExec e\n      * @param connector connector facade proxy.\n      * @param task current propagation task.\n      * @param provision provision\n+     * @param actions propagation actions\n      * @param latest 'FALSE' to retrieve object using old connObjectKey if not null.\n      * @return remote connector object.\n      */\n     protected ConnectorObject getRemoteObject(\n             final PropagationTask task,\n             final Connector connector,\n             final Provision provision,\n+            final List<PropagationActions> actions,\n             final boolean latest) {\n \n         String connObjectKeyValue = latest || task.getOldConnObjectKey() == null\n                 ? task.getConnObjectKey()\n                 : task.getOldConnObjectKey();\n \n-        List<ConnectorObject> matches = outboundMatcher.match(task, connector, provision, connObjectKeyValue);\n+        List<ConnectorObject> matches = outboundMatcher.match(task, connector, provision, actions, connObjectKeyValue);\n         LOG.debug(\"Found for propagation task {}: {}\", task, matches);\n \n         return matches.isEmpty() ? null : matches.get(0);\n@@ -633,19 +635,24 @@ protected ConnectorObject getRemoteObject(\n      * @param connector connector facade proxy.\n      * @param task current propagation task.\n      * @param orgUnit orgUnit\n+     * @param actions propagation actions\n      * @param latest 'FALSE' to retrieve object using old connObjectKey if not null.\n      * @return remote connector object.\n      */\n     protected ConnectorObject getRemoteObject(\n             final PropagationTask task,\n             final Connector connector,\n             final OrgUnit orgUnit,\n+            final List<PropagationActions> actions,\n             final boolean latest) {\n \n         String connObjectKey = latest || task.getOldConnObjectKey() == null\n                 ? task.getConnObjectKey()\n                 : task.getOldConnObjectKey();\n \n+        Set<String> moreAttrsToGet = new HashSet<>();\n+        actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(task, orgUnit)));\n+\n         ConnectorObject obj = null;\n         Optional<? extends OrgUnitItem> connObjectKeyItem = orgUnit.getConnObjectKeyItem();\n         if (connObjectKeyItem.isPresent()) {\n@@ -655,7 +662,8 @@ protected ConnectorObject getRemoteObject(\n                         AttributeBuilder.build(connObjectKeyItem.get().getExtAttrName(), connObjectKey),\n                         orgUnit.isIgnoreCaseMatch(),\n                         MappingUtils.buildOperationOptions(\n-                                MappingUtils.getPropagationItems(orgUnit.getItems().stream())));\n+                                MappingUtils.getPropagationItems(orgUnit.getItems().stream()),\n+                                moreAttrsToGet.toArray(new String[0])));\n             } catch (TimeoutException toe) {\n                 LOG.debug(\"Request timeout\", toe);\n                 throw toe;"},{"sha":"a34bc6bf606877e9f9b1a186f26136756243a9fc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPushResultHandler.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java?ref=ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9","patch":"@@ -222,7 +222,12 @@ protected void doHandle(final LinkedAccount account, final Provision provision)\n         // Try to read remote object BEFORE any actual operation\n         Optional<ConnectorObject> connObj = MappingUtils.getConnObjectKeyItem(provision).\n                 map(connObjectKeyItem -> outboundMatcher.matchByConnObjectKeyValue(\n-                profile.getConnector(), connObjectKeyItem, account.getConnObjectKeyValue(), provision)).\n+                profile.getConnector(),\n+                connObjectKeyItem,\n+                account.getConnObjectKeyValue(),\n+                provision,\n+                Optional.empty(),\n+                Optional.empty())).\n                 orElse(Optional.empty());\n         LOG.debug(\"Match found for linked account {} as {}: {}\", account, provision.getObjectClass(), connObj);\n "},{"sha":"6e98595ba2c26a2e18e8b8a4d0bf59c12769066e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/OutboundMatcher.java","status":"modified","additions":48,"deletions":16,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java?ref=ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9","patch":"@@ -19,8 +19,12 @@\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -39,6 +43,7 @@\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.TimeoutException;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n@@ -93,6 +98,7 @@ public List<ConnectorObject> match(\n             final PropagationTask task,\n             final Connector connector,\n             final Provision provision,\n+            final List<PropagationActions> actions,\n             final String connObjectKeyValue) {\n \n         Optional<PushCorrelationRule> rule = rule(provision);\n@@ -104,14 +110,27 @@ public List<ConnectorObject> match(\n             any = anyUtilsFactory.getInstance(task.getAnyTypeKind()).dao().find(task.getEntityKey());\n         }\n \n+        Set<String> moreAttrsToGet = new HashSet<>();\n+        actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(task, provision)));\n+\n         List<ConnectorObject> result = new ArrayList<>();\n         try {\n             if (any != null && rule.isPresent()) {\n-                result.addAll(matchByCorrelationRule(connector, rule.get().getFilter(any, provision), provision));\n+                result.addAll(matchByCorrelationRule(\n+                        connector,\n+                        rule.get().getFilter(any, provision),\n+                        provision,\n+                        Optional.empty(),\n+                        Optional.of(moreAttrsToGet.toArray(new String[0]))));\n             } else {\n-                MappingUtils.getConnObjectKeyItem(provision).ifPresent(connObjectKeyItem\n-                        -> matchByConnObjectKeyValue(connector, connObjectKeyItem, connObjectKeyValue, provision).\n-                                ifPresent(result::add));\n+                MappingUtils.getConnObjectKeyItem(provision).ifPresent(connObjectKeyItem -> matchByConnObjectKeyValue(\n+                        connector,\n+                        connObjectKeyItem,\n+                        connObjectKeyValue,\n+                        provision,\n+                        Optional.empty(),\n+                        Optional.of(moreAttrsToGet.toArray(new String[0]))).\n+                        ifPresent(result::add));\n             }\n         } catch (RuntimeException e) {\n             LOG.error(\"Could not match {} with any existing {}\", any, provision.getObjectClass(), e);\n@@ -137,14 +156,25 @@ public List<ConnectorObject> match(\n         try {\n             if (rule.isPresent()) {\n                 result.addAll(matchByCorrelationRule(\n-                        connector, rule.get().getFilter(any, provision), provision, linkingItems));\n+                        connector,\n+                        rule.get().getFilter(any, provision),\n+                        provision,\n+                        ArrayUtils.isEmpty(linkingItems)\n+                        ? Optional.empty() : Optional.of(Arrays.asList(linkingItems)),\n+                        Optional.empty()));\n             } else {\n                 Optional<? extends MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n                 Optional<String> connObjectKeyValue = mappingManager.getConnObjectKeyValue(any, provision);\n \n                 if (connObjectKeyItem.isPresent() && connObjectKeyValue.isPresent()) {\n                     matchByConnObjectKeyValue(\n-                            connector, connObjectKeyItem.get(), connObjectKeyValue.get(), provision, linkingItems).\n+                            connector,\n+                            connObjectKeyItem.get(),\n+                            connObjectKeyValue.get(),\n+                            provision,\n+                            ArrayUtils.isEmpty(linkingItems)\n+                            ? Optional.empty() : Optional.of(Arrays.asList(linkingItems)),\n+                            Optional.empty()).\n                             ifPresent(result::add);\n                 }\n             }\n@@ -163,13 +193,14 @@ private List<ConnectorObject> matchByCorrelationRule(\n             final Connector connector,\n             final Filter filter,\n             final Provision provision,\n-            final LinkingMappingItem... linkingItems) {\n+            final Optional<Collection<LinkingMappingItem>> linkingItems,\n+            final Optional<String[]> moreAttrsToGet) {\n \n         Stream<MappingItem> items = Stream.concat(\n                 provision.getMapping().getItems().stream(),\n-                ArrayUtils.isEmpty(linkingItems)\n-                ? virSchemaDAO.findByProvision(provision).stream().map(VirSchema::asLinkingMappingItem)\n-                : Stream.of(linkingItems));\n+                linkingItems.isPresent()\n+                ? linkingItems.get().stream()\n+                : virSchemaDAO.findByProvision(provision).stream().map(VirSchema::asLinkingMappingItem));\n \n         List<ConnectorObject> objs = new ArrayList<>();\n         try {\n@@ -185,7 +216,7 @@ public boolean handle(final ConnectorObject connectorObject) {\n                     objs.add(connectorObject);\n                     return true;\n                 }\n-            }, MappingUtils.buildOperationOptions(items));\n+            }, MappingUtils.buildOperationOptions(items, moreAttrsToGet.orElse(null)));\n         } catch (TimeoutException toe) {\n             LOG.debug(\"Request timeout\", toe);\n             throw toe;\n@@ -202,21 +233,22 @@ public Optional<ConnectorObject> matchByConnObjectKeyValue(\n             final MappingItem connObjectKeyItem,\n             final String connObjectKeyValue,\n             final Provision provision,\n-            final LinkingMappingItem... linkingItems) {\n+            final Optional<Collection<LinkingMappingItem>> linkingItems,\n+            final Optional<String[]> moreAttrsToGet) {\n \n         Stream<MappingItem> items = Stream.concat(\n                 provision.getMapping().getItems().stream(),\n-                ArrayUtils.isEmpty(linkingItems)\n-                ? virSchemaDAO.findByProvision(provision).stream().map(VirSchema::asLinkingMappingItem)\n-                : Stream.of(linkingItems));\n+                linkingItems.isPresent()\n+                ? linkingItems.get().stream()\n+                : virSchemaDAO.findByProvision(provision).stream().map(VirSchema::asLinkingMappingItem));\n \n         ConnectorObject obj = null;\n         try {\n             obj = connector.getObject(\n                     provision.getObjectClass(),\n                     AttributeBuilder.build(connObjectKeyItem.getExtAttrName(), connObjectKeyValue),\n                     provision.isIgnoreCaseMatch(),\n-                    MappingUtils.buildOperationOptions(items));\n+                    MappingUtils.buildOperationOptions(items, moreAttrsToGet.orElse(null)));\n         } catch (TimeoutException toe) {\n             LOG.debug(\"Request timeout\", toe);\n             throw toe;"},{"sha":"6ddcca0f8f1d91b116202c865f92e8f545ccddd8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9","patch":"@@ -20,9 +20,11 @@\n \n import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n@@ -217,8 +219,12 @@ protected String doExecuteProvisioning(\n             status.set(\"Pulling \" + pullTask.getResource().getOrgUnit().getObjectClass().getObjectClassValue());\n \n             OrgUnit orgUnit = pullTask.getResource().getOrgUnit();\n+\n+            Set<String> moreAttrsToGet = new HashSet<>();\n+            actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(profile, orgUnit)));\n+\n             OperationOptions options = MappingUtils.buildOperationOptions(\n-                    MappingUtils.getPullItems(orgUnit.getItems().stream()));\n+                    MappingUtils.getPullItems(orgUnit.getItems().stream()), moreAttrsToGet.toArray(new String[0]));\n \n             RealmPullResultHandler handler = buildRealmHandler();\n             handler.setProfile(profile);\n@@ -288,10 +294,15 @@ protected String doExecuteProvisioning(\n                 handler.setPullExecutor(this);\n \n                 try {\n+                    Set<String> moreAttrsToGet = new HashSet<>();\n+                    actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(profile, provision)));\n+\n                     Stream<? extends Item> mapItems = Stream.concat(\n                             MappingUtils.getPullItems(provision.getMapping().getItems().stream()),\n                             virSchemaDAO.findByProvision(provision).stream().map(VirSchema::asLinkingMappingItem));\n-                    OperationOptions options = MappingUtils.buildOperationOptions(mapItems);\n+\n+                    OperationOptions options = MappingUtils.buildOperationOptions(\n+                            mapItems, moreAttrsToGet.toArray(new String[0]));\n \n                     switch (pullTask.getPullMode()) {\n                         case INCREMENTAL:"},{"sha":"02abde5760150f4f74ca6083f569ae8aa3f4e8da","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePullJobDelegate.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java?ref=ee8ef35a22bcbcc916c19b9f7efa18a58c264ea9","patch":"@@ -19,7 +19,9 @@\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import java.util.stream.Stream;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -149,14 +151,18 @@ public List<ProvisioningReport> pull(\n             handler.setPullExecutor(this);\n \n             // execute filtered pull\n+            Set<String> moreAttrsToGet = new HashSet<>();\n+            actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(profile, provision)));\n+\n             Stream<? extends Item> mapItems = Stream.concat(\n                     MappingUtils.getPullItems(provision.getMapping().getItems().stream()),\n                     virSchemaDAO.findByProvision(provision).stream().map(VirSchema::asLinkingMappingItem));\n+\n             connector.filteredReconciliation(\n                     provision.getObjectClass(),\n                     new AccountReconciliationFilterBuilder(connObjectKey, connObjectValue),\n                     handler,\n-                    MappingUtils.buildOperationOptions(mapItems));\n+                    MappingUtils.buildOperationOptions(mapItems, moreAttrsToGet.toArray(new String[0])));\n \n             try {\n                 setGroupOwners(ghandler);"}]}