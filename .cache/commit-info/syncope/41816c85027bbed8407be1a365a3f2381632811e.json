{"sha":"41816c85027bbed8407be1a365a3f2381632811e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQxODE2Yzg1MDI3YmJlZDg0MDdiZTFhMzY1YTNmMjM4MTYzMjgxMWU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-10-11T15:28:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-10-11T15:28:24Z"},"message":"[SYNCOPE-1369] Special support to upgrade to Flowable in 2.1.2 added","tree":{"sha":"4f33b6d54093110d429eaf12ff89ad30336d96e3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4f33b6d54093110d429eaf12ff89ad30336d96e3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/41816c85027bbed8407be1a365a3f2381632811e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/41816c85027bbed8407be1a365a3f2381632811e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/41816c85027bbed8407be1a365a3f2381632811e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/41816c85027bbed8407be1a365a3f2381632811e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4492950f380214122eb03308c608ac7167f2be78","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4492950f380214122eb03308c608ac7167f2be78","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4492950f380214122eb03308c608ac7167f2be78"}],"stats":{"total":823,"additions":441,"deletions":382},"files":[{"sha":"37d70620bb49e9f5573d337477c21e9b3005dd89","filename":"core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java","status":"modified","additions":404,"deletions":374,"changes":778,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/41816c85027bbed8407be1a365a3f2381632811e/core%2Fupgrade%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fupgrade%2FGenerateUpgradeSQL.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/41816c85027bbed8407be1a365a3f2381632811e/core%2Fupgrade%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fupgrade%2FGenerateUpgradeSQL.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fupgrade%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fupgrade%2FGenerateUpgradeSQL.java?ref=41816c85027bbed8407be1a365a3f2381632811e","patch":"@@ -26,6 +26,7 @@\n import java.io.Writer;\n import java.sql.Connection;\n import java.sql.ResultSet;\n+import java.sql.SQLException;\n import java.sql.Statement;\n import java.util.Arrays;\n import java.util.UUID;\n@@ -45,12 +46,385 @@ public static void setWriter(final Writer out) {\n         GenerateUpgradeSQL.OUT = out;\n     }\n \n+    private static void upgrade(final Connection conn) throws SQLException, IOException {\n+        // User\n+        OUT.write(\"UPDATE SyncopeUser SET mustChangePassword=0 WHERE mustChangePassword IS NULL;\\n\");\n+\n+        // VirSchema\n+        OUT.write(\"UPDATE VirSchema SET readonly=0 WHERE readonly IS NULL;\\n\");\n+\n+        // ExternalResource\n+        OUT.write(\"UPDATE ExternalResource SET overrideCapabilities=0 WHERE overrideCapabilities IS NULL;\\n\");\n+\n+        // OrgUnit\n+        OUT.write(\"UPDATE OrgUnit SET ignoreCaseMatch=0;\\n\");\n+\n+        // OrgUnitItemTransformer\n+        try (Statement stmt = conn.createStatement();\n+                ResultSet rs = stmt.executeQuery(\n+                        \"SELECT orgUnitItem_id,transformerClassName FROM OrgUnitItem_Transformer\")) {\n+\n+            while (rs.next()) {\n+                String itemId = rs.getString(1);\n+                String transformerClassName = rs.getString(2);\n+\n+                String implementationId = \"OrgUnitItemTransformer_\" + transformerClassName + \"_\" + itemId;\n+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n+                        + \"'\" + implementationId + \"',\"\n+                        + \"'ITEM_TRANSFORMER',\"\n+                        + \"'JAVA',\"\n+                        + \"'\" + transformerClassName + \"');\\n\");\n+                OUT.write(\"INSERT INTO OrgUnitItemTransformer(item_id,implementation_id) VALUES(\"\n+                        + \"'\" + itemId + \"',\"\n+                        + \"'\" + implementationId + \"');\\n\");\n+            }\n+        }\n+        OUT.write(\"DROP TABLE OrgUnitItem_Transformer;\\n\");\n+\n+        // PlainSchema\n+        try (Statement stmt = conn.createStatement();\n+                ResultSet rs = stmt.executeQuery(\n+                        \"SELECT DISTINCT validatorClass FROM PlainSchema WHERE validatorClass IS NOT NULL\")) {\n+\n+            while (rs.next()) {\n+                String validatorClass = rs.getString(1);\n+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n+                        + \"'\" + validatorClass + \"',\"\n+                        + \"'VALIDATOR',\"\n+                        + \"'JAVA',\"\n+                        + \"'\" + validatorClass + \"');\\n\");\n+            }\n+        }\n+        OUT.write(\"UPDATE PlainSchema SET validator_id=validatorClass;\\n\");\n+        OUT.write(\"ALTER TABLE PlainSchema DROP COLUMN validatorClass;\\n\");\n+\n+        // Provision\n+        OUT.write(\"UPDATE Provision SET ignoreCaseMatch=0;\\n\");\n+\n+        // PullPolicy\n+        try (Statement stmt = conn.createStatement();\n+                ResultSet rs = stmt.executeQuery(\n+                        \"SELECT id,specification FROM PullPolicy WHERE specification IS NOT NULL\")) {\n+\n+            while (rs.next()) {\n+                String id = rs.getString(1);\n+                ObjectNode specification = (ObjectNode) MAPPER.readTree(rs.getString(2));\n+\n+                if (specification.has(\"conflictResolutionAction\")) {\n+                    OUT.write(\"UPDATE PullPolicy SET \"\n+                            + \"conflictResolutionAction='\"\n+                            + specification.get(\"conflictResolutionAction\").asText() + \"' \"\n+                            + \"WHERE id='\" + id + \"';\\n\");\n+                }\n+                if (specification.has(\"correlationRules\")) {\n+                    specification.get(\"correlationRules\").fields().forEachRemaining(entry -> {\n+                        ObjectNode body = MAPPER.createObjectNode();\n+                        body.put(\"@class\", \"org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf\");\n+                        body.put(\"name\", \"org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf\");\n+                        body.set(\"schemas\", entry.getValue());\n+\n+                        try {\n+                            String implementationId = \"PullCorrelationRule_\" + entry.getKey() + \"_\" + id;\n+                            OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n+                                    + \"'\" + implementationId + \"',\"\n+                                    + \"'PULL_CORRELATION_RULE',\"\n+                                    + \"'JAVA',\"\n+                                    + \"'\" + MAPPER.writeValueAsString(body) + \"');\\n\");\n+\n+                            OUT.write(\"INSERT INTO PullCorrelationRuleEntity\"\n+                                    + \"(id,pullPolicy_id,anyType_id,implementation_id) VALUES(\"\n+                                    + \"'\" + UUID.randomUUID().toString() + \"',\"\n+                                    + \"'\" + id + \"',\"\n+                                    + \"'\" + entry.getKey() + \"',\"\n+                                    + \"'\" + implementationId + \"');\\n\");\n+                        } catch (IOException e) {\n+                            System.err.println(\"Unexpected error: \" + e.getMessage());\n+                            System.exit(2);\n+                        }\n+                    });\n+                }\n+            }\n+            OUT.write(\"ALTER TABLE PullPolicy DROP COLUMN specification;\\n\");\n+        }\n+\n+        // AccountPolicy\n+        try (Statement stmt = conn.createStatement();\n+                ResultSet rs = stmt.executeQuery(\n+                        \"SELECT id,accountPolicy_id,serializedInstance FROM AccountRuleConfInstance\")) {\n+\n+            while (rs.next()) {\n+                String id = rs.getString(1);\n+                String accountPolicyId = rs.getString(2);\n+                String serializedInstance = rs.getString(3);\n+\n+                String implementationId = \"AccountRule_\" + accountPolicyId + \"_\" + id;\n+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n+                        + \"'\" + implementationId + \"',\"\n+                        + \"'ACCOUNT_RULE',\"\n+                        + \"'JAVA',\"\n+                        + \"'\" + serializedInstance + \"');\\n\");\n+                OUT.write(\"INSERT INTO AccountPolicyRule(policy_id,implementation_id) VALUES(\"\n+                        + \"'\" + accountPolicyId + \"',\"\n+                        + \"'\" + implementationId + \"');\\n\");\n+            }\n+        }\n+        OUT.write(\"DROP TABLE AccountRuleConfInstance;\\n\");\n+\n+        // PasswordPolicy\n+        try (Statement stmt = conn.createStatement();\n+                ResultSet rs = stmt.executeQuery(\n+                        \"SELECT id,passwordPolicy_id,serializedInstance FROM PasswordRuleConfInstance\")) {\n+\n+            while (rs.next()) {\n+                String id = rs.getString(1);\n+                String passwordPolicyId = rs.getString(2);\n+                String serializedInstance = rs.getString(3);\n+\n+                String implementationId = \"PasswordRule_\" + passwordPolicyId + \"_\" + id;\n+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n+                        + \"'\" + implementationId + \"',\"\n+                        + \"'ACCOUNT_RULE',\"\n+                        + \"'JAVA',\"\n+                        + \"'\" + serializedInstance + \"');\\n\");\n+                OUT.write(\"INSERT INTO PasswordPolicyRule(policy_id,implementation_id) VALUES(\"\n+                        + \"'\" + passwordPolicyId + \"',\"\n+                        + \"'\" + implementationId + \"');\\n\");\n+            }\n+        }\n+        OUT.write(\"DROP TABLE PasswordRuleConfInstance;\\n\");\n+\n+        // Task\n+        OUT.write(\"UPDATE Task SET remediation=0;\\n\");\n+        OUT.write(\"UPDATE Task SET active=0 WHERE active IS NULL;\\n\");\n+\n+        OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n+                + \"'PullJobDelegate',\"\n+                + \"'TASKJOB_DELEGATE',\"\n+                + \"'JAVA',\"\n+                + \"'org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate');\\n\");\n+        OUT.write(\"UPDATE Task SET jobDelegate_id='PullJobDelegate' WHERE DTYPE='PullTask';\\n\");\n+\n+        OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n+                + \"'PushJobDelegate',\"\n+                + \"'TASKJOB_DELEGATE',\"\n+                + \"'JAVA',\"\n+                + \"'org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate');\\n\");\n+        OUT.write(\"UPDATE Task SET jobDelegate_id='PushJobDelegate' WHERE DTYPE='PushTask';\\n\");\n+\n+        try (Statement stmt = conn.createStatement();\n+                ResultSet rs = stmt.executeQuery(\n+                        \"SELECT DISTINCT jobDelegateClassName FROM Task WHERE jobDelegateClassName IS NOT NULL\")) {\n+\n+            while (rs.next()) {\n+                String jobDelegateClassName = rs.getString(1);\n+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n+                        + \"'\" + jobDelegateClassName + \"',\"\n+                        + \"'TASKJOB_DELEGATE',\"\n+                        + \"'JAVA',\"\n+                        + \"'\" + jobDelegateClassName + \"');\\n\");\n+            }\n+        }\n+        OUT.write(\"UPDATE Task SET jobDelegate_id=jobDelegateClassName;\\n\");\n+        OUT.write(\"ALTER TABLE Task DROP COLUMN jobDelegateClassName;\\n\");\n+\n+        // PullActions\n+        try (Statement stmt = conn.createStatement();\n+                ResultSet rs = stmt.executeQuery(\n+                        \"SELECT DISTINCT actionClassName FROM PullTask_actionsClassNames\")) {\n+\n+            while (rs.next()) {\n+                String actionClassName = rs.getString(1);\n+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n+                        + \"'\" + actionClassName + \"',\"\n+                        + \"'PULL_ACTIONS',\"\n+                        + \"'JAVA',\"\n+                        + \"'\" + actionClassName + \"');\\n\");\n+            }\n+        }\n+        try (Statement stmt = conn.createStatement();\n+                ResultSet rs = stmt.executeQuery(\n+                        \"SELECT pullTask_id,actionClassName FROM PullTask_actionsClassNames\")) {\n+\n+            while (rs.next()) {\n+                String pullTaskId = rs.getString(1);\n+                String actionClassName = rs.getString(2);\n+                OUT.write(\"INSERT INTO PullTaskAction(task_id,implementation_id) VALUES(\"\n+                        + \"'\" + pullTaskId + \"',\"\n+                        + \"'\" + actionClassName + \"');\\n\");\n+            }\n+        }\n+        OUT.write(\"DROP TABLE PullTask_actionsClassNames;\\n\");\n+\n+        // PushActions\n+        try (Statement stmt = conn.createStatement();\n+                ResultSet rs = stmt.executeQuery(\n+                        \"SELECT DISTINCT actionClassName FROM PushTask_actionsClassNames\")) {\n+\n+            while (rs.next()) {\n+                String actionClassName = rs.getString(1);\n+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n+                        + \"'\" + actionClassName + \"',\"\n+                        + \"'PUSH_ACTIONS',\"\n+                        + \"'JAVA',\"\n+                        + \"'\" + actionClassName + \"');\\n\");\n+            }\n+        }\n+        try (Statement stmt = conn.createStatement();\n+                ResultSet rs = stmt.executeQuery(\n+                        \"SELECT pushTask_id,actionClassName FROM PushTask_actionsClassNames\")) {\n+\n+            while (rs.next()) {\n+                String pushTaskId = rs.getString(1);\n+                String actionClassName = rs.getString(2);\n+                OUT.write(\"INSERT INTO PushTaskAction(task_id,implementation_id) VALUES(\"\n+                        + \"'\" + pushTaskId + \"',\"\n+                        + \"'\" + actionClassName + \"');\\n\");\n+            }\n+        }\n+        OUT.write(\"DROP TABLE PushTask_actionsClassNames;\\n\");\n+\n+        // PropagationActions\n+        try (Statement stmt = conn.createStatement();\n+                ResultSet rs = stmt.executeQuery(\n+                        \"SELECT DISTINCT actionClassName FROM ExternalResource_PropActions\")) {\n+\n+            while (rs.next()) {\n+                String actionClassName = rs.getString(1);\n+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n+                        + \"'\" + actionClassName + \"',\"\n+                        + \"'PROPAGATION_ACTIONS',\"\n+                        + \"'JAVA',\"\n+                        + \"'\" + actionClassName + \"');\\n\");\n+            }\n+        }\n+        try (Statement stmt = conn.createStatement();\n+                ResultSet rs = stmt.executeQuery(\n+                        \"SELECT resource_id,actionClassName FROM ExternalResource_PropActions\")) {\n+\n+            while (rs.next()) {\n+                String resourceId = rs.getString(1);\n+                String actionClassName = rs.getString(2);\n+                OUT.write(\"INSERT INTO ExternalResourcePropAction(resource_id,implementation_id) VALUES(\"\n+                        + \"'\" + resourceId + \"',\"\n+                        + \"'\" + actionClassName + \"');\\n\");\n+            }\n+        }\n+        OUT.write(\"DROP TABLE ExternalResource_PropActions;\\n\");\n+\n+        // LogicActions\n+        try (Statement stmt = conn.createStatement();\n+                ResultSet rs = stmt.executeQuery(\n+                        \"SELECT DISTINCT actionClassName FROM Realm_actionsClassNames\")) {\n+\n+            while (rs.next()) {\n+                String actionClassName = rs.getString(1);\n+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n+                        + \"'\" + actionClassName + \"',\"\n+                        + \"'LOGIC_ACTIONS',\"\n+                        + \"'JAVA',\"\n+                        + \"'\" + actionClassName + \"');\\n\");\n+            }\n+        }\n+        try (Statement stmt = conn.createStatement();\n+                ResultSet rs = stmt.executeQuery(\n+                        \"SELECT realm_id,actionClassName FROM Realm_actionsClassNames\")) {\n+\n+            while (rs.next()) {\n+                String realmId = rs.getString(1);\n+                String actionClassName = rs.getString(2);\n+                OUT.write(\"INSERT INTO RealmAction(realm_id,implementation_id) VALUES(\"\n+                        + \"'\" + realmId + \"',\"\n+                        + \"'\" + actionClassName + \"');\\n\");\n+            }\n+        }\n+        OUT.write(\"DROP TABLE Realm_actionsClassNames;\\n\");\n+\n+        // Reportlet\n+        try (Statement stmt = conn.createStatement();\n+                ResultSet rs = stmt.executeQuery(\n+                        \"SELECT id,report_id,serializedInstance FROM ReportletConfInstance\")) {\n+\n+            while (rs.next()) {\n+                String id = rs.getString(1);\n+                String reportId = rs.getString(2);\n+                String serializedInstance = rs.getString(3);\n+\n+                String implementationId = \"Reportlet_\" + reportId + \"_\" + id;\n+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n+                        + \"'\" + implementationId + \"',\"\n+                        + \"'REPORTLET',\"\n+                        + \"'JAVA',\"\n+                        + \"'\" + serializedInstance + \"');\\n\");\n+                OUT.write(\"INSERT INTO ReportReportlet(report_id,implementation_id) VALUES(\"\n+                        + \"'\" + reportId + \"',\"\n+                        + \"'\" + implementationId + \"');\\n\");\n+            }\n+        }\n+        OUT.write(\"DROP TABLE ReportletConfInstance;\\n\");\n+\n+        // MappingItemTransformer\n+        try (Statement stmt = conn.createStatement();\n+                ResultSet rs = stmt.executeQuery(\n+                        \"SELECT mappingItem_id,transformerClassName FROM MappingItem_Transformer\")) {\n+\n+            while (rs.next()) {\n+                String itemId = rs.getString(1);\n+                String transformerClassName = rs.getString(2);\n+\n+                String implementationId = \"MappingItemTransformer_\" + transformerClassName + \"_\" + itemId;\n+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n+                        + \"'\" + implementationId + \"',\"\n+                        + \"'ITEM_TRANSFORMER',\"\n+                        + \"'JAVA',\"\n+                        + \"'\" + transformerClassName + \"');\\n\");\n+                OUT.write(\"INSERT INTO MappingItemTransformer(item_id,implementation_id) VALUES(\"\n+                        + \"'\" + itemId + \"',\"\n+                        + \"'\" + implementationId + \"');\\n\");\n+            }\n+        }\n+        OUT.write(\"DROP TABLE MappingItem_Transformer;\\n\");\n+\n+        // Notification\n+        try (Statement stmt = conn.createStatement();\n+                ResultSet rs = stmt.executeQuery(\n+                        \"SELECT DISTINCT recipientsProviderClassName \"\n+                        + \"FROM Notification WHERE recipientsProviderClassName IS NOT NULL\")) {\n+\n+            while (rs.next()) {\n+                String recipientsProviderClassName = rs.getString(1);\n+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n+                        + \"'\" + recipientsProviderClassName + \"',\"\n+                        + \"'RECIPIENTS_PROVIDER',\"\n+                        + \"'JAVA',\"\n+                        + \"'\" + recipientsProviderClassName + \"');\\n\");\n+            }\n+        }\n+        OUT.write(\"UPDATE Notification SET recipientsProvider_id=recipientsProviderClassName;\\n\");\n+        OUT.write(\"ALTER TABLE Notification DROP COLUMN recipientsProviderClassName;\\n\");\n+    }\n+\n+    private static void upgradeFlowableTo212(final Connection conn) throws IOException, SQLException {\n+        try (Statement stmt = conn.createStatement();\n+                ResultSet rs = stmt.executeQuery(\"SELECT id,workflowId FROM SyncopeUser\")) {\n+\n+            while (rs.next()) {\n+                OUT.write(\"UPDATE ACT_RU_EXECUTION \"\n+                        + \"SET BUSINESS_KEY_='userWorkflow:\" + rs.getString(1) + \"' \"\n+                        + \"WHERE ID_='\" + rs.getString(2) + \"';\\n\");\n+            }\n+        }\n+\n+        OUT.write(\"DROP VIEW user_search;\\n\");\n+        OUT.write(\"ALTER TABLE SyncopeUser DROP COLUMN workflowId;\\n\");\n+        OUT.write(\"CREATE VIEW user_search AS SELECT u.id as any_id, u.* FROM SyncopeUser u;\\n\");\n+    }\n+\n     public static void main(final String[] args) throws Exception {\n         // parse args\n-        if (args.length < 5 || args.length > 6) {\n+        if (args.length < 5 || args.length > 7) {\n             System.err.println(\"Unexpected arguments: \" + Arrays.asList(args));\n             System.out.println(\"Usage: <driverClassName> <jdbcURL> <username> <password>\"\n-                    + \"<h2|mariadb|mysql|oracle|postgres|sqlserver> [filename]\");\n+                    + \"<h2|mariadb|mysql|oracle|postgres|sqlserver> [-flowable-2.1.2] [filename]\");\n             System.exit(1);\n         }\n \n@@ -59,8 +433,12 @@ public static void main(final String[] args) throws Exception {\n         String username = args[2];\n         String password = args[3];\n         String dbDictionary = args[4];\n-        if (args.length == 6) {\n-            setWriter(new FileWriter(args[5]));\n+        boolean flowableTo212 = false;\n+        if (args.length >= 6) {\n+            flowableTo212 = \"-flowable-2.1.2\".equals(args[5]);\n+            if (!flowableTo212) {\n+                setWriter(new FileWriter(args[args.length - 1]));\n+            }\n         }\n \n         // setup DataSource\n@@ -70,383 +448,35 @@ public static void main(final String[] args) throws Exception {\n         dataSource.setConnectionUserName(username);\n         dataSource.setConnectionPassword(password);\n \n-        // setup OpenJPA\n-        JDBCConfiguration jdbcConf = new JDBCConfigurationImpl();\n-        jdbcConf.setConnection2DriverName(driverClassName);\n-        jdbcConf.setConnection2UserName(username);\n-        jdbcConf.setConnection2Password(password);\n-        jdbcConf.setDBDictionary(dbDictionary);\n-        jdbcConf.setConnectionFactory2(dataSource);\n-\n-        FileSchemaFactory schemaFactory = new FileSchemaFactory();\n-        schemaFactory.setConfiguration(jdbcConf);\n-        schemaFactory.setFile(\"schema.xml\");\n-        jdbcConf.setSchemaFactory(schemaFactory);\n-\n-        WiserSchemaTool schemaTool = new WiserSchemaTool(jdbcConf, SchemaTool.ACTION_ADD);\n-        schemaTool.setSchemaGroup(schemaFactory.readSchema());\n-        schemaTool.setWriter(OUT);\n         try {\n-            // run OpenJPA's SchemaTool to get the update statements\n-            schemaTool.run();\n+            // setup OpenJPA\n+            JDBCConfiguration jdbcConf = new JDBCConfigurationImpl();\n+            jdbcConf.setConnection2DriverName(driverClassName);\n+            jdbcConf.setConnection2UserName(username);\n+            jdbcConf.setConnection2Password(password);\n+            jdbcConf.setDBDictionary(dbDictionary);\n+            jdbcConf.setConnectionFactory2(dataSource);\n+\n+            FileSchemaFactory schemaFactory = new FileSchemaFactory();\n+            schemaFactory.setConfiguration(jdbcConf);\n+            schemaFactory.setFile(\"schema.xml\");\n+            jdbcConf.setSchemaFactory(schemaFactory);\n+\n+            WiserSchemaTool schemaTool = new WiserSchemaTool(jdbcConf, SchemaTool.ACTION_ADD);\n+            schemaTool.setSchemaGroup(schemaFactory.readSchema());\n+            schemaTool.setWriter(OUT);\n \n             // now proceed with manual update statements...\n             Connection conn = jdbcConf.getDataSource2(null).getConnection();\n \n-            // User\n-            OUT.write(\"UPDATE SyncopeUser SET mustChangePassword=0 WHERE mustChangePassword IS NULL;\\n\");\n-\n-            // VirSchema\n-            OUT.write(\"UPDATE VirSchema SET readonly=0 WHERE readonly IS NULL;\\n\");\n-\n-            // ExternalResource\n-            OUT.write(\"UPDATE ExternalResource SET overrideCapabilities=0 WHERE overrideCapabilities IS NULL;\\n\");\n-\n-            // OrgUnit\n-            OUT.write(\"UPDATE OrgUnit SET ignoreCaseMatch=0;\\n\");\n+            if (flowableTo212) {\n+                upgradeFlowableTo212(conn);\n+            } else {\n+                // run OpenJPA's SchemaTool to get the update statements\n+                schemaTool.run();\n \n-            // OrgUnitItemTransformer\n-            try (Statement stmt = conn.createStatement();\n-                    ResultSet rs = stmt.executeQuery(\n-                            \"SELECT orgUnitItem_id,transformerClassName FROM OrgUnitItem_Transformer\")) {\n-\n-                while (rs.next()) {\n-                    String itemId = rs.getString(1);\n-                    String transformerClassName = rs.getString(2);\n-\n-                    String implementationId = \"OrgUnitItemTransformer_\" + transformerClassName + \"_\" + itemId;\n-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n-                            + \"'\" + implementationId + \"',\"\n-                            + \"'ITEM_TRANSFORMER',\"\n-                            + \"'JAVA',\"\n-                            + \"'\" + transformerClassName + \"');\\n\");\n-                    OUT.write(\"INSERT INTO OrgUnitItemTransformer(item_id,implementation_id) VALUES(\"\n-                            + \"'\" + itemId + \"',\"\n-                            + \"'\" + implementationId + \"');\\n\");\n-                }\n-            }\n-            OUT.write(\"DROP TABLE OrgUnitItem_Transformer;\\n\");\n-\n-            // PlainSchema\n-            try (Statement stmt = conn.createStatement();\n-                    ResultSet rs = stmt.executeQuery(\n-                            \"SELECT DISTINCT validatorClass FROM PlainSchema WHERE validatorClass IS NOT NULL\")) {\n-\n-                while (rs.next()) {\n-                    String validatorClass = rs.getString(1);\n-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n-                            + \"'\" + validatorClass + \"',\"\n-                            + \"'VALIDATOR',\"\n-                            + \"'JAVA',\"\n-                            + \"'\" + validatorClass + \"');\\n\");\n-                }\n-            }\n-            OUT.write(\"UPDATE PlainSchema SET validator_id=validatorClass;\\n\");\n-            OUT.write(\"ALTER TABLE PlainSchema DROP COLUMN validatorClass;\\n\");\n-\n-            // Provision\n-            OUT.write(\"UPDATE Provision SET ignoreCaseMatch=0;\\n\");\n-\n-            // PullPolicy\n-            try (Statement stmt = conn.createStatement();\n-                    ResultSet rs = stmt.executeQuery(\n-                            \"SELECT id,specification FROM PullPolicy WHERE specification IS NOT NULL\")) {\n-\n-                while (rs.next()) {\n-                    String id = rs.getString(1);\n-                    ObjectNode specification = (ObjectNode) MAPPER.readTree(rs.getString(2));\n-\n-                    if (specification.has(\"conflictResolutionAction\")) {\n-                        OUT.write(\"UPDATE PullPolicy SET \"\n-                                + \"conflictResolutionAction='\"\n-                                + specification.get(\"conflictResolutionAction\").asText() + \"' \"\n-                                + \"WHERE id='\" + id + \"';\\n\");\n-                    }\n-                    if (specification.has(\"correlationRules\")) {\n-                        specification.get(\"correlationRules\").fields().forEachRemaining(entry -> {\n-                            ObjectNode body = MAPPER.createObjectNode();\n-                            body.put(\"@class\", \"org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf\");\n-                            body.put(\"name\", \"org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf\");\n-                            body.set(\"schemas\", entry.getValue());\n-\n-                            try {\n-                                String implementationId = \"PullCorrelationRule_\" + entry.getKey() + \"_\" + id;\n-                                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n-                                        + \"'\" + implementationId + \"',\"\n-                                        + \"'PULL_CORRELATION_RULE',\"\n-                                        + \"'JAVA',\"\n-                                        + \"'\" + MAPPER.writeValueAsString(body) + \"');\\n\");\n-\n-                                OUT.write(\"INSERT INTO PullCorrelationRuleEntity\"\n-                                        + \"(id,pullPolicy_id,anyType_id,implementation_id) VALUES(\"\n-                                        + \"'\" + UUID.randomUUID().toString() + \"',\"\n-                                        + \"'\" + id + \"',\"\n-                                        + \"'\" + entry.getKey() + \"',\"\n-                                        + \"'\" + implementationId + \"');\\n\");\n-                            } catch (IOException e) {\n-                                System.err.println(\"Unexpected error: \" + e.getMessage());\n-                                System.exit(2);\n-                            }\n-                        });\n-                    }\n-                }\n-                OUT.write(\"ALTER TABLE PullPolicy DROP COLUMN specification;\\n\");\n-            }\n-\n-            // AccountPolicy\n-            try (Statement stmt = conn.createStatement();\n-                    ResultSet rs = stmt.executeQuery(\n-                            \"SELECT id,accountPolicy_id,serializedInstance FROM AccountRuleConfInstance\")) {\n-\n-                while (rs.next()) {\n-                    String id = rs.getString(1);\n-                    String accountPolicyId = rs.getString(2);\n-                    String serializedInstance = rs.getString(3);\n-\n-                    String implementationId = \"AccountRule_\" + accountPolicyId + \"_\" + id;\n-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n-                            + \"'\" + implementationId + \"',\"\n-                            + \"'ACCOUNT_RULE',\"\n-                            + \"'JAVA',\"\n-                            + \"'\" + serializedInstance + \"');\\n\");\n-                    OUT.write(\"INSERT INTO AccountPolicyRule(policy_id,implementation_id) VALUES(\"\n-                            + \"'\" + accountPolicyId + \"',\"\n-                            + \"'\" + implementationId + \"');\\n\");\n-                }\n-            }\n-            OUT.write(\"DROP TABLE AccountRuleConfInstance;\\n\");\n-\n-            // PasswordPolicy\n-            try (Statement stmt = conn.createStatement();\n-                    ResultSet rs = stmt.executeQuery(\n-                            \"SELECT id,passwordPolicy_id,serializedInstance FROM PasswordRuleConfInstance\")) {\n-\n-                while (rs.next()) {\n-                    String id = rs.getString(1);\n-                    String passwordPolicyId = rs.getString(2);\n-                    String serializedInstance = rs.getString(3);\n-\n-                    String implementationId = \"PasswordRule_\" + passwordPolicyId + \"_\" + id;\n-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n-                            + \"'\" + implementationId + \"',\"\n-                            + \"'ACCOUNT_RULE',\"\n-                            + \"'JAVA',\"\n-                            + \"'\" + serializedInstance + \"');\\n\");\n-                    OUT.write(\"INSERT INTO PasswordPolicyRule(policy_id,implementation_id) VALUES(\"\n-                            + \"'\" + passwordPolicyId + \"',\"\n-                            + \"'\" + implementationId + \"');\\n\");\n-                }\n-            }\n-            OUT.write(\"DROP TABLE PasswordRuleConfInstance;\\n\");\n-\n-            // Task\n-            OUT.write(\"UPDATE Task SET remediation=0;\\n\");\n-            OUT.write(\"UPDATE Task SET active=0 WHERE active IS NULL;\\n\");\n-\n-            OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n-                    + \"'PullJobDelegate',\"\n-                    + \"'TASKJOB_DELEGATE',\"\n-                    + \"'JAVA',\"\n-                    + \"'org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate');\\n\");\n-            OUT.write(\"UPDATE Task SET jobDelegate_id='PullJobDelegate' WHERE DTYPE='PullTask';\\n\");\n-\n-            OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n-                    + \"'PushJobDelegate',\"\n-                    + \"'TASKJOB_DELEGATE',\"\n-                    + \"'JAVA',\"\n-                    + \"'org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate');\\n\");\n-            OUT.write(\"UPDATE Task SET jobDelegate_id='PushJobDelegate' WHERE DTYPE='PushTask';\\n\");\n-\n-            try (Statement stmt = conn.createStatement();\n-                    ResultSet rs = stmt.executeQuery(\n-                            \"SELECT DISTINCT jobDelegateClassName FROM Task WHERE jobDelegateClassName IS NOT NULL\")) {\n-\n-                while (rs.next()) {\n-                    String jobDelegateClassName = rs.getString(1);\n-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n-                            + \"'\" + jobDelegateClassName + \"',\"\n-                            + \"'TASKJOB_DELEGATE',\"\n-                            + \"'JAVA',\"\n-                            + \"'\" + jobDelegateClassName + \"');\\n\");\n-                }\n-            }\n-            OUT.write(\"UPDATE Task SET jobDelegate_id=jobDelegateClassName;\\n\");\n-            OUT.write(\"ALTER TABLE Task DROP COLUMN jobDelegateClassName;\\n\");\n-\n-            // PullActions\n-            try (Statement stmt = conn.createStatement();\n-                    ResultSet rs = stmt.executeQuery(\n-                            \"SELECT DISTINCT actionClassName FROM PullTask_actionsClassNames\")) {\n-\n-                while (rs.next()) {\n-                    String actionClassName = rs.getString(1);\n-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n-                            + \"'\" + actionClassName + \"',\"\n-                            + \"'PULL_ACTIONS',\"\n-                            + \"'JAVA',\"\n-                            + \"'\" + actionClassName + \"');\\n\");\n-                }\n-            }\n-            try (Statement stmt = conn.createStatement();\n-                    ResultSet rs = stmt.executeQuery(\n-                            \"SELECT pullTask_id,actionClassName FROM PullTask_actionsClassNames\")) {\n-\n-                while (rs.next()) {\n-                    String pullTaskId = rs.getString(1);\n-                    String actionClassName = rs.getString(2);\n-                    OUT.write(\"INSERT INTO PullTaskAction(task_id,implementation_id) VALUES(\"\n-                            + \"'\" + pullTaskId + \"',\"\n-                            + \"'\" + actionClassName + \"');\\n\");\n-                }\n-            }\n-            OUT.write(\"DROP TABLE PullTask_actionsClassNames;\\n\");\n-\n-            // PushActions\n-            try (Statement stmt = conn.createStatement();\n-                    ResultSet rs = stmt.executeQuery(\n-                            \"SELECT DISTINCT actionClassName FROM PushTask_actionsClassNames\")) {\n-\n-                while (rs.next()) {\n-                    String actionClassName = rs.getString(1);\n-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n-                            + \"'\" + actionClassName + \"',\"\n-                            + \"'PUSH_ACTIONS',\"\n-                            + \"'JAVA',\"\n-                            + \"'\" + actionClassName + \"');\\n\");\n-                }\n-            }\n-            try (Statement stmt = conn.createStatement();\n-                    ResultSet rs = stmt.executeQuery(\n-                            \"SELECT pushTask_id,actionClassName FROM PushTask_actionsClassNames\")) {\n-\n-                while (rs.next()) {\n-                    String pushTaskId = rs.getString(1);\n-                    String actionClassName = rs.getString(2);\n-                    OUT.write(\"INSERT INTO PushTaskAction(task_id,implementation_id) VALUES(\"\n-                            + \"'\" + pushTaskId + \"',\"\n-                            + \"'\" + actionClassName + \"');\\n\");\n-                }\n-            }\n-            OUT.write(\"DROP TABLE PushTask_actionsClassNames;\\n\");\n-\n-            // PropagationActions\n-            try (Statement stmt = conn.createStatement();\n-                    ResultSet rs = stmt.executeQuery(\n-                            \"SELECT DISTINCT actionClassName FROM ExternalResource_PropActions\")) {\n-\n-                while (rs.next()) {\n-                    String actionClassName = rs.getString(1);\n-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n-                            + \"'\" + actionClassName + \"',\"\n-                            + \"'PROPAGATION_ACTIONS',\"\n-                            + \"'JAVA',\"\n-                            + \"'\" + actionClassName + \"');\\n\");\n-                }\n-            }\n-            try (Statement stmt = conn.createStatement();\n-                    ResultSet rs = stmt.executeQuery(\n-                            \"SELECT resource_id,actionClassName FROM ExternalResource_PropActions\")) {\n-\n-                while (rs.next()) {\n-                    String resourceId = rs.getString(1);\n-                    String actionClassName = rs.getString(2);\n-                    OUT.write(\"INSERT INTO ExternalResourcePropAction(resource_id,implementation_id) VALUES(\"\n-                            + \"'\" + resourceId + \"',\"\n-                            + \"'\" + actionClassName + \"');\\n\");\n-                }\n-            }\n-            OUT.write(\"DROP TABLE ExternalResource_PropActions;\\n\");\n-\n-            // LogicActions\n-            try (Statement stmt = conn.createStatement();\n-                    ResultSet rs = stmt.executeQuery(\n-                            \"SELECT DISTINCT actionClassName FROM Realm_actionsClassNames\")) {\n-\n-                while (rs.next()) {\n-                    String actionClassName = rs.getString(1);\n-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n-                            + \"'\" + actionClassName + \"',\"\n-                            + \"'LOGIC_ACTIONS',\"\n-                            + \"'JAVA',\"\n-                            + \"'\" + actionClassName + \"');\\n\");\n-                }\n-            }\n-            try (Statement stmt = conn.createStatement();\n-                    ResultSet rs = stmt.executeQuery(\n-                            \"SELECT realm_id,actionClassName FROM Realm_actionsClassNames\")) {\n-\n-                while (rs.next()) {\n-                    String realmId = rs.getString(1);\n-                    String actionClassName = rs.getString(2);\n-                    OUT.write(\"INSERT INTO RealmAction(realm_id,implementation_id) VALUES(\"\n-                            + \"'\" + realmId + \"',\"\n-                            + \"'\" + actionClassName + \"');\\n\");\n-                }\n-            }\n-            OUT.write(\"DROP TABLE Realm_actionsClassNames;\\n\");\n-\n-            // Reportlet\n-            try (Statement stmt = conn.createStatement();\n-                    ResultSet rs = stmt.executeQuery(\n-                            \"SELECT id,report_id,serializedInstance FROM ReportletConfInstance\")) {\n-\n-                while (rs.next()) {\n-                    String id = rs.getString(1);\n-                    String reportId = rs.getString(2);\n-                    String serializedInstance = rs.getString(3);\n-\n-                    String implementationId = \"Reportlet_\" + reportId + \"_\" + id;\n-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n-                            + \"'\" + implementationId + \"',\"\n-                            + \"'REPORTLET',\"\n-                            + \"'JAVA',\"\n-                            + \"'\" + serializedInstance + \"');\\n\");\n-                    OUT.write(\"INSERT INTO ReportReportlet(report_id,implementation_id) VALUES(\"\n-                            + \"'\" + reportId + \"',\"\n-                            + \"'\" + implementationId + \"');\\n\");\n-                }\n-            }\n-            OUT.write(\"DROP TABLE ReportletConfInstance;\\n\");\n-\n-            // MappingItemTransformer\n-            try (Statement stmt = conn.createStatement();\n-                    ResultSet rs = stmt.executeQuery(\n-                            \"SELECT mappingItem_id,transformerClassName FROM MappingItem_Transformer\")) {\n-\n-                while (rs.next()) {\n-                    String itemId = rs.getString(1);\n-                    String transformerClassName = rs.getString(2);\n-\n-                    String implementationId = \"MappingItemTransformer_\" + transformerClassName + \"_\" + itemId;\n-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n-                            + \"'\" + implementationId + \"',\"\n-                            + \"'ITEM_TRANSFORMER',\"\n-                            + \"'JAVA',\"\n-                            + \"'\" + transformerClassName + \"');\\n\");\n-                    OUT.write(\"INSERT INTO MappingItemTransformer(item_id,implementation_id) VALUES(\"\n-                            + \"'\" + itemId + \"',\"\n-                            + \"'\" + implementationId + \"');\\n\");\n-                }\n-            }\n-            OUT.write(\"DROP TABLE MappingItem_Transformer;\\n\");\n-\n-            // Notification\n-            try (Statement stmt = conn.createStatement();\n-                    ResultSet rs = stmt.executeQuery(\n-                            \"SELECT DISTINCT recipientsProviderClassName \"\n-                            + \"FROM Notification WHERE recipientsProviderClassName IS NOT NULL\")) {\n-\n-                while (rs.next()) {\n-                    String recipientsProviderClassName = rs.getString(1);\n-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"\n-                            + \"'\" + recipientsProviderClassName + \"',\"\n-                            + \"'RECIPIENTS_PROVIDER',\"\n-                            + \"'JAVA',\"\n-                            + \"'\" + recipientsProviderClassName + \"');\\n\");\n-                }\n+                upgrade(conn);\n             }\n-            OUT.write(\"UPDATE Notification SET recipientsProvider_id=recipientsProviderClassName;\\n\");\n-            OUT.write(\"ALTER TABLE Notification DROP COLUMN recipientsProviderClassName;\\n\");\n         } finally {\n             OUT.flush();\n             OUT.close();"},{"sha":"148797bf3dac9ef5397eb466164c1c6437ab0ec6","filename":"core/upgrade/src/test/java/org/apache/syncope/core/upgrade/GeneratedUpgradeSQLTest.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/41816c85027bbed8407be1a365a3f2381632811e/core%2Fupgrade%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fupgrade%2FGeneratedUpgradeSQLTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/41816c85027bbed8407be1a365a3f2381632811e/core%2Fupgrade%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fupgrade%2FGeneratedUpgradeSQLTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fupgrade%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fupgrade%2FGeneratedUpgradeSQLTest.java?ref=41816c85027bbed8407be1a365a3f2381632811e","patch":"@@ -117,4 +117,32 @@ public void upgradefrom20() throws Exception {\n         assertNotNull(pushCorrelationRuleEntities);\n         assertEquals(0, pushCorrelationRuleEntities.intValue());\n     }\n+\n+    @Test\n+    public void upgradeFlowableTo212() throws Exception {\n+        StringWriter out = new StringWriter();\n+        GenerateUpgradeSQL.setWriter(out);\n+\n+        String[] args = new String[] { driverClassName, jdbcURL, username, password, \"h2\", \"-flowable-2.1.2\" };\n+        GenerateUpgradeSQL.main(args);\n+\n+        String upgradeSQL = out.toString();\n+\n+        try {\n+            DataSourceInitializer adminUsersInit = new DataSourceInitializer();\n+            adminUsersInit.setDataSource(syncope20DataSource);\n+            adminUsersInit.setDatabasePopulator(\n+                    new ResourceDatabasePopulator(new ByteArrayResource(upgradeSQL.getBytes(StandardCharsets.UTF_8))));\n+            adminUsersInit.afterPropertiesSet();\n+        } catch (Exception e) {\n+            fail(\"Unexpected error while upgrading Flowable to 2.1.2\", e);\n+        }\n+\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(syncope20DataSource);\n+\n+        Integer processInstances = jdbcTemplate.queryForObject(\n+                \"SELECT COUNT(*) FROM ACT_RU_EXECUTION WHERE BUSINESS_KEY_ IS NOT NULL\", Integer.class);\n+        assertNotNull(processInstances);\n+        assertEquals(5, processInstances.intValue());\n+    }\n }"},{"sha":"4575cf2a2eb97516c51a44daa13465e5424f6a07","filename":"core/upgrade/src/test/resources/syncopedb20.sql","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/41816c85027bbed8407be1a365a3f2381632811e/core%2Fupgrade%2Fsrc%2Ftest%2Fresources%2Fsyncopedb20.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/41816c85027bbed8407be1a365a3f2381632811e/core%2Fupgrade%2Fsrc%2Ftest%2Fresources%2Fsyncopedb20.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fupgrade%2Fsrc%2Ftest%2Fresources%2Fsyncopedb20.sql?ref=41816c85027bbed8407be1a365a3f2381632811e","patch":"@@ -1614,6 +1614,7 @@ CREATE MEMORY TABLE PUBLIC.SYNCOPEUSER(\n     LASTCHANGEDATE TIMESTAMP,\n     LASTMODIFIER VARCHAR(255),\n     STATUS VARCHAR(255),\n+    WORKFLOWID VARCHAR(255),\n     CHANGEPWDDATE TIMESTAMP,\n     CIPHERALGORITHM VARCHAR(20),\n     FAILEDLOGINS INTEGER,\n@@ -1630,12 +1631,12 @@ CREATE MEMORY TABLE PUBLIC.SYNCOPEUSER(\n );       \n ALTER TABLE PUBLIC.SYNCOPEUSER ADD CONSTRAINT PUBLIC.CONSTRAINT_6FFB PRIMARY KEY(ID);          \n -- 5 +/- SELECT COUNT(*) FROM PUBLIC.SYNCOPEUSER;              \n-INSERT INTO PUBLIC.SYNCOPEUSER(ID, CREATIONDATE, CREATOR, LASTCHANGEDATE, LASTMODIFIER, STATUS, CHANGEPWDDATE, CIPHERALGORITHM, FAILEDLOGINS, LASTLOGINDATE, MUSTCHANGEPASSWORD, PASSWORD, SECURITYANSWER, SUSPENDED, TOKEN, TOKENEXPIRETIME, USERNAME, REALM_ID, SECURITYQUESTION_ID) VALUES\n-('1417acbe-cbf6-4277-9372-e75e04f97000', TIMESTAMP '2010-10-20 11:00:00', 'admin', TIMESTAMP '2010-10-20 11:00:00', 'admin', 'active', NULL, 'SHA1', NULL, NULL, NULL, NULL, NULL, '5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8', NULL, 0, NULL, NULL, 'rossini', 'c5b75db1-fce7-470f-b780-3b9934d82a9d', NULL),\n-('74cd8ece-715a-44a4-a736-e17b46c4e7e6', TIMESTAMP '2010-10-20 11:00:00', 'admin', TIMESTAMP '2010-10-20 11:00:00', 'admin', 'active', NULL, 'SHA1', NULL, NULL, NULL, NULL, NULL, '5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8', NULL, 0, NULL, NULL, 'verdi', 'e4c28e7a-9dbf-4ee7-9441-93812a0d4a28', NULL),\n-('b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee', TIMESTAMP '2010-10-20 11:00:00', 'admin', TIMESTAMP '2010-10-20 11:00:00', 'admin', 'active', NULL, 'SHA1', NULL, NULL, NULL, NULL, NULL, '5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8', NULL, 0, NULL, NULL, 'vivaldi', 'e4c28e7a-9dbf-4ee7-9441-93812a0d4a28', NULL),\n-('c9b2dec2-00a7-4855-97c0-d854842b4b24', TIMESTAMP '2010-10-20 11:00:00', 'admin', TIMESTAMP '2010-10-20 11:00:00', 'admin', 'active', NULL, 'SHA1', NULL, NULL, NULL, NULL, NULL, '5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8', NULL, 0, NULL, NULL, 'bellini', 'e4c28e7a-9dbf-4ee7-9441-93812a0d4a28', NULL),\n-('823074dc-d280-436d-a7dd-07399fae48ec', TIMESTAMP '2010-10-20 11:00:00', 'admin', TIMESTAMP '2010-10-20 11:00:00', 'admin', 'active', NULL, 'SHA1', NULL, NULL, NULL, NULL, NULL, '5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8', NULL, 0, NULL, NULL, 'puccini', 'e4c28e7a-9dbf-4ee7-9441-93812a0d4a28', NULL);              \n+INSERT INTO PUBLIC.SYNCOPEUSER(ID, CREATIONDATE, CREATOR, LASTCHANGEDATE, LASTMODIFIER, STATUS, WORKFLOWID, CHANGEPWDDATE, CIPHERALGORITHM, FAILEDLOGINS, LASTLOGINDATE, MUSTCHANGEPASSWORD, PASSWORD, SECURITYANSWER, SUSPENDED, TOKEN, TOKENEXPIRETIME, USERNAME, REALM_ID, SECURITYQUESTION_ID) VALUES\n+('1417acbe-cbf6-4277-9372-e75e04f97000', TIMESTAMP '2010-10-20 11:00:00', 'admin', TIMESTAMP '2010-10-20 11:00:00', 'admin', 'active', '4', NULL, 'SHA1', NULL, NULL, NULL, '5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8', NULL, 0, NULL, NULL, 'rossini', 'c5b75db1-fce7-470f-b780-3b9934d82a9d', NULL),\n+('74cd8ece-715a-44a4-a736-e17b46c4e7e6', TIMESTAMP '2010-10-20 11:00:00', 'admin', TIMESTAMP '2010-10-20 11:00:00', 'admin', 'active', '6', NULL, 'SHA1', NULL, NULL, NULL, '5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8', NULL, 0, NULL, NULL, 'verdi', 'e4c28e7a-9dbf-4ee7-9441-93812a0d4a28', NULL),\n+('b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee', TIMESTAMP '2010-10-20 11:00:00', 'admin', TIMESTAMP '2010-10-20 11:00:00', 'admin', 'active', '8', NULL, 'SHA1', NULL, NULL, NULL, '5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8', NULL, 0, NULL, NULL, 'vivaldi', 'e4c28e7a-9dbf-4ee7-9441-93812a0d4a28', NULL),\n+('c9b2dec2-00a7-4855-97c0-d854842b4b24', TIMESTAMP '2010-10-20 11:00:00', 'admin', TIMESTAMP '2010-10-20 11:00:00', 'admin', 'active', '10', NULL, 'SHA1', NULL, NULL, NULL, '5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8', NULL, 0, NULL, NULL, 'bellini', 'e4c28e7a-9dbf-4ee7-9441-93812a0d4a28', NULL),\n+('823074dc-d280-436d-a7dd-07399fae48ec', TIMESTAMP '2010-10-20 11:00:00', 'admin', TIMESTAMP '2010-10-20 11:00:00', 'admin', 'active', '12', NULL, 'SHA1', NULL, NULL, NULL, '5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8', NULL, 0, NULL, NULL, 'puccini', 'e4c28e7a-9dbf-4ee7-9441-93812a0d4a28', NULL);              \n CREATE MEMORY TABLE PUBLIC.SYNCOPEUSER_ANYTYPECLASS(\n     USER_ID VARCHAR(36),\n     ANYTYPECLASS_ID VARCHAR(255)"},{"sha":"173ffd47f471004b2822843945e86032b4e3483e","filename":"core/upgrade/src/test/resources/testJDBCEnv.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/41816c85027bbed8407be1a365a3f2381632811e/core%2Fupgrade%2Fsrc%2Ftest%2Fresources%2FtestJDBCEnv.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/41816c85027bbed8407be1a365a3f2381632811e/core%2Fupgrade%2Fsrc%2Ftest%2Fresources%2FtestJDBCEnv.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fupgrade%2Fsrc%2Ftest%2Fresources%2FtestJDBCEnv.xml?ref=41816c85027bbed8407be1a365a3f2381632811e","patch":"@@ -46,8 +46,8 @@ under the License.\n     <property name=\"dataSource\" ref=\"syncope20DataSource\"/>\n     <property name=\"databasePopulator\">\n       <bean class=\"org.springframework.jdbc.datasource.init.ResourceDatabasePopulator\">\n-        <property name=\"continueOnError\" value=\"true\"/>\n-        <property name=\"ignoreFailedDrops\" value=\"true\"/>\n+        <property name=\"continueOnError\" value=\"false\"/>\n+        <property name=\"ignoreFailedDrops\" value=\"false\"/>\n         <property name=\"sqlScriptEncoding\" value=\"UTF-8\"/>\n         <property name=\"scripts\">\n           <array>"}]}