{"sha":"94708a3eed564f6bc33953075d7ac423a4ec167d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjk0NzA4YTNlZWQ1NjRmNmJjMzM5NTMwNzVkN2FjNDIzYTRlYzE2N2Q=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-28T14:26:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-28T14:27:04Z"},"message":"[SYNCOPE-1129] New interface JWTSSOProvider with default impl SyncopeJWTSSOProvider + docs","tree":{"sha":"29f27fea4c65a5cb7e93b99f7f494dab2d669ec7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/29f27fea4c65a5cb7e93b99f7f494dab2d669ec7"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/94708a3eed564f6bc33953075d7ac423a4ec167d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/94708a3eed564f6bc33953075d7ac423a4ec167d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/94708a3eed564f6bc33953075d7ac423a4ec167d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/94708a3eed564f6bc33953075d7ac423a4ec167d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"653afac686cc10a13bdd191b807b8f90e0b84e25","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/653afac686cc10a13bdd191b807b8f90e0b84e25","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/653afac686cc10a13bdd191b807b8f90e0b84e25"}],"stats":{"total":322,"additions":271,"deletions":51},"files":[{"sha":"4a716243e4fda8ba885c1b898837d5e7299a06d9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/info/PlatformInfo.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/94708a3eed564f6bc33953075d7ac423a4ec167d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/94708a3eed564f6bc33953075d7ac423a4ec167d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java?ref=94708a3eed564f6bc33953075d7ac423a4ec167d","patch":"@@ -63,6 +63,8 @@ public class PlatformInfo extends AbstractBaseBean {\n \n     private final Set<String> entitlements = new HashSet<>();\n \n+    private final Set<String> jwtSSOProviders = new HashSet<>();\n+\n     private final Set<String> reportletConfs = new HashSet<>();\n \n     private final Set<String> accountRules = new HashSet<>();\n@@ -165,6 +167,13 @@ public Set<String> getEntitlements() {\n         return entitlements;\n     }\n \n+    @XmlElementWrapper(name = \"jwtSSOProviders\")\n+    @XmlElement(name = \"jwtSSOProvider\")\n+    @JsonProperty(\"jwtSSOProviders\")\n+    public Set<String> getJwtSSOProviders() {\n+        return jwtSSOProviders;\n+    }\n+\n     @XmlElementWrapper(name = \"reportletConfs\")\n     @XmlElement(name = \"reportletConf\")\n     @JsonProperty(\"reportletConfs\")"},{"sha":"2c3d1482ca2aeb9be14b0b7b8c12d7641998d3c8","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=94708a3eed564f6bc33953075d7ac423a4ec167d","patch":"@@ -183,6 +183,7 @@ public PlatformInfo platform() {\n                 PLATFORM_INFO.setPasswordGenerator(AopUtils.getTargetClass(passwordGenerator).getName());\n                 PLATFORM_INFO.setAnySearchDAO(AopUtils.getTargetClass(anySearchDAO).getName());\n \n+                PLATFORM_INFO.getJwtSSOProviders().addAll(implLookup.getClassNames(Type.JWT_SSO_PROVIDER));\n                 PLATFORM_INFO.getReportletConfs().addAll(implLookup.getClassNames(Type.REPORTLET_CONF));\n                 PLATFORM_INFO.getAccountRules().addAll(implLookup.getClassNames(Type.ACCOUNT_RULE_CONF));\n                 PLATFORM_INFO.getPasswordRules().addAll(implLookup.getClassNames(Type.PASSWORD_RULE_CONF));"},{"sha":"1fa00437e3c004b2faef9e92089fe8a2f19cf399","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=94708a3eed564f6bc33953075d7ac423a4ec167d","patch":"@@ -51,6 +51,7 @@\n import org.apache.syncope.core.provisioning.java.pushpull.PlainAttrsPullCorrelationRule;\n import org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate;\n import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n+import org.apache.syncope.core.spring.security.JWTSSOProvider;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.config.BeanDefinition;\n@@ -69,6 +70,8 @@ public class ClassPathScanImplementationLookup implements ImplementationLookup {\n \n     private Map<Type, Set<String>> classNames;\n \n+    private Set<Class<?>> jwtSSOProviderClasses;\n+\n     private Map<Class<? extends ReportletConf>, Class<? extends Reportlet>> reportletClasses;\n \n     private Map<Class<? extends AccountRuleConf>, Class<? extends AccountRule>> accountRuleClasses;\n@@ -97,11 +100,13 @@ public void load() {\n             classNames.put(type, new HashSet<String>());\n         }\n \n+        jwtSSOProviderClasses = new HashSet<>();\n         reportletClasses = new HashMap<>();\n         accountRuleClasses = new HashMap<>();\n         passwordRuleClasses = new HashMap<>();\n \n         ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n+        scanner.addIncludeFilter(new AssignableTypeFilter(JWTSSOProvider.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(Reportlet.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(AccountRule.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(PasswordRule.class));\n@@ -122,6 +127,11 @@ public void load() {\n                         bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n                 boolean isAbstractClazz = Modifier.isAbstract(clazz.getModifiers());\n \n+                if (JWTSSOProvider.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n+                    classNames.get(Type.JWT_SSO_PROVIDER).add(clazz.getName());\n+                    jwtSSOProviderClasses.add(clazz);\n+                }\n+\n                 if (Reportlet.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n                     ReportletConfClass annotation = clazz.getAnnotation(ReportletConfClass.class);\n                     if (annotation == null) {\n@@ -215,6 +225,11 @@ public Set<String> getClassNames(final Type type) {\n         return classNames.get(type);\n     }\n \n+    @Override\n+    public Set<Class<?>> getJWTSSOProviderClasses() {\n+        return jwtSSOProviderClasses;\n+    }\n+\n     @Override\n     public Class<? extends Reportlet> getReportletClass(\n             final Class<? extends ReportletConf> reportletConfClass) {"},{"sha":"2d3438fc3e7b3fef446fa515326a513616d013df","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/ImplementationLookup.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java?ref=94708a3eed564f6bc33953075d7ac423a4ec167d","patch":"@@ -30,6 +30,7 @@ public interface ImplementationLookup extends SyncopeLoader {\n \n     enum Type {\n \n+        JWT_SSO_PROVIDER,\n         REPORTLET_CONF,\n         ACCOUNT_RULE_CONF,\n         PASSWORD_RULE_CONF,\n@@ -48,6 +49,8 @@ enum Type {\n \n     Set<String> getClassNames(Type type);\n \n+    Set<Class<?>> getJWTSSOProviderClasses();\n+\n     Class<? extends Reportlet> getReportletClass(Class<? extends ReportletConf> reportletConfClass);\n \n     Class<? extends AccountRule> getAccountRuleClass(Class<? extends AccountRuleConf> accountRuleConfClass);"},{"sha":"4a785ffae4d364e39e174afdf189d222cf8db155","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyImplementationLookup.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java?ref=94708a3eed564f6bc33953075d7ac423a4ec167d","patch":"@@ -49,6 +49,11 @@ public Set<String> getClassNames(final Type type) {\n         return Collections.emptySet();\n     }\n \n+    @Override\n+    public Set<Class<?>> getJWTSSOProviderClasses() {\n+        return Collections.emptySet();\n+    }\n+\n     @Override\n     public Class<Reportlet> getReportletClass(\n             final Class<? extends ReportletConf> reportletConfClass) {"},{"sha":"011364cf8ae43d91e020b0502cf8b6ac67a25851","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DummyImplementationLookup.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java?ref=94708a3eed564f6bc33953075d7ac423a4ec167d","patch":"@@ -49,6 +49,11 @@ public Set<String> getClassNames(final Type type) {\n         return Collections.emptySet();\n     }\n \n+    @Override\n+    public Set<Class<?>> getJWTSSOProviderClasses() {\n+        return Collections.emptySet();\n+    }\n+\n     @Override\n     public Class<Reportlet> getReportletClass(\n             final Class<? extends ReportletConf> reportletConfClass) {"},{"sha":"d0e69f80b73a7d201bab633b4c8c66fe16b23229","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":35,"deletions":2,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=94708a3eed564f6bc33953075d7ac423a4ec167d","patch":"@@ -39,6 +39,7 @@\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n@@ -64,10 +65,13 @@\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;\n import org.springframework.security.authentication.AuthenticationServiceException;\n import org.springframework.security.authentication.DisabledException;\n@@ -82,7 +86,7 @@\n  * @see UsernamePasswordAuthenticationProvider\n  * @see SyncopeAuthenticationDetails\n  */\n-public class AuthDataAccessor {\n+public class AuthDataAccessor implements InitializingBean {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AuthDataAccessor.class);\n \n@@ -134,6 +138,30 @@ public class AuthDataAccessor {\n     @Autowired\n     protected MappingManager mappingManager;\n \n+    @Autowired\n+    protected ImplementationLookup implementationLookup;\n+\n+    protected Map<String, JWTSSOProvider> jwtSSOProviders = new HashMap<>();\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        for (Class<?> clazz : implementationLookup.getJWTSSOProviderClasses()) {\n+            JWTSSOProvider jwtSSOProvider = (JWTSSOProvider) ApplicationContextProvider.getBeanFactory().\n+                    createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n+            jwtSSOProviders.put(jwtSSOProvider.getIssuer(), jwtSSOProvider);\n+        }\n+    }\n+\n+    public JWTSSOProvider getJWTSSOProvider(final String issuer) {\n+        JWTSSOProvider provider = jwtSSOProviders.get(issuer);\n+        if (provider == null) {\n+            throw new AuthenticationCredentialsNotFoundException(\n+                    \"Could not find any registered JWTSSOProvider for issuer \" + issuer);\n+        }\n+\n+        return provider;\n+    }\n+\n     @Transactional(readOnly = true)\n     public Domain findDomain(final String key) {\n         Domain domain = domainDAO.find(key);\n@@ -368,12 +396,17 @@ public Set<SyncopeGrantedAuthority> authenticate(final JWTAuthentication authent\n         if (adminUser.equals(accessToken.getOwner())) {\n             authorities = getAdminAuthorities();\n         } else {\n-            User user = userDAO.findByUsername(accessToken.getOwner());\n+            JWTSSOProvider jwtSSOProvider = getJWTSSOProvider(authentication.getClaims().getIssuer());\n+            User user = jwtSSOProvider.resolve(accessToken.getOwner());\n             if (user == null) {\n                 throw new AuthenticationCredentialsNotFoundException(\n                         \"Could not find user \" + accessToken.getOwner()\n                         + \" for JWT \" + authentication.getClaims().getTokenId());\n             }\n+            LOG.debug(\"JWT {} issued by {} resolved to user {}\",\n+                    authentication.getClaims().getTokenId(),\n+                    authentication.getClaims().getIssuer(),\n+                    user.getUsername());\n \n             if (BooleanUtils.isTrue(user.isSuspended())) {\n                 throw new DisabledException(\"User \" + user.getUsername() + \" is suspended\");"},{"sha":"a75b39e9e689cc25cd6f02625f5dbec2bce59d8b","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/DefaultCredentialChecker.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultCredentialChecker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultCredentialChecker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultCredentialChecker.java?ref=94708a3eed564f6bc33953075d7ac423a4ec167d","patch":"@@ -22,15 +22,18 @@\n import org.slf4j.LoggerFactory;\n \n /**\n- * This class provides some methods to check whether default credentials are being used, and\n- * logs a warning if they are.\n+ * Provides some methods to check whether default credentials are being used, and logs a warning if they are.\n  */\n public class DefaultCredentialChecker {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(DefaultCredentialChecker.class);\n \n     private static final String DEFAULT_JWS_KEY = \"ZW7pRixehFuNUtnY5Se47IemgMryTzazPPJ9CGX5LTCmsOJpOgHAQEuPQeV9A28f\";\n+\n     private static final String DEFAULT_ADMIN_PASSWORD = \"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\";\n+\n     private final boolean defaultAdminPasswordInUse;\n+\n     private final boolean defaultJwsKeyInUse;\n \n     public DefaultCredentialChecker(final String jwsKey, final String adminPassword) {\n@@ -41,14 +44,14 @@ public DefaultCredentialChecker(final String jwsKey, final String adminPassword)\n     public void checkIsDefaultJWSKeyInUse() {\n         if (defaultJwsKeyInUse) {\n             LOG.warn(\"The default jwsKey property is being used. \"\n-                     + \"This must be changed to avoid a security breach!\");\n+                    + \"This must be changed to avoid a security breach!\");\n         }\n     }\n \n     public void checkIsDefaultAdminPasswordInUse() {\n         if (defaultAdminPasswordInUse) {\n             LOG.warn(\"The default adminPassword property is being used. \"\n-                     + \"This must be changed to avoid a security breach!\");\n+                    + \"This must be changed to avoid a security breach!\");\n         }\n     }\n "},{"sha":"faf0576092377012ac87844c244848b8a9f3ab98","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthenticationFilter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationFilter.java?ref=94708a3eed564f6bc33953075d7ac423a4ec167d","patch":"@@ -26,7 +26,6 @@\n import javax.ws.rs.core.HttpHeaders;\n \n import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n-import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -54,7 +53,7 @@ public class JWTAuthenticationFilter extends OncePerRequestFilter {\n     private SyncopeAuthenticationDetailsSource authenticationDetailsSource;\n \n     @Autowired\n-    private JwsSignatureVerifier jwsSignatureVerifier;\n+    private AuthDataAccessor dataAccessor;\n \n     @Autowired\n     private DefaultCredentialChecker credentialChecker;\n@@ -99,7 +98,8 @@ protected void doFilterInternal(\n         try {\n             credentialChecker.checkIsDefaultJWSKeyInUse();\n \n-            if (!consumer.verifySignatureWith(jwsSignatureVerifier)) {\n+            JWTSSOProvider jwtSSOProvider = dataAccessor.getJWTSSOProvider(consumer.getJwtClaims().getIssuer());\n+            if (!consumer.verifySignatureWith(jwtSSOProvider)) {\n                 throw new BadCredentialsException(\"Invalid signature found in JWT\");\n             }\n "},{"sha":"b5a33531119052f6625760c88530c073809d5f03","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthenticationProvider.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java?ref=94708a3eed564f6bc33953075d7ac423a4ec167d","patch":"@@ -19,11 +19,9 @@\n package org.apache.syncope.core.spring.security;\n \n import java.util.Date;\n-import javax.annotation.Resource;\n import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.authentication.AuthenticationProvider;\n-import org.springframework.security.authentication.BadCredentialsException;\n import org.springframework.security.authentication.CredentialsExpiredException;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.AuthenticationException;\n@@ -34,9 +32,6 @@\n  */\n public class JWTAuthenticationProvider implements AuthenticationProvider {\n \n-    @Resource(name = \"jwtIssuer\")\n-    private String jwtIssuer;\n-\n     @Autowired\n     private AuthDataAccessor dataAccessor;\n \n@@ -45,8 +40,7 @@ public Authentication authenticate(final Authentication authentication) throws A\n         final JWTAuthentication jwtAuthentication = (JWTAuthentication) authentication;\n \n         AuthContextUtils.execWithAuthContext(\n-                jwtAuthentication.getDetails().getDomain(),\n-                new AuthContextUtils.Executable<Void>() {\n+                jwtAuthentication.getDetails().getDomain(), new AuthContextUtils.Executable<Void>() {\n \n             @Override\n             public Void exec() {\n@@ -69,10 +63,6 @@ public Void exec() {\n             throw new CredentialsExpiredException(\"JWT not valid yet\");\n         }\n \n-        if (!jwtIssuer.equals(claims.getIssuer())) {\n-            throw new BadCredentialsException(\"Invalid JWT issuer\");\n-        }\n-\n         jwtAuthentication.setAuthenticated(true);\n         return jwtAuthentication;\n     }"},{"sha":"63e708739e7bb033f3e717ffdfd9d1cc382ee812","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTSSOProvider.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTSSOProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTSSOProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTSSOProvider.java?ref=94708a3eed564f6bc33953075d7ac423a4ec167d","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring.security;\n+\n+import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+\n+/**\n+ * Enables a generic mechanism for JWT validation and subject resolution which allows to plug in implementations\n+ * recognizing JWT produced by third parties.\n+ */\n+public interface JWTSSOProvider extends JwsSignatureVerifier {\n+\n+    /**\n+     * Gives the identifier for the JWT issuer verified by this instance.\n+     *\n+     * @return identifier for the JWT issuer verified by this instance\n+     */\n+    String getIssuer();\n+\n+    /**\n+     * Attempts to resolve the subject from a given JWT into an internal user.\n+     *\n+     * @param jwtSubject subject from JWT claims\n+     * @return internal user matching the provided subject if found, otherwise null\n+     */\n+    User resolve(String jwtSubject);\n+}"},{"sha":"4cd1a9fc640bfa54ff3efe4d51c92df70cddcb1e","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeJWTSSOProvider.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeJWTSSOProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeJWTSSOProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeJWTSSOProvider.java?ref=94708a3eed564f6bc33953075d7ac423a4ec167d","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring.security;\n+\n+import javax.annotation.Resource;\n+import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n+import org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureVerifier;\n+import org.apache.cxf.rs.security.jose.jws.JwsHeaders;\n+import org.apache.cxf.rs.security.jose.jws.JwsSignatureProvider;\n+import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n+import org.apache.cxf.rs.security.jose.jws.JwsVerificationSignature;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * Default implementation for internal JWT validation.\n+ */\n+public class SyncopeJWTSSOProvider implements JWTSSOProvider, InitializingBean {\n+\n+    @Resource(name = \"jwtIssuer\")\n+    private String jwtIssuer;\n+\n+    @Resource(name = \"jwsKey\")\n+    private String jwsKey;\n+\n+    @Autowired\n+    private JwsSignatureProvider signatureProvider;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    private JwsSignatureVerifier delegate;\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        delegate = new HmacJwsSignatureVerifier(jwsKey.getBytes(), signatureProvider.getAlgorithm());\n+    }\n+\n+    @Override\n+    public String getIssuer() {\n+        return jwtIssuer;\n+    }\n+\n+    @Override\n+    public SignatureAlgorithm getAlgorithm() {\n+        return delegate.getAlgorithm();\n+    }\n+\n+    @Override\n+    public boolean verify(final JwsHeaders headers, final String unsignedText, final byte[] signature) {\n+        return delegate.verify(headers, unsignedText, signature);\n+    }\n+\n+    @Override\n+    public JwsVerificationSignature createJwsVerificationSignature(final JwsHeaders headers) {\n+        return delegate.createJwsVerificationSignature(headers);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public User resolve(final String jwtSubject) {\n+        return userDAO.findByUsername(jwtSubject);\n+    }\n+\n+}"},{"sha":"cc1445c3ae4b1fa40e33047e26589d6f0f28fc90","filename":"core/spring/src/main/resources/securityContext.xml","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fspring%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/94708a3eed564f6bc33953075d7ac423a4ec167d/core%2Fspring%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml?ref=94708a3eed564f6bc33953075d7ac423a4ec167d","patch":"@@ -50,16 +50,10 @@ under the License.\n   </bean>\n \n   <bean id=\"credentialChecker\" class=\"org.apache.syncope.core.spring.security.DefaultCredentialChecker\">\n-      <constructor-arg value=\"${jwsKey}\" index=\"0\"/>\n-      <constructor-arg value=\"${adminPassword}\" index=\"1\"/>\n+    <constructor-arg value=\"${jwsKey}\" index=\"0\"/>\n+    <constructor-arg value=\"${adminPassword}\" index=\"1\"/>\n   </bean>\n \n-  <bean id=\"jwsSignatureVerifier\" class=\"org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureVerifier\">\n-    <constructor-arg value=\"#{jwsKey.getBytes()}\" index=\"0\"/>\n-    <constructor-arg index=\"1\">\n-      <value type=\"org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm\">HS512</value>\n-    </constructor-arg>\n-  </bean>\n   <bean id=\"jwsSignatureProvider\" class=\"org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureProvider\">\n     <constructor-arg value=\"#{jwsKey.getBytes()}\" index=\"0\"/>\n     <constructor-arg index=\"1\">"},{"sha":"1ea360198c417357a868437664c7babb4a89246a","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":22,"deletions":8,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/94708a3eed564f6bc33953075d7ac423a4ec167d/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/94708a3eed564f6bc33953075d7ac423a4ec167d/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=94708a3eed564f6bc33953075d7ac423a4ec167d","patch":"@@ -31,11 +31,14 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import javax.annotation.Resource;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n+import org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureVerifier;\n import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n+import org.apache.cxf.rs.security.jose.jws.JwsSignatureProvider;\n import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -114,13 +117,14 @@\n import org.opensaml.saml.saml2.metadata.impl.SingleLogoutServiceBuilder;\n import org.opensaml.xmlsec.keyinfo.KeyInfoGenerator;\n import org.opensaml.xmlsec.keyinfo.impl.X509KeyInfoGeneratorFactory;\n+import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.security.authentication.BadCredentialsException;\n import org.springframework.stereotype.Component;\n \n @Component\n-public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {\n+public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> implements InitializingBean {\n \n     private static final Integer JWT_RELAY_STATE_DURATION = 5;\n \n@@ -136,9 +140,6 @@ public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {\n \n     private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();\n \n-    @Autowired\n-    private JwsSignatureVerifier jwsSignatureCerifier;\n-\n     @Autowired\n     private AccessTokenDataBinder accessTokenDataBinder;\n \n@@ -166,6 +167,19 @@ public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {\n     @Autowired\n     private SAML2ReaderWriter saml2rw;\n \n+    @Resource(name = \"jwsKey\")\n+    private String jwsKey;\n+\n+    @Autowired\n+    private JwsSignatureProvider jwsSignatureProvider;\n+\n+    private JwsSignatureVerifier jwsSignatureVerifier;\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        jwsSignatureVerifier = new HmacJwsSignatureVerifier(jwsKey.getBytes(), jwsSignatureProvider.getAlgorithm());\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n     public void getMetadata(final String spEntityID, final String urlContext, final OutputStream os) {\n         check();\n@@ -412,7 +426,7 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n \n         // 1. first checks for the provided relay state\n         JwsJwtCompactConsumer relayState = new JwsJwtCompactConsumer(response.getRelayState());\n-        if (!relayState.verifySignatureWith(jwsSignatureCerifier)) {\n+        if (!relayState.verifySignatureWith(jwsSignatureVerifier)) {\n             throw new IllegalArgumentException(\"Invalid signature found in Relay State\");\n         }\n         Boolean useDeflateEncoding = Boolean.valueOf(\n@@ -544,7 +558,7 @@ public SAML2RequestTO createLogoutRequest(final String accessToken, final String\n \n         // 1. fetch the current JWT used for Syncope authentication\n         JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(accessToken);\n-        if (!consumer.verifySignatureWith(jwsSignatureCerifier)) {\n+        if (!consumer.verifySignatureWith(jwsSignatureVerifier)) {\n             throw new IllegalArgumentException(\"Invalid signature found in Access Token\");\n         }\n \n@@ -624,7 +638,7 @@ public void validateLogoutResponse(final String accessToken, final SAML2Received\n \n         // 1. fetch the current JWT used for Syncope authentication\n         JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(accessToken);\n-        if (!consumer.verifySignatureWith(jwsSignatureCerifier)) {\n+        if (!consumer.verifySignatureWith(jwsSignatureVerifier)) {\n             throw new IllegalArgumentException(\"Invalid signature found in Access Token\");\n         }\n \n@@ -634,7 +648,7 @@ public void validateLogoutResponse(final String accessToken, final SAML2Received\n         if (StringUtils.isNotBlank(response.getRelayState())) {\n             // first checks for the provided relay state, if available\n             relayState = new JwsJwtCompactConsumer(response.getRelayState());\n-            if (!relayState.verifySignatureWith(jwsSignatureCerifier)) {\n+            if (!relayState.verifySignatureWith(jwsSignatureVerifier)) {\n                 throw new IllegalArgumentException(\"Invalid signature found in Relay State\");\n             }\n             useDeflateEncoding = Boolean.valueOf("},{"sha":"4e76d494ed01b9246a17011ce6dfbb868a972b79","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/94708a3eed564f6bc33953075d7ac423a4ec167d/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/94708a3eed564f6bc33953075d7ac423a4ec167d/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=94708a3eed564f6bc33953075d7ac423a4ec167d","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n@@ -61,6 +62,7 @@\n import org.apache.syncope.core.provisioning.java.pushpull.LDAPMembershipPullActions;\n import org.apache.syncope.core.provisioning.java.pushpull.LDAPPasswordPullActions;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.SyncopeJWTSSOProvider;\n import org.springframework.aop.support.AopUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n \n@@ -222,6 +224,11 @@ public Set<String> getClassNames(final Type type) {\n         return CLASS_NAMES.get(type);\n     }\n \n+    @Override\n+    public Set<Class<?>> getJWTSSOProviderClasses() {\n+        return Collections.<Class<?>>singleton(SyncopeJWTSSOProvider.class);\n+    }\n+\n     @Override\n     public Class<? extends Reportlet> getReportletClass(\n             final Class<? extends ReportletConf> reportletConfClass) {"},{"sha":"e01bdf42380ef5ddd430e9ba56b7c84be2ee3d08","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/JWTITCase.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/94708a3eed564f6bc33953075d7ac423a4ec167d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/94708a3eed564f6bc33953075d7ac423a4ec167d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java?ref=94708a3eed564f6bc33953075d7ac423a4ec167d","patch":"@@ -51,12 +51,12 @@\n import org.junit.Test;\n \n /**\n- * Some tests for JWT Tokens\n+ * Some tests for JWT Tokens.\n  */\n public class JWTITCase extends AbstractITCase {\n \n     @Test\n-    public void testGetJWTToken() throws ParseException {\n+    public void getJWTToken() throws ParseException {\n         // Get the token\n         SyncopeClient localClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n         AccessTokenService accessTokenService = localClient.getService(AccessTokenService.class);\n@@ -92,7 +92,7 @@ public void testGetJWTToken() throws ParseException {\n         assertTrue(new Date(issuedAt).before(now));\n \n         // Validate subject + issuer\n-        assertEquals(\"admin\", consumer.getJwtClaims().getSubject());\n+        assertEquals(ADMIN_UNAME, consumer.getJwtClaims().getSubject());\n         assertEquals(JWT_ISSUER, consumer.getJwtClaims().getIssuer());\n \n         // Verify NotBefore\n@@ -102,7 +102,7 @@ public void testGetJWTToken() throws ParseException {\n     }\n \n     @Test\n-    public void testQueryUsingToken() throws ParseException {\n+    public void queryUsingToken() throws ParseException {\n         // Get the token\n         SyncopeClient localClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n         AccessTokenService accessTokenService = localClient.getService(AccessTokenService.class);\n@@ -128,7 +128,7 @@ public void testQueryUsingToken() throws ParseException {\n     }\n \n     @Test\n-    public void testTokenValidation() throws ParseException {\n+    public void tokenValidation() throws ParseException {\n         // Get an initial token\n         SyncopeClient localClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n         AccessTokenService accessTokenService = localClient.getService(AccessTokenService.class);\n@@ -148,7 +148,7 @@ public void testTokenValidation() throws ParseException {\n \n         JwtClaims jwtClaims = new JwtClaims();\n         jwtClaims.setTokenId(tokenId);\n-        jwtClaims.setSubject(\"admin\");\n+        jwtClaims.setSubject(ADMIN_UNAME);\n         jwtClaims.setIssuedAt(now.getTime());\n         jwtClaims.setIssuer(JWT_ISSUER);\n         jwtClaims.setExpiryTime(expiry.getTime().getTime());\n@@ -168,7 +168,7 @@ public void testTokenValidation() throws ParseException {\n     }\n \n     @Test\n-    public void testInvalidIssuer() throws ParseException {\n+    public void invalidIssuer() throws ParseException {\n         // Get an initial token\n         SyncopeClient localClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n         AccessTokenService accessTokenService = localClient.getService(AccessTokenService.class);\n@@ -188,7 +188,7 @@ public void testInvalidIssuer() throws ParseException {\n \n         JwtClaims jwtClaims = new JwtClaims();\n         jwtClaims.setTokenId(tokenId);\n-        jwtClaims.setSubject(\"admin\");\n+        jwtClaims.setSubject(ADMIN_UNAME);\n         jwtClaims.setIssuedAt(now.getTime());\n         jwtClaims.setIssuer(\"UnknownIssuer\");\n         jwtClaims.setExpiryTime(expiry.getTime().getTime());\n@@ -213,7 +213,7 @@ public void testInvalidIssuer() throws ParseException {\n     }\n \n     @Test\n-    public void testExpiredToken() throws ParseException {\n+    public void expiredToken() throws ParseException {\n         // Get an initial token\n         SyncopeClient localClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n         AccessTokenService accessTokenService = localClient.getService(AccessTokenService.class);\n@@ -233,7 +233,7 @@ public void testExpiredToken() throws ParseException {\n \n         JwtClaims jwtClaims = new JwtClaims();\n         jwtClaims.setTokenId(tokenId);\n-        jwtClaims.setSubject(\"admin\");\n+        jwtClaims.setSubject(ADMIN_UNAME);\n         jwtClaims.setIssuedAt(now.getTime());\n         jwtClaims.setIssuer(JWT_ISSUER);\n         jwtClaims.setExpiryTime(now.getTime() - 5000L);\n@@ -258,7 +258,7 @@ public void testExpiredToken() throws ParseException {\n     }\n \n     @Test\n-    public void testNotBefore() throws ParseException {\n+    public void notBefore() throws ParseException {\n         // Get an initial token\n         SyncopeClient localClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n         AccessTokenService accessTokenService = localClient.getService(AccessTokenService.class);\n@@ -278,7 +278,7 @@ public void testNotBefore() throws ParseException {\n \n         JwtClaims jwtClaims = new JwtClaims();\n         jwtClaims.setTokenId(tokenId);\n-        jwtClaims.setSubject(\"admin\");\n+        jwtClaims.setSubject(ADMIN_UNAME);\n         jwtClaims.setIssuedAt(now.getTime());\n         jwtClaims.setIssuer(JWT_ISSUER);\n         jwtClaims.setExpiryTime(expiry.getTime().getTime());\n@@ -303,7 +303,7 @@ public void testNotBefore() throws ParseException {\n     }\n \n     @Test\n-    public void testNoneSignature() throws ParseException {\n+    public void noneSignature() throws ParseException {\n         // Get an initial token\n         SyncopeClient localClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n         AccessTokenService accessTokenService = localClient.getService(AccessTokenService.class);\n@@ -341,7 +341,7 @@ public void testNoneSignature() throws ParseException {\n     }\n \n     @Test\n-    public void testUnknownId() throws ParseException {\n+    public void unknownId() throws ParseException {\n         // Get an initial token\n         SyncopeClient localClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n         AccessTokenService accessTokenService = localClient.getService(AccessTokenService.class);\n@@ -359,7 +359,7 @@ public void testUnknownId() throws ParseException {\n \n         JwtClaims jwtClaims = new JwtClaims();\n         jwtClaims.setTokenId(UUID.randomUUID().toString());\n-        jwtClaims.setSubject(\"admin\");\n+        jwtClaims.setSubject(ADMIN_UNAME);\n         jwtClaims.setIssuedAt(now.getTime());\n         jwtClaims.setIssuer(JWT_ISSUER);\n         jwtClaims.setExpiryTime(expiry.getTime().getTime());"},{"sha":"52449e2846570a46789b3c267e39367745baea03","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/94708a3eed564f6bc33953075d7ac423a4ec167d/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/94708a3eed564f6bc33953075d7ac423a4ec167d/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc?ref=94708a3eed564f6bc33953075d7ac423a4ec167d","patch":"@@ -192,6 +192,7 @@ Besides replacing existing classes as explained <<override-behavior,above>>, new\n * <<workflow-adapters,workflow adapters>>\n * <<provisioning-managers,provisioning managers>>\n * <<notifications,notification recipient providers>>\n+* <<jwtssoprovider,JWT SSO providers>>\n \n [[new-rest-endpoints]]\n [TIP]"},{"sha":"ea317f985f229f78c59cdb3226dca7499f634b9b","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/94708a3eed564f6bc33953075d7ac423a4ec167d/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Frestfulservices.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/94708a3eed564f6bc33953075d7ac423a4ec167d/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Frestfulservices.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Frestfulservices.adoc?ref=94708a3eed564f6bc33953075d7ac423a4ec167d","patch":"@@ -72,6 +72,18 @@ while normally not needed, this configuration can be anyway customized via the <\n https://en.wikipedia.org/wiki/Basic_access_authentication[HTTP Basic Authentication] is set for use by default.\n ====\n \n+===== JWTSSOProvider\n+\n+Besides validating and accepting the JSON Web Tokens generated during the authentication process as sketched above,\n+Apache Syncope can be enabled to cope with tokens generated by third parties, by providing implementations of the\n+ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTSSOProvider.java[JWTSSOProvider^]\n+endif::[]\n+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n+https://github.com/apache/syncope/tree/master/core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTSSOProvider.java[JWTSSOProvider^]\n+endif::[]\n+interface.\n+\n [[authorization-summary]]\n .Authorization Summary\n ****"}]}