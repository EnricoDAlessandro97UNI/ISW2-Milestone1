{"sha":"2b4053df14d74e47c55ced76b713fc1baba0abda","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJiNDA1M2RmMTRkNzRlNDdjNTVjZWQ3NmI3MTNmYzFiYWJhMGFiZGE=","commit":{"author":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2017-07-28T13:50:03Z"},"committer":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2017-07-28T13:50:03Z"},"message":"SYNCOPE-1179 - JWT \"Date\" claims are interpreted using milliseconds instead of seconds","tree":{"sha":"370109f7a26cc7c7d6181a406a0a89e5aa9551a6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/370109f7a26cc7c7d6181a406a0a89e5aa9551a6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2b4053df14d74e47c55ced76b713fc1baba0abda","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2b4053df14d74e47c55ced76b713fc1baba0abda","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2b4053df14d74e47c55ced76b713fc1baba0abda","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2b4053df14d74e47c55ced76b713fc1baba0abda/comments","author":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"committer":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"parents":[{"sha":"b41675a335a7d6b4d297f0cd332738c21a6c29ba","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b41675a335a7d6b4d297f0cd332738c21a6c29ba","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b41675a335a7d6b4d297f0cd332738c21a6c29ba"}],"stats":{"total":86,"additions":48,"deletions":38},"files":[{"sha":"d886db6c349a2090ac5395fe7e82e75850b050aa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java","status":"modified","additions":13,"deletions":11,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2b4053df14d74e47c55ced76b713fc1baba0abda/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2b4053df14d74e47c55ced76b713fc1baba0abda/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java?ref=2b4053df14d74e47c55ced76b713fc1baba0abda","patch":"@@ -87,16 +87,16 @@ public Triple<String, String, Date> generateJWT(\n \n         credentialChecker.checkIsDefaultJWSKeyInUse();\n \n-        Date now = new Date();\n-        Date expiry = new Date(now.getTime() + 60L * 1000L * duration);\n+        long currentTime = new Date().getTime() / 1000L;\n+        long expiryTime = currentTime + 60L * duration;\n \n         JwtClaims jwtClaims = new JwtClaims();\n         jwtClaims.setTokenId(UUID_GENERATOR.generate().toString());\n         jwtClaims.setSubject(subject);\n-        jwtClaims.setIssuedAt(now.getTime());\n+        jwtClaims.setIssuedAt(currentTime);\n         jwtClaims.setIssuer(jwtIssuer);\n-        jwtClaims.setExpiryTime(expiry.getTime());\n-        jwtClaims.setNotBefore(now.getTime());\n+        jwtClaims.setExpiryTime(expiryTime);\n+        jwtClaims.setNotBefore(currentTime);\n         for (Map.Entry<String, Object> entry : claims.entrySet()) {\n             jwtClaims.setClaim(entry.getKey(), entry.getValue());\n         }\n@@ -107,7 +107,7 @@ public Triple<String, String, Date> generateJWT(\n \n         String signed = producer.signWith(jwsSignatureProvider);\n \n-        return Triple.of(jwtClaims.getTokenId(), signed, expiry);\n+        return Triple.of(jwtClaims.getTokenId(), signed, new Date(expiryTime * 1000L));\n     }\n \n     @Override\n@@ -164,10 +164,11 @@ public Pair<String, Date> update(final AccessToken accessToken) {\n \n         credentialChecker.checkIsDefaultJWSKeyInUse();\n \n-        Date now = new Date();\n         long duration = confDAO.find(\"jwt.lifetime.minutes\", 120L);\n-        Date expiry = new Date(now.getTime() + 60L * 1000L * duration);\n-        consumer.getJwtClaims().setExpiryTime(expiry.getTime());\n+        long currentTime = new Date().getTime() / 1000L;\n+        long expiry = currentTime + 60L * duration;\n+        consumer.getJwtClaims().setExpiryTime(expiry);\n+        Date expiryDate = new Date(expiry * 1000L);\n \n         JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, jwsSignatureProvider.getAlgorithm());\n         JwtToken token = new JwtToken(jwsHeaders, consumer.getJwtClaims());\n@@ -176,7 +177,8 @@ public Pair<String, Date> update(final AccessToken accessToken) {\n         String body = producer.signWith(jwsSignatureProvider);\n \n         accessToken.setBody(body);\n-        accessToken.setExpiryTime(expiry);\n+        // AccessToken stores expiry time in milliseconds, as opposed to seconds for the JWT tokens.\n+        accessToken.setExpiryTime(expiryDate);\n \n         if (!adminUser.equals(accessToken.getOwner())) {\n             try {\n@@ -190,7 +192,7 @@ public Pair<String, Date> update(final AccessToken accessToken) {\n \n         accessTokenDAO.save(accessToken);\n \n-        return Pair.of(body, expiry);\n+        return Pair.of(body, expiryDate);\n     }\n \n     @Override"},{"sha":"2741d863200a9229574446b68188ec5411b3c857","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthenticationProvider.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2b4053df14d74e47c55ced76b713fc1baba0abda/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2b4053df14d74e47c55ced76b713fc1baba0abda/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java?ref=2b4053df14d74e47c55ced76b713fc1baba0abda","patch":"@@ -57,13 +57,13 @@ public Void exec() {\n         Long referenceTime = new Date().getTime();\n \n         Long expiryTime = claims.getExpiryTime();\n-        if (expiryTime == null || expiryTime < referenceTime) {\n+        if (expiryTime == null || (expiryTime * 1000L) < referenceTime) {\n             dataAccessor.removeExpired(claims.getTokenId());\n             throw new CredentialsExpiredException(\"JWT is expired\");\n         }\n \n         Long notBefore = claims.getNotBefore();\n-        if (notBefore == null || notBefore > referenceTime) {\n+        if (notBefore == null || (notBefore * 1000L) > referenceTime) {\n             throw new CredentialsExpiredException(\"JWT not valid yet\");\n         }\n "},{"sha":"93ae426c3fe76f9ab8f12b075bda7daad5b95184","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/JWTITCase.java","status":"modified","additions":33,"deletions":25,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2b4053df14d74e47c55ced76b713fc1baba0abda/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2b4053df14d74e47c55ced76b713fc1baba0abda/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java?ref=2b4053df14d74e47c55ced76b713fc1baba0abda","patch":"@@ -86,7 +86,7 @@ public void getJWTToken() throws ParseException {\n         assertNotNull(expiryTime);\n \n         SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssXXX\");\n-        Date tokenDate = dateFormat.parse(dateFormat.format(new Date(expiryTime)));\n+        Date tokenDate = dateFormat.parse(dateFormat.format(new Date(expiryTime * 1000L)));\n         Date parsedDate = dateFormat.parse(expiry);\n \n         assertEquals(tokenDate, parsedDate);\n@@ -147,6 +147,7 @@ public void tokenValidation() throws ParseException {\n \n         // Create a new token using the Id of the first token\n         Date now = new Date();\n+        long currentTime = now.getTime() / 1000L;\n \n         Calendar expiry = Calendar.getInstance();\n         expiry.setTime(now);\n@@ -155,10 +156,10 @@ public void tokenValidation() throws ParseException {\n         JwtClaims jwtClaims = new JwtClaims();\n         jwtClaims.setTokenId(tokenId);\n         jwtClaims.setSubject(ADMIN_UNAME);\n-        jwtClaims.setIssuedAt(now.getTime());\n+        jwtClaims.setIssuedAt(currentTime);\n         jwtClaims.setIssuer(JWT_ISSUER);\n-        jwtClaims.setExpiryTime(expiry.getTime().getTime());\n-        jwtClaims.setNotBefore(now.getTime());\n+        jwtClaims.setExpiryTime(expiry.getTime().getTime() / 1000L);\n+        jwtClaims.setNotBefore(currentTime);\n \n         JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n@@ -187,6 +188,7 @@ public void invalidIssuer() throws ParseException {\n \n         // Create a new token using the Id of the first token\n         Date now = new Date();\n+        long currentTime = now.getTime() / 1000L;\n \n         Calendar expiry = Calendar.getInstance();\n         expiry.setTime(now);\n@@ -195,10 +197,10 @@ public void invalidIssuer() throws ParseException {\n         JwtClaims jwtClaims = new JwtClaims();\n         jwtClaims.setTokenId(tokenId);\n         jwtClaims.setSubject(ADMIN_UNAME);\n-        jwtClaims.setIssuedAt(now.getTime());\n+        jwtClaims.setIssuedAt(currentTime);\n         jwtClaims.setIssuer(\"UnknownIssuer\");\n-        jwtClaims.setExpiryTime(expiry.getTime().getTime());\n-        jwtClaims.setNotBefore(now.getTime());\n+        jwtClaims.setExpiryTime(expiry.getTime().getTime() / 1000L);\n+        jwtClaims.setNotBefore(currentTime);\n \n         JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n@@ -232,6 +234,7 @@ public void expiredToken() throws ParseException {\n \n         // Create a new token using the Id of the first token\n         Date now = new Date();\n+        long currentTime = now.getTime() / 1000L;\n \n         Calendar expiry = Calendar.getInstance();\n         expiry.setTime(now);\n@@ -240,10 +243,10 @@ public void expiredToken() throws ParseException {\n         JwtClaims jwtClaims = new JwtClaims();\n         jwtClaims.setTokenId(tokenId);\n         jwtClaims.setSubject(ADMIN_UNAME);\n-        jwtClaims.setIssuedAt(now.getTime());\n+        jwtClaims.setIssuedAt(currentTime);\n         jwtClaims.setIssuer(JWT_ISSUER);\n-        jwtClaims.setExpiryTime(now.getTime() - 5000L);\n-        jwtClaims.setNotBefore(now.getTime());\n+        jwtClaims.setExpiryTime((now.getTime() - 5000L) / 1000L);\n+        jwtClaims.setNotBefore(currentTime);\n \n         JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n@@ -277,6 +280,7 @@ public void notBefore() throws ParseException {\n \n         // Create a new token using the Id of the first token\n         Date now = new Date();\n+        long currentTime = now.getTime() / 1000L;\n \n         Calendar expiry = Calendar.getInstance();\n         expiry.setTime(now);\n@@ -285,10 +289,10 @@ public void notBefore() throws ParseException {\n         JwtClaims jwtClaims = new JwtClaims();\n         jwtClaims.setTokenId(tokenId);\n         jwtClaims.setSubject(ADMIN_UNAME);\n-        jwtClaims.setIssuedAt(now.getTime());\n+        jwtClaims.setIssuedAt(currentTime);\n         jwtClaims.setIssuer(JWT_ISSUER);\n-        jwtClaims.setExpiryTime(expiry.getTime().getTime());\n-        jwtClaims.setNotBefore(now.getTime() + 60000L);\n+        jwtClaims.setExpiryTime(expiry.getTime().getTime() / 1000L);\n+        jwtClaims.setNotBefore(currentTime + 60L);\n \n         JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n@@ -358,6 +362,7 @@ public void unknownId() throws ParseException {\n \n         // Create a new token using an unknown Id\n         Date now = new Date();\n+        long currentTime = now.getTime() / 1000L;\n \n         Calendar expiry = Calendar.getInstance();\n         expiry.setTime(now);\n@@ -366,10 +371,10 @@ public void unknownId() throws ParseException {\n         JwtClaims jwtClaims = new JwtClaims();\n         jwtClaims.setTokenId(UUID.randomUUID().toString());\n         jwtClaims.setSubject(ADMIN_UNAME);\n-        jwtClaims.setIssuedAt(now.getTime());\n+        jwtClaims.setIssuedAt(currentTime);\n         jwtClaims.setIssuer(JWT_ISSUER);\n-        jwtClaims.setExpiryTime(expiry.getTime().getTime());\n-        jwtClaims.setNotBefore(now.getTime());\n+        jwtClaims.setExpiryTime(expiry.getTime().getTime() / 1000L);\n+        jwtClaims.setNotBefore(currentTime);\n \n         JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n@@ -393,6 +398,7 @@ public void unknownId() throws ParseException {\n     public void thirdPartyToken() throws ParseException {\n         // Create a new token\n         Date now = new Date();\n+        long currentTime = now.getTime() / 1000L;\n \n         Calendar expiry = Calendar.getInstance();\n         expiry.setTime(now);\n@@ -401,10 +407,10 @@ public void thirdPartyToken() throws ParseException {\n         JwtClaims jwtClaims = new JwtClaims();\n         jwtClaims.setTokenId(UUID.randomUUID().toString());\n         jwtClaims.setSubject(\"puccini@apache.org\");\n-        jwtClaims.setIssuedAt(now.getTime());\n+        jwtClaims.setIssuedAt(currentTime);\n         jwtClaims.setIssuer(CustomJWTSSOProvider.ISSUER);\n-        jwtClaims.setExpiryTime(expiry.getTime().getTime());\n-        jwtClaims.setNotBefore(now.getTime());\n+        jwtClaims.setExpiryTime(expiry.getTime().getTime() / 1000L);\n+        jwtClaims.setNotBefore(currentTime);\n \n         JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n@@ -425,6 +431,7 @@ public void thirdPartyToken() throws ParseException {\n     public void thirdPartyTokenUnknownUser() throws ParseException {\n         // Create a new token\n         Date now = new Date();\n+        long currentTime = now.getTime() / 1000L;\n \n         Calendar expiry = Calendar.getInstance();\n         expiry.setTime(now);\n@@ -433,10 +440,10 @@ public void thirdPartyTokenUnknownUser() throws ParseException {\n         JwtClaims jwtClaims = new JwtClaims();\n         jwtClaims.setTokenId(UUID.randomUUID().toString());\n         jwtClaims.setSubject(\"strauss@apache.org\");\n-        jwtClaims.setIssuedAt(now.getTime());\n+        jwtClaims.setIssuedAt(currentTime);\n         jwtClaims.setIssuer(CustomJWTSSOProvider.ISSUER);\n-        jwtClaims.setExpiryTime(expiry.getTime().getTime());\n-        jwtClaims.setNotBefore(now.getTime());\n+        jwtClaims.setExpiryTime(expiry.getTime().getTime() / 1000L);\n+        jwtClaims.setNotBefore(currentTime);\n \n         JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n@@ -460,6 +467,7 @@ public void thirdPartyTokenUnknownUser() throws ParseException {\n     public void thirdPartyTokenUnknownIssuer() throws ParseException {\n         // Create a new token\n         Date now = new Date();\n+        long currentTime = now.getTime() / 1000L;\n \n         Calendar expiry = Calendar.getInstance();\n         expiry.setTime(now);\n@@ -468,10 +476,10 @@ public void thirdPartyTokenUnknownIssuer() throws ParseException {\n         JwtClaims jwtClaims = new JwtClaims();\n         jwtClaims.setTokenId(UUID.randomUUID().toString());\n         jwtClaims.setSubject(\"puccini@apache.org\");\n-        jwtClaims.setIssuedAt(now.getTime());\n+        jwtClaims.setIssuedAt(currentTime);\n         jwtClaims.setIssuer(CustomJWTSSOProvider.ISSUER + \"_\");\n-        jwtClaims.setExpiryTime(expiry.getTime().getTime());\n-        jwtClaims.setNotBefore(now.getTime());\n+        jwtClaims.setExpiryTime(expiry.getTime().getTime() / 1000L);\n+        jwtClaims.setNotBefore(currentTime);\n \n         JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);"}]}