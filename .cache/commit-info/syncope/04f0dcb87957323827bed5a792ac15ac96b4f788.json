{"sha":"04f0dcb87957323827bed5a792ac15ac96b4f788","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA0ZjBkY2I4Nzk1NzMyMzgyN2JlZDVhNzkyYWMxNWFjOTZiNGY3ODg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-10-05T11:46:13Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-10-05T11:46:26Z"},"message":"Do not report loggers used to support the Audit process","tree":{"sha":"28b78073f05eca9b7f901608d357b52b44f8251f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/28b78073f05eca9b7f901608d357b52b44f8251f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/04f0dcb87957323827bed5a792ac15ac96b4f788","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/04f0dcb87957323827bed5a792ac15ac96b4f788","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/04f0dcb87957323827bed5a792ac15ac96b4f788","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/04f0dcb87957323827bed5a792ac15ac96b4f788/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"baf93da9e73cd4c8065a96f4de7e793e53b83778","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/baf93da9e73cd4c8065a96f4de7e793e53b83778","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/baf93da9e73cd4c8065a96f4de7e793e53b83778"}],"stats":{"total":356,"additions":195,"deletions":161},"files":[{"sha":"2865b9209f610a680bc1fbb75f198b7c8c4d4371","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerResultManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04f0dcb87957323827bed5a792ac15ac96b4f788/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04f0dcb87957323827bed5a792ac15ac96b4f788/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java?ref=04f0dcb87957323827bed5a792ac15ac96b4f788","patch":"@@ -26,7 +26,7 @@\n import java.util.Map;\n import org.apache.syncope.client.cli.commands.CommonsResultManager;\n import org.apache.syncope.client.cli.view.Table;\n-import org.apache.syncope.common.lib.log.LogStatementTO;\n+import org.apache.syncope.common.lib.log.LogStatement;\n import org.apache.syncope.common.lib.log.LoggerTO;\n \n public class LoggerResultManager extends CommonsResultManager {\n@@ -41,9 +41,9 @@ public void fromListMemoryAppenders(final List<String> memoryAppenders) {\n         tableBuilder.build().print();\n     }\n \n-    public void fromGetLastLogStatements(final List<LogStatementTO> statements) throws JsonProcessingException {\n+    public void fromGetLastLogStatements(final List<LogStatement> statements) throws JsonProcessingException {\n         final Table.TableBuilder tableBuilder = new Table.TableBuilder(\"last statements\").header(\"statement\");\n-        for (final LogStatementTO statement : statements) {\n+        for (final LogStatement statement : statements) {\n             tableBuilder.rowValues(Collections.singletonList(\n                     MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(statement)));\n         }"},{"sha":"8b44c37aa552685114051afcbec80b5dee318a3f","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerSyncopeOperations.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04f0dcb87957323827bed5a792ac15ac96b4f788/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04f0dcb87957323827bed5a792ac15ac96b4f788/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerSyncopeOperations.java?ref=04f0dcb87957323827bed5a792ac15ac96b4f788","patch":"@@ -22,7 +22,7 @@\n import java.util.stream.Collectors;\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.common.lib.log.LogAppender;\n-import org.apache.syncope.common.lib.log.LogStatementTO;\n+import org.apache.syncope.common.lib.log.LogStatement;\n import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n@@ -35,7 +35,7 @@ public List<String> listMemoryAppenders() {\n         return loggerService.memoryAppenders().stream().map(LogAppender::getName).collect(Collectors.toList());\n     }\n \n-    public List<LogStatementTO> getLastLogStatements(final String appender) {\n+    public List<LogStatement> getLastLogStatements(final String appender) {\n         return loggerService.getLastLogStatements(appender);\n     }\n "},{"sha":"bf49fc267b300246b5abbdf69faba2dcff0dc28d","filename":"client/console/src/main/java/org/apache/syncope/client/console/events/EventCategoryPanel.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04f0dcb87957323827bed5a792ac15ac96b4f788/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04f0dcb87957323827bed5a792ac15ac96b4f788/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java?ref=04f0dcb87957323827bed5a792ac15ac96b4f788","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.log.EventCategoryTO;\n+import org.apache.syncope.common.lib.log.EventCategory;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.EventCategoryType;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n@@ -57,9 +57,9 @@ public abstract class EventCategoryPanel extends Panel {\n \n     private static final long serialVersionUID = 6429053774964787734L;\n \n-    private final List<EventCategoryTO> eventCategoryTOs;\n+    private final List<EventCategory> eventCategoryTOs;\n \n-    private final EventCategoryTO eventCategoryTO = new EventCategoryTO();\n+    private final EventCategory eventCategoryTO = new EventCategory();\n \n     private final WebMarkupContainer categoryContainer;\n \n@@ -75,13 +75,13 @@ public abstract class EventCategoryPanel extends Panel {\n \n     private final AjaxTextFieldPanel custom;\n \n-    private final ActionsPanel<EventCategoryTO> actionsPanel;\n+    private final ActionsPanel<EventCategory> actionsPanel;\n \n     private final IModel<List<String>> model;\n \n     public EventCategoryPanel(\n             final String id,\n-            final List<EventCategoryTO> eventCategoryTOs,\n+            final List<EventCategory> eventCategoryTOs,\n             final IModel<List<String>> model) {\n \n         super(id);\n@@ -187,14 +187,14 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         categoryContainer.add(custom.hideLabel());\n \n         actionsPanel = new ActionsPanel<>(\"customActions\", null);\n-        actionsPanel.add(new ActionLink<EventCategoryTO>() {\n+        actionsPanel.add(new ActionLink<EventCategory>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final EventCategoryTO ignore) {\n+            public void onClick(final AjaxRequestTarget target, final EventCategory ignore) {\n                 if (StringUtils.isNotBlank(custom.getModelObject())) {\n-                    Pair<EventCategoryTO, AuditElements.Result> parsed = AuditLoggerName.parseEventCategory(custom.\n+                    Pair<EventCategory, AuditElements.Result> parsed = AuditLoggerName.parseEventCategory(custom.\n                             getModelObject());\n \n                     String eventString = AuditLoggerName.buildEvent(\n@@ -214,14 +214,14 @@ public void onClick(final AjaxRequestTarget target, final EventCategoryTO ignore\n                 }\n             }\n         }, ActionLink.ActionType.CREATE, StringUtils.EMPTY).hideLabel();\n-        actionsPanel.add(new ActionLink<EventCategoryTO>() {\n+        actionsPanel.add(new ActionLink<EventCategory>() {\n \n             private static final long serialVersionUID = -3722207913631435521L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final EventCategoryTO ignore) {\n+            public void onClick(final AjaxRequestTarget target, final EventCategory ignore) {\n                 if (StringUtils.isNotBlank(custom.getModelObject())) {\n-                    Pair<EventCategoryTO, AuditElements.Result> parsed = AuditLoggerName.parseEventCategory(custom.\n+                    Pair<EventCategory, AuditElements.Result> parsed = AuditLoggerName.parseEventCategory(custom.\n                             getModelObject());\n \n                     String eventString = AuditLoggerName.buildEvent(\n@@ -259,7 +259,7 @@ protected void onEventAction(final IEvent<?> event) {\n         });\n     }\n \n-    private List<String> filter(final List<EventCategoryTO> eventCategoryTOs, final EventCategoryType type) {\n+    private List<String> filter(final List<EventCategory> eventCategoryTOs, final EventCategoryType type) {\n         Set<String> res = new HashSet<>();\n \n         eventCategoryTOs.stream().filter(eventCategory\n@@ -274,7 +274,7 @@ private List<String> filter(final List<EventCategoryTO> eventCategoryTOs, final\n     }\n \n     private List<String> filter(\n-            final List<EventCategoryTO> eventCategoryTOs, final EventCategoryType type, final String category) {\n+            final List<EventCategory> eventCategoryTOs, final EventCategoryType type, final String category) {\n \n         Set<String> res = new HashSet<>();\n \n@@ -348,7 +348,7 @@ public void onEvent(final IEvent<?> event) {\n \n             final InspectSelectedEvent inspectSelectedEvent = (InspectSelectedEvent) event.getPayload();\n \n-            final Map.Entry<EventCategoryTO, AuditElements.Result> categoryEvent = AuditLoggerName.parseEventCategory(\n+            final Map.Entry<EventCategory, AuditElements.Result> categoryEvent = AuditLoggerName.parseEventCategory(\n                     inspectSelectedEvent.getEvent());\n \n             eventCategoryTO.setType(categoryEvent.getKey().getType());\n@@ -389,9 +389,9 @@ public void onEvent(final IEvent<?> event) {\n     }\n \n     private void setEvents() {\n-        final Iterator<EventCategoryTO> itor = eventCategoryTOs.iterator();\n+        final Iterator<EventCategory> itor = eventCategoryTOs.iterator();\n         while (itor.hasNext() && eventCategoryTO.getEvents().isEmpty()) {\n-            final EventCategoryTO eventCategory = itor.next();\n+            final EventCategory eventCategory = itor.next();\n             if (eventCategory.getType() == eventCategoryTO.getType()\n                     && StringUtils.equals(eventCategory.getCategory(), eventCategoryTO.getCategory())\n                     && StringUtils.equals(eventCategory.getSubcategory(), eventCategoryTO.getSubcategory())) {"},{"sha":"6e3d5cac67549a95fd46f47bfe874e90b7f35b6e","filename":"client/console/src/main/java/org/apache/syncope/client/console/events/EventSelectionPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04f0dcb87957323827bed5a792ac15ac96b4f788/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventSelectionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04f0dcb87957323827bed5a792ac15ac96b4f788/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventSelectionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventSelectionPanel.java?ref=04f0dcb87957323827bed5a792ac15ac96b4f788","patch":"@@ -24,7 +24,7 @@\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.wicket.ajax.form.IndicatorAjaxFormChoiceComponentUpdatingBehavior;\n-import org.apache.syncope.common.lib.log.EventCategoryTO;\n+import org.apache.syncope.common.lib.log.EventCategory;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -48,7 +48,7 @@ public abstract class EventSelectionPanel extends Panel {\n     private final Set<String> selected = new HashSet<>();\n \n     public EventSelectionPanel(\n-            final String id, final EventCategoryTO eventCategoryTO, final IModel<List<String>> model) {\n+            final String id, final EventCategory eventCategoryTO, final IModel<List<String>> model) {\n         super(id);\n         setOutputMarkupId(true);\n \n@@ -184,7 +184,7 @@ protected void populateItem(final ListItem<String> item) {\n         failureGroup.add(failureView);\n     }\n \n-    private List<String> getEvents(final EventCategoryTO eventCategoryTO) {\n+    private List<String> getEvents(final EventCategory eventCategoryTO) {\n         final List<String> res;\n \n         res = eventCategoryTO.getEvents();"},{"sha":"272842c885f53801a5ac2c5830a7ca2fc7beef38","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Audit.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04f0dcb87957323827bed5a792ac15ac96b4f788/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04f0dcb87957323827bed5a792ac15ac96b4f788/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java?ref=04f0dcb87957323827bed5a792ac15ac96b4f788","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.client.console.events.EventCategoryPanel;\n import org.apache.syncope.client.console.events.SelectedEventsPanel;\n import org.apache.syncope.client.console.rest.LoggerRestClient;\n-import org.apache.syncope.common.lib.log.EventCategoryTO;\n+import org.apache.syncope.common.lib.log.EventCategory;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n@@ -89,7 +89,7 @@ public void onEventAction(final IEvent<?> event) {\n                             (SelectedEventsPanel.EventSelectionChanged) event.getPayload();\n \n                     eventSelectionChanged.getToBeRemoved().forEach(toBeRemoved -> {\n-                        Pair<EventCategoryTO, AuditElements.Result> eventCategory =\n+                        Pair<EventCategory, AuditElements.Result> eventCategory =\n                                 AuditLoggerName.parseEventCategory(toBeRemoved);\n \n                         AuditLoggerName auditLoggerName = new AuditLoggerName(\n@@ -104,7 +104,7 @@ public void onEventAction(final IEvent<?> event) {\n                     });\n \n                     eventSelectionChanged.getToBeAdded().forEach(toBeAdded -> {\n-                        Pair<EventCategoryTO, AuditElements.Result> eventCategory =\n+                        Pair<EventCategory, AuditElements.Result> eventCategory =\n                                 AuditLoggerName.parseEventCategory(toBeAdded);\n \n                         AuditLoggerName auditLoggerName = new AuditLoggerName("},{"sha":"da27cf04850b8d969d5ec979dbc3c5a321d03b32","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/LogViewer.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04f0dcb87957323827bed5a792ac15ac96b4f788/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04f0dcb87957323827bed5a792ac15ac96b4f788/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.java?ref=04f0dcb87957323827bed5a792ac15ac96b4f788","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.client.console.panels.LogStatementPanel;\n import org.apache.syncope.client.console.rest.LoggerRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.common.lib.log.LogStatementTO;\n+import org.apache.syncope.common.lib.log.LogStatement;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.AjaxSelfUpdatingTimerBehavior;\n@@ -64,13 +64,13 @@ public LogViewer() {\n         viewer.add(stContainer);\n \n         final Model<Long> lastTimeInMillis = Model.of(0L);\n-        final IModel<List<LogStatementTO>> statementViewModel = new ListModel<>(new ArrayList<>());\n-        final ListView<LogStatementTO> statementView = new ListView<LogStatementTO>(\"statements\", statementViewModel) {\n+        final IModel<List<LogStatement>> statementViewModel = new ListModel<>(new ArrayList<>());\n+        final ListView<LogStatement> statementView = new ListView<LogStatement>(\"statements\", statementViewModel) {\n \n             private static final long serialVersionUID = -9180479401817023838L;\n \n             @Override\n-            protected void populateItem(final ListItem<LogStatementTO> item) {\n+            protected void populateItem(final ListItem<LogStatement> item) {\n                 LogStatementPanel panel = new LogStatementPanel(\"statement\", item.getModelObject());\n                 panel.setOutputMarkupId(true);\n                 item.add(panel);\n@@ -88,7 +88,7 @@ protected void onPostProcessTarget(final AjaxRequestTarget target) {\n                 target.prependJavaScript(\n                         String.format(\"window.scrollTop = $('#%s').scrollTop();\", stContainer.getMarkupId()));\n \n-                List<LogStatementTO> recentLogStatements = appenders.getModelObject() == null\n+                List<LogStatement> recentLogStatements = appenders.getModelObject() == null\n                         ? new ArrayList<>()\n                         : restClient.getLastLogStatements(appenders.getModelObject(), lastTimeInMillis.getObject());\n                 if (!recentLogStatements.isEmpty()) {\n@@ -97,7 +97,7 @@ protected void onPostProcessTarget(final AjaxRequestTarget target) {\n                     int currentSize = statementView.getModelObject().size();\n                     int recentSize = recentLogStatements.size();\n \n-                    List<LogStatementTO> newModelObject = SetUniqueList.<LogStatementTO>setUniqueList(\n+                    List<LogStatement> newModelObject = SetUniqueList.<LogStatement>setUniqueList(\n                             new ArrayList<>(MAX_STATEMENTS_PER_APPENDER));\n                     if (currentSize <= MAX_STATEMENTS_PER_APPENDER - recentSize) {\n                         newModelObject.addAll(statementView.getModelObject());\n@@ -124,7 +124,7 @@ protected void onPostProcessTarget(final AjaxRequestTarget target) {\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n-                List<LogStatementTO> lastStatements = appenders.getModelObject() == null\n+                List<LogStatement> lastStatements = appenders.getModelObject() == null\n                         ? new ArrayList<>()\n                         : restClient.getLastLogStatements(appenders.getModelObject(), 0);\n                 statementViewModel.setObject(lastStatements);"},{"sha":"fa1833851cc99411859bc00b4de4dcc8a446dc4b","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/LogStatementPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04f0dcb87957323827bed5a792ac15ac96b4f788/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogStatementPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04f0dcb87957323827bed5a792ac15ac96b4f788/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogStatementPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogStatementPanel.java?ref=04f0dcb87957323827bed5a792ac15ac96b4f788","patch":"@@ -24,7 +24,7 @@\n import de.agilecoders.wicket.core.util.Attributes;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.time.FastDateFormat;\n-import org.apache.syncope.common.lib.log.LogStatementTO;\n+import org.apache.syncope.common.lib.log.LogStatement;\n import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n@@ -39,7 +39,7 @@ public class LogStatementPanel extends Panel {\n \n     private final String labelCssClass;\n \n-    public LogStatementPanel(final String id, final LogStatementTO statement) {\n+    public LogStatementPanel(final String id, final LogStatement statement) {\n         super(id);\n \n         Alert.Type type;"},{"sha":"212cede33106dbc1df7af002cfc185be09759f50","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/LoggerRestClient.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04f0dcb87957323827bed5a792ac15ac96b4f788/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04f0dcb87957323827bed5a792ac15ac96b4f788/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java?ref=04f0dcb87957323827bed5a792ac15ac96b4f788","patch":"@@ -27,9 +27,9 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ObjectUtils;\n-import org.apache.syncope.common.lib.log.EventCategoryTO;\n+import org.apache.syncope.common.lib.log.EventCategory;\n import org.apache.syncope.common.lib.log.LogAppender;\n-import org.apache.syncope.common.lib.log.LogStatementTO;\n+import org.apache.syncope.common.lib.log.LogStatement;\n import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n@@ -46,8 +46,8 @@ public List<String> listMemoryAppenders() {\n                 map(LogAppender::getName).collect(Collectors.toList());\n     }\n \n-    public List<LogStatementTO> getLastLogStatements(final String appender, final long lastStatementTime) {\n-        List<LogStatementTO> result = new ArrayList<>();\n+    public List<LogStatement> getLastLogStatements(final String appender, final long lastStatementTime) {\n+        List<LogStatement> result = new ArrayList<>();\n         getService(LoggerService.class).getLastLogStatements(appender).stream().\n                 filter(statement -> statement.getTimeMillis() > lastStatementTime).\n                 forEachOrdered(statement -> {\n@@ -100,11 +100,11 @@ public void disableAudit(final AuditLoggerName auditLoggerName) {\n         getService(LoggerService.class).delete(LoggerType.AUDIT, auditLoggerName.toLoggerName());\n     }\n \n-    public List<EventCategoryTO> listEvents() {\n+    public List<EventCategory> listEvents() {\n         try {\n             return getService(LoggerService.class).events();\n         } catch (Exception e) {\n-            return Collections.<EventCategoryTO>emptyList();\n+            return Collections.<EventCategory>emptyList();\n         }\n     }\n }"},{"sha":"cf7d7a5e2ea9d349ace46af644aa9a93f8e0d0e0","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/log/EventCategory.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04f0dcb87957323827bed5a792ac15ac96b4f788/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FEventCategory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04f0dcb87957323827bed5a792ac15ac96b4f788/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FEventCategory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FEventCategory.java?ref=04f0dcb87957323827bed5a792ac15ac96b4f788","patch":"@@ -30,7 +30,7 @@\n \n @XmlRootElement(name = \"eventCategory\")\n @XmlType\n-public class EventCategoryTO extends AbstractBaseBean {\n+public class EventCategory extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -4340060002701633401L;\n \n@@ -45,7 +45,7 @@ public class EventCategoryTO extends AbstractBaseBean {\n     /**\n      * Constructor for Type.REST event category.\n      */\n-    public EventCategoryTO() {\n+    public EventCategory() {\n         this(AuditElements.EventCategoryType.LOGIC);\n     }\n \n@@ -54,7 +54,7 @@ public EventCategoryTO() {\n      *\n      * @param type event category type\n      */\n-    public EventCategoryTO(final AuditElements.EventCategoryType type) {\n+    public EventCategory(final AuditElements.EventCategoryType type) {\n         super();\n         this.type = type;\n     }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/log/EventCategoryTO.java"},{"sha":"7c80a9d6ab26713e5015f3fcd1d0015df3e36ca7","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/log/LogStatement.java","status":"renamed","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04f0dcb87957323827bed5a792ac15ac96b4f788/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FLogStatement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04f0dcb87957323827bed5a792ac15ac96b4f788/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FLogStatement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FLogStatement.java?ref=04f0dcb87957323827bed5a792ac15ac96b4f788","patch":"@@ -25,7 +25,7 @@\n \n @XmlRootElement(name = \"logStatement\")\n @XmlType\n-public class LogStatementTO extends AbstractBaseBean {\n+public class LogStatement extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -2931205859104653385L;\n \n@@ -108,5 +108,4 @@ public int getThreadPriority() {\n     public void setThreadPriority(final int threadPriority) {\n         this.threadPriority = threadPriority;\n     }\n-\n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/log/LogStatementTO.java"},{"sha":"a8ad23190b73e6e4b53d64e40d96f0c35cd8d1f1","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AuditLoggerName.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04f0dcb87957323827bed5a792ac15ac96b4f788/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04f0dcb87957323827bed5a792ac15ac96b4f788/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java?ref=04f0dcb87957323827bed5a792ac15ac96b4f788","patch":"@@ -25,7 +25,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n-import org.apache.syncope.common.lib.log.EventCategoryTO;\n+import org.apache.syncope.common.lib.log.EventCategory;\n import org.apache.syncope.common.lib.types.AuditElements.EventCategoryType;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n \n@@ -104,7 +104,7 @@ public static AuditLoggerName fromLoggerName(final String loggerName)\n             throw new ParseException(\"Audit logger name must start with \" + LoggerType.AUDIT.getPrefix(), 0);\n         }\n \n-        final Map.Entry<EventCategoryTO, Result> eventCategory = parseEventCategory(\n+        Map.Entry<EventCategory, Result> eventCategory = parseEventCategory(\n                 loggerName.replaceAll(LoggerType.AUDIT.getPrefix() + \".\", \"\"));\n \n         return new AuditLoggerName(\n@@ -116,8 +116,8 @@ public static AuditLoggerName fromLoggerName(final String loggerName)\n                 eventCategory.getValue());\n     }\n \n-    public static Pair<EventCategoryTO, Result> parseEventCategory(final String event) {\n-        EventCategoryTO eventCategoryTO = new EventCategoryTO();\n+    public static Pair<EventCategory, Result> parseEventCategory(final String event) {\n+        EventCategory eventCategoryTO = new EventCategory();\n \n         Result condition = null;\n \n@@ -181,7 +181,7 @@ public static String buildEvent(\n             final String event,\n             final AuditElements.Result condition) {\n \n-        final StringBuilder eventBuilder = new StringBuilder();\n+        StringBuilder eventBuilder = new StringBuilder();\n \n         eventBuilder.append('[');\n         if (type != null) {"},{"sha":"262325acaaf77bab34307fb13e7d6f41b94fca14","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java","status":"modified","additions":40,"deletions":5,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04f0dcb87957323827bed5a792ac15ac96b4f788/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04f0dcb87957323827bed5a792ac15ac96b4f788/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java?ref=04f0dcb87957323827bed5a792ac15ac96b4f788","patch":"@@ -20,6 +20,8 @@\n \n import io.swagger.v3.oas.annotations.Parameter;\n import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.media.ArraySchema;\n+import io.swagger.v3.oas.annotations.media.Content;\n import io.swagger.v3.oas.annotations.media.Schema;\n import io.swagger.v3.oas.annotations.responses.ApiResponse;\n import io.swagger.v3.oas.annotations.responses.ApiResponses;\n@@ -36,9 +38,9 @@\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.log.EventCategoryTO;\n+import org.apache.syncope.common.lib.log.EventCategory;\n import org.apache.syncope.common.lib.log.LogAppender;\n-import org.apache.syncope.common.lib.log.LogStatementTO;\n+import org.apache.syncope.common.lib.log.LogStatement;\n import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -58,6 +60,13 @@ public interface LoggerService extends JAXRSService {\n      *\n      * @return the list of memory appenders available in the current logging configuration\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"200\",\n+                    description = \"list of memory appenders available in the current logging configuration\",\n+                    content =\n+                    @Content(array =\n+                            @ArraySchema(schema =\n+                                    @Schema(implementation = LogAppender.class)))))\n     @GET\n     @Path(\"memoryAppenders\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n@@ -69,20 +78,34 @@ public interface LoggerService extends JAXRSService {\n      * @param memoryAppender memory appender name\n      * @return the last log statements available in the provided memory appender\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"200\",\n+                    description = \"last log statements available in the provided memory appender\",\n+                    content =\n+                    @Content(array =\n+                            @ArraySchema(schema =\n+                                    @Schema(implementation = LogStatement.class)))))\n     @GET\n     @Path(\"memoryAppenders/{memoryAppender}/lastLogStatements\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<LogStatementTO> getLastLogStatements(@NotNull @PathParam(\"memoryAppender\") String memoryAppender);\n+    List<LogStatement> getLastLogStatements(@NotNull @PathParam(\"memoryAppender\") String memoryAppender);\n \n     /**\n      * Returns the list of all managed events in audit.\n      *\n      * @return list of all managed events in audit\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"200\",\n+                    description = \"list of all managed events in audit\",\n+                    content =\n+                    @Content(array =\n+                            @ArraySchema(schema =\n+                                    @Schema(implementation = EventCategory.class)))))\n     @GET\n     @Path(\"events\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<EventCategoryTO> events();\n+    List<EventCategory> events();\n \n     /**\n      * Returns logger with matching type and name.\n@@ -91,6 +114,12 @@ public interface LoggerService extends JAXRSService {\n      * @param name Logger name to be read\n      * @return logger with matching type and name\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"200\",\n+                    description = \"logger with matching type and name\",\n+                    content =\n+                    @Content(schema =\n+                            @Schema(implementation = LoggerTO.class))))\n     @GET\n     @Path(\"{type}/{name}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n@@ -102,6 +131,13 @@ public interface LoggerService extends JAXRSService {\n      * @param type LoggerType to be selected\n      * @return list of loggers with matching type\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"200\",\n+                    description = \"list of loggers with matching type\",\n+                    content =\n+                    @Content(array =\n+                            @ArraySchema(schema =\n+                                    @Schema(implementation = LoggerTO.class)))))\n     @GET\n     @Path(\"{type}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n@@ -135,5 +171,4 @@ public interface LoggerService extends JAXRSService {\n     @Path(\"{type}/{name}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") String name);\n-\n }"},{"sha":"b96a4a21a2a123ca2ca8e8097d258a7d8add0f03","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":72,"deletions":66,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04f0dcb87957323827bed5a792ac15ac96b4f788/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04f0dcb87957323827bed5a792ac15ac96b4f788/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=04f0dcb87957323827bed5a792ac15ac96b4f788","patch":"@@ -23,6 +23,7 @@\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.logging.log4j.Level;\n@@ -31,9 +32,9 @@\n import org.apache.logging.log4j.core.config.LoggerConfig;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.log.EventCategoryTO;\n+import org.apache.syncope.common.lib.log.EventCategory;\n import org.apache.syncope.common.lib.log.LogAppender;\n-import org.apache.syncope.common.lib.log.LogStatementTO;\n+import org.apache.syncope.common.lib.log.LogStatement;\n import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.AuditElements.EventCategoryType;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n@@ -48,6 +49,7 @@\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.logic.audit.AuditAppender;\n import org.apache.syncope.core.logic.init.LoggerLoader;\n+import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -83,15 +85,10 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {\n     private ExternalResourceDAO resourceDAO;\n \n     @Autowired\n-    private EntityFactory entityFactory;\n+    private DomainDAO domainDAO;\n \n-    private List<LoggerTO> list(final LoggerType type) {\n-        return loggerDAO.findAll(type).stream().map(logger -> {\n-            LoggerTO loggerTO = new LoggerTO();\n-            BeanUtils.copyProperties(logger, loggerTO);\n-            return loggerTO;\n-        }).collect(Collectors.toList());\n-    }\n+    @Autowired\n+    private EntityFactory entityFactory;\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_LIST + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n@@ -107,7 +104,7 @@ public List<LogAppender> memoryAppenders() {\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_READ + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     @Transactional(readOnly = true)\n-    public List<LogStatementTO> getLastLogStatements(final String memoryAppender) {\n+    public List<LogStatement> getLastLogStatements(final String memoryAppender) {\n         MemoryAppender appender = loggerLoader.getMemoryAppenders().get(memoryAppender);\n         if (appender == null) {\n             throw new NotFoundException(\"Appender \" + memoryAppender);\n@@ -116,18 +113,29 @@ public List<LogStatementTO> getLastLogStatements(final String memoryAppender) {\n         return appender.getStatements().stream().collect(Collectors.toList());\n     }\n \n+    private List<LoggerTO> list(final LoggerType type) {\n+        return loggerDAO.findAll(type).stream().map(logger -> {\n+            LoggerTO loggerTO = new LoggerTO();\n+            BeanUtils.copyProperties(logger, loggerTO);\n+            return loggerTO;\n+        }).collect(Collectors.toList());\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_LIST + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     @Transactional(readOnly = true)\n     public List<LoggerTO> listLogs() {\n-        return list(LoggerType.LOG);\n+        return list(LoggerType.LOG).stream().\n+                filter(logger -> !logger.getKey().startsWith(SyncopeConstants.MASTER_DOMAIN)).\n+                filter(logger -> domainDAO.findAll().stream().\n+                noneMatch(domain -> logger.getKey().startsWith(domain.getKey()))).\n+                collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.AUDIT_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<AuditLoggerName> listAudits() {\n         return list(LoggerType.AUDIT).stream().\n-                filter(logger -> logger != null).\n                 map(logger -> {\n                     AuditLoggerName result = null;\n                     try {\n@@ -137,7 +145,9 @@ public List<AuditLoggerName> listAudits() {\n                     }\n \n                     return result;\n-                }).collect(Collectors.toList());\n+                }).\n+                filter(Objects::nonNull).\n+                collect(Collectors.toList());\n     }\n \n     private void throwInvalidLogger(final LoggerType type) {\n@@ -151,26 +161,22 @@ private void throwInvalidLogger(final LoggerType type) {\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     @Transactional(readOnly = true)\n     public LoggerTO readLog(final String name) {\n-        for (final LoggerTO logger : listLogs()) {\n-            if (logger.getKey().equals(name)) {\n-                return logger;\n-            }\n-        }\n-        throw new NotFoundException(\"Logger \" + name);\n+        return listLogs().stream().\n+                filter(logger -> logger.getKey().equals(name)).findFirst().\n+                orElseThrow(() -> new NotFoundException(\"Logger \" + name));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.AUDIT_READ + \"')\")\n     @Transactional(readOnly = true)\n     public LoggerTO readAudit(final String name) {\n-        for (final AuditLoggerName logger : listAudits()) {\n-            if (logger.toLoggerName().equals(name)) {\n-                final LoggerTO loggerTO = new LoggerTO();\n-                loggerTO.setKey(logger.toLoggerName());\n-                loggerTO.setLevel(LoggerLevel.DEBUG);\n-                return loggerTO;\n-            }\n-        }\n-        throw new NotFoundException(\"Logger \" + name);\n+        return listAudits().stream().\n+                filter(logger -> logger.toLoggerName().equals(name)).findFirst().\n+                map(logger -> {\n+                    LoggerTO loggerTO = new LoggerTO();\n+                    loggerTO.setKey(logger.toLoggerName());\n+                    loggerTO.setLevel(LoggerLevel.DEBUG);\n+                    return loggerTO;\n+                }).orElseThrow(() -> new NotFoundException(\"Audit \" + name));\n     }\n \n     private LoggerTO setLevel(final String name, final Level level, final LoggerType expectedType) {\n@@ -297,11 +303,11 @@ public void disableAudit(final AuditLoggerName auditLoggerName) {\n         }\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.AUDIT_LIST + \"') or hasRole('\"\n-            + StandardEntitlement.NOTIFICATION_LIST + \"')\")\n-    public List<EventCategoryTO> listAuditEvents() {\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.AUDIT_LIST + \"') \"\n+            + \"or hasRole('\" + StandardEntitlement.NOTIFICATION_LIST + \"')\")\n+    public List<EventCategory> listAuditEvents() {\n         // use set to avoid duplications or null elements\n-        Set<EventCategoryTO> events = new HashSet<>();\n+        Set<EventCategory> events = new HashSet<>();\n \n         try {\n             ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();\n@@ -319,75 +325,75 @@ public List<EventCategoryTO> listAuditEvents() {\n                     final Class<?> clazz = Class.forName(metadataReader.getClassMetadata().getClassName());\n \n                     if (clazz.isAnnotationPresent(Component.class) && AbstractLogic.class.isAssignableFrom(clazz)) {\n-                        EventCategoryTO eventCategoryTO = new EventCategoryTO();\n-                        eventCategoryTO.setCategory(clazz.getSimpleName());\n+                        EventCategory eventCategory = new EventCategory();\n+                        eventCategory.setCategory(clazz.getSimpleName());\n                         for (Method method : clazz.getDeclaredMethods()) {\n                             if (Modifier.isPublic(method.getModifiers())\n-                                    && !eventCategoryTO.getEvents().contains(method.getName())) {\n+                                    && !eventCategory.getEvents().contains(method.getName())) {\n \n-                                eventCategoryTO.getEvents().add(method.getName());\n+                                eventCategory.getEvents().add(method.getName());\n                             }\n                         }\n \n-                        events.add(eventCategoryTO);\n+                        events.add(eventCategory);\n                     }\n                 }\n             }\n \n             // SYNCOPE-608\n-            EventCategoryTO authenticationControllerEvents = new EventCategoryTO();\n+            EventCategory authenticationControllerEvents = new EventCategory();\n             authenticationControllerEvents.setCategory(AuditElements.AUTHENTICATION_CATEGORY);\n             authenticationControllerEvents.getEvents().add(AuditElements.LOGIN_EVENT);\n             events.add(authenticationControllerEvents);\n \n-            events.add(new EventCategoryTO(EventCategoryType.PROPAGATION));\n-            events.add(new EventCategoryTO(EventCategoryType.PULL));\n-            events.add(new EventCategoryTO(EventCategoryType.PUSH));\n+            events.add(new EventCategory(EventCategoryType.PROPAGATION));\n+            events.add(new EventCategory(EventCategoryType.PULL));\n+            events.add(new EventCategory(EventCategoryType.PUSH));\n \n             for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {\n                 resourceDAO.findAll().forEach(resource -> {\n-                    EventCategoryTO propEventCategoryTO = new EventCategoryTO(EventCategoryType.PROPAGATION);\n-                    EventCategoryTO pullEventCategoryTO = new EventCategoryTO(EventCategoryType.PULL);\n-                    EventCategoryTO pushEventCategoryTO = new EventCategoryTO(EventCategoryType.PUSH);\n+                    EventCategory propEventCategory = new EventCategory(EventCategoryType.PROPAGATION);\n+                    EventCategory pullEventCategory = new EventCategory(EventCategoryType.PULL);\n+                    EventCategory pushEventCategory = new EventCategory(EventCategoryType.PUSH);\n \n-                    propEventCategoryTO.setCategory(anyTypeKind.name().toLowerCase());\n-                    propEventCategoryTO.setSubcategory(resource.getKey());\n+                    propEventCategory.setCategory(anyTypeKind.name().toLowerCase());\n+                    propEventCategory.setSubcategory(resource.getKey());\n \n-                    pullEventCategoryTO.setCategory(anyTypeKind.name().toLowerCase());\n-                    pushEventCategoryTO.setCategory(anyTypeKind.name().toLowerCase());\n-                    pullEventCategoryTO.setSubcategory(resource.getKey());\n-                    pushEventCategoryTO.setSubcategory(resource.getKey());\n+                    pullEventCategory.setCategory(anyTypeKind.name().toLowerCase());\n+                    pushEventCategory.setCategory(anyTypeKind.name().toLowerCase());\n+                    pullEventCategory.setSubcategory(resource.getKey());\n+                    pushEventCategory.setSubcategory(resource.getKey());\n \n                     for (ResourceOperation resourceOperation : ResourceOperation.values()) {\n-                        propEventCategoryTO.getEvents().add(resourceOperation.name().toLowerCase());\n+                        propEventCategory.getEvents().add(resourceOperation.name().toLowerCase());\n                     }\n-                    pullEventCategoryTO.getEvents().add(ResourceOperation.DELETE.name().toLowerCase());\n+                    pullEventCategory.getEvents().add(ResourceOperation.DELETE.name().toLowerCase());\n \n                     for (UnmatchingRule unmatching : UnmatchingRule.values()) {\n                         String event = UnmatchingRule.toEventName(unmatching);\n-                        pullEventCategoryTO.getEvents().add(event);\n-                        pushEventCategoryTO.getEvents().add(event);\n+                        pullEventCategory.getEvents().add(event);\n+                        pushEventCategory.getEvents().add(event);\n                     }\n \n                     for (MatchingRule matching : MatchingRule.values()) {\n                         String event = MatchingRule.toEventName(matching);\n-                        pullEventCategoryTO.getEvents().add(event);\n-                        pushEventCategoryTO.getEvents().add(event);\n+                        pullEventCategory.getEvents().add(event);\n+                        pushEventCategory.getEvents().add(event);\n                     }\n \n-                    events.add(propEventCategoryTO);\n-                    events.add(pullEventCategoryTO);\n-                    events.add(pushEventCategoryTO);\n+                    events.add(propEventCategory);\n+                    events.add(pullEventCategory);\n+                    events.add(pushEventCategory);\n                 });\n             }\n \n-            EventCategoryTO eventCategoryTO = new EventCategoryTO(EventCategoryType.TASK);\n-            eventCategoryTO.setCategory(PullJobDelegate.class.getSimpleName());\n-            events.add(eventCategoryTO);\n+            EventCategory eventCategory = new EventCategory(EventCategoryType.TASK);\n+            eventCategory.setCategory(PullJobDelegate.class.getSimpleName());\n+            events.add(eventCategory);\n \n-            eventCategoryTO = new EventCategoryTO(EventCategoryType.TASK);\n-            eventCategoryTO.setCategory(PushJobDelegate.class.getSimpleName());\n-            events.add(eventCategoryTO);\n+            eventCategory = new EventCategory(EventCategoryType.TASK);\n+            eventCategory.setCategory(PushJobDelegate.class.getSimpleName());\n+            events.add(eventCategory);\n         } catch (Exception e) {\n             LOG.error(\"Failure retrieving audit/notification events\", e);\n         }"},{"sha":"36f6aa607500e2c239fd38888db7d5c9b18ff779","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/MemoryAppender.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04f0dcb87957323827bed5a792ac15ac96b4f788/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMemoryAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04f0dcb87957323827bed5a792ac15ac96b4f788/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMemoryAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMemoryAppender.java?ref=04f0dcb87957323827bed5a792ac15ac96b4f788","patch":"@@ -30,14 +30,14 @@\n import org.apache.logging.log4j.message.Message;\n import org.apache.logging.log4j.message.ReusableMessage;\n import org.apache.syncope.common.lib.collections.CircularFifoQueue;\n-import org.apache.syncope.common.lib.log.LogStatementTO;\n+import org.apache.syncope.common.lib.log.LogStatement;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n \n @Plugin(name = \"Memory\", category = \"Core\", elementType = Appender.ELEMENT_TYPE, printObject = true)\n public class MemoryAppender extends AbstractAppender {\n \n-    private final CircularFifoQueue<LogStatementTO> statements;\n+    private final CircularFifoQueue<LogStatement> statements;\n \n     protected MemoryAppender(\n             final String name,\n@@ -51,7 +51,7 @@ protected MemoryAppender(\n \n     @Override\n     public void append(final LogEvent event) {\n-        LogStatementTO statement = new LogStatementTO();\n+        LogStatement statement = new LogStatement();\n \n         statement.setLevel(LoggerLevel.fromLevel(event.getLevel()));\n         statement.setLoggerName(event.getLoggerName());\n@@ -74,7 +74,7 @@ public void append(final LogEvent event) {\n         this.statements.add(statement);\n     }\n \n-    public Queue<LogStatementTO> getStatements() {\n+    public Queue<LogStatement> getStatements() {\n         return statements;\n     }\n "},{"sha":"c530e49e981b8a3a543669c867af589a06fd3c8e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java","status":"modified","additions":7,"deletions":13,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04f0dcb87957323827bed5a792ac15ac96b4f788/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04f0dcb87957323827bed5a792ac15ac96b4f788/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java?ref=04f0dcb87957323827bed5a792ac15ac96b4f788","patch":"@@ -20,10 +20,10 @@\n \n import java.sql.Connection;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n import javax.sql.DataSource;\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n@@ -70,11 +70,11 @@ public Integer getPriority() {\n \n     @Override\n     public void load() {\n-        final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n+        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n \n         ctx.getConfiguration().getAppenders().entrySet().stream().\n                 filter(entry -> (entry.getValue() instanceof MemoryAppender)).\n-                forEachOrdered(entry -> {\n+                forEach(entry -> {\n                     memoryAppenders.put(entry.getKey(), (MemoryAppender) entry.getValue());\n                 });\n \n@@ -109,11 +109,10 @@ public void load() {\n                 ctx.getConfiguration().addAppender(appender);\n             }\n \n-            LoggerConfig logConf = new LoggerConfig(\n-                    AuditLoggerName.getAuditLoggerName(entry.getKey()), null, false);\n+            LoggerConfig logConf = new LoggerConfig(AuditLoggerName.getAuditLoggerName(entry.getKey()), null, false);\n             logConf.addAppender(appender, Level.DEBUG, null);\n             logConf.setLevel(Level.DEBUG);\n-            ctx.getConfiguration().addLogger(AuditLoggerName.getAuditLoggerName(entry.getKey()), logConf);\n+            ctx.getConfiguration().addLogger(logConf.getName(), logConf);\n \n             // SYNCOPE-1144 For each custom audit appender class add related appenders to log4j logger\n             auditAppenders(entry.getKey()).forEach(auditAppender -> {\n@@ -147,8 +146,7 @@ public Map<String, MemoryAppender> getMemoryAppenders() {\n     }\n \n     public List<AuditAppender> auditAppenders(final String domain) throws BeansException {\n-        List<AuditAppender> auditAppenders = new ArrayList<>();\n-        implementationLookup.getAuditAppenderClasses().stream().map(clazz -> {\n+        return implementationLookup.getAuditAppenderClasses().stream().map(clazz -> {\n             AuditAppender auditAppender;\n             if (ApplicationContextProvider.getBeanFactory().containsSingleton(clazz.getName())) {\n                 auditAppender = (AuditAppender) ApplicationContextProvider.getBeanFactory().\n@@ -160,10 +158,7 @@ public List<AuditAppender> auditAppenders(final String domain) throws BeansExcep\n                 auditAppender.init();\n             }\n             return auditAppender;\n-        }).forEachOrdered(auditAppender -> {\n-            auditAppenders.add(auditAppender);\n-        });\n-        return auditAppenders;\n+        }).collect(Collectors.toList());\n     }\n \n     public void addAppenderToContext(\n@@ -211,6 +206,5 @@ public Connection getConnection() throws SQLException {\n         public String toString() {\n             return this.description;\n         }\n-\n     }\n }"},{"sha":"8b596154ae27bf3a2470bfeae023b0cc3230b29f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentLoader.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04f0dcb87957323827bed5a792ac15ac96b4f788/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04f0dcb87957323827bed5a792ac15ac96b4f788/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java?ref=04f0dcb87957323827bed5a792ac15ac96b4f788","patch":"@@ -117,7 +117,7 @@ private void createViews(final String domain, final DataSource dataSource) throw\n         views.stringPropertyNames().stream().sorted().forEachOrdered(idx -> {\n             LOG.debug(\"[{}] Creating view {}\", domain, views.get(idx).toString());\n             try {\n-                jdbcTemplate.execute(views.get(idx).toString().replaceAll(\"\\\\n\", \" \"));\n+                jdbcTemplate.execute(views.getProperty(idx).replaceAll(\"\\\\n\", \" \"));\n             } catch (DataAccessException e) {\n                 LOG.error(\"[{}] Could not create view\", domain, e);\n             }\n@@ -135,13 +135,12 @@ private void createIndexes(final String domain, final DataSource dataSource) thr\n         indexes.stringPropertyNames().stream().sorted().forEachOrdered(idx -> {\n             LOG.debug(\"[{}] Creating index {}\", domain, indexes.get(idx).toString());\n             try {\n-                jdbcTemplate.execute(indexes.get(idx).toString());\n+                jdbcTemplate.execute(indexes.getProperty(idx));\n             } catch (DataAccessException e) {\n                 LOG.error(\"[{}] Could not create index\", domain, e);\n             }\n         });\n \n         LOG.debug(\"Indexes created\");\n     }\n-\n }"},{"sha":"180685f58a622df46be6aca037d365df32b686b1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AuditManagerImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04f0dcb87957323827bed5a792ac15ac96b4f788/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAuditManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04f0dcb87957323827bed5a792ac15ac96b4f788/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAuditManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAuditManagerImpl.java?ref=04f0dcb87957323827bed5a792ac15ac96b4f788","patch":"@@ -120,9 +120,10 @@ public void audit(\n             Logger eventLogger = LoggerFactory.getLogger(\n                     AuditLoggerName.getAuditEventLoggerName(AuthContextUtils.getDomain(), syncopeLogger.getKey()));\n             String serializedAuditEntry = POJOHelper.serialize(auditEntry);\n+\n             if (throwable == null) {\n                 logger.debug(serializedAuditEntry);\n-                eventLogger.debug(POJOHelper.serialize(auditEntry));\n+                eventLogger.debug(serializedAuditEntry);\n             } else {\n                 logger.debug(serializedAuditEntry, throwable);\n                 eventLogger.debug(serializedAuditEntry, throwable);"},{"sha":"a1434035cb59d76347dc8c8d650227ee9d90adca","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/LoggerServiceImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04f0dcb87957323827bed5a792ac15ac96b4f788/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04f0dcb87957323827bed5a792ac15ac96b4f788/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java?ref=04f0dcb87957323827bed5a792ac15ac96b4f788","patch":"@@ -21,9 +21,9 @@\n import java.text.ParseException;\n import java.util.List;\n import javax.ws.rs.BadRequestException;\n-import org.apache.syncope.common.lib.log.EventCategoryTO;\n+import org.apache.syncope.common.lib.log.EventCategory;\n import org.apache.syncope.common.lib.log.LogAppender;\n-import org.apache.syncope.common.lib.log.LogStatementTO;\n+import org.apache.syncope.common.lib.log.LogStatement;\n import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.LoggerType;\n@@ -45,7 +45,7 @@ public List<LogAppender> memoryAppenders() {\n     }\n \n     @Override\n-    public List<LogStatementTO> getLastLogStatements(final String memoryAppender) {\n+    public List<LogStatement> getLastLogStatements(final String memoryAppender) {\n         return logic.getLastLogStatements(memoryAppender);\n     }\n \n@@ -119,7 +119,7 @@ public void update(final LoggerType type, final LoggerTO logger) {\n     }\n \n     @Override\n-    public List<EventCategoryTO> events() {\n+    public List<EventCategory> events() {\n         return logic.listAuditEvents();\n     }\n }"},{"sha":"6831a5618a83fa47169255355d7a364f956296ac","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LoggerITCase.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04f0dcb87957323827bed5a792ac15ac96b4f788/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04f0dcb87957323827bed5a792ac15ac96b4f788/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java?ref=04f0dcb87957323827bed5a792ac15ac96b4f788","patch":"@@ -36,9 +36,9 @@\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.log.EventCategoryTO;\n+import org.apache.syncope.common.lib.log.EventCategory;\n import org.apache.syncope.common.lib.log.LogAppender;\n-import org.apache.syncope.common.lib.log.LogStatementTO;\n+import org.apache.syncope.common.lib.log.LogStatement;\n import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n@@ -74,11 +74,11 @@ public void listMemoryAppenders() {\n \n     @Test\n     public void lastStatements() {\n-        List<LogStatementTO> statements = loggerService.getLastLogStatements(\"connid\");\n+        List<LogStatement> statements = loggerService.getLastLogStatements(\"connid\");\n         assertNotNull(statements);\n         assertFalse(statements.isEmpty());\n \n-        LogStatementTO statement = statements.get(0);\n+        LogStatement statement = statements.get(0);\n         assertNotNull(statement);\n         assertNotNull(statement.getLoggerName());\n         assertNotNull(statement.getLevel());\n@@ -163,11 +163,11 @@ public void enableDisableAudit() {\n \n     @Test\n     public void listAuditEvents() {\n-        final List<EventCategoryTO> events = loggerService.events();\n+        final List<EventCategory> events = loggerService.events();\n \n         boolean found = false;\n \n-        for (EventCategoryTO eventCategoryTO : events) {\n+        for (EventCategory eventCategoryTO : events) {\n             if (UserLogic.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n                 assertEquals(EventCategoryType.LOGIC, eventCategoryTO.getType());\n                 assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n@@ -181,7 +181,7 @@ public void listAuditEvents() {\n         assertTrue(found);\n \n         found = false;\n-        for (EventCategoryTO eventCategoryTO : events) {\n+        for (EventCategory eventCategoryTO : events) {\n             if (GroupLogic.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n                 assertEquals(EventCategoryType.LOGIC, eventCategoryTO.getType());\n                 assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n@@ -193,7 +193,7 @@ public void listAuditEvents() {\n         assertTrue(found);\n \n         found = false;\n-        for (EventCategoryTO eventCategoryTO : events) {\n+        for (EventCategory eventCategoryTO : events) {\n             if (ResourceLogic.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n                 assertEquals(EventCategoryType.LOGIC, eventCategoryTO.getType());\n                 assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n@@ -206,7 +206,7 @@ public void listAuditEvents() {\n         assertTrue(found);\n \n         found = false;\n-        for (EventCategoryTO eventCategoryTO : events) {\n+        for (EventCategory eventCategoryTO : events) {\n             if (AnyTypeKind.USER.name().toLowerCase().equals(eventCategoryTO.getCategory())) {\n                 if (RESOURCE_NAME_LDAP.equals(eventCategoryTO.getSubcategory())\n                         && EventCategoryType.PULL == eventCategoryTO.getType()) {\n@@ -219,7 +219,7 @@ public void listAuditEvents() {\n         assertTrue(found);\n \n         found = false;\n-        for (EventCategoryTO eventCategoryTO : events) {\n+        for (EventCategory eventCategoryTO : events) {\n             if (AnyTypeKind.USER.name().toLowerCase().equals(eventCategoryTO.getCategory())) {\n                 if (RESOURCE_NAME_CSV.equals(eventCategoryTO.getSubcategory())\n                         && EventCategoryType.PROPAGATION == eventCategoryTO.getType()) {\n@@ -234,7 +234,7 @@ public void listAuditEvents() {\n         assertTrue(found);\n \n         found = false;\n-        for (EventCategoryTO eventCategoryTO : events) {\n+        for (EventCategory eventCategoryTO : events) {\n             if (EventCategoryType.TASK == eventCategoryTO.getType()\n                     && \"PullJobDelegate\".equals(eventCategoryTO.getCategory())) {\n                 found = true;\n@@ -335,10 +335,10 @@ public void issueSYNCOPE708() {\n \n     @Test\n     public void issueSYNCOPE976() {\n-        List<EventCategoryTO> events = loggerService.events();\n+        List<EventCategory> events = loggerService.events();\n         assertNotNull(events);\n \n-        EventCategoryTO userLogic = events.stream().\n+        EventCategory userLogic = events.stream().\n                 filter(object -> \"UserLogic\".equals(object.getCategory())).findAny().get();\n         assertNotNull(userLogic);\n         assertEquals(1, userLogic.getEvents().stream().filter(event -> \"create\".equals(event)).count());"}]}