{"sha":"c7d3c995dbc972f619652ce45a84900eb238095c","node_id":"C_kwDOJfYA1toAKGM3ZDNjOTk1ZGJjOTcyZjYxOTY1MmNlNDVhODQ5MDBlYjIzODA5NWM","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-10-14T08:19:22Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-10-14T08:19:22Z"},"message":"A few optimizations around incremental pull task execution","tree":{"sha":"090d6ca841106d228d5a70be69e38afeefdc8322","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/090d6ca841106d228d5a70be69e38afeefdc8322"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c7d3c995dbc972f619652ce45a84900eb238095c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c7d3c995dbc972f619652ce45a84900eb238095c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c7d3c995dbc972f619652ce45a84900eb238095c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c7d3c995dbc972f619652ce45a84900eb238095c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"3394328bcfbe0125a6a38a48a056ba4f44b8d82b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3394328bcfbe0125a6a38a48a056ba4f44b8d82b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3394328bcfbe0125a6a38a48a056ba4f44b8d82b"}],"stats":{"total":219,"additions":108,"deletions":111},"files":[{"sha":"ec8e974a8e8cd94509fe3e87fa9c94aedf0e2ba8","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -177,7 +177,7 @@ protected Triple<AnyType, ExternalResource, Provision> getProvision(\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceKey + \"'\");\n         }\n-        Provision provision = resource.getProvision(anyType.getKey()).\n+        Provision provision = resource.getProvisionByAnyType(anyType.getKey()).\n                 orElseThrow(() -> new NotFoundException(\n                 \"Provision for \" + anyType + \" on Resource '\" + resourceKey + \"'\"));\n         if (provision.getMapping() == null) {"},{"sha":"1fd59b9b639d4f74b2358758e6ac0a62b2c683bb","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -206,7 +206,7 @@ public void setLatestSyncToken(final String key, final String anyTypeKey) {\n             if (anyType == null) {\n                 throw new NotFoundException(\"AnyType '\" + anyTypeKey + '\\'');\n             }\n-            Provision provision = resource.getProvision(anyType.getKey()).\n+            Provision provision = resource.getProvisionByAnyType(anyType.getKey()).\n                     orElseThrow(() -> new NotFoundException(\n                     \"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + '\\''));\n \n@@ -239,7 +239,7 @@ public void removeSyncToken(final String key, final String anyTypeKey) {\n             if (anyType == null) {\n                 throw new NotFoundException(\"AnyType '\" + anyTypeKey + '\\'');\n             }\n-            Provision provision = resource.getProvision(anyType.getKey()).\n+            Provision provision = resource.getProvisionByAnyType(anyType.getKey()).\n                     orElseThrow(() -> new NotFoundException(\n                     \"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + '\\''));\n \n@@ -302,7 +302,7 @@ protected Triple<AnyType, ExternalResource, Provision> getProvision(\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceKey + \"'\");\n         }\n-        Provision provision = resource.getProvision(anyType.getKey()).\n+        Provision provision = resource.getProvisionByAnyType(anyType.getKey()).\n                 orElseThrow(() -> new NotFoundException(\n                 \"Provision for \" + anyType + \" on Resource '\" + resourceKey + \"'\"));\n         if (provision.getMapping() == null) {"},{"sha":"657d16d09856f1cd2b1d01065d5180e3c5b15a87","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/ExternalResource.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FExternalResource.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n \n public interface ExternalResource extends ProvidedKeyEntity {\n \n@@ -105,9 +104,9 @@ public interface ExternalResource extends ProvidedKeyEntity {\n \n     void setRandomPwdIfNotProvided(boolean condition);\n \n-    Optional<Provision> getProvision(String anyType);\n+    Optional<Provision> getProvisionByAnyType(String anyType);\n \n-    Optional<Provision> getProvision(ObjectClass objectClass);\n+    Optional<Provision> getProvisionByObjectClass(String objectClass);\n \n     List<Provision> getProvisions();\n "},{"sha":"339ff1484a7bc3b8794e5c79e6668f4da5cb20f8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAExternalResource.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -66,7 +66,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushPolicy;\n import org.apache.syncope.core.persistence.jpa.validation.entity.ExternalResourceCheck;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n \n /**\n  * Resource for propagation and pull.\n@@ -202,15 +201,15 @@ public void setConnector(final ConnInstance connector) {\n     }\n \n     @Override\n-    public Optional<Provision> getProvision(final String anyType) {\n+    public Optional<Provision> getProvisionByAnyType(final String anyType) {\n         return getProvisions().stream().\n                 filter(provision -> provision.getAnyType().equals(anyType)).findFirst();\n     }\n \n     @Override\n-    public Optional<Provision> getProvision(final ObjectClass objectClass) {\n+    public Optional<Provision> getProvisionByObjectClass(final String objectClass) {\n         return getProvisions().stream().\n-                filter(provision -> provision.getObjectClass().equals(objectClass.getObjectClassValue())).findFirst();\n+                filter(provision -> provision.getObjectClass().equals(objectClass)).findFirst();\n     }\n \n     @Override"},{"sha":"1605e9c884fd34174e807db99fe640a0e6f14508","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyTypeTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeTest.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -116,6 +116,6 @@ public void delete() {\n \n     @Test\n     public void deleteInvalid() {\n-        assertThrows(IllegalArgumentException.class, () -> anyTypeDAO.delete(anyTypeDAO.findUser().getKey()));\n+        assertThrows(IllegalArgumentException.class, () -> anyTypeDAO.delete(AnyTypeKind.USER.name()));\n     }\n }"},{"sha":"190b55817a89e14951b946c44c724e322bb82b0e","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.BackOffStrategy;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n@@ -90,7 +91,7 @@ public void findByKey() {\n         PullPolicy pullPolicy = policyDAO.find(\"880f8553-069b-4aed-9930-2cd53873f544\");\n         assertNotNull(pullPolicy);\n \n-        PullCorrelationRuleEntity pullCR = pullPolicy.getCorrelationRule(anyTypeDAO.findUser().getKey()).orElse(null);\n+        PullCorrelationRuleEntity pullCR = pullPolicy.getCorrelationRule(AnyTypeKind.USER.name()).orElse(null);\n         assertNotNull(pullCR);\n         DefaultPullCorrelationRuleConf pullCRConf =\n                 POJOHelper.deserialize(pullCR.getImplementation().getBody(), DefaultPullCorrelationRuleConf.class);\n@@ -102,7 +103,7 @@ public void findByKey() {\n         PushPolicy pushPolicy = policyDAO.find(\"fb6530e5-892d-4f47-a46b-180c5b6c5c83\");\n         assertNotNull(pushPolicy);\n \n-        PushCorrelationRuleEntity pushCR = pushPolicy.getCorrelationRule(anyTypeDAO.findUser().getKey()).orElse(null);\n+        PushCorrelationRuleEntity pushCR = pushPolicy.getCorrelationRule(AnyTypeKind.USER.name()).orElse(null);\n         assertNotNull(pushCR);\n         DefaultPushCorrelationRuleConf pushCRConf =\n                 POJOHelper.deserialize(pushCR.getImplementation().getBody(), DefaultPushCorrelationRuleConf.class);\n@@ -214,9 +215,9 @@ public void createPull() {\n \n         assertNotNull(pullPolicy);\n         assertEquals(pullURuleName,\n-                pullPolicy.getCorrelationRule(anyTypeDAO.findUser().getKey()).get().getImplementation().getKey());\n+                pullPolicy.getCorrelationRule(AnyTypeKind.USER.name()).get().getImplementation().getKey());\n         assertEquals(pullGRuleName,\n-                pullPolicy.getCorrelationRule(anyTypeDAO.findGroup().getKey()).get().getImplementation().getKey());\n+                pullPolicy.getCorrelationRule(AnyTypeKind.GROUP.name()).get().getImplementation().getKey());\n     }\n \n     @Test\n@@ -258,9 +259,9 @@ public void createPush() {\n \n         assertNotNull(pushPolicy);\n         assertEquals(pushURuleName,\n-                pushPolicy.getCorrelationRule(anyTypeDAO.findUser().getKey()).get().getImplementation().getKey());\n+                pushPolicy.getCorrelationRule(AnyTypeKind.USER.name()).get().getImplementation().getKey());\n         assertEquals(pushGRuleName,\n-                pushPolicy.getCorrelationRule(anyTypeDAO.findGroup().getKey()).get().getImplementation().getKey());\n+                pushPolicy.getCorrelationRule(AnyTypeKind.GROUP.name()).get().getImplementation().getKey());\n     }\n \n     @Test"},{"sha":"0cd2b02fdb30dc341e2a4525bc18bdb368304da3","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ResourceTest.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -32,11 +32,11 @@\n import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.Mapping;\n import org.apache.syncope.common.lib.to.Provision;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n-import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n@@ -58,9 +58,6 @@ public class ResourceTest extends AbstractTest {\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n-\n     @Test\n     public void findById() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n@@ -71,7 +68,7 @@ public void findById() {\n         assertEquals(\"net.tirasa.connid.bundles.soap.WebServiceConnector\", connector.getConnectorName());\n         assertEquals(\"net.tirasa.connid.bundles.soap\", connector.getBundleName());\n \n-        Mapping mapping = resource.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping();\n+        Mapping mapping = resource.getProvisionByAnyType(AnyTypeKind.USER.name()).get().getMapping();\n         assertFalse(mapping.getItems().isEmpty());\n \n         assertTrue(mapping.getItems().stream().\n@@ -117,7 +114,7 @@ public void findAll() {\n     public void getConnObjectKey() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-2\");\n         assertNotNull(resource);\n-        assertEquals(\"fullname\", resource.getProvision(anyTypeDAO.findUser().getKey()).get().\n+        assertEquals(\"fullname\", resource.getProvisionByAnyType(AnyTypeKind.USER.name()).get().\n                 getMapping().getConnObjectKeyItem().get().getIntAttrName());\n     }\n \n@@ -128,7 +125,7 @@ public void save() {\n         resource.setPropagationPriority(2);\n \n         Provision provision = new Provision();\n-        provision.setAnyType(anyTypeDAO.findUser().getKey());\n+        provision.setAnyType(AnyTypeKind.USER.name());\n         provision.setObjectClass(ObjectClass.ACCOUNT_NAME);\n         resource.getProvisions().add(provision);\n \n@@ -149,8 +146,10 @@ public void save() {\n         entityManager().flush();\n         assertNotNull(actual);\n         assertNotNull(actual.getConnector());\n-        assertNotNull(actual.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping());\n-        assertFalse(actual.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems().isEmpty());\n+        assertNotNull(actual.getProvisionByAnyType(AnyTypeKind.USER.name()).\n+                get().getMapping());\n+        assertFalse(actual.getProvisionByAnyType(AnyTypeKind.USER.name()).\n+                get().getMapping().getItems().isEmpty());\n         assertEquals(Integer.valueOf(2), actual.getPropagationPriority());\n     }\n \n@@ -164,7 +163,7 @@ public void saveInvalidMappingIntAttr() {\n             resource.setConnector(connector);\n \n             Provision provision = new Provision();\n-            provision.setAnyType(anyTypeDAO.findUser().getKey());\n+            provision.setAnyType(AnyTypeKind.USER.name());\n             provision.setObjectClass(ObjectClass.ACCOUNT_NAME);\n             resource.getProvisions().add(provision);\n \n@@ -190,7 +189,7 @@ public void saveInvalidMappingExtAttr() {\n             resource.setConnector(connector);\n \n             Provision provision = new Provision();\n-            provision.setAnyType(anyTypeDAO.findUser().getKey());\n+            provision.setAnyType(AnyTypeKind.USER.name());\n             provision.setObjectClass(ObjectClass.ACCOUNT_NAME);\n             resource.getProvisions().add(provision);\n \n@@ -217,7 +216,7 @@ public void saveInvalidProvision() {\n             resource.setKey(\"invalidProvision\");\n \n             Provision provision = new Provision();\n-            provision.setAnyType(anyTypeDAO.findUser().getKey());\n+            provision.setAnyType(AnyTypeKind.USER.name());\n             provision.setObjectClass(ObjectClass.ACCOUNT_NAME);\n             resource.getProvisions().add(provision);\n \n@@ -231,7 +230,7 @@ public void saveInvalidProvision() {\n             mapping.setConnObjectKeyItem(connObjectKey);\n \n             provision = new Provision();\n-            provision.setAnyType(anyTypeDAO.findGroup().getKey());\n+            provision.setAnyType(AnyTypeKind.GROUP.name());\n             provision.setObjectClass(ObjectClass.ACCOUNT_NAME);\n             resource.getProvisions().add(provision);\n \n@@ -250,7 +249,7 @@ public void saveVirtualMapping() {\n         resource.setPropagationPriority(2);\n \n         Provision provision = new Provision();\n-        provision.setAnyType(anyTypeDAO.findUser().getKey());\n+        provision.setAnyType(AnyTypeKind.USER.name());\n         provision.setObjectClass(ObjectClass.ACCOUNT_NAME);\n         resource.getProvisions().add(provision);\n \n@@ -284,7 +283,7 @@ public void saveWithGroupMappingType() {\n         resource.setConnector(connector);\n \n         Provision provision = new Provision();\n-        provision.setAnyType(anyTypeDAO.findUser().getKey());\n+        provision.setAnyType(AnyTypeKind.USER.name());\n         provision.setObjectClass(ObjectClass.ACCOUNT_NAME);\n         resource.getProvisions().add(provision);\n \n@@ -314,7 +313,8 @@ public void saveWithGroupMappingType() {\n         entityManager().flush();\n         assertNotNull(actual);\n \n-        assertEquals(3, actual.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems().size());\n+        assertEquals(3, actual.getProvisionByAnyType(AnyTypeKind.USER.name()).\n+                get().getMapping().getItems().size());\n     }\n \n     @Test"},{"sha":"388e4369cd5b8907d4d80489298827ea2e84be5e","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainSchemaTest.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -32,10 +32,10 @@\n import javax.persistence.EntityExistsException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n-import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -59,9 +59,6 @@\n @Transactional(\"Master\")\n public class PlainSchemaTest extends AbstractTest {\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n-\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -123,7 +120,7 @@ public void deleteFullname() {\n         // fullname is mapped as ConnObjectKey for ws-target-resource-2, need to swap it otherwise validation errors \n         // will be raised\n         resourceDAO.find(\"ws-target-resource-2\").\n-                getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems().\n+                getProvisionByAnyType(AnyTypeKind.USER.name()).get().getMapping().getItems().\n                 forEach(item -> {\n                     if (\"fullname\".equals(item.getIntAttrName())) {\n                         item.setConnObjectKey(false);\n@@ -192,12 +189,12 @@ public void deleteSurname() {\n     @Test\n     public void deleteFirstname() {\n         int pre = resourceDAO.find(\"resource-db-pull\").\n-                getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems().size();\n+                getProvisionByAnyType(AnyTypeKind.USER.name()).get().getMapping().getItems().size();\n \n         plainSchemaDAO.delete(\"firstname\");\n         assertNull(plainSchemaDAO.find(\"firstname\"));\n \n         assertEquals(pre - 1, resourceDAO.find(\"resource-db-pull\").\n-                getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems().size());\n+                getProvisionByAnyType(AnyTypeKind.USER.name()).get().getMapping().getItems().size());\n     }\n }"},{"sha":"8b9dc51a0a0b29edd0b20e5a71a7b2b97f988f0a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -30,9 +30,9 @@\n import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.Mapping;\n import org.apache.syncope.common.lib.to.Provision;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n@@ -58,9 +58,6 @@ public class ResourceTest extends AbstractTest {\n     @Autowired\n     private ConnInstanceDAO connInstanceDAO;\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n-\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -108,7 +105,7 @@ public void save() {\n         resource.setConnector(connector);\n \n         Provision provision = new Provision();\n-        provision.setAnyType(anyTypeDAO.findUser().getKey());\n+        provision.setAnyType(AnyTypeKind.USER.name());\n         provision.setObjectClass(ObjectClass.ACCOUNT_NAME);\n         resource.getProvisions().add(provision);\n \n@@ -142,7 +139,7 @@ public void save() {\n         ExternalResource actual = resourceDAO.save(resource);\n         entityManager().flush();\n         assertNotNull(actual);\n-        assertNotNull(actual.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping());\n+        assertNotNull(actual.getProvisionByAnyType(AnyTypeKind.USER.name()).get().getMapping());\n \n         entityManager().flush();\n         resourceDAO.detach(actual);\n@@ -170,8 +167,8 @@ public void save() {\n         assertTrue(resource.getConnector().equals(connector));\n \n         // check mappings\n-        List<Item> items = resource.getProvision(\n-                anyTypeDAO.findUser().getKey()).get().getMapping().getItems();\n+        List<Item> items = resource.getProvisionByAnyType(\n+                AnyTypeKind.USER.name()).get().getMapping().getItems();\n         assertNotNull(items);\n         assertEquals(5, items.size());\n \n@@ -240,13 +237,14 @@ public void issue243() {\n         ExternalResource csv = resourceDAO.find(\"resource-csv\");\n         assertNotNull(csv);\n \n-        int origMapItems = csv.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems().size();\n+        int origMapItems = csv.getProvisionByAnyType(\n+                AnyTypeKind.USER.name()).get().getMapping().getItems().size();\n \n         Item newMapItem = new Item();\n         newMapItem.setIntAttrName(\"TEST\");\n         newMapItem.setExtAttrName(\"TEST\");\n         newMapItem.setPurpose(MappingPurpose.PROPAGATION);\n-        csv.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().add(newMapItem);\n+        csv.getProvisionByAnyType(AnyTypeKind.USER.name()).get().getMapping().add(newMapItem);\n \n         resourceDAO.save(csv);\n         entityManager().flush();\n@@ -255,6 +253,6 @@ public void issue243() {\n         assertNotNull(csv);\n         assertEquals(\n                 origMapItems + 1,\n-                csv.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems().size());\n+                csv.getProvisionByAnyType(AnyTypeKind.USER.name()).get().getMapping().getItems().size());\n     }\n }"},{"sha":"ba1ecd9a5a8dcedb79ed317526daf93cd29edba2","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/VirSchemaTest.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -24,6 +24,7 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import org.apache.syncope.common.lib.to.Item;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n@@ -51,7 +52,7 @@ public void deal() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n         assertNotNull(resource);\n         assertTrue(virSchemaDAO.find(resource).isEmpty());\n-        assertTrue(virSchemaDAO.find(resource.getKey(), anyTypeDAO.findUser().getKey()).isEmpty());\n+        assertTrue(virSchemaDAO.find(resource.getKey(), AnyTypeKind.USER.name()).isEmpty());\n \n         VirSchema virSchema = entityFactory.newEntity(VirSchema.class);\n         virSchema.setKey(\"vSchema\");\n@@ -71,8 +72,8 @@ public void deal() {\n         assertFalse(virSchemaDAO.find(resource).isEmpty());\n         assertTrue(virSchemaDAO.find(resource).contains(virSchema.getKey()));\n \n-        assertFalse(virSchemaDAO.find(resource.getKey(), anyTypeDAO.findUser().getKey()).isEmpty());\n-        assertTrue(virSchemaDAO.find(resource.getKey(), anyTypeDAO.findUser().getKey()).contains(virSchema));\n+        assertFalse(virSchemaDAO.find(resource.getKey(), AnyTypeKind.USER.name()).isEmpty());\n+        assertTrue(virSchemaDAO.find(resource.getKey(), AnyTypeKind.USER.name()).contains(virSchema));\n \n         Item item = virSchema.asLinkingMappingItem();\n         assertNotNull(item);"},{"sha":"35b54b32a20441f598c81f5376ca3848102020f4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultMappingManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -736,10 +736,10 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n \n                     case \"userOwner\":\n                     case \"groupOwner\":\n-                        Mapping uMappingTO = provision.getAnyType().equals(anyTypeDAO.findUser().getKey())\n+                        Mapping uMappingTO = provision.getAnyType().equals(AnyTypeKind.USER.name())\n                                 ? provision.getMapping()\n                                 : null;\n-                        Mapping gMappingTO = provision.getAnyType().equals(anyTypeDAO.findGroup().getKey())\n+                        Mapping gMappingTO = provision.getAnyType().equals(AnyTypeKind.GROUP.name())\n                                 ? provision.getMapping()\n                                 : null;\n "},{"sha":"0bd8cc5b34692aa99ade3d1da18f1a40f2bd7a84","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultVirAttrHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultVirAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultVirAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultVirAttrHandler.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -113,7 +113,7 @@ protected Map<VirSchema, List<String>> getValues(final Any<?> any, final Set<Vir\n                 LOG.debug(\"Found in cache: {}={}\", cacheKey, cacheValue);\n                 result.put(schema, cacheValue.getValues());\n             } else if (schema.getAnyType().equals(any.getType())) {\n-                schema.getResource().getProvision(schema.getAnyType().getKey()).ifPresent(provision -> {\n+                schema.getResource().getProvisionByAnyType(schema.getAnyType().getKey()).ifPresent(provision -> {\n                     Set<VirSchema> schemasToRead = toRead.get(Pair.of(schema.getResource(), provision));\n                     if (schemasToRead == null) {\n                         schemasToRead = new HashSet<>();"},{"sha":"c8a89310f87b2e049d9faa9e5c11d527d9f211bb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -200,7 +200,7 @@ protected Map<String, ConnObject> onResources(\n         Map<String, ConnObject> onResources = new HashMap<>();\n \n         resources.stream().map(resourceDAO::find).filter(Objects::nonNull).forEach(resource -> {\n-            resource.getProvision(any.getType().getKey()).\n+            resource.getProvisionByAnyType(any.getType().getKey()).\n                     ifPresent(provision -> MappingUtils.getConnObjectKeyItem(provision).ifPresent(keyItem -> {\n \n                 Pair<String, Set<Attribute>> prepared = mappingManager.prepareAttrsFromAny(\n@@ -319,7 +319,7 @@ private SyncopeClientException checkMandatoryOnResources(\n         SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n         resources.forEach(resource -> {\n-            Optional<Provision> provision = resource.getProvision(any.getType().getKey());\n+            Optional<Provision> provision = resource.getProvisionByAnyType(any.getType().getKey());\n             if (resource.isEnforceMandatoryCondition() && provision.isPresent()) {\n                 List<String> missingAttrNames = evaluateMandatoryCondition(resource, provision.get(), any);\n                 if (!missingAttrNames.isEmpty()) {"},{"sha":"4927d4c5a06662d13888eb83d7028944ea1c576c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -149,7 +149,7 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                 LOG.debug(\"Invalid {} specified {}, ignoring...\",\n                         AnyType.class.getSimpleName(), provisionTO.getAnyType());\n             } else {\n-                Provision provision = resource.getProvision(anyType.getKey()).orElse(null);\n+                Provision provision = resource.getProvisionByAnyType(anyType.getKey()).orElse(null);\n                 if (provision == null) {\n                     provision = new Provision();\n                     provision.setAnyType(anyType.getKey());"},{"sha":"89ceae71cc12df04eb7c02bca307fe7456a2f984","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -356,7 +356,7 @@ protected VirSchema fill(final VirSchema schema, final VirSchemaTO schemaTO) {\n             sce.getElements().add(\"AnyType \" + schemaTO.getAnyType() + \" not found\");\n             throw sce;\n         }\n-        Provision provision = resource.getProvision(anyType.getKey()).orElse(null);\n+        Provision provision = resource.getProvisionByAnyType(anyType.getKey()).orElse(null);\n         if (provision == null) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSchemaDefinition);\n             sce.getElements().add(\"Provision for AnyType\" + schemaTO.getAnyType()"},{"sha":"b61320990ac66059ecd6ca05b8928a67239e65fe","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -443,7 +443,7 @@ public void create(final User user, final UserCR userCR) {\n     }\n \n     protected boolean isPasswordMapped(final ExternalResource resource) {\n-        return resource.getProvision(anyTypeDAO.findUser().getKey()).\n+        return resource.getProvisionByAnyType(AnyTypeKind.USER.name()).\n                 filter(provision -> provision.getMapping() != null).\n                 map(provision -> provision.getMapping().getItems().stream().anyMatch(Item::isPassword)).\n                 orElse(false);\n@@ -747,7 +747,7 @@ public Pair<PropagationByResource<String>, PropagationByResource<Pair<String, St\n             propByRes.addAll(\n                     ResourceOperation.UPDATE,\n                     anyUtils.getAllResources(saved).stream().\n-                            map(resource -> resource.getProvision(saved.getType().getKey()).\n+                            map(resource -> resource.getProvisionByAnyType(saved.getType().getKey()).\n                             filter(mappingManager::hasMustChangePassword).\n                             map(provision -> resource.getKey()).\n                             orElse(null))."},{"sha":"9bc0f6650296f18e0237ebd15dbbe62419d20980","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReconciliationReportlet.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -285,7 +285,7 @@ private void doExtract(final ContentHandler handler, final List<? extends Any<?>\n \n             AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n             anyUtils.getAllResources(any).forEach(resource -> {\n-                Provision provision = resource.getProvision(any.getType().getKey()).orElse(null);\n+                Provision provision = resource.getProvisionByAnyType(any.getType().getKey()).orElse(null);\n                 Optional<Item> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n                 String connObjectKeyValue = connObjectKeyItem.isPresent()\n                         ? mappingManager.getConnObjectKeyValue(any, resource, provision).get()"},{"sha":"91be9326c32c424dbba57bc4b76c7e90d57c09ff","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -197,7 +197,7 @@ protected Uid doCreate(\n \n         Uid result = connector.create(taskInfo.getObjectClass(), attributes, null, propagationAttempted);\n \n-        taskInfo.getResource().getProvision(taskInfo.getAnyType()).\n+        taskInfo.getResource().getProvisionByAnyType(taskInfo.getAnyType()).\n                 filter(provision -> provision.getUidOnCreate() != null).\n                 ifPresent(provision -> anyUtilsFactory.getInstance(taskInfo.getAnyTypeKind()).addAttr(\n                 validator,\n@@ -511,7 +511,8 @@ protected TaskExec<PropagationTask> doExecute(\n         Uid uid = null;\n         Result result;\n         try {\n-            provision = taskInfo.getResource().getProvision(taskInfo.getObjectClass()).orElse(null);\n+            provision = taskInfo.getResource().\n+                    getProvisionByObjectClass(taskInfo.getObjectClass().getObjectClassValue()).orElse(null);\n             orgUnit = taskInfo.getResource().getOrgUnit();\n \n             if (taskInfo.getBeforeObj().isEmpty()) {"},{"sha":"bf367e3668f21a43490804be919bc337b8ab451e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationManager.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationManager.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -468,7 +468,7 @@ protected List<PropagationTaskInfo> createTasks(\n         propByRes.asMap().forEach((resourceKey, operation) -> {\n             ExternalResource resource = resourceDAO.find(resourceKey);\n             Provision provision = Optional.ofNullable(resource).\n-                    flatMap(externalResource -> externalResource.getProvision(any.getType().getKey())).orElse(null);\n+                    flatMap(r -> r.getProvisionByAnyType(any.getType().getKey())).orElse(null);\n             Stream<Item> mappingItems = provision == null\n                     ? Stream.empty()\n                     : MappingUtils.getPropagationItems(provision.getMapping().getItems().stream());\n@@ -514,7 +514,7 @@ protected List<PropagationTaskInfo> createTasks(\n \n                 Provision provision = account == null || account.getResource() == null\n                         ? null\n-                        : account.getResource().getProvision(AnyTypeKind.USER.name()).orElse(null);\n+                        : account.getResource().getProvisionByAnyType(AnyTypeKind.USER.name()).orElse(null);\n                 Stream<Item> mappingItems = provision == null\n                         ? Stream.empty()\n                         : MappingUtils.getPropagationItems(provision.getMapping().getItems().stream());\n@@ -621,7 +621,7 @@ public Map<Pair<String, String>, Set<Attribute>> prepareAttrs(\n         anyUtilsFactory.getInstance(kind).dao().findAllResourceKeys(key).stream().\n                 map(resourceDAO::find).\n                 filter(resource -> !excludedResources.contains(resource.getKey())\n-                && resource.getProvision(any.getType().getKey()).isPresent()\n+                && resource.getProvisionByAnyType(any.getType().getKey()).isPresent()\n                 && resource.getPropagationPolicy() != null && resource.getPropagationPolicy().isUpdateDelta()).\n                 forEach(resource -> {\n                     Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrsFromAny(\n@@ -630,7 +630,7 @@ public Map<Pair<String, String>, Set<Attribute>> prepareAttrs(\n                             changePwd,\n                             enable,\n                             resource,\n-                            resource.getProvision(any.getType().getKey()).get());\n+                            resource.getProvisionByAnyType(any.getType().getKey()).get());\n                     attrs.put(\n                             Pair.of(resource.getKey(), preparedAttrs.getLeft()),\n                             preparedAttrs.getRight());\n@@ -639,7 +639,7 @@ public Map<Pair<String, String>, Set<Attribute>> prepareAttrs(\n         if (any instanceof User) {\n             ((User) any).getLinkedAccounts().stream().\n                     filter(account -> !excludedResources.contains(account.getResource().getKey())\n-                    && account.getResource().getProvision(any.getType().getKey()).isPresent()\n+                    && account.getResource().getProvisionByAnyType(any.getType().getKey()).isPresent()\n                     && account.getResource().getPropagationPolicy() != null\n                     && account.getResource().getPropagationPolicy().isUpdateDelta()).\n                     forEach(account -> {\n@@ -648,7 +648,7 @@ public Map<Pair<String, String>, Set<Attribute>> prepareAttrs(\n                                 account,\n                                 password,\n                                 true,\n-                                account.getResource().getProvision(any.getType().getKey()).get());\n+                                account.getResource().getProvisionByAnyType(any.getType().getKey()).get());\n                         attrs.put(\n                                 Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue()),\n                                 preparedAttrs);"},{"sha":"2a0cd1297ec04f92f78a849462d9c2686851a4a0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPMembershipPropagationActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -110,7 +110,7 @@ public void before(final PropagationTaskInfo taskInfo) {\n             return;\n         }\n \n-        Optional<Provision> groupProvision = taskInfo.getResource().getProvision(AnyTypeKind.GROUP.name());\n+        Optional<Provision> groupProvision = taskInfo.getResource().getProvisionByAnyType(AnyTypeKind.GROUP.name());\n         if (groupProvision.isPresent() && groupProvision.get().getMapping() != null\n                 && StringUtils.isNotBlank(groupProvision.get().getMapping().getConnObjectLink())) {\n "},{"sha":"7155fcfa56c41b2ac0546495ab6312317e253907","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractProvisioningJobDelegate.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.common.lib.to.Mapping;\n import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -404,11 +405,11 @@ protected String createReport(\n         }\n \n         // Summary, also to be included for FAILURE and ALL, so create it anyway.\n-        boolean includeUser = resource.getProvision(anyTypeDAO.findUser().getKey()).isPresent();\n-        boolean includeGroup = resource.getProvision(anyTypeDAO.findGroup().getKey()).isPresent();\n+        boolean includeUser = resource.getProvisionByAnyType(AnyTypeKind.USER.name()).isPresent();\n+        boolean includeGroup = resource.getProvisionByAnyType(AnyTypeKind.GROUP.name()).isPresent();\n         boolean includeAnyObject = resource.getProvisions().stream().anyMatch(\n-                provision -> !provision.getAnyType().equals(anyTypeDAO.findUser().getKey())\n-                && !provision.getAnyType().equals(anyTypeDAO.findGroup().getKey()));\n+                provision -> !provision.getAnyType().equals(AnyTypeKind.USER.name())\n+                && !provision.getAnyType().equals(AnyTypeKind.GROUP.name()));\n         boolean includeRealm = resource.getOrgUnit() != null;\n \n         if (includeUser) {"},{"sha":"440d0cfb18cbb749555cd27b4ae2a369a0c856b4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -132,7 +132,8 @@ public void setPullExecutor(final SyncopePullExecutor executor) {\n     public boolean handle(final SyncDelta delta) {\n         Provision provision = null;\n         try {\n-            provision = profile.getTask().getResource().getProvision(delta.getObject().getObjectClass()).\n+            provision = profile.getTask().getResource().\n+                    getProvisionByObjectClass(delta.getObject().getObjectClass().getObjectClassValue()).\n                     orElseThrow(() -> new JobExecutionException(\n                     \"No provision found on \" + profile.getTask().getResource()\n                     + \" for \" + delta.getObject().getObjectClass()));"},{"sha":"8069984a9293e95ed71a203a0d035a69ee0124b2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -212,7 +212,8 @@ public boolean handle(final String anyKey) {\n         try {\n             any = getAnyUtils().dao().authFind(anyKey);\n \n-            Provision provision = profile.getTask().getResource().getProvision(any.getType().getKey()).orElse(null);\n+            Provision provision = profile.getTask().getResource().\n+                    getProvisionByAnyType(any.getType().getKey()).orElse(null);\n             if (provision == null) {\n                 throw new JobExecutionException(\"No provision found on \" + profile.getTask().getResource() + \" for \"\n                         + any.getType().getKey());"},{"sha":"1dce09272706aa1c70aef9566cea7560bb9299db","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/InboundMatcher.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -140,7 +140,7 @@ public Optional<PullMatch> match(\n             final ExternalResource resource,\n             final Connector connector) {\n \n-        Optional<Provision> provision = resource.getProvision(anyType.getKey());\n+        Optional<Provision> provision = resource.getProvisionByAnyType(anyType.getKey());\n         if (provision.isEmpty()) {\n             return Optional.empty();\n         }"},{"sha":"3bb5a9cc86a363f81e07c26511c02de7f90fbaa3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.PullMatch;\n@@ -165,7 +166,7 @@ public void after(\n         }\n \n         Optional<Provision> provision = profile.getTask().getResource().\n-                getProvision(anyTypeDAO.findUser().getKey()).filter(p -> p.getMapping() != null);\n+                getProvisionByAnyType(AnyTypeKind.USER.name()).filter(p -> p.getMapping() != null);\n         if (provision.isEmpty()) {\n             super.after(profile, delta, entity, result);\n         }"},{"sha":"055449838dc7361ba2ecf7bfacd86d3e0e00a0dd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -336,6 +336,7 @@ protected String doExecuteProvisioning(\n             handler.setProfile(profile);\n             handler.setPullExecutor(this);\n \n+            boolean setSyncTokens = false;\n             try {\n                 Set<String> moreAttrsToGet = new HashSet<>();\n                 profile.getActions().forEach(a -> moreAttrsToGet.addAll(a.moreAttrsToGet(profile, provision)));\n@@ -361,9 +362,7 @@ protected String doExecuteProvisioning(\n                                 options);\n \n                         if (!dryRun) {\n-                            provision.setSyncToken(\n-                                    ConnObjectUtils.toString(latestSyncTokens.get(provision.getObjectClass())));\n-                            resourceDAO.save(pullTask.getResource());\n+                            setSyncTokens = true;\n                         }\n                         break;\n \n@@ -396,6 +395,14 @@ protected String doExecuteProvisioning(\n                 }\n             } catch (Throwable t) {\n                 throw new JobExecutionException(\"While pulling from connector\", t);\n+            } finally {\n+                if (setSyncTokens) {\n+                    latestSyncTokens.forEach((objectClass, syncToken) -> {\n+                        pullTask.getResource().getProvisionByObjectClass(objectClass).\n+                                ifPresent(p -> p.setSyncToken(ConnObjectUtils.toString(syncToken)));\n+                    });\n+                    resourceDAO.save(pullTask.getResource());\n+                }\n             }\n         }\n         try {"},{"sha":"e6e6a0cb71a43fb9bca8c8b2f9c622e9b20f212c","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DefaultMappingManagerTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManagerTest.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -92,7 +92,7 @@ public class DefaultMappingManagerTest extends AbstractTest {\n     public void prepareAttrsForUser() {\n         User bellini = userDAO.findByUsername(\"bellini\");\n         ExternalResource ldap = resourceDAO.find(\"resource-ldap\");\n-        Provision provision = ldap.getProvision(AnyTypeKind.USER.name()).get();\n+        Provision provision = ldap.getProvisionByAnyType(AnyTypeKind.USER.name()).get();\n \n         assertNotEquals(CipherAlgorithm.AES, bellini.getCipherAlgorithm());\n \n@@ -171,7 +171,7 @@ public void prepareAttrsForUser() {\n     public void prepareAttrsForLinkedAccount() {\n         User vivaldi = userDAO.findByUsername(\"vivaldi\");\n         ExternalResource ldap = resourceDAO.find(\"resource-ldap\");\n-        Provision provision = ldap.getProvision(AnyTypeKind.USER.name()).get();\n+        Provision provision = ldap.getProvisionByAnyType(AnyTypeKind.USER.name()).get();\n \n         LinkedAccount account = entityFactory.newEntity(LinkedAccount.class);\n         account.setConnObjectKeyValue(\"admin\");\n@@ -281,7 +281,7 @@ public void issueSYNCOPE1583() {\n \n         // 3. check propagation attrs\n         ExternalResource csv = resourceDAO.find(\"resource-csv\");\n-        Provision provision = csv.getProvision(AnyTypeKind.USER.name()).get();\n+        Provision provision = csv.getProvisionByAnyType(AnyTypeKind.USER.name()).get();\n         assertNotNull(provision);\n \n         Pair<String, Set<Attribute>> attrs = mappingManager.prepareAttrsFromAny("},{"sha":"b1866fd0ac317db80447297d8963f2d313af81bb","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderTest.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -91,10 +91,10 @@ public void issue42() {\n \n         Set<Item> beforeUserIdMappings = new HashSet<>();\n         for (ExternalResource res : resourceDAO.findAll()) {\n-            if (res.getProvision(anyTypeDAO.findUser().getKey()).isPresent()\n-                    && res.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping() != null) {\n+            if (res.getProvisionByAnyType(AnyTypeKind.USER.name()).isPresent()\n+                    && res.getProvisionByAnyType(AnyTypeKind.USER.name()).get().getMapping() != null) {\n \n-                for (Item mapItem : res.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems()) {\n+                for (Item mapItem : res.getProvisionByAnyType(AnyTypeKind.USER.name()).get().getMapping().getItems()) {\n                     if (userId.getKey().equals(mapItem.getIntAttrName())) {\n                         beforeUserIdMappings.add(mapItem);\n                     }\n@@ -127,8 +127,8 @@ public void issue42() {\n         resource = resourceDAO.save(resource);\n         entityManager().flush();\n         assertNotNull(resource);\n-        assertNotNull(resource.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping());\n-        assertEquals(1, resource.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems().size());\n+        assertNotNull(resource.getProvisionByAnyType(AnyTypeKind.USER.name()).get().getMapping());\n+        assertEquals(1, resource.getProvisionByAnyType(AnyTypeKind.USER.name()).get().getMapping().getItems().size());\n \n         ExternalResource actual = resourceDAO.find(\"resource-issue42\");\n         entityManager().flush();\n@@ -139,10 +139,10 @@ public void issue42() {\n \n         Set<Item> afterUserIdMappings = new HashSet<>();\n         for (ExternalResource res : resourceDAO.findAll()) {\n-            if (res.getProvision(anyTypeDAO.findUser().getKey()).isPresent()\n-                    && res.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping() != null) {\n+            if (res.getProvisionByAnyType(AnyTypeKind.USER.name()).isPresent()\n+                    && res.getProvisionByAnyType(AnyTypeKind.USER.name()).get().getMapping() != null) {\n \n-                for (Item mapItem : res.getProvision(anyTypeDAO.findUser().getKey()).get().getMapping().getItems()) {\n+                for (Item mapItem : res.getProvisionByAnyType(AnyTypeKind.USER.name()).get().getMapping().getItems()) {\n                     if (userId.getKey().equals(mapItem.getIntAttrName())) {\n                         afterUserIdMappings.add(mapItem);\n                     }"},{"sha":"a4d6ce0030c8442d57a9216641aa356576010c8e","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActionsTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActionsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActionsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActionsTest.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -197,7 +197,7 @@ public void afterWithEmptyAttributes(final @Mock Attribute attribute) throws Job\n         entity = new GroupTO();\n \n         when(connectorObj.getAttributeByName(anyString())).thenReturn(attribute);\n-        when(externalResource.getProvision(anyString())).thenAnswer(ic -> Optional.of(mock(Provision.class)));\n+        when(externalResource.getProvisionByAnyType(anyString())).thenAnswer(ic -> Optional.of(mock(Provision.class)));\n \n         ldapMembershipPullActions.after(profile, syncDelta, entity, result);\n \n@@ -212,7 +212,7 @@ public void after() throws JobExecutionException {\n         List<String> expected = List.of(expectedUid);\n \n         when(connectorObj.getAttributeByName(anyString())).thenReturn(attribute);\n-        when(externalResource.getProvision(anyString())).thenAnswer(ic -> Optional.empty());\n+        when(externalResource.getProvisionByAnyType(anyString())).thenAnswer(ic -> Optional.empty());\n         when(inboundMatcher.match(any(AnyType.class), anyString(), any(ExternalResource.class), any(Connector.class))).\n                 thenReturn(Optional.of(new PullMatch(MatchType.ANY, user)));\n "},{"sha":"1ff38fbe5aa6df1bf3ca7fd4a45b3e9ff8bdb3c6","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -43,7 +43,6 @@\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n@@ -52,7 +51,6 @@\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Delegation;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n@@ -104,8 +102,6 @@ public class AuthDataAccessor {\n \n     protected final GroupDAO groupDAO;\n \n-    protected final AnyTypeDAO anyTypeDAO;\n-\n     protected final AnySearchDAO anySearchDAO;\n \n     protected final AccessTokenDAO accessTokenDAO;\n@@ -131,7 +127,6 @@ public AuthDataAccessor(\n             final RealmDAO realmDAO,\n             final UserDAO userDAO,\n             final GroupDAO groupDAO,\n-            final AnyTypeDAO anyTypeDAO,\n             final AnySearchDAO anySearchDAO,\n             final AccessTokenDAO accessTokenDAO,\n             final ConfParamOps confParamOps,\n@@ -146,7 +141,6 @@ public AuthDataAccessor(\n         this.realmDAO = realmDAO;\n         this.userDAO = userDAO;\n         this.groupDAO = groupDAO;\n-        this.anyTypeDAO = anyTypeDAO;\n         this.anySearchDAO = anySearchDAO;\n         this.accessTokenDAO = accessTokenDAO;\n         this.confParamOps = confParamOps;\n@@ -289,13 +283,12 @@ protected boolean authenticate(final User user, final String password) {\n             ExternalResource resource = itor.next();\n             String connObjectKey = null;\n             try {\n-                AnyType userType = anyTypeDAO.findUser();\n-                Provision provision = resource.getProvision(userType.getKey()).\n+                Provision provision = resource.getProvisionByAnyType(AnyTypeKind.USER.name()).\n                         orElseThrow(() -> new AccountNotFoundException(\n-                        \"Unable to locate provision for user type \" + userType.getKey()));\n+                        \"Unable to locate provision for user type \" + AnyTypeKind.USER.name()));\n                 connObjectKey = mappingManager.getConnObjectKeyValue(user, resource, provision).\n                         orElseThrow(() -> new AccountNotFoundException(\n-                        \"Unable to locate conn object key value for \" + userType.getKey()));\n+                        \"Unable to locate conn object key value for \" + AnyTypeKind.USER.name()));\n                 Uid uid = connectorManager.getConnector(resource).authenticate(connObjectKey, password, null);\n                 if (uid != null) {\n                     authenticated = true;"},{"sha":"938a2b67094c0554eb7d819857438749e1971a1d","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/WebSecurityContext.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FWebSecurityContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7d3c995dbc972f619652ce45a84900eb238095c/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FWebSecurityContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FWebSecurityContext.java?ref=c7d3c995dbc972f619652ce45a84900eb238095c","patch":"@@ -23,7 +23,6 @@\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n@@ -171,7 +170,6 @@ public AuthDataAccessor authDataAccessor(\n             final RealmDAO realmDAO,\n             final UserDAO userDAO,\n             final GroupDAO groupDAO,\n-            final AnyTypeDAO anyTypeDAO,\n             final AnySearchDAO anySearchDAO,\n             final AccessTokenDAO accessTokenDAO,\n             final ConfParamOps confParamOps,\n@@ -187,7 +185,6 @@ public AuthDataAccessor authDataAccessor(\n                 realmDAO,\n                 userDAO,\n                 groupDAO,\n-                anyTypeDAO,\n                 anySearchDAO,\n                 accessTokenDAO,\n                 confParamOps,"}]}