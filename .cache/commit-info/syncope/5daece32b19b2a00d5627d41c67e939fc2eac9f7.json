{"sha":"5daece32b19b2a00d5627d41c67e939fc2eac9f7","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjVkYWVjZTMyYjE5YjJhMDBkNTYyN2Q0MWM2N2U5MzlmYzJlYWM5Zjc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-10-02T14:19:04Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-10-02T14:19:12Z"},"message":"Upgrading Flowable","tree":{"sha":"0560affc717393e18d01aac008e39888cb6b9c16","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0560affc717393e18d01aac008e39888cb6b9c16"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5daece32b19b2a00d5627d41c67e939fc2eac9f7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5daece32b19b2a00d5627d41c67e939fc2eac9f7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5daece32b19b2a00d5627d41c67e939fc2eac9f7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5daece32b19b2a00d5627d41c67e939fc2eac9f7/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83"}],"stats":{"total":1429,"additions":721,"deletions":708},"files":[{"sha":"72180347bca00ba10bbd203e4ed8c5b09a104ba7","filename":"ext/flowable/flowable-bpmn/pom.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5daece32b19b2a00d5627d41c67e939fc2eac9f7/ext%2Fflowable%2Fflowable-bpmn%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5daece32b19b2a00d5627d41c67e939fc2eac9f7/ext%2Fflowable%2Fflowable-bpmn%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fpom.xml?ref=5daece32b19b2a00d5627d41c67e939fc2eac9f7","patch":"@@ -59,6 +59,10 @@ under the License.\n       <groupId>org.flowable</groupId>\n       <artifactId>flowable-spring</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.flowable</groupId>\n+      <artifactId>flowable-idm-spring-configurator</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.flowable</groupId>\n       <artifactId>flowable-json-converter</artifactId>"},{"sha":"15fd7a4f49e8f885b046fe9be5968f4b82f28101","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5daece32b19b2a00d5627d41c67e939fc2eac9f7/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5daece32b19b2a00d5627d41c67e939fc2eac9f7/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java?ref=5daece32b19b2a00d5627d41c67e939fc2eac9f7","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.flowable.impl;\n \n+import org.apache.syncope.core.flowable.support.SyncopeTaskQueryImpl;\n import java.util.Base64;\n import java.util.List;\n import java.util.Set;"},{"sha":"833fe6bcf3a735efd0c06a3856432f3a4b91513f","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeTaskQueryImpl.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5daece32b19b2a00d5627d41c67e939fc2eac9f7/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeTaskQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5daece32b19b2a00d5627d41c67e939fc2eac9f7/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeTaskQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeTaskQueryImpl.java?ref=5daece32b19b2a00d5627d41c67e939fc2eac9f7","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.flowable.impl;\n+package org.apache.syncope.core.flowable.support;\n \n import org.flowable.common.engine.impl.interceptor.CommandExecutor;\n import org.flowable.task.api.TaskQuery;","previous_filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/SyncopeTaskQueryImpl.java"},{"sha":"bf5c06f707a4415c4f4048ce3a746dcac4b6403f","filename":"ext/flowable/flowable-bpmn/src/main/resources/org/apache/syncope/ext/flowable/Task.xml","status":"modified","additions":709,"deletions":706,"changes":1415,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5daece32b19b2a00d5627d41c67e939fc2eac9f7/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fext%2Fflowable%2FTask.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5daece32b19b2a00d5627d41c67e939fc2eac9f7/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fext%2Fflowable%2FTask.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fext%2Fflowable%2FTask.xml?ref=5daece32b19b2a00d5627d41c67e939fc2eac9f7","patch":"@@ -25,118 +25,118 @@ under the License.\n   \n   <insert id=\"insertTask\" parameterType=\"org.flowable.task.service.impl.persistence.entity.TaskEntityImpl\">\n     insert into ${prefix}ACT_RU_TASK (ID_, REV_, NAME_, PARENT_TASK_ID_, DESCRIPTION_, PRIORITY_, CREATE_TIME_, OWNER_, ASSIGNEE_, DELEGATION_, \n-    EXECUTION_ID_, PROC_INST_ID_, PROC_DEF_ID_, TASK_DEF_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, SCOPE_DEFINITION_ID_,\n-    TASK_DEF_KEY_, DUE_DATE_, CATEGORY_, SUSPENSION_STATE_, TENANT_ID_, FORM_KEY_, CLAIM_TIME_, \n-    IS_COUNT_ENABLED_, VAR_COUNT_, ID_LINK_COUNT_, SUB_TASK_COUNT_)\n+                      EXECUTION_ID_, PROC_INST_ID_, PROC_DEF_ID_, TASK_DEF_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, SCOPE_DEFINITION_ID_,\n+                      TASK_DEF_KEY_, DUE_DATE_, CATEGORY_, SUSPENSION_STATE_, TENANT_ID_, FORM_KEY_, CLAIM_TIME_, \n+                      IS_COUNT_ENABLED_, VAR_COUNT_, ID_LINK_COUNT_, SUB_TASK_COUNT_)\n     values (#{id, jdbcType=VARCHAR},\n-    1,\n-    #{name, jdbcType=VARCHAR},\n-    #{parentTaskId, jdbcType=VARCHAR},\n-    #{description, jdbcType=VARCHAR},\n-    #{priority, jdbcType=INTEGER},\n-    #{createTime, jdbcType=TIMESTAMP},\n-    #{owner, jdbcType=VARCHAR},\n-    #{assignee, jdbcType=VARCHAR},\n-    #{delegationStateString, jdbcType=VARCHAR},\n-    #{executionId, jdbcType=VARCHAR},\n-    #{processInstanceId, jdbcType=VARCHAR},\n-    #{processDefinitionId, jdbcType=VARCHAR},\n-    #{taskDefinitionId, jdbcType=VARCHAR},\n-    #{scopeId, jdbcType=VARCHAR},\n-    #{subScopeId, jdbcType=VARCHAR},\n-    #{scopeType, jdbcType=VARCHAR},\n-    #{scopeDefinitionId, jdbcType=VARCHAR},\n-    #{taskDefinitionKey, jdbcType=VARCHAR},\n-    #{dueDate, jdbcType=TIMESTAMP},\n-    #{category, jdbcType=VARCHAR},\n-    #{suspensionState, jdbcType=INTEGER},\n-    #{tenantId, jdbcType=VARCHAR},\n-    #{formKey, jdbcType=VARCHAR},\n-    #{claimTime, jdbcType=TIMESTAMP},\n-    #{isCountEnabled, jdbcType=BOOLEAN},\n-    #{variableCount, jdbcType=INTEGER},\n-    #{identityLinkCount, jdbcType=INTEGER},\n-    #{subTaskCount, jdbcType=INTEGER}\n-    )\n+            1,\n+            #{name, jdbcType=VARCHAR},\n+            #{parentTaskId, jdbcType=VARCHAR},\n+            #{description, jdbcType=VARCHAR},\n+            #{priority, jdbcType=INTEGER},\n+            #{createTime, jdbcType=TIMESTAMP},\n+            #{owner, jdbcType=VARCHAR},\n+            #{assignee, jdbcType=VARCHAR},\n+            #{delegationStateString, jdbcType=VARCHAR},\n+            #{executionId, jdbcType=VARCHAR},\n+            #{processInstanceId, jdbcType=VARCHAR},\n+            #{processDefinitionId, jdbcType=VARCHAR},\n+            #{taskDefinitionId, jdbcType=VARCHAR},\n+            #{scopeId, jdbcType=VARCHAR},\n+            #{subScopeId, jdbcType=VARCHAR},\n+            #{scopeType, jdbcType=VARCHAR},\n+            #{scopeDefinitionId, jdbcType=VARCHAR},\n+            #{taskDefinitionKey, jdbcType=VARCHAR},\n+            #{dueDate, jdbcType=TIMESTAMP},\n+            #{category, jdbcType=VARCHAR},\n+            #{suspensionState, jdbcType=INTEGER},\n+            #{tenantId, jdbcType=VARCHAR},\n+            #{formKey, jdbcType=VARCHAR},\n+            #{claimTime, jdbcType=TIMESTAMP},\n+            #{isCountEnabled, jdbcType=BOOLEAN},\n+            #{variableCount, jdbcType=INTEGER},\n+            #{identityLinkCount, jdbcType=INTEGER},\n+            #{subTaskCount, jdbcType=INTEGER}\n+           )\n   </insert>\n \n   <insert id=\"bulkInsertTask\" parameterType=\"java.util.List\">\n     INSERT INTO ${prefix}ACT_RU_TASK (ID_, REV_, NAME_, PARENT_TASK_ID_, DESCRIPTION_, PRIORITY_, CREATE_TIME_, OWNER_, ASSIGNEE_, DELEGATION_, \n-    EXECUTION_ID_, PROC_INST_ID_, PROC_DEF_ID_, TASK_DEF_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, SCOPE_DEFINITION_ID_, \n-    TASK_DEF_KEY_, DUE_DATE_, CATEGORY_, SUSPENSION_STATE_, TENANT_ID_, FORM_KEY_, CLAIM_TIME_, \n-    IS_COUNT_ENABLED_, VAR_COUNT_, ID_LINK_COUNT_, SUB_TASK_COUNT_)\n+        EXECUTION_ID_, PROC_INST_ID_, PROC_DEF_ID_, TASK_DEF_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, SCOPE_DEFINITION_ID_, \n+        TASK_DEF_KEY_, DUE_DATE_, CATEGORY_, SUSPENSION_STATE_, TENANT_ID_, FORM_KEY_, CLAIM_TIME_, \n+        IS_COUNT_ENABLED_, VAR_COUNT_, ID_LINK_COUNT_, SUB_TASK_COUNT_)\n     VALUES \n-    <foreach collection=\"list\" item=\"task\" index=\"index\" separator=\",\"> \n-      (#{task.id, jdbcType=VARCHAR},\n-      1,\n-      #{task.name, jdbcType=VARCHAR},\n-      #{task.parentTaskId, jdbcType=VARCHAR},\n-      #{task.description, jdbcType=VARCHAR},\n-      #{task.priority, jdbcType=INTEGER},\n-      #{task.createTime, jdbcType=TIMESTAMP},\n-      #{task.owner, jdbcType=VARCHAR},\n-      #{task.assignee, jdbcType=VARCHAR},\n-      #{task.delegationStateString, jdbcType=VARCHAR},\n-      #{task.executionId, jdbcType=VARCHAR},\n-      #{task.processInstanceId, jdbcType=VARCHAR},\n-      #{task.processDefinitionId, jdbcType=VARCHAR},\n-      #{task.taskDefinitionId, jdbcType=VARCHAR},\n-      #{task.scopeId, jdbcType=VARCHAR},\n-      #{task.subScopeId, jdbcType=VARCHAR},\n-      #{task.scopeType, jdbcType=VARCHAR},\n-      #{task.scopeDefinitionId, jdbcType=VARCHAR},\n-      #{task.taskDefinitionKey, jdbcType=VARCHAR},\n-      #{task.dueDate, jdbcType=TIMESTAMP},\n-      #{task.category, jdbcType=VARCHAR},\n-      #{task.suspensionState, jdbcType=INTEGER},\n-      #{task.tenantId, jdbcType=VARCHAR},\n-      #{task.formKey, jdbcType=VARCHAR},\n-      #{task.claimTime, jdbcType=TIMESTAMP},\n-      #{task.isCountEnabled, jdbcType=BOOLEAN},\n-      #{task.variableCount, jdbcType=INTEGER},\n-      #{task.identityLinkCount, jdbcType=INTEGER},\n-      #{task.subTaskCount, jdbcType=INTEGER}\n-      )\n+      <foreach collection=\"list\" item=\"task\" index=\"index\" separator=\",\"> \n+        (#{task.id, jdbcType=VARCHAR},\n+         1,\n+         #{task.name, jdbcType=VARCHAR},\n+         #{task.parentTaskId, jdbcType=VARCHAR},\n+         #{task.description, jdbcType=VARCHAR},\n+         #{task.priority, jdbcType=INTEGER},\n+         #{task.createTime, jdbcType=TIMESTAMP},\n+         #{task.owner, jdbcType=VARCHAR},\n+         #{task.assignee, jdbcType=VARCHAR},\n+         #{task.delegationStateString, jdbcType=VARCHAR},\n+         #{task.executionId, jdbcType=VARCHAR},\n+         #{task.processInstanceId, jdbcType=VARCHAR},\n+         #{task.processDefinitionId, jdbcType=VARCHAR},\n+         #{task.taskDefinitionId, jdbcType=VARCHAR},\n+         #{task.scopeId, jdbcType=VARCHAR},\n+         #{task.subScopeId, jdbcType=VARCHAR},\n+         #{task.scopeType, jdbcType=VARCHAR},\n+         #{task.scopeDefinitionId, jdbcType=VARCHAR},\n+         #{task.taskDefinitionKey, jdbcType=VARCHAR},\n+         #{task.dueDate, jdbcType=TIMESTAMP},\n+         #{task.category, jdbcType=VARCHAR},\n+         #{task.suspensionState, jdbcType=INTEGER},\n+         #{task.tenantId, jdbcType=VARCHAR},\n+         #{task.formKey, jdbcType=VARCHAR},\n+         #{task.claimTime, jdbcType=TIMESTAMP},\n+         #{task.isCountEnabled, jdbcType=BOOLEAN},\n+         #{task.variableCount, jdbcType=INTEGER},\n+         #{task.identityLinkCount, jdbcType=INTEGER},\n+         #{task.subTaskCount, jdbcType=INTEGER}\n+         )\n     </foreach>\n   </insert>\n \n   <insert id=\"bulkInsertTask\" databaseId=\"oracle\" parameterType=\"java.util.List\">\n     INSERT ALL \n-    <foreach collection=\"list\" item=\"task\" index=\"index\">\n-      INTO ${prefix}ACT_RU_TASK (ID_, REV_, NAME_, PARENT_TASK_ID_, DESCRIPTION_, PRIORITY_, CREATE_TIME_, OWNER_, ASSIGNEE_, DELEGATION_, \n-      EXECUTION_ID_, PROC_INST_ID_, PROC_DEF_ID_, TASK_DEF_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, SCOPE_DEFINITION_ID_, TASK_DEF_KEY_, \n-      DUE_DATE_, CATEGORY_, SUSPENSION_STATE_, TENANT_ID_, FORM_KEY_, CLAIM_TIME_, \n-      IS_COUNT_ENABLED_, VAR_COUNT_, ID_LINK_COUNT_, SUB_TASK_COUNT_) VALUES\n-      (#{task.id, jdbcType=VARCHAR},\n-      1,\n-      #{task.name, jdbcType=VARCHAR},\n-      #{task.parentTaskId, jdbcType=VARCHAR},\n-      #{task.description, jdbcType=VARCHAR},\n-      #{task.priority, jdbcType=INTEGER},\n-      #{task.createTime, jdbcType=TIMESTAMP},\n-      #{task.owner, jdbcType=VARCHAR},\n-      #{task.assignee, jdbcType=VARCHAR},\n-      #{task.delegationStateString, jdbcType=VARCHAR},\n-      #{task.executionId, jdbcType=VARCHAR},\n-      #{task.processInstanceId, jdbcType=VARCHAR},\n-      #{task.processDefinitionId, jdbcType=VARCHAR},\n-      #{task.taskDefinitionId, jdbcType=VARCHAR},\n-      #{task.scopeId, jdbcType=VARCHAR},\n-      #{task.subScopeId, jdbcType=VARCHAR},\n-      #{task.scopeType, jdbcType=VARCHAR},\n-      #{task.scopeDefinitionId, jdbcType=VARCHAR},\n-      #{task.taskDefinitionKey, jdbcType=VARCHAR},\n-      #{task.dueDate, jdbcType=TIMESTAMP},\n-      #{task.category, jdbcType=VARCHAR},\n-      #{task.suspensionState, jdbcType=INTEGER},\n-      #{task.tenantId, jdbcType=VARCHAR},\n-      #{task.formKey, jdbcType=VARCHAR},\n-      #{task.claimTime, jdbcType=TIMESTAMP},\n-      #{task.isCountEnabled, jdbcType=BOOLEAN},\n-      #{task.variableCount, jdbcType=INTEGER},\n-      #{task.identityLinkCount, jdbcType=INTEGER},\n-      #{task.subTaskCount, jdbcType=INTEGER}\n-      )\n+      <foreach collection=\"list\" item=\"task\" index=\"index\">\n+        INTO ${prefix}ACT_RU_TASK (ID_, REV_, NAME_, PARENT_TASK_ID_, DESCRIPTION_, PRIORITY_, CREATE_TIME_, OWNER_, ASSIGNEE_, DELEGATION_, \n+              EXECUTION_ID_, PROC_INST_ID_, PROC_DEF_ID_, TASK_DEF_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, SCOPE_DEFINITION_ID_, TASK_DEF_KEY_, \n+              DUE_DATE_, CATEGORY_, SUSPENSION_STATE_, TENANT_ID_, FORM_KEY_, CLAIM_TIME_, \n+              IS_COUNT_ENABLED_, VAR_COUNT_, ID_LINK_COUNT_, SUB_TASK_COUNT_) VALUES\n+        (#{task.id, jdbcType=VARCHAR},\n+         1,\n+         #{task.name, jdbcType=VARCHAR},\n+         #{task.parentTaskId, jdbcType=VARCHAR},\n+         #{task.description, jdbcType=VARCHAR},\n+         #{task.priority, jdbcType=INTEGER},\n+         #{task.createTime, jdbcType=TIMESTAMP},\n+         #{task.owner, jdbcType=VARCHAR},\n+         #{task.assignee, jdbcType=VARCHAR},\n+         #{task.delegationStateString, jdbcType=VARCHAR},\n+         #{task.executionId, jdbcType=VARCHAR},\n+         #{task.processInstanceId, jdbcType=VARCHAR},\n+         #{task.processDefinitionId, jdbcType=VARCHAR},\n+         #{task.taskDefinitionId, jdbcType=VARCHAR},\n+         #{task.scopeId, jdbcType=VARCHAR},\n+         #{task.subScopeId, jdbcType=VARCHAR},\n+         #{task.scopeType, jdbcType=VARCHAR},\n+         #{task.scopeDefinitionId, jdbcType=VARCHAR},\n+         #{task.taskDefinitionKey, jdbcType=VARCHAR},\n+         #{task.dueDate, jdbcType=TIMESTAMP},\n+         #{task.category, jdbcType=VARCHAR},\n+         #{task.suspensionState, jdbcType=INTEGER},\n+         #{task.tenantId, jdbcType=VARCHAR},\n+         #{task.formKey, jdbcType=VARCHAR},\n+         #{task.claimTime, jdbcType=TIMESTAMP},\n+         #{task.isCountEnabled, jdbcType=BOOLEAN},\n+         #{task.variableCount, jdbcType=INTEGER},\n+         #{task.identityLinkCount, jdbcType=INTEGER},\n+         #{task.subTaskCount, jdbcType=INTEGER}\n+         )\n     </foreach>\n     SELECT * FROM dual\n   </insert>\n@@ -148,111 +148,114 @@ under the License.\n     <set>\n       REV_ = #{revisionNext, jdbcType=INTEGER},\n       <if test=\"originalPersistentState.name != name\">\n-        NAME_ = #{name, jdbcType=VARCHAR},\n+          NAME_ = #{name, jdbcType=VARCHAR},\n       </if>\n       <if test=\"originalPersistentState.parentTaskId != parentTaskId\">\n-        PARENT_TASK_ID_ = #{parentTaskId, jdbcType=VARCHAR},\n+          PARENT_TASK_ID_ = #{parentTaskId, jdbcType=VARCHAR},\n       </if>\n       <if test=\"originalPersistentState.priority != priority\">\n-        PRIORITY_ = #{priority, jdbcType=INTEGER},\n+          PRIORITY_ = #{priority, jdbcType=INTEGER},\n       </if>\n       <if test=\"originalPersistentState.createTime != createTime\">\n-        CREATE_TIME_ = #{createTime, jdbcType=TIMESTAMP},\n+          CREATE_TIME_ = #{createTime, jdbcType=TIMESTAMP},\n       </if>\n       <if test=\"originalPersistentState.owner != owner\">\n-        OWNER_ = #{owner, jdbcType=VARCHAR},\n+          OWNER_ = #{owner, jdbcType=VARCHAR},\n       </if>\n       <if test=\"originalPersistentState.assignee != assignee\">\n-        ASSIGNEE_ = #{assignee, jdbcType=VARCHAR},\n+          ASSIGNEE_ = #{assignee, jdbcType=VARCHAR},\n       </if>\n       <if test=\"originalPersistentState.delegationStateString != delegationStateString\">\n-        DELEGATION_ = #{delegationStateString, jdbcType=VARCHAR},\n+          DELEGATION_ = #{delegationStateString, jdbcType=VARCHAR},\n       </if>\n       <if test=\"originalPersistentState.executionId != executionId\">\n-        EXECUTION_ID_ = #{executionId, jdbcType=VARCHAR},\n+          EXECUTION_ID_ = #{executionId, jdbcType=VARCHAR},\n       </if>\n       <if test=\"originalPersistentState.processDefinitionId != processDefinitionId\">\n-        PROC_DEF_ID_ = #{processDefinitionId, jdbcType=VARCHAR},\n+          PROC_DEF_ID_ = #{processDefinitionId, jdbcType=VARCHAR},\n       </if>\n       <if test=\"originalPersistentState.taskDefinitionId != taskDefinitionId\">\n-        TASK_DEF_ID_ = #{taskDefinitionId, jdbcType=VARCHAR},\n+          TASK_DEF_ID_ = #{taskDefinitionId, jdbcType=VARCHAR},\n+      </if>\n+      <if test=\"originalPersistentState.taskDefinitionKey != taskDefinitionKey\">\n+          TASK_DEF_KEY_ = #{taskDefinitionKey, jdbcType=VARCHAR},\n       </if>\n       <if test=\"originalPersistentState.scopeId != scopeId\">\n-        SCOPE_ID_ = #{scopeId, jdbcType=VARCHAR}\n+          SCOPE_ID_ = #{scopeId, jdbcType=VARCHAR}\n       </if>\n       <if test=\"originalPersistentState.subScopeId != subScopeId\">\n-        SUB_SCOPE_ID_ = #{subScopeId, jdbcType=VARCHAR}\n+          SUB_SCOPE_ID_ = #{subScopeId, jdbcType=VARCHAR}\n       </if>\n       <if test=\"originalPersistentState.scopeType != scopeType\">\n-        SCOPE_TYPE_ = #{scopeType, jdbcType=VARCHAR}\n+          SCOPE_TYPE_ = #{scopeType, jdbcType=VARCHAR}\n       </if>\n-      <if test=\"originalPersistentState.scopeDefinitionId != scopeDefinitionId\">\n-        SCOPE_DEFINITION_ID_ = #{scopeDefinitionId, jdbcType=VARCHAR}\n+       <if test=\"originalPersistentState.scopeDefinitionId != scopeDefinitionId\">\n+          SCOPE_DEFINITION_ID_ = #{scopeDefinitionId, jdbcType=VARCHAR}\n       </if>\n       <if test=\"originalPersistentState.description != description\">\n-        DESCRIPTION_ = #{description, jdbcType=VARCHAR},\n+          DESCRIPTION_ = #{description, jdbcType=VARCHAR},\n       </if>\n       <if test=\"originalPersistentState.dueDate != dueDate\">\n-        DUE_DATE_ = #{dueDate, jdbcType=TIMESTAMP},\n+          DUE_DATE_ = #{dueDate, jdbcType=TIMESTAMP},\n       </if>\n       <if test=\"originalPersistentState.category != category\">\n-        CATEGORY_ = #{category, jdbcType=VARCHAR},\n+          CATEGORY_ = #{category, jdbcType=VARCHAR},\n       </if>\n       <if test=\"originalPersistentState.suspensionState != suspensionState\">\n-        SUSPENSION_STATE_ = #{suspensionState, jdbcType=INTEGER},\n+          SUSPENSION_STATE_ = #{suspensionState, jdbcType=INTEGER},\n       </if>\n       <if test=\"originalPersistentState.formKey != formKey\">\n-        FORM_KEY_ = #{formKey, jdbcType=VARCHAR},\n+          FORM_KEY_ = #{formKey, jdbcType=VARCHAR},\n       </if>\n       <if test=\"originalPersistentState.claimTime != claimTime\">\n-        CLAIM_TIME_ = #{claimTime, jdbcType=TIMESTAMP},\n+          CLAIM_TIME_ = #{claimTime, jdbcType=TIMESTAMP},\n       </if>\n       <if test=\"originalPersistentState.isCountEnabled != isCountEnabled\">\n-        IS_COUNT_ENABLED_ = #{isCountEnabled, jdbcType=BOOLEAN},\n+          IS_COUNT_ENABLED_ = #{isCountEnabled, jdbcType=BOOLEAN},\n       </if>\n       <if test=\"originalPersistentState.variableCount != variableCount\">\n-        VAR_COUNT_ = #{variableCount, jdbcType=INTEGER},\n+          VAR_COUNT_ = #{variableCount, jdbcType=INTEGER},\n       </if>\n       <if test=\"originalPersistentState.identityLinkCount != identityLinkCount\">\n-        ID_LINK_COUNT_ = #{identityLinkCount, jdbcType=INTEGER},\n+          ID_LINK_COUNT_ = #{identityLinkCount, jdbcType=INTEGER},\n       </if>\n       <if test=\"originalPersistentState.subTaskCount != subTaskCount\">\n-        SUB_TASK_COUNT_ = #{subTaskCount, jdbcType=INTEGER}\n+          SUB_TASK_COUNT_ = #{subTaskCount, jdbcType=INTEGER}\n       </if>\n     </set>\n     where ID_= #{id, jdbcType=VARCHAR}\n-    and REV_ = #{revision, jdbcType=INTEGER}\n+      and REV_ = #{revision, jdbcType=INTEGER}\n   </update>\n   \n   <update id=\"updateTaskTenantIdForDeployment\" parameterType=\"java.util.Map\">\n     update ${prefix}ACT_RU_TASK set\n-    TENANT_ID_ = #{tenantId, jdbcType=VARCHAR}\n+      TENANT_ID_ = #{tenantId, jdbcType=VARCHAR}\n     where\n-    ID_ in (\n-    SELECT T.ID_ from ${prefix}ACT_RU_TASK T\n-    inner join ${prefix}ACT_RE_PROCDEF P on T.PROC_DEF_ID_  = P.ID_\n-    inner join ${prefix}ACT_RE_DEPLOYMENT D on P.DEPLOYMENT_ID_ = D.ID_ \n-    where D.ID_ = #{deploymentId, jdbcType=VARCHAR}\n-    ) \n+      ID_ in (\n+        SELECT T.ID_ from ${prefix}ACT_RU_TASK T\n+        inner join ${prefix}ACT_RE_PROCDEF P on T.PROC_DEF_ID_  = P.ID_\n+        inner join ${prefix}ACT_RE_DEPLOYMENT D on P.DEPLOYMENT_ID_ = D.ID_ \n+        where D.ID_ = #{deploymentId, jdbcType=VARCHAR}\n+      ) \n   </update>\n   \n-  <!-- See http://stackoverflow.com/questions/4429319/you-cant-specify-target-table-for-update-in-from-clause\n-  Tested this on MySQL 5.6: does NOT use a temporary table (so good, performance0 -->\n+    <!-- See http://stackoverflow.com/questions/4429319/you-cant-specify-target-table-for-update-in-from-clause\n+       Tested this on MySQL 5.6: does NOT use a temporary table (so good, performance0 -->\n   <update id=\"updateTaskTenantIdForDeployment\" databaseId=\"mysql\" parameterType=\"java.util.Map\">\n     update ${prefix}ACT_RU_TASK set\n-    TENANT_ID_ = #{tenantId, jdbcType=VARCHAR}\n+      TENANT_ID_ = #{tenantId, jdbcType=VARCHAR}\n     where\n-    ID_ in (\n+      ID_ in (\n \n-    SELECT tempTask.tempId\n-    FROM (\n-    SELECT T.ID_ as tempId\n-    FROM  ${prefix}ACT_RU_TASK T\n-    inner join ${prefix}ACT_RE_PROCDEF P on T.PROC_DEF_ID_  = P.ID_\n-    inner join ${prefix}ACT_RE_DEPLOYMENT D on P.DEPLOYMENT_ID_ = D.ID_ \n-    where D.ID_ = #{deploymentId, jdbcType=VARCHAR}\n+          SELECT tempTask.tempId\n+          FROM (\n+                SELECT T.ID_ as tempId\n+                FROM  ${prefix}ACT_RU_TASK T\n+                inner join ${prefix}ACT_RE_PROCDEF P on T.PROC_DEF_ID_  = P.ID_\n+                inner join ${prefix}ACT_RE_DEPLOYMENT D on P.DEPLOYMENT_ID_ = D.ID_ \n+                where D.ID_ = #{deploymentId, jdbcType=VARCHAR}\n                 \n-    ) AS tempTask \n+        ) AS tempTask \n \n     )\n   </update>\n@@ -275,7 +278,7 @@ under the License.\n   <delete id=\"bulkDeleteTask\" parameterType=\"java.util.Collection\">\n     delete from ${prefix}ACT_RU_TASK where \n     <foreach item=\"task\" collection=\"list\" index=\"index\" separator=\" or \">\n-      ID_ = #{task.id, jdbcType=VARCHAR}\n+        ID_ = #{task.id, jdbcType=VARCHAR}\n     </foreach>\n   </delete>\n   \n@@ -371,7 +374,7 @@ under the License.\n   <!-- TASK SELECT -->  \n \n   <select id=\"selectTask\" parameterType=\"string\" resultMap=\"taskResultMap\">\n-    select * from ${prefix}ACT_RU_TASK where ID_ = #{id, jdbcType=VARCHAR}\n+   select * from ${prefix}ACT_RU_TASK where ID_ = #{id, jdbcType=VARCHAR}\n   </select>\n   \n   <select id=\"selectTasksByParentTaskId\" parameterType=\"org.flowable.common.engine.impl.db.ListQueryParameterObject\" resultMap=\"taskResultMap\">\n@@ -403,16 +406,15 @@ under the License.\n   </select>\n   \n   <!-- Using distinct here because a task can appear multiple times in a resultset when -->\n-  <select id=\"selectTaskByQueryCriteria\" parameterType=\"org.apache.syncope.core.flowable.impl.SyncopeTaskQueryImpl\" resultMap=\"taskResultMap\">\n+  <select id=\"selectTaskByQueryCriteria\" parameterType=\"org.apache.syncope.core.flowable.support.SyncopeTaskQueryImpl\" resultMap=\"taskResultMap\">\n     <if test=\"firstResult != null and firstResult &gt;= 0\">${limitBefore}</if>\n-    select distinct RES.* <if test=\"nullHandlingColumn != null\">, ${nullHandlingColumn}</if> \n-    <if test=\"firstResult != null and firstResult &gt;= 0\">${limitBetween}</if>\n+    select distinct RES.* <if test=\"nullHandlingColumn != null\">, ${nullHandlingColumn}</if> <if test=\"firstResult != null and firstResult &gt;= 0\">${limitBetween}</if>\n     <include refid=\"selectTaskByQueryCriteriaSql\"/> \n     ${orderBy}\n     <if test=\"firstResult != null and firstResult &gt;= 0\">${limitAfter}</if>\n   </select>\n \n-  <select id=\"selectTaskCountByQueryCriteria\" parameterType=\"org.apache.syncope.core.flowable.impl.SyncopeTaskQueryImpl\" resultType=\"long\">\n+  <select id=\"selectTaskCountByQueryCriteria\" parameterType=\"org.apache.syncope.core.flowable.support.SyncopeTaskQueryImpl\" resultType=\"long\">\n     select count(distinct RES.ID_)\n     <include refid=\"selectTaskByQueryCriteriaSql\"/>\n   </select>\n@@ -422,7 +424,7 @@ under the License.\n     <include refid=\"commonSelectTaskByQueryCriteriaSql\"/>\n   </sql>\n   \n-  <select id=\"selectTasksWithRelatedEntitiesByQueryCriteria\" parameterType=\"org.apache.syncope.core.flowable.impl.SyncopeTaskQueryImpl\" resultMap=\"taskAndRelatedEntitiesResultMap\">\n+  <select id=\"selectTasksWithRelatedEntitiesByQueryCriteria\" parameterType=\"org.apache.syncope.core.flowable.support.SyncopeTaskQueryImpl\" resultMap=\"taskAndRelatedEntitiesResultMap\">\n     <include refid=\"selectTasksWithRelatedEntitiesByQueryCriteriaColumns\"/>\n     <include refid=\"selectTasksWithRelatedEntitiesByQueryCriteriaSql\"/>\n     ${orderBy}\n@@ -431,8 +433,8 @@ under the License.\n \n   <sql id=\"selectTasksWithRelatedEntitiesByQueryCriteriaColumns\">\n     <if test=\"firstResult != null and firstResult &gt;= 0\">${limitBefore}</if>\n-    <if test=\"_databaseId != 'db2' and _databaseId != 'mssql'\">\n-      select RES.*,\n+  \t<if test=\"_databaseId != 'db2' and _databaseId != 'mssql'\">\n+    select RES.*,\n       <if test=\"includeTaskLocalVariables or includeProcessVariables\">\n         VAR.ID_ as VAR_ID_, VAR.NAME_ as VAR_NAME_, VAR.TYPE_ as VAR_TYPE_, VAR.REV_ as VAR_REV_,\n         VAR.PROC_INST_ID_ as VAR_PROC_INST_ID_, VAR.EXECUTION_ID_ as VAR_EXECUTION_ID_, VAR.TASK_ID_ as VAR_TASK_ID_,\n@@ -447,7 +449,7 @@ under the License.\n         ILINK.GROUP_ID_ as ILINK_GROUP_ID_, ILINK.TASK_ID_ as ILINK_TASK_ID_,\n         ILINK.PROC_INST_ID_ as ILINK_PROC_INST_ID_, ILINK.PROC_DEF_ID_ as ILINK_PROC_DEF_ID_\n       </if>\n-      <if test=\"firstResult != null and firstResult &gt;= 0\">${limitBetween}</if>\n+    <if test=\"firstResult != null and firstResult &gt;= 0\">${limitBetween}</if>\n     </if>\n     <if test=\"_databaseId == 'db2' || _databaseId == 'mssql'\">\n       select distinct TEMPRES_ID_ as ID_, TEMPRES_REV_ as REV_, TEMPRES_NAME_ as NAME_,\n@@ -518,43 +520,29 @@ under the License.\n     </if>\n     <include refid=\"commonSelectTaskByQueryCriteriaSql\"/>\n   </sql>\n-  \n+\n   <sql id=\"commonSelectTaskByQueryCriteriaSql\">\n-    <if test=\"candidateUser != null || candidateGroups != null || bothCandidateAndAssigned\">\n-      <choose>\n-        <when test=\"bothCandidateAndAssigned\">left</when>\n-        <otherwise>inner</otherwise>\n-      </choose>\n-      join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_\n-    </if>\n     <foreach collection=\"queryVariableValues\" index=\"index\" item=\"var\">\n       <if test=\"!var.operator.equals('EXISTS') &amp;&amp; !var.operator.equals('NOT_EXISTS')\">\n-        <choose>\n-          <when test=\"var.local\">\n-            inner join ${prefix}ACT_RU_VARIABLE A${index} on RES.ID_ = A${index}.TASK_ID_ \n-          </when>\n-          <otherwise>\n-            inner join ${prefix}ACT_RU_VARIABLE A${index} on RES.PROC_INST_ID_ = A${index}.PROC_INST_ID_ \n-          </otherwise>\n-        </choose>\n+          <choose>\n+            <when test=\"var.local\">\n+              inner join ${prefix}ACT_RU_VARIABLE A${index} on RES.ID_ = A${index}.TASK_ID_ \n+            </when>\n+            <otherwise>\n+              inner join ${prefix}ACT_RU_VARIABLE A${index} on RES.PROC_INST_ID_ = A${index}.PROC_INST_ID_ \n+            </otherwise>\n+          </choose>\n       </if>       \n     </foreach>\n     <foreach collection=\"orQueryObjects\" index=\"orIndex\" item=\"orQueryObject\">\n-      <if test=\"orQueryObject.candidateUser != null || orQueryObject.candidateGroups != null || orQueryObject.bothCandidateAndAssigned\">\n-        <choose>\n-          <when test=\"orQueryObject.bothCandidateAndAssigned\">left</when>\n-          <otherwise>inner</otherwise>\n-        </choose>\n-        join ${prefix}ACT_RU_IDENTITYLINK I_OR${orIndex} on I_OR${orIndex}.TASK_ID_ = RES.ID_\n-      </if>\n       <if test=\"orQueryObject.queryVariableValues.size() &gt; 0\">\n         <if test=\"orQueryObject.hasValueComparisonQueryVariables()\">\n-          <if test=\"orQueryObject.hasLocalQueryVariableValue()\">\n-            left outer join ${prefix}ACT_RU_VARIABLE A_L_OR${orIndex} on RES.ID_ = A_L_OR${orIndex}.TASK_ID_\n-          </if>\n-          <if test=\"orQueryObject.hasNonLocalQueryVariableValue()\">\n-            left outer join ${prefix}ACT_RU_VARIABLE A_OR${orIndex} on RES.PROC_INST_ID_ = A_OR${orIndex}.PROC_INST_ID_\n-          </if>\n+            <if test=\"orQueryObject.hasLocalQueryVariableValue()\">\n+              left outer join ${prefix}ACT_RU_VARIABLE A_L_OR${orIndex} on RES.ID_ = A_L_OR${orIndex}.TASK_ID_\n+            </if>\n+            <if test=\"orQueryObject.hasNonLocalQueryVariableValue()\">\n+              left outer join ${prefix}ACT_RU_VARIABLE A_OR${orIndex} on RES.PROC_INST_ID_ = A_OR${orIndex}.PROC_INST_ID_\n+            </if>\n         </if>\n       </if>\n       \n@@ -653,7 +641,7 @@ under the License.\n       <if test=\"ownerLike != null\">\n         and RES.OWNER_ like #{ownerLike}${wildcardEscapeClause}\n       </if>\n-      <if test=\"ownerLikeIgnoreCase != null\">\n+       <if test=\"ownerLikeIgnoreCase != null\">\n         and lower(RES.OWNER_) like #{ownerLikeIgnoreCase}${wildcardEscapeClause}\n       </if>\n       <if test=\"unassigned\">\n@@ -780,15 +768,15 @@ under the License.\n       </if>\n       <if test=\"cmmnDeploymentIds != null &amp;&amp; cmmnDeploymentIds.size() &gt; 0 &amp;&amp; deploymentIds != null &amp;&amp; deploymentIds.size() &gt; 0\">\n         and (\n-        DEPLOY_P.DEPLOYMENT_ID_ IN\n-        <foreach item=\"deployment\" index=\"index\" collection=\"deploymentIds\" open=\"(\" separator=\",\" close=\")\">\n-          #{deployment}\n-        </foreach>\n-        or\n-        DEPLOY_C.DEPLOYMENT_ID_ IN\n-        <foreach item=\"cmmnDeployment\" index=\"index\" collection=\"cmmnDeploymentIds\" open=\"(\" separator=\",\" close=\")\">\n-          #{cmmnDeployment}\n-        </foreach>\n+            DEPLOY_P.DEPLOYMENT_ID_ IN\n+            <foreach item=\"deployment\" index=\"index\" collection=\"deploymentIds\" open=\"(\" separator=\",\" close=\")\">\n+                #{deployment}\n+            </foreach>\n+            or\n+            DEPLOY_C.DEPLOYMENT_ID_ IN\n+            <foreach item=\"cmmnDeployment\" index=\"index\" collection=\"cmmnDeploymentIds\" open=\"(\" separator=\",\" close=\")\">\n+                #{cmmnDeployment}\n+            </foreach>\n         )\n       </if>\n       <if test=\"dueDate != null\">\n@@ -819,137 +807,142 @@ under the License.\n       </if>\n       <if test=\"!bothCandidateAndAssigned &amp;&amp; (candidateUser != null || candidateGroups != null)\">\n         <if test=\"!ignoreAssigneeValue\">\n-          and RES.ASSIGNEE_ is null\n-        </if>\n-        and I.TYPE_ = 'candidate'\n-        and \n-        ( \n-        <if test=\"candidateUser != null\">\n-          I.USER_ID_ = #{candidateUser}          \n-        </if>\n-        <if test=\"candidateUser != null &amp;&amp; candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0\">\n-          or\n-        </if>\n-        <if test=\"candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0\">\n-          I.GROUP_ID_ IN\n-          <foreach item=\"group\" index=\"index\" collection=\"candidateGroups\" \n-                     open=\"(\" separator=\",\" close=\")\">\n-            #{group}\n-          </foreach>\n+            and RES.ASSIGNEE_ is null\n         </if>\n+        and exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TYPE_ = 'candidate' and LINK.TASK_ID_ = RES.ID_\n+            and \n+            ( \n+              <if test=\"candidateUser != null\">\n+                LINK.USER_ID_ = #{candidateUser}          \n+              </if>\n+              <if test=\"candidateUser != null &amp;&amp; candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0\">\n+                or\n+              </if>\n+              <if test=\"candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0\">\n+                LINK.GROUP_ID_ IN\n+                <foreach item=\"group\" index=\"index\" collection=\"candidateGroups\" \n+                         open=\"(\" separator=\",\" close=\")\">\n+                  #{group}\n+                </foreach>\n+              </if>\n+            )\n         )\n       </if>\n       <if test=\"involvedUser != null\">\n         and (\n-        exists(select LINK.USER_ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where USER_ID_ = #{involvedUser} and LINK.TASK_ID_ = RES.ID_)\n-        or RES.ASSIGNEE_ = #{involvedUser}\n-        or RES.OWNER_ = #{involvedUser}\n+          exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.USER_ID_ = #{involvedUser} and LINK.TASK_ID_ = RES.ID_)\n+          or RES.ASSIGNEE_ = #{involvedUser}\n+          or RES.OWNER_ = #{involvedUser}\n+          )\n+      </if>\n+      <if test=\"involvedGroups != null\">\n+        and EXISTS(\n+          select ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TASK_ID_ = RES.ID_ and LINK.GROUP_ID_ in\n+          <foreach item=\"involvedGroup\" index=\"index\" collection=\"involvedGroups\" open=\"(\" separator=\",\" close=\")\">\n+              #{involvedGroup}\n+          </foreach>\n         )\n       </if>\n       <foreach item=\"var\" collection=\"queryVariableValues\" index=\"index\">\n         <choose>\n-          <when test=\"var.operator.equals('EXISTS')\">\n-            and EXISTS (\n-            select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}\n-            <if test=\"!var.local\">\n-              and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null\n-            </if>\n-            <if test=\"var.local\">\n-              and RES.ID_ = TASK_ID_ \n-            </if>\n-            )\n-          </when>\n-          <when test=\"var.operator.equals('NOT_EXISTS')\">\n-            and NOT EXISTS (\n-            select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}\n-            <if test=\"!var.local\">\n-              and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null\n-            </if>\n-            <if test=\"var.local\">\n-              and RES.ID_ = TASK_ID_ \n-            </if>\n-            )\n-          </when>\n-          <otherwise>\n-            <if test=\"!var.local\">\n-              <!-- When process instance variable is queried for, taskId should be null -->\n-              and A${index}.TASK_ID_ is null\n-            </if>\n-            <if test=\"var.name != null\">\n-              <!-- Match-all variable-names when name is null -->\n-              and A${index}.NAME_= #{var.name}\n-            </if>\n-            <if test=\"var.name == null\">\n-              and A${index}.NAME_ is not null\n-            </if>\n-            <if test=\"!var.type.equals('null')\">\n-              and A${index}.TYPE_ = #{var.type}\n-            </if>\n+            <when test=\"var.operator.equals('EXISTS')\">\n+              and EXISTS (\n+                select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}\n+                <if test=\"!var.local\">\n+                    and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null\n+                </if>\n+                <if test=\"var.local\">\n+                    and RES.ID_ = TASK_ID_ \n+                </if>\n+              )\n+            </when>\n+            <when test=\"var.operator.equals('NOT_EXISTS')\">\n+              and NOT EXISTS (\n+                select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}\n+                <if test=\"!var.local\">\n+                    and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null\n+                </if>\n+                <if test=\"var.local\">\n+                    and RES.ID_ = TASK_ID_ \n+                </if>\n+              )\n+            </when>\n+            <otherwise>\n+                <if test=\"!var.local\">\n+                  <!-- When process instance variable is queried for, taskId should be null -->\n+                  and A${index}.TASK_ID_ is null\n+                </if>\n+                <if test=\"var.name != null\">\n+                  <!-- Match-all variable-names when name is null -->\n+                  and A${index}.NAME_= #{var.name}\n+                </if>\n+                <if test=\"var.name == null\">\n+                  and A${index}.NAME_ is not null\n+                </if>\n+                <if test=\"!var.type.equals('null')\">\n+                  and A${index}.TYPE_ = #{var.type}\n+                </if>\n                 \n-            <!-- Variable value -->\n-            <if test=\"var.textValue != null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null\">\n-              <choose>\n-                <when test=\"var.operator.equals('EQUALS_IGNORE_CASE') || var.operator.equals('NOT_EQUALS_IGNORE_CASE') || var.operator.equals('LIKE_IGNORE_CASE')\">\n-                  and lower(A${index}.TEXT_)\n-                </when>\n-                <otherwise>\n-                  and A${index}.TEXT_\n-                </otherwise>\n-              </choose> \n-              <choose>\n-                <when test=\"var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')\">LIKE</when>\n-                <otherwise>\n+                <!-- Variable value -->\n+                <if test=\"var.textValue != null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null\">\n+                  <choose>\n+                    <when test=\"var.operator.equals('EQUALS_IGNORE_CASE') || var.operator.equals('NOT_EQUALS_IGNORE_CASE') || var.operator.equals('LIKE_IGNORE_CASE')\">\n+                      and lower(A${index}.TEXT_)\n+                    </when>\n+                    <otherwise>\n+                      and A${index}.TEXT_\n+                    </otherwise>\n+                  </choose> \n+                  <choose>\n+                      <when test=\"var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')\">LIKE</when>\n+                      <otherwise><include refid=\"executionVariableOperator\" /></otherwise>\n+                  </choose>          \n+                  #{var.textValue}\n+                  <choose>\n+        \t\t\t<when test=\"var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')\">${wildcardEscapeClause}</when>\n+        \t\t  </choose>\n+                </if>\n+                <if test=\"var.textValue2 != null\">\n+                  and A${index}.TEXT2_ \n+                  <choose>\n+                    <when test=\"var.operator.equals('LIKE')\">LIKE</when>\n+                    <otherwise><include refid=\"executionVariableOperator\" /></otherwise>\n+                  </choose>          \n+                  #{var.textValue2}\n+                  <choose>\n+        \t\t\t<when test=\"var.operator.equals('LIKE')\">${wildcardEscapeClause}</when>\n+        \t\t  </choose>\n+                </if>\n+                <if test=\"var.longValue != null\">\n+                  and A${index}.LONG_\n                   <include refid=\"executionVariableOperator\" />\n-                </otherwise>\n-              </choose>          \n-              #{var.textValue}\n-              <choose>\n-                <when test=\"var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')\">${wildcardEscapeClause}</when>\n-              </choose>\n-            </if>\n-            <if test=\"var.textValue2 != null\">\n-              and A${index}.TEXT2_ \n-              <choose>\n-                <when test=\"var.operator.equals('LIKE')\">LIKE</when>\n-                <otherwise>\n+                  #{var.longValue}\n+                </if>\n+                <if test=\"var.doubleValue != null\">\n+                  and A${index}.DOUBLE_ \n                   <include refid=\"executionVariableOperator\" />\n-                </otherwise>\n-              </choose>          \n-              #{var.textValue2}\n-              <choose>\n-                <when test=\"var.operator.equals('LIKE')\">${wildcardEscapeClause}</when>\n-              </choose>\n-            </if>\n-            <if test=\"var.longValue != null\">\n-              and A${index}.LONG_\n-              <include refid=\"executionVariableOperator\" />\n-              #{var.longValue}\n-            </if>\n-            <if test=\"var.doubleValue != null\">\n-              and A${index}.DOUBLE_ \n-              <include refid=\"executionVariableOperator\" />\n-              #{var.doubleValue}\n-            </if>\n-            <!-- Null variable type -->\n-            <if test=\"var.textValue == null &amp;&amp; var.textValue2 == null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null\">\n-              <choose>\n-                <when test=\"var.operator.equals('NOT_EQUALS')\">\n-                  and (A${index}.TEXT_ is not null or A${index}.TEXT2_ is not null or A${index}.LONG_ is not null or A${index}.DOUBLE_ is not null or A${index}.BYTEARRAY_ID_ is not null)\n-                </when>\n-                <otherwise>\n-                  and A${index}.TEXT_ is null and A${index}.TEXT2_ is null and A${index}.LONG_ is null and A${index}.DOUBLE_ is null and A${index}.BYTEARRAY_ID_ is null\n-                </otherwise>\n-              </choose>          \n-            </if>\n-          </otherwise>\n+                  #{var.doubleValue}\n+                </if>\n+                <!-- Null variable type -->\n+                <if test=\"var.textValue == null &amp;&amp; var.textValue2 == null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null\">\n+                  <choose>\n+                    <when test=\"var.operator.equals('NOT_EQUALS')\">\n+                      and (A${index}.TEXT_ is not null or A${index}.TEXT2_ is not null or A${index}.LONG_ is not null or A${index}.DOUBLE_ is not null or A${index}.BYTEARRAY_ID_ is not null)\n+                    </when>\n+                    <otherwise>\n+                      and A${index}.TEXT_ is null and A${index}.TEXT2_ is null and A${index}.LONG_ is null and A${index}.DOUBLE_ is null and A${index}.BYTEARRAY_ID_ is null\n+                    </otherwise>\n+                  </choose>          \n+                </if>\n+            </otherwise>\n         </choose>\n       </foreach>\n       <if test=\"suspensionState != null\">\n         <if test=\"suspensionState.stateCode == 1\">\n-          and RES.SUSPENSION_STATE_ = 1\n+            and RES.SUSPENSION_STATE_ = 1\n         </if>\n         <if test=\"suspensionState.stateCode == 2\">\n-          and RES.SUSPENSION_STATE_ = 2\n+            and RES.SUSPENSION_STATE_ = 2\n         </if>\n       </if>\n       <if test=\"tenantId != null\">\n@@ -967,431 +960,441 @@ under the License.\n           <if test=\"userIdForCandidateAndAssignee != null\">\n             <if test=\"candidateGroups == null\">\n               and (RES.ASSIGNEE_ = #{userIdForCandidateAndAssignee}\n-              or (\n-              <if test=\"!ignoreAssigneeValue\">\n-                RES.ASSIGNEE_ is null\n-              </if>\n-              and (I.USER_ID_ = #{userIdForCandidateAndAssignee}\n-              or I.GROUP_ID_ IN (select g.GROUP_ID_ from ${prefix}ACT_ID_MEMBERSHIP g where g.USER_ID_ = #{userIdForCandidateAndAssignee} ) ) ) )\n+                or (\n+                <if test=\"!ignoreAssigneeValue\">\n+                    RES.ASSIGNEE_ is null and\n+                </if>\n+                exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TASK_ID_ = RES.ID_\n+                and (LINK.USER_ID_ = #{userIdForCandidateAndAssignee}\n+                or LINK.GROUP_ID_ IN (select g.GROUP_ID_ from ${prefix}ACT_ID_MEMBERSHIP g where g.USER_ID_ = #{userIdForCandidateAndAssignee} )))))\n             </if>\n           </if>\n           <!-- if dbIdentityUsed set false in process engine configuration of using custom session factory of GroupIdentityManager -->\n           <if test=\"candidateGroups != null\">\n             and (RES.ASSIGNEE_ = #{userIdForCandidateAndAssignee}\n-            \n-            or (\n-            <if test=\"!ignoreAssigneeValue\">\n-              RES.ASSIGNEE_ is null and\n-            </if>\n-            I.TYPE_ = 'candidate' and (I.USER_ID_ = #{userIdForCandidateAndAssignee}\n-            <if test=\"candidateGroups.size() &gt; 0\">\n-              or I.GROUP_ID_ IN\n-              <foreach item=\"group\" index=\"index\" collection=\"candidateGroups\" open=\"(\" separator=\",\" close=\")\">\n-                #{group}\n-              </foreach>\n-            </if>\n-            )))\n+              or (\n+              <if test=\"!ignoreAssigneeValue\">\n+                RES.ASSIGNEE_ is null and\n+              </if>\n+                exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TASK_ID_ = RES.ID_\n+                and LINK.TYPE_ = 'candidate' and (LINK.USER_ID_ = #{userIdForCandidateAndAssignee}\n+                <if test=\"candidateGroups.size() &gt; 0\">\n+                    or LINK.GROUP_ID_ IN\n+                    <foreach item=\"group\" index=\"index\" collection=\"candidateGroups\" open=\"(\" separator=\",\" close=\")\">\n+                        #{group}\n+                    </foreach>\n+                </if>\n+                ))))\n           </if>\n         </when>\n       </choose>\n       <foreach item=\"orQueryObject\" index=\"orIndex\" collection=\"orQueryObjects\">\n         and \n         <trim prefix=\"(\" prefixOverrides=\"OR\" suffix=\")\">\n-          <if test=\"orQueryObject.taskId != null\">\n-            RES.ID_ = #{orQueryObject.taskId}\n-          </if>\n-          <if test=\"orQueryObject.name != null\">\n-            or RES.NAME_ = #{orQueryObject.name}\n-          </if>\n-          <if test=\"orQueryObject.nameLike != null\">\n-            or RES.NAME_ like #{orQueryObject.nameLike}${wildcardEscapeClause}\n-          </if>\n-          <if test=\"orQueryObject.nameLikeIgnoreCase != null\">\n-            or lower(RES.NAME_) like #{orQueryObject.nameLikeIgnoreCase}${wildcardEscapeClause}\n-          </if>\n-          <if test=\"orQueryObject.nameList != null &amp;&amp; orQueryObject.nameList.size() &gt; 0\">\n-            or RES.NAME_ IN\n-            <foreach item=\"name\" index=\"index\" collection=\"orQueryObject.nameList\"\n-                       open=\"(\" separator=\",\" close=\")\">\n-              #{name}\n-            </foreach>\n-          </if>\n-          <if test=\"orQueryObject.nameListIgnoreCase != null &amp;&amp; orQueryObject.nameListIgnoreCase.size() &gt; 0\">\n-            or lower(RES.NAME_) IN\n-            <foreach item=\"name\" index=\"index\" collection=\"orQueryObject.nameListIgnoreCase\"\n-                       open=\"(\" separator=\",\" close=\")\">\n-              #{name}\n-            </foreach>\n-          </if>\n-          <if test=\"orQueryObject.description != null\">\n-            or RES.DESCRIPTION_ = #{orQueryObject.description}\n-          </if>\n-          <if test=\"orQueryObject.descriptionLike != null\">\n-            or RES.DESCRIPTION_ like #{orQueryObject.descriptionLike}${wildcardEscapeClause}\n-          </if>\n-          <if test=\"orQueryObject.descriptionLikeIgnoreCase != null\">\n-            or lower(RES.DESCRIPTION_) like #{orQueryObject.descriptionLikeIgnoreCase}${wildcardEscapeClause}\n-          </if>\n-          <if test=\"orQueryObject.priority != null\">\n-            or RES.PRIORITY_ = #{orQueryObject.priority}\n-          </if> \n-          <if test=\"orQueryObject.minPriority != null\">\n-            or RES.PRIORITY_ &gt;= #{orQueryObject.minPriority}\n-          </if> \n-          <if test=\"orQueryObject.maxPriority != null\">\n-            or RES.PRIORITY_ &lt;= #{orQueryObject.maxPriority}\n-          </if> \n-          <if test=\"orQueryObject.assignee != null\">\n-            or RES.ASSIGNEE_ = #{orQueryObject.assignee}\n-          </if>\n-          <if test=\"orQueryObject.assigneeLike != null\">\n-            or RES.ASSIGNEE_ like #{orQueryObject.assigneeLike}${wildcardEscapeClause}\n-          </if>\n-          <if test=\"orQueryObject.assigneeLikeIgnoreCase != null\">\n-            or lower(RES.ASSIGNEE_) like #{orQueryObject.assigneeLikeIgnoreCase}${wildcardEscapeClause}\n-          </if>\n-          <if test=\"orQueryObject.assigneeIds != null &amp;&amp; orQueryObject.assigneeIds.size() &gt; 0\">\n-            or RES.ASSIGNEE_ IN\n-            <foreach item=\"assigneeId\" index=\"index\" collection=\"orQueryObject.assigneeIds\" \n+            <if test=\"orQueryObject.taskId != null\">\n+              RES.ID_ = #{orQueryObject.taskId}\n+            </if>\n+            <if test=\"orQueryObject.name != null\">\n+              or RES.NAME_ = #{orQueryObject.name}\n+            </if>\n+            <if test=\"orQueryObject.nameLike != null\">\n+              or RES.NAME_ like #{orQueryObject.nameLike}${wildcardEscapeClause}\n+            </if>\n+            <if test=\"orQueryObject.nameLikeIgnoreCase != null\">\n+              or lower(RES.NAME_) like #{orQueryObject.nameLikeIgnoreCase}${wildcardEscapeClause}\n+            </if>\n+            <if test=\"orQueryObject.nameList != null &amp;&amp; orQueryObject.nameList.size() &gt; 0\">\n+              or RES.NAME_ IN\n+              <foreach item=\"name\" index=\"index\" collection=\"orQueryObject.nameList\"\n+                      open=\"(\" separator=\",\" close=\")\">\n+                #{name}\n+              </foreach>\n+            </if>\n+            <if test=\"orQueryObject.nameListIgnoreCase != null &amp;&amp; orQueryObject.nameListIgnoreCase.size() &gt; 0\">\n+              or lower(RES.NAME_) IN\n+              <foreach item=\"name\" index=\"index\" collection=\"orQueryObject.nameListIgnoreCase\"\n                        open=\"(\" separator=\",\" close=\")\">\n-              #{assigneeId}\n-            </foreach>\n-          </if>\n-          <if test=\"orQueryObject.owner != null\">\n-            or RES.OWNER_ = #{orQueryObject.owner}\n-          </if>\n-          <if test=\"orQueryObject.ownerLike != null\">\n-            or RES.OWNER_ like #{orQueryObject.ownerLike}${wildcardEscapeClause}\n-          </if>\n-          <if test=\"orQueryObject.ownerLikeIgnoreCase != null\">\n-            or RES.OWNER_ like #{orQueryObject.ownerLikeIgnoreCase}${wildcardEscapeClause}\n-          </if>\n-          <if test=\"orQueryObject.unassigned\">\n-            or RES.ASSIGNEE_ IS NULL\n-          </if>\n-          <if test=\"orQueryObject.noDelegationState\">\n-            or RES.DELEGATION_ IS NULL\n-          </if>\n-          <if test=\"orQueryObject.delegationState != null\">\n-            or RES.DELEGATION_ = #{orQueryObject.delegationStateString}\n-          </if>\n-          <if test=\"orQueryObject.processInstanceId != null\">\n-            or RES.PROC_INST_ID_ = #{orQueryObject.processInstanceId}\n-          </if>\n-          <if test=\"orQueryObject.processInstanceIds != null &amp;&amp; orQueryObject.processInstanceIds.size() &gt; 0\">\n-            or RES.PROC_INST_ID_ IN\n-            <foreach item=\"processInstance\" index=\"index\" collection=\"orQueryObject.processInstanceIds\" \n+                #{name}\n+              </foreach>\n+            </if>\n+            <if test=\"orQueryObject.description != null\">\n+              or RES.DESCRIPTION_ = #{orQueryObject.description}\n+            </if>\n+            <if test=\"orQueryObject.descriptionLike != null\">\n+              or RES.DESCRIPTION_ like #{orQueryObject.descriptionLike}${wildcardEscapeClause}\n+            </if>\n+             <if test=\"orQueryObject.descriptionLikeIgnoreCase != null\">\n+              or lower(RES.DESCRIPTION_) like #{orQueryObject.descriptionLikeIgnoreCase}${wildcardEscapeClause}\n+            </if>\n+            <if test=\"orQueryObject.priority != null\">\n+              or RES.PRIORITY_ = #{orQueryObject.priority}\n+            </if> \n+            <if test=\"orQueryObject.minPriority != null\">\n+              or RES.PRIORITY_ &gt;= #{orQueryObject.minPriority}\n+            </if> \n+            <if test=\"orQueryObject.maxPriority != null\">\n+              or RES.PRIORITY_ &lt;= #{orQueryObject.maxPriority}\n+            </if> \n+            <if test=\"orQueryObject.assignee != null\">\n+              or RES.ASSIGNEE_ = #{orQueryObject.assignee}\n+            </if>\n+            <if test=\"orQueryObject.assigneeLike != null\">\n+              or RES.ASSIGNEE_ like #{orQueryObject.assigneeLike}${wildcardEscapeClause}\n+            </if>\n+            <if test=\"orQueryObject.assigneeLikeIgnoreCase != null\">\n+              or lower(RES.ASSIGNEE_) like #{orQueryObject.assigneeLikeIgnoreCase}${wildcardEscapeClause}\n+            </if>\n+            <if test=\"orQueryObject.assigneeIds != null &amp;&amp; orQueryObject.assigneeIds.size() &gt; 0\">\n+\t\t      or RES.ASSIGNEE_ IN\n+\t\t      <foreach item=\"assigneeId\" index=\"index\" collection=\"orQueryObject.assigneeIds\" \n+\t\t               open=\"(\" separator=\",\" close=\")\">\n+\t\t        #{assigneeId}\n+\t\t      </foreach>\n+\t\t    </if>\n+            <if test=\"orQueryObject.owner != null\">\n+              or RES.OWNER_ = #{orQueryObject.owner}\n+            </if>\n+            <if test=\"orQueryObject.ownerLike != null\">\n+              or RES.OWNER_ like #{orQueryObject.ownerLike}${wildcardEscapeClause}\n+            </if>\n+            <if test=\"orQueryObject.ownerLikeIgnoreCase != null\">\n+              or RES.OWNER_ like #{orQueryObject.ownerLikeIgnoreCase}${wildcardEscapeClause}\n+            </if>\n+            <if test=\"orQueryObject.unassigned\">\n+              or RES.ASSIGNEE_ IS NULL\n+            </if>\n+            <if test=\"orQueryObject.noDelegationState\">\n+              or RES.DELEGATION_ IS NULL\n+            </if>\n+            <if test=\"orQueryObject.delegationState != null\">\n+              or RES.DELEGATION_ = #{orQueryObject.delegationStateString}\n+            </if>\n+            <if test=\"orQueryObject.processInstanceId != null\">\n+              or RES.PROC_INST_ID_ = #{orQueryObject.processInstanceId}\n+            </if>\n+            <if test=\"orQueryObject.processInstanceIds != null &amp;&amp; orQueryObject.processInstanceIds.size() &gt; 0\">\n+              or RES.PROC_INST_ID_ IN\n+              <foreach item=\"processInstance\" index=\"index\" collection=\"orQueryObject.processInstanceIds\" \n                        open=\"(\" separator=\",\" close=\")\">\n-              #{processInstance}\n-            </foreach>\n-          </if>\n-          <if test=\"orQueryObject.processInstanceBusinessKey != null\">\n-            or E_OR${orIndex}.BUSINESS_KEY_ = #{orQueryObject.processInstanceBusinessKey}\n-          </if>\n-          <if test=\"orQueryObject.processInstanceBusinessKeyLike != null\">\n-            or E_OR${orIndex}.BUSINESS_KEY_ like #{orQueryObject.processInstanceBusinessKeyLike}${wildcardEscapeClause}\n-          </if>      \n-          <if test=\"orQueryObject.processInstanceBusinessKeyLikeIgnoreCase != null\">\n-            or lower(E.BUSINESS_KEY_) like #{orQueryObject.processInstanceBusinessKeyLikeIgnoreCase}${wildcardEscapeClause}\n-          </if>         \n-          <if test=\"orQueryObject.executionId != null\">\n-            or RES.EXECUTION_ID_ = #{orQueryObject.executionId}\n-          </if>\n-          <if test=\"orQueryObject.scopeId != null\">\n-            and RES.SCOPE_ID_ = #{orQueryObject.scopeId}\n-          </if>\n-          <if test=\"orQueryObject.subScopeId != null\">\n-            and RES.SUB_SCOPE_ID_ = #{orQueryObject.subScopeId}\n-          </if>\n-          <if test=\"orQueryObject.scopeType != null\">\n-            and RES.SCOPE_TYPE_ = #{orQueryObject.scopeType}\n-          </if>\n-          <if test=\"orQueryObject.scopeDefinitionId != null\">\n-            and RES.SCOPE_DEFINITION_ID_ = #{orQueryObject.scopeDefinitionId}\n-          </if>\n-          <if test=\"orQueryObject.createTime != null\">\n-            or RES.CREATE_TIME_ = #{orQueryObject.createTime}\n-          </if>\n-          <if test=\"orQueryObject.createTimeBefore != null\">\n-            or RES.CREATE_TIME_ &lt; #{orQueryObject.createTimeBefore}\n-          </if>\n-          <if test=\"orQueryObject.createTimeAfter != null\">\n-            or RES.CREATE_TIME_ &gt; #{orQueryObject.createTimeAfter}\n-          </if>\n-          <if test=\"orQueryObject.key != null\">\n-            or RES.TASK_DEF_KEY_ = #{orQueryObject.key}\n-          </if>\n-          <if test=\"orQueryObject.keyLike != null\">\n-            or RES.TASK_DEF_KEY_ like #{orQueryObject.keyLike}${wildcardEscapeClause}\n-          </if>\n-          <if test=\"orQueryObject.processDefinitionId != null\">\n-            or RES.PROC_DEF_ID_ = #{orQueryObject.processDefinitionId}\n-          </if>\n-          <if test=\"orQueryObject.taskDefinitionId != null\">\n-            or RES.TASK_DEF_ID_ = #{orQueryObject.taskDefinitionId}\n-          </if>\n-          <if test=\"orQueryObject.processDefinitionKey != null\">\n-            or D_OR${orIndex}.KEY_ = #{orQueryObject.processDefinitionKey}\n-          </if>\n-          <if test=\"orQueryObject.processDefinitionKeyLike != null\">\n-            or D_OR${orIndex}.KEY_ like #{orQueryObject.processDefinitionKeyLike}${wildcardEscapeClause}\n-          </if>\n-          <if test=\"orQueryObject.processDefinitionKeyLikeIgnoreCase != null\">\n-            or lower(D_OR${orIndex}.KEY_) like #{orQueryObject.processDefinitionKeyLikeIgnoreCase}${wildcardEscapeClause}\n-          </if>\n-          <if test=\"orQueryObject.processDefinitionKeys != null &amp;&amp; orQueryObject.processDefinitionKeys.size() &gt; 0\">\n-            or D_OR${orIndex}.KEY_ in\n-            <foreach item=\"item\" index=\"index\" collection=\"orQueryObject.processDefinitionKeys\" open=\"(\" separator=\",\" close=\")\">\n-              #{item}\n-            </foreach>\n-          </if>\n-          <if test=\"orQueryObject.processDefinitionName != null\">\n-            or D_OR${orIndex}.NAME_ = #{orQueryObject.processDefinitionName}\n-          </if>\n-          <if test=\"orQueryObject.processDefinitionNameLike != null\">\n-            or D_OR${orIndex}.NAME_ like #{orQueryObject.processDefinitionNameLike}${wildcardEscapeClause}\n-          </if>\n-          <if test=\"orQueryObject.processCategoryInList != null &amp;&amp; orQueryObject.processCategoryInList.size() &gt; 0\">\n-            or D_OR${orIndex}.CATEGORY_ IN\n-            <foreach item=\"processCategory\" index=\"index\" collection=\"orQueryObject.processCategoryInList\"\n+                #{processInstance}\n+              </foreach>\n+            </if>\n+            <if test=\"orQueryObject.processInstanceBusinessKey != null\">\n+              or E_OR${orIndex}.BUSINESS_KEY_ = #{orQueryObject.processInstanceBusinessKey}\n+            </if>\n+            <if test=\"orQueryObject.processInstanceBusinessKeyLike != null\">\n+              or E_OR${orIndex}.BUSINESS_KEY_ like #{orQueryObject.processInstanceBusinessKeyLike}${wildcardEscapeClause}\n+            </if>      \n+            <if test=\"orQueryObject.processInstanceBusinessKeyLikeIgnoreCase != null\">\n+              or lower(E.BUSINESS_KEY_) like #{orQueryObject.processInstanceBusinessKeyLikeIgnoreCase}${wildcardEscapeClause}\n+            </if>         \n+            <if test=\"orQueryObject.executionId != null\">\n+              or RES.EXECUTION_ID_ = #{orQueryObject.executionId}\n+            </if>\n+            <if test=\"orQueryObject.scopeId != null\">\n+              and RES.SCOPE_ID_ = #{orQueryObject.scopeId}\n+            </if>\n+            <if test=\"orQueryObject.subScopeId != null\">\n+              and RES.SUB_SCOPE_ID_ = #{orQueryObject.subScopeId}\n+            </if>\n+            <if test=\"orQueryObject.scopeType != null\">\n+              and RES.SCOPE_TYPE_ = #{orQueryObject.scopeType}\n+            </if>\n+            <if test=\"orQueryObject.scopeDefinitionId != null\">\n+              and RES.SCOPE_DEFINITION_ID_ = #{orQueryObject.scopeDefinitionId}\n+            </if>\n+            <if test=\"orQueryObject.createTime != null\">\n+              or RES.CREATE_TIME_ = #{orQueryObject.createTime}\n+            </if>\n+            <if test=\"orQueryObject.createTimeBefore != null\">\n+              or RES.CREATE_TIME_ &lt; #{orQueryObject.createTimeBefore}\n+            </if>\n+            <if test=\"orQueryObject.createTimeAfter != null\">\n+              or RES.CREATE_TIME_ &gt; #{orQueryObject.createTimeAfter}\n+            </if>\n+            <if test=\"orQueryObject.key != null\">\n+              or RES.TASK_DEF_KEY_ = #{orQueryObject.key}\n+            </if>\n+            <if test=\"orQueryObject.keyLike != null\">\n+              or RES.TASK_DEF_KEY_ like #{orQueryObject.keyLike}${wildcardEscapeClause}\n+            </if>\n+            <if test=\"orQueryObject.processDefinitionId != null\">\n+              or RES.PROC_DEF_ID_ = #{orQueryObject.processDefinitionId}\n+            </if>\n+            <if test=\"orQueryObject.taskDefinitionId != null\">\n+              or RES.TASK_DEF_ID_ = #{orQueryObject.taskDefinitionId}\n+            </if>\n+            <if test=\"orQueryObject.processDefinitionKey != null\">\n+              or D_OR${orIndex}.KEY_ = #{orQueryObject.processDefinitionKey}\n+            </if>\n+            <if test=\"orQueryObject.processDefinitionKeyLike != null\">\n+              or D_OR${orIndex}.KEY_ like #{orQueryObject.processDefinitionKeyLike}${wildcardEscapeClause}\n+            </if>\n+             <if test=\"orQueryObject.processDefinitionKeyLikeIgnoreCase != null\">\n+              or lower(D_OR${orIndex}.KEY_) like #{orQueryObject.processDefinitionKeyLikeIgnoreCase}${wildcardEscapeClause}\n+            </if>\n+            <if test=\"orQueryObject.processDefinitionKeys != null &amp;&amp; orQueryObject.processDefinitionKeys.size() &gt; 0\">\n+              or D_OR${orIndex}.KEY_ in\n+              <foreach item=\"item\" index=\"index\" collection=\"orQueryObject.processDefinitionKeys\" open=\"(\" separator=\",\" close=\")\">\n+                #{item}\n+              </foreach>\n+            </if>\n+            <if test=\"orQueryObject.processDefinitionName != null\">\n+              or D_OR${orIndex}.NAME_ = #{orQueryObject.processDefinitionName}\n+            </if>\n+            <if test=\"orQueryObject.processDefinitionNameLike != null\">\n+              or D_OR${orIndex}.NAME_ like #{orQueryObject.processDefinitionNameLike}${wildcardEscapeClause}\n+            </if>\n+            <if test=\"orQueryObject.processCategoryInList != null &amp;&amp; orQueryObject.processCategoryInList.size() &gt; 0\">\n+              or D_OR${orIndex}.CATEGORY_ IN\n+              <foreach item=\"processCategory\" index=\"index\" collection=\"orQueryObject.processCategoryInList\"\n                        open=\"(\" separator=\",\" close=\")\">\n-              #{processCategory}\n-            </foreach>\n-          </if>\n-          <if test=\"orQueryObject.processCategoryNotInList != null &amp;&amp; orQueryObject.processCategoryNotInList.size() &gt; 0\">\n-            or D_OR${orIndex}.CATEGORY_ NOT IN\n-            <foreach item=\"processCategory\" index=\"index\" collection=\"orQueryObject.processCategoryNotInList\"\n+                #{processCategory}\n+              </foreach>\n+            </if>\n+            <if test=\"orQueryObject.processCategoryNotInList != null &amp;&amp; orQueryObject.processCategoryNotInList.size() &gt; 0\">\n+              or D_OR${orIndex}.CATEGORY_ NOT IN\n+              <foreach item=\"processCategory\" index=\"index\" collection=\"orQueryObject.processCategoryNotInList\"\n                        open=\"(\" separator=\",\" close=\")\">\n-              #{processCategory}\n-            </foreach>\n-          </if>\n-          <if test=\"orQueryObject.deploymentId != null\">\n-            or DEPLOY_P_OR${orIndex}.DEPLOYMENT_ID_ = #{orQueryObject.deploymentId}\n-          </if>\n-          <if test=\"orQueryObject.deploymentIds != null &amp;&amp; orQueryObject.deploymentIds.size() &gt; 0\">\n-            or DEPLOY_P_OR${orIndex}.DEPLOYMENT_ID_ IN\n-            <foreach item=\"deployment\" index=\"index\" collection=\"orQueryObject.deploymentIds\" \n+                #{processCategory}\n+              </foreach>\n+            </if>\n+            <if test=\"orQueryObject.deploymentId != null\">\n+              or DEPLOY_P_OR${orIndex}.DEPLOYMENT_ID_ = #{orQueryObject.deploymentId}\n+            </if>\n+            <if test=\"orQueryObject.deploymentIds != null &amp;&amp; orQueryObject.deploymentIds.size() &gt; 0\">\n+              or DEPLOY_P_OR${orIndex}.DEPLOYMENT_ID_ IN\n+              <foreach item=\"deployment\" index=\"index\" collection=\"orQueryObject.deploymentIds\" \n                        open=\"(\" separator=\",\" close=\")\">\n-              #{deployment}\n-            </foreach>\n-          </if>\n-          <if test=\"orQueryObject.cmmnDeploymentId != null\">\n-            or DEPLOY_C_OR${orIndex}.DEPLOYMENT_ID_ = #{orQueryObject.cmmnDeploymentId}\n-          </if>\n-          <if test=\"orQueryObject.cmmnDeploymentIds != null &amp;&amp; orQueryObject.cmmnDeploymentIds.size() &gt; 0\">\n-            or DEPLOY_C_OR${orIndex}.DEPLOYMENT_ID_ IN\n-            <foreach item=\"deployment\" index=\"index\" collection=\"orQueryObject.cmmnDeploymentIds\" \n+                #{deployment}\n+              </foreach>\n+            </if>\n+            <if test=\"orQueryObject.cmmnDeploymentId != null\">\n+              or DEPLOY_C_OR${orIndex}.DEPLOYMENT_ID_ = #{orQueryObject.cmmnDeploymentId}\n+            </if>\n+            <if test=\"orQueryObject.cmmnDeploymentIds != null &amp;&amp; orQueryObject.cmmnDeploymentIds.size() &gt; 0\">\n+              or DEPLOY_C_OR${orIndex}.DEPLOYMENT_ID_ IN\n+              <foreach item=\"deployment\" index=\"index\" collection=\"orQueryObject.cmmnDeploymentIds\" \n                        open=\"(\" separator=\",\" close=\")\">\n-              #{deployment}\n-            </foreach>\n-          </if>\n-          <if test=\"orQueryObject.dueDate != null\">\n-            or RES.DUE_DATE_ = #{orQueryObject.dueDate}\n-          </if>\n-          <if test=\"orQueryObject.dueBefore != null\">\n-            or (RES.DUE_DATE_ &lt; #{orQueryObject.dueBefore} and RES.DUE_DATE_ is not null)\n-          </if>\n-          <if test=\"orQueryObject.dueAfter != null\">\n-            or (RES.DUE_DATE_ &gt; #{orQueryObject.dueAfter} and RES.DUE_DATE_ is not null)\n-          </if>\n-          <if test=\"orQueryObject.withoutDueDate\">\n-            or RES.DUE_DATE_ is null\n-          </if>\n-          <if test=\"orQueryObject.category != null\">\n-            or RES.CATEGORY_ = #{orQueryObject.category}\n-          </if>\n-          <if test=\"orQueryObject.excludeSubtasks\">\n-            or RES.PARENT_TASK_ID_ IS NULL\n-          </if>\n-            \n-          <if test=\"!orQueryObject.bothCandidateAndAssigned &amp;&amp; (orQueryObject.candidateUser != null || orQueryObject.candidateGroups != null)\">\n-            or (\n-            <if test=\"!orQueryObject.ignoreAssigneeValue\">\n-              RES.ASSIGNEE_ is null and\n+                #{deployment}\n+              </foreach>\n             </if>\n-            I_OR${orIndex}.TYPE_ = 'candidate'\n-            and \n-            ( \n-            <if test=\"orQueryObject.candidateUser != null\">\n-              I_OR${orIndex}.USER_ID_ = #{orQueryObject.candidateUser}          \n+            <if test=\"orQueryObject.dueDate != null\">\n+              or RES.DUE_DATE_ = #{orQueryObject.dueDate}\n             </if>\n-            <if test=\"orQueryObject.candidateUser != null &amp;&amp; orQueryObject.candidateGroups != null &amp;&amp; orQueryObject.candidateGroups.size() &gt; 0\">\n-              or\n+            <if test=\"orQueryObject.dueBefore != null\">\n+              or (RES.DUE_DATE_ &lt; #{orQueryObject.dueBefore} and RES.DUE_DATE_ is not null)\n             </if>\n-            <if test=\"orQueryObject.candidateGroups != null &amp;&amp; orQueryObject.candidateGroups.size() &gt; 0\">\n-              I_OR${orIndex}.GROUP_ID_ IN\n-              <foreach item=\"group\" index=\"index\" collection=\"orQueryObject.candidateGroups\" \n-                           open=\"(\" separator=\",\" close=\")\">\n-                #{group}\n-              </foreach>\n+            <if test=\"orQueryObject.dueAfter != null\">\n+              or (RES.DUE_DATE_ &gt; #{orQueryObject.dueAfter} and RES.DUE_DATE_ is not null)\n             </if>\n-            ))\n-          </if>\n-          <if test=\"orQueryObject.involvedUser != null\">\n-            or (\n-            exists(select LINK.USER_ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where USER_ID_ = #{orQueryObject.involvedUser} and LINK.TASK_ID_ = RES.ID_)\n-            or RES.ASSIGNEE_ = #{orQueryObject.involvedUser}\n-            or RES.OWNER_ = #{orQueryObject.involvedUser}\n-            )\n-          </if>\n-          <foreach item=\"var\" collection=\"orQueryObject.queryVariableValues\" index=\"index\">\n-            or \n-            <trim prefix=\"(\" prefixOverrides=\"AND\" suffix=\")\">\n-              <choose>\n-                <when test=\"var.operator.equals('EXISTS')\">\n-                  and EXISTS (\n-                  select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}\n-                  <if test=\"!var.local\">\n-                    and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null\n-                  </if>\n-                  <if test=\"var.local\">\n-                    and RES.ID_ = TASK_ID_ \n-                  </if>\n-                  )\n-                </when>\n-                <when test=\"var.operator.equals('NOT_EXISTS')\">\n-                  and NOT EXISTS (\n-                  select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}\n-                  <if test=\"!var.local\">\n-                    and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null\n-                  </if>\n-                  <if test=\"var.local\">\n-                    and RES.ID_ = TASK_ID_ \n-                  </if>\n-                  )\n-                </when>\n-                <otherwise>\n-                  <choose>\n-                    <when test=\"!var.local\">\n-                      <bind name=\"orLocal\" value=\"''\" />\n-                      <!-- When process instance variable is queried for, taskId should be null -->\n-                      and A_OR${orIndex}.TASK_ID_ is null\n+            <if test=\"orQueryObject.withoutDueDate\">\n+              or RES.DUE_DATE_ is null\n+            </if>\n+            <if test=\"orQueryObject.category != null\">\n+              or RES.CATEGORY_ = #{orQueryObject.category}\n+            </if>\n+            <if test=\"orQueryObject.excludeSubtasks\">\n+              or RES.PARENT_TASK_ID_ IS NULL\n+            </if>\n+            \n+            <if test=\"!orQueryObject.bothCandidateAndAssigned &amp;&amp; (orQueryObject.candidateUser != null || orQueryObject.candidateGroups != null)\">\n+              or (\n+                <if test=\"!orQueryObject.ignoreAssigneeValue\">\n+                    RES.ASSIGNEE_ is null and\n+                </if>\n+                exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TYPE_ = 'candidate' and LINK.TASK_ID_ = RES.ID_\n+                    and \n+                    ( \n+                    <if test=\"orQueryObject.candidateUser != null\">\n+                      LINK.USER_ID_ = #{orQueryObject.candidateUser}          \n+                    </if>\n+                    <if test=\"orQueryObject.candidateUser != null &amp;&amp; orQueryObject.candidateGroups != null &amp;&amp; orQueryObject.candidateGroups.size() &gt; 0\">\n+                      or\n+                    </if>\n+                    <if test=\"orQueryObject.candidateGroups != null &amp;&amp; orQueryObject.candidateGroups.size() &gt; 0\">\n+                      LINK.GROUP_ID_ IN\n+                      <foreach item=\"group\" index=\"index\" collection=\"orQueryObject.candidateGroups\" \n+                               open=\"(\" separator=\",\" close=\")\">\n+                        #{group}\n+                      </foreach>\n+                    </if>\n+                    )\n+                )\n+              )\n+            </if>\n+            <if test=\"orQueryObject.involvedUser != null\">\n+              or (\n+                exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.USER_ID_ = #{orQueryObject.involvedUser} and LINK.TASK_ID_ = RES.ID_)\n+                or RES.ASSIGNEE_ = #{orQueryObject.involvedUser}\n+                or RES.OWNER_ = #{orQueryObject.involvedUser}\n+                )\n+            </if>\n+            <if test=\"orQueryObject.involvedGroups != null\">\n+              or (\n+                EXISTS(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TASK_ID_ = RES.ID_ and LINK.GROUP_ID_ in\n+                <foreach item=\"involvedGroup\" index=\"index\" collection=\"orQueryObject.involvedGroups\" open=\"(\" separator=\",\" close=\")\">\n+                    #{involvedGroup}\n+                </foreach>\n+                )\n+              )\n+            </if>\n+            <foreach item=\"var\" collection=\"orQueryObject.queryVariableValues\" index=\"index\">\n+              or \n+              <trim prefix=\"(\" prefixOverrides=\"AND\" suffix=\")\">\n+                <choose>\n+                    <when test=\"var.operator.equals('EXISTS')\">\n+                        and EXISTS (\n+                            select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}\n+                        <if test=\"!var.local\">\n+                            and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null\n+                        </if>\n+                        <if test=\"var.local\">\n+                            and RES.ID_ = TASK_ID_ \n+                        </if>\n+                        )\n+                    </when>\n+                    <when test=\"var.operator.equals('NOT_EXISTS')\">\n+                        and NOT EXISTS (\n+                            select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}\n+                        <if test=\"!var.local\">\n+                            and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null\n+                        </if>\n+                        <if test=\"var.local\">\n+                            and RES.ID_ = TASK_ID_ \n+                        </if>\n+                        )\n                     </when>\n                     <otherwise>\n-                      <bind name=\"orLocal\" value=\"'L_'\" />\n-                    </otherwise>\n-                  </choose>\n-                  <if test=\"var.name != null\">\n-                    <!-- Match-all variable-names when name is null -->\n-                    and A_${orLocal}OR${orIndex}.NAME_= #{var.name}\n-                  </if>\n-                  <if test=\"var.name == null\">\n-                    and A_${orLocal}OR${orIndex}.NAME_ is not null\n-                  </if>\n-                  <if test=\"!var.type.equals('null')\">\n-                    and A_${orLocal}OR${orIndex}.TYPE_ = #{var.type}\n-                  </if>\n-                  <!-- Variable value -->\n-                  <if test=\"var.textValue != null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null\">\n-                    <choose>\n-                      <when test=\"var.operator.equals('EQUALS_IGNORE_CASE') || var.operator.equals('NOT_EQUALS_IGNORE_CASE') || var.operator.equals('LIKE_IGNORE_CASE')\">\n-                        and lower(A_${orLocal}OR${orIndex}.TEXT_)\n-                      </when>\n-                      <otherwise>\n-                        and A_${orLocal}OR${orIndex}.TEXT_\n-                      </otherwise>\n-                    </choose> \n-                    <choose>\n-                      <when test=\"var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')\">LIKE</when>\n-                      <otherwise>\n+                      <choose>\n+                        <when test=\"!var.local\">\n+                          <bind name=\"orLocal\" value=\"''\" />\n+                          <!-- When process instance variable is queried for, taskId should be null -->\n+                          and A_OR${orIndex}.TASK_ID_ is null\n+                        </when>\n+                        <otherwise>\n+                          <bind name=\"orLocal\" value=\"'L_'\" />\n+                        </otherwise>\n+                      </choose>\n+                      <if test=\"var.name != null\">\n+                        <!-- Match-all variable-names when name is null -->\n+                        and A_${orLocal}OR${orIndex}.NAME_= #{var.name}\n+                      </if>\n+                      <if test=\"var.name == null\">\n+                        and A_${orLocal}OR${orIndex}.NAME_ is not null\n+                      </if>\n+                      <if test=\"!var.type.equals('null')\">\n+                        and A_${orLocal}OR${orIndex}.TYPE_ = #{var.type}\n+                      </if>\n+                      <!-- Variable value -->\n+                      <if test=\"var.textValue != null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null\">\n+                        <choose>\n+                          <when test=\"var.operator.equals('EQUALS_IGNORE_CASE') || var.operator.equals('NOT_EQUALS_IGNORE_CASE') || var.operator.equals('LIKE_IGNORE_CASE')\">\n+                            and lower(A_${orLocal}OR${orIndex}.TEXT_)\n+                          </when>\n+                          <otherwise>\n+                            and A_${orLocal}OR${orIndex}.TEXT_\n+                          </otherwise>\n+                        </choose> \n+                        <choose>\n+                            <when test=\"var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')\">LIKE</when>\n+                            <otherwise><include refid=\"executionVariableOperator\" /></otherwise>\n+                        </choose>          \n+                        #{var.textValue}\n+                        <choose>\n+                            <when test=\"var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')\">${wildcardEscapeClause}</when>\n+                        </choose>\n+                      </if>\n+                      <if test=\"var.textValue2 != null\">\n+                        and A_${orLocal}OR${orIndex}.TEXT2_\n+                        <choose>\n+                          <when test=\"var.operator.equals('LIKE')\">LIKE</when>\n+                          <otherwise><include refid=\"executionVariableOperator\" /></otherwise>\n+                        </choose>          \n+                        #{var.textValue2}\n+                        <choose>\n+                          <when test=\"var.operator.equals('LIKE')\">${wildcardEscapeClause}</when>\n+                        </choose>\n+                      </if>\n+                      <if test=\"var.longValue != null\">\n+                        and A_${orLocal}OR${orIndex}.LONG_\n                         <include refid=\"executionVariableOperator\" />\n-                      </otherwise>\n-                    </choose>          \n-                    #{var.textValue}\n-                    <choose>\n-                      <when test=\"var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')\">${wildcardEscapeClause}</when>\n-                    </choose>\n-                  </if>\n-                  <if test=\"var.textValue2 != null\">\n-                    and A_${orLocal}OR${orIndex}.TEXT2_\n-                    <choose>\n-                      <when test=\"var.operator.equals('LIKE')\">LIKE</when>\n-                      <otherwise>\n+                        #{var.longValue}\n+                      </if>\n+                      <if test=\"var.doubleValue != null\">\n+                        and A_${orLocal}OR${orIndex}.DOUBLE_\n                         <include refid=\"executionVariableOperator\" />\n-                      </otherwise>\n-                    </choose>          \n-                    #{var.textValue2}\n-                    <choose>\n-                      <when test=\"var.operator.equals('LIKE')\">${wildcardEscapeClause}</when>\n-                    </choose>\n-                  </if>\n-                  <if test=\"var.longValue != null\">\n-                    and A_${orLocal}OR${orIndex}.LONG_\n-                    <include refid=\"executionVariableOperator\" />\n-                    #{var.longValue}\n-                  </if>\n-                  <if test=\"var.doubleValue != null\">\n-                    and A_${orLocal}OR${orIndex}.DOUBLE_\n-                    <include refid=\"executionVariableOperator\" />\n-                    #{var.doubleValue}\n-                  </if>\n-                  <!-- Null variable type -->\n-                  <if test=\"var.textValue == null &amp;&amp; var.textValue2 == null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null\">\n-                    <choose>\n-                      <when test=\"var.operator.equals('NOT_EQUALS')\">\n-                        and (A_${orLocal}OR${orIndex}.TEXT_ is not null or A_${orLocal}OR${orIndex}.TEXT2_ is not null or A_${orLocal}OR${orIndex}.LONG_ is not null or A_${orLocal}OR${orIndex}.DOUBLE_ is not null or A_${orLocal}OR${orIndex}.BYTEARRAY_ID_ is not null)\n-                      </when>\n-                      <otherwise>\n-                        and A_${orLocal}OR${orIndex}.TEXT_ is null and A_${orLocal}OR${orIndex}.TEXT2_ is null and A_${orLocal}OR${orIndex}.LONG_ is null and A_${orLocal}OR${orIndex}.DOUBLE_ is null and A_${orLocal}OR${orIndex}.BYTEARRAY_ID_ is null\n-                      </otherwise>\n-                    </choose>          \n-                  </if>\n-                </otherwise>\n-              </choose>\n-            </trim>\n-          </foreach>\n-          <if test=\"orQueryObject.suspensionState != null\">\n-            <if test=\"orQueryObject.suspensionState.stateCode == 1\">\n-              or RES.SUSPENSION_STATE_ = 1\n+                        #{var.doubleValue}\n+                      </if>\n+                      <!-- Null variable type -->\n+                      <if test=\"var.textValue == null &amp;&amp; var.textValue2 == null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null\">\n+                        <choose>\n+                          <when test=\"var.operator.equals('NOT_EQUALS')\">\n+                            and (A_${orLocal}OR${orIndex}.TEXT_ is not null or A_${orLocal}OR${orIndex}.TEXT2_ is not null or A_${orLocal}OR${orIndex}.LONG_ is not null or A_${orLocal}OR${orIndex}.DOUBLE_ is not null or A_${orLocal}OR${orIndex}.BYTEARRAY_ID_ is not null)\n+                          </when>\n+                          <otherwise>\n+                            and A_${orLocal}OR${orIndex}.TEXT_ is null and A_${orLocal}OR${orIndex}.TEXT2_ is null and A_${orLocal}OR${orIndex}.LONG_ is null and A_${orLocal}OR${orIndex}.DOUBLE_ is null and A_${orLocal}OR${orIndex}.BYTEARRAY_ID_ is null\n+                          </otherwise>\n+                        </choose>          \n+                      </if>\n+                    </otherwise>\n+                </choose>\n+              </trim>\n+            </foreach>\n+            <if test=\"orQueryObject.suspensionState != null\">\n+              <if test=\"orQueryObject.suspensionState.stateCode == 1\">\n+                  or RES.SUSPENSION_STATE_ = 1\n+              </if>\n+              <if test=\"orQueryObject.suspensionState.stateCode == 2\">\n+                  or RES.SUSPENSION_STATE_ = 2\n+              </if>\n             </if>\n-            <if test=\"orQueryObject.suspensionState.stateCode == 2\">\n-              or RES.SUSPENSION_STATE_ = 2\n+            <if test=\"orQueryObject.tenantId != null\">\n+              or RES.TENANT_ID_ = #{orQueryObject.tenantId}\n             </if>\n-          </if>\n-          <if test=\"orQueryObject.tenantId != null\">\n-            or RES.TENANT_ID_ = #{orQueryObject.tenantId}\n-          </if>\n-          <if test=\"orQueryObject.tenantIdLike != null\">\n-            or RES.TENANT_ID_ like #{orQueryObject.tenantIdLike}${wildcardEscapeClause}\n-          </if>\n-          <if test=\"orQueryObject.withoutTenantId\">\n-            or (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)\n-          </if>\n-          <choose>\n-            <when test=\"orQueryObject.bothCandidateAndAssigned\">\n-              <!-- if dbIdentityUsed set true in process engine configuration -->\n-              <if test=\"orQueryObject.userIdForCandidateAndAssignee != null\">\n-                <if test=\"orQueryObject.candidateGroups == null\">\n-                  or (RES.ASSIGNEE_ = #{orQueryObject.userIdForCandidateAndAssignee}\n-                  or (\n-                  <if test=\"!orQueryObject.ignoreAssigneeValue\">\n-                    RES.ASSIGNEE_ is null and\n+            <if test=\"orQueryObject.tenantIdLike != null\">\n+              or RES.TENANT_ID_ like #{orQueryObject.tenantIdLike}${wildcardEscapeClause}\n+            </if>\n+            <if test=\"orQueryObject.withoutTenantId\">\n+              or (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)\n+            </if>\n+            <choose>\n+              <when test=\"orQueryObject.bothCandidateAndAssigned\">\n+                <!-- if dbIdentityUsed set true in process engine configuration -->\n+                <if test=\"orQueryObject.userIdForCandidateAndAssignee != null\">\n+                  <if test=\"orQueryObject.candidateGroups == null\">\n+                    or (RES.ASSIGNEE_ = #{orQueryObject.userIdForCandidateAndAssignee}\n+                        or (\n+                        <if test=\"!orQueryObject.ignoreAssigneeValue\">\n+                            RES.ASSIGNEE_ is null and\n+                        </if>\n+                        exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TASK_ID_ = RES.ID_\n+                        and (LINK.USER_ID_ = #{orQueryObject.userIdForCandidateAndAssignee}\n+                        or LINK.GROUP_ID_ IN (select g.GROUP_ID_ from ${prefix}ACT_ID_MEMBERSHIP g where g.USER_ID_ = #{orQueryObject.userIdForCandidateAndAssignee} )))))\n                   </if>\n-                  (I_OR${orIndex}.USER_ID_ = #{orQueryObject.userIdForCandidateAndAssignee}\n-                  or I_OR${orIndex}.GROUP_ID_ IN (select g.GROUP_ID_ from ${prefix}ACT_ID_MEMBERSHIP g where g.USER_ID_ = #{orQueryObject.userIdForCandidateAndAssignee} ) ) ) )\n-                </if>\n-              </if>\n-              <!-- if dbIdentityUsed set false in process engine configuration of using custom session factory of GroupIdentityManager -->\n-              <if test=\"orQueryObject.candidateGroups != null\">\n-                or (RES.ASSIGNEE_ = #{orQueryObject.userIdForCandidateAndAssignee}\n-                or (\n-                <if test=\"!orQueryObject.ignoreAssigneeValue\">\n-                  RES.ASSIGNEE_ is null and\n                 </if>\n-                I_OR${orIndex}.TYPE_ = 'candidate' and (I_OR${orIndex}.USER_ID_ = #{orQueryObject.userIdForCandidateAndAssignee}\n-                <if test=\"orQueryObject.candidateGroups.size() &gt; 0\">\n-                  or I_OR${orIndex}.GROUP_ID_ IN\n-                  <foreach item=\"group\" index=\"index\" collection=\"orQueryObject.candidateGroups\" open=\"(\" separator=\",\" close=\")\">\n-                    #{group}\n-                  </foreach>\n+                <!-- if dbIdentityUsed set false in process engine configuration of using custom session factory of GroupIdentityManager -->\n+                <if test=\"orQueryObject.candidateGroups != null\">\n+                  or (RES.ASSIGNEE_ = #{orQueryObject.userIdForCandidateAndAssignee}\n+                  or (\n+                    <if test=\"!orQueryObject.ignoreAssigneeValue\">\n+                        RES.ASSIGNEE_ is null and\n+                    </if>\n+                    exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TASK_ID_ = RES.ID_\n+                    and LINK.TYPE_ = 'candidate' and (LINK.USER_ID_ = #{orQueryObject.userIdForCandidateAndAssignee}\n+                    <if test=\"orQueryObject.candidateGroups.size() &gt; 0\">\n+                        or LINK.GROUP_ID_ IN\n+                        <foreach item=\"group\" index=\"index\" collection=\"orQueryObject.candidateGroups\" open=\"(\" separator=\",\" close=\")\">\n+                            #{group}\n+                        </foreach>\n+                    </if>\n+                  ))))\n                 </if>\n-                )))\n-              </if>\n-            </when>\n-          </choose>\n-        </trim>\n-      </foreach>\n-    </where>\n+              </when>\n+            </choose>\n+          </trim>\n+        </foreach>\n+     </where>\n   </sql>\n   \n   <sql id=\"executionVariableOperator\">\n@@ -1404,15 +1407,15 @@ under the License.\n       <when test=\"var.operator.equals('GREATER_THAN_OR_EQUAL')\">&gt;=</when>\n       <when test=\"var.operator.equals('LESS_THAN')\">&lt;</when>\n       <when test=\"var.operator.equals('LESS_THAN_OR_EQUAL')\">&lt;=</when>\n-    </choose>\n+   </choose>\n   </sql>  \n \n   <select id=\"selectTaskByNativeQuery\" parameterType=\"java.util.Map\" resultMap=\"taskResultMap\">\n-    <include refid=\"org.flowable.task.service.db.common.selectByNativeQuery\"/>\n+  \t<include refid=\"org.flowable.task.service.db.common.selectByNativeQuery\"/>\n   </select>\n   \n   <select id=\"selectTaskCountByNativeQuery\" parameterType=\"java.util.Map\" resultType=\"long\">\n-    ${sql}\n+     ${sql}\n   </select>\n \n </mapper>\n\\ No newline at end of file"},{"sha":"2014447bd74d89f6cf7fb6cbdf01d70ca12008b8","filename":"pom.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5daece32b19b2a00d5627d41c67e939fc2eac9f7/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5daece32b19b2a00d5627d41c67e939fc2eac9f7/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=5daece32b19b2a00d5627d41c67e939fc2eac9f7","patch":"@@ -408,7 +408,7 @@ under the License.\n \n     <groovy.version>3.0.0-alpha-3</groovy.version>\n \n-    <flowable.version>6.3.1</flowable.version>\n+    <flowable.version>6.4.0</flowable.version>\n \n     <camel.version>2.22.1</camel.version>\t\n \n@@ -1148,6 +1148,11 @@ under the License.\n           </exclusion>\n         </exclusions>\n       </dependency>\n+      <dependency>\n+        <groupId>org.flowable</groupId>\n+        <artifactId>flowable-idm-spring-configurator</artifactId>\n+        <version>${flowable.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.flowable</groupId>\n         <artifactId>flowable-json-converter</artifactId>"}]}