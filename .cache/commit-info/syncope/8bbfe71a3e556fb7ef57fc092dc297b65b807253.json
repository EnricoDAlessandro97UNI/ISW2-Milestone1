{"sha":"8bbfe71a3e556fb7ef57fc092dc297b65b807253","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhiYmZlNzFhM2U1NTZmYjdlZjU3ZmMwOTJkYzI5N2I2NWI4MDcyNTM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-11-05T09:04:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-11-06T16:16:45Z"},"message":"[SYNCOPE-1392] Initial removal of ReflectionUtils, and most of ReflectionToStringBuilder, EqualsBuilder and HashCodeBuilder from Core","tree":{"sha":"7fcd1479d36dd7c9edd2f5c94c8aa69dc5b13f58","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7fcd1479d36dd7c9edd2f5c94c8aa69dc5b13f58"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8bbfe71a3e556fb7ef57fc092dc297b65b807253","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8bbfe71a3e556fb7ef57fc092dc297b65b807253","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8bbfe71a3e556fb7ef57fc092dc297b65b807253","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8bbfe71a3e556fb7ef57fc092dc297b65b807253/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4c5d58a4e43396e75f3830a69f528fbbbcb56ba2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4c5d58a4e43396e75f3830a69f528fbbbcb56ba2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4c5d58a4e43396e75f3830a69f528fbbbcb56ba2"}],"stats":{"total":1638,"additions":1157,"deletions":481},"files":[{"sha":"6675de62460d07a9c19abd36ae18310546bf874e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -39,22 +39,22 @@\n \n     A find(String key);\n \n-    List<A> findByPlainAttrValue(String schemaName, PlainAttrValue attrValue, boolean ignoreCaseMatch);\n+    List<A> findByPlainAttrValue(String schema, PlainAttrValue attrValue, boolean ignoreCaseMatch);\n \n-    A findByPlainAttrUniqueValue(String schemaName, PlainAttrValue attrUniqueValue, boolean ignoreCaseMatch);\n+    A findByPlainAttrUniqueValue(String schema, PlainAttrValue attrUniqueValue, boolean ignoreCaseMatch);\n \n     /**\n      * Find any objects by derived attribute value. This method could fail if one or more string literals contained\n-     * into the derived attribute value provided derive from identifier (schema name) replacement. When you are going to\n+     * into the derived attribute value provided derive from identifier (schema key) replacement. When you are going to\n      * specify a derived attribute expression you must be quite sure that string literals used to build the expression\n-     * cannot be found into the attribute values used to replace attribute schema names used as identifiers.\n+     * cannot be found into the attribute values used to replace attribute schema keys used as identifiers.\n      *\n-     * @param schemaName derived schema name\n+     * @param schema derived schema\n      * @param value derived attribute value\n      * @param ignoreCaseMatch whether comparison for string values should take case into account or not\n      * @return list of any objects\n      */\n-    List<A> findByDerAttrValue(String schemaName, String value, boolean ignoreCaseMatch);\n+    List<A> findByDerAttrValue(String schema, String value, boolean ignoreCaseMatch);\n \n     List<A> findByResource(ExternalResource resource);\n "},{"sha":"47e33d2f1936f81cf2a24c1b6e579548e4ff2d71","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AbstractSearchCond.java","status":"modified","additions":0,"deletions":20,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAbstractSearchCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAbstractSearchCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAbstractSearchCond.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -19,30 +19,10 @@\n package org.apache.syncope.core.persistence.api.dao.search;\n \n import java.io.Serializable;\n-import org.apache.commons.lang3.builder.EqualsBuilder;\n-import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n-import org.apache.commons.lang3.builder.ToStringStyle;\n \n public abstract class AbstractSearchCond implements Serializable {\n \n     private static final long serialVersionUID = 5376869884544910804L;\n \n-    @Override\n-    public boolean equals(final Object obj) {\n-        return EqualsBuilder.reflectionEquals(this, obj);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return HashCodeBuilder.reflectionHashCode(this);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return ReflectionToStringBuilder.toString(this, ToStringStyle.JSON_STYLE);\n-    }\n-\n     public abstract boolean isValid();\n-\n }"},{"sha":"55736fa5c6620cd60e057d1ff8b4ca97d084f94a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AnyCond.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAnyCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAnyCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAnyCond.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.api.dao.search;\n \n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+\n /**\n  * Search condition to be applied when comparing bean field values.\n  */\n@@ -32,4 +34,9 @@ public AnyCond() {\n     public AnyCond(final Type conditionType) {\n         super(conditionType);\n     }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this).appendSuper(super.toString()).build();\n+    }\n }"},{"sha":"98d5f9d8ce01eeea48a1d9669ba577f82d4823b0","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AnyTypeCond.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAnyTypeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAnyTypeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAnyTypeCond.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.api.dao.search;\n \n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+\n public class AnyTypeCond extends AbstractSearchCond {\n \n     private static final long serialVersionUID = 4298076973281246633L;\n@@ -37,4 +41,34 @@ public boolean isValid() {\n         return anyTypeKey != null;\n     }\n \n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(anyTypeKey).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final AnyTypeCond other = (AnyTypeCond) obj;\n+        return new EqualsBuilder().\n+                append(anyTypeKey, other.anyTypeKey).\n+                build();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this).\n+                append(anyTypeKey).\n+                build();\n+    }\n }"},{"sha":"dae0a447b9a668798de8312dd24a329c8b577ff5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AssignableCond.java","status":"modified","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAssignableCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAssignableCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAssignableCond.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.api.dao.search;\n \n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+\n public class AssignableCond extends AbstractSearchCond {\n \n     private static final long serialVersionUID = 1237627275756159522L;\n@@ -51,4 +55,38 @@ public void setFromGroup(final boolean fromGroup) {\n     public final boolean isValid() {\n         return realmFullPath != null;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(realmFullPath).\n+                append(fromGroup).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final AssignableCond other = (AssignableCond) obj;\n+        return new EqualsBuilder().\n+                append(realmFullPath, other.realmFullPath).\n+                append(fromGroup, other.fromGroup).\n+                build();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this).\n+                append(realmFullPath).\n+                append(fromGroup).\n+                build();\n+    }\n }"},{"sha":"c008f6918dccaa9babde82b6b20d6718d6bbc3fe","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AttributeCond.java","status":"modified","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAttributeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAttributeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAttributeCond.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.api.dao.search;\n \n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+\n /**\n  * Search condition to be applied when comparing attribute values.\n  */\n@@ -83,4 +87,41 @@ public final void setType(final Type conditionType) {\n     public final boolean isValid() {\n         return type != null && schema != null && (type == Type.ISNULL || type == Type.ISNOTNULL || expression != null);\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(type).\n+                append(schema).\n+                append(expression).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final AttributeCond other = (AttributeCond) obj;\n+        return new EqualsBuilder().\n+                append(type, other.type).\n+                append(schema, other.schema).\n+                append(expression, other.expression).\n+                build();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this).\n+                append(type).\n+                append(schema).\n+                append(expression).\n+                build();\n+    }\n }"},{"sha":"20057f8c3ef86ccc6c94eac0e31fedf4bf7feca3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/DynRealmCond.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FDynRealmCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FDynRealmCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FDynRealmCond.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.api.dao.search;\n \n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+\n public class DynRealmCond extends AbstractSearchCond {\n \n     private static final long serialVersionUID = 9110213614796095482L;\n@@ -36,4 +40,35 @@ public void setDynRealm(final String dynRealm) {\n     public final boolean isValid() {\n         return dynRealm != null;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(dynRealm).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final DynRealmCond other = (DynRealmCond) obj;\n+        return new EqualsBuilder().\n+                append(dynRealm, other.dynRealm).\n+                build();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this).\n+                append(dynRealm).\n+                build();\n+    }\n }"},{"sha":"e0cb715d2623658c44d71264bb59d353bf788391","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/MemberCond.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FMemberCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FMemberCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FMemberCond.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.api.dao.search;\n \n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+\n public class MemberCond extends AbstractSearchCond {\n \n     private static final long serialVersionUID = 1193754148321878685L;\n@@ -37,4 +41,34 @@ public boolean isValid() {\n         return member != null;\n     }\n \n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(member).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final MemberCond other = (MemberCond) obj;\n+        return new EqualsBuilder().\n+                append(member, other.member).\n+                build();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this).\n+                append(member).\n+                build();\n+    }\n }"},{"sha":"ef3eed55a7bdbee7ebf9d2ea595949b18e602d43","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/MembershipCond.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FMembershipCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FMembershipCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FMembershipCond.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.api.dao.search;\n \n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+\n public class MembershipCond extends AbstractSearchCond {\n \n     private static final long serialVersionUID = -728155256293925989L;\n@@ -36,4 +40,35 @@ public void setGroup(final String group) {\n     public final boolean isValid() {\n         return group != null;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(group).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final MembershipCond other = (MembershipCond) obj;\n+        return new EqualsBuilder().\n+                append(group, other.group).\n+                build();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this).\n+                append(group).\n+                build();\n+    }\n }"},{"sha":"eb01ee2af7a6b5895e9aff60c345d9c9d014a9b0","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/OrderByClause.java","status":"modified","additions":25,"deletions":7,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FOrderByClause.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FOrderByClause.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FOrderByClause.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -21,8 +21,7 @@\n import java.io.Serializable;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n-import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n \n public class OrderByClause implements Serializable {\n \n@@ -56,17 +55,36 @@ public void setDirection(final Direction direction) {\n     }\n \n     @Override\n-    public boolean equals(final Object obj) {\n-        return EqualsBuilder.reflectionEquals(this, obj);\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(field).\n+                append(direction).\n+                build();\n     }\n \n     @Override\n-    public int hashCode() {\n-        return HashCodeBuilder.reflectionHashCode(this);\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final OrderByClause other = (OrderByClause) obj;\n+        return new EqualsBuilder().\n+                append(field, other.field).\n+                append(direction, other.direction).\n+                build();\n     }\n \n     @Override\n     public String toString() {\n-        return ReflectionToStringBuilder.toString(this, ToStringStyle.JSON_STYLE);\n+        return new ToStringBuilder(this).\n+                append(field).\n+                append(direction).\n+                build();\n     }\n }"},{"sha":"18369a030a91507cac8e1f29329c7b7c8058b2d5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/PrivilegeCond.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FPrivilegeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FPrivilegeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FPrivilegeCond.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.api.dao.search;\n \n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+\n public class PrivilegeCond extends AbstractSearchCond {\n \n     private static final long serialVersionUID = -8095105031495519762L;\n@@ -36,4 +40,35 @@ public void setPrivilege(final String privilege) {\n     public final boolean isValid() {\n         return privilege != null;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(privilege).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final PrivilegeCond other = (PrivilegeCond) obj;\n+        return new EqualsBuilder().\n+                append(privilege, other.privilege).\n+                build();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this).\n+                append(privilege).\n+                build();\n+    }\n }"},{"sha":"16d71abf475ad2e72198be9d116af8500ebc7865","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RelationshipCond.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRelationshipCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRelationshipCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRelationshipCond.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.api.dao.search;\n \n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+\n public class RelationshipCond extends AbstractSearchCond {\n \n     private static final long serialVersionUID = 6865985945516722103L;\n@@ -36,4 +40,35 @@ public void setAnyObject(final String anyObject) {\n     public final boolean isValid() {\n         return anyObject != null;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(anyObject).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final RelationshipCond other = (RelationshipCond) obj;\n+        return new EqualsBuilder().\n+                append(anyObject, other.anyObject).\n+                build();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this).\n+                append(anyObject).\n+                build();\n+    }\n }"},{"sha":"59f8e4993e10e02856a3c11eb8b8eaba66cf748c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RelationshipTypeCond.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRelationshipTypeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRelationshipTypeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRelationshipTypeCond.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.api.dao.search;\n \n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+\n public class RelationshipTypeCond extends AbstractSearchCond {\n \n     private static final long serialVersionUID = 906241367466433419L;\n@@ -36,4 +40,35 @@ public void setRelationshipTypeKey(final String relationshipTypeKey) {\n     public final boolean isValid() {\n         return relationshipTypeKey != null;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(relationshipTypeKey).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final RelationshipTypeCond other = (RelationshipTypeCond) obj;\n+        return new EqualsBuilder().\n+                append(relationshipTypeKey, other.relationshipTypeKey).\n+                build();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this).\n+                append(relationshipTypeKey).\n+                build();\n+    }\n }"},{"sha":"ea87bb2a19be6230afc7a3689f1506fd67a86626","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/ResourceCond.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FResourceCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FResourceCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FResourceCond.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.api.dao.search;\n \n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+\n /**\n  * Search condition to be applied when searching for associated resources.\n  */\n@@ -39,4 +43,35 @@ public void setResourceKey(final String resourceKey) {\n     public final boolean isValid() {\n         return resourceKey != null;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(resourceKey).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final ResourceCond other = (ResourceCond) obj;\n+        return new EqualsBuilder().\n+                append(resourceKey, other.resourceKey).\n+                build();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this).\n+                append(resourceKey).\n+                build();\n+    }\n }"},{"sha":"f5433779835610fa28d3eaede2829abb8bb76942","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RoleCond.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRoleCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRoleCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRoleCond.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.api.dao.search;\n \n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+\n public class RoleCond extends AbstractSearchCond {\n \n     private static final long serialVersionUID = 3581958527829522490L;\n@@ -36,4 +40,35 @@ public void setRole(final String role) {\n     public final boolean isValid() {\n         return role != null;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(role).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final RoleCond other = (RoleCond) obj;\n+        return new EqualsBuilder().\n+                append(role, other.role).\n+                build();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this).\n+                append(role).\n+                build();\n+    }\n }"},{"sha":"c90cdde7adaaeecba306f26c656fdb21e373b97d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/SearchCond.java","status":"modified","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -19,6 +19,9 @@\n package org.apache.syncope.core.persistence.api.dao.search;\n \n import java.util.List;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n \n public class SearchCond extends AbstractSearchCond {\n \n@@ -392,4 +395,77 @@ public boolean isValid() {\n \n         return isValid;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(type).\n+                append(anyTypeCond).\n+                append(anyCond).\n+                append(attributeCond).\n+                append(relationshipCond).\n+                append(relationshipTypeCond).\n+                append(membershipCond).\n+                append(roleCond).\n+                append(privilegeCond).\n+                append(dynRealmCond).\n+                append(resourceCond).\n+                append(assignableCond).\n+                append(memberCond).\n+                append(leftSearchCond).\n+                append(rightSearchCond).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final SearchCond other = (SearchCond) obj;\n+        return new EqualsBuilder().\n+                append(type, other.type).\n+                append(anyTypeCond, other.anyTypeCond).\n+                append(anyCond, other.anyCond).\n+                append(attributeCond, other.attributeCond).\n+                append(relationshipCond, other.relationshipCond).\n+                append(relationshipTypeCond, other.relationshipTypeCond).\n+                append(membershipCond, other.membershipCond).\n+                append(roleCond, other.roleCond).\n+                append(privilegeCond, other.privilegeCond).\n+                append(dynRealmCond, other.dynRealmCond).\n+                append(resourceCond, other.resourceCond).\n+                append(assignableCond, other.assignableCond).\n+                append(memberCond, other.memberCond).\n+                append(leftSearchCond, other.leftSearchCond).\n+                append(rightSearchCond, other.rightSearchCond).\n+                build();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this).\n+                append(type).\n+                append(anyTypeCond).\n+                append(anyCond).\n+                append(attributeCond).\n+                append(relationshipCond).\n+                append(relationshipTypeCond).\n+                append(membershipCond).\n+                append(roleCond).\n+                append(privilegeCond).\n+                append(dynRealmCond).\n+                append(resourceCond).\n+                append(assignableCond).\n+                append(memberCond).\n+                append(leftSearchCond).\n+                append(rightSearchCond).\n+                build();\n+    }\n }"},{"sha":"90b3c96ff0268ab8525586e03f995de9eb66d776","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n+import java.lang.reflect.Field;\n import java.util.Set;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -31,7 +32,7 @@ public interface AnyUtils {\n \n     <T extends Any<?>> Class<T> anyClass();\n \n-    boolean isFieldName(String name);\n+    Field getField(String name);\n \n     <T extends PlainAttr<?>> Class<T> plainAttrClass();\n "},{"sha":"99c99b8f7ee070212fbe1b83fb51083b2bc1f249","filename":"core/persistence-jpa/pom.xml","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fpom.xml?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -55,10 +55,6 @@ under the License.\n       <groupId>org.apache.openjpa</groupId>\n       <artifactId>openjpa-persistence-jdbc</artifactId>\n     </dependency>\n-    <dependency>\n-      <groupId>com.fasterxml.uuid</groupId>\n-      <artifactId>java-uuid-generator</artifactId>\n-    </dependency>\n     \n     <dependency>\n       <groupId>com.zaxxer</groupId>"},{"sha":"dbe1cf172055811f1450cb0e68661a1362134910","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/MultiParentNode.java","status":"modified","additions":35,"deletions":3,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FMultiParentNode.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FMultiParentNode.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FMultiParentNode.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -22,6 +22,7 @@\n import java.util.Set;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n \n class MultiParentNode<T> {\n \n@@ -93,13 +94,44 @@ public void removeChild(final MultiParentNode<T> child) {\n         }\n     }\n \n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(object).\n+                append(children).\n+                append(level).\n+                append(exploited).\n+                build();\n+    }\n+\n     @Override\n     public boolean equals(final Object obj) {\n-        return EqualsBuilder.reflectionEquals(this, obj);\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        @SuppressWarnings(\"unchecked\")\n+        final MultiParentNode<T> other = (MultiParentNode<T>) obj;\n+        return new EqualsBuilder().\n+                append(object, other.object).\n+                append(children, other.children).\n+                append(level, other.level).\n+                append(exploited, other.exploited).\n+                build();\n     }\n \n     @Override\n-    public int hashCode() {\n-        return HashCodeBuilder.reflectionHashCode(this);\n+    public String toString() {\n+        return new ToStringBuilder(this).\n+                append(object).\n+                append(children).\n+                append(level).\n+                append(exploited).\n+                build();\n     }\n }"},{"sha":"3320bb62e637e58b99df3003a78f1f5f3035de66","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -199,7 +199,7 @@ public List<A> findByPlainAttrValue(\n \n         PlainSchema schema = plainSchemaDAO().find(schemaKey);\n         if (schema == null) {\n-            LOG.error(\"Invalid schema name '{}'\", schemaKey);\n+            LOG.error(\"Invalid schema '{}'\", schemaKey);\n             return Collections.<A>emptyList();\n         }\n \n@@ -237,7 +237,7 @@ public A findByPlainAttrUniqueValue(\n \n         PlainSchema schema = plainSchemaDAO().find(schemaKey);\n         if (schema == null) {\n-            LOG.error(\"Invalid schema name '{}'\", schemaKey);\n+            LOG.error(\"Invalid schema '{}'\", schemaKey);\n             return null;\n         }\n         if (!schema.isUniqueConstraint()) {\n@@ -248,7 +248,7 @@ public A findByPlainAttrUniqueValue(\n         List<A> result = findByPlainAttrValue(schemaKey, attrUniqueValue, ignoreCaseMatch);\n         return result.isEmpty()\n                 ? null\n-                : result.iterator().next();\n+                : result.get(0);\n     }\n \n     /**\n@@ -277,13 +277,13 @@ private List<String> split(final String attrValue, final List<String> literals)\n     private Set<String> getWhereClause(final String expression, final String value, final boolean ignoreCaseMatch) {\n         Parser parser = new Parser(new StringReader(expression));\n \n-        // Schema names\n+        // Schema keys\n         List<String> identifiers = new ArrayList<>();\n \n         // Literals\n         List<String> literals = new ArrayList<>();\n \n-        // Get schema names and literals\n+        // Get schema keys and literals\n         for (Token token = parser.getNextToken(); token != null && StringUtils.isNotBlank(token.toString());\n                 token = parser.getNextToken()) {\n \n@@ -297,16 +297,16 @@ private Set<String> getWhereClause(final String expression, final String value,\n         }\n \n         // Sort literals in order to process later literals included into others\n-        Collections.sort(literals, (final String t, final String t1) -> {\n-            if (t == null && t1 == null) {\n+        Collections.sort(literals, (l1, l2) -> {\n+            if (l1 == null && l2 == null) {\n                 return 0;\n-            } else if (t != null && t1 == null) {\n+            } else if (l1 != null && l2 == null) {\n                 return -1;\n-            } else if (t == null && t1 != null) {\n+            } else if (l1 == null && l2 != null) {\n                 return 1;\n-            } else if (t.length() == t1.length()) {\n+            } else if (l1.length() == l2.length()) {\n                 return 0;\n-            } else if (t.length() > t1.length()) {\n+            } else if (l1.length() > l2.length()) {\n                 return -1;\n             } else {\n                 return 1;\n@@ -343,7 +343,7 @@ private Set<String> getWhereClause(final String expression, final String value,\n \n                     bld.append(\"(\");\n \n-                    // set schema name\n+                    // set schema key\n                     bld.append(\"s.id = '\").append(identifiers.get(i)).append(\"'\");\n \n                     bld.append(\" AND \");\n@@ -396,7 +396,7 @@ private Set<String> getWhereClause(final String expression, final String value,\n     public List<A> findByDerAttrValue(final String schemaKey, final String value, final boolean ignoreCaseMatch) {\n         DerSchema schema = derSchemaDAO().find(schemaKey);\n         if (schema == null) {\n-            LOG.error(\"Invalid schema name '{}'\", schemaKey);\n+            LOG.error(\"Invalid schema '{}'\", schemaKey);\n             return Collections.<A>emptyList();\n         }\n \n@@ -551,5 +551,4 @@ public List<String> findDynRealms(final String key) {\n                 });\n         return result;\n     }\n-\n }"},{"sha":"0d35ccb6af731c121e73169db47d329c267b8941","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":24,"deletions":21,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -32,7 +32,6 @@\n import javax.validation.constraints.Min;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.ClassUtils;\n-import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -57,14 +56,14 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.util.ReflectionUtils;\n \n public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implements AnySearchDAO {\n \n@@ -90,6 +89,9 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement\n     @Autowired\n     protected PlainSchemaDAO schemaDAO;\n \n+    @Autowired\n+    protected EntityFactory entityFactory;\n+\n     @Autowired\n     protected AnyUtilsFactory anyUtilsFactory;\n \n@@ -175,22 +177,23 @@ protected Pair<PlainSchema, PlainAttrValue> check(final AttributeCond cond, fina\n     }\n \n     protected Triple<PlainSchema, PlainAttrValue, AnyCond> check(final AnyCond cond, final AnyTypeKind kind) {\n-        AnyCond condClone = SerializationUtils.clone(cond);\n+        AnyCond computed = new AnyCond(cond.getType());\n+        computed.setSchema(cond.getSchema());\n+        computed.setExpression(cond.getExpression());\n \n-        AnyUtils attrUtils = anyUtilsFactory.getInstance(kind);\n+        AnyUtils anyUtils = anyUtilsFactory.getInstance(kind);\n \n-        // Keeps track of difference between entity's getKey() and JPA @Id fields\n-        if (\"key\".equals(condClone.getSchema())) {\n-            condClone.setSchema(\"id\");\n-        }\n-\n-        Field anyField = ReflectionUtils.findField(attrUtils.anyClass(), condClone.getSchema());\n+        Field anyField = anyUtils.getField(computed.getSchema());\n         if (anyField == null) {\n-            LOG.warn(\"Ignoring invalid schema '{}'\", condClone.getSchema());\n+            LOG.warn(\"Ignoring invalid field '{}'\", computed.getSchema());\n             throw new IllegalArgumentException();\n         }\n+        // Keeps track of difference between entity's getKey() and JPA @Id fields\n+        if (\"key\".equals(computed.getSchema())) {\n+            computed.setSchema(\"id\");\n+        }\n \n-        PlainSchema schema = new JPAPlainSchema();\n+        PlainSchema schema = entityFactory.newEntity(PlainSchema.class);\n         schema.setKey(anyField.getName());\n         for (AttrSchemaType attrSchemaType : AttrSchemaType.values()) {\n             if (anyField.getType().isAssignableFrom(attrSchemaType.getType())) {\n@@ -224,26 +227,26 @@ protected Triple<PlainSchema, PlainAttrValue, AnyCond> check(final AnyCond cond,\n             }\n \n             if (relMethod != null && String.class.isAssignableFrom(relMethod.getReturnType())) {\n-                condClone.setSchema(condClone.getSchema() + \"_id\");\n+                computed.setSchema(computed.getSchema() + \"_id\");\n                 schema.setType(AttrSchemaType.String);\n             }\n         }\n \n-        PlainAttrValue attrValue = attrUtils.newPlainAttrValue();\n-        if (condClone.getType() != AttributeCond.Type.LIKE\n-                && condClone.getType() != AttributeCond.Type.ILIKE\n-                && condClone.getType() != AttributeCond.Type.ISNULL\n-                && condClone.getType() != AttributeCond.Type.ISNOTNULL) {\n+        PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n+        if (computed.getType() != AttributeCond.Type.LIKE\n+                && computed.getType() != AttributeCond.Type.ILIKE\n+                && computed.getType() != AttributeCond.Type.ISNULL\n+                && computed.getType() != AttributeCond.Type.ISNOTNULL) {\n \n             try {\n-                ((JPAPlainSchema) schema).validator().validate(condClone.getExpression(), attrValue);\n+                ((JPAPlainSchema) schema).validator().validate(computed.getExpression(), attrValue);\n             } catch (ValidationException e) {\n-                LOG.error(\"Could not validate expression '\" + condClone.getExpression() + \"'\", e);\n+                LOG.error(\"Could not validate expression '\" + computed.getExpression() + \"'\", e);\n                 throw new IllegalArgumentException();\n             }\n         }\n \n-        return Triple.of(schema, attrValue, condClone);\n+        return Triple.of(schema, attrValue, computed);\n     }\n \n     protected String check(final MembershipCond cond) {"},{"sha":"0a04ac01e8704b1440ab91a0a14e4647a3843b1d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":131,"deletions":80,"changes":211,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -53,19 +53,19 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.springframework.util.ReflectionUtils;\n \n /**\n  * Search engine implementation for users, groups and any objects, based on self-updating SQL views.\n  */\n public class JPAAnySearchDAO extends AbstractAnySearchDAO {\n \n-    private static final String EMPTY_QUERY = \"SELECT any_id FROM user_search_attr WHERE 1=2\";\n+    protected static final String EMPTY_QUERY = \"SELECT any_id FROM user_search WHERE 1=2\";\n \n-    private static final String[] RELATIONSHIP_FIELDS = new String[] { \"realm\", \"userOwner\", \"groupOwner\" };\n+    protected static final String[] RELATIONSHIP_FIELDS = new String[] { \"realm\", \"userOwner\", \"groupOwner\" };\n \n     private Pair<String, Set<String>> getAdminRealmsFilter(\n             final Set<String> adminRealms,\n@@ -83,7 +83,7 @@ private Pair<String, Set<String>> getAdminRealmsFilter(\n                     throw noRealm;\n                 } else {\n                     realmKeys.addAll(realmDAO.findDescendants(realm).stream().\n-                            map(r -> r.getKey()).collect(Collectors.toSet()));\n+                            map(Entity::getKey).collect(Collectors.toSet()));\n                 }\n             } else {\n                 DynRealm dynRealm = dynRealmDAO.find(realmPath);\n@@ -96,7 +96,7 @@ private Pair<String, Set<String>> getAdminRealmsFilter(\n         });\n         if (!dynRealmKeys.isEmpty()) {\n             realmKeys.addAll(realmDAO.findAll().stream().\n-                    map(r -> r.getKey()).collect(Collectors.toSet()));\n+                    map(Entity::getKey).collect(Collectors.toSet()));\n         }\n \n         StringBuilder adminRealmFilter = new StringBuilder(\"u.any_id IN (\").\n@@ -119,11 +119,15 @@ private Pair<String, Set<String>> getAdminRealmsFilter(\n         return Pair.of(adminRealmFilter.toString(), dynRealmKeys);\n     }\n \n+    SearchSupport buildSearchSupport(final AnyTypeKind kind) {\n+        return new SearchViewSupport(kind);\n+    }\n+\n     @Override\n     protected int doCount(final Set<String> adminRealms, final SearchCond cond, final AnyTypeKind kind) {\n-        List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n+        List<Object> parameters = new ArrayList<>();\n \n-        SearchSupport svs = new SearchSupport(kind);\n+        SearchSupport svs = buildSearchSupport(kind);\n \n         Pair<String, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n \n@@ -155,9 +159,9 @@ protected <T extends Any<?>> List<T> doSearch(\n             final AnyTypeKind kind) {\n \n         try {\n-            List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n+            List<Object> parameters = new ArrayList<>();\n \n-            SearchSupport svs = new SearchSupport(kind);\n+            SearchSupport svs = buildSearchSupport(kind);\n \n             Pair<String, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n \n@@ -199,14 +203,9 @@ protected <T extends Any<?>> List<T> doSearch(\n         return Collections.emptyList();\n     }\n \n-    private int setParameter(final List<Object> parameters, final Object parameter) {\n-        int key;\n-        synchronized (parameters) {\n-            parameters.add(parameter);\n-            key = parameters.size();\n-        }\n-\n-        return key;\n+    protected int setParameter(final List<Object> parameters, final Object parameter) {\n+        parameters.add(parameter);\n+        return parameters.size();\n     }\n \n     private void fillWithParameters(final Query query, final List<Object> parameters) {\n@@ -224,7 +223,7 @@ private void fillWithParameters(final Query query, final List<Object> parameters\n     }\n \n     private StringBuilder buildSelect(final OrderBySupport obs) {\n-        final StringBuilder select = new StringBuilder(\"SELECT u.any_id\");\n+        StringBuilder select = new StringBuilder(\"SELECT u.any_id\");\n \n         obs.items.forEach(item -> {\n             select.append(',').append(item.select);\n@@ -234,15 +233,14 @@ private StringBuilder buildSelect(final OrderBySupport obs) {\n         return select;\n     }\n \n-    private StringBuilder buildWhere(final SearchSupport svs, final OrderBySupport obs) {\n-        StringBuilder where = new StringBuilder(\" u\");\n+    protected void processOBS(final SearchSupport svs, final OrderBySupport obs, final StringBuilder where) {\n         obs.views.forEach(searchView -> {\n             where.append(',');\n-            if (searchView.name.equals(svs.attr().name)) {\n+            if (searchView.name.equals(svs.asSearchViewSupport().attr().name)) {\n                 where.append(\" (SELECT * FROM \").append(searchView.name);\n \n                 if (svs.nonMandatorySchemas || obs.nonMandatorySchemas) {\n-                    where.append(\" UNION SELECT * FROM \").append(svs.nullAttr().name);\n+                    where.append(\" UNION SELECT * FROM \").append(svs.asSearchViewSupport().nullAttr().name);\n                 }\n \n                 where.append(')');\n@@ -251,6 +249,11 @@ private StringBuilder buildWhere(final SearchSupport svs, final OrderBySupport o\n             }\n             where.append(' ').append(searchView.alias);\n         });\n+    }\n+\n+    private StringBuilder buildWhere(final SearchSupport svs, final OrderBySupport obs) {\n+        StringBuilder where = new StringBuilder(\" u\");\n+        processOBS(svs, obs, where);\n         where.append(\" WHERE \");\n         obs.views.forEach(searchView -> {\n             where.append(\"u.any_id=\").append(searchView.alias).append(\".any_id AND \");\n@@ -279,48 +282,62 @@ private StringBuilder buildOrderBy(final OrderBySupport obs) {\n         return orderBy;\n     }\n \n+    protected void parseOrderByForPlainSchema(\n+            final SearchSupport svs,\n+            final OrderBySupport obs,\n+            final OrderBySupport.Item item,\n+            final OrderByClause clause,\n+            final PlainSchema schema,\n+            final String fieldName) {\n+\n+        // keep track of involvement of non-mandatory schemas in the order by clauses\n+        obs.nonMandatorySchemas = !\"true\".equals(schema.getMandatoryCondition());\n+\n+        if (schema.isUniqueConstraint()) {\n+            obs.views.add(svs.asSearchViewSupport().uniqueAttr());\n+\n+            item.select = new StringBuilder().\n+                    append(svs.asSearchViewSupport().uniqueAttr().alias).append('.').\n+                    append(svs.fieldName(schema.getType())).\n+                    append(\" AS \").append(fieldName).toString();\n+            item.where = new StringBuilder().\n+                    append(svs.asSearchViewSupport().uniqueAttr().alias).\n+                    append(\".schema_id='\").append(fieldName).append(\"'\").toString();\n+            item.orderBy = fieldName + \" \" + clause.getDirection().name();\n+        } else {\n+            obs.views.add(svs.asSearchViewSupport().attr());\n+\n+            item.select = new StringBuilder().\n+                    append(svs.asSearchViewSupport().attr().alias).append('.').append(svs.fieldName(schema.getType())).\n+                    append(\" AS \").append(fieldName).toString();\n+            item.where = new StringBuilder().\n+                    append(svs.asSearchViewSupport().attr().alias).\n+                    append(\".schema_id='\").append(fieldName).append(\"'\").toString();\n+            item.orderBy = fieldName + \" \" + clause.getDirection().name();\n+        }\n+    }\n+\n     private OrderBySupport parseOrderBy(\n-            final AnyTypeKind kind, final SearchSupport svs, final List<OrderByClause> orderBy) {\n+            final AnyTypeKind kind,\n+            final SearchSupport svs,\n+            final List<OrderByClause> orderBy) {\n \n-        AnyUtils attrUtils = anyUtilsFactory.getInstance(kind);\n+        AnyUtils anyUtils = anyUtilsFactory.getInstance(kind);\n \n         OrderBySupport obs = new OrderBySupport();\n \n         filterOrderBy(orderBy).forEach(clause -> {\n             OrderBySupport.Item item = new OrderBySupport.Item();\n \n-            // Manage difference among external key attribute and internal JPA @Id\n-            String fieldName = \"key\".equals(clause.getField()) ? \"id\" : clause.getField();\n-\n-            if (ReflectionUtils.findField(attrUtils.anyClass(), fieldName) == null) {\n-                PlainSchema schema = schemaDAO.find(fieldName);\n+            if (anyUtils.getField(clause.getField()) == null) {\n+                PlainSchema schema = schemaDAO.find(clause.getField());\n                 if (schema != null) {\n-                    // keep track of involvement of non-mandatory schemas in the order by clauses\n-                    obs.nonMandatorySchemas = !\"true\".equals(schema.getMandatoryCondition());\n-\n-                    if (schema.isUniqueConstraint()) {\n-                        obs.views.add(svs.uniqueAttr());\n-\n-                        item.select = new StringBuilder().\n-                                append(svs.uniqueAttr().alias).append('.').append(svs.fieldName(schema.getType())).\n-                                append(\" AS \").append(fieldName).toString();\n-                        item.where = new StringBuilder().\n-                                append(svs.uniqueAttr().alias).\n-                                append(\".schema_id='\").append(fieldName).append(\"'\").toString();\n-                        item.orderBy = fieldName + \" \" + clause.getDirection().name();\n-                    } else {\n-                        obs.views.add(svs.attr());\n-\n-                        item.select = new StringBuilder().\n-                                append(svs.attr().alias).append('.').append(svs.fieldName(schema.getType())).\n-                                append(\" AS \").append(fieldName).toString();\n-                        item.where = new StringBuilder().\n-                                append(svs.attr().alias).\n-                                append(\".schema_id='\").append(fieldName).append(\"'\").toString();\n-                        item.orderBy = fieldName + \" \" + clause.getDirection().name();\n-                    }\n+                    parseOrderByForPlainSchema(svs, obs, item, clause, schema, clause.getField());\n                 }\n             } else {\n+                // Manage difference among external key attribute and internal JPA @Id\n+                String fieldName = \"key\".equals(clause.getField()) ? \"id\" : clause.getField();\n+\n                 // Adjust field name to column name\n                 if (ArrayUtils.contains(RELATIONSHIP_FIELDS, fieldName)) {\n                     fieldName += \"_id\";\n@@ -419,8 +436,11 @@ private StringBuilder getQuery(final SearchCond cond, final List<Object> paramet\n         return query;\n     }\n \n-    private String getQuery(\n-            final AnyTypeCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n+    protected String getQuery(\n+            final AnyTypeCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE type_id\");\n@@ -436,7 +456,7 @@ private String getQuery(\n         return query.toString();\n     }\n \n-    private String getQuery(\n+    protected String getQuery(\n             final RelationshipTypeCond cond,\n             final boolean not,\n             final List<Object> parameters,\n@@ -462,8 +482,11 @@ private String getQuery(\n         return query.toString();\n     }\n \n-    private String getQuery(\n-            final RelationshipCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n+    protected String getQuery(\n+            final RelationshipCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n \n         String rightAnyObjectKey;\n         try {\n@@ -489,8 +512,11 @@ private String getQuery(\n         return query.toString();\n     }\n \n-    private String getQuery(\n-            final MembershipCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n+    protected String getQuery(\n+            final MembershipCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n \n         String groupKey;\n         try {\n@@ -527,8 +553,11 @@ private String getQuery(\n         return query.toString();\n     }\n \n-    private String getQuery(\n-            final RoleCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n+    protected String getQuery(\n+            final RoleCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE (\");\n@@ -558,8 +587,11 @@ private String getQuery(\n         return query.toString();\n     }\n \n-    private String getQuery(\n-            final PrivilegeCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n+    protected String getQuery(\n+            final PrivilegeCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE (\");\n@@ -589,8 +621,11 @@ private String getQuery(\n         return query.toString();\n     }\n \n-    private String getQuery(\n-            final DynRealmCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n+    protected String getQuery(\n+            final DynRealmCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE (\");\n@@ -609,8 +644,11 @@ private String getQuery(\n         return query.toString();\n     }\n \n-    private String getQuery(\n-            final ResourceCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n+    protected String getQuery(\n+            final ResourceCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n@@ -638,7 +676,11 @@ private String getQuery(\n         return query.toString();\n     }\n \n-    private String getQuery(final AssignableCond cond, final List<Object> parameters, final SearchSupport svs) {\n+    protected String getQuery(\n+            final AssignableCond cond,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n+\n         Realm realm;\n         try {\n             realm = check(cond);\n@@ -664,8 +706,11 @@ private String getQuery(final AssignableCond cond, final List<Object> parameters\n         return query.toString();\n     }\n \n-    private String getQuery(\n-            final MemberCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n+    protected String getQuery(\n+            final MemberCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n \n         String memberKey;\n         try {\n@@ -766,7 +811,7 @@ private void fillAttrQuery(\n                 } else {\n                     query.append('=');\n                 }\n-                if ((schema.getType() == AttrSchemaType.String \n+                if ((schema.getType() == AttrSchemaType.String\n                         || schema.getType() == AttrSchemaType.Enum) && ignoreCase) {\n                     query.append(\"LOWER(?\").append(setParameter(parameters, attrValue.getValue())).append(')');\n                 } else {\n@@ -818,8 +863,11 @@ private void fillAttrQuery(\n         }\n     }\n \n-    private String getQuery(\n-            final AttributeCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n+    protected String getQuery(\n+            final AttributeCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n \n         Pair<PlainSchema, PlainAttrValue> checked;\n         try {\n@@ -833,20 +881,20 @@ private String getQuery(\n             case ISNOTNULL:\n                 query.append(svs.field().name).\n                         append(\" WHERE any_id NOT IN (SELECT any_id FROM \").\n-                        append(svs.nullAttr().name).\n+                        append(svs.asSearchViewSupport().nullAttr().name).\n                         append(\" WHERE schema_id='\").append(checked.getLeft().getKey()).append(\"')\");\n                 break;\n \n             case ISNULL:\n-                query.append(svs.nullAttr().name).\n+                query.append(svs.asSearchViewSupport().nullAttr().name).\n                         append(\" WHERE schema_id='\").append(checked.getLeft().getKey()).append(\"'\");\n                 break;\n \n             default:\n                 if (checked.getLeft().isUniqueConstraint()) {\n-                    query.append(svs.uniqueAttr().name);\n+                    query.append(svs.asSearchViewSupport().uniqueAttr().name);\n                 } else {\n-                    query.append(svs.attr().name);\n+                    query.append(svs.asSearchViewSupport().attr().name);\n                 }\n                 query.append(\" WHERE schema_id='\").append(checked.getLeft().getKey());\n                 fillAttrQuery(query, checked.getRight(), checked.getLeft(), cond, not, parameters, svs);\n@@ -855,8 +903,11 @@ private String getQuery(\n         return query.toString();\n     }\n \n-    private String getQuery(\n-            final AnyCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n+    protected String getQuery(\n+            final AnyCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n \n         Triple<PlainSchema, PlainAttrValue, AnyCond> checked;\n         try {"},{"sha":"b9d2f019997918f850b4e50250c2c5c2f8b776e7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -102,8 +102,8 @@ public DynRealm saveAndRefreshDynMemberships(final DynRealm dynRealm) {\n                 SearchCondConverter.convert(memb.getFIQLCond()), memb.getAnyType().getKind())).\n                 forEachOrdered(matching -> {\n                     matching.forEach(any -> {\n-                        Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE\n-                                + \" VALUES(?, ?)\");\n+                        Query insert = entityManager().createNativeQuery(\n+                                \"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n                         insert.setParameter(1, any.getKey());\n                         insert.setParameter(2, merged.getKey());\n                         insert.executeUpdate();"},{"sha":"e26ce3127a0d1af5b6ac0e73888705467b9d665b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportExecDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -159,8 +159,8 @@ public List<ReportExec> findAll(\n         return query.getResultList();\n     }\n \n-    @Override\n     @Transactional(rollbackFor = Throwable.class)\n+    @Override\n     public ReportExec save(final ReportExec execution) {\n         return entityManager().merge(execution);\n     }"},{"sha":"0f31c57fa85209528eab60a1662a452bceedd45c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/OrderBySupport.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOrderBySupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOrderBySupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOrderBySupport.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -23,9 +23,9 @@\n import java.util.List;\n import java.util.Set;\n \n-class OrderBySupport {\n+public class OrderBySupport {\n \n-    static class Item {\n+    public static class Item {\n \n         protected String select;\n "},{"sha":"3304a7080d0747102ed24694af8db3a63658c054","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchSupport.java","status":"modified","additions":31,"deletions":20,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -23,9 +23,9 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n \n-class SearchSupport {\n+public class SearchSupport {\n \n-    static class SearchView {\n+    public static class SearchView {\n \n         protected String alias;\n \n@@ -37,21 +37,37 @@ protected SearchView(final String alias, final String name) {\n         }\n \n         @Override\n-        public boolean equals(final Object obj) {\n-            return EqualsBuilder.reflectionEquals(this, obj);\n+        public int hashCode() {\n+            return new HashCodeBuilder().\n+                    append(alias).\n+                    append(name).\n+                    build();\n         }\n \n         @Override\n-        public int hashCode() {\n-            return HashCodeBuilder.reflectionHashCode(this);\n+        public boolean equals(final Object obj) {\n+            if (this == obj) {\n+                return true;\n+            }\n+            if (obj == null) {\n+                return false;\n+            }\n+            if (getClass() != obj.getClass()) {\n+                return false;\n+            }\n+            final SearchView other = (SearchView) obj;\n+            return new EqualsBuilder().\n+                    append(alias, other.alias).\n+                    append(name, other.name).\n+                    build();\n         }\n     }\n \n     protected final AnyTypeKind anyTypeKind;\n \n     protected boolean nonMandatorySchemas = false;\n \n-    SearchSupport(final AnyTypeKind anyTypeKind) {\n+    public SearchSupport(final AnyTypeKind anyTypeKind) {\n         this.anyTypeKind = anyTypeKind;\n     }\n \n@@ -88,7 +104,7 @@ public String fieldName(final AttrSchemaType attrSchemaType) {\n     }\n \n     public SearchView field() {\n-        String result = \"\";\n+        String result;\n \n         switch (anyTypeKind) {\n             case ANY_OBJECT:\n@@ -108,10 +124,6 @@ public SearchView field() {\n         return new SearchView(\"sv\", result);\n     }\n \n-    public SearchView attr() {\n-        return new SearchView(\"sva\", field().name + \"_attr\");\n-    }\n-\n     public SearchView relationship() {\n         String kind = anyTypeKind == AnyTypeKind.USER ? \"u\" : \"a\";\n         return new SearchView(\"sv\" + kind + \"m\", field().name + \"_\" + kind + \"relationship\");\n@@ -147,10 +159,6 @@ public SearchView dynrealmmembership() {\n         return new SearchView(\"svdrealm\", JPADynRealmDAO.DYNMEMB_TABLE);\n     }\n \n-    public SearchView nullAttr() {\n-        return new SearchView(\"svna\", field().name + \"_null_attr\");\n-    }\n-\n     public SearchView resource() {\n         return new SearchView(\"svr\", field().name + \"_resource\");\n     }\n@@ -159,11 +167,14 @@ public SearchView groupResource() {\n         return new SearchView(\"svrr\", field().name + \"_group_res\");\n     }\n \n-    public SearchView uniqueAttr() {\n-        return new SearchView(\"svua\", field().name + \"_unique_attr\");\n-    }\n-\n     public SearchView entitlements() {\n         return new SearchView(\"sve\", field().name + \"_entitlements\");\n     }\n+\n+    SearchViewSupport asSearchViewSupport() {\n+        if (this instanceof SearchViewSupport) {\n+            return (SearchViewSupport) this;\n+        }\n+        throw new IllegalArgumentException(\"Not an \" + SearchViewSupport.class + \" instance\");\n+    }\n }"},{"sha":"9dc95d84a9536bbf8936eaaa7b6c30b5ac534559","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchViewSupport.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchViewSupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchViewSupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchViewSupport.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+\n+public class SearchViewSupport extends SearchSupport {\n+\n+    public SearchViewSupport(final AnyTypeKind anyTypeKind) {\n+        super(anyTypeKind);\n+    }\n+\n+    public SearchView attr() {\n+        return new SearchView(\"sva\", field().name + \"_attr\");\n+    }\n+\n+    public SearchView nullAttr() {\n+        return new SearchView(\"svna\", field().name + \"_null_attr\");\n+    }\n+\n+    public SearchView uniqueAttr() {\n+        return new SearchView(\"svua\", field().name + \"_unique_attr\");\n+    }\n+}"},{"sha":"93e281e0b707a77f4786f7a70d957746b5e97a1a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractEntity.java","status":"modified","additions":10,"deletions":26,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractEntity.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,18 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import java.beans.PropertyDescriptor;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Set;\n-import org.apache.commons.lang3.builder.EqualsBuilder;\n-import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import java.util.Objects;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.BeanUtils;\n \n public abstract class AbstractEntity implements Entity {\n \n@@ -49,31 +43,21 @@ protected void checkImplementationType(final Implementation object, final Implem\n         }\n     }\n \n-    /**\n-     * @return fields to be excluded when computing equals() or hashcode()\n-     */\n-    private String[] getExcludeFields() {\n-        Set<String> excludeFields = new HashSet<>();\n-\n-        for (PropertyDescriptor propDesc : BeanUtils.getPropertyDescriptors(getClass())) {\n-            if (propDesc.getPropertyType().isInstance(Collections.emptySet())\n-                    || propDesc.getPropertyType().isInstance(Collections.emptyList())) {\n-\n-                excludeFields.add(propDesc.getName());\n-            }\n-        }\n-\n-        return excludeFields.toArray(new String[] {});\n-    }\n-\n     @Override\n     public boolean equals(final Object obj) {\n-        return EqualsBuilder.reflectionEquals(this, obj, getExcludeFields());\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (!(obj instanceof AbstractEntity)) {\n+            return false;\n+        }\n+        AbstractEntity entity = (AbstractEntity) obj;\n+        return Objects.equals(getKey(), entity.getKey());\n     }\n \n     @Override\n     public int hashCode() {\n-        return HashCodeBuilder.reflectionHashCode(this, getExcludeFields());\n+        return Objects.hash(getKey());\n     }\n \n     @Override"},{"sha":"c795d078d2727e0646a59c7827075a115867e3de","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractGeneratedKeyEntity.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractGeneratedKeyEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractGeneratedKeyEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractGeneratedKeyEntity.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import javax.persistence.Column;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n \n@@ -30,7 +28,6 @@ public abstract class AbstractGeneratedKeyEntity extends AbstractEntity {\n     private static final long serialVersionUID = 4705587655441599524L;\n \n     @Id\n-    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"uuid\")\n     @Column(length = 36)\n     private String id;\n \n@@ -39,4 +36,7 @@ public String getKey() {\n         return id;\n     }\n \n+    public void setKey(final String key) {\n+        this.id = key;\n+    }\n }"},{"sha":"f50f09534226d31335119fba01f254834daaabb2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractProvidedKeyEntity.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractProvidedKeyEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractProvidedKeyEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractProvidedKeyEntity.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -39,5 +39,4 @@ public String getKey() {\n     public void setKey(final String key) {\n         this.id = key;\n     }\n-\n }"},{"sha":"aa8651922ad88cb589b48cf82b9dc72d392632ad","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java","status":"modified","additions":52,"deletions":92,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -21,6 +21,7 @@\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n import java.util.Collection;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -43,25 +44,26 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -73,19 +75,19 @@ public class JPAAnyUtils implements AnyUtils {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AnyUtils.class);\n \n-    private static final Set<String> USER_FIELD_NAMES = new HashSet<>();\n+    private static final Map<String, Field> USER_FIELDS = new HashMap<>();\n \n-    private static final Set<String> GROUP_FIELD_NAMES = new HashSet<>();\n+    private static final Map<String, Field> GROUP_FIELDS = new HashMap<>();\n \n-    private static final Set<String> ANY_OBJECT_FIELD_NAMES = new HashSet<>();\n+    private static final Map<String, Field> ANY_OBJECT_FIELDS = new HashMap<>();\n \n     static {\n-        initFieldNames(JPAUser.class, USER_FIELD_NAMES);\n-        initFieldNames(JPAGroup.class, GROUP_FIELD_NAMES);\n-        initFieldNames(JPAAnyObject.class, ANY_OBJECT_FIELD_NAMES);\n+        initFieldNames(JPAUser.class, USER_FIELDS);\n+        initFieldNames(JPAGroup.class, GROUP_FIELDS);\n+        initFieldNames(JPAAnyObject.class, ANY_OBJECT_FIELDS);\n     }\n \n-    private static void initFieldNames(final Class<?> entityClass, final Set<String> keys) {\n+    private static void initFieldNames(final Class<?> entityClass, final Map<String, Field> fields) {\n         List<Class<?>> classes = ClassUtils.getAllSuperclasses(entityClass);\n         classes.add(entityClass);\n         classes.forEach(clazz -> {\n@@ -95,16 +97,19 @@ private static void initFieldNames(final Class<?> entityClass, final Set<String>\n                         && !Collection.class.isAssignableFrom(field.getType())\n                         && !Map.class.isAssignableFrom(field.getType())) {\n \n-                    keys.add(\"id\".equals(field.getName()) ? \"key\" : field.getName());\n+                    fields.put(field.getName(), field);\n+                    if (\"id\".equals(field.getName())) {\n+                        fields.put(\"key\", field);\n+                    }\n                 }\n             }\n         });\n     }\n \n     public static boolean matchesFieldName(final String candidate) {\n-        return USER_FIELD_NAMES.contains(candidate)\n-                || GROUP_FIELD_NAMES.contains(candidate)\n-                || ANY_OBJECT_FIELD_NAMES.contains(candidate);\n+        return USER_FIELDS.containsKey(candidate)\n+                || GROUP_FIELDS.containsKey(candidate)\n+                || ANY_OBJECT_FIELDS.containsKey(candidate);\n     }\n \n     private final AnyTypeKind anyTypeKind;\n@@ -118,6 +123,9 @@ public static boolean matchesFieldName(final String candidate) {\n     @Autowired\n     private AnyObjectDAO anyObjectDAO;\n \n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n     protected JPAAnyUtils(final AnyTypeKind typeKind) {\n         this.anyTypeKind = typeKind;\n     }\n@@ -133,63 +141,47 @@ public <T extends Any<?>> Class<T> anyClass() {\n \n         switch (anyTypeKind) {\n             case GROUP:\n-                result = JPAGroup.class;\n+                result = entityFactory.newEntity(Group.class).getClass();\n                 break;\n \n             case ANY_OBJECT:\n-                result = JPAAnyObject.class;\n+                result = entityFactory.newEntity(AnyObject.class).getClass();\n                 break;\n \n             case USER:\n             default:\n-                result = JPAUser.class;\n+                result = entityFactory.newEntity(User.class).getClass();\n         }\n \n         return result;\n     }\n \n     @Override\n-    public boolean isFieldName(final String name) {\n-        Set<String> names;\n+    public Field getField(final String name) {\n+        Map<String, Field> fields;\n \n         switch (anyTypeKind) {\n             case GROUP:\n-                names = GROUP_FIELD_NAMES;\n+                fields = GROUP_FIELDS;\n                 break;\n \n             case ANY_OBJECT:\n-                names = ANY_OBJECT_FIELD_NAMES;\n+                fields = ANY_OBJECT_FIELDS;\n                 break;\n \n             case USER:\n             default:\n-                names = USER_FIELD_NAMES;\n+                fields = USER_FIELDS;\n                 break;\n         }\n \n-        return names.contains(name);\n+        return fields.get(name);\n     }\n \n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public <T extends PlainAttr<?>> Class<T> plainAttrClass() {\n-        Class result;\n-\n-        switch (anyTypeKind) {\n-            case GROUP:\n-                result = JPAGPlainAttr.class;\n-                break;\n-\n-            case ANY_OBJECT:\n-                result = JPAAPlainAttr.class;\n-                break;\n-\n-            case USER:\n-            default:\n-                result = JPAUPlainAttr.class;\n-                break;\n-        }\n-\n-        return result;\n+        return (Class<T>) newPlainAttr().getClass();\n     }\n \n     @Override\n@@ -198,15 +190,15 @@ public <T extends PlainAttr<?>> T newPlainAttr() {\n \n         switch (anyTypeKind) {\n             case USER:\n-                result = (T) new JPAUPlainAttr();\n+                result = (T) entityFactory.newEntity(UPlainAttr.class);\n                 break;\n \n             case GROUP:\n-                result = (T) new JPAGPlainAttr();\n+                result = (T) entityFactory.newEntity(GPlainAttr.class);\n                 break;\n \n             case ANY_OBJECT:\n-                result = (T) new JPAAPlainAttr();\n+                result = (T) entityFactory.newEntity(APlainAttr.class);\n                 break;\n \n             default:\n@@ -216,25 +208,9 @@ public <T extends PlainAttr<?>> T newPlainAttr() {\n     }\n \n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public <T extends PlainAttrValue> Class<T> plainAttrValueClass() {\n-        Class result;\n-\n-        switch (anyTypeKind) {\n-            case GROUP:\n-                result = JPAGPlainAttrValue.class;\n-                break;\n-\n-            case ANY_OBJECT:\n-                result = JPAAPlainAttrValue.class;\n-                break;\n-\n-            case USER:\n-            default:\n-                result = JPAUPlainAttrValue.class;\n-                break;\n-        }\n-\n-        return result;\n+        return (Class<T>) newPlainAttrValue().getClass();\n     }\n \n     @Override\n@@ -243,15 +219,15 @@ public <T extends PlainAttrValue> T newPlainAttrValue() {\n \n         switch (anyTypeKind) {\n             case USER:\n-                result = (T) new JPAUPlainAttrValue();\n+                result = (T) entityFactory.newEntity(UPlainAttrValue.class);\n                 break;\n \n             case GROUP:\n-                result = (T) new JPAGPlainAttrValue();\n+                result = (T) entityFactory.newEntity(GPlainAttrValue.class);\n                 break;\n \n             case ANY_OBJECT:\n-                result = (T) new JPAAPlainAttrValue();\n+                result = (T) entityFactory.newEntity(APlainAttrValue.class);\n                 break;\n \n             default:\n@@ -261,25 +237,9 @@ public <T extends PlainAttrValue> T newPlainAttrValue() {\n     }\n \n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public <T extends PlainAttrValue> Class<T> plainAttrUniqueValueClass() {\n-        Class result;\n-\n-        switch (anyTypeKind) {\n-            case GROUP:\n-                result = JPAGPlainAttrUniqueValue.class;\n-                break;\n-\n-            case ANY_OBJECT:\n-                result = JPAAPlainAttrUniqueValue.class;\n-                break;\n-\n-            case USER:\n-            default:\n-                result = JPAUPlainAttrUniqueValue.class;\n-                break;\n-        }\n-\n-        return result;\n+        return (Class<T>) newPlainAttrUniqueValue().getClass();\n     }\n \n     @Override\n@@ -288,15 +248,15 @@ public <T extends PlainAttrValue> T newPlainAttrUniqueValue() {\n \n         switch (anyTypeKind) {\n             case USER:\n-                result = (T) new JPAUPlainAttrUniqueValue();\n+                result = (T) entityFactory.newEntity(UPlainAttrUniqueValue.class);\n                 break;\n \n             case GROUP:\n-                result = (T) new JPAGPlainAttrUniqueValue();\n+                result = (T) entityFactory.newEntity(GPlainAttrUniqueValue.class);\n                 break;\n \n             case ANY_OBJECT:\n-                result = (T) new JPAAPlainAttrUniqueValue();\n+                result = (T) entityFactory.newEntity(APlainAttrUniqueValue.class);\n                 break;\n \n             default:"},{"sha":"c8714687e4e6ff90aa9d1038604f09fae51686bc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnPoolConf.java","status":"modified","additions":33,"deletions":5,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnPoolConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnPoolConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnPoolConf.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -91,17 +91,45 @@ public void setMinEvictableIdleTimeMillis(final Long minEvictableIdleTimeMillis)\n     }\n \n     @Override\n-    public boolean equals(final Object obj) {\n-        return EqualsBuilder.reflectionEquals(this, obj);\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(maxObjects).\n+                append(minIdle).\n+                append(maxIdle).\n+                append(maxWait).\n+                append(minEvictableIdleTimeMillis).\n+                build();\n     }\n \n     @Override\n-    public int hashCode() {\n-        return HashCodeBuilder.reflectionHashCode(this);\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final JPAConnPoolConf other = (JPAConnPoolConf) obj;\n+        return new EqualsBuilder().\n+                append(maxObjects, other.maxObjects).\n+                append(minIdle, other.minIdle).\n+                append(maxIdle, other.maxIdle).\n+                append(maxWait, other.maxWait).\n+                append(minEvictableIdleTimeMillis, other.minEvictableIdleTimeMillis).\n+                build();\n     }\n \n     @Override\n     public String toString() {\n-        return ToStringBuilder.reflectionToString(this);\n+        return new ToStringBuilder(this).\n+                append(maxObjects).\n+                append(minIdle).\n+                append(maxIdle).\n+                append(maxWait).\n+                append(minEvictableIdleTimeMillis).\n+                build();\n     }\n }"},{"sha":"79bc299501fe2abfba6c60563ac51307180e182e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -142,6 +142,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushCorrelationRuleEntity;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n \n @Component\n public class JPAEntityFactory implements EntityFactory {\n@@ -303,12 +304,15 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n         }\n \n+        if (result instanceof AbstractGeneratedKeyEntity) {\n+            ((AbstractGeneratedKeyEntity) result).setKey(SecureRandomUtils.generateRandomUUID().toString());\n+        }\n+\n         return result;\n     }\n \n     @Override\n     public ConnPoolConf newConnPoolConf() {\n         return new JPAConnPoolConf();\n     }\n-\n }"},{"sha":"3f9ee99878612957231beadf64498a3c0c51b31b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtils.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtils.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -25,19 +25,24 @@\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtils;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n @SuppressWarnings(\"unchecked\")\n public final class JPATaskUtils implements TaskUtils {\n \n     private final TaskType type;\n \n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n     protected JPATaskUtils(final TaskType type) {\n         this.type = type;\n     }\n@@ -84,23 +89,23 @@ public <T extends Task> T newTask() {\n \n         switch (type) {\n             case PROPAGATION:\n-                result = (T) new JPAPropagationTask();\n+                result = (T) entityFactory.newEntity(PropagationTask.class);\n                 break;\n \n             case SCHEDULED:\n-                result = (T) new JPASchedTask();\n+                result = (T) entityFactory.newEntity(SchedTask.class);\n                 break;\n \n             case PULL:\n-                result = (T) new JPAPullTask();\n+                result = (T) entityFactory.newEntity(PullTask.class);\n                 break;\n \n             case PUSH:\n-                result = (T) new JPAPushTask();\n+                result = (T) entityFactory.newEntity(PushTask.class);\n                 break;\n \n             case NOTIFICATION:\n-                result = (T) new JPANotificationTask();\n+                result = (T) entityFactory.newEntity(NotificationTask.class);\n                 break;\n \n             default:"},{"sha":"48a77fbd05a58219da4a84824fc941c64ed8e820","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtilsFactory.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtilsFactory.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.task;\n \n+import java.util.HashMap;\n+import java.util.Map;\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n@@ -34,13 +36,26 @@\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n import org.springframework.stereotype.Component;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n \n @Component\n public class JPATaskUtilsFactory implements TaskUtilsFactory {\n \n+    private final Map<TaskType, TaskUtils> instances = new HashMap<>(5);\n+\n     @Override\n     public TaskUtils getInstance(final TaskType type) {\n-        return new JPATaskUtils(type);\n+        TaskUtils instance;\n+        synchronized (instances) {\n+            instance = instances.get(type);\n+            if (instance == null) {\n+                instance = new JPATaskUtils(type);\n+                ApplicationContextProvider.getBeanFactory().autowireBean(instance);\n+                instances.put(type, instance);\n+            }\n+        }\n+\n+        return instance;\n     }\n \n     @Override"},{"sha":"bf572fa53565ed9c7207c7b3a4694fdc2312b801","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/openjpa/UUIDGenerator.java","status":"removed","additions":0,"deletions":58,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4c5d58a4e43396e75f3830a69f528fbbbcb56ba2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fopenjpa%2FUUIDGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4c5d58a4e43396e75f3830a69f528fbbbcb56ba2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fopenjpa%2FUUIDGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fopenjpa%2FUUIDGenerator.java?ref=4c5d58a4e43396e75f3830a69f528fbbbcb56ba2","patch":"@@ -1,58 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.openjpa;\n-\n-import com.fasterxml.uuid.Generators;\n-import com.fasterxml.uuid.impl.RandomBasedGenerator;\n-import org.apache.openjpa.kernel.Seq;\n-import org.apache.openjpa.kernel.StoreContext;\n-import org.apache.openjpa.meta.ClassMetaData;\n-\n-/**\n- * Fast UUID generator for OpenJPA entities.\n- */\n-public class UUIDGenerator implements Seq {\n-\n-    private static final RandomBasedGenerator GENERATOR = Generators.randomBasedGenerator();\n-\n-    private String last;\n-\n-    @Override\n-    public void setType(final int i) {\n-    }\n-\n-    @Override\n-    public Object next(final StoreContext sc, final ClassMetaData cmd) {\n-        last = GENERATOR.generate().toString();\n-        return last;\n-    }\n-\n-    @Override\n-    public Object current(final StoreContext sc, final ClassMetaData cmd) {\n-        return last;\n-    }\n-\n-    @Override\n-    public void allocate(final int i, final StoreContext sc, final ClassMetaData cmd) {\n-    }\n-\n-    @Override\n-    public void close() {\n-    }\n-}"},{"sha":"0ac2579e23e90f76d5683a1e327e20ec99cf35bf","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -34,8 +34,6 @@ under the License.\n     </persistence-unit-defaults>\n   </persistence-unit-metadata>\n   \n-  <sequence-generator name=\"uuid\" sequence-name=\"org.apache.syncope.core.persistence.jpa.openjpa.UUIDGenerator()\"/>\n-\n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue\">\n     <table>\n       <unique-constraint>"},{"sha":"8c52f2e6127fe8b3e6522c648aaabe7f2b9d00e6","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -34,8 +34,6 @@ under the License.\n     </persistence-unit-defaults>\n   </persistence-unit-metadata>\n \n-  <sequence-generator name=\"uuid\" sequence-name=\"org.apache.syncope.core.persistence.jpa.openjpa.UUIDGenerator()\"/>\n-  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue\">\n     <table>\n       <unique-constraint>"},{"sha":"aaf42b3a501179e8dcd7d71ffdbbfd6357ad7c55","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -34,8 +34,6 @@ under the License.\n     </persistence-unit-defaults>\n   </persistence-unit-metadata>\n \n-  <sequence-generator name=\"uuid\" sequence-name=\"org.apache.syncope.core.persistence.jpa.openjpa.UUIDGenerator()\"/>\n-  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue\">\n     <table>\n       <unique-constraint>"},{"sha":"e8e9a2177d4c4d7846623a606659a770082a8d77","filename":"core/persistence-jpa/src/main/resources/views.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -265,4 +265,4 @@ under the License.\n     FROM SyncopeGroup_ExternalResource st\n   </entry>\n \n-</properties>\n+</properties>\n\\ No newline at end of file"},{"sha":"089b7b46c5903746be1f81e254f682e12ed47550","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -368,7 +368,7 @@ public void searchByUsernameAndKey() {\n         usernameLeafCond.setExpression(\"%ini\");\n \n         AnyCond idRightCond = new AnyCond(AnyCond.Type.LT);\n-        idRightCond.setSchema(\"id\");\n+        idRightCond.setSchema(\"key\");\n         idRightCond.setExpression(\"2\");\n \n         SearchCond searchCondition = SearchCond.getAndCond(\n@@ -389,7 +389,7 @@ public void searchByGroupNameAndKey() {\n         groupNameLeafCond.setExpression(\"root\");\n \n         AnyCond idRightCond = new AnyCond(AnyCond.Type.EQ);\n-        idRightCond.setSchema(\"id\");\n+        idRightCond.setSchema(\"key\");\n         idRightCond.setExpression(\"37d15e4c-cdc1-460b-a591-8505c8133806\");\n \n         SearchCond searchCondition = SearchCond.getAndCond(\n@@ -448,7 +448,7 @@ public void searchByUsernameAndFullnameIgnoreCase() {\n     @Test\n     public void searchByKey() {\n         AnyCond idLeafCond = new AnyCond(AnyCond.Type.EQ);\n-        idLeafCond.setSchema(\"id\");\n+        idLeafCond.setSchema(\"key\");\n         idLeafCond.setExpression(\"74cd8ece-715a-44a4-a736-e17b46c4e7e6\");\n \n         SearchCond searchCondition = SearchCond.getLeafCond(idLeafCond);\n@@ -605,7 +605,7 @@ public void issue202() {\n     @Test\n     public void issue242() {\n         AnyCond cond = new AnyCond(AttributeCond.Type.LIKE);\n-        cond.setSchema(\"id\");\n+        cond.setSchema(\"key\");\n         cond.setExpression(\"test%\");\n \n         SearchCond searchCondition = SearchCond.getLeafCond(cond);"},{"sha":"97eb7371f8803a3d69f2a045f53a089736c19ab5","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RealmTest.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -109,7 +109,6 @@ public void save() {\n         Realm realm = entityFactory.newEntity(Realm.class);\n         realm.setName(\"last\");\n         realm.setParent(realmDAO.findByFullPath(\"/even/two\"));\n-        assertNull(realm.getKey());\n \n         Realm actual = realmDAO.save(realm);\n         assertNotNull(actual.getKey());\n@@ -120,10 +119,8 @@ public void save() {\n         assertEquals(\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\", realm.getPasswordPolicy().getKey());\n \n         realm = actual;\n-        realm.setAccountPolicy(\n-                (AccountPolicy) policyDAO.find(\"06e2ed52-6966-44aa-a177-a0ca7434201f\"));\n-        realm.setPasswordPolicy(\n-                (PasswordPolicy) policyDAO.find(\"986d1236-3ac5-4a19-810c-5ab21d79cba1\"));\n+        realm.setAccountPolicy((AccountPolicy) policyDAO.find(\"06e2ed52-6966-44aa-a177-a0ca7434201f\"));\n+        realm.setPasswordPolicy((PasswordPolicy) policyDAO.find(\"986d1236-3ac5-4a19-810c-5ab21d79cba1\"));\n \n         actual = realmDAO.save(realm);\n         assertEquals(\"06e2ed52-6966-44aa-a177-a0ca7434201f\", actual.getAccountPolicy().getKey());"},{"sha":"cb2484a9d82b32d37c18ebfb00da18b9fa03a6c8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RemediationTest.java","status":"modified","additions":22,"deletions":1,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -60,7 +60,7 @@ public void findAll() {\n     }\n \n     @Test\n-    public void create() {\n+    public void createMissingPayload() {\n         Remediation remediation = entityFactory.newEntity(Remediation.class);\n         remediation.setAnyType(anyTypeDAO.find(\"PRINTER\"));\n         remediation.setOperation(ResourceOperation.CREATE);\n@@ -78,7 +78,17 @@ public void create() {\n             assertEquals(2, violations.size());\n             assertTrue(violations.stream().allMatch(violation -> violation.getPropertyPath().equals(\"payload\")));\n         }\n+    }\n \n+    @Test\n+    public void createWrongPayload() {\n+        Remediation remediation = entityFactory.newEntity(Remediation.class);\n+        remediation.setAnyType(anyTypeDAO.find(\"PRINTER\"));\n+        remediation.setOperation(ResourceOperation.CREATE);\n+        remediation.setError(\"Error\");\n+        remediation.setInstant(new Date());\n+        remediation.setRemoteName(\"remote\");\n+        remediation.setPullTask(taskDAO.find(\"38abbf9e-a1a3-40a1-a15f-7d0ac02f47f1\"));\n         remediation.setPayload(UUID.randomUUID().toString());\n \n         // wrong payload for operation\n@@ -90,7 +100,18 @@ public void create() {\n             assertEquals(1, violations.size());\n             assertTrue(violations.stream().anyMatch(violation -> violation.getPropertyPath().equals(\"payload\")));\n         }\n+    }\n \n+    @Test\n+    public void create() {\n+        Remediation remediation = entityFactory.newEntity(Remediation.class);\n+        remediation.setAnyType(anyTypeDAO.find(\"PRINTER\"));\n+        remediation.setOperation(ResourceOperation.CREATE);\n+        remediation.setError(\"Error\");\n+        remediation.setInstant(new Date());\n+        remediation.setRemoteName(\"remote\");\n+        remediation.setPullTask(taskDAO.find(\"38abbf9e-a1a3-40a1-a15f-7d0ac02f47f1\"));\n+        remediation.setPayload(UUID.randomUUID().toString());\n         remediation.setOperation(ResourceOperation.DELETE);\n \n         remediation = remediationDAO.save(remediation);"},{"sha":"01d379dc66b2c246f958e882360f37a399108158","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":17,"deletions":4,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -152,13 +152,12 @@ public void findByUsername() {\n     }\n \n     @Test\n-    public void save() {\n+    public void saveInvalidPassword() {\n         User user = entityFactory.newEntity(User.class);\n         user.setUsername(\"username\");\n         user.setRealm(realmDAO.findByFullPath(\"/even/two\"));\n         user.setCreator(\"admin\");\n         user.setCreationDate(new Date());\n-\n         user.setPassword(\"pass\", CipherAlgorithm.SHA256);\n \n         try {\n@@ -167,19 +166,33 @@ public void save() {\n         } catch (InvalidEntityException e) {\n             assertNotNull(e);\n         }\n+    }\n \n-        user.setPassword(\"password123\", CipherAlgorithm.SHA256);\n-\n+    @Test\n+    public void saveInvalidUsername() {\n+        User user = entityFactory.newEntity(User.class);\n         user.setUsername(\"username!\");\n+        user.setRealm(realmDAO.findByFullPath(\"/even/two\"));\n+        user.setCreator(\"admin\");\n+        user.setCreationDate(new Date());\n+        user.setPassword(\"password123\", CipherAlgorithm.SHA256);\n \n         try {\n             userDAO.save(user);\n             fail(\"This should not happen\");\n         } catch (InvalidEntityException e) {\n             assertNotNull(e);\n         }\n+    }\n \n+    @Test\n+    public void save() {\n+        User user = entityFactory.newEntity(User.class);\n         user.setUsername(\"username\");\n+        user.setRealm(realmDAO.findByFullPath(\"/even/two\"));\n+        user.setCreator(\"admin\");\n+        user.setCreationDate(new Date());\n+        user.setPassword(\"password123\", CipherAlgorithm.SHA256);\n \n         User actual = userDAO.save(user);\n         assertNotNull(actual);"},{"sha":"f3ac215423e7da738613fb5ff6730275b4321f08","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ReportTest.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -90,12 +90,9 @@ public void save() {\n         reportExec.setStatus(ReportExecStatus.SUCCESS);\n \n         report.add(reportExec);\n+        reportDAO.save(report);\n \n-        reportExec = reportExecDAO.save(reportExec);\n-        assertNotNull(reportExec);\n-        assertNotNull(reportExec.getKey());\n-\n-        reportExecDAO.flush();\n+        reportDAO.flush();\n \n         report = reportDAO.find(\"0062ea9c-924d-4ecf-9961-4492a8cc6d1b\");\n         assertNotNull(report);"},{"sha":"e8d5cb4d2b0430c2609b309066a5ae7d915662f0","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/IntAttrName.java","status":"modified","additions":59,"deletions":3,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrName.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,8 +18,9 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n-import org.apache.commons.lang3.builder.ToStringStyle;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n \n@@ -136,8 +137,63 @@ public void setRelationshipAnyType(final String relationshipAnyType) {\n     }\n \n     @Override\n-    public String toString() {\n-        return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(anyTypeKind).\n+                append(field).\n+                append(schemaType).\n+                append(schemaName).\n+                append(enclosingGroup).\n+                append(relatedUser).\n+                append(relatedAnyObject).\n+                append(membershipOfGroup).\n+                append(privilegesOfApplication).\n+                append(relationshipType).\n+                append(relationshipAnyType).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final IntAttrName other = (IntAttrName) obj;\n+        return new EqualsBuilder().\n+                append(anyTypeKind, other.anyTypeKind).\n+                append(field, other.field).\n+                append(schemaType, other.schemaType).\n+                append(schemaName, other.schemaName).\n+                append(enclosingGroup, other.enclosingGroup).\n+                append(relatedUser, other.relatedUser).\n+                append(relatedAnyObject, other.relatedAnyObject).\n+                append(membershipOfGroup, other.membershipOfGroup).\n+                append(privilegesOfApplication, other.privilegesOfApplication).\n+                append(relationshipType, other.relationshipType).\n+                append(relationshipAnyType, other.relationshipAnyType).\n+                build();\n     }\n \n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this).\n+                append(anyTypeKind).\n+                append(field).\n+                append(schemaType).\n+                append(schemaName).\n+                append(enclosingGroup).\n+                append(relatedUser).\n+                append(relatedAnyObject).\n+                append(membershipOfGroup).\n+                append(privilegesOfApplication).\n+                append(relationshipType).\n+                append(relationshipAnyType).\n+                build();\n+    }\n }"},{"sha":"cb59c82be564c2d4fde2104969ff098ff6216e53","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/WorkflowResult.java","status":"modified","additions":29,"deletions":7,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FWorkflowResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FWorkflowResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FWorkflowResult.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -22,8 +22,7 @@\n import java.util.Set;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n-import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n \n public class WorkflowResult<T> {\n \n@@ -66,17 +65,40 @@ public void setPropByRes(final PropagationByResource propByRes) {\n     }\n \n     @Override\n-    public boolean equals(final Object obj) {\n-        return EqualsBuilder.reflectionEquals(this, obj);\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(result).\n+                append(propByRes).\n+                append(performedTasks).\n+                build();\n     }\n \n     @Override\n-    public int hashCode() {\n-        return HashCodeBuilder.reflectionHashCode(this);\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        @SuppressWarnings(\"unchecked\")\n+        final WorkflowResult<T> other = (WorkflowResult<T>) obj;\n+        return new EqualsBuilder().\n+                append(result, other.result).\n+                append(propByRes, other.propByRes).\n+                append(performedTasks, other.performedTasks).\n+                build();\n     }\n \n     @Override\n     public String toString() {\n-        return ReflectionToStringBuilder.toString(this, ToStringStyle.JSON_STYLE);\n+        return new ToStringBuilder(this).\n+                append(result).\n+                append(propByRes).\n+                append(performedTasks).\n+                build();\n     }\n }"},{"sha":"c4c04a3fbd2e0c0f2c6599acb5cfaadae2dfbd4a","filename":"core/provisioning-java/pom.xml","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fprovisioning-java%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fprovisioning-java%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fpom.xml?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -48,11 +48,6 @@ under the License.\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-jexl3</artifactId>\n     </dependency>\n-\n-    <dependency>\n-      <groupId>com.fasterxml.uuid</groupId>\n-      <artifactId>java-uuid-generator</artifactId>\n-    </dependency>\n     \n     <dependency>\n       <groupId>org.springframework</groupId>"},{"sha":"0a7a2c0bfb368d140cc87939069304ac4bc6a2b3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/IntAttrNameParser.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParser.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -90,11 +90,11 @@ private void setFieldOrSchemaName(\n             final AnyTypeKind anyTypeKind,\n             final IntAttrName result) {\n \n-        if (anyUtilsFactory.getInstance(anyTypeKind).isFieldName(fieldOrSchemaName)) {\n-            result.setField(fieldOrSchemaName);\n-        } else {\n+        if (anyUtilsFactory.getInstance(anyTypeKind).getField(fieldOrSchemaName) == null) {\n             result.setSchemaType(find(fieldOrSchemaName));\n             result.setSchemaName(fieldOrSchemaName);\n+        } else {\n+            result.setField(fieldOrSchemaName);\n         }\n     }\n "},{"sha":"f6ec55fbd5aa1a880dd441b78d669e62af461d39","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import com.fasterxml.uuid.Generators;\n-import com.fasterxml.uuid.impl.RandomBasedGenerator;\n import java.util.Date;\n import java.util.Map;\n import javax.annotation.Resource;\n@@ -38,15 +36,14 @@\n import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.spring.security.DefaultCredentialChecker;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.apache.syncope.core.spring.security.jws.AccessTokenJwsSignatureProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class AccessTokenDataBinderImpl implements AccessTokenDataBinder {\n \n-    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();\n-\n     @Resource(name = \"adminUser\")\n     private String adminUser;\n \n@@ -134,7 +131,7 @@ public Pair<String, Date> create(\n         if (accessToken == null) {\n             // no AccessToken found: create new\n             accessToken = entityFactory.newEntity(AccessToken.class);\n-            accessToken.setKey(UUID_GENERATOR.generate().toString());\n+            accessToken.setKey(SecureRandomUtils.generateRandomUUID().toString());\n \n             accessToken = replace(subject, claims, authorities, accessToken);\n         } else if (replace) {"},{"sha":"6cd5e8eac6c6b455b2be8ad7f3f465bf75f1e060","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import java.net.URI;\n-import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n@@ -44,6 +43,7 @@\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n+import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n import org.apache.syncope.core.provisioning.api.utils.ConnPoolConfUtils;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.api.ConfigurationProperty;\n@@ -57,7 +57,7 @@\n @Component\n public class ConnInstanceDataBinderImpl implements ConnInstanceDataBinder {\n \n-    private static final String[] IGNORE_PROPERTIES = { \"poolConf\", \"location\", \"adminRealm\", \"conf\" };\n+    private static final String[] IGNORE_PROPERTIES = { \"key\", \"poolConf\", \"location\", \"adminRealm\", \"conf\" };\n \n     @Autowired\n     private ConnIdBundleManager connIdBundleManager;\n@@ -246,6 +246,7 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n \n         Pair<URI, ConnectorInfo> info = connIdBundleManager.getConnectorInfo(connInstance);\n         BeanUtils.copyProperties(connInstance, connInstanceTO, IGNORE_PROPERTIES);\n+        connInstanceTO.setKey(connInstance.getKey());\n         connInstanceTO.setAdminRealm(connInstance.getAdminRealm().getFullPath());\n         connInstanceTO.setLocation(info.getLeft().toASCIIString());\n         connInstanceTO.getConf().addAll(connInstance.getConf());"},{"sha":"82f6d42d68e492d3eeb0305ead138ccd956249ea","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AfterHandlingJob.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAfterHandlingJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAfterHandlingJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAfterHandlingJob.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java.job;\n \n-import com.fasterxml.uuid.Generators;\n-import com.fasterxml.uuid.impl.RandomBasedGenerator;\n import java.util.Map;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;\n@@ -28,6 +26,7 @@\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.quartz.JobBuilder;\n import org.quartz.JobDataMap;\n import org.quartz.JobExecutionContext;\n@@ -50,13 +49,11 @@ public class AfterHandlingJob extends AbstractInterruptableJob {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AfterHandlingJob.class);\n \n-    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();\n-\n     public static void schedule(final SchedulerFactoryBean scheduler, final Map<String, Object> jobMap) {\n         @SuppressWarnings(\"unchecked\")\n         AfterHandlingJob jobInstance = (AfterHandlingJob) ApplicationContextProvider.getBeanFactory().\n                 createBean(AfterHandlingJob.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-        String jobName = AfterHandlingJob.class.getName() + UUID_GENERATOR.generate();\n+        String jobName = AfterHandlingJob.class.getName() + SecureRandomUtils.generateRandomUUID();\n \n         jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n "},{"sha":"c7b0beaa3011357efad1a038311250b7ab15e9d7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SchedulingPullActions.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSchedulingPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSchedulingPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSchedulingPullActions.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,14 +18,13 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n-import com.fasterxml.uuid.Generators;\n-import com.fasterxml.uuid.impl.RandomBasedGenerator;\n import java.util.Map;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.quartz.Job;\n import org.quartz.JobBuilder;\n import org.quartz.JobDataMap;\n@@ -44,8 +43,6 @@\n  */\n public abstract class SchedulingPullActions implements PullActions {\n \n-    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();\n-\n     @Autowired\n     protected SchedulerFactoryBean scheduler;\n \n@@ -55,7 +52,7 @@ protected <T extends Job> void schedule(final Class<T> reference, final Map<Stri\n         @SuppressWarnings(\"unchecked\")\n         T jobInstance = (T) ApplicationContextProvider.getBeanFactory().\n                 createBean(reference, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-        String jobName = getClass().getName() + UUID_GENERATOR.generate();\n+        String jobName = getClass().getName() + SecureRandomUtils.generateRandomUUID();\n \n         jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n "},{"sha":"2d8c3b43cf2e39896fe1ad52a73b99375b8fd402","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -53,6 +53,7 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n \n public abstract class AbstractAnyService<TO extends AnyTO, P extends AnyPatch>\n         extends AbstractServiceImpl\n@@ -279,7 +280,7 @@ public Response deassociate(final DeassociationPatch patch) {\n                     }).collect(Collectors.toList());\n         }\n \n-        String boundary = \"deassociate_\" + GENERATOR.generate().toString();\n+        String boundary = \"deassociate_\" + SecureRandomUtils.generateRandomUUID().toString();\n         return Response.ok(BatchPayloadGenerator.generate(\n                 batchResponseItems, SyncopeConstants.DOUBLE_DASH + boundary)).\n                 type(RESTHeaders.multipartMixedWith(boundary)).\n@@ -368,7 +369,7 @@ public Response associate(final AssociationPatch patch) {\n                     }).collect(Collectors.toList());\n         }\n \n-        String boundary = \"associate_\" + GENERATOR.generate().toString();\n+        String boundary = \"associate_\" + SecureRandomUtils.generateRandomUUID().toString();\n         return Response.ok(BatchPayloadGenerator.generate(\n                 batchResponseItems, SyncopeConstants.DOUBLE_DASH + boundary)).\n                 type(RESTHeaders.multipartMixedWith(boundary))."},{"sha":"48d238c4ebee660cd148f4ca68c2740a250f3fcd","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractExecutableService.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.service.ExecutableService;\n import org.apache.syncope.core.logic.AbstractExecutableLogic;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n \n public abstract class AbstractExecutableService extends AbstractServiceImpl implements ExecutableService {\n \n@@ -68,7 +69,7 @@ public Response deleteExecutions(final ExecDeleteQuery query) {\n                 query.getEndedBefore(),\n                 query.getEndedAfter());\n \n-        String boundary = \"deleteExecutions_\" + GENERATOR.generate().toString();\n+        String boundary = \"deleteExecutions_\" + SecureRandomUtils.generateRandomUUID().toString();\n         return Response.ok(BatchPayloadGenerator.generate(\n                 batchResponseItems, SyncopeConstants.DOUBLE_DASH + boundary)).\n                 type(RESTHeaders.multipartMixedWith(boundary))."},{"sha":"2e9a0c0fe8ed8d5d53d952d85b2435a287a59a90","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n-import com.fasterxml.uuid.Generators;\n-import com.fasterxml.uuid.impl.RandomBasedGenerator;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n@@ -58,8 +56,6 @@ abstract class AbstractServiceImpl implements JAXRSService {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractServiceImpl.class);\n \n-    protected static final RandomBasedGenerator GENERATOR = Generators.randomBasedGenerator();\n-\n     protected static final String OPTIONS_ALLOW = \"GET,POST,OPTIONS,HEAD\";\n \n     @Context"},{"sha":"94ee57f77d48e7acf85740fe17ce37ff12a54350","filename":"core/spring/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fspring%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fspring%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fpom.xml?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -77,6 +77,11 @@ under the License.\n       <artifactId>groovy</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>com.fasterxml.uuid</groupId>\n+      <artifactId>java-uuid-generator</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.apache.syncope.core</groupId>\n       <artifactId>syncope-core-provisioning-api</artifactId>"},{"sha":"5d9eeac52aeba64bb2d29bf448e17a4c426126bc","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SecureRandomUtils.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecureRandomUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecureRandomUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecureRandomUtils.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n+import com.fasterxml.uuid.Generators;\n+import com.fasterxml.uuid.impl.RandomBasedGenerator;\n import java.security.SecureRandom;\n+import java.util.UUID;\n import org.apache.commons.text.RandomStringGenerator;\n \n public final class SecureRandomUtils {\n@@ -41,6 +44,8 @@ public final class SecureRandomUtils {\n             withinRange('0', '9').\n             build();\n \n+    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator(RANDOM);\n+\n     public static String generateRandomPassword(final int tokenLength) {\n         return FOR_PASSWORD.generate(tokenLength);\n     }\n@@ -70,6 +75,10 @@ public static String generateRandomSpecialCharacter(final char[] characters) {\n                 }).build().generate(1);\n     }\n \n+    public static UUID generateRandomUUID() {\n+        return UUID_GENERATOR.generate();\n+    }\n+\n     private SecureRandomUtils() {\n         // private constructor for static utility class\n     }"},{"sha":"de86f94dea634db40f3cf79fb4815be8de58ef2e","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeAuthenticationDetails.java","status":"modified","additions":22,"deletions":8,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeAuthenticationDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeAuthenticationDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeAuthenticationDetails.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -23,8 +23,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n-import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n@@ -49,18 +48,33 @@ public String getDomain() {\n     }\n \n     @Override\n-    public boolean equals(final Object obj) {\n-        return EqualsBuilder.reflectionEquals(this, obj);\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(domain).\n+                build();\n     }\n \n     @Override\n-    public int hashCode() {\n-        return HashCodeBuilder.reflectionHashCode(this);\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final SyncopeAuthenticationDetails other = (SyncopeAuthenticationDetails) obj;\n+        return new EqualsBuilder().\n+                append(domain, other.domain).\n+                build();\n     }\n \n     @Override\n     public String toString() {\n-        return ReflectionToStringBuilder.toString(this, ToStringStyle.JSON_STYLE);\n+        return new ToStringBuilder(this).\n+                append(domain).\n+                build();\n     }\n-\n }"},{"sha":"9e2c29a0c1b066b3b3f490f58eca3b2a7bdd0168","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeGrantedAuthority.java","status":"modified","additions":25,"deletions":8,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeGrantedAuthority.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeGrantedAuthority.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeGrantedAuthority.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -27,8 +27,7 @@\n import java.util.TreeSet;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n-import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.springframework.security.core.GrantedAuthority;\n \n@@ -70,18 +69,36 @@ public String getAuthority() {\n     }\n \n     @Override\n-    public boolean equals(final Object obj) {\n-        return EqualsBuilder.reflectionEquals(this, obj);\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(entitlement).\n+                append(realms).\n+                build();\n     }\n \n     @Override\n-    public int hashCode() {\n-        return HashCodeBuilder.reflectionHashCode(this);\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final SyncopeGrantedAuthority other = (SyncopeGrantedAuthority) obj;\n+        return new EqualsBuilder().\n+                append(entitlement, other.entitlement).\n+                append(realms, other.realms).\n+                build();\n     }\n \n     @Override\n     public String toString() {\n-        return ReflectionToStringBuilder.toString(this, ToStringStyle.JSON_STYLE);\n+        return new ToStringBuilder(this).\n+                append(entitlement).\n+                append(realms).\n+                build();\n     }\n-\n }"},{"sha":"89f7ac2a7e77aa5a3304bed30b1c5f956db18120","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -63,7 +63,6 @@\n import org.elasticsearch.index.query.QueryBuilders;\n import org.elasticsearch.search.sort.SortOrder;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.util.ReflectionUtils;\n \n /**\n  * Search engine implementation for users, groups and any objects, based on Elasticsearch.\n@@ -143,15 +142,15 @@ private void addSort(\n             final AnyTypeKind kind,\n             final List<OrderByClause> orderBy) {\n \n-        AnyUtils attrUtils = anyUtilsFactory.getInstance(kind);\n+        AnyUtils anyUtils = anyUtilsFactory.getInstance(kind);\n \n         orderBy.forEach(clause -> {\n             String sortName = null;\n \n             // Manage difference among external key attribute and internal JPA @Id\n             String fieldName = \"key\".equals(clause.getField()) ? \"id\" : clause.getField();\n \n-            Field anyField = ReflectionUtils.findField(attrUtils.anyClass(), fieldName);\n+            Field anyField = anyUtils.getField(fieldName);\n             if (anyField == null) {\n                 PlainSchema schema = schemaDAO.find(fieldName);\n                 if (schema != null) {"},{"sha":"9ff621cc8c1e518e71627afcb4819e98ce286ce1","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -215,6 +215,8 @@ public static void throwException(final FlowableException e, final String defaul\n             throw (ParsingValidationException) e.getCause();\n         } else if (e.getCause() instanceof InvalidEntityException) {\n             throw (InvalidEntityException) e.getCause();\n+        } else if (e.getCause().getClass().getName().contains(\"persistence\")) {\n+            throw (RuntimeException) e.getCause();\n         }\n \n         throw new WorkflowException(defaultMessage, e);"},{"sha":"5141c6f3c0c2d90070579562d03faf7eea4e9595","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/OIDCClientLogic.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCClientLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCClientLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCClientLogic.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.core.logic;\n \n import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n-import com.fasterxml.uuid.Generators;\n-import com.fasterxml.uuid.impl.RandomBasedGenerator;\n import java.io.IOException;\n import java.io.InputStream;\n import java.lang.reflect.Method;\n@@ -67,21 +65,20 @@\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.AuthDataAccessor;\n import org.apache.syncope.core.spring.security.Encryptor;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n \n @Component\n public class OIDCClientLogic extends AbstractTransactionalLogic<AbstractBaseBean> {\n \n-    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n-\n-    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();\n-\n     private static final String JWT_CLAIM_OP_ENTITYID = \"OP_ENTITYID\";\n \n     private static final String JWT_CLAIM_USERID = \"USERID\";\n \n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n     @Autowired\n     private AuthDataAccessor authDataAccessor;\n \n@@ -124,7 +121,7 @@ public OIDCLoginRequestTO createLoginRequest(final String redirectURI, final Str\n         requestTO.setScope(\"openid email profile\");\n         requestTO.setResponseType(OAuthConstants.CODE_RESPONSE_TYPE);\n         requestTO.setRedirectURI(redirectURI);\n-        requestTO.setState(UUID_GENERATOR.generate().toString());\n+        requestTO.setState(SecureRandomUtils.generateRandomUUID().toString());\n         return requestTO;\n     }\n "},{"sha":"81608bbc68f7a4e54446b041184ca0b791f2411e","filename":"ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAOIDCEntityFactory.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCEntityFactory.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -23,6 +23,7 @@\n import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n import org.apache.syncope.core.persistence.api.entity.OIDCProviderItem;\n import org.apache.syncope.core.persistence.api.entity.OIDCUserTemplate;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -43,7 +44,10 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n         }\n \n+        if (result instanceof AbstractGeneratedKeyEntity) {\n+            ((AbstractGeneratedKeyEntity) result).setKey(SecureRandomUtils.generateRandomUUID().toString());\n+        }\n+\n         return result;\n     }\n-\n }"},{"sha":"b660b27973549ef3cdb953261abaa60053bc4991","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.logic;\n \n-import com.fasterxml.uuid.Generators;\n-import com.fasterxml.uuid.impl.RandomBasedGenerator;\n import java.io.OutputStream;\n import java.io.OutputStreamWriter;\n import java.lang.reflect.Method;\n@@ -104,6 +102,7 @@\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.AuthDataAccessor;\n import org.apache.syncope.core.spring.security.Encryptor;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.opensaml.core.xml.schema.XSAny;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.util.ResourceUtils;\n@@ -125,8 +124,6 @@ public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {\n \n     private static final String JWT_CLAIM_SESSIONINDEX = \"SESSIONINDEX\";\n \n-    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();\n-\n     private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n \n     @Autowired\n@@ -310,7 +307,7 @@ public SAML2RequestTO createLoginRequest(final String spEntityID, final String i\n         }\n \n         AuthnRequest authnRequest = new AuthnRequestBuilder().buildObject();\n-        authnRequest.setID(\"_\" + UUID_GENERATOR.generate().toString());\n+        authnRequest.setID(\"_\" + SecureRandomUtils.generateRandomUUID().toString());\n         authnRequest.setForceAuthn(false);\n         authnRequest.setIsPassive(false);\n         authnRequest.setVersion(SAMLVersion.VERSION_20);\n@@ -329,7 +326,8 @@ public SAML2RequestTO createLoginRequest(final String spEntityID, final String i\n             Map<String, Object> claims = new HashMap<>();\n             claims.put(JWT_CLAIM_IDP_DEFLATE, idp.isUseDeflateEncoding());\n             Pair<String, Date> relayState = accessTokenDataBinder.generateJWT(\n-                    UUID_GENERATOR.generate().toString(), authnRequest.getID(), JWT_RELAY_STATE_DURATION, claims);\n+                    SecureRandomUtils.generateRandomUUID().toString(),\n+                    authnRequest.getID(), JWT_RELAY_STATE_DURATION, claims);\n \n             // 4. sign and encode AuthnRequest\n             switch (idp.getBindingType()) {\n@@ -582,7 +580,7 @@ public SAML2RequestTO createLogoutRequest(final String accessToken, final String\n \n         // 3. create LogoutRequest\n         LogoutRequest logoutRequest = new LogoutRequestBuilder().buildObject();\n-        logoutRequest.setID(\"_\" + UUID_GENERATOR.generate().toString());\n+        logoutRequest.setID(\"_\" + SecureRandomUtils.generateRandomUUID().toString());\n         logoutRequest.setDestination(idp.getSLOLocation(idp.getBindingType()).getLocation());\n \n         DateTime now = new DateTime();\n@@ -611,7 +609,8 @@ public SAML2RequestTO createLogoutRequest(final String accessToken, final String\n             claims.put(JWT_CLAIM_IDP_DEFLATE,\n                     idp.getBindingType() == SAML2BindingType.REDIRECT ? true : idp.isUseDeflateEncoding());\n             Pair<String, Date> relayState = accessTokenDataBinder.generateJWT(\n-                    UUID_GENERATOR.generate().toString(), logoutRequest.getID(), JWT_RELAY_STATE_DURATION, claims);\n+                    SecureRandomUtils.generateRandomUUID().toString(),\n+                    logoutRequest.getID(), JWT_RELAY_STATE_DURATION, claims);\n             requestTO.setRelayState(relayState.getLeft());\n \n             // 4. sign and encode AuthnRequest"},{"sha":"bd17ac48a29ac9946c79df82827221d627b660c7","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2EntityFactory.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2EntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2EntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2EntityFactory.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -23,6 +23,7 @@\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n import org.apache.syncope.core.persistence.api.entity.SAML2UserTemplate;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -43,6 +44,10 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n         }\n \n+        if (result instanceof AbstractGeneratedKeyEntity) {\n+            ((AbstractGeneratedKeyEntity) result).setKey(SecureRandomUtils.generateRandomUUID().toString());\n+        }\n+\n         return result;\n     }\n }"},{"sha":"037bc59e55fef3cf730fe506ec68aa6e1cf90434","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestAccountRule.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRule.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -47,5 +47,4 @@ public void enforce(final User user) {\n             throw new AccountPolicyException(\"Username not containing \" + this.conf.getMustContainSubstring());\n         }\n     }\n-\n }"},{"sha":"aeb8bf4b56cb8f66d3c3418e70a50b7d5d1aac7f","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPasswordRule.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -43,15 +43,13 @@ public void setConf(final PasswordRuleConf conf) {\n             throw new IllegalArgumentException(\n                     PasswordRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n         }\n-\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n     public void enforce(final User user) {\n-        if (!user.getClearPassword().endsWith(this.conf.getMustEndWith())) {\n+        if (user.getClearPassword() != null && !user.getClearPassword().endsWith(this.conf.getMustEndWith())) {\n             throw new PasswordPolicyException(\"Password not ending with \" + this.conf.getMustEndWith());\n         }\n     }\n-\n }"},{"sha":"6358b087f5be1d51f5c0878f107ef0d9aad6f35c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -315,7 +315,7 @@ public void create() {\n         assertNotNull(newUserTO.getCreator());\n         assertNotNull(newUserTO.getLastChangeDate());\n         assertNotNull(newUserTO.getLastModifier());\n-        assertEquals(newUserTO.getCreationDate(), newUserTO.getLastChangeDate());\n+        assertTrue(newUserTO.getLastChangeDate().getTime() - newUserTO.getCreationDate().getTime() < 3000);\n \n         assertFalse(newUserTO.getPlainAttrs().contains(attrWithInvalidSchemaTO));\n "}]}