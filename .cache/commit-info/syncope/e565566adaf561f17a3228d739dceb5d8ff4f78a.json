{"sha":"e565566adaf561f17a3228d739dceb5d8ff4f78a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU1NjU1NjZhZGFmNTYxZjE3YTMyMjhkNzM5ZGNlYjVkOGZmNGY3OGE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-04-15T13:07:17Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-04-15T13:07:17Z"},"message":"Merge from 1_1_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1468026 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d05eaa7647ba28cf438e7bec14e61a76b547ce91","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d05eaa7647ba28cf438e7bec14e61a76b547ce91"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e565566adaf561f17a3228d739dceb5d8ff4f78a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e565566adaf561f17a3228d739dceb5d8ff4f78a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e565566adaf561f17a3228d739dceb5d8ff4f78a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e565566adaf561f17a3228d739dceb5d8ff4f78a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"132365ba6bac7c91df5100952a029325b19e78d8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/132365ba6bac7c91df5100952a029325b19e78d8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/132365ba6bac7c91df5100952a029325b19e78d8"},{"sha":"dd58b3b89912e46c362a0822802fadccc6ac5045","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dd58b3b89912e46c362a0822802fadccc6ac5045","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dd58b3b89912e46c362a0822802fadccc6ac5045"}],"stats":{"total":131,"additions":68,"deletions":63},"files":[{"sha":"02b8c2391e1d82668ac858a17f4e598582408beb","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/AbstractPropagationTaskExecutor.java","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e565566adaf561f17a3228d739dceb5d8ff4f78a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e565566adaf561f17a3228d739dceb5d8ff4f78a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java?ref=e565566adaf561f17a3228d739dceb5d8ff4f78a","patch":"@@ -235,17 +235,19 @@ protected void delete(final PropagationTask task, final ConnectorObject beforeOb\n             LOG.debug(\"{} not found on external resource: ignoring delete\", task.getAccountId());\n         } else {\n             /*\n-             * We must choose here whether to a. actually delete the provided user from the external resource b. just\n-             * update the provided user data onto the external resource\n+             * We must choose here whether to\n+             * a. actually delete the provided user / role from the external resource\n+             * b. just update the provided user / role data onto the external resource\n              *\n-             * (a) happens when either there is no user associated with the PropagationTask (this takes place when the\n-             * task is generated via UserController.delete()) or the provided updated user hasn't the current resource\n-             * assigned (when the task is generated via UserController.update()).\n+             * (a) happens when either there is no user / role associated with the PropagationTask (this takes place\n+             * when the task is generated via UserController.delete() / RoleController.delete()) or the provided updated\n+             * user / role hasn't the current resource assigned (when the task is generated via\n+             * UserController.update() / RoleController.update()).\n              *\n-             * (b) happens when the provided updated user does have the current resource assigned (when the task is\n-             * generated via UserController.update()): this basically means that before such update, this user used to\n-             * have the current resource assigned by more than one mean (for example, two different memberships with the\n-             * same resource).\n+             * (b) happens when the provided updated user / role does have the current resource assigned (when the task\n+             * is generated via UserController.update() / RoleController.updae()): this basically means that before such\n+             * update, this user / role used to have the current resource assigned by more than one mean (for example,\n+             * two different memberships with the same resource).\n              */\n             AbstractAttributable subject = getSubject(task);\n             if (subject == null || !subject.getResourceNames().contains(task.getResource().getName())) {"},{"sha":"1491de176a1e58545a9273caf10ddf7f21772d98","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PropagationManager.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e565566adaf561f17a3228d739dceb5d8ff4f78a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e565566adaf561f17a3228d739dceb5d8ff4f78a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java?ref=e565566adaf561f17a3228d739dceb5d8ff4f78a","patch":"@@ -523,6 +523,7 @@ protected <T extends AbstractAttributable> List<PropagationTask> createTasks(fin\n \n         if (!propByRes.get(ResourceOperation.CREATE).isEmpty()\n                 && vAttrsToBeRemoved != null && vAttrsToBeUpdated != null) {\n+\n             connObjectUtil.retrieveVirAttrValues(subject, attrUtil);\n \n             // update vAttrsToBeUpdated as well"},{"sha":"28fc79ad359004509227092ac754c021ce8c280f","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":56,"deletions":54,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e565566adaf561f17a3228d739dceb5d8ff4f78a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e565566adaf561f17a3228d739dceb5d8ff4f78a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=e565566adaf561f17a3228d739dceb5d8ff4f78a","patch":"@@ -104,105 +104,105 @@ public class SyncopeSyncResultHandler implements SyncResultsHandler {\n      * Policy DAO.\n      */\n     @Autowired\n-    private PolicyDAO policyDAO;\n+    protected PolicyDAO policyDAO;\n \n     /**\n      * Entitlement DAO.\n      */\n     @Autowired\n-    private EntitlementDAO entitlementDAO;\n+    protected EntitlementDAO entitlementDAO;\n \n     /**\n      * Schema DAO.\n      */\n     @Autowired\n-    private SchemaDAO schemaDAO;\n+    protected SchemaDAO schemaDAO;\n \n     /**\n      * User DAO.\n      */\n     @Autowired\n-    private UserDAO userDAO;\n+    protected UserDAO userDAO;\n \n     /**\n      * Role DAO.\n      */\n     @Autowired\n-    private RoleDAO roleDAO;\n+    protected RoleDAO roleDAO;\n \n     /**\n      * Search DAO.\n      */\n     @Autowired\n-    private AttributableSearchDAO searchDAO;\n+    protected AttributableSearchDAO searchDAO;\n \n     /**\n      * ConnectorObject util.\n      */\n     @Autowired\n-    private ConnObjectUtil connObjectUtil;\n+    protected ConnObjectUtil connObjectUtil;\n \n     /**\n      * User workflow adapter.\n      */\n     @Autowired\n-    private UserWorkflowAdapter uwfAdapter;\n+    protected UserWorkflowAdapter uwfAdapter;\n \n     /**\n      * Role workflow adapter.\n      */\n     @Autowired\n-    private RoleWorkflowAdapter rwfAdapter;\n+    protected RoleWorkflowAdapter rwfAdapter;\n \n     /**\n      * Propagation Manager.\n      */\n     @Autowired\n-    private PropagationManager propagationManager;\n+    protected PropagationManager propagationManager;\n \n     /**\n      * PropagationTask executor.\n      */\n     @Autowired\n-    private PropagationTaskExecutor taskExecutor;\n+    protected PropagationTaskExecutor taskExecutor;\n \n     /**\n      * User data binder.\n      */\n     @Autowired\n-    private UserDataBinder userDataBinder;\n+    protected UserDataBinder userDataBinder;\n \n     /**\n      * Role data binder.\n      */\n     @Autowired\n-    private RoleDataBinder roleDataBinder;\n+    protected RoleDataBinder roleDataBinder;\n \n     /**\n      * Notification Manager.\n      */\n     @Autowired\n-    private NotificationManager notificationManager;\n+    protected NotificationManager notificationManager;\n \n     /**\n      * Syncing connector.\n      */\n-    private Connector connector;\n+    protected Connector connector;\n \n     /**\n      * SyncJob actions.\n      */\n-    private SyncActions actions;\n+    protected SyncActions actions;\n \n-    private Collection<SyncResult> results;\n+    protected Collection<SyncResult> results;\n \n-    private SyncTask syncTask;\n+    protected SyncTask syncTask;\n \n-    private ConflictResolutionAction resAct;\n+    protected ConflictResolutionAction resAct;\n \n-    private boolean dryRun;\n+    protected boolean dryRun;\n \n-    private Map<Long, String> roleOwnerMap = new HashMap<Long, String>();\n+    protected Map<Long, String> roleOwnerMap = new HashMap<Long, String>();\n \n     public Connector getConnector() {\n         return connector;\n@@ -259,15 +259,15 @@ public Map<Long, String> getRoleOwnerMap() {\n     @Override\n     public boolean handle(final SyncDelta delta) {\n         try {\n-            results.addAll(doHandle(delta));\n+            doHandle(delta);\n             return true;\n         } catch (JobExecutionException e) {\n             LOG.error(\"Synchronization failed\", e);\n             return false;\n         }\n     }\n \n-    private List<Long> findByAccountIdItem(final String uid, final AttributableUtil attrUtil) {\n+    protected List<Long> findByAccountIdItem(final String uid, final AttributableUtil attrUtil) {\n         final List<Long> result = new ArrayList<Long>();\n \n         final AbstractMappingItem accountIdItem = attrUtil.getAccountIdItem(syncTask.getResource());\n@@ -342,12 +342,25 @@ private List<Long> findByAccountIdItem(final String uid, final AttributableUtil\n         return result;\n     }\n \n-    private List<Long> findByCorrelationRule(\n+    protected List<Long> search(final NodeCond searchCond, final AttributableUtil attrUtil) {\n+        final List<Long> result = new ArrayList<Long>();\n+\n+        final List<AbstractAttributable> subjects = searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCond, attrUtil);\n+        for (AbstractAttributable subject : subjects) {\n+            result.add(subject.getId());\n+        }\n+\n+        return result;\n+    }\n+\n+    protected List<Long> findByCorrelationRule(\n             final ConnectorObject connObj, final SyncCorrelationRule rule, final AttributableUtil attrUtil) {\n+\n         return search(rule.getSearchCond(connObj), attrUtil);\n     }\n \n-    private List<Long> findByAttributableSearch(\n+    protected List<Long> findByAttributableSearch(\n             final ConnectorObject connObj, final List<String> altSearchSchemas, final AttributableUtil attrUtil) {\n \n         // search for external attribute's name/value of each specified name\n@@ -408,18 +421,6 @@ private List<Long> findByAttributableSearch(\n         return search(searchCond, attrUtil);\n     }\n \n-    private List<Long> search(final NodeCond searchCond, final AttributableUtil attrUtil) {\n-        final List<Long> result = new ArrayList<Long>();\n-\n-        final List<AbstractAttributable> subjects = searchDAO.search(\n-                EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCond, attrUtil);\n-        for (AbstractAttributable subject : subjects) {\n-            result.add(subject.getId());\n-        }\n-\n-        return result;\n-    }\n-\n     /**\n      * Find users / roles based on mapped uid value (or previous uid value, if updated).\n      *\n@@ -543,6 +544,7 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n                     subjectTO = userDataBinder.getUserTO(created.getResult().getKey());\n \n                     result.setId(created.getResult().getKey());\n+                    result.setName(((UserTO) subjectTO).getUsername());\n                 }\n                 if (AttributableType.ROLE == attrUtil.getType()) {\n                     WorkflowResult<Long> created = rwfAdapter.create((RoleTO) subjectTO);\n@@ -561,12 +563,6 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n                     subjectTO = roleDataBinder.getRoleTO(created.getResult());\n \n                     result.setId(created.getResult());\n-                }\n-\n-                if (subjectTO instanceof UserTO) {\n-                    result.setName(((UserTO) subjectTO).getUsername());\n-                }\n-                if (subjectTO instanceof RoleTO) {\n                     result.setName(((RoleTO) subjectTO).getName());\n                 }\n                 result.setStatus(SyncResult.Status.SUCCESS);\n@@ -583,7 +579,7 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n         return Collections.singletonList(result);\n     }\n \n-    protected void updateUser(final Long id, SyncDelta delta, final boolean dryRun, final SyncResult result)\n+    protected UserTO updateUser(final Long id, SyncDelta delta, final boolean dryRun, final SyncResult result)\n             throws Exception {\n \n         UserTO userTO = userDataBinder.getUserTO(id);\n@@ -593,7 +589,7 @@ protected void updateUser(final Long id, SyncDelta delta, final boolean dryRun,\n         delta = actions.beforeUpdate(this, delta, userTO, userMod);\n \n         if (dryRun) {\n-            return;\n+            return userTO;\n         }\n \n         WorkflowResult<Map.Entry<Long, Boolean>> updated;\n@@ -645,9 +641,11 @@ protected void updateUser(final Long id, SyncDelta delta, final boolean dryRun,\n         userTO = userDataBinder.getUserTO(updated.getResult().getKey());\n \n         actions.after(this, delta, userTO, result);\n+\n+        return userTO;\n     }\n \n-    protected void updateRole(final Long id, SyncDelta delta, final boolean dryRun, final SyncResult result)\n+    protected RoleTO updateRole(final Long id, SyncDelta delta, final boolean dryRun, final SyncResult result)\n             throws Exception {\n \n         RoleTO roleTO = roleDataBinder.getRoleTO(id);\n@@ -657,7 +655,7 @@ protected void updateRole(final Long id, SyncDelta delta, final boolean dryRun,\n         delta = actions.beforeUpdate(this, delta, roleTO, roleMod);\n \n         if (dryRun) {\n-            return;\n+            return roleTO;\n         }\n \n         WorkflowResult<Long> updated = rwfAdapter.update(roleMod);\n@@ -681,6 +679,8 @@ protected void updateRole(final Long id, SyncDelta delta, final boolean dryRun,\n         roleTO = roleDataBinder.getRoleTO(updated.getResult());\n \n         actions.after(this, delta, roleTO, result);\n+\n+        return roleTO;\n     }\n \n     protected List<SyncResult> update(SyncDelta delta, final List<Long> subjects, final AttributableUtil attrUtil,\n@@ -707,11 +707,13 @@ protected List<SyncResult> update(SyncDelta delta, final List<Long> subjects, fi\n \n             try {\n                 if (AttributableType.USER == attrUtil.getType()) {\n-                    updateUser(id, delta, dryRun, result);\n+                    UserTO updated = updateUser(id, delta, dryRun, result);\n+                    result.setName(updated.getUsername());\n                 }\n \n                 if (AttributableType.ROLE == attrUtil.getType()) {\n-                    updateRole(id, delta, dryRun, result);\n+                    RoleTO updated = updateRole(id, delta, dryRun, result);\n+                    result.setName(updated.getName());\n                 }\n             } catch (PropagationException e) {\n                 result.setStatus(SyncResult.Status.FAILURE);\n@@ -809,12 +811,14 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n      * Look into SyncDelta and take necessary actions (create / update / delete) on user(s).\n      *\n      * @param delta returned by the underlying connector\n-     * @return list of synchronization results\n      * @throws JobExecutionException in case of synchronization failure.\n      */\n-    protected final List<SyncResult> doHandle(final SyncDelta delta)\n+    protected final void doHandle(final SyncDelta delta)\n             throws JobExecutionException {\n-        final List<SyncResult> results = new ArrayList<SyncResult>();\n+\n+        if (results == null) {\n+            results = new ArrayList<SyncResult>();\n+        }\n \n         LOG.debug(\"Process {} for {} as {}\",\n                 delta.getDeltaType(), delta.getUid().getUidValue(), delta.getObject().getObjectClass());\n@@ -884,7 +888,5 @@ protected final List<SyncResult> doHandle(final SyncDelta delta)\n                 }\n             }\n         }\n-\n-        return results;\n     }\n }"}]}