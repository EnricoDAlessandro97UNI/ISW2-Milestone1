{"sha":"9db5e6b44325aff5f9179f2f6910ea2a718f7744","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjlkYjVlNmI0NDMyNWFmZjVmOTE3OWYyZjY5MTBlYTJhNzE4Zjc3NDQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-10-15T08:33:01Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-10-15T08:33:01Z"},"message":"[SYNCOPE-420] Merge from 1_1_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1532242 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ba6bc6eee9a18853fe78e77b90e18f3d2bb039fb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ba6bc6eee9a18853fe78e77b90e18f3d2bb039fb"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9db5e6b44325aff5f9179f2f6910ea2a718f7744","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9db5e6b44325aff5f9179f2f6910ea2a718f7744","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9db5e6b44325aff5f9179f2f6910ea2a718f7744","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9db5e6b44325aff5f9179f2f6910ea2a718f7744/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d41dafd0acbf4a13499d4cd5835c4a8ebd4911f0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d41dafd0acbf4a13499d4cd5835c4a8ebd4911f0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d41dafd0acbf4a13499d4cd5835c4a8ebd4911f0"},{"sha":"f901441a20bb664a320fe476da73a3a4069db2b1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f901441a20bb664a320fe476da73a3a4069db2b1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f901441a20bb664a320fe476da73a3a4069db2b1"}],"stats":{"total":564,"additions":392,"deletions":172},"files":[{"sha":"d083082a68c3a3e89713d79a74bd2585c8534625","filename":"core/pom.xml","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=9db5e6b44325aff5f9179f2f6910ea2a718f7744","patch":"@@ -409,8 +409,13 @@ under the License.\n             <configuration>\n               <target>\n                 <unzip src=\"${project.build.directory}/${project.build.finalName}.war\" dest=\"${cargo.run.dir}\" />\n-                <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/sync/TestSyncActions.class\" todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/sync\" />\n-                <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/sync/TestSyncRule.class\" todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/sync\" />\n+                <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/sync/TestSyncActions.class\" \n+                      todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/sync\" />\n+                <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/sync/TestSyncRule.class\" \n+                      todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/sync\" />\n+                <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/rest/data/DefaultAttributableTransformer.class\" \n+                      todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/rest/data\" \n+                      overwrite=\"true\"/>\n                 <copy file=\"${project.build.directory}/test-classes/db.jsp\" todir=\"${cargo.run.dir}\" />\n                 <copy todir=\"${cargo.run.dir}/WEB-INF/classes\" includeEmptyDirs=\"false\">\n                   <fileset dir=\"${project.build.directory}/test-classes\">"},{"sha":"cfe107f1344b05e584bb8f2a91cbe7091c244074","filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationReporter.java","status":"renamed","additions":22,"deletions":5,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationReporter.java?ref=9db5e6b44325aff5f9179f2f6910ea2a718f7744","patch":"@@ -18,24 +18,41 @@\n  */\n package org.apache.syncope.core.propagation;\n \n+import java.util.List;\n+import org.apache.syncope.common.to.PropagationStatusTO;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n \n /**\n- * Handle propagation executions.\n+ * Report propagation status after executions.\n  */\n-public interface PropagationHandler {\n+public interface PropagationReporter {\n \n     /**\n-     *\n-     * Handle propagation executions.\n+     * Report propagation status after executions in case of success or non-blocking failure\n+     * (e.g. on secondary resources).\n      *\n      * @param resourceName resource name.\n      * @param execStatus propagation execution status.\n      * @param failureReason propagation execution failure message.\n      * @param beforeObj retrieved connector object before operation execution.\n      * @param afterObj retrieved connector object after operation execution.\n      */\n-    void handle(String resourceName, PropagationTaskExecStatus execStatus,\n+    void onSuccessOrSecondaryResourceFailures(String resourceName, PropagationTaskExecStatus execStatus,\n             String failureReason, ConnectorObject beforeObj, ConnectorObject afterObj);\n+\n+    /**\n+     * Report propagation status after executions in case blocking failure (e.g. on primary resources).\n+     * \n+     * @param tasks propagation tasks performed before failure\n+     */\n+    void onPrimaryResourceFailure(List<PropagationTask> tasks);\n+\n+    /**\n+     * Returns the list of propagation statuses.\n+     *\n+     * @return the list of propagation statuses\n+     */\n+    List<PropagationStatusTO> getStatuses();\n }","previous_filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationHandler.java"},{"sha":"adbe4029b74e252bf5fe7a36cf6393f87a048d81","filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationTaskExecutor.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationTaskExecutor.java?ref=9db5e6b44325aff5f9179f2f6910ea2a718f7744","patch":"@@ -42,10 +42,10 @@ public interface PropagationTaskExecutor {\n      * Execute the given PropagationTask, invoke the given handler and returns the generated TaskExec.\n      *\n      * @param task to be executed\n-     * @param handler to be invoked\n+     * @param reporter to report propagation execution status\n      * @return the generated TaskExec\n      */\n-    TaskExec execute(PropagationTask task, PropagationHandler handler);\n+    TaskExec execute(PropagationTask task, PropagationReporter reporter);\n \n     /**\n      * Execute a collection of PropagationTask objects.\n@@ -60,7 +60,7 @@ public interface PropagationTaskExecutor {\n      * The process is interrupted as soon as the result of the communication with a primary resource is in error.\n      *\n      * @param tasks to be execute, in given order\n-     * @param handler propagation handler\n+     * @param reporter to report propagation execution status\n      */\n-    void execute(Collection<PropagationTask> tasks, PropagationHandler handler);\n+    void execute(Collection<PropagationTask> tasks, PropagationReporter reporter);\n }"},{"sha":"0031a8884b8dc71ded6e93fded7d6b8be307cbd8","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/AbstractPropagationTaskExecutor.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java?ref=9db5e6b44325aff5f9179f2f6910ea2a718f7744","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.core.propagation.ConnectorFactory;\n import org.apache.syncope.core.propagation.DefaultPropagationActions;\n import org.apache.syncope.core.propagation.PropagationActions;\n-import org.apache.syncope.core.propagation.PropagationHandler;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.propagation.Connector;\n import org.apache.syncope.core.propagation.TimeoutException;\n@@ -266,7 +266,7 @@ protected void delete(final PropagationTask task, final ConnectorObject beforeOb\n     }\n \n     @Override\n-    public TaskExec execute(final PropagationTask task, final PropagationHandler handler) {\n+    public TaskExec execute(final PropagationTask task, final PropagationReporter reporter) {\n         final PropagationActions actions = getPropagationActions(task.getResource());\n \n         final Date startDate = new Date();\n@@ -321,10 +321,10 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n                 exceptionWriter.write(e.getMessage() + \"\\n\\n\");\n                 e.printStackTrace(new PrintWriter(exceptionWriter));\n                 taskExecutionMessage = exceptionWriter.toString();\n-                if (e.getCause() != null) {\n-                    failureReason = e.getMessage() + \"\\n\\n Cause: \" + e.getCause().getMessage().split(\"\\n\")[0];\n-                } else {\n+                if (e.getCause() == null) {\n                     failureReason = e.getMessage();\n+                } else {\n+                    failureReason = e.getMessage() + \"\\n\\n Cause: \" + e.getCause().getMessage().split(\"\\n\")[0];\n                 }\n             }\n \n@@ -370,8 +370,8 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n                 taskDAO.flush();\n             }\n \n-            if (handler != null) {\n-                handler.handle(\n+            if (reporter != null) {\n+                reporter.onSuccessOrSecondaryResourceFailures(\n                         task.getResource().getName(),\n                         PropagationTaskExecStatus.valueOf(execution.getStatus()),\n                         failureReason,\n@@ -391,7 +391,7 @@ public void execute(final Collection<PropagationTask> tasks) {\n     }\n \n     @Override\n-    public abstract void execute(Collection<PropagationTask> tasks, PropagationHandler handler);\n+    public abstract void execute(Collection<PropagationTask> tasks, final PropagationReporter reporter);\n \n     /**\n      * Check whether an execution has to be stored, for a given task."},{"sha":"8619383258a805aa53b5b08cb68ab57203bd508f","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/DefaultPropagationReporter.java","status":"renamed","additions":27,"deletions":26,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FDefaultPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FDefaultPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FDefaultPropagationReporter.java?ref=9db5e6b44325aff5f9179f2f6910ea2a718f7744","patch":"@@ -18,33 +18,30 @@\n  */\n package org.apache.syncope.core.propagation.impl;\n \n+import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.common.to.PropagationStatusTO;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n-import org.apache.syncope.core.propagation.PropagationHandler;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n-public class DefaultPropagationHandler implements PropagationHandler {\n+public class DefaultPropagationReporter implements PropagationReporter {\n \n-    protected static final Logger LOG = LoggerFactory.getLogger(DefaultPropagationHandler.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(DefaultPropagationReporter.class);\n \n-    private final ConnObjectUtil connObjectUtil;\n+    @Autowired\n+    protected ConnObjectUtil connObjectUtil;\n \n-    private final List<PropagationStatusTO> propagations;\n-\n-    public DefaultPropagationHandler(final ConnObjectUtil connObjectUtil,\n-            final List<PropagationStatusTO> propagations) {\n-\n-        this.connObjectUtil = connObjectUtil;\n-        this.propagations = propagations;\n-    }\n+    protected final List<PropagationStatusTO> statuses = new ArrayList<PropagationStatusTO>();\n \n     @Override\n-    public void handle(final String resource, final PropagationTaskExecStatus executionStatus,\n+    public void onSuccessOrSecondaryResourceFailures(final String resource,\n+            final PropagationTaskExecStatus executionStatus,\n             final String failureReason, final ConnectorObject beforeObj, final ConnectorObject afterObj) {\n \n         final PropagationStatusTO propagation = new PropagationStatusTO();\n@@ -60,34 +57,38 @@ public void handle(final String resource, final PropagationTaskExecStatus execut\n             propagation.setAfterObj(connObjectUtil.getConnObjectTO(afterObj));\n         }\n \n-        propagations.add(propagation);\n+        statuses.add(propagation);\n     }\n \n-    public void completeWhenPrimaryResourceErrored(\n-            final List<PropagationStatusTO> propagations, final List<PropagationTask> tasks) {\n+    private boolean containsPropagationStatusTO(final String resourceName) {\n+        for (PropagationStatusTO status : statuses) {\n+            if (resourceName.equals(status.getResource())) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n \n-        final String failedResource = propagations.get(propagations.size() - 1).getResource();\n+    @Override\n+    public void onPrimaryResourceFailure(final List<PropagationTask> tasks) {\n+        final String failedResource = statuses.get(statuses.size() - 1).getResource();\n \n         LOG.debug(\"Propagation error: {} primary resource failed to propagate\", failedResource);\n \n         for (PropagationTask propagationTask : tasks) {\n-            if (!containsPropagationStatusTO(propagationTask.getResource().getName(), propagations)) {\n+            if (!containsPropagationStatusTO(propagationTask.getResource().getName())) {\n                 final PropagationStatusTO propagationStatusTO = new PropagationStatusTO();\n                 propagationStatusTO.setResource(propagationTask.getResource().getName());\n                 propagationStatusTO.setStatus(PropagationTaskExecStatus.FAILURE);\n                 propagationStatusTO.setFailureReason(\n                         \"Propagation error: \" + failedResource + \" primary resource failed to propagate.\");\n-                propagations.add(propagationStatusTO);\n+                statuses.add(propagationStatusTO);\n             }\n         }\n     }\n \n-    private boolean containsPropagationStatusTO(final String resource, final List<PropagationStatusTO> propagations) {\n-        for (PropagationStatusTO status : propagations) {\n-            if (resource.equals(status.getResource())) {\n-                return true;\n-            }\n-        }\n-        return false;\n+    @Override\n+    public List<PropagationStatusTO> getStatuses() {\n+        return statuses;\n     }\n }","previous_filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/DefaultPropagationHandler.java"},{"sha":"5ea5faeffa31f7ad8224e01dc4ba9efbf9601f7e","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PriorityPropagationTaskExecutor.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPriorityPropagationTaskExecutor.java?ref=9db5e6b44325aff5f9179f2f6910ea2a718f7744","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.TaskExec;\n import org.apache.syncope.core.propagation.PropagationException;\n-import org.apache.syncope.core.propagation.PropagationHandler;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n \n public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExecutor {\n \n@@ -37,14 +37,14 @@ public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExec\n      * {@inheritDoc}\n      */\n     @Override\n-    public void execute(final Collection<PropagationTask> tasks, final PropagationHandler handler) {\n+    public void execute(final Collection<PropagationTask> tasks, final PropagationReporter reporter) {\n         final List<PropagationTask> prioritizedTasks = new ArrayList<PropagationTask>(tasks);\n         Collections.sort(prioritizedTasks, new PriorityComparator());\n \n         for (PropagationTask task : prioritizedTasks) {\n             LOG.debug(\"Execution started for {}\", task);\n \n-            TaskExec execution = execute(task, handler);\n+            TaskExec execution = execute(task, reporter);\n \n             LOG.debug(\"Execution finished for {}, {}\", task, execution);\n "},{"sha":"649749610391daa61d52b72b75c04f8bb93abced","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PropagationManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java?ref=9db5e6b44325aff5f9179f2f6910ea2a718f7744","patch":"@@ -134,7 +134,7 @@ public List<PropagationTask> getUserCreateTaskIds(final WorkflowResult<Map.Entry\n      * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given user\n      */\n     public List<PropagationTask> getUserCreateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n-            final String password, final List<AttributeTO> vAttrs, final Set<String> noPropResourceNames)\n+            final String password, final Collection<AttributeTO> vAttrs, final Set<String> noPropResourceNames)\n             throws NotFoundException, UnauthorizedRoleException {\n \n         SyncopeUser user = userDataBinder.getUserFromId(wfResult.getResult().getKey());\n@@ -172,7 +172,7 @@ public List<PropagationTask> getRoleCreateTaskIds(final WorkflowResult<Long> wfR\n      * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given role\n      */\n     public List<PropagationTask> getRoleCreateTaskIds(final WorkflowResult<Long> wfResult,\n-            final List<AttributeTO> vAttrs, final Set<String> noPropResourceNames)\n+            final Collection<AttributeTO> vAttrs, final Set<String> noPropResourceNames)\n             throws NotFoundException, UnauthorizedRoleException {\n \n         SyncopeRole role = roleDataBinder.getRoleFromId(wfResult.getResult());\n@@ -183,7 +183,7 @@ public List<PropagationTask> getRoleCreateTaskIds(final WorkflowResult<Long> wfR\n     }\n \n     protected List<PropagationTask> getCreateTaskIds(final AbstractAttributable attributable,\n-            final String password, final List<AttributeTO> vAttrs, final Boolean enable,\n+            final String password, final Collection<AttributeTO> vAttrs, final Boolean enable,\n             final PropagationByResource propByRes, final Set<String> noPropResourceNames) {\n \n         if (propByRes == null || propByRes.isEmpty()) {"},{"sha":"81c7ca00d7031674e1e573cc131148a51ec5e2d3","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":54,"deletions":38,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=9db5e6b44325aff5f9179f2f6910ea2a718f7744","patch":"@@ -27,15 +27,13 @@\n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.services.InvalidSearchConditionException;\n-import org.apache.syncope.common.to.PropagationStatusTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.AuditElements.RoleSubCategory;\n import org.apache.syncope.core.audit.AuditManager;\n-import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -44,10 +42,12 @@\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.propagation.PropagationException;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.propagation.impl.DefaultPropagationHandler;\n import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.rest.data.AttributableTransformer;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.workflow.WorkflowResult;\n@@ -69,31 +69,31 @@ public class RoleController {\n     protected static final Logger LOG = LoggerFactory.getLogger(RoleController.class);\n \n     @Autowired\n-    private AuditManager auditManager;\n+    protected AuditManager auditManager;\n \n     @Autowired\n-    private RoleDAO roleDAO;\n+    protected RoleDAO roleDAO;\n \n     @Autowired\n-    private UserDAO userDAO;\n+    protected UserDAO userDAO;\n \n     @Autowired\n-    private AttributableSearchDAO searchDAO;\n+    protected AttributableSearchDAO searchDAO;\n \n     @Autowired\n-    private RoleDataBinder binder;\n+    protected RoleDataBinder binder;\n \n     @Autowired\n-    private RoleWorkflowAdapter rwfAdapter;\n+    protected RoleWorkflowAdapter rwfAdapter;\n \n     @Autowired\n-    private PropagationManager propagationManager;\n+    protected PropagationManager propagationManager;\n \n     @Autowired\n-    private PropagationTaskExecutor taskExecutor;\n+    protected PropagationTaskExecutor taskExecutor;\n \n     @Autowired\n-    private ConnObjectUtil connObjectUtil;\n+    protected AttributableTransformer attrTransformer;\n \n     @Resource(name = \"anonymousUser\")\n     private String anonymousUser;\n@@ -257,28 +257,36 @@ public List<RoleTO> list() {\n     public RoleTO create(final RoleTO roleTO) {\n         LOG.debug(\"Role create called with parameters {}\", roleTO);\n \n+        // Check that this operation is allowed to be performed by caller\n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         if (roleTO.getParent() != 0 && !allowedRoleIds.contains(roleTO.getParent())) {\n             throw new UnauthorizedRoleException(roleTO.getParent());\n         }\n \n-        WorkflowResult<Long> created = rwfAdapter.create(roleTO);\n+        // Attributable transformation (if configured)\n+        RoleTO actual = attrTransformer.transform(roleTO);\n+        LOG.debug(\"Transformed: {}\", actual);\n \n-        EntitlementUtil.extendAuthContext(created.getResult());\n+        /*\n+         * Actual operations: workflow, propagation\n+         */\n+\n+        WorkflowResult<Long> created = rwfAdapter.create(actual);\n \n-        List<PropagationTask> tasks = propagationManager.getRoleCreateTaskIds(created, roleTO.getVirAttrs());\n+        EntitlementUtil.extendAuthContext(created.getResult());\n \n-        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n-        final DefaultPropagationHandler propHanlder = new DefaultPropagationHandler(connObjectUtil, propagations);\n+        List<PropagationTask> tasks = propagationManager.getRoleCreateTaskIds(created, actual.getVirAttrs());\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n-            taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n+            taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n             LOG.error(\"Error propagation primary resource\", e);\n-            propHanlder.completeWhenPrimaryResourceErrored(propagations, tasks);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n         final RoleTO savedTO = binder.getRoleTO(created.getResult());\n-        savedTO.getPropagationStatusTOs().addAll(propagations);\n+        savedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n \n         LOG.debug(\"About to return created role\\n{}\", savedTO);\n \n@@ -292,23 +300,31 @@ public RoleTO create(final RoleTO roleTO) {\n     public RoleTO update(final RoleMod roleMod) {\n         LOG.debug(\"Role update called with {}\", roleMod);\n \n+        // Check that this operation is allowed to be performed by caller\n         SyncopeRole role = binder.getRoleFromId(roleMod.getId());\n \n-        WorkflowResult<Long> updated = rwfAdapter.update(roleMod);\n+        // Attribute value transformation (if configured)\n+        RoleMod actual = attrTransformer.transform(roleMod);\n+        LOG.debug(\"Transformed: {}\", actual);\n \n-        List<PropagationTask> tasks = propagationManager.getRoleUpdateTaskIds(updated,\n-                roleMod.getVirAttrsToRemove(), roleMod.getVirAttrsToUpdate());\n+        /*\n+         * Actual operations: workflow, propagation\n+         */\n+\n+        WorkflowResult<Long> updated = rwfAdapter.update(actual);\n \n-        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n-        final DefaultPropagationHandler propHanlder = new DefaultPropagationHandler(connObjectUtil, propagations);\n+        List<PropagationTask> tasks = propagationManager.getRoleUpdateTaskIds(updated,\n+                actual.getVirAttrsToRemove(), actual.getVirAttrsToUpdate());\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n-            taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n+            taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n             LOG.error(\"Error propagation primary resource\", e);\n-            propHanlder.completeWhenPrimaryResourceErrored(propagations, tasks);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n         final RoleTO updatedTO = binder.getRoleTO(updated.getResult());\n-        updatedTO.getPropagationStatusTOs().addAll(propagations);\n+        updatedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n \n         auditManager.audit(Category.role, RoleSubCategory.update, Result.success,\n                 \"Successfully updated role: \" + role.getId());\n@@ -335,15 +351,15 @@ public RoleTO delete(final Long roleId) {\n         RoleTO roleTO = new RoleTO();\n         roleTO.setId(roleId);\n \n-        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n-        final DefaultPropagationHandler propHanlder = new DefaultPropagationHandler(connObjectUtil, propagations);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n-            taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n+            taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n             LOG.error(\"Error propagation primary resource\", e);\n-            propHanlder.completeWhenPrimaryResourceErrored(propagations, tasks);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n-        roleTO.getPropagationStatusTOs().addAll(propagations);\n+        roleTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n \n         rwfAdapter.delete(roleId);\n \n@@ -400,17 +416,17 @@ public RoleTO deprovision(final Long roleId, final Collection<String> resources)\n         noPropResourceName.removeAll(resources);\n \n         final List<PropagationTask> tasks = propagationManager.getRoleDeleteTaskIds(roleId, noPropResourceName);\n-        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n-        final DefaultPropagationHandler propHanlder = new DefaultPropagationHandler(connObjectUtil, propagations);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n-            taskExecutor.execute(tasks, propHanlder);\n+            taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n             LOG.error(\"Error propagation primary resource\", e);\n-            propHanlder.completeWhenPrimaryResourceErrored(propagations, tasks);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n         final RoleTO updatedTO = binder.getRoleTO(role);\n-        updatedTO.getPropagationStatusTOs().addAll(propagations);\n+        updatedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n \n         auditManager.audit(Category.user, AuditElements.RoleSubCategory.update, Result.success,\n                 \"Successfully deprovisioned role: \" + updatedTO.getName());"},{"sha":"1a754ea230d64500dcdce406644b26503b9b692a","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":50,"deletions":43,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=9db5e6b44325aff5f9179f2f6910ea2a718f7744","patch":"@@ -34,7 +34,6 @@\n import org.apache.syncope.common.to.BulkActionRes.Status;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.PropagationRequestTO;\n-import org.apache.syncope.common.to.PropagationStatusTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AuditElements.Category;\n@@ -45,7 +44,6 @@\n import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.audit.AuditManager;\n-import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.notification.NotificationManager;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n@@ -55,10 +53,12 @@\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.propagation.PropagationByResource;\n import org.apache.syncope.core.propagation.PropagationException;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.propagation.impl.DefaultPropagationHandler;\n import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.rest.data.AttributableTransformer;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.workflow.WorkflowResult;\n@@ -109,13 +109,10 @@ public class UserController {\n     protected PropagationTaskExecutor taskExecutor;\n \n     @Autowired\n-    protected NotificationManager notificationManager;\n+    protected AttributableTransformer attrTransformer;\n \n-    /**\n-     * ConnectorObject util.\n-     */\n     @Autowired\n-    protected ConnObjectUtil connObjectUtil;\n+    protected NotificationManager notificationManager;\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n@@ -246,31 +243,37 @@ public UserTO create(final UserTO userTO) {\n         for (MembershipTO membership : userTO.getMemberships()) {\n             requestRoleIds.add(membership.getRoleId());\n         }\n-\n         Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         requestRoleIds.removeAll(adminRoleIds);\n         if (!requestRoleIds.isEmpty()) {\n             throw new UnauthorizedRoleException(requestRoleIds);\n         }\n \n-        WorkflowResult<Map.Entry<Long, Boolean>> created = uwfAdapter.create(userTO);\n+        // Attributable transformation (if configured)\n+        UserTO actual = attrTransformer.transform(userTO);\n+        LOG.debug(\"Transformed: {}\", actual);\n \n-        List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(\n-                created, userTO.getPassword(), userTO.getVirAttrs());\n+        /*\n+         * Actual operations: workflow, propagation, notification\n+         */\n+\n+        WorkflowResult<Map.Entry<Long, Boolean>> created = uwfAdapter.create(actual);\n \n-        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n-        final DefaultPropagationHandler propHanlder = new DefaultPropagationHandler(connObjectUtil, propagations);\n+        List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(\n+                created, actual.getPassword(), actual.getVirAttrs());\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n-            taskExecutor.execute(tasks, propHanlder);\n+            taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n             LOG.error(\"Error propagation primary resource\", e);\n-            propHanlder.completeWhenPrimaryResourceErrored(propagations, tasks);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n         notificationManager.createTasks(created.getResult().getKey(), created.getPerformedTasks());\n \n         final UserTO savedTO = binder.getUserTO(created.getResult().getKey());\n-        savedTO.getPropagationStatusTOs().addAll(propagations);\n+        savedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n \n         LOG.debug(\"About to return created user\\n{}\", savedTO);\n \n@@ -286,25 +289,29 @@ public UserTO update(final UserMod userMod) {\n \n         final String changedPwd = userMod.getPassword();\n \n+        // AttributableMod transformation (if configured)\n+        UserMod actual = attrTransformer.transform(userMod);\n+        LOG.debug(\"Transformed: {}\", actual);\n+\n         // 1. update password internally only if required\n-        if (userMod.getPwdPropRequest() != null && !userMod.getPwdPropRequest().isOnSyncope()) {\n-            userMod.setPassword(null);\n+        if (actual.getPwdPropRequest() != null && !actual.getPwdPropRequest().isOnSyncope()) {\n+            actual.setPassword(null);\n         }\n-        WorkflowResult<Map.Entry<Long, Boolean>> updated = uwfAdapter.update(userMod);\n+        WorkflowResult<Map.Entry<Long, Boolean>> updated = uwfAdapter.update(actual);\n \n         // 2. propagate password update only to requested resources\n         List<PropagationTask> tasks = new ArrayList<PropagationTask>();\n-        if (userMod.getPwdPropRequest() == null) {\n+        if (actual.getPwdPropRequest() == null) {\n             // 2a. no specific password propagation request: generate propagation tasks for any resource associated\n             tasks = propagationManager.getUserUpdateTaskIds(updated, changedPwd,\n-                    userMod.getVirAttrsToRemove(), userMod.getVirAttrsToUpdate());\n+                    actual.getVirAttrsToRemove(), actual.getVirAttrsToUpdate());\n         } else {\n             // 2b. generate the propagation task list in two phases: first the ones containing password,\n             // the the rest (with no password)\n             final PropagationByResource origPropByRes = new PropagationByResource();\n             origPropByRes.merge(updated.getPropByRes());\n \n-            Set<String> pwdResourceNames = userMod.getPwdPropRequest().getResources();\n+            Set<String> pwdResourceNames = actual.getPwdPropRequest().getResources();\n             SyncopeUser user = binder.getUserFromId(updated.getResult().getKey());\n             pwdResourceNames.retainAll(user.getResourceNames());\n             final PropagationByResource pwdPropByRes = new PropagationByResource();\n@@ -313,13 +320,13 @@ public UserTO update(final UserMod userMod) {\n \n             if (!pwdPropByRes.isEmpty()) {\n                 Set<String> toBeExcluded = new HashSet<String>(user.getResourceNames());\n-                toBeExcluded.addAll(userMod.getResourcesToAdd());\n+                toBeExcluded.addAll(actual.getResourcesToAdd());\n                 toBeExcluded.removeAll(pwdResourceNames);\n                 tasks.addAll(propagationManager.getUserUpdateTaskIds(\n                         updated,\n                         changedPwd,\n-                        userMod.getVirAttrsToRemove(),\n-                        userMod.getVirAttrsToUpdate(),\n+                        actual.getVirAttrsToRemove(),\n+                        actual.getVirAttrsToUpdate(),\n                         toBeExcluded));\n             }\n \n@@ -333,29 +340,29 @@ public UserTO update(final UserMod userMod) {\n                 tasks.addAll(propagationManager.getUserUpdateTaskIds(\n                         updated,\n                         null,\n-                        userMod.getVirAttrsToRemove(),\n-                        userMod.getVirAttrsToUpdate(),\n+                        actual.getVirAttrsToRemove(),\n+                        actual.getVirAttrsToUpdate(),\n                         pwdResourceNames));\n             }\n \n             updated.setPropByRes(origPropByRes);\n         }\n \n-        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n-        final DefaultPropagationHandler propHanlder = new DefaultPropagationHandler(connObjectUtil, propagations);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n-            taskExecutor.execute(tasks, propHanlder);\n+            taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n             LOG.error(\"Error propagation primary resource\", e);\n-            propHanlder.completeWhenPrimaryResourceErrored(propagations, tasks);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n         // 3. create notification tasks\n         notificationManager.createTasks(updated.getResult().getKey(), updated.getPerformedTasks());\n \n         // 4. prepare result, including propagation status on external resources\n         final UserTO updatedTO = binder.getUserTO(updated.getResult().getKey());\n-        updatedTO.getPropagationStatusTOs().addAll(propagations);\n+        updatedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n \n         auditManager.audit(Category.user, UserSubCategory.update, Result.success,\n                 \"Successfully updated user: \" + updatedTO.getUsername());\n@@ -555,16 +562,16 @@ protected UserTO doDelete(final Long userId) {\n         final UserTO userTO = new UserTO();\n         userTO.setId(userId);\n \n-        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n-        final DefaultPropagationHandler propHanlder = new DefaultPropagationHandler(connObjectUtil, propagations);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n-            taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n+            taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n             LOG.error(\"Error propagation primary resource\", e);\n-            propHanlder.completeWhenPrimaryResourceErrored(propagations, tasks);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        userTO.getPropagationStatusTOs().addAll(propagations);\n+        userTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n \n         uwfAdapter.delete(userId);\n \n@@ -667,17 +674,17 @@ public UserTO deprovision(final Long userId, final Collection<String> resources)\n         noPropResourceName.removeAll(resources);\n \n         final List<PropagationTask> tasks = propagationManager.getUserDeleteTaskIds(userId, noPropResourceName);\n-        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n-        final DefaultPropagationHandler propHanlder = new DefaultPropagationHandler(connObjectUtil, propagations);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n-            taskExecutor.execute(tasks, propHanlder);\n+            taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n             LOG.error(\"Error propagation primary resource\", e);\n-            propHanlder.completeWhenPrimaryResourceErrored(propagations, tasks);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n         final UserTO updatedUserTO = binder.getUserTO(user);\n-        updatedUserTO.getPropagationStatusTOs().addAll(propagations);\n+        updatedUserTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n \n         auditManager.audit(Category.user, UserSubCategory.update, Result.success,\n                 \"Successfully deprovisioned user: \" + updatedUserTO.getUsername());"},{"sha":"be602c353bbb396a7388f8294d3dcaee19d24545","filename":"core/src/main/java/org/apache/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=9db5e6b44325aff5f9179f2f6910ea2a718f7744","patch":"@@ -755,7 +755,7 @@ protected PropagationByResource fill(final AbstractAttributable attributable,\n      * @param vAttrs virtual attributes to be added.\n      * @param attrUtil attributable util.\n      */\n-    public void fillVirtual(final AbstractAttributable attributable, final List<AttributeTO> vAttrs,\n+    public void fillVirtual(final AbstractAttributable attributable, final Collection<AttributeTO> vAttrs,\n             final AttributableUtil attrUtil) {\n \n         for (AttributeTO attributeTO : vAttrs) {"},{"sha":"77987b967396c4882d00c2d7d7bc80eb2ee6a67b","filename":"core/src/main/java/org/apache/syncope/core/rest/data/AttributableTransformer.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAttributableTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAttributableTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAttributableTransformer.java?ref=9db5e6b44325aff5f9179f2f6910ea2a718f7744","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.data;\n+\n+import org.apache.syncope.common.mod.AbstractAttributableMod;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+\n+/**\n+ * Provides logic for transforming user or role, received as input by RESTful methods, before any internal\n+ * processing logic takes place.\n+ */\n+public interface AttributableTransformer {\n+\n+    <T extends AbstractAttributableTO> T transform(T input);\n+\n+    <T extends AbstractAttributableMod> T transform(T input);\n+}"},{"sha":"cf04f651cc5592eebeca3b0f233808baf55c791b","filename":"core/src/main/java/org/apache/syncope/core/rest/data/DefaultAttributableTransformer.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDefaultAttributableTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDefaultAttributableTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDefaultAttributableTransformer.java?ref=9db5e6b44325aff5f9179f2f6910ea2a718f7744","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.data;\n+\n+import org.apache.syncope.common.mod.AbstractAttributableMod;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+\n+/**\n+ * Default empty implementation returning received input as result.\n+ */\n+public class DefaultAttributableTransformer implements AttributableTransformer {\n+\n+    @Override\n+    public <T extends AbstractAttributableTO> T transform(final T input) {\n+        return input;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributableMod> T transform(final T input) {\n+        return input;\n+    }\n+}"},{"sha":"64cf2498ee9c4ed2c058aa69013e8f600ed264b6","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":38,"deletions":23,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=9db5e6b44325aff5f9179f2f6910ea2a718f7744","patch":"@@ -68,6 +68,7 @@\n import org.apache.syncope.core.propagation.Connector;\n import org.apache.syncope.core.propagation.impl.PropagationManager;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n+import org.apache.syncope.core.rest.data.AttributableTransformer;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.sync.SyncActions;\n@@ -184,6 +185,9 @@ public class SyncopeSyncResultHandler implements SyncResultsHandler {\n     @Autowired\n     protected NotificationManager notificationManager;\n \n+    @Autowired\n+    protected AttributableTransformer attrTransformer;\n+\n     /**\n      * Syncing connector.\n      */\n@@ -518,54 +522,57 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n \n         delta = actions.beforeCreate(this, delta, subjectTO);\n \n+        // Attributable transformation (if configured)\n+        AbstractAttributableTO actual = attrTransformer.transform(subjectTO);\n+        LOG.debug(\"Transformed: {}\", actual);\n+\n         if (dryRun) {\n             result.setId(0L);\n-            if (subjectTO instanceof UserTO) {\n-                result.setName(((UserTO) subjectTO).getUsername());\n+            if (actual instanceof UserTO) {\n+                result.setName(((UserTO) actual).getUsername());\n             }\n-            if (subjectTO instanceof RoleTO) {\n-                result.setName(((RoleTO) subjectTO).getName());\n+            if (actual instanceof RoleTO) {\n+                result.setName(((RoleTO) actual).getName());\n             }\n         } else {\n             try {\n                 if (AttributableType.USER == attrUtil.getType()) {\n                     Boolean enabled = readEnabled(delta.getObject());\n                     WorkflowResult<Map.Entry<Long, Boolean>> created =\n-                            uwfAdapter.create((UserTO) subjectTO, true, enabled);\n+                            uwfAdapter.create((UserTO) actual, true, enabled);\n \n                     List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(created,\n-                            ((UserTO) subjectTO).getPassword(), subjectTO.getVirAttrs(),\n+                            ((UserTO) actual).getPassword(), actual.getVirAttrs(),\n                             Collections.singleton(syncTask.getResource().getName()));\n \n                     taskExecutor.execute(tasks);\n \n                     notificationManager.createTasks(created.getResult().getKey(), created.getPerformedTasks());\n \n-                    subjectTO = userDataBinder.getUserTO(created.getResult().getKey());\n+                    actual = userDataBinder.getUserTO(created.getResult().getKey());\n \n                     result.setId(created.getResult().getKey());\n-                    result.setName(((UserTO) subjectTO).getUsername());\n+                    result.setName(((UserTO) actual).getUsername());\n                 }\n                 if (AttributableType.ROLE == attrUtil.getType()) {\n-                    WorkflowResult<Long> created = rwfAdapter.create((RoleTO) subjectTO);\n-                    AttributeTO roleOwner = subjectTO.getAttrMap().get(StringUtils.EMPTY);\n+                    WorkflowResult<Long> created = rwfAdapter.create((RoleTO) actual);\n+                    AttributeTO roleOwner = actual.getAttrMap().get(StringUtils.EMPTY);\n                     if (roleOwner != null) {\n                         roleOwnerMap.put(created.getResult(), roleOwner.getValues().iterator().next());\n                     }\n \n                     EntitlementUtil.extendAuthContext(created.getResult());\n \n                     List<PropagationTask> tasks = propagationManager.getRoleCreateTaskIds(created,\n-                            subjectTO.getVirAttrs(), Collections.singleton(syncTask.getResource().getName()));\n+                            actual.getVirAttrs(), Collections.singleton(syncTask.getResource().getName()));\n \n                     taskExecutor.execute(tasks);\n \n-                    subjectTO = roleDataBinder.getRoleTO(created.getResult());\n+                    actual = roleDataBinder.getRoleTO(created.getResult());\n \n                     result.setId(created.getResult());\n-                    result.setName(((RoleTO) subjectTO).getName());\n+                    result.setName(((RoleTO) actual).getName());\n                 }\n-\n             } catch (PropagationException e) {\n                 // A propagation failure doesn't imply a synchronization failure.\n                 // The propagation exception status will be reported into the propagation task execution.\n@@ -577,7 +584,7 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n             }\n         }\n \n-        actions.after(this, delta, subjectTO, result);\n+        actions.after(this, delta, actual, result);\n         return Collections.singletonList(result);\n     }\n \n@@ -594,9 +601,13 @@ protected UserTO updateUser(final Long id, SyncDelta delta, final boolean dryRun\n             return userTO;\n         }\n \n+        // Attribute value transformation (if configured)\n+        UserMod actual = attrTransformer.transform(userMod);\n+        LOG.debug(\"Transformed: {}\", actual);\n+\n         WorkflowResult<Map.Entry<Long, Boolean>> updated;\n         try {\n-            updated = uwfAdapter.update(userMod);\n+            updated = uwfAdapter.update(actual);\n         } catch (Exception e) {\n             LOG.error(\"Update of user {} failed, trying to sync its status anyway (if configured)\", id, e);\n \n@@ -631,9 +642,9 @@ protected UserTO updateUser(final Long id, SyncDelta delta, final boolean dryRun\n         }\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated,\n-                userMod.getPassword(),\n-                userMod.getVirAttrsToRemove(),\n-                userMod.getVirAttrsToUpdate(),\n+                actual.getPassword(),\n+                actual.getVirAttrsToRemove(),\n+                actual.getVirAttrsToUpdate(),\n                 Collections.singleton(syncTask.getResource().getName()));\n \n         taskExecutor.execute(tasks);\n@@ -660,9 +671,13 @@ protected RoleTO updateRole(final Long id, SyncDelta delta, final boolean dryRun\n             return roleTO;\n         }\n \n-        WorkflowResult<Long> updated = rwfAdapter.update(roleMod);\n+        // Attribute value transformation (if configured)\n+        RoleMod actual = attrTransformer.transform(roleMod);\n+        LOG.debug(\"Transformed: {}\", actual);\n+\n+        WorkflowResult<Long> updated = rwfAdapter.update(actual);\n         String roleOwner = null;\n-        for (AttributeMod attrMod : roleMod.getAttrsToUpdate()) {\n+        for (AttributeMod attrMod : actual.getAttrsToUpdate()) {\n             if (attrMod.getSchema().isEmpty()) {\n                 roleOwner = attrMod.getValuesToBeAdded().iterator().next();\n             }\n@@ -672,8 +687,8 @@ protected RoleTO updateRole(final Long id, SyncDelta delta, final boolean dryRun\n         }\n \n         List<PropagationTask> tasks = propagationManager.getRoleUpdateTaskIds(updated,\n-                roleMod.getVirAttrsToRemove(),\n-                roleMod.getVirAttrsToUpdate(),\n+                actual.getVirAttrsToRemove(),\n+                actual.getVirAttrsToUpdate(),\n                 Collections.singleton(syncTask.getResource().getName()));\n \n         taskExecutor.execute(tasks);"},{"sha":"8698d5a45bd2c174f43c2a22410cd864d747f251","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=9db5e6b44325aff5f9179f2f6910ea2a718f7744","patch":"@@ -100,5 +100,7 @@ under the License.\n     </jaxrs:extensionMappings>\n   </jaxrs:server>\n   <!-- CXF Configuration - END -->\n-\n+  \n+  <!-- Attribute transformer for internal storage -->\n+  <bean id=\"attrTransformer\" class=\"org.apache.syncope.core.rest.data.DefaultAttributableTransformer\"/>\n </beans>"},{"sha":"acb0411757960e6cb015cf21ffb8a0c602bc6b68","filename":"core/src/main/resources/syncopeContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml?ref=9db5e6b44325aff5f9179f2f6910ea2a718f7744","patch":"@@ -76,6 +76,7 @@ under the License.\n \n   <bean id=\"propagationManager\" class=\"org.apache.syncope.core.propagation.impl.PropagationManager\"/>\n   <bean id=\"propagationTaskExecutor\" class=\"org.apache.syncope.core.propagation.impl.PriorityPropagationTaskExecutor\"/>\n+  <bean id=\"propagationReporter\" class=\"org.apache.syncope.core.propagation.impl.DefaultPropagationReporter\" scope=\"prototype\"/>\n \n   <bean id=\"notificationManager\" class=\"org.apache.syncope.core.notification.NotificationManager\"/>\n "},{"sha":"f3fbd03e69cb9aac970f9d1e5fc3dae070b9c0db","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/SchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java?ref=9db5e6b44325aff5f9179f2f6910ea2a718f7744","patch":"@@ -50,7 +50,7 @@ public class SchemaTest extends AbstractDAOTest {\n     @Test\n     public void findAll() {\n         List<USchema> userList = schemaDAO.findAll(USchema.class);\n-        assertEquals(12, userList.size());\n+        assertEquals(13, userList.size());\n \n         List<RSchema> roleList = schemaDAO.findAll(RSchema.class);\n         assertEquals(5, roleList.size());"},{"sha":"d01c9951f8ce2b3e6b05dfa332fd6abf6b288cee","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":31,"deletions":14,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=9db5e6b44325aff5f9179f2f6910ea2a718f7744","patch":"@@ -99,6 +99,24 @@ private ConnObjectTO readConnectorObject(final String resourceName, final Long u\n         return resourceService.getConnectorObject(resourceName, AttributableType.USER, userId);\n     }\n \n+    private String getStringAttribute(final ConnObjectTO connObjectTO, final String attrName) {\n+        return connObjectTO.getAttrMap().get(attrName).getValues().get(0);\n+    }\n+\n+    private boolean getBooleanAttribute(final ConnObjectTO connObjectTO, final String attrName) {\n+        return Boolean.parseBoolean(getStringAttribute(connObjectTO, attrName));\n+    }\n+\n+    private long getMaxTaskId(final List<PropagationTaskTO> tasks) {\n+        long newMaxId = Long.MIN_VALUE;\n+        for (PropagationTaskTO task : tasks) {\n+            if (task.getId() > newMaxId) {\n+                newMaxId = task.getId();\n+            }\n+        }\n+        return newMaxId;\n+    }\n+\n     public static UserTO getUniqueSampleTO(final String email) {\n         return getSampleTO(getUUIDString() + email);\n     }\n@@ -2518,21 +2536,20 @@ public void deprovision() {\n         }\n     }\n \n-    private boolean getBooleanAttribute(ConnObjectTO connObjectTO, String attrName) {\n-        return Boolean.parseBoolean(getStringAttribute(connObjectTO, attrName));\n-    }\n+    @Test\n+    public void issueSYNCOPE420() {\n+        UserTO userTO = getUniqueSampleTO(\"syncope420@syncope.apache.org\");\n+        userTO.getAttrs().add(attributeTO(\"makeItDouble\", \"3\"));\n \n-    private String getStringAttribute(ConnObjectTO connObjectTO, String attrName) {\n-        return connObjectTO.getAttrMap().get(attrName).getValues().get(0);\n-    }\n+        userTO = createUser(userTO);\n+        assertEquals(\"6\", userTO.getAttrMap().get(\"makeItDouble\").getValues().get(0));\n \n-    private long getMaxTaskId(List<PropagationTaskTO> tasks) {\n-        long newMaxId = Long.MIN_VALUE;\n-        for (PropagationTaskTO task : tasks) {\n-            if (task.getId() > newMaxId) {\n-                newMaxId = task.getId();\n-            }\n-        }\n-        return newMaxId;\n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.getAttrsToRemove().add(\"makeItDouble\");\n+        userMod.getAttrsToUpdate().add(attributeMod(\"makeItDouble\", \"7\"));\n+\n+        userTO = userService.update(userMod.getId(), userMod);\n+        assertEquals(\"14\", userTO.getAttrMap().get(\"makeItDouble\").getValues().get(0));\n     }\n }"},{"sha":"eac4a674afd242a236bf2d3fd135e4a6c9cccc78","filename":"core/src/test/java/org/apache/syncope/core/rest/data/DefaultAttributableTransformer.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDefaultAttributableTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDefaultAttributableTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDefaultAttributableTransformer.java?ref=9db5e6b44325aff5f9179f2f6910ea2a718f7744","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.data;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.common.mod.AbstractAttributableMod;\n+import org.apache.syncope.common.mod.AttributeMod;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.AttributeTO;\n+\n+/**\n+ * Class for integration tests: transform (by making it double) any attribute value for defined schema.\n+ */\n+public class DefaultAttributableTransformer implements AttributableTransformer {\n+\n+    private static final String NAME = \"makeItDouble\";\n+\n+    @Override\n+    public <T extends AbstractAttributableTO> T transform(final T input) {\n+        for (AttributeTO attr : input.getAttrs()) {\n+            if (NAME.equals(attr.getSchema())) {\n+                List<String> values = new ArrayList<String>(attr.getValues().size());\n+                for (String value : attr.getValues()) {\n+                    values.add(String.valueOf(2 * Long.valueOf(value)));\n+                }\n+                attr.getValues().clear();\n+                attr.getValues().addAll(values);\n+            }\n+        }\n+\n+        return input;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributableMod> T transform(final T input) {\n+        for (AttributeMod attr : input.getAttrsToUpdate()) {\n+            if (NAME.equals(attr.getSchema())) {\n+                List<String> values = new ArrayList<String>(attr.getValuesToBeAdded().size());\n+                for (String value : attr.getValuesToBeAdded()) {\n+                    values.add(String.valueOf(2 * Long.valueOf(value)));\n+                }\n+                attr.getValuesToBeAdded().clear();\n+                attr.getValuesToBeAdded().addAll(values);\n+            }\n+        }\n+\n+        return input;\n+    }\n+}"},{"sha":"37160d800c2f841bcef1c986a563d64c41bf1275","filename":"core/src/test/resources/content.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9db5e6b44325aff5f9179f2f6910ea2a718f7744/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=9db5e6b44325aff5f9179f2f6910ea2a718f7744","patch":"@@ -171,6 +171,8 @@ under the License.\n            enumerationValues=\"M;F\"/>\n   <USchema name=\"aLong\" type=\"Long\"\n            mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <USchema name=\"makeItDouble\" type=\"Long\"\n+           mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n \n   <UDerSchema name=\"csvuserid\" expression=\"firstname + ',' + surname\"/>\n   <UDerSchema name=\"cn\" expression=\"surname + ', ' + firstname\"/>"}]}