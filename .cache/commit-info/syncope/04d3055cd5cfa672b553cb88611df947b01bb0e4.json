{"sha":"04d3055cd5cfa672b553cb88611df947b01bb0e4","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA0ZDMwNTVjZDVjZmE2NzJiNTUzY2I4ODYxMWRmOTQ3YjAxYmIwZTQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-08T09:29:32Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-08T09:29:32Z"},"message":"Trying again to make more robust report tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1443901 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5cc5ae26aa972b2f3c7895654a107c25840794be","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5cc5ae26aa972b2f3c7895654a107c25840794be"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/04d3055cd5cfa672b553cb88611df947b01bb0e4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/04d3055cd5cfa672b553cb88611df947b01bb0e4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/04d3055cd5cfa672b553cb88611df947b01bb0e4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/04d3055cd5cfa672b553cb88611df947b01bb0e4/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"e416bd32e8f7b4660fa4d4ce53ce8fbe8746ceb5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e416bd32e8f7b4660fa4d4ce53ce8fbe8746ceb5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e416bd32e8f7b4660fa4d4ce53ce8fbe8746ceb5"}],"stats":{"total":21,"additions":7,"deletions":14},"files":[{"sha":"c76dc822c000f4e7217d1617c65e79216f999d27","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04d3055cd5cfa672b553cb88611df947b01bb0e4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04d3055cd5cfa672b553cb88611df947b01bb0e4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=04d3055cd5cfa672b553cb88611df947b01bb0e4","patch":"@@ -294,7 +294,7 @@ public <T> T getObject(final Response response, final Class<T> type, final Objec\n     }\n \n     private <T> T getObjectSpring(final Response response, final Class<T> type) {\n-        return restTemplate.getForEntity(response.getLocation(), type).getBody();\n+        return restTemplate.getForObject(response.getLocation(), type);\n     }\n \n     public void setEnabledCXF(final boolean enabledCXF) {"},{"sha":"54464744928650a6ef6931e1e641208d7165fbef","filename":"core/src/test/java/org/apache/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04d3055cd5cfa672b553cb88611df947b01bb0e4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04d3055cd5cfa672b553cb88611df947b01bb0e4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=04d3055cd5cfa672b553cb88611df947b01bb0e4","patch":"@@ -24,9 +24,7 @@\n import static org.junit.Assert.fail;\n \n import java.util.List;\n-\n import javax.ws.rs.core.Response;\n-\n import org.apache.syncope.common.to.AccountPolicyTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n import org.apache.syncope.common.to.SyncPolicyTO;\n@@ -80,7 +78,6 @@ public void createWithException() {\n         PasswordPolicyTO policy = new PasswordPolicyTO(true);\n         policy.setSpecification(new PasswordPolicySpec());\n         policy.setDescription(\"global password policy\");\n-        System.out.println(policy.getType());\n \n         try {\n             createPolicy(policyService, PolicyType.PASSWORD, policy);"},{"sha":"a83f4ada385232e683e5072cd4e6e7b4f90674d8","filename":"core/src/test/java/org/apache/syncope/core/rest/ReportTestITCase.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04d3055cd5cfa672b553cb88611df947b01bb0e4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04d3055cd5cfa672b553cb88611df947b01bb0e4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java?ref=04d3055cd5cfa672b553cb88611df947b01bb0e4","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.ReportTO;\n import org.apache.syncope.common.types.ReportExecExportFormat;\n+import org.apache.syncope.common.types.ReportExecStatus;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -164,19 +165,18 @@ private void checkExport(final Long execId, final ReportExecExportFormat fmt) th\n \n         Object entity = response.getEntity();\n         assertTrue(entity instanceof InputStream);\n-        assertFalse(IOUtils.toString((InputStream) entity, \"UTF-8\").isEmpty());\n+        assertFalse(IOUtils.toString((InputStream) entity, SyncopeConstants.DEFAULT_ENCODING).isEmpty());\n     }\n \n     @Test\n     public void executeAndExport() throws IOException {\n         ReportTO reportTO = reportService.read(1L);\n         reportTO.setId(0);\n         reportTO.setName(\"executeAndExport\" + getUUIDString());\n+        reportTO.getExecutions().clear();\n         reportTO = createReport(reportTO);\n         assertNotNull(reportTO);\n \n-        int preExecs = reportTO.getExecutions().size();\n-\n         ReportExecTO execution = reportService.execute(reportTO.getId());\n         assertNotNull(execution);\n \n@@ -196,14 +196,10 @@ public void executeAndExport() throws IOException {\n             assertNotNull(reportTO.getExecutions());\n \n             i++;\n-        } while (preExecs == reportTO.getExecutions().size() && i < maxit);\n-        if (i == maxit) {\n-            throw new RuntimeException(\"Timeout when executing report \" + reportTO.getId());\n-        }\n-\n-        assertEquals(preExecs + 1, reportTO.getExecutions().size());\n+        } while (!ReportExecStatus.SUCCESS.name().equals(reportTO.getExecutions().get(0).getStatus()) && i < maxit);\n+        assertEquals(ReportExecStatus.SUCCESS.name(), reportTO.getExecutions().get(0).getStatus());\n \n-        long execId = reportTO.getExecutions().get(preExecs).getId();\n+        long execId = reportTO.getExecutions().get(0).getId();\n \n         checkExport(execId, ReportExecExportFormat.XML);\n         checkExport(execId, ReportExecExportFormat.HTML);"}]}