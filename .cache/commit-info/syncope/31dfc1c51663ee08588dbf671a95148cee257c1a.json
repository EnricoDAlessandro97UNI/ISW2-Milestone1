{"sha":"31dfc1c51663ee08588dbf671a95148cee257c1a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjMxZGZjMWM1MTY2M2VlMDg1ODhkYmY2NzFhOTUxNDhjZWUyNTdjMWE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-07-18T10:44:38Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-07-18T10:44:38Z"},"message":"[SYNCOPE-902] Feature provided","tree":{"sha":"d3f44c6fdeb565eea43f190bf356d6d4c4137f95","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d3f44c6fdeb565eea43f190bf356d6d4c4137f95"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/31dfc1c51663ee08588dbf671a95148cee257c1a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/31dfc1c51663ee08588dbf671a95148cee257c1a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/31dfc1c51663ee08588dbf671a95148cee257c1a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/31dfc1c51663ee08588dbf671a95148cee257c1a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8347a702b08b1c782dbaefd66b15a9914f7a4fca","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8347a702b08b1c782dbaefd66b15a9914f7a4fca","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8347a702b08b1c782dbaefd66b15a9914f7a4fca"}],"stats":{"total":432,"additions":316,"deletions":116},"files":[{"sha":"3c46a9e9b25537b0a5905b9f8ed16b77aa4eb7a3","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31dfc1c51663ee08588dbf671a95148cee257c1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31dfc1c51663ee08588dbf671a95148cee257c1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java?ref=31dfc1c51663ee08588dbf671a95148cee257c1a","patch":"@@ -137,7 +137,7 @@ protected AbstractSearchPanel(\n \n         final MultiFieldPanel.Builder<SearchClause> searchView = new MultiFieldPanel.Builder<SearchClause>(model) {\n \n-            private static final long serialVersionUID = 1L;\n+            private static final long serialVersionUID = 1343431509987473047L;\n \n             @Override\n             protected SearchClause newModelObject() {"},{"sha":"91ed3189a492c19793c0979c34a314375e4892be","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/GroupSearchPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31dfc1c51663ee08588dbf671a95148cee257c1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31dfc1c51663ee08588dbf671a95148cee257c1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java?ref=31dfc1c51663ee08588dbf671a95148cee257c1a","patch":"@@ -58,9 +58,10 @@ protected void populate() {\n \n             @Override\n             protected List<SearchClause.Type> load() {\n-                final List<SearchClause.Type> result = new ArrayList<>();\n+                List<SearchClause.Type> result = new ArrayList<>();\n                 result.add(SearchClause.Type.ATTRIBUTE);\n                 result.add(SearchClause.Type.RESOURCE);\n+                result.add(SearchClause.Type.GROUP_MEMBER);\n                 return result;\n             }\n         };"},{"sha":"9007485f0f8e2277a056186679c5724e7ff1707e","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClause.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31dfc1c51663ee08588dbf671a95148cee257c1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClause.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31dfc1c51663ee08588dbf671a95148cee257c1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClause.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClause.java?ref=31dfc1c51663ee08588dbf671a95148cee257c1a","patch":"@@ -39,6 +39,7 @@ public enum Type {\n \n         ATTRIBUTE,\n         GROUP_MEMBERSHIP,\n+        GROUP_MEMBER,\n         ROLE_MEMBERSHIP,\n         RESOURCE,\n         RELATIONSHIP;"},{"sha":"0db39f4c12a0162d00758797f703c20bf6f342e1","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31dfc1c51663ee08588dbf671a95148cee257c1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31dfc1c51663ee08588dbf671a95148cee257c1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java?ref=31dfc1c51663ee08588dbf671a95148cee257c1a","patch":"@@ -152,6 +152,7 @@ protected List<Comparator> load() {\n \n                     case ROLE_MEMBERSHIP:\n                     case GROUP_MEMBERSHIP:\n+                    case GROUP_MEMBER:\n                     case RESOURCE:\n                         return Arrays.asList(\n                                 SearchClause.Comparator.EQUALS,\n@@ -445,6 +446,12 @@ private void setFieldAccess(\n                     value.setModelObject(StringUtils.EMPTY);\n                     break;\n \n+                case GROUP_MEMBER:\n+                    value.setEnabled(true);\n+                    property.setEnabled(false);\n+                    property.setModelObject(null);\n+                    break;\n+\n                 case RESOURCE:\n                     property.setChoiceRenderer(new DefaultChoiceRender());\n                     value.setEnabled(false);\n@@ -538,6 +545,20 @@ public Object getDisplayValue(final SearchClause.Comparator object) {\n                                 display = StringUtils.EMPTY;\n                         }\n                         break;\n+                    case GROUP_MEMBER:\n+                        switch (object) {\n+                            case EQUALS:\n+                                display = \"WITH\";\n+                                break;\n+\n+                            case NOT_EQUALS:\n+                                display = \"NOT WITH\";\n+                                break;\n+\n+                            default:\n+                                display = StringUtils.EMPTY;\n+                        }\n+                        break;\n                     case ROLE_MEMBERSHIP:\n                     case RESOURCE:\n                         switch (object) {"},{"sha":"b1fc298deabac3e9b03170047f95a0d8ef696f7b","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java","status":"modified","additions":65,"deletions":42,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31dfc1c51663ee08588dbf671a95148cee257c1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31dfc1c51663ee08588dbf671a95148cee257c1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java?ref=31dfc1c51663ee08588dbf671a95148cee257c1a","patch":"@@ -33,6 +33,7 @@\n import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.AnyObjectFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.SpecialAttr;\n import org.apache.syncope.common.lib.search.SyncopeProperty;\n import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n@@ -74,7 +75,7 @@ public static List<SearchClause> getSearchClauses(final String fiql) {\n         return res;\n     }\n \n-    public static List<SearchClause> getSearchClauses(final SearchCondition<SearchBean> sc) {\n+    private static List<SearchClause> getSearchClauses(final SearchCondition<SearchBean> sc) {\n         List<SearchClause> res = new ArrayList<>();\n \n         if (sc.getStatement() == null) {\n@@ -86,7 +87,7 @@ public static List<SearchClause> getSearchClauses(final SearchCondition<SearchBe\n         return res;\n     }\n \n-    public static List<SearchClause> getCompoundSearchClause(final SearchCondition<SearchBean> sc) {\n+    private static List<SearchClause> getCompoundSearchClause(final SearchCondition<SearchBean> sc) {\n         List<SearchClause> res = new ArrayList<>();\n \n         for (SearchCondition<SearchBean> searchCondition : sc.getSearchConditions()) {\n@@ -107,15 +108,15 @@ public static List<SearchClause> getCompoundSearchClause(final SearchCondition<S\n         return res;\n     }\n \n-    public static SearchClause getPrimitiveSearchClause(final SearchCondition<SearchBean> sc) {\n+    private static SearchClause getPrimitiveSearchClause(final SearchCondition<SearchBean> sc) {\n         SearchClause res = new SearchClause();\n \n         String property = sc.getCondition().getKeySet().iterator().next();\n         res.setProperty(property);\n         String value = sc.getCondition().get(property);\n         res.setValue(value);\n \n-        LOG.info(\"Condition: \" + sc.getCondition());\n+        LOG.debug(\"Condition: \" + sc.getCondition());\n \n         if (SpecialAttr.ROLES.toString().equals(property)) {\n             res.setType(SearchClause.Type.ROLE_MEMBERSHIP);\n@@ -132,6 +133,9 @@ public static SearchClause getPrimitiveSearchClause(final SearchCondition<Search\n         } else if (SpecialAttr.RESOURCES.toString().equals(property)) {\n             res.setType(SearchClause.Type.RESOURCE);\n             res.setProperty(value);\n+        } else if (SpecialAttr.MEMBER.toString().equals(property)) {\n+            res.setType(SearchClause.Type.GROUP_MEMBER);\n+            res.setProperty(value);\n         } else {\n             res.setType(SearchClause.Type.ATTRIBUTE);\n         }\n@@ -189,12 +193,27 @@ public static String buildFIQL(final List<SearchClause> clauses, final AbstractF\n         boolean notTheFirst = false;\n \n         for (SearchClause clause : clauses) {\n-            if (clause.getType() != null && (SearchClause.Type.RELATIONSHIP == clause.getType()\n-                    || StringUtils.isNotBlank(clause.getProperty()))) {\n-                prevCondition = condition;\n+            prevCondition = condition;\n+\n+            switch (clause.getType()) {\n+                case GROUP_MEMBER:\n+                    switch (clause.getComparator()) {\n+                        case EQUALS:\n+                            condition = ((GroupFiqlSearchConditionBuilder) builder).\n+                                    withMembers(clause.getValue());\n+                            break;\n+\n+                        case NOT_EQUALS:\n+                            condition = ((GroupFiqlSearchConditionBuilder) builder).\n+                                    withoutMembers(clause.getValue());\n+                            break;\n+\n+                        default:\n+                    }\n+                    break;\n \n-                switch (clause.getType()) {\n-                    case GROUP_MEMBERSHIP:\n+                case GROUP_MEMBERSHIP:\n+                    if (StringUtils.isNotBlank(clause.getProperty())) {\n                         String groupKey = clause.getProperty().split(\" \")[0];\n \n                         if (builder instanceof UserFiqlSearchConditionBuilder) {\n@@ -206,15 +225,19 @@ public static String buildFIQL(final List<SearchClause> clauses, final AbstractF\n                                     ? ((AnyObjectFiqlSearchConditionBuilder) builder).inGroups(groupKey)\n                                     : ((AnyObjectFiqlSearchConditionBuilder) builder).notInGroups(groupKey);\n                         }\n-                        break;\n+                    }\n+                    break;\n \n-                    case RESOURCE:\n+                case RESOURCE:\n+                    if (StringUtils.isNotBlank(clause.getProperty())) {\n                         condition = clause.getComparator() == SearchClause.Comparator.EQUALS\n                                 ? builder.hasResources(clause.getProperty())\n                                 : builder.hasNotResources(clause.getProperty());\n-                        break;\n+                    }\n+                    break;\n \n-                    case ATTRIBUTE:\n+                case ATTRIBUTE:\n+                    if (StringUtils.isNotBlank(clause.getProperty())) {\n                         SyncopeProperty property = builder.is(clause.getProperty());\n                         switch (clause.getComparator()) {\n                             case IS_NULL:\n@@ -258,9 +281,11 @@ public static String buildFIQL(final List<SearchClause> clauses, final AbstractF\n                                 condition = property.equalTo(clause.getValue());\n                                 break;\n                         }\n-                        break;\n+                    }\n+                    break;\n \n-                    case ROLE_MEMBERSHIP:\n+                case ROLE_MEMBERSHIP:\n+                    if (StringUtils.isNotBlank(clause.getProperty())) {\n                         switch (clause.getComparator()) {\n                             case EQUALS:\n                                 condition = ((UserFiqlSearchConditionBuilder) builder).inRoles(clause.getProperty());\n@@ -271,30 +296,28 @@ public static String buildFIQL(final List<SearchClause> clauses, final AbstractF\n                             default:\n                                 break;\n                         }\n-                        break;\n-\n-                    case RELATIONSHIP:\n-                        String relationship = clause.getProperty();\n-                        String value = clause.getValue();\n+                    }\n+                    break;\n \n-                        // This condition could be avoided by providing a refactoring of the common lib\n+                case RELATIONSHIP:\n+                    if (StringUtils.isNotBlank(clause.getProperty())) {\n                         if (builder instanceof UserFiqlSearchConditionBuilder) {\n                             switch (clause.getComparator()) {\n                                 case IS_NOT_NULL:\n                                     condition = ((UserFiqlSearchConditionBuilder) builder).\n-                                            inRelationshipTypes(relationship);\n+                                            inRelationshipTypes(clause.getProperty());\n                                     break;\n                                 case IS_NULL:\n                                     condition = ((UserFiqlSearchConditionBuilder) builder).\n-                                            notInRelationshipTypes(relationship);\n+                                            notInRelationshipTypes(clause.getProperty());\n                                     break;\n                                 case EQUALS:\n                                     condition = ((UserFiqlSearchConditionBuilder) builder).\n-                                            inRelationships(value);\n+                                            inRelationships(clause.getValue());\n                                     break;\n                                 case NOT_EQUALS:\n                                     condition = ((UserFiqlSearchConditionBuilder) builder).\n-                                            notInRelationships(value);\n+                                            notInRelationships(clause.getValue());\n                                     break;\n                                 default:\n                                     break;\n@@ -303,41 +326,41 @@ public static String buildFIQL(final List<SearchClause> clauses, final AbstractF\n                             switch (clause.getComparator()) {\n                                 case IS_NOT_NULL:\n                                     condition = ((AnyObjectFiqlSearchConditionBuilder) builder).\n-                                            inRelationshipTypes(relationship);\n+                                            inRelationshipTypes(clause.getProperty());\n                                     break;\n                                 case IS_NULL:\n                                     condition = ((AnyObjectFiqlSearchConditionBuilder) builder).\n-                                            notInRelationshipTypes(relationship);\n+                                            notInRelationshipTypes(clause.getProperty());\n                                     break;\n                                 case EQUALS:\n                                     condition = ((AnyObjectFiqlSearchConditionBuilder) builder).\n-                                            inRelationships(value);\n+                                            inRelationships(clause.getValue());\n                                     break;\n                                 case NOT_EQUALS:\n                                     condition = ((AnyObjectFiqlSearchConditionBuilder) builder).\n-                                            notInRelationships(value);\n+                                            notInRelationships(clause.getValue());\n                                     break;\n                                 default:\n                                     break;\n                             }\n                         }\n-                        break;\n+                    }\n+                    break;\n \n-                    default:\n-                        break;\n-                }\n+                default:\n+                    break;\n+            }\n \n-                if (notTheFirst) {\n-                    if (clause.getOperator() == SearchClause.Operator.AND) {\n-                        condition = builder.and(prevCondition, condition);\n-                    }\n-                    if (clause.getOperator() == SearchClause.Operator.OR) {\n-                        condition = builder.or(prevCondition, condition);\n-                    }\n+            if (notTheFirst) {\n+                if (clause.getOperator() == SearchClause.Operator.AND) {\n+                    condition = builder.and(prevCondition, condition);\n+                }\n+                if (clause.getOperator() == SearchClause.Operator.OR) {\n+                    condition = builder.or(prevCondition, condition);\n                 }\n-\n-                notTheFirst = true;\n             }\n+\n+            notTheFirst = true;\n         }\n \n         String fiql = condition == null ? null : condition.query();"},{"sha":"f9235eb31d6b1d837d9c62c6f3e12524c958cf09","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/AnyPanel.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31dfc1c51663ee08588dbf671a95148cee257c1a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31dfc1c51663ee08588dbf671a95148cee257c1a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.properties?ref=31dfc1c51663ee08588dbf671a95148cee257c1a","patch":"@@ -14,4 +14,4 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-search.result=Filtered search for ${key}\n+search.result=${key} Search"},{"sha":"eede918b74b98ce8a84b630ea04dd266eb9551c8","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/AnyPanel_it.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31dfc1c51663ee08588dbf671a95148cee257c1a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31dfc1c51663ee08588dbf671a95148cee257c1a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_it.properties?ref=31dfc1c51663ee08588dbf671a95148cee257c1a","patch":"@@ -14,4 +14,4 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-search.result=Ricerca filtrata per ${key}\n+search.result=Ricerca ${key}"},{"sha":"f9235eb31d6b1d837d9c62c6f3e12524c958cf09","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/AnyPanel_pt_BR.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31dfc1c51663ee08588dbf671a95148cee257c1a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31dfc1c51663ee08588dbf671a95148cee257c1a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_pt_BR.properties?ref=31dfc1c51663ee08588dbf671a95148cee257c1a","patch":"@@ -14,4 +14,4 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-search.result=Filtered search for ${key}\n+search.result=${key} Search"},{"sha":"cfca07a44ece54531add54301caf0998dcb643d8","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/AnyPanel_ru.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31dfc1c51663ee08588dbf671a95148cee257c1a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31dfc1c51663ee08588dbf671a95148cee257c1a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_ru.properties?ref=31dfc1c51663ee08588dbf671a95148cee257c1a","patch":"@@ -15,5 +15,5 @@\n # specific language governing permissions and limitations\n # under the License.\n #\n-# search.result=Поиск по типу объекта ${key}\n-search.result=\\u041f\\u043e\\u0438\\u0441\\u043a \\u043f\\u043e \\u0442\\u0438\\u043f\\u0443 \\u043e\\u0431\\u044a\\u0435\\u043a\\u0442\\u043e\\u0432: ${key}\n+# search.result=\\u00d0\\u009f\\u00d0\\u00be\\u00d0\\u00b8\\u00d1\\u0081\\u00d0\\u00ba \\u00d0\\u00bf\\u00d0\\u00be \\u00d1\\u0082\\u00d0\\u00b8\\u00d0\\u00bf\\u00d1\\u0083 \\u00d0\\u00be\\u00d0\\u00b1\\u00d1\\u008a\\u00d0\\u00b5\\u00d0\\u00ba\\u00d1\\u0082\\u00d0\\u00b0 ${key}\n+search.result=${key} Search"},{"sha":"5e1b1d7d3183e5858dbda7e12cd97c51717d4450","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/GroupFiqlSearchConditionBuilder.java","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31dfc1c51663ee08588dbf671a95148cee257c1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31dfc1c51663ee08588dbf671a95148cee257c1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java?ref=31dfc1c51663ee08588dbf671a95148cee257c1a","patch":"@@ -44,7 +44,19 @@ public CompleteCondition isAssignable() {\n                 isAssignable();\n     }\n \n-    protected static class Builder extends AbstractFiqlSearchConditionBuilder.Builder\n+    public CompleteCondition withMembers(final String member, final String... moreMembers) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.MEMBER.toString()).\n+                withMembers(member, moreMembers);\n+    }\n+\n+    public CompleteCondition withoutMembers(final String member, final String... moreMembers) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.MEMBER.toString()).\n+                withoutMembers(member, moreMembers);\n+    }\n+\n+    protected class Builder extends AbstractFiqlSearchConditionBuilder.Builder\n             implements GroupProperty, CompleteCondition {\n \n         public Builder(final Map<String, String> properties) {\n@@ -68,5 +80,17 @@ public CompleteCondition isAssignable() {\n             return condition(FiqlParser.EQ, SpecialAttr.NULL);\n         }\n \n+        @Override\n+        public CompleteCondition withMembers(final String member, final String... moreMembers) {\n+            this.result = SpecialAttr.MEMBER.toString();\n+            return condition(FiqlParser.EQ, member, (Object[]) moreMembers);\n+        }\n+\n+        @Override\n+        public CompleteCondition withoutMembers(final String member, final String... moreMembers) {\n+            this.result = SpecialAttr.MEMBER.toString();\n+            return condition(FiqlParser.NEQ, member, (Object[]) moreMembers);\n+        }\n+\n     }\n }"},{"sha":"0325a7219ad0273603be94ae8f2ef61041754e44","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/GroupProperty.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31dfc1c51663ee08588dbf671a95148cee257c1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31dfc1c51663ee08588dbf671a95148cee257c1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupProperty.java?ref=31dfc1c51663ee08588dbf671a95148cee257c1a","patch":"@@ -24,4 +24,7 @@ public interface GroupProperty extends SyncopeProperty {\n \n     CompleteCondition isAssignable();\n \n+    CompleteCondition withMembers(String member, String... moreMembers);\n+\n+    CompleteCondition withoutMembers(String member, String... moreMembers);\n }"},{"sha":"d8b66723de303be90617d190e09163cb65b6b467","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/SpecialAttr.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31dfc1c51663ee08588dbf671a95148cee257c1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31dfc1c51663ee08588dbf671a95148cee257c1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java?ref=31dfc1c51663ee08588dbf671a95148cee257c1a","patch":"@@ -55,6 +55,10 @@ public enum SpecialAttr {\n      * Applies to users.\n      */\n     ROLES(\"$roles\"),\n+    /**\n+     * Applies to groups.\n+     */\n+    MEMBER(\"$member\"),\n     /**\n      * Applies to groups and any objects.\n      */"},{"sha":"677d65a8013944b0639c924394b8908ae7769a8e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/MemberCond.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31dfc1c51663ee08588dbf671a95148cee257c1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FMemberCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31dfc1c51663ee08588dbf671a95148cee257c1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FMemberCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FMemberCond.java?ref=31dfc1c51663ee08588dbf671a95148cee257c1a","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao.search;\n+\n+public class MemberCond extends AbstractSearchCond {\n+\n+    private static final long serialVersionUID = 1193754148321878685L;\n+\n+    private String member;\n+\n+    public String getMember() {\n+        return member;\n+    }\n+\n+    public void setMember(final String member) {\n+        this.member = member;\n+    }\n+\n+    @Override\n+    public boolean isValid() {\n+        return member != null;\n+    }\n+\n+}"},{"sha":"61cc664ce28f249d8e973fa98737d6103d74bc58","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/SearchCond.java","status":"modified","additions":22,"deletions":44,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31dfc1c51663ee08588dbf671a95148cee257c1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31dfc1c51663ee08588dbf671a95148cee257c1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java?ref=31dfc1c51663ee08588dbf671a95148cee257c1a","patch":"@@ -53,6 +53,8 @@ public enum Type {\n \n     private AssignableCond assignableCond;\n \n+    private MemberCond memberCond;\n+\n     private SearchCond leftNodeCond;\n \n     private SearchCond rightNodeCond;\n@@ -133,6 +135,15 @@ public static SearchCond getLeafCond(final AssignableCond assignableCond) {\n         return nodeCond;\n     }\n \n+    public static SearchCond getLeafCond(final MemberCond memberCond) {\n+        SearchCond nodeCond = new SearchCond();\n+\n+        nodeCond.type = Type.LEAF;\n+        nodeCond.memberCond = memberCond;\n+\n+        return nodeCond;\n+    }\n+\n     public static SearchCond getNotLeafCond(final AttributeCond attributeCond) {\n         SearchCond nodeCond = getLeafCond(attributeCond);\n         nodeCond.type = Type.NOT_LEAF;\n@@ -163,6 +174,12 @@ public static SearchCond getNotLeafCond(final ResourceCond resourceCond) {\n         return nodeCond;\n     }\n \n+    public static SearchCond getNotLeafCond(final MemberCond memberCond) {\n+        SearchCond nodeCond = getLeafCond(memberCond);\n+        nodeCond.type = Type.NOT_LEAF;\n+        return nodeCond;\n+    }\n+\n     public static SearchCond getNotLeafCond(final SearchCond nodeCond) {\n         nodeCond.type = Type.NOT_LEAF;\n         return nodeCond;\n@@ -218,90 +235,50 @@ public AnyCond getAnyCond() {\n         return anyCond;\n     }\n \n-    public void setAnyCond(final AnyCond anyCond) {\n-        this.anyCond = anyCond;\n-    }\n-\n     public AttributeCond getAttributeCond() {\n         return attributeCond;\n     }\n \n-    public void setAttributeCond(final AttributeCond attributeCond) {\n-        this.attributeCond = attributeCond;\n-    }\n-\n     public RelationshipCond getRelationshipCond() {\n         return relationshipCond;\n     }\n \n-    public void setRelationshipCond(final RelationshipCond relationshipCond) {\n-        this.relationshipCond = relationshipCond;\n-    }\n-\n     public RelationshipTypeCond getRelationshipTypeCond() {\n         return relationshipTypeCond;\n     }\n \n-    public void setRelationshipTypeCond(final RelationshipTypeCond relationshipTypeCond) {\n-        this.relationshipTypeCond = relationshipTypeCond;\n-    }\n-\n     public MembershipCond getMembershipCond() {\n         return membershipCond;\n     }\n \n-    public void setMembershipCond(final MembershipCond membershipCond) {\n-        this.membershipCond = membershipCond;\n-    }\n-\n     public RoleCond getRoleCond() {\n         return roleCond;\n     }\n \n-    public void setRoleCond(final RoleCond roleCond) {\n-        this.roleCond = roleCond;\n-    }\n-\n     public ResourceCond getResourceCond() {\n         return resourceCond;\n     }\n \n-    public void setResourceCond(final ResourceCond resourceCond) {\n-        this.resourceCond = resourceCond;\n-    }\n-\n     public AssignableCond getAssignableCond() {\n         return assignableCond;\n     }\n \n-    public void setAssignableCond(final AssignableCond assignableCond) {\n-        this.assignableCond = assignableCond;\n+    public MemberCond getMemberCond() {\n+        return memberCond;\n     }\n \n     public SearchCond getLeftNodeCond() {\n         return leftNodeCond;\n     }\n \n-    public void setLeftNodeCond(final SearchCond leftNodeCond) {\n-        this.leftNodeCond = leftNodeCond;\n-    }\n-\n     public SearchCond getRightNodeCond() {\n         return rightNodeCond;\n     }\n \n-    public void setRightNodeCond(final SearchCond rightNodeCond) {\n-        this.rightNodeCond = rightNodeCond;\n-    }\n-\n     public Type getType() {\n         return type;\n     }\n \n-    public void setType(final Type type) {\n-        this.type = type;\n-    }\n-\n     public String hasAnyTypeCond() {\n         String anyTypeName = null;\n \n@@ -346,13 +323,14 @@ public boolean isValid() {\n             case NOT_LEAF:\n                 isValid = (anyTypeCond != null || anyCond != null || attributeCond != null\n                         || relationshipCond != null || relationshipTypeCond != null || membershipCond != null\n-                        || roleCond != null || resourceCond != null || assignableCond != null)\n+                        || roleCond != null || resourceCond != null || assignableCond != null || memberCond != null)\n                         && (anyTypeCond == null || anyTypeCond.isValid())\n                         && (anyCond == null || anyCond.isValid())\n                         && (attributeCond == null || attributeCond.isValid())\n                         && (membershipCond == null || membershipCond.isValid())\n                         && (roleCond == null || roleCond.isValid())\n-                        && (resourceCond == null || resourceCond.isValid());\n+                        && (resourceCond == null || resourceCond.isValid())\n+                        && (memberCond == null || memberCond.isValid());\n                 break;\n \n             case AND:"},{"sha":"4e8374f8aa2bf234c40be1f95214907bdf5862de","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31dfc1c51663ee08588dbf671a95148cee257c1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31dfc1c51663ee08588dbf671a95148cee257c1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java?ref=31dfc1c51663ee08588dbf671a95148cee257c1a","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n \n@@ -132,6 +133,12 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n                             assignableCond.setRealmFullPath(realm);\n                             leaf = SearchCond.getLeafCond(assignableCond);\n                             break;\n+                            \n+                        case MEMBER:\n+                            MemberCond memberCond = new MemberCond();\n+                            memberCond.setMember(value);\n+                            leaf = SearchCond.getLeafCond(memberCond);\n+                            break;\n \n                         default:\n                             throw new IllegalArgumentException("},{"sha":"6141808a162c151a6c89aa26c2ea7384514d173e","filename":"core/persistence-api/src/test/java/org/apache/syncope/core/persistence/api/search/SearchCondConverterTest.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31dfc1c51663ee08588dbf671a95148cee257c1a/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31dfc1c51663ee08588dbf671a95148cee257c1a/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java?ref=31dfc1c51663ee08588dbf671a95148cee257c1a","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n import org.junit.Test;\n@@ -179,6 +180,18 @@ public void type() {\n         assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n     }\n \n+    @Test\n+    public void member() {\n+        String fiqlExpression = new GroupFiqlSearchConditionBuilder().withMembers(\"rossini\").query();\n+        assertEquals(SpecialAttr.MEMBER + \"==rossini\", fiqlExpression);\n+\n+        MemberCond mcond = new MemberCond();\n+        mcond.setMember(\"rossini\");\n+        SearchCond simpleCond = SearchCond.getLeafCond(mcond);\n+\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+    }\n+\n     @Test\n     public void and() {\n         String fiqlExpression = new UserFiqlSearchConditionBuilder()."},{"sha":"7c4ed1db462a206af98fc60b135f703ae7b9408f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":43,"deletions":9,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31dfc1c51663ee08588dbf671a95148cee257c1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31dfc1c51663ee08588dbf671a95148cee257c1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=31dfc1c51663ee08588dbf671a95148cee257c1a","patch":"@@ -56,6 +56,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -266,7 +267,7 @@ private StringBuilder buildSelect(final OrderBySupport orderBySupport) {\n \n     private StringBuilder buildWhere(final OrderBySupport orderBySupport, final AnyTypeKind typeKind) {\n         SearchSupport svs = new SearchSupport(typeKind);\n-        final StringBuilder where = new StringBuilder(\" u\");\n+        StringBuilder where = new StringBuilder(\" u\");\n         for (SearchSupport.SearchView searchView : orderBySupport.views) {\n             where.append(',');\n             if (searchView.name.equals(svs.attr().name)) {\n@@ -293,7 +294,7 @@ private StringBuilder buildWhere(final OrderBySupport orderBySupport, final AnyT\n     }\n \n     private StringBuilder buildOrderBy(final OrderBySupport orderBySupport) {\n-        final StringBuilder orderBy = new StringBuilder();\n+        StringBuilder orderBy = new StringBuilder();\n \n         for (OrderBySupport.Item obs : orderBySupport.items) {\n             orderBy.append(obs.orderBy).append(',');\n@@ -454,6 +455,9 @@ private StringBuilder getQuery(final SearchCond nodeCond, final List<Object> par\n                 } else if (nodeCond.getRoleCond() != null && AnyTypeKind.USER == svs.anyTypeKind()) {\n                     query.append(getQuery(nodeCond.getRoleCond(),\n                             nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n+                } else if (nodeCond.getMemberCond() != null && AnyTypeKind.GROUP == svs.anyTypeKind()) {\n+                    query.append(getQuery(nodeCond.getMemberCond(),\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 } else if (nodeCond.getResourceCond() != null) {\n                     query.append(getQuery(nodeCond.getResourceCond(),\n                             nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n@@ -538,7 +542,7 @@ private String getQuery(final RelationshipCond cond, final boolean not, final Li\n             query.append(\"any_id IN (\");\n         }\n \n-        query.append(\"SELECT DISTINCT any_id \").append(\"FROM \").\n+        query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.relationship().name).append(\" WHERE \").\n                 append(\"right_any_id=?\").append(setParameter(parameters, cond.getAnyObjectKey())).\n                 append(')');\n@@ -558,7 +562,7 @@ private String getQuery(final MembershipCond cond, final boolean not, final List\n             query.append(\"any_id IN (\");\n         }\n \n-        query.append(\"SELECT DISTINCT any_id \").append(\"FROM \").\n+        query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.membership().name).append(\" WHERE \").\n                 append(\"group_id=?\").append(setParameter(parameters, cond.getGroupKey())).\n                 append(')');\n@@ -569,7 +573,7 @@ private String getQuery(final MembershipCond cond, final boolean not, final List\n             query.append(\"OR any_id IN (\");\n         }\n \n-        query.append(\"SELECT DISTINCT any_id \").append(\"FROM \").\n+        query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.dyngroupmembership().name).append(\" WHERE \").\n                 append(\"group_id=?\").append(setParameter(parameters, cond.getGroupKey())).\n                 append(')');\n@@ -589,7 +593,7 @@ private String getQuery(final RoleCond cond, final boolean not, final List<Objec\n             query.append(\"any_id IN (\");\n         }\n \n-        query.append(\"SELECT DISTINCT any_id \").append(\"FROM \").\n+        query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.role().name).append(\" WHERE \").\n                 append(\"role_id=?\").append(setParameter(parameters, cond.getRoleKey())).\n                 append(')');\n@@ -600,7 +604,7 @@ private String getQuery(final RoleCond cond, final boolean not, final List<Objec\n             query.append(\"OR any_id IN (\");\n         }\n \n-        query.append(\"SELECT DISTINCT any_id \").append(\"FROM \").\n+        query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.dynrolemembership().name).append(\" WHERE \").\n                 append(\"role_id=?\").append(setParameter(parameters, cond.getRoleKey())).\n                 append(')');\n@@ -661,6 +665,37 @@ private String getQuery(final AssignableCond cond, final List<Object> parameters\n         return query.toString();\n     }\n \n+    private String getQuery(final MemberCond cond, final boolean not, final List<Object> parameters,\n+            final SearchSupport svs) {\n+\n+        StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n+                append(svs.field().name).append(\" WHERE \");\n+\n+        if (not) {\n+            query.append(\"any_id NOT IN (\");\n+        } else {\n+            query.append(\"any_id IN (\");\n+        }\n+\n+        query.append(\"SELECT DISTINCT group_id AS any_id FROM \").\n+                append(new SearchSupport(AnyTypeKind.USER).membership().name).append(\" WHERE \").\n+                append(\"any_id=?\").append(setParameter(parameters, cond.getMember())).\n+                append(')');\n+\n+        if (not) {\n+            query.append(\" AND any_id NOT IN (\");\n+        } else {\n+            query.append(\" OR any_id IN (\");\n+        }\n+\n+        query.append(\"SELECT DISTINCT group_id AS any_id FROM \").\n+                append(new SearchSupport(AnyTypeKind.ANY_OBJECT).membership().name).append(\" WHERE \").\n+                append(\"any_id=?\").append(setParameter(parameters, cond.getMember())).\n+                append(')');\n+\n+        return query.toString();\n+    }\n+\n     private void fillAttributeQuery(final StringBuilder query, final PlainAttrValue attrValue,\n             final PlainSchema schema, final AttributeCond cond, final boolean not,\n             final List<Object> parameters, final SearchSupport svs) {\n@@ -803,7 +838,6 @@ private String getQuery(final AttributeCond cond, final boolean not, final List<\n         return query.toString();\n     }\n \n-    @SuppressWarnings(\"rawtypes\")\n     private String getQuery(final AnyCond cond, final boolean not, final List<Object> parameters,\n             final SearchSupport svs) {\n \n@@ -878,7 +912,7 @@ private String getQuery(final AnyCond cond, final boolean not, final List<Object\n             }\n         }\n \n-        final StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n+        StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n \n         fillAttributeQuery(query, attrValue, schema, cond, not, parameters, svs);"},{"sha":"5d64425daeb2139ba0e0081a242f21a0b5b1dfc7","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31dfc1c51663ee08588dbf671a95148cee257c1a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31dfc1c51663ee08588dbf671a95148cee257c1a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=31dfc1c51663ee08588dbf671a95148cee257c1a","patch":"@@ -45,6 +45,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -520,6 +521,19 @@ public boolean evaluate(final AnyObject anyObject) {\n         }));\n     }\n \n+    @Test\n+    public void member() {\n+        MemberCond memberCond = new MemberCond();\n+        memberCond.setMember(\"1417acbe-cbf6-4277-9372-e75e04f97000\");\n+        SearchCond searchCondition = SearchCond.getLeafCond(memberCond);\n+        assertTrue(searchCondition.isValid());\n+\n+        List<Group> groups = searchDAO.search(searchCondition, AnyTypeKind.GROUP);\n+        assertEquals(2, groups.size());\n+        assertTrue(groups.contains(groupDAO.findByName(\"root\")));\n+        assertTrue(groups.contains(groupDAO.findByName(\"otherchild\")));\n+    }\n+\n     @Test\n     public void issue202() {\n         ResourceCond ws2 = new ResourceCond();"},{"sha":"ce3bc3a1f4811059ae7741c831c28ae1005ef674","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":50,"deletions":13,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31dfc1c51663ee08588dbf671a95148cee257c1a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31dfc1c51663ee08588dbf671a95148cee257c1a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=31dfc1c51663ee08588dbf671a95148cee257c1a","patch":"@@ -48,7 +48,8 @@ public class SearchITCase extends AbstractITCase {\n     @Test\n     public void searchUser() {\n         // LIKE\n-        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().\n                         is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query()).build());\n         assertNotNull(matchingUsers);\n@@ -77,7 +78,8 @@ public boolean evaluate(final UserTO user) {\n \n     @Test\n     public void searchByUsernameAndKey() {\n-        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().\n                         is(\"username\").equalTo(\"rossini\").and(\"key\").lessThan(2).query()).build());\n         assertNotNull(matchingUsers);\n@@ -100,7 +102,8 @@ public void searchByGroupNameAndKey() {\n \n     @Test\n     public void searchByGroup() {\n-        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().\n                         inGroups(\"37d15e4c-cdc1-460b-a591-8505c8133806\").query()).\n                 build());\n@@ -123,7 +126,8 @@ public void searchByDynGroup() {\n         group = createGroup(group).getEntity();\n         assertNotNull(group);\n \n-        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(group.getKey()).query()).\n                 build());\n         assertNotNull(matchingUsers);\n@@ -140,7 +144,8 @@ public boolean evaluate(final UserTO user) {\n \n     @Test\n     public void searchByRole() {\n-        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(\"Other\").query()).\n                 build());\n         assertNotNull(matchingUsers);\n@@ -163,7 +168,8 @@ public void searchByDynRole() {\n         role = getObject(response.getLocation(), RoleService.class, RoleTO.class);\n         assertNotNull(role);\n \n-        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(role.getKey()).query()).\n                 build());\n         assertNotNull(matchingUsers);\n@@ -180,7 +186,8 @@ public boolean evaluate(final UserTO user) {\n \n     @Test\n     public void searchUserByResourceName() {\n-        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().hasResources(RESOURCE_NAME_MAPPINGS2).query()).\n                 build());\n         assertNotNull(matchingUsers);\n@@ -198,7 +205,8 @@ public boolean evaluate(final UserTO user) {\n     @Test\n     public void paginatedSearch() {\n         // LIKE\n-        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().\n                         is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query()).page(1).size(2).build());\n         assertNotNull(matchingUsers);\n@@ -253,7 +261,8 @@ public void searchByRelationshipAnyCond() {\n \n     @Test\n     public void nested() {\n-        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(\"((fullname==*o*,fullname==*i*);$resources!=ws-target-resource-1)\").page(1).size(2).build());\n         assertNotNull(matchingUsers);\n \n@@ -265,7 +274,8 @@ public void nested() {\n \n     @Test\n     public void searchByType() {\n-        PagedResult<AnyObjectTO> matching = anyObjectService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<AnyObjectTO> matching = anyObjectService.search(new AnyQuery.Builder().realm(\n+                SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").query()).build());\n         assertNotNull(matching);\n \n@@ -283,7 +293,8 @@ public void searchByType() {\n \n     @Test\n     public void searchByRelationship() {\n-        PagedResult<AnyObjectTO> anyObjects = anyObjectService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<AnyObjectTO> anyObjects = anyObjectService.search(new AnyQuery.Builder().realm(\n+                SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").\n                         inRelationships(\"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\").query()).\n                 build());\n@@ -312,7 +323,8 @@ public boolean evaluate(final UserTO user) {\n \n     @Test\n     public void searchByRelationshipType() {\n-        PagedResult<AnyObjectTO> anyObjects = anyObjectService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<AnyObjectTO> anyObjects = anyObjectService.search(new AnyQuery.Builder().realm(\n+                SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").\n                         inRelationshipTypes(\"neighborhood\").query()).\n                 build());\n@@ -381,9 +393,34 @@ public boolean evaluate(final AnyObjectTO anyObject) {\n         }));\n     }\n \n+    @Test\n+    public void member() {\n+        PagedResult<GroupTO> groups = groupService.search(new AnyQuery.Builder().realm(\"/\").page(1).size(1000).\n+                fiql(SyncopeClient.getGroupSearchConditionBuilder().\n+                        withMembers(\"1417acbe-cbf6-4277-9372-e75e04f97000\").query()).\n+                build());\n+        assertNotNull(groups);\n+\n+        assertTrue(IterableUtils.matchesAny(groups.getResult(), new Predicate<GroupTO>() {\n+\n+            @Override\n+            public boolean evaluate(final GroupTO group) {\n+                return \"root\".equals(group.getName());\n+            }\n+        }));\n+        assertTrue(IterableUtils.matchesAny(groups.getResult(), new Predicate<GroupTO>() {\n+\n+            @Override\n+            public boolean evaluate(final GroupTO group) {\n+                return \"otherchild\".equals(group.getName());\n+            }\n+        }));\n+    }\n+\n     @Test\n     public void orderBy() {\n-        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"userId\").equalTo(\"*@apache.org\").query()).\n                 orderBy(SyncopeClient.getOrderByClauseBuilder().asc(\"status\").desc(\"firstname\").build()).build());\n         assertNotNull(matchingUsers);"}]}