{"sha":"3690e43429969ff5b2bbc1ed5bcb9a427937da32","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM2OTBlNDM0Mjk5NjlmZjViMmJiYzFlZDViY2I5YTQyNzkzN2RhMzI=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-19T12:45:54Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-19T12:45:54Z"},"message":"Fixes issue 163\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247151 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e1e30a7f08fcda7949927f397a9e2ba33a8b9fe0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e1e30a7f08fcda7949927f397a9e2ba33a8b9fe0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3690e43429969ff5b2bbc1ed5bcb9a427937da32","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3690e43429969ff5b2bbc1ed5bcb9a427937da32","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3690e43429969ff5b2bbc1ed5bcb9a427937da32","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3690e43429969ff5b2bbc1ed5bcb9a427937da32/comments","author":null,"committer":null,"parents":[{"sha":"5ba82ce7e11ed0c77ef7f5cd018f67a9564c536b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5ba82ce7e11ed0c77ef7f5cd018f67a9564c536b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5ba82ce7e11ed0c77ef7f5cd018f67a9564c536b"}],"stats":{"total":1187,"additions":1009,"deletions":178},"files":[{"sha":"9f9b2f79c720dd5621e7bc3c521618d2a86aa809","filename":"client/src/main/java/org/syncope/client/mod/AccountPolicyMod.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAccountPolicyMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAccountPolicyMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAccountPolicyMod.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -14,22 +14,22 @@\n  */\n package org.syncope.client.mod;\n \n-import org.syncope.types.AccountPolicy;\n+import org.syncope.types.AccountPolicySpec;\n \n public class AccountPolicyMod extends PolicyMod {\n \n     private static final long serialVersionUID = 5410030012094184828L;\n \n-    private AccountPolicy specification;\n+    private AccountPolicySpec specification;\n \n     public AccountPolicyMod() {\n     }\n \n-    public void setSpecification(AccountPolicy specification) {\n+    public void setSpecification(AccountPolicySpec specification) {\n         this.specification = specification;\n     }\n \n-    public AccountPolicy getSpecification() {\n+    public AccountPolicySpec getSpecification() {\n         return specification;\n     }\n }"},{"sha":"53ae33480a44d3d6a078430d25a5deb902dc3d83","filename":"client/src/main/java/org/syncope/client/mod/PasswordPolicyMod.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPasswordPolicyMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPasswordPolicyMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPasswordPolicyMod.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -14,22 +14,22 @@\n  */\n package org.syncope.client.mod;\n \n-import org.syncope.types.PasswordPolicy;\n+import org.syncope.types.PasswordPolicySpec;\n \n public class PasswordPolicyMod extends PolicyMod {\n \n     private static final long serialVersionUID = -7948423277026280828L;\n \n-    private PasswordPolicy specification;\n+    private PasswordPolicySpec specification;\n \n     public PasswordPolicyMod() {\n     }\n \n-    public void setSpecification(PasswordPolicy specification) {\n+    public void setSpecification(PasswordPolicySpec specification) {\n         this.specification = specification;\n     }\n \n-    public PasswordPolicy getSpecification() {\n+    public PasswordPolicySpec getSpecification() {\n         return specification;\n     }\n }"},{"sha":"7cdbea4fcc3dac05889aa83bfc91123fafb41ad3","filename":"client/src/main/java/org/syncope/client/mod/ReferenceMod.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FReferenceMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FReferenceMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FReferenceMod.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -0,0 +1,38 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.mod;\n+\n+import org.syncope.client.AbstractBaseBean;\n+\n+/**\n+ * This class is used to specify the willing to modify an external reference id.\n+ */\n+public class ReferenceMod extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -4188817853738067677L;\n+\n+    private Long id;\n+\n+    public ReferenceMod() {\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+}"},{"sha":"9afaba30d4155edc5a1f449357619920890fb5de","filename":"client/src/main/java/org/syncope/client/mod/RoleMod.java","status":"modified","additions":37,"deletions":8,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FRoleMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FRoleMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FRoleMod.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -16,7 +16,6 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.syncope.client.to.PasswordPolicyTO;\n \n public class RoleMod extends AbstractAttributableMod {\n \n@@ -30,9 +29,15 @@ public class RoleMod extends AbstractAttributableMod {\n \n     private Boolean inheritVirtualAttributes;\n \n+    private Boolean inheritAccountPolicy;\n+\n+    private Boolean inheritPasswordPolicy;\n+\n     private List<String> entitlements;\n \n-    private PasswordPolicyTO passwordPolicy;\n+    private ReferenceMod passwordPolicy;\n+\n+    private ReferenceMod accountPolicy;\n \n     public RoleMod() {\n         super();\n@@ -71,34 +76,58 @@ public String getName() {\n         return name;\n     }\n \n-    public void setName(String name) {\n+    public void setName(final String name) {\n         this.name = name;\n     }\n \n-    public boolean addEntitlement(String entitlement) {\n+    public boolean addEntitlement(final String entitlement) {\n         return entitlements.add(entitlement);\n     }\n \n-    public boolean removeEntitlement(String entitlement) {\n+    public boolean removeEntitlement(final String entitlement) {\n         return entitlements.remove(entitlement);\n     }\n \n     public List<String> getEntitlements() {\n         return entitlements;\n     }\n \n-    public void setEntitlements(List<String> entitlements) {\n+    public void setEntitlements(final List<String> entitlements) {\n         this.entitlements.clear();\n         if (entitlements != null && !entitlements.isEmpty()) {\n             this.entitlements.addAll(entitlements);\n         }\n     }\n \n-    public PasswordPolicyTO getPasswordPolicy() {\n+    public ReferenceMod getPasswordPolicy() {\n         return passwordPolicy;\n     }\n \n-    public void setPasswordPolicy(PasswordPolicyTO passwordPolicy) {\n+    public void setPasswordPolicy(final ReferenceMod passwordPolicy) {\n         this.passwordPolicy = passwordPolicy;\n     }\n+\n+    public Boolean getInheritPasswordPolicy() {\n+        return inheritPasswordPolicy;\n+    }\n+\n+    public void setInheritPasswordPolicy(final Boolean inheritPasswordPolicy) {\n+        this.inheritPasswordPolicy = inheritPasswordPolicy;\n+    }\n+\n+    public ReferenceMod getAccountPolicy() {\n+        return accountPolicy;\n+    }\n+\n+    public void setAccountPolicy(final ReferenceMod accountPolicy) {\n+        this.accountPolicy = accountPolicy;\n+    }\n+\n+    public Boolean getInheritAccountPolicy() {\n+        return inheritAccountPolicy;\n+    }\n+\n+    public void setInheritAccountPolicy(final Boolean inheritAccountPolicy) {\n+        this.inheritAccountPolicy = inheritAccountPolicy;\n+    }\n }"},{"sha":"95ac4e06ea0a5d49c3c526c3d7ce4000f30c0b53","filename":"client/src/main/java/org/syncope/client/mod/SyncPolicyMod.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FSyncPolicyMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FSyncPolicyMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FSyncPolicyMod.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -14,22 +14,22 @@\n  */\n package org.syncope.client.mod;\n \n-import org.syncope.types.SyncPolicy;\n+import org.syncope.types.SyncPolicySpec;\n \n public class SyncPolicyMod extends PolicyMod {\n \n     private static final long serialVersionUID = 7438813240484903242L;\n \n-    private SyncPolicy specification;\n+    private SyncPolicySpec specification;\n \n     public SyncPolicyMod() {\n     }\n \n-    public void setSpecification(SyncPolicy specification) {\n+    public void setSpecification(SyncPolicySpec specification) {\n         this.specification = specification;\n     }\n \n-    public SyncPolicy getSpecification() {\n+    public SyncPolicySpec getSpecification() {\n         return specification;\n     }\n }"},{"sha":"80cb5a7c6783bbe98deb5bc2dc6f242e9ccdc124","filename":"client/src/main/java/org/syncope/client/to/AccountPolicyTO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAccountPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAccountPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAccountPolicyTO.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -14,24 +14,24 @@\n  */\n package org.syncope.client.to;\n \n-import org.syncope.types.AccountPolicy;\n+import org.syncope.types.AccountPolicySpec;\n import org.syncope.types.PolicyType;\n \n public class AccountPolicyTO extends PolicyTO {\n \n     private static final long serialVersionUID = -1557150042828800134L;\n \n-    private AccountPolicy specification;\n+    private AccountPolicySpec specification;\n \n     public AccountPolicyTO() {\n         setType(PolicyType.ACCOUNT);\n     }\n \n-    public void setSpecification(final AccountPolicy specification) {\n+    public void setSpecification(final AccountPolicySpec specification) {\n         this.specification = specification;\n     }\n \n-    public AccountPolicy getSpecification() {\n+    public AccountPolicySpec getSpecification() {\n         return specification;\n     }\n }"},{"sha":"c260f21659c0d0d70be949a152c690a95f818ce8","filename":"client/src/main/java/org/syncope/client/to/PasswordPolicyTO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPasswordPolicyTO.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -14,24 +14,24 @@\n  */\n package org.syncope.client.to;\n \n-import org.syncope.types.PasswordPolicy;\n+import org.syncope.types.PasswordPolicySpec;\n import org.syncope.types.PolicyType;\n \n public class PasswordPolicyTO extends PolicyTO {\n \n     private static final long serialVersionUID = -5606086441294799690L;\n \n-    private PasswordPolicy specification;\n+    private PasswordPolicySpec specification;\n \n     public PasswordPolicyTO() {\n         setType(PolicyType.PASSWORD);\n     }\n \n-    public void setSpecification(final PasswordPolicy specification) {\n+    public void setSpecification(final PasswordPolicySpec specification) {\n         this.specification = specification;\n     }\n \n-    public PasswordPolicy getSpecification() {\n+    public PasswordPolicySpec getSpecification() {\n         return specification;\n     }\n }"},{"sha":"fc3b4abc43ab1e9e90c97407b1e9549acdca00b0","filename":"client/src/main/java/org/syncope/client/to/ResourceTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -63,6 +63,8 @@ public class ResourceTO extends AbstractBaseBean {\n \n     private Long passwordPolicy;\n \n+    private Long accountPolicy;\n+\n     private Set<ConnConfProperty> connectorConfigurationProperties;\n \n     public ResourceTO() {\n@@ -164,6 +166,14 @@ public void setPasswordPolicy(Long passwordPolicy) {\n         this.passwordPolicy = passwordPolicy;\n     }\n \n+    public Long getAccountPolicy() {\n+        return accountPolicy;\n+    }\n+\n+    public void setAccountPolicy(Long accountPolicy) {\n+        this.accountPolicy = accountPolicy;\n+    }\n+\n     public Set<ConnConfProperty> getConnectorConfigurationProperties() {\n         return connectorConfigurationProperties;\n     }"},{"sha":"2cc3789988abec31d17e95f566ac5e2afeb886bb","filename":"client/src/main/java/org/syncope/client/to/RoleTO.java","status":"modified","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -33,10 +33,16 @@ public class RoleTO extends AbstractAttributableTO {\n \n     private boolean inheritVirtualAttributes;\n \n+    private boolean inheritPasswordPolicy;\n+\n+    private boolean inheritAccountPolicy;\n+\n     private List<String> entitlements;\n \n     private Long passwordPolicy;\n \n+    private Long accountPolicy;\n+\n     public RoleTO() {\n         entitlements = new ArrayList<String>();\n     }\n@@ -110,6 +116,40 @@ public void setPasswordPolicy(Long passwordPolicy) {\n         this.passwordPolicy = passwordPolicy;\n     }\n \n+    public boolean isInheritPasswordPolicy() {\n+        return inheritPasswordPolicy;\n+    }\n+\n+    /**\n+     * Specify if password policy must be inherited.\n+     * In this case eventual passwordPolicy occurrence will be ignored.\n+     * @param inheritPasswordPolicy 'true' to inherit policy, false otherwise.\n+     */\n+    public void setInheritPasswordPolicy(boolean inheritPasswordPolicy) {\n+        this.inheritPasswordPolicy = inheritPasswordPolicy;\n+    }\n+\n+    public Long getAccountPolicy() {\n+        return accountPolicy;\n+    }\n+\n+    public void setAccountPolicy(Long accountPolicy) {\n+        this.accountPolicy = accountPolicy;\n+    }\n+\n+    public boolean isInheritAccountPolicy() {\n+        return inheritAccountPolicy;\n+    }\n+\n+    /**\n+     * Specify if account policy must be inherited.\n+     * In this case eventual accountPolicy occurrence will be ignored.\n+     * @param inheritAccountPolicy 'true' to inherit policy, false otherwise.\n+     */\n+    public void setInheritAccountPolicy(boolean inheritAccountPolicy) {\n+        this.inheritAccountPolicy = inheritAccountPolicy;\n+    }\n+\n     public String getDisplayName() {\n         return getId() + \" \" + getName();\n     }"},{"sha":"f78153b0c48fa13948505c747d0af2f283287249","filename":"client/src/main/java/org/syncope/client/to/SyncPolicyTO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSyncPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSyncPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSyncPolicyTO.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -15,23 +15,23 @@\n package org.syncope.client.to;\n \n import org.syncope.types.PolicyType;\n-import org.syncope.types.SyncPolicy;\n+import org.syncope.types.SyncPolicySpec;\n \n public class SyncPolicyTO extends PolicyTO {\n \n     private static final long serialVersionUID = 993024634238024242L;\n \n-    private SyncPolicy specification;\n+    private SyncPolicySpec specification;\n \n     public SyncPolicyTO() {\n         setType(PolicyType.SYNC);\n     }\n \n-    public void setSpecification(final SyncPolicy specification) {\n+    public void setSpecification(final SyncPolicySpec specification) {\n         this.specification = specification;\n     }\n \n-    public SyncPolicy getSpecification() {\n+    public SyncPolicySpec getSpecification() {\n         return specification;\n     }\n }"},{"sha":"0c06428b99fd090a74a31c05dfe86f4b21886f69","filename":"client/src/main/java/org/syncope/types/AbstractPolicySpec.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAbstractPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAbstractPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAbstractPolicySpec.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -16,10 +16,10 @@\n \n import org.syncope.client.AbstractBaseBean;\n \n-public class AbstractPolicy extends AbstractBaseBean {\n+public class AbstractPolicySpec extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 2740439904103716653L;\n \n-    public AbstractPolicy() {\n+    public AbstractPolicySpec() {\n     }\n }","previous_filename":"client/src/main/java/org/syncope/types/AbstractPolicy.java"},{"sha":"f516245659b85fabc7f7b3f94bef407f9b46c70a","filename":"client/src/main/java/org/syncope/types/AccountPolicySpec.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAccountPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAccountPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAccountPolicySpec.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -14,7 +14,7 @@\n  */\n package org.syncope.types;\n \n-public class AccountPolicy extends AbstractPolicy {\n+public class AccountPolicySpec extends AbstractPolicySpec {\n \n     private static final long serialVersionUID = -6325902340423910118L;\n     // TODO: To be defined","previous_filename":"client/src/main/java/org/syncope/types/AccountPolicy.java"},{"sha":"64dca3cb6f6d0d7be39de0e78da801742f22facc","filename":"client/src/main/java/org/syncope/types/EntityViolationType.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -39,7 +39,13 @@ public enum EntityViolationType {\n     \"org.syncope.core.validation.synctask.invalid\"),\n     InvalidPassword(\n     \"org.syncope.core.validation.password.invalid\"),\n-    InvalidPolicy(\n+    InvalidPolicy(// not throwable using rest interface because the TO is typed\n+    \"org.syncope.core.validation.policy.invalid\"),\n+    InvalidPasswordPolicy(\n+    \"org.syncope.core.validation.policy.invalid\"),\n+    InvalidAccountPolicy(\n+    \"org.syncope.core.validation.policy.invalid\"),\n+    InvalidSyncPolicy(\n     \"org.syncope.core.validation.policy.invalid\"),\n     InvalidSchemaMapping(\n     \"org.syncope.core.validation.mapping.invalid\");"},{"sha":"c9dacec5f47634dc67b4bd8004dbf8523d075158","filename":"client/src/main/java/org/syncope/types/PasswordPolicySpec.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPasswordPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPasswordPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPasswordPolicySpec.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -17,7 +17,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-public class PasswordPolicy extends AbstractPolicy {\n+public class PasswordPolicySpec extends AbstractPolicySpec {\n \n     private static final long serialVersionUID = -7988778083915548547L;\n ","previous_filename":"client/src/main/java/org/syncope/types/PasswordPolicy.java"},{"sha":"4a98521b30a0317aaaf713866c2f4437e1fc9c7a","filename":"client/src/main/java/org/syncope/types/SyncPolicySpec.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncPolicySpec.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -14,7 +14,7 @@\n  */\n package org.syncope.types;\n \n-public class SyncPolicy extends AbstractPolicy {\n+public class SyncPolicySpec extends AbstractPolicySpec {\n \n     private static final long serialVersionUID = -3144027171719498127L;\n ","previous_filename":"client/src/main/java/org/syncope/types/SyncPolicy.java"},{"sha":"574f3dc13946b2f05e1f0e8e24f08b95c2ec3310","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -28,7 +28,13 @@ public enum SyncopeClientExceptionType {\n     InvalidConnInstance(\n     \"Syncope.InvalidConnInstance\",\n     \"Syncope.InvalidConnInstance.message\"),\n-    InvalidPolicy(\n+    InvalidPasswordPolicy(\n+    \"Syncope.InvalidPolicy\",\n+    \"Syncope.InvalidPolicy.reason\"),\n+    InvalidAccountPolicy(\n+    \"Syncope.InvalidPolicy\",\n+    \"Syncope.InvalidPolicy.reason\"),\n+    InvalidSyncPolicy(\n     \"Syncope.InvalidPolicy\",\n     \"Syncope.InvalidPolicy.reason\"),\n     IncompletePropagationTaskExec("},{"sha":"1ead99414ab53785d5de13eada4bceb22237057b","filename":"client/src/test/java/org/syncope/client/test/JSONTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -30,7 +30,7 @@\n import org.syncope.client.to.SchemaTO;\n import org.syncope.client.to.SyncPolicyTO;\n import org.syncope.types.PolicyType;\n-import org.syncope.types.SyncPolicy;\n+import org.syncope.types.SyncPolicySpec;\n \n public class JSONTest {\n "},{"sha":"69c35ee8b727dba5e3e0a48c909da15e692e74ae","filename":"console/src/main/java/org/syncope/console/pages/PasswordPolicyModalPage.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPasswordPolicyModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPasswordPolicyModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPasswordPolicyModalPage.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -30,7 +30,7 @@\n import org.syncope.console.rest.PolicyRestClient;\n import org.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.syncope.types.PasswordPolicy;\n+import org.syncope.types.PasswordPolicySpec;\n import org.syncope.types.PolicyType;\n \n /**\n@@ -78,8 +78,8 @@ public PasswordPolicyModalPage(final ModalWindow window,\n         type.addRequiredLabel();\n         form.add(type);\n \n-        final PasswordPolicy policy = policyTO.getSpecification() != null\n-                ? policyTO.getSpecification() : new PasswordPolicy();\n+        final PasswordPolicySpec policy = policyTO.getSpecification() != null\n+                ? policyTO.getSpecification() : new PasswordPolicySpec();\n \n         form.add(new PolicyBeanPanel(\"panel\", policy));\n "},{"sha":"3d034511826512d9c6b80d14c1bb68aafb1610f3","filename":"console/src/main/java/org/syncope/console/pages/RoleModalPage.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -34,6 +34,7 @@\n import org.apache.wicket.model.util.ListModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.syncope.client.mod.AttributeMod;\n+import org.syncope.client.mod.ReferenceMod;\n import org.syncope.client.mod.RoleMod;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.RoleTO;\n@@ -42,6 +43,7 @@\n import org.syncope.console.rest.RoleRestClient;\n import org.syncope.console.pages.panels.DerivedAttributesPanel;\n import org.syncope.console.pages.panels.ResourcesPanel;\n+import org.syncope.console.pages.panels.SecurityPanel;\n import org.syncope.console.pages.panels.VirtualAttributesPanel;\n import org.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n@@ -137,6 +139,12 @@ public RoleModalPage(final PageReference callerPageRef,\n         form.add(inhVirtualAttributes);\n         //--------------------------------\n \n+        //--------------------------------\n+        // Security container\n+        //--------------------------------\n+        form.add(new SecurityPanel(\"security\", roleTO));\n+        //--------------------------------\n+\n         form.add(new ResourcesPanel(\"resources\", roleTO));\n \n         ListModel<String> selectedEntitlements =\n@@ -291,6 +299,22 @@ private void setupRoleMod(final RoleTO roleTO) {\n         roleMod.setInheritVirtualAttributes(\n                 roleTO.isInheritVirtualAttributes());\n \n+        roleMod.setInheritAccountPolicy(\n+                roleTO.isInheritAccountPolicy());\n+\n+        final ReferenceMod refAccountPolicy = new ReferenceMod();\n+        refAccountPolicy.setId(roleTO.getAccountPolicy());\n+\n+        roleMod.setAccountPolicy(refAccountPolicy);\n+\n+        roleMod.setInheritPasswordPolicy(\n+                roleTO.isInheritPasswordPolicy());\n+\n+        final ReferenceMod refPasswordPolicy = new ReferenceMod();\n+        refPasswordPolicy.setId(roleTO.getPasswordPolicy());\n+\n+        roleMod.setPasswordPolicy(refPasswordPolicy);\n+\n         //1.Check if the role's name has been changed\n         if (!oldRole.getName().equals(roleTO.getName())) {\n             roleMod.setName(roleTO.getName());"},{"sha":"1d4831fa6ae9df2fe749bceca8674508e274c5eb","filename":"console/src/main/java/org/syncope/console/pages/panels/PolicyBeanPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -45,7 +45,7 @@\n import org.syncope.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.syncope.console.wicket.markup.html.form.FieldPanel;\n-import org.syncope.types.AbstractPolicy;\n+import org.syncope.types.AbstractPolicySpec;\n \n public class PolicyBeanPanel extends Panel {\n \n@@ -85,7 +85,7 @@ protected List<String> load() {\n     protected XMLRolesReader xmlRolesReader;\n \n     public PolicyBeanPanel(\n-            final String id, final AbstractPolicy policy) {\n+            final String id, final AbstractPolicySpec policy) {\n         super(id);\n \n         FieldWrapper fieldWrapper = null;"},{"sha":"290db0beeb020b0f148a07f2145cb13914eeafbb","filename":"console/src/main/java/org/syncope/console/pages/panels/SecurityPanel.java","status":"added","additions":217,"deletions":0,"changes":217,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSecurityPanel.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -0,0 +1,217 @@\n+/*\n+ *  Copyright 2011 fabio.\n+ * \n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.console.pages.panels;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.ChoiceRenderer;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.syncope.client.to.AbstractAttributableTO;\n+import org.syncope.client.to.AccountPolicyTO;\n+import org.syncope.client.to.PasswordPolicyTO;\n+import org.syncope.console.rest.PolicyRestClient;\n+import org.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.syncope.types.PolicyType;\n+\n+public class SecurityPanel extends Panel {\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG =\n+            LoggerFactory.getLogger(SecurityPanel.class);\n+\n+    private static final long serialVersionUID = -7982691107029848579L;\n+\n+    @SpringBean\n+    private PolicyRestClient policyRestClient;\n+\n+    IModel<Map<Long, String>> passwordPolicies = null;\n+\n+    IModel<Map<Long, String>> accountPolicies = null;\n+\n+    public <T extends AbstractAttributableTO> SecurityPanel(\n+            final String id, final T entityTO) {\n+\n+        super(id);\n+\n+        setOutputMarkupId(true);\n+\n+        passwordPolicies = new LoadableDetachableModel<Map<Long, String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected Map<Long, String> load() {\n+                Map<Long, String> res = new HashMap<Long, String>();\n+                for (PasswordPolicyTO policyTO :\n+                        policyRestClient.getPasswordPolicies()) {\n+                    res.put(policyTO.getId(), policyTO.getDescription());\n+                }\n+                return res;\n+            }\n+        };\n+\n+        accountPolicies = new LoadableDetachableModel<Map<Long, String>>() {\n+\n+            private static final long serialVersionUID = -2012833443695917883L;\n+\n+            @Override\n+            protected Map<Long, String> load() {\n+                Map<Long, String> res = new HashMap<Long, String>();\n+                for (AccountPolicyTO policyTO :\n+                        policyRestClient.getAccountPolicies()) {\n+                    res.put(policyTO.getId(), policyTO.getDescription());\n+                }\n+                return res;\n+            }\n+        };\n+\n+        final WebMarkupContainer securityContainer =\n+                new WebMarkupContainer(\"security\");\n+\n+        securityContainer.setOutputMarkupId(true);\n+        add(securityContainer);\n+\n+        // -------------------------------\n+        // Password policy specification\n+        // -------------------------------\n+        final AjaxDropDownChoicePanel<Long> passwordPolicy =\n+                new AjaxDropDownChoicePanel<Long>(\n+                \"passwordPolicy\",\n+                getString(\"passwordPolicy\"),\n+                new PropertyModel(entityTO, \"passwordPolicy\"),\n+                false);\n+\n+        passwordPolicy.setChoiceRenderer(\n+                new PolicyRenderer(PolicyType.PASSWORD));\n+\n+        passwordPolicy.setChoices(\n+                new ArrayList<Long>(passwordPolicies.getObject().keySet()));\n+\n+        securityContainer.add(passwordPolicy);\n+\n+        final AjaxCheckBoxPanel inhPasswordPolicy = new AjaxCheckBoxPanel(\n+                \"inheritPasswordPolicy\",\n+                getString(\"inheritPasswordPolicy\"),\n+                new PropertyModel<Boolean>(entityTO, \"inheritPasswordPolicy\"),\n+                false);\n+\n+        passwordPolicy.setReadOnly(inhPasswordPolicy.getModelObject());\n+\n+        inhPasswordPolicy.getField().add(\n+                new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n+\n+                    private static final long serialVersionUID =\n+                            -1107858522700306810L;\n+\n+                    @Override\n+                    protected void onUpdate(final AjaxRequestTarget target) {\n+                        passwordPolicy.setReadOnly(\n+                                inhPasswordPolicy.getModelObject());\n+                        target.add(passwordPolicy);\n+                    }\n+                });\n+\n+\n+        securityContainer.add(inhPasswordPolicy);\n+        // -------------------------------\n+\n+        // -------------------------------\n+        // Account policy specification\n+        // -------------------------------\n+        final AjaxDropDownChoicePanel<Long> accountPolicy =\n+                new AjaxDropDownChoicePanel<Long>(\n+                \"accountPolicy\",\n+                getString(\"accountPolicy\"),\n+                new PropertyModel(entityTO, \"accountPolicy\"),\n+                false);\n+\n+        accountPolicy.setChoiceRenderer(\n+                new PolicyRenderer(PolicyType.ACCOUNT));\n+\n+        accountPolicy.setChoices(\n+                new ArrayList<Long>(accountPolicies.getObject().keySet()));\n+\n+        securityContainer.add(accountPolicy);\n+\n+        final AjaxCheckBoxPanel inhAccountPolicy = new AjaxCheckBoxPanel(\n+                \"inheritAccountPolicy\",\n+                getString(\"inheritAccountPolicy\"),\n+                new PropertyModel<Boolean>(entityTO, \"inheritAccountPolicy\"),\n+                false);\n+\n+        accountPolicy.setReadOnly(inhAccountPolicy.getModelObject());\n+\n+        inhAccountPolicy.getField().add(\n+                new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n+\n+                    private static final long serialVersionUID =\n+                            -1107858522700306810L;\n+\n+                    @Override\n+                    protected void onUpdate(final AjaxRequestTarget target) {\n+                        accountPolicy.setReadOnly(\n+                                inhAccountPolicy.getModelObject());\n+                        target.add(accountPolicy);\n+                    }\n+                });\n+\n+        securityContainer.add(inhAccountPolicy);\n+        // -------------------------------\n+    }\n+\n+    private class PolicyRenderer extends ChoiceRenderer<Long> {\n+\n+        private static final long serialVersionUID = 8060500161321947000L;\n+\n+        private PolicyType type;\n+\n+        public PolicyRenderer(final PolicyType type) {\n+            super();\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public Object getDisplayValue(final Long object) {\n+            switch (type) {\n+                case ACCOUNT:\n+                    return accountPolicies.getObject().get(object);\n+                case PASSWORD:\n+                    return passwordPolicies.getObject().get(object);\n+                default:\n+                    return \"\";\n+            }\n+        }\n+\n+        @Override\n+        public String getIdValue(Long object, int index) {\n+            return String.valueOf(object != null ? object : 0L);\n+        }\n+    };\n+}"},{"sha":"254b2de44e11020b2a6699fe8dd58841c3fe699a","filename":"console/src/main/java/org/syncope/console/rest/PolicyRestClient.java","status":"modified","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -75,6 +75,43 @@ public List<PasswordPolicyTO> getPasswordPolicies() {\n         return policies;\n     }\n \n+    public List<AccountPolicyTO> getAccountPolicies() {\n+        final List<AccountPolicyTO> policies =\n+                new ArrayList<AccountPolicyTO>();\n+\n+        AccountPolicyTO[] accountPolicies = null;\n+\n+        try {\n+\n+            accountPolicies = restTemplate.getForObject(\n+                    baseURL + \"policy/account/list\",\n+                    AccountPolicyTO[].class);\n+        } catch (Exception ignore) {\n+            LOG.debug(\"No password policy found\", ignore);\n+        }\n+\n+        if (accountPolicies != null) {\n+            policies.addAll(Arrays.asList(accountPolicies));\n+        }\n+\n+        AccountPolicyTO globalAccountPolicy = null;\n+\n+        try {\n+            globalAccountPolicy =\n+                    restTemplate.getForObject(\n+                    baseURL + \"policy/account/global/read\",\n+                    AccountPolicyTO.class);\n+        } catch (Exception ignore) {\n+            LOG.debug(\"No global password policy found\", ignore);\n+        }\n+\n+        if (globalAccountPolicy != null) {\n+            policies.add(0, globalAccountPolicy);\n+        }\n+\n+        return policies;\n+    }\n+\n     public AccountPolicyTO getGlobalAccountPolicy() {\n         try {\n             return restTemplate.getForObject("},{"sha":"e499d7a6f49dd7d1cc3d8f6e179045033e428d6f","filename":"console/src/main/resources/org/syncope/console/pages/RoleModalPage.html","status":"modified","additions":15,"deletions":7,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.html?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -26,6 +26,9 @@\n         #tabs-5 table{\n             font-size: 1.1em;\n         }\n+        #tabs-6 table{\n+            font-size: 1.1em;\n+        }\n     </style>\n </wicket:head>\n \n@@ -42,6 +45,7 @@\n                     <li><a href=\"#tabs-3\"><span><wicket:message key=\"tab3\"/></span></a></li>\n                     <li><a href=\"#tabs-4\"><span><wicket:message key=\"tab4\"/></span></a></li>\n                     <li><a href=\"#tabs-5\"><span><wicket:message key=\"tab5\"/></span></a></li>\n+                    <li><a href=\"#tabs-6\"><span><wicket:message key=\"tab6\"/></span></a></li>\n                 </ul>\n                 <div id=\"tabs-1\">\n                     <div id=\"formtable\">\n@@ -65,12 +69,6 @@\n                             </div>\n                         </div>\n                     </div>\n-\n-                    <script type=\"text/javascript\">\n-                        $(function() {\n-                            $('#formtable div.tablerow:even').addClass(\"alt\");\n-                        });\n-                    </script>\n                 </div>\n \n                 <div id=\"tabs-2\">\n@@ -99,9 +97,19 @@\n                     <span wicket:id=\"resources\">[resources]</span>\n                 </div>\n                 <div id=\"tabs-5\">\n-                    <span wicket:id=\"entitlementsPalette\"/>\n+                    <span wicket:id=\"entitlementsPalette\">[entitlements]</span>\n+                </div>\n+                <div id=\"tabs-6\">\n+                    <span wicket:id=\"security\">[security]</span>\n                 </div>\n             </div>\n+\n+            <script type=\"text/javascript\">\n+                $(function() {\n+                    $('#formtable div.tablerow:even').addClass(\"alt\");\n+                });\n+            </script>\n+\n             <div>\n                 &nbsp;\n             </div>"},{"sha":"8bb6b9cb6f3e4d203812311d08cbeb0f8efb19d0","filename":"console/src/main/resources/org/syncope/console/pages/RoleModalPage.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.properties?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -5,6 +5,7 @@ tab2=Derived attributes\n tab3=Virtual attributes\n tab4=Resources\n tab5=Entitlements\n+tab6=Security\n add=+\n drop=-\n error=Generic error occurred during the operation"},{"sha":"be4da2381bdeb3751e508950477f4851ea6146ab","filename":"console/src/main/resources/org/syncope/console/pages/RoleModalPage_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage_it.properties?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -5,6 +5,7 @@ tab2=Attributi derivati\n tab3=Attributi virtuali\n tab4=Risorse\n tab5=Entitlement\n+tab6=Sicurezza\n add=+\n drop=-\n name=Nome"},{"sha":"199bd72bf8f9580bc55345f95af23897736ac907","filename":"console/src/main/resources/org/syncope/console/pages/panels/SecurityPanel.html","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSecurityPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSecurityPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSecurityPanel.html?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -0,0 +1,62 @@\n+<!--\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ under the License.\n+-->\n+<html>\n+    <wicket:panel>\n+        <div id=\"formtable\" wicket:id=\"security\">\n+            <div class=\"tablerow\">\n+                <div class=\"tablecolumn_label short_dynamicsize\">\n+                    <label for=\"inheritPasswordPolicy\"><wicket:message key=\"inheritPasswordPolicy\"/></label>\n+                </div>\n+                <div class=\"tablecolumn_field medium_dynamicsize\">\n+                    <span wicket:id=\"inheritPasswordPolicy\">\n+                        [panel for dynamic input type markup]\n+                    </span>\n+                </div>\n+            </div>\n+            <div class=\"tablerow\">\n+                <div class=\"tablecolumn_label short_dynamicsize\">\n+                    <label for=\"passwordPolicy\"><wicket:message key=\"passwordPolicy\"/></label>\n+                </div>\n+                <div class=\"tablecolumn_field medium_dynamicsize\">\n+                    <span wicket:id=\"passwordPolicy\">\n+                        [panel for dynamic input type markup]\n+                    </span>\n+                </div>\n+            </div>\n+\n+            <div class=\"tablerow\">\n+                <div class=\"tablecolumn_label short_dynamicsize\">\n+                    <label for=\"inheritAccountPolicy\"><wicket:message key=\"inheritAccountPolicy\"/></label>\n+                </div>\n+                <div class=\"tablecolumn_field medium_dynamicsize\">\n+                    <span wicket:id=\"inheritAccountPolicy\">\n+                        [panel for dynamic input type markup]\n+                    </span>\n+                </div>\n+            </div>\n+\n+            <div class=\"tablerow\">\n+                <div class=\"tablecolumn_label short_dynamicsize\">\n+                    <label for=\"accountPolicy\"><wicket:message key=\"accountPolicy\"/></label>\n+                </div>\n+                <div class=\"tablecolumn_field medium_dynamicsize\">\n+                    <span wicket:id=\"accountPolicy\">\n+                        [panel for dynamic input type markup]\n+                    </span>\n+                </div>\n+            </div>\n+        </div>\n+    </wicket:panel>\n+</html>"},{"sha":"f57845be10667bfab77d909e7dd1777818542d11","filename":"console/src/main/resources/org/syncope/console/pages/panels/SecurityPanel.properties","status":"added","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSecurityPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSecurityPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSecurityPanel.properties?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -0,0 +1,4 @@\n+inheritPasswordPolicy = Inherit password policy\n+inheritAccountPolicy = Inherit account policy\n+passwordPolicy = Password Policy\n+accountPolicy = Account Policy\n\\ No newline at end of file"},{"sha":"0057c02da57bc8261cab68885018fd779a47f5ad","filename":"console/src/main/resources/org/syncope/console/pages/panels/SecurityPanel_it.properties","status":"added","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSecurityPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSecurityPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSecurityPanel_it.properties?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -0,0 +1,4 @@\n+inheritPasswordPolicy = Eredita password policy\n+inheritAccountPolicy = Eredita account policy\n+passwordPolicy = Password Policy\n+accountPolicy = Account Policy"},{"sha":"069d391928d60811b20938e43889ce5c786d9e70","filename":"console/src/test/java/org/syncope/console/RoleTestITCase.java","status":"modified","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FRoleTestITCase.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -46,6 +46,7 @@ public void browseCreateModal() {\n         selenium.click(\"//div[@id='tabs']/ul/li[3]/a/span\");\n         selenium.click(\"//div[@id='tabs']/ul/li[4]/a/span\");\n         selenium.click(\"//div[@id='tabs']/ul/li[5]/a/span\");\n+        selenium.click(\"//div[@id='tabs']/ul/li[6]/a/span\");\n         selenium.selectFrame(\"relative=up\");\n         selenium.click(\"css=a.w_close\");\n         selenium.waitForPageToLoad(\"30000\");\n@@ -80,6 +81,7 @@ public void browseEditModal() {\n         selenium.click(\"//div[@id='tabs']/ul/li[3]/a/span\");\n         selenium.click(\"//div[@id='tabs']/ul/li[4]/a/span\");\n         selenium.click(\"//div[@id='tabs']/ul/li[5]/a/span\");\n+        selenium.click(\"//div[@id='tabs']/ul/li[6]/a/span\");\n         selenium.click(\"css=a.w_close\");\n         selenium.waitForPageToLoad(\"30000\");\n     }\n@@ -95,4 +97,48 @@ public void delete() {\n         assertTrue(selenium.getConfirmation().matches(\n                 \"^Do you really want to delete the selected item[\\\\s\\\\S]$\"));\n     }\n+\n+    @Test\n+    public void checkSecurityTab() {\n+        selenium.setSpeed(\"1000\");\n+\n+        selenium.click(\"css=img[alt=\\\"Roles\\\"]\");\n+        selenium.waitForPageToLoad(\"30000\");\n+        selenium.click(\"//div[9]/span/span/span/a[2]/span[2]\");\n+        selenium.click(\"//span[2]/span/span/span/a[2]\");\n+\n+        for (int second = 0;; second++) {\n+            if (second >= 60) {\n+                fail(\"timeout\");\n+            }\n+            try {\n+                if (selenium.isElementPresent(\n+                        \"//span[contains(text(),'Attributes')]\")) {\n+                    break;\n+                }\n+            } catch (Exception e) {\n+            }\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+        }\n+\n+        selenium.click(\"//div[@id='tabs']/ul/li[6]/a/span\");\n+\n+        try {\n+            Thread.sleep(1000);\n+        } catch (InterruptedException e) {\n+        }\n+\n+        assertTrue(selenium.isElementPresent(\"//div[@id='formtable']\"));\n+\n+        selenium.click(\"//div[@id='tabs']/ul/li[1]/a/span\");\n+        selenium.click(\"//div[@id='tabs']/ul/li[2]/a/span\");\n+        selenium.click(\"//div[@id='tabs']/ul/li[3]/a/span\");\n+        selenium.click(\"//div[@id='tabs']/ul/li[4]/a/span\");\n+        selenium.click(\"//div[@id='tabs']/ul/li[5]/a/span\");\n+        selenium.click(\"css=a.w_close\");\n+        selenium.waitForPageToLoad(\"30000\");\n+    }\n }"},{"sha":"1815ea9c1bd1801baf7a02db1d377255a147bf02","filename":"core/src/main/java/org/syncope/core/persistence/beans/AccountPolicy.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAccountPolicy.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -0,0 +1,23 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class AccountPolicy extends Policy {\n+\n+    private static final long serialVersionUID = 9138550910385232849L;\n+}"},{"sha":"004b02c0b4e6a12c32d32cc7ff7aded8009b7286","filename":"core/src/main/java/org/syncope/core/persistence/beans/ExternalResource.java","status":"modified","additions":15,"deletions":5,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -122,7 +122,10 @@ public class ExternalResource extends AbstractBaseBean {\n     private TraceLevel updateTraceLevel;\n \n     @ManyToOne(fetch = FetchType.EAGER, optional = true)\n-    private Policy passwordPolicy;\n+    private PasswordPolicy passwordPolicy;\n+\n+    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    private AccountPolicy accountPolicy;\n \n     /**\n      * Configuration properties that are overridden from the connector instance.\n@@ -299,11 +302,19 @@ public void setUpdateTraceLevel(TraceLevel updateTraceLevel) {\n         this.updateTraceLevel = updateTraceLevel;\n     }\n \n+    public Policy getAccountPolicy() {\n+        return accountPolicy;\n+    }\n+\n+    public void setAccountPolicy(AccountPolicy accountPolicy) {\n+        this.accountPolicy = accountPolicy;\n+    }\n+\n     public Policy getPasswordPolicy() {\n         return passwordPolicy;\n     }\n \n-    public void setPasswordPolicy(Policy passwordPolicy) {\n+    public void setPasswordPolicy(PasswordPolicy passwordPolicy) {\n         this.passwordPolicy = passwordPolicy;\n     }\n \n@@ -320,13 +331,12 @@ public Set<ConnConfProperty> getConfiguration() {\n \n         Set<ConnConfProperty> deserializedSet;\n         if (StringUtils.isNotBlank(xmlConfiguration)) {\n-            deserializedSet = XmlConfiguration.<HashSet<ConnConfProperty>>\n-                    deserialize(xmlConfiguration);\n+            deserializedSet = XmlConfiguration.<HashSet<ConnConfProperty>>deserialize(xmlConfiguration);\n             if (deserializedSet != null) {\n                 result = deserializedSet;\n             }\n         }\n \n         return result;\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"9d0466a00cbf60421eb13fbb1a66766b0d62a21f","filename":"core/src/main/java/org/syncope/core/persistence/beans/PasswordPolicy.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPasswordPolicy.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -0,0 +1,23 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class PasswordPolicy extends Policy {\n+\n+    private static final long serialVersionUID = 9138550910385232849L;\n+}"},{"sha":"e2f7e5697638caf9fe617a3044933402afc6a651","filename":"core/src/main/java/org/syncope/core/persistence/beans/Policy.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -24,7 +24,7 @@\n import org.hibernate.annotations.Type;\n import org.syncope.core.persistence.util.XmlConfiguration;\n import org.syncope.core.persistence.validation.entity.PolicyCheck;\n-import org.syncope.types.AbstractPolicy;\n+import org.syncope.types.AbstractPolicySpec;\n import org.syncope.types.PolicyType;\n \n @Entity\n@@ -71,12 +71,12 @@ public void setType(PolicyType type) {\n         this.type = type;\n     }\n \n-    public <T extends AbstractPolicy> T getSpecification() {\n+    public <T extends AbstractPolicySpec> T getSpecification() {\n         T result = XmlConfiguration.<T>deserialize(specification);\n         return result;\n     }\n \n-    public <T extends AbstractPolicy> void setSpecification(final T policy) {\n+    public <T extends AbstractPolicySpec> void setSpecification(final T policy) {\n         specification = XmlConfiguration.serialize(policy);\n     }\n }"},{"sha":"8712591100f4cfa198344ee4d808bb0131479919","filename":"core/src/main/java/org/syncope/core/persistence/beans/SyncPolicy.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncPolicy.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -0,0 +1,23 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class SyncPolicy extends Policy {\n+\n+    private static final long serialVersionUID = 9138550910385232849L;\n+}"},{"sha":"be1a926530fe7567050fc53a9f913c80a524e9b7","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":59,"deletions":6,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -43,7 +43,9 @@\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.AbstractVirAttr;\n import org.syncope.core.persistence.beans.AbstractVirSchema;\n+import org.syncope.core.persistence.beans.AccountPolicy;\n import org.syncope.core.persistence.beans.Entitlement;\n+import org.syncope.core.persistence.beans.PasswordPolicy;\n import org.syncope.core.persistence.beans.Policy;\n \n @Entity\n@@ -81,23 +83,36 @@ public class SyncopeRole extends AbstractAttributable {\n     @Valid\n     private List<RVirAttr> virtualAttributes;\n \n-    @Basic\n+    @Basic(optional = true)\n     @Min(0)\n     @Max(1)\n     private Integer inheritAttributes;\n \n-    @Basic\n+    @Basic(optional = true)\n     @Min(0)\n     @Max(1)\n     private Integer inheritDerivedAttributes;\n \n-    @Basic\n+    @Basic(optional = true)\n     @Min(0)\n     @Max(1)\n     private Integer inheritVirtualAttributes;\n \n+    @Basic(optional = true)\n+    @Min(0)\n+    @Max(1)\n+    private Integer inheritPasswordPolicy;\n+\n+    @Basic(optional = true)\n+    @Min(0)\n+    @Max(1)\n+    private Integer inheritAccountPolicy;\n+\n     @ManyToOne(fetch = FetchType.EAGER, optional = true)\n-    private Policy passwordPolicy;\n+    private PasswordPolicy passwordPolicy;\n+\n+    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    private AccountPolicy accountPolicy;\n \n     public SyncopeRole() {\n         super();\n@@ -109,6 +124,8 @@ public SyncopeRole() {\n         inheritAttributes = getBooleanAsInteger(false);\n         inheritDerivedAttributes = getBooleanAsInteger(false);\n         inheritVirtualAttributes = getBooleanAsInteger(false);\n+        inheritPasswordPolicy = getBooleanAsInteger(false);\n+        inheritAccountPolicy = getBooleanAsInteger(false);\n     }\n \n     @Override\n@@ -344,11 +361,47 @@ public List<RVirAttr> findInheritedVirtualAttributes() {\n         return new ArrayList<RVirAttr>(result.values());\n     }\n \n+    /**\n+     * Get first valid password policy.\n+     * @return parent password policy if isInheritPasswordPolicy is 'true' and\n+     * parent is not null. Return local passowrd policy otherwise.\n+     */\n     public Policy getPasswordPolicy() {\n-        return passwordPolicy;\n+        return isInheritPasswordPolicy() && getParent() != null\n+                ? getParent().getPasswordPolicy() : passwordPolicy;\n     }\n \n-    public void setPasswordPolicy(Policy passwordPolicy) {\n+    public void setPasswordPolicy(PasswordPolicy passwordPolicy) {\n         this.passwordPolicy = passwordPolicy;\n     }\n+\n+    public boolean isInheritPasswordPolicy() {\n+        return isBooleanAsInteger(inheritPasswordPolicy);\n+    }\n+\n+    public void setInheritPasswordPolicy(boolean inheritPasswordPolicy) {\n+        this.inheritPasswordPolicy = getBooleanAsInteger(inheritPasswordPolicy);\n+    }\n+\n+    /**\n+     * Get first valid account policy.\n+     * @return parent account policy if isInheritAccountPolicy is 'true' and \n+     * parent is not null. Return local account policy otherwise.\n+     */\n+    public Policy getAccountPolicy() {\n+        return isInheritAccountPolicy() && getParent() != null\n+                ? getParent().getAccountPolicy() : accountPolicy;\n+    }\n+\n+    public void setAccountPolicy(AccountPolicy accountPolicy) {\n+        this.accountPolicy = accountPolicy;\n+    }\n+\n+    public boolean isInheritAccountPolicy() {\n+        return isBooleanAsInteger(inheritAccountPolicy);\n+    }\n+\n+    public void setInheritAccountPolicy(boolean inheritAccountPolicy) {\n+        this.inheritAccountPolicy = getBooleanAsInteger(inheritAccountPolicy);\n+    }\n }"},{"sha":"d710c68b501388ebf044f9afb7e3b9f2f46c3dc3","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/RoleDAOImpl.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -44,8 +44,7 @@ public SyncopeRole find(final Long id) {\n \n         try {\n             return (SyncopeRole) query.getSingleResult();\n-        }\n-        catch (NoResultException e) {\n+        } catch (NoResultException e) {\n             return null;\n         }\n     }\n@@ -107,6 +106,16 @@ public List<Membership> getMemberships(final SyncopeRole role) {\n \n     @Override\n     public SyncopeRole save(final SyncopeRole role) {\n+        // reset account policy in case of inheritance\n+        if (role.isInheritAccountPolicy()) {\n+            role.setAccountPolicy(null);\n+        }\n+\n+        // reset password policy in case of inheritance\n+        if (role.isInheritPasswordPolicy()) {\n+            role.setPasswordPolicy(null);\n+        }\n+\n         final SyncopeRole savedRole = entityManager.merge(role);\n         entitlementDAO.save(savedRole);\n "},{"sha":"639d34814fa3f80d4fadf6fb72094d2f4f690b2f","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/AttributableValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableValidator.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -28,7 +28,7 @@\n import org.syncope.core.policy.PasswordPolicyEnforcer;\n import org.syncope.core.policy.PolicyEvaluator;\n import org.syncope.types.EntityViolationType;\n-import org.syncope.types.PasswordPolicy;\n+import org.syncope.types.PasswordPolicySpec;\n \n public class AttributableValidator extends AbstractValidator\n         implements ConstraintValidator<AttributableCheck, AbstractAttributable> {\n@@ -72,7 +72,7 @@ public boolean isValid(\n                     // evaluate/enforce only during creation or password update\n                     if (password != null) {\n                         // evaluate policy\n-                        final PasswordPolicy passwordPolicy =\n+                        final PasswordPolicySpec passwordPolicy =\n                                 evaluator.evaluate(policy, object);\n \n                         // enforce policy"},{"sha":"0a8c18aa359a842c12a6da2ce9635a8bfdae2373","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/PolicyValidator.java","status":"modified","additions":20,"deletions":13,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -17,13 +17,15 @@\n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.syncope.core.persistence.beans.AccountPolicy;\n+import org.syncope.core.persistence.beans.PasswordPolicy;\n import org.syncope.core.persistence.beans.Policy;\n import org.syncope.core.persistence.dao.PolicyDAO;\n-import org.syncope.types.AccountPolicy;\n+import org.syncope.types.AccountPolicySpec;\n import org.syncope.types.EntityViolationType;\n-import org.syncope.types.PasswordPolicy;\n+import org.syncope.types.PasswordPolicySpec;\n import org.syncope.types.PolicyType;\n-import org.syncope.types.SyncPolicy;\n+import org.syncope.types.SyncPolicySpec;\n \n public class PolicyValidator extends AbstractValidator\n         implements ConstraintValidator<PolicyCheck, Policy> {\n@@ -45,17 +47,18 @@ public boolean isValid(\n         if (object.getSpecification() != null\n                 && (((object.getType() == PolicyType.PASSWORD\n                 || object.getType() == PolicyType.GLOBAL_PASSWORD)\n-                && !(object.getSpecification() instanceof PasswordPolicy))\n+                && !(object.getSpecification() instanceof PasswordPolicySpec))\n                 || ((object.getType() == PolicyType.ACCOUNT\n                 || object.getType() == PolicyType.GLOBAL_ACCOUNT)\n-                && !(object.getSpecification() instanceof AccountPolicy))\n+                && !(object.getSpecification() instanceof AccountPolicySpec))\n                 || (object.getType() == PolicyType.SYNC\n-                && !(object.getSpecification() instanceof SyncPolicy)))) {\n+                && !(object.getSpecification() instanceof SyncPolicySpec)))) {\n \n             context.buildConstraintViolationWithTemplate(\n                     \"Invalid password specification or password type\").\n                     addNode(\n-                    EntityViolationType.InvalidPolicy.toString()).\n+                    EntityViolationType.valueOf(\n+                    \"Invalid\" + object.getClass().getSimpleName()).toString()).\n                     addConstraintViolation();\n \n             return false;\n@@ -64,13 +67,15 @@ public boolean isValid(\n         switch (object.getType()) {\n             case GLOBAL_PASSWORD:\n                 // just one policy with type PASSWORD\n-                Policy passwordPolicy = policyDAO.getGlobalPasswordPolicy();\n+                final PasswordPolicy passwordPolicy =\n+                        (PasswordPolicy) policyDAO.getGlobalPasswordPolicy();\n+\n                 if (passwordPolicy != null\n                         && !passwordPolicy.getId().equals(object.getId())) {\n \n                     context.buildConstraintViolationWithTemplate(\n                             \"Password policy already exists\").addNode(\n-                            EntityViolationType.InvalidPolicy.toString()).\n+                            EntityViolationType.InvalidPasswordPolicy.toString()).\n                             addConstraintViolation();\n \n                     return false;\n@@ -82,13 +87,15 @@ public boolean isValid(\n             case GLOBAL_ACCOUNT:\n \n                 // just one policy with type ACCOUNT\n-                Policy accountPolicy = policyDAO.getGlobalAccountPolicy();\n+                final AccountPolicy accountPolicy =\n+                        (AccountPolicy) policyDAO.getGlobalAccountPolicy();\n+\n                 if (accountPolicy != null\n                         && !accountPolicy.getId().equals(object.getId())) {\n \n                     context.buildConstraintViolationWithTemplate(\n-                            \"Account policy already exists\").\n-                            addNode(EntityViolationType.InvalidPolicy.toString()).\n+                            \"Account policy already exists\").addNode(\n+                            EntityViolationType.InvalidAccountPolicy.toString()).\n                             addConstraintViolation();\n \n                     return false;\n@@ -97,7 +104,7 @@ public boolean isValid(\n \n             case ACCOUNT:\n                 break;\n-                \n+\n             case SYNC:\n             default:\n         }"},{"sha":"169dead72e36b676c36a8adccd70230ddaf151f9","filename":"core/src/main/java/org/syncope/core/policy/PasswordPolicyEnforcer.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -16,12 +16,12 @@\n \n import java.util.regex.Pattern;\n import org.springframework.stereotype.Component;\n-import org.syncope.types.PasswordPolicy;\n+import org.syncope.types.PasswordPolicySpec;\n import org.syncope.types.PolicyType;\n \n @Component\n public class PasswordPolicyEnforcer\n-        implements PolicyEnforcer<PasswordPolicy, String> {\n+        implements PolicyEnforcer<PasswordPolicySpec, String> {\n \n     private static final Pattern DIGIT = Pattern.compile(\".*\\\\d+.*\");\n \n@@ -47,7 +47,7 @@\n \n     @Override\n     public void enforce(\n-            final PasswordPolicy policy,\n+            final PasswordPolicySpec policy,\n             final PolicyType type,\n             final String password)\n             throws PasswordPolicyException, PolicyEnforceException {"},{"sha":"18e3adbb01fb91fd3e5db68043c3c4c66cb5590e","filename":"core/src/main/java/org/syncope/core/policy/PolicyEnforcer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEnforcer.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -15,10 +15,10 @@\n package org.syncope.core.policy;\n \n import java.io.InvalidObjectException;\n-import org.syncope.types.AbstractPolicy;\n+import org.syncope.types.AbstractPolicySpec;\n import org.syncope.types.PolicyType;\n \n-public interface PolicyEnforcer<T extends AbstractPolicy, E> {\n+public interface PolicyEnforcer<T extends AbstractPolicySpec, E> {\n \n     public void enforce(\n             final T policy, final PolicyType type, final E object)"},{"sha":"6fb054b33e5939ace62e7979189bd6f43b51bdee","filename":"core/src/main/java/org/syncope/core/policy/PolicyEvaluator.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -23,8 +23,8 @@\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.Policy;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.types.AbstractPolicy;\n-import org.syncope.types.PasswordPolicy;\n+import org.syncope.types.AbstractPolicySpec;\n+import org.syncope.types.PasswordPolicySpec;\n \n @Component\n public class PolicyEvaluator {\n@@ -35,7 +35,7 @@ public class PolicyEvaluator {\n     protected static final Logger LOG = LoggerFactory.getLogger(\n             PolicyEvaluator.class);\n \n-    public <T extends AbstractPolicy> T evaluate(\n+    public <T extends AbstractPolicySpec> T evaluate(\n             final Policy policy, final AbstractAttributable attributable) {\n \n         T result = null;\n@@ -44,8 +44,8 @@ public <T extends AbstractPolicy> T evaluate(\n             switch (policy.getType()) {\n                 case PASSWORD:\n                 case GLOBAL_PASSWORD:\n-                    final PasswordPolicy spec = policy.getSpecification();\n-                    final PasswordPolicy passwordPolicy = new PasswordPolicy();\n+                    final PasswordPolicySpec spec = policy.getSpecification();\n+                    final PasswordPolicySpec passwordPolicy = new PasswordPolicySpec();\n \n                     BeanUtils.copyProperties(\n                             spec,"},{"sha":"ddfa97d067eb951265bbe6ccccd18f0d5c03b721","filename":"core/src/main/java/org/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":22,"deletions":15,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -22,7 +22,6 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n-import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n@@ -34,7 +33,10 @@\n import org.syncope.client.to.PolicyTO;\n import org.syncope.client.to.SyncPolicyTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.core.persistence.beans.AccountPolicy;\n+import org.syncope.core.persistence.beans.PasswordPolicy;\n import org.syncope.core.persistence.beans.Policy;\n+import org.syncope.core.persistence.beans.SyncPolicy;\n import org.syncope.core.persistence.dao.PolicyDAO;\n import org.syncope.core.rest.data.PolicyDataBinder;\n import org.syncope.types.PolicyType;\n@@ -55,7 +57,9 @@ public PasswordPolicyTO create(final HttpServletResponse response,\n             final @RequestBody PasswordPolicyTO policyTO)\n             throws SyncopeClientCompositeErrorException {\n \n-        final Policy policy = policyDataBinder.getPolicy(policyTO);\n+        final PasswordPolicy policy =\n+                (PasswordPolicy) policyDataBinder.getPolicy(policyTO);\n+\n         return (PasswordPolicyTO) create(policy, policyTO);\n     }\n \n@@ -65,7 +69,9 @@ public AccountPolicyTO create(final HttpServletResponse response,\n             final @RequestBody AccountPolicyTO policyTO)\n             throws SyncopeClientCompositeErrorException {\n \n-        final Policy policy = policyDataBinder.getPolicy(policyTO);\n+        final AccountPolicy policy =\n+                (AccountPolicy) policyDataBinder.getPolicy(policyTO);\n+\n         return (AccountPolicyTO) create(policy, policyTO);\n     }\n \n@@ -75,23 +81,21 @@ public SyncPolicyTO create(final HttpServletResponse response,\n             final @RequestBody SyncPolicyTO policyTO)\n             throws SyncopeClientCompositeErrorException {\n \n-        final Policy policy = policyDataBinder.getPolicy(policyTO);\n-        return (SyncPolicyTO) create(policy, policyTO);\n+        final SyncPolicy policy =\n+                (SyncPolicy) policyDataBinder.getPolicy(policyTO);\n \n+        return (SyncPolicyTO) create(policy, policyTO);\n     }\n \n     private PolicyTO create(final Policy policy, final PolicyTO policyTO)\n             throws SyncopeClientCompositeErrorException {\n \n         LOG.debug(\"Creating policy \" + policyTO);\n \n-        SyncopeClientCompositeErrorException scce =\n-                new SyncopeClientCompositeErrorException(\n-                HttpStatus.BAD_REQUEST);\n-\n         Policy actual = policyDAO.save(policy);\n         policyTO.setId(actual.getId());\n \n+\n         return policyTO;\n     }\n \n@@ -103,9 +107,10 @@ public PasswordPolicyTO update(final HttpServletResponse response,\n \n         LOG.debug(\"Updating policy \" + policyMod);\n \n-        final Policy policy = policyDataBinder.getPolicy(policyMod);\n-        final Policy actual = update(policy);\n+        final PasswordPolicy policy =\n+                (PasswordPolicy) policyDataBinder.getPolicy(policyMod);\n \n+        final Policy actual = update(policy);\n         return (PasswordPolicyTO) policyDataBinder.getPolicyTO(actual);\n     }\n \n@@ -117,9 +122,10 @@ public AccountPolicyTO update(final HttpServletResponse response,\n \n         LOG.debug(\"Updating policy \" + policyMod);\n \n-        final Policy policy = policyDataBinder.getPolicy(policyMod);\n-        final Policy actual = update(policy);\n+        final AccountPolicy policy =\n+                (AccountPolicy) policyDataBinder.getPolicy(policyMod);\n \n+        final Policy actual = update(policy);\n         return (AccountPolicyTO) policyDataBinder.getPolicyTO(actual);\n     }\n \n@@ -131,9 +137,10 @@ public SyncPolicyTO update(final HttpServletResponse response,\n \n         LOG.debug(\"Updating policy \" + policyMod);\n \n-        final Policy policy = policyDataBinder.getPolicy(policyMod);\n-        final Policy actual = update(policy);\n+        final SyncPolicy policy =\n+                (SyncPolicy) policyDataBinder.getPolicy(policyMod);\n \n+        final Policy actual = update(policy);\n         return (SyncPolicyTO) policyDataBinder.getPolicyTO(actual);\n     }\n "},{"sha":"3e1df7cb501de2b2bffcdc839d4a81fce5f31087","filename":"core/src/main/java/org/syncope/core/rest/data/PolicyDataBinder.java","status":"modified","additions":25,"deletions":19,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -25,10 +25,13 @@\n import org.syncope.client.to.PasswordPolicyTO;\n import org.syncope.client.to.PolicyTO;\n import org.syncope.client.to.SyncPolicyTO;\n+import org.syncope.core.persistence.beans.AccountPolicy;\n+import org.syncope.core.persistence.beans.PasswordPolicy;\n import org.syncope.core.persistence.beans.Policy;\n-import org.syncope.types.AccountPolicy;\n-import org.syncope.types.PasswordPolicy;\n-import org.syncope.types.SyncPolicy;\n+import org.syncope.core.persistence.beans.SyncPolicy;\n+import org.syncope.types.AccountPolicySpec;\n+import org.syncope.types.PasswordPolicySpec;\n+import org.syncope.types.SyncPolicySpec;\n \n @Component\n public class PolicyDataBinder {\n@@ -54,18 +57,18 @@ public PolicyTO getPolicyTO(Policy policy) {\n                 case PASSWORD:\n                     policyTO = new PasswordPolicyTO();\n                     ((PasswordPolicyTO) policyTO).setSpecification(\n-                            (PasswordPolicy) policy.getSpecification());\n+                            (PasswordPolicySpec) policy.getSpecification());\n                     break;\n                 case GLOBAL_ACCOUNT:\n                 case ACCOUNT:\n                     policyTO = new AccountPolicyTO();\n                     ((AccountPolicyTO) policyTO).setSpecification(\n-                            (AccountPolicy) policy.getSpecification());\n+                            (AccountPolicySpec) policy.getSpecification());\n                     break;\n                 default:\n                     policyTO = new SyncPolicyTO();\n                     ((SyncPolicyTO) policyTO).setSpecification(\n-                            (SyncPolicy) policy.getSpecification());\n+                            (SyncPolicySpec) policy.getSpecification());\n \n             }\n \n@@ -89,27 +92,28 @@ public Policy getPolicy(PolicyTO policyTO) {\n         final Policy policy;\n \n         if (policyTO != null) {\n-            policy = new Policy();\n-            policy.setId(policyTO.getId());\n-            policy.setType(policyTO.getType());\n-            policy.setDescription(policyTO.getDescription());\n-\n-            switch (policy.getType()) {\n+            switch (policyTO.getType()) {\n                 case GLOBAL_PASSWORD:\n                 case PASSWORD:\n+                    policy = new PasswordPolicy();\n                     policy.setSpecification(\n                             ((PasswordPolicyTO) policyTO).getSpecification());\n                     break;\n                 case GLOBAL_ACCOUNT:\n                 case ACCOUNT:\n+                    policy = new AccountPolicy();\n                     policy.setSpecification(\n                             ((AccountPolicyTO) policyTO).getSpecification());\n                     break;\n                 default:\n+                    policy = new SyncPolicy();\n                     policy.setSpecification(\n                             ((SyncPolicyTO) policyTO).getSpecification());\n-\n             }\n+\n+            policy.setId(policyTO.getId());\n+            policy.setType(policyTO.getType());\n+            policy.setDescription(policyTO.getDescription());\n         } else {\n             policy = null;\n         }\n@@ -127,26 +131,28 @@ public Policy getPolicy(PolicyMod policyMod) {\n         final Policy policy;\n \n         if (policyMod != null) {\n-            policy = new Policy();\n-            policy.setId(policyMod.getId());\n-            policy.setType(policyMod.getType());\n-            policy.setDescription(policyMod.getDescription());\n-\n-            switch (policy.getType()) {\n+            switch (policyMod.getType()) {\n                 case GLOBAL_PASSWORD:\n                 case PASSWORD:\n+                    policy = new PasswordPolicy();\n                     policy.setSpecification(\n                             ((PasswordPolicyMod) policyMod).getSpecification());\n                     break;\n                 case GLOBAL_ACCOUNT:\n                 case ACCOUNT:\n+                    policy = new AccountPolicy();\n                     policy.setSpecification(\n                             ((AccountPolicyMod) policyMod).getSpecification());\n                     break;\n                 default:\n+                    policy = new SyncPolicy();\n                     policy.setSpecification(\n                             ((SyncPolicyMod) policyMod).getSpecification());\n             }\n+\n+            policy.setId(policyMod.getId());\n+            policy.setType(policyMod.getType());\n+            policy.setDescription(policyMod.getDescription());\n         } else {\n             policy = null;\n         }"},{"sha":"000a21efe11ee677a3dde450e95af94712240749","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -29,9 +29,11 @@\n import org.syncope.client.to.SchemaMappingTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.beans.AccountPolicy;\n import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.ExternalResource;\n+import org.syncope.core.persistence.beans.PasswordPolicy;\n import org.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.syncope.core.persistence.dao.PolicyDAO;\n import org.syncope.core.util.JexlUtil;\n@@ -106,7 +108,13 @@ public ExternalResource getResource(final ExternalResource resource,\n         resource.setDeleteTraceLevel(resourceTO.getDeleteTraceLevel());\n \n         resource.setPasswordPolicy(resourceTO.getPasswordPolicy() != null\n-                ? policyDAO.find(resourceTO.getPasswordPolicy()) : null);\n+                ? (PasswordPolicy) policyDAO.find(resourceTO.getPasswordPolicy())\n+                : null);\n+\n+        resource.setAccountPolicy(resourceTO.getAccountPolicy() != null\n+                ? (AccountPolicy) policyDAO.find(resourceTO.getAccountPolicy())\n+                : null);\n+\n         resource.setConnectorConfigurationProperties(\n                 new HashSet<ConnConfProperty>(\n                 resourceTO.getConnectorConfigurationProperties()));\n@@ -162,6 +170,10 @@ public ResourceTO getResourceTO(ExternalResource resource) {\n \n         resourceTO.setPasswordPolicy(resource.getPasswordPolicy() != null\n                 ? resource.getPasswordPolicy().getId() : null);\n+\n+        resourceTO.setAccountPolicy(resource.getAccountPolicy() != null\n+                ? resource.getAccountPolicy().getId() : null);\n+\n         resourceTO.setConnectorConfigurationProperties(\n                 resource.getConfiguration());\n         return resourceTO;"},{"sha":"7aeddebff9ff9148974c7fa838383031c4db8297","filename":"core/src/main/java/org/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":37,"deletions":6,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -23,7 +23,9 @@\n import org.syncope.client.to.RoleTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.beans.AccountPolicy;\n import org.syncope.core.persistence.beans.Entitlement;\n+import org.syncope.core.persistence.beans.PasswordPolicy;\n import org.syncope.core.persistence.beans.role.RAttr;\n import org.syncope.core.persistence.beans.role.RDerAttr;\n import org.syncope.core.persistence.beans.role.RVirAttr;\n@@ -38,9 +40,6 @@ public class RoleDataBinder extends AbstractAttributableDataBinder {\n     @Autowired\n     private EntitlementDAO entitlementDAO;\n \n-    @Autowired\n-    private PolicyDataBinder policyDataBinder;\n-\n     public SyncopeRole create(final RoleTO roleTO)\n             throws SyncopeClientCompositeErrorException {\n \n@@ -51,6 +50,9 @@ public SyncopeRole create(final RoleTO roleTO)\n         role.setInheritVirtualAttributes(\n                 roleTO.isInheritVirtualAttributes());\n \n+        role.setInheritPasswordPolicy(roleTO.isInheritPasswordPolicy());\n+        role.setInheritAccountPolicy(roleTO.isInheritAccountPolicy());\n+\n         SyncopeClientCompositeErrorException scce =\n                 new SyncopeClientCompositeErrorException(\n                 HttpStatus.BAD_REQUEST);\n@@ -104,7 +106,12 @@ public SyncopeRole create(final RoleTO roleTO)\n         }\n \n         role.setPasswordPolicy(roleTO.getPasswordPolicy() != null\n-                ? policyDAO.find(roleTO.getPasswordPolicy()) : null);\n+                ? (PasswordPolicy) policyDAO.find(roleTO.getPasswordPolicy())\n+                : null);\n+\n+        role.setAccountPolicy(roleTO.getAccountPolicy() != null\n+                ? (AccountPolicy) policyDAO.find(roleTO.getAccountPolicy())\n+                : null);\n \n         return role;\n     }\n@@ -153,6 +160,16 @@ public PropagationByResource update(SyncopeRole role, RoleMod roleMod)\n                     roleMod.getInheritVirtualAttributes());\n         }\n \n+        // inherited password Policy\n+        if (roleMod.getInheritPasswordPolicy() != null) {\n+            role.setInheritPasswordPolicy(roleMod.getInheritPasswordPolicy());\n+        }\n+\n+        // inherited account Policy\n+        if (roleMod.getInheritAccountPolicy() != null) {\n+            role.setInheritAccountPolicy(roleMod.getInheritAccountPolicy());\n+        }\n+\n         // entitlements\n         role.getEntitlements().clear();\n         Entitlement entitlement;\n@@ -165,8 +182,17 @@ public PropagationByResource update(SyncopeRole role, RoleMod roleMod)\n             }\n         }\n \n-        role.setPasswordPolicy(\n-                policyDataBinder.getPolicy(roleMod.getPasswordPolicy()));\n+        if (roleMod.getPasswordPolicy() != null\n+                && roleMod.getPasswordPolicy().getId() != null) {\n+            role.setPasswordPolicy((PasswordPolicy) policyDAO.find(\n+                    roleMod.getPasswordPolicy().getId()));\n+        }\n+\n+        if (roleMod.getAccountPolicy() != null\n+                && roleMod.getAccountPolicy().getId() != null) {\n+            role.setAccountPolicy((AccountPolicy) policyDAO.find(\n+                    roleMod.getAccountPolicy().getId()));\n+        }\n \n         // attributes, derived attributes, virtual attributes and resources\n         return fill(role, roleMod, AttributableUtil.ROLE, scce);\n@@ -179,6 +205,8 @@ public RoleTO getRoleTO(SyncopeRole role) {\n         roleTO.setInheritAttributes(role.isInheritAttributes());\n         roleTO.setInheritDerivedAttributes(role.isInheritDerivedAttributes());\n         roleTO.setInheritVirtualAttributes(role.isInheritVirtualAttributes());\n+        roleTO.setInheritPasswordPolicy(role.isInheritPasswordPolicy());\n+        roleTO.setInheritAccountPolicy(role.isInheritAccountPolicy());\n \n         if (role.getParent() != null) {\n             roleTO.setParent(role.getParent().getId());\n@@ -212,6 +240,9 @@ public RoleTO getRoleTO(SyncopeRole role) {\n         roleTO.setPasswordPolicy(role.getPasswordPolicy() != null\n                 ? role.getPasswordPolicy().getId() : null);\n \n+        roleTO.setAccountPolicy(role.getAccountPolicy() != null\n+                ? role.getAccountPolicy().getId() : null);\n+\n         return roleTO;\n     }\n }"},{"sha":"40372a17badc4f791f7188060d369c18b6fbb713","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -39,7 +39,7 @@\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.propagation.PropagationByResource;\n import org.syncope.types.CipherAlgorithm;\n-import org.syncope.types.PasswordPolicy;\n+import org.syncope.types.PasswordPolicySpec;\n import org.syncope.types.PropagationOperation;\n import org.syncope.types.SyncopeClientExceptionType;\n \n@@ -58,7 +58,7 @@ public void create(final SyncopeUser user, final UserTO userTO)\n \n         try {\n             Policy policy = policyDAO.getGlobalPasswordPolicy();\n-            PasswordPolicy passwordPolicy = policy.getSpecification();\n+            PasswordPolicySpec passwordPolicy = policy.getSpecification();\n             passwordHistorySize = passwordPolicy.getHistoryLength();\n         } catch (Throwable ignore) {\n             // ignore exceptions\n@@ -134,7 +134,7 @@ public PropagationByResource update(final SyncopeUser user,\n             int passwordHistorySize = 0;\n             try {\n                 Policy policy = policyDAO.getGlobalPasswordPolicy();\n-                PasswordPolicy passwordPolicy = policy.getSpecification();\n+                PasswordPolicySpec passwordPolicy = policy.getSpecification();\n                 passwordHistorySize = passwordPolicy.getHistoryLength();\n             } catch (Throwable ignore) {\n                 // ignore exceptions"},{"sha":"b1018f6081d87f2d7391516fc0accd5764c2e631","filename":"core/src/test/java/org/syncope/core/persistence/dao/PolicyTest.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -24,8 +24,8 @@\n import org.syncope.core.persistence.beans.Policy;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.syncope.types.PolicyType;\n-import org.syncope.types.PasswordPolicy;\n-import org.syncope.types.SyncPolicy;\n+import org.syncope.types.PasswordPolicySpec;\n+import org.syncope.types.SyncPolicySpec;\n \n @Transactional\n public class PolicyTest extends AbstractTest {\n@@ -61,14 +61,14 @@ public final void findGlobalPasswordPolicy() {\n         assertEquals(PolicyType.GLOBAL_PASSWORD, policy.getType());\n \n         assertEquals(\"invalid policy values\",\n-                8, ((PasswordPolicy) policy.getSpecification()).getMinLength());\n+                8, ((PasswordPolicySpec) policy.getSpecification()).getMinLength());\n     }\n \n     @Test\n     @ExpectedException(value = InvalidEntityException.class)\n     public final void saveInvalidPolicy() {\n \n-        PasswordPolicy passwordPolicy = new PasswordPolicy();\n+        PasswordPolicySpec passwordPolicy = new PasswordPolicySpec();\n         passwordPolicy.setMaxLength(8);\n         passwordPolicy.setMinLength(6);\n \n@@ -84,7 +84,7 @@ public final void saveInvalidPolicy() {\n     @ExpectedException(value = InvalidEntityException.class)\n     public final void saveSecondPasswordPolicy() {\n \n-        PasswordPolicy passwordPolicy = new PasswordPolicy();\n+        PasswordPolicySpec passwordPolicy = new PasswordPolicySpec();\n         passwordPolicy.setMaxLength(8);\n         passwordPolicy.setMinLength(6);\n \n@@ -100,7 +100,7 @@ public final void saveSecondPasswordPolicy() {\n     public final void create() {\n         Policy policy = new Policy();\n         policy.setType(PolicyType.SYNC);\n-        policy.setSpecification(new SyncPolicy());\n+        policy.setSpecification(new SyncPolicySpec());\n         policy.setDescription(\"Sync policy\");\n \n         policy = policyDAO.save(policy);\n@@ -111,7 +111,7 @@ public final void create() {\n \n     @Test\n     public final void update() {\n-        PasswordPolicy specification = new PasswordPolicy();\n+        PasswordPolicySpec specification = new PasswordPolicySpec();\n         specification.setMaxLength(8);\n         specification.setMinLength(6);\n \n@@ -124,9 +124,9 @@ public final void update() {\n         assertNotNull(policy);\n         assertEquals(PolicyType.GLOBAL_PASSWORD, policy.getType());\n         assertEquals(\n-                ((PasswordPolicy) policy.getSpecification()).getMaxLength(), 8);\n+                ((PasswordPolicySpec) policy.getSpecification()).getMaxLength(), 8);\n         assertEquals(\n-                ((PasswordPolicy) policy.getSpecification()).getMinLength(), 6);\n+                ((PasswordPolicySpec) policy.getSpecification()).getMinLength(), 6);\n     }\n \n     @Test"},{"sha":"00f7ad399a0f4610080512769db7d942fc63c63d","filename":"core/src/test/java/org/syncope/core/persistence/dao/RoleTest.java","status":"modified","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -22,13 +22,18 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.AbstractTest;\n+import org.syncope.core.persistence.beans.AccountPolicy;\n+import org.syncope.core.persistence.beans.PasswordPolicy;\n \n @Transactional\n public class RoleTest extends AbstractTest {\n \n     @Autowired\n     private RoleDAO roleDAO;\n \n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n     @Test\n     public final void findAll() {\n         List<SyncopeRole> list = roleDAO.findAll();\n@@ -69,18 +74,50 @@ public final void inheritedVirtualAttributes() {\n         assertEquals(1, director.findInheritedVirtualAttributes().size());\n     }\n \n+    @Test\n+    public final void inheritedPolicy() {\n+        SyncopeRole role = roleDAO.find(7L);\n+\n+        assertNotNull(role);\n+\n+        assertNull(role.getAccountPolicy());\n+        assertNotNull(role.getPasswordPolicy());\n+\n+        assertEquals(4L, (long) role.getPasswordPolicy().getId());\n+\n+        role = roleDAO.find(5L);\n+\n+        assertNotNull(role);\n+\n+        assertNull(role.getAccountPolicy());\n+        assertNull(role.getPasswordPolicy());\n+    }\n+\n     @Test\n     public final void save() {\n         SyncopeRole role = new SyncopeRole();\n         role.setName(\"secondChild\");\n \n+        // verify inheritance password and account policies\n+        role.setInheritAccountPolicy(false);\n+        // not inherited so setter execution shouldn't be ignored\n+        role.setAccountPolicy((AccountPolicy) policyDAO.find(6L));\n+\n+        role.setInheritPasswordPolicy(true);\n+        // inherited so setter execution should be ignored\n+        role.setPasswordPolicy((PasswordPolicy) policyDAO.find(4L));\n+\n         SyncopeRole rootRole = roleDAO.find(\"root\", null);\n         role.setParent(rootRole);\n \n         role = roleDAO.save(role);\n \n         SyncopeRole actual = roleDAO.find(role.getId());\n         assertNotNull(\"expected save to work\", actual);\n+\n+        assertNull(role.getPasswordPolicy());\n+        assertNotNull(role.getAccountPolicy());\n+        assertEquals(6L, (long) role.getAccountPolicy().getId());\n     }\n \n     @Test"},{"sha":"862eb1ae09a94f539fe0bfb1bdab2b13da905b23","filename":"core/src/test/java/org/syncope/core/persistence/relationships/ResourceTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -37,7 +37,7 @@\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.rest.data.ResourceDataBinder;\n import org.syncope.core.AbstractTest;\n-import org.syncope.core.persistence.beans.Policy;\n+import org.syncope.core.persistence.beans.PasswordPolicy;\n import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.beans.user.UDerSchema;\n import org.syncope.core.persistence.dao.DerSchemaDAO;\n@@ -76,7 +76,7 @@ public class ResourceTest extends AbstractTest {\n     public final void createWithPasswordPolicy() {\n         final String RESOURCE_NAME = \"resourceWithPasswordPolicy\";\n \n-        Policy policy = policyDAO.find(4L);\n+        PasswordPolicy policy = (PasswordPolicy)policyDAO.find(4L);\n         ExternalResource resource = new ExternalResource();\n         resource.setName(RESOURCE_NAME);\n         resource.setPasswordPolicy(policy);"},{"sha":"ce48023fda6df65cc12ca35da13469f297deda30","filename":"core/src/test/java/org/syncope/core/persistence/relationships/RoleTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -29,7 +29,7 @@\n import org.syncope.core.persistence.dao.RoleDAO;\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.AbstractTest;\n-import org.syncope.core.persistence.beans.Policy;\n+import org.syncope.core.persistence.beans.PasswordPolicy;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.PolicyDAO;\n \n@@ -60,7 +60,7 @@ public class RoleTest extends AbstractTest {\n     public final void createWithPasswordPolicy() {\n         final String ROLE_NAME = \"roleWithPasswordPolicy\";\n \n-        Policy policy = policyDAO.find(4L);\n+        PasswordPolicy policy = (PasswordPolicy) policyDAO.find(4L);\n         SyncopeRole role = new SyncopeRole();\n         role.setName(ROLE_NAME);\n         role.setPasswordPolicy(policy);"},{"sha":"bdc742b6d5917c214023e94efcfdeeb67554f8ef","filename":"core/src/test/java/org/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -43,7 +43,7 @@ public class AuthenticationTestITCase extends AbstractTest {\n \n     private UserTO getSampleTO(final String email) {\n         UserTO userTO = new UserTO();\n-        userTO.setPassword(\"password\");\n+        userTO.setPassword(\"password123\");\n \n         AttributeTO usernameTO = new AttributeTO();\n         usernameTO.setSchema(\"username\");\n@@ -168,7 +168,7 @@ public void testUserSchemaAuthorization() {\n         // 4. read the schema created above (as user) - success\n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n-                String.valueOf(userTO.getId()), \"password\"));\n+                String.valueOf(userTO.getId()), \"password123\"));\n \n         schemaTO = restTemplate.getForObject(BASE_URL\n                 + \"schema/user/read/authTestSchema.json\", SchemaTO.class);\n@@ -207,7 +207,7 @@ public void testUserRead() {\n \n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n-                Long.valueOf(userTO.getId()).toString(), \"password\"));\n+                Long.valueOf(userTO.getId()).toString(), \"password123\"));\n \n         UserTO readUserTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n@@ -248,7 +248,7 @@ public void testUserSearch() {\n \n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n-                Long.valueOf(userTO.getId()).toString(), \"password\"));\n+                Long.valueOf(userTO.getId()).toString(), \"password123\"));\n \n         AttributeCond isNullCond = new AttributeCond(\n                 AttributeCond.Type.ISNOTNULL);"},{"sha":"2144a75b9ae7e91e9f396fe02fbd99002af97d02","filename":"core/src/test/java/org/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -26,9 +26,9 @@\n import org.syncope.client.to.PolicyTO;\n import org.syncope.client.to.SyncPolicyTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.syncope.types.PasswordPolicy;\n+import org.syncope.types.PasswordPolicySpec;\n import org.syncope.types.PolicyType;\n-import org.syncope.types.SyncPolicy;\n+import org.syncope.types.SyncPolicySpec;\n \n public class PolicyTestITCase extends AbstractTest {\n \n@@ -58,16 +58,15 @@ public final void getGlobalPasswordPolicy() {\n         assertNotNull(policyTO);\n         assertEquals(PolicyType.GLOBAL_PASSWORD, policyTO.getType());\n         assertEquals(8,\n-                ((PasswordPolicy) policyTO.getSpecification()).getMinLength());\n+                ((PasswordPolicySpec) policyTO.getSpecification()).getMinLength());\n     }\n \n     @Test\n-    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n     public final void getGlobalAccountPolicy() {\n         AccountPolicyTO policyTO = restTemplate.getForObject(\n                 BASE_URL + \"policy/account/global/read\", AccountPolicyTO.class);\n \n-        assertNull(policyTO);\n+        assertNotNull(policyTO);\n         assertEquals(PolicyType.GLOBAL_ACCOUNT, policyTO.getType());\n     }\n \n@@ -76,7 +75,7 @@ public final void getGlobalAccountPolicy() {\n     public final void createWithException() {\n \n         PasswordPolicyTO policy = new PasswordPolicyTO();\n-        policy.setSpecification(new PasswordPolicy());\n+        policy.setSpecification(new PasswordPolicySpec());\n         policy.setType(PolicyType.GLOBAL_PASSWORD);\n         policy.setDescription(\"global password policy\");\n \n@@ -90,7 +89,7 @@ public final void createWithException() {\n     public final void createMissingDescription() {\n \n         SyncPolicyTO policy = new SyncPolicyTO();\n-        policy.setSpecification(new SyncPolicy());\n+        policy.setSpecification(new SyncPolicySpec());\n         policy.setType(PolicyType.SYNC);\n \n         restTemplate.postForObject(\n@@ -101,7 +100,7 @@ public final void createMissingDescription() {\n     @Test\n     public final void create() {\n         SyncPolicyTO policy = new SyncPolicyTO();\n-        policy.setSpecification(new SyncPolicy());\n+        policy.setSpecification(new SyncPolicySpec());\n         policy.setType(PolicyType.SYNC);\n         policy.setDescription(\"Sync policy\");\n \n@@ -133,7 +132,7 @@ public final void update() {\n \n         assertNotNull(\"find to update did not work\", policyTO);\n \n-        PasswordPolicy policy =\n+        PasswordPolicySpec policy =\n                 ((PasswordPolicyTO) policyTO).getSpecification();\n         policy.setMaxLength(22);\n "},{"sha":"6c95a2ef038043cd01dc6fe112e8f435182265e9","filename":"core/src/test/java/org/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":46,"deletions":3,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -50,15 +50,33 @@ public void create() {\n         roleTO.setName(\"lastRole\");\n         roleTO.setParent(8L);\n \n+        // verify inheritance password and account policies\n+        roleTO.setInheritAccountPolicy(false);\n+        // not inherited so setter execution shouldn't be ignored\n+        roleTO.setAccountPolicy(6L);\n+\n+        roleTO.setInheritPasswordPolicy(true);\n+        // inherited so setter execution should be ignored\n+        roleTO.setPasswordPolicy(2L);\n+\n         AttributeTO icon = new AttributeTO();\n         icon.setSchema(\"icon\");\n         icon.addValue(\"anIcon\");\n \n-        RoleTO newRoleTO = restTemplate.postForObject(BASE_URL + \"role/create\",\n+        RoleTO actual = restTemplate.postForObject(BASE_URL + \"role/create\",\n                 roleTO, RoleTO.class);\n \n-        roleTO.setId(newRoleTO.getId());\n-        assertEquals(roleTO, newRoleTO);\n+        roleTO.setId(actual.getId());\n+\n+        roleTO.setPasswordPolicy(4L);\n+\n+        assertEquals(roleTO, actual);\n+\n+        assertNotNull(actual.getAccountPolicy());\n+        assertEquals(6L, (long) actual.getAccountPolicy());\n+\n+        assertNotNull(actual.getPasswordPolicy());\n+        assertEquals(4L, (long) actual.getPasswordPolicy());\n     }\n \n     @Test\n@@ -135,6 +153,15 @@ public void update() {\n         roleTO.setName(\"latestRole\");\n         roleTO.setParent(8L);\n \n+        // verify inheritance password and account policies\n+        roleTO.setInheritAccountPolicy(false);\n+        // not inherited so setter execution shouldn't be ignored\n+        roleTO.setAccountPolicy(6L);\n+\n+        roleTO.setInheritPasswordPolicy(true);\n+        // inherited so setter execution should be ignored\n+        roleTO.setPasswordPolicy(2L);\n+\n         AttributeTO icon = new AttributeTO();\n         icon.setSchema(\"icon\");\n         icon.addValue(\"anIcon\");\n@@ -145,6 +172,12 @@ public void update() {\n \n         assertEquals(1, roleTO.getAttributes().size());\n \n+        assertNotNull(roleTO.getAccountPolicy());\n+        assertEquals(6L, (long) roleTO.getAccountPolicy());\n+\n+        assertNotNull(roleTO.getPasswordPolicy());\n+        assertEquals(4L, (long) roleTO.getPasswordPolicy());\n+\n         AttributeMod attributeMod = new AttributeMod();\n         attributeMod.setSchema(\"show\");\n         attributeMod.addValueToBeAdded(\"FALSE\");\n@@ -154,11 +187,21 @@ public void update() {\n         roleMod.setName(\"finalRole\");\n         roleMod.addAttributeToBeUpdated(attributeMod);\n \n+        // change password policy inheritance\n+        roleMod.setInheritPasswordPolicy(Boolean.FALSE);\n+\n         roleTO = restTemplate.postForObject(BASE_URL + \"role/update\",\n                 roleMod, RoleTO.class);\n \n         assertEquals(\"finalRole\", roleTO.getName());\n         assertEquals(2, roleTO.getAttributes().size());\n+\n+        // changes ignored because not requested (null ReferenceMod)\n+        assertNotNull(roleTO.getAccountPolicy());\n+        assertEquals(6L, (long) roleTO.getAccountPolicy());\n+\n+        // password policy null because not inherited\n+        assertNull(roleTO.getPasswordPolicy());\n     }\n \n     @Test"},{"sha":"611449859e5c1571f60a857ffc9a9c31edba8f9c","filename":"core/src/test/resources/content.xml","status":"modified","additions":27,"deletions":12,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3690e43429969ff5b2bbc1ed5bcb9a427937da32/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=3690e43429969ff5b2bbc1ed5bcb9a427937da32","patch":"@@ -23,25 +23,40 @@\n     <SyncopeConf confKey=\"password.cipher.algorithm\" confValue=\"MD5\"/>\n \n     <!-- sample policies -->\n-    <Policy id=\"1\" description=\"sync policy 1\" type=\"SYNC\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyncPolicy%22/%3E%0A%3C/java%3E+%0A\"/>\n-    <Policy id=\"2\" description=\"global password policy\" type=\"GLOBAL_PASSWORD\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.PasswordPolicy%22%3E+%0A++%3Cvoid+property%3D%22historyLength%22%3E+%0A+++%3Cint%3E1%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22minLength%22%3E+%0A+++%3Cint%3E8%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22prefixesNotPermitted%22%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted1%3C/string%3E+%0A+++%3C/void%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted2%3C/string%3E+%0A+++%3C/void%3E+%0A++%3C/void%3E+%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n-    <Policy id=\"3\" description=\"sync policy 2\" type=\"SYNC\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyncPolicy%22/%3E%0A%3C/java%3E+%0A\"/>\n-    <Policy id=\"4\" description=\"sample password policy\" type=\"PASSWORD\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.PasswordPolicy%22%3E+%0A++%3Cvoid+property%3D%22historyLength%22%3E+%0A+++%3Cint%3E0%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22minLength%22%3E+%0A+++%3Cint%3E10%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22prefixesNotPermitted%22%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted1%3C/string%3E+%0A+++%3C/void%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted2%3C/string%3E+%0A+++%3C/void%3E+%0A++%3C/void%3E+%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n+    <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"sync policy 1\" type=\"SYNC\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyncPolicySpec%22/%3E%0A%3C/java%3E+%0A\"/>\n+    <Policy DTYPE=\"PasswordPolicy\" id=\"2\" description=\"global password policy\" type=\"GLOBAL_PASSWORD\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.PasswordPolicySpec%22%3E+%0A++%3Cvoid+property%3D%22historyLength%22%3E+%0A+++%3Cint%3E1%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22minLength%22%3E+%0A+++%3Cint%3E8%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22prefixesNotPermitted%22%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted1%3C/string%3E+%0A+++%3C/void%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted2%3C/string%3E+%0A+++%3C/void%3E+%0A++%3C/void%3E+%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n+    <Policy DTYPE=\"SyncPolicy\" id=\"3\" description=\"sync policy 2\" type=\"SYNC\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyncPolicySpec%22/%3E%0A%3C/java%3E+%0A\"/>\n+    <Policy DTYPE=\"PasswordPolicy\" id=\"4\" description=\"sample password policy\" type=\"PASSWORD\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.PasswordPolicySpec%22%3E+%0A++%3Cvoid+property%3D%22historyLength%22%3E+%0A+++%3Cint%3E0%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22minLength%22%3E+%0A+++%3Cint%3E10%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22prefixesNotPermitted%22%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted1%3C/string%3E+%0A+++%3C/void%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted2%3C/string%3E+%0A+++%3C/void%3E+%0A++%3C/void%3E+%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n+    <Policy DTYPE=\"AccountPolicy\" id=\"5\" description=\"global account policy\" type=\"GLOBAL_ACCOUNT\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.AccountPolicySpec%22%3E%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n+    <Policy DTYPE=\"AccountPolicy\" id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.AccountPolicySpec%22%3E%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n \n                           \n     <SyncopeUser id=\"1\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"/>\n     <SyncopeUser id=\"2\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"/>\n     <SyncopeUser id=\"3\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"/>\n     <SyncopeUser id=\"4\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"/>\n \n-    <SyncopeRole id=\"1\" name=\"root\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\" inheritVirtualAttributes=\"0\"/>\n-    <SyncopeRole id=\"2\" name=\"child\" parent_id=\"1\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\" inheritVirtualAttributes=\"0\"/>\n-    <SyncopeRole id=\"3\" name=\"citizen\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\" inheritVirtualAttributes=\"0\"/>\n-    <SyncopeRole id=\"4\" name=\"employee\" parent_id=\"3\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\" inheritVirtualAttributes=\"0\"/>\n-    <SyncopeRole id=\"5\" name=\"secretary\" parent_id=\"4\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\" inheritVirtualAttributes=\"0\"/>\n-    <SyncopeRole id=\"6\" name=\"director\" parent_id=\"4\" inheritAttributes=\"1\" inheritDerivedAttributes=\"1\" inheritVirtualAttributes=\"1\"/>\n-    <SyncopeRole id=\"7\" name=\"managingDirector\" parent_id=\"6\" inheritAttributes=\"1\" inheritDerivedAttributes=\"1\" inheritVirtualAttributes=\"1\"/>\n-    <SyncopeRole id=\"8\" name=\"otherchild\" parent_id=\"1\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\" inheritVirtualAttributes=\"1\" passwordPolicy_id=\"4\"/>\n+    <SyncopeRole id=\"1\" name=\"root\"/>\n+    <SyncopeRole id=\"2\" name=\"child\" parent_id=\"1\"/>\n+    <SyncopeRole id=\"3\" name=\"citizen\"/>\n+    <SyncopeRole id=\"4\" name=\"employee\" parent_id=\"3\"/>\n+    <SyncopeRole id=\"5\" name=\"secretary\" parent_id=\"4\"/>\n+\n+    <SyncopeRole id=\"6\"\n+                 name=\"director\" parent_id=\"4\"\n+                 inheritAttributes=\"1\" inheritDerivedAttributes=\"1\" inheritVirtualAttributes=\"1\"\n+                 inheritPasswordPolicy=\"0\" inheritAccountPolicy=\"0\"\n+                 passwordPolicy_id=\"4\"/>\n+\n+    <SyncopeRole id=\"7\"\n+                 name=\"managingDirector\" parent_id=\"6\"\n+                 inheritAttributes=\"1\" inheritDerivedAttributes=\"1\" inheritVirtualAttributes=\"1\"\n+                 inheritPasswordPolicy=\"1\" inheritAccountPolicy=\"1\"/>\n+\n+    <SyncopeRole id=\"8\"\n+                 name=\"otherchild\" parent_id=\"1\"\n+                 inheritVirtualAttributes=\"1\"\n+                 passwordPolicy_id=\"4\"/>\n \n     <Membership id=\"1\" syncopeUser_id=\"1\" syncopeRole_id=\"1\"/>\n     <Membership id=\"2\" syncopeUser_id=\"2\" syncopeRole_id=\"1\"/>"}]}