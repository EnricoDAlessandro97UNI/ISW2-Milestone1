{"sha":"4d5284fa7acf9ad4515e62cbc1014997e8a4018b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjRkNTI4NGZhN2FjZjlhZDQ1MTVlNjJjYmMxMDE0OTk3ZThhNDAxOGI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-10-24T15:24:53Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-10-24T15:25:04Z"},"message":"[SYNCOPE-1501] Now isNullValue / isNotNullValue are working as well","tree":{"sha":"3f6e37e095a8e899743b7cab11bd8acc6eba176c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3f6e37e095a8e899743b7cab11bd8acc6eba176c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4d5284fa7acf9ad4515e62cbc1014997e8a4018b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4d5284fa7acf9ad4515e62cbc1014997e8a4018b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4d5284fa7acf9ad4515e62cbc1014997e8a4018b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4d5284fa7acf9ad4515e62cbc1014997e8a4018b/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7c3b445b2df70bfc302d5758109699d82a69a923","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7c3b445b2df70bfc302d5758109699d82a69a923","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7c3b445b2df70bfc302d5758109699d82a69a923"}],"stats":{"total":133,"additions":94,"deletions":39},"files":[{"sha":"ca512cb334453ec51bd7529219d6a0e0b3cd4d27","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d5284fa7acf9ad4515e62cbc1014997e8a4018b/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d5284fa7acf9ad4515e62cbc1014997e8a4018b/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=4d5284fa7acf9ad4515e62cbc1014997e8a4018b","patch":"@@ -346,6 +346,7 @@ public ConnObjectTO readConnObjectByConnObjectKeyValue(\n     @Transactional(readOnly = true)\n     public Pair<SearchResult, List<ConnObjectTO>> searchConnObjects(\n             final Filter filter,\n+            final Set<String> moreAttrsToGet,\n             final String key,\n             final String anyTypeKey,\n             final int size,\n@@ -365,7 +366,8 @@ public Pair<SearchResult, List<ConnObjectTO>> searchConnObjects(\n             }\n \n             objectClass = resource.getOrgUnit().getObjectClass();\n-            options = MappingUtils.buildOperationOptions(resource.getOrgUnit().getItems().stream());\n+            options = MappingUtils.buildOperationOptions(\n+                    resource.getOrgUnit().getItems().stream(), moreAttrsToGet.toArray(new String[0]));\n         } else {\n             Provision provision = getProvision(key, anyTypeKey);\n             resource = provision.getResource();\n@@ -374,7 +376,7 @@ public Pair<SearchResult, List<ConnObjectTO>> searchConnObjects(\n             Stream<MappingItem> mapItems = Stream.concat(\n                     provision.getMapping().getItems().stream(),\n                     virSchemaDAO.findByProvision(provision).stream().map(VirSchema::asLinkingMappingItem));\n-            options = MappingUtils.buildOperationOptions(mapItems);\n+            options = MappingUtils.buildOperationOptions(mapItems, moreAttrsToGet.toArray(new String[0]));\n         }\n \n         List<ConnObjectTO> connObjects = new ArrayList<>();"},{"sha":"beb377ab6dd54a774359c785f017e10eda7f703c","filename":"core/idm/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d5284fa7acf9ad4515e62cbc1014997e8a4018b/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d5284fa7acf9ad4515e62cbc1014997e8a4018b/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java?ref=4d5284fa7acf9ad4515e62cbc1014997e8a4018b","patch":"@@ -19,8 +19,10 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.net.URI;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import javax.ws.rs.core.MultivaluedMap;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.UriBuilder;\n@@ -102,13 +104,15 @@ public PagedConnObjectTOResult searchConnObjects(\n             final String key, final String anyTypeKey, final ConnObjectTOQuery query) {\n \n         Filter filter = null;\n+        Set<String> moreAttrsToGet = Collections.emptySet();\n         if (StringUtils.isNotBlank(query.getFiql())) {\n             try {\n                 FilterVisitor visitor = new FilterVisitor();\n                 SearchCondition<SearchBean> sc = searchContext.getCondition(query.getFiql(), SearchBean.class);\n                 sc.accept(visitor);\n \n                 filter = visitor.getQuery();\n+                moreAttrsToGet = visitor.getAttrs();\n             } catch (Exception e) {\n                 LOG.error(\"Invalid FIQL expression: {}\", query.getFiql(), e);\n \n@@ -121,6 +125,7 @@ public PagedConnObjectTOResult searchConnObjects(\n \n         Pair<SearchResult, List<ConnObjectTO>> list = logic.searchConnObjects(\n                 filter,\n+                moreAttrsToGet,\n                 key,\n                 anyTypeKey,\n                 query.getSize(),"},{"sha":"c9720e9997f62551231337f800796f2955fdc8cd","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/FilterVisitor.java","status":"modified","additions":35,"deletions":16,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d5284fa7acf9ad4515e62cbc1014997e8a4018b/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d5284fa7acf9ad4515e62cbc1014997e8a4018b/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterVisitor.java?ref=4d5284fa7acf9ad4515e62cbc1014997e8a4018b","patch":"@@ -21,8 +21,11 @@\n import java.net.URLDecoder;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n+import java.util.Set;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.jaxrs.ext.search.ConditionType;\n import org.apache.cxf.jaxrs.ext.search.SearchBean;\n import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n@@ -40,6 +43,8 @@ public class FilterVisitor extends AbstractSearchConditionVisitor<SearchBean, Fi\n \n     private Filter filter;\n \n+    private final Set<String> attrs = new HashSet<>();\n+\n     public FilterVisitor() {\n         super(null);\n     }\n@@ -72,35 +77,45 @@ private Filter visitPrimitive(final SearchCondition<SearchBean> sc) {\n         }\n \n         Attribute attr = AttributeBuilder.build(name, value);\n+        attrs.add(name);\n \n         Filter leaf;\n         switch (ct) {\n             case EQUALS:\n             case NOT_EQUALS:\n                 if (!specialAttrName.isPresent()) {\n                     if (specialAttrValue.isPresent() && specialAttrValue.get() == SpecialAttr.NULL) {\n-                        leaf = FilterBuilder.equalTo(AttributeBuilder.build(name));\n-                    } else if (value.indexOf('%') == -1) {\n-                        leaf = sc.getConditionType() == ConditionType.CUSTOM\n-                                ? FilterBuilder.equalsIgnoreCase(attr)\n-                                : FilterBuilder.equalTo(attr);\n-                    } else if (sc.getConditionType() != ConditionType.CUSTOM && value.startsWith(\"%\")) {\n-                        leaf = FilterBuilder.endsWith(\n-                                AttributeBuilder.build(name, value.substring(1)));\n-                    } else if (sc.getConditionType() != ConditionType.CUSTOM && value.endsWith(\"%\")) {\n-                        leaf = FilterBuilder.startsWith(\n-                                AttributeBuilder.build(name, value.substring(0, value.length() - 1)));\n+                        Filter empty = FilterBuilder.startsWith(AttributeBuilder.build(name, StringUtils.EMPTY));\n+                        if (ct == ConditionType.NOT_EQUALS) {\n+                            leaf = empty;\n+                        } else {\n+                            leaf = FilterBuilder.not(empty);\n+                            attrs.remove(name);\n+                        }\n                     } else {\n-                        throw new IllegalArgumentException(\n-                                String.format(\"Unsupported search value %s\", value));\n+                        if (value.indexOf('%') == -1) {\n+                            leaf = sc.getConditionType() == ConditionType.CUSTOM\n+                                    ? FilterBuilder.equalsIgnoreCase(attr)\n+                                    : FilterBuilder.equalTo(attr);\n+                        } else if (sc.getConditionType() != ConditionType.CUSTOM && value.startsWith(\"%\")) {\n+                            leaf = FilterBuilder.endsWith(\n+                                    AttributeBuilder.build(name, value.substring(1)));\n+                        } else if (sc.getConditionType() != ConditionType.CUSTOM && value.endsWith(\"%\")) {\n+                            leaf = FilterBuilder.startsWith(\n+                                    AttributeBuilder.build(name, value.substring(0, value.length() - 1)));\n+                        } else {\n+                            throw new IllegalArgumentException(\n+                                    String.format(\"Unsupported search value %s\", value));\n+                        }\n+\n+                        if (ct == ConditionType.NOT_EQUALS) {\n+                            leaf = FilterBuilder.not(leaf);\n+                        }\n                     }\n                 } else {\n                     throw new IllegalArgumentException(\n                             String.format(\"Special attr name %s is not supported\", specialAttrName));\n                 }\n-                if (ct == ConditionType.NOT_EQUALS) {\n-                    leaf = FilterBuilder.not(leaf);\n-                }\n                 break;\n \n             case GREATER_OR_EQUALS:\n@@ -163,4 +178,8 @@ public void visit(final SearchCondition<SearchBean> sc) {\n     public Filter getQuery() {\n         return filter;\n     }\n+\n+    public Set<String> getAttrs() {\n+        return attrs;\n+    }\n }"},{"sha":"52834f87192cb8944480ede8dab7613dc44a8f61","filename":"core/persistence-api/src/test/java/org/apache/syncope/core/persistence/api/search/FilterConverterTest.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d5284fa7acf9ad4515e62cbc1014997e8a4018b/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d5284fa7acf9ad4515e62cbc1014997e8a4018b/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverterTest.java?ref=4d5284fa7acf9ad4515e62cbc1014997e8a4018b","patch":"@@ -25,6 +25,7 @@\n \n import java.util.List;\n import java.util.ListIterator;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.search.SpecialAttr;\n@@ -152,24 +153,24 @@ public void isNull() {\n         String fiql = new ConnObjectTOFiqlSearchConditionBuilder().is(\"loginDate\").nullValue().query();\n         assertEquals(\"loginDate==\" + SpecialAttr.NULL, fiql);\n \n-        Filter filter = FilterBuilder.equalTo(AttributeBuilder.build(\"loginDate\"));\n+        Filter filter = FilterBuilder.not(\n+                FilterBuilder.startsWith(AttributeBuilder.build(\"loginDate\", StringUtils.EMPTY)));\n \n-        assertTrue(equals(filter, FilterConverter.convert(fiql)));\n+        Filter converted = FilterConverter.convert(fiql);\n+        assertTrue(converted instanceof NotFilter);\n+\n+        assertTrue(equals(\n+                ((NotFilter) filter).getFilter(), ((NotFilter) converted).getFilter()));\n     }\n \n     @Test\n     public void isNotNull() {\n         String fiql = new ConnObjectTOFiqlSearchConditionBuilder().is(\"loginDate\").notNullValue().query();\n         assertEquals(\"loginDate!=\" + SpecialAttr.NULL, fiql);\n \n-        Filter filter = FilterBuilder.not(FilterBuilder.equalTo(AttributeBuilder.build(\"loginDate\")));\n-        assertTrue(filter instanceof NotFilter);\n-\n-        Filter converted = FilterConverter.convert(fiql);\n-        assertTrue(converted instanceof NotFilter);\n+        Filter filter = FilterBuilder.startsWith(AttributeBuilder.build(\"loginDate\", StringUtils.EMPTY));\n \n-        assertTrue(equals(\n-                ((NotFilter) filter).getFilter(), ((NotFilter) converted).getFilter()));\n+        assertTrue(equals(filter, FilterConverter.convert(fiql)));\n     }\n \n     @Test"},{"sha":"cdb82808ea8ce2194ad7e9a1f2a6ffc2701de57d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d5284fa7acf9ad4515e62cbc1014997e8a4018b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d5284fa7acf9ad4515e62cbc1014997e8a4018b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java?ref=4d5284fa7acf9ad4515e62cbc1014997e8a4018b","patch":"@@ -19,13 +19,15 @@\n package org.apache.syncope.core.provisioning.java.utils;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Stream;\n import org.apache.commons.jexl3.JexlContext;\n import org.apache.commons.jexl3.MapContext;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -185,16 +187,23 @@ public static List<ItemTransformer> getItemTransformers(final Item item) {\n      * Build options for requesting all mapped connector attributes.\n      *\n      * @param items items\n+     * @param moreAttrsToGet additional attributes to get\n      * @return options for requesting all mapped connector attributes\n      * @see OperationOptions\n      */\n-    public static OperationOptions buildOperationOptions(final Stream<? extends Item> items) {\n+    public static OperationOptions buildOperationOptions(\n+            final Stream<? extends Item> items,\n+            final String... moreAttrsToGet) {\n+\n         OperationOptionsBuilder builder = new OperationOptionsBuilder();\n \n         Set<String> attrsToGet = new HashSet<>();\n         attrsToGet.add(Name.NAME);\n         attrsToGet.add(Uid.NAME);\n         attrsToGet.add(OperationalAttributes.ENABLE_NAME);\n+        if (!ArrayUtils.isEmpty(moreAttrsToGet)) {\n+            attrsToGet.addAll(Arrays.asList(moreAttrsToGet));\n+        }\n \n         items.filter(item -> item.getPurpose() != MappingPurpose.NONE).\n                 forEach(item -> attrsToGet.add(item.getExtAttrName()));"},{"sha":"6940012e2e78efe5709e2e7ea57836a79eb1555f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":29,"deletions":10,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d5284fa7acf9ad4515e62cbc1014997e8a4018b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d5284fa7acf9ad4515e62cbc1014997e8a4018b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=4d5284fa7acf9ad4515e62cbc1014997e8a4018b","patch":"@@ -45,7 +45,6 @@\n import org.apache.syncope.common.lib.request.AttrPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n@@ -510,56 +509,76 @@ public void searchConnObjectsBrowsePagedResult() {\n \n     @Test\n     public void searchConnObjectsWithFilter() {\n-        ConnObjectTO user = resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), \"pullFromLDAP\");\n-        assertNotNull(user);\n-\n         PagedConnObjectTOResult matches = resourceService.searchConnObjects(\n                 RESOURCE_NAME_LDAP,\n                 AnyTypeKind.USER.name(),\n                 new ConnObjectTOQuery.Builder().size(100).fiql(\n                         SyncopeClient.getConnObjectTOFiqlSearchConditionBuilder().\n                                 is(\"givenName\").equalTo(\"pullFromLDAP\").query()).build());\n-        assertTrue(matches.getResult().contains(user));\n+        assertTrue(matches.getResult().stream().\n+                anyMatch(connObject -> connObject.getAttr(\"givenName\").get().getValues().contains(\"pullFromLDAP\")));\n \n         matches = resourceService.searchConnObjects(\n                 RESOURCE_NAME_LDAP,\n                 AnyTypeKind.USER.name(),\n                 new ConnObjectTOQuery.Builder().size(100).fiql(\n                         SyncopeClient.getConnObjectTOFiqlSearchConditionBuilder().\n                                 is(\"mail\").equalTo(\"pullFromLDAP*\").query()).build());\n-        assertTrue(matches.getResult().contains(user));\n+        assertTrue(matches.getResult().stream().\n+                anyMatch(connObject -> connObject.getAttr(\"cn\").get().getValues().contains(\"pullFromLDAP\")));\n \n         matches = resourceService.searchConnObjects(\n                 RESOURCE_NAME_LDAP,\n                 AnyTypeKind.USER.name(),\n                 new ConnObjectTOQuery.Builder().size(100).fiql(\n                         SyncopeClient.getConnObjectTOFiqlSearchConditionBuilder().\n                                 is(\"mail\").equalTo(\"*@syncope.apache.org\").query()).build());\n-        assertTrue(matches.getResult().contains(user));\n+        assertTrue(matches.getResult().stream().\n+                anyMatch(connObject -> connObject.getAttr(\"cn\").get().getValues().contains(\"pullFromLDAP\")));\n \n         matches = resourceService.searchConnObjects(\n                 RESOURCE_NAME_LDAP,\n                 AnyTypeKind.USER.name(),\n                 new ConnObjectTOQuery.Builder().size(100).fiql(\n                         SyncopeClient.getConnObjectTOFiqlSearchConditionBuilder().\n                                 is(\"givenName\").equalToIgnoreCase(\"pullfromldap\").query()).build());\n-        assertTrue(matches.getResult().contains(user));\n+        assertTrue(matches.getResult().stream().\n+                anyMatch(connObject -> connObject.getAttr(\"givenName\").get().getValues().contains(\"pullFromLDAP\")));\n \n         matches = resourceService.searchConnObjects(\n                 RESOURCE_NAME_LDAP,\n                 AnyTypeKind.USER.name(),\n                 new ConnObjectTOQuery.Builder().size(100).fiql(\n                         SyncopeClient.getConnObjectTOFiqlSearchConditionBuilder().\n                                 is(Name.NAME).equalTo(\"uid=pullFromLDAP%252Cou=people%252Co=isp\").query()).build());\n-        assertTrue(matches.getResult().contains(user));\n+        assertTrue(matches.getResult().stream().\n+                anyMatch(connObject -> connObject.getAttr(\"cn\").get().getValues().contains(\"pullFromLDAP\")));\n \n         matches = resourceService.searchConnObjects(\n                 RESOURCE_NAME_LDAP,\n                 AnyTypeKind.USER.name(),\n                 new ConnObjectTOQuery.Builder().size(100).fiql(\n                         SyncopeClient.getConnObjectTOFiqlSearchConditionBuilder().\n                                 is(\"givenName\").notEqualTo(\"pullFromLDAP\").query()).build());\n-        assertFalse(matches.getResult().contains(user));\n+        assertFalse(matches.getResult().stream().\n+                anyMatch(connObject -> connObject.getAttr(\"givenName\").get().getValues().contains(\"pullFromLDAP\")));\n+\n+        matches = resourceService.searchConnObjects(\n+                RESOURCE_NAME_LDAP,\n+                AnyTypeKind.USER.name(),\n+                new ConnObjectTOQuery.Builder().size(100).fiql(\n+                        SyncopeClient.getConnObjectTOFiqlSearchConditionBuilder().\n+                                is(\"homePhone\").notNullValue().query()).build());\n+        assertTrue(matches.getResult().isEmpty());\n+\n+        matches = resourceService.searchConnObjects(\n+                RESOURCE_NAME_LDAP,\n+                AnyTypeKind.USER.name(),\n+                new ConnObjectTOQuery.Builder().size(100).fiql(\n+                        SyncopeClient.getConnObjectTOFiqlSearchConditionBuilder().\n+                                is(\"homePhone\").nullValue().query()).build());\n+        assertTrue(matches.getResult().stream().\n+                anyMatch(connObject -> !connObject.getAttr(\"homePhone\").isPresent()));\n     }\n \n     @Test"},{"sha":"813e15f2d8fe85d4ca1d2cbc49478e6c9c12f555","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d5284fa7acf9ad4515e62cbc1014997e8a4018b/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d5284fa7acf9ad4515e62cbc1014997e8a4018b/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=4d5284fa7acf9ad4515e62cbc1014997e8a4018b","patch":"@@ -387,7 +387,7 @@ under the License.\n   <properties>\n     <syncope.version>${project.version}</syncope.version>\n \n-    <connid.version>1.5.0.1</connid.version>\n+    <connid.version>1.5.0.2</connid.version>\n     <connid.soap.version>1.4.3</connid.soap.version>\n     <connid.rest.version>1.0.5</connid.rest.version>\n     <connid.database.version>2.2.6</connid.database.version>"}]}