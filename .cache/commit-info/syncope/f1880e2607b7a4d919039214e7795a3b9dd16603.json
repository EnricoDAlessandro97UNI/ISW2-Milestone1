{"sha":"f1880e2607b7a4d919039214e7795a3b9dd16603","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYxODgwZTI2MDdiN2E0ZDkxOTAzOTIxNGU3Nzk1YTNiOWRkMTY2MDM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-09-07T15:21:33Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-09-07T15:21:33Z"},"message":"Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/syncope","tree":{"sha":"c55dd5f029519b9bfb023318d00f035e3d627beb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c55dd5f029519b9bfb023318d00f035e3d627beb"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f1880e2607b7a4d919039214e7795a3b9dd16603","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f1880e2607b7a4d919039214e7795a3b9dd16603","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f1880e2607b7a4d919039214e7795a3b9dd16603","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f1880e2607b7a4d919039214e7795a3b9dd16603/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"c25cbe3098c313b618b4c0124fe746078693527b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c25cbe3098c313b618b4c0124fe746078693527b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c25cbe3098c313b618b4c0124fe746078693527b"},{"sha":"76e38c59664f39245e6877c5853f5eae79835af4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/76e38c59664f39245e6877c5853f5eae79835af4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/76e38c59664f39245e6877c5853f5eae79835af4"}],"stats":{"total":107,"additions":102,"deletions":5},"files":[{"sha":"3e7a8020671414ae19e4a50ef1f74d210bdb43a7","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/MappingUtils.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1880e2607b7a4d919039214e7795a3b9dd16603/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1880e2607b7a4d919039214e7795a3b9dd16603/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java?ref=f1880e2607b7a4d919039214e7795a3b9dd16603","patch":"@@ -46,9 +46,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n@@ -61,6 +59,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -262,7 +261,7 @@ private static Pair<String, Attribute> prepareAttr(\n         List<PlainAttrValue> values = getIntValues(\n                 provision, mapItem, anys, vAttrsToBeRemoved, vAttrsToBeUpdated);\n \n-        PlainSchema schema = null;\n+        Schema schema = null;\n         boolean readOnlyVirSchema = false;\n         AttrSchemaType schemaType;\n         Pair<String, Attribute> result;\n@@ -280,8 +279,8 @@ private static Pair<String, Attribute> prepareAttr(\n             case GroupVirtualSchema:\n             case AnyObjectVirtualSchema:\n                 VirSchemaDAO virSchemaDAO = beanFactory.getBean(VirSchemaDAO.class);\n-                VirSchema virSchema = virSchemaDAO.find(mapItem.getIntAttrName());\n-                readOnlyVirSchema = (virSchema != null && virSchema.isReadonly());\n+                schema = virSchemaDAO.find(mapItem.getIntAttrName());\n+                readOnlyVirSchema = (schema != null && schema.isReadonly());\n                 schemaType = AttrSchemaType.String;\n                 break;\n "},{"sha":"5ab153f83584c0974ac6c97f4759590643db7a32","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/VirAttrITCase.java","status":"modified","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1880e2607b7a4d919039214e7795a3b9dd16603/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1880e2607b7a4d919039214e7795a3b9dd16603/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java?ref=f1880e2607b7a4d919039214e7795a3b9dd16603","patch":"@@ -26,6 +26,8 @@\n import java.util.Collections;\n import java.util.Locale;\n import java.util.Map;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.mod.StatusMod;\n@@ -315,6 +317,8 @@ public void issueSYNCOPE397() {\n             // make std controls about user\n             assertNotNull(created);\n             assertTrue(RESOURCE_NAME_CSV.equals(created.getResources().iterator().next()));\n+            assertEquals(\"test@testone.org\", created.getVirAttrs().iterator().next().getValues().get(0));\n+            \n             // update user\n             UserTO toBeUpdated = userService.read(created.getKey());\n             UserMod userMod = new UserMod();\n@@ -613,4 +617,98 @@ public void issueSYNCOPE501() {\n         assertFalse(userTO.getVirAttrMap().get(\"virtualdata\").getValues().isEmpty());\n         assertEquals(\"syncope501_updated@apache.org\", userTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n     }\n+\n+    @Test\n+    public void issueSYNCOPE691() {\n+        final String res = RESOURCE_NAME_LDAP + \"691\";\n+\n+        ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n+        ldap.setKey(res);\n+\n+        try {\n+\n+            CollectionUtils.filterInverse(ldap.getProvision(AnyTypeKind.USER.name()).getMapping().getItems(),\n+                    new Predicate<MappingItemTO>() {\n+\n+                        @Override\n+                        public boolean evaluate(final MappingItemTO item) {\n+                            return \"mail\".equals(item.getExtAttrName());\n+                        }\n+                    });\n+\n+            final MappingItemTO mail = new MappingItemTO();\n+            // unset internal attribute mail and set virtual attribute virtualdata as mapped to external email\n+            mail.setIntMappingType(IntMappingType.UserVirtualSchema);\n+            mail.setIntAttrName(\"virtualdata\");\n+            mail.setPurpose(MappingPurpose.BOTH);\n+            mail.setExtAttrName(\"mail\");\n+\n+            ldap.getProvision(AnyTypeKind.USER.name()).getMapping().getItems().add(mail);\n+\n+            resourceService.create(ldap);\n+\n+            ldap = resourceService.read(res);\n+            assertNotNull(ldap.getProvision(AnyTypeKind.USER.name()).getMapping());\n+\n+            assertTrue(CollectionUtils.exists(ldap.getProvision(AnyTypeKind.USER.name()).getMapping().getItems(),\n+                    new Predicate<MappingItemTO>() {\n+\n+                        @Override\n+                        public boolean evaluate(final MappingItemTO item) {\n+                            return \"mail\".equals(item.getExtAttrName()) && \"virtualdata\".equals(item.getIntAttrName());\n+                        }\n+                    }));\n+\n+            // create a new user\n+            UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope691@syncope.apache.org\");\n+            userTO.getResources().clear();\n+            userTO.getMemberships().clear();\n+            userTO.getDerAttrs().clear();\n+            userTO.getVirAttrs().clear();\n+\n+            final AttrTO emailTO = new AttrTO();\n+            emailTO.setSchema(\"virtualdata\");\n+            emailTO.getValues().add(\"test@issue691.dom1.org\");\n+            emailTO.getValues().add(\"test@issue691.dom2.org\");\n+\n+            userTO.getVirAttrs().add(emailTO);\n+            // assign resource-ldap691 to user\n+            userTO.getResources().add(res);\n+            // save user\n+            UserTO created = createUser(userTO);\n+            // make std controls about user\n+            assertNotNull(created);\n+            assertTrue(res.equals(created.getResources().iterator().next()));\n+\n+            assertEquals(2, created.getVirAttrs().iterator().next().getValues().size(), 0);\n+            assertTrue(created.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom1.org\"));\n+            assertTrue(created.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom2.org\"));\n+\n+            // update user\n+            UserMod userMod = new UserMod();\n+            userMod.setKey(created.getKey());\n+            //modify virtual attribute\n+            userMod.getVirAttrsToRemove().add(\"virtualdata\");\n+\n+            final AttrMod emailMod = new AttrMod();\n+            emailMod.setSchema(\"virtualdata\");\n+            emailMod.getValuesToBeAdded().add(\"test@issue691.dom3.org\");\n+            emailMod.getValuesToBeAdded().add(\"test@issue691.dom4.org\");\n+\n+            userMod.getVirAttrsToUpdate().add(emailMod);\n+\n+            final UserTO updated = updateUser(userMod);\n+            assertNotNull(updated);\n+            assertEquals(2, updated.getVirAttrs().iterator().next().getValues().size(), 0);\n+            assertTrue(updated.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom3.org\"));\n+            assertTrue(updated.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom4.org\"));\n+        } finally {\n+            try {\n+                resourceService.delete(res);\n+            } catch (Exception ignore) {\n+                // ignore\n+            }\n+        }\n+    }\n+\n }"}]}