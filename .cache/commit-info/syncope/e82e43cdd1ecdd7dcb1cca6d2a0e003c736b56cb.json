{"sha":"e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU4MmU0M2NkZDFlY2RkN2RjYjFjY2E2ZDJhMGUwMDNjNzM2YjU2Y2I=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-06T14:12:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-06T15:03:33Z"},"message":"[SYNCOPE-1225] Some cleanup","tree":{"sha":"2f91ab4059b837e4fab3c70a31a9c9bcf0e88e7e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2f91ab4059b837e4fab3c70a31a9c9bcf0e88e7e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"3e36930168db1486dde7cadc3c265f817cd9fc5f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3e36930168db1486dde7cadc3c265f817cd9fc5f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3e36930168db1486dde7cadc3c265f817cd9fc5f"}],"stats":{"total":660,"additions":299,"deletions":361},"files":[{"sha":"4dd17b1cd09b54c0ed000c081d889a392d0c4e5a","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaSyncopeOperations.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaSyncopeOperations.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -34,19 +34,19 @@ public <T extends SchemaTO> T read(final String schemaTypeString, final String s\n     }\n \n     public <T extends SchemaTO> List<T> list(final String schemaTypeString) {\n-        return schemaService.list(new SchemaQuery.Builder().type(SchemaType.valueOf(schemaTypeString)).build());\n+        return schemaService.search(new SchemaQuery.Builder().type(SchemaType.valueOf(schemaTypeString)).build());\n     }\n \n     public <T extends SchemaTO> List<T> listPlain() {\n-        return schemaService.list(new SchemaQuery.Builder().type(SchemaType.PLAIN).build());\n+        return schemaService.search(new SchemaQuery.Builder().type(SchemaType.PLAIN).build());\n     }\n \n     public <T extends SchemaTO> List<T> listDerived() {\n-        return schemaService.list(new SchemaQuery.Builder().type(SchemaType.DERIVED).build());\n+        return schemaService.search(new SchemaQuery.Builder().type(SchemaType.DERIVED).build());\n     }\n \n     public <T extends SchemaTO> List<T> listVirtual() {\n-        return schemaService.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n+        return schemaService.search(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n     }\n \n     public void delete(final String schemaTypeString, final String schemaName) {"},{"sha":"e4442a42d965071c70caf9471606b1cbe11ba86f","filename":"client/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationWizardBuilder.java","status":"modified","additions":20,"deletions":5,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -43,6 +43,8 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n@@ -74,6 +76,8 @@ public class NotificationWizardBuilder extends AjaxWizardBuilder<NotificationWra\n \n     private final NotificationRestClient restClient = new NotificationRestClient();\n \n+    private final AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();\n+\n     private final SchemaRestClient schemaRestClient = new SchemaRestClient();\n \n     private final LoggerRestClient loggerRestClient = new LoggerRestClient();\n@@ -345,7 +349,7 @@ public Recipients(final NotificationWrapper modelObject) {\n             AjaxTextFieldPanel recipientAttrName = new AjaxTextFieldPanel(\n                     \"recipientAttrName\", new ResourceModel(\"recipientAttrName\", \"recipientAttrName\").getObject(),\n                     new PropertyModel<>(notificationTO, \"recipientAttrName\"));\n-            recipientAttrName.setChoices(getSchemaNames());\n+            recipientAttrName.setChoices(getSchemas());\n             recipientAttrName.addRequiredLabel();\n             recipientAttrName.setTitle(getString(\"intAttrNameInfo.help\")\n                     + \"<div style=\\\"font-size: 10px;\\\">\"\n@@ -381,15 +385,26 @@ public Recipients(final NotificationWrapper modelObject) {\n         }\n     }\n \n-    private List<String> getSchemaNames() {\n+    private List<String> getSchemas() {\n+        AnyTypeTO type = null;\n+        try {\n+            type = anyTypeRestClient.read(AnyTypeKind.USER.name());\n+        } catch (SyncopeClientException e) {\n+            LOG.error(\"While reading all any types\", e);\n+        }\n+\n+        String[] anyTypeClasses = type == null\n+                ? new String[0]\n+                : type.getClasses().toArray(new String[] {});\n+\n         List<String> result = new ArrayList<>();\n         result.add(\"username\");\n \n-        result.addAll(schemaRestClient.<PlainSchemaTO>getSchemas(SchemaType.PLAIN, AnyTypeKind.USER.name()).\n+        result.addAll(schemaRestClient.<PlainSchemaTO>getSchemas(SchemaType.PLAIN, null, anyTypeClasses).\n                 stream().map(EntityTO::getKey).collect(Collectors.toList()));\n-        result.addAll(schemaRestClient.<DerSchemaTO>getSchemas(SchemaType.DERIVED, AnyTypeKind.USER.name()).\n+        result.addAll(schemaRestClient.<DerSchemaTO>getSchemas(SchemaType.DERIVED, null, anyTypeClasses).\n                 stream().map(EntityTO::getKey).collect(Collectors.toList()));\n-        result.addAll(schemaRestClient.<VirSchemaTO>getSchemas(SchemaType.VIRTUAL, AnyTypeKind.USER.name()).\n+        result.addAll(schemaRestClient.<VirSchemaTO>getSchemas(SchemaType.VIRTUAL, null, anyTypeClasses).\n                 stream().map(EntityTO::getKey).collect(Collectors.toList()));\n \n         Collections.sort(result);"},{"sha":"079086d7f12e5d8570195103a6570d1c05fedc98","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypePanel.java","status":"modified","additions":39,"deletions":20,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n+import java.io.Serializable;\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -128,7 +129,7 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n             }, true);\n \n             initResultTable();\n-            MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.SCHEMA_LIST);\n+            MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.SCHEMA_CREATE);\n         } catch (InstantiationException | IllegalAccessException e) {\n             LOG.error(\"Error create new schema\", e);\n         }\n@@ -252,33 +253,25 @@ private SchemaProvider(final int paginatorRows, final SchemaType schemaType) {\n \n         @Override\n         public Iterator<SchemaTO> iterator(final long first, final long count) {\n-            List<SchemaTO> schemaList = StringUtils.isBlank(keyword)\n-                    ? restClient.getSchemas(this.schemaType)\n-                    : restClient.getSchemas(this.schemaType, keyword, new String[0]);\n-            Collections.sort(schemaList, comparator);\n+            List<SchemaTO> schemas = restClient.getSchemas(this.schemaType, keyword);\n+            Collections.sort(schemas, comparator);\n \n             if (SchemaType.PLAIN == this.schemaType) {\n                 final List<String> configurations = confRestClient.list().stream().\n                         map(AttrTO::getSchema).collect(Collectors.toList());\n \n-                final List<SchemaTO> res = new ArrayList<>();\n-                schemaList.stream().\n+                final List<SchemaTO> res = schemas.stream().\n                         filter(item -> !configurations.contains(item.getKey())).\n-                        forEachOrdered(item -> {\n-                            res.add(item);\n-                        });\n-\n+                        collect(Collectors.toList());\n                 return res.subList((int) first, (int) first + (int) count).iterator();\n             } else {\n-                return schemaList.subList((int) first, (int) first + (int) count).iterator();\n+                return schemas.subList((int) first, (int) first + (int) count).iterator();\n             }\n         }\n \n         @Override\n         public long size() {\n-            int size = StringUtils.isBlank(keyword)\n-                    ? restClient.getSchemas(this.schemaType).size()\n-                    : restClient.getSchemas(this.schemaType, keyword, new String[0]).size();\n+            int size = restClient.getSchemas(this.schemaType, keyword).size();\n             return size > confRestClient.list().size()\n                     ? (SchemaType.PLAIN == this.schemaType\n                             ? size - confRestClient.list().size()\n@@ -294,17 +287,43 @@ public IModel<SchemaTO> model(final SchemaTO object) {\n \n     @Override\n     public void onEvent(final IEvent<?> event) {\n-        if (event.getPayload() instanceof SchemaTypePanelWithSearch.SchemaSearchEvent) {\n-            SchemaTypePanelWithSearch.SchemaSearchEvent payload =\n-                    SchemaTypePanelWithSearch.SchemaSearchEvent.class.cast(event.getPayload());\n-            final AjaxRequestTarget target = payload.getTarget();\n+        if (event.getPayload() instanceof SchemaSearchEvent) {\n+            SchemaSearchEvent payload = SchemaSearchEvent.class.cast(event.getPayload());\n+            AjaxRequestTarget target = payload.getTarget();\n+\n             keyword = payload.getKeyword();\n+            if (!keyword.startsWith(\"*\")) {\n+                keyword = \"*\" + keyword;\n+            }\n+            if (!keyword.endsWith(\"*\")) {\n+                keyword = keyword + \"*\";\n+            }\n \n             updateResultTable(target);\n-            ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n         } else {\n             super.onEvent(event);\n         }\n     }\n \n+    public static class SchemaSearchEvent implements Serializable {\n+\n+        private static final long serialVersionUID = -282052400565266028L;\n+\n+        private final AjaxRequestTarget target;\n+\n+        private final String keyword;\n+\n+        SchemaSearchEvent(final AjaxRequestTarget target, final String keyword) {\n+            this.target = target;\n+            this.keyword = keyword;\n+        }\n+\n+        public AjaxRequestTarget getTarget() {\n+            return target;\n+        }\n+\n+        public String getKeyword() {\n+            return keyword;\n+        }\n+    }\n }"},{"sha":"c822630a61fd7ac2c2bd7ac5e9728f7ef21025f0","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypePanelWithSearch.java","status":"removed","additions":0,"deletions":105,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanelWithSearch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanelWithSearch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanelWithSearch.java?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -1,105 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.panels;\n-\n-import java.io.Serializable;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.wicket.PageReference;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink;\n-import org.apache.wicket.event.Broadcast;\n-import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.wicket.markup.html.form.Form;\n-import org.apache.wicket.markup.html.panel.Panel;\n-import org.apache.wicket.model.Model;\n-\n-public class SchemaTypePanelWithSearch extends Panel {\n-\n-    private static final long serialVersionUID = 433565065115855671L;\n-\n-    private final SchemaTypePanel schemaTypePanel;\n-\n-    public SchemaTypePanelWithSearch(final String id,\n-            final SchemaType schemaType,\n-            final PageReference pageReference) {\n-        super(id);\n-\n-        schemaTypePanel = new SchemaTypePanel(id, schemaType, pageReference);\n-\n-        addSearchBox();\n-        add(schemaTypePanel);\n-    }\n-\n-    private void addSearchBox() {\n-        final Model<String> queryFilter = new Model<>(StringUtils.EMPTY);\n-\n-        final WebMarkupContainer searchBoxContainer = new WebMarkupContainer(\"searchBox\");\n-        final Form<?> form = new Form<>(\"form\");\n-        final AjaxTextFieldPanel filter = new AjaxTextFieldPanel(\n-                \"filter\",\n-                \"filter\",\n-                queryFilter,\n-                false);\n-        filter.hideLabel().setOutputMarkupId(true);\n-        form.add(filter);\n-\n-        form.add(new AjaxSubmitLink(\"search\") {\n-\n-            private static final long serialVersionUID = -1765773642975892072L;\n-\n-            @Override\n-            protected void onAfterSubmit(final AjaxRequestTarget target, final Form<?> form) {\n-                super.onAfterSubmit(target, form);\n-\n-                send(SchemaTypePanelWithSearch.this,\n-                        Broadcast.DEPTH,\n-                        new SchemaSearchEvent(target, queryFilter.getObject()));\n-            }\n-        });\n-        searchBoxContainer.add(form);\n-\n-        add(searchBoxContainer);\n-    }\n-\n-    public static class SchemaSearchEvent implements Serializable {\n-\n-        private static final long serialVersionUID = -282052400565266028L;\n-\n-        private final AjaxRequestTarget target;\n-\n-        private final String keyword;\n-\n-        public SchemaSearchEvent(final AjaxRequestTarget target, final String keyword) {\n-            this.target = target;\n-            this.keyword = keyword;\n-        }\n-\n-        public AjaxRequestTarget getTarget() {\n-            return target;\n-        }\n-\n-        public String getKeyword() {\n-            return keyword;\n-        }\n-\n-    }\n-\n-}"},{"sha":"62cd9072cef5829f4339506b1134ea46811064ae","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SchemasPanel.java","status":"modified","additions":75,"deletions":4,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemasPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemasPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemasPanel.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -20,33 +20,103 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.tabs.Accordion;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.wicket.AttributeModifier;\n+import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxEventBehavior;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.attributes.AjaxCallListener;\n+import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;\n+import org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink;\n+import org.apache.wicket.event.Broadcast;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.markup.html.tabs.ITab;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.Model;\n \n public class SchemasPanel extends Panel {\n \n     private static final long serialVersionUID = -1140213992451232279L;\n \n+    private static final String SEARCH_SUBMIT_LINK = \"searchSubmitLink\";\n+\n     private final PageReference pageReference;\n \n     public SchemasPanel(final String id, final PageReference pageRef) {\n         super(id);\n \n         this.pageReference = pageRef;\n \n-        final Accordion accordion = new Accordion(\"accordionPanel\", buildTabList());\n+        final Model<String> keywordModel = new Model<>(StringUtils.EMPTY);\n+\n+        WebMarkupContainer searchBoxContainer = new WebMarkupContainer(\"searchBox\");\n+        add(searchBoxContainer);\n+\n+        final Form<?> form = new Form<>(\"form\");\n+        searchBoxContainer.add(form);\n+\n+        final AjaxTextFieldPanel searchPanel = new AjaxTextFieldPanel(\n+                \"filter\", \"filter\", keywordModel, true);\n+        form.add(searchPanel.hideLabel().setOutputMarkupId(true));\n+\n+        final AjaxSubmitLink submitLink = new AjaxSubmitLink(\"search\") {\n+\n+            private static final long serialVersionUID = -1765773642975892072L;\n+\n+            @Override\n+            protected void onAfterSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                super.onAfterSubmit(target, form);\n+\n+                send(SchemasPanel.this, Broadcast.DEPTH,\n+                        new SchemaTypePanel.SchemaSearchEvent(target, keywordModel.getObject()));\n+            }\n+        };\n+        submitLink.setOutputMarkupId(true);\n+        submitLink.setMarkupId(SEARCH_SUBMIT_LINK);\n+        form.add(submitLink);\n+\n+        searchPanel.getField().add(AttributeModifier.replace(\n+                \"onkeydown\",\n+                Model.of(\"if(event.keyCode == 13) {event.preventDefault();}\")));\n+\n+        searchPanel.getField().add(new AjaxEventBehavior(\"onkeydown\") {\n+\n+            private static final long serialVersionUID = -7133385027739964990L;\n+\n+            @Override\n+            protected void onEvent(final AjaxRequestTarget target) {\n+                target.appendJavaScript(\"$('#\" + SEARCH_SUBMIT_LINK + \"').click();\");\n+            }\n+\n+            @Override\n+            protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {\n+                super.updateAjaxAttributes(attributes);\n+\n+                attributes.getAjaxCallListeners().add(new AjaxCallListener() {\n+\n+                    private static final long serialVersionUID = 7160235486520935153L;\n+\n+                    @Override\n+                    public CharSequence getPrecondition(final Component component) {\n+                        return \"if (Wicket.Event.keyCode(attrs.event)  == 13) { return true; } else { return false; }\";\n+                    }\n+                });\n+            }\n+        });\n+\n+        Accordion accordion = new Accordion(\"accordionPanel\", buildTabList());\n         accordion.setOutputMarkupId(true);\n         add(accordion);\n     }\n \n     private List<ITab> buildTabList() {\n-\n-        final List<ITab> tabs = new ArrayList<>();\n+        List<ITab> tabs = new ArrayList<>();\n \n         for (final SchemaType schemaType : SchemaType.values()) {\n             tabs.add(new AbstractTab(new Model<>(schemaType.name())) {\n@@ -55,10 +125,11 @@ private List<ITab> buildTabList() {\n \n                 @Override\n                 public Panel getPanel(final String panelId) {\n-                    return new SchemaTypePanelWithSearch(panelId, schemaType, pageReference);\n+                    return new SchemaTypePanel(panelId, schemaType, pageReference);\n                 }\n             });\n         }\n+\n         return tabs;\n     }\n }"},{"sha":"7cdda858c31c845f3f409a0aeacf5612e953732e","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -184,8 +184,7 @@ protected List<String> load() {\n             @Override\n             protected Map<String, PlainSchemaTO> load() {\n                 final List<PlainSchemaTO> schemas = schemaRestClient.<PlainSchemaTO>getSchemas(\n-                        SchemaType.PLAIN,\n-                        anyTypeRestClient.read(type).getClasses().toArray(new String[] {}));\n+                        SchemaType.PLAIN, null, anyTypeRestClient.read(type).getClasses().toArray(new String[] {}));\n \n                 final Map<String, PlainSchemaTO> res = new HashMap<>();\n                 for (PlainSchemaTO schema : schemas) {"},{"sha":"11fd81281f66d604fdf357fa98aa99382c3ca910","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/SchemaRestClient.java","status":"modified","additions":18,"deletions":46,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -22,6 +22,7 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n@@ -57,70 +58,41 @@ public <T extends SchemaTO> List<T> getSchemas(final SchemaType schemaType, fina\n                 break;\n \n             default:\n-                for (AnyTypeTO anyTypeTO : new AnyTypeRestClient().listAnyTypes()) {\n-                    if (anyTypeTO.getKind() != AnyTypeKind.USER && anyTypeTO.getKind() != AnyTypeKind.GROUP) {\n-                        classes.addAll(anyTypeTO.getClasses());\n-                    }\n-                }\n+                new AnyTypeRestClient().listAnyTypes().stream().filter(\n+                        anyTypeTO -> (anyTypeTO.getKind() != AnyTypeKind.USER\n+                        && anyTypeTO.getKind() != AnyTypeKind.GROUP)).\n+                        forEach((anyTypeTO) -> {\n+                            classes.addAll(anyTypeTO.getClasses());\n+                        });\n         }\n-        return getSchemas(schemaType, classes.toArray(new String[] {}));\n+        return getSchemas(schemaType, null, classes.toArray(new String[] {}));\n     }\n \n-    public <T extends SchemaTO> List<T> getSchemas(final SchemaType schemaType, final String typeName) {\n-        AnyTypeTO type = null;\n+    public <T extends SchemaTO> List<T> getSchemas(\n+            final SchemaType schemaType, final String keyword, final String... anyTypeClasses) {\n \n-        try {\n-            type = getService(AnyTypeService.class).read(typeName);\n-        } catch (SyncopeClientException e) {\n-            LOG.error(\"While reading all any types\", e);\n+        SchemaQuery.Builder builder = new SchemaQuery.Builder().type(schemaType);\n+        if (StringUtils.isNotBlank(keyword)) {\n+            builder.keyword(keyword);\n         }\n-\n-        if (type == null) {\n-            return getSchemas(schemaType);\n-        } else {\n-            return getSchemas(schemaType, type.getClasses().toArray(new String[] {}));\n+        if (anyTypeClasses != null && anyTypeClasses.length > 0) {\n+            builder.anyTypeClasses(anyTypeClasses);\n         }\n-    }\n \n-    public <T extends SchemaTO> List<T> getSchemas(final SchemaType schemaType, final String... kind) {\n-        return doGetSchemas(schemaType, null, kind);\n-    }\n-\n-    public <T extends SchemaTO> List<T> getSchemas(\n-            final SchemaType schemaType, final String keyword, final String... kind) {\n-        return doGetSchemas(schemaType, keyword, kind);\n-    }\n-\n-    private <T extends SchemaTO> List<T> doGetSchemas(\n-            final SchemaType schemaType, final String keyword, final String... kind) {\n         List<T> schemas = new ArrayList<>();\n-\n         try {\n-            SchemaQuery.Builder schemaQuery =\n-                    new SchemaQuery.Builder().type(schemaType);\n-            if (keyword != null) {\n-                schemaQuery.keyword(keyword);\n-            }\n-\n-            if (kind == null || kind.length == 0) {\n-                schemas.addAll(getService(SchemaService.class).\n-                        <T>list(schemaQuery.build()));\n-            } else {\n-                schemas.addAll(getService(SchemaService.class).\n-                        <T>list(schemaQuery.anyTypeClasses(kind).build()));\n-            }\n+            schemas.addAll(getService(SchemaService.class).<T>search(builder.build()));\n         } catch (SyncopeClientException e) {\n-            LOG.error(\"While getting all {} schemas for {}\", schemaType, kind, e);\n+            LOG.error(\"While getting all {} schemas for {}\", schemaType, anyTypeClasses, e);\n         }\n-\n         return schemas;\n     }\n \n     public List<String> getSchemaNames(final SchemaType schemaType) {\n         List<String> schemaNames = Collections.emptyList();\n \n         try {\n-            schemaNames = getSchemas(schemaType).stream().map(EntityTO::getKey).collect(Collectors.toList());\n+            schemaNames = getSchemas(schemaType, null).stream().map(EntityTO::getKey).collect(Collectors.toList());\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While getting all user schema names\", e);\n         }"},{"sha":"a7446fead6dee3042bef7b7cdc09a90f97fcdfef","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -151,7 +151,7 @@ private void setSchemas(final List<String> anyTypeClasses, final Map<String, S>\n         if (anyTypeClasses.isEmpty()) {\n             allSchemas = Collections.emptyList();\n         } else {\n-            allSchemas = schemaRestClient.getSchemas(getSchemaType(), anyTypeClasses.toArray(new String[] {}));\n+            allSchemas = schemaRestClient.getSchemas(getSchemaType(), null, anyTypeClasses.toArray(new String[] {}));\n         }\n \n         scs.clear();"},{"sha":"76e4c43b51e430a4e71a422bdba59c48077a0d74","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/BasePage.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.html?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -117,7 +117,7 @@\n                 <li wicket:id=\"policiesLI\"><a href=\"#\" wicket:id=\"policies\"><i class=\"fa fa-list\"></i><wicket:message key=\"policies\"/></a></li>\n                 <li wicket:id=\"securityquestionsLI\"><a href=\"#\" wicket:id=\"securityquestions\"><i class=\"fa fa-question\"></i><wicket:message key=\"securityQuestions\"/></a></li>\n                 <li wicket:id=\"typesLI\"><a href=\"#\" wicket:id=\"types\"><i class=\"fa fa-wrench\"></i><wicket:message key=\"types\"/></a></li>\n-                <li wicket:id=\"workflowLI\"><a href=\"#\" wicket:id=\"workflow\"><i class=\"fa fa-share-alt\"></i><wicket:message key=\"workflow\"/></a></li>\n+                <li wicket:id=\"workflowLI\"><a href=\"#\" wicket:id=\"workflow\"><i class=\"fa fa-briefcase\"></i><wicket:message key=\"workflow\"/></a></li>\n               </ul>\n             </li>\n             <li wicket:id=\"extensionsLI\" class=\"treeview\">"},{"sha":"6caa8b63dc598539c15c476ef7769cda406d20c1","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/SchemaTypePanelWithSearch.html","status":"removed","additions":0,"deletions":33,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e36930168db1486dde7cadc3c265f817cd9fc5f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanelWithSearch.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e36930168db1486dde7cadc3c265f817cd9fc5f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanelWithSearch.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanelWithSearch.html?ref=3e36930168db1486dde7cadc3c265f817cd9fc5f","patch":"@@ -1,33 +0,0 @@\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n-  <wicket:panel>\n-    <div wicket:id=\"searchBox\">\n-      <form wicket:id=\"form\">\n-        <div class=\"form-group input-group\">\n-          <span wicket:id=\"filter\">[FILTER]</span>\n-          <span class=\"input-group-addon\">\n-            <a href=\"#\" wicket:id=\"search\"><i class=\"glyphicon glyphicon-search\"></i></a>\n-          </span>\n-        </div>\n-      </form>\n-    </div>\n-    <div wicket:id=\"content\"></div>\n-  </wicket:panel>\n-</html>\n\\ No newline at end of file"},{"sha":"c1e31f310c0e4017914deae0e5d06699f50f5cfa","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/SchemasPanel.html","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemasPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemasPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemasPanel.html?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -18,6 +18,17 @@\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n+    <div wicket:id=\"searchBox\">\n+      <form wicket:id=\"form\">\n+        <div class=\"form-group input-group\">\n+          <span wicket:id=\"filter\">[FILTER]</span>\n+          <span class=\"input-group-addon\">\n+            <a href=\"#\" wicket:id=\"search\"><i class=\"glyphicon glyphicon-search\"></i></a>\n+          </span>\n+        </div>\n+      </form>\n+    </div>\n+\n     <div wicket:id=\"accordionPanel\"></div>\n   </wicket:panel>\n </html>\n\\ No newline at end of file"},{"sha":"0238072173db58b485a1e70da26f168c7727cab0","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -83,7 +83,7 @@ public SyncopeEnduserSession(final Request request) {\n         platformInfo = anonymousClient.getService(SyncopeService.class).platform();\n \n         datePlainSchemas = anonymousClient.getService(SchemaService.class).\n-                list(new SchemaQuery.Builder().type(SchemaType.PLAIN).build());\n+                search(new SchemaQuery.Builder().type(SchemaType.PLAIN).build());\n         datePlainSchemas.removeAll(datePlainSchemas.stream().\n                 filter(object -> object.getType() != AttrSchemaType.Date).collect(Collectors.toSet()));\n     }"},{"sha":"3559bdbf61e27492371cc4974c4c19f7422acc43","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SchemaResource.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -94,30 +94,30 @@ protected AbstractResource.ResourceResponse newResourceResponse(final IResource.\n             final List<SchemaTO> plainSchemas = classes.isEmpty()\n                     ? Collections.<SchemaTO>emptyList()\n                     : customForm == null || customForm.isEmpty() || customForm.get(SchemaType.PLAIN.name()) == null\n-                    ? schemaService.list(\n+                    ? schemaService.search(\n                             new SchemaQuery.Builder().type(SchemaType.PLAIN).anyTypeClasses(classes).build())\n                     : customForm.get(SchemaType.PLAIN.name()).isShow()\n-                    ? customizeSchemas(schemaService.list(new SchemaQuery.Builder().type(SchemaType.PLAIN).\n+                    ? customizeSchemas(schemaService.search(new SchemaQuery.Builder().type(SchemaType.PLAIN).\n                             anyTypeClasses(classes).build()), group, customForm.get(SchemaType.PLAIN.name()).\n                             getAttributes())\n                     : Collections.<SchemaTO>emptyList();\n             final List<SchemaTO> derSchemas = classes.isEmpty()\n                     ? Collections.<SchemaTO>emptyList()\n                     : customForm == null || customForm.isEmpty() || customForm.get(SchemaType.DERIVED.name()) == null\n-                    ? schemaService.list(\n+                    ? schemaService.search(\n                             new SchemaQuery.Builder().type(SchemaType.DERIVED).anyTypeClasses(classes).build())\n                     : customForm.get(SchemaType.DERIVED.name()).isShow()\n-                    ? customizeSchemas(schemaService.list(new SchemaQuery.Builder().type(SchemaType.DERIVED).\n+                    ? customizeSchemas(schemaService.search(new SchemaQuery.Builder().type(SchemaType.DERIVED).\n                             anyTypeClasses(classes).build()), group, customForm.get(SchemaType.DERIVED.name()).\n                             getAttributes())\n                     : Collections.<SchemaTO>emptyList();\n             final List<SchemaTO> virSchemas = classes.isEmpty()\n                     ? Collections.<SchemaTO>emptyList()\n                     : customForm == null || customForm.isEmpty() || customForm.get(SchemaType.VIRTUAL.name()) == null\n-                    ? schemaService.list(\n+                    ? schemaService.search(\n                             new SchemaQuery.Builder().type(SchemaType.VIRTUAL).anyTypeClasses(classes).build())\n                     : customForm.get(SchemaType.VIRTUAL.name()).isShow()\n-                    ? customizeSchemas(schemaService.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).\n+                    ? customizeSchemas(schemaService.search(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).\n                             anyTypeClasses(classes).build()), group, customForm.get(SchemaType.VIRTUAL.name()).\n                             getAttributes())\n                     : Collections.<SchemaTO>emptyList();"},{"sha":"2c0805a249793c49ffdd232ac47a43bd63f6338f","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/SchemaQuery.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -63,7 +63,6 @@ public Builder anyTypeClasses(final String... anyTypeClasses) {\n \n         public Builder keyword(final String keyword) {\n             instance.setKeyword(keyword);\n-\n             return this;\n         }\n "},{"sha":"a1f983b43f5e5e99c21b8cceefe67d9e6ea9a45d","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -60,12 +60,12 @@ public interface SchemaService extends JAXRSService {\n      * @param <T> actual SchemaTO\n      * @param query query conditions\n      * @return list of schemas with matching type, for the given anyTypeClass if provided,\n-     * with names containing keyword if provided\n+     * with keys containing keyword if provided\n      */\n     @GET\n     @Path(\"{type}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    <T extends SchemaTO> List<T> list(@BeanParam SchemaQuery query);\n+    <T extends SchemaTO> List<T> search(@BeanParam SchemaQuery query);\n \n     /**\n      * Returns schema matching the given type and key."},{"sha":"f1ce6ff7ad5425d26100c476a5afa2331674b315","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -145,24 +145,21 @@ public void delete(final SchemaType schemaType, final String schemaKey) {\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    @SuppressWarnings({ \"unchecked\", \"Convert2Lambda\" })\n-    public <T extends SchemaTO> List<T> list(\n-            final SchemaType schemaType, final List<String> anyTypeClasses) {\n+    public <T extends SchemaTO> List<T> list(final SchemaType schemaType, final List<String> anyTypeClasses) {\n         return doSearch(schemaType, anyTypeClasses, null);\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    @SuppressWarnings(\"unchecked\")\n     public <T extends SchemaTO> List<T> search(\n             final SchemaType schemaType, final List<String> anyTypeClasses, final String keyword) {\n-        return doSearch(schemaType, anyTypeClasses,\n-                keyword != null\n-                        ? StringUtils.replaceChars(keyword, \"*\", \"%\")\n-                        : null);\n+\n+        return doSearch(schemaType, anyTypeClasses, keyword == null ? null : keyword.replace('*', '%'));\n     }\n \n+    @SuppressWarnings({ \"unchecked\", \"Convert2Lambda\" })\n     private <T extends SchemaTO> List<T> doSearch(\n             final SchemaType schemaType, final List<String> anyTypeClasses, final String keyword) {\n+\n         List<AnyTypeClass> classes = new ArrayList<>(anyTypeClasses == null ? 0 : anyTypeClasses.size());\n         if (anyTypeClasses != null) {\n             anyTypeClasses.remove(AnyTypeKind.USER.name());\n@@ -181,7 +178,9 @@ private <T extends SchemaTO> List<T> doSearch(\n         switch (schemaType) {\n             case VIRTUAL:\n                 result = (classes.isEmpty()\n-                        ? (keyword == null ? virSchemaDAO.findAll() : virSchemaDAO.search(keyword))\n+                        ? keyword == null\n+                                ? virSchemaDAO.findAll()\n+                                : virSchemaDAO.findByKeyword(keyword)\n                         : virSchemaDAO.findByAnyTypeClasses(classes)).\n                         stream().map(new Function<VirSchema, T>() {\n \n@@ -194,7 +193,9 @@ public T apply(final VirSchema schema) {\n \n             case DERIVED:\n                 result = (classes.isEmpty()\n-                        ? (keyword == null ? derSchemaDAO.findAll() : derSchemaDAO.search(keyword))\n+                        ? keyword == null\n+                                ? derSchemaDAO.findAll()\n+                                : derSchemaDAO.findByKeyword(keyword)\n                         : derSchemaDAO.findByAnyTypeClasses(classes)).\n                         stream().map(new Function<DerSchema, T>() {\n \n@@ -208,7 +209,9 @@ public T apply(final DerSchema schema) {\n             case PLAIN:\n             default:\n                 result = (classes.isEmpty()\n-                        ? (keyword == null ? plainSchemaDAO.findAll() : plainSchemaDAO.search(keyword))\n+                        ? keyword == null\n+                                ? plainSchemaDAO.findAll()\n+                                : plainSchemaDAO.findByKeyword(keyword)\n                         : plainSchemaDAO.findByAnyTypeClasses(classes)).\n                         stream().map(new Function<PlainSchema, T>() {\n "},{"sha":"0f8a10d4a115b88039d793102b45751ab6968141","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SchemaDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSchemaDAO.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -29,10 +29,10 @@\n \n     List<S> findByAnyTypeClasses(Collection<AnyTypeClass> anyTypeClasses);\n \n+    List<S> findByKeyword(String keyword);\n+\n     List<S> findAll();\n-    \n-    List<S> search(String keyword);\n-    \n+\n     S save(S derSchema);\n \n     void delete(String key);"},{"sha":"d0a1ade29d303594adad698be068e14e19245b4f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -56,18 +56,18 @@ public List<DerSchema> findByAnyTypeClasses(final Collection<AnyTypeClass> anyTy\n     }\n \n     @Override\n-    public List<DerSchema> findAll() {\n+    public List<DerSchema> findByKeyword(final String keyword) {\n         TypedQuery<DerSchema> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPADerSchema.class.getSimpleName() + \" e\", DerSchema.class);\n+                \"SELECT e FROM \" + JPADerSchema.class.getSimpleName() + \" e\"\n+                + \" WHERE e.id LIKE :keyword\", DerSchema.class);\n+        query.setParameter(\"keyword\", keyword);\n         return query.getResultList();\n     }\n \n     @Override\n-    public List<DerSchema> search(final String keyword) {\n+    public List<DerSchema> findAll() {\n         TypedQuery<DerSchema> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPADerSchema.class.getSimpleName() + \" e\"\n-                + \" WHERE e.id LIKE :keyword\", DerSchema.class);\n-        query.setParameter(\"keyword\", keyword);\n+                \"SELECT e FROM \" + JPADerSchema.class.getSimpleName() + \" e\", DerSchema.class);\n         return query.getResultList();\n     }\n "},{"sha":"b431b1f1c45d9758687976944ddd313cee389c07","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -85,18 +85,18 @@ public List<PlainSchema> findByValidator(final Implementation validator) {\n     }\n \n     @Override\n-    public List<PlainSchema> findAll() {\n+    public List<PlainSchema> findByKeyword(final String keyword) {\n         TypedQuery<PlainSchema> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAPlainSchema.class.getSimpleName() + \" e\", PlainSchema.class);\n+                \"SELECT e FROM \" + JPAPlainSchema.class.getSimpleName() + \" e\"\n+                + \" WHERE e.id LIKE :keyword\", PlainSchema.class);\n+        query.setParameter(\"keyword\", keyword);\n         return query.getResultList();\n     }\n \n     @Override\n-    public List<PlainSchema> search(final String keyword) {\n+    public List<PlainSchema> findAll() {\n         TypedQuery<PlainSchema> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAPlainSchema.class.getSimpleName() + \" e\"\n-                + \" WHERE e.id LIKE :keyword\", PlainSchema.class);\n-        query.setParameter(\"keyword\", keyword);\n+                \"SELECT e FROM \" + JPAPlainSchema.class.getSimpleName() + \" e\", PlainSchema.class);\n         return query.getResultList();\n     }\n "},{"sha":"8a669d4d33b66c653aeba315aaa5079c1408f474","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -108,18 +108,18 @@ public List<VirSchema> findByProvision(final Provision provision) {\n     }\n \n     @Override\n-    public List<VirSchema> findAll() {\n+    public List<VirSchema> findByKeyword(final String keyword) {\n         TypedQuery<VirSchema> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAVirSchema.class.getSimpleName() + \" e\", VirSchema.class);\n+                \"SELECT e FROM \" + JPAVirSchema.class.getSimpleName() + \" e\"\n+                + \" WHERE e.id LIKE :keyword\", VirSchema.class);\n+        query.setParameter(\"keyword\", keyword);\n         return query.getResultList();\n     }\n \n     @Override\n-    public List<VirSchema> search(final String keyword) {\n+    public List<VirSchema> findAll() {\n         TypedQuery<VirSchema> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAVirSchema.class.getSimpleName() + \" e\"\n-                + \" WHERE e.id LIKE :keyword\", VirSchema.class);\n-        query.setParameter(\"keyword\", keyword);\n+                \"SELECT e FROM \" + JPAVirSchema.class.getSimpleName() + \" e\", VirSchema.class);\n         return query.getResultList();\n     }\n "},{"sha":"b060c0a063abd1d95849092db44adddc053cff3f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/DerSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerSchemaTest.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -48,7 +48,7 @@ public void findAll() {\n \n     @Test\n     public void search() {\n-        List<DerSchema> schemas = derSchemaDAO.search(\"mderivedd%\");\n+        List<DerSchema> schemas = derSchemaDAO.findByKeyword(\"mderivedd%\");\n         assertEquals(1, schemas.size());\n     }\n "},{"sha":"3f18224d93ac2bb178bfa9503d4010719d316bb0","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -57,7 +57,7 @@ public void findAll() {\n \n     @Test\n     public void search() {\n-        List<PlainSchema> schemas = plainSchemaDAO.search(\"fullna%\");\n+        List<PlainSchema> schemas = plainSchemaDAO.findByKeyword(\"fullna%\");\n         assertEquals(1, schemas.size());\n     }\n "},{"sha":"b723f24d8b2f67920974bb8602025eaf28e20641","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/VirSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -55,7 +55,7 @@ public void findAll() {\n \n     @Test\n     public void search() {\n-        List<VirSchema> schemas = virSchemaDAO.search(\"rvirtuald%\");\n+        List<VirSchema> schemas = virSchemaDAO.findByKeyword(\"rvirtuald%\");\n         assertEquals(1, schemas.size());\n     }\n "},{"sha":"ac5f5c6191037541b3ccb2b985375b364bc2cb94","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SchemaServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -52,7 +52,7 @@ public void delete(final SchemaType schemaType, final String key) {\n     }\n \n     @Override\n-    public <T extends SchemaTO> List<T> list(final SchemaQuery query) {\n+    public <T extends SchemaTO> List<T> search(final SchemaQuery query) {\n         return logic.search(query.getType(), query.getAnyTypeClasses(), query.getKeyword());\n     }\n "},{"sha":"bf8ebffb8fa7b9a70c9810ca413207add62dcfd3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AbstractTypesITCase.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractTypesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractTypesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractTypesITCase.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -27,10 +27,10 @@\n public abstract class AbstractTypesITCase extends AbstractConsoleITCase {\n \n     protected static final String PLAIN_DATATABLE_PATH = \"body:content:tabbedPanel:panel:\"\n-            + \"accordionPanel:tabs:0:body:content:content:container:content:searchContainer:resultTable\";\n+            + \"accordionPanel:tabs:0:body:content:container:content:searchContainer:resultTable\";\n \n     protected static final String VIRTUAL_DATATABLE_PATH = \"body:content:tabbedPanel:panel:\"\n-            + \"accordionPanel:tabs:2:body:content:content:container:content:searchContainer:resultTable\";\n+            + \"accordionPanel:tabs:2:body:content:container:content:searchContainer:resultTable\";\n \n     protected static final String DATATABLE_PATH =\n             \"body:content:tabbedPanel:panel:container:content:searchContainer:resultTable\";\n@@ -88,19 +88,19 @@ protected void browsingToVirtualSchemas() {\n     protected void createPlainSchema(final String key) {\n         browsingToPlainSchemas();\n         TESTER.clickLink(\n-                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:content:container:content:add\");\n+                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:container:content:add\");\n \n         TESTER.assertComponent(\n-                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:content:outerObjectsRepeater:0:outer\",\n+                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer\",\n                 Modal.class);\n \n         final FormTester formTester = TESTER.newFormTester(\"body:content:tabbedPanel:panel:\"\n-                + \"accordionPanel:tabs:0:body:content:content:outerObjectsRepeater:0:outer:form\");\n+                + \"accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer:form\");\n         formTester.setValue(\"content:details:form:key:textField\", key);\n         formTester.setValue(\"content:details:form:type:dropDownChoiceField\", \"3\");\n \n-        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n-                + \"tabs:0:body:content:content:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n+        TESTER.clickLink(\"body:content:tabbedPanel:panel:\"\n+                + \"accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n \n         TESTER.assertInfoMessages(\"Operation executed successfully\");\n "},{"sha":"50aaefa8df166f275d6f78af34a8bb6468d06cbd","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/SchemasITCase.java","status":"modified","additions":42,"deletions":42,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FSchemasITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FSchemasITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FSchemasITCase.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -45,32 +45,32 @@ public void readPlainSchema() {\n                 Constants.ON_CLICK);\n \n         TESTER.clickLink(\n-                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:content:outerObjectsRepeater:1:outer:\"\n+                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:1:outer:\"\n                 + \"container:content:togglePanelContainer:container:actions:actions:actionRepeater:0:action:action\");\n \n         TESTER.assertComponent(\n                 \"body:content:tabbedPanel:\"\n-                + \"panel:accordionPanel:tabs:0:body:content:content:outerObjectsRepeater:0:outer:\"\n+                + \"panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer:\"\n                 + \"form:content:kindForm:kind:dropDownChoiceField\", DropDownChoice.class);\n     }\n \n     @Test\n     public void createPlainSchema() {\n         browsingToPlainSchemas();\n-        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n-                + \"tabs:0:body:content:content:container:content:add\");\n+        TESTER.clickLink(\n+                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:container:content:add\");\n \n-        TESTER.assertComponent(\"body:content:tabbedPanel:panel:accordionPanel:\"\n-                + \"tabs:0:body:content:content:outerObjectsRepeater:0:outer\",\n+        TESTER.assertComponent(\n+                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer\",\n                 Modal.class);\n \n         final FormTester formTester = TESTER.newFormTester(\"body:content:tabbedPanel:panel:\"\n-                + \"accordionPanel:tabs:0:body:content:content:outerObjectsRepeater:0:outer:form\");\n+                + \"accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer:form\");\n         formTester.setValue(\"content:details:form:key:textField\", \"zBoolean\");\n         formTester.setValue(\"content:details:form:type:dropDownChoiceField\", \"3\");\n \n-        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n-                + \"tabs:0:body:content:content:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n+        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:\"\n+                + \"outer:dialog:footer:inputs:0:submit\");\n \n         TESTER.assertInfoMessages(\"Operation executed successfully\");\n \n@@ -88,20 +88,21 @@ public void updatePlainSchema() {\n         assertNotNull(result);\n \n         TESTER.executeAjaxEvent(result.getPageRelativePath(), Constants.ON_CLICK);\n-        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n-                + \"tabs:0:body:content:content:outerObjectsRepeater:1:outer:\"\n+        TESTER.clickLink(\n+                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:1:outer:\"\n                 + \"container:content:togglePanelContainer:container:actions:actions:actionRepeater:0:action:action\");\n \n-        TESTER.assertComponent(\"body:content:tabbedPanel:panel:accordionPanel:\"\n-                + \"tabs:0:body:content:content:outerObjectsRepeater:0:outer:\"\n+        TESTER.assertComponent(\n+                \"body:content:tabbedPanel:\"\n+                + \"panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer:\"\n                 + \"form:content:kindForm:kind:dropDownChoiceField\", DropDownChoice.class);\n \n-        FormTester formTester = TESTER.newFormTester(\"body:content:tabbedPanel:panel:accordionPanel:\"\n-                + \"tabs:0:body:content:content:outerObjectsRepeater:0:outer:form\");\n+        FormTester formTester = TESTER.newFormTester(\n+                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer:form\");\n         formTester.setValue(\"content:details:form:multivalue:checkboxField\", \"true\");\n \n-        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n-                + \"tabs:0:body:content:content:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\",\n+        TESTER.clickLink(\"body:content:tabbedPanel:panel:\"\n+                + \"accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\",\n                 true);\n \n         TESTER.assertInfoMessages(\"Operation executed successfully\");\n@@ -112,20 +113,20 @@ public void deletePlainSchema() {\n         browsingToPlainSchemas();\n         //create new Plain Schema\n         final String schemaName = \"zStringDelete\";\n-        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n-                + \"tabs:0:body:content:content:container:content:add\");\n+        TESTER.clickLink(\n+                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:container:content:add\");\n \n-        TESTER.assertComponent(\"body:content:tabbedPanel:panel:accordionPanel:\"\n-                + \"tabs:0:body:content:content:outerObjectsRepeater:0:outer\",\n+        TESTER.assertComponent(\n+                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer\",\n                 Modal.class);\n \n         final FormTester formTester = TESTER.newFormTester(\"body:content:tabbedPanel:panel:\"\n-                + \"accordionPanel:tabs:0:body:content:content:outerObjectsRepeater:0:outer:form\");\n+                + \"accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer:form\");\n         formTester.setValue(\"content:details:form:key:textField\", schemaName);\n         formTester.setValue(\"content:details:form:type:dropDownChoiceField\", \"0\");\n \n-        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n-                + \"tabs:0:body:content:content:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n+        TESTER.clickLink(\"body:content:tabbedPanel:panel:\"\n+                + \"accordionPanel:tabs:0:body:content:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n \n         TESTER.assertInfoMessages(\"Operation executed successfully\");;\n \n@@ -144,12 +145,12 @@ public void deletePlainSchema() {\n         TESTER.executeAjaxEvent(result.getPageRelativePath(), Constants.ON_CLICK);\n \n         TESTER.getRequest().addParameter(\"confirm\", \"true\");\n-        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n-                + \"tabs:0:body:content:content:outerObjectsRepeater:1:outer:\"\n+        TESTER.clickLink(\n+                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:1:outer:\"\n                 + \"container:content:togglePanelContainer:container:actions:actions:actionRepeater:1:action:action\");\n \n-        TESTER.executeAjaxEvent(TESTER.getComponentFromLastRenderedPage(\"body:content:tabbedPanel:panel:accordionPanel:\"\n-                + \"tabs:0:body:content:content:outerObjectsRepeater:1:outer:\"\n+        TESTER.executeAjaxEvent(TESTER.getComponentFromLastRenderedPage(\n+                \"body:content:tabbedPanel:panel:accordionPanel:tabs:0:body:content:outerObjectsRepeater:1:outer:\"\n                 + \"container:content:togglePanelContainer:container:actions:actions:actionRepeater:1:action:action\"),\n                 Constants.ON_CLICK);\n \n@@ -162,29 +163,28 @@ public void deletePlainSchema() {\n     @Test\n     public void createVirtualSchema() {\n         browsingToVirtualSchemas();\n-        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n-                + \"tabs:2:body:content:content:container:content:add\");\n+        TESTER.clickLink(\n+                \"body:content:tabbedPanel:panel:accordionPanel:tabs:2:body:content:container:content:add\");\n \n-        TESTER.assertComponent(\"body:content:tabbedPanel:panel:accordionPanel:\"\n-                + \"tabs:2:body:content:content:outerObjectsRepeater:0:outer\",\n+        TESTER.assertComponent(\n+                \"body:content:tabbedPanel:panel:accordionPanel:tabs:2:body:content:outerObjectsRepeater:0:outer\",\n                 Modal.class);\n \n-        final FormTester formTester = TESTER.newFormTester(\"body:content:tabbedPanel:panel:accordionPanel:\"\n-                + \"tabs:2:body:content:content:outerObjectsRepeater:0:outer:form\");\n+        final FormTester formTester = TESTER.newFormTester(\"body:content:tabbedPanel:panel:\"\n+                + \"accordionPanel:tabs:2:body:content:outerObjectsRepeater:0:outer:form\");\n \n         formTester.setValue(\"content:details:form:resource:dropDownChoiceField\", \"0\");\n         TESTER.executeAjaxEvent(\"body:content:tabbedPanel:panel:\"\n-                + \"accordionPanel:tabs:2:body:content:content:outerObjectsRepeater:0:outer:form:\"\n+                + \"accordionPanel:tabs:2:body:content:outerObjectsRepeater:0:outer:form:\"\n                 + \"content:details:form:resource:dropDownChoiceField\", Constants.ON_CHANGE);\n \n         formTester.setValue(\"content:details:form:key:textField\", \"mynewvir\");\n         formTester.setValue(\"content:details:form:resource:dropDownChoiceField\", \"0\");\n         formTester.setValue(\"content:details:form:anyType:dropDownChoiceField\", \"0\");\n         formTester.setValue(\"content:details:form:extAttrName:textField\", \"virattr\");\n \n-        TESTER.executeAjaxEvent(\"body:content:tabbedPanel:panel:accordionPanel:\"\n-                + \"tabs:2:body:content:content:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\",\n-                Constants.ON_CLICK);\n+        TESTER.executeAjaxEvent(\"body:content:tabbedPanel:panel:accordionPanel:tabs:2:body:content:\"\n+                + \"outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\", Constants.ON_CLICK);\n \n         TESTER.assertInfoMessages(\"Operation executed successfully\");\n         TESTER.cleanupFeedbackMessages();\n@@ -194,12 +194,12 @@ public void createVirtualSchema() {\n         TESTER.executeAjaxEvent(result.getPageRelativePath(), Constants.ON_CLICK);\n \n         TESTER.getRequest().addParameter(\"confirm\", \"true\");\n-        TESTER.clickLink(\"body:content:tabbedPanel:panel:accordionPanel:\"\n-                + \"tabs:2:body:content:content:outerObjectsRepeater:1:outer:\"\n+        TESTER.clickLink(\n+                \"body:content:tabbedPanel:panel:accordionPanel:tabs:2:body:content:outerObjectsRepeater:1:outer:\"\n                 + \"container:content:togglePanelContainer:container:actions:actions:actionRepeater:1:action:action\");\n \n-        TESTER.executeAjaxEvent(TESTER.getComponentFromLastRenderedPage(\"body:content:tabbedPanel:panel:accordionPanel:\"\n-                + \"tabs:2:body:content:content:outerObjectsRepeater:1:outer:\"\n+        TESTER.executeAjaxEvent(TESTER.getComponentFromLastRenderedPage(\n+                \"body:content:tabbedPanel:panel:accordionPanel:tabs:2:body:content:outerObjectsRepeater:1:outer:\"\n                 + \"container:content:togglePanelContainer:container:actions:actions:actionRepeater:1:action:action\"),\n                 Constants.ON_CLICK);\n "},{"sha":"e75e6aee07f73f5224d343c68068886dde724324","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DerSchemaITCase.java","status":"modified","additions":11,"deletions":15,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDerSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDerSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDerSchemaITCase.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -37,23 +37,19 @@\n \n public class DerSchemaITCase extends AbstractITCase {\n \n-    @Test\n-    public void list() {\n-        List<DerSchemaTO> derSchemas = schemaService.list(new SchemaQuery.Builder().type(SchemaType.DERIVED).build());\n-        assertFalse(derSchemas.isEmpty());\n-        for (DerSchemaTO derivedSchemaTO : derSchemas) {\n-            assertNotNull(derivedSchemaTO);\n-        }\n-    }\n-\n     @Test\n     public void search() {\n-        List<DerSchemaTO> derSchemas =\n-                schemaService.list(new SchemaQuery.Builder().type(SchemaType.DERIVED).keyword(\"mderivedd*\").build());\n-        assertFalse(derSchemas.isEmpty());\n-        for (DerSchemaTO derivedSchemaTO : derSchemas) {\n-            assertNotNull(derivedSchemaTO);\n-        }\n+        List<DerSchemaTO> schemas = schemaService.search(new SchemaQuery.Builder().type(SchemaType.DERIVED).build());\n+        assertFalse(schemas.isEmpty());\n+        schemas.forEach(schemaTO -> {\n+            assertNotNull(schemaTO);\n+        });\n+\n+        schemas = schemaService.search(new SchemaQuery.Builder().type(SchemaType.DERIVED).keyword(\"mder*\").build());\n+        assertFalse(schemas.isEmpty());\n+        schemas.forEach(schemaTO -> {\n+            assertNotNull(schemaTO);\n+        });\n     }\n \n     @Test"},{"sha":"9a11031c49cdde55779b1a8a6e07a3a985e65863","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -101,8 +101,7 @@ public void masterOnly() {\n \n     @Test\n     public void readPlainSchemas() {\n-        assertEquals(13, adminClient.getService(SchemaService.class).\n-                list(new SchemaQuery.Builder().type(SchemaType.PLAIN).build()).size());\n+        assertEquals(13, adminClient.getService(SchemaService.class).search(new SchemaQuery.Builder().type(SchemaType.PLAIN).build()).size());\n     }\n \n     @Test"},{"sha":"72231917aa396091411a75636255e63c9dd0012a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PlainSchemaITCase.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -253,27 +253,23 @@ public void delete() {\n     }\n \n     @Test\n-    public void list() {\n-        List<PlainSchemaTO> schemas = schemaService.list(new SchemaQuery.Builder().type(SchemaType.PLAIN).build());\n+    public void search() {\n+        List<PlainSchemaTO> schemas = schemaService.search(new SchemaQuery.Builder().type(SchemaType.PLAIN).build());\n         assertFalse(schemas.isEmpty());\n         schemas.forEach(schemaTO -> {\n             assertNotNull(schemaTO);\n         });\n-    }\n \n-    @Test\n-    public void search() {\n-        List<PlainSchemaTO> schemas =\n-                schemaService.list(new SchemaQuery.Builder().type(SchemaType.PLAIN).keyword(\"fullna*\").build());\n+        schemas = schemaService.search(new SchemaQuery.Builder().type(SchemaType.PLAIN).keyword(\"fullna*\").build());\n         assertFalse(schemas.isEmpty());\n-        for (PlainSchemaTO schemaTO : schemas) {\n+        schemas.forEach(schemaTO -> {\n             assertNotNull(schemaTO);\n-        }\n+        });\n     }\n \n     @Test\n-    public void listByAnyTypeClass() {\n-        List<PlainSchemaTO> userSchemas = schemaService.list(\n+    public void searchByAnyTypeClass() {\n+        List<PlainSchemaTO> userSchemas = schemaService.search(\n                 new SchemaQuery.Builder().type(SchemaType.PLAIN).anyTypeClass(\"minimal user\").build());\n \n         assertTrue(userSchemas.stream().anyMatch(object -> \"fullname\".equals(object.getKey())));"},{"sha":"e7a58aceca78c1b9102da807efeeeb46aeb91209","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/VirSchemaITCase.java","status":"modified","additions":13,"deletions":17,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirSchemaITCase.java?ref=e82e43cdd1ecdd7dcb1cca6d2a0e003c736b56cb","patch":"@@ -41,23 +41,19 @@\n \n public class VirSchemaITCase extends AbstractITCase {\n \n-    @Test\n-    public void list() {\n-        List<VirSchemaTO> vSchemas = schemaService.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n-        assertFalse(vSchemas.isEmpty());\n-        for (VirSchemaTO vSchemaTO : vSchemas) {\n-            assertNotNull(vSchemaTO);\n-        }\n-    }\n-\n     @Test\n     public void search() {\n-        List<VirSchemaTO> vSchemas =\n-                schemaService.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).keyword(\"rvirtuald*\").build());\n-        assertFalse(vSchemas.isEmpty());\n-        for (VirSchemaTO vSchemaTO : vSchemas) {\n-            assertNotNull(vSchemaTO);\n-        }\n+        List<VirSchemaTO> schemas = schemaService.search(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n+        assertFalse(schemas.isEmpty());\n+        schemas.forEach(schemaTO -> {\n+            assertNotNull(schemaTO);\n+        });\n+\n+        schemas = schemaService.search(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).keyword(\"rvirtual*\").build());\n+        assertFalse(schemas.isEmpty());\n+        schemas.forEach(schemaTO -> {\n+            assertNotNull(schemaTO);\n+        });\n     }\n \n     @Test\n@@ -104,7 +100,7 @@ public void crud() {\n     public void anonymous() {\n         SchemaService unauthenticated = clientFactory.create().getService(SchemaService.class);\n         try {\n-            unauthenticated.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n+            unauthenticated.search(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n             fail(\"This should not happen\");\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n@@ -113,7 +109,7 @@ public void anonymous() {\n         SchemaService anonymous = clientFactory.create(\n                 new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY)).\n                 getService(SchemaService.class);\n-        assertFalse(anonymous.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build()).isEmpty());\n+        assertFalse(anonymous.search(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build()).isEmpty());\n     }\n \n     @Test"}]}