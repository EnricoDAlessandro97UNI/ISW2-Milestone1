{"sha":"cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNjMzI1OWUxYWQ4NGJhMGZjMmViNGRhMTczYWUzNDg1NGY2MGVhM2Y=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-08-05T11:18:11Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-08-05T11:18:11Z"},"message":"Fixing line endings\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_2_X@1615909 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"38de97ca9f8592b3c346cea361cf2ad6d1d413dd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/38de97ca9f8592b3c346cea361cf2ad6d1d413dd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"25bd8119f3bc458b34e6d08eea9b569677af2a94","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/25bd8119f3bc458b34e6d08eea9b569677af2a94","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/25bd8119f3bc458b34e6d08eea9b569677af2a94"}],"stats":{"total":26820,"additions":13410,"deletions":13410},"files":[{"sha":"d997efe2c4df43f49ae6ec8e670a44a8cdf6aa2c","filename":"archetype/src/main/resources/archetype-resources/console/pom.xml","status":"modified","additions":280,"deletions":280,"changes":560,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fconsole%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fconsole%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fconsole%2Fpom.xml?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,280 +1,280 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n-Licensed to the Apache Software Foundation (ASF) under one\r\n-or more contributor license agreements.  See the NOTICE file\r\n-distributed with this work for additional information\r\n-regarding copyright ownership.  The ASF licenses this file\r\n-to you under the Apache License, Version 2.0 (the\r\n-\"License\"); you may not use this file except in compliance\r\n-with the License.  You may obtain a copy of the License at\r\n-\r\n-  http://www.apache.org/licenses/LICENSE-2.0\r\n-\r\n-Unless required by applicable law or agreed to in writing,\r\n-software distributed under the License is distributed on an\r\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n-KIND, either express or implied.  See the License for the\r\n-specific language governing permissions and limitations\r\n-under the License.\r\n--->\r\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n-\r\n-  <modelVersion>4.0.0</modelVersion>\r\n-\r\n-  <parent>\r\n-    <groupId>${groupId}</groupId>\r\n-    <artifactId>${rootArtifactId}</artifactId>\r\n-    <version>${version}</version>\r\n-  </parent>\r\n-\r\n-  <name>Apache Syncope sample project console</name>\r\n-  <groupId>${groupId}</groupId>\r\n-  <artifactId>${artifactId}</artifactId>\r\n-  <packaging>war</packaging>\r\n-\r\n-  <dependencies>\r\n-\r\n-    <dependency>\r\n-      <groupId>org.apache.syncope</groupId>\r\n-      <artifactId>syncope-client</artifactId>\r\n-    </dependency>\r\n-    <dependency>\r\n-      <groupId>org.apache.syncope</groupId>\r\n-      <artifactId>syncope-console</artifactId>\r\n-      <type>war</type>\r\n-    </dependency>\r\n-    <dependency>\r\n-      <groupId>org.apache.syncope</groupId>\r\n-      <artifactId>syncope-console</artifactId>\r\n-      <classifier>classes</classifier>\r\n-    </dependency>\r\n-\r\n-    <!-- TEST -->\r\n-    <dependency>\r\n-      <groupId>org.activiti</groupId>\r\n-      <artifactId>activiti-webapp-explorer2</artifactId>            \r\n-      <type>war</type>\r\n-      <scope>test</scope>\r\n-    </dependency>\r\n-    <dependency>\r\n-      <groupId>org.apache.syncope</groupId>\r\n-      <artifactId>syncope-build-tools</artifactId>\r\n-      <type>war</type>\r\n-      <scope>test</scope>\r\n-    </dependency>\r\n-    <dependency>\r\n-      <groupId>junit</groupId>\r\n-      <artifactId>junit</artifactId>\r\n-      <scope>test</scope>\r\n-    </dependency>\r\n-    <dependency>\r\n-      <groupId>org.springframework</groupId>\r\n-      <artifactId>spring-test</artifactId>\r\n-      <scope>test</scope>\r\n-    </dependency>\r\n-    <dependency>\r\n-      <groupId>com.h2database</groupId>\r\n-      <artifactId>h2</artifactId>\r\n-      <scope>test</scope>\r\n-    </dependency>\r\n-    <dependency>\r\n-      <groupId>org.connid.bundles.soap</groupId>\r\n-      <artifactId>wssample</artifactId>\r\n-      <type>war</type>\r\n-      <scope>test</scope>\r\n-    </dependency>\r\n-    <!-- /TEST -->    \r\n-  </dependencies>\r\n-\r\n-  <build>\r\n-    <finalName>syncope-console</finalName>\r\n-\r\n-    <plugins>\r\n-      \r\n-      <plugin>\r\n-        <groupId>org.apache.maven.plugins</groupId>\r\n-        <artifactId>maven-dependency-plugin</artifactId>\r\n-        <inherited>true</inherited>\r\n-        <executions>\r\n-          <execution>\r\n-            <id>set-bundles</id>\r\n-            <phase>process-test-resources</phase>\r\n-            <goals>\r\n-              <goal>copy</goal>\r\n-            </goals>\r\n-          </execution>\r\n-        </executions>\r\n-      </plugin>\r\n-            \r\n-      <plugin>\r\n-        <groupId>org.apache.maven.plugins</groupId>\r\n-        <artifactId>maven-antrun-plugin</artifactId>\r\n-        <inherited>true</inherited>\r\n-        <executions>\r\n-          <execution>\r\n-            <id>setupActivitiModeler</id>\r\n-            <phase>process-test-resources</phase>\r\n-            <configuration>\r\n-              <target>\r\n-                <unzip src=\"${settings.localRepository}/org/activiti/activiti-webapp-explorer2/${activiti.version}/activiti-webapp-explorer2-${activiti.version}.war\"\r\n-                       dest=\"${project.build.directory}/activiti-webapp-explorer2\"/>\r\n-                \r\n-                <mkdir dir=\"${activiti-modeler.directory}\"/>\r\n-                \r\n-                <mkdir dir=\"${activiti-modeler.directory}/editor\"/>\r\n-                <copy todir=\"${activiti-modeler.directory}/editor\">\r\n-                  <fileset dir=\"${project.build.directory}/activiti-webapp-explorer2/editor\">\r\n-                    <exclude name=\"oryx.js\"/>\r\n-                  </fileset>\r\n-                </copy>\r\n-                <copy file=\"${project.build.directory}/activiti-webapp-explorer2/WEB-INF/classes/plugins.xml\"\r\n-                      todir=\"${activiti-modeler.directory}/editor\"/>\r\n-                <copy file=\"${project.build.directory}/activiti-webapp-explorer2/WEB-INF/classes/stencilset.json\"\r\n-                      todir=\"${activiti-modeler.directory}/editor\"/>\r\n-                \r\n-                <mkdir dir=\"${activiti-modeler.directory}/explorer\"/>\r\n-                <copy todir=\"${activiti-modeler.directory}/explorer\">\r\n-                  <fileset dir=\"${project.build.directory}/activiti-webapp-explorer2/explorer\"/>\r\n-                </copy>\r\n-                \r\n-                <mkdir dir=\"${activiti-modeler.directory}/libs\"/>\r\n-                <copy todir=\"${activiti-modeler.directory}/libs\">\r\n-                  <fileset dir=\"${project.build.directory}/activiti-webapp-explorer2/libs\"/>\r\n-                </copy>\r\n-                \r\n-                <fixcrlf srcdir=\"${project.build.directory}/activiti-webapp-explorer2/editor/\" \r\n-                         includes=\"oryx.debug.js\"\r\n-                         eol=\"unix\"/>\r\n-                <patch patchfile=\"${basedir}/src/main/resources/oryx.debug.js.patch\"\r\n-                       originalfile=\"${project.build.directory}/activiti-webapp-explorer2/editor/oryx.debug.js\"\r\n-                       destfile=\"${activiti-modeler.directory}/editor/oryx.debug.js\"/>\r\n-                \r\n-                <delete dir=\"${project.build.directory}/activiti-webapp-explorer2\"/>\r\n-              </target>\r\n-            </configuration>\r\n-            <goals>\r\n-              <goal>run</goal>\r\n-            </goals>\r\n-          </execution>\r\n-          <execution>\r\n-            <id>setupTestWebapp</id>\r\n-            <phase>pre-integration-test</phase>\r\n-            <configuration>\r\n-              <target>\r\n-                <unzip src=\"${basedir}/../core/target/syncope.war\" dest=\"${cargo.run.dir}\"/>\r\n-                <copy file=\"${project.build.directory}/test-classes/db.jsp\" todir=\"${cargo.run.dir}\"/>\r\n-              </target>\r\n-            </configuration>\r\n-            <goals>\r\n-              <goal>run</goal>\r\n-            </goals>\r\n-          </execution>\r\n-          <execution>\r\n-            <id>setupCSV</id>\r\n-            <phase>pre-integration-test</phase>\r\n-            <configuration>\r\n-              <target>\r\n-                <copy file=\"${project.build.directory}/test-classes/test.csv\" \r\n-                      todir=\"${test.csvdir.path}\" \r\n-                      overwrite=\"true\"/>\r\n-              </target>    \r\n-            </configuration>\r\n-            <goals>\r\n-              <goal>run</goal>\r\n-            </goals>\r\n-          </execution>\r\n-        </executions>\r\n-      </plugin>\r\n-\r\n-      <plugin>\r\n-        <groupId>org.codehaus.cargo</groupId>\r\n-        <artifactId>cargo-maven2-plugin</artifactId>\r\n-        <inherited>true</inherited>\r\n-        <configuration>\r\n-          <container>\r\n-            <dependencies>\r\n-              <dependency>\r\n-                <groupId>com.h2database</groupId>\r\n-                <artifactId>h2</artifactId>\r\n-              </dependency>\r\n-            </dependencies>\r\n-          </container>\r\n-          <configuration>\r\n-            <type>standalone</type>\r\n-            <properties>\r\n-              <cargo.servlet.port>${cargo.servlet.port}</cargo.servlet.port>\r\n-              <cargo.tomcat.ajp.port>${cargo.tomcat.ajp.port}</cargo.tomcat.ajp.port>\r\n-              <cargo.rmi.port>${cargo.rmi.port}</cargo.rmi.port>\r\n-\r\n-              <cargo.jvmargs>-noverify -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:MaxPermSize=256m</cargo.jvmargs>\r\n-            </properties>\r\n-          </configuration>\r\n-          <deployables>\r\n-            <deployable>\r\n-              <location>${cargo.run.dir}</location>\r\n-              <properties>\r\n-                <context>syncope</context>\r\n-              </properties>\r\n-            </deployable>\r\n-            <deployable>\r\n-              <location>${project.build.directory}/${project.build.finalName}.war</location>\r\n-              <properties>\r\n-                <context>syncope-console</context>\r\n-              </properties>\r\n-            </deployable>\r\n-            <deployable>\r\n-              <groupId>org.connid.bundles.soap</groupId>\r\n-              <artifactId>wssample</artifactId>\r\n-              <type>war</type>\r\n-              <properties>\r\n-                <context>wssample</context>\r\n-              </properties>\r\n-            </deployable>\r\n-            <deployable>\r\n-              <groupId>org.apache.syncope</groupId>\r\n-              <artifactId>syncope-build-tools</artifactId>\r\n-              <type>war</type>\r\n-              <properties>\r\n-                <context>syncope-build-tools</context>\r\n-              </properties>\r\n-            </deployable>\r\n-          </deployables>\r\n-        </configuration>\r\n-      </plugin>\r\n-            \r\n-    </plugins>\r\n-\r\n-    <resources>\r\n-      <resource>\r\n-        <directory>src/main/resources</directory>\r\n-        <filtering>true</filtering>\r\n-      </resource>\r\n-    </resources>\r\n-\r\n-    <testResources>\r\n-      <testResource>\r\n-        <directory>src/test/resources</directory>\r\n-        <filtering>true</filtering>\r\n-      </testResource>\r\n-      <testResource>\r\n-        <directory>../core/src/test/resources</directory>\r\n-        <filtering>true</filtering>\r\n-      </testResource>\r\n-    </testResources>\r\n-  </build>\r\n-    \r\n-  <profiles>\r\n-    <profile>\r\n-      <id>embedded</id>\r\n-      \r\n-      <properties>\r\n-        <conf.directory>${project.build.directory}/test-classes</conf.directory>\r\n-        <skipTests>true</skipTests>\r\n-      </properties>\r\n-      \r\n-      <build>\r\n-        <defaultGoal>clean verify cargo:run</defaultGoal>    \r\n-      </build>\r\n-    </profile>    \r\n-  </profiles>\r\n-</project>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>${groupId}</groupId>\n+    <artifactId>${rootArtifactId}</artifactId>\n+    <version>${version}</version>\n+  </parent>\n+\n+  <name>Apache Syncope sample project console</name>\n+  <groupId>${groupId}</groupId>\n+  <artifactId>${artifactId}</artifactId>\n+  <packaging>war</packaging>\n+\n+  <dependencies>\n+\n+    <dependency>\n+      <groupId>org.apache.syncope</groupId>\n+      <artifactId>syncope-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope</groupId>\n+      <artifactId>syncope-console</artifactId>\n+      <type>war</type>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope</groupId>\n+      <artifactId>syncope-console</artifactId>\n+      <classifier>classes</classifier>\n+    </dependency>\n+\n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.activiti</groupId>\n+      <artifactId>activiti-webapp-explorer2</artifactId>            \n+      <type>war</type>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope</groupId>\n+      <artifactId>syncope-build-tools</artifactId>\n+      <type>war</type>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.h2database</groupId>\n+      <artifactId>h2</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.connid.bundles.soap</groupId>\n+      <artifactId>wssample</artifactId>\n+      <type>war</type>\n+      <scope>test</scope>\n+    </dependency>\n+    <!-- /TEST -->    \n+  </dependencies>\n+\n+  <build>\n+    <finalName>syncope-console</finalName>\n+\n+    <plugins>\n+      \n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <executions>\n+          <execution>\n+            <id>set-bundles</id>\n+            <phase>process-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+            \n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-antrun-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <executions>\n+          <execution>\n+            <id>setupActivitiModeler</id>\n+            <phase>process-test-resources</phase>\n+            <configuration>\n+              <target>\n+                <unzip src=\"${settings.localRepository}/org/activiti/activiti-webapp-explorer2/${activiti.version}/activiti-webapp-explorer2-${activiti.version}.war\"\n+                       dest=\"${project.build.directory}/activiti-webapp-explorer2\"/>\n+                \n+                <mkdir dir=\"${activiti-modeler.directory}\"/>\n+                \n+                <mkdir dir=\"${activiti-modeler.directory}/editor\"/>\n+                <copy todir=\"${activiti-modeler.directory}/editor\">\n+                  <fileset dir=\"${project.build.directory}/activiti-webapp-explorer2/editor\">\n+                    <exclude name=\"oryx.js\"/>\n+                  </fileset>\n+                </copy>\n+                <copy file=\"${project.build.directory}/activiti-webapp-explorer2/WEB-INF/classes/plugins.xml\"\n+                      todir=\"${activiti-modeler.directory}/editor\"/>\n+                <copy file=\"${project.build.directory}/activiti-webapp-explorer2/WEB-INF/classes/stencilset.json\"\n+                      todir=\"${activiti-modeler.directory}/editor\"/>\n+                \n+                <mkdir dir=\"${activiti-modeler.directory}/explorer\"/>\n+                <copy todir=\"${activiti-modeler.directory}/explorer\">\n+                  <fileset dir=\"${project.build.directory}/activiti-webapp-explorer2/explorer\"/>\n+                </copy>\n+                \n+                <mkdir dir=\"${activiti-modeler.directory}/libs\"/>\n+                <copy todir=\"${activiti-modeler.directory}/libs\">\n+                  <fileset dir=\"${project.build.directory}/activiti-webapp-explorer2/libs\"/>\n+                </copy>\n+                \n+                <fixcrlf srcdir=\"${project.build.directory}/activiti-webapp-explorer2/editor/\" \n+                         includes=\"oryx.debug.js\"\n+                         eol=\"unix\"/>\n+                <patch patchfile=\"${basedir}/src/main/resources/oryx.debug.js.patch\"\n+                       originalfile=\"${project.build.directory}/activiti-webapp-explorer2/editor/oryx.debug.js\"\n+                       destfile=\"${activiti-modeler.directory}/editor/oryx.debug.js\"/>\n+                \n+                <delete dir=\"${project.build.directory}/activiti-webapp-explorer2\"/>\n+              </target>\n+            </configuration>\n+            <goals>\n+              <goal>run</goal>\n+            </goals>\n+          </execution>\n+          <execution>\n+            <id>setupTestWebapp</id>\n+            <phase>pre-integration-test</phase>\n+            <configuration>\n+              <target>\n+                <unzip src=\"${basedir}/../core/target/syncope.war\" dest=\"${cargo.run.dir}\"/>\n+                <copy file=\"${project.build.directory}/test-classes/db.jsp\" todir=\"${cargo.run.dir}\"/>\n+              </target>\n+            </configuration>\n+            <goals>\n+              <goal>run</goal>\n+            </goals>\n+          </execution>\n+          <execution>\n+            <id>setupCSV</id>\n+            <phase>pre-integration-test</phase>\n+            <configuration>\n+              <target>\n+                <copy file=\"${project.build.directory}/test-classes/test.csv\" \n+                      todir=\"${test.csvdir.path}\" \n+                      overwrite=\"true\"/>\n+              </target>    \n+            </configuration>\n+            <goals>\n+              <goal>run</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.codehaus.cargo</groupId>\n+        <artifactId>cargo-maven2-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <configuration>\n+          <container>\n+            <dependencies>\n+              <dependency>\n+                <groupId>com.h2database</groupId>\n+                <artifactId>h2</artifactId>\n+              </dependency>\n+            </dependencies>\n+          </container>\n+          <configuration>\n+            <type>standalone</type>\n+            <properties>\n+              <cargo.servlet.port>${cargo.servlet.port}</cargo.servlet.port>\n+              <cargo.tomcat.ajp.port>${cargo.tomcat.ajp.port}</cargo.tomcat.ajp.port>\n+              <cargo.rmi.port>${cargo.rmi.port}</cargo.rmi.port>\n+\n+              <cargo.jvmargs>-noverify -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:MaxPermSize=256m</cargo.jvmargs>\n+            </properties>\n+          </configuration>\n+          <deployables>\n+            <deployable>\n+              <location>${cargo.run.dir}</location>\n+              <properties>\n+                <context>syncope</context>\n+              </properties>\n+            </deployable>\n+            <deployable>\n+              <location>${project.build.directory}/${project.build.finalName}.war</location>\n+              <properties>\n+                <context>syncope-console</context>\n+              </properties>\n+            </deployable>\n+            <deployable>\n+              <groupId>org.connid.bundles.soap</groupId>\n+              <artifactId>wssample</artifactId>\n+              <type>war</type>\n+              <properties>\n+                <context>wssample</context>\n+              </properties>\n+            </deployable>\n+            <deployable>\n+              <groupId>org.apache.syncope</groupId>\n+              <artifactId>syncope-build-tools</artifactId>\n+              <type>war</type>\n+              <properties>\n+                <context>syncope-build-tools</context>\n+              </properties>\n+            </deployable>\n+          </deployables>\n+        </configuration>\n+      </plugin>\n+            \n+    </plugins>\n+\n+    <resources>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+        <filtering>true</filtering>\n+      </resource>\n+    </resources>\n+\n+    <testResources>\n+      <testResource>\n+        <directory>src/test/resources</directory>\n+        <filtering>true</filtering>\n+      </testResource>\n+      <testResource>\n+        <directory>../core/src/test/resources</directory>\n+        <filtering>true</filtering>\n+      </testResource>\n+    </testResources>\n+  </build>\n+    \n+  <profiles>\n+    <profile>\n+      <id>embedded</id>\n+      \n+      <properties>\n+        <conf.directory>${project.build.directory}/test-classes</conf.directory>\n+        <skipTests>true</skipTests>\n+      </properties>\n+      \n+      <build>\n+        <defaultGoal>clean verify cargo:run</defaultGoal>    \n+      </build>\n+    </profile>    \n+  </profiles>\n+</project>"},{"sha":"e533e30042d45b7050334d24a34a1450b026fb4e","filename":"archetype/src/main/resources/archetype-resources/core/pom.xml","status":"modified","additions":322,"deletions":322,"changes":644,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,322 +1,322 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n-Licensed to the Apache Software Foundation (ASF) under one\r\n-or more contributor license agreements.  See the NOTICE file\r\n-distributed with this work for additional information\r\n-regarding copyright ownership.  The ASF licenses this file\r\n-to you under the Apache License, Version 2.0 (the\r\n-\"License\"); you may not use this file except in compliance\r\n-with the License.  You may obtain a copy of the License at\r\n-\r\n-  http://www.apache.org/licenses/LICENSE-2.0\r\n-\r\n-Unless required by applicable law or agreed to in writing,\r\n-software distributed under the License is distributed on an\r\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n-KIND, either express or implied.  See the License for the\r\n-specific language governing permissions and limitations\r\n-under the License.\r\n--->\r\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n-\r\n-  <modelVersion>4.0.0</modelVersion>\r\n-\r\n-  <parent>\r\n-    <groupId>${groupId}</groupId>\r\n-    <artifactId>${rootArtifactId}</artifactId>\r\n-    <version>${version}</version>\r\n-  </parent>\r\n-\r\n-  <name>Apache Syncope sample project core</name>\r\n-  <groupId>${groupId}</groupId>\r\n-  <artifactId>${artifactId}</artifactId>\r\n-  <packaging>war</packaging>\r\n-\r\n-  <dependencies>\r\n-\r\n-    <dependency>\r\n-      <groupId>org.apache.syncope</groupId>\r\n-      <artifactId>syncope-common</artifactId>\r\n-    </dependency>\r\n-    <dependency>\r\n-      <groupId>org.apache.syncope</groupId>\r\n-      <artifactId>syncope-common</artifactId>\r\n-      <classifier>javadoc</classifier>\r\n-    </dependency>\r\n-    <dependency>\r\n-      <groupId>org.apache.syncope</groupId>\r\n-      <artifactId>syncope-core</artifactId>\r\n-      <type>war</type>\r\n-    </dependency>\r\n-    <dependency>\r\n-      <groupId>org.apache.syncope</groupId>\r\n-      <artifactId>syncope-core</artifactId>\r\n-      <classifier>classes</classifier>\r\n-    </dependency>\r\n-\r\n-    <!-- TEST -->\r\n-    <dependency>\r\n-      <groupId>org.apache.syncope</groupId>\r\n-      <artifactId>syncope-client</artifactId>\r\n-      <scope>test</scope>\r\n-    </dependency>\r\n-    <dependency>\r\n-      <groupId>org.apache.syncope</groupId>\r\n-      <artifactId>syncope-build-tools</artifactId>\r\n-      <type>war</type>\r\n-      <scope>test</scope>\r\n-    </dependency>\r\n-    <dependency>\r\n-      <groupId>org.connid.bundles.soap</groupId>\r\n-      <artifactId>wssample</artifactId>\r\n-      <type>war</type>\r\n-      <scope>test</scope>\r\n-    </dependency>\r\n-    <dependency>\r\n-      <groupId>junit</groupId>\r\n-      <artifactId>junit</artifactId>\r\n-      <scope>test</scope>\r\n-    </dependency>\r\n-    <dependency>\r\n-      <groupId>com.h2database</groupId>\r\n-      <artifactId>h2</artifactId>\r\n-      <scope>test</scope>\r\n-    </dependency>\r\n-    <dependency>\r\n-      <groupId>org.springframework</groupId>\r\n-      <artifactId>spring-test</artifactId>\r\n-      <scope>test</scope>\r\n-    </dependency>\r\n-    <!-- /TEST -->\r\n-  </dependencies>\r\n-\r\n-  <build>\r\n-    <finalName>syncope</finalName>\r\n-\r\n-    <plugins>\r\n-\r\n-      <plugin>\r\n-        <groupId>org.apache.maven.plugins</groupId>\r\n-        <artifactId>maven-dependency-plugin</artifactId>\r\n-        <inherited>true</inherited>\r\n-        <executions>\r\n-          <execution>\r\n-            <id>set-bundles</id>\r\n-            <phase>process-test-resources</phase>\r\n-            <goals>\r\n-              <goal>copy</goal>\r\n-            </goals>\r\n-          </execution>\r\n-        </executions>\r\n-      </plugin>\r\n-            \r\n-      <plugin>\r\n-        <groupId>org.apache.maven.plugins</groupId>\r\n-        <artifactId>maven-failsafe-plugin</artifactId>\r\n-        <inherited>true</inherited>\r\n-        <configuration>\r\n-          <systemPropertyVariables>\r\n-            <jaxrsContentType>${jaxrs.content.type}</jaxrsContentType>\r\n-          </systemPropertyVariables>\r\n-        </configuration>\r\n-        <executions>\r\n-          <execution>\r\n-            <id>verify</id>\r\n-            <goals>\r\n-              <goal>verify</goal>\r\n-            </goals>\r\n-          </execution>\r\n-        </executions>\r\n-      </plugin>\r\n-\r\n-      <plugin>\r\n-        <groupId>org.apache.maven.plugins</groupId>\r\n-        <artifactId>maven-antrun-plugin</artifactId>\r\n-        <inherited>true</inherited>\r\n-        <executions>\r\n-          <execution>\r\n-            <id>setupTestWebapp</id>\r\n-            <phase>pre-integration-test</phase>\r\n-            <configuration>\r\n-              <target>\r\n-                <unzip src=\"${project.build.directory}/${project.build.finalName}.war\" dest=\"${cargo.run.dir}\"/>\r\n-                <copy file=\"${project.build.directory}/test-classes/db.jsp\" todir=\"${cargo.run.dir}\"/>\r\n-              </target>\r\n-            </configuration>\r\n-            <goals>\r\n-              <goal>run</goal>\r\n-            </goals>\r\n-          </execution>\r\n-          <execution>\r\n-            <id>setupCSV</id>\r\n-            <phase>pre-integration-test</phase>\r\n-            <configuration>\r\n-              <target>\r\n-                <copy file=\"${project.build.directory}/test-classes/test.csv\" \r\n-                      todir=\"${test.csvdir.path}\" \r\n-                      overwrite=\"true\"/>\r\n-              </target>    \r\n-            </configuration>\r\n-            <goals>\r\n-              <goal>run</goal>\r\n-            </goals>\r\n-          </execution>\r\n-        </executions>\r\n-      </plugin>\r\n-\r\n-      <plugin>\r\n-        <groupId>org.codehaus.cargo</groupId>\r\n-        <artifactId>cargo-maven2-plugin</artifactId>\r\n-        <inherited>true</inherited>\r\n-        <configuration>\r\n-          <container>\r\n-            <dependencies>\r\n-              <dependency>\r\n-                <groupId>com.h2database</groupId>\r\n-                <artifactId>h2</artifactId>\r\n-              </dependency>\r\n-            </dependencies>\r\n-          </container>\r\n-          <configuration>\r\n-            <type>standalone</type>\r\n-            <properties>\r\n-              <cargo.servlet.port>${cargo.servlet.port}</cargo.servlet.port>\r\n-              <cargo.jvmargs>-noverify -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:MaxPermSize=256m</cargo.jvmargs>\r\n-            </properties>\r\n-          </configuration>\r\n-          <deployables>\r\n-            <deployable>\r\n-              <location>${cargo.run.dir}</location>\r\n-              <properties>\r\n-                <context>syncope</context>\r\n-              </properties>\r\n-            </deployable>\r\n-            <deployable>\r\n-              <groupId>org.connid.bundles.soap</groupId>\r\n-              <artifactId>wssample</artifactId>\r\n-              <type>war</type>\r\n-              <properties>\r\n-                <context>wssample</context>\r\n-              </properties>\r\n-            </deployable>\r\n-            <deployable>\r\n-              <groupId>org.apache.syncope</groupId>\r\n-              <artifactId>syncope-build-tools</artifactId>\r\n-              <type>war</type>\r\n-              <properties>\r\n-                <context>syncope-build-tools</context>\r\n-              </properties>\r\n-            </deployable>\r\n-          </deployables>\r\n-        </configuration>\r\n-        <executions>\r\n-          <execution>\r\n-            <id>start-container</id>\r\n-            <phase>pre-integration-test</phase>\r\n-            <goals>\r\n-              <goal>start</goal>\r\n-            </goals>\r\n-            <configuration>\r\n-              <wait>false</wait>\r\n-            </configuration>\r\n-          </execution>\r\n-          <execution>\r\n-            <id>stop-container</id>\r\n-            <phase>post-integration-test</phase>\r\n-            <goals>\r\n-              <goal>stop</goal>\r\n-            </goals>\r\n-          </execution>\r\n-        </executions>\r\n-      </plugin>\r\n-            \r\n-      <plugin>\r\n-        <groupId>org.apache.openjpa</groupId>\r\n-        <artifactId>openjpa-maven-plugin</artifactId>\r\n-        <inherited>true</inherited>\r\n-        <dependencies>\r\n-          <dependency>\r\n-            <groupId>com.h2database</groupId>\r\n-            <artifactId>h2</artifactId>\r\n-            <version>${h2.version}</version>\r\n-          </dependency>\r\n-        </dependencies>\r\n-        <configuration>\r\n-          <persistenceXmlFile>${project.basedir}/src/main/resources/META-INF/spring-persistence.xml</persistenceXmlFile>\r\n-          <includes>org/apache/syncope/core/persistence/beans/**/*.class</includes>\r\n-          <connectionDriverName>org.springframework.jdbc.datasource.DriverManagerDataSource</connectionDriverName>\r\n-          <connectionProperties>\r\n-            driverClassName=org.h2.Driver,\r\n-            url=jdbc:h2:mem:syncopedb\r\n-            username=sa,\r\n-            password=\r\n-          </connectionProperties>\r\n-        </configuration>\r\n-        <executions>\r\n-          <execution>\r\n-            <id>enhancer</id>\r\n-            <phase>process-classes</phase>\r\n-            <goals>\r\n-              <goal>enhance</goal>\r\n-            </goals>\r\n-          </execution>\r\n-        </executions>\r\n-      </plugin>\r\n-\r\n-    </plugins>\r\n-\r\n-    <resources>\r\n-      <resource>\r\n-        <directory>src/main/resources</directory>\r\n-        <filtering>true</filtering>\r\n-      </resource>\r\n-    </resources>\r\n-\r\n-    <testResources>\r\n-      <testResource>\r\n-        <directory>src/test/resources</directory>\r\n-        <filtering>true</filtering>\r\n-      </testResource>\r\n-    </testResources>\r\n-  </build>\r\n-  \r\n-  <profiles>\r\n-    <profile>\r\n-      <id>debug</id>\r\n-      \r\n-      <properties>\r\n-        <skipTests>true</skipTests>\r\n-      </properties>\r\n-      \r\n-      <build>\r\n-        <defaultGoal>clean verify cargo:run</defaultGoal>\r\n-\r\n-        <plugins>\r\n-          <plugin>\r\n-            <groupId>org.codehaus.cargo</groupId>\r\n-            <artifactId>cargo-maven2-plugin</artifactId>\r\n-            <inherited>true</inherited>\r\n-            <configuration>\r\n-              <configuration>\r\n-                <properties>\r\n-                  <cargo.jvmargs>-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n\r\n-                    -noverify -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:MaxPermSize=256m</cargo.jvmargs>\r\n-                </properties>\r\n-              </configuration>\r\n-            </configuration>\r\n-            <executions>\r\n-              <execution>\r\n-                <id>start-container</id>\r\n-                <phase>none</phase>\r\n-              </execution>\r\n-              <execution>\r\n-                <id>stop-container</id>\r\n-                <phase>none</phase>\r\n-              </execution>\r\n-            </executions>\r\n-          </plugin>\r\n-        </plugins>\r\n-      </build>\r\n-    </profile>\r\n-  </profiles>\r\n-</project>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>${groupId}</groupId>\n+    <artifactId>${rootArtifactId}</artifactId>\n+    <version>${version}</version>\n+  </parent>\n+\n+  <name>Apache Syncope sample project core</name>\n+  <groupId>${groupId}</groupId>\n+  <artifactId>${artifactId}</artifactId>\n+  <packaging>war</packaging>\n+\n+  <dependencies>\n+\n+    <dependency>\n+      <groupId>org.apache.syncope</groupId>\n+      <artifactId>syncope-common</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope</groupId>\n+      <artifactId>syncope-common</artifactId>\n+      <classifier>javadoc</classifier>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope</groupId>\n+      <artifactId>syncope-core</artifactId>\n+      <type>war</type>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope</groupId>\n+      <artifactId>syncope-core</artifactId>\n+      <classifier>classes</classifier>\n+    </dependency>\n+\n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.apache.syncope</groupId>\n+      <artifactId>syncope-client</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope</groupId>\n+      <artifactId>syncope-build-tools</artifactId>\n+      <type>war</type>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.connid.bundles.soap</groupId>\n+      <artifactId>wssample</artifactId>\n+      <type>war</type>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.h2database</groupId>\n+      <artifactId>h2</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <!-- /TEST -->\n+  </dependencies>\n+\n+  <build>\n+    <finalName>syncope</finalName>\n+\n+    <plugins>\n+\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <executions>\n+          <execution>\n+            <id>set-bundles</id>\n+            <phase>process-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+            \n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-failsafe-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jaxrsContentType>${jaxrs.content.type}</jaxrsContentType>\n+          </systemPropertyVariables>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <id>verify</id>\n+            <goals>\n+              <goal>verify</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-antrun-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <executions>\n+          <execution>\n+            <id>setupTestWebapp</id>\n+            <phase>pre-integration-test</phase>\n+            <configuration>\n+              <target>\n+                <unzip src=\"${project.build.directory}/${project.build.finalName}.war\" dest=\"${cargo.run.dir}\"/>\n+                <copy file=\"${project.build.directory}/test-classes/db.jsp\" todir=\"${cargo.run.dir}\"/>\n+              </target>\n+            </configuration>\n+            <goals>\n+              <goal>run</goal>\n+            </goals>\n+          </execution>\n+          <execution>\n+            <id>setupCSV</id>\n+            <phase>pre-integration-test</phase>\n+            <configuration>\n+              <target>\n+                <copy file=\"${project.build.directory}/test-classes/test.csv\" \n+                      todir=\"${test.csvdir.path}\" \n+                      overwrite=\"true\"/>\n+              </target>    \n+            </configuration>\n+            <goals>\n+              <goal>run</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.codehaus.cargo</groupId>\n+        <artifactId>cargo-maven2-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <configuration>\n+          <container>\n+            <dependencies>\n+              <dependency>\n+                <groupId>com.h2database</groupId>\n+                <artifactId>h2</artifactId>\n+              </dependency>\n+            </dependencies>\n+          </container>\n+          <configuration>\n+            <type>standalone</type>\n+            <properties>\n+              <cargo.servlet.port>${cargo.servlet.port}</cargo.servlet.port>\n+              <cargo.jvmargs>-noverify -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:MaxPermSize=256m</cargo.jvmargs>\n+            </properties>\n+          </configuration>\n+          <deployables>\n+            <deployable>\n+              <location>${cargo.run.dir}</location>\n+              <properties>\n+                <context>syncope</context>\n+              </properties>\n+            </deployable>\n+            <deployable>\n+              <groupId>org.connid.bundles.soap</groupId>\n+              <artifactId>wssample</artifactId>\n+              <type>war</type>\n+              <properties>\n+                <context>wssample</context>\n+              </properties>\n+            </deployable>\n+            <deployable>\n+              <groupId>org.apache.syncope</groupId>\n+              <artifactId>syncope-build-tools</artifactId>\n+              <type>war</type>\n+              <properties>\n+                <context>syncope-build-tools</context>\n+              </properties>\n+            </deployable>\n+          </deployables>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <id>start-container</id>\n+            <phase>pre-integration-test</phase>\n+            <goals>\n+              <goal>start</goal>\n+            </goals>\n+            <configuration>\n+              <wait>false</wait>\n+            </configuration>\n+          </execution>\n+          <execution>\n+            <id>stop-container</id>\n+            <phase>post-integration-test</phase>\n+            <goals>\n+              <goal>stop</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+            \n+      <plugin>\n+        <groupId>org.apache.openjpa</groupId>\n+        <artifactId>openjpa-maven-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <dependencies>\n+          <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <version>${h2.version}</version>\n+          </dependency>\n+        </dependencies>\n+        <configuration>\n+          <persistenceXmlFile>${project.basedir}/src/main/resources/META-INF/spring-persistence.xml</persistenceXmlFile>\n+          <includes>org/apache/syncope/core/persistence/beans/**/*.class</includes>\n+          <connectionDriverName>org.springframework.jdbc.datasource.DriverManagerDataSource</connectionDriverName>\n+          <connectionProperties>\n+            driverClassName=org.h2.Driver,\n+            url=jdbc:h2:mem:syncopedb\n+            username=sa,\n+            password=\n+          </connectionProperties>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <id>enhancer</id>\n+            <phase>process-classes</phase>\n+            <goals>\n+              <goal>enhance</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+    </plugins>\n+\n+    <resources>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+        <filtering>true</filtering>\n+      </resource>\n+    </resources>\n+\n+    <testResources>\n+      <testResource>\n+        <directory>src/test/resources</directory>\n+        <filtering>true</filtering>\n+      </testResource>\n+    </testResources>\n+  </build>\n+  \n+  <profiles>\n+    <profile>\n+      <id>debug</id>\n+      \n+      <properties>\n+        <skipTests>true</skipTests>\n+      </properties>\n+      \n+      <build>\n+        <defaultGoal>clean verify cargo:run</defaultGoal>\n+\n+        <plugins>\n+          <plugin>\n+            <groupId>org.codehaus.cargo</groupId>\n+            <artifactId>cargo-maven2-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <configuration>\n+              <configuration>\n+                <properties>\n+                  <cargo.jvmargs>-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n\n+                    -noverify -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:MaxPermSize=256m</cargo.jvmargs>\n+                </properties>\n+              </configuration>\n+            </configuration>\n+            <executions>\n+              <execution>\n+                <id>start-container</id>\n+                <phase>none</phase>\n+              </execution>\n+              <execution>\n+                <id>stop-container</id>\n+                <phase>none</phase>\n+              </execution>\n+            </executions>\n+          </plugin>\n+        </plugins>\n+      </build>\n+    </profile>\n+  </profiles>\n+</project>"},{"sha":"e148de3222131fdeee39a778cf1f368c074fa596","filename":"archetype/src/main/resources/meta-pom.xml","status":"modified","additions":165,"deletions":165,"changes":330,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/archetype%2Fsrc%2Fmain%2Fresources%2Fmeta-pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/archetype%2Fsrc%2Fmain%2Fresources%2Fmeta-pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Fmeta-pom.xml?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,165 +1,165 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n-Licensed to the Apache Software Foundation (ASF) under one\r\n-or more contributor license agreements.  See the NOTICE file\r\n-distributed with this work for additional information\r\n-regarding copyright ownership.  The ASF licenses this file\r\n-to you under the Apache License, Version 2.0 (the\r\n-\"License\"); you may not use this file except in compliance\r\n-with the License.  You may obtain a copy of the License at\r\n-\r\n-  http://www.apache.org/licenses/LICENSE-2.0\r\n-\r\n-Unless required by applicable law or agreed to in writing,\r\n-software distributed under the License is distributed on an\r\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n-KIND, either express or implied.  See the License for the\r\n-specific language governing permissions and limitations\r\n-under the License.\r\n-\r\n--->\r\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\r\n-         http://maven.apache.org/maven-v4_0_0.xsd\">\r\n-\r\n-  <modelVersion>4.0.0</modelVersion>\r\n-\r\n-  <parent>\r\n-    <groupId>org.apache.syncope</groupId>\r\n-    <artifactId>syncope</artifactId>\r\n-    <version></version>\r\n-  </parent>\r\n-\r\n-  <properties>\r\n-    <syncope.version></syncope.version>\r\n-    <secretKey>${secretKey}</secretKey>\r\n-    <anonymousKey>${anonymousKey}</anonymousKey>\r\n-  </properties>\r\n-\r\n-  <name>Apache Syncope sample project</name>\r\n-  <groupId>${groupId}</groupId>\r\n-  <artifactId>${artifactId}</artifactId>\r\n-  <version>${version}</version>\r\n-  <packaging>pom</packaging>\r\n-\r\n-  <dependencyManagement>\r\n-    <dependencies>\r\n-      <dependency>\r\n-        <groupId>org.apache.syncope</groupId>\r\n-        <artifactId>syncope-common</artifactId>\r\n-        <version>${syncope.version}</version>\r\n-      </dependency> \r\n- \r\n-      <dependency>\r\n-        <groupId>org.apache.syncope</groupId>\r\n-        <artifactId>syncope-common</artifactId>\r\n-        <version>${syncope.version}</version>\r\n-        <classifier>javadoc</classifier>\r\n-      </dependency>\r\n-\r\n-      <dependency>\r\n-        <groupId>org.apache.syncope</groupId>\r\n-        <artifactId>syncope-client</artifactId>\r\n-        <version>${syncope.version}</version>\r\n-      </dependency> \r\n-\r\n-      <dependency>\r\n-        <groupId>org.apache.syncope</groupId>\r\n-        <artifactId>syncope-build-tools</artifactId>\r\n-        <version>${syncope.version}</version>\r\n-        <type>war</type>\r\n-        <scope>test</scope>\r\n-      </dependency> \r\n-            \r\n-      <dependency>\r\n-        <groupId>org.apache.syncope</groupId>\r\n-        <artifactId>syncope-core</artifactId>\r\n-        <version>${syncope.version}</version>\r\n-        <type>war</type>\r\n-      </dependency> \r\n-      <dependency>\r\n-        <groupId>org.apache.syncope</groupId>\r\n-        <artifactId>syncope-core</artifactId>\r\n-        <version>${syncope.version}</version>\r\n-        <classifier>classes</classifier>\r\n-        <scope>provided</scope>\r\n-      </dependency> \r\n-\r\n-      <dependency>\r\n-        <groupId>org.apache.syncope</groupId>\r\n-        <artifactId>syncope-console</artifactId>\r\n-        <version>${syncope.version}</version>\r\n-        <type>war</type>\r\n-      </dependency> \r\n-      <dependency>\r\n-        <groupId>org.apache.syncope</groupId>\r\n-        <artifactId>syncope-console</artifactId>\r\n-        <version>${syncope.version}</version>\r\n-        <classifier>classes</classifier>\r\n-        <scope>provided</scope>\r\n-      </dependency> \r\n-    </dependencies>\r\n-  </dependencyManagement>\r\n-    \r\n-  <build>\r\n-    \r\n-    <pluginManagement>\r\n-      <plugins>\r\n-        <!-- Disable LICENSE / NOTICE inclusion: see SYNCOPE-84 -->\r\n-        <plugin>\r\n-          <groupId>org.apache.maven.plugins</groupId>\r\n-          <artifactId>maven-war-plugin</artifactId>\r\n-          <inherited>false</inherited>\r\n-          <configuration>\r\n-            <webResources>\r\n-              <resource>\r\n-                <directory>src/main/webapp</directory>\r\n-                <includes>\r\n-                  <include>**/*.jsp</include>\r\n-                </includes>\r\n-                <filtering>true</filtering>\r\n-              </resource>\r\n-            </webResources>\r\n-          </configuration>\r\n-        </plugin>\r\n-      </plugins>\r\n-    </pluginManagement>\r\n-    \r\n-    <!-- Disable legal check for generated projects: see SYNCOPE-84 -->\r\n-    <plugins>\r\n-      <plugin>\r\n-        <groupId>org.codehaus.mojo</groupId>\r\n-        <artifactId>ianal-maven-plugin</artifactId>\r\n-        <inherited>true</inherited>\r\n-        <executions>\r\n-          <execution>            \r\n-            <goals>\r\n-              <goal>verify-legal-files</goal>\r\n-            </goals>\r\n-            <phase>none</phase>\r\n-          </execution>\r\n-        </executions>\r\n-      </plugin>\r\n-      <plugin>\r\n-        <groupId>org.apache.rat</groupId>\r\n-        <artifactId>apache-rat-plugin</artifactId>\r\n-        <inherited>true</inherited>\r\n-        <executions>\r\n-          <execution>\r\n-            <goals>\r\n-              <goal>check</goal>\r\n-            </goals>\r\n-            <phase>none</phase>\r\n-          </execution>\r\n-        </executions>\r\n-      </plugin>\r\n-    </plugins>\r\n-  </build>\r\n-    \r\n-  <modules>\r\n-    <module>core</module>\r\n-    <module>console</module>\r\n-  </modules>\r\n-\r\n-</project>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n+         http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope</artifactId>\n+    <version></version>\n+  </parent>\n+\n+  <properties>\n+    <syncope.version></syncope.version>\n+    <secretKey>${secretKey}</secretKey>\n+    <anonymousKey>${anonymousKey}</anonymousKey>\n+  </properties>\n+\n+  <name>Apache Syncope sample project</name>\n+  <groupId>${groupId}</groupId>\n+  <artifactId>${artifactId}</artifactId>\n+  <version>${version}</version>\n+  <packaging>pom</packaging>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.apache.syncope</groupId>\n+        <artifactId>syncope-common</artifactId>\n+        <version>${syncope.version}</version>\n+      </dependency> \n+ \n+      <dependency>\n+        <groupId>org.apache.syncope</groupId>\n+        <artifactId>syncope-common</artifactId>\n+        <version>${syncope.version}</version>\n+        <classifier>javadoc</classifier>\n+      </dependency>\n+\n+      <dependency>\n+        <groupId>org.apache.syncope</groupId>\n+        <artifactId>syncope-client</artifactId>\n+        <version>${syncope.version}</version>\n+      </dependency> \n+\n+      <dependency>\n+        <groupId>org.apache.syncope</groupId>\n+        <artifactId>syncope-build-tools</artifactId>\n+        <version>${syncope.version}</version>\n+        <type>war</type>\n+        <scope>test</scope>\n+      </dependency> \n+            \n+      <dependency>\n+        <groupId>org.apache.syncope</groupId>\n+        <artifactId>syncope-core</artifactId>\n+        <version>${syncope.version}</version>\n+        <type>war</type>\n+      </dependency> \n+      <dependency>\n+        <groupId>org.apache.syncope</groupId>\n+        <artifactId>syncope-core</artifactId>\n+        <version>${syncope.version}</version>\n+        <classifier>classes</classifier>\n+        <scope>provided</scope>\n+      </dependency> \n+\n+      <dependency>\n+        <groupId>org.apache.syncope</groupId>\n+        <artifactId>syncope-console</artifactId>\n+        <version>${syncope.version}</version>\n+        <type>war</type>\n+      </dependency> \n+      <dependency>\n+        <groupId>org.apache.syncope</groupId>\n+        <artifactId>syncope-console</artifactId>\n+        <version>${syncope.version}</version>\n+        <classifier>classes</classifier>\n+        <scope>provided</scope>\n+      </dependency> \n+    </dependencies>\n+  </dependencyManagement>\n+    \n+  <build>\n+    \n+    <pluginManagement>\n+      <plugins>\n+        <!-- Disable LICENSE / NOTICE inclusion: see SYNCOPE-84 -->\n+        <plugin>\n+          <groupId>org.apache.maven.plugins</groupId>\n+          <artifactId>maven-war-plugin</artifactId>\n+          <inherited>false</inherited>\n+          <configuration>\n+            <webResources>\n+              <resource>\n+                <directory>src/main/webapp</directory>\n+                <includes>\n+                  <include>**/*.jsp</include>\n+                </includes>\n+                <filtering>true</filtering>\n+              </resource>\n+            </webResources>\n+          </configuration>\n+        </plugin>\n+      </plugins>\n+    </pluginManagement>\n+    \n+    <!-- Disable legal check for generated projects: see SYNCOPE-84 -->\n+    <plugins>\n+      <plugin>\n+        <groupId>org.codehaus.mojo</groupId>\n+        <artifactId>ianal-maven-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <executions>\n+          <execution>            \n+            <goals>\n+              <goal>verify-legal-files</goal>\n+            </goals>\n+            <phase>none</phase>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.rat</groupId>\n+        <artifactId>apache-rat-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>check</goal>\n+            </goals>\n+            <phase>none</phase>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+  </build>\n+    \n+  <modules>\n+    <module>core</module>\n+    <module>console</module>\n+  </modules>\n+\n+</project>"},{"sha":"aa47af57de5c9bd4322a82aec67a668506055b88","filename":"build-tools/src/main/resources/content.ldif","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/build-tools%2Fsrc%2Fmain%2Fresources%2Fcontent.ldif","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/build-tools%2Fsrc%2Fmain%2Fresources%2Fcontent.ldif","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fresources%2Fcontent.ldif?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -45,13 +45,13 @@ uid: syncFromLDAP\n userpassword:: cGFzc3dvcmQxMjM=\n givenname: syncFromLDAP\n registeredAddress:  5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8\n-jpegPhoto:: /9j/4AAQSkZJRgABAQEBKwErAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoH\r\n- BwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQk\r\n- UDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wg\r\n- ARCAAEAAQDAREAAhEBAxEB/8QAFAABAAAAAAAAAAAAAAAAAAAACP/EABQBAQAAAAAAAAAAAAAAA\r\n- AAAAAD/2gAMAwEAAhADEAAAAUuf/8QAFhABAQEAAAAAAAAAAAAAAAAAAwAS/9oACAEBAAEFAiLV\r\n- /8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/aAAgBAwEBPwF//8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/\r\n- aAAgBAgEBPwF//8QAGhAAAQUBAAAAAAAAAAAAAAAAAgABESEiQf/aAAgBAQAGPwI9k2orq//EAB\r\n- kQAAMAAwAAAAAAAAAAAAAAAAERIQBBYf/aAAgBAQABPyF20CYlpT3P/9oADAMBAAIAAwAAABCf/\r\n- 8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/aAAgBAwEBPxB//8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/a\r\n+jpegPhoto:: /9j/4AAQSkZJRgABAQEBKwErAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoH\n+ BwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQk\n+ UDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wg\n+ ARCAAEAAQDAREAAhEBAxEB/8QAFAABAAAAAAAAAAAAAAAAAAAACP/EABQBAQAAAAAAAAAAAAAAA\n+ AAAAAD/2gAMAwEAAhADEAAAAUuf/8QAFhABAQEAAAAAAAAAAAAAAAAAAwAS/9oACAEBAAEFAiLV\n+ /8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/aAAgBAwEBPwF//8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/\n+ aAAgBAgEBPwF//8QAGhAAAQUBAAAAAAAAAAAAAAAAAgABESEiQf/aAAgBAQAGPwI9k2orq//EAB\n+ kQAAMAAwAAAAAAAAAAAAAAAAERIQBBYf/aAAgBAQABPyF20CYlpT3P/9oADAMBAAIAAwAAABCf/\n+ 8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/aAAgBAwEBPxB//8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/a\n  AAgBAgEBPxB//8QAGhABAAIDAQAAAAAAAAAAAAAAAREhAEFRYf/aAAgBAQABPxCUKGDcAUFrvhoz/9k="},{"sha":"1a9d2ef88144ade5974ada6eaf2e599a1ba12653","filename":"client/src/main/java/org/apache/syncope/client/rest/RestClientExceptionMapper.java","status":"modified","additions":126,"deletions":126,"changes":252,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientExceptionMapper.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,126 +1,126 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.client.rest;\r\n-\r\n-import java.security.AccessControlException;\r\n-import java.util.HashSet;\r\n-import java.util.List;\r\n-import java.util.Set;\r\n-import javax.ws.rs.BadRequestException;\r\n-import javax.ws.rs.core.Response;\r\n-import javax.ws.rs.ext.ExceptionMapper;\r\n-import javax.ws.rs.ext.Provider;\r\n-import javax.xml.ws.WebServiceException;\r\n-import org.apache.commons.lang3.StringUtils;\r\n-import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\r\n-import org.apache.syncope.common.types.ClientExceptionType;\r\n-import org.apache.syncope.common.types.RESTHeaders;\r\n-import org.apache.syncope.common.SyncopeClientCompositeException;\r\n-import org.apache.syncope.common.SyncopeClientException;\r\n-import org.slf4j.Logger;\r\n-import org.slf4j.LoggerFactory;\r\n-\r\n-@Provider\r\n-public class RestClientExceptionMapper implements ExceptionMapper<Exception>, ResponseExceptionMapper<Exception> {\r\n-\r\n-    private static final Logger LOG = LoggerFactory.getLogger(RestClientExceptionMapper.class);\r\n-\r\n-    @Override\r\n-    public Response toResponse(final Exception exception) {\r\n-        throw new UnsupportedOperationException(\r\n-                \"Call of toResponse() method is not expected in RestClientExceptionnMapper\");\r\n-    }\r\n-\r\n-    @Override\r\n-    public Exception fromResponse(final Response response) {\r\n-        final int statusCode = response.getStatus();\r\n-        Exception ex;\r\n-\r\n-        // 1. Check for client (possibly composite) exception in HTTP header\r\n-        SyncopeClientCompositeException scce = checkSyncopeClientCompositeException(response);\r\n-        if (scce != null) {\r\n-            if (scce.getExceptions().size() == 1) {\r\n-                ex = scce.getExceptions().iterator().next();\r\n-            } else {\r\n-                ex = scce;\r\n-            }\r\n-        } // 2. Map SC_UNAUTHORIZED\r\n-        else if (statusCode == Response.Status.UNAUTHORIZED.getStatusCode()) {\r\n-            ex = new AccessControlException(\"Remote unauthorized exception\");\r\n-        } // 3. Map SC_BAD_REQUEST\r\n-        else if (statusCode == Response.Status.BAD_REQUEST.getStatusCode()) {\r\n-            ex = new BadRequestException();\r\n-        } // 4. All other codes are mapped to runtime exception with HTTP code information\r\n-        else {\r\n-            ex = new WebServiceException(String.format(\"Remote exception with status code: %s\",\r\n-                    Response.Status.fromStatusCode(statusCode).name()));\r\n-        }\r\n-        LOG.error(\"Exception thrown by REST methods: \" + ex.getMessage(), ex);\r\n-        return ex;\r\n-    }\r\n-\r\n-    private SyncopeClientCompositeException checkSyncopeClientCompositeException(final Response response) {\r\n-        List<Object> exTypesInHeaders = response.getHeaders().get(RESTHeaders.ERROR_CODE);\r\n-        if (exTypesInHeaders == null) {\r\n-            LOG.debug(\"No \" + RESTHeaders.ERROR_CODE + \" provided\");\r\n-            return null;\r\n-        }\r\n-\r\n-        final SyncopeClientCompositeException compException = SyncopeClientException.buildComposite();\r\n-\r\n-        final Set<String> handledExceptions = new HashSet<String>();\r\n-        for (Object exceptionTypeValue : exTypesInHeaders) {\r\n-            final String exTypeAsString = (String) exceptionTypeValue;\r\n-            ClientExceptionType exceptionType = null;\r\n-            try {\r\n-                exceptionType = ClientExceptionType.fromHeaderValue(exTypeAsString);\r\n-            } catch (IllegalArgumentException e) {\r\n-                LOG.error(\"Unexpected value of \" + RESTHeaders.ERROR_CODE + \": \" + exTypeAsString, e);\r\n-            }\r\n-            if (exceptionType != null) {\r\n-                handledExceptions.add(exTypeAsString);\r\n-\r\n-                final SyncopeClientException clientException = SyncopeClientException.build(exceptionType);\r\n-\r\n-                if (response.getHeaders().get(RESTHeaders.ERROR_INFO) != null\r\n-                        && !response.getHeaders().get(RESTHeaders.ERROR_INFO).isEmpty()) {\r\n-\r\n-                    for (Object value : response.getHeaders().get(RESTHeaders.ERROR_INFO)) {\r\n-                        final String element = value.toString();\r\n-                        if (element.startsWith(exceptionType.getHeaderValue())) {\r\n-                            clientException.getElements().add(StringUtils.substringAfter(value.toString(), \":\"));\r\n-                        }\r\n-                    }\r\n-                }\r\n-                compException.addException(clientException);\r\n-            }\r\n-        }\r\n-\r\n-        exTypesInHeaders.removeAll(handledExceptions);\r\n-        if (!exTypesInHeaders.isEmpty()) {\r\n-            LOG.error(\"Unmanaged exceptions: \" + exTypesInHeaders);\r\n-        }\r\n-\r\n-        if (compException.hasExceptions()) {\r\n-            return compException;\r\n-        }\r\n-\r\n-        return null;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.rest;\n+\n+import java.security.AccessControlException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ExceptionMapper;\n+import javax.ws.rs.ext.Provider;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\n+import org.apache.syncope.common.types.ClientExceptionType;\n+import org.apache.syncope.common.types.RESTHeaders;\n+import org.apache.syncope.common.SyncopeClientCompositeException;\n+import org.apache.syncope.common.SyncopeClientException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Provider\n+public class RestClientExceptionMapper implements ExceptionMapper<Exception>, ResponseExceptionMapper<Exception> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RestClientExceptionMapper.class);\n+\n+    @Override\n+    public Response toResponse(final Exception exception) {\n+        throw new UnsupportedOperationException(\n+                \"Call of toResponse() method is not expected in RestClientExceptionnMapper\");\n+    }\n+\n+    @Override\n+    public Exception fromResponse(final Response response) {\n+        final int statusCode = response.getStatus();\n+        Exception ex;\n+\n+        // 1. Check for client (possibly composite) exception in HTTP header\n+        SyncopeClientCompositeException scce = checkSyncopeClientCompositeException(response);\n+        if (scce != null) {\n+            if (scce.getExceptions().size() == 1) {\n+                ex = scce.getExceptions().iterator().next();\n+            } else {\n+                ex = scce;\n+            }\n+        } // 2. Map SC_UNAUTHORIZED\n+        else if (statusCode == Response.Status.UNAUTHORIZED.getStatusCode()) {\n+            ex = new AccessControlException(\"Remote unauthorized exception\");\n+        } // 3. Map SC_BAD_REQUEST\n+        else if (statusCode == Response.Status.BAD_REQUEST.getStatusCode()) {\n+            ex = new BadRequestException();\n+        } // 4. All other codes are mapped to runtime exception with HTTP code information\n+        else {\n+            ex = new WebServiceException(String.format(\"Remote exception with status code: %s\",\n+                    Response.Status.fromStatusCode(statusCode).name()));\n+        }\n+        LOG.error(\"Exception thrown by REST methods: \" + ex.getMessage(), ex);\n+        return ex;\n+    }\n+\n+    private SyncopeClientCompositeException checkSyncopeClientCompositeException(final Response response) {\n+        List<Object> exTypesInHeaders = response.getHeaders().get(RESTHeaders.ERROR_CODE);\n+        if (exTypesInHeaders == null) {\n+            LOG.debug(\"No \" + RESTHeaders.ERROR_CODE + \" provided\");\n+            return null;\n+        }\n+\n+        final SyncopeClientCompositeException compException = SyncopeClientException.buildComposite();\n+\n+        final Set<String> handledExceptions = new HashSet<String>();\n+        for (Object exceptionTypeValue : exTypesInHeaders) {\n+            final String exTypeAsString = (String) exceptionTypeValue;\n+            ClientExceptionType exceptionType = null;\n+            try {\n+                exceptionType = ClientExceptionType.fromHeaderValue(exTypeAsString);\n+            } catch (IllegalArgumentException e) {\n+                LOG.error(\"Unexpected value of \" + RESTHeaders.ERROR_CODE + \": \" + exTypeAsString, e);\n+            }\n+            if (exceptionType != null) {\n+                handledExceptions.add(exTypeAsString);\n+\n+                final SyncopeClientException clientException = SyncopeClientException.build(exceptionType);\n+\n+                if (response.getHeaders().get(RESTHeaders.ERROR_INFO) != null\n+                        && !response.getHeaders().get(RESTHeaders.ERROR_INFO).isEmpty()) {\n+\n+                    for (Object value : response.getHeaders().get(RESTHeaders.ERROR_INFO)) {\n+                        final String element = value.toString();\n+                        if (element.startsWith(exceptionType.getHeaderValue())) {\n+                            clientException.getElements().add(StringUtils.substringAfter(value.toString(), \":\"));\n+                        }\n+                    }\n+                }\n+                compException.addException(clientException);\n+            }\n+        }\n+\n+        exTypesInHeaders.removeAll(handledExceptions);\n+        if (!exTypesInHeaders.isEmpty()) {\n+            LOG.error(\"Unmanaged exceptions: \" + exTypesInHeaders);\n+        }\n+\n+        if (compException.hasExceptions()) {\n+            return compException;\n+        }\n+\n+        return null;\n+    }\n+}"},{"sha":"1c870a112b8d1e302526f5437d72925c191a2388","filename":"common/src/main/java/org/apache/syncope/common/AbstractBaseBean.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FAbstractBaseBean.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,54 +1,54 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common;\r\n-\r\n-import java.io.Serializable;\r\n-import javax.xml.bind.annotation.XmlSeeAlso;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-import org.apache.commons.lang3.builder.EqualsBuilder;\r\n-import org.apache.commons.lang3.builder.HashCodeBuilder;\r\n-import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\r\n-import org.apache.commons.lang3.builder.ToStringStyle;\r\n-import org.apache.syncope.common.to.AbstractTaskTO;\r\n-import org.apache.syncope.common.to.ReportTO;\r\n-import org.apache.syncope.common.to.RoleTO;\r\n-import org.apache.syncope.common.to.UserTO;\r\n-\r\n-@XmlType\r\n-// Reporting here only classes used via PagedResult\r\n-@XmlSeeAlso({ AbstractTaskTO.class, ReportTO.class, RoleTO.class, UserTO.class })\r\n-public abstract class AbstractBaseBean implements Serializable {\r\n-\r\n-    private static final long serialVersionUID = 3119542005279892164L;\r\n-\r\n-    @Override\r\n-    public boolean equals(final Object obj) {\r\n-        return EqualsBuilder.reflectionEquals(this, obj);\r\n-    }\r\n-\r\n-    @Override\r\n-    public int hashCode() {\r\n-        return HashCodeBuilder.reflectionHashCode(this);\r\n-    }\r\n-\r\n-    @Override\r\n-    public String toString() {\r\n-        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common;\n+\n+import java.io.Serializable;\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n+import org.apache.syncope.common.to.ReportTO;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.to.UserTO;\n+\n+@XmlType\n+// Reporting here only classes used via PagedResult\n+@XmlSeeAlso({ AbstractTaskTO.class, ReportTO.class, RoleTO.class, UserTO.class })\n+public abstract class AbstractBaseBean implements Serializable {\n+\n+    private static final long serialVersionUID = 3119542005279892164L;\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        return EqualsBuilder.reflectionEquals(this, obj);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return HashCodeBuilder.reflectionHashCode(this);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n+    }\n+}"},{"sha":"70f1bee290717f68adcd06283654cf63e96833c8","filename":"common/src/main/java/org/apache/syncope/common/SyncopeClientCompositeException.java","status":"modified","additions":96,"deletions":96,"changes":192,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeClientCompositeException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeClientCompositeException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeClientCompositeException.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,96 +1,96 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common;\r\n-\r\n-import java.util.HashSet;\r\n-import java.util.Iterator;\r\n-import java.util.Set;\r\n-import org.apache.syncope.common.types.ClientExceptionType;\r\n-\r\n-public class SyncopeClientCompositeException extends SyncopeClientException {\r\n-\r\n-    private static final long serialVersionUID = 7882118041134372129L;\r\n-\r\n-    private final Set<SyncopeClientException> exceptions = new HashSet<SyncopeClientException>();\r\n-\r\n-    protected SyncopeClientCompositeException() {\r\n-        super(ClientExceptionType.Composite);\r\n-    }\r\n-\r\n-    public boolean hasExceptions() {\r\n-        return !exceptions.isEmpty();\r\n-    }\r\n-\r\n-    public boolean hasException(final ClientExceptionType exceptionType) {\r\n-        return getException(exceptionType) != null;\r\n-    }\r\n-\r\n-    public SyncopeClientException getException(final ClientExceptionType exceptionType) {\r\n-        boolean found = false;\r\n-        SyncopeClientException syncopeClientException = null;\r\n-        for (Iterator<SyncopeClientException> itor = exceptions.iterator(); itor.hasNext() && !found;) {\r\n-            syncopeClientException = itor.next();\r\n-            if (syncopeClientException.getType().equals(exceptionType)) {\r\n-                found = true;\r\n-            }\r\n-        }\r\n-\r\n-        return found\r\n-                ? syncopeClientException\r\n-                : null;\r\n-    }\r\n-\r\n-    public Set<SyncopeClientException> getExceptions() {\r\n-        return exceptions;\r\n-    }\r\n-\r\n-    public boolean addException(final SyncopeClientException exception) {\r\n-        if (exception.getType() == null) {\r\n-            throw new IllegalArgumentException(exception + \" does not have the right \"\r\n-                    + ClientExceptionType.class.getName() + \" set\");\r\n-        }\r\n-\r\n-        return exceptions.add(exception);\r\n-    }\r\n-\r\n-    @Override\r\n-    public String getMessage() {\r\n-        StringBuilder message = new StringBuilder();\r\n-\r\n-        message.append(\"{\");\r\n-        Iterator<SyncopeClientException> iter = getExceptions().iterator();\r\n-        while (iter.hasNext()) {\r\n-            SyncopeClientException e = iter.next();\r\n-            message.append(\"[\");\r\n-            message.append(e.getMessage());\r\n-            message.append(\"]\");\r\n-            if (iter.hasNext()) {\r\n-                message.append(\", \");\r\n-            }\r\n-        }\r\n-        message.append(\"}\");\r\n-\r\n-        return message.toString();\r\n-    }\r\n-\r\n-    @Override\r\n-    public String getLocalizedMessage() {\r\n-        return getMessage();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+import org.apache.syncope.common.types.ClientExceptionType;\n+\n+public class SyncopeClientCompositeException extends SyncopeClientException {\n+\n+    private static final long serialVersionUID = 7882118041134372129L;\n+\n+    private final Set<SyncopeClientException> exceptions = new HashSet<SyncopeClientException>();\n+\n+    protected SyncopeClientCompositeException() {\n+        super(ClientExceptionType.Composite);\n+    }\n+\n+    public boolean hasExceptions() {\n+        return !exceptions.isEmpty();\n+    }\n+\n+    public boolean hasException(final ClientExceptionType exceptionType) {\n+        return getException(exceptionType) != null;\n+    }\n+\n+    public SyncopeClientException getException(final ClientExceptionType exceptionType) {\n+        boolean found = false;\n+        SyncopeClientException syncopeClientException = null;\n+        for (Iterator<SyncopeClientException> itor = exceptions.iterator(); itor.hasNext() && !found;) {\n+            syncopeClientException = itor.next();\n+            if (syncopeClientException.getType().equals(exceptionType)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found\n+                ? syncopeClientException\n+                : null;\n+    }\n+\n+    public Set<SyncopeClientException> getExceptions() {\n+        return exceptions;\n+    }\n+\n+    public boolean addException(final SyncopeClientException exception) {\n+        if (exception.getType() == null) {\n+            throw new IllegalArgumentException(exception + \" does not have the right \"\n+                    + ClientExceptionType.class.getName() + \" set\");\n+        }\n+\n+        return exceptions.add(exception);\n+    }\n+\n+    @Override\n+    public String getMessage() {\n+        StringBuilder message = new StringBuilder();\n+\n+        message.append(\"{\");\n+        Iterator<SyncopeClientException> iter = getExceptions().iterator();\n+        while (iter.hasNext()) {\n+            SyncopeClientException e = iter.next();\n+            message.append(\"[\");\n+            message.append(e.getMessage());\n+            message.append(\"]\");\n+            if (iter.hasNext()) {\n+                message.append(\", \");\n+            }\n+        }\n+        message.append(\"}\");\n+\n+        return message.toString();\n+    }\n+\n+    @Override\n+    public String getLocalizedMessage() {\n+        return getMessage();\n+    }\n+}"},{"sha":"a003af7fb0812bccd236fef82078943c8b89f662","filename":"common/src/main/java/org/apache/syncope/common/SyncopeClientException.java","status":"modified","additions":97,"deletions":97,"changes":194,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeClientException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeClientException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeClientException.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,97 +1,97 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import org.apache.syncope.common.types.ClientExceptionType;\r\n-\r\n-public class SyncopeClientException extends RuntimeException {\r\n-\r\n-    private static final long serialVersionUID = 3380920886511913475L;\r\n-\r\n-    private ClientExceptionType type;\r\n-\r\n-    private final List<String> elements = new ArrayList<String>();\r\n-\r\n-    public static SyncopeClientException build(final ClientExceptionType type) {\r\n-        if (type == ClientExceptionType.Composite) {\r\n-            throw new IllegalArgumentException(\"Composite exceptions must be obtained via buildComposite()\");\r\n-        }\r\n-        return new SyncopeClientException(type);\r\n-    }\r\n-\r\n-    public static SyncopeClientCompositeException buildComposite() {\r\n-        return new SyncopeClientCompositeException();\r\n-    }\r\n-\r\n-    protected SyncopeClientException(final ClientExceptionType type) {\r\n-        super();\r\n-        setType(type);\r\n-    }\r\n-\r\n-    public boolean isComposite() {\r\n-        return getType() == ClientExceptionType.Composite;\r\n-    }\r\n-\r\n-    public SyncopeClientCompositeException asComposite() {\r\n-        if (!isComposite()) {\r\n-            throw new IllegalArgumentException(\"This is not a composite exception\");\r\n-        }\r\n-\r\n-        return (SyncopeClientCompositeException) this;\r\n-    }\r\n-\r\n-    public ClientExceptionType getType() {\r\n-        return type;\r\n-    }\r\n-\r\n-    public final void setType(final ClientExceptionType type) {\r\n-        this.type = type;\r\n-    }\r\n-\r\n-    public List<String> getElements() {\r\n-        return elements;\r\n-    }\r\n-\r\n-    public boolean isEmpty() {\r\n-        return elements.isEmpty();\r\n-    }\r\n-\r\n-    public int size() {\r\n-        return elements.size();\r\n-    }\r\n-\r\n-    @Override\r\n-    public String getMessage() {\r\n-        StringBuilder message = new StringBuilder();\r\n-\r\n-        message.append(getType());\r\n-        message.append(\" \");\r\n-        message.append(getElements());\r\n-\r\n-        return message.toString();\r\n-    }\r\n-\r\n-    @Override\r\n-    public String getLocalizedMessage() {\r\n-        return getMessage();\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.common.types.ClientExceptionType;\n+\n+public class SyncopeClientException extends RuntimeException {\n+\n+    private static final long serialVersionUID = 3380920886511913475L;\n+\n+    private ClientExceptionType type;\n+\n+    private final List<String> elements = new ArrayList<String>();\n+\n+    public static SyncopeClientException build(final ClientExceptionType type) {\n+        if (type == ClientExceptionType.Composite) {\n+            throw new IllegalArgumentException(\"Composite exceptions must be obtained via buildComposite()\");\n+        }\n+        return new SyncopeClientException(type);\n+    }\n+\n+    public static SyncopeClientCompositeException buildComposite() {\n+        return new SyncopeClientCompositeException();\n+    }\n+\n+    protected SyncopeClientException(final ClientExceptionType type) {\n+        super();\n+        setType(type);\n+    }\n+\n+    public boolean isComposite() {\n+        return getType() == ClientExceptionType.Composite;\n+    }\n+\n+    public SyncopeClientCompositeException asComposite() {\n+        if (!isComposite()) {\n+            throw new IllegalArgumentException(\"This is not a composite exception\");\n+        }\n+\n+        return (SyncopeClientCompositeException) this;\n+    }\n+\n+    public ClientExceptionType getType() {\n+        return type;\n+    }\n+\n+    public final void setType(final ClientExceptionType type) {\n+        this.type = type;\n+    }\n+\n+    public List<String> getElements() {\n+        return elements;\n+    }\n+\n+    public boolean isEmpty() {\n+        return elements.isEmpty();\n+    }\n+\n+    public int size() {\n+        return elements.size();\n+    }\n+\n+    @Override\n+    public String getMessage() {\n+        StringBuilder message = new StringBuilder();\n+\n+        message.append(getType());\n+        message.append(\" \");\n+        message.append(getElements());\n+\n+        return message.toString();\n+    }\n+\n+    @Override\n+    public String getLocalizedMessage() {\n+        return getMessage();\n+    }\n+\n+}"},{"sha":"a502656fb65f7a942e223f2bbd2c0dda287b5052","filename":"common/src/main/java/org/apache/syncope/common/SyncopeConstants.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeConstants.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,52 +1,52 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common;\r\n-\r\n-import java.util.regex.Pattern;\r\n-\r\n-public class SyncopeConstants {\r\n-\r\n-    public static final String NAMESPACE = \"http://syncope.apache.org/1.2\";\r\n-\r\n-    public static final String UNAUTHENTICATED = \"unauthenticated\";\r\n-\r\n-    public static final String ANONYMOUS_ENTITLEMENT = \"anonymous\";\r\n-\r\n-    public static final String ENUM_VALUES_SEPARATOR = \";\";\r\n-\r\n-    public static final String[] DATE_PATTERNS = {\r\n-        \"yyyy-MM-dd'T'HH:mm:ssZ\",\r\n-        \"EEE, dd MMM yyyy HH:mm:ss z\",\r\n-        \"yyyy-MM-dd'T'HH:mm:ssz\",\r\n-        \"yyyy-MM-dd HH:mm:ss\",\r\n-        \"yyyy-MM-dd HH:mm:ss.S\", // explicitly added to import date into MySql repository\r\n-        \"yyyy-MM-dd\" };\r\n-\r\n-    public static final String DEFAULT_DATE_PATTERN = \"yyyy-MM-dd'T'HH:mm:ssZ\";\r\n-\r\n-    public static final String DEFAULT_ENCODING = \"UTF-8\";\r\n-\r\n-    public static final String ROOT_LOGGER = \"ROOT\";\r\n-\r\n-    public static final Pattern EMAIL_PATTERN = Pattern.compile(\r\n-            \"^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*\"\r\n-            + \"@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$\",\r\n-            Pattern.CASE_INSENSITIVE);\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common;\n+\n+import java.util.regex.Pattern;\n+\n+public class SyncopeConstants {\n+\n+    public static final String NAMESPACE = \"http://syncope.apache.org/1.2\";\n+\n+    public static final String UNAUTHENTICATED = \"unauthenticated\";\n+\n+    public static final String ANONYMOUS_ENTITLEMENT = \"anonymous\";\n+\n+    public static final String ENUM_VALUES_SEPARATOR = \";\";\n+\n+    public static final String[] DATE_PATTERNS = {\n+        \"yyyy-MM-dd'T'HH:mm:ssZ\",\n+        \"EEE, dd MMM yyyy HH:mm:ss z\",\n+        \"yyyy-MM-dd'T'HH:mm:ssz\",\n+        \"yyyy-MM-dd HH:mm:ss\",\n+        \"yyyy-MM-dd HH:mm:ss.S\", // explicitly added to import date into MySql repository\n+        \"yyyy-MM-dd\" };\n+\n+    public static final String DEFAULT_DATE_PATTERN = \"yyyy-MM-dd'T'HH:mm:ssZ\";\n+\n+    public static final String DEFAULT_ENCODING = \"UTF-8\";\n+\n+    public static final String ROOT_LOGGER = \"ROOT\";\n+\n+    public static final Pattern EMAIL_PATTERN = Pattern.compile(\n+            \"^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*\"\n+            + \"@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$\",\n+            Pattern.CASE_INSENSITIVE);\n+\n+}"},{"sha":"56816959746c5f9cea846035c6b5d598837198bd","filename":"common/src/main/java/org/apache/syncope/common/annotation/ClassList.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FClassList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FClassList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FClassList.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,26 +1,26 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.annotation;\r\n-\r\n-import java.lang.annotation.Retention;\r\n-import static java.lang.annotation.RetentionPolicy.RUNTIME;\r\n-\r\n-@Retention(RUNTIME)\r\n-public @interface ClassList {\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.annotation;\n+\n+import java.lang.annotation.Retention;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+@Retention(RUNTIME)\n+public @interface ClassList {\n+}"},{"sha":"cca70a10ade246f827766497db0fdd9e7622784d","filename":"common/src/main/java/org/apache/syncope/common/annotation/FormAttributeField.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FFormAttributeField.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FFormAttributeField.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FFormAttributeField.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,37 +1,37 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.annotation;\r\n-\r\n-import java.lang.annotation.ElementType;\r\n-import java.lang.annotation.Retention;\r\n-import java.lang.annotation.RetentionPolicy;\r\n-import java.lang.annotation.Target;\r\n-\r\n-import org.apache.syncope.common.types.IntMappingType;\r\n-\r\n-@Target({ ElementType.FIELD })\r\n-@Retention(RetentionPolicy.RUNTIME)\r\n-public @interface FormAttributeField {\r\n-\r\n-    boolean userSearch() default false;\r\n-\r\n-    boolean roleSearch() default false;\r\n-\r\n-    IntMappingType schema() default IntMappingType.UserSchema;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apache.syncope.common.types.IntMappingType;\n+\n+@Target({ ElementType.FIELD })\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface FormAttributeField {\n+\n+    boolean userSearch() default false;\n+\n+    boolean roleSearch() default false;\n+\n+    IntMappingType schema() default IntMappingType.UserSchema;\n+}"},{"sha":"ad98ae506429b35d1c3cc529aa6e08d75055dd04","filename":"common/src/main/java/org/apache/syncope/common/annotation/SchemaList.java","status":"modified","additions":28,"deletions":28,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FSchemaList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FSchemaList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FSchemaList.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,28 +1,28 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.annotation;\r\n-\r\n-import java.lang.annotation.Retention;\r\n-import static java.lang.annotation.RetentionPolicy.RUNTIME;\r\n-\r\n-@Retention(RUNTIME)\r\n-public @interface SchemaList {\r\n-\r\n-    boolean extended() default false;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.annotation;\n+\n+import java.lang.annotation.Retention;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+@Retention(RUNTIME)\n+public @interface SchemaList {\n+\n+    boolean extended() default false;\n+}"},{"sha":"15dca150a83dfc8611c6f0725bff8e912f25fdef","filename":"common/src/main/java/org/apache/syncope/common/mod/AbstractAttributableMod.java","status":"modified","additions":113,"deletions":113,"changes":226,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAbstractAttributableMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAbstractAttributableMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAbstractAttributableMod.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,113 +1,113 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.mod;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.HashSet;\r\n-import java.util.Set;\r\n-\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-\r\n-/**\r\n- * Abstract base class for objects that can have attributes removed, added or updated.\r\n- *\r\n- * Attributes can be regular attributes, derived attributes, virtual attributes and resources.\r\n- */\r\n-@XmlType\r\n-public abstract class AbstractAttributableMod extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = 3241118574016303198L;\r\n-\r\n-    protected long id;\r\n-\r\n-    protected final Set<AttributeMod> attrsToUpdate = new HashSet<AttributeMod>();\r\n-\r\n-    protected final Set<String> attrsToRemove = new HashSet<String>();\r\n-\r\n-    protected final Set<String> derAttrsToAdd = new HashSet<String>();\r\n-\r\n-    protected final Set<String> derAttrsToRemove = new HashSet<String>();\r\n-\r\n-    protected final Set<AttributeMod> virAttrsToUpdate = new HashSet<AttributeMod>();\r\n-\r\n-    protected final Set<String> virAttrsToRemove = new HashSet<String>();\r\n-\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(final long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"attributesToRemove\")\r\n-    @XmlElement(name = \"attribute\")\r\n-    @JsonProperty(\"attributesToRemove\")\r\n-    public Set<String> getAttrsToRemove() {\r\n-        return attrsToRemove;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"attributesToUpdate\")\r\n-    @XmlElement(name = \"attributeMod\")\r\n-    @JsonProperty(\"attributesToUpdate\")\r\n-    public Set<AttributeMod> getAttrsToUpdate() {\r\n-        return attrsToUpdate;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"derAttrsToAdd\")\r\n-    @XmlElement(name = \"attribute\")\r\n-    @JsonProperty(\"derAttrsToAdd\")\r\n-    public Set<String> getDerAttrsToAdd() {\r\n-        return derAttrsToAdd;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"derAttrsToRemove\")\r\n-    @XmlElement(name = \"attribute\")\r\n-    @JsonProperty(\"derAttrsToRemove\")\r\n-    public Set<String> getDerAttrsToRemove() {\r\n-        return derAttrsToRemove;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"virAttrsToRemove\")\r\n-    @XmlElement(name = \"attribute\")\r\n-    @JsonProperty(\"virAttrsToRemove\")\r\n-    public Set<String> getVirAttrsToRemove() {\r\n-        return virAttrsToRemove;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"virAttrsToUpdate\")\r\n-    @XmlElement(name = \"attribute\")\r\n-    @JsonProperty(\"virAttrsToUpdate\")\r\n-    public Set<AttributeMod> getVirAttrsToUpdate() {\r\n-        return virAttrsToUpdate;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return true is all backing Sets are empty.\r\n-     */\r\n-    public boolean isEmpty() {\r\n-        return attrsToUpdate.isEmpty() && attrsToRemove.isEmpty()\r\n-                && derAttrsToAdd.isEmpty() && derAttrsToRemove.isEmpty()\r\n-                && virAttrsToUpdate.isEmpty() && virAttrsToRemove.isEmpty();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.mod;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+\n+/**\n+ * Abstract base class for objects that can have attributes removed, added or updated.\n+ *\n+ * Attributes can be regular attributes, derived attributes, virtual attributes and resources.\n+ */\n+@XmlType\n+public abstract class AbstractAttributableMod extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 3241118574016303198L;\n+\n+    protected long id;\n+\n+    protected final Set<AttributeMod> attrsToUpdate = new HashSet<AttributeMod>();\n+\n+    protected final Set<String> attrsToRemove = new HashSet<String>();\n+\n+    protected final Set<String> derAttrsToAdd = new HashSet<String>();\n+\n+    protected final Set<String> derAttrsToRemove = new HashSet<String>();\n+\n+    protected final Set<AttributeMod> virAttrsToUpdate = new HashSet<AttributeMod>();\n+\n+    protected final Set<String> virAttrsToRemove = new HashSet<String>();\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(final long id) {\n+        this.id = id;\n+    }\n+\n+    @XmlElementWrapper(name = \"attributesToRemove\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"attributesToRemove\")\n+    public Set<String> getAttrsToRemove() {\n+        return attrsToRemove;\n+    }\n+\n+    @XmlElementWrapper(name = \"attributesToUpdate\")\n+    @XmlElement(name = \"attributeMod\")\n+    @JsonProperty(\"attributesToUpdate\")\n+    public Set<AttributeMod> getAttrsToUpdate() {\n+        return attrsToUpdate;\n+    }\n+\n+    @XmlElementWrapper(name = \"derAttrsToAdd\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"derAttrsToAdd\")\n+    public Set<String> getDerAttrsToAdd() {\n+        return derAttrsToAdd;\n+    }\n+\n+    @XmlElementWrapper(name = \"derAttrsToRemove\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"derAttrsToRemove\")\n+    public Set<String> getDerAttrsToRemove() {\n+        return derAttrsToRemove;\n+    }\n+\n+    @XmlElementWrapper(name = \"virAttrsToRemove\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"virAttrsToRemove\")\n+    public Set<String> getVirAttrsToRemove() {\n+        return virAttrsToRemove;\n+    }\n+\n+    @XmlElementWrapper(name = \"virAttrsToUpdate\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"virAttrsToUpdate\")\n+    public Set<AttributeMod> getVirAttrsToUpdate() {\n+        return virAttrsToUpdate;\n+    }\n+\n+    /**\n+     * @return true is all backing Sets are empty.\n+     */\n+    public boolean isEmpty() {\n+        return attrsToUpdate.isEmpty() && attrsToRemove.isEmpty()\n+                && derAttrsToAdd.isEmpty() && derAttrsToRemove.isEmpty()\n+                && virAttrsToUpdate.isEmpty() && virAttrsToRemove.isEmpty();\n+    }\n+}"},{"sha":"38f6f8b20ecc2debaddb8f5ead164ebe68b9392d","filename":"common/src/main/java/org/apache/syncope/common/mod/AttributeMod.java","status":"modified","additions":78,"deletions":78,"changes":156,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAttributeMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAttributeMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAttributeMod.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,78 +1,78 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.mod;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonIgnore;\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-\r\n-@XmlRootElement\r\n-@XmlType\r\n-public class AttributeMod extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = -913573979137431406L;\r\n-\r\n-    private String schema;\r\n-\r\n-    private List<String> valuesToBeAdded;\r\n-\r\n-    private List<String> valuesToBeRemoved;\r\n-\r\n-    public AttributeMod() {\r\n-        super();\r\n-\r\n-        valuesToBeAdded = new ArrayList<String>();\r\n-        valuesToBeRemoved = new ArrayList<String>();\r\n-    }\r\n-\r\n-    public String getSchema() {\r\n-        return schema;\r\n-    }\r\n-\r\n-    public void setSchema(String schema) {\r\n-        this.schema = schema;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"valuesToBeAdded\")\r\n-    @XmlElement(name = \"value\")\r\n-    @JsonProperty(\"valuesToBeAdded\")\r\n-    public List<String> getValuesToBeAdded() {\r\n-        return valuesToBeAdded;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"valuesToBeRemoved\")\r\n-    @XmlElement(name = \"value\")\r\n-    @JsonProperty(\"valuesToBeRemoved\")\r\n-    public List<String> getValuesToBeRemoved() {\r\n-        return valuesToBeRemoved;\r\n-    }\r\n-\r\n-    @JsonIgnore\r\n-    public boolean isEmpty() {\r\n-        return valuesToBeAdded.isEmpty() && valuesToBeRemoved.isEmpty();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.mod;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+\n+@XmlRootElement\n+@XmlType\n+public class AttributeMod extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -913573979137431406L;\n+\n+    private String schema;\n+\n+    private List<String> valuesToBeAdded;\n+\n+    private List<String> valuesToBeRemoved;\n+\n+    public AttributeMod() {\n+        super();\n+\n+        valuesToBeAdded = new ArrayList<String>();\n+        valuesToBeRemoved = new ArrayList<String>();\n+    }\n+\n+    public String getSchema() {\n+        return schema;\n+    }\n+\n+    public void setSchema(String schema) {\n+        this.schema = schema;\n+    }\n+\n+    @XmlElementWrapper(name = \"valuesToBeAdded\")\n+    @XmlElement(name = \"value\")\n+    @JsonProperty(\"valuesToBeAdded\")\n+    public List<String> getValuesToBeAdded() {\n+        return valuesToBeAdded;\n+    }\n+\n+    @XmlElementWrapper(name = \"valuesToBeRemoved\")\n+    @XmlElement(name = \"value\")\n+    @JsonProperty(\"valuesToBeRemoved\")\n+    public List<String> getValuesToBeRemoved() {\n+        return valuesToBeRemoved;\n+    }\n+\n+    @JsonIgnore\n+    public boolean isEmpty() {\n+        return valuesToBeAdded.isEmpty() && valuesToBeRemoved.isEmpty();\n+    }\n+}"},{"sha":"8fa83bc2cd19bcc0a40943833765d5c16620c32f","filename":"common/src/main/java/org/apache/syncope/common/mod/MembershipMod.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FMembershipMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FMembershipMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FMembershipMod.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,46 +1,46 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.mod;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonIgnore;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-@XmlRootElement\r\n-@XmlType\r\n-public class MembershipMod extends AbstractAttributableMod {\r\n-\r\n-    private static final long serialVersionUID = 2511869129977331525L;\r\n-\r\n-    private long role;\r\n-\r\n-    public long getRole() {\r\n-        return role;\r\n-    }\r\n-\r\n-    public void setRole(long role) {\r\n-        this.role = role;\r\n-    }\r\n-\r\n-    @JsonIgnore\r\n-    @Override\r\n-    public boolean isEmpty() {\r\n-        return super.isEmpty() && role == 0;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.mod;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement\n+@XmlType\n+public class MembershipMod extends AbstractAttributableMod {\n+\n+    private static final long serialVersionUID = 2511869129977331525L;\n+\n+    private long role;\n+\n+    public long getRole() {\n+        return role;\n+    }\n+\n+    public void setRole(long role) {\n+        this.role = role;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public boolean isEmpty() {\n+        return super.isEmpty() && role == 0;\n+    }\n+}"},{"sha":"5be3289be42ab6e033bd29194ca13aa8744c7a1f","filename":"common/src/main/java/org/apache/syncope/common/mod/ReferenceMod.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FReferenceMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FReferenceMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FReferenceMod.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,54 +1,54 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.mod;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-\r\n-/**\r\n- * This class is used to specify the willing to modify an external reference id. Use 'null' ReferenceMod to keep the\r\n- * current reference id; use a ReferenceMod with a null id to try to reset the reference id; use a ReferenceMod with a\r\n- * not null id to specify a new reference id.\r\n- */\r\n-@XmlRootElement(name = \"referenceMod\")\r\n-@XmlType\r\n-public class ReferenceMod extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = -4188817853738067677L;\r\n-\r\n-    private Long id;\r\n-\r\n-    public ReferenceMod() {\r\n-        this.id = null;\r\n-    }\r\n-\r\n-    public ReferenceMod(final Long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public Long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(final Long id) {\r\n-        this.id = id;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.mod;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+\n+/**\n+ * This class is used to specify the willing to modify an external reference id. Use 'null' ReferenceMod to keep the\n+ * current reference id; use a ReferenceMod with a null id to try to reset the reference id; use a ReferenceMod with a\n+ * not null id to specify a new reference id.\n+ */\n+@XmlRootElement(name = \"referenceMod\")\n+@XmlType\n+public class ReferenceMod extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -4188817853738067677L;\n+\n+    private Long id;\n+\n+    public ReferenceMod() {\n+        this.id = null;\n+    }\n+\n+    public ReferenceMod(final Long id) {\n+        this.id = id;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(final Long id) {\n+        this.id = id;\n+    }\n+}"},{"sha":"1a5335f6f256aa55bd447e02cefc4ece059b5a3f","filename":"common/src/main/java/org/apache/syncope/common/mod/ResourceAssociationMod.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FResourceAssociationMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FResourceAssociationMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FResourceAssociationMod.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,81 +1,81 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.mod;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-import org.apache.syncope.common.wrap.ResourceName;\r\n-\r\n-/**\r\n- * This class is used to specify the willing to create associations between user and external references.\r\n- * Password can be provided if required by an assign or provisioning operation.\r\n- *\r\n- * @see org.apache.syncope.common.types.ResourceAssociationActionType\r\n- */\r\n-@XmlRootElement(name = \"resourceAssociationMod\")\r\n-@XmlType\r\n-public class ResourceAssociationMod extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = -4188817853738067678L;\r\n-\r\n-    /**\r\n-     * Target external resources.\r\n-     */\r\n-    private final List<ResourceName> targetResources = new ArrayList<ResourceName>();\r\n-\r\n-    /**\r\n-     * Indicate the willing to change password on target external resources.\r\n-     */\r\n-    private boolean changePwd;\r\n-\r\n-    /**\r\n-     * Indicate the new password to be provisioned on target external resources.\r\n-     */\r\n-    private String password;\r\n-\r\n-    @XmlElementWrapper(name = \"resources\")\r\n-    @XmlElement(name = \"resource\")\r\n-    @JsonProperty(\"resources\")\r\n-    public List<ResourceName> getTargetResources() {\r\n-        return targetResources;\r\n-    }\r\n-\r\n-    public boolean isChangePwd() {\r\n-        return changePwd;\r\n-    }\r\n-\r\n-    public void setChangePwd(boolean changePwd) {\r\n-        this.changePwd = changePwd;\r\n-    }\r\n-\r\n-    public String getPassword() {\r\n-        return password;\r\n-    }\r\n-\r\n-    public void setPassword(String password) {\r\n-        this.password = password;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.mod;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.wrap.ResourceName;\n+\n+/**\n+ * This class is used to specify the willing to create associations between user and external references.\n+ * Password can be provided if required by an assign or provisioning operation.\n+ *\n+ * @see org.apache.syncope.common.types.ResourceAssociationActionType\n+ */\n+@XmlRootElement(name = \"resourceAssociationMod\")\n+@XmlType\n+public class ResourceAssociationMod extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -4188817853738067678L;\n+\n+    /**\n+     * Target external resources.\n+     */\n+    private final List<ResourceName> targetResources = new ArrayList<ResourceName>();\n+\n+    /**\n+     * Indicate the willing to change password on target external resources.\n+     */\n+    private boolean changePwd;\n+\n+    /**\n+     * Indicate the new password to be provisioned on target external resources.\n+     */\n+    private String password;\n+\n+    @XmlElementWrapper(name = \"resources\")\n+    @XmlElement(name = \"resource\")\n+    @JsonProperty(\"resources\")\n+    public List<ResourceName> getTargetResources() {\n+        return targetResources;\n+    }\n+\n+    public boolean isChangePwd() {\n+        return changePwd;\n+    }\n+\n+    public void setChangePwd(boolean changePwd) {\n+        this.changePwd = changePwd;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(String password) {\n+        this.password = password;\n+    }\n+}"},{"sha":"cb2439125ff24f771e195143dd96ea24ebc9fb0d","filename":"common/src/main/java/org/apache/syncope/common/mod/RoleMod.java","status":"modified","additions":301,"deletions":301,"changes":602,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FRoleMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FRoleMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FRoleMod.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,301 +1,301 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.mod;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonIgnore;\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-@XmlRootElement(name = \"roleMod\")\r\n-@XmlType\r\n-public class RoleMod extends AbstractSubjectMod {\r\n-\r\n-    private static final long serialVersionUID = 7455805264680210747L;\r\n-\r\n-    private String name;\r\n-\r\n-    private ReferenceMod userOwner;\r\n-\r\n-    private ReferenceMod roleOwner;\r\n-\r\n-    private Boolean inheritOwner;\r\n-\r\n-    private Boolean inheritTemplates;\r\n-\r\n-    private Boolean inheritAttrs;\r\n-\r\n-    private Boolean inheritDerAttrs;\r\n-\r\n-    private Boolean inheritVirAttrs;\r\n-\r\n-    private Boolean inheritAccountPolicy;\r\n-\r\n-    private Boolean inheritPasswordPolicy;\r\n-\r\n-    private boolean modEntitlements;\r\n-\r\n-    private List<String> entitlements = new ArrayList<String>();\r\n-\r\n-    private boolean modRAttrTemplates;\r\n-\r\n-    private List<String> rAttrTemplates = new ArrayList<String>();\r\n-\r\n-    private boolean modRDerAttrTemplates;\r\n-\r\n-    private List<String> rDerAttrTemplates = new ArrayList<String>();\r\n-\r\n-    private boolean modRVirAttrTemplates;\r\n-\r\n-    private List<String> rVirAttrTemplates = new ArrayList<String>();\r\n-\r\n-    private boolean modMAttrTemplates;\r\n-\r\n-    private List<String> mAttrTemplates = new ArrayList<String>();\r\n-\r\n-    private boolean modMDerAttrTemplates;\r\n-\r\n-    private List<String> mDerAttrTemplates = new ArrayList<String>();\r\n-\r\n-    private boolean modMVirAttrTemplates;\r\n-\r\n-    private List<String> mVirAttrTemplates = new ArrayList<String>();\r\n-\r\n-    private ReferenceMod passwordPolicy;\r\n-\r\n-    private ReferenceMod accountPolicy;\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(final String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public ReferenceMod getUserOwner() {\r\n-        return userOwner;\r\n-    }\r\n-\r\n-    public void setUserOwner(ReferenceMod userOwner) {\r\n-        this.userOwner = userOwner;\r\n-    }\r\n-\r\n-    public ReferenceMod getRoleOwner() {\r\n-        return roleOwner;\r\n-    }\r\n-\r\n-    public void setRoleOwner(ReferenceMod roleOwner) {\r\n-        this.roleOwner = roleOwner;\r\n-    }\r\n-\r\n-    public Boolean getInheritOwner() {\r\n-        return inheritOwner;\r\n-    }\r\n-\r\n-    public void setInheritOwner(Boolean inheritOwner) {\r\n-        this.inheritOwner = inheritOwner;\r\n-    }\r\n-\r\n-    public Boolean getInheritTemplates() {\r\n-        return inheritTemplates;\r\n-    }\r\n-\r\n-    public void setInheritTemplates(final Boolean inheritTemplates) {\r\n-        this.inheritTemplates = inheritTemplates;\r\n-    }\r\n-\r\n-    public Boolean getInheritAttrs() {\r\n-        return inheritAttrs;\r\n-    }\r\n-\r\n-    public void setInheritAttributes(final Boolean inheritAttrs) {\r\n-        this.inheritAttrs = inheritAttrs;\r\n-    }\r\n-\r\n-    public Boolean getInheritDerAttrs() {\r\n-        return inheritDerAttrs;\r\n-    }\r\n-\r\n-    public void setInheritDerAttrs(final Boolean inheritDerAttrs) {\r\n-        this.inheritDerAttrs = inheritDerAttrs;\r\n-    }\r\n-\r\n-    public Boolean getInheritVirAttrs() {\r\n-        return inheritVirAttrs;\r\n-    }\r\n-\r\n-    public void setInheritVirAttrs(final Boolean inheritVirAttrs) {\r\n-        this.inheritVirAttrs = inheritVirAttrs;\r\n-    }\r\n-\r\n-    public boolean isModEntitlements() {\r\n-        return modEntitlements;\r\n-    }\r\n-\r\n-    public void setModEntitlements(final boolean modEntitlements) {\r\n-        this.modEntitlements = modEntitlements;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"entitlements\")\r\n-    @XmlElement(name = \"entitlement\")\r\n-    @JsonProperty(\"entitlements\")\r\n-    public List<String> getEntitlements() {\r\n-        return entitlements;\r\n-    }\r\n-\r\n-    public boolean isModRAttrTemplates() {\r\n-        return modRAttrTemplates;\r\n-    }\r\n-\r\n-    public void setModRAttrTemplates(final boolean modRAttrTemplates) {\r\n-        this.modRAttrTemplates = modRAttrTemplates;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"rAttrTemplates\")\r\n-    @XmlElement(name = \"rAttrTemplate\")\r\n-    @JsonProperty(\"rAttrTemplates\")\r\n-    public List<String> getRAttrTemplates() {\r\n-        return rAttrTemplates;\r\n-    }\r\n-\r\n-    public boolean isModRDerAttrTemplates() {\r\n-        return modRDerAttrTemplates;\r\n-    }\r\n-\r\n-    public void setModRDerAttrTemplates(final boolean modRDerAttrTemplates) {\r\n-        this.modRDerAttrTemplates = modRDerAttrTemplates;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"rDerAttrTemplates\")\r\n-    @XmlElement(name = \"rDerAttrTemplate\")\r\n-    @JsonProperty(\"rDerAttrTemplates\")\r\n-    public List<String> getRDerAttrTemplates() {\r\n-        return rDerAttrTemplates;\r\n-    }\r\n-\r\n-    public boolean isModRVirAttrTemplates() {\r\n-        return modRVirAttrTemplates;\r\n-    }\r\n-\r\n-    public void setModRVirAttrTemplates(final boolean modRVirAttrTemplates) {\r\n-        this.modRVirAttrTemplates = modRVirAttrTemplates;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"rVirAttrTemplates\")\r\n-    @XmlElement(name = \"rVirAttrTemplate\")\r\n-    @JsonProperty(\"rVirAttrTemplates\")\r\n-    public List<String> getRVirAttrTemplates() {\r\n-        return rVirAttrTemplates;\r\n-    }\r\n-\r\n-    public boolean isModMAttrTemplates() {\r\n-        return modMAttrTemplates;\r\n-    }\r\n-\r\n-    public void setModMAttrTemplates(final boolean modMAttrTemplates) {\r\n-        this.modMAttrTemplates = modMAttrTemplates;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"mAttrTemplates\")\r\n-    @XmlElement(name = \"mAttrTemplate\")\r\n-    @JsonProperty(\"mAttrTemplates\")\r\n-    public List<String> getMAttrTemplates() {\r\n-        return mAttrTemplates;\r\n-    }\r\n-\r\n-    public boolean isModMDerAttrTemplates() {\r\n-        return modMDerAttrTemplates;\r\n-    }\r\n-\r\n-    public void setModMDerAttrTemplates(final boolean modMDerAttrTemplates) {\r\n-        this.modMDerAttrTemplates = modMDerAttrTemplates;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"mDerAttrTemplates\")\r\n-    @XmlElement(name = \"mDerAttrTemplate\")\r\n-    @JsonProperty(\"mDerAttrTemplates\")\r\n-    public List<String> getMDerAttrTemplates() {\r\n-        return mDerAttrTemplates;\r\n-    }\r\n-\r\n-    public boolean isModMVirAttrTemplates() {\r\n-        return modMVirAttrTemplates;\r\n-    }\r\n-\r\n-    public void setModMVirAttrTemplates(final boolean modMVirAttrTemplates) {\r\n-        this.modMVirAttrTemplates = modMVirAttrTemplates;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"mVirAttrTemplates\")\r\n-    @XmlElement(name = \"mVirAttrTemplate\")\r\n-    @JsonProperty(\"mVirAttrTemplates\")\r\n-    public List<String> getMVirAttrTemplates() {\r\n-        return mVirAttrTemplates;\r\n-    }\r\n-\r\n-    public ReferenceMod getPasswordPolicy() {\r\n-        return passwordPolicy;\r\n-    }\r\n-\r\n-    public void setPasswordPolicy(final ReferenceMod passwordPolicy) {\r\n-        this.passwordPolicy = passwordPolicy;\r\n-    }\r\n-\r\n-    public Boolean getInheritPasswordPolicy() {\r\n-        return inheritPasswordPolicy;\r\n-    }\r\n-\r\n-    public void setInheritPasswordPolicy(final Boolean inheritPasswordPolicy) {\r\n-        this.inheritPasswordPolicy = inheritPasswordPolicy;\r\n-    }\r\n-\r\n-    public ReferenceMod getAccountPolicy() {\r\n-        return accountPolicy;\r\n-    }\r\n-\r\n-    public void setAccountPolicy(final ReferenceMod accountPolicy) {\r\n-        this.accountPolicy = accountPolicy;\r\n-    }\r\n-\r\n-    public Boolean getInheritAccountPolicy() {\r\n-        return inheritAccountPolicy;\r\n-    }\r\n-\r\n-    public void setInheritAccountPolicy(final Boolean inheritAccountPolicy) {\r\n-        this.inheritAccountPolicy = inheritAccountPolicy;\r\n-    }\r\n-\r\n-    @JsonIgnore\r\n-    @Override\r\n-    public boolean isEmpty() {\r\n-        return super.isEmpty() && name == null && userOwner == null && roleOwner == null\r\n-                && inheritTemplates == null && inheritOwner == null\r\n-                && inheritAccountPolicy == null && inheritPasswordPolicy == null\r\n-                && inheritAttrs == null && inheritDerAttrs == null && inheritVirAttrs == null\r\n-                && accountPolicy == null && passwordPolicy == null && entitlements.isEmpty()\r\n-                && rAttrTemplates.isEmpty() && rDerAttrTemplates.isEmpty() && rVirAttrTemplates.isEmpty()\r\n-                && mAttrTemplates.isEmpty() && mDerAttrTemplates.isEmpty() && mVirAttrTemplates.isEmpty();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.mod;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"roleMod\")\n+@XmlType\n+public class RoleMod extends AbstractSubjectMod {\n+\n+    private static final long serialVersionUID = 7455805264680210747L;\n+\n+    private String name;\n+\n+    private ReferenceMod userOwner;\n+\n+    private ReferenceMod roleOwner;\n+\n+    private Boolean inheritOwner;\n+\n+    private Boolean inheritTemplates;\n+\n+    private Boolean inheritAttrs;\n+\n+    private Boolean inheritDerAttrs;\n+\n+    private Boolean inheritVirAttrs;\n+\n+    private Boolean inheritAccountPolicy;\n+\n+    private Boolean inheritPasswordPolicy;\n+\n+    private boolean modEntitlements;\n+\n+    private List<String> entitlements = new ArrayList<String>();\n+\n+    private boolean modRAttrTemplates;\n+\n+    private List<String> rAttrTemplates = new ArrayList<String>();\n+\n+    private boolean modRDerAttrTemplates;\n+\n+    private List<String> rDerAttrTemplates = new ArrayList<String>();\n+\n+    private boolean modRVirAttrTemplates;\n+\n+    private List<String> rVirAttrTemplates = new ArrayList<String>();\n+\n+    private boolean modMAttrTemplates;\n+\n+    private List<String> mAttrTemplates = new ArrayList<String>();\n+\n+    private boolean modMDerAttrTemplates;\n+\n+    private List<String> mDerAttrTemplates = new ArrayList<String>();\n+\n+    private boolean modMVirAttrTemplates;\n+\n+    private List<String> mVirAttrTemplates = new ArrayList<String>();\n+\n+    private ReferenceMod passwordPolicy;\n+\n+    private ReferenceMod accountPolicy;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    public ReferenceMod getUserOwner() {\n+        return userOwner;\n+    }\n+\n+    public void setUserOwner(ReferenceMod userOwner) {\n+        this.userOwner = userOwner;\n+    }\n+\n+    public ReferenceMod getRoleOwner() {\n+        return roleOwner;\n+    }\n+\n+    public void setRoleOwner(ReferenceMod roleOwner) {\n+        this.roleOwner = roleOwner;\n+    }\n+\n+    public Boolean getInheritOwner() {\n+        return inheritOwner;\n+    }\n+\n+    public void setInheritOwner(Boolean inheritOwner) {\n+        this.inheritOwner = inheritOwner;\n+    }\n+\n+    public Boolean getInheritTemplates() {\n+        return inheritTemplates;\n+    }\n+\n+    public void setInheritTemplates(final Boolean inheritTemplates) {\n+        this.inheritTemplates = inheritTemplates;\n+    }\n+\n+    public Boolean getInheritAttrs() {\n+        return inheritAttrs;\n+    }\n+\n+    public void setInheritAttributes(final Boolean inheritAttrs) {\n+        this.inheritAttrs = inheritAttrs;\n+    }\n+\n+    public Boolean getInheritDerAttrs() {\n+        return inheritDerAttrs;\n+    }\n+\n+    public void setInheritDerAttrs(final Boolean inheritDerAttrs) {\n+        this.inheritDerAttrs = inheritDerAttrs;\n+    }\n+\n+    public Boolean getInheritVirAttrs() {\n+        return inheritVirAttrs;\n+    }\n+\n+    public void setInheritVirAttrs(final Boolean inheritVirAttrs) {\n+        this.inheritVirAttrs = inheritVirAttrs;\n+    }\n+\n+    public boolean isModEntitlements() {\n+        return modEntitlements;\n+    }\n+\n+    public void setModEntitlements(final boolean modEntitlements) {\n+        this.modEntitlements = modEntitlements;\n+    }\n+\n+    @XmlElementWrapper(name = \"entitlements\")\n+    @XmlElement(name = \"entitlement\")\n+    @JsonProperty(\"entitlements\")\n+    public List<String> getEntitlements() {\n+        return entitlements;\n+    }\n+\n+    public boolean isModRAttrTemplates() {\n+        return modRAttrTemplates;\n+    }\n+\n+    public void setModRAttrTemplates(final boolean modRAttrTemplates) {\n+        this.modRAttrTemplates = modRAttrTemplates;\n+    }\n+\n+    @XmlElementWrapper(name = \"rAttrTemplates\")\n+    @XmlElement(name = \"rAttrTemplate\")\n+    @JsonProperty(\"rAttrTemplates\")\n+    public List<String> getRAttrTemplates() {\n+        return rAttrTemplates;\n+    }\n+\n+    public boolean isModRDerAttrTemplates() {\n+        return modRDerAttrTemplates;\n+    }\n+\n+    public void setModRDerAttrTemplates(final boolean modRDerAttrTemplates) {\n+        this.modRDerAttrTemplates = modRDerAttrTemplates;\n+    }\n+\n+    @XmlElementWrapper(name = \"rDerAttrTemplates\")\n+    @XmlElement(name = \"rDerAttrTemplate\")\n+    @JsonProperty(\"rDerAttrTemplates\")\n+    public List<String> getRDerAttrTemplates() {\n+        return rDerAttrTemplates;\n+    }\n+\n+    public boolean isModRVirAttrTemplates() {\n+        return modRVirAttrTemplates;\n+    }\n+\n+    public void setModRVirAttrTemplates(final boolean modRVirAttrTemplates) {\n+        this.modRVirAttrTemplates = modRVirAttrTemplates;\n+    }\n+\n+    @XmlElementWrapper(name = \"rVirAttrTemplates\")\n+    @XmlElement(name = \"rVirAttrTemplate\")\n+    @JsonProperty(\"rVirAttrTemplates\")\n+    public List<String> getRVirAttrTemplates() {\n+        return rVirAttrTemplates;\n+    }\n+\n+    public boolean isModMAttrTemplates() {\n+        return modMAttrTemplates;\n+    }\n+\n+    public void setModMAttrTemplates(final boolean modMAttrTemplates) {\n+        this.modMAttrTemplates = modMAttrTemplates;\n+    }\n+\n+    @XmlElementWrapper(name = \"mAttrTemplates\")\n+    @XmlElement(name = \"mAttrTemplate\")\n+    @JsonProperty(\"mAttrTemplates\")\n+    public List<String> getMAttrTemplates() {\n+        return mAttrTemplates;\n+    }\n+\n+    public boolean isModMDerAttrTemplates() {\n+        return modMDerAttrTemplates;\n+    }\n+\n+    public void setModMDerAttrTemplates(final boolean modMDerAttrTemplates) {\n+        this.modMDerAttrTemplates = modMDerAttrTemplates;\n+    }\n+\n+    @XmlElementWrapper(name = \"mDerAttrTemplates\")\n+    @XmlElement(name = \"mDerAttrTemplate\")\n+    @JsonProperty(\"mDerAttrTemplates\")\n+    public List<String> getMDerAttrTemplates() {\n+        return mDerAttrTemplates;\n+    }\n+\n+    public boolean isModMVirAttrTemplates() {\n+        return modMVirAttrTemplates;\n+    }\n+\n+    public void setModMVirAttrTemplates(final boolean modMVirAttrTemplates) {\n+        this.modMVirAttrTemplates = modMVirAttrTemplates;\n+    }\n+\n+    @XmlElementWrapper(name = \"mVirAttrTemplates\")\n+    @XmlElement(name = \"mVirAttrTemplate\")\n+    @JsonProperty(\"mVirAttrTemplates\")\n+    public List<String> getMVirAttrTemplates() {\n+        return mVirAttrTemplates;\n+    }\n+\n+    public ReferenceMod getPasswordPolicy() {\n+        return passwordPolicy;\n+    }\n+\n+    public void setPasswordPolicy(final ReferenceMod passwordPolicy) {\n+        this.passwordPolicy = passwordPolicy;\n+    }\n+\n+    public Boolean getInheritPasswordPolicy() {\n+        return inheritPasswordPolicy;\n+    }\n+\n+    public void setInheritPasswordPolicy(final Boolean inheritPasswordPolicy) {\n+        this.inheritPasswordPolicy = inheritPasswordPolicy;\n+    }\n+\n+    public ReferenceMod getAccountPolicy() {\n+        return accountPolicy;\n+    }\n+\n+    public void setAccountPolicy(final ReferenceMod accountPolicy) {\n+        this.accountPolicy = accountPolicy;\n+    }\n+\n+    public Boolean getInheritAccountPolicy() {\n+        return inheritAccountPolicy;\n+    }\n+\n+    public void setInheritAccountPolicy(final Boolean inheritAccountPolicy) {\n+        this.inheritAccountPolicy = inheritAccountPolicy;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public boolean isEmpty() {\n+        return super.isEmpty() && name == null && userOwner == null && roleOwner == null\n+                && inheritTemplates == null && inheritOwner == null\n+                && inheritAccountPolicy == null && inheritPasswordPolicy == null\n+                && inheritAttrs == null && inheritDerAttrs == null && inheritVirAttrs == null\n+                && accountPolicy == null && passwordPolicy == null && entitlements.isEmpty()\n+                && rAttrTemplates.isEmpty() && rDerAttrTemplates.isEmpty() && rVirAttrTemplates.isEmpty()\n+                && mAttrTemplates.isEmpty() && mDerAttrTemplates.isEmpty() && mVirAttrTemplates.isEmpty();\n+    }\n+}"},{"sha":"15f566f004a90766f695658c939c3efe2116e72d","filename":"common/src/main/java/org/apache/syncope/common/mod/UserMod.java","status":"modified","additions":101,"deletions":101,"changes":202,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FUserMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FUserMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FUserMod.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,101 +1,101 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.mod;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonIgnore;\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.HashSet;\r\n-import java.util.Set;\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-@XmlRootElement(name = \"userMod\")\r\n-@XmlType\r\n-public class UserMod extends AbstractSubjectMod {\r\n-\r\n-    private static final long serialVersionUID = 3081848906558106204L;\r\n-\r\n-    private String password;\r\n-\r\n-    private String username;\r\n-\r\n-    private final Set<MembershipMod> membershipsToAdd;\r\n-\r\n-    private final Set<Long> membershipsToRemove;\r\n-\r\n-    private StatusMod pwdPropRequest;\r\n-\r\n-    public UserMod() {\r\n-        super();\r\n-\r\n-        membershipsToAdd = new HashSet<MembershipMod>();\r\n-        membershipsToRemove = new HashSet<Long>();\r\n-    }\r\n-\r\n-    public String getUsername() {\r\n-        return username;\r\n-    }\r\n-\r\n-    public void setUsername(final String username) {\r\n-        this.username = username;\r\n-    }\r\n-\r\n-    public String getPassword() {\r\n-        return password;\r\n-    }\r\n-\r\n-    public void setPassword(final String password) {\r\n-        this.password = password;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"membershipsToAdd\")\r\n-    @XmlElement(name = \"membership\")\r\n-    @JsonProperty(\"membershipsToAdd\")\r\n-    public Set<MembershipMod> getMembershipsToAdd() {\r\n-        return membershipsToAdd;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"membershipsToRemove\")\r\n-    @XmlElement(name = \"membership\")\r\n-    @JsonProperty(\"membershipsToRemove\")\r\n-    public Set<Long> getMembershipsToRemove() {\r\n-        return membershipsToRemove;\r\n-    }\r\n-\r\n-    public StatusMod getPwdPropRequest() {\r\n-        return pwdPropRequest;\r\n-    }\r\n-\r\n-    public void setPwdPropRequest(final StatusMod pwdPropRequest) {\r\n-        this.pwdPropRequest = pwdPropRequest;\r\n-    }\r\n-\r\n-    @JsonIgnore\r\n-    @Override\r\n-    public boolean isEmpty() {\r\n-        return super.isEmpty()\r\n-                && password == null\r\n-                && username == null\r\n-                && membershipsToAdd.isEmpty()\r\n-                && membershipsToRemove.isEmpty()\r\n-                && pwdPropRequest == null;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.mod;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"userMod\")\n+@XmlType\n+public class UserMod extends AbstractSubjectMod {\n+\n+    private static final long serialVersionUID = 3081848906558106204L;\n+\n+    private String password;\n+\n+    private String username;\n+\n+    private final Set<MembershipMod> membershipsToAdd;\n+\n+    private final Set<Long> membershipsToRemove;\n+\n+    private StatusMod pwdPropRequest;\n+\n+    public UserMod() {\n+        super();\n+\n+        membershipsToAdd = new HashSet<MembershipMod>();\n+        membershipsToRemove = new HashSet<Long>();\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(final String username) {\n+        this.username = username;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(final String password) {\n+        this.password = password;\n+    }\n+\n+    @XmlElementWrapper(name = \"membershipsToAdd\")\n+    @XmlElement(name = \"membership\")\n+    @JsonProperty(\"membershipsToAdd\")\n+    public Set<MembershipMod> getMembershipsToAdd() {\n+        return membershipsToAdd;\n+    }\n+\n+    @XmlElementWrapper(name = \"membershipsToRemove\")\n+    @XmlElement(name = \"membership\")\n+    @JsonProperty(\"membershipsToRemove\")\n+    public Set<Long> getMembershipsToRemove() {\n+        return membershipsToRemove;\n+    }\n+\n+    public StatusMod getPwdPropRequest() {\n+        return pwdPropRequest;\n+    }\n+\n+    public void setPwdPropRequest(final StatusMod pwdPropRequest) {\n+        this.pwdPropRequest = pwdPropRequest;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public boolean isEmpty() {\n+        return super.isEmpty()\n+                && password == null\n+                && username == null\n+                && membershipsToAdd.isEmpty()\n+                && membershipsToRemove.isEmpty()\n+                && pwdPropRequest == null;\n+    }\n+}"},{"sha":"6563c71fc276cc7d9c28b92220ee457fd1af4896","filename":"common/src/main/java/org/apache/syncope/common/report/AbstractReportletConf.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FAbstractReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FAbstractReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FAbstractReportletConf.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,51 +1,51 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.report;\r\n-\r\n-import javax.xml.bind.annotation.XmlSeeAlso;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-\r\n-@XmlType\r\n-@XmlSeeAlso({ StaticReportletConf.class, UserReportletConf.class, RoleReportletConf.class })\r\n-public abstract class AbstractReportletConf extends AbstractBaseBean implements ReportletConf {\r\n-\r\n-    private static final long serialVersionUID = -6130008602014516608L;\r\n-\r\n-    private String name;\r\n-\r\n-    public AbstractReportletConf() {\r\n-        this(\"\");\r\n-        setName(getClass().getName());\r\n-    }\r\n-\r\n-    public AbstractReportletConf(final String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    @Override\r\n-    public final String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public final void setName(final String name) {\r\n-        this.name = name;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.report;\n+\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+\n+@XmlType\n+@XmlSeeAlso({ StaticReportletConf.class, UserReportletConf.class, RoleReportletConf.class })\n+public abstract class AbstractReportletConf extends AbstractBaseBean implements ReportletConf {\n+\n+    private static final long serialVersionUID = -6130008602014516608L;\n+\n+    private String name;\n+\n+    public AbstractReportletConf() {\n+        this(\"\");\n+        setName(getClass().getName());\n+    }\n+\n+    public AbstractReportletConf(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public final String getName() {\n+        return name;\n+    }\n+\n+    public final void setName(final String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"970ae8746fc1254e928261ddc93801b56621fb14","filename":"common/src/main/java/org/apache/syncope/common/report/ReportletConf.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FReportletConf.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,32 +1,32 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.report;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\r\n-\r\n-@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\r\n-public interface ReportletConf {\r\n-\r\n-    /**\r\n-     * Give name of related reportlet instance.\r\n-     *\r\n-     * @return name of this reportlet instance\r\n-     */\r\n-    String getName();\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.report;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n+public interface ReportletConf {\n+\n+    /**\n+     * Give name of related reportlet instance.\n+     *\n+     * @return name of this reportlet instance\n+     */\n+    String getName();\n+}"},{"sha":"482b93911d20bfe9db62e7d8fb66ebce540a29d0","filename":"common/src/main/java/org/apache/syncope/common/report/StaticReportletConf.java","status":"modified","additions":109,"deletions":109,"changes":218,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FStaticReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FStaticReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FStaticReportletConf.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,109 +1,109 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.report;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.Date;\r\n-import java.util.List;\r\n-\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.types.TraceLevel;\r\n-\r\n-@XmlRootElement(name = \"staticReportletConf\")\r\n-@XmlType\r\n-public class StaticReportletConf extends AbstractReportletConf {\r\n-\r\n-    private static final long serialVersionUID = -4814950086361753689L;\r\n-\r\n-    private String stringField;\r\n-\r\n-    private Long longField;\r\n-\r\n-    private Double doubleField;\r\n-\r\n-    private Date dateField;\r\n-\r\n-    private TraceLevel traceLevel;\r\n-\r\n-    private final List<String> listField = new ArrayList<String>();\r\n-\r\n-    public StaticReportletConf() {\r\n-        super();\r\n-    }\r\n-\r\n-    public StaticReportletConf(final String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public Date getDateField() {\r\n-        return dateField == null\r\n-                ? null\r\n-                : new Date(dateField.getTime());\r\n-    }\r\n-\r\n-    public void setDateField(Date dateField) {\r\n-        this.dateField = dateField == null\r\n-                ? null\r\n-                : new Date(dateField.getTime());\r\n-    }\r\n-\r\n-    public Double getDoubleField() {\r\n-        return doubleField;\r\n-    }\r\n-\r\n-    public void setDoubleField(Double doubleField) {\r\n-        this.doubleField = doubleField;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"listField\")\r\n-    @XmlElement(name = \"field\")\r\n-    @JsonProperty(\"listField\")\r\n-    public List<String> getListField() {\r\n-        return listField;\r\n-    }\r\n-\r\n-    public Long getLongField() {\r\n-        return longField;\r\n-    }\r\n-\r\n-    public void setLongField(Long longField) {\r\n-        this.longField = longField;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-\r\n-    public TraceLevel getTraceLevel() {\r\n-        return traceLevel;\r\n-    }\r\n-\r\n-    public void setTraceLevel(TraceLevel traceLevel) {\r\n-        this.traceLevel = traceLevel;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.report;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.types.TraceLevel;\n+\n+@XmlRootElement(name = \"staticReportletConf\")\n+@XmlType\n+public class StaticReportletConf extends AbstractReportletConf {\n+\n+    private static final long serialVersionUID = -4814950086361753689L;\n+\n+    private String stringField;\n+\n+    private Long longField;\n+\n+    private Double doubleField;\n+\n+    private Date dateField;\n+\n+    private TraceLevel traceLevel;\n+\n+    private final List<String> listField = new ArrayList<String>();\n+\n+    public StaticReportletConf() {\n+        super();\n+    }\n+\n+    public StaticReportletConf(final String name) {\n+        super(name);\n+    }\n+\n+    public Date getDateField() {\n+        return dateField == null\n+                ? null\n+                : new Date(dateField.getTime());\n+    }\n+\n+    public void setDateField(Date dateField) {\n+        this.dateField = dateField == null\n+                ? null\n+                : new Date(dateField.getTime());\n+    }\n+\n+    public Double getDoubleField() {\n+        return doubleField;\n+    }\n+\n+    public void setDoubleField(Double doubleField) {\n+        this.doubleField = doubleField;\n+    }\n+\n+    @XmlElementWrapper(name = \"listField\")\n+    @XmlElement(name = \"field\")\n+    @JsonProperty(\"listField\")\n+    public List<String> getListField() {\n+        return listField;\n+    }\n+\n+    public Long getLongField() {\n+        return longField;\n+    }\n+\n+    public void setLongField(Long longField) {\n+        this.longField = longField;\n+    }\n+\n+    public String getStringField() {\n+        return stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+\n+    public TraceLevel getTraceLevel() {\n+        return traceLevel;\n+    }\n+\n+    public void setTraceLevel(TraceLevel traceLevel) {\n+        this.traceLevel = traceLevel;\n+    }\n+}"},{"sha":"cd1cd3e652621124bfebcf199a5d17e3f7cc288b","filename":"common/src/main/java/org/apache/syncope/common/report/UserReportletConf.java","status":"modified","additions":115,"deletions":115,"changes":230,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FUserReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FUserReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FUserReportletConf.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,115 +1,115 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.report;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.annotation.FormAttributeField;\r\n-import org.apache.syncope.common.types.IntMappingType;\r\n-\r\n-@XmlRootElement(name = \"userReportletConf\")\r\n-@XmlType\r\n-public class UserReportletConf extends AbstractReportletConf {\r\n-\r\n-    @XmlEnum\r\n-    @XmlType(name = \"userReportletConfFeature\")\r\n-    public enum Feature {\r\n-\r\n-        id,\r\n-        username,\r\n-        workflowId,\r\n-        status,\r\n-        creationDate,\r\n-        lastLoginDate,\r\n-        changePwdDate,\r\n-        passwordHistorySize,\r\n-        failedLoginCount,\r\n-        memberships,\r\n-        resources\r\n-\r\n-    }\r\n-\r\n-    private static final long serialVersionUID = 6602717600064602764L;\r\n-\r\n-    @FormAttributeField(userSearch = true)\r\n-    private String matchingCond;\r\n-\r\n-    @FormAttributeField(schema = IntMappingType.UserSchema)\r\n-    private final List<String> attrs = new ArrayList<String>();\r\n-\r\n-    @FormAttributeField(schema = IntMappingType.UserDerivedSchema)\r\n-    private final List<String> derAttrs = new ArrayList<String>();\r\n-\r\n-    @FormAttributeField(schema = IntMappingType.UserVirtualSchema)\r\n-    private final List<String> virAttrs = new ArrayList<String>();\r\n-\r\n-    private final List<Feature> features = new ArrayList<Feature>();\r\n-\r\n-    public UserReportletConf() {\r\n-        super();\r\n-    }\r\n-\r\n-    public UserReportletConf(final String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"attributes\")\r\n-    @XmlElement(name = \"attribute\")\r\n-    @JsonProperty(\"attributes\")\r\n-    public List<String> getAttrs() {\r\n-        return attrs;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"derivedAttributes\")\r\n-    @XmlElement(name = \"attribute\")\r\n-    @JsonProperty(\"derivedAttributes\")\r\n-    public List<String> getDerAttrs() {\r\n-        return derAttrs;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"virtualAttributes\")\r\n-    @XmlElement(name = \"attribute\")\r\n-    @JsonProperty(\"virtualAttributes\")\r\n-    public List<String> getVirAttrs() {\r\n-        return virAttrs;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"features\")\r\n-    @XmlElement(name = \"feature\")\r\n-    @JsonProperty(\"features\")\r\n-    public List<Feature> getFeatures() {\r\n-        return features;\r\n-    }\r\n-\r\n-    public String getMatchingCond() {\r\n-        return matchingCond;\r\n-    }\r\n-\r\n-    public void setMatchingCond(final String matchingCond) {\r\n-        this.matchingCond = matchingCond;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.report;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlEnum;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.annotation.FormAttributeField;\n+import org.apache.syncope.common.types.IntMappingType;\n+\n+@XmlRootElement(name = \"userReportletConf\")\n+@XmlType\n+public class UserReportletConf extends AbstractReportletConf {\n+\n+    @XmlEnum\n+    @XmlType(name = \"userReportletConfFeature\")\n+    public enum Feature {\n+\n+        id,\n+        username,\n+        workflowId,\n+        status,\n+        creationDate,\n+        lastLoginDate,\n+        changePwdDate,\n+        passwordHistorySize,\n+        failedLoginCount,\n+        memberships,\n+        resources\n+\n+    }\n+\n+    private static final long serialVersionUID = 6602717600064602764L;\n+\n+    @FormAttributeField(userSearch = true)\n+    private String matchingCond;\n+\n+    @FormAttributeField(schema = IntMappingType.UserSchema)\n+    private final List<String> attrs = new ArrayList<String>();\n+\n+    @FormAttributeField(schema = IntMappingType.UserDerivedSchema)\n+    private final List<String> derAttrs = new ArrayList<String>();\n+\n+    @FormAttributeField(schema = IntMappingType.UserVirtualSchema)\n+    private final List<String> virAttrs = new ArrayList<String>();\n+\n+    private final List<Feature> features = new ArrayList<Feature>();\n+\n+    public UserReportletConf() {\n+        super();\n+    }\n+\n+    public UserReportletConf(final String name) {\n+        super(name);\n+    }\n+\n+    @XmlElementWrapper(name = \"attributes\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"attributes\")\n+    public List<String> getAttrs() {\n+        return attrs;\n+    }\n+\n+    @XmlElementWrapper(name = \"derivedAttributes\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"derivedAttributes\")\n+    public List<String> getDerAttrs() {\n+        return derAttrs;\n+    }\n+\n+    @XmlElementWrapper(name = \"virtualAttributes\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"virtualAttributes\")\n+    public List<String> getVirAttrs() {\n+        return virAttrs;\n+    }\n+\n+    @XmlElementWrapper(name = \"features\")\n+    @XmlElement(name = \"feature\")\n+    @JsonProperty(\"features\")\n+    public List<Feature> getFeatures() {\n+        return features;\n+    }\n+\n+    public String getMatchingCond() {\n+        return matchingCond;\n+    }\n+\n+    public void setMatchingCond(final String matchingCond) {\n+        this.matchingCond = matchingCond;\n+    }\n+}"},{"sha":"c678bb7b5a4541016969eef2eceba2240fcbb5c5","filename":"common/src/main/java/org/apache/syncope/common/services/ConfigurationService.java","status":"modified","additions":112,"deletions":112,"changes":224,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConfigurationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConfigurationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConfigurationService.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,112 +1,112 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.services;\r\n-\r\n-import java.util.List;\r\n-import javax.validation.constraints.NotNull;\r\n-import javax.ws.rs.Consumes;\r\n-import javax.ws.rs.DELETE;\r\n-import javax.ws.rs.GET;\r\n-import javax.ws.rs.PUT;\r\n-import javax.ws.rs.Path;\r\n-import javax.ws.rs.PathParam;\r\n-import javax.ws.rs.Produces;\r\n-import javax.ws.rs.core.MediaType;\r\n-import javax.ws.rs.core.Response;\r\n-import org.apache.syncope.common.to.AttributeTO;\r\n-import org.apache.syncope.common.to.ConfTO;\r\n-import org.apache.syncope.common.wrap.MailTemplate;\r\n-import org.apache.syncope.common.wrap.Validator;\r\n-\r\n-/**\r\n- * REST operations for configuration.\r\n- */\r\n-@Path(\"configurations\")\r\n-public interface ConfigurationService extends JAXRSService {\r\n-\r\n-    /**\r\n-     * Exports internal storage content as downloadable XML file.\r\n-     *\r\n-     * @return internal storage content as downloadable XML file\r\n-     */\r\n-    @GET\r\n-    @Path(\"stream\")\r\n-    Response export();\r\n-\r\n-    /**\r\n-     * Returns a list of known mail-template names.\r\n-     *\r\n-     * @return a list of known mail-template names\r\n-     */\r\n-    @GET\r\n-    @Path(\"mailTemplates\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<MailTemplate> getMailTemplates();\r\n-\r\n-    /**\r\n-     * Returns a list of known validator names.\r\n-     *\r\n-     * @return a list of known validator names\r\n-     */\r\n-    @GET\r\n-    @Path(\"validators\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<Validator> getValidators();\r\n-\r\n-    /**\r\n-     * Returns all configuration parameters.\r\n-     *\r\n-     * @return all configuration parameters\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    ConfTO list();\r\n-\r\n-    /**\r\n-     * Returns configuration parameter with matching key.\r\n-     *\r\n-     * @param key identifier of configuration to be read\r\n-     * @return configuration parameter with matching key\r\n-     */\r\n-    @GET\r\n-    @Path(\"{key}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    AttributeTO read(@NotNull @PathParam(\"key\") String key);\r\n-\r\n-    /**\r\n-     * Creates / updates the configuration parameter with the given key.\r\n-     *\r\n-     * @param key parameter key\r\n-     * @param value parameter value\r\n-     */\r\n-    @PUT\r\n-    @Path(\"{key}\")\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    void set(@NotNull @PathParam(\"key\") String key, @NotNull AttributeTO value);\r\n-\r\n-    /**\r\n-     * Deletes the configuration parameter with matching key.\r\n-     *\r\n-     * @param key configuration parameter key\r\n-     */\r\n-    @DELETE\r\n-    @Path(\"{key}\")\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    void delete(@NotNull @PathParam(\"key\") String key);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.services;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.to.AttributeTO;\n+import org.apache.syncope.common.to.ConfTO;\n+import org.apache.syncope.common.wrap.MailTemplate;\n+import org.apache.syncope.common.wrap.Validator;\n+\n+/**\n+ * REST operations for configuration.\n+ */\n+@Path(\"configurations\")\n+public interface ConfigurationService extends JAXRSService {\n+\n+    /**\n+     * Exports internal storage content as downloadable XML file.\n+     *\n+     * @return internal storage content as downloadable XML file\n+     */\n+    @GET\n+    @Path(\"stream\")\n+    Response export();\n+\n+    /**\n+     * Returns a list of known mail-template names.\n+     *\n+     * @return a list of known mail-template names\n+     */\n+    @GET\n+    @Path(\"mailTemplates\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<MailTemplate> getMailTemplates();\n+\n+    /**\n+     * Returns a list of known validator names.\n+     *\n+     * @return a list of known validator names\n+     */\n+    @GET\n+    @Path(\"validators\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<Validator> getValidators();\n+\n+    /**\n+     * Returns all configuration parameters.\n+     *\n+     * @return all configuration parameters\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    ConfTO list();\n+\n+    /**\n+     * Returns configuration parameter with matching key.\n+     *\n+     * @param key identifier of configuration to be read\n+     * @return configuration parameter with matching key\n+     */\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    AttributeTO read(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Creates / updates the configuration parameter with the given key.\n+     *\n+     * @param key parameter key\n+     * @param value parameter value\n+     */\n+    @PUT\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void set(@NotNull @PathParam(\"key\") String key, @NotNull AttributeTO value);\n+\n+    /**\n+     * Deletes the configuration parameter with matching key.\n+     *\n+     * @param key configuration parameter key\n+     */\n+    @DELETE\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void delete(@NotNull @PathParam(\"key\") String key);\n+}"},{"sha":"efd0268a0b2c2ec9991d71f510ff1010f2eeadea","filename":"common/src/main/java/org/apache/syncope/common/services/ConnectorService.java","status":"modified","additions":202,"deletions":202,"changes":404,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConnectorService.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,202 +1,202 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.services;\r\n-\r\n-import java.util.List;\r\n-import javax.validation.constraints.NotNull;\r\n-import javax.ws.rs.Consumes;\r\n-import javax.ws.rs.DELETE;\r\n-import javax.ws.rs.DefaultValue;\r\n-import javax.ws.rs.GET;\r\n-import javax.ws.rs.POST;\r\n-import javax.ws.rs.PUT;\r\n-import javax.ws.rs.Path;\r\n-import javax.ws.rs.PathParam;\r\n-import javax.ws.rs.Produces;\r\n-import javax.ws.rs.QueryParam;\r\n-import javax.ws.rs.core.MediaType;\r\n-import javax.ws.rs.core.Response;\r\n-import org.apache.cxf.jaxrs.model.wadl.Description;\r\n-import org.apache.cxf.jaxrs.model.wadl.Descriptions;\r\n-import org.apache.cxf.jaxrs.model.wadl.DocTarget;\r\n-\r\n-import org.apache.syncope.common.reqres.BulkAction;\r\n-import org.apache.syncope.common.reqres.BulkActionResult;\r\n-import org.apache.syncope.common.to.ConnBundleTO;\r\n-import org.apache.syncope.common.to.ConnIdObjectClassTO;\r\n-import org.apache.syncope.common.to.ConnInstanceTO;\r\n-import org.apache.syncope.common.to.SchemaTO;\r\n-import org.apache.syncope.common.types.ConnConfProperty;\r\n-\r\n-/**\r\n- * REST operations for connector bundles and instances.\r\n- */\r\n-@Path(\"connectors\")\r\n-public interface ConnectorService extends JAXRSService {\r\n-\r\n-    /**\r\n-     * Returns available connector bundles with property keys in selected language.\r\n-     *\r\n-     * @param lang language to select property keys; default language is English\r\n-     * @return available connector bundles with property keys in selected language\r\n-     */\r\n-    @GET\r\n-    @Path(\"bundles\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<ConnBundleTO> getBundles(@QueryParam(\"lang\") String lang);\r\n-\r\n-    /**\r\n-     * Returns configuration for given connector instance.\r\n-     *\r\n-     * @param connInstanceId connector instance id to read configuration from\r\n-     * @return configuration for given connector instance\r\n-     */\r\n-    @GET\r\n-    @Path(\"{connInstanceId}/configuration\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<ConnConfProperty> getConfigurationProperties(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId);\r\n-\r\n-    /**\r\n-     * Returns schema names for connector bundle matching the given connector instance id.\r\n-     *\r\n-     * @param connInstanceId connector instance id to be used for schema lookup\r\n-     * @param connInstanceTO connector instance object to provide special configuration properties\r\n-     * @param includeSpecial if set to true, special schema names (like '__PASSWORD__') will be included;\r\n-     * default is false\r\n-     * @return schema names for connector bundle matching the given connector instance id\r\n-     */\r\n-    @POST\r\n-    @Path(\"{connInstanceId}/schemaNames\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<SchemaTO> getSchemaNames(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId,\r\n-            @NotNull ConnInstanceTO connInstanceTO,\r\n-            @QueryParam(\"includeSpecial\") @DefaultValue(\"false\") boolean includeSpecial);\r\n-\r\n-    /**\r\n-     * Returns supported object classes for connector bundle matching the given connector instance id.\r\n-     *\r\n-     * @param connInstanceId connector instance id to be used for schema lookup\r\n-     * @param connInstanceTO connector instance object to provide special configuration properties\r\n-     * @return supported object classes for connector bundle matching the given connector instance id\r\n-     */\r\n-    @POST\r\n-    @Path(\"{connInstanceId}/supportedObjectClasses\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<ConnIdObjectClassTO> getSupportedObjectClasses(\r\n-            @NotNull @PathParam(\"connInstanceId\") Long connInstanceId,\r\n-            @NotNull ConnInstanceTO connInstanceTO);\r\n-\r\n-    /**\r\n-     * Returns connector instance with matching id.\r\n-     *\r\n-     * @param connInstanceId connector instance id to be read\r\n-     * @return connector instance with matching id\r\n-     */\r\n-    @GET\r\n-    @Path(\"{connInstanceId}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    ConnInstanceTO read(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId);\r\n-\r\n-    /**\r\n-     * Returns connector instance for matching resource.\r\n-     *\r\n-     * @param resourceName resource name to be used for connector lookup\r\n-     * @return connector instance for matching resource\r\n-     */\r\n-    @GET\r\n-    @Path(\"byResource/{resourceName}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    ConnInstanceTO readByResource(@NotNull @PathParam(\"resourceName\") String resourceName);\r\n-\r\n-    /**\r\n-     * Returns a list of all connector instances with property keys in the matching language.\r\n-     *\r\n-     * @param lang language to select property keys, null for default (English).\r\n-     * An ISO 639 alpha-2 or alpha-3 language code, or a language subtag up to 8 characters in length.\r\n-     * @return list of all connector instances with property keys in the matching language\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<ConnInstanceTO> list(@QueryParam(\"lang\") String lang);\r\n-\r\n-    /**\r\n-     * Creates a new connector instance.\r\n-     *\r\n-     * @param connInstanceTO connector instance to be created\r\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created connector instance\r\n-     */\r\n-    @Descriptions({\r\n-        @Description(target = DocTarget.RESPONSE,\r\n-                value = \"Featuring <tt>Location</tt> header of created connector instance\")\r\n-    })\r\n-    @POST\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    Response create(@NotNull ConnInstanceTO connInstanceTO);\r\n-\r\n-    /**\r\n-     * Updates the connector instance matching the provided id.\r\n-     *\r\n-     * @param connInstanceId connector instance id to be updated\r\n-     * @param connInstaceTO connector instance to be stored\r\n-     */\r\n-    @PUT\r\n-    @Path(\"{connInstanceId}\")\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    void update(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId, @NotNull ConnInstanceTO connInstaceTO);\r\n-\r\n-    /**\r\n-     * Deletes the connector instance matching the provided id.\r\n-     *\r\n-     * @param connInstanceId connector instance id to be deleted\r\n-     */\r\n-    @DELETE\r\n-    @Path(\"{connInstanceId}\")\r\n-    void delete(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId);\r\n-\r\n-    /**\r\n-     * @param connInstaceTO connector instance to be used for connection check\r\n-     * @return true if connection could be established\r\n-     */\r\n-    @POST\r\n-    @Path(\"check\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    boolean check(@NotNull ConnInstanceTO connInstaceTO);\r\n-\r\n-    /**\r\n-     * Reload all connector bundles and instances.\r\n-     */\r\n-    @POST\r\n-    @Path(\"reload\")\r\n-    void reload();\r\n-\r\n-    /**\r\n-     * Executes the provided bulk action.\r\n-     *\r\n-     * @param bulkAction list of connector instance ids against which the bulk action will be performed.\r\n-     * @return Bulk action result\r\n-     */\r\n-    @POST\r\n-    @Path(\"bulk\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    BulkActionResult bulk(@NotNull BulkAction bulkAction);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.services;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+\n+import org.apache.syncope.common.reqres.BulkAction;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n+import org.apache.syncope.common.to.ConnBundleTO;\n+import org.apache.syncope.common.to.ConnIdObjectClassTO;\n+import org.apache.syncope.common.to.ConnInstanceTO;\n+import org.apache.syncope.common.to.SchemaTO;\n+import org.apache.syncope.common.types.ConnConfProperty;\n+\n+/**\n+ * REST operations for connector bundles and instances.\n+ */\n+@Path(\"connectors\")\n+public interface ConnectorService extends JAXRSService {\n+\n+    /**\n+     * Returns available connector bundles with property keys in selected language.\n+     *\n+     * @param lang language to select property keys; default language is English\n+     * @return available connector bundles with property keys in selected language\n+     */\n+    @GET\n+    @Path(\"bundles\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<ConnBundleTO> getBundles(@QueryParam(\"lang\") String lang);\n+\n+    /**\n+     * Returns configuration for given connector instance.\n+     *\n+     * @param connInstanceId connector instance id to read configuration from\n+     * @return configuration for given connector instance\n+     */\n+    @GET\n+    @Path(\"{connInstanceId}/configuration\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<ConnConfProperty> getConfigurationProperties(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId);\n+\n+    /**\n+     * Returns schema names for connector bundle matching the given connector instance id.\n+     *\n+     * @param connInstanceId connector instance id to be used for schema lookup\n+     * @param connInstanceTO connector instance object to provide special configuration properties\n+     * @param includeSpecial if set to true, special schema names (like '__PASSWORD__') will be included;\n+     * default is false\n+     * @return schema names for connector bundle matching the given connector instance id\n+     */\n+    @POST\n+    @Path(\"{connInstanceId}/schemaNames\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<SchemaTO> getSchemaNames(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId,\n+            @NotNull ConnInstanceTO connInstanceTO,\n+            @QueryParam(\"includeSpecial\") @DefaultValue(\"false\") boolean includeSpecial);\n+\n+    /**\n+     * Returns supported object classes for connector bundle matching the given connector instance id.\n+     *\n+     * @param connInstanceId connector instance id to be used for schema lookup\n+     * @param connInstanceTO connector instance object to provide special configuration properties\n+     * @return supported object classes for connector bundle matching the given connector instance id\n+     */\n+    @POST\n+    @Path(\"{connInstanceId}/supportedObjectClasses\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<ConnIdObjectClassTO> getSupportedObjectClasses(\n+            @NotNull @PathParam(\"connInstanceId\") Long connInstanceId,\n+            @NotNull ConnInstanceTO connInstanceTO);\n+\n+    /**\n+     * Returns connector instance with matching id.\n+     *\n+     * @param connInstanceId connector instance id to be read\n+     * @return connector instance with matching id\n+     */\n+    @GET\n+    @Path(\"{connInstanceId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    ConnInstanceTO read(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId);\n+\n+    /**\n+     * Returns connector instance for matching resource.\n+     *\n+     * @param resourceName resource name to be used for connector lookup\n+     * @return connector instance for matching resource\n+     */\n+    @GET\n+    @Path(\"byResource/{resourceName}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    ConnInstanceTO readByResource(@NotNull @PathParam(\"resourceName\") String resourceName);\n+\n+    /**\n+     * Returns a list of all connector instances with property keys in the matching language.\n+     *\n+     * @param lang language to select property keys, null for default (English).\n+     * An ISO 639 alpha-2 or alpha-3 language code, or a language subtag up to 8 characters in length.\n+     * @return list of all connector instances with property keys in the matching language\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<ConnInstanceTO> list(@QueryParam(\"lang\") String lang);\n+\n+    /**\n+     * Creates a new connector instance.\n+     *\n+     * @param connInstanceTO connector instance to be created\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created connector instance\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>Location</tt> header of created connector instance\")\n+    })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response create(@NotNull ConnInstanceTO connInstanceTO);\n+\n+    /**\n+     * Updates the connector instance matching the provided id.\n+     *\n+     * @param connInstanceId connector instance id to be updated\n+     * @param connInstaceTO connector instance to be stored\n+     */\n+    @PUT\n+    @Path(\"{connInstanceId}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void update(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId, @NotNull ConnInstanceTO connInstaceTO);\n+\n+    /**\n+     * Deletes the connector instance matching the provided id.\n+     *\n+     * @param connInstanceId connector instance id to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{connInstanceId}\")\n+    void delete(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId);\n+\n+    /**\n+     * @param connInstaceTO connector instance to be used for connection check\n+     * @return true if connection could be established\n+     */\n+    @POST\n+    @Path(\"check\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    boolean check(@NotNull ConnInstanceTO connInstaceTO);\n+\n+    /**\n+     * Reload all connector bundles and instances.\n+     */\n+    @POST\n+    @Path(\"reload\")\n+    void reload();\n+\n+    /**\n+     * Executes the provided bulk action.\n+     *\n+     * @param bulkAction list of connector instance ids against which the bulk action will be performed.\n+     * @return Bulk action result\n+     */\n+    @POST\n+    @Path(\"bulk\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    BulkActionResult bulk(@NotNull BulkAction bulkAction);\n+}"},{"sha":"be2efea3e6ef354fbce8f72ee1526f1138ade681","filename":"common/src/main/java/org/apache/syncope/common/services/EntitlementService.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FEntitlementService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FEntitlementService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FEntitlementService.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,54 +1,54 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.services;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.ws.rs.GET;\r\n-import javax.ws.rs.Path;\r\n-import javax.ws.rs.Produces;\r\n-import javax.ws.rs.core.MediaType;\r\n-\r\n-import org.apache.syncope.common.wrap.EntitlementTO;\r\n-\r\n-/**\r\n- * REST operations for entitlements.\r\n- */\r\n-@Path(\"entitlements\")\r\n-public interface EntitlementService extends JAXRSService {\r\n-\r\n-    /**\r\n-     * Returns a list of all known entitlements.\r\n-     *\r\n-     * @return list of all known entitlements\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<EntitlementTO> getAllEntitlements();\r\n-\r\n-    /**\r\n-     * Returns a list of entitlements assigned to user making the current request.\r\n-     *\r\n-     * @return list of entitlements assigned to user making the current request\r\n-     */\r\n-    @GET\r\n-    @Path(\"own\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<EntitlementTO> getOwnEntitlements();\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.services;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.apache.syncope.common.wrap.EntitlementTO;\n+\n+/**\n+ * REST operations for entitlements.\n+ */\n+@Path(\"entitlements\")\n+public interface EntitlementService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all known entitlements.\n+     *\n+     * @return list of all known entitlements\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<EntitlementTO> getAllEntitlements();\n+\n+    /**\n+     * Returns a list of entitlements assigned to user making the current request.\n+     *\n+     * @return list of entitlements assigned to user making the current request\n+     */\n+    @GET\n+    @Path(\"own\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<EntitlementTO> getOwnEntitlements();\n+}"},{"sha":"173c04674c9b3ee596a9e59ee951b3a92c3aa6b2","filename":"common/src/main/java/org/apache/syncope/common/services/LoggerService.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,99 +1,99 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.services;\r\n-\r\n-import java.util.List;\r\n-import javax.validation.constraints.NotNull;\r\n-\r\n-import javax.ws.rs.Consumes;\r\n-import javax.ws.rs.DELETE;\r\n-import javax.ws.rs.GET;\r\n-import javax.ws.rs.PUT;\r\n-import javax.ws.rs.Path;\r\n-import javax.ws.rs.PathParam;\r\n-import javax.ws.rs.Produces;\r\n-import javax.ws.rs.core.MediaType;\r\n-\r\n-import org.apache.syncope.common.to.EventCategoryTO;\r\n-import org.apache.syncope.common.to.LoggerTO;\r\n-import org.apache.syncope.common.types.LoggerType;\r\n-\r\n-/**\r\n- * REST operations for logging and auditing.\r\n- */\r\n-@Path(\"logger\")\r\n-public interface LoggerService extends JAXRSService {\r\n-\r\n-    /**\r\n-     * Returns a list of all managed events in audit.\r\n-     *\r\n-     * @return list of all managed events in audit\r\n-     */\r\n-    @GET\r\n-    @Path(\"events\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<EventCategoryTO> events();\r\n-\r\n-    /**\r\n-     * Returns logger with matching type and name.\r\n-     *\r\n-     * @param type LoggerType to be selected.\r\n-     * @param name Logger name to be read\r\n-     * @return logger with matching type and name\r\n-     */\r\n-    @GET\r\n-    @Path(\"{type}/{name}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    LoggerTO read(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") final String name);\r\n-\r\n-    /**\r\n-     * Returns a list of loggers with matching type.\r\n-     *\r\n-     * @param type LoggerType to be selected\r\n-     * @return list of loggers with matching type\r\n-     */\r\n-    @GET\r\n-    @Path(\"{type}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<LoggerTO> list(@NotNull @PathParam(\"type\") LoggerType type);\r\n-\r\n-    /**\r\n-     * Creates or updates (if existing) the logger with matching name.\r\n-     *\r\n-     * @param type LoggerType to be selected\r\n-     * @param name Logger name to be updated\r\n-     * @param logger Logger to be created or updated\r\n-     */\r\n-    @PUT\r\n-    @Path(\"{type}/{name}\")\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    void update(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") String name,\r\n-            @NotNull LoggerTO logger);\r\n-\r\n-    /**\r\n-     * Deletes the logger with matching name.\r\n-     *\r\n-     * @param type LoggerType to be selected\r\n-     * @param name Logger name to be deleted\r\n-     */\r\n-    @DELETE\r\n-    @Path(\"{type}/{name}\")\r\n-    void delete(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") String name);\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.services;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.apache.syncope.common.to.EventCategoryTO;\n+import org.apache.syncope.common.to.LoggerTO;\n+import org.apache.syncope.common.types.LoggerType;\n+\n+/**\n+ * REST operations for logging and auditing.\n+ */\n+@Path(\"logger\")\n+public interface LoggerService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all managed events in audit.\n+     *\n+     * @return list of all managed events in audit\n+     */\n+    @GET\n+    @Path(\"events\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<EventCategoryTO> events();\n+\n+    /**\n+     * Returns logger with matching type and name.\n+     *\n+     * @param type LoggerType to be selected.\n+     * @param name Logger name to be read\n+     * @return logger with matching type and name\n+     */\n+    @GET\n+    @Path(\"{type}/{name}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    LoggerTO read(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") final String name);\n+\n+    /**\n+     * Returns a list of loggers with matching type.\n+     *\n+     * @param type LoggerType to be selected\n+     * @return list of loggers with matching type\n+     */\n+    @GET\n+    @Path(\"{type}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<LoggerTO> list(@NotNull @PathParam(\"type\") LoggerType type);\n+\n+    /**\n+     * Creates or updates (if existing) the logger with matching name.\n+     *\n+     * @param type LoggerType to be selected\n+     * @param name Logger name to be updated\n+     * @param logger Logger to be created or updated\n+     */\n+    @PUT\n+    @Path(\"{type}/{name}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void update(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") String name,\n+            @NotNull LoggerTO logger);\n+\n+    /**\n+     * Deletes the logger with matching name.\n+     *\n+     * @param type LoggerType to be selected\n+     * @param name Logger name to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{type}/{name}\")\n+    void delete(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") String name);\n+\n+}"},{"sha":"efba41788c7e0cca85b0874bd1a3dd418c4710ad","filename":"common/src/main/java/org/apache/syncope/common/services/NotificationService.java","status":"modified","additions":98,"deletions":98,"changes":196,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FNotificationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FNotificationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FNotificationService.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,98 +1,98 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.services;\r\n-\r\n-import java.util.List;\r\n-import javax.validation.constraints.NotNull;\r\n-import javax.ws.rs.Consumes;\r\n-import javax.ws.rs.DELETE;\r\n-import javax.ws.rs.GET;\r\n-import javax.ws.rs.POST;\r\n-import javax.ws.rs.PUT;\r\n-import javax.ws.rs.Path;\r\n-import javax.ws.rs.PathParam;\r\n-import javax.ws.rs.Produces;\r\n-import javax.ws.rs.core.MediaType;\r\n-import javax.ws.rs.core.Response;\r\n-import org.apache.cxf.jaxrs.model.wadl.Description;\r\n-import org.apache.cxf.jaxrs.model.wadl.Descriptions;\r\n-import org.apache.cxf.jaxrs.model.wadl.DocTarget;\r\n-\r\n-import org.apache.syncope.common.to.NotificationTO;\r\n-\r\n-/**\r\n- * REST operations for notifications.\r\n- */\r\n-@Path(\"notifications\")\r\n-public interface NotificationService extends JAXRSService {\r\n-\r\n-    /**\r\n-     * Returns notification with matching id.\r\n-     *\r\n-     * @param notificationId id of notification to be read\r\n-     * @return notification with matching id\r\n-     */\r\n-    @GET\r\n-    @Path(\"{notificationId}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    NotificationTO read(@NotNull @PathParam(\"notificationId\") Long notificationId);\r\n-\r\n-    /**\r\n-     * Returns a list of all notifications.\r\n-     *\r\n-     * @return list of all notifications.\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<NotificationTO> list();\r\n-\r\n-    /**\r\n-     * Creates a new notification.\r\n-     *\r\n-     * @param notificationTO Creates a new notification.\r\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created notification\r\n-     */\r\n-    @Descriptions({\r\n-        @Description(target = DocTarget.RESPONSE,\r\n-                value = \"Featuring <tt>Location</tt> header of created notification\")\r\n-    })\r\n-    @POST\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    Response create(@NotNull NotificationTO notificationTO);\r\n-\r\n-    /**\r\n-     * Updates the notification matching the given id.\r\n-     *\r\n-     * @param notificationId id of notification to be updated\r\n-     * @param notificationTO notification to be stored\r\n-     */\r\n-    @PUT\r\n-    @Path(\"{notificationId}\")\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    void update(@NotNull @PathParam(\"notificationId\") Long notificationId, @NotNull NotificationTO notificationTO);\r\n-\r\n-    /**\r\n-     * Deletes the notification matching the given id.\r\n-     *\r\n-     * @param notificationId id for notification to be deleted\r\n-     */\r\n-    @DELETE\r\n-    @Path(\"{notificationId}\")\r\n-    void delete(@NotNull @PathParam(\"notificationId\") Long notificationId);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.services;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+\n+import org.apache.syncope.common.to.NotificationTO;\n+\n+/**\n+ * REST operations for notifications.\n+ */\n+@Path(\"notifications\")\n+public interface NotificationService extends JAXRSService {\n+\n+    /**\n+     * Returns notification with matching id.\n+     *\n+     * @param notificationId id of notification to be read\n+     * @return notification with matching id\n+     */\n+    @GET\n+    @Path(\"{notificationId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    NotificationTO read(@NotNull @PathParam(\"notificationId\") Long notificationId);\n+\n+    /**\n+     * Returns a list of all notifications.\n+     *\n+     * @return list of all notifications.\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<NotificationTO> list();\n+\n+    /**\n+     * Creates a new notification.\n+     *\n+     * @param notificationTO Creates a new notification.\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created notification\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>Location</tt> header of created notification\")\n+    })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response create(@NotNull NotificationTO notificationTO);\n+\n+    /**\n+     * Updates the notification matching the given id.\n+     *\n+     * @param notificationId id of notification to be updated\n+     * @param notificationTO notification to be stored\n+     */\n+    @PUT\n+    @Path(\"{notificationId}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void update(@NotNull @PathParam(\"notificationId\") Long notificationId, @NotNull NotificationTO notificationTO);\n+\n+    /**\n+     * Deletes the notification matching the given id.\n+     *\n+     * @param notificationId id for notification to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{notificationId}\")\n+    void delete(@NotNull @PathParam(\"notificationId\") Long notificationId);\n+}"},{"sha":"99010d88f61052e7b0b9386ba068d1a46e17e15b","filename":"common/src/main/java/org/apache/syncope/common/services/PolicyService.java","status":"modified","additions":128,"deletions":128,"changes":256,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,128 +1,128 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.services;\r\n-\r\n-import java.util.List;\r\n-import javax.validation.constraints.NotNull;\r\n-import javax.ws.rs.Consumes;\r\n-import javax.ws.rs.DELETE;\r\n-import javax.ws.rs.GET;\r\n-import javax.ws.rs.MatrixParam;\r\n-import javax.ws.rs.POST;\r\n-import javax.ws.rs.PUT;\r\n-import javax.ws.rs.Path;\r\n-import javax.ws.rs.PathParam;\r\n-import javax.ws.rs.Produces;\r\n-import javax.ws.rs.core.MediaType;\r\n-import javax.ws.rs.core.Response;\r\n-import org.apache.cxf.jaxrs.model.wadl.Description;\r\n-import org.apache.cxf.jaxrs.model.wadl.Descriptions;\r\n-import org.apache.cxf.jaxrs.model.wadl.DocTarget;\r\n-import org.apache.syncope.common.wrap.CorrelationRuleClass;\r\n-import org.apache.syncope.common.to.AbstractPolicyTO;\r\n-import org.apache.syncope.common.types.PolicyType;\r\n-\r\n-/**\r\n- * REST operations for policies.\r\n- */\r\n-@Path(\"policies\")\r\n-public interface PolicyService extends JAXRSService {\r\n-\r\n-    /**\r\n-     * Returns a list of classes to be used as correlation rules.\r\n-     *\r\n-     * @return list of classes to be used as correlation rules\r\n-     */\r\n-    @GET\r\n-    @Path(\"syncCorrelationRuleClasses\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<CorrelationRuleClass> getSyncCorrelationRuleClasses();\r\n-\r\n-    /**\r\n-     * Returns the policy matching the given id.\r\n-     *\r\n-     * @param policyId id of requested policy\r\n-     * @param <T> response type (extending PolicyTO)\r\n-     * @return policy with matching id\r\n-     */\r\n-    @GET\r\n-    @Path(\"{policyId}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    <T extends AbstractPolicyTO> T read(@NotNull @PathParam(\"policyId\") Long policyId);\r\n-\r\n-    /**\r\n-     * Returns the global policy for the given type.\r\n-     *\r\n-     * @param type PolicyType to read global policy from\r\n-     * @param <T> response type (extending PolicyTO)\r\n-     * @return global policy for matching type\r\n-     */\r\n-    @GET\r\n-    @Path(\"global\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    <T extends AbstractPolicyTO> T readGlobal(@NotNull @MatrixParam(\"type\") PolicyType type);\r\n-\r\n-    /**\r\n-     * Returns a list of policies of the matching type.\r\n-     *\r\n-     * @param type Type selector for requested policies\r\n-     * @param <T> response type (extending PolicyTO)\r\n-     * @return list of policies with matching type\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    <T extends AbstractPolicyTO> List<T> list(@NotNull @MatrixParam(\"type\") PolicyType type);\r\n-\r\n-    /**\r\n-     * Create a new policy.\r\n-     *\r\n-     * @param policyTO Policy to be created (needs to match type)\r\n-     * @param <T> response type (extending PolicyTO)\r\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created policy\r\n-     */\r\n-    @Descriptions({\r\n-        @Description(target = DocTarget.RESPONSE, value = \"Featuring <tt>Location</tt> header of created policy\")\r\n-    })\r\n-    @POST\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    <T extends AbstractPolicyTO> Response create(@NotNull T policyTO);\r\n-\r\n-    /**\r\n-     * Updates policy matching the given id.\r\n-     *\r\n-     * @param policyId id of policy to be updated\r\n-     * @param policyTO Policy to replace existing policy\r\n-     * @param <T> response type (extending PolicyTO)\r\n-     */\r\n-    @PUT\r\n-    @Path(\"{policyId}\")\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    <T extends AbstractPolicyTO> void update(@NotNull @PathParam(\"policyId\") Long policyId, @NotNull T policyTO);\r\n-\r\n-    /**\r\n-     * Delete policy matching the given id.\r\n-     *\r\n-     * @param policyId id of policy to be deleted\r\n-     * @param <T> response type (extending PolicyTO)\r\n-     */\r\n-    @DELETE\r\n-    @Path(\"{policyId}\")\r\n-    <T extends AbstractPolicyTO> void delete(@NotNull @PathParam(\"policyId\") Long policyId);\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.services;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.MatrixParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.wrap.CorrelationRuleClass;\n+import org.apache.syncope.common.to.AbstractPolicyTO;\n+import org.apache.syncope.common.types.PolicyType;\n+\n+/**\n+ * REST operations for policies.\n+ */\n+@Path(\"policies\")\n+public interface PolicyService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of classes to be used as correlation rules.\n+     *\n+     * @return list of classes to be used as correlation rules\n+     */\n+    @GET\n+    @Path(\"syncCorrelationRuleClasses\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<CorrelationRuleClass> getSyncCorrelationRuleClasses();\n+\n+    /**\n+     * Returns the policy matching the given id.\n+     *\n+     * @param policyId id of requested policy\n+     * @param <T> response type (extending PolicyTO)\n+     * @return policy with matching id\n+     */\n+    @GET\n+    @Path(\"{policyId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractPolicyTO> T read(@NotNull @PathParam(\"policyId\") Long policyId);\n+\n+    /**\n+     * Returns the global policy for the given type.\n+     *\n+     * @param type PolicyType to read global policy from\n+     * @param <T> response type (extending PolicyTO)\n+     * @return global policy for matching type\n+     */\n+    @GET\n+    @Path(\"global\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractPolicyTO> T readGlobal(@NotNull @MatrixParam(\"type\") PolicyType type);\n+\n+    /**\n+     * Returns a list of policies of the matching type.\n+     *\n+     * @param type Type selector for requested policies\n+     * @param <T> response type (extending PolicyTO)\n+     * @return list of policies with matching type\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractPolicyTO> List<T> list(@NotNull @MatrixParam(\"type\") PolicyType type);\n+\n+    /**\n+     * Create a new policy.\n+     *\n+     * @param policyTO Policy to be created (needs to match type)\n+     * @param <T> response type (extending PolicyTO)\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created policy\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE, value = \"Featuring <tt>Location</tt> header of created policy\")\n+    })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractPolicyTO> Response create(@NotNull T policyTO);\n+\n+    /**\n+     * Updates policy matching the given id.\n+     *\n+     * @param policyId id of policy to be updated\n+     * @param policyTO Policy to replace existing policy\n+     * @param <T> response type (extending PolicyTO)\n+     */\n+    @PUT\n+    @Path(\"{policyId}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractPolicyTO> void update(@NotNull @PathParam(\"policyId\") Long policyId, @NotNull T policyTO);\n+\n+    /**\n+     * Delete policy matching the given id.\n+     *\n+     * @param policyId id of policy to be deleted\n+     * @param <T> response type (extending PolicyTO)\n+     */\n+    @DELETE\n+    @Path(\"{policyId}\")\n+    <T extends AbstractPolicyTO> void delete(@NotNull @PathParam(\"policyId\") Long policyId);\n+\n+}"},{"sha":"4bf9c27315e6d4a2a0ba4cb754e567091b605c67","filename":"common/src/main/java/org/apache/syncope/common/services/ReportService.java","status":"modified","additions":195,"deletions":195,"changes":390,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,195 +1,195 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.services;\r\n-\r\n-import java.util.List;\r\n-import javax.validation.constraints.Min;\r\n-import javax.validation.constraints.NotNull;\r\n-import javax.ws.rs.Consumes;\r\n-import javax.ws.rs.DELETE;\r\n-import javax.ws.rs.DefaultValue;\r\n-import javax.ws.rs.GET;\r\n-import javax.ws.rs.POST;\r\n-import javax.ws.rs.PUT;\r\n-import javax.ws.rs.Path;\r\n-import javax.ws.rs.PathParam;\r\n-import javax.ws.rs.Produces;\r\n-import javax.ws.rs.QueryParam;\r\n-import javax.ws.rs.core.MediaType;\r\n-import javax.ws.rs.core.Response;\r\n-import org.apache.cxf.jaxrs.model.wadl.Description;\r\n-import org.apache.cxf.jaxrs.model.wadl.Descriptions;\r\n-import org.apache.cxf.jaxrs.model.wadl.DocTarget;\r\n-import org.apache.syncope.common.reqres.PagedResult;\r\n-import org.apache.syncope.common.to.ReportExecTO;\r\n-import org.apache.syncope.common.to.ReportTO;\r\n-import org.apache.syncope.common.types.ReportExecExportFormat;\r\n-import org.apache.syncope.common.wrap.ReportletConfClass;\r\n-\r\n-/**\r\n- * REST operations for reports.\r\n- */\r\n-@Path(\"reports\")\r\n-public interface ReportService extends JAXRSService {\r\n-\r\n-    /**\r\n-     * Returns a list of available classes for reportlet configuration.\r\n-     *\r\n-     * @return list of available classes for reportlet configuration\r\n-     */\r\n-    @GET\r\n-    @Path(\"reportletConfClasses\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<ReportletConfClass> getReportletConfClasses();\r\n-\r\n-    /**\r\n-     * Returns report with matching id.\r\n-     *\r\n-     * @param reportId id of report to be read\r\n-     * @return report with matching id\r\n-     */\r\n-    @GET\r\n-    @Path(\"{reportId}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    ReportTO read(@NotNull @PathParam(\"reportId\") Long reportId);\r\n-\r\n-    /**\r\n-     * Returns report execution with matching id.\r\n-     *\r\n-     * @param executionId report execution id to be selected\r\n-     * @return report execution with matching id\r\n-     */\r\n-    @GET\r\n-    @Path(\"executions/{executionId}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    ReportExecTO readExecution(@NotNull @PathParam(\"executionId\") Long executionId);\r\n-\r\n-    /**\r\n-     * Returns a paged list of all existing reports.\r\n-     *\r\n-     * @return paged list of all existing reports\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    PagedResult<ReportTO> list();\r\n-\r\n-    /**\r\n-     * Returns a paged list of all existing reports.\r\n-     *\r\n-     * @param orderBy list of ordering clauses, separated by comma\r\n-     * @return paged list of all existing reports\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    PagedResult<ReportTO> list(@QueryParam(PARAM_ORDERBY) String orderBy);\r\n-\r\n-    /**\r\n-     * Returns a paged list of all existing reports matching page/size conditions.\r\n-     *\r\n-     * @param page selected page in relation to size\r\n-     * @param size number of entries per page\r\n-     * @return paged list of existing reports matching page/size conditions\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    PagedResult<ReportTO> list(\r\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\r\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\r\n-\r\n-    /**\r\n-     * Returns a paged list of all existing reports matching page/size conditions.\r\n-     *\r\n-     * @param page selected page in relation to size\r\n-     * @param size number of entries per page\r\n-     * @param orderBy list of ordering clauses, separated by comma\r\n-     * @return paged list of existing reports matching page/size conditions\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    PagedResult<ReportTO> list(\r\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\r\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\r\n-            @QueryParam(PARAM_ORDERBY) String orderBy);\r\n-\r\n-    /**\r\n-     * Creates a new report.\r\n-     *\r\n-     * @param reportTO report to be created\r\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created report\r\n-     */\r\n-    @Descriptions({\r\n-        @Description(target = DocTarget.RESPONSE, value = \"Featuring <tt>Location</tt> header of created report\")\r\n-    })\r\n-    @POST\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    Response create(@NotNull ReportTO reportTO);\r\n-\r\n-    /**\r\n-     * Updates report with matching id.\r\n-     *\r\n-     * @param reportId id for report to be updated\r\n-     * @param reportTO report to be stored\r\n-     */\r\n-    @PUT\r\n-    @Path(\"{reportId}\")\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    void update(@NotNull @PathParam(\"reportId\") Long reportId, ReportTO reportTO);\r\n-\r\n-    /**\r\n-     * Deletes report with matching id.\r\n-     *\r\n-     * @param reportId Deletes report with matching id\r\n-     */\r\n-    @DELETE\r\n-    @Path(\"{reportId}\")\r\n-    void delete(@NotNull @PathParam(\"reportId\") Long reportId);\r\n-\r\n-    /**\r\n-     * Deletes report execution with matching id.\r\n-     *\r\n-     * @param executionId id of execution report to be deleted\r\n-     */\r\n-    @DELETE\r\n-    @Path(\"executions/{executionId}\")\r\n-    void deleteExecution(@NotNull @PathParam(\"executionId\") Long executionId);\r\n-\r\n-    /**\r\n-     * Executes the report with matching id.\r\n-     *\r\n-     * @param reportId id of report to be executed\r\n-     * @return report execution result\r\n-     */\r\n-    @POST\r\n-    @Path(\"{reportId}/execute\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    ReportExecTO execute(@NotNull @PathParam(\"reportId\") Long reportId);\r\n-\r\n-    /**\r\n-     * Exports the report execution with matching id in the requested format.\r\n-     *\r\n-     * @param executionId id of execution report to be selected\r\n-     * @param fmt file-format selection\r\n-     * @return a stream for content download\r\n-     */\r\n-    @GET\r\n-    @Path(\"executions/{executionId}/stream\")\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    Response exportExecutionResult(@NotNull @PathParam(\"executionId\") Long executionId,\r\n-            @QueryParam(\"format\") ReportExecExportFormat fmt);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.services;\n+\n+import java.util.List;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.reqres.PagedResult;\n+import org.apache.syncope.common.to.ReportExecTO;\n+import org.apache.syncope.common.to.ReportTO;\n+import org.apache.syncope.common.types.ReportExecExportFormat;\n+import org.apache.syncope.common.wrap.ReportletConfClass;\n+\n+/**\n+ * REST operations for reports.\n+ */\n+@Path(\"reports\")\n+public interface ReportService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of available classes for reportlet configuration.\n+     *\n+     * @return list of available classes for reportlet configuration\n+     */\n+    @GET\n+    @Path(\"reportletConfClasses\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<ReportletConfClass> getReportletConfClasses();\n+\n+    /**\n+     * Returns report with matching id.\n+     *\n+     * @param reportId id of report to be read\n+     * @return report with matching id\n+     */\n+    @GET\n+    @Path(\"{reportId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    ReportTO read(@NotNull @PathParam(\"reportId\") Long reportId);\n+\n+    /**\n+     * Returns report execution with matching id.\n+     *\n+     * @param executionId report execution id to be selected\n+     * @return report execution with matching id\n+     */\n+    @GET\n+    @Path(\"executions/{executionId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    ReportExecTO readExecution(@NotNull @PathParam(\"executionId\") Long executionId);\n+\n+    /**\n+     * Returns a paged list of all existing reports.\n+     *\n+     * @return paged list of all existing reports\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<ReportTO> list();\n+\n+    /**\n+     * Returns a paged list of all existing reports.\n+     *\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return paged list of all existing reports\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<ReportTO> list(@QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Returns a paged list of all existing reports matching page/size conditions.\n+     *\n+     * @param page selected page in relation to size\n+     * @param size number of entries per page\n+     * @return paged list of existing reports matching page/size conditions\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<ReportTO> list(\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n+\n+    /**\n+     * Returns a paged list of all existing reports matching page/size conditions.\n+     *\n+     * @param page selected page in relation to size\n+     * @param size number of entries per page\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return paged list of existing reports matching page/size conditions\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<ReportTO> list(\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Creates a new report.\n+     *\n+     * @param reportTO report to be created\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created report\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE, value = \"Featuring <tt>Location</tt> header of created report\")\n+    })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response create(@NotNull ReportTO reportTO);\n+\n+    /**\n+     * Updates report with matching id.\n+     *\n+     * @param reportId id for report to be updated\n+     * @param reportTO report to be stored\n+     */\n+    @PUT\n+    @Path(\"{reportId}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void update(@NotNull @PathParam(\"reportId\") Long reportId, ReportTO reportTO);\n+\n+    /**\n+     * Deletes report with matching id.\n+     *\n+     * @param reportId Deletes report with matching id\n+     */\n+    @DELETE\n+    @Path(\"{reportId}\")\n+    void delete(@NotNull @PathParam(\"reportId\") Long reportId);\n+\n+    /**\n+     * Deletes report execution with matching id.\n+     *\n+     * @param executionId id of execution report to be deleted\n+     */\n+    @DELETE\n+    @Path(\"executions/{executionId}\")\n+    void deleteExecution(@NotNull @PathParam(\"executionId\") Long executionId);\n+\n+    /**\n+     * Executes the report with matching id.\n+     *\n+     * @param reportId id of report to be executed\n+     * @return report execution result\n+     */\n+    @POST\n+    @Path(\"{reportId}/execute\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    ReportExecTO execute(@NotNull @PathParam(\"reportId\") Long reportId);\n+\n+    /**\n+     * Exports the report execution with matching id in the requested format.\n+     *\n+     * @param executionId id of execution report to be selected\n+     * @param fmt file-format selection\n+     * @return a stream for content download\n+     */\n+    @GET\n+    @Path(\"executions/{executionId}/stream\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response exportExecutionResult(@NotNull @PathParam(\"executionId\") Long executionId,\n+            @QueryParam(\"format\") ReportExecExportFormat fmt);\n+}"},{"sha":"f4d19f663496e4adb7278909feb48d7af824e5b7","filename":"common/src/main/java/org/apache/syncope/common/services/ResourceService.java","status":"modified","additions":184,"deletions":184,"changes":368,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FResourceService.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,184 +1,184 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.services;\r\n-\r\n-import java.util.List;\r\n-import javax.validation.constraints.NotNull;\r\n-import javax.ws.rs.Consumes;\r\n-import javax.ws.rs.DELETE;\r\n-import javax.ws.rs.GET;\r\n-import javax.ws.rs.MatrixParam;\r\n-import javax.ws.rs.POST;\r\n-import javax.ws.rs.PUT;\r\n-import javax.ws.rs.Path;\r\n-import javax.ws.rs.PathParam;\r\n-import javax.ws.rs.Produces;\r\n-import javax.ws.rs.core.MediaType;\r\n-import javax.ws.rs.core.Response;\r\n-import org.apache.cxf.jaxrs.model.wadl.Description;\r\n-import org.apache.cxf.jaxrs.model.wadl.Descriptions;\r\n-import org.apache.cxf.jaxrs.model.wadl.DocTarget;\r\n-import org.apache.syncope.common.reqres.BulkAction;\r\n-import org.apache.syncope.common.reqres.BulkActionResult;\r\n-import org.apache.syncope.common.to.ConnObjectTO;\r\n-import org.apache.syncope.common.to.ResourceTO;\r\n-import org.apache.syncope.common.types.ResourceDeassociationActionType;\r\n-import org.apache.syncope.common.types.SubjectType;\r\n-import org.apache.syncope.common.wrap.PropagationActionClass;\r\n-import org.apache.syncope.common.wrap.SubjectId;\r\n-\r\n-/**\r\n- * REST operations for external resources.\r\n- */\r\n-@Path(\"resources\")\r\n-public interface ResourceService extends JAXRSService {\r\n-\r\n-    /**\r\n-     * Returns connector object from the external resource, for the given type and id.\r\n-     *\r\n-     * @param resourceName Name of resource to read connector object from\r\n-     * @param type user / role\r\n-     * @param id user id / role id\r\n-     * @return connector object from the external resource, for the given type and id\r\n-     */\r\n-    @GET\r\n-    @Path(\"{resourceName}/{type}/{id}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    ConnObjectTO getConnectorObject(@NotNull @PathParam(\"resourceName\") String resourceName,\r\n-            @NotNull @PathParam(\"type\") SubjectType type, @NotNull @PathParam(\"id\") Long id);\r\n-\r\n-    /**\r\n-     * Returns a list of classes that can be used to customize the propagation process.\r\n-     *\r\n-     * @return list of classes that can be used to customize the propagation process\r\n-     */\r\n-    @GET\r\n-    @Path(\"propagationActionsClasses\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<PropagationActionClass> getPropagationActionsClasses();\r\n-\r\n-    /**\r\n-     * Returns the resource with matching name.\r\n-     *\r\n-     * @param resourceName Name of resource to be read\r\n-     * @return resource with matching name\r\n-     */\r\n-    @GET\r\n-    @Path(\"{resourceName}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    ResourceTO read(@NotNull @PathParam(\"resourceName\") String resourceName);\r\n-\r\n-    /**\r\n-     * Returns a list of all resources.\r\n-     *\r\n-     * @return list of all resources\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<ResourceTO> list();\r\n-\r\n-    /**\r\n-     * Returns a list of resources using matching connector instance id.\r\n-     *\r\n-     * @param connInstanceId Connector id to filter for resources\r\n-     * @return resources using matching connector instance id\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<ResourceTO> list(@NotNull @MatrixParam(\"connectorId\") Long connInstanceId);\r\n-\r\n-    /**\r\n-     * Creates a new resource.\r\n-     *\r\n-     * @param resourceTO Resource to be created\r\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created resource\r\n-     */\r\n-    @Descriptions({\r\n-        @Description(target = DocTarget.RESPONSE,\r\n-                value = \"Featuring <tt>Location</tt> header of created resource\")\r\n-    })\r\n-    @POST\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    Response create(@NotNull ResourceTO resourceTO);\r\n-\r\n-    /**\r\n-     * Updates the resource matching the given name.\r\n-     *\r\n-     * @param resourceName name of resource to be updated\r\n-     * @param resourceTO resource to be stored\r\n-     */\r\n-    @PUT\r\n-    @Path(\"{resourceName}\")\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    void update(@NotNull @PathParam(\"resourceName\") String resourceName, @NotNull ResourceTO resourceTO);\r\n-\r\n-    /**\r\n-     * Deletes the resource matching the given name.\r\n-     *\r\n-     * @param resourceName name of resource to be deleted\r\n-     */\r\n-    @DELETE\r\n-    @Path(\"{resourceName}\")\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    void delete(@NotNull @PathParam(\"resourceName\") String resourceName);\r\n-\r\n-    /**\r\n-     * Checks wether the connection to resource could be established.\r\n-     *\r\n-     * @param resourceTO resource to be checked\r\n-     * @return true if connection to resource could be established\r\n-     */\r\n-    @POST\r\n-    @Path(\"check\")\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    boolean check(@NotNull ResourceTO resourceTO);\r\n-\r\n-    /**\r\n-     * De-associate users or roles (depending on the provided subject type) from the given resource.\r\n-     *\r\n-     * @param resourceName name of resource\r\n-     * @param subjectType subject type (user or role)\r\n-     * @param type resource de-association action type\r\n-     * @param subjectIds users or roles against which the bulk action will be performed\r\n-     * @return <tt>Response</tt> object featuring {@link BulkActionResult} as <tt>Entity</tt>\r\n-     */\r\n-    @Descriptions({\r\n-        @Description(target = DocTarget.RESPONSE,\r\n-                value = \"Featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\")\r\n-    })\r\n-    @POST\r\n-    @Path(\"{resourceName}/bulkDeassociation/{subjType}/{type}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    BulkActionResult bulkDeassociation(@NotNull @PathParam(\"resourceName\") String resourceName,\r\n-            @NotNull @PathParam(\"subjType\") SubjectType subjectType,\r\n-            @NotNull @PathParam(\"type\") ResourceDeassociationActionType type, @NotNull List<SubjectId> subjectIds);\r\n-\r\n-    /**\r\n-     * Executes the provided bulk action.\r\n-     *\r\n-     * @param bulkAction list of resource names against which the bulk action will be performed\r\n-     * @return Bulk action result\r\n-     */\r\n-    @POST\r\n-    @Path(\"bulk\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    BulkActionResult bulk(@NotNull BulkAction bulkAction);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.services;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.MatrixParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.reqres.BulkAction;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n+import org.apache.syncope.common.to.ConnObjectTO;\n+import org.apache.syncope.common.to.ResourceTO;\n+import org.apache.syncope.common.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.types.SubjectType;\n+import org.apache.syncope.common.wrap.PropagationActionClass;\n+import org.apache.syncope.common.wrap.SubjectId;\n+\n+/**\n+ * REST operations for external resources.\n+ */\n+@Path(\"resources\")\n+public interface ResourceService extends JAXRSService {\n+\n+    /**\n+     * Returns connector object from the external resource, for the given type and id.\n+     *\n+     * @param resourceName Name of resource to read connector object from\n+     * @param type user / role\n+     * @param id user id / role id\n+     * @return connector object from the external resource, for the given type and id\n+     */\n+    @GET\n+    @Path(\"{resourceName}/{type}/{id}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    ConnObjectTO getConnectorObject(@NotNull @PathParam(\"resourceName\") String resourceName,\n+            @NotNull @PathParam(\"type\") SubjectType type, @NotNull @PathParam(\"id\") Long id);\n+\n+    /**\n+     * Returns a list of classes that can be used to customize the propagation process.\n+     *\n+     * @return list of classes that can be used to customize the propagation process\n+     */\n+    @GET\n+    @Path(\"propagationActionsClasses\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<PropagationActionClass> getPropagationActionsClasses();\n+\n+    /**\n+     * Returns the resource with matching name.\n+     *\n+     * @param resourceName Name of resource to be read\n+     * @return resource with matching name\n+     */\n+    @GET\n+    @Path(\"{resourceName}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    ResourceTO read(@NotNull @PathParam(\"resourceName\") String resourceName);\n+\n+    /**\n+     * Returns a list of all resources.\n+     *\n+     * @return list of all resources\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<ResourceTO> list();\n+\n+    /**\n+     * Returns a list of resources using matching connector instance id.\n+     *\n+     * @param connInstanceId Connector id to filter for resources\n+     * @return resources using matching connector instance id\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<ResourceTO> list(@NotNull @MatrixParam(\"connectorId\") Long connInstanceId);\n+\n+    /**\n+     * Creates a new resource.\n+     *\n+     * @param resourceTO Resource to be created\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created resource\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>Location</tt> header of created resource\")\n+    })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response create(@NotNull ResourceTO resourceTO);\n+\n+    /**\n+     * Updates the resource matching the given name.\n+     *\n+     * @param resourceName name of resource to be updated\n+     * @param resourceTO resource to be stored\n+     */\n+    @PUT\n+    @Path(\"{resourceName}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void update(@NotNull @PathParam(\"resourceName\") String resourceName, @NotNull ResourceTO resourceTO);\n+\n+    /**\n+     * Deletes the resource matching the given name.\n+     *\n+     * @param resourceName name of resource to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{resourceName}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void delete(@NotNull @PathParam(\"resourceName\") String resourceName);\n+\n+    /**\n+     * Checks wether the connection to resource could be established.\n+     *\n+     * @param resourceTO resource to be checked\n+     * @return true if connection to resource could be established\n+     */\n+    @POST\n+    @Path(\"check\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    boolean check(@NotNull ResourceTO resourceTO);\n+\n+    /**\n+     * De-associate users or roles (depending on the provided subject type) from the given resource.\n+     *\n+     * @param resourceName name of resource\n+     * @param subjectType subject type (user or role)\n+     * @param type resource de-association action type\n+     * @param subjectIds users or roles against which the bulk action will be performed\n+     * @return <tt>Response</tt> object featuring {@link BulkActionResult} as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\")\n+    })\n+    @POST\n+    @Path(\"{resourceName}/bulkDeassociation/{subjType}/{type}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    BulkActionResult bulkDeassociation(@NotNull @PathParam(\"resourceName\") String resourceName,\n+            @NotNull @PathParam(\"subjType\") SubjectType subjectType,\n+            @NotNull @PathParam(\"type\") ResourceDeassociationActionType type, @NotNull List<SubjectId> subjectIds);\n+\n+    /**\n+     * Executes the provided bulk action.\n+     *\n+     * @param bulkAction list of resource names against which the bulk action will be performed\n+     * @return Bulk action result\n+     */\n+    @POST\n+    @Path(\"bulk\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    BulkActionResult bulk(@NotNull BulkAction bulkAction);\n+}"},{"sha":"bd2091aea16dd457985a6aeeec212e44a6138d3d","filename":"common/src/main/java/org/apache/syncope/common/services/RoleService.java","status":"modified","additions":299,"deletions":299,"changes":598,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,299 +1,299 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.services;\r\n-\r\n-import java.util.List;\r\n-import javax.validation.constraints.Min;\r\n-import javax.validation.constraints.NotNull;\r\n-import javax.ws.rs.Consumes;\r\n-import javax.ws.rs.DELETE;\r\n-import javax.ws.rs.DefaultValue;\r\n-import javax.ws.rs.GET;\r\n-import javax.ws.rs.POST;\r\n-import javax.ws.rs.Path;\r\n-import javax.ws.rs.PathParam;\r\n-import javax.ws.rs.Produces;\r\n-import javax.ws.rs.QueryParam;\r\n-import javax.ws.rs.core.MediaType;\r\n-import javax.ws.rs.core.Response;\r\n-import org.apache.cxf.jaxrs.model.wadl.Description;\r\n-import org.apache.cxf.jaxrs.model.wadl.Descriptions;\r\n-import org.apache.cxf.jaxrs.model.wadl.DocTarget;\r\n-import org.apache.syncope.common.reqres.PagedResult;\r\n-import org.apache.syncope.common.mod.RoleMod;\r\n-import org.apache.syncope.common.to.RoleTO;\r\n-import org.apache.syncope.common.types.ResourceAssociationActionType;\r\n-import org.apache.syncope.common.types.ResourceDeassociationActionType;\r\n-import org.apache.syncope.common.wrap.ResourceName;\r\n-\r\n-/**\r\n- * REST operations for roles.\r\n- */\r\n-@Path(\"roles\")\r\n-public interface RoleService extends JAXRSService {\r\n-\r\n-    /**\r\n-     * Returns children roles of given role.\r\n-     *\r\n-     * @param roleId id of role to get children from\r\n-     * @return children roles of given role\r\n-     */\r\n-    @GET\r\n-    @Path(\"{roleId}/children\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<RoleTO> children(@NotNull @PathParam(\"roleId\") Long roleId);\r\n-\r\n-    /**\r\n-     * Returns parent role of the given role (or null if no parent exists).\r\n-     *\r\n-     * @param roleId id of role to get parent role from\r\n-     * @return parent role of the given role (or null if no parent exists)\r\n-     */\r\n-    @GET\r\n-    @Path(\"{roleId}/parent\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    RoleTO parent(@NotNull @PathParam(\"roleId\") Long roleId);\r\n-\r\n-    /**\r\n-     * Reads the role matching the provided roleId.\r\n-     *\r\n-     * @param roleId id of role to be read\r\n-     * @return role with matching id\r\n-     */\r\n-    @GET\r\n-    @Path(\"{roleId}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    RoleTO read(@NotNull @PathParam(\"roleId\") Long roleId);\r\n-\r\n-    /**\r\n-     * This method is similar to {@link #read(Long)}, but uses different authentication handling to ensure that a user\r\n-     * can read his own roles.\r\n-     *\r\n-     * @param roleId id of role to be read\r\n-     * @return role with matching id\r\n-     */\r\n-    @Descriptions({\r\n-        @Description(target = DocTarget.METHOD,\r\n-                value = \"This method is similar to <tt>read()</tt>, but uses different authentication handling to \"\r\n-                + \"ensure that a user can read his own roles.\")\r\n-    })\r\n-    @GET\r\n-    @Path(\"{roleId}/own\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    RoleTO readSelf(@NotNull @PathParam(\"roleId\") Long roleId);\r\n-\r\n-    /**\r\n-     * Returns a paged list of existing roles.\r\n-     *\r\n-     * @return paged list of all existing roles\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    PagedResult<RoleTO> list();\r\n-\r\n-    /**\r\n-     * Returns a paged list of existing roles.\r\n-     *\r\n-     * @param orderBy list of ordering clauses, separated by comma\r\n-     * @return paged list of all existing roles\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    PagedResult<RoleTO> list(@QueryParam(PARAM_ORDERBY) String orderBy);\r\n-\r\n-    /**\r\n-     * Returns a paged list of existing roles matching page/size conditions.\r\n-     *\r\n-     * @param page result page number\r\n-     * @param size number of entries per page\r\n-     * @return paged list of existing roles matching page/size conditions\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    PagedResult<RoleTO> list(\r\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\r\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\r\n-\r\n-    /**\r\n-     * Returns a paged list of existing roles matching page/size conditions.\r\n-     *\r\n-     * @param page result page number\r\n-     * @param size number of entries per page\r\n-     * @param orderBy list of ordering clauses, separated by comma\r\n-     * @return paged list of existing roles matching page/size conditions\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    PagedResult<RoleTO> list(\r\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\r\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\r\n-            @QueryParam(PARAM_ORDERBY) String orderBy);\r\n-\r\n-    /**\r\n-     * Returns a paged list of roles matching the provided FIQL search condition.\r\n-     *\r\n-     * @param fiql FIQL search expression\r\n-     * @return paged list of roles matching the provided FIQL search condition\r\n-     */\r\n-    @GET\r\n-    @Path(\"search\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    PagedResult<RoleTO> search(@NotNull @QueryParam(PARAM_FIQL) String fiql);\r\n-\r\n-    /**\r\n-     * Returns a paged list of roles matching the provided FIQL search condition.\r\n-     *\r\n-     * @param fiql FIQL search expression\r\n-     * @param orderBy list of ordering clauses, separated by comma\r\n-     * @return paged list of roles matching the provided FIQL search condition\r\n-     */\r\n-    @GET\r\n-    @Path(\"search\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    PagedResult<RoleTO> search(\r\n-            @NotNull @QueryParam(PARAM_FIQL) String fiql, @QueryParam(PARAM_ORDERBY) String orderBy);\r\n-\r\n-    /**\r\n-     * Returns a paged list of roles matching the provided FIQL search condition.\r\n-     *\r\n-     * @param fiql FIQL search expression\r\n-     * @param page result page number\r\n-     * @param size number of entries per page\r\n-     * @return paged list of roles matching the provided FIQL search condition\r\n-     */\r\n-    @GET\r\n-    @Path(\"search\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    PagedResult<RoleTO> search(@QueryParam(PARAM_FIQL) String fiql,\r\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\r\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\r\n-\r\n-    /**\r\n-     * Returns a paged list of roles matching the provided FIQL search condition.\r\n-     *\r\n-     * @param fiql FIQL search expression\r\n-     * @param page result page number\r\n-     * @param size number of entries per page\r\n-     * @param orderBy list of ordering clauses, separated by comma\r\n-     * @return paged list of roles matching the provided FIQL search condition\r\n-     */\r\n-    @GET\r\n-    @Path(\"search\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    PagedResult<RoleTO> search(@QueryParam(PARAM_FIQL) String fiql,\r\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\r\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\r\n-            @QueryParam(PARAM_ORDERBY) String orderBy);\r\n-\r\n-    /**\r\n-     * Creates a new role.\r\n-     *\r\n-     * @param roleTO role to be created\r\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created role as well as the role itself\r\n-     * enriched with propagation status information - {@link RoleTO} as <tt>Entity</tt>\r\n-     */\r\n-    @Descriptions({\r\n-        @Description(target = DocTarget.RESPONSE,\r\n-                value = \"Featuring <tt>Location</tt> header of created role as well as the \"\r\n-                + \"role itself enriched with propagation status information - <tt>RoleTO</tt> as <tt>Entity</tt>\")\r\n-    })\r\n-    @POST\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    Response create(@NotNull RoleTO roleTO);\r\n-\r\n-    /**\r\n-     * Updates role matching the provided roleId.\r\n-     *\r\n-     * @param roleId id of role to be updated\r\n-     * @param roleMod modification to be applied to role matching the provided roleId\r\n-     * @return <tt>Response</tt> object featuring the updated role enriched with propagation status information\r\n-     * - {@link RoleTO} as <tt>Entity</tt>\r\n-     */\r\n-    @Descriptions({\r\n-        @Description(target = DocTarget.RESPONSE,\r\n-                value = \"Featuring the updated role enriched with propagation status information - \"\r\n-                + \"<tt>RoleTO</tt> as <tt>Entity</tt>\")\r\n-    })\r\n-    @POST\r\n-    @Path(\"{roleId}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    Response update(@NotNull @PathParam(\"roleId\") Long roleId, @NotNull RoleMod roleMod);\r\n-\r\n-    /**\r\n-     * Deletes role matching provided roleId.\r\n-     *\r\n-     * @param roleId id of role to be deleted\r\n-     * @return <tt>Response</tt> object featuring the deleted role enriched with propagation status information\r\n-     * - {@link RoleTO} as <tt>Entity</tt>\r\n-     */\r\n-    @Descriptions({\r\n-        @Description(target = DocTarget.RESPONSE,\r\n-                value = \"Featuring the deleted role enriched with propagation status information - \"\r\n-                + \"<tt>RoleTO</tt> as <tt>Entity</tt>\")\r\n-    })\r\n-    @DELETE\r\n-    @Path(\"{roleId}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    Response delete(@NotNull @PathParam(\"roleId\") Long roleId);\r\n-\r\n-    /**\r\n-     * Executes resource-related operations on given role.\r\n-     *\r\n-     * @param roleId role id.\r\n-     * @param type resource association action type\r\n-     * @param resourceNames external resources to be used for propagation-related operations\r\n-     * @return <tt>Response</tt> object featuring\r\n-     * {@link org.apache.syncope.common.reqres.BulkActionResult} as <tt>Entity</tt>\r\n-     */\r\n-    @Descriptions({\r\n-        @Description(target = DocTarget.RESPONSE,\r\n-                value = \"Featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\")\r\n-    })\r\n-    @POST\r\n-    @Path(\"{roleId}/deassociate/{type}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    Response bulkDeassociation(@NotNull @PathParam(\"roleId\") Long roleId,\r\n-            @NotNull @PathParam(\"type\") ResourceDeassociationActionType type,\r\n-            @NotNull List<ResourceName> resourceNames);\r\n-\r\n-    /**\r\n-     * Executes resource-related operations on given role.\r\n-     *\r\n-     * @param roleId role id.\r\n-     * @param type resource association action type\r\n-     * @param resourceNames external resources to be used for propagation-related operations\r\n-     * @return <tt>Response</tt> object featuring {@link org.apache.syncope.common.reqres.BulkActionResult}\r\n-     * as <tt>Entity</tt>\r\n-     */\r\n-    @Descriptions({\r\n-        @Description(target = DocTarget.RESPONSE,\r\n-                value = \"Featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\")\r\n-    })\r\n-    @POST\r\n-    @Path(\"{roleId}/associate/{type}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    Response bulkAssociation(@NotNull @PathParam(\"roleId\") Long roleId,\r\n-            @NotNull @PathParam(\"type\") ResourceAssociationActionType type,\r\n-            @NotNull List<ResourceName> resourceNames);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.services;\n+\n+import java.util.List;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.reqres.PagedResult;\n+import org.apache.syncope.common.mod.RoleMod;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.types.ResourceAssociationActionType;\n+import org.apache.syncope.common.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.wrap.ResourceName;\n+\n+/**\n+ * REST operations for roles.\n+ */\n+@Path(\"roles\")\n+public interface RoleService extends JAXRSService {\n+\n+    /**\n+     * Returns children roles of given role.\n+     *\n+     * @param roleId id of role to get children from\n+     * @return children roles of given role\n+     */\n+    @GET\n+    @Path(\"{roleId}/children\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<RoleTO> children(@NotNull @PathParam(\"roleId\") Long roleId);\n+\n+    /**\n+     * Returns parent role of the given role (or null if no parent exists).\n+     *\n+     * @param roleId id of role to get parent role from\n+     * @return parent role of the given role (or null if no parent exists)\n+     */\n+    @GET\n+    @Path(\"{roleId}/parent\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    RoleTO parent(@NotNull @PathParam(\"roleId\") Long roleId);\n+\n+    /**\n+     * Reads the role matching the provided roleId.\n+     *\n+     * @param roleId id of role to be read\n+     * @return role with matching id\n+     */\n+    @GET\n+    @Path(\"{roleId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    RoleTO read(@NotNull @PathParam(\"roleId\") Long roleId);\n+\n+    /**\n+     * This method is similar to {@link #read(Long)}, but uses different authentication handling to ensure that a user\n+     * can read his own roles.\n+     *\n+     * @param roleId id of role to be read\n+     * @return role with matching id\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.METHOD,\n+                value = \"This method is similar to <tt>read()</tt>, but uses different authentication handling to \"\n+                + \"ensure that a user can read his own roles.\")\n+    })\n+    @GET\n+    @Path(\"{roleId}/own\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    RoleTO readSelf(@NotNull @PathParam(\"roleId\") Long roleId);\n+\n+    /**\n+     * Returns a paged list of existing roles.\n+     *\n+     * @return paged list of all existing roles\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<RoleTO> list();\n+\n+    /**\n+     * Returns a paged list of existing roles.\n+     *\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return paged list of all existing roles\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<RoleTO> list(@QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Returns a paged list of existing roles matching page/size conditions.\n+     *\n+     * @param page result page number\n+     * @param size number of entries per page\n+     * @return paged list of existing roles matching page/size conditions\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<RoleTO> list(\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n+\n+    /**\n+     * Returns a paged list of existing roles matching page/size conditions.\n+     *\n+     * @param page result page number\n+     * @param size number of entries per page\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return paged list of existing roles matching page/size conditions\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<RoleTO> list(\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Returns a paged list of roles matching the provided FIQL search condition.\n+     *\n+     * @param fiql FIQL search expression\n+     * @return paged list of roles matching the provided FIQL search condition\n+     */\n+    @GET\n+    @Path(\"search\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<RoleTO> search(@NotNull @QueryParam(PARAM_FIQL) String fiql);\n+\n+    /**\n+     * Returns a paged list of roles matching the provided FIQL search condition.\n+     *\n+     * @param fiql FIQL search expression\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return paged list of roles matching the provided FIQL search condition\n+     */\n+    @GET\n+    @Path(\"search\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<RoleTO> search(\n+            @NotNull @QueryParam(PARAM_FIQL) String fiql, @QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Returns a paged list of roles matching the provided FIQL search condition.\n+     *\n+     * @param fiql FIQL search expression\n+     * @param page result page number\n+     * @param size number of entries per page\n+     * @return paged list of roles matching the provided FIQL search condition\n+     */\n+    @GET\n+    @Path(\"search\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<RoleTO> search(@QueryParam(PARAM_FIQL) String fiql,\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n+\n+    /**\n+     * Returns a paged list of roles matching the provided FIQL search condition.\n+     *\n+     * @param fiql FIQL search expression\n+     * @param page result page number\n+     * @param size number of entries per page\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return paged list of roles matching the provided FIQL search condition\n+     */\n+    @GET\n+    @Path(\"search\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<RoleTO> search(@QueryParam(PARAM_FIQL) String fiql,\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Creates a new role.\n+     *\n+     * @param roleTO role to be created\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created role as well as the role itself\n+     * enriched with propagation status information - {@link RoleTO} as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>Location</tt> header of created role as well as the \"\n+                + \"role itself enriched with propagation status information - <tt>RoleTO</tt> as <tt>Entity</tt>\")\n+    })\n+    @POST\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response create(@NotNull RoleTO roleTO);\n+\n+    /**\n+     * Updates role matching the provided roleId.\n+     *\n+     * @param roleId id of role to be updated\n+     * @param roleMod modification to be applied to role matching the provided roleId\n+     * @return <tt>Response</tt> object featuring the updated role enriched with propagation status information\n+     * - {@link RoleTO} as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring the updated role enriched with propagation status information - \"\n+                + \"<tt>RoleTO</tt> as <tt>Entity</tt>\")\n+    })\n+    @POST\n+    @Path(\"{roleId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response update(@NotNull @PathParam(\"roleId\") Long roleId, @NotNull RoleMod roleMod);\n+\n+    /**\n+     * Deletes role matching provided roleId.\n+     *\n+     * @param roleId id of role to be deleted\n+     * @return <tt>Response</tt> object featuring the deleted role enriched with propagation status information\n+     * - {@link RoleTO} as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring the deleted role enriched with propagation status information - \"\n+                + \"<tt>RoleTO</tt> as <tt>Entity</tt>\")\n+    })\n+    @DELETE\n+    @Path(\"{roleId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response delete(@NotNull @PathParam(\"roleId\") Long roleId);\n+\n+    /**\n+     * Executes resource-related operations on given role.\n+     *\n+     * @param roleId role id.\n+     * @param type resource association action type\n+     * @param resourceNames external resources to be used for propagation-related operations\n+     * @return <tt>Response</tt> object featuring\n+     * {@link org.apache.syncope.common.reqres.BulkActionResult} as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\")\n+    })\n+    @POST\n+    @Path(\"{roleId}/deassociate/{type}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response bulkDeassociation(@NotNull @PathParam(\"roleId\") Long roleId,\n+            @NotNull @PathParam(\"type\") ResourceDeassociationActionType type,\n+            @NotNull List<ResourceName> resourceNames);\n+\n+    /**\n+     * Executes resource-related operations on given role.\n+     *\n+     * @param roleId role id.\n+     * @param type resource association action type\n+     * @param resourceNames external resources to be used for propagation-related operations\n+     * @return <tt>Response</tt> object featuring {@link org.apache.syncope.common.reqres.BulkActionResult}\n+     * as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\")\n+    })\n+    @POST\n+    @Path(\"{roleId}/associate/{type}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response bulkAssociation(@NotNull @PathParam(\"roleId\") Long roleId,\n+            @NotNull @PathParam(\"type\") ResourceAssociationActionType type,\n+            @NotNull List<ResourceName> resourceNames);\n+}"},{"sha":"bbb4c06d6b24bef1143d521123eea17888aeeebe","filename":"common/src/main/java/org/apache/syncope/common/services/SchemaService.java","status":"modified","additions":119,"deletions":119,"changes":238,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,119 +1,119 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.services;\r\n-\r\n-import java.util.List;\r\n-import javax.validation.constraints.NotNull;\r\n-import javax.ws.rs.Consumes;\r\n-import javax.ws.rs.DELETE;\r\n-import javax.ws.rs.GET;\r\n-import javax.ws.rs.POST;\r\n-import javax.ws.rs.PUT;\r\n-import javax.ws.rs.Path;\r\n-import javax.ws.rs.PathParam;\r\n-import javax.ws.rs.Produces;\r\n-import javax.ws.rs.core.MediaType;\r\n-import javax.ws.rs.core.Response;\r\n-import org.apache.cxf.jaxrs.model.wadl.Description;\r\n-import org.apache.cxf.jaxrs.model.wadl.Descriptions;\r\n-import org.apache.cxf.jaxrs.model.wadl.DocTarget;\r\n-import org.apache.syncope.common.to.AbstractSchemaTO;\r\n-import org.apache.syncope.common.types.AttributableType;\r\n-import org.apache.syncope.common.types.SchemaType;\r\n-\r\n-/**\r\n- * REST operations for attribute schemas.\r\n- */\r\n-@Path(\"schemas/{kind}/{type}\")\r\n-public interface SchemaService extends JAXRSService {\r\n-\r\n-    /**\r\n-     * Returns schema matching the given kind, type and name.\r\n-     *\r\n-     * @param <T> actual SchemaTO\r\n-     * @param attrType kind for schemas to be read\r\n-     * @param schemaType type for schemas to be read\r\n-     * @param schemaName name of schema to be read\r\n-     * @return schema matching the given kind, type and name\r\n-     */\r\n-    @GET\r\n-    @Path(\"{name}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    <T extends AbstractSchemaTO> T read(@NotNull @PathParam(\"kind\") AttributableType attrType,\r\n-            @NotNull @PathParam(\"type\") SchemaType schemaType, @NotNull @PathParam(\"name\") String schemaName);\r\n-\r\n-    /**\r\n-     * Returns a list of schemas with matching kind and type.\r\n-     *\r\n-     * @param <T> actual SchemaTO\r\n-     * @param attrType kind for schemas to be listed\r\n-     * @param schemaType type for schemas to be listed\r\n-     * @return list of schemas with matching kind and type\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    <T extends AbstractSchemaTO> List<T> list(\r\n-            @NotNull @PathParam(\"kind\") AttributableType attrType, @NotNull @PathParam(\"type\") SchemaType schemaType);\r\n-\r\n-    /**\r\n-     * Creates a new schema.\r\n-     *\r\n-     * @param <T> actual SchemaTO\r\n-     * @param attrType kind for schema to be created\r\n-     * @param schemaType type for schema to be created\r\n-     * @param schemaTO schema to be created\r\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created schema\r\n-     */\r\n-    @Descriptions({\r\n-        @Description(target = DocTarget.RESPONSE, value = \"Featuring <tt>Location</tt> header of created schema\")\r\n-    })\r\n-    @POST\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    <T extends AbstractSchemaTO> Response create(@NotNull @PathParam(\"kind\") AttributableType attrType,\r\n-            @NotNull @PathParam(\"type\") SchemaType schemaType, @NotNull T schemaTO);\r\n-\r\n-    /**\r\n-     * Updates the schema matching the given kind, type and name.\r\n-     *\r\n-     * @param <T> actual SchemaTO\r\n-     * @param attrType kind for schemas to be updated\r\n-     * @param schemaType type for schemas to be updated\r\n-     * @param schemaName name of schema to be updated\r\n-     * @param schemaTO updated schema to be stored\r\n-     */\r\n-    @PUT\r\n-    @Path(\"{name}\")\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    <T extends AbstractSchemaTO> void update(@NotNull @PathParam(\"kind\") AttributableType attrType,\r\n-            @NotNull @PathParam(\"type\") SchemaType schemaType,\r\n-            @NotNull @PathParam(\"name\") String schemaName, @NotNull T schemaTO);\r\n-\r\n-    /**\r\n-     * Deletes the schema matching the given kind, type and name.\r\n-     *\r\n-     * @param attrType kind for schema to be deleted\r\n-     * @param schemaType type for schema to be deleted\r\n-     * @param schemaName name of schema to be deleted\r\n-     */\r\n-    @DELETE\r\n-    @Path(\"{name}\")\r\n-    void delete(@NotNull @PathParam(\"kind\") AttributableType attrType,\r\n-            @NotNull @PathParam(\"type\") SchemaType schemaType,\r\n-            @NotNull @PathParam(\"name\") String schemaName);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.services;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.to.AbstractSchemaTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.SchemaType;\n+\n+/**\n+ * REST operations for attribute schemas.\n+ */\n+@Path(\"schemas/{kind}/{type}\")\n+public interface SchemaService extends JAXRSService {\n+\n+    /**\n+     * Returns schema matching the given kind, type and name.\n+     *\n+     * @param <T> actual SchemaTO\n+     * @param attrType kind for schemas to be read\n+     * @param schemaType type for schemas to be read\n+     * @param schemaName name of schema to be read\n+     * @return schema matching the given kind, type and name\n+     */\n+    @GET\n+    @Path(\"{name}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractSchemaTO> T read(@NotNull @PathParam(\"kind\") AttributableType attrType,\n+            @NotNull @PathParam(\"type\") SchemaType schemaType, @NotNull @PathParam(\"name\") String schemaName);\n+\n+    /**\n+     * Returns a list of schemas with matching kind and type.\n+     *\n+     * @param <T> actual SchemaTO\n+     * @param attrType kind for schemas to be listed\n+     * @param schemaType type for schemas to be listed\n+     * @return list of schemas with matching kind and type\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractSchemaTO> List<T> list(\n+            @NotNull @PathParam(\"kind\") AttributableType attrType, @NotNull @PathParam(\"type\") SchemaType schemaType);\n+\n+    /**\n+     * Creates a new schema.\n+     *\n+     * @param <T> actual SchemaTO\n+     * @param attrType kind for schema to be created\n+     * @param schemaType type for schema to be created\n+     * @param schemaTO schema to be created\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created schema\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE, value = \"Featuring <tt>Location</tt> header of created schema\")\n+    })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractSchemaTO> Response create(@NotNull @PathParam(\"kind\") AttributableType attrType,\n+            @NotNull @PathParam(\"type\") SchemaType schemaType, @NotNull T schemaTO);\n+\n+    /**\n+     * Updates the schema matching the given kind, type and name.\n+     *\n+     * @param <T> actual SchemaTO\n+     * @param attrType kind for schemas to be updated\n+     * @param schemaType type for schemas to be updated\n+     * @param schemaName name of schema to be updated\n+     * @param schemaTO updated schema to be stored\n+     */\n+    @PUT\n+    @Path(\"{name}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractSchemaTO> void update(@NotNull @PathParam(\"kind\") AttributableType attrType,\n+            @NotNull @PathParam(\"type\") SchemaType schemaType,\n+            @NotNull @PathParam(\"name\") String schemaName, @NotNull T schemaTO);\n+\n+    /**\n+     * Deletes the schema matching the given kind, type and name.\n+     *\n+     * @param attrType kind for schema to be deleted\n+     * @param schemaType type for schema to be deleted\n+     * @param schemaName name of schema to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{name}\")\n+    void delete(@NotNull @PathParam(\"kind\") AttributableType attrType,\n+            @NotNull @PathParam(\"type\") SchemaType schemaType,\n+            @NotNull @PathParam(\"name\") String schemaName);\n+}"},{"sha":"8efba34532ab5d4afb5e6510528fa480886ca456","filename":"common/src/main/java/org/apache/syncope/common/services/TaskService.java","status":"modified","additions":245,"deletions":245,"changes":490,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,245 +1,245 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.services;\r\n-\r\n-import java.util.List;\r\n-import javax.validation.constraints.Min;\r\n-import javax.validation.constraints.NotNull;\r\n-import javax.ws.rs.Consumes;\r\n-import javax.ws.rs.DELETE;\r\n-import javax.ws.rs.DefaultValue;\r\n-import javax.ws.rs.GET;\r\n-import javax.ws.rs.MatrixParam;\r\n-import javax.ws.rs.POST;\r\n-import javax.ws.rs.PUT;\r\n-import javax.ws.rs.Path;\r\n-import javax.ws.rs.PathParam;\r\n-import javax.ws.rs.Produces;\r\n-import javax.ws.rs.QueryParam;\r\n-import javax.ws.rs.core.MediaType;\r\n-import javax.ws.rs.core.Response;\r\n-import org.apache.cxf.jaxrs.model.wadl.Description;\r\n-import org.apache.cxf.jaxrs.model.wadl.Descriptions;\r\n-import org.apache.cxf.jaxrs.model.wadl.DocTarget;\r\n-import org.apache.syncope.common.reqres.PagedResult;\r\n-import org.apache.syncope.common.reqres.BulkAction;\r\n-import org.apache.syncope.common.reqres.BulkActionResult;\r\n-import org.apache.syncope.common.to.ReportExecTO;\r\n-import org.apache.syncope.common.to.TaskExecTO;\r\n-import org.apache.syncope.common.to.AbstractTaskTO;\r\n-import org.apache.syncope.common.to.SchedTaskTO;\r\n-import org.apache.syncope.common.types.TaskType;\r\n-import org.apache.syncope.common.wrap.JobClass;\r\n-import org.apache.syncope.common.wrap.PushActionClass;\r\n-import org.apache.syncope.common.wrap.SyncActionClass;\r\n-\r\n-/**\r\n- * REST operations for tasks.\r\n- */\r\n-@Path(\"tasks\")\r\n-public interface TaskService extends JAXRSService {\r\n-\r\n-    /**\r\n-     * Returns a list of classes to be used for jobs.\r\n-     *\r\n-     * @return list of classes to be used for jobs\r\n-     */\r\n-    @GET\r\n-    @Path(\"jobClasses\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<JobClass> getJobClasses();\r\n-\r\n-    /**\r\n-     * Returns a list of classes to be used as synchronization actions.\r\n-     *\r\n-     * @return list of classes to be used as synchronization actions\r\n-     */\r\n-    @GET\r\n-    @Path(\"syncActionsClasses\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<SyncActionClass> getSyncActionsClasses();\r\n-\r\n-    /**\r\n-     * Returns a list of classes to be used as push actions.\r\n-     *\r\n-     * @return list of classes to be used as push actions\r\n-     */\r\n-    @GET\r\n-    @Path(\"pushActionsClasses\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    List<PushActionClass> getPushActionsClasses();\r\n-\r\n-    /**\r\n-     * Returns the task matching the given id.\r\n-     *\r\n-     * @param taskId id of task to be read\r\n-     * @param <T> type of taskTO\r\n-     * @return task with matching id\r\n-     */\r\n-    @GET\r\n-    @Path(\"{taskId}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    <T extends AbstractTaskTO> T read(@NotNull @PathParam(\"taskId\") Long taskId);\r\n-\r\n-    /**\r\n-     * Returns the task execution with the given id.\r\n-     *\r\n-     * @param executionId id of task execution to be read\r\n-     * @return task execution with matching Id\r\n-     */\r\n-    @GET\r\n-    @Path(\"executions/{executionId}\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    TaskExecTO readExecution(@NotNull @PathParam(\"executionId\") Long executionId);\r\n-\r\n-    /**\r\n-     * Returns a list of tasks with matching type.\r\n-     *\r\n-     * @param taskType type of tasks to be listed\r\n-     * @param <T> type of taskTO\r\n-     * @return list of tasks with matching type\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    <T extends AbstractTaskTO> PagedResult<T> list(@NotNull @MatrixParam(\"type\") TaskType taskType);\r\n-\r\n-    /**\r\n-     * Returns a list of tasks with matching type.\r\n-     *\r\n-     * @param taskType type of tasks to be listed\r\n-     * @param orderBy list of ordering clauses, separated by comma\r\n-     * @param <T> type of taskTO\r\n-     * @return list of tasks with matching type\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    <T extends AbstractTaskTO> PagedResult<T> list(@NotNull @MatrixParam(\"type\") TaskType taskType,\r\n-            @QueryParam(PARAM_ORDERBY) String orderBy);\r\n-\r\n-    /**\r\n-     * Returns a paged list of existing tasks matching type and page/size conditions.\r\n-     *\r\n-     * @param taskType type of tasks to be listed\r\n-     * @param page page number of tasks in relation to page size\r\n-     * @param size number of tasks listed per page\r\n-     * @param orderBy list of ordering clauses, separated by comma\r\n-     * @param <T> type of taskTO\r\n-     * @return paged list of existing tasks matching type and page/size conditions\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    <T extends AbstractTaskTO> PagedResult<T> list(@NotNull @MatrixParam(\"type\") TaskType taskType,\r\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\r\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\r\n-            @QueryParam(PARAM_ORDERBY) String orderBy);\r\n-\r\n-    /**\r\n-     * Returns a paged list of existing tasks matching type and page/size conditions.\r\n-     *\r\n-     * @param taskType type of tasks to be listed\r\n-     * @param page page number of tasks in relation to page size\r\n-     * @param size number of tasks listed per page\r\n-     * @param <T> type of taskTO\r\n-     * @return paged list of existing tasks matching type and page/size conditions\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    <T extends AbstractTaskTO> PagedResult<T> list(@MatrixParam(\"type\") TaskType taskType,\r\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\r\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\r\n-\r\n-    /**\r\n-     * Creates a new task.\r\n-     *\r\n-     * @param taskTO task to be created\r\n-     * @param <T> type of taskTO\r\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created task\r\n-     */\r\n-    @Descriptions({\r\n-        @Description(target = DocTarget.RESPONSE, value = \"Featuring <tt>Location</tt> header of created task\")\r\n-    })\r\n-    @POST\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    <T extends SchedTaskTO> Response create(@NotNull T taskTO);\r\n-\r\n-    /**\r\n-     * Updates the task matching the provided id.\r\n-     *\r\n-     * @param taskId id of task to be updated\r\n-     * @param taskTO updated task to be stored\r\n-     */\r\n-    @PUT\r\n-    @Path(\"{taskId}\")\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    void update(@NotNull @PathParam(\"taskId\") Long taskId, @NotNull AbstractTaskTO taskTO);\r\n-\r\n-    /**\r\n-     * Deletes the task matching the provided id.\r\n-     *\r\n-     * @param taskId id of task to be deleted\r\n-     */\r\n-    @DELETE\r\n-    @Path(\"{taskId}\")\r\n-    void delete(@NotNull @PathParam(\"taskId\") Long taskId);\r\n-\r\n-    /**\r\n-     * Deletes the task execution matching the provided id.\r\n-     *\r\n-     * @param executionId id of task execution to be deleted\r\n-     */\r\n-    @DELETE\r\n-    @Path(\"executions/{executionId}\")\r\n-    void deleteExecution(@NotNull @PathParam(\"executionId\") Long executionId);\r\n-\r\n-    /**\r\n-     * Executes the task matching the given id.\r\n-     *\r\n-     * @param taskId id of task to be executed\r\n-     * @param dryRun if true, task will only be simulated\r\n-     * @return execution report for the task matching the given id\r\n-     */\r\n-    @POST\r\n-    @Path(\"{taskId}/execute\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    TaskExecTO execute(@NotNull @PathParam(\"taskId\") Long taskId,\r\n-            @QueryParam(\"dryRun\") @DefaultValue(\"false\") boolean dryRun);\r\n-\r\n-    /**\r\n-     * Reports task execution result.\r\n-     *\r\n-     * @param executionId id of task execution being reported\r\n-     * @param reportExec execution being reported\r\n-     */\r\n-    @POST\r\n-    @Path(\"executions/{executionId}/report\")\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    void report(@NotNull @PathParam(\"executionId\") Long executionId, @NotNull ReportExecTO reportExec);\r\n-\r\n-    /**\r\n-     * Executes the provided bulk action.\r\n-     *\r\n-     * @param bulkAction list of task ids against which the bulk action will be performed.\r\n-     * @return Bulk action result\r\n-     */\r\n-    @POST\r\n-    @Path(\"bulk\")\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    BulkActionResult bulk(@NotNull BulkAction bulkAction);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.services;\n+\n+import java.util.List;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.MatrixParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.reqres.PagedResult;\n+import org.apache.syncope.common.reqres.BulkAction;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n+import org.apache.syncope.common.to.ReportExecTO;\n+import org.apache.syncope.common.to.TaskExecTO;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n+import org.apache.syncope.common.to.SchedTaskTO;\n+import org.apache.syncope.common.types.TaskType;\n+import org.apache.syncope.common.wrap.JobClass;\n+import org.apache.syncope.common.wrap.PushActionClass;\n+import org.apache.syncope.common.wrap.SyncActionClass;\n+\n+/**\n+ * REST operations for tasks.\n+ */\n+@Path(\"tasks\")\n+public interface TaskService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of classes to be used for jobs.\n+     *\n+     * @return list of classes to be used for jobs\n+     */\n+    @GET\n+    @Path(\"jobClasses\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<JobClass> getJobClasses();\n+\n+    /**\n+     * Returns a list of classes to be used as synchronization actions.\n+     *\n+     * @return list of classes to be used as synchronization actions\n+     */\n+    @GET\n+    @Path(\"syncActionsClasses\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<SyncActionClass> getSyncActionsClasses();\n+\n+    /**\n+     * Returns a list of classes to be used as push actions.\n+     *\n+     * @return list of classes to be used as push actions\n+     */\n+    @GET\n+    @Path(\"pushActionsClasses\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<PushActionClass> getPushActionsClasses();\n+\n+    /**\n+     * Returns the task matching the given id.\n+     *\n+     * @param taskId id of task to be read\n+     * @param <T> type of taskTO\n+     * @return task with matching id\n+     */\n+    @GET\n+    @Path(\"{taskId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractTaskTO> T read(@NotNull @PathParam(\"taskId\") Long taskId);\n+\n+    /**\n+     * Returns the task execution with the given id.\n+     *\n+     * @param executionId id of task execution to be read\n+     * @return task execution with matching Id\n+     */\n+    @GET\n+    @Path(\"executions/{executionId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    TaskExecTO readExecution(@NotNull @PathParam(\"executionId\") Long executionId);\n+\n+    /**\n+     * Returns a list of tasks with matching type.\n+     *\n+     * @param taskType type of tasks to be listed\n+     * @param <T> type of taskTO\n+     * @return list of tasks with matching type\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractTaskTO> PagedResult<T> list(@NotNull @MatrixParam(\"type\") TaskType taskType);\n+\n+    /**\n+     * Returns a list of tasks with matching type.\n+     *\n+     * @param taskType type of tasks to be listed\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @param <T> type of taskTO\n+     * @return list of tasks with matching type\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractTaskTO> PagedResult<T> list(@NotNull @MatrixParam(\"type\") TaskType taskType,\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Returns a paged list of existing tasks matching type and page/size conditions.\n+     *\n+     * @param taskType type of tasks to be listed\n+     * @param page page number of tasks in relation to page size\n+     * @param size number of tasks listed per page\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @param <T> type of taskTO\n+     * @return paged list of existing tasks matching type and page/size conditions\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractTaskTO> PagedResult<T> list(@NotNull @MatrixParam(\"type\") TaskType taskType,\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Returns a paged list of existing tasks matching type and page/size conditions.\n+     *\n+     * @param taskType type of tasks to be listed\n+     * @param page page number of tasks in relation to page size\n+     * @param size number of tasks listed per page\n+     * @param <T> type of taskTO\n+     * @return paged list of existing tasks matching type and page/size conditions\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractTaskTO> PagedResult<T> list(@MatrixParam(\"type\") TaskType taskType,\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n+\n+    /**\n+     * Creates a new task.\n+     *\n+     * @param taskTO task to be created\n+     * @param <T> type of taskTO\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created task\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE, value = \"Featuring <tt>Location</tt> header of created task\")\n+    })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends SchedTaskTO> Response create(@NotNull T taskTO);\n+\n+    /**\n+     * Updates the task matching the provided id.\n+     *\n+     * @param taskId id of task to be updated\n+     * @param taskTO updated task to be stored\n+     */\n+    @PUT\n+    @Path(\"{taskId}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void update(@NotNull @PathParam(\"taskId\") Long taskId, @NotNull AbstractTaskTO taskTO);\n+\n+    /**\n+     * Deletes the task matching the provided id.\n+     *\n+     * @param taskId id of task to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{taskId}\")\n+    void delete(@NotNull @PathParam(\"taskId\") Long taskId);\n+\n+    /**\n+     * Deletes the task execution matching the provided id.\n+     *\n+     * @param executionId id of task execution to be deleted\n+     */\n+    @DELETE\n+    @Path(\"executions/{executionId}\")\n+    void deleteExecution(@NotNull @PathParam(\"executionId\") Long executionId);\n+\n+    /**\n+     * Executes the task matching the given id.\n+     *\n+     * @param taskId id of task to be executed\n+     * @param dryRun if true, task will only be simulated\n+     * @return execution report for the task matching the given id\n+     */\n+    @POST\n+    @Path(\"{taskId}/execute\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    TaskExecTO execute(@NotNull @PathParam(\"taskId\") Long taskId,\n+            @QueryParam(\"dryRun\") @DefaultValue(\"false\") boolean dryRun);\n+\n+    /**\n+     * Reports task execution result.\n+     *\n+     * @param executionId id of task execution being reported\n+     * @param reportExec execution being reported\n+     */\n+    @POST\n+    @Path(\"executions/{executionId}/report\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void report(@NotNull @PathParam(\"executionId\") Long executionId, @NotNull ReportExecTO reportExec);\n+\n+    /**\n+     * Executes the provided bulk action.\n+     *\n+     * @param bulkAction list of task ids against which the bulk action will be performed.\n+     * @return Bulk action result\n+     */\n+    @POST\n+    @Path(\"bulk\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    BulkActionResult bulk(@NotNull BulkAction bulkAction);\n+}"},{"sha":"2a291e0f648e4b82005b7aa88e93e5718e687932","filename":"common/src/main/java/org/apache/syncope/common/services/WorkflowService.java","status":"modified","additions":89,"deletions":89,"changes":178,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,89 +1,89 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.services;\r\n-\r\n-import javax.validation.constraints.NotNull;\r\n-import javax.ws.rs.Consumes;\r\n-import javax.ws.rs.GET;\r\n-import javax.ws.rs.OPTIONS;\r\n-import javax.ws.rs.PUT;\r\n-import javax.ws.rs.Path;\r\n-import javax.ws.rs.PathParam;\r\n-import javax.ws.rs.Produces;\r\n-import javax.ws.rs.core.MediaType;\r\n-import javax.ws.rs.core.Response;\r\n-import org.apache.cxf.jaxrs.model.wadl.Description;\r\n-import org.apache.cxf.jaxrs.model.wadl.Descriptions;\r\n-import org.apache.cxf.jaxrs.model.wadl.DocTarget;\r\n-import org.apache.syncope.common.types.RESTHeaders;\r\n-import org.apache.syncope.common.types.SubjectType;\r\n-\r\n-/**\r\n- * REST operations for workflow definition management.\r\n- */\r\n-@Path(\"workflows/{kind}\")\r\n-public interface WorkflowService extends JAXRSService {\r\n-\r\n-    /**\r\n-     * Checks whether Activiti is enabled (for users or roles).\r\n-     *\r\n-     * @param kind user or role\r\n-     * @return <tt>Response</tt> contains special syncope HTTP header indicating if Activiti is enabled for\r\n-     * users / roles\r\n-     * @see org.apache.syncope.common.types.RESTHeaders#ACTIVITI_USER_ENABLED\r\n-     * @see org.apache.syncope.common.types.RESTHeaders#ACTIVITI_ROLE_ENABLED\r\n-     */\r\n-    @Descriptions({\r\n-        @Description(target = DocTarget.RESPONSE,\r\n-                value = \"Contains special syncope HTTP header indicating if Activiti is enabled for users / roles\")\r\n-    })\r\n-    @OPTIONS\r\n-    Response getOptions(@NotNull @PathParam(\"kind\") SubjectType kind);\r\n-\r\n-    /**\r\n-     * Exports workflow definition for matching kind.\r\n-     *\r\n-     * @param kind user or role\r\n-     * @return workflow definition for matching kind\r\n-     */\r\n-    @GET\r\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    Response exportDefinition(@NotNull @PathParam(\"kind\") SubjectType kind);\r\n-\r\n-    /**\r\n-     * Exports workflow diagram representation.\r\n-     *\r\n-     * @param kind user or role\r\n-     * @return workflow diagram representation\r\n-     */\r\n-    @GET\r\n-    @Path(\"diagram.png\")\r\n-    @Produces({ RESTHeaders.MEDIATYPE_IMAGE_PNG })\r\n-    Response exportDiagram(@NotNull @PathParam(\"kind\") SubjectType kind);\r\n-\r\n-    /**\r\n-     * Imports workflow definition for matching kind.\r\n-     *\r\n-     * @param kind user or role\r\n-     * @param definition workflow definition for matching kind\r\n-     */\r\n-    @PUT\r\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-    void importDefinition(@NotNull @PathParam(\"kind\") SubjectType kind, @NotNull String definition);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.services;\n+\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.OPTIONS;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.types.RESTHeaders;\n+import org.apache.syncope.common.types.SubjectType;\n+\n+/**\n+ * REST operations for workflow definition management.\n+ */\n+@Path(\"workflows/{kind}\")\n+public interface WorkflowService extends JAXRSService {\n+\n+    /**\n+     * Checks whether Activiti is enabled (for users or roles).\n+     *\n+     * @param kind user or role\n+     * @return <tt>Response</tt> contains special syncope HTTP header indicating if Activiti is enabled for\n+     * users / roles\n+     * @see org.apache.syncope.common.types.RESTHeaders#ACTIVITI_USER_ENABLED\n+     * @see org.apache.syncope.common.types.RESTHeaders#ACTIVITI_ROLE_ENABLED\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Contains special syncope HTTP header indicating if Activiti is enabled for users / roles\")\n+    })\n+    @OPTIONS\n+    Response getOptions(@NotNull @PathParam(\"kind\") SubjectType kind);\n+\n+    /**\n+     * Exports workflow definition for matching kind.\n+     *\n+     * @param kind user or role\n+     * @return workflow definition for matching kind\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response exportDefinition(@NotNull @PathParam(\"kind\") SubjectType kind);\n+\n+    /**\n+     * Exports workflow diagram representation.\n+     *\n+     * @param kind user or role\n+     * @return workflow diagram representation\n+     */\n+    @GET\n+    @Path(\"diagram.png\")\n+    @Produces({ RESTHeaders.MEDIATYPE_IMAGE_PNG })\n+    Response exportDiagram(@NotNull @PathParam(\"kind\") SubjectType kind);\n+\n+    /**\n+     * Imports workflow definition for matching kind.\n+     *\n+     * @param kind user or role\n+     * @param definition workflow definition for matching kind\n+     */\n+    @PUT\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void importDefinition(@NotNull @PathParam(\"kind\") SubjectType kind, @NotNull String definition);\n+}"},{"sha":"232598e82e105aadf55eb415dce2837cdd5b24ea","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractAttributableTO.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractAttributableTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,86 +1,86 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonIgnore;\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.Collections;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-@XmlType\r\n-public abstract class AbstractAttributableTO extends ConnObjectTO {\r\n-\r\n-    private static final long serialVersionUID = 4083884098736820255L;\r\n-\r\n-    private long id;\r\n-\r\n-    private final List<AttributeTO> derAttrs = new ArrayList<AttributeTO>();\r\n-\r\n-    private final List<AttributeTO> virAttrs = new ArrayList<AttributeTO>();\r\n-\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(final long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    @JsonIgnore\r\n-    public Map<String, AttributeTO> getDerAttrMap() {\r\n-        Map<String, AttributeTO> result = new HashMap<String, AttributeTO>(derAttrs.size());\r\n-        for (AttributeTO attributeTO : derAttrs) {\r\n-            result.put(attributeTO.getSchema(), attributeTO);\r\n-        }\r\n-        result = Collections.unmodifiableMap(result);\r\n-\r\n-        return result;\r\n-    }\r\n-\r\n-    @JsonIgnore\r\n-    public Map<String, AttributeTO> getVirAttrMap() {\r\n-        Map<String, AttributeTO> result = new HashMap<String, AttributeTO>(virAttrs.size());\r\n-        for (AttributeTO attributeTO : virAttrs) {\r\n-            result.put(attributeTO.getSchema(), attributeTO);\r\n-        }\r\n-        result = Collections.unmodifiableMap(result);\r\n-\r\n-        return result;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"derivedAttributes\")\r\n-    @XmlElement(name = \"attribute\")\r\n-    @JsonProperty(\"derivedAttributes\")\r\n-    public List<AttributeTO> getDerAttrs() {\r\n-        return derAttrs;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"virtualAttributes\")\r\n-    @XmlElement(name = \"attribute\")\r\n-    @JsonProperty(\"virtualAttributes\")\r\n-    public List<AttributeTO> getVirAttrs() {\r\n-        return virAttrs;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlType\n+public abstract class AbstractAttributableTO extends ConnObjectTO {\n+\n+    private static final long serialVersionUID = 4083884098736820255L;\n+\n+    private long id;\n+\n+    private final List<AttributeTO> derAttrs = new ArrayList<AttributeTO>();\n+\n+    private final List<AttributeTO> virAttrs = new ArrayList<AttributeTO>();\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(final long id) {\n+        this.id = id;\n+    }\n+\n+    @JsonIgnore\n+    public Map<String, AttributeTO> getDerAttrMap() {\n+        Map<String, AttributeTO> result = new HashMap<String, AttributeTO>(derAttrs.size());\n+        for (AttributeTO attributeTO : derAttrs) {\n+            result.put(attributeTO.getSchema(), attributeTO);\n+        }\n+        result = Collections.unmodifiableMap(result);\n+\n+        return result;\n+    }\n+\n+    @JsonIgnore\n+    public Map<String, AttributeTO> getVirAttrMap() {\n+        Map<String, AttributeTO> result = new HashMap<String, AttributeTO>(virAttrs.size());\n+        for (AttributeTO attributeTO : virAttrs) {\n+            result.put(attributeTO.getSchema(), attributeTO);\n+        }\n+        result = Collections.unmodifiableMap(result);\n+\n+        return result;\n+    }\n+\n+    @XmlElementWrapper(name = \"derivedAttributes\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"derivedAttributes\")\n+    public List<AttributeTO> getDerAttrs() {\n+        return derAttrs;\n+    }\n+\n+    @XmlElementWrapper(name = \"virtualAttributes\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"virtualAttributes\")\n+    public List<AttributeTO> getVirAttrs() {\n+        return virAttrs;\n+    }\n+}"},{"sha":"4745c9b37c4dd75a4e2e2ca3ba0e0ec679d07ff7","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractExecTO.java","status":"modified","additions":89,"deletions":89,"changes":178,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractExecTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,89 +1,89 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import java.util.Date;\r\n-\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-\r\n-@XmlType\r\n-public class AbstractExecTO extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = -4621191979198357081L;\r\n-\r\n-    protected long id;\r\n-\r\n-    protected String status;\r\n-\r\n-    protected String message;\r\n-\r\n-    protected Date startDate;\r\n-\r\n-    protected Date endDate;\r\n-\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getMessage() {\r\n-        return message;\r\n-    }\r\n-\r\n-    public void setMessage(String message) {\r\n-        this.message = message;\r\n-    }\r\n-\r\n-    public String getStatus() {\r\n-        return status;\r\n-    }\r\n-\r\n-    public void setStatus(String status) {\r\n-        this.status = status;\r\n-    }\r\n-\r\n-    public Date getStartDate() {\r\n-        return startDate == null\r\n-                ? null\r\n-                : new Date(startDate.getTime());\r\n-    }\r\n-\r\n-    public void setStartDate(Date startDate) {\r\n-        if (startDate != null) {\r\n-            this.startDate = new Date(startDate.getTime());\r\n-        }\r\n-    }\r\n-\r\n-    public Date getEndDate() {\r\n-        return endDate == null\r\n-                ? null\r\n-                : new Date(endDate.getTime());\r\n-    }\r\n-\r\n-    public void setEndDate(Date endDate) {\r\n-        if (endDate != null) {\r\n-            this.endDate = new Date(endDate.getTime());\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import java.util.Date;\n+\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+\n+@XmlType\n+public class AbstractExecTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -4621191979198357081L;\n+\n+    protected long id;\n+\n+    protected String status;\n+\n+    protected String message;\n+\n+    protected Date startDate;\n+\n+    protected Date endDate;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public void setMessage(String message) {\n+        this.message = message;\n+    }\n+\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(String status) {\n+        this.status = status;\n+    }\n+\n+    public Date getStartDate() {\n+        return startDate == null\n+                ? null\n+                : new Date(startDate.getTime());\n+    }\n+\n+    public void setStartDate(Date startDate) {\n+        if (startDate != null) {\n+            this.startDate = new Date(startDate.getTime());\n+        }\n+    }\n+\n+    public Date getEndDate() {\n+        return endDate == null\n+                ? null\n+                : new Date(endDate.getTime());\n+    }\n+\n+    public void setEndDate(Date endDate) {\n+        if (endDate != null) {\n+            this.endDate = new Date(endDate.getTime());\n+        }\n+    }\n+}"},{"sha":"d5415560a47e24cc3d4552111bb599fde9268d24","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractPolicyTO.java","status":"modified","additions":91,"deletions":91,"changes":182,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractPolicyTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,91 +1,91 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlSeeAlso;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-import org.apache.syncope.common.types.PolicyType;\r\n-\r\n-@XmlRootElement(name = \"abstractPolicy\")\r\n-@XmlType\r\n-@XmlSeeAlso({ AccountPolicyTO.class, PasswordPolicyTO.class, SyncPolicyTO.class })\r\n-@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\r\n-public abstract class AbstractPolicyTO extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = -2903888572649721035L;\r\n-\r\n-    private long id;\r\n-\r\n-    private String description;\r\n-\r\n-    private PolicyType type;\r\n-\r\n-    private final List<String> usedByResources = new ArrayList<String>();\r\n-\r\n-    private final List<Long> usedByRoles = new ArrayList<Long>();\r\n-\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getDescription() {\r\n-        return description;\r\n-    }\r\n-\r\n-    public void setDescription(final String description) {\r\n-        this.description = description;\r\n-    }\r\n-\r\n-    public PolicyType getType() {\r\n-        return type;\r\n-    }\r\n-\r\n-    public void setType(final PolicyType type) {\r\n-        this.type = type;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"usedByResources\")\r\n-    @XmlElement(name = \"resource\")\r\n-    @JsonProperty(\"usedByResources\")\r\n-    public List<String> getUsedByResources() {\r\n-        return usedByResources;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"usedByRoles\")\r\n-    @XmlElement(name = \"role\")\r\n-    @JsonProperty(\"usedByRoles\")\r\n-    public List<Long> getUsedByRoles() {\r\n-        return usedByRoles;\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.types.PolicyType;\n+\n+@XmlRootElement(name = \"abstractPolicy\")\n+@XmlType\n+@XmlSeeAlso({ AccountPolicyTO.class, PasswordPolicyTO.class, SyncPolicyTO.class })\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n+public abstract class AbstractPolicyTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -2903888572649721035L;\n+\n+    private long id;\n+\n+    private String description;\n+\n+    private PolicyType type;\n+\n+    private final List<String> usedByResources = new ArrayList<String>();\n+\n+    private final List<Long> usedByRoles = new ArrayList<Long>();\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(final String description) {\n+        this.description = description;\n+    }\n+\n+    public PolicyType getType() {\n+        return type;\n+    }\n+\n+    public void setType(final PolicyType type) {\n+        this.type = type;\n+    }\n+\n+    @XmlElementWrapper(name = \"usedByResources\")\n+    @XmlElement(name = \"resource\")\n+    @JsonProperty(\"usedByResources\")\n+    public List<String> getUsedByResources() {\n+        return usedByResources;\n+    }\n+\n+    @XmlElementWrapper(name = \"usedByRoles\")\n+    @XmlElement(name = \"role\")\n+    @JsonProperty(\"usedByRoles\")\n+    public List<Long> getUsedByRoles() {\n+        return usedByRoles;\n+    }\n+\n+}"},{"sha":"7742f8431bce641f656727ab55b20a70568eff26","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractSchemaTO.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,45 +1,45 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlSeeAlso;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-\r\n-@XmlRootElement(name = \"abstractSchema\")\r\n-@XmlType\r\n-@XmlSeeAlso({ SchemaTO.class, DerSchemaTO.class, VirSchemaTO.class })\r\n-@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\r\n-public abstract class AbstractSchemaTO extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = 4088388951694301759L;\r\n-\r\n-    private String name;\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(final String name) {\r\n-        this.name = name;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"abstractSchema\")\n+@XmlType\n+@XmlSeeAlso({ SchemaTO.class, DerSchemaTO.class, VirSchemaTO.class })\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n+public abstract class AbstractSchemaTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 4088388951694301759L;\n+\n+    private String name;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"8d6c1295e2c370e4e5add7a15df268bd5ca88303","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractSyncTaskTO.java","status":"modified","additions":117,"deletions":117,"changes":234,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSyncTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSyncTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSyncTaskTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,117 +1,117 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlSeeAlso;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-import org.apache.syncope.common.types.MatchingRule;\r\n-import org.apache.syncope.common.types.UnmatchingRule;\r\n-\r\n-@XmlRootElement(name = \"abstractSyncTask\")\r\n-@XmlType\r\n-@XmlSeeAlso({ PushTaskTO.class, SyncTaskTO.class })\r\n-public class AbstractSyncTaskTO extends SchedTaskTO {\r\n-\r\n-    private static final long serialVersionUID = -2143537546915809016L;\r\n-\r\n-    private String resource;\r\n-\r\n-    private boolean performCreate;\r\n-\r\n-    private boolean performUpdate;\r\n-\r\n-    private boolean performDelete;\r\n-\r\n-    private boolean syncStatus;\r\n-\r\n-    private UnmatchingRule unmatchingRule;\r\n-\r\n-    private MatchingRule matchingRule;\r\n-\r\n-    private List<String> actionsClassNames = new ArrayList<String>();\r\n-\r\n-    public String getResource() {\r\n-        return resource;\r\n-    }\r\n-\r\n-    public void setResource(String resource) {\r\n-        this.resource = resource;\r\n-    }\r\n-\r\n-    public boolean isPerformCreate() {\r\n-        return performCreate;\r\n-    }\r\n-\r\n-    public void setPerformCreate(boolean performCreate) {\r\n-        this.performCreate = performCreate;\r\n-    }\r\n-\r\n-    public boolean isPerformUpdate() {\r\n-        return performUpdate;\r\n-    }\r\n-\r\n-    public void setPerformUpdate(boolean performUpdate) {\r\n-        this.performUpdate = performUpdate;\r\n-    }\r\n-\r\n-    public boolean isPerformDelete() {\r\n-        return performDelete;\r\n-    }\r\n-\r\n-    public void setPerformDelete(boolean performDelete) {\r\n-        this.performDelete = performDelete;\r\n-    }\r\n-\r\n-    public boolean isSyncStatus() {\r\n-        return syncStatus;\r\n-    }\r\n-\r\n-    public void setSyncStatus(boolean syncStatus) {\r\n-        this.syncStatus = syncStatus;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"actionsClassNames\")\r\n-    @XmlElement(name = \"actionsClassName\")\r\n-    @JsonProperty(\"actionsClassNames\")\r\n-    public List<String> getActionsClassNames() {\r\n-        return actionsClassNames;\r\n-    }\r\n-\r\n-    public UnmatchingRule getUnmatchingRule() {\r\n-        return unmatchingRule;\r\n-    }\r\n-\r\n-    public void setUnmatchingRule(final UnmatchingRule unmatchigRule) {\r\n-        this.unmatchingRule = unmatchigRule;\r\n-    }\r\n-\r\n-    public MatchingRule getMatchingRule() {\r\n-        return matchingRule;\r\n-    }\r\n-\r\n-    public void setMatchingRule(final MatchingRule matchigRule) {\r\n-        this.matchingRule = matchigRule;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.types.MatchingRule;\n+import org.apache.syncope.common.types.UnmatchingRule;\n+\n+@XmlRootElement(name = \"abstractSyncTask\")\n+@XmlType\n+@XmlSeeAlso({ PushTaskTO.class, SyncTaskTO.class })\n+public class AbstractSyncTaskTO extends SchedTaskTO {\n+\n+    private static final long serialVersionUID = -2143537546915809016L;\n+\n+    private String resource;\n+\n+    private boolean performCreate;\n+\n+    private boolean performUpdate;\n+\n+    private boolean performDelete;\n+\n+    private boolean syncStatus;\n+\n+    private UnmatchingRule unmatchingRule;\n+\n+    private MatchingRule matchingRule;\n+\n+    private List<String> actionsClassNames = new ArrayList<String>();\n+\n+    public String getResource() {\n+        return resource;\n+    }\n+\n+    public void setResource(String resource) {\n+        this.resource = resource;\n+    }\n+\n+    public boolean isPerformCreate() {\n+        return performCreate;\n+    }\n+\n+    public void setPerformCreate(boolean performCreate) {\n+        this.performCreate = performCreate;\n+    }\n+\n+    public boolean isPerformUpdate() {\n+        return performUpdate;\n+    }\n+\n+    public void setPerformUpdate(boolean performUpdate) {\n+        this.performUpdate = performUpdate;\n+    }\n+\n+    public boolean isPerformDelete() {\n+        return performDelete;\n+    }\n+\n+    public void setPerformDelete(boolean performDelete) {\n+        this.performDelete = performDelete;\n+    }\n+\n+    public boolean isSyncStatus() {\n+        return syncStatus;\n+    }\n+\n+    public void setSyncStatus(boolean syncStatus) {\n+        this.syncStatus = syncStatus;\n+    }\n+\n+    @XmlElementWrapper(name = \"actionsClassNames\")\n+    @XmlElement(name = \"actionsClassName\")\n+    @JsonProperty(\"actionsClassNames\")\n+    public List<String> getActionsClassNames() {\n+        return actionsClassNames;\n+    }\n+\n+    public UnmatchingRule getUnmatchingRule() {\n+        return unmatchingRule;\n+    }\n+\n+    public void setUnmatchingRule(final UnmatchingRule unmatchigRule) {\n+        this.unmatchingRule = unmatchigRule;\n+    }\n+\n+    public MatchingRule getMatchingRule() {\n+        return matchingRule;\n+    }\n+\n+    public void setMatchingRule(final MatchingRule matchigRule) {\n+        this.matchingRule = matchigRule;\n+    }\n+}"},{"sha":"518f985d3ac075d3947c2cf60c04c1b7194b6c52","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractTaskTO.java","status":"modified","additions":100,"deletions":100,"changes":200,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractTaskTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,100 +1,100 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Date;\r\n-import java.util.List;\r\n-\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlSeeAlso;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-\r\n-@XmlRootElement(name = \"abstractTask\")\r\n-@XmlType\r\n-@XmlSeeAlso({ PropagationTaskTO.class, SchedTaskTO.class, NotificationTaskTO.class })\r\n-@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\r\n-public abstract class AbstractTaskTO extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = 386450127003321197L;\r\n-\r\n-    private long id;\r\n-\r\n-    private String latestExecStatus;\r\n-\r\n-    private List<TaskExecTO> executions = new ArrayList<TaskExecTO>();\r\n-\r\n-    private Date startDate;\r\n-\r\n-    private Date endDate;\r\n-\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(final long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getLatestExecStatus() {\r\n-        return latestExecStatus;\r\n-    }\r\n-\r\n-    public void setLatestExecStatus(final String latestExecStatus) {\r\n-        this.latestExecStatus = latestExecStatus;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"executions\")\r\n-    @XmlElement(name = \"execution\")\r\n-    @JsonProperty(\"executions\")\r\n-    public List<TaskExecTO> getExecutions() {\r\n-        return executions;\r\n-    }\r\n-\r\n-    public Date getStartDate() {\r\n-        return startDate == null\r\n-                ? null\r\n-                : new Date(startDate.getTime());\r\n-    }\r\n-\r\n-    public void setStartDate(final Date startDate) {\r\n-        if (startDate != null) {\r\n-            this.startDate = new Date(startDate.getTime());\r\n-        }\r\n-    }\r\n-\r\n-    public Date getEndDate() {\r\n-        return endDate == null\r\n-                ? null\r\n-                : new Date(endDate.getTime());\r\n-    }\r\n-\r\n-    public void setEndDate(final Date endDate) {\r\n-        if (endDate != null) {\r\n-            this.endDate = new Date(endDate.getTime());\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"abstractTask\")\n+@XmlType\n+@XmlSeeAlso({ PropagationTaskTO.class, SchedTaskTO.class, NotificationTaskTO.class })\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n+public abstract class AbstractTaskTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 386450127003321197L;\n+\n+    private long id;\n+\n+    private String latestExecStatus;\n+\n+    private List<TaskExecTO> executions = new ArrayList<TaskExecTO>();\n+\n+    private Date startDate;\n+\n+    private Date endDate;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(final long id) {\n+        this.id = id;\n+    }\n+\n+    public String getLatestExecStatus() {\n+        return latestExecStatus;\n+    }\n+\n+    public void setLatestExecStatus(final String latestExecStatus) {\n+        this.latestExecStatus = latestExecStatus;\n+    }\n+\n+    @XmlElementWrapper(name = \"executions\")\n+    @XmlElement(name = \"execution\")\n+    @JsonProperty(\"executions\")\n+    public List<TaskExecTO> getExecutions() {\n+        return executions;\n+    }\n+\n+    public Date getStartDate() {\n+        return startDate == null\n+                ? null\n+                : new Date(startDate.getTime());\n+    }\n+\n+    public void setStartDate(final Date startDate) {\n+        if (startDate != null) {\n+            this.startDate = new Date(startDate.getTime());\n+        }\n+    }\n+\n+    public Date getEndDate() {\n+        return endDate == null\n+                ? null\n+                : new Date(endDate.getTime());\n+    }\n+\n+    public void setEndDate(final Date endDate) {\n+        if (endDate != null) {\n+            this.endDate = new Date(endDate.getTime());\n+        }\n+    }\n+}"},{"sha":"34dce9524e335641c16a13d8fb6c755c450b380a","filename":"common/src/main/java/org/apache/syncope/common/to/AccountPolicyTO.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAccountPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAccountPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAccountPolicyTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,69 +1,69 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.types.AccountPolicySpec;\r\n-import org.apache.syncope.common.types.PolicyType;\r\n-\r\n-@XmlRootElement(name = \"accountPolicy\")\r\n-@XmlType\r\n-public class AccountPolicyTO extends AbstractPolicyTO {\r\n-\r\n-    private static final long serialVersionUID = -1557150042828800134L;\r\n-\r\n-    private AccountPolicySpec specification;\r\n-\r\n-    private final List<String> resources = new ArrayList<String>();\r\n-\r\n-    public AccountPolicyTO() {\r\n-        this(false);\r\n-    }\r\n-\r\n-    public AccountPolicyTO(boolean global) {\r\n-        super();\r\n-\r\n-        PolicyType type = global\r\n-                ? PolicyType.GLOBAL_ACCOUNT\r\n-                : PolicyType.ACCOUNT;\r\n-        setType(type);\r\n-    }\r\n-\r\n-    public void setSpecification(final AccountPolicySpec specification) {\r\n-        this.specification = specification;\r\n-    }\r\n-\r\n-    public AccountPolicySpec getSpecification() {\r\n-        return specification;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"resources\")\r\n-    @XmlElement(name = \"resource\")\r\n-    @JsonProperty(\"resources\")\r\n-    public List<String> getResources() {\r\n-        return resources;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.types.AccountPolicySpec;\n+import org.apache.syncope.common.types.PolicyType;\n+\n+@XmlRootElement(name = \"accountPolicy\")\n+@XmlType\n+public class AccountPolicyTO extends AbstractPolicyTO {\n+\n+    private static final long serialVersionUID = -1557150042828800134L;\n+\n+    private AccountPolicySpec specification;\n+\n+    private final List<String> resources = new ArrayList<String>();\n+\n+    public AccountPolicyTO() {\n+        this(false);\n+    }\n+\n+    public AccountPolicyTO(boolean global) {\n+        super();\n+\n+        PolicyType type = global\n+                ? PolicyType.GLOBAL_ACCOUNT\n+                : PolicyType.ACCOUNT;\n+        setType(type);\n+    }\n+\n+    public void setSpecification(final AccountPolicySpec specification) {\n+        this.specification = specification;\n+    }\n+\n+    public AccountPolicySpec getSpecification() {\n+        return specification;\n+    }\n+\n+    @XmlElementWrapper(name = \"resources\")\n+    @XmlElement(name = \"resource\")\n+    @JsonProperty(\"resources\")\n+    public List<String> getResources() {\n+        return resources;\n+    }\n+}"},{"sha":"0e4d55d57c67c05f886cbffadfd1fb5b339234a2","filename":"common/src/main/java/org/apache/syncope/common/to/AttributeTO.java","status":"modified","additions":94,"deletions":94,"changes":188,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAttributeTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAttributeTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAttributeTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,94 +1,94 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-\r\n-@XmlRootElement(name = \"attribute\")\r\n-@XmlType\r\n-public class AttributeTO extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = 4941691338796323623L;\r\n-\r\n-    /**\r\n-     * Name of the schema that this attribute is referring to.\r\n-     */\r\n-    private String schema;\r\n-\r\n-    /**\r\n-     * Set of (string) values of this attribute.\r\n-     */\r\n-    private final List<String> values;\r\n-\r\n-    /**\r\n-     * Whether this attribute is read-only or not.\r\n-     */\r\n-    private boolean readonly;\r\n-\r\n-    /**\r\n-     * Default constructor.\r\n-     */\r\n-    public AttributeTO() {\r\n-        super();\r\n-        values = new ArrayList<String>();\r\n-        readonly = false;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the name of the schema that this attribute is referring to\r\n-     */\r\n-    public String getSchema() {\r\n-        return schema;\r\n-    }\r\n-\r\n-    /**\r\n-     * @param schema name to be set\r\n-     */\r\n-    public void setSchema(final String schema) {\r\n-        this.schema = schema;\r\n-\r\n-    }\r\n-\r\n-    /**\r\n-     * @return attribute values as strings\r\n-     */\r\n-    @XmlElementWrapper(name = \"values\")\r\n-    @XmlElement(name = \"value\")\r\n-    @JsonProperty(\"values\")\r\n-    public List<String> getValues() {\r\n-        return values;\r\n-    }\r\n-\r\n-    public boolean isReadonly() {\r\n-        return readonly;\r\n-    }\r\n-\r\n-    public void setReadonly(boolean readonly) {\r\n-        this.readonly = readonly;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"attribute\")\n+@XmlType\n+public class AttributeTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 4941691338796323623L;\n+\n+    /**\n+     * Name of the schema that this attribute is referring to.\n+     */\n+    private String schema;\n+\n+    /**\n+     * Set of (string) values of this attribute.\n+     */\n+    private final List<String> values;\n+\n+    /**\n+     * Whether this attribute is read-only or not.\n+     */\n+    private boolean readonly;\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public AttributeTO() {\n+        super();\n+        values = new ArrayList<String>();\n+        readonly = false;\n+    }\n+\n+    /**\n+     * @return the name of the schema that this attribute is referring to\n+     */\n+    public String getSchema() {\n+        return schema;\n+    }\n+\n+    /**\n+     * @param schema name to be set\n+     */\n+    public void setSchema(final String schema) {\n+        this.schema = schema;\n+\n+    }\n+\n+    /**\n+     * @return attribute values as strings\n+     */\n+    @XmlElementWrapper(name = \"values\")\n+    @XmlElement(name = \"value\")\n+    @JsonProperty(\"values\")\n+    public List<String> getValues() {\n+        return values;\n+    }\n+\n+    public boolean isReadonly() {\n+        return readonly;\n+    }\n+\n+    public void setReadonly(boolean readonly) {\n+        this.readonly = readonly;\n+    }\n+}"},{"sha":"1a0b3495b71fc007a577745b5b892386ab8e2ddf","filename":"common/src/main/java/org/apache/syncope/common/to/ConfTO.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConfTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConfTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConfTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,30 +1,30 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-@XmlRootElement(name = \"conf\")\r\n-@XmlType\r\n-public class ConfTO extends AbstractAttributableTO {\r\n-\r\n-    private static final long serialVersionUID = -3825039700228595590L;\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"conf\")\n+@XmlType\n+public class ConfTO extends AbstractAttributableTO {\n+\n+    private static final long serialVersionUID = -3825039700228595590L;\n+\n+}"},{"sha":"baa4bb9538454629cdf22ed3355c90bd1ea8a14f","filename":"common/src/main/java/org/apache/syncope/common/to/ConnBundleTO.java","status":"modified","additions":97,"deletions":97,"changes":194,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnBundleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnBundleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnBundleTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,97 +1,97 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-import org.apache.syncope.common.types.ConnConfPropSchema;\r\n-\r\n-@XmlRootElement(name = \"connectorBundle\")\r\n-@XmlType\r\n-public class ConnBundleTO extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = 7215115961910138005L;\r\n-\r\n-    private String displayName;\r\n-\r\n-    private String location;\r\n-\r\n-    private String bundleName;\r\n-\r\n-    private String connectorName;\r\n-\r\n-    private String version;\r\n-\r\n-    private List<ConnConfPropSchema> properties = new ArrayList<ConnConfPropSchema>();\r\n-\r\n-    public String getDisplayName() {\r\n-        return displayName;\r\n-    }\r\n-\r\n-    public void setDisplayName(final String displayName) {\r\n-        this.displayName = displayName;\r\n-    }\r\n-\r\n-    public String getLocation() {\r\n-        return location;\r\n-    }\r\n-\r\n-    public void setLocation(final String location) {\r\n-        this.location = location;\r\n-    }\r\n-\r\n-    public String getBundleName() {\r\n-        return bundleName;\r\n-    }\r\n-\r\n-    public void setBundleName(final String bundleName) {\r\n-        this.bundleName = bundleName;\r\n-    }\r\n-\r\n-    public String getConnectorName() {\r\n-        return connectorName;\r\n-    }\r\n-\r\n-    public void setConnectorName(final String connectorName) {\r\n-        this.connectorName = connectorName;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"properties\")\r\n-    @XmlElement(name = \"connConfPropSchema\")\r\n-    @JsonProperty(\"properties\")\r\n-    public List<ConnConfPropSchema> getProperties() {\r\n-        return properties;\r\n-    }\r\n-\r\n-    public String getVersion() {\r\n-        return version;\r\n-    }\r\n-\r\n-    public void setVersion(final String version) {\r\n-        this.version = version;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.types.ConnConfPropSchema;\n+\n+@XmlRootElement(name = \"connectorBundle\")\n+@XmlType\n+public class ConnBundleTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 7215115961910138005L;\n+\n+    private String displayName;\n+\n+    private String location;\n+\n+    private String bundleName;\n+\n+    private String connectorName;\n+\n+    private String version;\n+\n+    private List<ConnConfPropSchema> properties = new ArrayList<ConnConfPropSchema>();\n+\n+    public String getDisplayName() {\n+        return displayName;\n+    }\n+\n+    public void setDisplayName(final String displayName) {\n+        this.displayName = displayName;\n+    }\n+\n+    public String getLocation() {\n+        return location;\n+    }\n+\n+    public void setLocation(final String location) {\n+        this.location = location;\n+    }\n+\n+    public String getBundleName() {\n+        return bundleName;\n+    }\n+\n+    public void setBundleName(final String bundleName) {\n+        this.bundleName = bundleName;\n+    }\n+\n+    public String getConnectorName() {\n+        return connectorName;\n+    }\n+\n+    public void setConnectorName(final String connectorName) {\n+        this.connectorName = connectorName;\n+    }\n+\n+    @XmlElementWrapper(name = \"properties\")\n+    @XmlElement(name = \"connConfPropSchema\")\n+    @JsonProperty(\"properties\")\n+    public List<ConnConfPropSchema> getProperties() {\n+        return properties;\n+    }\n+\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(final String version) {\n+        this.version = version;\n+    }\n+}"},{"sha":"19d8ab3263e4bea3b98ee2f81360ed72ade95538","filename":"common/src/main/java/org/apache/syncope/common/to/ConnInstanceTO.java","status":"modified","additions":177,"deletions":177,"changes":354,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnInstanceTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,177 +1,177 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonIgnore;\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.Collections;\r\n-import java.util.EnumSet;\r\n-import java.util.HashMap;\r\n-import java.util.HashSet;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-import org.apache.syncope.common.types.ConnConfProperty;\r\n-import org.apache.syncope.common.types.ConnectorCapability;\r\n-\r\n-@XmlRootElement(name = \"connInstance\")\r\n-@XmlType\r\n-public class ConnInstanceTO extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = 2707778645445168671L;\r\n-\r\n-    private long id;\r\n-\r\n-    private String location;\r\n-\r\n-    private String connectorName;\r\n-\r\n-    private String bundleName;\r\n-\r\n-    private String version;\r\n-\r\n-    private final Set<ConnConfProperty> configuration;\r\n-\r\n-    private final Set<ConnectorCapability> capabilities;\r\n-\r\n-    private String displayName;\r\n-\r\n-    private Integer connRequestTimeout;\r\n-\r\n-    private ConnPoolConfTO poolConf;\r\n-\r\n-    public ConnInstanceTO() {\r\n-        super();\r\n-\r\n-        configuration = new HashSet<ConnConfProperty>();\r\n-        capabilities = EnumSet.noneOf(ConnectorCapability.class);\r\n-    }\r\n-\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getLocation() {\r\n-        return location;\r\n-    }\r\n-\r\n-    public void setLocation(final String location) {\r\n-        this.location = location;\r\n-    }\r\n-\r\n-    public String getConnectorName() {\r\n-        return connectorName;\r\n-    }\r\n-\r\n-    public void setConnectorName(final String connectorname) {\r\n-        this.connectorName = connectorname;\r\n-    }\r\n-\r\n-    public String getBundleName() {\r\n-        return bundleName;\r\n-    }\r\n-\r\n-    public void setBundleName(final String bundlename) {\r\n-        this.bundleName = bundlename;\r\n-    }\r\n-\r\n-    public String getVersion() {\r\n-        return version;\r\n-    }\r\n-\r\n-    public void setVersion(final String version) {\r\n-        this.version = version;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"configuration\")\r\n-    @XmlElement(name = \"property\")\r\n-    @JsonProperty(\"configuration\")\r\n-    public Set<ConnConfProperty> getConfiguration() {\r\n-        return this.configuration;\r\n-    }\r\n-\r\n-    @JsonIgnore\r\n-    public Map<String, ConnConfProperty> getConfigurationMap() {\r\n-        Map<String, ConnConfProperty> result;\r\n-\r\n-        if (getConfiguration() == null) {\r\n-            result = Collections.<String, ConnConfProperty>emptyMap();\r\n-        } else {\r\n-            result = new HashMap<String, ConnConfProperty>();\r\n-            for (ConnConfProperty prop : getConfiguration()) {\r\n-                result.put(prop.getSchema().getName(), prop);\r\n-            }\r\n-            result = Collections.unmodifiableMap(result);\r\n-        }\r\n-\r\n-        return result;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"capabilities\")\r\n-    @XmlElement(name = \"capability\")\r\n-    @JsonProperty(\"capabilities\")\r\n-    public Set<ConnectorCapability> getCapabilities() {\r\n-        return capabilities;\r\n-    }\r\n-\r\n-    public String getDisplayName() {\r\n-        return displayName;\r\n-    }\r\n-\r\n-    public void setDisplayName(final String displayName) {\r\n-        this.displayName = displayName;\r\n-    }\r\n-\r\n-    /**\r\n-     * Get connector request timeout.\r\n-     * It is not applied in case of sync, full reconciliation and search.\r\n-     *\r\n-     * @return timeout.\r\n-     */\r\n-    public Integer getConnRequestTimeout() {\r\n-        return connRequestTimeout;\r\n-    }\r\n-\r\n-    /**\r\n-     * Set connector request timeout.\r\n-     * It is not applied in case of sync, full reconciliation and search.\r\n-     *\r\n-     * @param connRequestTimeout timeout\r\n-     */\r\n-    public void setConnRequestTimeout(final Integer connRequestTimeout) {\r\n-        this.connRequestTimeout = connRequestTimeout;\r\n-    }\r\n-\r\n-    public ConnPoolConfTO getPoolConf() {\r\n-        return poolConf;\r\n-    }\r\n-\r\n-    public void setPoolConf(final ConnPoolConfTO poolConf) {\r\n-        this.poolConf = poolConf;\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.types.ConnConfProperty;\n+import org.apache.syncope.common.types.ConnectorCapability;\n+\n+@XmlRootElement(name = \"connInstance\")\n+@XmlType\n+public class ConnInstanceTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 2707778645445168671L;\n+\n+    private long id;\n+\n+    private String location;\n+\n+    private String connectorName;\n+\n+    private String bundleName;\n+\n+    private String version;\n+\n+    private final Set<ConnConfProperty> configuration;\n+\n+    private final Set<ConnectorCapability> capabilities;\n+\n+    private String displayName;\n+\n+    private Integer connRequestTimeout;\n+\n+    private ConnPoolConfTO poolConf;\n+\n+    public ConnInstanceTO() {\n+        super();\n+\n+        configuration = new HashSet<ConnConfProperty>();\n+        capabilities = EnumSet.noneOf(ConnectorCapability.class);\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getLocation() {\n+        return location;\n+    }\n+\n+    public void setLocation(final String location) {\n+        this.location = location;\n+    }\n+\n+    public String getConnectorName() {\n+        return connectorName;\n+    }\n+\n+    public void setConnectorName(final String connectorname) {\n+        this.connectorName = connectorname;\n+    }\n+\n+    public String getBundleName() {\n+        return bundleName;\n+    }\n+\n+    public void setBundleName(final String bundlename) {\n+        this.bundleName = bundlename;\n+    }\n+\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(final String version) {\n+        this.version = version;\n+    }\n+\n+    @XmlElementWrapper(name = \"configuration\")\n+    @XmlElement(name = \"property\")\n+    @JsonProperty(\"configuration\")\n+    public Set<ConnConfProperty> getConfiguration() {\n+        return this.configuration;\n+    }\n+\n+    @JsonIgnore\n+    public Map<String, ConnConfProperty> getConfigurationMap() {\n+        Map<String, ConnConfProperty> result;\n+\n+        if (getConfiguration() == null) {\n+            result = Collections.<String, ConnConfProperty>emptyMap();\n+        } else {\n+            result = new HashMap<String, ConnConfProperty>();\n+            for (ConnConfProperty prop : getConfiguration()) {\n+                result.put(prop.getSchema().getName(), prop);\n+            }\n+            result = Collections.unmodifiableMap(result);\n+        }\n+\n+        return result;\n+    }\n+\n+    @XmlElementWrapper(name = \"capabilities\")\n+    @XmlElement(name = \"capability\")\n+    @JsonProperty(\"capabilities\")\n+    public Set<ConnectorCapability> getCapabilities() {\n+        return capabilities;\n+    }\n+\n+    public String getDisplayName() {\n+        return displayName;\n+    }\n+\n+    public void setDisplayName(final String displayName) {\n+        this.displayName = displayName;\n+    }\n+\n+    /**\n+     * Get connector request timeout.\n+     * It is not applied in case of sync, full reconciliation and search.\n+     *\n+     * @return timeout.\n+     */\n+    public Integer getConnRequestTimeout() {\n+        return connRequestTimeout;\n+    }\n+\n+    /**\n+     * Set connector request timeout.\n+     * It is not applied in case of sync, full reconciliation and search.\n+     *\n+     * @param connRequestTimeout timeout\n+     */\n+    public void setConnRequestTimeout(final Integer connRequestTimeout) {\n+        this.connRequestTimeout = connRequestTimeout;\n+    }\n+\n+    public ConnPoolConfTO getPoolConf() {\n+        return poolConf;\n+    }\n+\n+    public void setPoolConf(final ConnPoolConfTO poolConf) {\n+        this.poolConf = poolConf;\n+    }\n+\n+}"},{"sha":"9e24736d3b0e913e1c1bd6b3970607dac810dfda","filename":"common/src/main/java/org/apache/syncope/common/to/ConnObjectTO.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnObjectTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,58 +1,58 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonIgnore;\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.Collections;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-@XmlRootElement(name = \"connObject\")\r\n-@XmlType\r\n-public class ConnObjectTO extends AbstractSysInfoTO {\r\n-\r\n-    private static final long serialVersionUID = 5139554911265442497L;\r\n-\r\n-    private final List<AttributeTO> attrs = new ArrayList<AttributeTO>();\r\n-\r\n-    @XmlElementWrapper(name = \"attributes\")\r\n-    @XmlElement(name = \"attribute\")\r\n-    @JsonProperty(\"attributes\")\r\n-    public List<AttributeTO> getAttrs() {\r\n-        return attrs;\r\n-    }\r\n-\r\n-    @JsonIgnore\r\n-    public Map<String, AttributeTO> getAttrMap() {\r\n-        Map<String, AttributeTO> result = new HashMap<String, AttributeTO>(attrs.size());\r\n-        for (AttributeTO attributeTO : attrs) {\r\n-            result.put(attributeTO.getSchema(), attributeTO);\r\n-        }\r\n-        result = Collections.<String, AttributeTO>unmodifiableMap(result);\r\n-\r\n-        return result;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"connObject\")\n+@XmlType\n+public class ConnObjectTO extends AbstractSysInfoTO {\n+\n+    private static final long serialVersionUID = 5139554911265442497L;\n+\n+    private final List<AttributeTO> attrs = new ArrayList<AttributeTO>();\n+\n+    @XmlElementWrapper(name = \"attributes\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"attributes\")\n+    public List<AttributeTO> getAttrs() {\n+        return attrs;\n+    }\n+\n+    @JsonIgnore\n+    public Map<String, AttributeTO> getAttrMap() {\n+        Map<String, AttributeTO> result = new HashMap<String, AttributeTO>(attrs.size());\n+        for (AttributeTO attributeTO : attrs) {\n+            result.put(attributeTO.getSchema(), attributeTO);\n+        }\n+        result = Collections.<String, AttributeTO>unmodifiableMap(result);\n+\n+        return result;\n+    }\n+}"},{"sha":"570bfa09b6c1a1137854696439bf71a005c6520c","filename":"common/src/main/java/org/apache/syncope/common/to/DerSchemaTO.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FDerSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FDerSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FDerSchemaTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,39 +1,39 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-@XmlRootElement(name = \"derivedSchema\")\r\n-@XmlType\r\n-public class DerSchemaTO extends AbstractSchemaTO {\r\n-\r\n-    private static final long serialVersionUID = -6747399803792103108L;\r\n-\r\n-    private String expression;\r\n-\r\n-    public String getExpression() {\r\n-        return expression;\r\n-    }\r\n-\r\n-    public void setExpression(final String expression) {\r\n-        this.expression = expression;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"derivedSchema\")\n+@XmlType\n+public class DerSchemaTO extends AbstractSchemaTO {\n+\n+    private static final long serialVersionUID = -6747399803792103108L;\n+\n+    private String expression;\n+\n+    public String getExpression() {\n+        return expression;\n+    }\n+\n+    public void setExpression(final String expression) {\n+        this.expression = expression;\n+    }\n+}"},{"sha":"44905854c11ae5381b039980c75484bc5625404c","filename":"common/src/main/java/org/apache/syncope/common/to/LoggerTO.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FLoggerTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FLoggerTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FLoggerTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,52 +1,52 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-import org.apache.syncope.common.types.LoggerLevel;\r\n-\r\n-@XmlRootElement(name = \"logger\")\r\n-@XmlType\r\n-public class LoggerTO extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = -7794833835668648505L;\r\n-\r\n-    private String name;\r\n-\r\n-    private LoggerLevel level;\r\n-\r\n-    public LoggerLevel getLevel() {\r\n-        return level;\r\n-    }\r\n-\r\n-    public void setLevel(final LoggerLevel level) {\r\n-        this.level = level;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(final String name) {\r\n-        this.name = name;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.types.LoggerLevel;\n+\n+@XmlRootElement(name = \"logger\")\n+@XmlType\n+public class LoggerTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -7794833835668648505L;\n+\n+    private String name;\n+\n+    private LoggerLevel level;\n+\n+    public LoggerLevel getLevel() {\n+        return level;\n+    }\n+\n+    public void setLevel(final LoggerLevel level) {\n+        this.level = level;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"e28f17aec7e4b4dfe8826c561ec3fdc452e91a61","filename":"common/src/main/java/org/apache/syncope/common/to/MappingItemTO.java","status":"modified","additions":135,"deletions":135,"changes":270,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingItemTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingItemTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingItemTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,135 +1,135 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-import org.apache.syncope.common.types.IntMappingType;\r\n-import org.apache.syncope.common.types.MappingPurpose;\r\n-\r\n-@XmlRootElement(name = \"mappingItem\")\r\n-@XmlType\r\n-public class MappingItemTO extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = 2983498836767176862L;\r\n-\r\n-    private Long id;\r\n-\r\n-    /**\r\n-     * Attribute schema to be mapped. Consider that we can associate tha same attribute schema more than once, with\r\n-     * different aliases, to different resource attributes.\r\n-     */\r\n-    private String intAttrName;\r\n-\r\n-    /**\r\n-     * Schema type to be mapped.\r\n-     */\r\n-    private IntMappingType intMappingType;\r\n-\r\n-    /**\r\n-     * External resource's field to be mapped.\r\n-     */\r\n-    private String extAttrName;\r\n-\r\n-    /**\r\n-     * Specify if the mapped target resource's field is the key.\r\n-     */\r\n-    private boolean accountid;\r\n-\r\n-    /**\r\n-     * Specify if the mapped target resource's field is the password.\r\n-     */\r\n-    private boolean password;\r\n-\r\n-    /**\r\n-     * Specify if the mapped target resource's field is nullable.\r\n-     */\r\n-    private String mandatoryCondition = \"false\";\r\n-\r\n-    /**\r\n-     * Mapping purposes: SYNCHRONIZATION, PROPAGATION, BOTH, NONE.\r\n-     */\r\n-    private MappingPurpose purpose;\r\n-\r\n-    public boolean isAccountid() {\r\n-        return accountid;\r\n-    }\r\n-\r\n-    public void setAccountid(boolean accountid) {\r\n-        this.accountid = accountid;\r\n-    }\r\n-\r\n-    public String getExtAttrName() {\r\n-        return extAttrName;\r\n-    }\r\n-\r\n-    public void setExtAttrName(String extAttrName) {\r\n-        this.extAttrName = extAttrName;\r\n-    }\r\n-\r\n-    public Long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(Long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getMandatoryCondition() {\r\n-        return mandatoryCondition;\r\n-    }\r\n-\r\n-    public void setMandatoryCondition(String mandatoryCondition) {\r\n-        this.mandatoryCondition = mandatoryCondition;\r\n-    }\r\n-\r\n-    public boolean isPassword() {\r\n-        return password;\r\n-    }\r\n-\r\n-    public void setPassword(boolean password) {\r\n-        this.password = password;\r\n-    }\r\n-\r\n-    public String getIntAttrName() {\r\n-        return intAttrName;\r\n-    }\r\n-\r\n-    public void setIntAttrName(String intAttrName) {\r\n-        this.intAttrName = intAttrName;\r\n-    }\r\n-\r\n-    public IntMappingType getIntMappingType() {\r\n-        return intMappingType;\r\n-    }\r\n-\r\n-    public void setIntMappingType(IntMappingType intMappingType) {\r\n-        this.intMappingType = intMappingType;\r\n-    }\r\n-\r\n-    public MappingPurpose getPurpose() {\r\n-        return purpose;\r\n-    }\r\n-\r\n-    public void setPurpose(MappingPurpose purpose) {\r\n-        this.purpose = purpose;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.types.IntMappingType;\n+import org.apache.syncope.common.types.MappingPurpose;\n+\n+@XmlRootElement(name = \"mappingItem\")\n+@XmlType\n+public class MappingItemTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 2983498836767176862L;\n+\n+    private Long id;\n+\n+    /**\n+     * Attribute schema to be mapped. Consider that we can associate tha same attribute schema more than once, with\n+     * different aliases, to different resource attributes.\n+     */\n+    private String intAttrName;\n+\n+    /**\n+     * Schema type to be mapped.\n+     */\n+    private IntMappingType intMappingType;\n+\n+    /**\n+     * External resource's field to be mapped.\n+     */\n+    private String extAttrName;\n+\n+    /**\n+     * Specify if the mapped target resource's field is the key.\n+     */\n+    private boolean accountid;\n+\n+    /**\n+     * Specify if the mapped target resource's field is the password.\n+     */\n+    private boolean password;\n+\n+    /**\n+     * Specify if the mapped target resource's field is nullable.\n+     */\n+    private String mandatoryCondition = \"false\";\n+\n+    /**\n+     * Mapping purposes: SYNCHRONIZATION, PROPAGATION, BOTH, NONE.\n+     */\n+    private MappingPurpose purpose;\n+\n+    public boolean isAccountid() {\n+        return accountid;\n+    }\n+\n+    public void setAccountid(boolean accountid) {\n+        this.accountid = accountid;\n+    }\n+\n+    public String getExtAttrName() {\n+        return extAttrName;\n+    }\n+\n+    public void setExtAttrName(String extAttrName) {\n+        this.extAttrName = extAttrName;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getMandatoryCondition() {\n+        return mandatoryCondition;\n+    }\n+\n+    public void setMandatoryCondition(String mandatoryCondition) {\n+        this.mandatoryCondition = mandatoryCondition;\n+    }\n+\n+    public boolean isPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(boolean password) {\n+        this.password = password;\n+    }\n+\n+    public String getIntAttrName() {\n+        return intAttrName;\n+    }\n+\n+    public void setIntAttrName(String intAttrName) {\n+        this.intAttrName = intAttrName;\n+    }\n+\n+    public IntMappingType getIntMappingType() {\n+        return intMappingType;\n+    }\n+\n+    public void setIntMappingType(IntMappingType intMappingType) {\n+        this.intMappingType = intMappingType;\n+    }\n+\n+    public MappingPurpose getPurpose() {\n+        return purpose;\n+    }\n+\n+    public void setPurpose(MappingPurpose purpose) {\n+        this.purpose = purpose;\n+    }\n+}"},{"sha":"3e702a97a7d082a7345a24f81c4989547f8c600b","filename":"common/src/main/java/org/apache/syncope/common/to/MappingTO.java","status":"modified","additions":122,"deletions":122,"changes":244,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,122 +1,122 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-import org.apache.syncope.common.types.IntMappingType;\r\n-\r\n-@XmlRootElement(name = \"mapping\")\r\n-@XmlType\r\n-public class MappingTO extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = 8447688036282611118L;\r\n-\r\n-    private String accountLink;\r\n-\r\n-    private final List<MappingItemTO> items = new ArrayList<MappingItemTO>();\r\n-\r\n-    public String getAccountLink() {\r\n-        return accountLink;\r\n-    }\r\n-\r\n-    public void setAccountLink(String accountLink) {\r\n-        this.accountLink = accountLink;\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public <T extends MappingItemTO> T getAccountIdItem() {\r\n-        T accountIdItem = null;\r\n-        for (MappingItemTO item : getItems()) {\r\n-            if (item.isAccountid()) {\r\n-                accountIdItem = (T) item;\r\n-            }\r\n-        }\r\n-        return accountIdItem;\r\n-    }\r\n-\r\n-    protected <T extends MappingItemTO> boolean addAccountIdItem(final T accountIdItem) {\r\n-        if (IntMappingType.UserVirtualSchema == accountIdItem.getIntMappingType()\r\n-                || IntMappingType.RoleVirtualSchema == accountIdItem.getIntMappingType()\r\n-                || IntMappingType.MembershipVirtualSchema == accountIdItem.getIntMappingType()\r\n-                || IntMappingType.Password == accountIdItem.getIntMappingType()) {\r\n-\r\n-            throw new IllegalArgumentException(\"Virtual attributes cannot be set as accountId\");\r\n-        }\r\n-        if (IntMappingType.Password == accountIdItem.getIntMappingType()) {\r\n-            throw new IllegalArgumentException(\"Password attributes cannot be set as accountId\");\r\n-        }\r\n-\r\n-        accountIdItem.setExtAttrName(accountIdItem.getExtAttrName());\r\n-        accountIdItem.setAccountid(true);\r\n-\r\n-        return this.addItem(accountIdItem);\r\n-    }\r\n-\r\n-    public boolean setAccountIdItem(final MappingItemTO accountIdItem) {\r\n-        if (accountIdItem == null) {\r\n-            return this.removeItem(getAccountIdItem());\r\n-        } else {\r\n-            return addAccountIdItem(accountIdItem);\r\n-        }\r\n-    }\r\n-\r\n-    public MappingItemTO getPasswordItem() {\r\n-        MappingItemTO passwordItem = null;\r\n-        for (MappingItemTO item : getItems()) {\r\n-            if (item.isPassword()) {\r\n-                passwordItem = item;\r\n-            }\r\n-        }\r\n-        return passwordItem;\r\n-    }\r\n-\r\n-    public boolean setPasswordItem(final MappingItemTO passwordItem) {\r\n-        if (passwordItem == null) {\r\n-            return this.removeItem(getPasswordItem());\r\n-        } else {\r\n-            passwordItem.setExtAttrName(null);\r\n-            passwordItem.setPassword(true);\r\n-            return addItem(passwordItem);\r\n-        }\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"items\")\r\n-    @XmlElement(name = \"item\")\r\n-    @JsonProperty(\"items\")\r\n-    public List<MappingItemTO> getItems() {\r\n-        return items;\r\n-    }\r\n-\r\n-    public boolean addItem(final MappingItemTO item) {\r\n-        return item == null ? false : this.items.contains(item) || this.items.add(item);\r\n-    }\r\n-\r\n-    public boolean removeItem(final MappingItemTO item) {\r\n-        return this.items.remove(item);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.types.IntMappingType;\n+\n+@XmlRootElement(name = \"mapping\")\n+@XmlType\n+public class MappingTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 8447688036282611118L;\n+\n+    private String accountLink;\n+\n+    private final List<MappingItemTO> items = new ArrayList<MappingItemTO>();\n+\n+    public String getAccountLink() {\n+        return accountLink;\n+    }\n+\n+    public void setAccountLink(String accountLink) {\n+        this.accountLink = accountLink;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends MappingItemTO> T getAccountIdItem() {\n+        T accountIdItem = null;\n+        for (MappingItemTO item : getItems()) {\n+            if (item.isAccountid()) {\n+                accountIdItem = (T) item;\n+            }\n+        }\n+        return accountIdItem;\n+    }\n+\n+    protected <T extends MappingItemTO> boolean addAccountIdItem(final T accountIdItem) {\n+        if (IntMappingType.UserVirtualSchema == accountIdItem.getIntMappingType()\n+                || IntMappingType.RoleVirtualSchema == accountIdItem.getIntMappingType()\n+                || IntMappingType.MembershipVirtualSchema == accountIdItem.getIntMappingType()\n+                || IntMappingType.Password == accountIdItem.getIntMappingType()) {\n+\n+            throw new IllegalArgumentException(\"Virtual attributes cannot be set as accountId\");\n+        }\n+        if (IntMappingType.Password == accountIdItem.getIntMappingType()) {\n+            throw new IllegalArgumentException(\"Password attributes cannot be set as accountId\");\n+        }\n+\n+        accountIdItem.setExtAttrName(accountIdItem.getExtAttrName());\n+        accountIdItem.setAccountid(true);\n+\n+        return this.addItem(accountIdItem);\n+    }\n+\n+    public boolean setAccountIdItem(final MappingItemTO accountIdItem) {\n+        if (accountIdItem == null) {\n+            return this.removeItem(getAccountIdItem());\n+        } else {\n+            return addAccountIdItem(accountIdItem);\n+        }\n+    }\n+\n+    public MappingItemTO getPasswordItem() {\n+        MappingItemTO passwordItem = null;\n+        for (MappingItemTO item : getItems()) {\n+            if (item.isPassword()) {\n+                passwordItem = item;\n+            }\n+        }\n+        return passwordItem;\n+    }\n+\n+    public boolean setPasswordItem(final MappingItemTO passwordItem) {\n+        if (passwordItem == null) {\n+            return this.removeItem(getPasswordItem());\n+        } else {\n+            passwordItem.setExtAttrName(null);\n+            passwordItem.setPassword(true);\n+            return addItem(passwordItem);\n+        }\n+    }\n+\n+    @XmlElementWrapper(name = \"items\")\n+    @XmlElement(name = \"item\")\n+    @JsonProperty(\"items\")\n+    public List<MappingItemTO> getItems() {\n+        return items;\n+    }\n+\n+    public boolean addItem(final MappingItemTO item) {\n+        return item == null ? false : this.items.contains(item) || this.items.add(item);\n+    }\n+\n+    public boolean removeItem(final MappingItemTO item) {\n+        return this.items.remove(item);\n+    }\n+}"},{"sha":"00cabf35d8cc399797b9391553df36e23e549da6","filename":"common/src/main/java/org/apache/syncope/common/to/MembershipTO.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMembershipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMembershipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMembershipTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,49 +1,49 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-@XmlRootElement(name = \"membership\")\r\n-@XmlType\r\n-public class MembershipTO extends AbstractAttributableTO {\r\n-\r\n-    private static final long serialVersionUID = 5992828670273935861L;\r\n-\r\n-    private long roleId;\r\n-\r\n-    private String roleName;\r\n-\r\n-    public long getRoleId() {\r\n-        return roleId;\r\n-    }\r\n-\r\n-    public void setRoleId(long roleId) {\r\n-        this.roleId = roleId;\r\n-    }\r\n-\r\n-    public String getRoleName() {\r\n-        return roleName;\r\n-    }\r\n-\r\n-    public void setRoleName(String roleName) {\r\n-        this.roleName = roleName;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"membership\")\n+@XmlType\n+public class MembershipTO extends AbstractAttributableTO {\n+\n+    private static final long serialVersionUID = 5992828670273935861L;\n+\n+    private long roleId;\n+\n+    private String roleName;\n+\n+    public long getRoleId() {\n+        return roleId;\n+    }\n+\n+    public void setRoleId(long roleId) {\n+        this.roleId = roleId;\n+    }\n+\n+    public String getRoleName() {\n+        return roleName;\n+    }\n+\n+    public void setRoleName(String roleName) {\n+        this.roleName = roleName;\n+    }\n+}"},{"sha":"20fb9ccc1e5e033686bb3cae974fbbc0b0264994","filename":"common/src/main/java/org/apache/syncope/common/to/NotificationTO.java","status":"modified","additions":177,"deletions":177,"changes":354,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,177 +1,177 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-import org.apache.syncope.common.types.IntMappingType;\r\n-import org.apache.syncope.common.types.TraceLevel;\r\n-\r\n-@XmlRootElement(name = \"notification\")\r\n-@XmlType\r\n-public class NotificationTO extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = -6145117115632592612L;\r\n-\r\n-    private Long id;\r\n-\r\n-    private List<String> events = new ArrayList<String>();\r\n-\r\n-    private String userAbout;\r\n-\r\n-    private String roleAbout;\r\n-\r\n-    private String recipients;\r\n-\r\n-    private List<String> staticRecipients = new ArrayList<String>();\r\n-\r\n-    private IntMappingType recipientAttrType;\r\n-\r\n-    private String recipientAttrName;\r\n-\r\n-    private boolean selfAsRecipient;\r\n-\r\n-    private String sender;\r\n-\r\n-    private String subject;\r\n-\r\n-    private String template;\r\n-\r\n-    private TraceLevel traceLevel;\r\n-    \r\n-    private boolean active;\r\n-\r\n-    public String getUserAbout() {\r\n-        return userAbout;\r\n-    }\r\n-\r\n-    public void setUserAbout(final String userAbout) {\r\n-        this.userAbout = userAbout;\r\n-    }\r\n-\r\n-    public String getRoleAbout() {\r\n-        return roleAbout;\r\n-    }\r\n-\r\n-    public void setRoleAbout(final String roleAbout) {\r\n-        this.roleAbout = roleAbout;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"events\")\r\n-    @XmlElement(name = \"event\")\r\n-    @JsonProperty(\"events\")\r\n-    public List<String> getEvents() {\r\n-        return events;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"staticRecipients\")\r\n-    @XmlElement(name = \"staticRecipient\")\r\n-    @JsonProperty(\"staticRecipients\")\r\n-    public List<String> getStaticRecipients() {\r\n-        return staticRecipients;\r\n-    }\r\n-\r\n-    public Long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(Long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getRecipients() {\r\n-        return recipients;\r\n-    }\r\n-\r\n-    public void setRecipients(String recipients) {\r\n-        this.recipients = recipients;\r\n-    }\r\n-\r\n-    public String getRecipientAttrName() {\r\n-        return recipientAttrName;\r\n-    }\r\n-\r\n-    public void setRecipientAttrName(String recipientAttrName) {\r\n-        this.recipientAttrName = recipientAttrName;\r\n-    }\r\n-\r\n-    public IntMappingType getRecipientAttrType() {\r\n-        return recipientAttrType;\r\n-    }\r\n-\r\n-    public void setRecipientAttrType(IntMappingType recipientAttrType) {\r\n-        this.recipientAttrType = recipientAttrType;\r\n-    }\r\n-\r\n-    public boolean isSelfAsRecipient() {\r\n-        return selfAsRecipient;\r\n-    }\r\n-\r\n-    public void setSelfAsRecipient(boolean selfAsRecipient) {\r\n-        this.selfAsRecipient = selfAsRecipient;\r\n-    }\r\n-\r\n-    public String getSender() {\r\n-        return sender;\r\n-    }\r\n-\r\n-    public void setSender(String sender) {\r\n-        this.sender = sender;\r\n-    }\r\n-\r\n-    public String getSubject() {\r\n-        return subject;\r\n-    }\r\n-\r\n-    public void setSubject(String subject) {\r\n-        this.subject = subject;\r\n-    }\r\n-\r\n-    public String getTemplate() {\r\n-        return template;\r\n-    }\r\n-\r\n-    public void setTemplate(String template) {\r\n-        this.template = template;\r\n-    }\r\n-\r\n-    public TraceLevel getTraceLevel() {\r\n-        return traceLevel;\r\n-    }\r\n-\r\n-    public void setTraceLevel(TraceLevel traceLevel) {\r\n-        this.traceLevel = traceLevel;\r\n-    }\r\n-\r\n-    public boolean isActive() {\r\n-        return active;\r\n-    }\r\n-\r\n-    public void setActive(boolean active) {\r\n-        this.active = active;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.types.IntMappingType;\n+import org.apache.syncope.common.types.TraceLevel;\n+\n+@XmlRootElement(name = \"notification\")\n+@XmlType\n+public class NotificationTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -6145117115632592612L;\n+\n+    private Long id;\n+\n+    private List<String> events = new ArrayList<String>();\n+\n+    private String userAbout;\n+\n+    private String roleAbout;\n+\n+    private String recipients;\n+\n+    private List<String> staticRecipients = new ArrayList<String>();\n+\n+    private IntMappingType recipientAttrType;\n+\n+    private String recipientAttrName;\n+\n+    private boolean selfAsRecipient;\n+\n+    private String sender;\n+\n+    private String subject;\n+\n+    private String template;\n+\n+    private TraceLevel traceLevel;\n+    \n+    private boolean active;\n+\n+    public String getUserAbout() {\n+        return userAbout;\n+    }\n+\n+    public void setUserAbout(final String userAbout) {\n+        this.userAbout = userAbout;\n+    }\n+\n+    public String getRoleAbout() {\n+        return roleAbout;\n+    }\n+\n+    public void setRoleAbout(final String roleAbout) {\n+        this.roleAbout = roleAbout;\n+    }\n+\n+    @XmlElementWrapper(name = \"events\")\n+    @XmlElement(name = \"event\")\n+    @JsonProperty(\"events\")\n+    public List<String> getEvents() {\n+        return events;\n+    }\n+\n+    @XmlElementWrapper(name = \"staticRecipients\")\n+    @XmlElement(name = \"staticRecipient\")\n+    @JsonProperty(\"staticRecipients\")\n+    public List<String> getStaticRecipients() {\n+        return staticRecipients;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getRecipients() {\n+        return recipients;\n+    }\n+\n+    public void setRecipients(String recipients) {\n+        this.recipients = recipients;\n+    }\n+\n+    public String getRecipientAttrName() {\n+        return recipientAttrName;\n+    }\n+\n+    public void setRecipientAttrName(String recipientAttrName) {\n+        this.recipientAttrName = recipientAttrName;\n+    }\n+\n+    public IntMappingType getRecipientAttrType() {\n+        return recipientAttrType;\n+    }\n+\n+    public void setRecipientAttrType(IntMappingType recipientAttrType) {\n+        this.recipientAttrType = recipientAttrType;\n+    }\n+\n+    public boolean isSelfAsRecipient() {\n+        return selfAsRecipient;\n+    }\n+\n+    public void setSelfAsRecipient(boolean selfAsRecipient) {\n+        this.selfAsRecipient = selfAsRecipient;\n+    }\n+\n+    public String getSender() {\n+        return sender;\n+    }\n+\n+    public void setSender(String sender) {\n+        this.sender = sender;\n+    }\n+\n+    public String getSubject() {\n+        return subject;\n+    }\n+\n+    public void setSubject(String subject) {\n+        this.subject = subject;\n+    }\n+\n+    public String getTemplate() {\n+        return template;\n+    }\n+\n+    public void setTemplate(String template) {\n+        this.template = template;\n+    }\n+\n+    public TraceLevel getTraceLevel() {\n+        return traceLevel;\n+    }\n+\n+    public void setTraceLevel(TraceLevel traceLevel) {\n+        this.traceLevel = traceLevel;\n+    }\n+\n+    public boolean isActive() {\n+        return active;\n+    }\n+\n+    public void setActive(boolean active) {\n+        this.active = active;\n+    }\n+}"},{"sha":"d0ef1b1a5d0448b8ef18d408fc03a45fe48b978a","filename":"common/src/main/java/org/apache/syncope/common/to/NotificationTaskTO.java","status":"modified","additions":106,"deletions":106,"changes":212,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTaskTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,106 +1,106 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.HashSet;\r\n-import java.util.Set;\r\n-\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.types.TraceLevel;\r\n-\r\n-@XmlRootElement(name = \"notificationTask\")\r\n-@XmlType\r\n-public class NotificationTaskTO extends AbstractTaskTO {\r\n-\r\n-    private static final long serialVersionUID = 371671242591093846L;\r\n-\r\n-    private final Set<String> recipients = new HashSet<String>();\r\n-\r\n-    private String sender;\r\n-\r\n-    private String subject;\r\n-\r\n-    private String textBody;\r\n-\r\n-    private String htmlBody;\r\n-\r\n-    private boolean executed;\r\n-\r\n-    private TraceLevel traceLevel;\r\n-\r\n-    @XmlElementWrapper(name = \"recipients\")\r\n-    @XmlElement(name = \"recipient\")\r\n-    @JsonProperty(\"recipients\")\r\n-    public Set<String> getRecipients() {\r\n-        return recipients;\r\n-    }\r\n-\r\n-    public String getSender() {\r\n-        return sender;\r\n-    }\r\n-\r\n-    public void setSender(final String sender) {\r\n-        this.sender = sender;\r\n-    }\r\n-\r\n-    public String getSubject() {\r\n-        return subject;\r\n-    }\r\n-\r\n-    public void setSubject(final String subject) {\r\n-        this.subject = subject;\r\n-    }\r\n-\r\n-    public String getTextBody() {\r\n-        return textBody;\r\n-    }\r\n-\r\n-    public void setTextBody(final String textBody) {\r\n-        this.textBody = textBody;\r\n-    }\r\n-\r\n-    public String getHtmlBody() {\r\n-        return htmlBody;\r\n-    }\r\n-\r\n-    public void setHtmlBody(final String htmlBody) {\r\n-        this.htmlBody = htmlBody;\r\n-    }\r\n-\r\n-    public boolean isExecuted() {\r\n-        return executed;\r\n-    }\r\n-\r\n-    public void setExecuted(boolean executed) {\r\n-        this.executed = executed;\r\n-    }\r\n-\r\n-    public TraceLevel getTraceLevel() {\r\n-        return traceLevel;\r\n-    }\r\n-\r\n-    public void setTraceLevel(TraceLevel traceLevel) {\r\n-        this.traceLevel = traceLevel;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.types.TraceLevel;\n+\n+@XmlRootElement(name = \"notificationTask\")\n+@XmlType\n+public class NotificationTaskTO extends AbstractTaskTO {\n+\n+    private static final long serialVersionUID = 371671242591093846L;\n+\n+    private final Set<String> recipients = new HashSet<String>();\n+\n+    private String sender;\n+\n+    private String subject;\n+\n+    private String textBody;\n+\n+    private String htmlBody;\n+\n+    private boolean executed;\n+\n+    private TraceLevel traceLevel;\n+\n+    @XmlElementWrapper(name = \"recipients\")\n+    @XmlElement(name = \"recipient\")\n+    @JsonProperty(\"recipients\")\n+    public Set<String> getRecipients() {\n+        return recipients;\n+    }\n+\n+    public String getSender() {\n+        return sender;\n+    }\n+\n+    public void setSender(final String sender) {\n+        this.sender = sender;\n+    }\n+\n+    public String getSubject() {\n+        return subject;\n+    }\n+\n+    public void setSubject(final String subject) {\n+        this.subject = subject;\n+    }\n+\n+    public String getTextBody() {\n+        return textBody;\n+    }\n+\n+    public void setTextBody(final String textBody) {\n+        this.textBody = textBody;\n+    }\n+\n+    public String getHtmlBody() {\n+        return htmlBody;\n+    }\n+\n+    public void setHtmlBody(final String htmlBody) {\n+        this.htmlBody = htmlBody;\n+    }\n+\n+    public boolean isExecuted() {\n+        return executed;\n+    }\n+\n+    public void setExecuted(boolean executed) {\n+        this.executed = executed;\n+    }\n+\n+    public TraceLevel getTraceLevel() {\n+        return traceLevel;\n+    }\n+\n+    public void setTraceLevel(TraceLevel traceLevel) {\n+        this.traceLevel = traceLevel;\n+    }\n+}"},{"sha":"a51f2a760b88e20cecd581a83560f21da9a37e4b","filename":"common/src/main/java/org/apache/syncope/common/to/PasswordPolicyTO.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPasswordPolicyTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,55 +1,55 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.types.PasswordPolicySpec;\r\n-import org.apache.syncope.common.types.PolicyType;\r\n-\r\n-@XmlRootElement(name = \"passwordPolicy\")\r\n-@XmlType\r\n-public class PasswordPolicyTO extends AbstractPolicyTO {\r\n-\r\n-    private static final long serialVersionUID = -5606086441294799690L;\r\n-\r\n-    private PasswordPolicySpec specification;\r\n-\r\n-    public PasswordPolicyTO() {\r\n-        this(false);\r\n-    }\r\n-\r\n-    public PasswordPolicyTO(boolean global) {\r\n-        super();\r\n-\r\n-        PolicyType type = global\r\n-                ? PolicyType.GLOBAL_PASSWORD\r\n-                : PolicyType.PASSWORD;\r\n-        setType(type);\r\n-    }\r\n-\r\n-    public void setSpecification(final PasswordPolicySpec specification) {\r\n-        this.specification = specification;\r\n-    }\r\n-\r\n-    public PasswordPolicySpec getSpecification() {\r\n-        return specification;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.types.PasswordPolicySpec;\n+import org.apache.syncope.common.types.PolicyType;\n+\n+@XmlRootElement(name = \"passwordPolicy\")\n+@XmlType\n+public class PasswordPolicyTO extends AbstractPolicyTO {\n+\n+    private static final long serialVersionUID = -5606086441294799690L;\n+\n+    private PasswordPolicySpec specification;\n+\n+    public PasswordPolicyTO() {\n+        this(false);\n+    }\n+\n+    public PasswordPolicyTO(boolean global) {\n+        super();\n+\n+        PolicyType type = global\n+                ? PolicyType.GLOBAL_PASSWORD\n+                : PolicyType.PASSWORD;\n+        setType(type);\n+    }\n+\n+    public void setSpecification(final PasswordPolicySpec specification) {\n+        this.specification = specification;\n+    }\n+\n+    public PasswordPolicySpec getSpecification() {\n+        return specification;\n+    }\n+}"},{"sha":"9983c2ab258a99655b5404abc22a5f056be2e533","filename":"common/src/main/java/org/apache/syncope/common/to/PropagationStatus.java","status":"modified","additions":154,"deletions":154,"changes":308,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationStatus.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,154 +1,154 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-import org.apache.syncope.common.to.ConnObjectTO;\r\n-import org.apache.syncope.common.types.PropagationTaskExecStatus;\r\n-\r\n-/**\r\n- * Single propagation status.\r\n- */\r\n-@XmlRootElement(name = \"propagationStatus\")\r\n-@XmlType\r\n-public class PropagationStatus extends AbstractBaseBean {\r\n-\r\n-    /**\r\n-     * Serial version ID.\r\n-     */\r\n-    private static final long serialVersionUID = 3921498450222857690L;\r\n-\r\n-    /**\r\n-     * Object before propagation.\r\n-     */\r\n-    private ConnObjectTO beforeObj;\r\n-\r\n-    /**\r\n-     * Object after propagation.\r\n-     */\r\n-    private ConnObjectTO afterObj;\r\n-\r\n-    /**\r\n-     * Propagated resource name.\r\n-     */\r\n-    private String resource;\r\n-\r\n-    /**\r\n-     * Propagation task execution status.\r\n-     */\r\n-    private PropagationTaskExecStatus status;\r\n-    \r\n-    /**\r\n-     * Propagation task execution failure message.\r\n-     */\r\n-    private String failureReason;\r\n-\r\n-    /**\r\n-     * After object getter.\r\n-     *\r\n-     * @return after object.\r\n-     */\r\n-    public ConnObjectTO getAfterObj() {\r\n-        return afterObj;\r\n-    }\r\n-\r\n-    /**\r\n-     * After object setter.\r\n-     *\r\n-     * @param afterObj object.\r\n-     */\r\n-    public void setAfterObj(final ConnObjectTO afterObj) {\r\n-        this.afterObj = afterObj;\r\n-    }\r\n-\r\n-    /**\r\n-     * Before object getter.\r\n-     *\r\n-     * @return before object.\r\n-     */\r\n-    public ConnObjectTO getBeforeObj() {\r\n-        return beforeObj;\r\n-    }\r\n-\r\n-    /**\r\n-     * Before object setter.\r\n-     *\r\n-     * @param beforeObj object.\r\n-     */\r\n-    public void setBeforeObj(final ConnObjectTO beforeObj) {\r\n-        this.beforeObj = beforeObj;\r\n-    }\r\n-\r\n-    /**\r\n-     * resource name getter.\r\n-     *\r\n-     * @return resource name.\r\n-     */\r\n-    public String getResource() {\r\n-        return resource;\r\n-    }\r\n-\r\n-    /**\r\n-     * Resource name setter.\r\n-     *\r\n-     * @param resource resource name\r\n-     */\r\n-    public void setResource(final String resource) {\r\n-        this.resource = resource;\r\n-    }\r\n-\r\n-    /**\r\n-     * Propagation execution status getter.\r\n-     *\r\n-     * @return status\r\n-     */\r\n-    public PropagationTaskExecStatus getStatus() {\r\n-        return status;\r\n-    }\r\n-\r\n-    /**\r\n-     * Propagation execution status setter.\r\n-     *\r\n-     * @param status propagation execution status\r\n-     */\r\n-    public void setStatus(final PropagationTaskExecStatus status) {\r\n-        this.status = status;\r\n-    }\r\n-    \r\n-    /**\r\n-     * Propagation execution message getter.\r\n-     *\r\n-     * @return failureReason.\r\n-     */\r\n-    public String getFailureReason() {\r\n-        return failureReason;\r\n-    }\r\n-\r\n-    /**\r\n-     * Propagation execution failure message setter.\r\n-     *\r\n-     * @param failureReason describes why this propagation failed\r\n-     */\r\n-    public void setFailureReason(final String failureReason) {\r\n-        this.failureReason = failureReason;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.to.ConnObjectTO;\n+import org.apache.syncope.common.types.PropagationTaskExecStatus;\n+\n+/**\n+ * Single propagation status.\n+ */\n+@XmlRootElement(name = \"propagationStatus\")\n+@XmlType\n+public class PropagationStatus extends AbstractBaseBean {\n+\n+    /**\n+     * Serial version ID.\n+     */\n+    private static final long serialVersionUID = 3921498450222857690L;\n+\n+    /**\n+     * Object before propagation.\n+     */\n+    private ConnObjectTO beforeObj;\n+\n+    /**\n+     * Object after propagation.\n+     */\n+    private ConnObjectTO afterObj;\n+\n+    /**\n+     * Propagated resource name.\n+     */\n+    private String resource;\n+\n+    /**\n+     * Propagation task execution status.\n+     */\n+    private PropagationTaskExecStatus status;\n+    \n+    /**\n+     * Propagation task execution failure message.\n+     */\n+    private String failureReason;\n+\n+    /**\n+     * After object getter.\n+     *\n+     * @return after object.\n+     */\n+    public ConnObjectTO getAfterObj() {\n+        return afterObj;\n+    }\n+\n+    /**\n+     * After object setter.\n+     *\n+     * @param afterObj object.\n+     */\n+    public void setAfterObj(final ConnObjectTO afterObj) {\n+        this.afterObj = afterObj;\n+    }\n+\n+    /**\n+     * Before object getter.\n+     *\n+     * @return before object.\n+     */\n+    public ConnObjectTO getBeforeObj() {\n+        return beforeObj;\n+    }\n+\n+    /**\n+     * Before object setter.\n+     *\n+     * @param beforeObj object.\n+     */\n+    public void setBeforeObj(final ConnObjectTO beforeObj) {\n+        this.beforeObj = beforeObj;\n+    }\n+\n+    /**\n+     * resource name getter.\n+     *\n+     * @return resource name.\n+     */\n+    public String getResource() {\n+        return resource;\n+    }\n+\n+    /**\n+     * Resource name setter.\n+     *\n+     * @param resource resource name\n+     */\n+    public void setResource(final String resource) {\n+        this.resource = resource;\n+    }\n+\n+    /**\n+     * Propagation execution status getter.\n+     *\n+     * @return status\n+     */\n+    public PropagationTaskExecStatus getStatus() {\n+        return status;\n+    }\n+\n+    /**\n+     * Propagation execution status setter.\n+     *\n+     * @param status propagation execution status\n+     */\n+    public void setStatus(final PropagationTaskExecStatus status) {\n+        this.status = status;\n+    }\n+    \n+    /**\n+     * Propagation execution message getter.\n+     *\n+     * @return failureReason.\n+     */\n+    public String getFailureReason() {\n+        return failureReason;\n+    }\n+\n+    /**\n+     * Propagation execution failure message setter.\n+     *\n+     * @param failureReason describes why this propagation failed\n+     */\n+    public void setFailureReason(final String failureReason) {\n+        this.failureReason = failureReason;\n+    }\n+}"},{"sha":"d6283d9285a184714a5135ac5877cb50c754f55a","filename":"common/src/main/java/org/apache/syncope/common/to/PropagationTaskTO.java","status":"modified","additions":123,"deletions":123,"changes":246,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationTaskTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,123 +1,123 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-import org.apache.syncope.common.types.PropagationMode;\r\n-import org.apache.syncope.common.types.ResourceOperation;\r\n-import org.apache.syncope.common.types.SubjectType;\r\n-\r\n-@XmlRootElement(name = \"propagationTask\")\r\n-@XmlType\r\n-public class PropagationTaskTO extends AbstractTaskTO {\r\n-\r\n-    private static final long serialVersionUID = 386450127003321197L;\r\n-\r\n-    private PropagationMode propagationMode;\r\n-\r\n-    private ResourceOperation propagationOperation;\r\n-\r\n-    private String accountId;\r\n-\r\n-    private String oldAccountId;\r\n-\r\n-    private String xmlAttributes;\r\n-\r\n-    private String resource;\r\n-\r\n-    private String objectClassName;\r\n-\r\n-    private SubjectType subjectType;\r\n-\r\n-    private Long subjectId;\r\n-\r\n-    public String getAccountId() {\r\n-        return accountId;\r\n-    }\r\n-\r\n-    public void setAccountId(final String accountId) {\r\n-        this.accountId = accountId;\r\n-    }\r\n-\r\n-    public String getOldAccountId() {\r\n-        return oldAccountId;\r\n-    }\r\n-\r\n-    public void setOldAccountId(final String oldAccountId) {\r\n-        this.oldAccountId = oldAccountId;\r\n-    }\r\n-\r\n-    public PropagationMode getPropagationMode() {\r\n-        return propagationMode;\r\n-    }\r\n-\r\n-    public void setPropagationMode(final PropagationMode propagationMode) {\r\n-        this.propagationMode = propagationMode;\r\n-    }\r\n-\r\n-    public String getResource() {\r\n-        return resource;\r\n-    }\r\n-\r\n-    public void setResource(final String resource) {\r\n-        this.resource = resource;\r\n-    }\r\n-\r\n-    public ResourceOperation getPropagationOperation() {\r\n-        return propagationOperation;\r\n-    }\r\n-\r\n-    public void setPropagationOperation(final ResourceOperation propagationOperation) {\r\n-\r\n-        this.propagationOperation = propagationOperation;\r\n-    }\r\n-\r\n-    public String getXmlAttributes() {\r\n-        return xmlAttributes;\r\n-    }\r\n-\r\n-    public void setXmlAttributes(final String xmlAttributes) {\r\n-        this.xmlAttributes = xmlAttributes;\r\n-    }\r\n-\r\n-    public String getObjectClassName() {\r\n-        return objectClassName;\r\n-    }\r\n-\r\n-    public void setObjectClassName(final String objectClassName) {\r\n-        this.objectClassName = objectClassName;\r\n-    }\r\n-\r\n-    public SubjectType getSubjectType() {\r\n-        return subjectType;\r\n-    }\r\n-\r\n-    public void setSubjectType(final SubjectType subjectType) {\r\n-        this.subjectType = subjectType;\r\n-    }\r\n-\r\n-    public Long getSubjectId() {\r\n-        return subjectId;\r\n-    }\r\n-\r\n-    public void setSubjectId(final Long subjectId) {\r\n-        this.subjectId = subjectId;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.types.PropagationMode;\n+import org.apache.syncope.common.types.ResourceOperation;\n+import org.apache.syncope.common.types.SubjectType;\n+\n+@XmlRootElement(name = \"propagationTask\")\n+@XmlType\n+public class PropagationTaskTO extends AbstractTaskTO {\n+\n+    private static final long serialVersionUID = 386450127003321197L;\n+\n+    private PropagationMode propagationMode;\n+\n+    private ResourceOperation propagationOperation;\n+\n+    private String accountId;\n+\n+    private String oldAccountId;\n+\n+    private String xmlAttributes;\n+\n+    private String resource;\n+\n+    private String objectClassName;\n+\n+    private SubjectType subjectType;\n+\n+    private Long subjectId;\n+\n+    public String getAccountId() {\n+        return accountId;\n+    }\n+\n+    public void setAccountId(final String accountId) {\n+        this.accountId = accountId;\n+    }\n+\n+    public String getOldAccountId() {\n+        return oldAccountId;\n+    }\n+\n+    public void setOldAccountId(final String oldAccountId) {\n+        this.oldAccountId = oldAccountId;\n+    }\n+\n+    public PropagationMode getPropagationMode() {\n+        return propagationMode;\n+    }\n+\n+    public void setPropagationMode(final PropagationMode propagationMode) {\n+        this.propagationMode = propagationMode;\n+    }\n+\n+    public String getResource() {\n+        return resource;\n+    }\n+\n+    public void setResource(final String resource) {\n+        this.resource = resource;\n+    }\n+\n+    public ResourceOperation getPropagationOperation() {\n+        return propagationOperation;\n+    }\n+\n+    public void setPropagationOperation(final ResourceOperation propagationOperation) {\n+\n+        this.propagationOperation = propagationOperation;\n+    }\n+\n+    public String getXmlAttributes() {\n+        return xmlAttributes;\n+    }\n+\n+    public void setXmlAttributes(final String xmlAttributes) {\n+        this.xmlAttributes = xmlAttributes;\n+    }\n+\n+    public String getObjectClassName() {\n+        return objectClassName;\n+    }\n+\n+    public void setObjectClassName(final String objectClassName) {\n+        this.objectClassName = objectClassName;\n+    }\n+\n+    public SubjectType getSubjectType() {\n+        return subjectType;\n+    }\n+\n+    public void setSubjectType(final SubjectType subjectType) {\n+        this.subjectType = subjectType;\n+    }\n+\n+    public Long getSubjectId() {\n+        return subjectId;\n+    }\n+\n+    public void setSubjectId(final Long subjectId) {\n+        this.subjectId = subjectId;\n+    }\n+}"},{"sha":"60b840e8086ab55d78f094c04560ff8ebe8692f1","filename":"common/src/main/java/org/apache/syncope/common/to/PushTaskTO.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPushTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPushTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPushTaskTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,49 +1,49 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-@XmlRootElement(name = \"pushTask\")\r\n-@XmlType\r\n-public class PushTaskTO extends AbstractSyncTaskTO {\r\n-\r\n-    private static final long serialVersionUID = -2143537546915809018L;\r\n-\r\n-    private String userFilter;\r\n-\r\n-    private String roleFilter;\r\n-\r\n-    public String getUserFilter() {\r\n-        return userFilter;\r\n-    }\r\n-\r\n-    public void setUserFilter(String filter) {\r\n-        this.userFilter = filter;\r\n-    }\r\n-\r\n-    public String getRoleFilter() {\r\n-        return roleFilter;\r\n-    }\r\n-\r\n-    public void setRoleFilter(String roleFilter) {\r\n-        this.roleFilter = roleFilter;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"pushTask\")\n+@XmlType\n+public class PushTaskTO extends AbstractSyncTaskTO {\n+\n+    private static final long serialVersionUID = -2143537546915809018L;\n+\n+    private String userFilter;\n+\n+    private String roleFilter;\n+\n+    public String getUserFilter() {\n+        return userFilter;\n+    }\n+\n+    public void setUserFilter(String filter) {\n+        this.userFilter = filter;\n+    }\n+\n+    public String getRoleFilter() {\n+        return roleFilter;\n+    }\n+\n+    public void setRoleFilter(String roleFilter) {\n+        this.roleFilter = roleFilter;\n+    }\n+}"},{"sha":"95c5164fe277cda287bbff984a2fca63ddce6040","filename":"common/src/main/java/org/apache/syncope/common/to/ReportExecTO.java","status":"modified","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportExecTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,40 +1,40 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-@XmlRootElement(name = \"reportExec\")\r\n-@XmlType\r\n-public class ReportExecTO extends AbstractExecTO {\r\n-\r\n-    private static final long serialVersionUID = -1025555939724089215L;\r\n-\r\n-    private long report;\r\n-\r\n-    public long getReport() {\r\n-        return report;\r\n-    }\r\n-\r\n-    public void setReport(long report) {\r\n-        this.report = report;\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"reportExec\")\n+@XmlType\n+public class ReportExecTO extends AbstractExecTO {\n+\n+    private static final long serialVersionUID = -1025555939724089215L;\n+\n+    private long report;\n+\n+    public long getReport() {\n+        return report;\n+    }\n+\n+    public void setReport(long report) {\n+        this.report = report;\n+    }\n+\n+}"},{"sha":"191de269e73e20032447f230b34347c65e3d6b69","filename":"common/src/main/java/org/apache/syncope/common/to/ReportTO.java","status":"modified","additions":153,"deletions":153,"changes":306,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,153 +1,153 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.Date;\r\n-import java.util.List;\r\n-\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-import org.apache.syncope.common.report.AbstractReportletConf;\r\n-\r\n-@XmlRootElement(name = \"report\")\r\n-@XmlType\r\n-public class ReportTO extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = 5274568072084814410L;\r\n-\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    private List<AbstractReportletConf> reportletConfs = new ArrayList<AbstractReportletConf>();\r\n-\r\n-    private String cronExpression;\r\n-\r\n-    private List<ReportExecTO> executions = new ArrayList<ReportExecTO>();\r\n-\r\n-    private String latestExecStatus;\r\n-\r\n-    private Date lastExec;\r\n-\r\n-    private Date nextExec;\r\n-\r\n-    private Date startDate;\r\n-\r\n-    private Date endDate;\r\n-\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(final String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"reportletConfs\")\r\n-    @XmlElement(name = \"reportletConf\")\r\n-    @JsonProperty(\"reportletConfs\")\r\n-    public List<AbstractReportletConf> getReportletConfs() {\r\n-        return reportletConfs;\r\n-    }\r\n-\r\n-    public String getCronExpression() {\r\n-        return cronExpression;\r\n-    }\r\n-\r\n-    public void setCronExpression(final String cronExpression) {\r\n-        this.cronExpression = cronExpression;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"executions\")\r\n-    @XmlElement(name = \"execution\")\r\n-    @JsonProperty(\"executions\")\r\n-    public List<ReportExecTO> getExecutions() {\r\n-        return executions;\r\n-    }\r\n-\r\n-    public String getLatestExecStatus() {\r\n-        return latestExecStatus;\r\n-    }\r\n-\r\n-    public void setLatestExecStatus(final String latestExecStatus) {\r\n-        this.latestExecStatus = latestExecStatus;\r\n-    }\r\n-\r\n-    public Date getLastExec() {\r\n-        return lastExec == null\r\n-                ? null\r\n-                : new Date(lastExec.getTime());\r\n-    }\r\n-\r\n-    public void setLastExec(final Date lastExec) {\r\n-        if (lastExec != null) {\r\n-            this.lastExec = new Date(lastExec.getTime());\r\n-        }\r\n-    }\r\n-\r\n-    public Date getNextExec() {\r\n-        return nextExec == null\r\n-                ? null\r\n-                : new Date(nextExec.getTime());\r\n-    }\r\n-\r\n-    public void setNextExec(final Date nextExec) {\r\n-        if (nextExec != null) {\r\n-            this.nextExec = new Date(nextExec.getTime());\r\n-        }\r\n-    }\r\n-\r\n-    public Date getStartDate() {\r\n-        return startDate == null\r\n-                ? null\r\n-                : new Date(startDate.getTime());\r\n-    }\r\n-\r\n-    public void setStartDate(final Date startDate) {\r\n-        if (startDate != null) {\r\n-            this.startDate = new Date(startDate.getTime());\r\n-        }\r\n-    }\r\n-\r\n-    public Date getEndDate() {\r\n-        return endDate == null\r\n-                ? null\r\n-                : new Date(endDate.getTime());\r\n-    }\r\n-\r\n-    public void setEndDate(final Date endDate) {\r\n-        if (endDate != null) {\r\n-            this.endDate = new Date(endDate.getTime());\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.report.AbstractReportletConf;\n+\n+@XmlRootElement(name = \"report\")\n+@XmlType\n+public class ReportTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 5274568072084814410L;\n+\n+    private long id;\n+\n+    private String name;\n+\n+    private List<AbstractReportletConf> reportletConfs = new ArrayList<AbstractReportletConf>();\n+\n+    private String cronExpression;\n+\n+    private List<ReportExecTO> executions = new ArrayList<ReportExecTO>();\n+\n+    private String latestExecStatus;\n+\n+    private Date lastExec;\n+\n+    private Date nextExec;\n+\n+    private Date startDate;\n+\n+    private Date endDate;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    @XmlElementWrapper(name = \"reportletConfs\")\n+    @XmlElement(name = \"reportletConf\")\n+    @JsonProperty(\"reportletConfs\")\n+    public List<AbstractReportletConf> getReportletConfs() {\n+        return reportletConfs;\n+    }\n+\n+    public String getCronExpression() {\n+        return cronExpression;\n+    }\n+\n+    public void setCronExpression(final String cronExpression) {\n+        this.cronExpression = cronExpression;\n+    }\n+\n+    @XmlElementWrapper(name = \"executions\")\n+    @XmlElement(name = \"execution\")\n+    @JsonProperty(\"executions\")\n+    public List<ReportExecTO> getExecutions() {\n+        return executions;\n+    }\n+\n+    public String getLatestExecStatus() {\n+        return latestExecStatus;\n+    }\n+\n+    public void setLatestExecStatus(final String latestExecStatus) {\n+        this.latestExecStatus = latestExecStatus;\n+    }\n+\n+    public Date getLastExec() {\n+        return lastExec == null\n+                ? null\n+                : new Date(lastExec.getTime());\n+    }\n+\n+    public void setLastExec(final Date lastExec) {\n+        if (lastExec != null) {\n+            this.lastExec = new Date(lastExec.getTime());\n+        }\n+    }\n+\n+    public Date getNextExec() {\n+        return nextExec == null\n+                ? null\n+                : new Date(nextExec.getTime());\n+    }\n+\n+    public void setNextExec(final Date nextExec) {\n+        if (nextExec != null) {\n+            this.nextExec = new Date(nextExec.getTime());\n+        }\n+    }\n+\n+    public Date getStartDate() {\n+        return startDate == null\n+                ? null\n+                : new Date(startDate.getTime());\n+    }\n+\n+    public void setStartDate(final Date startDate) {\n+        if (startDate != null) {\n+            this.startDate = new Date(startDate.getTime());\n+        }\n+    }\n+\n+    public Date getEndDate() {\n+        return endDate == null\n+                ? null\n+                : new Date(endDate.getTime());\n+    }\n+\n+    public void setEndDate(final Date endDate) {\n+        if (endDate != null) {\n+            this.endDate = new Date(endDate.getTime());\n+        }\n+    }\n+}"},{"sha":"676aa761a2a1b3086e1e82e6f7a3d75762fac8d5","filename":"common/src/main/java/org/apache/syncope/common/to/ResourceTO.java","status":"modified","additions":270,"deletions":270,"changes":540,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FResourceTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,270 +1,270 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.HashSet;\r\n-import java.util.List;\r\n-import java.util.Set;\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-import org.apache.syncope.common.types.ConnConfProperty;\r\n-import org.apache.syncope.common.types.PropagationMode;\r\n-import org.apache.syncope.common.types.TraceLevel;\r\n-\r\n-@XmlRootElement(name = \"resource\")\r\n-@XmlType\r\n-public class ResourceTO extends AbstractSysInfoTO {\r\n-\r\n-    private static final long serialVersionUID = -9193551354041698963L;\r\n-\r\n-    /**\r\n-     * The resource identifier is the name.\r\n-     */\r\n-    private String name;\r\n-\r\n-    /**\r\n-     * The resource type is identified by the associated connector.\r\n-     */\r\n-    private Long connectorId;\r\n-\r\n-    /**\r\n-     * Convenience information: display name for the connector id.\r\n-     */\r\n-    private String connectorDisplayName;\r\n-\r\n-    private MappingTO umapping;\r\n-\r\n-    private MappingTO rmapping;\r\n-\r\n-    private boolean propagationPrimary;\r\n-\r\n-    private int propagationPriority;\r\n-\r\n-    private boolean randomPwdIfNotProvided;\r\n-\r\n-    private PropagationMode propagationMode;\r\n-\r\n-    private boolean enforceMandatoryCondition;\r\n-\r\n-    private TraceLevel createTraceLevel;\r\n-\r\n-    private TraceLevel updateTraceLevel;\r\n-\r\n-    private TraceLevel deleteTraceLevel;\r\n-\r\n-    private TraceLevel syncTraceLevel;\r\n-\r\n-    private Long passwordPolicy;\r\n-\r\n-    private Long accountPolicy;\r\n-\r\n-    private Long syncPolicy;\r\n-\r\n-    private Set<ConnConfProperty> connConfProperties;\r\n-\r\n-    private String usyncToken;\r\n-\r\n-    private String rsyncToken;\r\n-\r\n-    private List<String> propagationActionsClassNames = new ArrayList<String>();\r\n-\r\n-    public ResourceTO() {\r\n-        super();\r\n-\r\n-        connConfProperties = new HashSet<ConnConfProperty>();\r\n-        propagationMode = PropagationMode.TWO_PHASES;\r\n-        propagationPriority = 0;\r\n-\r\n-        createTraceLevel = TraceLevel.ALL;\r\n-        updateTraceLevel = TraceLevel.ALL;\r\n-        deleteTraceLevel = TraceLevel.ALL;\r\n-        syncTraceLevel = TraceLevel.ALL;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public boolean isEnforceMandatoryCondition() {\r\n-        return enforceMandatoryCondition;\r\n-    }\r\n-\r\n-    public void setEnforceMandatoryCondition(boolean enforceMandatoryCondition) {\r\n-        this.enforceMandatoryCondition = enforceMandatoryCondition;\r\n-    }\r\n-\r\n-    public Long getConnectorId() {\r\n-        return connectorId;\r\n-    }\r\n-\r\n-    public void setConnectorId(Long connectorId) {\r\n-        this.connectorId = connectorId;\r\n-    }\r\n-\r\n-    public String getConnectorDisplayName() {\r\n-        return connectorDisplayName;\r\n-    }\r\n-\r\n-    public void setConnectorDisplayName(String connectorDisplayName) {\r\n-        this.connectorDisplayName = connectorDisplayName;\r\n-    }\r\n-\r\n-    public MappingTO getUmapping() {\r\n-        return umapping;\r\n-    }\r\n-\r\n-    public void setUmapping(MappingTO umapping) {\r\n-        this.umapping = umapping;\r\n-    }\r\n-\r\n-    public MappingTO getRmapping() {\r\n-        return rmapping;\r\n-    }\r\n-\r\n-    public void setRmapping(MappingTO rmapping) {\r\n-        this.rmapping = rmapping;\r\n-    }\r\n-\r\n-    public boolean isPropagationPrimary() {\r\n-        return propagationPrimary;\r\n-    }\r\n-\r\n-    public void setPropagationPrimary(boolean propagationPrimary) {\r\n-        this.propagationPrimary = propagationPrimary;\r\n-    }\r\n-\r\n-    public int getPropagationPriority() {\r\n-        return propagationPriority;\r\n-    }\r\n-\r\n-    public void setPropagationPriority(int propagationPriority) {\r\n-        this.propagationPriority = propagationPriority;\r\n-    }\r\n-\r\n-    public boolean isRandomPwdIfNotProvided() {\r\n-        return randomPwdIfNotProvided;\r\n-    }\r\n-\r\n-    public void setRandomPwdIfNotProvided(boolean randomPwdIfNotProvided) {\r\n-        this.randomPwdIfNotProvided = randomPwdIfNotProvided;\r\n-    }\r\n-\r\n-    public PropagationMode getPropagationMode() {\r\n-        return propagationMode;\r\n-    }\r\n-\r\n-    public void setPropagationMode(PropagationMode propagationMode) {\r\n-        this.propagationMode = propagationMode;\r\n-    }\r\n-\r\n-    public TraceLevel getCreateTraceLevel() {\r\n-        return createTraceLevel;\r\n-    }\r\n-\r\n-    public void setCreateTraceLevel(TraceLevel createTraceLevel) {\r\n-        this.createTraceLevel = createTraceLevel;\r\n-    }\r\n-\r\n-    public TraceLevel getDeleteTraceLevel() {\r\n-        return deleteTraceLevel;\r\n-    }\r\n-\r\n-    public void setDeleteTraceLevel(TraceLevel deleteTraceLevel) {\r\n-        this.deleteTraceLevel = deleteTraceLevel;\r\n-    }\r\n-\r\n-    public TraceLevel getUpdateTraceLevel() {\r\n-        return updateTraceLevel;\r\n-    }\r\n-\r\n-    public void setUpdateTraceLevel(TraceLevel updateTraceLevel) {\r\n-        this.updateTraceLevel = updateTraceLevel;\r\n-    }\r\n-\r\n-    public Long getPasswordPolicy() {\r\n-        return passwordPolicy;\r\n-    }\r\n-\r\n-    public void setPasswordPolicy(Long passwordPolicy) {\r\n-        this.passwordPolicy = passwordPolicy;\r\n-    }\r\n-\r\n-    public Long getAccountPolicy() {\r\n-        return accountPolicy;\r\n-    }\r\n-\r\n-    public void setAccountPolicy(Long accountPolicy) {\r\n-        this.accountPolicy = accountPolicy;\r\n-    }\r\n-\r\n-    public Long getSyncPolicy() {\r\n-        return syncPolicy;\r\n-    }\r\n-\r\n-    public void setSyncPolicy(Long syncPolicy) {\r\n-        this.syncPolicy = syncPolicy;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"connConfProperties\")\r\n-    @XmlElement(name = \"property\")\r\n-    @JsonProperty(\"connConfProperties\")\r\n-    public Set<ConnConfProperty> getConnConfProperties() {\r\n-        return connConfProperties;\r\n-    }\r\n-\r\n-    public TraceLevel getSyncTraceLevel() {\r\n-        return syncTraceLevel;\r\n-    }\r\n-\r\n-    public void setSyncTraceLevel(final TraceLevel syncTraceLevel) {\r\n-        this.syncTraceLevel = syncTraceLevel;\r\n-    }\r\n-\r\n-    public String getUsyncToken() {\r\n-        return usyncToken;\r\n-    }\r\n-\r\n-    public void setUsyncToken(final String syncToken) {\r\n-        this.usyncToken = syncToken;\r\n-    }\r\n-\r\n-    public String getRsyncToken() {\r\n-        return rsyncToken;\r\n-    }\r\n-\r\n-    public void setRsyncToken(final String syncToken) {\r\n-        this.rsyncToken = syncToken;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"propagationActionsClassNames\")\r\n-    @XmlElement(name = \"propagationActionsClassName\")\r\n-    @JsonProperty(\"propagationActionsClassNames\")\r\n-    public List<String> getPropagationActionsClassNames() {\r\n-        return propagationActionsClassNames;\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.types.ConnConfProperty;\n+import org.apache.syncope.common.types.PropagationMode;\n+import org.apache.syncope.common.types.TraceLevel;\n+\n+@XmlRootElement(name = \"resource\")\n+@XmlType\n+public class ResourceTO extends AbstractSysInfoTO {\n+\n+    private static final long serialVersionUID = -9193551354041698963L;\n+\n+    /**\n+     * The resource identifier is the name.\n+     */\n+    private String name;\n+\n+    /**\n+     * The resource type is identified by the associated connector.\n+     */\n+    private Long connectorId;\n+\n+    /**\n+     * Convenience information: display name for the connector id.\n+     */\n+    private String connectorDisplayName;\n+\n+    private MappingTO umapping;\n+\n+    private MappingTO rmapping;\n+\n+    private boolean propagationPrimary;\n+\n+    private int propagationPriority;\n+\n+    private boolean randomPwdIfNotProvided;\n+\n+    private PropagationMode propagationMode;\n+\n+    private boolean enforceMandatoryCondition;\n+\n+    private TraceLevel createTraceLevel;\n+\n+    private TraceLevel updateTraceLevel;\n+\n+    private TraceLevel deleteTraceLevel;\n+\n+    private TraceLevel syncTraceLevel;\n+\n+    private Long passwordPolicy;\n+\n+    private Long accountPolicy;\n+\n+    private Long syncPolicy;\n+\n+    private Set<ConnConfProperty> connConfProperties;\n+\n+    private String usyncToken;\n+\n+    private String rsyncToken;\n+\n+    private List<String> propagationActionsClassNames = new ArrayList<String>();\n+\n+    public ResourceTO() {\n+        super();\n+\n+        connConfProperties = new HashSet<ConnConfProperty>();\n+        propagationMode = PropagationMode.TWO_PHASES;\n+        propagationPriority = 0;\n+\n+        createTraceLevel = TraceLevel.ALL;\n+        updateTraceLevel = TraceLevel.ALL;\n+        deleteTraceLevel = TraceLevel.ALL;\n+        syncTraceLevel = TraceLevel.ALL;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public boolean isEnforceMandatoryCondition() {\n+        return enforceMandatoryCondition;\n+    }\n+\n+    public void setEnforceMandatoryCondition(boolean enforceMandatoryCondition) {\n+        this.enforceMandatoryCondition = enforceMandatoryCondition;\n+    }\n+\n+    public Long getConnectorId() {\n+        return connectorId;\n+    }\n+\n+    public void setConnectorId(Long connectorId) {\n+        this.connectorId = connectorId;\n+    }\n+\n+    public String getConnectorDisplayName() {\n+        return connectorDisplayName;\n+    }\n+\n+    public void setConnectorDisplayName(String connectorDisplayName) {\n+        this.connectorDisplayName = connectorDisplayName;\n+    }\n+\n+    public MappingTO getUmapping() {\n+        return umapping;\n+    }\n+\n+    public void setUmapping(MappingTO umapping) {\n+        this.umapping = umapping;\n+    }\n+\n+    public MappingTO getRmapping() {\n+        return rmapping;\n+    }\n+\n+    public void setRmapping(MappingTO rmapping) {\n+        this.rmapping = rmapping;\n+    }\n+\n+    public boolean isPropagationPrimary() {\n+        return propagationPrimary;\n+    }\n+\n+    public void setPropagationPrimary(boolean propagationPrimary) {\n+        this.propagationPrimary = propagationPrimary;\n+    }\n+\n+    public int getPropagationPriority() {\n+        return propagationPriority;\n+    }\n+\n+    public void setPropagationPriority(int propagationPriority) {\n+        this.propagationPriority = propagationPriority;\n+    }\n+\n+    public boolean isRandomPwdIfNotProvided() {\n+        return randomPwdIfNotProvided;\n+    }\n+\n+    public void setRandomPwdIfNotProvided(boolean randomPwdIfNotProvided) {\n+        this.randomPwdIfNotProvided = randomPwdIfNotProvided;\n+    }\n+\n+    public PropagationMode getPropagationMode() {\n+        return propagationMode;\n+    }\n+\n+    public void setPropagationMode(PropagationMode propagationMode) {\n+        this.propagationMode = propagationMode;\n+    }\n+\n+    public TraceLevel getCreateTraceLevel() {\n+        return createTraceLevel;\n+    }\n+\n+    public void setCreateTraceLevel(TraceLevel createTraceLevel) {\n+        this.createTraceLevel = createTraceLevel;\n+    }\n+\n+    public TraceLevel getDeleteTraceLevel() {\n+        return deleteTraceLevel;\n+    }\n+\n+    public void setDeleteTraceLevel(TraceLevel deleteTraceLevel) {\n+        this.deleteTraceLevel = deleteTraceLevel;\n+    }\n+\n+    public TraceLevel getUpdateTraceLevel() {\n+        return updateTraceLevel;\n+    }\n+\n+    public void setUpdateTraceLevel(TraceLevel updateTraceLevel) {\n+        this.updateTraceLevel = updateTraceLevel;\n+    }\n+\n+    public Long getPasswordPolicy() {\n+        return passwordPolicy;\n+    }\n+\n+    public void setPasswordPolicy(Long passwordPolicy) {\n+        this.passwordPolicy = passwordPolicy;\n+    }\n+\n+    public Long getAccountPolicy() {\n+        return accountPolicy;\n+    }\n+\n+    public void setAccountPolicy(Long accountPolicy) {\n+        this.accountPolicy = accountPolicy;\n+    }\n+\n+    public Long getSyncPolicy() {\n+        return syncPolicy;\n+    }\n+\n+    public void setSyncPolicy(Long syncPolicy) {\n+        this.syncPolicy = syncPolicy;\n+    }\n+\n+    @XmlElementWrapper(name = \"connConfProperties\")\n+    @XmlElement(name = \"property\")\n+    @JsonProperty(\"connConfProperties\")\n+    public Set<ConnConfProperty> getConnConfProperties() {\n+        return connConfProperties;\n+    }\n+\n+    public TraceLevel getSyncTraceLevel() {\n+        return syncTraceLevel;\n+    }\n+\n+    public void setSyncTraceLevel(final TraceLevel syncTraceLevel) {\n+        this.syncTraceLevel = syncTraceLevel;\n+    }\n+\n+    public String getUsyncToken() {\n+        return usyncToken;\n+    }\n+\n+    public void setUsyncToken(final String syncToken) {\n+        this.usyncToken = syncToken;\n+    }\n+\n+    public String getRsyncToken() {\n+        return rsyncToken;\n+    }\n+\n+    public void setRsyncToken(final String syncToken) {\n+        this.rsyncToken = syncToken;\n+    }\n+\n+    @XmlElementWrapper(name = \"propagationActionsClassNames\")\n+    @XmlElement(name = \"propagationActionsClassName\")\n+    @JsonProperty(\"propagationActionsClassNames\")\n+    public List<String> getPropagationActionsClassNames() {\n+        return propagationActionsClassNames;\n+    }\n+\n+}"},{"sha":"245ea079f94362270a701dacdb55b5e5d91a0b66","filename":"common/src/main/java/org/apache/syncope/common/to/RoleTO.java","status":"modified","additions":258,"deletions":258,"changes":516,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FRoleTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,258 +1,258 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-@XmlRootElement(name = \"role\")\r\n-@XmlType\r\n-@JsonIgnoreProperties({ \"displayName\" })\r\n-public class RoleTO extends AbstractSubjectTO {\r\n-\r\n-    private static final long serialVersionUID = -7785920258290147542L;\r\n-\r\n-    private String name;\r\n-\r\n-    private long parent;\r\n-\r\n-    private Long userOwner;\r\n-\r\n-    private Long roleOwner;\r\n-\r\n-    private boolean inheritOwner;\r\n-\r\n-    private boolean inheritTemplates;\r\n-\r\n-    private boolean inheritAttrs;\r\n-\r\n-    private boolean inheritDerAttrs;\r\n-\r\n-    private boolean inheritVirAttrs;\r\n-\r\n-    private boolean inheritPasswordPolicy;\r\n-\r\n-    private boolean inheritAccountPolicy;\r\n-\r\n-    private final List<String> entitlements = new ArrayList<String>();\r\n-\r\n-    private List<String> rAttrTemplates = new ArrayList<String>();\r\n-\r\n-    private List<String> rDerAttrTemplates = new ArrayList<String>();\r\n-\r\n-    private List<String> rVirAttrTemplates = new ArrayList<String>();\r\n-\r\n-    private List<String> mAttrTemplates = new ArrayList<String>();\r\n-\r\n-    private List<String> mDerAttrTemplates = new ArrayList<String>();\r\n-\r\n-    private List<String> mVirAttrTemplates = new ArrayList<String>();\r\n-\r\n-    private Long passwordPolicy;\r\n-\r\n-    private Long accountPolicy;\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(final String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public long getParent() {\r\n-        return parent;\r\n-    }\r\n-\r\n-    public void setParent(final long parent) {\r\n-        this.parent = parent;\r\n-    }\r\n-\r\n-    public Long getUserOwner() {\r\n-        return userOwner;\r\n-    }\r\n-\r\n-    public void setUserOwner(final Long userOwner) {\r\n-        this.userOwner = userOwner;\r\n-    }\r\n-\r\n-    public Long getRoleOwner() {\r\n-        return roleOwner;\r\n-    }\r\n-\r\n-    public void setRoleOwner(final Long roleOwner) {\r\n-        this.roleOwner = roleOwner;\r\n-    }\r\n-\r\n-    public boolean isInheritOwner() {\r\n-        return inheritOwner;\r\n-    }\r\n-\r\n-    public void setInheritOwner(final boolean inheritOwner) {\r\n-        this.inheritOwner = inheritOwner;\r\n-    }\r\n-\r\n-    public boolean isInheritTemplates() {\r\n-        return inheritTemplates;\r\n-    }\r\n-\r\n-    public void setInheritTemplates(boolean inheritTemplates) {\r\n-        this.inheritTemplates = inheritTemplates;\r\n-    }\r\n-\r\n-    public boolean isInheritAttrs() {\r\n-        return inheritAttrs;\r\n-    }\r\n-\r\n-    public void setInheritAttrs(final boolean inheritAttrs) {\r\n-        this.inheritAttrs = inheritAttrs;\r\n-    }\r\n-\r\n-    public boolean isInheritDerAttrs() {\r\n-        return inheritDerAttrs;\r\n-    }\r\n-\r\n-    public void setInheritDerAttrs(final boolean inheritDerAttrs) {\r\n-        this.inheritDerAttrs = inheritDerAttrs;\r\n-    }\r\n-\r\n-    public boolean isInheritVirAttrs() {\r\n-        return inheritVirAttrs;\r\n-    }\r\n-\r\n-    public void setInheritVirAttrs(final boolean inheritVirAttrs) {\r\n-        this.inheritVirAttrs = inheritVirAttrs;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"entitlements\")\r\n-    @XmlElement(name = \"entitlement\")\r\n-    @JsonProperty(\"entitlements\")\r\n-    public List<String> getEntitlements() {\r\n-        return entitlements;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"rAttrTemplates\")\r\n-    @XmlElement(name = \"rAttrTemplate\")\r\n-    @JsonProperty(\"rAttrTemplates\")\r\n-    public List<String> getRAttrTemplates() {\r\n-        return rAttrTemplates;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"rDerAttrTemplates\")\r\n-    @XmlElement(name = \"rDerAttrTemplate\")\r\n-    @JsonProperty(\"rDerAttrTemplates\")\r\n-    public List<String> getRDerAttrTemplates() {\r\n-        return rDerAttrTemplates;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"rVirAttrTemplates\")\r\n-    @XmlElement(name = \"rVirAttrTemplate\")\r\n-    @JsonProperty(\"rVirAttrTemplates\")\r\n-    public List<String> getRVirAttrTemplates() {\r\n-        return rVirAttrTemplates;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"mAttrTemplates\")\r\n-    @XmlElement(name = \"mAttrTemplate\")\r\n-    @JsonProperty(\"mAttrTemplates\")\r\n-    public List<String> getMAttrTemplates() {\r\n-        return mAttrTemplates;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"mDerAttrTemplates\")\r\n-    @XmlElement(name = \"mDerAttrTemplate\")\r\n-    @JsonProperty(\"mDerAttrTemplates\")\r\n-    public List<String> getMDerAttrTemplates() {\r\n-        return mDerAttrTemplates;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"mVirAttrTemplates\")\r\n-    @XmlElement(name = \"mVirAttrTemplate\")\r\n-    @JsonProperty(\"mVirAttrTemplates\")\r\n-    public List<String> getMVirAttrTemplates() {\r\n-        return mVirAttrTemplates;\r\n-    }\r\n-\r\n-    public Long getPasswordPolicy() {\r\n-        return passwordPolicy;\r\n-    }\r\n-\r\n-    public void setPasswordPolicy(final Long passwordPolicy) {\r\n-        this.passwordPolicy = passwordPolicy;\r\n-    }\r\n-\r\n-    public boolean isInheritPasswordPolicy() {\r\n-        return inheritPasswordPolicy;\r\n-    }\r\n-\r\n-    /**\r\n-     * Specify if password policy must be inherited. In this case eventual passwordPolicy occurrence will be ignored.\r\n-     *\r\n-     * @param inheritPasswordPolicy 'true' to inherit policy, false otherwise.\r\n-     */\r\n-    public void setInheritPasswordPolicy(final boolean inheritPasswordPolicy) {\r\n-        this.inheritPasswordPolicy = inheritPasswordPolicy;\r\n-    }\r\n-\r\n-    public Long getAccountPolicy() {\r\n-        return accountPolicy;\r\n-    }\r\n-\r\n-    public void setAccountPolicy(final Long accountPolicy) {\r\n-        this.accountPolicy = accountPolicy;\r\n-    }\r\n-\r\n-    public boolean isInheritAccountPolicy() {\r\n-        return inheritAccountPolicy;\r\n-    }\r\n-\r\n-    /**\r\n-     * Specify if account policy must be inherited. In this case eventual accountPolicy occurrence will be ignored.\r\n-     *\r\n-     * @param inheritAccountPolicy 'true' to inherit policy, false otherwise.\r\n-     */\r\n-    public void setInheritAccountPolicy(final boolean inheritAccountPolicy) {\r\n-        this.inheritAccountPolicy = inheritAccountPolicy;\r\n-    }\r\n-\r\n-    public String getDisplayName() {\r\n-        return getId() + \" \" + getName();\r\n-    }\r\n-\r\n-    public static long fromDisplayName(final String displayName) {\r\n-        long result = 0;\r\n-        if (displayName != null && !displayName.isEmpty() && displayName.indexOf(' ') != -1) {\r\n-            try {\r\n-                result = Long.valueOf(displayName.split(\" \")[0]);\r\n-            } catch (NumberFormatException e) {\r\n-                // just to avoid PMD warning about \"empty catch block\"\r\n-                result = 0;\r\n-            }\r\n-        }\r\n-\r\n-        return result;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"role\")\n+@XmlType\n+@JsonIgnoreProperties({ \"displayName\" })\n+public class RoleTO extends AbstractSubjectTO {\n+\n+    private static final long serialVersionUID = -7785920258290147542L;\n+\n+    private String name;\n+\n+    private long parent;\n+\n+    private Long userOwner;\n+\n+    private Long roleOwner;\n+\n+    private boolean inheritOwner;\n+\n+    private boolean inheritTemplates;\n+\n+    private boolean inheritAttrs;\n+\n+    private boolean inheritDerAttrs;\n+\n+    private boolean inheritVirAttrs;\n+\n+    private boolean inheritPasswordPolicy;\n+\n+    private boolean inheritAccountPolicy;\n+\n+    private final List<String> entitlements = new ArrayList<String>();\n+\n+    private List<String> rAttrTemplates = new ArrayList<String>();\n+\n+    private List<String> rDerAttrTemplates = new ArrayList<String>();\n+\n+    private List<String> rVirAttrTemplates = new ArrayList<String>();\n+\n+    private List<String> mAttrTemplates = new ArrayList<String>();\n+\n+    private List<String> mDerAttrTemplates = new ArrayList<String>();\n+\n+    private List<String> mVirAttrTemplates = new ArrayList<String>();\n+\n+    private Long passwordPolicy;\n+\n+    private Long accountPolicy;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    public long getParent() {\n+        return parent;\n+    }\n+\n+    public void setParent(final long parent) {\n+        this.parent = parent;\n+    }\n+\n+    public Long getUserOwner() {\n+        return userOwner;\n+    }\n+\n+    public void setUserOwner(final Long userOwner) {\n+        this.userOwner = userOwner;\n+    }\n+\n+    public Long getRoleOwner() {\n+        return roleOwner;\n+    }\n+\n+    public void setRoleOwner(final Long roleOwner) {\n+        this.roleOwner = roleOwner;\n+    }\n+\n+    public boolean isInheritOwner() {\n+        return inheritOwner;\n+    }\n+\n+    public void setInheritOwner(final boolean inheritOwner) {\n+        this.inheritOwner = inheritOwner;\n+    }\n+\n+    public boolean isInheritTemplates() {\n+        return inheritTemplates;\n+    }\n+\n+    public void setInheritTemplates(boolean inheritTemplates) {\n+        this.inheritTemplates = inheritTemplates;\n+    }\n+\n+    public boolean isInheritAttrs() {\n+        return inheritAttrs;\n+    }\n+\n+    public void setInheritAttrs(final boolean inheritAttrs) {\n+        this.inheritAttrs = inheritAttrs;\n+    }\n+\n+    public boolean isInheritDerAttrs() {\n+        return inheritDerAttrs;\n+    }\n+\n+    public void setInheritDerAttrs(final boolean inheritDerAttrs) {\n+        this.inheritDerAttrs = inheritDerAttrs;\n+    }\n+\n+    public boolean isInheritVirAttrs() {\n+        return inheritVirAttrs;\n+    }\n+\n+    public void setInheritVirAttrs(final boolean inheritVirAttrs) {\n+        this.inheritVirAttrs = inheritVirAttrs;\n+    }\n+\n+    @XmlElementWrapper(name = \"entitlements\")\n+    @XmlElement(name = \"entitlement\")\n+    @JsonProperty(\"entitlements\")\n+    public List<String> getEntitlements() {\n+        return entitlements;\n+    }\n+\n+    @XmlElementWrapper(name = \"rAttrTemplates\")\n+    @XmlElement(name = \"rAttrTemplate\")\n+    @JsonProperty(\"rAttrTemplates\")\n+    public List<String> getRAttrTemplates() {\n+        return rAttrTemplates;\n+    }\n+\n+    @XmlElementWrapper(name = \"rDerAttrTemplates\")\n+    @XmlElement(name = \"rDerAttrTemplate\")\n+    @JsonProperty(\"rDerAttrTemplates\")\n+    public List<String> getRDerAttrTemplates() {\n+        return rDerAttrTemplates;\n+    }\n+\n+    @XmlElementWrapper(name = \"rVirAttrTemplates\")\n+    @XmlElement(name = \"rVirAttrTemplate\")\n+    @JsonProperty(\"rVirAttrTemplates\")\n+    public List<String> getRVirAttrTemplates() {\n+        return rVirAttrTemplates;\n+    }\n+\n+    @XmlElementWrapper(name = \"mAttrTemplates\")\n+    @XmlElement(name = \"mAttrTemplate\")\n+    @JsonProperty(\"mAttrTemplates\")\n+    public List<String> getMAttrTemplates() {\n+        return mAttrTemplates;\n+    }\n+\n+    @XmlElementWrapper(name = \"mDerAttrTemplates\")\n+    @XmlElement(name = \"mDerAttrTemplate\")\n+    @JsonProperty(\"mDerAttrTemplates\")\n+    public List<String> getMDerAttrTemplates() {\n+        return mDerAttrTemplates;\n+    }\n+\n+    @XmlElementWrapper(name = \"mVirAttrTemplates\")\n+    @XmlElement(name = \"mVirAttrTemplate\")\n+    @JsonProperty(\"mVirAttrTemplates\")\n+    public List<String> getMVirAttrTemplates() {\n+        return mVirAttrTemplates;\n+    }\n+\n+    public Long getPasswordPolicy() {\n+        return passwordPolicy;\n+    }\n+\n+    public void setPasswordPolicy(final Long passwordPolicy) {\n+        this.passwordPolicy = passwordPolicy;\n+    }\n+\n+    public boolean isInheritPasswordPolicy() {\n+        return inheritPasswordPolicy;\n+    }\n+\n+    /**\n+     * Specify if password policy must be inherited. In this case eventual passwordPolicy occurrence will be ignored.\n+     *\n+     * @param inheritPasswordPolicy 'true' to inherit policy, false otherwise.\n+     */\n+    public void setInheritPasswordPolicy(final boolean inheritPasswordPolicy) {\n+        this.inheritPasswordPolicy = inheritPasswordPolicy;\n+    }\n+\n+    public Long getAccountPolicy() {\n+        return accountPolicy;\n+    }\n+\n+    public void setAccountPolicy(final Long accountPolicy) {\n+        this.accountPolicy = accountPolicy;\n+    }\n+\n+    public boolean isInheritAccountPolicy() {\n+        return inheritAccountPolicy;\n+    }\n+\n+    /**\n+     * Specify if account policy must be inherited. In this case eventual accountPolicy occurrence will be ignored.\n+     *\n+     * @param inheritAccountPolicy 'true' to inherit policy, false otherwise.\n+     */\n+    public void setInheritAccountPolicy(final boolean inheritAccountPolicy) {\n+        this.inheritAccountPolicy = inheritAccountPolicy;\n+    }\n+\n+    public String getDisplayName() {\n+        return getId() + \" \" + getName();\n+    }\n+\n+    public static long fromDisplayName(final String displayName) {\n+        long result = 0;\n+        if (displayName != null && !displayName.isEmpty() && displayName.indexOf(' ') != -1) {\n+            try {\n+                result = Long.valueOf(displayName.split(\" \")[0]);\n+            } catch (NumberFormatException e) {\n+                // just to avoid PMD warning about \"empty catch block\"\n+                result = 0;\n+            }\n+        }\n+\n+        return result;\n+    }\n+}"},{"sha":"8f189fbbc665e37dfb474161d2dbd5616a330cba","filename":"common/src/main/java/org/apache/syncope/common/to/SchedTaskTO.java","status":"modified","additions":101,"deletions":101,"changes":202,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchedTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchedTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchedTaskTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,101 +1,101 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import java.util.Date;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlSeeAlso;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-@XmlRootElement(name = \"schedTask\")\r\n-@XmlType\r\n-@XmlSeeAlso(AbstractSyncTaskTO.class)\r\n-public class SchedTaskTO extends AbstractTaskTO {\r\n-\r\n-    private static final long serialVersionUID = -5722284116974636425L;\r\n-\r\n-    private String cronExpression;\r\n-\r\n-    private String jobClassName;\r\n-\r\n-    private String name;\r\n-\r\n-    private String description;\r\n-\r\n-    private Date lastExec;\r\n-\r\n-    private Date nextExec;\r\n-\r\n-    public String getCronExpression() {\r\n-        return cronExpression;\r\n-    }\r\n-\r\n-    public void setCronExpression(String cronExpression) {\r\n-        this.cronExpression = cronExpression;\r\n-    }\r\n-\r\n-    public String getJobClassName() {\r\n-        return jobClassName;\r\n-    }\r\n-\r\n-    public void setJobClassName(String jobClassName) {\r\n-        this.jobClassName = jobClassName;\r\n-    }\r\n-\r\n-    public Date getLastExec() {\r\n-        return lastExec == null\r\n-                ? null\r\n-                : new Date(lastExec.getTime());\r\n-    }\r\n-\r\n-    public void setLastExec(Date lastExec) {\r\n-        if (lastExec != null) {\r\n-            this.lastExec = new Date(lastExec.getTime());\r\n-        }\r\n-    }\r\n-\r\n-    public Date getNextExec() {\r\n-        return nextExec == null\r\n-                ? null\r\n-                : new Date(nextExec.getTime());\r\n-    }\r\n-\r\n-    public void setNextExec(Date nextExec) {\r\n-        if (nextExec != null) {\r\n-            this.nextExec = new Date(nextExec.getTime());\r\n-        }\r\n-    }\r\n-\r\n-    public String getDescription() {\r\n-        return description;\r\n-    }\r\n-\r\n-    public void setDescription(String description) {\r\n-        this.description = description;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import java.util.Date;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"schedTask\")\n+@XmlType\n+@XmlSeeAlso(AbstractSyncTaskTO.class)\n+public class SchedTaskTO extends AbstractTaskTO {\n+\n+    private static final long serialVersionUID = -5722284116974636425L;\n+\n+    private String cronExpression;\n+\n+    private String jobClassName;\n+\n+    private String name;\n+\n+    private String description;\n+\n+    private Date lastExec;\n+\n+    private Date nextExec;\n+\n+    public String getCronExpression() {\n+        return cronExpression;\n+    }\n+\n+    public void setCronExpression(String cronExpression) {\n+        this.cronExpression = cronExpression;\n+    }\n+\n+    public String getJobClassName() {\n+        return jobClassName;\n+    }\n+\n+    public void setJobClassName(String jobClassName) {\n+        this.jobClassName = jobClassName;\n+    }\n+\n+    public Date getLastExec() {\n+        return lastExec == null\n+                ? null\n+                : new Date(lastExec.getTime());\n+    }\n+\n+    public void setLastExec(Date lastExec) {\n+        if (lastExec != null) {\n+            this.lastExec = new Date(lastExec.getTime());\n+        }\n+    }\n+\n+    public Date getNextExec() {\n+        return nextExec == null\n+                ? null\n+                : new Date(nextExec.getTime());\n+    }\n+\n+    public void setNextExec(Date nextExec) {\n+        if (nextExec != null) {\n+            this.nextExec = new Date(nextExec.getTime());\n+        }\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"d937f504462e38c42ead409cbf36361088c0ba8b","filename":"common/src/main/java/org/apache/syncope/common/to/SchemaTO.java","status":"modified","additions":156,"deletions":156,"changes":312,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchemaTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,156 +1,156 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.commons.lang3.StringUtils;\r\n-import org.apache.syncope.common.types.AttributeSchemaType;\r\n-import org.apache.syncope.common.types.CipherAlgorithm;\r\n-\r\n-@XmlRootElement(name = \"schema\")\r\n-@XmlType\r\n-public class SchemaTO extends AbstractSchemaTO {\r\n-\r\n-    private static final long serialVersionUID = -8133983392476990308L;\r\n-\r\n-    private AttributeSchemaType type = AttributeSchemaType.String;\r\n-\r\n-    private String mandatoryCondition;\r\n-\r\n-    private boolean multivalue;\r\n-\r\n-    private boolean uniqueConstraint;\r\n-\r\n-    private boolean readonly;\r\n-\r\n-    private String conversionPattern;\r\n-\r\n-    private String validatorClass;\r\n-\r\n-    private String enumerationValues;\r\n-\r\n-    private String enumerationKeys;\r\n-\r\n-    private String secretKey;\r\n-\r\n-    private CipherAlgorithm cipherAlgorithm;\r\n-\r\n-    private String mimeType;\r\n-\r\n-    public String getConversionPattern() {\r\n-        return conversionPattern;\r\n-    }\r\n-\r\n-    public void setConversionPattern(final String conversionPattern) {\r\n-        this.conversionPattern = conversionPattern;\r\n-    }\r\n-\r\n-    public String getMandatoryCondition() {\r\n-        return StringUtils.isNotBlank(mandatoryCondition)\r\n-                ? mandatoryCondition\r\n-                : \"false\";\r\n-    }\r\n-\r\n-    public void setMandatoryCondition(final String mandatoryCondition) {\r\n-        this.mandatoryCondition = mandatoryCondition;\r\n-    }\r\n-\r\n-    public boolean isMultivalue() {\r\n-        return multivalue;\r\n-    }\r\n-\r\n-    public void setMultivalue(final boolean multivalue) {\r\n-        this.multivalue = multivalue;\r\n-    }\r\n-\r\n-    public boolean isUniqueConstraint() {\r\n-        return uniqueConstraint;\r\n-    }\r\n-\r\n-    public void setUniqueConstraint(final boolean uniqueConstraint) {\r\n-        this.uniqueConstraint = uniqueConstraint;\r\n-    }\r\n-\r\n-    public boolean isReadonly() {\r\n-        return readonly;\r\n-    }\r\n-\r\n-    public void setReadonly(final boolean readonly) {\r\n-        this.readonly = readonly;\r\n-    }\r\n-\r\n-    public AttributeSchemaType getType() {\r\n-        return type;\r\n-    }\r\n-\r\n-    public void setType(final AttributeSchemaType type) {\r\n-        this.type = type;\r\n-    }\r\n-\r\n-    public String getValidatorClass() {\r\n-        return validatorClass;\r\n-    }\r\n-\r\n-    public void setValidatorClass(final String validatorClass) {\r\n-        this.validatorClass = validatorClass;\r\n-    }\r\n-\r\n-    public String getEnumerationValues() {\r\n-        return enumerationValues;\r\n-    }\r\n-\r\n-    public void setEnumerationValues(final String enumerationValues) {\r\n-        this.enumerationValues = enumerationValues;\r\n-    }\r\n-\r\n-    public String getEnumerationKeys() {\r\n-        return enumerationKeys;\r\n-    }\r\n-\r\n-    public void setEnumerationKeys(final String enumerationKeys) {\r\n-        this.enumerationKeys = enumerationKeys;\r\n-    }\r\n-\r\n-    public String getSecretKey() {\r\n-        return secretKey;\r\n-    }\r\n-\r\n-    public void setSecretKey(final String secretKey) {\r\n-        this.secretKey = secretKey;\r\n-    }\r\n-\r\n-    public CipherAlgorithm getCipherAlgorithm() {\r\n-        return cipherAlgorithm;\r\n-    }\r\n-\r\n-    public void setCipherAlgorithm(final CipherAlgorithm cipherAlgorithm) {\r\n-        this.cipherAlgorithm = cipherAlgorithm;\r\n-    }\r\n-\r\n-    public String getMimeType() {\r\n-        return mimeType;\r\n-    }\r\n-\r\n-    public void setMimeType(final String mimeType) {\r\n-        this.mimeType = mimeType;\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.types.AttributeSchemaType;\n+import org.apache.syncope.common.types.CipherAlgorithm;\n+\n+@XmlRootElement(name = \"schema\")\n+@XmlType\n+public class SchemaTO extends AbstractSchemaTO {\n+\n+    private static final long serialVersionUID = -8133983392476990308L;\n+\n+    private AttributeSchemaType type = AttributeSchemaType.String;\n+\n+    private String mandatoryCondition;\n+\n+    private boolean multivalue;\n+\n+    private boolean uniqueConstraint;\n+\n+    private boolean readonly;\n+\n+    private String conversionPattern;\n+\n+    private String validatorClass;\n+\n+    private String enumerationValues;\n+\n+    private String enumerationKeys;\n+\n+    private String secretKey;\n+\n+    private CipherAlgorithm cipherAlgorithm;\n+\n+    private String mimeType;\n+\n+    public String getConversionPattern() {\n+        return conversionPattern;\n+    }\n+\n+    public void setConversionPattern(final String conversionPattern) {\n+        this.conversionPattern = conversionPattern;\n+    }\n+\n+    public String getMandatoryCondition() {\n+        return StringUtils.isNotBlank(mandatoryCondition)\n+                ? mandatoryCondition\n+                : \"false\";\n+    }\n+\n+    public void setMandatoryCondition(final String mandatoryCondition) {\n+        this.mandatoryCondition = mandatoryCondition;\n+    }\n+\n+    public boolean isMultivalue() {\n+        return multivalue;\n+    }\n+\n+    public void setMultivalue(final boolean multivalue) {\n+        this.multivalue = multivalue;\n+    }\n+\n+    public boolean isUniqueConstraint() {\n+        return uniqueConstraint;\n+    }\n+\n+    public void setUniqueConstraint(final boolean uniqueConstraint) {\n+        this.uniqueConstraint = uniqueConstraint;\n+    }\n+\n+    public boolean isReadonly() {\n+        return readonly;\n+    }\n+\n+    public void setReadonly(final boolean readonly) {\n+        this.readonly = readonly;\n+    }\n+\n+    public AttributeSchemaType getType() {\n+        return type;\n+    }\n+\n+    public void setType(final AttributeSchemaType type) {\n+        this.type = type;\n+    }\n+\n+    public String getValidatorClass() {\n+        return validatorClass;\n+    }\n+\n+    public void setValidatorClass(final String validatorClass) {\n+        this.validatorClass = validatorClass;\n+    }\n+\n+    public String getEnumerationValues() {\n+        return enumerationValues;\n+    }\n+\n+    public void setEnumerationValues(final String enumerationValues) {\n+        this.enumerationValues = enumerationValues;\n+    }\n+\n+    public String getEnumerationKeys() {\n+        return enumerationKeys;\n+    }\n+\n+    public void setEnumerationKeys(final String enumerationKeys) {\n+        this.enumerationKeys = enumerationKeys;\n+    }\n+\n+    public String getSecretKey() {\n+        return secretKey;\n+    }\n+\n+    public void setSecretKey(final String secretKey) {\n+        this.secretKey = secretKey;\n+    }\n+\n+    public CipherAlgorithm getCipherAlgorithm() {\n+        return cipherAlgorithm;\n+    }\n+\n+    public void setCipherAlgorithm(final CipherAlgorithm cipherAlgorithm) {\n+        this.cipherAlgorithm = cipherAlgorithm;\n+    }\n+\n+    public String getMimeType() {\n+        return mimeType;\n+    }\n+\n+    public void setMimeType(final String mimeType) {\n+        this.mimeType = mimeType;\n+    }\n+\n+}"},{"sha":"f5f1a9a021cf99426142513591284b74cd796444","filename":"common/src/main/java/org/apache/syncope/common/to/SyncPolicyTO.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncPolicyTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,55 +1,55 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.types.PolicyType;\r\n-import org.apache.syncope.common.types.SyncPolicySpec;\r\n-\r\n-@XmlRootElement(name = \"syncPolicy\")\r\n-@XmlType\r\n-public class SyncPolicyTO extends AbstractPolicyTO {\r\n-\r\n-    private static final long serialVersionUID = 993024634238024242L;\r\n-\r\n-    private SyncPolicySpec specification;\r\n-\r\n-    public SyncPolicyTO() {\r\n-        this(false);\r\n-    }\r\n-\r\n-    public SyncPolicyTO(boolean global) {\r\n-        super();\r\n-\r\n-        PolicyType type = global\r\n-                ? PolicyType.GLOBAL_SYNC\r\n-                : PolicyType.SYNC;\r\n-        setType(type);\r\n-    }\r\n-\r\n-    public void setSpecification(final SyncPolicySpec specification) {\r\n-        this.specification = specification;\r\n-    }\r\n-\r\n-    public SyncPolicySpec getSpecification() {\r\n-        return specification;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.types.PolicyType;\n+import org.apache.syncope.common.types.SyncPolicySpec;\n+\n+@XmlRootElement(name = \"syncPolicy\")\n+@XmlType\n+public class SyncPolicyTO extends AbstractPolicyTO {\n+\n+    private static final long serialVersionUID = 993024634238024242L;\n+\n+    private SyncPolicySpec specification;\n+\n+    public SyncPolicyTO() {\n+        this(false);\n+    }\n+\n+    public SyncPolicyTO(boolean global) {\n+        super();\n+\n+        PolicyType type = global\n+                ? PolicyType.GLOBAL_SYNC\n+                : PolicyType.SYNC;\n+        setType(type);\n+    }\n+\n+    public void setSpecification(final SyncPolicySpec specification) {\n+        this.specification = specification;\n+    }\n+\n+    public SyncPolicySpec getSpecification() {\n+        return specification;\n+    }\n+}"},{"sha":"67f3e44c540f9db68fedde167825d968fd1c83ff","filename":"common/src/main/java/org/apache/syncope/common/to/SyncTaskTO.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncTaskTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,59 +1,59 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-@XmlRootElement(name = \"syncTask\")\r\n-@XmlType\r\n-public class SyncTaskTO extends AbstractSyncTaskTO {\r\n-\r\n-    private static final long serialVersionUID = -2143537546915809017L;\r\n-\r\n-    private UserTO userTemplate;\r\n-\r\n-    private RoleTO roleTemplate;\r\n-\r\n-    private boolean fullReconciliation;\r\n-\r\n-    public UserTO getUserTemplate() {\r\n-        return userTemplate;\r\n-    }\r\n-\r\n-    public void setUserTemplate(UserTO userTemplate) {\r\n-        this.userTemplate = userTemplate;\r\n-    }\r\n-\r\n-    public RoleTO getRoleTemplate() {\r\n-        return roleTemplate;\r\n-    }\r\n-\r\n-    public void setRoleTemplate(RoleTO roleTemplate) {\r\n-        this.roleTemplate = roleTemplate;\r\n-    }\r\n-\r\n-    public boolean isFullReconciliation() {\r\n-        return fullReconciliation;\r\n-    }\r\n-\r\n-    public void setFullReconciliation(boolean fullReconciliation) {\r\n-        this.fullReconciliation = fullReconciliation;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"syncTask\")\n+@XmlType\n+public class SyncTaskTO extends AbstractSyncTaskTO {\n+\n+    private static final long serialVersionUID = -2143537546915809017L;\n+\n+    private UserTO userTemplate;\n+\n+    private RoleTO roleTemplate;\n+\n+    private boolean fullReconciliation;\n+\n+    public UserTO getUserTemplate() {\n+        return userTemplate;\n+    }\n+\n+    public void setUserTemplate(UserTO userTemplate) {\n+        this.userTemplate = userTemplate;\n+    }\n+\n+    public RoleTO getRoleTemplate() {\n+        return roleTemplate;\n+    }\n+\n+    public void setRoleTemplate(RoleTO roleTemplate) {\n+        this.roleTemplate = roleTemplate;\n+    }\n+\n+    public boolean isFullReconciliation() {\n+        return fullReconciliation;\n+    }\n+\n+    public void setFullReconciliation(boolean fullReconciliation) {\n+        this.fullReconciliation = fullReconciliation;\n+    }\n+}"},{"sha":"a242bc29e04d66ddae74e1021085ad12e504d745","filename":"common/src/main/java/org/apache/syncope/common/to/TaskExecTO.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FTaskExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FTaskExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FTaskExecTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,39 +1,39 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-@XmlRootElement(name = \"taskExec\")\r\n-@XmlType\r\n-public class TaskExecTO extends AbstractExecTO {\r\n-\r\n-    private static final long serialVersionUID = -5401795154606268973L;\r\n-\r\n-    private long task;\r\n-\r\n-    public long getTask() {\r\n-        return task;\r\n-    }\r\n-\r\n-    public void setTask(final long task) {\r\n-        this.task = task;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"taskExec\")\n+@XmlType\n+public class TaskExecTO extends AbstractExecTO {\n+\n+    private static final long serialVersionUID = -5401795154606268973L;\n+\n+    private long task;\n+\n+    public long getTask() {\n+        return task;\n+    }\n+\n+    public void setTask(final long task) {\n+        this.task = task;\n+    }\n+}"},{"sha":"9e5277b18679de33a60bb1b6191367d867a0c69f","filename":"common/src/main/java/org/apache/syncope/common/to/UserTO.java","status":"modified","additions":163,"deletions":163,"changes":326,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,163 +1,163 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonIgnore;\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.lang.reflect.Field;\r\n-import java.util.ArrayList;\r\n-import java.util.Collections;\r\n-import java.util.Date;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\r\n-import org.apache.commons.lang3.builder.ToStringStyle;\r\n-\r\n-@XmlRootElement(name = \"user\")\r\n-@XmlType\r\n-public class UserTO extends AbstractSubjectTO {\r\n-\r\n-    private static final long serialVersionUID = 7791304495192615740L;\r\n-\r\n-    private String password;\r\n-\r\n-    private final List<MembershipTO> memberships = new ArrayList<MembershipTO>();\r\n-\r\n-    private String status;\r\n-\r\n-    private String token;\r\n-\r\n-    private Date tokenExpireTime;\r\n-\r\n-    private String username;\r\n-\r\n-    private Date lastLoginDate;\r\n-\r\n-    private Date changePwdDate;\r\n-\r\n-    private Integer failedLogins;\r\n-\r\n-    public String getPassword() {\r\n-        return password;\r\n-    }\r\n-\r\n-    public void setPassword(final String password) {\r\n-        this.password = password;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"memberships\")\r\n-    @XmlElement(name = \"membership\")\r\n-    @JsonProperty(\"memberships\")\r\n-    public List<MembershipTO> getMemberships() {\r\n-        return memberships;\r\n-    }\r\n-\r\n-    @JsonIgnore\r\n-    public Map<Long, MembershipTO> getMembershipMap() {\r\n-        Map<Long, MembershipTO> result;\r\n-\r\n-        if (getMemberships() == null) {\r\n-            result = Collections.emptyMap();\r\n-        } else {\r\n-            result = new HashMap<Long, MembershipTO>(getMemberships().size());\r\n-            for (MembershipTO membership : getMemberships()) {\r\n-                result.put(membership.getRoleId(), membership);\r\n-            }\r\n-            result = Collections.unmodifiableMap(result);\r\n-        }\r\n-\r\n-        return result;\r\n-    }\r\n-\r\n-    public String getStatus() {\r\n-        return status;\r\n-    }\r\n-\r\n-    public void setStatus(final String status) {\r\n-        this.status = status;\r\n-    }\r\n-\r\n-    public String getToken() {\r\n-        return token;\r\n-    }\r\n-\r\n-    public void setToken(final String token) {\r\n-        this.token = token;\r\n-    }\r\n-\r\n-    public Date getTokenExpireTime() {\r\n-        return tokenExpireTime == null\r\n-                ? null\r\n-                : new Date(tokenExpireTime.getTime());\r\n-    }\r\n-\r\n-    public void setTokenExpireTime(final Date tokenExpireTime) {\r\n-        if (tokenExpireTime != null) {\r\n-            this.tokenExpireTime = new Date(tokenExpireTime.getTime());\r\n-        }\r\n-    }\r\n-\r\n-    public String getUsername() {\r\n-        return username;\r\n-    }\r\n-\r\n-    public void setUsername(final String username) {\r\n-        this.username = username;\r\n-    }\r\n-\r\n-    public Date getChangePwdDate() {\r\n-        return changePwdDate;\r\n-    }\r\n-\r\n-    public Integer getFailedLogins() {\r\n-        return failedLogins;\r\n-    }\r\n-\r\n-    public Date getLastLoginDate() {\r\n-        return lastLoginDate;\r\n-    }\r\n-\r\n-    public void setChangePwdDate(final Date changePwdDate) {\r\n-        this.changePwdDate = changePwdDate;\r\n-    }\r\n-\r\n-    public void setFailedLogins(final Integer failedLogins) {\r\n-        this.failedLogins = failedLogins;\r\n-    }\r\n-\r\n-    public void setLastLoginDate(final Date lastLoginDate) {\r\n-        this.lastLoginDate = lastLoginDate;\r\n-    }\r\n-\r\n-    @Override\r\n-    public String toString() {\r\n-        return new ReflectionToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE) {\r\n-\r\n-            @Override\r\n-            protected boolean accept(final Field f) {\r\n-                return super.accept(f) && !f.getName().equals(\"password\");\r\n-            }\r\n-        }.toString();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n+\n+@XmlRootElement(name = \"user\")\n+@XmlType\n+public class UserTO extends AbstractSubjectTO {\n+\n+    private static final long serialVersionUID = 7791304495192615740L;\n+\n+    private String password;\n+\n+    private final List<MembershipTO> memberships = new ArrayList<MembershipTO>();\n+\n+    private String status;\n+\n+    private String token;\n+\n+    private Date tokenExpireTime;\n+\n+    private String username;\n+\n+    private Date lastLoginDate;\n+\n+    private Date changePwdDate;\n+\n+    private Integer failedLogins;\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(final String password) {\n+        this.password = password;\n+    }\n+\n+    @XmlElementWrapper(name = \"memberships\")\n+    @XmlElement(name = \"membership\")\n+    @JsonProperty(\"memberships\")\n+    public List<MembershipTO> getMemberships() {\n+        return memberships;\n+    }\n+\n+    @JsonIgnore\n+    public Map<Long, MembershipTO> getMembershipMap() {\n+        Map<Long, MembershipTO> result;\n+\n+        if (getMemberships() == null) {\n+            result = Collections.emptyMap();\n+        } else {\n+            result = new HashMap<Long, MembershipTO>(getMemberships().size());\n+            for (MembershipTO membership : getMemberships()) {\n+                result.put(membership.getRoleId(), membership);\n+            }\n+            result = Collections.unmodifiableMap(result);\n+        }\n+\n+        return result;\n+    }\n+\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(final String status) {\n+        this.status = status;\n+    }\n+\n+    public String getToken() {\n+        return token;\n+    }\n+\n+    public void setToken(final String token) {\n+        this.token = token;\n+    }\n+\n+    public Date getTokenExpireTime() {\n+        return tokenExpireTime == null\n+                ? null\n+                : new Date(tokenExpireTime.getTime());\n+    }\n+\n+    public void setTokenExpireTime(final Date tokenExpireTime) {\n+        if (tokenExpireTime != null) {\n+            this.tokenExpireTime = new Date(tokenExpireTime.getTime());\n+        }\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(final String username) {\n+        this.username = username;\n+    }\n+\n+    public Date getChangePwdDate() {\n+        return changePwdDate;\n+    }\n+\n+    public Integer getFailedLogins() {\n+        return failedLogins;\n+    }\n+\n+    public Date getLastLoginDate() {\n+        return lastLoginDate;\n+    }\n+\n+    public void setChangePwdDate(final Date changePwdDate) {\n+        this.changePwdDate = changePwdDate;\n+    }\n+\n+    public void setFailedLogins(final Integer failedLogins) {\n+        this.failedLogins = failedLogins;\n+    }\n+\n+    public void setLastLoginDate(final Date lastLoginDate) {\n+        this.lastLoginDate = lastLoginDate;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ReflectionToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE) {\n+\n+            @Override\n+            protected boolean accept(final Field f) {\n+                return super.accept(f) && !f.getName().equals(\"password\");\n+            }\n+        }.toString();\n+    }\n+}"},{"sha":"f7d0af6df1f09106836c5bdfeb4c90fcff5ca39c","filename":"common/src/main/java/org/apache/syncope/common/to/VirSchemaTO.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FVirSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FVirSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FVirSchemaTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,38 +1,38 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-\r\n-@XmlRootElement(name = \"virtualSchema\")\r\n-public class VirSchemaTO extends AbstractSchemaTO {\r\n-\r\n-    private static final long serialVersionUID = -8198557479659701343L;\r\n-    \r\n-    private boolean readonly;\r\n-    \r\n-    public boolean isReadonly() {\r\n-        return readonly;\r\n-    }\r\n-\r\n-    public void setReadonly(final boolean readonly) {\r\n-        this.readonly = readonly;\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlRootElement(name = \"virtualSchema\")\n+public class VirSchemaTO extends AbstractSchemaTO {\n+\n+    private static final long serialVersionUID = -8198557479659701343L;\n+    \n+    private boolean readonly;\n+    \n+    public boolean isReadonly() {\n+        return readonly;\n+    }\n+\n+    public void setReadonly(final boolean readonly) {\n+        this.readonly = readonly;\n+    }\n+\n+}"},{"sha":"94d3dc87361fea7313a1f3f34141e745a9dd69ec","filename":"common/src/main/java/org/apache/syncope/common/to/WorkflowFormPropertyTO.java","status":"modified","additions":121,"deletions":121,"changes":242,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormPropertyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormPropertyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormPropertyTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,121 +1,121 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-import org.apache.syncope.common.types.WorkflowFormPropertyType;\r\n-\r\n-@XmlRootElement(name = \"workflowFormProperty\")\r\n-@XmlType\r\n-public class WorkflowFormPropertyTO extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = 9139969592634304261L;\r\n-\r\n-    private String id;\r\n-\r\n-    private String name;\r\n-\r\n-    private WorkflowFormPropertyType type;\r\n-\r\n-    private String value;\r\n-\r\n-    private boolean readable;\r\n-\r\n-    private boolean writable;\r\n-\r\n-    private boolean required;\r\n-\r\n-    private String datePattern;\r\n-\r\n-    private Map<String, String> enumValues = new HashMap<String, String>();\r\n-\r\n-    public String getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(final String id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(final String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public boolean isReadable() {\r\n-        return readable;\r\n-    }\r\n-\r\n-    public void setReadable(final boolean readable) {\r\n-        this.readable = readable;\r\n-    }\r\n-\r\n-    public boolean isRequired() {\r\n-        return required;\r\n-    }\r\n-\r\n-    public void setRequired(final boolean required) {\r\n-        this.required = required;\r\n-    }\r\n-\r\n-    public WorkflowFormPropertyType getType() {\r\n-        return type;\r\n-    }\r\n-\r\n-    public void setType(final WorkflowFormPropertyType type) {\r\n-        this.type = type;\r\n-    }\r\n-\r\n-    public String getValue() {\r\n-        return value;\r\n-    }\r\n-\r\n-    public void setValue(final String value) {\r\n-        this.value = value;\r\n-    }\r\n-\r\n-    public boolean isWritable() {\r\n-        return writable;\r\n-    }\r\n-\r\n-    public void setWritable(final boolean writable) {\r\n-        this.writable = writable;\r\n-    }\r\n-\r\n-    public String getDatePattern() {\r\n-        return datePattern;\r\n-    }\r\n-\r\n-    public void setDatePattern(final String datePattern) {\r\n-        this.datePattern = datePattern;\r\n-    }\r\n-\r\n-    public Map<String, String> getEnumValues() {\r\n-        return enumValues;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.types.WorkflowFormPropertyType;\n+\n+@XmlRootElement(name = \"workflowFormProperty\")\n+@XmlType\n+public class WorkflowFormPropertyTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 9139969592634304261L;\n+\n+    private String id;\n+\n+    private String name;\n+\n+    private WorkflowFormPropertyType type;\n+\n+    private String value;\n+\n+    private boolean readable;\n+\n+    private boolean writable;\n+\n+    private boolean required;\n+\n+    private String datePattern;\n+\n+    private Map<String, String> enumValues = new HashMap<String, String>();\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(final String id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    public boolean isReadable() {\n+        return readable;\n+    }\n+\n+    public void setReadable(final boolean readable) {\n+        this.readable = readable;\n+    }\n+\n+    public boolean isRequired() {\n+        return required;\n+    }\n+\n+    public void setRequired(final boolean required) {\n+        this.required = required;\n+    }\n+\n+    public WorkflowFormPropertyType getType() {\n+        return type;\n+    }\n+\n+    public void setType(final WorkflowFormPropertyType type) {\n+        this.type = type;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(final String value) {\n+        this.value = value;\n+    }\n+\n+    public boolean isWritable() {\n+        return writable;\n+    }\n+\n+    public void setWritable(final boolean writable) {\n+        this.writable = writable;\n+    }\n+\n+    public String getDatePattern() {\n+        return datePattern;\n+    }\n+\n+    public void setDatePattern(final String datePattern) {\n+        this.datePattern = datePattern;\n+    }\n+\n+    public Map<String, String> getEnumValues() {\n+        return enumValues;\n+    }\n+}"},{"sha":"0269e920d8070c8452c6314cb5025dabd515209d","filename":"common/src/main/java/org/apache/syncope/common/to/WorkflowFormTO.java","status":"modified","additions":173,"deletions":173,"changes":346,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,173 +1,173 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonIgnore;\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.Collection;\r\n-import java.util.Collections;\r\n-import java.util.Date;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-import org.apache.syncope.common.to.WorkflowFormPropertyTO;\r\n-\r\n-@XmlRootElement(name = \"workflowForm\")\r\n-@XmlType\r\n-public class WorkflowFormTO extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = -7044543391316529128L;\r\n-\r\n-    private long userId;\r\n-\r\n-    private String taskId;\r\n-\r\n-    private String key;\r\n-\r\n-    private String description;\r\n-\r\n-    private Date createTime;\r\n-\r\n-    private Date dueDate;\r\n-\r\n-    private String owner;\r\n-\r\n-    private final List<WorkflowFormPropertyTO> properties;\r\n-\r\n-    public WorkflowFormTO() {\r\n-        properties = new ArrayList<WorkflowFormPropertyTO>();\r\n-    }\r\n-\r\n-    public long getUserId() {\r\n-        return userId;\r\n-    }\r\n-\r\n-    public void setUserId(long userId) {\r\n-        this.userId = userId;\r\n-    }\r\n-\r\n-    public String getTaskId() {\r\n-        return taskId;\r\n-    }\r\n-\r\n-    public void setTaskId(String taskId) {\r\n-        this.taskId = taskId;\r\n-    }\r\n-\r\n-    public String getKey() {\r\n-        return key;\r\n-    }\r\n-\r\n-    public void setKey(String key) {\r\n-        this.key = key;\r\n-    }\r\n-\r\n-    public Date getCreateTime() {\r\n-        return createTime;\r\n-    }\r\n-\r\n-    public void setCreateTime(Date createTime) {\r\n-        this.createTime = createTime;\r\n-    }\r\n-\r\n-    public String getDescription() {\r\n-        return description;\r\n-    }\r\n-\r\n-    public void setDescription(String description) {\r\n-        this.description = description;\r\n-    }\r\n-\r\n-    public Date getDueDate() {\r\n-        return dueDate;\r\n-    }\r\n-\r\n-    public void setDueDate(Date dueDate) {\r\n-        this.dueDate = dueDate;\r\n-    }\r\n-\r\n-    public String getOwner() {\r\n-        return owner;\r\n-    }\r\n-\r\n-    public void setOwner(String owner) {\r\n-        this.owner = owner;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"workflowFormProperties\")\r\n-    @XmlElement(name = \"workflowFormProperty\")\r\n-    @JsonProperty(\"workflowFormProperties\")\r\n-    public List<WorkflowFormPropertyTO> getProperties() {\r\n-        return properties;\r\n-    }\r\n-\r\n-    public boolean addProperty(final WorkflowFormPropertyTO property) {\r\n-        return properties.contains(property)\r\n-                ? true\r\n-                : properties.add(property);\r\n-    }\r\n-\r\n-    public boolean removeProperty(final WorkflowFormPropertyTO property) {\r\n-        return properties.remove(property);\r\n-    }\r\n-\r\n-    public void setProperties(final Collection<WorkflowFormPropertyTO> properties) {\r\n-        if (this.properties != properties) {\r\n-            this.properties.clear();\r\n-            if (properties != null) {\r\n-                this.properties.addAll(properties);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    @JsonIgnore\r\n-    public Map<String, WorkflowFormPropertyTO> getPropertyMap() {\r\n-        Map<String, WorkflowFormPropertyTO> result;\r\n-\r\n-        if (getProperties() == null) {\r\n-            result = Collections.emptyMap();\r\n-        } else {\r\n-            result = new HashMap<String, WorkflowFormPropertyTO>();\r\n-            for (WorkflowFormPropertyTO prop : getProperties()) {\r\n-                result.put(prop.getId(), prop);\r\n-            }\r\n-            result = Collections.unmodifiableMap(result);\r\n-        }\r\n-\r\n-        return result;\r\n-    }\r\n-\r\n-    @JsonIgnore\r\n-    public Map<String, String> getPropertiesForSubmit() {\r\n-        Map<String, String> props = new HashMap<String, String>();\r\n-        for (WorkflowFormPropertyTO prop : getProperties()) {\r\n-            if (prop.isWritable()) {\r\n-                props.put(prop.getId(), prop.getValue());\r\n-            }\r\n-        }\r\n-\r\n-        return props;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.to.WorkflowFormPropertyTO;\n+\n+@XmlRootElement(name = \"workflowForm\")\n+@XmlType\n+public class WorkflowFormTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -7044543391316529128L;\n+\n+    private long userId;\n+\n+    private String taskId;\n+\n+    private String key;\n+\n+    private String description;\n+\n+    private Date createTime;\n+\n+    private Date dueDate;\n+\n+    private String owner;\n+\n+    private final List<WorkflowFormPropertyTO> properties;\n+\n+    public WorkflowFormTO() {\n+        properties = new ArrayList<WorkflowFormPropertyTO>();\n+    }\n+\n+    public long getUserId() {\n+        return userId;\n+    }\n+\n+    public void setUserId(long userId) {\n+        this.userId = userId;\n+    }\n+\n+    public String getTaskId() {\n+        return taskId;\n+    }\n+\n+    public void setTaskId(String taskId) {\n+        this.taskId = taskId;\n+    }\n+\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(String key) {\n+        this.key = key;\n+    }\n+\n+    public Date getCreateTime() {\n+        return createTime;\n+    }\n+\n+    public void setCreateTime(Date createTime) {\n+        this.createTime = createTime;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public Date getDueDate() {\n+        return dueDate;\n+    }\n+\n+    public void setDueDate(Date dueDate) {\n+        this.dueDate = dueDate;\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public void setOwner(String owner) {\n+        this.owner = owner;\n+    }\n+\n+    @XmlElementWrapper(name = \"workflowFormProperties\")\n+    @XmlElement(name = \"workflowFormProperty\")\n+    @JsonProperty(\"workflowFormProperties\")\n+    public List<WorkflowFormPropertyTO> getProperties() {\n+        return properties;\n+    }\n+\n+    public boolean addProperty(final WorkflowFormPropertyTO property) {\n+        return properties.contains(property)\n+                ? true\n+                : properties.add(property);\n+    }\n+\n+    public boolean removeProperty(final WorkflowFormPropertyTO property) {\n+        return properties.remove(property);\n+    }\n+\n+    public void setProperties(final Collection<WorkflowFormPropertyTO> properties) {\n+        if (this.properties != properties) {\n+            this.properties.clear();\n+            if (properties != null) {\n+                this.properties.addAll(properties);\n+            }\n+        }\n+    }\n+\n+    @JsonIgnore\n+    public Map<String, WorkflowFormPropertyTO> getPropertyMap() {\n+        Map<String, WorkflowFormPropertyTO> result;\n+\n+        if (getProperties() == null) {\n+            result = Collections.emptyMap();\n+        } else {\n+            result = new HashMap<String, WorkflowFormPropertyTO>();\n+            for (WorkflowFormPropertyTO prop : getProperties()) {\n+                result.put(prop.getId(), prop);\n+            }\n+            result = Collections.unmodifiableMap(result);\n+        }\n+\n+        return result;\n+    }\n+\n+    @JsonIgnore\n+    public Map<String, String> getPropertiesForSubmit() {\n+        Map<String, String> props = new HashMap<String, String>();\n+        for (WorkflowFormPropertyTO prop : getProperties()) {\n+            if (prop.isWritable()) {\n+                props.put(prop.getId(), prop.getValue());\n+            }\n+        }\n+\n+        return props;\n+    }\n+}"},{"sha":"24b153b0a4037a18a7969b34c9771ffb18831894","filename":"common/src/main/java/org/apache/syncope/common/types/AbstractPolicySpec.java","status":"modified","additions":27,"deletions":27,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAbstractPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAbstractPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAbstractPolicySpec.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,27 +1,27 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-\r\n-public abstract class AbstractPolicySpec extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = 2740439904103716653L;\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+\n+public abstract class AbstractPolicySpec extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 2740439904103716653L;\n+\n+}"},{"sha":"81429365e13e222925067464170230c26ade44ab","filename":"common/src/main/java/org/apache/syncope/common/types/AccountPolicySpec.java","status":"modified","additions":190,"deletions":190,"changes":380,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAccountPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAccountPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAccountPolicySpec.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,190 +1,190 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.annotation.SchemaList;\r\n-\r\n-@XmlType\r\n-public class AccountPolicySpec extends AbstractPolicySpec {\r\n-\r\n-    private static final long serialVersionUID = 3259256974414758406L;\r\n-\r\n-    /**\r\n-     * Minimum length.\r\n-     */\r\n-    private int maxLength;\r\n-\r\n-    /**\r\n-     * Maximum length.\r\n-     */\r\n-    private int minLength;\r\n-\r\n-    /**\r\n-     * Pattern (regular expression) that must match.\r\n-     */\r\n-    private String pattern;\r\n-\r\n-    /**\r\n-     * Substrings not permitted.\r\n-     */\r\n-    private List<String> wordsNotPermitted;\r\n-\r\n-    /**\r\n-     * User attribute values not permitted.\r\n-     */\r\n-    @SchemaList\r\n-    private List<String> schemasNotPermitted;\r\n-\r\n-    /**\r\n-     * Substrings not permitted as prefix.\r\n-     */\r\n-    private List<String> prefixesNotPermitted;\r\n-\r\n-    /**\r\n-     * Substrings not permitted as suffix.\r\n-     */\r\n-    private List<String> suffixesNotPermitted;\r\n-\r\n-    /**\r\n-     * Specify if one or more lowercase characters are permitted.\r\n-     */\r\n-    private boolean allUpperCase;\r\n-\r\n-    /**\r\n-     * Specify if one or more uppercase characters are permitted.\r\n-     */\r\n-    private boolean allLowerCase;\r\n-\r\n-    /**\r\n-     * Specify if, when reached the maximum allowed number of subsequent login failures, user shall be suspended.\r\n-     */\r\n-    private boolean propagateSuspension;\r\n-\r\n-    /**\r\n-     * Number of permitted login retries.\r\n-     * 0 disabled; &gt;0 enabled.\r\n-     * If the number of subsequent failed logins will be greater then this value\r\n-     * the account will be suspended (lock-out).\r\n-     */\r\n-    private int permittedLoginRetries;\r\n-\r\n-    public boolean isAllLowerCase() {\r\n-        return allLowerCase;\r\n-    }\r\n-\r\n-    public void setAllLowerCase(final boolean allLowerCase) {\r\n-        this.allLowerCase = allLowerCase;\r\n-    }\r\n-\r\n-    public boolean isAllUpperCase() {\r\n-        return allUpperCase;\r\n-    }\r\n-\r\n-    public void setAllUpperCase(final boolean allUpperCase) {\r\n-        this.allUpperCase = allUpperCase;\r\n-    }\r\n-\r\n-    public int getMaxLength() {\r\n-        return maxLength;\r\n-    }\r\n-\r\n-    public void setMaxLength(final int maxLength) {\r\n-        this.maxLength = maxLength;\r\n-    }\r\n-\r\n-    public int getMinLength() {\r\n-        return minLength;\r\n-    }\r\n-\r\n-    public void setMinLength(final int minLength) {\r\n-        this.minLength = minLength;\r\n-    }\r\n-\r\n-    public String getPattern() {\r\n-        return pattern;\r\n-    }\r\n-\r\n-    public void setPattern(final String pattern) {\r\n-        this.pattern = pattern;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"prefixesNotPermitted\")\r\n-    @XmlElement(name = \"prefix\")\r\n-    @JsonProperty(\"prefixesNotPermitted\")\r\n-    public List<String> getPrefixesNotPermitted() {\r\n-        if (prefixesNotPermitted == null) {\r\n-            prefixesNotPermitted = new ArrayList<String>();\r\n-        }\r\n-        return prefixesNotPermitted;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"schemasNotPermitted\")\r\n-    @XmlElement(name = \"schema\")\r\n-    @JsonProperty(\"schemasNotPermitted\")\r\n-    public List<String> getSchemasNotPermitted() {\r\n-        if (schemasNotPermitted == null) {\r\n-            schemasNotPermitted = new ArrayList<String>();\r\n-        }\r\n-        return schemasNotPermitted;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"suffixesNotPermitted\")\r\n-    @XmlElement(name = \"suffix\")\r\n-    @JsonProperty(\"suffixesNotPermitted\")\r\n-    public List<String> getSuffixesNotPermitted() {\r\n-        if (suffixesNotPermitted == null) {\r\n-            suffixesNotPermitted = new ArrayList<String>();\r\n-        }\r\n-        return suffixesNotPermitted;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"wordsNotPermitted\")\r\n-    @XmlElement(name = \"word\")\r\n-    @JsonProperty(\"wordsNotPermitted\")\r\n-    public List<String> getWordsNotPermitted() {\r\n-        if (wordsNotPermitted == null) {\r\n-            wordsNotPermitted = new ArrayList<String>();\r\n-        }\r\n-        return wordsNotPermitted;\r\n-    }\r\n-\r\n-    public boolean isPropagateSuspension() {\r\n-        return propagateSuspension;\r\n-    }\r\n-\r\n-    public void setPropagateSuspension(final boolean propagateSuspension) {\r\n-        this.propagateSuspension = propagateSuspension;\r\n-    }\r\n-\r\n-    public int getPermittedLoginRetries() {\r\n-        return permittedLoginRetries;\r\n-    }\r\n-\r\n-    public void setPermittedLoginRetries(final int permittedLoginRetries) {\r\n-        this.permittedLoginRetries = permittedLoginRetries;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.syncope.common.annotation.SchemaList;\n+\n+@XmlType\n+public class AccountPolicySpec extends AbstractPolicySpec {\n+\n+    private static final long serialVersionUID = 3259256974414758406L;\n+\n+    /**\n+     * Minimum length.\n+     */\n+    private int maxLength;\n+\n+    /**\n+     * Maximum length.\n+     */\n+    private int minLength;\n+\n+    /**\n+     * Pattern (regular expression) that must match.\n+     */\n+    private String pattern;\n+\n+    /**\n+     * Substrings not permitted.\n+     */\n+    private List<String> wordsNotPermitted;\n+\n+    /**\n+     * User attribute values not permitted.\n+     */\n+    @SchemaList\n+    private List<String> schemasNotPermitted;\n+\n+    /**\n+     * Substrings not permitted as prefix.\n+     */\n+    private List<String> prefixesNotPermitted;\n+\n+    /**\n+     * Substrings not permitted as suffix.\n+     */\n+    private List<String> suffixesNotPermitted;\n+\n+    /**\n+     * Specify if one or more lowercase characters are permitted.\n+     */\n+    private boolean allUpperCase;\n+\n+    /**\n+     * Specify if one or more uppercase characters are permitted.\n+     */\n+    private boolean allLowerCase;\n+\n+    /**\n+     * Specify if, when reached the maximum allowed number of subsequent login failures, user shall be suspended.\n+     */\n+    private boolean propagateSuspension;\n+\n+    /**\n+     * Number of permitted login retries.\n+     * 0 disabled; &gt;0 enabled.\n+     * If the number of subsequent failed logins will be greater then this value\n+     * the account will be suspended (lock-out).\n+     */\n+    private int permittedLoginRetries;\n+\n+    public boolean isAllLowerCase() {\n+        return allLowerCase;\n+    }\n+\n+    public void setAllLowerCase(final boolean allLowerCase) {\n+        this.allLowerCase = allLowerCase;\n+    }\n+\n+    public boolean isAllUpperCase() {\n+        return allUpperCase;\n+    }\n+\n+    public void setAllUpperCase(final boolean allUpperCase) {\n+        this.allUpperCase = allUpperCase;\n+    }\n+\n+    public int getMaxLength() {\n+        return maxLength;\n+    }\n+\n+    public void setMaxLength(final int maxLength) {\n+        this.maxLength = maxLength;\n+    }\n+\n+    public int getMinLength() {\n+        return minLength;\n+    }\n+\n+    public void setMinLength(final int minLength) {\n+        this.minLength = minLength;\n+    }\n+\n+    public String getPattern() {\n+        return pattern;\n+    }\n+\n+    public void setPattern(final String pattern) {\n+        this.pattern = pattern;\n+    }\n+\n+    @XmlElementWrapper(name = \"prefixesNotPermitted\")\n+    @XmlElement(name = \"prefix\")\n+    @JsonProperty(\"prefixesNotPermitted\")\n+    public List<String> getPrefixesNotPermitted() {\n+        if (prefixesNotPermitted == null) {\n+            prefixesNotPermitted = new ArrayList<String>();\n+        }\n+        return prefixesNotPermitted;\n+    }\n+\n+    @XmlElementWrapper(name = \"schemasNotPermitted\")\n+    @XmlElement(name = \"schema\")\n+    @JsonProperty(\"schemasNotPermitted\")\n+    public List<String> getSchemasNotPermitted() {\n+        if (schemasNotPermitted == null) {\n+            schemasNotPermitted = new ArrayList<String>();\n+        }\n+        return schemasNotPermitted;\n+    }\n+\n+    @XmlElementWrapper(name = \"suffixesNotPermitted\")\n+    @XmlElement(name = \"suffix\")\n+    @JsonProperty(\"suffixesNotPermitted\")\n+    public List<String> getSuffixesNotPermitted() {\n+        if (suffixesNotPermitted == null) {\n+            suffixesNotPermitted = new ArrayList<String>();\n+        }\n+        return suffixesNotPermitted;\n+    }\n+\n+    @XmlElementWrapper(name = \"wordsNotPermitted\")\n+    @XmlElement(name = \"word\")\n+    @JsonProperty(\"wordsNotPermitted\")\n+    public List<String> getWordsNotPermitted() {\n+        if (wordsNotPermitted == null) {\n+            wordsNotPermitted = new ArrayList<String>();\n+        }\n+        return wordsNotPermitted;\n+    }\n+\n+    public boolean isPropagateSuspension() {\n+        return propagateSuspension;\n+    }\n+\n+    public void setPropagateSuspension(final boolean propagateSuspension) {\n+        this.propagateSuspension = propagateSuspension;\n+    }\n+\n+    public int getPermittedLoginRetries() {\n+        return permittedLoginRetries;\n+    }\n+\n+    public void setPermittedLoginRetries(final int permittedLoginRetries) {\n+        this.permittedLoginRetries = permittedLoginRetries;\n+    }\n+}"},{"sha":"c6ad5f8fa55a6b03767d669e887a36fbcc010031","filename":"common/src/main/java/org/apache/syncope/common/types/AttributableType.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributableType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributableType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributableType.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,31 +1,31 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-\r\n-@XmlEnum\r\n-public enum AttributableType {\r\n-\r\n-    USER,\r\n-    ROLE,\r\n-    MEMBERSHIP,\r\n-    CONFIGURATION;\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum AttributableType {\n+\n+    USER,\n+    ROLE,\n+    MEMBERSHIP,\n+    CONFIGURATION;\n+\n+}"},{"sha":"47b1529d33a675fbb23430fd58e08aa5187a96e2","filename":"common/src/main/java/org/apache/syncope/common/types/AttributeSchemaType.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributeSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributeSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributeSchemaType.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,51 +1,51 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import java.util.Date;\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-\r\n-@XmlEnum\r\n-public enum AttributeSchemaType {\r\n-\r\n-    String(String.class),\r\n-    Long(Long.class),\r\n-    Double(Double.class),\r\n-    Boolean(Boolean.class),\r\n-    Date(Date.class),\r\n-    Enum(Enum.class),\r\n-    Encrypted(byte[].class),\r\n-    Binary(byte[].class);\r\n-\r\n-    final private Class<?> type;\r\n-\r\n-    AttributeSchemaType(final Class<?> type) {\r\n-        this.type = type;\r\n-    }\r\n-\r\n-    public Class<?> getType() {\r\n-        return type;\r\n-    }\r\n-\r\n-    public boolean isConversionPatternNeeded() {\r\n-        return this == AttributeSchemaType.Date\r\n-                || this == AttributeSchemaType.Double\r\n-                || this == AttributeSchemaType.Long;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import java.util.Date;\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum AttributeSchemaType {\n+\n+    String(String.class),\n+    Long(Long.class),\n+    Double(Double.class),\n+    Boolean(Boolean.class),\n+    Date(Date.class),\n+    Enum(Enum.class),\n+    Encrypted(byte[].class),\n+    Binary(byte[].class);\n+\n+    final private Class<?> type;\n+\n+    AttributeSchemaType(final Class<?> type) {\n+        this.type = type;\n+    }\n+\n+    public Class<?> getType() {\n+        return type;\n+    }\n+\n+    public boolean isConversionPatternNeeded() {\n+        return this == AttributeSchemaType.Date\n+                || this == AttributeSchemaType.Double\n+                || this == AttributeSchemaType.Long;\n+    }\n+}"},{"sha":"decf23d1cedf896866cbadb29e8ad5932be9fb33","filename":"common/src/main/java/org/apache/syncope/common/types/AuditElements.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,61 +1,61 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import java.io.Serializable;\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-import org.apache.commons.lang3.StringUtils;\r\n-\r\n-public final class AuditElements implements Serializable {\r\n-\r\n-    private static final long serialVersionUID = -4385059255522273254L;\r\n-\r\n-    private AuditElements() {\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum EventCategoryType {\r\n-\r\n-        REST(StringUtils.EMPTY),\r\n-        TASK(StringUtils.EMPTY),\r\n-        PROPAGATION(\"PropagationTask\"),\r\n-        SYNCHRONIZATION(\"SyncTask\"),\r\n-        PUSH(\"PushTask\"),\r\n-        CUSTOM(StringUtils.EMPTY);\r\n-\r\n-        private final String value;\r\n-\r\n-        EventCategoryType(final String value) {\r\n-            this.value = value;\r\n-        }\r\n-\r\n-        @Override\r\n-        public String toString() {\r\n-            return value;\r\n-        }\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum Result {\r\n-\r\n-        SUCCESS,\r\n-        FAILURE\r\n-\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import java.io.Serializable;\n+import javax.xml.bind.annotation.XmlEnum;\n+import org.apache.commons.lang3.StringUtils;\n+\n+public final class AuditElements implements Serializable {\n+\n+    private static final long serialVersionUID = -4385059255522273254L;\n+\n+    private AuditElements() {\n+    }\n+\n+    @XmlEnum\n+    public enum EventCategoryType {\n+\n+        REST(StringUtils.EMPTY),\n+        TASK(StringUtils.EMPTY),\n+        PROPAGATION(\"PropagationTask\"),\n+        SYNCHRONIZATION(\"SyncTask\"),\n+        PUSH(\"PushTask\"),\n+        CUSTOM(StringUtils.EMPTY);\n+\n+        private final String value;\n+\n+        EventCategoryType(final String value) {\n+            this.value = value;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return value;\n+        }\n+    }\n+\n+    @XmlEnum\n+    public enum Result {\n+\n+        SUCCESS,\n+        FAILURE\n+\n+    }\n+}"},{"sha":"69e2811e6baae06f950c9eed8d7bafed505203fd","filename":"common/src/main/java/org/apache/syncope/common/types/AuditLoggerName.java","status":"modified","additions":110,"deletions":110,"changes":220,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,110 +1,110 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonCreator;\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.text.ParseException;\r\n-import java.util.Map;\r\n-import org.apache.commons.lang3.StringUtils;\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-import org.apache.syncope.common.to.EventCategoryTO;\r\n-import org.apache.syncope.common.types.AuditElements.Result;\r\n-import org.apache.syncope.common.util.LoggerEventUtils;\r\n-\r\n-public class AuditLoggerName extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = -647989486671786839L;\r\n-\r\n-    private final AuditElements.EventCategoryType type;\r\n-\r\n-    private final String category;\r\n-\r\n-    private final String subcategory;\r\n-\r\n-    private final String event;\r\n-\r\n-    private final Result result;\r\n-\r\n-    @JsonCreator\r\n-    public AuditLoggerName(\r\n-            @JsonProperty(\"type\") final AuditElements.EventCategoryType type,\r\n-            @JsonProperty(\"category\") final String category,\r\n-            @JsonProperty(\"subcategory\") final String subcategory,\r\n-            @JsonProperty(\"event\") final String event,\r\n-            @JsonProperty(\"result\") final Result result)\r\n-            throws IllegalArgumentException {\r\n-\r\n-        this.type = type == null ? AuditElements.EventCategoryType.CUSTOM : type;\r\n-        this.category = category;\r\n-        this.subcategory = subcategory;\r\n-        this.event = event;\r\n-        this.result = result == null ? Result.SUCCESS : result;\r\n-    }\r\n-\r\n-    public AuditElements.EventCategoryType getType() {\r\n-        return type;\r\n-    }\r\n-\r\n-    public String getEvent() {\r\n-        return event;\r\n-    }\r\n-\r\n-    public String getCategory() {\r\n-        return category;\r\n-    }\r\n-\r\n-    public Result getResult() {\r\n-        return result;\r\n-    }\r\n-\r\n-    public String getSubcategory() {\r\n-        return subcategory;\r\n-    }\r\n-\r\n-    public String toLoggerName() {\r\n-        return new StringBuilder().append(\r\n-                LoggerType.AUDIT.getPrefix()).append('.').append(\r\n-                        LoggerEventUtils.buildEvent(type, category, subcategory, event, result)).toString();\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public static AuditLoggerName fromLoggerName(final String loggerName)\r\n-            throws IllegalArgumentException, ParseException {\r\n-\r\n-        if (StringUtils.isBlank(loggerName)) {\r\n-            throw new IllegalArgumentException(\"Null value not permitted\");\r\n-        }\r\n-\r\n-        if (!loggerName.startsWith(LoggerType.AUDIT.getPrefix())) {\r\n-            throw new ParseException(\"Audit logger name must start with \" + LoggerType.AUDIT.getPrefix(), 0);\r\n-        }\r\n-\r\n-        final Map.Entry<EventCategoryTO, Result> eventCategory = LoggerEventUtils.parseEventCategory(\r\n-                loggerName.replaceAll(LoggerType.AUDIT.getPrefix() + \".\", \"\"));\r\n-\r\n-        return new AuditLoggerName(\r\n-                eventCategory.getKey().getType(),\r\n-                eventCategory.getKey().getCategory(),\r\n-                eventCategory.getKey().getSubcategory(),\r\n-                eventCategory.getKey().getEvents().isEmpty()\r\n-                ? StringUtils.EMPTY : eventCategory.getKey().getEvents().iterator().next(),\r\n-                eventCategory.getValue());\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.text.ParseException;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.to.EventCategoryTO;\n+import org.apache.syncope.common.types.AuditElements.Result;\n+import org.apache.syncope.common.util.LoggerEventUtils;\n+\n+public class AuditLoggerName extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -647989486671786839L;\n+\n+    private final AuditElements.EventCategoryType type;\n+\n+    private final String category;\n+\n+    private final String subcategory;\n+\n+    private final String event;\n+\n+    private final Result result;\n+\n+    @JsonCreator\n+    public AuditLoggerName(\n+            @JsonProperty(\"type\") final AuditElements.EventCategoryType type,\n+            @JsonProperty(\"category\") final String category,\n+            @JsonProperty(\"subcategory\") final String subcategory,\n+            @JsonProperty(\"event\") final String event,\n+            @JsonProperty(\"result\") final Result result)\n+            throws IllegalArgumentException {\n+\n+        this.type = type == null ? AuditElements.EventCategoryType.CUSTOM : type;\n+        this.category = category;\n+        this.subcategory = subcategory;\n+        this.event = event;\n+        this.result = result == null ? Result.SUCCESS : result;\n+    }\n+\n+    public AuditElements.EventCategoryType getType() {\n+        return type;\n+    }\n+\n+    public String getEvent() {\n+        return event;\n+    }\n+\n+    public String getCategory() {\n+        return category;\n+    }\n+\n+    public Result getResult() {\n+        return result;\n+    }\n+\n+    public String getSubcategory() {\n+        return subcategory;\n+    }\n+\n+    public String toLoggerName() {\n+        return new StringBuilder().append(\n+                LoggerType.AUDIT.getPrefix()).append('.').append(\n+                        LoggerEventUtils.buildEvent(type, category, subcategory, event, result)).toString();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static AuditLoggerName fromLoggerName(final String loggerName)\n+            throws IllegalArgumentException, ParseException {\n+\n+        if (StringUtils.isBlank(loggerName)) {\n+            throw new IllegalArgumentException(\"Null value not permitted\");\n+        }\n+\n+        if (!loggerName.startsWith(LoggerType.AUDIT.getPrefix())) {\n+            throw new ParseException(\"Audit logger name must start with \" + LoggerType.AUDIT.getPrefix(), 0);\n+        }\n+\n+        final Map.Entry<EventCategoryTO, Result> eventCategory = LoggerEventUtils.parseEventCategory(\n+                loggerName.replaceAll(LoggerType.AUDIT.getPrefix() + \".\", \"\"));\n+\n+        return new AuditLoggerName(\n+                eventCategory.getKey().getType(),\n+                eventCategory.getKey().getCategory(),\n+                eventCategory.getKey().getSubcategory(),\n+                eventCategory.getKey().getEvents().isEmpty()\n+                ? StringUtils.EMPTY : eventCategory.getKey().getEvents().iterator().next(),\n+                eventCategory.getValue());\n+    }\n+}"},{"sha":"6d50b8ab21c387b75e9162fdcd32eb97cb12a42d","filename":"common/src/main/java/org/apache/syncope/common/types/CipherAlgorithm.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FCipherAlgorithm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FCipherAlgorithm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FCipherAlgorithm.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,54 +1,54 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-\r\n-@XmlEnum\r\n-public enum CipherAlgorithm {\r\n-\r\n-    SHA(\"SHA-1\", false),\r\n-    SHA1(\"SHA-1\", false),\r\n-    SHA256(\"SHA-256\", false),\r\n-    SHA512(\"SHA-512\", false),\r\n-    AES(\"AES\", true),\r\n-    SMD5(\"S-MD5\", false),\r\n-    SSHA(\"S-SHA-1\", false),\r\n-    SSHA1(\"S-SHA-1\", false),\r\n-    SSHA256(\"S-SHA-256\", false),\r\n-    SSHA512(\"S-SHA-512\", false),\r\n-    BCRYPT(\"BCRYPT\", false);\r\n-\r\n-    final private String algorithm;\r\n-\r\n-    final private boolean invertible;\r\n-\r\n-    CipherAlgorithm(final String algorithm, final boolean invertible) {\r\n-        this.algorithm = algorithm;\r\n-        this.invertible = invertible;\r\n-    }\r\n-\r\n-    public String getAlgorithm() {\r\n-        return algorithm;\r\n-    }\r\n-\r\n-    public boolean isInvertible() {\r\n-        return invertible;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum CipherAlgorithm {\n+\n+    SHA(\"SHA-1\", false),\n+    SHA1(\"SHA-1\", false),\n+    SHA256(\"SHA-256\", false),\n+    SHA512(\"SHA-512\", false),\n+    AES(\"AES\", true),\n+    SMD5(\"S-MD5\", false),\n+    SSHA(\"S-SHA-1\", false),\n+    SSHA1(\"S-SHA-1\", false),\n+    SSHA256(\"S-SHA-256\", false),\n+    SSHA512(\"S-SHA-512\", false),\n+    BCRYPT(\"BCRYPT\", false);\n+\n+    final private String algorithm;\n+\n+    final private boolean invertible;\n+\n+    CipherAlgorithm(final String algorithm, final boolean invertible) {\n+        this.algorithm = algorithm;\n+        this.invertible = invertible;\n+    }\n+\n+    public String getAlgorithm() {\n+        return algorithm;\n+    }\n+\n+    public boolean isInvertible() {\n+        return invertible;\n+    }\n+}"},{"sha":"646fcad172a352c039b53039a594dcb2a41c678d","filename":"common/src/main/java/org/apache/syncope/common/types/ClientExceptionType.java","status":"modified","additions":105,"deletions":105,"changes":210,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FClientExceptionType.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,105 +1,105 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import javax.ws.rs.core.Response;\r\n-\r\n-public enum ClientExceptionType {\r\n-\r\n-    AssociatedResources(Response.Status.BAD_REQUEST),\r\n-    Composite(Response.Status.BAD_REQUEST),\r\n-    ConcurrentModification(Response.Status.PRECONDITION_FAILED),\r\n-    DataIntegrityViolation(Response.Status.BAD_REQUEST),\r\n-    EntityExists(Response.Status.CONFLICT),\r\n-    GenericPersistence(Response.Status.BAD_REQUEST),\r\n-    InvalidLogger(Response.Status.BAD_REQUEST),\r\n-    InvalidConnInstance(Response.Status.BAD_REQUEST),\r\n-    InvalidConnIdConf(Response.Status.BAD_REQUEST),\r\n-    InvalidPolicy(Response.Status.BAD_REQUEST),\r\n-    InvalidSyncopeRole(Response.Status.BAD_REQUEST),\r\n-    InvalidReportExec(Response.Status.BAD_REQUEST),\r\n-    InvalidRoles(Response.Status.BAD_REQUEST),\r\n-    InvalidSchemaDefinition(Response.Status.BAD_REQUEST),\r\n-    InvalidSearchExpression(Response.Status.BAD_REQUEST),\r\n-    InvalidPageOrSize(Response.Status.BAD_REQUEST),\r\n-    InvalidPropagationTaskExecReport(Response.Status.BAD_REQUEST),\r\n-    InvalidUSchema(Response.Status.BAD_REQUEST),\r\n-    InvalidUDerSchema(Response.Status.BAD_REQUEST),\r\n-    InvalidUVirSchema(Response.Status.BAD_REQUEST),\r\n-    InvalidRSchema(Response.Status.BAD_REQUEST),\r\n-    InvalidRDerSchema(Response.Status.BAD_REQUEST),\r\n-    InvalidRVirSchema(Response.Status.BAD_REQUEST),\r\n-    InvalidMSchema(Response.Status.BAD_REQUEST),\r\n-    InvalidMDerSchema(Response.Status.BAD_REQUEST),\r\n-    InvalidMVirSchema(Response.Status.BAD_REQUEST),\r\n-    InvalidCSchema(Response.Status.BAD_REQUEST),\r\n-    InvalidSchemaMapping(Response.Status.BAD_REQUEST),\r\n-    InvalidSyncopeUser(Response.Status.BAD_REQUEST),\r\n-    InvalidExternalResource(Response.Status.BAD_REQUEST),\r\n-    InvalidNotification(Response.Status.BAD_REQUEST),\r\n-    InvalidPropagationTask(Response.Status.BAD_REQUEST),\r\n-    InvalidSchedTask(Response.Status.BAD_REQUEST),\r\n-    InvalidSyncTask(Response.Status.BAD_REQUEST),\r\n-    InvalidPushTask(Response.Status.BAD_REQUEST),\r\n-    InvalidValues(Response.Status.BAD_REQUEST),\r\n-    NotFound(Response.Status.NOT_FOUND),\r\n-    RejectedUserCreate(Response.Status.BAD_REQUEST),\r\n-    RequiredValuesMissing(Response.Status.BAD_REQUEST),\r\n-    RESTValidation(Response.Status.BAD_REQUEST),\r\n-    RoleOwnership(Response.Status.BAD_REQUEST),\r\n-    Scheduling(Response.Status.BAD_REQUEST),\r\n-    UnauthorizedRole(Response.Status.UNAUTHORIZED),\r\n-    Unauthorized(Response.Status.UNAUTHORIZED),\r\n-    Unknown(Response.Status.BAD_REQUEST),\r\n-    Workflow(Response.Status.BAD_REQUEST);\r\n-\r\n-    private final Response.Status responseStatus;\r\n-\r\n-    private ClientExceptionType(final Response.Status responseStatus) {\r\n-        this.responseStatus = responseStatus;\r\n-    }\r\n-\r\n-    public static ClientExceptionType fromHeaderValue(final String exceptionTypeHeaderValue) {\r\n-        ClientExceptionType result = null;\r\n-        for (ClientExceptionType type : values()) {\r\n-            if (exceptionTypeHeaderValue.equals(type.getHeaderValue())) {\r\n-                result = type;\r\n-            }\r\n-        }\r\n-\r\n-        if (result == null) {\r\n-            throw new IllegalArgumentException(\"Unexpected header value: \" + exceptionTypeHeaderValue);\r\n-        }\r\n-\r\n-        return result;\r\n-    }\r\n-\r\n-    public String getHeaderValue() {\r\n-        return name();\r\n-    }\r\n-\r\n-    public String getInfoHeaderValue(final String value) {\r\n-        return getHeaderValue() + \":\" + value;\r\n-    }\r\n-\r\n-    public Response.Status getResponseStatus() {\r\n-        return responseStatus;\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import javax.ws.rs.core.Response;\n+\n+public enum ClientExceptionType {\n+\n+    AssociatedResources(Response.Status.BAD_REQUEST),\n+    Composite(Response.Status.BAD_REQUEST),\n+    ConcurrentModification(Response.Status.PRECONDITION_FAILED),\n+    DataIntegrityViolation(Response.Status.BAD_REQUEST),\n+    EntityExists(Response.Status.CONFLICT),\n+    GenericPersistence(Response.Status.BAD_REQUEST),\n+    InvalidLogger(Response.Status.BAD_REQUEST),\n+    InvalidConnInstance(Response.Status.BAD_REQUEST),\n+    InvalidConnIdConf(Response.Status.BAD_REQUEST),\n+    InvalidPolicy(Response.Status.BAD_REQUEST),\n+    InvalidSyncopeRole(Response.Status.BAD_REQUEST),\n+    InvalidReportExec(Response.Status.BAD_REQUEST),\n+    InvalidRoles(Response.Status.BAD_REQUEST),\n+    InvalidSchemaDefinition(Response.Status.BAD_REQUEST),\n+    InvalidSearchExpression(Response.Status.BAD_REQUEST),\n+    InvalidPageOrSize(Response.Status.BAD_REQUEST),\n+    InvalidPropagationTaskExecReport(Response.Status.BAD_REQUEST),\n+    InvalidUSchema(Response.Status.BAD_REQUEST),\n+    InvalidUDerSchema(Response.Status.BAD_REQUEST),\n+    InvalidUVirSchema(Response.Status.BAD_REQUEST),\n+    InvalidRSchema(Response.Status.BAD_REQUEST),\n+    InvalidRDerSchema(Response.Status.BAD_REQUEST),\n+    InvalidRVirSchema(Response.Status.BAD_REQUEST),\n+    InvalidMSchema(Response.Status.BAD_REQUEST),\n+    InvalidMDerSchema(Response.Status.BAD_REQUEST),\n+    InvalidMVirSchema(Response.Status.BAD_REQUEST),\n+    InvalidCSchema(Response.Status.BAD_REQUEST),\n+    InvalidSchemaMapping(Response.Status.BAD_REQUEST),\n+    InvalidSyncopeUser(Response.Status.BAD_REQUEST),\n+    InvalidExternalResource(Response.Status.BAD_REQUEST),\n+    InvalidNotification(Response.Status.BAD_REQUEST),\n+    InvalidPropagationTask(Response.Status.BAD_REQUEST),\n+    InvalidSchedTask(Response.Status.BAD_REQUEST),\n+    InvalidSyncTask(Response.Status.BAD_REQUEST),\n+    InvalidPushTask(Response.Status.BAD_REQUEST),\n+    InvalidValues(Response.Status.BAD_REQUEST),\n+    NotFound(Response.Status.NOT_FOUND),\n+    RejectedUserCreate(Response.Status.BAD_REQUEST),\n+    RequiredValuesMissing(Response.Status.BAD_REQUEST),\n+    RESTValidation(Response.Status.BAD_REQUEST),\n+    RoleOwnership(Response.Status.BAD_REQUEST),\n+    Scheduling(Response.Status.BAD_REQUEST),\n+    UnauthorizedRole(Response.Status.UNAUTHORIZED),\n+    Unauthorized(Response.Status.UNAUTHORIZED),\n+    Unknown(Response.Status.BAD_REQUEST),\n+    Workflow(Response.Status.BAD_REQUEST);\n+\n+    private final Response.Status responseStatus;\n+\n+    private ClientExceptionType(final Response.Status responseStatus) {\n+        this.responseStatus = responseStatus;\n+    }\n+\n+    public static ClientExceptionType fromHeaderValue(final String exceptionTypeHeaderValue) {\n+        ClientExceptionType result = null;\n+        for (ClientExceptionType type : values()) {\n+            if (exceptionTypeHeaderValue.equals(type.getHeaderValue())) {\n+                result = type;\n+            }\n+        }\n+\n+        if (result == null) {\n+            throw new IllegalArgumentException(\"Unexpected header value: \" + exceptionTypeHeaderValue);\n+        }\n+\n+        return result;\n+    }\n+\n+    public String getHeaderValue() {\n+        return name();\n+    }\n+\n+    public String getInfoHeaderValue(final String value) {\n+        return getHeaderValue() + \":\" + value;\n+    }\n+\n+    public Response.Status getResponseStatus() {\n+        return responseStatus;\n+    }\n+\n+}"},{"sha":"4195360112a148c3fa1cd2f12fecf46ea1996148","filename":"common/src/main/java/org/apache/syncope/common/types/ConflictResolutionAction.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConflictResolutionAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConflictResolutionAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConflictResolutionAction.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,38 +1,38 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-\r\n-@XmlEnum\r\n-public enum ConflictResolutionAction {\r\n-\r\n-    // ignore sync\r\n-    IGNORE,\r\n-    // sync first matcgh\r\n-    FIRSTMATCH,\r\n-    // sync last match\r\n-    LASTMATCH,\r\n-    // sync all\r\n-    ALL;\r\n-\r\n-    public static ConflictResolutionAction fromString(final String value) {\r\n-        return ConflictResolutionAction.valueOf(value.toUpperCase());\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum ConflictResolutionAction {\n+\n+    // ignore sync\n+    IGNORE,\n+    // sync first matcgh\n+    FIRSTMATCH,\n+    // sync last match\n+    LASTMATCH,\n+    // sync all\n+    ALL;\n+\n+    public static ConflictResolutionAction fromString(final String value) {\n+        return ConflictResolutionAction.valueOf(value.toUpperCase());\n+    }\n+}"},{"sha":"1a6930e0dd05b2c01a7dce949fed88d7b5c23fe6","filename":"common/src/main/java/org/apache/syncope/common/types/ConnConfPropSchema.java","status":"modified","additions":125,"deletions":125,"changes":250,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfPropSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfPropSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfPropSchema.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,125 +1,125 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-\r\n-@XmlRootElement\r\n-@XmlType\r\n-public class ConnConfPropSchema extends AbstractBaseBean implements Comparable<ConnConfPropSchema> {\r\n-\r\n-    private static final long serialVersionUID = -1976365781005801296L;\r\n-\r\n-    private String name;\r\n-\r\n-    private String displayName;\r\n-\r\n-    private String helpMessage;\r\n-\r\n-    private String type;\r\n-\r\n-    private boolean required;\r\n-\r\n-    private int order;\r\n-\r\n-    private boolean confidential;\r\n-\r\n-    private final List<Object> defaultValues = new ArrayList<Object>();\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(final String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public boolean isRequired() {\r\n-        return required;\r\n-    }\r\n-\r\n-    public void setRequired(final boolean required) {\r\n-        this.required = required;\r\n-    }\r\n-\r\n-    public String getType() {\r\n-        return type;\r\n-    }\r\n-\r\n-    public void setType(final String type) {\r\n-        this.type = type;\r\n-    }\r\n-\r\n-    public String getDisplayName() {\r\n-        return displayName;\r\n-    }\r\n-\r\n-    public void setDisplayName(final String displayName) {\r\n-        this.displayName = displayName;\r\n-    }\r\n-\r\n-    public String getHelpMessage() {\r\n-        return helpMessage;\r\n-    }\r\n-\r\n-    public void setHelpMessage(final String helpMessage) {\r\n-        this.helpMessage = helpMessage;\r\n-    }\r\n-\r\n-    public int getOrder() {\r\n-        return order;\r\n-    }\r\n-\r\n-    public void setOrder(final int order) {\r\n-        this.order = order;\r\n-    }\r\n-\r\n-    public boolean isConfidential() {\r\n-        return confidential;\r\n-    }\r\n-\r\n-    public void setConfidential(final boolean confidential) {\r\n-        this.confidential = confidential;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"defaultValues\")\r\n-    @XmlElement(name = \"defaultValue\")\r\n-    @JsonProperty(\"defaultValues\")\r\n-    public List<Object> getDefaultValues() {\r\n-        return defaultValues;\r\n-    }\r\n-\r\n-    @Override\r\n-    public int compareTo(final ConnConfPropSchema connConfPropSchema) {\r\n-        if (this.getOrder() > connConfPropSchema.getOrder()) {\r\n-            return 1;\r\n-        } else if (this.getOrder() < connConfPropSchema.getOrder()) {\r\n-            return -1;\r\n-        } else {\r\n-            return 0;\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.AbstractBaseBean;\n+\n+@XmlRootElement\n+@XmlType\n+public class ConnConfPropSchema extends AbstractBaseBean implements Comparable<ConnConfPropSchema> {\n+\n+    private static final long serialVersionUID = -1976365781005801296L;\n+\n+    private String name;\n+\n+    private String displayName;\n+\n+    private String helpMessage;\n+\n+    private String type;\n+\n+    private boolean required;\n+\n+    private int order;\n+\n+    private boolean confidential;\n+\n+    private final List<Object> defaultValues = new ArrayList<Object>();\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    public boolean isRequired() {\n+        return required;\n+    }\n+\n+    public void setRequired(final boolean required) {\n+        this.required = required;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public void setType(final String type) {\n+        this.type = type;\n+    }\n+\n+    public String getDisplayName() {\n+        return displayName;\n+    }\n+\n+    public void setDisplayName(final String displayName) {\n+        this.displayName = displayName;\n+    }\n+\n+    public String getHelpMessage() {\n+        return helpMessage;\n+    }\n+\n+    public void setHelpMessage(final String helpMessage) {\n+        this.helpMessage = helpMessage;\n+    }\n+\n+    public int getOrder() {\n+        return order;\n+    }\n+\n+    public void setOrder(final int order) {\n+        this.order = order;\n+    }\n+\n+    public boolean isConfidential() {\n+        return confidential;\n+    }\n+\n+    public void setConfidential(final boolean confidential) {\n+        this.confidential = confidential;\n+    }\n+\n+    @XmlElementWrapper(name = \"defaultValues\")\n+    @XmlElement(name = \"defaultValue\")\n+    @JsonProperty(\"defaultValues\")\n+    public List<Object> getDefaultValues() {\n+        return defaultValues;\n+    }\n+\n+    @Override\n+    public int compareTo(final ConnConfPropSchema connConfPropSchema) {\n+        if (this.getOrder() > connConfPropSchema.getOrder()) {\n+            return 1;\n+        } else if (this.getOrder() < connConfPropSchema.getOrder()) {\n+            return -1;\n+        } else {\n+            return 0;\n+        }\n+    }\n+}"},{"sha":"ea8003cf333196617944817aaf66143a365df5ba","filename":"common/src/main/java/org/apache/syncope/common/types/ConnConfProperty.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfProperty.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,69 +1,69 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-\r\n-@XmlRootElement\r\n-@XmlType\r\n-public class ConnConfProperty extends AbstractBaseBean implements Comparable<ConnConfProperty> {\r\n-\r\n-    private static final long serialVersionUID = -8391413960221862238L;\r\n-\r\n-    private ConnConfPropSchema schema;\r\n-\r\n-    private final List<Object> values = new ArrayList<Object>();\r\n-\r\n-    private boolean overridable;\r\n-\r\n-    public ConnConfPropSchema getSchema() {\r\n-        return schema;\r\n-    }\r\n-\r\n-    public void setSchema(final ConnConfPropSchema schema) {\r\n-        this.schema = schema;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"values\")\r\n-    @XmlElement(name = \"value\")\r\n-    @JsonProperty(\"values\")\r\n-    public List<Object> getValues() {\r\n-        return values;\r\n-    }\r\n-\r\n-    public boolean isOverridable() {\r\n-        return overridable;\r\n-    }\r\n-\r\n-    public void setOverridable(final boolean overridable) {\r\n-        this.overridable = overridable;\r\n-    }\r\n-\r\n-    @Override\r\n-    public int compareTo(final ConnConfProperty connConfProperty) {\r\n-        return this.getSchema().compareTo(connConfProperty.getSchema());\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.AbstractBaseBean;\n+\n+@XmlRootElement\n+@XmlType\n+public class ConnConfProperty extends AbstractBaseBean implements Comparable<ConnConfProperty> {\n+\n+    private static final long serialVersionUID = -8391413960221862238L;\n+\n+    private ConnConfPropSchema schema;\n+\n+    private final List<Object> values = new ArrayList<Object>();\n+\n+    private boolean overridable;\n+\n+    public ConnConfPropSchema getSchema() {\n+        return schema;\n+    }\n+\n+    public void setSchema(final ConnConfPropSchema schema) {\n+        this.schema = schema;\n+    }\n+\n+    @XmlElementWrapper(name = \"values\")\n+    @XmlElement(name = \"value\")\n+    @JsonProperty(\"values\")\n+    public List<Object> getValues() {\n+        return values;\n+    }\n+\n+    public boolean isOverridable() {\n+        return overridable;\n+    }\n+\n+    public void setOverridable(final boolean overridable) {\n+        this.overridable = overridable;\n+    }\n+\n+    @Override\n+    public int compareTo(final ConnConfProperty connConfProperty) {\n+        return this.getSchema().compareTo(connConfProperty.getSchema());\n+    }\n+}"},{"sha":"397f9bb9d2ee936138c37a61b4aecc24475ebbbf","filename":"common/src/main/java/org/apache/syncope/common/types/ConnParameterType.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnParameterType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnParameterType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnParameterType.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,41 +1,41 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-\r\n-@XmlEnum\r\n-public enum ConnParameterType {\r\n-\r\n-    /**\r\n-     * Connector parameter type:\r\n-     */\r\n-    OVERRIDABLE(true),\r\n-    NOT_OVERRIDABLE(false);\r\n-\r\n-    private boolean overridable;\r\n-\r\n-    ConnParameterType(final boolean overridable) {\r\n-        this.overridable = overridable;\r\n-    }\r\n-\r\n-    public boolean getOverridable() {\r\n-        return overridable;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum ConnParameterType {\n+\n+    /**\n+     * Connector parameter type:\n+     */\n+    OVERRIDABLE(true),\n+    NOT_OVERRIDABLE(false);\n+\n+    private boolean overridable;\n+\n+    ConnParameterType(final boolean overridable) {\n+        this.overridable = overridable;\n+    }\n+\n+    public boolean getOverridable() {\n+        return overridable;\n+    }\n+}"},{"sha":"dfb25edd67ec2976e6ce0d27792697d21f927a80","filename":"common/src/main/java/org/apache/syncope/common/types/ConnectorCapability.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnectorCapability.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnectorCapability.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnectorCapability.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,39 +1,39 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-\r\n-/**\r\n- * Enum of all possible capabilities that a connector instance can expose.\r\n- */\r\n-@XmlEnum\r\n-public enum ConnectorCapability {\r\n-\r\n-    AUTHENTICATE,\r\n-    ONE_PHASE_CREATE,\r\n-    TWO_PHASES_CREATE,\r\n-    ONE_PHASE_UPDATE,\r\n-    TWO_PHASES_UPDATE,\r\n-    ONE_PHASE_DELETE,\r\n-    TWO_PHASES_DELETE,\r\n-    SEARCH,\r\n-    SYNC;\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+/**\n+ * Enum of all possible capabilities that a connector instance can expose.\n+ */\n+@XmlEnum\n+public enum ConnectorCapability {\n+\n+    AUTHENTICATE,\n+    ONE_PHASE_CREATE,\n+    TWO_PHASES_CREATE,\n+    ONE_PHASE_UPDATE,\n+    TWO_PHASES_UPDATE,\n+    ONE_PHASE_DELETE,\n+    TWO_PHASES_DELETE,\n+    SEARCH,\n+    SYNC;\n+\n+}"},{"sha":"814ed5715dfce536bcc4b0c45dd84eeca287c09e","filename":"common/src/main/java/org/apache/syncope/common/types/EntityViolationType.java","status":"modified","additions":72,"deletions":72,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FEntityViolationType.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,72 +1,72 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-\r\n-@XmlEnum\r\n-public enum EntityViolationType {\r\n-\r\n-    Standard(\"\"),\r\n-    InvalidAccountPolicy(\"org.apache.syncope.core.validation.accountpolicy\"),\r\n-    InvalidConnInstanceLocation(\"org.apache.syncope.core.validation.conninstance.location\"),\r\n-    InvalidConnPoolConf(\"org.apache.syncope.core.validation.conninstance.poolConf\"),\r\n-    InvalidMapping(\"org.apache.syncope.core.validation.mapping\"),\r\n-    InvalidMSchema(\"org.apache.syncope.core.validation.attrvalue.mSchema\"),\r\n-    InvalidMDerSchema(\"org.apache.syncope.core.validation.attrvalue.mDerSchema\"),\r\n-    InvalidMVirSchema(\"org.apache.syncope.core.validation.attrvalue.mVirSchema\"),\r\n-    InvalidName(\"org.apache.syncope.core.validation.name\"),\r\n-    InvalidNotification(\"org.apache.syncope.core.validation.notification\"),\r\n-    InvalidPassword(\"org.apache.syncope.core.validation.syncopeuser.password\"),\r\n-    InvalidPasswordPolicy(\"org.apache.syncope.core.validation.passwordpolicy\"),\r\n-    InvalidPolicy(\"org.apache.syncope.core.validation.policy\"),\r\n-    InvalidPropagationTask(\"org.apache.syncope.core.validation.propagationtask\"),\r\n-    InvalidRSchema(\"org.apache.syncope.core.validation.attrvalue.rSchema\"),\r\n-    InvalidRDerSchema(\"org.apache.syncope.core.validation.attrvalue.rDerSchema\"),\r\n-    InvalidRVirSchema(\"org.apache.syncope.core.validation.attrvalue.rVirSchema\"),\r\n-    InvalidReport(\"org.apache.syncope.core.validation.report\"),\r\n-    InvalidResource(\"org.apache.syncope.core.validation.externalresource\"),\r\n-    InvalidRoleOwner(\"org.apache.syncope.core.validation.syncoperole.owner\"),\r\n-    InvalidSchemaEncrypted(\"org.apache.syncope.core.validation.schema.encrypted\"),\r\n-    InvalidSchemaEnum(\"org.apache.syncope.core.validation.schema.enum\"),\r\n-    InvalidSchemaMultivalueUnique(\"org.apache.syncope.core.validation.schema.multivalueUnique\"),\r\n-    InvalidSchedTask(\"org.apache.syncope.core.validation.schedtask\"),\r\n-    InvalidSyncTask(\"org.apache.syncope.core.validation.synctask\"),\r\n-    InvalidSyncPolicy(\"org.apache.syncope.core.validation.syncpolicy\"),\r\n-    InvalidUSchema(\"org.apache.syncope.core.validation.attrvalue.uSchema\"),\r\n-    InvalidUDerSchema(\"org.apache.syncope.core.validation.attrvalue.derSchema\"),\r\n-    InvalidUVirSchema(\"org.apache.syncope.core.validation.attrvalue.uVirSchema\"),\r\n-    InvalidUsername(\"org.apache.syncope.core.validation.syncopeuser.username\"),\r\n-    InvalidValueList(\"org.apache.syncope.core.validation.attr.valueList\"),\r\n-    MoreThanOneNonNull(\"org.apache.syncope.core.validation.attrvalue.moreThanOneNonNull\");\r\n-\r\n-    private String message;\r\n-\r\n-    EntityViolationType(final String message) {\r\n-        this.message = message;\r\n-    }\r\n-\r\n-    public void setMessage(final String message) {\r\n-        this.message = message;\r\n-    }\r\n-\r\n-    public String getMessage() {\r\n-        return message;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum EntityViolationType {\n+\n+    Standard(\"\"),\n+    InvalidAccountPolicy(\"org.apache.syncope.core.validation.accountpolicy\"),\n+    InvalidConnInstanceLocation(\"org.apache.syncope.core.validation.conninstance.location\"),\n+    InvalidConnPoolConf(\"org.apache.syncope.core.validation.conninstance.poolConf\"),\n+    InvalidMapping(\"org.apache.syncope.core.validation.mapping\"),\n+    InvalidMSchema(\"org.apache.syncope.core.validation.attrvalue.mSchema\"),\n+    InvalidMDerSchema(\"org.apache.syncope.core.validation.attrvalue.mDerSchema\"),\n+    InvalidMVirSchema(\"org.apache.syncope.core.validation.attrvalue.mVirSchema\"),\n+    InvalidName(\"org.apache.syncope.core.validation.name\"),\n+    InvalidNotification(\"org.apache.syncope.core.validation.notification\"),\n+    InvalidPassword(\"org.apache.syncope.core.validation.syncopeuser.password\"),\n+    InvalidPasswordPolicy(\"org.apache.syncope.core.validation.passwordpolicy\"),\n+    InvalidPolicy(\"org.apache.syncope.core.validation.policy\"),\n+    InvalidPropagationTask(\"org.apache.syncope.core.validation.propagationtask\"),\n+    InvalidRSchema(\"org.apache.syncope.core.validation.attrvalue.rSchema\"),\n+    InvalidRDerSchema(\"org.apache.syncope.core.validation.attrvalue.rDerSchema\"),\n+    InvalidRVirSchema(\"org.apache.syncope.core.validation.attrvalue.rVirSchema\"),\n+    InvalidReport(\"org.apache.syncope.core.validation.report\"),\n+    InvalidResource(\"org.apache.syncope.core.validation.externalresource\"),\n+    InvalidRoleOwner(\"org.apache.syncope.core.validation.syncoperole.owner\"),\n+    InvalidSchemaEncrypted(\"org.apache.syncope.core.validation.schema.encrypted\"),\n+    InvalidSchemaEnum(\"org.apache.syncope.core.validation.schema.enum\"),\n+    InvalidSchemaMultivalueUnique(\"org.apache.syncope.core.validation.schema.multivalueUnique\"),\n+    InvalidSchedTask(\"org.apache.syncope.core.validation.schedtask\"),\n+    InvalidSyncTask(\"org.apache.syncope.core.validation.synctask\"),\n+    InvalidSyncPolicy(\"org.apache.syncope.core.validation.syncpolicy\"),\n+    InvalidUSchema(\"org.apache.syncope.core.validation.attrvalue.uSchema\"),\n+    InvalidUDerSchema(\"org.apache.syncope.core.validation.attrvalue.derSchema\"),\n+    InvalidUVirSchema(\"org.apache.syncope.core.validation.attrvalue.uVirSchema\"),\n+    InvalidUsername(\"org.apache.syncope.core.validation.syncopeuser.username\"),\n+    InvalidValueList(\"org.apache.syncope.core.validation.attr.valueList\"),\n+    MoreThanOneNonNull(\"org.apache.syncope.core.validation.attrvalue.moreThanOneNonNull\");\n+\n+    private String message;\n+\n+    EntityViolationType(final String message) {\n+        this.message = message;\n+    }\n+\n+    public void setMessage(final String message) {\n+        this.message = message;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+}"},{"sha":"c9b96243a11266eff84cbd6a36f655ef6a0833a7","filename":"common/src/main/java/org/apache/syncope/common/types/IntMappingType.java","status":"modified","additions":201,"deletions":201,"changes":402,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FIntMappingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FIntMappingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FIntMappingType.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,201 +1,201 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.EnumSet;\r\n-import java.util.HashSet;\r\n-import java.util.Set;\r\n-\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-\r\n-/**\r\n- * Internal attribute mapping type.\r\n- */\r\n-@XmlEnum\r\n-public enum IntMappingType {\r\n-\r\n-    // Unfortunately enum type cannot be extended ...\r\n-    // -------------------------\r\n-    // User attribute types (the same in UserMappingType)\r\n-    // -------------------------\r\n-    UserSchema(AttributableType.USER),\r\n-    UserDerivedSchema(AttributableType.USER),\r\n-    UserVirtualSchema(AttributableType.USER),\r\n-    UserId(AttributableType.USER),\r\n-    Username(AttributableType.USER),\r\n-    Password(AttributableType.USER),\r\n-    // -------------------------\r\n-    // Role attribute types (the same in RoleMappingType)\r\n-    // -------------------------\r\n-    RoleSchema(AttributableType.ROLE),\r\n-    RoleDerivedSchema(AttributableType.ROLE),\r\n-    RoleVirtualSchema(AttributableType.ROLE),\r\n-    RoleId(AttributableType.ROLE),\r\n-    RoleName(AttributableType.ROLE),\r\n-    RoleOwnerSchema(AttributableType.ROLE),\r\n-    // -------------------------\r\n-    // Membership attribute types (the same in MembershipMappingType)\r\n-    // -------------------------\r\n-    MembershipSchema(AttributableType.MEMBERSHIP),\r\n-    MembershipDerivedSchema(AttributableType.MEMBERSHIP),\r\n-    MembershipVirtualSchema(AttributableType.MEMBERSHIP),\r\n-    MembershipId(AttributableType.MEMBERSHIP);\r\n-\r\n-    private AttributableType attributableType;\r\n-\r\n-    private IntMappingType(final AttributableType attributableType) {\r\n-        this.attributableType = attributableType;\r\n-    }\r\n-\r\n-    public AttributableType getAttributableType() {\r\n-        return attributableType;\r\n-    }\r\n-\r\n-    /**\r\n-     * Get attribute types for a certain attributable type.\r\n-     *\r\n-     * @param attributableType attributable type\r\n-     * @param toBeFiltered types to be filtered from the result.\r\n-     * @return set of attribute types.\r\n-     */\r\n-    public static Set<IntMappingType> getAttributeTypes(\r\n-            final AttributableType attributableType, final Collection<IntMappingType> toBeFiltered) {\r\n-\r\n-        final Set<IntMappingType> res = getAttributeTypes(attributableType);\r\n-        res.removeAll(toBeFiltered);\r\n-\r\n-        return res;\r\n-    }\r\n-\r\n-    /**\r\n-     * Get attribute types for a certain attributable type.\r\n-     *\r\n-     * @param attributableType attributable type\r\n-     * @return set of attribute types.\r\n-     */\r\n-    public static Set<IntMappingType> getAttributeTypes(final AttributableType attributableType) {\r\n-        final EnumSet<?> enumset;\r\n-\r\n-        switch (attributableType) {\r\n-            case ROLE:\r\n-                enumset = EnumSet.allOf(RoleMappingType.class);\r\n-                break;\r\n-\r\n-            case MEMBERSHIP:\r\n-                enumset = EnumSet.allOf(MembershipMappingType.class);\r\n-                break;\r\n-\r\n-            case USER:\r\n-            default:\r\n-                enumset = EnumSet.allOf(UserMappingType.class);\r\n-        }\r\n-\r\n-        final Set<IntMappingType> result = new HashSet<IntMappingType>(enumset.size());\r\n-        for (Object obj : enumset) {\r\n-            result.add(IntMappingType.valueOf(obj.toString()));\r\n-        }\r\n-\r\n-        return result;\r\n-    }\r\n-\r\n-    public static Set<IntMappingType> getEmbedded() {\r\n-        return EnumSet.of(\r\n-                IntMappingType.UserId, IntMappingType.Username, IntMappingType.Password,\r\n-                IntMappingType.RoleId, IntMappingType.RoleName, IntMappingType.RoleOwnerSchema,\r\n-                IntMappingType.MembershipId);\r\n-    }\r\n-\r\n-    /**\r\n-     * Check if attribute type belongs to the specified attributable type set.\r\n-     *\r\n-     * @param attributableType attributable type.\r\n-     * @param type attribute type.\r\n-     * @return true if attribute type belongs to the specified attributable type set.\r\n-     */\r\n-    public static boolean contains(final AttributableType attributableType, final String type) {\r\n-        switch (attributableType) {\r\n-            case ROLE:\r\n-                for (RoleMappingType c : RoleMappingType.values()) {\r\n-                    if (c.name().equals(type)) {\r\n-                        return true;\r\n-                    }\r\n-                }\r\n-                break;\r\n-\r\n-            case MEMBERSHIP:\r\n-                for (MembershipMappingType c : MembershipMappingType.values()) {\r\n-                    if (c.name().equals(type)) {\r\n-                        return true;\r\n-                    }\r\n-                }\r\n-                break;\r\n-\r\n-            case USER:\r\n-            default:\r\n-                for (UserMappingType c : UserMappingType.values()) {\r\n-                    if (c.name().equals(type)) {\r\n-                        return true;\r\n-                    }\r\n-                }\r\n-                break;\r\n-        }\r\n-        return false;\r\n-    }\r\n-\r\n-    /**\r\n-     * User attribute types.\r\n-     */\r\n-    private enum UserMappingType {\r\n-\r\n-        UserSchema,\r\n-        UserDerivedSchema,\r\n-        UserVirtualSchema,\r\n-        UserId,\r\n-        Username,\r\n-        Password;\r\n-\r\n-    }\r\n-\r\n-    /**\r\n-     * Role attribute types.\r\n-     */\r\n-    private enum RoleMappingType {\r\n-\r\n-        RoleSchema,\r\n-        RoleDerivedSchema,\r\n-        RoleVirtualSchema,\r\n-        RoleId,\r\n-        RoleName,\r\n-        RoleOwnerSchema;\r\n-\r\n-    }\r\n-\r\n-    /**\r\n-     * Membership attribute types.\r\n-     */\r\n-    private enum MembershipMappingType {\r\n-\r\n-        MembershipSchema,\r\n-        MembershipDerivedSchema,\r\n-        MembershipVirtualSchema,\r\n-        MembershipId;\r\n-\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+/**\n+ * Internal attribute mapping type.\n+ */\n+@XmlEnum\n+public enum IntMappingType {\n+\n+    // Unfortunately enum type cannot be extended ...\n+    // -------------------------\n+    // User attribute types (the same in UserMappingType)\n+    // -------------------------\n+    UserSchema(AttributableType.USER),\n+    UserDerivedSchema(AttributableType.USER),\n+    UserVirtualSchema(AttributableType.USER),\n+    UserId(AttributableType.USER),\n+    Username(AttributableType.USER),\n+    Password(AttributableType.USER),\n+    // -------------------------\n+    // Role attribute types (the same in RoleMappingType)\n+    // -------------------------\n+    RoleSchema(AttributableType.ROLE),\n+    RoleDerivedSchema(AttributableType.ROLE),\n+    RoleVirtualSchema(AttributableType.ROLE),\n+    RoleId(AttributableType.ROLE),\n+    RoleName(AttributableType.ROLE),\n+    RoleOwnerSchema(AttributableType.ROLE),\n+    // -------------------------\n+    // Membership attribute types (the same in MembershipMappingType)\n+    // -------------------------\n+    MembershipSchema(AttributableType.MEMBERSHIP),\n+    MembershipDerivedSchema(AttributableType.MEMBERSHIP),\n+    MembershipVirtualSchema(AttributableType.MEMBERSHIP),\n+    MembershipId(AttributableType.MEMBERSHIP);\n+\n+    private AttributableType attributableType;\n+\n+    private IntMappingType(final AttributableType attributableType) {\n+        this.attributableType = attributableType;\n+    }\n+\n+    public AttributableType getAttributableType() {\n+        return attributableType;\n+    }\n+\n+    /**\n+     * Get attribute types for a certain attributable type.\n+     *\n+     * @param attributableType attributable type\n+     * @param toBeFiltered types to be filtered from the result.\n+     * @return set of attribute types.\n+     */\n+    public static Set<IntMappingType> getAttributeTypes(\n+            final AttributableType attributableType, final Collection<IntMappingType> toBeFiltered) {\n+\n+        final Set<IntMappingType> res = getAttributeTypes(attributableType);\n+        res.removeAll(toBeFiltered);\n+\n+        return res;\n+    }\n+\n+    /**\n+     * Get attribute types for a certain attributable type.\n+     *\n+     * @param attributableType attributable type\n+     * @return set of attribute types.\n+     */\n+    public static Set<IntMappingType> getAttributeTypes(final AttributableType attributableType) {\n+        final EnumSet<?> enumset;\n+\n+        switch (attributableType) {\n+            case ROLE:\n+                enumset = EnumSet.allOf(RoleMappingType.class);\n+                break;\n+\n+            case MEMBERSHIP:\n+                enumset = EnumSet.allOf(MembershipMappingType.class);\n+                break;\n+\n+            case USER:\n+            default:\n+                enumset = EnumSet.allOf(UserMappingType.class);\n+        }\n+\n+        final Set<IntMappingType> result = new HashSet<IntMappingType>(enumset.size());\n+        for (Object obj : enumset) {\n+            result.add(IntMappingType.valueOf(obj.toString()));\n+        }\n+\n+        return result;\n+    }\n+\n+    public static Set<IntMappingType> getEmbedded() {\n+        return EnumSet.of(\n+                IntMappingType.UserId, IntMappingType.Username, IntMappingType.Password,\n+                IntMappingType.RoleId, IntMappingType.RoleName, IntMappingType.RoleOwnerSchema,\n+                IntMappingType.MembershipId);\n+    }\n+\n+    /**\n+     * Check if attribute type belongs to the specified attributable type set.\n+     *\n+     * @param attributableType attributable type.\n+     * @param type attribute type.\n+     * @return true if attribute type belongs to the specified attributable type set.\n+     */\n+    public static boolean contains(final AttributableType attributableType, final String type) {\n+        switch (attributableType) {\n+            case ROLE:\n+                for (RoleMappingType c : RoleMappingType.values()) {\n+                    if (c.name().equals(type)) {\n+                        return true;\n+                    }\n+                }\n+                break;\n+\n+            case MEMBERSHIP:\n+                for (MembershipMappingType c : MembershipMappingType.values()) {\n+                    if (c.name().equals(type)) {\n+                        return true;\n+                    }\n+                }\n+                break;\n+\n+            case USER:\n+            default:\n+                for (UserMappingType c : UserMappingType.values()) {\n+                    if (c.name().equals(type)) {\n+                        return true;\n+                    }\n+                }\n+                break;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * User attribute types.\n+     */\n+    private enum UserMappingType {\n+\n+        UserSchema,\n+        UserDerivedSchema,\n+        UserVirtualSchema,\n+        UserId,\n+        Username,\n+        Password;\n+\n+    }\n+\n+    /**\n+     * Role attribute types.\n+     */\n+    private enum RoleMappingType {\n+\n+        RoleSchema,\n+        RoleDerivedSchema,\n+        RoleVirtualSchema,\n+        RoleId,\n+        RoleName,\n+        RoleOwnerSchema;\n+\n+    }\n+\n+    /**\n+     * Membership attribute types.\n+     */\n+    private enum MembershipMappingType {\n+\n+        MembershipSchema,\n+        MembershipDerivedSchema,\n+        MembershipVirtualSchema,\n+        MembershipId;\n+\n+    }\n+}"},{"sha":"85b83835296b902c0096d1d0df90db85ffa30e17","filename":"common/src/main/java/org/apache/syncope/common/types/LoggerLevel.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FLoggerLevel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FLoggerLevel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FLoggerLevel.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,49 +1,49 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-import org.apache.logging.log4j.Level;\r\n-\r\n-@XmlEnum\r\n-public enum LoggerLevel {\r\n-\r\n-    OFF(Level.OFF),\r\n-    FATAL(Level.FATAL),\r\n-    ERROR(Level.ERROR),\r\n-    WARN(Level.WARN),\r\n-    INFO(Level.INFO),\r\n-    DEBUG(Level.DEBUG),\r\n-    TRACE(Level.TRACE),\r\n-    ALL(Level.ALL);\r\n-\r\n-    private Level level;\r\n-\r\n-    LoggerLevel(final Level level) {\r\n-        this.level = level;\r\n-    }\r\n-\r\n-    public Level getLevel() {\r\n-        return level;\r\n-    }\r\n-\r\n-    public static LoggerLevel fromLevel(final Level level) {\r\n-        return LoggerLevel.valueOf(level.name());\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+import org.apache.logging.log4j.Level;\n+\n+@XmlEnum\n+public enum LoggerLevel {\n+\n+    OFF(Level.OFF),\n+    FATAL(Level.FATAL),\n+    ERROR(Level.ERROR),\n+    WARN(Level.WARN),\n+    INFO(Level.INFO),\n+    DEBUG(Level.DEBUG),\n+    TRACE(Level.TRACE),\n+    ALL(Level.ALL);\n+\n+    private Level level;\n+\n+    LoggerLevel(final Level level) {\n+        this.level = level;\n+    }\n+\n+    public Level getLevel() {\n+        return level;\n+    }\n+\n+    public static LoggerLevel fromLevel(final Level level) {\n+        return LoggerLevel.valueOf(level.name());\n+    }\n+}"},{"sha":"dcb21b73a64086b3234129b9cb0563f9c523b409","filename":"common/src/main/java/org/apache/syncope/common/types/LoggerType.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FLoggerType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FLoggerType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FLoggerType.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,46 +1,46 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-\r\n-@XmlEnum\r\n-public enum LoggerType {\r\n-\r\n-    /**\r\n-     * This type describes a common logger used to handle system and application events.\r\n-     */\r\n-    LOG(\"\"),\r\n-    /**\r\n-     * Audit logger only focus on security related events, usually logging how did what and when.\r\n-     * In case of a security incident audit loggers should allow an administrator to recall all\r\n-     * actions a certain user has done.\r\n-     */\r\n-    AUDIT(\"syncope.audit\");\r\n-\r\n-    private String prefix;\r\n-\r\n-    LoggerType(final String prefix) {\r\n-        this.prefix = prefix;\r\n-    }\r\n-\r\n-    public String getPrefix() {\r\n-        return prefix;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum LoggerType {\n+\n+    /**\n+     * This type describes a common logger used to handle system and application events.\n+     */\n+    LOG(\"\"),\n+    /**\n+     * Audit logger only focus on security related events, usually logging how did what and when.\n+     * In case of a security incident audit loggers should allow an administrator to recall all\n+     * actions a certain user has done.\n+     */\n+    AUDIT(\"syncope.audit\");\n+\n+    private String prefix;\n+\n+    LoggerType(final String prefix) {\n+        this.prefix = prefix;\n+    }\n+\n+    public String getPrefix() {\n+        return prefix;\n+    }\n+}"},{"sha":"51933fc87731d1301a827c0e7ad7be1782f227ee","filename":"common/src/main/java/org/apache/syncope/common/types/MatchingRule.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FMatchingRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FMatchingRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FMatchingRule.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,54 +1,54 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-\r\n-/**\r\n- * Sync/Push task matching rule.\r\n- */\r\n-@XmlEnum\r\n-public enum MatchingRule {\r\n-\r\n-    /**\r\n-     * Do not perform any action.\r\n-     */\r\n-    IGNORE,\r\n-    /**\r\n-     * Update matching entity.\r\n-     */\r\n-    UPDATE,\r\n-    /**\r\n-     * Delete resource entity.\r\n-     */\r\n-    DEPROVISION,\r\n-    /**\r\n-     * Unlink resource and delete resource entity.\r\n-     */\r\n-    UNASSIGN,\r\n-    /**\r\n-     * Just unlink resource without performing any (de-)provisioning operation.\r\n-     */\r\n-    UNLINK,\r\n-    /**\r\n-     * Just link resource without performing any (de-)provisioning operation.\r\n-     */\r\n-    LINK\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+/**\n+ * Sync/Push task matching rule.\n+ */\n+@XmlEnum\n+public enum MatchingRule {\n+\n+    /**\n+     * Do not perform any action.\n+     */\n+    IGNORE,\n+    /**\n+     * Update matching entity.\n+     */\n+    UPDATE,\n+    /**\n+     * Delete resource entity.\n+     */\n+    DEPROVISION,\n+    /**\n+     * Unlink resource and delete resource entity.\n+     */\n+    UNASSIGN,\n+    /**\n+     * Just unlink resource without performing any (de-)provisioning operation.\n+     */\n+    UNLINK,\n+    /**\n+     * Just link resource without performing any (de-)provisioning operation.\n+     */\n+    LINK\n+\n+}"},{"sha":"ae93ca6914cb4c19d33a06c6c0b4f746868a2536","filename":"common/src/main/java/org/apache/syncope/common/types/PasswordPolicySpec.java","status":"modified","additions":367,"deletions":367,"changes":734,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPasswordPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPasswordPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPasswordPolicySpec.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,367 +1,367 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import com.fasterxml.jackson.annotation.JsonProperty;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-import org.apache.syncope.common.annotation.SchemaList;\r\n-\r\n-@XmlType\r\n-public class PasswordPolicySpec extends AbstractPolicySpec {\r\n-\r\n-    private static final long serialVersionUID = -7988778083915548547L;\r\n-\r\n-    /**\r\n-     * History length.\r\n-     */\r\n-    private int historyLength;\r\n-\r\n-    /**\r\n-     * Minimum length.\r\n-     */\r\n-    private int maxLength;\r\n-\r\n-    /**\r\n-     * Maximum length.\r\n-     */\r\n-    private int minLength;\r\n-\r\n-    /**\r\n-     * Substrings not permitted.\r\n-     */\r\n-    private List<String> wordsNotPermitted;\r\n-\r\n-    /**\r\n-     * User attribute values not permitted.\r\n-     */\r\n-    @SchemaList\r\n-    private List<String> schemasNotPermitted;\r\n-\r\n-    /**\r\n-     * Specify if one or more non alphanumeric characters are required.\r\n-     */\r\n-    private boolean nonAlphanumericRequired;\r\n-\r\n-    /**\r\n-     * Specify if one or more alphanumeric characters are required.\r\n-     */\r\n-    private boolean alphanumericRequired;\r\n-\r\n-    /**\r\n-     * Specify if one or more digits are required.\r\n-     */\r\n-    private boolean digitRequired;\r\n-\r\n-    /**\r\n-     * Specify if one or more lowercase alphabetic characters are required.\r\n-     */\r\n-    private boolean lowercaseRequired;\r\n-\r\n-    /**\r\n-     * Specify if one or more uppercase alphabetic characters are required.\r\n-     */\r\n-    private boolean uppercaseRequired;\r\n-\r\n-    /**\r\n-     * Specify if must start with a digit.\r\n-     */\r\n-    private boolean mustStartWithDigit;\r\n-\r\n-    /**\r\n-     * Specify if mustn't start with a digit.\r\n-     */\r\n-    private boolean mustntStartWithDigit;\r\n-\r\n-    /**\r\n-     * Specify if must end with a digit.\r\n-     */\r\n-    private boolean mustEndWithDigit;\r\n-\r\n-    /**\r\n-     * Specify if mustn't end with a digit.\r\n-     */\r\n-    private boolean mustntEndWithDigit;\r\n-\r\n-    /**\r\n-     * Specify if must start with a non alphanumeric character.\r\n-     */\r\n-    private boolean mustStartWithNonAlpha;\r\n-\r\n-    /**\r\n-     * Specify if must start with a alphanumeric character.\r\n-     */\r\n-    private boolean mustStartWithAlpha;\r\n-\r\n-    /**\r\n-     * Specify if mustn't start with a non alphanumeric character.\r\n-     */\r\n-    private boolean mustntStartWithNonAlpha;\r\n-\r\n-    /**\r\n-     * Specify if mustn't start with a alphanumeric character.\r\n-     */\r\n-    private boolean mustntStartWithAlpha;\r\n-\r\n-    /**\r\n-     * Specify if must end with a non alphanumeric character.\r\n-     */\r\n-    private boolean mustEndWithNonAlpha;\r\n-\r\n-    /**\r\n-     * Specify if must end with a alphanumeric character.\r\n-     */\r\n-    private boolean mustEndWithAlpha;\r\n-\r\n-    /**\r\n-     * Specify if mustn't end with a non alphanumeric character.\r\n-     */\r\n-    private boolean mustntEndWithNonAlpha;\r\n-\r\n-    /**\r\n-     * Specify if mustn't end with a alphanumeric character.\r\n-     */\r\n-    private boolean mustntEndWithAlpha;\r\n-\r\n-    /**\r\n-     * Specify if password shall not be stored internally.\r\n-     */\r\n-    private boolean allowNullPassword;\r\n-\r\n-    /**\r\n-     * Substrings not permitted as prefix.\r\n-     */\r\n-    private List<String> prefixesNotPermitted;\r\n-\r\n-    /**\r\n-     * Substrings not permitted as suffix.\r\n-     */\r\n-    private List<String> suffixesNotPermitted;\r\n-\r\n-    public boolean isDigitRequired() {\r\n-        return digitRequired;\r\n-    }\r\n-\r\n-    public void setDigitRequired(final boolean digitRequired) {\r\n-        this.digitRequired = digitRequired;\r\n-    }\r\n-\r\n-    public boolean isLowercaseRequired() {\r\n-        return lowercaseRequired;\r\n-    }\r\n-\r\n-    public void setLowercaseRequired(final boolean lowercaseRequired) {\r\n-        this.lowercaseRequired = lowercaseRequired;\r\n-    }\r\n-\r\n-    public int getMaxLength() {\r\n-        return maxLength;\r\n-    }\r\n-\r\n-    public void setMaxLength(final int maxLength) {\r\n-        this.maxLength = maxLength;\r\n-    }\r\n-\r\n-    public int getMinLength() {\r\n-        return minLength;\r\n-    }\r\n-\r\n-    public void setMinLength(final int minLength) {\r\n-        this.minLength = minLength;\r\n-    }\r\n-\r\n-    public boolean isMustEndWithDigit() {\r\n-        return mustEndWithDigit;\r\n-    }\r\n-\r\n-    public void setMustEndWithDigit(final boolean mustEndWithDigit) {\r\n-        this.mustEndWithDigit = mustEndWithDigit;\r\n-    }\r\n-\r\n-    public boolean isMustEndWithNonAlpha() {\r\n-        return mustEndWithNonAlpha;\r\n-    }\r\n-\r\n-    public void setMustEndWithNonAlpha(final boolean mustEndWithNonAlpha) {\r\n-        this.mustEndWithNonAlpha = mustEndWithNonAlpha;\r\n-    }\r\n-\r\n-    public boolean isMustStartWithDigit() {\r\n-        return mustStartWithDigit;\r\n-    }\r\n-\r\n-    public void setMustStartWithDigit(final boolean mustStartWithDigit) {\r\n-        this.mustStartWithDigit = mustStartWithDigit;\r\n-    }\r\n-\r\n-    public boolean isMustStartWithNonAlpha() {\r\n-        return mustStartWithNonAlpha;\r\n-    }\r\n-\r\n-    public void setMustStartWithNonAlpha(final boolean mustStartWithNonAlpha) {\r\n-        this.mustStartWithNonAlpha = mustStartWithNonAlpha;\r\n-    }\r\n-\r\n-    public boolean isMustntEndWithDigit() {\r\n-        return mustntEndWithDigit;\r\n-    }\r\n-\r\n-    public void setMustntEndWithDigit(final boolean mustntEndWithDigit) {\r\n-        this.mustntEndWithDigit = mustntEndWithDigit;\r\n-    }\r\n-\r\n-    public boolean isMustntEndWithNonAlpha() {\r\n-        return mustntEndWithNonAlpha;\r\n-    }\r\n-\r\n-    public void setMustntEndWithNonAlpha(final boolean mustntEndWithNonAlpha) {\r\n-        this.mustntEndWithNonAlpha = mustntEndWithNonAlpha;\r\n-    }\r\n-\r\n-    public boolean isMustntStartWithDigit() {\r\n-        return mustntStartWithDigit;\r\n-    }\r\n-\r\n-    public void setMustntStartWithDigit(final boolean mustntStartWithDigit) {\r\n-        this.mustntStartWithDigit = mustntStartWithDigit;\r\n-    }\r\n-\r\n-    public boolean isMustntStartWithNonAlpha() {\r\n-        return mustntStartWithNonAlpha;\r\n-    }\r\n-\r\n-    public void setMustntStartWithNonAlpha(final boolean mustntStartWithNonAlpha) {\r\n-        this.mustntStartWithNonAlpha = mustntStartWithNonAlpha;\r\n-    }\r\n-\r\n-    public boolean isNonAlphanumericRequired() {\r\n-        return nonAlphanumericRequired;\r\n-    }\r\n-\r\n-    public void setNonAlphanumericRequired(final boolean nonAlphanumericRequired) {\r\n-        this.nonAlphanumericRequired = nonAlphanumericRequired;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"prefixesNotPermitted\")\r\n-    @XmlElement(name = \"prefix\")\r\n-    @JsonProperty(\"prefixesNotPermitted\")\r\n-    public List<String> getPrefixesNotPermitted() {\r\n-        if (prefixesNotPermitted == null) {\r\n-            prefixesNotPermitted = new ArrayList<String>();\r\n-        }\r\n-        return prefixesNotPermitted;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"schemasNotPermitted\")\r\n-    @XmlElement(name = \"schema\")\r\n-    @JsonProperty(\"schemasNotPermitted\")\r\n-    public List<String> getSchemasNotPermitted() {\r\n-        if (schemasNotPermitted == null) {\r\n-            schemasNotPermitted = new ArrayList<String>();\r\n-        }\r\n-        return schemasNotPermitted;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"suffixesNotPermitted\")\r\n-    @XmlElement(name = \"suffix\")\r\n-    @JsonProperty(\"suffixesNotPermitted\")\r\n-    public List<String> getSuffixesNotPermitted() {\r\n-        if (suffixesNotPermitted == null) {\r\n-            suffixesNotPermitted = new ArrayList<String>();\r\n-        }\r\n-        return suffixesNotPermitted;\r\n-    }\r\n-\r\n-    public boolean isUppercaseRequired() {\r\n-        return uppercaseRequired;\r\n-    }\r\n-\r\n-    public void setUppercaseRequired(final boolean uppercaseRequired) {\r\n-        this.uppercaseRequired = uppercaseRequired;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"wordsNotPermitted\")\r\n-    @XmlElement(name = \"word\")\r\n-    @JsonProperty(\"wordsNotPermitted\")\r\n-    public List<String> getWordsNotPermitted() {\r\n-        if (wordsNotPermitted == null) {\r\n-            wordsNotPermitted = new ArrayList<String>();\r\n-        }\r\n-        return wordsNotPermitted;\r\n-    }\r\n-\r\n-    public boolean isAlphanumericRequired() {\r\n-        return alphanumericRequired;\r\n-    }\r\n-\r\n-    public void setAlphanumericRequired(final boolean alphanumericRequired) {\r\n-        this.alphanumericRequired = alphanumericRequired;\r\n-    }\r\n-\r\n-    public boolean isMustEndWithAlpha() {\r\n-        return mustEndWithAlpha;\r\n-    }\r\n-\r\n-    public void setMustEndWithAlpha(final boolean mustEndWithAlpha) {\r\n-        this.mustEndWithAlpha = mustEndWithAlpha;\r\n-    }\r\n-\r\n-    public boolean isMustStartWithAlpha() {\r\n-        return mustStartWithAlpha;\r\n-    }\r\n-\r\n-    public void setMustStartWithAlpha(final boolean mustStartWithAlpha) {\r\n-        this.mustStartWithAlpha = mustStartWithAlpha;\r\n-    }\r\n-\r\n-    public boolean isMustntEndWithAlpha() {\r\n-        return mustntEndWithAlpha;\r\n-    }\r\n-\r\n-    public void setMustntEndWithAlpha(final boolean mustntEndWithAlpha) {\r\n-        this.mustntEndWithAlpha = mustntEndWithAlpha;\r\n-    }\r\n-\r\n-    public boolean isMustntStartWithAlpha() {\r\n-        return mustntStartWithAlpha;\r\n-    }\r\n-\r\n-    public void setMustntStartWithAlpha(final boolean mustntStartWithAlpha) {\r\n-        this.mustntStartWithAlpha = mustntStartWithAlpha;\r\n-    }\r\n-\r\n-    public int getHistoryLength() {\r\n-        return historyLength;\r\n-    }\r\n-\r\n-    public void setHistoryLength(final int historyLength) {\r\n-        this.historyLength = historyLength;\r\n-    }\r\n-\r\n-    public boolean isAllowNullPassword() {\r\n-        return allowNullPassword;\r\n-    }\r\n-\r\n-    public void setAllowNullPassword(final boolean allowNullPassword) {\r\n-        this.allowNullPassword = allowNullPassword;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.annotation.SchemaList;\n+\n+@XmlType\n+public class PasswordPolicySpec extends AbstractPolicySpec {\n+\n+    private static final long serialVersionUID = -7988778083915548547L;\n+\n+    /**\n+     * History length.\n+     */\n+    private int historyLength;\n+\n+    /**\n+     * Minimum length.\n+     */\n+    private int maxLength;\n+\n+    /**\n+     * Maximum length.\n+     */\n+    private int minLength;\n+\n+    /**\n+     * Substrings not permitted.\n+     */\n+    private List<String> wordsNotPermitted;\n+\n+    /**\n+     * User attribute values not permitted.\n+     */\n+    @SchemaList\n+    private List<String> schemasNotPermitted;\n+\n+    /**\n+     * Specify if one or more non alphanumeric characters are required.\n+     */\n+    private boolean nonAlphanumericRequired;\n+\n+    /**\n+     * Specify if one or more alphanumeric characters are required.\n+     */\n+    private boolean alphanumericRequired;\n+\n+    /**\n+     * Specify if one or more digits are required.\n+     */\n+    private boolean digitRequired;\n+\n+    /**\n+     * Specify if one or more lowercase alphabetic characters are required.\n+     */\n+    private boolean lowercaseRequired;\n+\n+    /**\n+     * Specify if one or more uppercase alphabetic characters are required.\n+     */\n+    private boolean uppercaseRequired;\n+\n+    /**\n+     * Specify if must start with a digit.\n+     */\n+    private boolean mustStartWithDigit;\n+\n+    /**\n+     * Specify if mustn't start with a digit.\n+     */\n+    private boolean mustntStartWithDigit;\n+\n+    /**\n+     * Specify if must end with a digit.\n+     */\n+    private boolean mustEndWithDigit;\n+\n+    /**\n+     * Specify if mustn't end with a digit.\n+     */\n+    private boolean mustntEndWithDigit;\n+\n+    /**\n+     * Specify if must start with a non alphanumeric character.\n+     */\n+    private boolean mustStartWithNonAlpha;\n+\n+    /**\n+     * Specify if must start with a alphanumeric character.\n+     */\n+    private boolean mustStartWithAlpha;\n+\n+    /**\n+     * Specify if mustn't start with a non alphanumeric character.\n+     */\n+    private boolean mustntStartWithNonAlpha;\n+\n+    /**\n+     * Specify if mustn't start with a alphanumeric character.\n+     */\n+    private boolean mustntStartWithAlpha;\n+\n+    /**\n+     * Specify if must end with a non alphanumeric character.\n+     */\n+    private boolean mustEndWithNonAlpha;\n+\n+    /**\n+     * Specify if must end with a alphanumeric character.\n+     */\n+    private boolean mustEndWithAlpha;\n+\n+    /**\n+     * Specify if mustn't end with a non alphanumeric character.\n+     */\n+    private boolean mustntEndWithNonAlpha;\n+\n+    /**\n+     * Specify if mustn't end with a alphanumeric character.\n+     */\n+    private boolean mustntEndWithAlpha;\n+\n+    /**\n+     * Specify if password shall not be stored internally.\n+     */\n+    private boolean allowNullPassword;\n+\n+    /**\n+     * Substrings not permitted as prefix.\n+     */\n+    private List<String> prefixesNotPermitted;\n+\n+    /**\n+     * Substrings not permitted as suffix.\n+     */\n+    private List<String> suffixesNotPermitted;\n+\n+    public boolean isDigitRequired() {\n+        return digitRequired;\n+    }\n+\n+    public void setDigitRequired(final boolean digitRequired) {\n+        this.digitRequired = digitRequired;\n+    }\n+\n+    public boolean isLowercaseRequired() {\n+        return lowercaseRequired;\n+    }\n+\n+    public void setLowercaseRequired(final boolean lowercaseRequired) {\n+        this.lowercaseRequired = lowercaseRequired;\n+    }\n+\n+    public int getMaxLength() {\n+        return maxLength;\n+    }\n+\n+    public void setMaxLength(final int maxLength) {\n+        this.maxLength = maxLength;\n+    }\n+\n+    public int getMinLength() {\n+        return minLength;\n+    }\n+\n+    public void setMinLength(final int minLength) {\n+        this.minLength = minLength;\n+    }\n+\n+    public boolean isMustEndWithDigit() {\n+        return mustEndWithDigit;\n+    }\n+\n+    public void setMustEndWithDigit(final boolean mustEndWithDigit) {\n+        this.mustEndWithDigit = mustEndWithDigit;\n+    }\n+\n+    public boolean isMustEndWithNonAlpha() {\n+        return mustEndWithNonAlpha;\n+    }\n+\n+    public void setMustEndWithNonAlpha(final boolean mustEndWithNonAlpha) {\n+        this.mustEndWithNonAlpha = mustEndWithNonAlpha;\n+    }\n+\n+    public boolean isMustStartWithDigit() {\n+        return mustStartWithDigit;\n+    }\n+\n+    public void setMustStartWithDigit(final boolean mustStartWithDigit) {\n+        this.mustStartWithDigit = mustStartWithDigit;\n+    }\n+\n+    public boolean isMustStartWithNonAlpha() {\n+        return mustStartWithNonAlpha;\n+    }\n+\n+    public void setMustStartWithNonAlpha(final boolean mustStartWithNonAlpha) {\n+        this.mustStartWithNonAlpha = mustStartWithNonAlpha;\n+    }\n+\n+    public boolean isMustntEndWithDigit() {\n+        return mustntEndWithDigit;\n+    }\n+\n+    public void setMustntEndWithDigit(final boolean mustntEndWithDigit) {\n+        this.mustntEndWithDigit = mustntEndWithDigit;\n+    }\n+\n+    public boolean isMustntEndWithNonAlpha() {\n+        return mustntEndWithNonAlpha;\n+    }\n+\n+    public void setMustntEndWithNonAlpha(final boolean mustntEndWithNonAlpha) {\n+        this.mustntEndWithNonAlpha = mustntEndWithNonAlpha;\n+    }\n+\n+    public boolean isMustntStartWithDigit() {\n+        return mustntStartWithDigit;\n+    }\n+\n+    public void setMustntStartWithDigit(final boolean mustntStartWithDigit) {\n+        this.mustntStartWithDigit = mustntStartWithDigit;\n+    }\n+\n+    public boolean isMustntStartWithNonAlpha() {\n+        return mustntStartWithNonAlpha;\n+    }\n+\n+    public void setMustntStartWithNonAlpha(final boolean mustntStartWithNonAlpha) {\n+        this.mustntStartWithNonAlpha = mustntStartWithNonAlpha;\n+    }\n+\n+    public boolean isNonAlphanumericRequired() {\n+        return nonAlphanumericRequired;\n+    }\n+\n+    public void setNonAlphanumericRequired(final boolean nonAlphanumericRequired) {\n+        this.nonAlphanumericRequired = nonAlphanumericRequired;\n+    }\n+\n+    @XmlElementWrapper(name = \"prefixesNotPermitted\")\n+    @XmlElement(name = \"prefix\")\n+    @JsonProperty(\"prefixesNotPermitted\")\n+    public List<String> getPrefixesNotPermitted() {\n+        if (prefixesNotPermitted == null) {\n+            prefixesNotPermitted = new ArrayList<String>();\n+        }\n+        return prefixesNotPermitted;\n+    }\n+\n+    @XmlElementWrapper(name = \"schemasNotPermitted\")\n+    @XmlElement(name = \"schema\")\n+    @JsonProperty(\"schemasNotPermitted\")\n+    public List<String> getSchemasNotPermitted() {\n+        if (schemasNotPermitted == null) {\n+            schemasNotPermitted = new ArrayList<String>();\n+        }\n+        return schemasNotPermitted;\n+    }\n+\n+    @XmlElementWrapper(name = \"suffixesNotPermitted\")\n+    @XmlElement(name = \"suffix\")\n+    @JsonProperty(\"suffixesNotPermitted\")\n+    public List<String> getSuffixesNotPermitted() {\n+        if (suffixesNotPermitted == null) {\n+            suffixesNotPermitted = new ArrayList<String>();\n+        }\n+        return suffixesNotPermitted;\n+    }\n+\n+    public boolean isUppercaseRequired() {\n+        return uppercaseRequired;\n+    }\n+\n+    public void setUppercaseRequired(final boolean uppercaseRequired) {\n+        this.uppercaseRequired = uppercaseRequired;\n+    }\n+\n+    @XmlElementWrapper(name = \"wordsNotPermitted\")\n+    @XmlElement(name = \"word\")\n+    @JsonProperty(\"wordsNotPermitted\")\n+    public List<String> getWordsNotPermitted() {\n+        if (wordsNotPermitted == null) {\n+            wordsNotPermitted = new ArrayList<String>();\n+        }\n+        return wordsNotPermitted;\n+    }\n+\n+    public boolean isAlphanumericRequired() {\n+        return alphanumericRequired;\n+    }\n+\n+    public void setAlphanumericRequired(final boolean alphanumericRequired) {\n+        this.alphanumericRequired = alphanumericRequired;\n+    }\n+\n+    public boolean isMustEndWithAlpha() {\n+        return mustEndWithAlpha;\n+    }\n+\n+    public void setMustEndWithAlpha(final boolean mustEndWithAlpha) {\n+        this.mustEndWithAlpha = mustEndWithAlpha;\n+    }\n+\n+    public boolean isMustStartWithAlpha() {\n+        return mustStartWithAlpha;\n+    }\n+\n+    public void setMustStartWithAlpha(final boolean mustStartWithAlpha) {\n+        this.mustStartWithAlpha = mustStartWithAlpha;\n+    }\n+\n+    public boolean isMustntEndWithAlpha() {\n+        return mustntEndWithAlpha;\n+    }\n+\n+    public void setMustntEndWithAlpha(final boolean mustntEndWithAlpha) {\n+        this.mustntEndWithAlpha = mustntEndWithAlpha;\n+    }\n+\n+    public boolean isMustntStartWithAlpha() {\n+        return mustntStartWithAlpha;\n+    }\n+\n+    public void setMustntStartWithAlpha(final boolean mustntStartWithAlpha) {\n+        this.mustntStartWithAlpha = mustntStartWithAlpha;\n+    }\n+\n+    public int getHistoryLength() {\n+        return historyLength;\n+    }\n+\n+    public void setHistoryLength(final int historyLength) {\n+        this.historyLength = historyLength;\n+    }\n+\n+    public boolean isAllowNullPassword() {\n+        return allowNullPassword;\n+    }\n+\n+    public void setAllowNullPassword(final boolean allowNullPassword) {\n+        this.allowNullPassword = allowNullPassword;\n+    }\n+}"},{"sha":"72b5d5cc60ac31e531c2e26048e4fc2191169e60","filename":"common/src/main/java/org/apache/syncope/common/types/PolicyType.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPolicyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPolicyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPolicyType.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,61 +1,61 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-\r\n-@XmlEnum\r\n-public enum PolicyType {\r\n-\r\n-    /**\r\n-     * Account policy like:\r\n-     * password expire time, change password at first access, ...\r\n-     */\r\n-    ACCOUNT(\"Account Policy\"),\r\n-    GLOBAL_ACCOUNT(\"Account Global Policy\"),\r\n-    /**\r\n-     * Password policy regarding password syntax.\r\n-     */\r\n-    PASSWORD(\"Password Policy\"),\r\n-    GLOBAL_PASSWORD(\"Password Global Policy\"),\r\n-    /**\r\n-     * SYNC policy regarding account conflicts resolution.\r\n-     */\r\n-    SYNC(\"Synchronization Policy\"),\r\n-    GLOBAL_SYNC(\"Synchronization Global Policy\"),\r\n-    /**\r\n-     * PUSH policy regarding account conflicts resolution.\r\n-     */\r\n-    PUSH(\"Push Policy\"),\r\n-    GLOBAL_PUSH(\"Push Global Policy\");\r\n-\r\n-    private String description;\r\n-\r\n-    PolicyType(final String description) {\r\n-        this.description = description;\r\n-    }\r\n-\r\n-    public String getDescription() {\r\n-        return description;\r\n-    }\r\n-\r\n-    public static PolicyType fromString(final String value) {\r\n-        return PolicyType.valueOf(value.toUpperCase());\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum PolicyType {\n+\n+    /**\n+     * Account policy like:\n+     * password expire time, change password at first access, ...\n+     */\n+    ACCOUNT(\"Account Policy\"),\n+    GLOBAL_ACCOUNT(\"Account Global Policy\"),\n+    /**\n+     * Password policy regarding password syntax.\n+     */\n+    PASSWORD(\"Password Policy\"),\n+    GLOBAL_PASSWORD(\"Password Global Policy\"),\n+    /**\n+     * SYNC policy regarding account conflicts resolution.\n+     */\n+    SYNC(\"Synchronization Policy\"),\n+    GLOBAL_SYNC(\"Synchronization Global Policy\"),\n+    /**\n+     * PUSH policy regarding account conflicts resolution.\n+     */\n+    PUSH(\"Push Policy\"),\n+    GLOBAL_PUSH(\"Push Global Policy\");\n+\n+    private String description;\n+\n+    PolicyType(final String description) {\n+        this.description = description;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public static PolicyType fromString(final String value) {\n+        return PolicyType.valueOf(value.toUpperCase());\n+    }\n+}"},{"sha":"59f3ade8a337196effa0b01c8c8269bf50ae290b","filename":"common/src/main/java/org/apache/syncope/common/types/PropagationMode.java","status":"modified","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationMode.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationMode.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationMode.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,29 +1,29 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-\r\n-@XmlEnum\r\n-public enum PropagationMode {\r\n-\r\n-    ONE_PHASE,\r\n-    TWO_PHASES\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum PropagationMode {\n+\n+    ONE_PHASE,\n+    TWO_PHASES\n+\n+}"},{"sha":"a85f13269274cb23c2d67ae98c7b6ecf8f3e9c43","filename":"common/src/main/java/org/apache/syncope/common/types/PropagationTaskExecStatus.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationTaskExecStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationTaskExecStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationTaskExecStatus.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,49 +1,49 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-\r\n-/**\r\n- * Status of a propagation task execution.\r\n- *\r\n- * CREATED -&gt; SUBMITTED or UBSUBMITTED (depending on the external resource to\r\n- * return success or failure).\r\n- * SUBMITTED -&gt; SUCCESS or FAILURE (depending on the external resource to\r\n- * report success or failure).\r\n- *\r\n- * @see org.apache.syncope.common.to.TaskExecTO\r\n- */\r\n-@XmlEnum\r\n-public enum PropagationTaskExecStatus {\r\n-\r\n-    CREATED,\r\n-    SUBMITTED,\r\n-    UNSUBMITTED,\r\n-    SUCCESS,\r\n-    FAILURE;\r\n-\r\n-    public boolean isSuccessful() {\r\n-        return this == SUCCESS || this == SUBMITTED;\r\n-    }\r\n-\r\n-    public static PropagationTaskExecStatus fromString(final String value) {\r\n-        return PropagationTaskExecStatus.valueOf(value.toUpperCase());\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+/**\n+ * Status of a propagation task execution.\n+ *\n+ * CREATED -&gt; SUBMITTED or UBSUBMITTED (depending on the external resource to\n+ * return success or failure).\n+ * SUBMITTED -&gt; SUCCESS or FAILURE (depending on the external resource to\n+ * report success or failure).\n+ *\n+ * @see org.apache.syncope.common.to.TaskExecTO\n+ */\n+@XmlEnum\n+public enum PropagationTaskExecStatus {\n+\n+    CREATED,\n+    SUBMITTED,\n+    UNSUBMITTED,\n+    SUCCESS,\n+    FAILURE;\n+\n+    public boolean isSuccessful() {\n+        return this == SUCCESS || this == SUBMITTED;\n+    }\n+\n+    public static PropagationTaskExecStatus fromString(final String value) {\n+        return PropagationTaskExecStatus.valueOf(value.toUpperCase());\n+    }\n+}"},{"sha":"8eddcc5ae7dfbc24699d3b3d59fda42e1cf4006a","filename":"common/src/main/java/org/apache/syncope/common/types/ReportExecExportFormat.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecExportFormat.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecExportFormat.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecExportFormat.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,32 +1,32 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-\r\n-@XmlEnum\r\n-public enum ReportExecExportFormat {\r\n-\r\n-    XML,\r\n-    HTML,\r\n-    PDF,\r\n-    RTF,\r\n-    CSV\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum ReportExecExportFormat {\n+\n+    XML,\n+    HTML,\n+    PDF,\n+    RTF,\n+    CSV\n+\n+}"},{"sha":"5a5600af30c9b2fb764c6dc33a9124e4d7dbd1b9","filename":"common/src/main/java/org/apache/syncope/common/types/ReportExecStatus.java","status":"modified","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecStatus.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,34 +1,34 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-\r\n-@XmlEnum\r\n-public enum ReportExecStatus {\r\n-\r\n-    STARTED,\r\n-    RUNNING,\r\n-    SUCCESS,\r\n-    FAILURE;\r\n-\r\n-    public static ReportExecStatus fromString(final String value) {\r\n-        return ReportExecStatus.valueOf(value.toUpperCase());\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum ReportExecStatus {\n+\n+    STARTED,\n+    RUNNING,\n+    SUCCESS,\n+    FAILURE;\n+\n+    public static ReportExecStatus fromString(final String value) {\n+        return ReportExecStatus.valueOf(value.toUpperCase());\n+    }\n+}"},{"sha":"0a59853c2c93d3e4f89412d134b338d66781341d","filename":"common/src/main/java/org/apache/syncope/common/types/ResourceOperation.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FResourceOperation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FResourceOperation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FResourceOperation.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f","patch":"@@ -1,31 +1,31 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-\r\n-@XmlEnum\r\n-public enum ResourceOperation {\r\n-\r\n-    CREATE,\r\n-    UPDATE,\r\n-    DELETE,\r\n-    NONE\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum ResourceOperation {\n+\n+    CREATE,\n+    UPDATE,\n+    DELETE,\n+    NONE\n+\n+}"},{"sha":"05070379d793a9b2d13a6d37cfbda5c5368f1528","filename":"common/src/main/java/org/apache/syncope/common/types/SchemaType.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"427fc49fd726fa9f9b44c96ce0a85ab0c06f5f1b","filename":"common/src/main/java/org/apache/syncope/common/types/SubjectType.java","status":"modified","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSubjectType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSubjectType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSubjectType.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"f57dd4284821140f8985c87f1f3f5e8cef28ae13","filename":"common/src/main/java/org/apache/syncope/common/types/SyncPolicySpec.java","status":"modified","additions":97,"deletions":97,"changes":194,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncPolicySpec.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"8999d947cda1a77858cca49129f977cba7a9dbaf","filename":"common/src/main/java/org/apache/syncope/common/types/TaskType.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTaskType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTaskType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTaskType.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"63a4e5c89a26edce732b1361221cb98600b2b0ed","filename":"common/src/main/java/org/apache/syncope/common/types/TraceLevel.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTraceLevel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTraceLevel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTraceLevel.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"d57aacf2cf9d9b9e94b074a258e5a4a0d064f63b","filename":"common/src/main/java/org/apache/syncope/common/types/UnmatchingRule.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FUnmatchingRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FUnmatchingRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FUnmatchingRule.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"cfd473f3de647e2d7ff0542a7b958584465c382c","filename":"common/src/main/java/org/apache/syncope/common/types/WorkflowFormPropertyType.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FWorkflowFormPropertyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FWorkflowFormPropertyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FWorkflowFormPropertyType.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"b9bb6dd1ead68434b8e53aa45d39c98b2398bf3f","filename":"common/src/main/java/org/apache/syncope/common/types/package-info.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2Fpackage-info.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"15531fe042fb24c92d505973ffd511ddc3c6dc4d","filename":"common/src/main/java/org/apache/syncope/common/util/AttributableOperations.java","status":"modified","additions":495,"deletions":495,"changes":990,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"80d6ac9489779625a0bda8e50ec5c1dfaa571732","filename":"common/src/main/java/org/apache/syncope/common/util/CollectionWrapper.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"11d99ffbe4980a1b036317f565f2e854fe504c3d","filename":"common/src/main/java/org/apache/syncope/common/wrap/CorrelationRuleClass.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FCorrelationRuleClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FCorrelationRuleClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FCorrelationRuleClass.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"5cde09d3dd780865f63cd31a96e51ae34df825e2","filename":"common/src/main/java/org/apache/syncope/common/wrap/EntitlementTO.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FEntitlementTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FEntitlementTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FEntitlementTO.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"340b4002a963dc48f936b031463980ad7afcfd26","filename":"common/src/main/java/org/apache/syncope/common/wrap/JobClass.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FJobClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FJobClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FJobClass.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"776348877b2d0b66e697b3a640bd5b2141901259","filename":"common/src/main/java/org/apache/syncope/common/wrap/MailTemplate.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FMailTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FMailTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FMailTemplate.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"89628bfad22908c2cab606fda7c514d7f9dc29ee","filename":"common/src/main/java/org/apache/syncope/common/wrap/PropagationActionClass.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FPropagationActionClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FPropagationActionClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FPropagationActionClass.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"1f7b782ad100382ef74465b4cc25d6b146087fd4","filename":"common/src/main/java/org/apache/syncope/common/wrap/PushActionClass.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FPushActionClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FPushActionClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FPushActionClass.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"4328e69e57442b63c8092805bd34e66aa1d84160","filename":"common/src/main/java/org/apache/syncope/common/wrap/ReportletConfClass.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FReportletConfClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FReportletConfClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FReportletConfClass.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"48ff9bbc3010d83626eb79585b1624e46c2ca1ad","filename":"common/src/main/java/org/apache/syncope/common/wrap/SyncActionClass.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FSyncActionClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FSyncActionClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FSyncActionClass.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"39c2c5efb72cc516154202e1da3448179058f2b2","filename":"common/src/main/java/org/apache/syncope/common/wrap/Validator.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FValidator.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"4710b7ecc9b11a2e98bea0e76847eaffad50ae77","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/search/AbstractSearchCond.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FAbstractSearchCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FAbstractSearchCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FAbstractSearchCond.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"93313ed84683d8d5b196bf52d77e036f9cfa89c0","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/search/AttributeCond.java","status":"modified","additions":84,"deletions":84,"changes":168,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FAttributeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FAttributeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FAttributeCond.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"69a6b6ae7a9f2b7e750d0d4bbda4882766ae869b","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/search/EntitlementCond.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FEntitlementCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FEntitlementCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FEntitlementCond.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"e268b91037047055f2e96aa6e1aae348ce60330f","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/search/MembershipCond.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FMembershipCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FMembershipCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FMembershipCond.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"f5d526e9bc4976e46740fc373d05710a6d31d6d8","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/search/ResourceCond.java","status":"modified","additions":42,"deletions":42,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FResourceCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FResourceCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FResourceCond.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"4402c5226ec80d08803264dfdce167b891a80f73","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/search/SearchCond.java","status":"modified","additions":254,"deletions":254,"changes":508,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FSearchCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FSearchCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FSearchCond.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"cb2dc928009b1eef27a1eec237ca54a18f7cb37e","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/search/SubjectCond.java","status":"modified","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FSubjectCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FSubjectCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FSubjectCond.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"bcc015df44d7202cc7281dcc0502341d6d99fe47","filename":"core/src/main/java/org/apache/syncope/core/rest/utils/QueryResourceInfoComparator.java","status":"modified","additions":114,"deletions":114,"changes":228,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FQueryResourceInfoComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FQueryResourceInfoComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FQueryResourceInfoComparator.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"e8f0e672a198bfa5418205765dbe6e59fe97b00a","filename":"core/src/main/java/org/apache/syncope/core/rest/utils/RestServiceExceptionMapper.java","status":"modified","additions":276,"deletions":276,"changes":552,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"6aeadfba1dd16401150208df61a8373d2bf236ae","filename":"core/src/main/java/org/apache/syncope/core/services/ConfigurationServiceImpl.java","status":"modified","additions":91,"deletions":91,"changes":182,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"4d5c09f25448fe1ae0eec5ce1ab18e90dcf81407","filename":"core/src/main/java/org/apache/syncope/core/services/ConnectorServiceImpl.java","status":"modified","additions":133,"deletions":133,"changes":266,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"f094b940762d1287f37217e4ceadc8d42d3f0a61","filename":"core/src/main/java/org/apache/syncope/core/services/EntitlementServiceImpl.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FEntitlementServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FEntitlementServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FEntitlementServiceImpl.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"1308e1f3d13ddbe0abcf7eaa728dafc8b8078572","filename":"core/src/main/java/org/apache/syncope/core/services/LoggerServiceImpl.java","status":"modified","additions":116,"deletions":116,"changes":232,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"2fc947c39a138e6af4b475fe4d687aaab9657af9","filename":"core/src/main/java/org/apache/syncope/core/services/PolicyServiceImpl.java","status":"modified","additions":125,"deletions":125,"changes":250,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"674a67404fe89334da5acb5fff3357a5cea8f8ea","filename":"core/src/main/java/org/apache/syncope/core/services/ResourceServiceImpl.java","status":"modified","additions":151,"deletions":151,"changes":302,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"3c6281a537fc581323addbe9094c5617c27f9e91","filename":"core/src/main/java/org/apache/syncope/core/services/RoleServiceImpl.java","status":"modified","additions":222,"deletions":222,"changes":444,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"74804b3972dd34c68fd5a53529b7260eda14b9e7","filename":"core/src/main/java/org/apache/syncope/core/services/SchemaServiceImpl.java","status":"modified","additions":77,"deletions":77,"changes":154,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"82a4d434cacc9533478df6f08e4b3cc9da2768ae","filename":"core/src/main/java/org/apache/syncope/core/services/TaskServiceImpl.java","status":"modified","additions":158,"deletions":158,"changes":316,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"8fd0416f849d5301eb497945a5ad634797d051b4","filename":"core/src/main/java/org/apache/syncope/core/services/WorkflowServiceImpl.java","status":"modified","additions":116,"deletions":116,"changes":232,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FWorkflowServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FWorkflowServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FWorkflowServiceImpl.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"8df9d0a2adb5277b5a63552350b80751557d331b","filename":"core/src/test/java/org/apache/syncope/core/rest/WorkflowTestITCase.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FWorkflowTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FWorkflowTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FWorkflowTestITCase.java?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"},{"sha":"8ac63ef9e2f86cbdeab51c1086ba9965768dd012","filename":"core/src/test/resources/jboss/META-INF/MANIFEST.MF","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Ftest%2Fresources%2Fjboss%2FMETA-INF%2FMANIFEST.MF","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f/core%2Fsrc%2Ftest%2Fresources%2Fjboss%2FMETA-INF%2FMANIFEST.MF","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fjboss%2FMETA-INF%2FMANIFEST.MF?ref=cc3259e1ad84ba0fc2eb4da173ae34854f60ea3f"}]}