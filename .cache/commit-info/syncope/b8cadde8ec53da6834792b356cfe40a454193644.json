{"sha":"b8cadde8ec53da6834792b356cfe40a454193644","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI4Y2FkZGU4ZWM1M2RhNjgzNDc5MmIzNTZjZmU0MGE0NTQxOTM2NDQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-20T09:47:26Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-20T09:47:26Z"},"message":"[SYNCOPE-685] Now account and password policies can be composed of several 'rules', where each rule can be provided as a separate Java class (similar to Reportlet mechanism); previous account and password policies are now implemented as default rules - also contain SYNCOPE-626","tree":{"sha":"1419ef8a590ff97c8bfff34048833a8c79686c10","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1419ef8a590ff97c8bfff34048833a8c79686c10"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b8cadde8ec53da6834792b356cfe40a454193644","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b8cadde8ec53da6834792b356cfe40a454193644","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b8cadde8ec53da6834792b356cfe40a454193644","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b8cadde8ec53da6834792b356cfe40a454193644/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"77f697b2dbb05c81818288f74f3f7b7656db8b7f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/77f697b2dbb05c81818288f74f3f7b7656db8b7f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/77f697b2dbb05c81818288f74f3f7b7656db8b7f"}],"stats":{"total":3940,"additions":1036,"deletions":2904},"files":[{"sha":"ae34f53371aeafb29251b155c630b2bec76fdf74","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/PolicyCommand.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -23,7 +23,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n import org.slf4j.Logger;"},{"sha":"2ea9423967bf36c1930054d6b381b06c7c7f0752","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/ReportCommand.java","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n-import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -84,9 +83,6 @@ public class ReportCommand extends AbstractCommand {\n     @Parameter(names = { \"-eer\", \"--export-execution-result\" })\n     private Long exportId = -1L;\n \n-    @Parameter(names = { \"-rc\", \"--reportlet-class\" })\n-    private boolean reportletClass = false;\n-\n     @Override\n     public void execute() {\n         final ReportService reportService = SyncopeServices.get(ReportService.class);\n@@ -176,16 +172,6 @@ public void execute() {\n                 LOG.error(\"Error calling configuration service\", ex);\n                 System.out.println(\" - Error calling configuration service \" + ex.getMessage());\n             }\n-        } else if (reportletClass) {\n-            try {\n-                LOG.debug(\"- reportlet configuration class list command\");\n-                System.out.println(\"Reportlet conf classes\");\n-                for (final ReportletConfClass reportletConfClass : reportService.getReportletConfClasses()) {\n-                    System.out.println(\"  *** \" + reportletConfClass.getElement());\n-                }\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n         } else {\n             System.out.println(helpMessage);\n         }"},{"sha":"a0a1ddcbb230067caaf85a81f8762c015c16f5e4","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceSecurityPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceSecurityPanel.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -23,7 +23,7 @@\n import java.util.Map;\n import org.apache.syncope.client.console.rest.PolicyRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.markup.html.WebMarkupContainer;"},{"sha":"7f5964bd54af6877c197c0d2f00c8d4221184164","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/PolicyRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -21,7 +21,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n import org.springframework.stereotype.Component;"},{"sha":"89617df8859c158b70f45e6ba4647bc5fa764471","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -18,14 +18,11 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n-import java.util.ArrayList;\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n-import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.springframework.stereotype.Component;\n@@ -35,21 +32,6 @@ public class ReportRestClient extends BaseRestClient implements ExecutionRestCli\n \n     private static final long serialVersionUID = 1644689667998953604L;\n \n-    public List<String> getReportletConfClasses() {\n-        List<String> result = new ArrayList<>();\n-\n-        try {\n-            List<ReportletConfClass> reportletConfClasses = getService(ReportService.class).getReportletConfClasses();\n-            for (ReportletConfClass clazz : reportletConfClasses) {\n-                result.add(clazz.getElement());\n-            }\n-        } catch (SyncopeClientException e) {\n-            LOG.error(\"While getting available reportlet classes\", e);\n-        }\n-\n-        return result;\n-    }\n-\n     public ReportTO read(final Long reportId) {\n         return getService(ReportService.class).read(reportId);\n     }"},{"sha":"968260f51e24668da0c800565a0af0964cd401c9","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -31,7 +31,7 @@\n import org.apache.cxf.feature.LoggingFeature;\n import org.apache.cxf.jaxrs.provider.JAXBElementProvider;\n import org.apache.cxf.staxutils.DocumentDepthProperties;\n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**"},{"sha":"8820779b2799ca2440efd6c9d930d3518756df72","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractAccountRuleConf.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccountRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccountRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccountRuleConf.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -16,27 +16,27 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.report;\n+package org.apache.syncope.common.lib.policy;\n \n import javax.xml.bind.annotation.XmlSeeAlso;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n @XmlType\n-@XmlSeeAlso({ StaticReportletConf.class, UserReportletConf.class, GroupReportletConf.class })\n-public abstract class AbstractReportletConf extends AbstractBaseBean implements ReportletConf {\n+@XmlSeeAlso({ DefaultAccountRuleConf.class })\n+public abstract class AbstractAccountRuleConf extends AbstractBaseBean implements AccountRuleConf {\n \n-    private static final long serialVersionUID = -6130008602014516608L;\n+    private static final long serialVersionUID = -4080475005967851092L;\n \n     private String name;\n \n-    public AbstractReportletConf() {\n+    public AbstractAccountRuleConf() {\n         this(StringUtils.EMPTY);\n         setName(getClass().getName());\n     }\n \n-    public AbstractReportletConf(final String name) {\n+    public AbstractAccountRuleConf(final String name) {\n         super();\n         this.name = name;\n     }"},{"sha":"6d35abdf51462cad9367bbf1da896742807b31af","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractPasswordRuleConf.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractPasswordRuleConf.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -16,27 +16,27 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.report;\n+package org.apache.syncope.common.lib.policy;\n \n import javax.xml.bind.annotation.XmlSeeAlso;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n @XmlType\n-@XmlSeeAlso({ StaticReportletConf.class, UserReportletConf.class, GroupReportletConf.class })\n-public abstract class AbstractReportletConf extends AbstractBaseBean implements ReportletConf {\n+@XmlSeeAlso({ DefaultPasswordRuleConf.class })\n+public abstract class AbstractPasswordRuleConf extends AbstractBaseBean implements PasswordRuleConf {\n \n-    private static final long serialVersionUID = -6130008602014516608L;\n+    private static final long serialVersionUID = -5814018872387142339L;\n \n     private String name;\n \n-    public AbstractReportletConf() {\n+    public AbstractPasswordRuleConf() {\n         this(StringUtils.EMPTY);\n         setName(getClass().getName());\n     }\n \n-    public AbstractReportletConf(final String name) {\n+    public AbstractPasswordRuleConf(final String name) {\n         super();\n         this.name = name;\n     }"},{"sha":"b1e1049e128f7e34d98ce14fa459643742b1e524","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AccountPolicyTO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -37,7 +37,7 @@ public class AccountPolicyTO extends AbstractPolicyTO {\n \n     private int maxAuthenticationAttempts;\n \n-    private final List<AccountRuleConf> ruleConfs = new ArrayList<>();\n+    private final List<AbstractAccountRuleConf> ruleConfs = new ArrayList<>();\n \n     private final List<String> resources = new ArrayList<>();\n \n@@ -64,7 +64,7 @@ public void setMaxAuthenticationAttempts(final int maxAuthenticationAttempts) {\n     @XmlElementWrapper(name = \"ruleConfs\")\n     @XmlElement(name = \"ruleConf\")\n     @JsonProperty(\"ruleConfs\")\n-    public List<AccountRuleConf> getRuleConfs() {\n+    public List<AbstractAccountRuleConf> getRuleConfs() {\n         return ruleConfs;\n     }\n "},{"sha":"804fcc5b4a215dca809dce6a95eb1a196bd82cb4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAccountRuleConf.java","status":"modified","additions":54,"deletions":1,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccountRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccountRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccountRuleConf.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -18,12 +18,17 @@\n  */\n package org.apache.syncope.common.lib.policy;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n \n @XmlRootElement(name = \"defaultAccountRuleConf\")\n @XmlType\n-public class DefaultAccountRuleConf extends AbstractRuleConf implements AccountRuleConf {\n+public class DefaultAccountRuleConf extends AbstractAccountRuleConf implements AccountRuleConf {\n \n     private static final long serialVersionUID = 3259256974414758406L;\n \n@@ -52,6 +57,26 @@ public class DefaultAccountRuleConf extends AbstractRuleConf implements AccountR\n      */\n     private boolean allLowerCase;\n \n+    /**\n+     * Substrings not permitted.\n+     */\n+    private final List<String> wordsNotPermitted = new ArrayList<>();\n+\n+    /**\n+     * User attribute values not permitted.\n+     */\n+    private final List<String> schemasNotPermitted = new ArrayList<>();\n+\n+    /**\n+     * Substrings not permitted as prefix.\n+     */\n+    private final List<String> prefixesNotPermitted = new ArrayList<>();\n+\n+    /**\n+     * Substrings not permitted as suffix.\n+     */\n+    private final List<String> suffixesNotPermitted = new ArrayList<>();\n+\n     public boolean isAllLowerCase() {\n         return allLowerCase;\n     }\n@@ -91,4 +116,32 @@ public String getPattern() {\n     public void setPattern(final String pattern) {\n         this.pattern = pattern;\n     }\n+\n+    @XmlElementWrapper(name = \"wordsNotPermitted\")\n+    @XmlElement(name = \"word\")\n+    @JsonProperty(\"wordsNotPermitted\")\n+    public List<String> getWordsNotPermitted() {\n+        return wordsNotPermitted;\n+    }\n+\n+    @XmlElementWrapper(name = \"prefixesNotPermitted\")\n+    @XmlElement(name = \"prefix\")\n+    @JsonProperty(\"prefixesNotPermitted\")\n+    public List<String> getPrefixesNotPermitted() {\n+        return prefixesNotPermitted;\n+    }\n+\n+    @XmlElementWrapper(name = \"schemasNotPermitted\")\n+    @XmlElement(name = \"schema\")\n+    @JsonProperty(\"schemasNotPermitted\")\n+    public List<String> getSchemasNotPermitted() {\n+        return schemasNotPermitted;\n+    }\n+\n+    @XmlElementWrapper(name = \"suffixesNotPermitted\")\n+    @XmlElement(name = \"suffix\")\n+    @JsonProperty(\"suffixesNotPermitted\")\n+    public List<String> getSuffixesNotPermitted() {\n+        return suffixesNotPermitted;\n+    }\n }"},{"sha":"87928979f14ba5ade865733588bad61f28335455","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPasswordRuleConf.java","status":"modified","additions":66,"deletions":1,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPasswordRuleConf.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -18,12 +18,17 @@\n  */\n package org.apache.syncope.common.lib.policy;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n \n @XmlRootElement(name = \"defaultPasswordRuleConf\")\n @XmlType\n-public class DefaultPasswordRuleConf extends AbstractRuleConf implements PasswordRuleConf {\n+public class DefaultPasswordRuleConf extends AbstractPasswordRuleConf {\n \n     private static final long serialVersionUID = -7988778083915548547L;\n \n@@ -122,6 +127,31 @@ public class DefaultPasswordRuleConf extends AbstractRuleConf implements Passwor\n      */\n     private boolean mustntEndWithAlpha;\n \n+    /**\n+     * Specify if using username as password is allowed.\n+     */\n+    private boolean usernameAllowed;\n+\n+    /**\n+     * Substrings not permitted.\n+     */\n+    private final List<String> wordsNotPermitted = new ArrayList<>();\n+\n+    /**\n+     * User attribute values not permitted.\n+     */\n+    private final List<String> schemasNotPermitted = new ArrayList<>();\n+\n+    /**\n+     * Substrings not permitted as prefix.\n+     */\n+    private final List<String> prefixesNotPermitted = new ArrayList<>();\n+\n+    /**\n+     * Substrings not permitted as suffix.\n+     */\n+    private final List<String> suffixesNotPermitted = new ArrayList<>();\n+\n     public boolean isDigitRequired() {\n         return digitRequired;\n     }\n@@ -274,4 +304,39 @@ public void setMustntStartWithAlpha(final boolean mustntStartWithAlpha) {\n         this.mustntStartWithAlpha = mustntStartWithAlpha;\n     }\n \n+    public boolean isUsernameAllowed() {\n+        return usernameAllowed;\n+    }\n+\n+    public void setUsernameAllowed(final boolean usernameAllowed) {\n+        this.usernameAllowed = usernameAllowed;\n+    }\n+\n+    @XmlElementWrapper(name = \"wordsNotPermitted\")\n+    @XmlElement(name = \"word\")\n+    @JsonProperty(\"wordsNotPermitted\")\n+    public List<String> getWordsNotPermitted() {\n+        return wordsNotPermitted;\n+    }\n+\n+    @XmlElementWrapper(name = \"prefixesNotPermitted\")\n+    @XmlElement(name = \"prefix\")\n+    @JsonProperty(\"prefixesNotPermitted\")\n+    public List<String> getPrefixesNotPermitted() {\n+        return prefixesNotPermitted;\n+    }\n+\n+    @XmlElementWrapper(name = \"schemasNotPermitted\")\n+    @XmlElement(name = \"schema\")\n+    @JsonProperty(\"schemasNotPermitted\")\n+    public List<String> getSchemasNotPermitted() {\n+        return schemasNotPermitted;\n+    }\n+\n+    @XmlElementWrapper(name = \"suffixesNotPermitted\")\n+    @XmlElement(name = \"suffix\")\n+    @JsonProperty(\"suffixesNotPermitted\")\n+    public List<String> getSuffixesNotPermitted() {\n+        return suffixesNotPermitted;\n+    }\n }"},{"sha":"49c73a3aa68bd34d0a18c5aff8af2cd0cd211b7a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PasswordPolicyTO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -37,7 +37,7 @@ public class PasswordPolicyTO extends AbstractPolicyTO {\n \n     private int historyLength;\n \n-    private final List<PasswordRuleConf> ruleConfs = new ArrayList<>();\n+    private final List<AbstractPasswordRuleConf> ruleConfs = new ArrayList<>();\n \n     public PasswordPolicyTO() {\n         super(PolicyType.PASSWORD);\n@@ -62,7 +62,7 @@ public void setHistoryLength(final int historyLength) {\n     @XmlElementWrapper(name = \"ruleConfs\")\n     @XmlElement(name = \"ruleConf\")\n     @JsonProperty(\"ruleConfs\")\n-    public List<PasswordRuleConf> getRuleConfs() {\n+    public List<AbstractPasswordRuleConf> getRuleConfs() {\n         return ruleConfs;\n     }\n }"},{"sha":"2514c16926656a071177b06b8fd0161f33e582b1","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/report/StaticReportletConf.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FStaticReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FStaticReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FStaticReportletConf.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -44,7 +44,7 @@ public class StaticReportletConf extends AbstractReportletConf {\n \n     private TraceLevel traceLevel;\n \n-    private final List<String> listField = new ArrayList<String>();\n+    private final List<String> listField = new ArrayList<>();\n \n     public StaticReportletConf() {\n         super();"},{"sha":"2c5fcb43a98b227ccea0e8fe70bff2153602da08","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractPolicyTO.java","status":"removed","additions":0,"deletions":97,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractPolicyTO.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,97 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.to;\n-\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.ws.rs.PathParam;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlSeeAlso;\n-import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.AbstractBaseBean;\n-import org.apache.syncope.common.lib.types.PolicyType;\n-\n-@XmlRootElement(name = \"abstractPolicy\")\n-@XmlType\n-@XmlSeeAlso({ AccountPolicyTO.class, PasswordPolicyTO.class, SyncPolicyTO.class })\n-@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n-public abstract class AbstractPolicyTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = -2903888572649721035L;\n-\n-    private long key;\n-\n-    private String description;\n-\n-    private final PolicyType type;\n-\n-    private final List<String> usedByResources = new ArrayList<>();\n-\n-    private final List<String> usedByRealms = new ArrayList<>();\n-\n-    private AbstractPolicyTO() {\n-        super();\n-        throw new UnsupportedOperationException(\"No-arg constructor is just to keep JAXB from complaining\");\n-    }\n-\n-    protected AbstractPolicyTO(final PolicyType type) {\n-        super();\n-        this.type = type;\n-    }\n-\n-    public long getKey() {\n-        return key;\n-    }\n-\n-    @PathParam(\"key\")\n-    public void setKey(final long key) {\n-        this.key = key;\n-    }\n-\n-    public String getDescription() {\n-        return description;\n-    }\n-\n-    public void setDescription(final String description) {\n-        this.description = description;\n-    }\n-\n-    public PolicyType getType() {\n-        return type;\n-    }\n-\n-    @XmlElementWrapper(name = \"usedByResources\")\n-    @XmlElement(name = \"resource\")\n-    @JsonProperty(\"usedByResources\")\n-    public List<String> getUsedByResources() {\n-        return usedByResources;\n-    }\n-\n-    @XmlElementWrapper(name = \"usedByRealms\")\n-    @XmlElement(name = \"group\")\n-    @JsonProperty(\"usedByRealms\")\n-    public List<String> getUsedByRealms() {\n-        return usedByRealms;\n-    }\n-\n-}"},{"sha":"a7018997d8826b9eeceeb0c27fa286e5253a10bc","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AccountPolicyTO.java","status":"removed","additions":0,"deletions":59,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccountPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccountPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccountPolicyTO.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,59 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.to;\n-\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.types.AccountPolicySpec;\n-import org.apache.syncope.common.lib.types.PolicyType;\n-\n-@XmlRootElement(name = \"accountPolicy\")\n-@XmlType\n-public class AccountPolicyTO extends AbstractPolicyTO {\n-\n-    private static final long serialVersionUID = -1557150042828800134L;\n-\n-    private AccountPolicySpec specification;\n-\n-    private final List<String> resources = new ArrayList<>();\n-\n-    public AccountPolicyTO() {\n-        super(PolicyType.ACCOUNT);\n-    }\n-\n-    public AccountPolicySpec getSpecification() {\n-        return specification;\n-    }\n-\n-    public void setSpecification(final AccountPolicySpec specification) {\n-        this.specification = specification;\n-    }\n-\n-    @XmlElementWrapper(name = \"resources\")\n-    @XmlElement(name = \"resource\")\n-    @JsonProperty(\"resources\")\n-    public List<String> getResources() {\n-        return resources;\n-    }\n-}"},{"sha":"a0a21ea91a2ec47bc2d15fcbded31bf0d42e65db","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PasswordPolicyTO.java","status":"removed","additions":0,"deletions":46,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPasswordPolicyTO.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,46 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.to;\n-\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n-import org.apache.syncope.common.lib.types.PolicyType;\n-\n-@XmlRootElement(name = \"passwordPolicy\")\n-@XmlType\n-public class PasswordPolicyTO extends AbstractPolicyTO {\n-\n-    private static final long serialVersionUID = -5606086441294799690L;\n-\n-    private PasswordPolicySpec specification;\n-\n-    public PasswordPolicyTO() {\n-        super(PolicyType.PASSWORD);\n-    }\n-\n-    public PasswordPolicySpec getSpecification() {\n-        return specification;\n-    }\n-\n-    public void setSpecification(final PasswordPolicySpec specification) {\n-        this.specification = specification;\n-    }\n-\n-}"},{"sha":"309a4ebc137edf11a993abe519c8ecd991edb930","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SyncPolicyTO.java","status":"removed","additions":0,"deletions":46,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncPolicyTO.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,46 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.to;\n-\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.lib.types.SyncPolicySpec;\n-\n-@XmlRootElement(name = \"syncPolicy\")\n-@XmlType\n-public class SyncPolicyTO extends AbstractPolicyTO {\n-\n-    private static final long serialVersionUID = 993024634238024242L;\n-\n-    private SyncPolicySpec specification;\n-\n-    public SyncPolicyTO() {\n-        super(PolicyType.SYNC);\n-    }\n-\n-    public SyncPolicySpec getSpecification() {\n-        return specification;\n-    }\n-\n-    public void setSpecification(final SyncPolicySpec specification) {\n-        this.specification = specification;\n-    }\n-\n-}"},{"sha":"fe57d52a5396d8cf2904566558ba7d0aca366086","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SyncopeTO.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -59,8 +59,14 @@ public class SyncopeTO extends AbstractBaseBean {\n \n     private String virAttrCache;\n \n+    private String passwordGenerator;\n+\n     private final List<String> reportlets = new ArrayList<>();\n \n+    private final List<String> accountRules = new ArrayList<>();\n+\n+    private final List<String> passwordRules = new ArrayList<>();\n+\n     private final List<String> taskJobs = new ArrayList<>();\n \n     private final List<String> propagationActions = new ArrayList<>();\n@@ -132,13 +138,35 @@ public String getVirAttrCache() {\n         return virAttrCache;\n     }\n \n+    public String getPasswordGenerator() {\n+        return passwordGenerator;\n+    }\n+\n+    public void setPasswordGenerator(final String passwordGenerator) {\n+        this.passwordGenerator = passwordGenerator;\n+    }\n+\n     @XmlElementWrapper(name = \"reportlets\")\n     @XmlElement(name = \"reportlet\")\n     @JsonProperty(\"reportlets\")\n     public List<String> getReportlets() {\n         return reportlets;\n     }\n \n+    @XmlElementWrapper(name = \"accountRules\")\n+    @XmlElement(name = \"accountRule\")\n+    @JsonProperty(\"accountRules\")\n+    public List<String> getAccountRules() {\n+        return accountRules;\n+    }\n+\n+    @XmlElementWrapper(name = \"passwordRules\")\n+    @XmlElement(name = \"passwordRule\")\n+    @JsonProperty(\"passwordRules\")\n+    public List<String> getPasswordRules() {\n+        return passwordRules;\n+    }\n+\n     @XmlElementWrapper(name = \"taskJobs\")\n     @XmlElement(name = \"taskJob\")\n     @JsonProperty(\"taskJobs\")"},{"sha":"e951419c136494c31d8f7e53ba2c24ea02cc0e69","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AbstractPolicySpec.java","status":"removed","additions":0,"deletions":100,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAbstractPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAbstractPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAbstractPolicySpec.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,100 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.types;\n-\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.lang3.builder.EqualsBuilder;\n-import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n-import org.apache.commons.lang3.builder.ToStringStyle;\n-\n-@XmlType\n-public abstract class AbstractPolicySpec {\n-\n-    private static final long serialVersionUID = -6210646284287392063L;\n-\n-    /**\n-     * Substrings not permitted.\n-     */\n-    private final List<String> wordsNotPermitted = new ArrayList<>();\n-\n-    /**\n-     * User attribute values not permitted.\n-     */\n-    protected final List<String> schemasNotPermitted = new ArrayList<>();\n-\n-    /**\n-     * Substrings not permitted as prefix.\n-     */\n-    protected final List<String> prefixesNotPermitted = new ArrayList<>();\n-\n-    /**\n-     * Substrings not permitted as suffix.\n-     */\n-    protected final List<String> suffixesNotPermitted = new ArrayList<>();\n-\n-    @XmlElementWrapper(name = \"wordsNotPermitted\")\n-    @XmlElement(name = \"word\")\n-    @JsonProperty(\"wordsNotPermitted\")\n-    public List<String> getWordsNotPermitted() {\n-        return wordsNotPermitted;\n-    }\n-\n-    @XmlElementWrapper(name = \"prefixesNotPermitted\")\n-    @XmlElement(name = \"prefix\")\n-    @JsonProperty(\"prefixesNotPermitted\")\n-    public List<String> getPrefixesNotPermitted() {\n-        return prefixesNotPermitted;\n-    }\n-\n-    @XmlElementWrapper(name = \"schemasNotPermitted\")\n-    @XmlElement(name = \"schema\")\n-    @JsonProperty(\"schemasNotPermitted\")\n-    public List<String> getSchemasNotPermitted() {\n-        return schemasNotPermitted;\n-    }\n-\n-    @XmlElementWrapper(name = \"suffixesNotPermitted\")\n-    @XmlElement(name = \"suffix\")\n-    @JsonProperty(\"suffixesNotPermitted\")\n-    public List<String> getSuffixesNotPermitted() {\n-        return suffixesNotPermitted;\n-    }\n-\n-    @Override\n-    public boolean equals(final Object obj) {\n-        return EqualsBuilder.reflectionEquals(this, obj);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return HashCodeBuilder.reflectionHashCode(this);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n-    }\n-\n-}"},{"sha":"47a60e8e947971a046969b25a99787f7385fbeed","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AccountPolicySpec.java","status":"removed","additions":0,"deletions":121,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAccountPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAccountPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAccountPolicySpec.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,121 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.types;\n-\n-import javax.xml.bind.annotation.XmlType;\n-\n-@XmlType\n-public class AccountPolicySpec extends AbstractPolicySpec {\n-\n-    private static final long serialVersionUID = 3259256974414758406L;\n-\n-    /**\n-     * Minimum length.\n-     */\n-    private int maxLength;\n-\n-    /**\n-     * Maximum length.\n-     */\n-    private int minLength;\n-\n-    /**\n-     * Pattern (regular expression) that must match.\n-     */\n-    private String pattern;\n-\n-    /**\n-     * Specify if one or more lowercase characters are permitted.\n-     */\n-    private boolean allUpperCase;\n-\n-    /**\n-     * Specify if one or more uppercase characters are permitted.\n-     */\n-    private boolean allLowerCase;\n-\n-    /**\n-     * Specify if, when reached the maximum allowed number of subsequent login failures, user shall be suspended.\n-     */\n-    private boolean propagateSuspension;\n-\n-    /**\n-     * Maximum number of (failing) authentication attempts.\n-     * 0 disabled; &gt;0 enabled.\n-     * If the number of subsequent failed logins will be greater then this value\n-     * the account will be suspended (lock-out).\n-     */\n-    private int maxAuthenticationAttempts;\n-\n-    public boolean isAllLowerCase() {\n-        return allLowerCase;\n-    }\n-\n-    public void setAllLowerCase(final boolean allLowerCase) {\n-        this.allLowerCase = allLowerCase;\n-    }\n-\n-    public boolean isAllUpperCase() {\n-        return allUpperCase;\n-    }\n-\n-    public void setAllUpperCase(final boolean allUpperCase) {\n-        this.allUpperCase = allUpperCase;\n-    }\n-\n-    public int getMaxLength() {\n-        return maxLength;\n-    }\n-\n-    public void setMaxLength(final int maxLength) {\n-        this.maxLength = maxLength;\n-    }\n-\n-    public int getMinLength() {\n-        return minLength;\n-    }\n-\n-    public void setMinLength(final int minLength) {\n-        this.minLength = minLength;\n-    }\n-\n-    public String getPattern() {\n-        return pattern;\n-    }\n-\n-    public void setPattern(final String pattern) {\n-        this.pattern = pattern;\n-    }\n-\n-    public boolean isPropagateSuspension() {\n-        return propagateSuspension;\n-    }\n-\n-    public void setPropagateSuspension(final boolean propagateSuspension) {\n-        this.propagateSuspension = propagateSuspension;\n-    }\n-\n-    public int getMaxAuthenticationAttempts() {\n-        return maxAuthenticationAttempts;\n-    }\n-\n-    public void setMaxAuthenticationAttempts(final int maxAuthenticationAttempts) {\n-        this.maxAuthenticationAttempts = maxAuthenticationAttempts;\n-    }\n-}"},{"sha":"175a1ef73b0c6bda2fcbe72858f763d64c5f9a41","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/PasswordPolicySpec.java","status":"removed","additions":0,"deletions":300,"changes":300,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPasswordPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPasswordPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPasswordPolicySpec.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,300 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.types;\n-\n-import javax.xml.bind.annotation.XmlType;\n-\n-@XmlType\n-public class PasswordPolicySpec extends AbstractPolicySpec {\n-\n-    private static final long serialVersionUID = -7988778083915548547L;\n-\n-    /**\n-     * History length.\n-     */\n-    private int historyLength;\n-\n-    /**\n-     * Minimum length.\n-     */\n-    private int maxLength;\n-\n-    /**\n-     * Maximum length.\n-     */\n-    private int minLength;\n-\n-    /**\n-     * Specify if one or more non alphanumeric characters are required.\n-     */\n-    private boolean nonAlphanumericRequired;\n-\n-    /**\n-     * Specify if one or more alphanumeric characters are required.\n-     */\n-    private boolean alphanumericRequired;\n-\n-    /**\n-     * Specify if one or more digits are required.\n-     */\n-    private boolean digitRequired;\n-\n-    /**\n-     * Specify if one or more lowercase alphabetic characters are required.\n-     */\n-    private boolean lowercaseRequired;\n-\n-    /**\n-     * Specify if one or more uppercase alphabetic characters are required.\n-     */\n-    private boolean uppercaseRequired;\n-\n-    /**\n-     * Specify if must start with a digit.\n-     */\n-    private boolean mustStartWithDigit;\n-\n-    /**\n-     * Specify if mustn't start with a digit.\n-     */\n-    private boolean mustntStartWithDigit;\n-\n-    /**\n-     * Specify if must end with a digit.\n-     */\n-    private boolean mustEndWithDigit;\n-\n-    /**\n-     * Specify if mustn't end with a digit.\n-     */\n-    private boolean mustntEndWithDigit;\n-\n-    /**\n-     * Specify if must start with a non alphanumeric character.\n-     */\n-    private boolean mustStartWithNonAlpha;\n-\n-    /**\n-     * Specify if must start with a alphanumeric character.\n-     */\n-    private boolean mustStartWithAlpha;\n-\n-    /**\n-     * Specify if mustn't start with a non alphanumeric character.\n-     */\n-    private boolean mustntStartWithNonAlpha;\n-\n-    /**\n-     * Specify if mustn't start with a alphanumeric character.\n-     */\n-    private boolean mustntStartWithAlpha;\n-\n-    /**\n-     * Specify if must end with a non alphanumeric character.\n-     */\n-    private boolean mustEndWithNonAlpha;\n-\n-    /**\n-     * Specify if must end with a alphanumeric character.\n-     */\n-    private boolean mustEndWithAlpha;\n-\n-    /**\n-     * Specify if mustn't end with a non alphanumeric character.\n-     */\n-    private boolean mustntEndWithNonAlpha;\n-\n-    /**\n-     * Specify if mustn't end with a alphanumeric character.\n-     */\n-    private boolean mustntEndWithAlpha;\n-\n-    /**\n-     * Specify if password shall not be stored internally.\n-     */\n-    private boolean allowNullPassword;\n-\n-    public boolean isDigitRequired() {\n-        return digitRequired;\n-    }\n-\n-    public void setDigitRequired(final boolean digitRequired) {\n-        this.digitRequired = digitRequired;\n-    }\n-\n-    public boolean isLowercaseRequired() {\n-        return lowercaseRequired;\n-    }\n-\n-    public void setLowercaseRequired(final boolean lowercaseRequired) {\n-        this.lowercaseRequired = lowercaseRequired;\n-    }\n-\n-    public int getMaxLength() {\n-        return maxLength;\n-    }\n-\n-    public void setMaxLength(final int maxLength) {\n-        this.maxLength = maxLength;\n-    }\n-\n-    public int getMinLength() {\n-        return minLength;\n-    }\n-\n-    public void setMinLength(final int minLength) {\n-        this.minLength = minLength;\n-    }\n-\n-    public boolean isMustEndWithDigit() {\n-        return mustEndWithDigit;\n-    }\n-\n-    public void setMustEndWithDigit(final boolean mustEndWithDigit) {\n-        this.mustEndWithDigit = mustEndWithDigit;\n-    }\n-\n-    public boolean isMustEndWithNonAlpha() {\n-        return mustEndWithNonAlpha;\n-    }\n-\n-    public void setMustEndWithNonAlpha(final boolean mustEndWithNonAlpha) {\n-        this.mustEndWithNonAlpha = mustEndWithNonAlpha;\n-    }\n-\n-    public boolean isMustStartWithDigit() {\n-        return mustStartWithDigit;\n-    }\n-\n-    public void setMustStartWithDigit(final boolean mustStartWithDigit) {\n-        this.mustStartWithDigit = mustStartWithDigit;\n-    }\n-\n-    public boolean isMustStartWithNonAlpha() {\n-        return mustStartWithNonAlpha;\n-    }\n-\n-    public void setMustStartWithNonAlpha(final boolean mustStartWithNonAlpha) {\n-        this.mustStartWithNonAlpha = mustStartWithNonAlpha;\n-    }\n-\n-    public boolean isMustntEndWithDigit() {\n-        return mustntEndWithDigit;\n-    }\n-\n-    public void setMustntEndWithDigit(final boolean mustntEndWithDigit) {\n-        this.mustntEndWithDigit = mustntEndWithDigit;\n-    }\n-\n-    public boolean isMustntEndWithNonAlpha() {\n-        return mustntEndWithNonAlpha;\n-    }\n-\n-    public void setMustntEndWithNonAlpha(final boolean mustntEndWithNonAlpha) {\n-        this.mustntEndWithNonAlpha = mustntEndWithNonAlpha;\n-    }\n-\n-    public boolean isMustntStartWithDigit() {\n-        return mustntStartWithDigit;\n-    }\n-\n-    public void setMustntStartWithDigit(final boolean mustntStartWithDigit) {\n-        this.mustntStartWithDigit = mustntStartWithDigit;\n-    }\n-\n-    public boolean isMustntStartWithNonAlpha() {\n-        return mustntStartWithNonAlpha;\n-    }\n-\n-    public void setMustntStartWithNonAlpha(final boolean mustntStartWithNonAlpha) {\n-        this.mustntStartWithNonAlpha = mustntStartWithNonAlpha;\n-    }\n-\n-    public boolean isNonAlphanumericRequired() {\n-        return nonAlphanumericRequired;\n-    }\n-\n-    public void setNonAlphanumericRequired(final boolean nonAlphanumericRequired) {\n-        this.nonAlphanumericRequired = nonAlphanumericRequired;\n-    }\n-\n-    public boolean isUppercaseRequired() {\n-        return uppercaseRequired;\n-    }\n-\n-    public void setUppercaseRequired(final boolean uppercaseRequired) {\n-        this.uppercaseRequired = uppercaseRequired;\n-    }\n-\n-    public boolean isAlphanumericRequired() {\n-        return alphanumericRequired;\n-    }\n-\n-    public void setAlphanumericRequired(final boolean alphanumericRequired) {\n-        this.alphanumericRequired = alphanumericRequired;\n-    }\n-\n-    public boolean isMustEndWithAlpha() {\n-        return mustEndWithAlpha;\n-    }\n-\n-    public void setMustEndWithAlpha(final boolean mustEndWithAlpha) {\n-        this.mustEndWithAlpha = mustEndWithAlpha;\n-    }\n-\n-    public boolean isMustStartWithAlpha() {\n-        return mustStartWithAlpha;\n-    }\n-\n-    public void setMustStartWithAlpha(final boolean mustStartWithAlpha) {\n-        this.mustStartWithAlpha = mustStartWithAlpha;\n-    }\n-\n-    public boolean isMustntEndWithAlpha() {\n-        return mustntEndWithAlpha;\n-    }\n-\n-    public void setMustntEndWithAlpha(final boolean mustntEndWithAlpha) {\n-        this.mustntEndWithAlpha = mustntEndWithAlpha;\n-    }\n-\n-    public boolean isMustntStartWithAlpha() {\n-        return mustntStartWithAlpha;\n-    }\n-\n-    public void setMustntStartWithAlpha(final boolean mustntStartWithAlpha) {\n-        this.mustntStartWithAlpha = mustntStartWithAlpha;\n-    }\n-\n-    public int getHistoryLength() {\n-        return historyLength;\n-    }\n-\n-    public void setHistoryLength(final int historyLength) {\n-        this.historyLength = historyLength;\n-    }\n-\n-    public boolean isAllowNullPassword() {\n-        return allowNullPassword;\n-    }\n-\n-    public void setAllowNullPassword(final boolean allowNullPassword) {\n-        this.allowNullPassword = allowNullPassword;\n-    }\n-}"},{"sha":"7f1c11ee0c1a38e956b0a2d1f7c97b1fd2a41e56","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/PolicyType.java","status":"removed","additions":0,"deletions":43,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPolicyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPolicyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPolicyType.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,43 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.types;\n-\n-import javax.xml.bind.annotation.XmlEnum;\n-\n-@XmlEnum\n-public enum PolicyType {\n-\n-    /**\n-     * How username values should look like.\n-     */\n-    ACCOUNT,\n-    /**\n-     * How password values should look like.\n-     */\n-    PASSWORD,\n-    /**\n-     * For handling conflicts resolution during synchronization.\n-     */\n-    SYNC,\n-    /**\n-     * For handling conflicts resolution during push.\n-     */\n-    PUSH;\n-\n-}"},{"sha":"0bbea85d54a5bdce2eb5cf86b752f9472263e595","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/PushPolicySpec.java","status":"removed","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPushPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPushPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPushPolicySpec.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,28 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.types;\n-\n-import javax.xml.bind.annotation.XmlType;\n-\n-@XmlType\n-public class PushPolicySpec {\n-\n-    private static final long serialVersionUID = 3641030189482617497L;\n-\n-}"},{"sha":"7bdaea0fb0fc5336def9cabf085fc1ea8bf71098","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/SyncPolicySpec.java","status":"removed","additions":0,"deletions":62,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSyncPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSyncPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSyncPolicySpec.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,62 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.types;\n-\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.HashMap;\n-import java.util.Map;\n-import javax.xml.bind.annotation.XmlType;\n-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n-import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n-\n-@XmlType\n-public class SyncPolicySpec {\n-\n-    private static final long serialVersionUID = -3144027171719498127L;\n-\n-    private ConflictResolutionAction conflictResolutionAction;\n-\n-    /**\n-     * Associates anyTypeKey to either:\n-     * <ol>\n-     * <li>Java class name, implementing {@code SyncCorrelationRule}</li>\n-     * <li>JSON array containing plain schema names - this will be used to feed\n-     * {@code PlainAttrsSyncCorrelationRule}</li>\n-     * </ol>\n-     */\n-    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n-    @JsonIgnore\n-    private final Map<String, String> correlationRules = new HashMap<>();\n-\n-    public ConflictResolutionAction getConflictResolutionAction() {\n-        return conflictResolutionAction == null\n-                ? ConflictResolutionAction.IGNORE\n-                : conflictResolutionAction;\n-    }\n-\n-    public void setConflictResolutionAction(final ConflictResolutionAction conflictResolutionAction) {\n-        this.conflictResolutionAction = conflictResolutionAction;\n-    }\n-\n-    @JsonProperty\n-    public Map<String, String> getCorrelationRules() {\n-        return correlationRules;\n-    }\n-}"},{"sha":"55b874752f730f9cc3b6da77c12c68c149c122a0","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -34,7 +34,7 @@\n import org.apache.cxf.jaxrs.model.wadl.Description;\n import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n \n /**"},{"sha":"44863ba7bd3abe2114503197ead56f84eee06039","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -42,7 +42,6 @@\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n-import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n import org.apache.syncope.common.rest.api.beans.ListQuery;\n \n /**\n@@ -51,16 +50,6 @@\n @Path(\"reports\")\n public interface ReportService extends JAXRSService {\n \n-    /**\n-     * Returns a list of available classes for reportlet configuration.\n-     *\n-     * @return list of available classes for reportlet configuration\n-     */\n-    @GET\n-    @Path(\"reportletConfClasses\")\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<ReportletConfClass> getReportletConfClasses();\n-\n     /**\n      * Returns report with matching key.\n      *"},{"sha":"e37dc28a2d41e2d7937592eaa9dedc0e0a5f8a64","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/PolicyLogic.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -24,18 +24,18 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n-import org.apache.syncope.common.lib.to.AccountPolicyTO;\n-import org.apache.syncope.common.lib.to.PasswordPolicyTO;\n-import org.apache.syncope.common.lib.to.SyncPolicyTO;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n+import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.policy.SyncPolicyTO;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.SyncPolicy;\n import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;"},{"sha":"3780d301badab4b0ab5d227563b9341217374341","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":0,"deletions":75,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -24,10 +24,8 @@\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import java.util.zip.ZipInputStream;\n import org.apache.cocoon.optional.pipeline.components.sax.fop.FopSerializer;\n import org.apache.cocoon.pipeline.NonCachingPipeline;\n@@ -37,13 +35,10 @@\n import org.apache.cocoon.sax.component.XMLSerializer;\n import org.apache.cocoon.sax.component.XSLTTransformer;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IteratorUtils;\n-import org.apache.commons.collections4.PredicateUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -58,10 +53,7 @@\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.apache.syncope.core.provisioning.api.data.ReportDataBinder;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n-import org.apache.syncope.core.logic.init.ImplementationClassNamesLoader;\n import org.apache.syncope.core.provisioning.api.job.JobInstanceLoader;\n-import org.apache.syncope.core.logic.report.Reportlet;\n-import org.apache.syncope.core.logic.report.ReportletConfClass;\n import org.apache.syncope.core.logic.report.TextSerializer;\n import org.apache.syncope.common.lib.to.AbstractExecTO;\n import org.apache.syncope.common.lib.types.Entitlement;\n@@ -74,7 +66,6 @@\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.util.ClassUtils;\n \n @Component\n public class ReportLogic extends AbstractJobLogic<ReportTO> {\n@@ -94,9 +85,6 @@ public class ReportLogic extends AbstractJobLogic<ReportTO> {\n     @Autowired\n     private EntityFactory entityFactory;\n \n-    @Autowired\n-    private ImplementationClassNamesLoader classNamesLoader;\n-\n     @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_CREATE + \"')\")\n     public ReportTO create(final ReportTO reportTO) {\n         Report report = entityFactory.newEntity(Report.class);\n@@ -156,69 +144,6 @@ public ReportTO transform(final Report input) {\n                 }, new ArrayList<ReportTO>());\n     }\n \n-    private Class<? extends ReportletConf> getReportletConfClass(final Class<Reportlet> reportletClass) {\n-        Class<? extends ReportletConf> result = null;\n-\n-        ReportletConfClass annotation = reportletClass.getAnnotation(ReportletConfClass.class);\n-        if (annotation != null) {\n-            result = annotation.value();\n-        }\n-\n-        return result;\n-    }\n-\n-    @SuppressWarnings({ \"rawtypes\" })\n-    private Set<Class<Reportlet>> getAllReportletClasses() {\n-        return CollectionUtils.collect(IteratorUtils.filteredIterator(\n-                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.REPORTLET).iterator(),\n-                PredicateUtils.notNullPredicate()),\n-                new Transformer<String, Class<Reportlet>>() {\n-\n-                    @SuppressWarnings(\"unchecked\")\n-                    @Override\n-                    public Class<Reportlet> transform(final String className) {\n-                        Class<Reportlet> result = null;\n-                        try {\n-                            Class reportletClass = ClassUtils.forName(className, ClassUtils.getDefaultClassLoader());\n-                            result = reportletClass;\n-                        } catch (ClassNotFoundException e) {\n-                            LOG.warn(\"Could not load class {}\", className);\n-                        } catch (LinkageError e) {\n-                            LOG.warn(\"Could not link class {}\", className);\n-                        }\n-\n-                        return result;\n-                    }\n-                }, new HashSet<Class<Reportlet>>());\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_LIST + \"')\")\n-    @SuppressWarnings({ \"rawtypes\" })\n-    public Set<String> getReportletConfClasses() {\n-        return CollectionUtils.collect(IteratorUtils.filteredIterator(getAllReportletClasses().iterator(),\n-                PredicateUtils.notNullPredicate()),\n-                new Transformer<Class<Reportlet>, String>() {\n-\n-                    @Override\n-                    public String transform(final Class<Reportlet> reportletClass) {\n-                        Class<? extends ReportletConf> reportletConfClass = getReportletConfClass(reportletClass);\n-                        return reportletConfClass == null ? null : reportletConfClass.getName();\n-                    }\n-                }, new HashSet<String>());\n-    }\n-\n-    public Class<Reportlet> findReportletClassHavingConfClass(final Class<? extends ReportletConf> reportletConfClass) {\n-        Class<Reportlet> result = null;\n-        for (Class<Reportlet> reportletClass : getAllReportletClasses()) {\n-            Class<? extends ReportletConf> found = getReportletConfClass(reportletClass);\n-            if (found != null && found.equals(reportletConfClass)) {\n-                result = reportletClass;\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n     @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_READ + \"')\")\n     public ReportTO read(final Long reportKey) {\n         Report report = reportDAO.find(reportKey);"},{"sha":"eb0c1ad738951a8a3aba0174d60a826c8027cae0","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -28,6 +28,7 @@\n import javax.annotation.Resource;\n import org.apache.syncope.common.lib.to.SyncopeTO;\n import org.apache.syncope.core.logic.init.ImplementationClassNamesLoader;\n+import org.apache.syncope.core.misc.security.PasswordGenerator;\n import org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n@@ -82,6 +83,9 @@ public class SyncopeLogic extends AbstractLogic<SyncopeTO> {\n     @Autowired\n     private VirAttrCache virAttrCache;\n \n+    @Autowired\n+    private PasswordGenerator passwordGenerator;\n+\n     @Autowired\n     private ImplementationClassNamesLoader classNamesLoader;\n \n@@ -129,8 +133,11 @@ public SyncopeTO info() {\n         syncopeTO.setUserProvisioningManager(uProvisioningManager.getClass().getName());\n         syncopeTO.setGroupProvisioningManager(gProvisioningManager.getClass().getName());\n         syncopeTO.setVirAttrCache(virAttrCache.getClass().getName());\n+        syncopeTO.setPasswordGenerator(passwordGenerator.getClass().getName());\n \n         syncopeTO.getReportlets().addAll(classNamesLoader.getClassNames(Type.REPORTLET));\n+        syncopeTO.getAccountRules().addAll(classNamesLoader.getClassNames(Type.ACCOUNT_RULE));\n+        syncopeTO.getPasswordRules().addAll(classNamesLoader.getClassNames(Type.PASSWORD_RULE));\n         syncopeTO.getTaskJobs().addAll(classNamesLoader.getClassNames(Type.TASKJOBDELEGATE));\n         syncopeTO.getPropagationActions().addAll(classNamesLoader.getClassNames(Type.PROPAGATION_ACTIONS));\n         syncopeTO.getSyncActions().addAll(classNamesLoader.getClassNames(Type.SYNC_ACTIONS));"},{"sha":"7bc842ecb52e4aa487a3ec9f25519bb79e385276","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/ImplementationClassNamesLoader.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FImplementationClassNamesLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FImplementationClassNamesLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FImplementationClassNamesLoader.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -32,6 +32,8 @@\n import org.apache.syncope.core.logic.report.Reportlet;\n import org.apache.syncope.core.persistence.api.SyncopeLoader;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n import org.apache.syncope.core.provisioning.java.sync.PushJobDelegate;\n import org.apache.syncope.core.provisioning.java.sync.SyncJobDelegate;\n@@ -52,6 +54,8 @@ public class ImplementationClassNamesLoader implements SyncopeLoader {\n     public enum Type {\n \n         REPORTLET,\n+        ACCOUNT_RULE,\n+        PASSWORD_RULE,\n         TASKJOBDELEGATE,\n         PROPAGATION_ACTIONS,\n         SYNC_ACTIONS,\n@@ -80,6 +84,8 @@ public void load() {\n \n         ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n         scanner.addIncludeFilter(new AssignableTypeFilter(Reportlet.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(AccountRule.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(PasswordRule.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(SchedTaskJobDelegate.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(SyncActions.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(PushActions.class));\n@@ -99,6 +105,13 @@ public void load() {\n                     classNames.get(Type.REPORTLET).add(clazz.getName());\n                 }\n \n+                if (AccountRule.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                    classNames.get(Type.ACCOUNT_RULE).add(clazz.getName());\n+                }\n+                if (PasswordRule.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                    classNames.get(Type.PASSWORD_RULE).add(clazz.getName());\n+                }\n+\n                 if (SchedTaskJobDelegate.class.isAssignableFrom(clazz) && !isAbsractClazz\n                         && !SyncJobDelegate.class.isAssignableFrom(clazz)\n                         && !PushJobDelegate.class.isAssignableFrom(clazz)) {"},{"sha":"482ad0e6617aa4aff8caafdeda11f82ff9d8596e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/AbstractReportlet.java","status":"modified","additions":5,"deletions":16,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FAbstractReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FAbstractReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FAbstractReportlet.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -18,34 +18,23 @@\n  */\n package org.apache.syncope.core.logic.report;\n \n-import org.apache.syncope.common.lib.report.AbstractReportletConf;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.transaction.annotation.Transactional;\n import org.xml.sax.ContentHandler;\n import org.xml.sax.SAXException;\n import org.xml.sax.helpers.AttributesImpl;\n \n-public abstract class AbstractReportlet<T extends AbstractReportletConf> implements Reportlet<T> {\n+public abstract class AbstractReportlet implements Reportlet {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractReportlet.class);\n \n-    protected T conf;\n-\n-    public T getConf() {\n-        return conf;\n-    }\n-\n-    @Override\n-    public void setConf(final T conf) {\n-        this.conf = conf;\n-    }\n-\n-    protected abstract void doExtract(ContentHandler handler) throws SAXException;\n+    protected abstract void doExtract(ReportletConf conf, ContentHandler handler) throws SAXException;\n \n     @Override\n     @Transactional(readOnly = true)\n-    public void extract(final ContentHandler handler) throws SAXException {\n+    public void extract(final ReportletConf conf, final ContentHandler handler) throws SAXException {\n         if (conf == null) {\n             throw new ReportException(new IllegalArgumentException(\"No configuration provided\"));\n         }\n@@ -55,7 +44,7 @@ public void extract(final ContentHandler handler) throws SAXException {\n         atts.addAttribute(\"\", \"\", ReportXMLConst.ATTR_CLASS, ReportXMLConst.XSD_STRING, getClass().getName());\n         handler.startElement(\"\", \"\", ReportXMLConst.ELEMENT_REPORTLET, atts);\n \n-        doExtract(handler);\n+        doExtract(conf, handler);\n \n         handler.endElement(\"\", \"\", ReportXMLConst.ELEMENT_REPORTLET);\n     }"},{"sha":"c5e66421a653712eaee0811ac34b6fac255ff395","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/GroupReportlet.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.report.GroupReportletConf;\n import org.apache.syncope.common.lib.report.GroupReportletConf.Feature;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -43,7 +44,7 @@\n import org.xml.sax.helpers.AttributesImpl;\n \n @ReportletConfClass(GroupReportletConf.class)\n-public class GroupReportlet extends AbstractReportlet<GroupReportletConf> {\n+public class GroupReportlet extends AbstractReportlet {\n \n     private static final int PAGE_SIZE = 10;\n \n@@ -56,6 +57,8 @@ public class GroupReportlet extends AbstractReportlet<GroupReportletConf> {\n     @Autowired\n     private GroupDataBinder groupDataBinder;\n \n+    private GroupReportletConf conf;\n+\n     private List<Group> getPagedGroups(final int page) {\n         List<Group> result;\n \n@@ -296,7 +299,13 @@ private void doExtractConf(final ContentHandler handler) throws SAXException {\n     }\n \n     @Override\n-    protected void doExtract(final ContentHandler handler) throws SAXException {\n+    protected void doExtract(final ReportletConf conf, final ContentHandler handler) throws SAXException {\n+        if (conf instanceof GroupReportletConf) {\n+            this.conf = GroupReportletConf.class.cast(conf);\n+        } else {\n+            throw new ReportException(new IllegalArgumentException(\"Invalid configuration provided\"));\n+        }\n+\n         doExtractConf(handler);\n         for (int i = 1; i <= (count() / PAGE_SIZE) + 1; i++) {\n             doExtract(handler, getPagedGroups(i));"},{"sha":"d7905682d5f3df64e0fc5757fec71c79f2b4a092","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/ReportJobDelegate.java","status":"modified","additions":50,"deletions":13,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJobDelegate.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -20,7 +20,10 @@\n \n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n+import java.lang.reflect.Modifier;\n import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.zip.Deflater;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n@@ -30,10 +33,10 @@\n import javax.xml.transform.sax.TransformerHandler;\n import javax.xml.transform.stream.StreamResult;\n import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n-import org.apache.syncope.core.logic.ReportLogic;\n import org.apache.syncope.core.misc.ExceptionUtils2;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n@@ -45,16 +48,46 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n+import org.springframework.core.type.filter.AssignableTypeFilter;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.ClassUtils;\n import org.xml.sax.helpers.AttributesImpl;\n \n @Component\n public class ReportJobDelegate {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ReportJobDelegate.class);\n \n+    private static final Map<Class<? extends ReportletConf>, Class<Reportlet>> REPORTLET_CLASSES = new HashMap<>();\n+\n+    static {\n+        initReportletClasses();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static void initReportletClasses() {\n+        ClassPathScanningCandidateComponentProvider scanner =\n+                new ClassPathScanningCandidateComponentProvider(false);\n+        scanner.addIncludeFilter(new AssignableTypeFilter(Reportlet.class));\n+\n+        for (BeanDefinition bd : scanner.findCandidateComponents(StringUtils.EMPTY)) {\n+            Class<?> clazz = ClassUtils.resolveClassName(\n+                    bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n+            boolean isAbstract = Modifier.isAbstract(clazz.getModifiers());\n+\n+            if (Reportlet.class.isAssignableFrom(clazz) && !isAbstract) {\n+                ReportletConfClass annotation = clazz.getAnnotation(ReportletConfClass.class);\n+                if (annotation != null) {\n+                    REPORTLET_CLASSES.put(annotation.value(), (Class<Reportlet>) clazz);\n+                }\n+            }\n+        }\n+    }\n+\n     /**\n      * Report DAO.\n      */\n@@ -70,9 +103,6 @@ public class ReportJobDelegate {\n     @Autowired\n     private EntityFactory entityFactory;\n \n-    @Autowired\n-    private ReportLogic dataBinder;\n-\n     @Transactional\n     public void execute(final Long reportKey) throws JobExecutionException {\n         Report report = reportDAO.find(reportKey);\n@@ -126,18 +156,25 @@ public void execute(final Long reportKey) throws JobExecutionException {\n \n             // iterate over reportlet instances defined for this report\n             for (ReportletConf reportletConf : report.getReportletConfs()) {\n-                Class<Reportlet> reportletClass =\n-                        dataBinder.findReportletClassHavingConfClass(reportletConf.getClass());\n-                if (reportletClass != null) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    Reportlet<ReportletConf> autowired =\n-                            (Reportlet<ReportletConf>) ApplicationContextProvider.getBeanFactory().\n-                            createBean(reportletClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-                    autowired.setConf(reportletConf);\n+                Class<Reportlet> reportletClass = REPORTLET_CLASSES.get(reportletConf.getClass());\n+                if (reportletClass == null) {\n+                    LOG.warn(\"Could not find matching reportlet for {}\", reportletConf.getClass());\n+                } else {\n+                    // fetch (or create) reportlet\n+                    Reportlet reportlet;\n+                    if (ApplicationContextProvider.getBeanFactory().containsSingleton(reportletClass.getName())) {\n+                        reportlet = (Reportlet) ApplicationContextProvider.getBeanFactory().\n+                                getSingleton(reportletClass.getName());\n+                    } else {\n+                        reportlet = (Reportlet) ApplicationContextProvider.getBeanFactory().\n+                                createBean(reportletClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+                        ApplicationContextProvider.getBeanFactory().\n+                                registerSingleton(reportletClass.getName(), reportlet);\n+                    }\n \n                     // invoke reportlet\n                     try {\n-                        autowired.extract(handler);\n+                        reportlet.extract(reportletConf, handler);\n                     } catch (Exception e) {\n                         execution.setStatus(ReportExecStatus.FAILURE);\n "},{"sha":"66d00c4be3b4dca76b054f8e592a3cda6ae9d502","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/Reportlet.java","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportlet.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -25,22 +25,16 @@\n /**\n  * Interface for all elements that can be embedded in a report.\n  *\n- * @see org.apache.syncope.core.persistence.beans.Report\n+ * @see org.apache.syncope.core.persistence.api.entity.Report\n  */\n-public interface Reportlet<T extends ReportletConf> {\n-\n-    /**\n-     * Set this reportlet configuration.\n-     *\n-     * @param conf configuration\n-     */\n-    void setConf(T conf);\n+public interface Reportlet {\n \n     /**\n      * Actual data extraction for reporting.\n      *\n+     * @param conf configuration\n      * @param handler SAX content handler for streaming result\n      * @throws SAXException if there is any problem in SAX handling\n      */\n-    void extract(ContentHandler handler) throws SAXException;\n+    void extract(ReportletConf conf, ContentHandler handler) throws SAXException;\n }"},{"sha":"963d4843293a16b6ec303f52702a53a4a2f27c17","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/StaticReportlet.java","status":"modified","additions":23,"deletions":15,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FStaticReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FStaticReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FStaticReportlet.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.logic.report;\n \n+import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.report.StaticReportletConf;\n import org.apache.syncope.core.misc.DataFormat;\n import org.springframework.util.StringUtils;\n@@ -26,10 +27,11 @@\n import org.xml.sax.helpers.AttributesImpl;\n \n @ReportletConfClass(StaticReportletConf.class)\n-public class StaticReportlet extends AbstractReportlet<StaticReportletConf> {\n+public class StaticReportlet extends AbstractReportlet {\n \n-    private void doExtractConf(final ContentHandler handler) throws SAXException {\n+    private StaticReportletConf conf;\n \n+    private void doExtractConf(final ContentHandler handler) throws SAXException {\n         AttributesImpl atts = new AttributesImpl();\n         handler.startElement(\"\", \"\", \"configurations\", null);\n         handler.startElement(\"\", \"\", \"staticAttributes\", atts);\n@@ -67,46 +69,52 @@ private void doExtractConf(final ContentHandler handler) throws SAXException {\n     }\n \n     @Override\n-    public void doExtract(final ContentHandler handler) throws SAXException {\n+    protected void doExtract(final ReportletConf conf, final ContentHandler handler) throws SAXException {\n+        if (conf instanceof StaticReportletConf) {\n+            this.conf = StaticReportletConf.class.cast(conf);\n+        } else {\n+            throw new ReportException(new IllegalArgumentException(\"Invalid configuration provided\"));\n+        }\n+\n         doExtractConf(handler);\n \n-        if (StringUtils.hasText(conf.getStringField())) {\n+        if (StringUtils.hasText(this.conf.getStringField())) {\n             handler.startElement(\"\", \"\", \"string\", null);\n-            handler.characters(conf.getStringField().toCharArray(), 0, conf.getStringField().length());\n+            handler.characters(this.conf.getStringField().toCharArray(), 0, this.conf.getStringField().length());\n             handler.endElement(\"\", \"\", \"string\");\n         }\n \n-        if (conf.getLongField() != null) {\n+        if (this.conf.getLongField() != null) {\n             handler.startElement(\"\", \"\", \"long\", null);\n-            String printed = String.valueOf(conf.getLongField());\n+            String printed = String.valueOf(this.conf.getLongField());\n             handler.characters(printed.toCharArray(), 0, printed.length());\n             handler.endElement(\"\", \"\", \"long\");\n         }\n \n-        if (conf.getDoubleField() != null) {\n+        if (this.conf.getDoubleField() != null) {\n             handler.startElement(\"\", \"\", \"double\", null);\n-            String printed = String.valueOf(conf.getDoubleField());\n+            String printed = String.valueOf(this.conf.getDoubleField());\n             handler.characters(printed.toCharArray(), 0, printed.length());\n             handler.endElement(\"\", \"\", \"double\");\n         }\n \n-        if (conf.getDateField() != null) {\n+        if (this.conf.getDateField() != null) {\n             handler.startElement(\"\", \"\", \"date\", null);\n-            String printed = DataFormat.format(conf.getDateField());\n+            String printed = DataFormat.format(this.conf.getDateField());\n             handler.characters(printed.toCharArray(), 0, printed.length());\n             handler.endElement(\"\", \"\", \"date\");\n         }\n \n-        if (conf.getTraceLevel() != null) {\n+        if (this.conf.getTraceLevel() != null) {\n             handler.startElement(\"\", \"\", \"enum\", null);\n-            String printed = conf.getTraceLevel().name();\n+            String printed = this.conf.getTraceLevel().name();\n             handler.characters(printed.toCharArray(), 0, printed.length());\n             handler.endElement(\"\", \"\", \"enum\");\n         }\n \n-        if (conf.getListField() != null && !conf.getListField().isEmpty()) {\n+        if (this.conf.getListField() != null && !this.conf.getListField().isEmpty()) {\n             handler.startElement(\"\", \"\", \"list\", null);\n-            for (String item : conf.getListField()) {\n+            for (String item : this.conf.getListField()) {\n                 if (StringUtils.hasText(item)) {\n                     handler.startElement(\"\", \"\", \"string\", null);\n                     handler.characters(item.toCharArray(), 0, item.length());"},{"sha":"44ae0e00186b61a837a3b4a363a8b5f3d84a6577","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/UserReportlet.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -24,6 +24,7 @@\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n import org.apache.syncope.common.lib.report.UserReportletConf.Feature;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -49,7 +50,7 @@\n import org.xml.sax.helpers.AttributesImpl;\n \n @ReportletConfClass(UserReportletConf.class)\n-public class UserReportlet extends AbstractReportlet<UserReportletConf> {\n+public class UserReportlet extends AbstractReportlet {\n \n     private static final int PAGE_SIZE = 10;\n \n@@ -68,6 +69,8 @@ public class UserReportlet extends AbstractReportlet<UserReportletConf> {\n     @Autowired\n     private AnyObjectDataBinder anyObjectDataBinder;\n \n+    private UserReportletConf conf;\n+\n     private List<User> getPagedUsers(final int page) {\n         List<User> result;\n \n@@ -370,7 +373,13 @@ private void doExtractConf(final ContentHandler handler) throws SAXException {\n     }\n \n     @Override\n-    protected void doExtract(final ContentHandler handler) throws SAXException {\n+    protected void doExtract(final ReportletConf conf, final ContentHandler handler) throws SAXException {\n+        if (conf instanceof UserReportletConf) {\n+            this.conf = UserReportletConf.class.cast(conf);\n+        } else {\n+            throw new ReportException(new IllegalArgumentException(\"Invalid configuration provided\"));\n+        }\n+\n         doExtractConf(handler);\n         for (int i = 1; i <= (count() / PAGE_SIZE) + 1; i++) {\n             doExtract(handler, getPagedUsers(i));"},{"sha":"5ab5f44df4a8e9d688c37744af1b9efd3ba69d1f","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/ConnObjectUtils.java","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -18,8 +18,7 @@\n  */\n package org.apache.syncope.core.misc;\n \n-import org.apache.syncope.core.misc.policy.InvalidPasswordPolicySpecException;\n-import org.apache.syncope.core.misc.security.PasswordGenerator;\n+import org.apache.syncope.core.misc.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.misc.security.SecureRandomUtils;\n import java.util.ArrayList;\n import java.util.Collection;\n@@ -30,6 +29,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.mod.AnyMod;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -41,7 +41,6 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -57,6 +56,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.misc.security.Encryptor;\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n+import org.apache.syncope.core.misc.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -117,32 +117,28 @@ public <T extends AnyTO> T getAnyTO(\n         if (anyTO instanceof UserTO && StringUtils.isBlank(((UserTO) anyTO).getPassword())) {\n             final UserTO userTO = (UserTO) anyTO;\n \n-            List<PasswordPolicySpec> ppSpecs = new ArrayList<>();\n+            List<PasswordRuleConf> ruleConfs = new ArrayList<>();\n \n             Realm realm = realmDAO.find(userTO.getRealm());\n             if (realm != null) {\n                 for (Realm ancestor : realmDAO.findAncestors(realm)) {\n-                    if (ancestor.getPasswordPolicy() != null\n-                            && ancestor.getPasswordPolicy().getSpecification() != null) {\n-\n-                        ppSpecs.add(ancestor.getPasswordPolicy().getSpecification());\n+                    if (ancestor.getPasswordPolicy() != null) {\n+                        ruleConfs.addAll(ancestor.getPasswordPolicy().getRuleConfs());\n                     }\n                 }\n             }\n \n             for (String resName : userTO.getResources()) {\n                 ExternalResource resource = resourceDAO.find(resName);\n-                if (resource != null && resource.getPasswordPolicy() != null\n-                        && resource.getPasswordPolicy().getSpecification() != null) {\n-\n-                    ppSpecs.add(resource.getPasswordPolicy().getSpecification());\n+                if (resource != null && resource.getPasswordPolicy() != null) {\n+                    ruleConfs.addAll(resource.getPasswordPolicy().getRuleConfs());\n                 }\n             }\n \n             String password;\n             try {\n-                password = pwdGen.generate(ppSpecs);\n-            } catch (InvalidPasswordPolicySpecException e) {\n+                password = pwdGen.generate(ruleConfs);\n+            } catch (InvalidPasswordRuleConf e) {\n                 LOG.error(\"Could not generate policy-compliant random password for {}\", userTO, e);\n \n                 password = SecureRandomUtils.generateRandomPassword(16);"},{"sha":"5cb419daf6c08bc3bbaabaccff0b8c8e5f5934c3","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/MappingUtils.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -18,8 +18,7 @@\n  */\n package org.apache.syncope.core.misc;\n \n-import org.apache.syncope.core.misc.policy.InvalidPasswordPolicySpecException;\n-import org.apache.syncope.core.misc.security.PasswordGenerator;\n+import org.apache.syncope.core.misc.policy.InvalidPasswordRuleConf;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -58,6 +57,7 @@\n import org.apache.syncope.core.misc.security.Encryptor;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n+import org.apache.syncope.core.misc.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -329,7 +329,7 @@ private static Pair<String, Attribute> prepareAttr(\n                     } else if (provision.getResource().isRandomPwdIfNotProvided()) {\n                         try {\n                             passwordAttrValue = passwordGenerator.generate(user);\n-                        } catch (InvalidPasswordPolicySpecException e) {\n+                        } catch (InvalidPasswordRuleConf e) {\n                             LOG.error(\"Could not generate policy-compliant random password for {}\", user, e);\n                         }\n                     }"},{"sha":"8b7a5479a56cdfe95766155f4e3a8ce4394313ad","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/AccountPolicyEnforcer.java","status":"removed","additions":0,"deletions":85,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,85 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.misc.policy;\n-\n-import java.util.regex.Pattern;\n-import org.apache.syncope.common.lib.types.AccountPolicySpec;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class AccountPolicyEnforcer {\n-\n-    private static final Pattern DEFAULT_PATTERN = Pattern.compile(\"[a-zA-Z0-9-_@. ]+\");\n-\n-    public boolean enforce(final AccountPolicySpec policy, final User user) {\n-        if (user.getUsername() == null) {\n-            throw new AccountPolicyException(\"Invalid account\");\n-        }\n-\n-        // check min length\n-        if (policy.getMinLength() > 0 && policy.getMinLength() > user.getUsername().length()) {\n-            throw new AccountPolicyException(\"Username too short\");\n-        }\n-\n-        // check max length\n-        if (policy.getMaxLength() > 0 && policy.getMaxLength() < user.getUsername().length()) {\n-            throw new AccountPolicyException(\"Username too long\");\n-        }\n-\n-        // check words not permitted\n-        for (String word : policy.getWordsNotPermitted()) {\n-            if (user.getUsername().contains(word)) {\n-                throw new AccountPolicyException(\"Used word(s) not permitted\");\n-            }\n-        }\n-\n-        // check case\n-        if (policy.isAllUpperCase() && !user.getUsername().equals(user.getUsername().toUpperCase())) {\n-            throw new AccountPolicyException(\"No lowercase characters permitted\");\n-        }\n-        if (policy.isAllLowerCase() && !user.getUsername().equals(user.getUsername().toLowerCase())) {\n-            throw new AccountPolicyException(\"No uppercase characters permitted\");\n-        }\n-\n-        // check pattern\n-        Pattern pattern = (policy.getPattern() == null) ? DEFAULT_PATTERN : Pattern.compile(policy.getPattern());\n-        if (!pattern.matcher(user.getUsername()).matches()) {\n-            throw new AccountPolicyException(\"Username does not match pattern\");\n-        }\n-\n-        // check prefix\n-        for (String prefix : policy.getPrefixesNotPermitted()) {\n-            if (user.getUsername().startsWith(prefix)) {\n-                throw new AccountPolicyException(\"Prefix not permitted\");\n-            }\n-        }\n-\n-        // check suffix\n-        for (String suffix : policy.getSuffixesNotPermitted()) {\n-            if (user.getUsername().endsWith(suffix)) {\n-                throw new AccountPolicyException(\"Suffix not permitted\");\n-            }\n-        }\n-\n-        // check for subsequent failed logins\n-        return (user.getFailedLogins() != null && policy.getMaxAuthenticationAttempts() > 0\n-                && user.getFailedLogins() > policy.getMaxAuthenticationAttempts() && !user.isSuspended());\n-    }\n-}"},{"sha":"7d5095102b2125424a2e34ee31ab812edf686953","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/InvalidPasswordPolicySpecException.java","status":"removed","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FInvalidPasswordPolicySpecException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FInvalidPasswordPolicySpecException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FInvalidPasswordPolicySpecException.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,37 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.misc.policy;\n-\n-/**\n- * Raise when the merge of two or more PasswordPolicySpec leds to incompatible condition.\n- *\n- * @see org.apache.syncope.common.lib.types.PasswordPolicySpec\n- */\n-public class InvalidPasswordPolicySpecException extends Exception {\n-\n-    private static final long serialVersionUID = 4810651743226663580L;\n-\n-    public InvalidPasswordPolicySpecException(final String msg) {\n-        super(msg);\n-    }\n-\n-    public InvalidPasswordPolicySpecException(final String msg, final Exception e) {\n-        super(msg, e);\n-    }\n-}"},{"sha":"c2af367454013170977df8f2f8557dce5aeca164","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/PasswordPolicyEnforcer.java","status":"removed","additions":0,"deletions":193,"changes":193,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPasswordPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPasswordPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPasswordPolicyEnforcer.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,193 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.misc.policy;\n-\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class PasswordPolicyEnforcer {\n-\n-    public boolean enforce(final PasswordPolicySpec policy, final User user) {\n-        String clearPassword = user.getClearPassword();\n-        String password = user.getPassword();\n-\n-        if (password == null && !policy.isAllowNullPassword()) {\n-            throw new PasswordPolicyException(\"Password mandatory\");\n-        }\n-        \n-        if (password != null && clearPassword != null) {\n-            // check length\n-            if (policy.getMinLength() > 0 && policy.getMinLength() > clearPassword.length()) {\n-                throw new PasswordPolicyException(\"Password too short\");\n-            }\n-\n-            if (policy.getMaxLength() > 0 && policy.getMaxLength() < clearPassword.length()) {\n-                throw new PasswordPolicyException(\"Password too long\");\n-            }\n-\n-            // check words not permitted\n-            for (String word : policy.getWordsNotPermitted()) {\n-                if (clearPassword.contains(word)) {\n-                    throw new PasswordPolicyException(\"Used word(s) not permitted\");\n-                }\n-            }\n-\n-            // check digits occurrence\n-            if (policy.isDigitRequired() && !checkForDigit(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must contain digit(s)\");\n-            }\n-\n-            // check lowercase alphabetic characters occurrence\n-            if (policy.isLowercaseRequired() && !checkForLowercase(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must contain lowercase alphabetic character(s)\");\n-            }\n-\n-            // check uppercase alphabetic characters occurrence\n-            if (policy.isUppercaseRequired() && !checkForUppercase(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must contain uppercase alphabetic character(s)\");\n-            }\n-\n-            // check prefix\n-            for (String prefix : policy.getPrefixesNotPermitted()) {\n-                if (clearPassword.startsWith(prefix)) {\n-                    throw new PasswordPolicyException(\"Prefix not permitted\");\n-                }\n-            }\n-\n-            // check suffix\n-            for (String suffix : policy.getSuffixesNotPermitted()) {\n-                if (clearPassword.endsWith(suffix)) {\n-                    throw new PasswordPolicyException(\"Suffix not permitted\");\n-                }\n-            }\n-\n-            // check digit first occurrence\n-            if (policy.isMustStartWithDigit() && !checkForFirstDigit(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must start with a digit\");\n-            }\n-\n-            if (policy.isMustntStartWithDigit() && checkForFirstDigit(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password mustn't start with a digit\");\n-            }\n-\n-            // check digit last occurrence\n-            if (policy.isMustEndWithDigit() && !checkForLastDigit(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must end with a digit\");\n-            }\n-\n-            if (policy.isMustntEndWithDigit() && checkForLastDigit(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password mustn't end with a digit\");\n-            }\n-\n-            // check alphanumeric characters occurence\n-            if (policy.isAlphanumericRequired() && !checkForAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must contain alphanumeric character(s)\");\n-            }\n-\n-            // check non alphanumeric characters occurence\n-            if (policy.isNonAlphanumericRequired() && !checkForNonAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must contain non-alphanumeric character(s)\");\n-            }\n-\n-            // check alphanumeric character first occurrence\n-            if (policy.isMustStartWithAlpha() && !checkForFirstAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must start with an alphanumeric character\");\n-            }\n-\n-            if (policy.isMustntStartWithAlpha() && checkForFirstAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password mustn't start with an alphanumeric character\");\n-            }\n-\n-            // check alphanumeric character last occurrence\n-            if (policy.isMustEndWithAlpha() && !checkForLastAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must end with an alphanumeric character\");\n-            }\n-\n-            if (policy.isMustntEndWithAlpha() && checkForLastAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password mustn't end with an alphanumeric character\");\n-            }\n-\n-            // check non alphanumeric character first occurrence\n-            if (policy.isMustStartWithNonAlpha() && !checkForFirstNonAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must start with a non-alphanumeric character\");\n-            }\n-\n-            if (policy.isMustntStartWithNonAlpha() && checkForFirstNonAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password mustn't start with a non-alphanumeric character\");\n-            }\n-\n-            // check non alphanumeric character last occurrence\n-            if (policy.isMustEndWithNonAlpha() && !checkForLastNonAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must end with a non-alphanumeric character\");\n-            }\n-\n-            if (policy.isMustntEndWithNonAlpha() && checkForLastNonAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password mustn't end with a non-alphanumeric character\");\n-            }\n-        }\n-\n-        return false;\n-    }\n-\n-    private boolean checkForDigit(final String str) {\n-        return PolicyPattern.DIGIT.matcher(str).matches();\n-    }\n-\n-    private boolean checkForLowercase(final String str) {\n-        return PolicyPattern.ALPHA_LOWERCASE.matcher(str).matches();\n-    }\n-\n-    private boolean checkForUppercase(final String str) {\n-        return PolicyPattern.ALPHA_UPPERCASE.matcher(str).matches();\n-    }\n-\n-    private boolean checkForFirstDigit(final String str) {\n-        return PolicyPattern.FIRST_DIGIT.matcher(str).matches();\n-    }\n-\n-    private boolean checkForLastDigit(final String str) {\n-        return PolicyPattern.LAST_DIGIT.matcher(str).matches();\n-    }\n-\n-    private boolean checkForAlphanumeric(final String str) {\n-        return PolicyPattern.ALPHANUMERIC.matcher(str).matches();\n-    }\n-\n-    private boolean checkForFirstAlphanumeric(final String str) {\n-        return PolicyPattern.FIRST_ALPHANUMERIC.matcher(str).matches();\n-    }\n-\n-    private boolean checkForLastAlphanumeric(final String str) {\n-        return PolicyPattern.LAST_ALPHANUMERIC.matcher(str).matches();\n-    }\n-\n-    private boolean checkForNonAlphanumeric(final String str) {\n-        return PolicyPattern.NON_ALPHANUMERIC.matcher(str).matches();\n-    }\n-\n-    private boolean checkForFirstNonAlphanumeric(final String str) {\n-        return PolicyPattern.FIRST_NON_ALPHANUMERIC.matcher(str).matches();\n-    }\n-\n-    private boolean checkForLastNonAlphanumeric(final String str) {\n-        return PolicyPattern.LAST_NON_ALPHANUMERIC.matcher(str).matches();\n-    }\n-}"},{"sha":"48cc981c4a5452376d9bce87d9753d85e8c76ef5","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/PolicyEvaluator.java","status":"removed","additions":0,"deletions":100,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEvaluator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEvaluator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEvaluator.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,100 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.misc.policy;\n-\n-import java.util.List;\n-import org.apache.syncope.common.lib.types.AbstractPolicySpec;\n-import org.apache.syncope.common.lib.types.AccountPolicySpec;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.BeanUtils;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class PolicyEvaluator {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(PolicyEvaluator.class);\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractPolicySpec> T evaluate(final Policy policy, final Any<?, ?, ?> any) {\n-        T result;\n-        switch (policy.getType()) {\n-            case PASSWORD:\n-                PasswordPolicySpec ppSpec = ((PasswordPolicy) policy).getSpecification();\n-                PasswordPolicySpec evaluatedPPSpec = new PasswordPolicySpec();\n-\n-                BeanUtils.copyProperties(ppSpec, evaluatedPPSpec, new String[] { \"schemasNotPermitted\" });\n-\n-                for (String schema : ppSpec.getSchemasNotPermitted()) {\n-                    PlainAttr<?> attr = any.getPlainAttr(schema);\n-                    if (attr != null) {\n-                        List<String> values = attr.getValuesAsStrings();\n-                        if (values != null && !values.isEmpty()) {\n-                            evaluatedPPSpec.getWordsNotPermitted().add(values.get(0));\n-                        }\n-                    }\n-                }\n-\n-                // Password history verification and update\n-                if (!(any instanceof User)) {\n-                    LOG.error(\"Cannot check previous passwords. instance is not user object: {}\",\n-                            any.getClass().getName());\n-                    result = (T) evaluatedPPSpec;\n-                    break;\n-                }\n-                User user = (User) any;\n-                if (user.verifyPasswordHistory(user.getClearPassword(), ppSpec.getHistoryLength())) {\n-                    evaluatedPPSpec.getWordsNotPermitted().add(user.getClearPassword());\n-                }\n-                result = (T) evaluatedPPSpec;\n-                break;\n-\n-            case ACCOUNT:\n-                AccountPolicySpec spec = ((AccountPolicy) policy).getSpecification();\n-                AccountPolicySpec accountPolicy = new AccountPolicySpec();\n-\n-                BeanUtils.copyProperties(spec, accountPolicy, new String[] { \"schemasNotPermitted\" });\n-\n-                for (String schema : spec.getSchemasNotPermitted()) {\n-                    PlainAttr<?> attr = any.getPlainAttr(schema);\n-                    if (attr != null) {\n-                        List<String> values = attr.getValuesAsStrings();\n-                        if (values != null && !values.isEmpty()) {\n-                            accountPolicy.getWordsNotPermitted().add(values.get(0));\n-                        }\n-                    }\n-                }\n-\n-                result = (T) accountPolicy;\n-                break;\n-\n-            default:\n-                result = null;\n-        }\n-\n-        return result;\n-    }\n-}"},{"sha":"9652f73c44bfab5b68122b48d1c4e194392d42d8","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/DefaultPasswordGenerator.java","status":"modified","additions":50,"deletions":46,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FDefaultPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FDefaultPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FDefaultPasswordGenerator.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -88,81 +88,85 @@ public String generate(final List<PasswordRuleConf> ruleConfs) throws InvalidPas\n     }\n \n     private DefaultPasswordRuleConf merge(final List<DefaultPasswordRuleConf> defaultRuleConfs) {\n-        DefaultPasswordRuleConf fpps = new DefaultPasswordRuleConf();\n-        fpps.setMinLength(VERY_MIN_LENGTH);\n-        fpps.setMaxLength(VERY_MAX_LENGTH);\n+        DefaultPasswordRuleConf result = new DefaultPasswordRuleConf();\n+        result.setMinLength(VERY_MIN_LENGTH);\n+        result.setMaxLength(VERY_MAX_LENGTH);\n \n         for (DefaultPasswordRuleConf ruleConf : defaultRuleConfs) {\n-            if (ruleConf.getMinLength() > fpps.getMinLength()) {\n-                fpps.setMinLength(ruleConf.getMinLength());\n+            if (ruleConf.getMinLength() > result.getMinLength()) {\n+                result.setMinLength(ruleConf.getMinLength());\n             }\n \n-            if ((ruleConf.getMaxLength() != 0) && ((ruleConf.getMaxLength() < fpps.getMaxLength()))) {\n-                fpps.setMaxLength(ruleConf.getMaxLength());\n+            if ((ruleConf.getMaxLength() != 0) && ((ruleConf.getMaxLength() < result.getMaxLength()))) {\n+                result.setMaxLength(ruleConf.getMaxLength());\n             }\n-            fpps.getPrefixesNotPermitted().addAll(ruleConf.getPrefixesNotPermitted());\n-            fpps.getSuffixesNotPermitted().addAll(ruleConf.getSuffixesNotPermitted());\n+            result.getPrefixesNotPermitted().addAll(ruleConf.getPrefixesNotPermitted());\n+            result.getSuffixesNotPermitted().addAll(ruleConf.getSuffixesNotPermitted());\n \n-            if (!fpps.isNonAlphanumericRequired()) {\n-                fpps.setNonAlphanumericRequired(ruleConf.isNonAlphanumericRequired());\n+            if (!result.isNonAlphanumericRequired()) {\n+                result.setNonAlphanumericRequired(ruleConf.isNonAlphanumericRequired());\n             }\n \n-            if (!fpps.isAlphanumericRequired()) {\n-                fpps.setAlphanumericRequired(ruleConf.isAlphanumericRequired());\n+            if (!result.isAlphanumericRequired()) {\n+                result.setAlphanumericRequired(ruleConf.isAlphanumericRequired());\n             }\n-            if (!fpps.isDigitRequired()) {\n-                fpps.setDigitRequired(ruleConf.isDigitRequired());\n+            if (!result.isDigitRequired()) {\n+                result.setDigitRequired(ruleConf.isDigitRequired());\n             }\n \n-            if (!fpps.isLowercaseRequired()) {\n-                fpps.setLowercaseRequired(ruleConf.isLowercaseRequired());\n+            if (!result.isLowercaseRequired()) {\n+                result.setLowercaseRequired(ruleConf.isLowercaseRequired());\n             }\n-            if (!fpps.isUppercaseRequired()) {\n-                fpps.setUppercaseRequired(ruleConf.isUppercaseRequired());\n+            if (!result.isUppercaseRequired()) {\n+                result.setUppercaseRequired(ruleConf.isUppercaseRequired());\n             }\n-            if (!fpps.isMustStartWithDigit()) {\n-                fpps.setMustStartWithDigit(ruleConf.isMustStartWithDigit());\n+            if (!result.isMustStartWithDigit()) {\n+                result.setMustStartWithDigit(ruleConf.isMustStartWithDigit());\n             }\n-            if (!fpps.isMustntStartWithDigit()) {\n-                fpps.setMustntStartWithDigit(ruleConf.isMustntStartWithDigit());\n+            if (!result.isMustntStartWithDigit()) {\n+                result.setMustntStartWithDigit(ruleConf.isMustntStartWithDigit());\n             }\n-            if (!fpps.isMustEndWithDigit()) {\n-                fpps.setMustEndWithDigit(ruleConf.isMustEndWithDigit());\n+            if (!result.isMustEndWithDigit()) {\n+                result.setMustEndWithDigit(ruleConf.isMustEndWithDigit());\n             }\n-            if (fpps.isMustntEndWithDigit()) {\n-                fpps.setMustntEndWithDigit(ruleConf.isMustntEndWithDigit());\n+            if (result.isMustntEndWithDigit()) {\n+                result.setMustntEndWithDigit(ruleConf.isMustntEndWithDigit());\n             }\n-            if (!fpps.isMustStartWithAlpha()) {\n-                fpps.setMustStartWithAlpha(ruleConf.isMustStartWithAlpha());\n+            if (!result.isMustStartWithAlpha()) {\n+                result.setMustStartWithAlpha(ruleConf.isMustStartWithAlpha());\n             }\n-            if (!fpps.isMustntStartWithAlpha()) {\n-                fpps.setMustntStartWithAlpha(ruleConf.isMustntStartWithAlpha());\n+            if (!result.isMustntStartWithAlpha()) {\n+                result.setMustntStartWithAlpha(ruleConf.isMustntStartWithAlpha());\n             }\n-            if (!fpps.isMustStartWithNonAlpha()) {\n-                fpps.setMustStartWithNonAlpha(ruleConf.isMustStartWithNonAlpha());\n+            if (!result.isMustStartWithNonAlpha()) {\n+                result.setMustStartWithNonAlpha(ruleConf.isMustStartWithNonAlpha());\n             }\n-            if (!fpps.isMustntStartWithNonAlpha()) {\n-                fpps.setMustntStartWithNonAlpha(ruleConf.isMustntStartWithNonAlpha());\n+            if (!result.isMustntStartWithNonAlpha()) {\n+                result.setMustntStartWithNonAlpha(ruleConf.isMustntStartWithNonAlpha());\n             }\n-            if (!fpps.isMustEndWithNonAlpha()) {\n-                fpps.setMustEndWithNonAlpha(ruleConf.isMustEndWithNonAlpha());\n+            if (!result.isMustEndWithNonAlpha()) {\n+                result.setMustEndWithNonAlpha(ruleConf.isMustEndWithNonAlpha());\n             }\n-            if (!fpps.isMustntEndWithNonAlpha()) {\n-                fpps.setMustntEndWithNonAlpha(ruleConf.isMustntEndWithNonAlpha());\n+            if (!result.isMustntEndWithNonAlpha()) {\n+                result.setMustntEndWithNonAlpha(ruleConf.isMustntEndWithNonAlpha());\n             }\n-            if (!fpps.isMustEndWithAlpha()) {\n-                fpps.setMustEndWithAlpha(ruleConf.isMustEndWithAlpha());\n+            if (!result.isMustEndWithAlpha()) {\n+                result.setMustEndWithAlpha(ruleConf.isMustEndWithAlpha());\n             }\n-            if (!fpps.isMustntEndWithAlpha()) {\n-                fpps.setMustntEndWithAlpha(ruleConf.isMustntEndWithAlpha());\n+            if (!result.isMustntEndWithAlpha()) {\n+                result.setMustntEndWithAlpha(ruleConf.isMustntEndWithAlpha());\n+            }\n+            if (!result.isUsernameAllowed()) {\n+                result.setUsernameAllowed(ruleConf.isUsernameAllowed());\n             }\n         }\n \n-        if (fpps.getMinLength() == 0) {\n-            fpps.setMinLength(fpps.getMaxLength() < MIN_LENGTH_IF_ZERO ? fpps.getMaxLength() : MIN_LENGTH_IF_ZERO);\n+        if (result.getMinLength() == 0) {\n+            result.setMinLength(\n+                    result.getMaxLength() < MIN_LENGTH_IF_ZERO ? result.getMaxLength() : MIN_LENGTH_IF_ZERO);\n         }\n \n-        return fpps;\n+        return result;\n     }\n \n     private void check(final DefaultPasswordRuleConf defaultPasswordRuleConf)"},{"sha":"936dae56eb0f42d549bab77b203aec6ca0f9b12f","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/PasswordGenerator.java","status":"modified","additions":5,"deletions":305,"changes":310,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -18,315 +18,15 @@\n  */\n package org.apache.syncope.core.misc.security;\n \n-import java.util.ArrayList;\n import java.util.List;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.misc.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.misc.policy.InvalidPasswordPolicySpecException;\n-import org.apache.syncope.core.misc.policy.PolicyPattern;\n-import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-/**\n- * Generate random passwords according to given policies.\n- * When no minimum and / or maximum length are specified, default values are set.\n- *\n- * @see org.apache.syncope.core.persistence.api.entity.PasswordPolicy\n- */\n-@Component\n-public class PasswordGenerator {\n-\n-    private static final char[] SPECIAL_CHARS = { '!', '£', '%', '&', '(', ')', '?', '#', '$' };\n-\n-    private static final int VERY_MIN_LENGTH = 0;\n-\n-    private static final int VERY_MAX_LENGTH = 64;\n-\n-    private static final int MIN_LENGTH_IF_ZERO = 6;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private RealmDAO realmDAO;\n-\n-    public String generate(final List<PasswordPolicySpec> ppSpecs) throws InvalidPasswordPolicySpecException {\n-        PasswordPolicySpec policySpec = merge(ppSpecs);\n-\n-        check(policySpec);\n-\n-        return generate(policySpec);\n-    }\n-\n-    public String generate(final User user)\n-            throws InvalidPasswordPolicySpecException {\n-\n-        List<PasswordPolicySpec> ppSpecs = new ArrayList<>();\n-\n-        for (Realm ancestor : realmDAO.findAncestors(user.getRealm())) {\n-            if (ancestor.getPasswordPolicy() != null\n-                    && ancestor.getPasswordPolicy().getSpecification() != null) {\n-\n-                ppSpecs.add(ancestor.getPasswordPolicy().getSpecification());\n-            }\n-        }\n-\n-        for (ExternalResource resource : userDAO.findAllResources(user)) {\n-            if (resource.getPasswordPolicy() != null\n-                    && resource.getPasswordPolicy().getSpecification() != null) {\n-\n-                ppSpecs.add(resource.getPasswordPolicy().getSpecification());\n-            }\n-        }\n-\n-        PasswordPolicySpec policySpec = merge(ppSpecs);\n-        check(policySpec);\n-        return generate(policySpec);\n-    }\n-\n-    private PasswordPolicySpec merge(final List<PasswordPolicySpec> ppSpecs) {\n-        PasswordPolicySpec fpps = new PasswordPolicySpec();\n-        fpps.setMinLength(VERY_MIN_LENGTH);\n-        fpps.setMaxLength(VERY_MAX_LENGTH);\n-\n-        for (PasswordPolicySpec policySpec : ppSpecs) {\n-            if (policySpec.getMinLength() > fpps.getMinLength()) {\n-                fpps.setMinLength(policySpec.getMinLength());\n-            }\n-\n-            if ((policySpec.getMaxLength() != 0) && ((policySpec.getMaxLength() < fpps.getMaxLength()))) {\n-                fpps.setMaxLength(policySpec.getMaxLength());\n-            }\n-            fpps.getPrefixesNotPermitted().addAll(policySpec.getPrefixesNotPermitted());\n-            fpps.getSuffixesNotPermitted().addAll(policySpec.getSuffixesNotPermitted());\n-\n-            if (!fpps.isNonAlphanumericRequired()) {\n-                fpps.setNonAlphanumericRequired(policySpec.isNonAlphanumericRequired());\n-            }\n-\n-            if (!fpps.isAlphanumericRequired()) {\n-                fpps.setAlphanumericRequired(policySpec.isAlphanumericRequired());\n-            }\n-            if (!fpps.isDigitRequired()) {\n-                fpps.setDigitRequired(policySpec.isDigitRequired());\n-            }\n-\n-            if (!fpps.isLowercaseRequired()) {\n-                fpps.setLowercaseRequired(policySpec.isLowercaseRequired());\n-            }\n-            if (!fpps.isUppercaseRequired()) {\n-                fpps.setUppercaseRequired(policySpec.isUppercaseRequired());\n-            }\n-            if (!fpps.isMustStartWithDigit()) {\n-                fpps.setMustStartWithDigit(policySpec.isMustStartWithDigit());\n-            }\n-            if (!fpps.isMustntStartWithDigit()) {\n-                fpps.setMustntStartWithDigit(policySpec.isMustntStartWithDigit());\n-            }\n-            if (!fpps.isMustEndWithDigit()) {\n-                fpps.setMustEndWithDigit(policySpec.isMustEndWithDigit());\n-            }\n-            if (fpps.isMustntEndWithDigit()) {\n-                fpps.setMustntEndWithDigit(policySpec.isMustntEndWithDigit());\n-            }\n-            if (!fpps.isMustStartWithAlpha()) {\n-                fpps.setMustStartWithAlpha(policySpec.isMustStartWithAlpha());\n-            }\n-            if (!fpps.isMustntStartWithAlpha()) {\n-                fpps.setMustntStartWithAlpha(policySpec.isMustntStartWithAlpha());\n-            }\n-            if (!fpps.isMustStartWithNonAlpha()) {\n-                fpps.setMustStartWithNonAlpha(policySpec.isMustStartWithNonAlpha());\n-            }\n-            if (!fpps.isMustntStartWithNonAlpha()) {\n-                fpps.setMustntStartWithNonAlpha(policySpec.isMustntStartWithNonAlpha());\n-            }\n-            if (!fpps.isMustEndWithNonAlpha()) {\n-                fpps.setMustEndWithNonAlpha(policySpec.isMustEndWithNonAlpha());\n-            }\n-            if (!fpps.isMustntEndWithNonAlpha()) {\n-                fpps.setMustntEndWithNonAlpha(policySpec.isMustntEndWithNonAlpha());\n-            }\n-            if (!fpps.isMustEndWithAlpha()) {\n-                fpps.setMustEndWithAlpha(policySpec.isMustEndWithAlpha());\n-            }\n-            if (!fpps.isMustntEndWithAlpha()) {\n-                fpps.setMustntEndWithAlpha(policySpec.isMustntEndWithAlpha());\n-            }\n-        }\n-\n-        if (fpps.getMinLength() == 0) {\n-            fpps.setMinLength(fpps.getMaxLength() < MIN_LENGTH_IF_ZERO ? fpps.getMaxLength() : MIN_LENGTH_IF_ZERO);\n-        }\n-\n-        return fpps;\n-    }\n-\n-    private void check(final PasswordPolicySpec policySpec)\n-            throws InvalidPasswordPolicySpecException {\n-\n-        if (policySpec.isMustEndWithAlpha() && policySpec.isMustntEndWithAlpha()) {\n-            throw new InvalidPasswordPolicySpecException(\n-                    \"mustEndWithAlpha and mustntEndWithAlpha are both true\");\n-        }\n-        if (policySpec.isMustEndWithAlpha() && policySpec.isMustEndWithDigit()) {\n-            throw new InvalidPasswordPolicySpecException(\n-                    \"mustEndWithAlpha and mustEndWithDigit are both true\");\n-        }\n-        if (policySpec.isMustEndWithDigit() && policySpec.isMustntEndWithDigit()) {\n-            throw new InvalidPasswordPolicySpecException(\n-                    \"mustEndWithDigit and mustntEndWithDigit are both true\");\n-        }\n-        if (policySpec.isMustEndWithNonAlpha() && policySpec.isMustntEndWithNonAlpha()) {\n-            throw new InvalidPasswordPolicySpecException(\n-                    \"mustEndWithNonAlpha and mustntEndWithNonAlpha are both true\");\n-        }\n-        if (policySpec.isMustStartWithAlpha() && policySpec.isMustntStartWithAlpha()) {\n-            throw new InvalidPasswordPolicySpecException(\n-                    \"mustStartWithAlpha and mustntStartWithAlpha are both true\");\n-        }\n-        if (policySpec.isMustStartWithAlpha() && policySpec.isMustStartWithDigit()) {\n-            throw new InvalidPasswordPolicySpecException(\n-                    \"mustStartWithAlpha and mustStartWithDigit are both true\");\n-        }\n-        if (policySpec.isMustStartWithDigit() && policySpec.isMustntStartWithDigit()) {\n-            throw new InvalidPasswordPolicySpecException(\n-                    \"mustStartWithDigit and mustntStartWithDigit are both true\");\n-        }\n-        if (policySpec.isMustStartWithNonAlpha() && policySpec.isMustntStartWithNonAlpha()) {\n-            throw new InvalidPasswordPolicySpecException(\n-                    \"mustStartWithNonAlpha and mustntStartWithNonAlpha are both true\");\n-        }\n-        if (policySpec.getMinLength() > policySpec.getMaxLength()) {\n-            throw new InvalidPasswordPolicySpecException(\"Minimun length (\" + policySpec.getMinLength() + \")\"\n-                    + \"is greater than maximum length (\" + policySpec.getMaxLength() + \")\");\n-        }\n-    }\n-\n-    private String generate(final PasswordPolicySpec policySpec) {\n-        String[] generatedPassword = new String[policySpec.getMinLength()];\n-\n-        for (int i = 0; i < generatedPassword.length; i++) {\n-            generatedPassword[i] = StringUtils.EMPTY;\n-        }\n-\n-        checkStartChar(generatedPassword, policySpec);\n-\n-        checkEndChar(generatedPassword, policySpec);\n-\n-        checkRequired(generatedPassword, policySpec);\n-\n-        for (int firstEmptyChar = firstEmptyChar(generatedPassword);\n-                firstEmptyChar < generatedPassword.length - 1; firstEmptyChar++) {\n-\n-            generatedPassword[firstEmptyChar] = SecureRandomUtils.generateRandomLetter();\n-        }\n-\n-        checkPrefixAndSuffix(generatedPassword, policySpec);\n-\n-        return StringUtils.join(generatedPassword);\n-    }\n-\n-    private void checkStartChar(final String[] generatedPassword, final PasswordPolicySpec policySpec) {\n-        if (policySpec.isMustStartWithAlpha()) {\n-            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n-        }\n-        if (policySpec.isMustStartWithNonAlpha() || policySpec.isMustStartWithDigit()) {\n-            generatedPassword[0] = SecureRandomUtils.generateRandomNumber();\n-        }\n-        if (policySpec.isMustntStartWithAlpha()) {\n-            generatedPassword[0] = SecureRandomUtils.generateRandomNumber();\n-        }\n-        if (policySpec.isMustntStartWithDigit()) {\n-            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n-        }\n-        if (policySpec.isMustntStartWithNonAlpha()) {\n-            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n-        }\n-\n-        if (StringUtils.EMPTY.equals(generatedPassword[0])) {\n-            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n-        }\n-    }\n-\n-    private void checkEndChar(final String[] generatedPassword, final PasswordPolicySpec policySpec) {\n-        if (policySpec.isMustEndWithAlpha()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n-        }\n-        if (policySpec.isMustEndWithNonAlpha() || policySpec.isMustEndWithDigit()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtils.generateRandomNumber();\n-        }\n-\n-        if (policySpec.isMustntEndWithAlpha()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtils.generateRandomNumber();\n-        }\n-        if (policySpec.isMustntEndWithDigit()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n-        }\n-        if (policySpec.isMustntEndWithNonAlpha()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n-        }\n-\n-        if (StringUtils.EMPTY.equals(generatedPassword[policySpec.getMinLength() - 1])) {\n-            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n-        }\n-    }\n-\n-    private int firstEmptyChar(final String[] generatedPStrings) {\n-        int index = 0;\n-        while (!generatedPStrings[index].isEmpty()) {\n-            index++;\n-        }\n-        return index;\n-    }\n-\n-    private void checkRequired(final String[] generatedPassword, final PasswordPolicySpec policySpec) {\n-        if (policySpec.isDigitRequired()\n-                && !PolicyPattern.DIGIT.matcher(StringUtils.join(generatedPassword)).matches()) {\n-\n-            generatedPassword[firstEmptyChar(generatedPassword)] = SecureRandomUtils.generateRandomNumber();\n-        }\n-\n-        if (policySpec.isUppercaseRequired()\n-                && !PolicyPattern.ALPHA_UPPERCASE.matcher(StringUtils.join(generatedPassword)).matches()) {\n-\n-            generatedPassword[firstEmptyChar(generatedPassword)] =\n-                    SecureRandomUtils.generateRandomLetter().toUpperCase();\n-        }\n-\n-        if (policySpec.isLowercaseRequired()\n-                && !PolicyPattern.ALPHA_LOWERCASE.matcher(StringUtils.join(generatedPassword)).matches()) {\n-\n-            generatedPassword[firstEmptyChar(generatedPassword)] =\n-                    SecureRandomUtils.generateRandomLetter().toLowerCase();\n-        }\n-\n-        if (policySpec.isNonAlphanumericRequired()\n-                && !PolicyPattern.NON_ALPHANUMERIC.matcher(StringUtils.join(generatedPassword)).matches()) {\n \n-            generatedPassword[firstEmptyChar(generatedPassword)] =\n-                    SecureRandomUtils.generateRandomSpecialCharacter(SPECIAL_CHARS);\n-        }\n-    }\n+public interface PasswordGenerator {\n \n-    private void checkPrefixAndSuffix(final String[] generatedPassword, final PasswordPolicySpec policySpec) {\n-        for (String prefix : policySpec.getPrefixesNotPermitted()) {\n-            if (StringUtils.join(generatedPassword).startsWith(prefix)) {\n-                checkStartChar(generatedPassword, policySpec);\n-            }\n-        }\n+    String generate(User user) throws InvalidPasswordRuleConf;\n \n-        for (String suffix : policySpec.getSuffixesNotPermitted()) {\n-            if (StringUtils.join(generatedPassword).endsWith(suffix)) {\n-                checkEndChar(generatedPassword, policySpec);\n-            }\n-        }\n-    }\n+    String generate(List<PasswordRuleConf> ruleConfs) throws InvalidPasswordRuleConf;\n \n }"},{"sha":"73db51019e604e2c397c123bceda1f4b061161f8","filename":"core/misc/src/main/resources/security.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -29,3 +29,4 @@ digester.invertPositionOfPlainSaltInEncryptionResults=true\n digester.invertPositionOfSaltInMessageBeforeDigesting=true\n digester.useLenientSaltSizeCheck=true\n \n+passwordGenerator=org.apache.syncope.core.misc.security.DefaultPasswordGenerator"},{"sha":"711e2f3e47108965c791f33e3c83dd9be92f4daa","filename":"core/misc/src/main/resources/securityContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -32,6 +32,7 @@ under the License.\n     <constructor-arg value=\"${anonymousUser}\"/>\n   </bean>\n   \n+  <bean class=\"${passwordGenerator}\"/>\n   <bean class=\"org.apache.syncope.core.misc.spring.DefaultRolesPrefixPostProcessor\"/>\n   \n   <security:global-method-security pre-post-annotations=\"enabled\"/>"},{"sha":"536fa60065967978fc638fffacc670e8a46ac7bd","filename":"core/misc/src/test/java/org/apache/syncope/core/misc/security/PasswordGeneratorTest.java","status":"modified","additions":75,"deletions":71,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGeneratorTest.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -25,114 +25,118 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n-import org.apache.syncope.core.misc.policy.InvalidPasswordPolicySpecException;\n+import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.misc.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.misc.policy.PolicyPattern;\n import org.junit.Test;\n \n public class PasswordGeneratorTest {\n \n-    private final PasswordGenerator passwordGenerator = new PasswordGenerator();\n-\n-    private PasswordPolicySpec createBasePasswordPolicySpec() {\n-        PasswordPolicySpec basePasswordPolicySpec = new PasswordPolicySpec();\n-        basePasswordPolicySpec.setAlphanumericRequired(false);\n-        basePasswordPolicySpec.setDigitRequired(false);\n-        basePasswordPolicySpec.setLowercaseRequired(false);\n-        basePasswordPolicySpec.setMaxLength(1000);\n-        basePasswordPolicySpec.setMinLength(8);\n-        basePasswordPolicySpec.setMustEndWithAlpha(false);\n-        basePasswordPolicySpec.setMustEndWithDigit(false);\n-        basePasswordPolicySpec.setMustEndWithNonAlpha(false);\n-        basePasswordPolicySpec.setMustStartWithAlpha(false);\n-        basePasswordPolicySpec.setMustStartWithDigit(false);\n-        basePasswordPolicySpec.setMustStartWithNonAlpha(false);\n-        basePasswordPolicySpec.setMustntEndWithAlpha(false);\n-        basePasswordPolicySpec.setMustntEndWithDigit(false);\n-        basePasswordPolicySpec.setMustntEndWithNonAlpha(false);\n-        basePasswordPolicySpec.setMustntStartWithAlpha(false);\n-        basePasswordPolicySpec.setMustntStartWithDigit(false);\n-        basePasswordPolicySpec.setMustntStartWithNonAlpha(false);\n-        basePasswordPolicySpec.setNonAlphanumericRequired(false);\n-        basePasswordPolicySpec.setUppercaseRequired(false);\n-        return basePasswordPolicySpec;\n+    private final DefaultPasswordGenerator passwordGenerator = new DefaultPasswordGenerator();\n+\n+    private DefaultPasswordRuleConf createBaseDefaultPasswordRuleConf() {\n+        DefaultPasswordRuleConf baseDefaultPasswordRuleConf = new DefaultPasswordRuleConf();\n+        baseDefaultPasswordRuleConf.setAlphanumericRequired(false);\n+        baseDefaultPasswordRuleConf.setDigitRequired(false);\n+        baseDefaultPasswordRuleConf.setLowercaseRequired(false);\n+        baseDefaultPasswordRuleConf.setMaxLength(1000);\n+        baseDefaultPasswordRuleConf.setMinLength(8);\n+        baseDefaultPasswordRuleConf.setMustEndWithAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustEndWithDigit(false);\n+        baseDefaultPasswordRuleConf.setMustEndWithNonAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustStartWithAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustStartWithDigit(false);\n+        baseDefaultPasswordRuleConf.setMustStartWithNonAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustntEndWithAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustntEndWithDigit(false);\n+        baseDefaultPasswordRuleConf.setMustntEndWithNonAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustntStartWithAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustntStartWithDigit(false);\n+        baseDefaultPasswordRuleConf.setMustntStartWithNonAlpha(false);\n+        baseDefaultPasswordRuleConf.setNonAlphanumericRequired(false);\n+        baseDefaultPasswordRuleConf.setUppercaseRequired(false);\n+        return baseDefaultPasswordRuleConf;\n     }\n \n     @Test\n-    public void startEndWithDigit() throws InvalidPasswordPolicySpecException {\n-        PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n-        passwordPolicySpec.setMustStartWithDigit(true);\n-\n-        PasswordPolicySpec passwordPolicySpec2 = createBasePasswordPolicySpec();\n-        passwordPolicySpec.setMustEndWithDigit(true);\n-        List<PasswordPolicySpec> passwordPolicySpecs = new ArrayList<>();\n-        passwordPolicySpecs.add(passwordPolicySpec);\n-        passwordPolicySpecs.add(passwordPolicySpec2);\n-        String generatedPassword = passwordGenerator.generate(passwordPolicySpecs);\n+    public void startEndWithDigit() throws InvalidPasswordRuleConf {\n+        DefaultPasswordRuleConf pwdRuleConf = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf.setMustStartWithDigit(true);\n+\n+        DefaultPasswordRuleConf pwdRuleConf2 = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf2.setMustEndWithDigit(true);\n+\n+        List<PasswordRuleConf> ruleConfs = new ArrayList<>();\n+        ruleConfs.add(pwdRuleConf);\n+        ruleConfs.add(pwdRuleConf2);\n+        String generatedPassword = passwordGenerator.generate(ruleConfs);\n         assertTrue(Character.isDigit(generatedPassword.charAt(0)));\n         assertTrue(Character.isDigit(generatedPassword.charAt(generatedPassword.length() - 1)));\n     }\n \n     @Test\n-    public void startWithDigitAndWithAlpha() throws InvalidPasswordPolicySpecException {\n-        PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n-        passwordPolicySpec.setMustStartWithDigit(true);\n-\n-        PasswordPolicySpec passwordPolicySpec2 = createBasePasswordPolicySpec();\n-        passwordPolicySpec.setMustEndWithAlpha(true);\n-        List<PasswordPolicySpec> passwordPolicySpecs = new ArrayList<>();\n-        passwordPolicySpecs.add(passwordPolicySpec);\n-        passwordPolicySpecs.add(passwordPolicySpec2);\n-        String generatedPassword = passwordGenerator.generate(passwordPolicySpecs);\n+    public void startWithDigitAndWithAlpha() throws InvalidPasswordRuleConf {\n+        DefaultPasswordRuleConf pwdRuleConf = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf.setMustStartWithDigit(true);\n+\n+        DefaultPasswordRuleConf pwdRuleConf2 = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf2.setMustEndWithAlpha(true);\n+\n+        List<PasswordRuleConf> pwdRuleConfs = new ArrayList<>();\n+        pwdRuleConfs.add(pwdRuleConf);\n+        pwdRuleConfs.add(pwdRuleConf2);\n+        String generatedPassword = passwordGenerator.generate(pwdRuleConfs);\n         assertTrue(Character.isDigit(generatedPassword.charAt(0)));\n         assertTrue(Character.isLetter(generatedPassword.charAt(generatedPassword.length() - 1)));\n     }\n \n     @Test\n-    public void passwordWithNonAlpha() throws InvalidPasswordPolicySpecException {\n-        PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n-        passwordPolicySpec.setNonAlphanumericRequired(true);\n-\n-        PasswordPolicySpec passwordPolicySpec2 = createBasePasswordPolicySpec();\n-        passwordPolicySpec.setMustEndWithAlpha(true);\n-        List<PasswordPolicySpec> passwordPolicySpecs = new ArrayList<>();\n-        passwordPolicySpecs.add(passwordPolicySpec);\n-        passwordPolicySpecs.add(passwordPolicySpec2);\n-        String generatedPassword = passwordGenerator.generate(passwordPolicySpecs);\n+    public void passwordWithNonAlpha() throws InvalidPasswordRuleConf {\n+        DefaultPasswordRuleConf pwdRuleConf = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf.setNonAlphanumericRequired(true);\n+\n+        DefaultPasswordRuleConf pwdRuleConf2 = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf2.setMustEndWithAlpha(true);\n+\n+        List<PasswordRuleConf> pwdRuleConfs = new ArrayList<>();\n+        pwdRuleConfs.add(pwdRuleConf);\n+        pwdRuleConfs.add(pwdRuleConf2);\n+        String generatedPassword = passwordGenerator.generate(pwdRuleConfs);\n         assertTrue(PolicyPattern.NON_ALPHANUMERIC.matcher(generatedPassword).matches());\n         assertTrue(Character.isLetter(generatedPassword.charAt(generatedPassword.length() - 1)));\n     }\n \n-    @Test(expected = InvalidPasswordPolicySpecException.class)\n-    public void incopatiblePolicies() throws InvalidPasswordPolicySpecException {\n-        PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n-        passwordPolicySpec.setMinLength(12);\n+    @Test(expected = InvalidPasswordRuleConf.class)\n+    public void incopatiblePolicies() throws InvalidPasswordRuleConf {\n+        DefaultPasswordRuleConf pwdRuleConf = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf.setMinLength(12);\n \n-        PasswordPolicySpec passwordPolicySpec2 = createBasePasswordPolicySpec();\n-        passwordPolicySpec.setMaxLength(10);\n+        DefaultPasswordRuleConf pwdRuleConf2 = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf.setMaxLength(10);\n \n-        List<PasswordPolicySpec> passwordPolicySpecs = new ArrayList<>();\n-        passwordPolicySpecs.add(passwordPolicySpec);\n-        passwordPolicySpecs.add(passwordPolicySpec2);\n-        passwordGenerator.generate(passwordPolicySpecs);\n+        List<PasswordRuleConf> pwdRuleConfs = new ArrayList<>();\n+        pwdRuleConfs.add(pwdRuleConf);\n+        pwdRuleConfs.add(pwdRuleConf2);\n+        passwordGenerator.generate(pwdRuleConfs);\n     }\n \n     @Test\n     public void issueSYNCOPE678() {\n         String password = null;\n         try {\n-            password = passwordGenerator.generate(Collections.<PasswordPolicySpec>emptyList());\n-        } catch (InvalidPasswordPolicySpecException e) {\n+            password = passwordGenerator.generate(Collections.<PasswordRuleConf>emptyList());\n+        } catch (InvalidPasswordRuleConf e) {\n             fail(e.getMessage());\n         }\n         assertNotNull(password);\n \n-        PasswordPolicySpec ppSpec = createBasePasswordPolicySpec();\n+        DefaultPasswordRuleConf ppSpec = createBaseDefaultPasswordRuleConf();\n         ppSpec.setMinLength(0);\n         password = null;\n         try {\n-            password = passwordGenerator.generate(Collections.singletonList(ppSpec));\n-        } catch (InvalidPasswordPolicySpecException e) {\n+            password = passwordGenerator.generate(Collections.<PasswordRuleConf>singletonList(ppSpec));\n+        } catch (InvalidPasswordRuleConf e) {\n             fail(e.getMessage());\n         }\n         assertNotNull(password);"},{"sha":"25145de44cc1ba1a2d1c646ed93fc65b3e213ed2","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRule.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRule.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -19,9 +19,12 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n \n-public interface AccountRule extends PolicyRule {\n-\n-    void setConf(AccountRuleConf conf);\n+/**\n+ * Interface for enforcing a given account rule to user.\n+ */\n+public interface AccountRule {\n \n+    void enforce(AccountRuleConf conf, User user);\n }"},{"sha":"4cb1ba9e7acf3e5cb8f922a163c98e8cd556776b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PasswordRule.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRule.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -19,9 +19,12 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n \n-public interface PasswordRule extends PolicyRule {\n-\n-    void setConf(PasswordRuleConf conf);\n+/**\n+ * Interface for enforcing a given password rule to user.\n+ */\n+public interface PasswordRule {\n \n+    void enforce(PasswordRuleConf conf, User user);\n }"},{"sha":"a27f1c000734360d1327fd0ced542cfb769d706c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PolicyDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -20,7 +20,7 @@\n \n import java.util.List;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n "},{"sha":"72f8cac9a1f970d124cddc5219ccf00f4488ddb7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AccountPolicy.java","status":"removed","additions":0,"deletions":38,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAccountPolicy.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,38 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity;\n-\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import java.util.Set;\n-import org.apache.syncope.common.lib.types.AccountPolicySpec;\n-\n-public interface AccountPolicy extends Policy {\n-\n-    AccountPolicySpec getSpecification();\n-\n-    void setSpecification(AccountPolicySpec spec);\n-    \n-    boolean add(ExternalResource resource);\n-\n-    boolean remove(ExternalResource resource);\n-\n-    Set<String> getResourceNames();\n-\n-    Set<? extends ExternalResource> getResources();\n-}"},{"sha":"a4004cef9620a9759062027ad1606d30b99b48d4","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PasswordPolicy.java","status":"removed","additions":0,"deletions":29,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPasswordPolicy.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,29 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity;\n-\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n-\n-public interface PasswordPolicy extends Policy {\n-\n-    PasswordPolicySpec getSpecification();\n-\n-    void setSpecification(PasswordPolicySpec spec);\n-\n-}"},{"sha":"e1c37df3997f603c30dc305f24aa9f3be48b60ac","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PushPolicy.java","status":"removed","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPushPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPushPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPushPolicy.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,28 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity;\n-\n-import org.apache.syncope.common.lib.types.PushPolicySpec;\n-\n-public interface PushPolicy extends Policy {\n-\n-    PushPolicySpec getSpecification();\n-\n-    void setSpecification(PushPolicySpec spec);\n-}"},{"sha":"ae3290f92172adce87ee45e110feb627b5ea5ec1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Realm.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+\n public interface Realm extends Entity<Long> {\n \n     String getName();"},{"sha":"30245d018289d2bcd92c3f297842148bcfaa3d8d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Report.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FReport.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -35,7 +35,7 @@ public interface Report extends Entity<Long> {\n \n     boolean add(ReportletConf reportletConf);\n \n-    boolean remove(ReportletConf reportletConf);\n+    void removeAllReportletConfs();\n \n     List<? extends ReportletConf> getReportletConfs();\n "},{"sha":"5b9196d28d0ad31e90a8389f286b3e50633cfcdf","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/ReportletConfInstance.java","status":"removed","additions":0,"deletions":33,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FReportletConfInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FReportletConfInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FReportletConfInstance.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,33 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity;\n-\n-import org.apache.syncope.common.lib.report.ReportletConf;\n-\n-public interface ReportletConfInstance extends Entity<Long> {\n-\n-    ReportletConf getInstance();\n-\n-    Report getReport();\n-\n-    void setInstance(ReportletConf instance);\n-\n-    void setReport(Report report);\n-\n-}"},{"sha":"1e389d76573be5f7b04a0c4169d7ce6e37b05eae","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SyncPolicy.java","status":"removed","additions":0,"deletions":29,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSyncPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSyncPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSyncPolicy.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,29 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity;\n-\n-import org.apache.syncope.common.lib.types.SyncPolicySpec;\n-\n-public interface SyncPolicy extends Policy {\n-\n-    SyncPolicySpec getSpecification();\n-\n-    void setSpecification(SyncPolicySpec spec);\n-\n-}"},{"sha":"066efdfad4bfa4070ef843e6e4c62f149655ce8c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/AccountPolicy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -36,7 +36,7 @@ public interface AccountPolicy extends Policy {\n \n     boolean add(AccountRuleConf accountRuleConf);\n \n-    boolean remove(AccountRuleConf accountRuleConf);\n+    void removeAllRuleConfs();\n \n     List<AccountRuleConf> getRuleConfs();\n "},{"sha":"a3e565fd521e0762d3502c5f2366959d85916128","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PasswordPolicy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPasswordPolicy.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -34,7 +34,7 @@ public interface PasswordPolicy extends Policy {\n \n     boolean add(PasswordRuleConf passwordRuleConf);\n \n-    boolean remove(PasswordRuleConf passwordRuleConf);\n+    void removeAllRuleConfs();\n \n     List<PasswordRuleConf> getRuleConfs();\n }"},{"sha":"a8f32c0be4d947c60f5bebb1af7a601b5efe045b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/ExternalResource.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -23,12 +23,12 @@\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.PropagationMode;\n import org.apache.syncope.common.lib.types.TraceLevel;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.AnnotatedEntity;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.SyncPolicy;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n \n public interface ExternalResource extends AnnotatedEntity<String> {"},{"sha":"d4eaf639160990e26e5f73ec1132fc1725d343c8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultAccountRule.java","status":"modified","additions":13,"deletions":16,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultAccountRule.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -36,25 +36,22 @@ public class DefaultAccountRule implements AccountRule {\n \n     private DefaultAccountRuleConf conf;\n \n+    @Transactional(readOnly = true)\n     @Override\n-    public void setConf(final AccountRuleConf conf) {\n+    public void enforce(final AccountRuleConf conf, final User user) {\n         if (conf instanceof DefaultAccountRuleConf) {\n-            this.conf = (DefaultAccountRuleConf) conf;\n+            this.conf = DefaultAccountRuleConf.class.cast(conf);\n         } else {\n             throw new IllegalArgumentException(\n                     AccountRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n         }\n-    }\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public void isCompliant(final User user) {\n-        for (String schema : conf.getSchemasNotPermitted()) {\n+        for (String schema : this.conf.getSchemasNotPermitted()) {\n             PlainAttr<?> attr = user.getPlainAttr(schema);\n             if (attr != null) {\n                 List<String> values = attr.getValuesAsStrings();\n                 if (values != null && !values.isEmpty()) {\n-                    conf.getWordsNotPermitted().add(values.get(0));\n+                    this.conf.getWordsNotPermitted().add(values.get(0));\n                 }\n             }\n         }\n@@ -64,45 +61,45 @@ public void isCompliant(final User user) {\n         }\n \n         // check min length\n-        if (conf.getMinLength() > 0 && conf.getMinLength() > user.getUsername().length()) {\n+        if (this.conf.getMinLength() > 0 && this.conf.getMinLength() > user.getUsername().length()) {\n             throw new AccountPolicyException(\"Username too short\");\n         }\n \n         // check max length\n-        if (conf.getMaxLength() > 0 && conf.getMaxLength() < user.getUsername().length()) {\n+        if (this.conf.getMaxLength() > 0 && this.conf.getMaxLength() < user.getUsername().length()) {\n             throw new AccountPolicyException(\"Username too long\");\n         }\n \n         // check words not permitted\n-        for (String word : conf.getWordsNotPermitted()) {\n+        for (String word : this.conf.getWordsNotPermitted()) {\n             if (user.getUsername().contains(word)) {\n                 throw new AccountPolicyException(\"Used word(s) not permitted\");\n             }\n         }\n \n         // check case\n-        if (conf.isAllUpperCase() && !user.getUsername().equals(user.getUsername().toUpperCase())) {\n+        if (this.conf.isAllUpperCase() && !user.getUsername().equals(user.getUsername().toUpperCase())) {\n             throw new AccountPolicyException(\"No lowercase characters permitted\");\n         }\n-        if (conf.isAllLowerCase() && !user.getUsername().equals(user.getUsername().toLowerCase())) {\n+        if (this.conf.isAllLowerCase() && !user.getUsername().equals(user.getUsername().toLowerCase())) {\n             throw new AccountPolicyException(\"No uppercase characters permitted\");\n         }\n \n         // check pattern\n-        Pattern pattern = (conf.getPattern() == null) ? DEFAULT_PATTERN : Pattern.compile(conf.getPattern());\n+        Pattern pattern = (this.conf.getPattern() == null) ? DEFAULT_PATTERN : Pattern.compile(this.conf.getPattern());\n         if (!pattern.matcher(user.getUsername()).matches()) {\n             throw new AccountPolicyException(\"Username does not match pattern\");\n         }\n \n         // check prefix\n-        for (String prefix : conf.getPrefixesNotPermitted()) {\n+        for (String prefix : this.conf.getPrefixesNotPermitted()) {\n             if (user.getUsername().startsWith(prefix)) {\n                 throw new AccountPolicyException(\"Prefix not permitted\");\n             }\n         }\n \n         // check suffix\n-        for (String suffix : conf.getSuffixesNotPermitted()) {\n+        for (String suffix : this.conf.getSuffixesNotPermitted()) {\n             if (user.getUsername().endsWith(suffix)) {\n                 throw new AccountPolicyException(\"Suffix not permitted\");\n             }"},{"sha":"d3ab5920472fde63795670826bbf3db90aa6ec28","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPasswordRule.java","status":"modified","additions":32,"deletions":29,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPasswordRule.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -34,25 +34,22 @@ public class DefaultPasswordRule implements PasswordRule {\n \n     private DefaultPasswordRuleConf conf;\n \n+    @Transactional(readOnly = true)\n     @Override\n-    public void setConf(final PasswordRuleConf conf) {\n+    public void enforce(final PasswordRuleConf conf, final User user) {\n         if (conf instanceof DefaultPasswordRuleConf) {\n             this.conf = (DefaultPasswordRuleConf) conf;\n         } else {\n             throw new IllegalArgumentException(\n                     PasswordRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n         }\n-    }\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public void isCompliant(final User user) {\n-        for (String schema : conf.getSchemasNotPermitted()) {\n+        for (String schema : this.conf.getSchemasNotPermitted()) {\n             PlainAttr<?> attr = user.getPlainAttr(schema);\n             if (attr != null) {\n                 List<String> values = attr.getValuesAsStrings();\n                 if (values != null && !values.isEmpty()) {\n-                    conf.getWordsNotPermitted().add(values.get(0));\n+                    this.conf.getWordsNotPermitted().add(values.get(0));\n                 }\n             }\n         }\n@@ -62,113 +59,119 @@ public void isCompliant(final User user) {\n \n         if (password != null && clearPassword != null) {\n             // check length\n-            if (conf.getMinLength() > 0 && conf.getMinLength() > clearPassword.length()) {\n+            if (this.conf.getMinLength() > 0 && this.conf.getMinLength() > clearPassword.length()) {\n                 throw new PasswordPolicyException(\"Password too short\");\n             }\n \n-            if (conf.getMaxLength() > 0 && conf.getMaxLength() < clearPassword.length()) {\n+            if (this.conf.getMaxLength() > 0 && this.conf.getMaxLength() < clearPassword.length()) {\n                 throw new PasswordPolicyException(\"Password too long\");\n             }\n \n             // check words not permitted\n-            for (String word : conf.getWordsNotPermitted()) {\n+            for (String word : this.conf.getWordsNotPermitted()) {\n                 if (clearPassword.contains(word)) {\n                     throw new PasswordPolicyException(\"Used word(s) not permitted\");\n                 }\n             }\n \n             // check digits occurrence\n-            if (conf.isDigitRequired() && !checkDigit(clearPassword)) {\n+            if (this.conf.isDigitRequired() && !checkDigit(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must contain digit(s)\");\n             }\n \n             // check lowercase alphabetic characters occurrence\n-            if (conf.isLowercaseRequired() && !checkLowercase(clearPassword)) {\n+            if (this.conf.isLowercaseRequired() && !checkLowercase(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must contain lowercase alphabetic character(s)\");\n             }\n \n             // check uppercase alphabetic characters occurrence\n-            if (conf.isUppercaseRequired() && !checkUppercase(clearPassword)) {\n+            if (this.conf.isUppercaseRequired() && !checkUppercase(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must contain uppercase alphabetic character(s)\");\n             }\n \n             // check prefix\n-            for (String prefix : conf.getPrefixesNotPermitted()) {\n+            for (String prefix : this.conf.getPrefixesNotPermitted()) {\n                 if (clearPassword.startsWith(prefix)) {\n                     throw new PasswordPolicyException(\"Prefix not permitted\");\n                 }\n             }\n \n             // check suffix\n-            for (String suffix : conf.getSuffixesNotPermitted()) {\n+            for (String suffix : this.conf.getSuffixesNotPermitted()) {\n                 if (clearPassword.endsWith(suffix)) {\n                     throw new PasswordPolicyException(\"Suffix not permitted\");\n                 }\n             }\n \n             // check digit first occurrence\n-            if (conf.isMustStartWithDigit() && !checkFirstDigit(clearPassword)) {\n+            if (this.conf.isMustStartWithDigit() && !checkFirstDigit(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must start with a digit\");\n             }\n \n-            if (conf.isMustntStartWithDigit() && checkFirstDigit(clearPassword)) {\n+            if (this.conf.isMustntStartWithDigit() && checkFirstDigit(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password mustn't start with a digit\");\n             }\n \n             // check digit last occurrence\n-            if (conf.isMustEndWithDigit() && !checkLastDigit(clearPassword)) {\n+            if (this.conf.isMustEndWithDigit() && !checkLastDigit(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must end with a digit\");\n             }\n \n-            if (conf.isMustntEndWithDigit() && checkLastDigit(clearPassword)) {\n+            if (this.conf.isMustntEndWithDigit() && checkLastDigit(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password mustn't end with a digit\");\n             }\n \n             // check alphanumeric characters occurence\n-            if (conf.isAlphanumericRequired() && !checkAlphanumeric(clearPassword)) {\n+            if (this.conf.isAlphanumericRequired() && !checkAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must contain alphanumeric character(s)\");\n             }\n \n             // check non alphanumeric characters occurence\n-            if (conf.isNonAlphanumericRequired() && !checkNonAlphanumeric(clearPassword)) {\n+            if (this.conf.isNonAlphanumericRequired() && !checkNonAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must contain non-alphanumeric character(s)\");\n             }\n \n             // check alphanumeric character first occurrence\n-            if (conf.isMustStartWithAlpha() && !checkFirstAlphanumeric(clearPassword)) {\n+            if (this.conf.isMustStartWithAlpha() && !checkFirstAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must start with an alphanumeric character\");\n             }\n \n-            if (conf.isMustntStartWithAlpha() && checkFirstAlphanumeric(clearPassword)) {\n+            if (this.conf.isMustntStartWithAlpha() && checkFirstAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password mustn't start with an alphanumeric character\");\n             }\n \n             // check alphanumeric character last occurrence\n-            if (conf.isMustEndWithAlpha() && !checkLastAlphanumeric(clearPassword)) {\n+            if (this.conf.isMustEndWithAlpha() && !checkLastAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must end with an alphanumeric character\");\n             }\n \n-            if (conf.isMustntEndWithAlpha() && checkLastAlphanumeric(clearPassword)) {\n+            if (this.conf.isMustntEndWithAlpha() && checkLastAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password mustn't end with an alphanumeric character\");\n             }\n \n             // check non alphanumeric character first occurrence\n-            if (conf.isMustStartWithNonAlpha() && !checkFirstNonAlphanumeric(clearPassword)) {\n+            if (this.conf.isMustStartWithNonAlpha() && !checkFirstNonAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must start with a non-alphanumeric character\");\n             }\n \n-            if (conf.isMustntStartWithNonAlpha() && checkFirstNonAlphanumeric(clearPassword)) {\n+            if (this.conf.isMustntStartWithNonAlpha() && checkFirstNonAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password mustn't start with a non-alphanumeric character\");\n             }\n \n             // check non alphanumeric character last occurrence\n-            if (conf.isMustEndWithNonAlpha() && !checkLastNonAlphanumeric(clearPassword)) {\n+            if (this.conf.isMustEndWithNonAlpha() && !checkLastNonAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must end with a non-alphanumeric character\");\n             }\n \n-            if (conf.isMustntEndWithNonAlpha() && checkLastNonAlphanumeric(clearPassword)) {\n+            if (this.conf.isMustntEndWithNonAlpha() && checkLastNonAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password mustn't end with a non-alphanumeric character\");\n             }\n+\n+            if (!this.conf.isUsernameAllowed()\n+                    && user.getUsername() != null && user.getUsername().equals(clearPassword)) {\n+\n+                throw new PasswordPolicyException(\"Password mustn't be equal to username\");\n+            }\n         }\n     }\n "},{"sha":"3905d92254d0f880dfe139c3183d640a7badf2e4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.Policy;"},{"sha":"4b89f8c1a321751b5d1219ebbc208dfbe5b6f089","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -24,13 +24,13 @@\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAAccountPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.AbstractPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n \n@@ -44,7 +44,7 @@ public class JPAPolicyDAO extends AbstractDAO<Policy, Long> implements PolicyDAO\n     @SuppressWarnings(\"unchecked\")\n     public <T extends Policy> T find(final Long key) {\n         final Query query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAPolicy.class.getSimpleName() + \" e WHERE e.id=:id\");\n+                \"SELECT e FROM \" + AbstractPolicy.class.getSimpleName() + \" e WHERE e.id=:id\");\n         query.setParameter(\"id\", key);\n \n         List<T> result = query.getResultList();\n@@ -57,7 +57,7 @@ public <T extends Policy> T find(final Long key) {\n     @SuppressWarnings(\"unchecked\")\n     public <T extends Policy> List<T> find(final PolicyType type) {\n         final Query query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAPolicy.class.getSimpleName() + \" e WHERE e.type=:type\");\n+                \"SELECT e FROM \" + AbstractPolicy.class.getSimpleName() + \" e WHERE e.type=:type\");\n         query.setParameter(\"type\", type);\n \n         return (List<T>) query.getResultList();\n@@ -76,7 +76,7 @@ public List<AccountPolicy> findByResource(final ExternalResource resource) {\n     @Override\n     public List<Policy> findAll() {\n         TypedQuery<Policy> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAPolicy.class.getSimpleName() + \" e\", Policy.class);\n+                \"SELECT e FROM \" + AbstractPolicy.class.getSimpleName() + \" e\", Policy.class);\n         return query.getResultList();\n     }\n "},{"sha":"eee37f1ed9f9b270be171b1ad3e1f29406d47d0a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;"},{"sha":"b4b534291701de0f8dcb12ea5b25948ab84a7538","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPushTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPASchedTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPASyncTask;\n-import org.apache.syncope.core.persistence.jpa.entity.task.JPATask;\n+import org.apache.syncope.core.persistence.jpa.entity.task.AbstractTask;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -75,7 +75,7 @@ public Class<? extends Task> getEntityReference(final TaskType type) {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends Task> T find(final Long key) {\n-        return (T) entityManager().find(JPATask.class, key);\n+        return (T) entityManager().find(AbstractTask.class, key);\n     }\n \n     private <T extends Task> StringBuilder buildfindAllQuery(final TaskType type) {"},{"sha":"130c01e7ee70aaedb6bfbf51b039dd37a3ece1d5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":114,"deletions":32,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -18,28 +18,30 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import javax.annotation.Resource;\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.types.AccountPolicySpec;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n-import org.apache.syncope.core.misc.policy.AccountPolicyEnforcer;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.core.misc.policy.AccountPolicyException;\n-import org.apache.syncope.core.misc.policy.PasswordPolicyEnforcer;\n-import org.apache.syncope.core.misc.policy.PolicyEvaluator;\n+import org.apache.syncope.core.misc.policy.PasswordPolicyException;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -49,13 +51,17 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.AccountRuleConfClass;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRuleConfClass;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -64,13 +70,55 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n+import org.springframework.core.type.filter.AssignableTypeFilter;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.ClassUtils;\n \n @Repository\n public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n \n+    private static final Map<Class<? extends AccountRuleConf>, Class<AccountRule>> ACCOUNT_RULES_CLASSES =\n+            new HashMap<>();\n+\n+    private static final Map<Class<? extends PasswordRuleConf>, Class<PasswordRule>> PASSWORD_RULES_CLASSES =\n+            new HashMap<>();\n+\n+    static {\n+        initRules();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static void initRules() {\n+        ClassPathScanningCandidateComponentProvider scanner =\n+                new ClassPathScanningCandidateComponentProvider(false);\n+        scanner.addIncludeFilter(new AssignableTypeFilter(AccountRule.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(PasswordRule.class));\n+\n+        for (BeanDefinition bd : scanner.findCandidateComponents(StringUtils.EMPTY)) {\n+            Class<?> clazz = ClassUtils.resolveClassName(\n+                    bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n+            boolean isAbstract = Modifier.isAbstract(clazz.getModifiers());\n+\n+            if (AccountRule.class.isAssignableFrom(clazz) && !isAbstract) {\n+                AccountRuleConfClass annotation = clazz.getAnnotation(AccountRuleConfClass.class);\n+                if (annotation != null) {\n+                    ACCOUNT_RULES_CLASSES.put(annotation.value(), (Class<AccountRule>) clazz);\n+                }\n+            }\n+            if (PasswordRule.class.isAssignableFrom(clazz) && !isAbstract) {\n+                PasswordRuleConfClass annotation = clazz.getAnnotation(PasswordRuleConfClass.class);\n+                if (annotation != null) {\n+                    PASSWORD_RULES_CLASSES.put(annotation.value(), (Class<PasswordRule>) clazz);\n+                }\n+            }\n+        }\n+    }\n+\n     @Autowired\n     private RealmDAO realmDAO;\n \n@@ -86,15 +134,6 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n     @Resource(name = \"anonymousUser\")\n     private String anonymousUser;\n \n-    @Autowired\n-    private PolicyEvaluator evaluator;\n-\n-    @Autowired\n-    private PasswordPolicyEnforcer ppEnforcer;\n-\n-    @Autowired\n-    private AccountPolicyEnforcer apEnforcer;\n-\n     @Override\n     protected AnyUtils init() {\n         return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.USER);\n@@ -235,14 +274,39 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n \n         try {\n             int maxPPSpecHistory = 0;\n-            for (Policy policy : getPasswordPolicies(user)) {\n-                // evaluate policy\n-                PasswordPolicySpec ppSpec = evaluator.evaluate(policy, user);\n-                // enforce policy\n-                ppEnforcer.enforce(ppSpec, user);\n-\n-                if (ppSpec.getHistoryLength() > maxPPSpecHistory) {\n-                    maxPPSpecHistory = ppSpec.getHistoryLength();\n+            for (PasswordPolicy policy : getPasswordPolicies(user)) {\n+                if (user.getPassword() == null && !policy.isAllowNullPassword()) {\n+                    throw new PasswordPolicyException(\"Password mandatory\");\n+                }\n+\n+                for (PasswordRuleConf ruleConf : policy.getRuleConfs()) {\n+                    Class<PasswordRule> ruleClass = PASSWORD_RULES_CLASSES.get(ruleConf.getClass());\n+                    if (ruleClass == null) {\n+                        LOG.warn(\"Could not find matching password rule for {}\", ruleConf.getClass());\n+                    } else {\n+                        // fetch (or create) rule\n+                        PasswordRule rule;\n+                        if (ApplicationContextProvider.getBeanFactory().containsSingleton(ruleClass.getName())) {\n+                            rule = (PasswordRule) ApplicationContextProvider.getBeanFactory().\n+                                    getSingleton(ruleClass.getName());\n+                        } else {\n+                            rule = (PasswordRule) ApplicationContextProvider.getBeanFactory().\n+                                    createBean(ruleClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+                            ApplicationContextProvider.getBeanFactory().\n+                                    registerSingleton(ruleClass.getName(), rule);\n+                        }\n+\n+                        // enforce rule\n+                        rule.enforce(ruleConf, user);\n+                    }\n+                }\n+\n+                if (user.verifyPasswordHistory(user.getClearPassword(), policy.getHistoryLength())) {\n+                    throw new PasswordPolicyException(\"Password value was used in the past: not allowed\");\n+                }\n+\n+                if (policy.getHistoryLength() > maxPPSpecHistory) {\n+                    maxPPSpecHistory = policy.getHistoryLength();\n                 }\n             }\n \n@@ -276,14 +340,32 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n                 throw new AccountPolicyException(\"Not allowed: \" + user.getUsername());\n             }\n \n-            // invalid username\n-            for (Policy policy : getAccountPolicies(user)) {\n-                // evaluate policy\n-                AccountPolicySpec apSpec = evaluator.evaluate(policy, user);\n+            for (AccountPolicy policy : getAccountPolicies(user)) {\n+                for (AccountRuleConf ruleConf : policy.getRuleConfs()) {\n+                    Class<AccountRule> ruleClass = ACCOUNT_RULES_CLASSES.get(ruleConf.getClass());\n+                    if (ruleClass == null) {\n+                        LOG.warn(\"Could not find matching password rule for {}\", ruleConf.getClass());\n+                    } else {\n+                        // fetch (or create) rule\n+                        AccountRule rule;\n+                        if (ApplicationContextProvider.getBeanFactory().containsSingleton(ruleClass.getName())) {\n+                            rule = (AccountRule) ApplicationContextProvider.getBeanFactory().\n+                                    getSingleton(ruleClass.getName());\n+                        } else {\n+                            rule = (AccountRule) ApplicationContextProvider.getBeanFactory().\n+                                    createBean(ruleClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+                            ApplicationContextProvider.getBeanFactory().\n+                                    registerSingleton(ruleClass.getName(), rule);\n+                        }\n+\n+                        // enforce rule\n+                        rule.enforce(ruleConf, user);\n+                    }\n+                }\n \n-                // enforce policy\n-                suspend |= apEnforcer.enforce(apSpec, user);\n-                propagateSuspension |= apSpec.isPropagateSuspension();\n+                suspend |= user.getFailedLogins() != null && policy.getMaxAuthenticationAttempts() > 0\n+                        && user.getFailedLogins() > policy.getMaxAuthenticationAttempts() && !user.isSuspended();\n+                propagateSuspension |= policy.isPropagateSuspension();\n             }\n         } catch (Exception e) {\n             LOG.error(\"Invalid username for {}\", user, e);"},{"sha":"844b49adc8ccf59f2bccecba168bd2717020cd13","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAccountPolicy.java","status":"removed","additions":0,"deletions":96,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccountPolicy.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,96 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import java.util.HashSet;\n-import java.util.Set;\n-import javax.persistence.DiscriminatorValue;\n-import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n-import javax.persistence.JoinColumn;\n-import javax.persistence.JoinTable;\n-import javax.persistence.ManyToMany;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.common.lib.types.AccountPolicySpec;\n-import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.core.misc.serialization.POJOHelper;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n-\n-@Entity\n-@DiscriminatorValue(\"AccountPolicy\")\n-public class JPAAccountPolicy extends JPAPolicy implements AccountPolicy {\n-\n-    private static final long serialVersionUID = -2767606675667839060L;\n-\n-    /**\n-     * Resources for alternative user authentication: if empty, only internal storage will be used.\n-     */\n-    @ManyToMany(fetch = FetchType.EAGER)\n-    @JoinTable(joinColumns =\n-            @JoinColumn(name = \"accountPolicy_id\"),\n-            inverseJoinColumns =\n-            @JoinColumn(name = \"resource_name\"))\n-    private Set<JPAExternalResource> resources = new HashSet<>();\n-\n-    public JPAAccountPolicy() {\n-        super();\n-        this.type = PolicyType.ACCOUNT;\n-    }\n-\n-    @Override\n-    public AccountPolicySpec getSpecification() {\n-        return POJOHelper.deserialize(specification, AccountPolicySpec.class);\n-    }\n-\n-    @Override\n-    public void setSpecification(final AccountPolicySpec policy) {\n-        this.specification = POJOHelper.serialize(policy);\n-    }\n-\n-    @Override\n-    public boolean add(final ExternalResource resource) {\n-        checkType(resource, JPAExternalResource.class);\n-        return resources.add((JPAExternalResource) resource);\n-    }\n-\n-    @Override\n-    public boolean remove(final ExternalResource resource) {\n-        checkType(resource, JPAExternalResource.class);\n-        return resources.remove((JPAExternalResource) resource);\n-    }\n-\n-    @Override\n-    public Set<? extends ExternalResource> getResources() {\n-        return resources;\n-    }\n-\n-    @Override\n-    public Set<String> getResourceNames() {\n-        return CollectionUtils.collect(getResources(), new Transformer<ExternalResource, String>() {\n-\n-            @Override\n-            public String transform(final ExternalResource input) {\n-                return input.getKey();\n-            }\n-        }, new HashSet<String>());\n-    }\n-}"},{"sha":"586f6cdcb482255700c0e314182526642a833d20","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -18,9 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPASyncPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n@@ -34,16 +38,15 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.PushPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n-import org.apache.syncope.core.persistence.api.entity.ReportletConfInstance;\n import org.apache.syncope.core.persistence.api.entity.Role;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.SyncPolicy;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n@@ -222,8 +225,6 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n             result = (T) new JPAReport();\n         } else if (reference.equals(ReportExec.class)) {\n             result = (T) new JPAReportExec();\n-        } else if (reference.equals(ReportletConfInstance.class)) {\n-            result = (T) new JPAReportletConfInstance();\n         } else if (reference.equals(NotificationTask.class)) {\n             result = (T) new JPANotificationTask();\n         } else if (reference.equals(PropagationTask.class)) {"},{"sha":"8a755f4c22e0a8e3a0a760d7fb4f0418163a8b56","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPasswordPolicy.java","status":"removed","additions":0,"deletions":48,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPasswordPolicy.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,48 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import javax.persistence.DiscriminatorValue;\n-import javax.persistence.Entity;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n-import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.core.misc.serialization.POJOHelper;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n-\n-@Entity\n-@DiscriminatorValue(\"PasswordPolicy\")\n-public class JPAPasswordPolicy extends JPAPolicy implements PasswordPolicy {\n-\n-    private static final long serialVersionUID = 9138550910385232849L;\n-\n-    public JPAPasswordPolicy() {\n-        super();\n-        this.type = PolicyType.PASSWORD;\n-    }\n-\n-    @Override\n-    public PasswordPolicySpec getSpecification() {\n-        return POJOHelper.deserialize(specification, PasswordPolicySpec.class);\n-    }\n-\n-    @Override\n-    public void setSpecification(final PasswordPolicySpec policy) {\n-        this.specification = POJOHelper.serialize(policy);\n-    }\n-}"},{"sha":"1dc5de60613dea7076a0b9a763525a6409dd0718","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPolicy.java","status":"removed","additions":0,"deletions":76,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPolicy.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,76 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import javax.persistence.DiscriminatorColumn;\n-import javax.persistence.Entity;\n-import javax.persistence.EnumType;\n-import javax.persistence.Enumerated;\n-import javax.persistence.Id;\n-import javax.persistence.Inheritance;\n-import javax.persistence.InheritanceType;\n-import javax.persistence.Lob;\n-import javax.persistence.Table;\n-import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n-\n-@Entity\n-@Table(name = JPAPolicy.TABLE)\n-@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n-@DiscriminatorColumn(name = \"DTYPE\")\n-public abstract class JPAPolicy extends AbstractEntity<Long> implements Policy {\n-\n-    private static final long serialVersionUID = -5844833125843247458L;\n-\n-    public static final String TABLE = \"Policy\";\n-\n-    @Id\n-    private Long id;\n-\n-    @NotNull\n-    private String description;\n-\n-    @NotNull\n-    @Enumerated(EnumType.STRING)\n-    protected PolicyType type;\n-\n-    @Lob\n-    protected String specification;\n-\n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return description;\n-    }\n-\n-    @Override\n-    public void setDescription(final String description) {\n-        this.description = description;\n-    }\n-\n-    @Override\n-    public PolicyType getType() {\n-        return type;\n-    }\n-}"},{"sha":"c3440b2e764ae64d47817f1333c24cc2ae4d5466","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPushPolicy.java","status":"removed","additions":0,"deletions":47,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPushPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPushPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPushPolicy.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,47 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import javax.persistence.Entity;\n-import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.lib.types.PushPolicySpec;\n-import org.apache.syncope.core.misc.serialization.POJOHelper;\n-import org.apache.syncope.core.persistence.api.entity.PushPolicy;\n-\n-@Entity\n-public class JPAPushPolicy extends JPAPolicy implements PushPolicy {\n-\n-    private static final long serialVersionUID = -5875589156893921113L;\n-\n-    public JPAPushPolicy() {\n-        super();\n-        this.type = PolicyType.PUSH;\n-    }\n-\n-    @Override\n-    public PushPolicySpec getSpecification() {\n-        return POJOHelper.deserialize(specification, PushPolicySpec.class);\n-    }\n-\n-    @Override\n-    public void setSpecification(final PushPolicySpec policy) {\n-        this.specification = POJOHelper.serialize(policy);\n-    }\n-\n-}"},{"sha":"d45817836c50ff907d474c7e9ab36a2242a2117d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARealm.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n import javax.persistence.Cacheable;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n@@ -28,8 +30,8 @@\n import javax.validation.constraints.Size;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.jpa.validation.entity.RealmCheck;\n "},{"sha":"eeaf86d1a077f2b6acb33fcc71dcfc177e5d63f4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAReport.java","status":"modified","additions":6,"deletions":21,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -28,12 +28,10 @@\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n-import org.apache.syncope.core.persistence.api.entity.ReportletConfInstance;\n import org.apache.syncope.core.persistence.jpa.validation.entity.ReportCheck;\n \n @Entity\n@@ -52,19 +50,12 @@ public class JPAReport extends AbstractEntity<Long> implements Report {\n     private String name;\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"report\")\n-    private List<JPAReportletConfInstance> reportletConfs;\n+    private List<JPAReportletConfInstance> reportletConfs = new ArrayList<>();\n \n     private String cronExpression;\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"report\")\n-    private List<JPAReportExec> executions;\n-\n-    public JPAReport() {\n-        super();\n-\n-        reportletConfs = new ArrayList<>();\n-        executions = new ArrayList<>();\n-    }\n+    private List<JPAReportExec> executions = new ArrayList<>();\n \n     @Override\n     public Long getKey() {\n@@ -112,22 +103,16 @@ public boolean add(final ReportletConf reportletConf) {\n     }\n \n     @Override\n-    public boolean remove(final ReportletConf reportletConf) {\n-        return CollectionUtils.filter(reportletConfs, new Predicate<JPAReportletConfInstance>() {\n-\n-            @Override\n-            public boolean evaluate(final JPAReportletConfInstance object) {\n-                return reportletConf.equals(object.getInstance());\n-            }\n-        });\n+    public void removeAllReportletConfs() {\n+        reportletConfs.clear();\n     }\n \n     @Override\n     public List<ReportletConf> getReportletConfs() {\n-        return CollectionUtils.collect(reportletConfs, new Transformer<ReportletConfInstance, ReportletConf>() {\n+        return CollectionUtils.collect(reportletConfs, new Transformer<JPAReportletConfInstance, ReportletConf>() {\n \n             @Override\n-            public ReportletConf transform(final ReportletConfInstance input) {\n+            public ReportletConf transform(final JPAReportletConfInstance input) {\n                 return input.getInstance();\n             }\n         }, new ArrayList<ReportletConf>());"},{"sha":"df08af8de1c2a24edff5ab0d48f004fb4b63a56f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAReportletConfInstance.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReportletConfInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReportletConfInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReportletConfInstance.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import org.apache.syncope.core.persistence.api.entity.ReportletConfInstance;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.Lob;\n@@ -30,7 +29,7 @@\n \n @Entity\n @Table(name = JPAReportletConfInstance.TABLE)\n-public class JPAReportletConfInstance extends AbstractEntity<Long> implements ReportletConfInstance {\n+public class JPAReportletConfInstance extends AbstractEntity<Long> {\n \n     private static final long serialVersionUID = -2436055132955674610L;\n \n@@ -50,25 +49,21 @@ public Long getKey() {\n         return id;\n     }\n \n-    @Override\n     public Report getReport() {\n         return report;\n     }\n \n-    @Override\n     public void setReport(final Report report) {\n         checkType(report, JPAReport.class);\n         this.report = (JPAReport) report;\n     }\n \n-    @Override\n     public ReportletConf getInstance() {\n         return serializedInstance == null\n                 ? null\n                 : POJOHelper.deserialize(serializedInstance, ReportletConf.class);\n     }\n \n-    @Override\n     public void setInstance(final ReportletConf instance) {\n         this.serializedInstance = instance == null\n                 ? null"},{"sha":"e244223521eb934686054a472320ed7600ac2645","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASyncPolicy.java","status":"removed","additions":0,"deletions":48,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASyncPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASyncPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASyncPolicy.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,48 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import javax.persistence.DiscriminatorValue;\n-import javax.persistence.Entity;\n-import org.apache.syncope.common.lib.types.SyncPolicySpec;\n-import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.core.misc.serialization.POJOHelper;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n-\n-@Entity\n-@DiscriminatorValue(\"SyncPolicy\")\n-public class JPASyncPolicy extends JPAPolicy implements SyncPolicy {\n-\n-    private static final long serialVersionUID = -6090413855809521279L;\n-\n-    public JPASyncPolicy() {\n-        super();\n-        this.type = PolicyType.SYNC;\n-    }\n-\n-    @Override\n-    public SyncPolicySpec getSpecification() {\n-        return POJOHelper.deserialize(specification, SyncPolicySpec.class);\n-    }\n-\n-    @Override\n-    public void setSpecification(final SyncPolicySpec policy) {\n-        this.specification = POJOHelper.serialize(policy);\n-    }\n-}"},{"sha":"e9b38c3ac7ee8f66400c6d584b52dedebe84147f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAccountPolicy.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -34,7 +34,6 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.types.PolicyType;\n@@ -58,7 +57,7 @@ public class JPAAccountPolicy extends AbstractPolicy implements AccountPolicy {\n     private int maxAuthenticationAttempts;\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"accountPolicy\")\n-    private List<JPAAccountRuleConfInstance> ruleConfs;\n+    private List<JPAAccountRuleConfInstance> ruleConfs = new ArrayList<>();\n \n     /**\n      * Resources for alternative user authentication: if empty, only internal storage will be used.\n@@ -109,14 +108,8 @@ public boolean add(final AccountRuleConf accountRuleConf) {\n     }\n \n     @Override\n-    public boolean remove(final AccountRuleConf accountRuleConf) {\n-        return CollectionUtils.filter(ruleConfs, new Predicate<JPAAccountRuleConfInstance>() {\n-\n-            @Override\n-            public boolean evaluate(final JPAAccountRuleConfInstance object) {\n-                return accountRuleConf.equals(object.getInstance());\n-            }\n-        });\n+    public void removeAllRuleConfs() {\n+        ruleConfs.clear();\n     }\n \n     @Override"},{"sha":"b6013fd46a558743bb79a378ae1e266c1643cea5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPasswordPolicy.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -29,7 +29,6 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.types.PolicyType;\n@@ -51,7 +50,7 @@ public class JPAPasswordPolicy extends AbstractPolicy implements PasswordPolicy\n     private int historyLength;\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"passwordPolicy\")\n-    private List<JPAPasswordRuleConfInstance> ruleConfs;\n+    private List<JPAPasswordRuleConfInstance> ruleConfs = new ArrayList<>();\n \n     public JPAPasswordPolicy() {\n         super();\n@@ -92,14 +91,8 @@ public boolean add(final PasswordRuleConf passwordRuleConf) {\n     }\n \n     @Override\n-    public boolean remove(final PasswordRuleConf passwordRuleConf) {\n-        return CollectionUtils.filter(ruleConfs, new Predicate<JPAPasswordRuleConfInstance>() {\n-\n-            @Override\n-            public boolean evaluate(final JPAPasswordRuleConfInstance object) {\n-                return passwordRuleConf.equals(object.getInstance());\n-            }\n-        });\n+    public void removeAllRuleConfs() {\n+        ruleConfs.clear();\n     }\n \n     @Override"},{"sha":"650ef6a756fa0a8f2b8e637248b15fdd22ffd603","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -46,20 +46,20 @@\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.PropagationMode;\n import org.apache.syncope.common.lib.types.TraceLevel;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.SyncPolicy;\n import org.apache.syncope.core.persistence.jpa.validation.entity.ExternalResourceCheck;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractAnnotatedEntity;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAAccountPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.JPAConnInstance;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAPasswordPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.JPASyncPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPASyncPolicy;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n \n /**"},{"sha":"938502db7913c3d003cbae8ef1d3ee9043bb99a8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/AbstractTask.java","status":"modified","additions":1,"deletions":10,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractTask.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -47,9 +47,6 @@ public abstract class AbstractTask extends AbstractEntity<Long> implements Task\n \n     public static final String TABLE = \"Task\";\n \n-    /**\n-     * Id.\n-     */\n     @Id\n     private Long id;\n \n@@ -58,13 +55,7 @@ public abstract class AbstractTask extends AbstractEntity<Long> implements Task\n     protected TaskType type;\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"task\")\n-    private List<JPATaskExec> executions;\n-\n-    public AbstractTask() {\n-        super();\n-\n-        executions = new ArrayList<>();\n-    }\n+    private List<JPATaskExec> executions = new ArrayList<>();\n \n     @Override\n     public Long getKey() {"},{"sha":"f483a198e9c7cd11c1cc4923983277ba5f46704b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPANotificationTask.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -41,7 +41,7 @@\n \n @Entity\n @DiscriminatorValue(\"NotificationTask\")\n-public class JPANotificationTask extends JPATask implements NotificationTask {\n+public class JPANotificationTask extends AbstractTask implements NotificationTask {\n \n     private static final long serialVersionUID = 95731573485279180L;\n "},{"sha":"e4d969d2ef5882eb8724e38026988ae1c5493018","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPropagationTask.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -45,7 +45,7 @@\n @Entity\n @DiscriminatorValue(\"PropagationTask\")\n @PropagationTaskCheck\n-public class JPAPropagationTask extends JPATask implements PropagationTask {\n+public class JPAPropagationTask extends AbstractTask implements PropagationTask {\n \n     private static final long serialVersionUID = 7086054884614511210L;\n "},{"sha":"d3c0c115387495d4ecb7fabeb4feb092fff6c321","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPASchedTask.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -28,7 +28,7 @@\n @Entity\n @DiscriminatorValue(\"SchedTask\")\n @SchedTaskCheck\n-public class JPASchedTask extends JPATask implements SchedTask {\n+public class JPASchedTask extends AbstractTask implements SchedTask {\n \n     private static final long serialVersionUID = 7596236684832602180L;\n "},{"sha":"f3c6069a77aacc269cc7afb982e8a50c33f93d8b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATask.java","status":"removed","additions":0,"deletions":96,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATask.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -1,96 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.task;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.persistence.CascadeType;\n-import javax.persistence.DiscriminatorColumn;\n-import javax.persistence.Entity;\n-import javax.persistence.EnumType;\n-import javax.persistence.Enumerated;\n-import javax.persistence.Id;\n-import javax.persistence.Inheritance;\n-import javax.persistence.InheritanceType;\n-import javax.persistence.OneToMany;\n-import javax.persistence.Table;\n-import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.core.persistence.api.entity.task.Task;\n-import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n-\n-@Entity\n-@Table(name = JPATask.TABLE)\n-@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n-@DiscriminatorColumn(name = \"DTYPE\")\n-public abstract class JPATask extends AbstractEntity<Long> implements Task {\n-\n-    private static final long serialVersionUID = 5837401178128177511L;\n-\n-    public static final String TABLE = \"Task\";\n-\n-    /**\n-     * Id.\n-     */\n-    @Id\n-    private Long id;\n-\n-    @NotNull\n-    @Enumerated(EnumType.STRING)\n-    protected TaskType type;\n-\n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"task\")\n-    private List<JPATaskExec> executions;\n-\n-    public JPATask() {\n-        super();\n-\n-        executions = new ArrayList<>();\n-    }\n-\n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n-    @Override\n-    public TaskType getType() {\n-        return type;\n-    }\n-\n-    @Override\n-    public boolean addExec(final TaskExec exec) {\n-        checkType(exec, JPATaskExec.class);\n-        return exec != null && !executions.contains((JPATaskExec) exec) && executions.add((JPATaskExec) exec);\n-    }\n-\n-    @Override\n-    public boolean removeExec(final TaskExec exec) {\n-        checkType(exec, JPATaskExec.class);\n-        return exec != null && executions.remove((JPATaskExec) exec);\n-    }\n-\n-    @Override\n-    public List<? extends TaskExec> getExecs() {\n-        return executions;\n-    }\n-\n-}"},{"sha":"6ea4fb59ef1de4f57d24fe715c0858f3d49bda2c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskExec.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskExec.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -29,7 +29,7 @@\n /**\n  * An execution (with result) of a Task.\n  *\n- * @see JPATask\n+ * @see AbstractTask\n  */\n @Entity\n @Table(name = JPATaskExec.TABLE)\n@@ -39,17 +39,14 @@ public class JPATaskExec extends AbstractExec implements TaskExec {\n \n     public static final String TABLE = \"TaskExec\";\n \n-    /**\n-     * Id.\n-     */\n     @Id\n     private Long id;\n \n     /**\n      * The referred task.\n      */\n     @ManyToOne(optional = false)\n-    private JPATask task;\n+    private AbstractTask task;\n \n     @Override\n     public Long getKey() {\n@@ -63,8 +60,8 @@ public Task getTask() {\n \n     @Override\n     public void setTask(final Task task) {\n-        checkType(task, JPATask.class);\n-        this.task = (JPATask) task;\n+        checkType(task, AbstractTask.class);\n+        this.task = (AbstractTask) task;\n     }\n \n     @Override"},{"sha":"7e08ced808ec710219d2e6da53f0f6498bd88f25","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml","status":"modified","additions":19,"deletions":3,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -380,7 +380,7 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPATask\">\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.AbstractTask\">\n     <attributes>\n       <id name=\"id\">\n         <generated-value generator=\"SEQ_Task\" strategy=\"TABLE\"/>\n@@ -397,15 +397,31 @@ under the License.\n     </attributes>\n   </entity>\n     \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAPolicy\">\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.policy.AbstractPolicy\">\n     <attributes>\n       <id name=\"id\">\n         <generated-value generator=\"SEQ_Policy\" strategy=\"TABLE\"/>\n         <table-generator name=\"SEQ_Policy\" pk-column-value=\"SEQ_Policy\" initial-value=\"1000\"/>\n       </id>\n     </attributes>\n   </entity>\n-\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountRuleConfInstance\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_AccountRuleConfInstance\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AccountRuleConfInstance\" pk-column-value=\"SEQ_AccountRuleConfInstance\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordRuleConfInstance\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_PasswordRuleConfInstance\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_PasswordRuleConfInstance\" pk-column-value=\"SEQ_PasswordRuleConfInstance\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAReport\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"7e08ced808ec710219d2e6da53f0f6498bd88f25","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml","status":"modified","additions":19,"deletions":3,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -380,7 +380,7 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPATask\">\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.AbstractTask\">\n     <attributes>\n       <id name=\"id\">\n         <generated-value generator=\"SEQ_Task\" strategy=\"TABLE\"/>\n@@ -397,15 +397,31 @@ under the License.\n     </attributes>\n   </entity>\n     \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAPolicy\">\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.policy.AbstractPolicy\">\n     <attributes>\n       <id name=\"id\">\n         <generated-value generator=\"SEQ_Policy\" strategy=\"TABLE\"/>\n         <table-generator name=\"SEQ_Policy\" pk-column-value=\"SEQ_Policy\" initial-value=\"1000\"/>\n       </id>\n     </attributes>\n   </entity>\n-\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountRuleConfInstance\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_AccountRuleConfInstance\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AccountRuleConfInstance\" pk-column-value=\"SEQ_AccountRuleConfInstance\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordRuleConfInstance\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_PasswordRuleConfInstance\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_PasswordRuleConfInstance\" pk-column-value=\"SEQ_PasswordRuleConfInstance\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAReport\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"7be0d4879c27329b222362d582cf36ea57089538","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml","status":"modified","additions":19,"deletions":3,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -428,7 +428,7 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPATask\">\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.AbstractTask\">\n     <attributes>\n       <id name=\"id\">\n         <generated-value generator=\"SEQ_Task\" strategy=\"TABLE\"/>\n@@ -445,15 +445,31 @@ under the License.\n     </attributes>\n   </entity>\n     \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAPolicy\">\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.policy.AbstractPolicy\">\n     <attributes>\n       <id name=\"id\">\n         <generated-value generator=\"SEQ_Policy\" strategy=\"TABLE\"/>\n         <table-generator name=\"SEQ_Policy\" pk-column-value=\"SEQ_Policy\" initial-value=\"1000\"/>\n       </id>\n     </attributes>\n   </entity>\n-\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountRuleConfInstance\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_AccountRuleConfInstance\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AccountRuleConfInstance\" pk-column-value=\"SEQ_AccountRuleConfInstance\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordRuleConfInstance\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_PasswordRuleConfInstance\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_PasswordRuleConfInstance\" pk-column-value=\"SEQ_PasswordRuleConfInstance\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+    \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAReport\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"fc8305b9595c024eaedf3062cdef315d8912d6c0","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -27,15 +27,15 @@\n import java.util.List;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n+import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.lib.types.SyncPolicySpec;\n+import org.apache.syncope.common.lib.policy.SyncPolicySpec;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.SyncPolicy;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -108,20 +108,21 @@ public void create() {\n \n     @Test\n     public void update() {\n-        PasswordPolicySpec specification = new PasswordPolicySpec();\n-        specification.setMaxLength(8);\n-        specification.setMinLength(6);\n+        DefaultPasswordRuleConf ruleConf = new DefaultPasswordRuleConf();\n+        ruleConf.setMaxLength(8);\n+        ruleConf.setMinLength(6);\n \n         PasswordPolicy policy = policyDAO.find(2L);\n         assertNotNull(policy);\n-        policy.setSpecification(specification);\n+        assertEquals(1, policy.getRuleConfs().size());\n+        policy.add(ruleConf);\n \n         policy = policyDAO.save(policy);\n \n         assertNotNull(policy);\n         assertEquals(PolicyType.PASSWORD, policy.getType());\n-        assertEquals(policy.getSpecification().getMaxLength(), 8);\n-        assertEquals(policy.getSpecification().getMinLength(), 6);\n+        assertEquals(((DefaultPasswordRuleConf) policy.getRuleConfs().get(1)).getMaxLength(), 8);\n+        assertEquals(((DefaultPasswordRuleConf) policy.getRuleConfs().get(1)).getMinLength(), 6);\n     }\n \n     @Test"},{"sha":"0fa7c351d6aea865c0d5cc9c3e38989629878772","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RealmTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -33,8 +33,8 @@\n import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.Test;"},{"sha":"e1d12b1f6300b8bb74f75f5f4c4f9d65f6621e70","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.apache.syncope.core.misc.policy.InvalidPasswordPolicySpecException;\n+import org.apache.syncope.core.misc.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.misc.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.junit.Test;\n@@ -214,7 +214,7 @@ public void issueSYNCOPE226() {\n         String password = \"\";\n         try {\n             password = passwordGenerator.generate(user);\n-        } catch (InvalidPasswordPolicySpecException ex) {\n+        } catch (InvalidPasswordRuleConf ex) {\n             fail(ex.getMessage());\n         }\n         assertNotNull(password);\n@@ -233,7 +233,7 @@ public void testPasswordGenerator() {\n         try {\n             password = passwordGenerator.generate(user);\n \n-        } catch (InvalidPasswordPolicySpecException ex) {\n+        } catch (InvalidPasswordRuleConf ex) {\n             fail(ex.getMessage());\n         }\n         assertNotNull(password);"},{"sha":"1cd5e479ed96c776eeaba456c82ada2bdb654f4d","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;"},{"sha":"6f912b6d4b1e14f4331b6e2b9f8b6038e5247074","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":30,"deletions":20,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -36,7 +36,7 @@ under the License.\n   <PlainSchema name=\"notificationjob.cronExpression\" type=\"String\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"2\" owner_id=\"1\" schema_name=\"notificationjob.cronExpression\"/>\n-  <CPlainAttrValue id=\"2\" attribute_id=\"2\" stringValue=\"0/5 * * * * ?\"/>\n+  <CPlainAttrValue id=\"2\" attribute_id=\"2\" stringValue=\"0/20 * * * * ?\"/>\n   \n   <PlainSchema name=\"notification.maxRetries\" type=\"Long\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n@@ -100,24 +100,34 @@ under the License.\n                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   \n   <!-- sample policies -->\n-  <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"a sync policy\" type=\"SYNC\" \n-          specification='{\"conflictResolutionAction\":\"IGNORE\"'/>\n-  <Policy DTYPE=\"PasswordPolicy\" id=\"2\" description=\"a password policy\" type=\"PASSWORD\" \n-          specification='{\"historyLength\":1,\"maxLength\":0,\"minLength\":8,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":false,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[],\"allowNullPassword\":true}'/>\n-  <Policy DTYPE=\"SyncPolicy\" id=\"3\" description=\"sync policy 2\" type=\"SYNC\" \n-          specification='{\"conflictResolutionAction\":\"ALL\",\"correlationRules\":{\"USER\":\"[\\\"username\\\",\\\"firstname\\\"]\"}}'/>\n-  <Policy DTYPE=\"PasswordPolicy\" id=\"4\" description=\"sample password policy\" type=\"PASSWORD\" \n-          specification='{\"historyLength\":0,\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[], \"allowNullPassword\":true}'/>\n-  <Policy DTYPE=\"AccountPolicy\" id=\"5\" description=\"an account policy\" type=\"ACCOUNT\" \n-          specification='{\"maxLength\":0,\"minLength\":0,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"propagateSuspension\":false,\"maxAuthenticationAttempts\":0,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[],\"suffixesNotPermitted\":[]}'/>\n-  <Policy DTYPE=\"AccountPolicy\" id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\" \n-          specification='{\"maxLength\":0,\"minLength\":4,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"propagateSuspension\":false,\"maxAuthenticationAttempts\":3,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n-  <Policy DTYPE=\"SyncPolicy\" id=\"7\" description=\"sync policy 1\" type=\"SYNC\" \n-          specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n-  <Policy DTYPE=\"PasswordPolicy\" id=\"8\" description=\"sample password policy\" type=\"PASSWORD\" \n-          specification='{\"historyLength\":0,\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[],\"allowNullPassword\":false}'/>\n-  <Policy DTYPE=\"SyncPolicy\" id=\"9\" description=\"sync policy for java rule\" type=\"SYNC\" \n-          specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n+  <SyncPolicy id=\"1\" description=\"a sync policy\" type=\"SYNC\" \n+              specification='{\"conflictResolutionAction\":\"IGNORE\"'/>\n+  <PasswordPolicy id=\"2\" description=\"a password policy\" type=\"PASSWORD\" \n+                  historyLength=\"1\" allowNullPassword=\"1\"/> \n+  <PasswordRuleConfInstance id=\"2\" passwordPolicy_id=\"2\"\n+                            serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":8,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":false,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+  <SyncPolicy id=\"3\" description=\"sync policy 2\" type=\"SYNC\" \n+              specification='{\"conflictResolutionAction\":\"ALL\",\"correlationRules\":{\"USER\":\"[\\\"username\\\",\\\"firstname\\\"]\"}}'/>\n+  <PasswordPolicy id=\"4\" description=\"sample password policy\" type=\"PASSWORD\"\n+                  historyLength=\"0\"  allowNullPassword=\"1\"/> \n+  <PasswordRuleConfInstance id=\"4\" passwordPolicy_id=\"4\"\n+                            serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+  <AccountPolicy id=\"5\" description=\"an account policy\" type=\"ACCOUNT\"\n+                 propagateSuspension=\"0\" maxAuthenticationAttempts=\"0\"/>\n+  <AccountRuleConfInstance id=\"5\" accountPolicy_id=\"5\"\n+                           serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAccountRuleConf\",\"maxLength\":0,\"minLength\":0,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[],\"suffixesNotPermitted\":[]}'/>\n+  <AccountPolicy id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\"\n+                 propagateSuspension=\"0\" maxAuthenticationAttempts=\"3\"/>\n+  <AccountRuleConfInstance id=\"6\" accountPolicy_id=\"6\"\n+                           serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAccountRuleConf\",\"maxLength\":0,\"minLength\":4,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+  <SyncPolicy id=\"7\" description=\"sync policy 1\" type=\"SYNC\" \n+              specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n+  <PasswordPolicy id=\"8\" description=\"sample password policy\" type=\"PASSWORD\"\n+                  historyLength=\"0\" allowNullPassword=\"0\"/> \n+  <PasswordRuleConfInstance id=\"8\" passwordPolicy_id=\"8\"\n+                            serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+  <SyncPolicy id=\"9\" description=\"sync policy for java rule\" type=\"SYNC\" \n+              specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n \n   <RelationshipType name=\"inclusion\" description=\"Models the act that an object is included in another\"/>\n   <RelationshipType name=\"neighborhood\"/>\n@@ -698,7 +708,7 @@ under the License.\n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n \n   <!-- Use resource-testdb for passthrough authentication (SYNCOPE-164) -->\n-  <Policy_ExternalResource accountPolicy_id=\"5\" resource_name=\"resource-testdb\"/>\n+  <AccountPolicy_ExternalResource accountPolicy_id=\"5\" resource_name=\"resource-testdb\"/>\n     \n   <SyncopeUser_ExternalResource user_id=\"1\" resource_name=\"resource-testdb2\"/>\n   <SyncopeUser_ExternalResource user_id=\"3\" resource_name=\"ws-target-resource-delete\"/>"},{"sha":"2874cac141893df604559bf16133bebbac6b37f9","filename":"core/persistence-jpa/src/test/resources/persistenceTest.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2FpersistenceTest.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2FpersistenceTest.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2FpersistenceTest.xml?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -49,6 +49,8 @@ under the License.\n   <context:component-scan base-package=\"org.apache.syncope.core.misc.policy\"/>\n   <context:component-scan base-package=\"org.apache.syncope.core.misc.security\"/>\n \n+  <bean class=\"org.apache.syncope.core.misc.security.DefaultPasswordGenerator\"/>\n+\n   <import resource=\"persistenceContext.xml\"/>\n \n </beans>"},{"sha":"aa144f021da29f927fd464c8a55725bad7daece9","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/PolicyDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FPolicyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FPolicyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FPolicyDataBinder.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n \n public interface PolicyDataBinder {"},{"sha":"f2074f81f0f74c8667ded31e392024db66e0f834","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":60,"deletions":30,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -20,20 +20,24 @@\n \n import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n-import org.apache.syncope.common.lib.to.AccountPolicyTO;\n-import org.apache.syncope.common.lib.to.PasswordPolicyTO;\n-import org.apache.syncope.common.lib.to.SyncPolicyTO;\n+import org.apache.syncope.common.lib.policy.AbstractAccountRuleConf;\n+import org.apache.syncope.common.lib.policy.AbstractPasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.SyncPolicyTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.SyncPolicy;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -59,14 +63,33 @@ public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n         T policyTO;\n         switch (policy.getType()) {\n             case PASSWORD:\n-                policyTO = (T) new PasswordPolicyTO();\n-                ((PasswordPolicyTO) policyTO).setSpecification(((PasswordPolicy) policy).getSpecification());\n+                PasswordPolicy passwordPolicy = PasswordPolicy.class.cast(policy);\n+                PasswordPolicyTO passwordPolicyTO = new PasswordPolicyTO();\n+                policyTO = (T) passwordPolicyTO;\n+\n+                passwordPolicyTO.setAllowNullPassword(passwordPolicy.isAllowNullPassword());\n+                passwordPolicyTO.setHistoryLength(passwordPolicy.getHistoryLength());\n+\n+                passwordPolicyTO.getRuleConfs().clear();\n+                for (PasswordRuleConf ruleConf : passwordPolicy.getRuleConfs()) {\n+                    passwordPolicyTO.getRuleConfs().add((AbstractPasswordRuleConf) ruleConf);\n+                }\n                 break;\n \n             case ACCOUNT:\n-                policyTO = (T) new AccountPolicyTO();\n-                ((AccountPolicyTO) policyTO).setSpecification(((AccountPolicy) policy).getSpecification());\n-                ((AccountPolicyTO) policyTO).getResources().addAll(((AccountPolicy) policy).getResourceNames());\n+                AccountPolicy accountPolicy = AccountPolicy.class.cast(policy);\n+                AccountPolicyTO accountPolicyTO = new AccountPolicyTO();\n+                policyTO = (T) accountPolicyTO;\n+\n+                accountPolicyTO.setMaxAuthenticationAttempts(accountPolicy.getMaxAuthenticationAttempts());\n+                accountPolicyTO.setPropagateSuspension(accountPolicy.isPropagateSuspension());\n+\n+                accountPolicyTO.getRuleConfs().clear();\n+                for (AccountRuleConf ruleConf : accountPolicy.getRuleConfs()) {\n+                    accountPolicyTO.getRuleConfs().add((AbstractAccountRuleConf) ruleConf);\n+                }\n+\n+                accountPolicyTO.getResources().addAll(accountPolicy.getResourceNames());\n                 break;\n \n             case SYNC:\n@@ -88,15 +111,6 @@ public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n         return policyTO;\n     }\n \n-    private ExternalResource getResource(final String resourceName) {\n-        ExternalResource resource = resourceDAO.find(resourceName);\n-        if (resource == null) {\n-            LOG.debug(\"Ignoring invalid resource {} \", resourceName);\n-        }\n-\n-        return resource;\n-    }\n-\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends Policy> T getPolicy(final T policy, final AbstractPolicyTO policyTO) {\n@@ -116,7 +130,16 @@ public <T extends Policy> T getPolicy(final T policy, final AbstractPolicyTO pol\n                 if (result == null) {\n                     result = (T) entityFactory.newEntity(PasswordPolicy.class);\n                 }\n-                ((PasswordPolicy) result).setSpecification(((PasswordPolicyTO) policyTO).getSpecification());\n+                PasswordPolicy passwordPolicy = PasswordPolicy.class.cast(result);\n+                PasswordPolicyTO passwordPolicyTO = PasswordPolicyTO.class.cast(policyTO);\n+\n+                passwordPolicy.setAllowNullPassword(passwordPolicyTO.isAllowNullPassword());\n+                passwordPolicy.setHistoryLength(passwordPolicyTO.getHistoryLength());\n+\n+                passwordPolicy.removeAllRuleConfs();\n+                for (PasswordRuleConf conf : passwordPolicyTO.getRuleConfs()) {\n+                    passwordPolicy.add(conf);\n+                }\n                 break;\n \n             case ACCOUNT:\n@@ -127,17 +150,24 @@ public <T extends Policy> T getPolicy(final T policy, final AbstractPolicyTO pol\n                 if (result == null) {\n                     result = (T) entityFactory.newEntity(AccountPolicy.class);\n                 }\n-                ((AccountPolicy) result).setSpecification(((AccountPolicyTO) policyTO).getSpecification());\n+                AccountPolicy accountPolicy = AccountPolicy.class.cast(result);\n+                AccountPolicyTO accountPolicyTO = AccountPolicyTO.class.cast(policyTO);\n+\n+                accountPolicy.setMaxAuthenticationAttempts(accountPolicyTO.getMaxAuthenticationAttempts());\n+                accountPolicy.setPropagateSuspension(accountPolicyTO.isPropagateSuspension());\n \n-                if (((AccountPolicy) result).getResources() != null\n-                        && !((AccountPolicy) result).getResources().isEmpty()) {\n-                    ((AccountPolicy) result).getResources().clear();\n+                accountPolicy.removeAllRuleConfs();\n+                for (AccountRuleConf conf : accountPolicyTO.getRuleConfs()) {\n+                    accountPolicy.add(conf);\n                 }\n-                for (String resourceName : ((AccountPolicyTO) policyTO).getResources()) {\n-                    ExternalResource resource = getResource(resourceName);\n \n-                    if (resource != null) {\n-                        ((AccountPolicy) result).add(resource);\n+                accountPolicy.getResources().clear();\n+                for (String resourceName : accountPolicyTO.getResources()) {\n+                    ExternalResource resource = resourceDAO.find(resourceName);\n+                    if (resource == null) {\n+                        LOG.debug(\"Ignoring invalid resource {} \", resourceName);\n+                    } else {\n+                        accountPolicy.add(resource);\n                     }\n                 }\n                 break;"},{"sha":"d9a2838e72042666803daa5afddbfdfe51857d3b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -21,9 +21,9 @@\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.provisioning.api.data.RealmDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;"},{"sha":"252b71997d0c0396cfe6c760dc5159508e78c604","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java","status":"modified","additions":8,"deletions":25,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -18,10 +18,9 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import java.util.HashSet;\n-import java.util.Set;\n-import org.apache.syncope.core.provisioning.api.data.ReportDataBinder;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.report.AbstractReportletConf;\n+import org.apache.syncope.core.provisioning.api.data.ReportDataBinder;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n@@ -43,9 +42,6 @@\n @Component\n public class ReportDataBinderImpl implements ReportDataBinder {\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(ReportDataBinder.class);\n \n     private static final String[] IGNORE_REPORT_PROPERTIES = { \"key\", \"reportlets\", \"executions\" };\n@@ -62,16 +58,7 @@ public class ReportDataBinderImpl implements ReportDataBinder {\n     public void getReport(final Report report, final ReportTO reportTO) {\n         BeanUtils.copyProperties(reportTO, report, IGNORE_REPORT_PROPERTIES);\n \n-        // 1. remove all reportlet confs\n-        Set<ReportletConf> toRemove = new HashSet<>();\n-        for (ReportletConf conf : report.getReportletConfs()) {\n-            toRemove.add(conf);\n-        }\n-        for (ReportletConf conf : toRemove) {\n-            report.remove(conf);\n-        }\n-\n-        // 2. take all reportlet confs from reportTO\n+        report.removeAllReportletConfs();\n         for (ReportletConf conf : reportTO.getReportletConfs()) {\n             report.add(conf);\n         }\n@@ -83,11 +70,14 @@ public ReportTO getReportTO(final Report report) {\n         reportTO.setKey(report.getKey());\n         BeanUtils.copyProperties(report, reportTO, IGNORE_REPORT_PROPERTIES);\n \n-        copyReportletConfs(report, reportTO);\n+        reportTO.getReportletConfs().clear();\n+        for (ReportletConf reportletConf : report.getReportletConfs()) {\n+            reportTO.getReportletConfs().add((AbstractReportletConf) reportletConf);\n+        }\n \n         ReportExec latestExec = reportExecDAO.findLatestStarted(report);\n         reportTO.setLatestExecStatus(latestExec == null\n-                ? \"\"\n+                ? StringUtils.EMPTY\n                 : latestExec.getStatus());\n \n         reportTO.setStartDate(latestExec == null\n@@ -120,13 +110,6 @@ public ReportTO getReportTO(final Report report) {\n         return reportTO;\n     }\n \n-    private void copyReportletConfs(final Report report, final ReportTO reportTO) {\n-        reportTO.getReportletConfs().clear();\n-        for (ReportletConf reportletConf : report.getReportletConfs()) {\n-            reportTO.getReportletConfs().add((AbstractReportletConf) reportletConf);\n-        }\n-    }\n-\n     @Override\n     public ReportExecTO getReportExecTO(final ReportExec execution) {\n         ReportExecTO executionTO = new ReportExecTO();"},{"sha":"582110625139694c8319042932ee983f61c4f7c3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -36,14 +36,14 @@\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.SyncPolicy;\n import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.slf4j.Logger;"},{"sha":"3b9dc703844b8f8e91abe410196ed82481beb3a8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncJobDelegate.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.types.SyncPolicySpec;\n+import org.apache.syncope.common.lib.policy.SyncPolicySpec;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;"},{"sha":"642181f34c30b6510b698c3980dc6a8e9a47c0c5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.common.lib.types.SyncPolicySpec;\n+import org.apache.syncope.common.lib.policy.SyncPolicySpec;\n import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;"},{"sha":"a6c4c5d706898181596b8f83570b20788609aaa3","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/PolicyServiceImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -21,10 +21,10 @@\n import java.net.URI;\n import java.util.List;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n-import org.apache.syncope.common.lib.to.AccountPolicyTO;\n-import org.apache.syncope.common.lib.to.PasswordPolicyTO;\n-import org.apache.syncope.common.lib.to.SyncPolicyTO;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n+import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.policy.SyncPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.PolicyService;"},{"sha":"e04053aff0aaeb4975848f932e87dc0e24de7e7b","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -31,8 +31,6 @@\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n-import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n-import org.apache.syncope.common.rest.api.CollectionWrapper;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.ListQuery;\n import org.apache.syncope.common.rest.api.service.ReportService;\n@@ -73,11 +71,6 @@ public PagedResult<ReportTO> list(final ListQuery listQuery) {\n                 logic.count());\n     }\n \n-    @Override\n-    public List<ReportletConfClass> getReportletConfClasses() {\n-        return CollectionWrapper.wrap(logic.getReportletConfClasses(), ReportletConfClass.class);\n-    }\n-\n     @Override\n     public ReportTO read(final Long key) {\n         return logic.read(key);"},{"sha":"47c468d4475f6ed7a1a5c6841b75f0c1650d30f3","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestAccountRuleConf.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRuleConf.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -18,19 +18,20 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import org.apache.syncope.common.lib.AbstractBaseBean;\n-import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.policy.AbstractAccountRuleConf;\n \n-public class TestAccountRuleConf extends AbstractBaseBean implements AccountRuleConf {\n+@XmlRootElement(name = \"testAccountRuleConf\")\n+@XmlType\n+public class TestAccountRuleConf extends AbstractAccountRuleConf {\n \n     private static final long serialVersionUID = -1803947511928491978L;\n \n-    @Override\n-    public String getName() {\n-        return getClass().getName();\n-    }\n+    private String mustContainSubstring = \"YYY\";\n \n     public String getMustContainSubstring() {\n-        return \"YYY\";\n+        return mustContainSubstring;\n     }\n+\n }"},{"sha":"ea412743ee28fac2bb1132ffb140796d49f5efaf","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPasswordRule.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -18,30 +18,30 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import org.apache.syncope.common.lib.policy.AccountRuleConf;\n-import org.apache.syncope.core.misc.policy.AccountPolicyException;\n-import org.apache.syncope.core.persistence.api.dao.AccountRule;\n-import org.apache.syncope.core.persistence.api.dao.AccountRuleConfClass;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.misc.policy.PasswordPolicyException;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRuleConfClass;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.springframework.transaction.annotation.Transactional;\n \n-@AccountRuleConfClass(TestAccountRuleConf.class)\n-public class TestAccountRule implements AccountRule {\n+@PasswordRuleConfClass(TestPasswordRuleConf.class)\n+public class TestPasswordRule implements PasswordRule {\n \n-    private TestAccountRuleConf conf;\n+    private TestPasswordRuleConf conf;\n \n     @Transactional(readOnly = true)\n     @Override\n-    public void enforce(final AccountRuleConf conf, final User user) {\n-        if (conf instanceof TestAccountRuleConf) {\n-            this.conf = TestAccountRuleConf.class.cast(conf);\n+    public void enforce(final PasswordRuleConf conf, final User user) {\n+        if (conf instanceof TestPasswordRuleConf) {\n+            this.conf = TestPasswordRuleConf.class.cast(conf);\n         } else {\n             throw new IllegalArgumentException(\n-                    AccountRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n+                    PasswordRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n         }\n \n-        if (!user.getUsername().contains(this.conf.getMustContainSubstring())) {\n-            throw new AccountPolicyException(\"Username not containing \" + this.conf.getMustContainSubstring());\n+        if (!user.getClearPassword().endsWith(this.conf.getMustEndWith())) {\n+            throw new PasswordPolicyException(\"Password not ending with \" + this.conf.getMustEndWith());\n         }\n     }\n "},{"sha":"c6c64460edd09f0acfd65aea9117cb73aad35d64","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPasswordRuleConf.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRuleConf.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -18,19 +18,20 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import org.apache.syncope.common.lib.AbstractBaseBean;\n-import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.policy.AbstractPasswordRuleConf;\n \n-public class TestAccountRuleConf extends AbstractBaseBean implements AccountRuleConf {\n+@XmlRootElement(name = \"testPasswordRuleConf\")\n+@XmlType\n+public class TestPasswordRuleConf extends AbstractPasswordRuleConf {\n \n     private static final long serialVersionUID = -1803947511928491978L;\n \n-    @Override\n-    public String getName() {\n-        return getClass().getName();\n-    }\n+    private String mustEndWith = \"XXX\";\n \n-    public String getMustContainSubstring() {\n-        return \"YYY\";\n+    public String getMustEndWith() {\n+        return mustEndWith;\n     }\n+\n }"},{"sha":"7ef09975e46820412a90eaeb6df3c75c0f6cb376","filename":"fit/core-reference/src/main/resources/log4j2.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -103,7 +103,7 @@ under the License.\n       <appender-ref ref=\"connid\"/>\n     </asyncLogger>\n     \n-    <asyncLogger name=\"org.apache.syncope\" additivity=\"false\" level=\"ERROR\">\n+    <asyncLogger name=\"org.apache.syncope\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.syncope.core.provisioning\" additivity=\"false\" level=\"INFO\">"},{"sha":"368035e82bc9e3d3816258286791eabcfc4d33fe","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.mod.GroupMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AttrTO;"},{"sha":"a08b8815bb53fca1b0a61ebdf74a480abf771d3c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PolicyITCase.java","status":"modified","additions":23,"deletions":28,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPolicyITCase.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -20,22 +20,24 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.util.Arrays;\n import java.util.List;\n+import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AccountPolicyTO;\n-import org.apache.syncope.common.lib.to.PasswordPolicyTO;\n-import org.apache.syncope.common.lib.to.SyncPolicyTO;\n-import org.apache.syncope.common.lib.types.AccountPolicySpec;\n+import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n+import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.policy.SyncPolicyTO;\n+import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n+import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.lib.types.SyncPolicySpec;\n+import org.apache.syncope.common.lib.policy.SyncPolicySpec;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -116,33 +118,26 @@ public void create() {\n \n     @Test\n     public void update() {\n-        // get global password\n         PasswordPolicyTO globalPolicy = policyService.read(2L);\n \n-        PasswordPolicyTO policy = new PasswordPolicyTO();\n+        PasswordPolicyTO policy = SerializationUtils.clone(globalPolicy);\n         policy.setDescription(\"A simple password policy\");\n-        policy.setSpecification(globalPolicy.getSpecification());\n \n-        // create a new password policy using global password as a template\n+        // create a new password policy using the former as a template\n         policy = createPolicy(policy);\n+        assertNotNull(policy);\n+        assertNotEquals(2L, policy.getKey());\n \n-        // read new password policy\n-        policy = policyService.read(policy.getKey());\n-\n-        assertNotNull(\"find to update did not work\", policy);\n-\n-        PasswordPolicySpec policySpec = policy.getSpecification();\n-        policySpec.setMaxLength(22);\n-        policy.setSpecification(policySpec);\n+        ((DefaultPasswordRuleConf) policy.getRuleConfs().get(0)).setMaxLength(22);\n \n         // update new password policy\n         policyService.update(policy);\n         policy = policyService.read(policy.getKey());\n \n         assertNotNull(policy);\n         assertEquals(PolicyType.PASSWORD, policy.getType());\n-        assertEquals(22, policy.getSpecification().getMaxLength());\n-        assertEquals(8, policy.getSpecification().getMinLength());\n+        assertEquals(22, ((DefaultPasswordRuleConf) policy.getRuleConfs().get(0)).getMaxLength());\n+        assertEquals(8, ((DefaultPasswordRuleConf) policy.getRuleConfs().get(0)).getMinLength());\n     }\n \n     @Test\n@@ -172,10 +167,10 @@ public void issueSYNCOPE553() {\n         AccountPolicyTO policy = new AccountPolicyTO();\n         policy.setDescription(\"SYNCOPE553\");\n \n-        final AccountPolicySpec accountPolicySpec = new AccountPolicySpec();\n-        accountPolicySpec.setMinLength(3);\n-        accountPolicySpec.setMaxLength(8);\n-        policy.setSpecification(accountPolicySpec);\n+        DefaultAccountRuleConf ruleConf = new DefaultAccountRuleConf();\n+        ruleConf.setMinLength(3);\n+        ruleConf.setMaxLength(8);\n+        policy.getRuleConfs().add(ruleConf);\n \n         policy = createPolicy(policy);\n         assertNotNull(policy);\n@@ -187,10 +182,10 @@ public void issueSYNCOPE682() {\n         policy.setDescription(\"SYNCOPE682\");\n         policy.getResources().add(RESOURCE_NAME_LDAP);\n \n-        final AccountPolicySpec accountPolicySpec = new AccountPolicySpec();\n-        accountPolicySpec.setMinLength(3);\n-        accountPolicySpec.setMaxLength(8);\n-        policy.setSpecification(accountPolicySpec);\n+        DefaultAccountRuleConf ruleConf = new DefaultAccountRuleConf();\n+        ruleConf.setMinLength(3);\n+        ruleConf.setMaxLength(8);\n+        policy.getRuleConfs().add(ruleConf);\n \n         policy = createPolicy(policy);\n         assertNotNull(policy);"},{"sha":"c203272bc285ce879ce3b248a56a60b5e6c4dfe6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/RealmITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRealmITCase.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -31,9 +31,9 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.AccountPolicyTO;\n+import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n-import org.apache.syncope.common.lib.types.AccountPolicySpec;\n+import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.service.RealmService;\n import org.junit.FixMethodOrder;\n@@ -136,10 +136,10 @@ public void deletingAccountPolicy() {\n         AccountPolicyTO policy = new AccountPolicyTO();\n         policy.setDescription(\"deletingAccountPolicy\");\n \n-        final AccountPolicySpec accountPolicySpec = new AccountPolicySpec();\n-        accountPolicySpec.setMinLength(3);\n-        accountPolicySpec.setMaxLength(8);\n-        policy.setSpecification(accountPolicySpec);\n+        DefaultAccountRuleConf ruleConf = new DefaultAccountRuleConf();\n+        ruleConf.setMinLength(3);\n+        ruleConf.setMaxLength(8);\n+        policy.getRuleConfs().add(ruleConf);\n \n         policy = createPolicy(policy);\n         assertNotNull(policy);"},{"sha":"e092a1d9473905c09c7333c4b67f79bdedb9fff9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ReportITCase.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -39,7 +39,6 @@\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n-import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -56,9 +55,9 @@ private ReportTO createReport(final ReportTO report) {\n \n     @Test\n     public void getReportletClasses() {\n-        List<ReportletConfClass> reportletClasses = reportService.getReportletConfClasses();\n-        assertNotNull(reportletClasses);\n-        assertFalse(reportletClasses.isEmpty());\n+        List<String> reportlets = syncopeService.info().getReportlets();\n+        assertNotNull(reportlets);\n+        assertFalse(reportlets.isEmpty());\n     }\n \n     @Test"},{"sha":"4604731f1febc8d59928794708bb63b2eacaeeca","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -46,7 +46,7 @@\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n-import org.apache.syncope.common.lib.to.SyncPolicyTO;\n+import org.apache.syncope.common.lib.policy.SyncPolicyTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.to.UserTO;"},{"sha":"5fe876fdb5f06c8209d53566477af60efcb67898","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8cadde8ec53da6834792b356cfe40a454193644/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=b8cadde8ec53da6834792b356cfe40a454193644","patch":"@@ -38,6 +38,7 @@\n import java.util.Set;\n import javax.naming.NamingException;\n import javax.ws.rs.core.EntityTag;\n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -50,6 +51,9 @@\n import org.apache.syncope.common.lib.mod.ResourceAssociationMod;\n import org.apache.syncope.common.lib.mod.StatusMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n+import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n@@ -63,6 +67,7 @@\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -1161,6 +1166,66 @@ public void noContent() throws IOException {\n         assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n     }\n \n+    @Test\n+    public void customPolicyRules() {\n+        // Using custom policy rules with application/xml requires to overwrite\n+        // org.apache.syncope.common.lib.policy.AbstractAccountRuleConf's and / or\n+        // org.apache.syncope.common.lib.policy.AbstractPasswordRuleConf's\n+        // @XmlSeeAlso - the power of JAXB :-/\n+        Assume.assumeTrue(MediaType.APPLICATION_JSON_TYPE.equals(clientFactory.getContentType().getMediaType()));\n+\n+        AccountPolicyTO accountPolicy = new AccountPolicyTO();\n+        accountPolicy.setDescription(\"Account Policy with custom rules\");\n+        accountPolicy.getRuleConfs().add(new TestAccountRuleConf());\n+        accountPolicy = createPolicy(accountPolicy);\n+        assertNotNull(accountPolicy);\n+\n+        PasswordPolicyTO passwordPolicy = new PasswordPolicyTO();\n+        passwordPolicy.setDescription(\"Password Policy with custom rules\");\n+        passwordPolicy.getRuleConfs().add(new TestPasswordRuleConf());\n+        passwordPolicy = createPolicy(passwordPolicy);\n+        assertNotNull(passwordPolicy);\n+\n+        RealmTO realm = realmService.list(\"/even/two\").get(0);\n+        Long oldAccountPolicy = realm.getAccountPolicy();\n+        realm.setAccountPolicy(accountPolicy.getKey());\n+        Long oldPasswordPolicy = realm.getPasswordPolicy();\n+        realm.setPasswordPolicy(passwordPolicy.getKey());\n+        realmService.update(realm);\n+\n+        try {\n+            UserTO user = getUniqueSampleTO(\"custompolicyrules@syncope.apache.org\");\n+            user.setRealm(realm.getFullPath());\n+            try {\n+                createUser(user);\n+                fail();\n+            } catch (SyncopeClientException e) {\n+                assertEquals(ClientExceptionType.InvalidUser, e.getType());\n+                assertTrue(e.getElements().iterator().next().startsWith(\"InvalidPassword\"));\n+            }\n+\n+            user.setPassword(user.getPassword() + \"XXX\");\n+            try {\n+                createUser(user);\n+                fail();\n+            } catch (SyncopeClientException e) {\n+                assertEquals(ClientExceptionType.InvalidUser, e.getType());\n+                assertTrue(e.getElements().iterator().next().startsWith(\"InvalidUsername\"));\n+            }\n+\n+            user.setUsername(\"YYY\" + user.getUsername());\n+            user = createUser(user);\n+            assertNotNull(user);\n+        } finally {\n+            realm.setAccountPolicy(oldAccountPolicy);\n+            realm.setPasswordPolicy(oldPasswordPolicy);\n+            realmService.update(realm);\n+\n+            policyService.delete(passwordPolicy.getKey());\n+            policyService.delete(accountPolicy.getKey());\n+        }\n+    }\n+\n     @Test\n     public void issueSYNCOPE108() {\n         UserTO userTO = getUniqueSampleTO(\"syncope108@syncope.apache.org\");\n@@ -2418,4 +2483,45 @@ public void issueSYNCOPE647() {\n         assertNotNull(connObjectTO);\n         assertEquals(\"newPostalAddress\", connObjectTO.getPlainAttrMap().get(\"postalAddress\").getValues().get(0));\n     }\n+\n+    @Test\n+    public void issueSYNCOPE626() {\n+        PasswordPolicyTO passwordPolicy = new PasswordPolicyTO();\n+        passwordPolicy.setDescription(\"Password Policy for SYNCOPE-626\");\n+\n+        DefaultPasswordRuleConf ruleConf = new DefaultPasswordRuleConf();\n+        ruleConf.setUsernameAllowed(false);\n+        passwordPolicy.getRuleConfs().add(ruleConf);\n+\n+        passwordPolicy = createPolicy(passwordPolicy);\n+        assertNotNull(passwordPolicy);\n+\n+        RealmTO realm = realmService.list(\"/even/two\").get(0);\n+        Long oldPasswordPolicy = realm.getPasswordPolicy();\n+        realm.setPasswordPolicy(passwordPolicy.getKey());\n+        realmService.update(realm);\n+\n+        try {\n+            UserTO user = getUniqueSampleTO(\"syncope626@syncope.apache.org\");\n+            user.setRealm(realm.getFullPath());\n+            user.setPassword(user.getUsername());\n+            try {\n+                createUser(user);\n+                fail();\n+            } catch (SyncopeClientException e) {\n+                assertEquals(ClientExceptionType.InvalidUser, e.getType());\n+                assertTrue(e.getElements().iterator().next().startsWith(\"InvalidPassword\"));\n+            }\n+\n+            user.setPassword(\"password123\");\n+            user = createUser(user);\n+            assertNotNull(user);\n+        } finally {\n+            realm.setPasswordPolicy(oldPasswordPolicy);\n+            realmService.update(realm);\n+\n+            policyService.delete(passwordPolicy.getKey());\n+        }\n+\n+    }\n }"}]}