{"sha":"80589a1b9b384f07670afe4f1581c3ceb2794501","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjgwNTg5YTFiOWIzODRmMDc2NzBhZmU0ZjE1ODFjM2NlYjI3OTQ1MDE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-23T16:40:48Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-23T16:40:48Z"},"message":"FIT server integration tests","tree":{"sha":"b03cc635901224f033515decdb31e75f8482e1eb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b03cc635901224f033515decdb31e75f8482e1eb"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/80589a1b9b384f07670afe4f1581c3ceb2794501","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/80589a1b9b384f07670afe4f1581c3ceb2794501","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/80589a1b9b384f07670afe4f1581c3ceb2794501","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/80589a1b9b384f07670afe4f1581c3ceb2794501/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b7d9addc81adab2defe19e4fc4e6189a805aef2e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b7d9addc81adab2defe19e4fc4e6189a805aef2e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b7d9addc81adab2defe19e4fc4e6189a805aef2e"}],"stats":{"total":12267,"additions":11766,"deletions":501},"files":[{"sha":"84e2bc46b0bb28c347fd35323feef5ae9c0a291c","filename":"core/src/main/java/org/apache/syncope/core/util/ContentExporter.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FContentExporter.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -70,9 +70,9 @@ public class ContentExporter extends AbstractContentDealer {\n                 \"SYNCOPEUSER\", \"UATTR\", \"UATTRVALUE\", \"UATTRUNIQUEVALUE\", \"UDERATTR\", \"UVIRATTR\",\n                 \"MEMBERSHIP\", \"MATTR\", \"MATTRVALUE\", \"MATTRUNIQUEVALUE\", \"MDERATTR\", \"MVIRATTR\"\n             }));\n-    \n+\n     protected final static Set<String> TABLE_SUFFIXES_TO_BE_INCLUDED =\n-            new HashSet<String>(Arrays.asList(new String[] {\"TEMPLATE\"}));\n+            new HashSet<String>(Arrays.asList(new String[] { \"TEMPLATE\" }));\n \n     protected static final Map<String, String> TABLES_TO_BE_FILTERED =\n             Collections.singletonMap(\"TASK\", \"DTYPE <> 'PropagationTask'\");\n@@ -85,10 +85,10 @@ private boolean isTableAllowed(final String tableName) {\n         for (String prefix : TABLE_PREFIXES_TO_BE_EXCLUDED) {\n             if (tableName.toUpperCase().startsWith(prefix)) {\n                 for (String suffix : TABLE_SUFFIXES_TO_BE_INCLUDED) {\n-                    if (!tableName.toUpperCase().endsWith(suffix)) {                       \n+                    if (!tableName.toUpperCase().endsWith(suffix)) {\n                         allowed = false;\n                     }\n-                }               \n+                }\n             }\n         }\n         return allowed;"},{"sha":"26a6cb2835c0b7cf3752c16b7c66893228ee7c6c","filename":"pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -1428,6 +1428,7 @@ under the License.\n             <exclude>**/.*</exclude>\n             <exclude>**/deb/control/conffiles</exclude>\n             <exclude>**/deb/control/control</exclude>\n+            <exclude>**/syncope620/**</exclude>\n           </excludes>\n         </configuration>\n         <executions>"},{"sha":"ad5d322defa595cced2857d88bbe1882755cefb9","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/AttributableOperations.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAttributableOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAttributableOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAttributableOperations.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -81,7 +81,7 @@ private static void populate(final Map<String, AttrTO> updatedAttrs,\n                 if (virtuals) {\n                     result.getVirAttrsToUpdate().add(mod);\n                 } else {\n-                    result.getAttrsToUpdate().add(mod);\n+                    result.getPlainAttrsToUpdate().add(mod);\n                 }\n             } else if (!updatedValues.equals(originalValues)) {\n                 // avoid unwanted inputs\n@@ -93,7 +93,7 @@ private static void populate(final Map<String, AttrTO> updatedAttrs,\n                         if (virtuals) {\n                             result.getVirAttrsToRemove().add(mod.getSchema());\n                         } else {\n-                            result.getAttrsToRemove().add(mod.getSchema());\n+                            result.getPlainAttrsToRemove().add(mod.getSchema());\n                         }\n                     }\n                 }\n@@ -104,7 +104,7 @@ private static void populate(final Map<String, AttrTO> updatedAttrs,\n                     if (virtuals) {\n                         result.getVirAttrsToUpdate().add(mod);\n                     } else {\n-                        result.getAttrsToUpdate().add(mod);\n+                        result.getPlainAttrsToUpdate().add(mod);\n                     }\n                 }\n             }\n@@ -124,15 +124,15 @@ private static void diff(\n         result.setKey(updated.getKey());\n \n         // 2. attributes\n-        Map<String, AttrTO> updatedAttrs = new HashMap<>(updated.getAttrMap());\n-        Map<String, AttrTO> originalAttrs = new HashMap<>(original.getAttrMap());\n+        Map<String, AttrTO> updatedAttrs = new HashMap<>(updated.getPlainAttrMap());\n+        Map<String, AttrTO> originalAttrs = new HashMap<>(original.getPlainAttrMap());\n \n         Set<String> originalAttrNames = new HashSet<>(originalAttrs.keySet());\n         originalAttrNames.removeAll(updatedAttrs.keySet());\n \n         if (!incremental) {\n-            result.getAttrsToRemove().clear();\n-            result.getAttrsToRemove().addAll(originalAttrNames);\n+            result.getPlainAttrsToRemove().clear();\n+            result.getPlainAttrsToRemove().addAll(originalAttrNames);\n         }\n \n         Set<String> emptyUpdatedAttrs = new HashSet<>();\n@@ -144,7 +144,7 @@ private static void diff(\n         }\n         for (String emptyUpdatedAttr : emptyUpdatedAttrs) {\n             updatedAttrs.remove(emptyUpdatedAttr);\n-            result.getAttrsToRemove().add(emptyUpdatedAttr);\n+            result.getPlainAttrsToRemove().add(emptyUpdatedAttr);\n         }\n \n         populate(updatedAttrs, originalAttrs, result);\n@@ -269,8 +269,8 @@ public static UserMod diff(final UserTO updated, final UserTO original, final bo\n                     attrMod.getValuesToBeAdded().addAll(attr.getValues());\n \n                     if (!attrMod.isEmpty()) {\n-                        membMod.getAttrsToUpdate().add(attrMod);\n-                        membMod.getAttrsToRemove().add(attrMod.getSchema());\n+                        membMod.getPlainAttrsToUpdate().add(attrMod);\n+                        membMod.getPlainAttrsToRemove().add(attrMod.getSchema());\n                     }\n                 }\n                 for (AttrTO attr : entry.getValue().getDerAttrs()) {\n@@ -283,7 +283,7 @@ public static UserMod diff(final UserTO updated, final UserTO original, final bo\n \n                     if (!attrMod.isEmpty()) {\n                         membMod.getVirAttrsToUpdate().add(attrMod);\n-                        membMod.getAttrsToRemove().add(attrMod.getSchema());\n+                        membMod.getPlainAttrsToRemove().add(attrMod.getSchema());\n                     }\n                 }\n             }\n@@ -333,7 +333,7 @@ public static RoleMod diff(final RoleTO updated, final RoleTO original, final bo\n         result.setInheritTemplates(updated.isInheritTemplates());\n         result.setInheritAccountPolicy(updated.isInheritAccountPolicy());\n         result.setInheritPasswordPolicy(updated.isInheritPasswordPolicy());\n-        result.setInheritPlainAttrs(updated.isInheritAttrs());\n+        result.setInheritPlainAttrs(updated.isInheritPlainAttrs());\n         result.setInheritDerAttrs(updated.isInheritDerAttrs());\n         result.setInheritVirAttrs(updated.isInheritVirAttrs());\n \n@@ -448,8 +448,8 @@ private static <T extends AbstractAttributableTO, K extends AbstractAttributable\n             final K mod, final T result) {\n \n         // 1. attributes\n-        result.getPlainAttrs().addAll(getUpdateValues(to.getAttrMap(),\n-                mod.getAttrsToRemove(), mod.getAttrsToUpdate()));\n+        result.getPlainAttrs().addAll(getUpdateValues(to.getPlainAttrMap(),\n+                mod.getPlainAttrsToRemove(), mod.getPlainAttrsToUpdate()));\n \n         // 2. derived attributes\n         Map<String, AttrTO> attrs = to.getDerAttrMap();"},{"sha":"2c1c9808783e7e5379b9685de2bca439a36623ef","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/annotation/FormAttributeField.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fannotation%2FFormAttributeField.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fannotation%2FFormAttributeField.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fannotation%2FFormAttributeField.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -32,5 +32,5 @@\n \n     boolean roleSearch() default false;\n \n-    IntMappingType schema() default IntMappingType.UserSchema;\n+    IntMappingType schema() default IntMappingType.UserPlainSchema;\n }"},{"sha":"aa5d442941840dee53607cb38c111a949b3d8a0e","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/mod/AbstractAttributableMod.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAbstractAttributableMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAbstractAttributableMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAbstractAttributableMod.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -61,14 +61,14 @@ public void setKey(final long key) {\n     @XmlElementWrapper(name = \"plainAttrsToRemove\")\n     @XmlElement(name = \"attribute\")\n     @JsonProperty(\"plainAttrsToRemove\")\n-    public Set<String> getAttrsToRemove() {\n+    public Set<String> getPlainAttrsToRemove() {\n         return plainAttrsToRemove;\n     }\n \n     @XmlElementWrapper(name = \"plainAttrsToUpdate\")\n     @XmlElement(name = \"attributeMod\")\n     @JsonProperty(\"plainAttrsToUpdate\")\n-    public Set<AttrMod> getAttrsToUpdate() {\n+    public Set<AttrMod> getPlainAttrsToUpdate() {\n         return plainAttrsToUpdate;\n     }\n "},{"sha":"0082591e8836f14ab3b23a8e4bfe0fecf23d4c41","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/report/AbstractReportletConf.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAbstractReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAbstractReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAbstractReportletConf.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -20,6 +20,7 @@\n \n import javax.xml.bind.annotation.XmlSeeAlso;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n @XmlType\n@@ -31,7 +32,7 @@ public abstract class AbstractReportletConf extends AbstractBaseBean implements\n     private String name;\n \n     public AbstractReportletConf() {\n-        this(\"\");\n+        this(StringUtils.EMPTY);\n         setName(getClass().getName());\n     }\n "},{"sha":"e91252d1f576e8c8852ed8457041b332f9f5bef6","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/report/RoleReportletConf.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FRoleReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FRoleReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FRoleReportletConf.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -52,16 +52,16 @@ public enum Feature {\n     @FormAttributeField(userSearch = true)\n     private String matchingCond;\n \n-    @FormAttributeField(schema = IntMappingType.RoleSchema)\n-    private final List<String> attrs = new ArrayList<String>();\n+    @FormAttributeField(schema = IntMappingType.RolePlainSchema)\n+    private final List<String> attrs = new ArrayList<>();\n \n     @FormAttributeField(schema = IntMappingType.RoleDerivedSchema)\n-    private final List<String> derAttrs = new ArrayList<String>();\n+    private final List<String> derAttrs = new ArrayList<>();\n \n     @FormAttributeField(schema = IntMappingType.RoleVirtualSchema)\n-    private final List<String> virAttrs = new ArrayList<String>();\n+    private final List<String> virAttrs = new ArrayList<>();\n \n-    private final List<Feature> features = new ArrayList<Feature>();\n+    private final List<Feature> features = new ArrayList<>();\n \n     public RoleReportletConf() {\n         super();\n@@ -71,10 +71,10 @@ public RoleReportletConf(final String name) {\n         super(name);\n     }\n \n-    @XmlElementWrapper(name = \"attributes\")\n-    @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"attributes\")\n-    public List<String> getAttrs() {\n+    @XmlElementWrapper(name = \"plainAttributes\")\n+    @XmlElement(name = \"plainAttribute\")\n+    @JsonProperty(\"plainAttributes\")\n+    public List<String> getPlainAttrs() {\n         return attrs;\n     }\n "},{"sha":"c82052ca398bf5f70ee76c2cf6b8c3f7340e1d36","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/report/UserReportletConf.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FUserReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FUserReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FUserReportletConf.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -57,16 +57,16 @@ public enum Feature {\n     @FormAttributeField(userSearch = true)\n     private String matchingCond;\n \n-    @FormAttributeField(schema = IntMappingType.UserSchema)\n-    private final List<String> attrs = new ArrayList<String>();\n+    @FormAttributeField(schema = IntMappingType.UserPlainSchema)\n+    private final List<String> attrs = new ArrayList<>();\n \n     @FormAttributeField(schema = IntMappingType.UserDerivedSchema)\n-    private final List<String> derAttrs = new ArrayList<String>();\n+    private final List<String> derAttrs = new ArrayList<>();\n \n     @FormAttributeField(schema = IntMappingType.UserVirtualSchema)\n-    private final List<String> virAttrs = new ArrayList<String>();\n+    private final List<String> virAttrs = new ArrayList<>();\n \n-    private final List<Feature> features = new ArrayList<Feature>();\n+    private final List<Feature> features = new ArrayList<>();\n \n     public UserReportletConf() {\n         super();\n@@ -76,10 +76,10 @@ public UserReportletConf(final String name) {\n         super(name);\n     }\n \n-    @XmlElementWrapper(name = \"attributes\")\n-    @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"attributes\")\n-    public List<String> getAttrs() {\n+    @XmlElementWrapper(name = \"plainAttributes\")\n+    @XmlElement(name = \"plainAttribute\")\n+    @JsonProperty(\"plainAttributes\")\n+    public List<String> getPlainAttrs() {\n         return attrs;\n     }\n "},{"sha":"78256bafc89edca100c4c3f6f5ebc3937eb7cfba","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/to/ConnObjectTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObjectTO.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -46,7 +46,7 @@ public List<AttrTO> getPlainAttrs() {\n     }\n \n     @JsonIgnore\n-    public Map<String, AttrTO> getAttrMap() {\n+    public Map<String, AttrTO> getPlainAttrMap() {\n         Map<String, AttrTO> result = new HashMap<>(attrs.size());\n         for (AttrTO attributeTO : attrs) {\n             result.put(attributeTO.getSchema(), attributeTO);"},{"sha":"810a143e172d67dc5feb126cfbaea0cdbbac785f","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/to/LoggerTO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FLoggerTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FLoggerTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FLoggerTO.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -29,7 +29,7 @@ public class LoggerTO extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -7794833835668648505L;\n \n-    private String name;\n+    private String key;\n \n     private LoggerLevel level;\n \n@@ -41,11 +41,11 @@ public void setLevel(final LoggerLevel level) {\n         this.level = level;\n     }\n \n-    public String getName() {\n-        return name;\n+    public String getKey() {\n+        return key;\n     }\n \n-    public void setName(final String name) {\n-        this.name = name;\n+    public void setKey(final String key) {\n+        this.key = key;\n     }\n }"},{"sha":"2a353cfea59171c210a7abc64314e3b1c5ffecfc","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/to/RoleTO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -47,7 +47,7 @@ public class RoleTO extends AbstractSubjectTO {\n \n     private boolean inheritTemplates;\n \n-    private boolean inheritAttrs;\n+    private boolean inheritPlainAttrs;\n \n     private boolean inheritDerAttrs;\n \n@@ -123,12 +123,12 @@ public void setInheritTemplates(boolean inheritTemplates) {\n         this.inheritTemplates = inheritTemplates;\n     }\n \n-    public boolean isInheritAttrs() {\n-        return inheritAttrs;\n+    public boolean isInheritPlainAttrs() {\n+        return inheritPlainAttrs;\n     }\n \n-    public void setInheritAttrs(final boolean inheritAttrs) {\n-        this.inheritAttrs = inheritAttrs;\n+    public void setInheritPlainAttrs(final boolean inheritPlainAttrs) {\n+        this.inheritPlainAttrs = inheritPlainAttrs;\n     }\n \n     public boolean isInheritDerAttrs() {"},{"sha":"c55cebd7f2a4456f5e0f7460c87f3e6f9bda678c","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":8,"deletions":13,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -29,30 +29,25 @@ public enum ClientExceptionType {\n     EntityExists(Response.Status.CONFLICT),\n     GenericPersistence(Response.Status.BAD_REQUEST),\n     InvalidSecurityAnswer(Response.Status.BAD_REQUEST),\n+    InvalidEntity(Response.Status.BAD_REQUEST),\n     InvalidLogger(Response.Status.BAD_REQUEST),\n     InvalidConnInstance(Response.Status.BAD_REQUEST),\n     InvalidConnIdConf(Response.Status.BAD_REQUEST),\n     InvalidPolicy(Response.Status.BAD_REQUEST),\n-    InvalidSyncopeConf(Response.Status.BAD_REQUEST),\n-    InvalidSyncopeRole(Response.Status.BAD_REQUEST),\n+    InvalidConf(Response.Status.BAD_REQUEST),\n+    InvalidRole(Response.Status.BAD_REQUEST),\n+    InvalidReport(Response.Status.BAD_REQUEST),\n     InvalidReportExec(Response.Status.BAD_REQUEST),\n     InvalidRoles(Response.Status.BAD_REQUEST),\n     InvalidSchemaDefinition(Response.Status.BAD_REQUEST),\n     InvalidSearchExpression(Response.Status.BAD_REQUEST),\n     InvalidPageOrSize(Response.Status.BAD_REQUEST),\n     InvalidPropagationTaskExecReport(Response.Status.BAD_REQUEST),\n-    InvalidUSchema(Response.Status.BAD_REQUEST),\n-    InvalidUDerSchema(Response.Status.BAD_REQUEST),\n-    InvalidUVirSchema(Response.Status.BAD_REQUEST),\n-    InvalidRSchema(Response.Status.BAD_REQUEST),\n-    InvalidRDerSchema(Response.Status.BAD_REQUEST),\n-    InvalidRVirSchema(Response.Status.BAD_REQUEST),\n-    InvalidMSchema(Response.Status.BAD_REQUEST),\n-    InvalidMDerSchema(Response.Status.BAD_REQUEST),\n-    InvalidMVirSchema(Response.Status.BAD_REQUEST),\n-    InvalidCSchema(Response.Status.BAD_REQUEST),\n+    InvalidPlainSchema(Response.Status.BAD_REQUEST),\n+    InvalidDerSchema(Response.Status.BAD_REQUEST),\n+    InvalidVirSchema(Response.Status.BAD_REQUEST),\n     InvalidSchemaMapping(Response.Status.BAD_REQUEST),\n-    InvalidSyncopeUser(Response.Status.BAD_REQUEST),\n+    InvalidUser(Response.Status.BAD_REQUEST),\n     InvalidExternalResource(Response.Status.BAD_REQUEST),\n     InvalidNotification(Response.Status.BAD_REQUEST),\n     InvalidPropagationTask(Response.Status.BAD_REQUEST),"},{"sha":"7dd60d6df24dcd928033eaaaad07b4a6d2990b29","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/types/IntMappingType.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIntMappingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIntMappingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIntMappingType.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -35,7 +35,7 @@ public enum IntMappingType {\n     // -------------------------\n     // User attribute types (the same in UserMappingType)\n     // -------------------------\n-    UserSchema(AttributableType.USER),\n+    UserPlainSchema(AttributableType.USER),\n     UserDerivedSchema(AttributableType.USER),\n     UserVirtualSchema(AttributableType.USER),\n     UserId(AttributableType.USER),\n@@ -44,7 +44,7 @@ public enum IntMappingType {\n     // -------------------------\n     // Role attribute types (the same in RoleMappingType)\n     // -------------------------\n-    RoleSchema(AttributableType.ROLE),\n+    RolePlainSchema(AttributableType.ROLE),\n     RoleDerivedSchema(AttributableType.ROLE),\n     RoleVirtualSchema(AttributableType.ROLE),\n     RoleId(AttributableType.ROLE),\n@@ -53,7 +53,7 @@ public enum IntMappingType {\n     // -------------------------\n     // Membership attribute types (the same in MembershipMappingType)\n     // -------------------------\n-    MembershipSchema(AttributableType.MEMBERSHIP),\n+    MembershipPlainSchema(AttributableType.MEMBERSHIP),\n     MembershipDerivedSchema(AttributableType.MEMBERSHIP),\n     MembershipVirtualSchema(AttributableType.MEMBERSHIP),\n     MembershipId(AttributableType.MEMBERSHIP);\n@@ -164,7 +164,7 @@ public static boolean contains(final AttributableType attributableType, final St\n      */\n     private enum UserMappingType {\n \n-        UserSchema,\n+        UserPlainSchema,\n         UserDerivedSchema,\n         UserVirtualSchema,\n         UserId,\n@@ -178,7 +178,7 @@ private enum UserMappingType {\n      */\n     private enum RoleMappingType {\n \n-        RoleSchema,\n+        RolePlainSchema,\n         RoleDerivedSchema,\n         RoleVirtualSchema,\n         RoleId,\n@@ -192,7 +192,7 @@ private enum RoleMappingType {\n      */\n     private enum MembershipMappingType {\n \n-        MembershipSchema,\n+        MembershipPlainSchema,\n         MembershipDerivedSchema,\n         MembershipVirtualSchema,\n         MembershipId;"},{"sha":"addc3b94ccd9c4838fd862b41f8ed8ea9abe5a05","filename":"syncope620/common/rest-api/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Frest-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Frest-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fpom.xml?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -73,6 +73,7 @@ under the License.\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-javadoc-plugin</artifactId>\n+        <inherited>true</inherited>\n         <executions>\n           <execution>\n             <id>attach-javadocs</id>"},{"sha":"1ab407dd4c00663538806af513819cdb95cc2736","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/CollectionWrapper.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FCollectionWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FCollectionWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FCollectionWrapper.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -59,7 +59,7 @@ public static List<AuditLoggerName> wrapLogger(final Collection<LoggerTO> logger\n         List<AuditLoggerName> respons = new ArrayList<AuditLoggerName>();\n         for (LoggerTO l : logger) {\n             try {\n-                respons.add(AuditLoggerName.fromLoggerName(l.getName()));\n+                respons.add(AuditLoggerName.fromLoggerName(l.getKey()));\n             } catch (Exception ignore) {\n                 // ignore\n             }\n@@ -71,7 +71,7 @@ public static List<LoggerTO> unwrapLogger(final Collection<AuditLoggerName> audi\n         List<LoggerTO> respons = new ArrayList<LoggerTO>();\n         for (AuditLoggerName l : auditNames) {\n             LoggerTO loggerTO = new LoggerTO();\n-            loggerTO.setName(l.toLoggerName());\n+            loggerTO.setKey(l.toLoggerName());\n             loggerTO.setLevel(LoggerLevel.DEBUG);\n             respons.add(loggerTO);\n         }"},{"sha":"20e58c6ae0888a5ab5cc9be91033cbe8d051d444","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/RESTHeaders.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -77,7 +77,7 @@ public final class RESTHeaders {\n     /**\n      * Declares the type of exception being raised.\n      *\n-     * @see ClientExceptionType\n+     * @see org.apache.syncope.common.lib.types.ClientExceptionType\n      */\n     public static final String ERROR_CODE = \"X-Application-Error-Code\";\n "},{"sha":"1e9f943e814a438c7e448a34b44cff66cc643710","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -72,13 +72,13 @@ public interface ReportService extends JAXRSService {\n     /**\n      * Returns report execution with matching key.\n      *\n-     * @param executionId report execution id to be selected\n+     * @param executionKey report execution id to be selected\n      * @return report execution with matching key\n      */\n     @GET\n-    @Path(\"executions/{executionId}\")\n+    @Path(\"executions/{executionKey}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    ReportExecTO readExecution(@NotNull @PathParam(\"executionId\") Long executionId);\n+    ReportExecTO readExecution(@NotNull @PathParam(\"executionKey\") Long executionKey);\n \n     /**\n      * Returns a paged list of all existing reports.\n@@ -163,11 +163,11 @@ PagedResult<ReportTO> list(\n     /**\n      * Deletes report execution with matching key.\n      *\n-     * @param executionId key of execution report to be deleted\n+     * @param executionKey key of execution report to be deleted\n      */\n     @DELETE\n-    @Path(\"executions/{executionId}\")\n-    void deleteExecution(@NotNull @PathParam(\"executionId\") Long executionId);\n+    @Path(\"executions/{executionKey}\")\n+    void deleteExecution(@NotNull @PathParam(\"executionKey\") Long executionKey);\n \n     /**\n      * Executes the report with matching key.\n@@ -183,13 +183,13 @@ PagedResult<ReportTO> list(\n     /**\n      * Exports the report execution with matching key in the requested format.\n      *\n-     * @param executionId key of execution report to be selected\n+     * @param executionKey key of execution report to be selected\n      * @param fmt file-format selection\n      * @return a stream for content download\n      */\n     @GET\n-    @Path(\"executions/{executionId}/stream\")\n+    @Path(\"executions/{executionKey}/stream\")\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response exportExecutionResult(@NotNull @PathParam(\"executionId\") Long executionId,\n+    Response exportExecutionResult(@NotNull @PathParam(\"executionKey\") Long executionKey,\n             @QueryParam(\"format\") ReportExecExportFormat fmt);\n }"},{"sha":"044025b6c5912f538ac37d72b58a5224c90a5d4c","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -58,7 +58,7 @@ public interface ResourceService extends JAXRSService {\n      * @return connector object from the external resource, for the given type and key\n      */\n     @GET\n-    @Path(\"{resourceKey}/{type}/{id}\")\n+    @Path(\"{resourceKey}/{type}/{key}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     ConnObjectTO getConnectorObject(@NotNull @PathParam(\"resourceKey\") String resourceKey,\n             @NotNull @PathParam(\"type\") SubjectType type, @NotNull @PathParam(\"key\") Long key);"},{"sha":"5d1b7375e16e94043d0c8d1a4e2a1f203f3da7f3","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -264,7 +264,7 @@ PagedResult<RoleTO> search(@QueryParam(PARAM_FIQL) String fiql,\n      * @param type resource association action type\n      * @param resourceNames external resources to be used for propagation-related operations\n      * @return <tt>Response</tt> object featuring\n-     * {@link org.apache.syncope.common.reqres.BulkActionResult} as <tt>Entity</tt>\n+     * {@link BulkActionResult} as <tt>Entity</tt>\n      */\n     @Descriptions({\n         @Description(target = DocTarget.RESPONSE,\n@@ -284,8 +284,7 @@ Response bulkDeassociation(@NotNull @PathParam(\"roleKey\") Long roleKey,\n      * @param roleKey role id.\n      * @param type resource association action type\n      * @param resourceNames external resources to be used for propagation-related operations\n-     * @return <tt>Response</tt> object featuring {@link org.apache.syncope.common.reqres.BulkActionResult}\n-     * as <tt>Entity</tt>\n+     * @return <tt>Response</tt> object featuring {@link BulkActionResult} as <tt>Entity</tt>\n      */\n     @Descriptions({\n         @Description(target = DocTarget.RESPONSE,"},{"sha":"75b6af26df4799276e06aa2e6417fde6e05f2454","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -48,9 +48,9 @@ public interface UserSelfService extends JAXRSService {\n      *\n      * @return <tt>Response</tt> contains special Syncope HTTP header indicating if user self registration and / or\n      * password reset is allowed\n-     * @see org.apache.syncope.common.types.RESTHeaders#SELFREG_ALLOWED\n-     * @see org.apache.syncope.common.types.RESTHeaders#PWDRESET_ALLOWED\n-     * @see org.apache.syncope.common.types.RESTHeaders#PWDRESET_NEEDS_SECURITYQUESTIONS\n+     * @see org.apache.syncope.common.rest.api.RESTHeaders#SELFREG_ALLOWED\n+     * @see org.apache.syncope.common.rest.api.RESTHeaders#PWDRESET_ALLOWED\n+     * @see org.apache.syncope.common.rest.api.RESTHeaders#PWDRESET_NEEDS_SECURITYQUESTIONS\n      */\n     @Descriptions({\n         @Description(target = DocTarget.RESPONSE,"},{"sha":"7b8adedc88aa05f50978b44e33e3f43f16abdc19","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -46,8 +46,8 @@ public interface WorkflowService extends JAXRSService {\n      * @param kind user or role\n      * @return <tt>Response</tt> contains special syncope HTTP header indicating if Activiti is enabled for\n      * users / roles\n-     * @see org.apache.syncope.common.types.RESTHeaders#ACTIVITI_USER_ENABLED\n-     * @see org.apache.syncope.common.types.RESTHeaders#ACTIVITI_ROLE_ENABLED\n+     * @see org.apache.syncope.common.rest.api.RESTHeaders#ACTIVITI_USER_ENABLED\n+     * @see org.apache.syncope.common.rest.api.RESTHeaders#ACTIVITI_ROLE_ENABLED\n      */\n     @Descriptions({\n         @Description(target = DocTarget.RESPONSE,"},{"sha":"564d8f00ee1227241ab6845ca8968b3fced09a00","filename":"syncope620/fit/reference/pom.xml","status":"modified","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fpom.xml?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -132,6 +132,24 @@ under the License.\n       <groupId>org.webjars</groupId>\n       <artifactId>highlightjs</artifactId>\n     </dependency>\n+    \n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.apache.syncope.client</groupId>\n+      <artifactId>syncope-client-lib</artifactId>\n+      <version>${project.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n \n   <build>\n@@ -160,6 +178,45 @@ under the License.\n         </executions>\n       </plugin>\n       \n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-antrun-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <executions>\n+          <execution>\n+            <id>setupCSV</id>\n+            <phase>pre-integration-test</phase>\n+            <configuration>\n+              <target>\n+                <copy file=\"${project.build.directory}/test-classes/test.csv\" todir=\"${test.csvdir.path}\" overwrite=\"true\"/>\n+              </target>\n+            </configuration>\n+            <goals>\n+              <goal>run</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-failsafe-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jaxrsContentType>${jaxrs.content.type}</jaxrsContentType>\n+          </systemPropertyVariables>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <id>verify</id>\n+            <goals>\n+              <goal>verify</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      \n       <plugin>\n         <groupId>org.codehaus.cargo</groupId>\n         <artifactId>cargo-maven2-plugin</artifactId>\n@@ -270,12 +327,22 @@ under the License.\n         <filtering>true</filtering>\n       </resource>\n     </resources>\n+    <testResources>\n+      <testResource>\n+        <directory>src/test/resources</directory>\n+        <filtering>true</filtering>\n+      </testResource>\n+    </testResources>\n   </build>\n   \n   <profiles>\n     <profile>\n       <id>debug</id>\n \n+      <properties>\n+        <skipTests>true</skipTests>\n+      </properties>\n+\n       <build>\n         <defaultGoal>clean verify cargo:run</defaultGoal>\n \n@@ -306,5 +373,59 @@ under the License.\n         </plugins>\n       </build>\n     </profile>\n+    \n+    <profile>\n+      <id>skipTests</id>\n+\n+      <dependencies>\n+        <dependency>\n+          <groupId>com.h2database</groupId>\n+          <artifactId>h2</artifactId>\n+        </dependency>\n+      </dependencies>\n+\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-failsafe-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <configuration>\n+              <skipTests>${skipTests}</skipTests>\n+            </configuration>\n+          </plugin>\n+\n+          <plugin>\n+            <groupId>org.codehaus.cargo</groupId>\n+            <artifactId>cargo-maven2-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <configuration>\n+              <deployables>\n+                <deployable>\n+                  <location>${project.build.directory}/${project.build.finalName}.war</location>\n+                </deployable>\n+              </deployables>\n+            </configuration>\n+            <executions>\n+              <execution>\n+                <id>install-container</id>\n+                <phase>package</phase>\n+                <goals>\n+                  <goal>install</goal>\n+                </goals>\n+              </execution>\n+              <execution>\n+                <id>start-container</id>\n+                <phase>none</phase>\n+              </execution>\n+              <execution>\n+                <id>stop-container</id>\n+                <phase>none</phase>\n+              </execution>\n+            </executions>\n+          </plugin>\n+        </plugins>\n+      </build>\n+    </profile>\n   </profiles>\n </project>"},{"sha":"da25a34c2cd41926ae1b1a5c23cdc623c12ea9a6","filename":"syncope620/fit/reference/src/main/java/org/apache/syncope/fit/server/reference/DoubleValueAttributableTransformer.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FDoubleValueAttributableTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FDoubleValueAttributableTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FDoubleValueAttributableTransformer.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.common.lib.mod.AbstractAttributableMod;\n+import org.apache.syncope.common.lib.mod.AttrMod;\n+import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.server.provisioning.api.AttributableTransformer;\n+\n+/**\n+ * Class for integration tests: transform (by making it double) any attribute value for defined schema.\n+ */\n+public class DoubleValueAttributableTransformer implements AttributableTransformer {\n+\n+    private static final String NAME = \"makeItDouble\";\n+\n+    @Override\n+    public <T extends AbstractAttributableTO> T transform(final T input) {\n+        for (AttrTO attr : input.getPlainAttrs()) {\n+            if (NAME.equals(attr.getSchema())) {\n+                List<String> values = new ArrayList<>(attr.getValues().size());\n+                for (String value : attr.getValues()) {\n+                    try {\n+                        values.add(String.valueOf(2 * Long.valueOf(value)));\n+                    } catch (NumberFormatException e) {\n+                        // ignore\n+                    }\n+                }\n+                attr.getValues().clear();\n+                attr.getValues().addAll(values);\n+            }\n+        }\n+\n+        return input;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributableMod> T transform(final T input) {\n+        for (AttrMod attr : input.getPlainAttrsToUpdate()) {\n+            if (NAME.equals(attr.getSchema())) {\n+                List<String> values = new ArrayList<>(attr.getValuesToBeAdded().size());\n+                for (String value : attr.getValuesToBeAdded()) {\n+                    try {\n+                        values.add(String.valueOf(2 * Long.valueOf(value)));\n+                    } catch (NumberFormatException e) {\n+                        // ignore\n+                    }\n+                }\n+                attr.getValuesToBeAdded().clear();\n+                attr.getValuesToBeAdded().addAll(values);\n+            }\n+        }\n+\n+        return input;\n+    }\n+}"},{"sha":"01da2c953df5b3430e95796349d9d4a62ae48708","filename":"syncope620/fit/reference/src/main/java/org/apache/syncope/fit/server/reference/TestSyncActions.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FTestSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FTestSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FTestSyncActions.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import org.apache.syncope.common.lib.mod.AbstractSubjectMod;\n+import org.apache.syncope.common.lib.mod.AttrMod;\n+import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.server.provisioning.api.sync.ProvisioningProfile;\n+import org.apache.syncope.server.provisioning.java.sync.DefaultSyncActions;\n+import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.quartz.JobExecutionException;\n+\n+public class TestSyncActions extends DefaultSyncActions {\n+\n+    private int counter = 0;\n+\n+    @Override\n+    public <T extends AbstractSubjectTO> SyncDelta beforeProvision(\n+            final ProvisioningProfile<?, ?> profile,\n+            final SyncDelta delta,\n+            final T subject) throws JobExecutionException {\n+\n+        AttrTO attrTO = null;\n+        for (int i = 0; i < subject.getPlainAttrs().size(); i++) {\n+            if (\"fullname\".equals(subject.getPlainAttrs().get(i).getSchema())) {\n+                attrTO = subject.getPlainAttrs().get(i);\n+            }\n+        }\n+        if (attrTO == null) {\n+            attrTO = new AttrTO();\n+            attrTO.setSchema(\"fullname\");\n+            subject.getPlainAttrs().add(attrTO);\n+        }\n+        attrTO.getValues().clear();\n+        attrTO.getValues().add(String.valueOf(counter++));\n+\n+        return delta;\n+    }\n+\n+    @Override\n+    public <T extends AbstractSubjectTO, K extends AbstractSubjectMod> SyncDelta beforeUpdate(\n+            final ProvisioningProfile<?, ?> profile,\n+            final SyncDelta delta,\n+            final T subject,\n+            final K subjectMod) throws JobExecutionException {\n+\n+        subjectMod.getPlainAttrsToRemove().add(\"fullname\");\n+\n+        AttrMod fullnameMod = null;\n+        for (AttrMod attrMod : subjectMod.getPlainAttrsToUpdate()) {\n+            if (\"fullname\".equals(attrMod.getSchema())) {\n+                fullnameMod = attrMod;\n+            }\n+        }\n+        if (fullnameMod == null) {\n+            fullnameMod = new AttrMod();\n+            fullnameMod.setSchema(\"fullname\");\n+            subjectMod.getPlainAttrsToUpdate().add(fullnameMod);\n+        }\n+\n+        fullnameMod.getValuesToBeAdded().clear();\n+        fullnameMod.getValuesToBeAdded().add(String.valueOf(counter++));\n+\n+        return delta;\n+    }\n+}"},{"sha":"8454ec634cac0a17e6594b96c2375fe7a9ee61f1","filename":"syncope620/fit/reference/src/main/java/org/apache/syncope/fit/server/reference/TestSyncRule.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FTestSyncRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FTestSyncRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FTestSyncRule.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import org.apache.syncope.server.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.server.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.server.provisioning.api.sync.SyncCorrelationRule;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+\n+public class TestSyncRule implements SyncCorrelationRule {\n+\n+    @Override\n+    public SearchCond getSearchCond(ConnectorObject connObj) {\n+        AttributeCond cond = new AttributeCond();\n+        cond.setSchema(\"email\");\n+        cond.setType(AttributeCond.Type.EQ);\n+        cond.setExpression(connObj.getName().getNameValue());\n+\n+        return SearchCond.getLeafCond(cond);\n+    }\n+}"},{"sha":"40d649c78f5ae7fea1b5c073e1242137c4de1bd0","filename":"syncope620/fit/reference/src/main/resources/connid.properties","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2Fconnid.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2Fconnid.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2Fconnid.properties?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -16,3 +16,8 @@\n # under the License.\n connid.locations=${connid.location},\\\n connid://${testconnectorserver.key}@localhost:${testconnectorserver.port}\n+\n+## for test only\n+testdb.url=${testdb.url}\n+connid.soap.version=${connid.soap.version}\n+connid.db.table.version=${connid.db.table.version}\n\\ No newline at end of file"},{"sha":"2477c4b066cbd9aa6d386c59bc541a22b542f71b","filename":"syncope620/fit/reference/src/main/resources/logic.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2Flogic.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2Flogic.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2Flogic.properties?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+attributableTransformer=org.apache.syncope.fit.server.reference.DoubleValueAttributableTransformer\n+logicInvocationHandler=org.apache.syncope.server.logic.LogicInvocationHandler"},{"sha":"fc8165796c902d2dff286e5c32ad1a37ede0411f","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/AbstractITCase.java","status":"added","additions":365,"deletions":0,"changes":365,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FAbstractITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,365 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.UUID;\n+import javax.naming.Context;\n+import javax.naming.directory.InitialDirContext;\n+import javax.sql.DataSource;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.lib.mod.AttrMod;\n+import org.apache.syncope.common.lib.mod.RoleMod;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.ConfigurationService;\n+import org.apache.syncope.common.rest.api.service.ConnectorService;\n+import org.apache.syncope.common.rest.api.service.EntitlementService;\n+import org.apache.syncope.common.rest.api.service.LoggerService;\n+import org.apache.syncope.common.rest.api.service.NotificationService;\n+import org.apache.syncope.common.rest.api.service.PolicyService;\n+import org.apache.syncope.common.rest.api.service.ReportService;\n+import org.apache.syncope.common.rest.api.service.ResourceService;\n+import org.apache.syncope.common.rest.api.service.RoleService;\n+import org.apache.syncope.common.rest.api.service.SchemaService;\n+import org.apache.syncope.common.rest.api.service.SecurityQuestionService;\n+import org.apache.syncope.common.rest.api.service.TaskService;\n+import org.apache.syncope.common.rest.api.service.UserSelfService;\n+import org.apache.syncope.common.rest.api.service.UserService;\n+import org.apache.syncope.common.rest.api.service.UserWorkflowService;\n+import org.apache.syncope.common.rest.api.service.WorkflowService;\n+import org.identityconnectors.common.security.Encryptor;\n+import org.junit.BeforeClass;\n+import org.junit.runner.RunWith;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations = { \"classpath:testJDBCContext.xml\" })\n+public abstract class AbstractITCase {\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractITCase.class);\n+\n+    protected static final String ADMIN_UNAME = \"admin\";\n+\n+    protected static final String ADMIN_PWD = \"password\";\n+\n+    private static final String ADDRESS = \"http://localhost:9080/syncope/rest\";\n+\n+    private static final String ENV_KEY_CONTENT_TYPE = \"jaxrsContentType\";\n+\n+    protected static final SyncopeClientFactoryBean clientFactory = new SyncopeClientFactoryBean().setAddress(ADDRESS);\n+\n+    protected static final String RESOURCE_NAME_WS1 = \"ws-target-resource-1\";\n+\n+    protected static final String RESOURCE_NAME_WS2 = \"ws-target-resource-2\";\n+\n+    protected static final String RESOURCE_NAME_LDAP = \"resource-ldap\";\n+\n+    protected static final String RESOURCE_NAME_TESTDB = \"resource-testdb\";\n+\n+    protected static final String RESOURCE_NAME_TESTDB2 = \"resource-testdb2\";\n+\n+    protected static final String RESOURCE_NAME_CSV = \"resource-csv\";\n+\n+    protected static final String RESOURCE_NAME_DBSYNC = \"resource-db-sync\";\n+\n+    protected static final String RESOURCE_NAME_DBVIRATTR = \"resource-db-virattr\";\n+\n+    protected static final String RESOURCE_NAME_NOPROPAGATION = \"ws-target-resource-nopropagation\";\n+\n+    protected static final String RESOURCE_NAME_NOPROPAGATION2 = \"ws-target-resource-nopropagation2\";\n+\n+    protected static final String RESOURCE_NAME_NOPROPAGATION3 = \"ws-target-resource-nopropagation3\";\n+\n+    protected static final String RESOURCE_NAME_NOPROPAGATION4 = \"ws-target-resource-nopropagation4\";\n+\n+    protected static final String RESOURCE_NAME_RESETSYNCTOKEN = \"ws-target-resource-update-resetsynctoken\";\n+\n+    protected static final String RESOURCE_NAME_TIMEOUT = \"ws-target-resource-timeout\";\n+\n+    protected static final String RESOURCE_NAME_MAPPINGS1 = \"ws-target-resource-list-mappings-1\";\n+\n+    protected static final String RESOURCE_NAME_MAPPINGS2 = \"ws-target-resource-list-mappings-2\";\n+\n+    protected static final String RESOURCE_NAME_CREATE = \"ws-target-resource-create\";\n+\n+    protected static final String RESOURCE_NAME_CREATE_SINGLE = \"ws-target-resource-create-single\";\n+\n+    protected static final String RESOURCE_NAME_CREATE_WRONG = \"ws-target-resource-create-wrong\";\n+\n+    protected static final String RESOURCE_NAME_DELETE = \"ws-target-resource-delete\";\n+\n+    protected static final String RESOURCE_NAME_UPDATE = \"ws-target-resource-update\";\n+\n+    protected static final String RESOURCE_NAME_CREATE_NONE = \"ws-target-resource-create-none\";\n+\n+    protected static String ANONYMOUS_UNAME;\n+\n+    protected static String ANONYMOUS_KEY;\n+\n+    protected static SyncopeClient adminClient;\n+\n+    protected static UserService userService;\n+\n+    protected static UserSelfService userSelfService;\n+\n+    protected static UserWorkflowService userWorkflowService;\n+\n+    protected static RoleService roleService;\n+\n+    protected static ResourceService resourceService;\n+\n+    protected static EntitlementService entitlementService;\n+\n+    protected static ConfigurationService configurationService;\n+\n+    protected static ConnectorService connectorService;\n+\n+    protected static LoggerService loggerService;\n+\n+    protected static ReportService reportService;\n+\n+    protected static TaskService taskService;\n+\n+    protected static WorkflowService workflowService;\n+\n+    protected static NotificationService notificationService;\n+\n+    protected static SchemaService schemaService;\n+\n+    protected static PolicyService policyService;\n+\n+    protected static SecurityQuestionService securityQuestionService;\n+\n+    @Autowired\n+    protected DataSource testDataSource;\n+\n+    @BeforeClass\n+    public static void securitySetup() {\n+        InputStream propStream = null;\n+        try {\n+            propStream = Encryptor.class.getResourceAsStream(\"/security.properties\");\n+            Properties props = new Properties();\n+            props.load(propStream);\n+\n+            ANONYMOUS_UNAME = props.getProperty(\"anonymousUser\");\n+            ANONYMOUS_KEY = props.getProperty(\"anonymousKey\");\n+        } catch (Exception e) {\n+            LOG.error(\"Could not read secretKey\", e);\n+        } finally {\n+            IOUtils.closeQuietly(propStream);\n+        }\n+\n+        assertNotNull(ANONYMOUS_UNAME);\n+        assertNotNull(ANONYMOUS_KEY);\n+    }\n+\n+    @BeforeClass\n+    public static void restSetup() {\n+        final String envContentType = System.getProperty(ENV_KEY_CONTENT_TYPE);\n+        if (StringUtils.isNotBlank(envContentType)) {\n+            clientFactory.setContentType(envContentType);\n+        }\n+        LOG.info(\"Performing IT with content type {}\", clientFactory.getContentType().getMediaType());\n+\n+        adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n+\n+        userService = adminClient.getService(UserService.class);\n+        userSelfService = adminClient.getService(UserSelfService.class);\n+        userWorkflowService = adminClient.getService(UserWorkflowService.class);\n+        roleService = adminClient.getService(RoleService.class);\n+        resourceService = adminClient.getService(ResourceService.class);\n+        entitlementService = adminClient.getService(EntitlementService.class);\n+        configurationService = adminClient.getService(ConfigurationService.class);\n+        connectorService = adminClient.getService(ConnectorService.class);\n+        loggerService = adminClient.getService(LoggerService.class);\n+        reportService = adminClient.getService(ReportService.class);\n+        taskService = adminClient.getService(TaskService.class);\n+        policyService = adminClient.getService(PolicyService.class);\n+        workflowService = adminClient.getService(WorkflowService.class);\n+        notificationService = adminClient.getService(NotificationService.class);\n+        schemaService = adminClient.getService(SchemaService.class);\n+        securityQuestionService = adminClient.getService(SecurityQuestionService.class);\n+    }\n+\n+    protected static String getUUIDString() {\n+        return UUID.randomUUID().toString().substring(0, 8);\n+    }\n+\n+    protected static AttrTO attrTO(final String schema, final String value) {\n+        AttrTO attr = new AttrTO();\n+        attr.setSchema(schema);\n+        attr.getValues().add(value);\n+        return attr;\n+    }\n+\n+    protected static AttrMod attrMod(final String schema, final String valueToBeAdded) {\n+        AttrMod attr = new AttrMod();\n+        attr.setSchema(schema);\n+        attr.getValuesToBeAdded().add(valueToBeAdded);\n+        return attr;\n+    }\n+\n+    protected UserTO createUser(final UserTO userTO) {\n+        return createUser(userTO, true);\n+    }\n+\n+    protected UserTO createUser(final UserTO userTO, final boolean storePassword) {\n+        Response response = userService.create(userTO, storePassword);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+        return response.readEntity(UserTO.class);\n+    }\n+\n+    protected UserTO readUser(final String username) {\n+        return userService.read(Long.valueOf(\n+                userService.getUserId(username).getHeaderString(RESTHeaders.USER_ID)));\n+    }\n+\n+    protected UserTO updateUser(final UserMod userMod) {\n+        return userService.update(userMod.getKey(), userMod).readEntity(UserTO.class);\n+    }\n+\n+    protected UserTO deleteUser(final Long id) {\n+        return userService.delete(id).readEntity(UserTO.class);\n+    }\n+\n+    public <T> T getObject(final URI location, final Class<?> serviceClass, final Class<T> resultClass) {\n+        WebClient webClient = WebClient.fromClient(WebClient.client(adminClient.getService(serviceClass)));\n+        webClient.accept(clientFactory.getContentType().getMediaType()).to(location.toASCIIString(), false);\n+\n+        return webClient.get(resultClass);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T extends AbstractSchemaTO> T createSchema(final AttributableType kind,\n+            final SchemaType type, final T schemaTO) {\n+\n+        Response response = schemaService.create(kind, type, schemaTO);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+\n+        return (T) getObject(response.getLocation(), SchemaService.class, schemaTO.getClass());\n+    }\n+\n+    protected RoleTO createRole(final RoleTO newRoleTO) {\n+        Response response = roleService.create(newRoleTO);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+        return getObject(response.getLocation(), RoleService.class, RoleTO.class);\n+    }\n+\n+    protected RoleTO updateRole(final RoleMod roleMod) {\n+        return roleService.update(roleMod.getKey(), roleMod).readEntity(RoleTO.class);\n+    }\n+\n+    protected RoleTO deleteRole(final Long id) {\n+        return roleService.delete(id).readEntity(RoleTO.class);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T extends AbstractPolicyTO> T createPolicy(final T policy) {\n+        Response response = policyService.create(policy);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+        return (T) getObject(response.getLocation(), PolicyService.class, policy.getClass());\n+    }\n+\n+    protected ResourceTO createResource(final ResourceTO resourceTO) {\n+        Response response = resourceService.create(resourceTO);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+        return getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+    }\n+\n+    protected Object getLdapRemoteObject(final String objectDn) {\n+        return getLdapRemoteObject(null, null, objectDn);\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\", \"UseOfObsoleteCollectionType\" })\n+    protected Object getLdapRemoteObject(final String bindDn, final String bindPwd, final String objectDn) {\n+        ResourceTO ldapRes = resourceService.read(RESOURCE_NAME_LDAP);\n+        final Map<String, ConnConfProperty> ldapConnConf =\n+                connectorService.read(ldapRes.getConnectorId()).getConfigurationMap();\n+\n+        Hashtable env = new Hashtable();\n+        env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n+        env.put(Context.PROVIDER_URL, \"ldap://\" + ldapConnConf.get(\"host\").getValues().get(0)\n+                + \":\" + ldapConnConf.get(\"port\").getValues().get(0) + \"/\");\n+        env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n+        env.put(Context.SECURITY_PRINCIPAL,\n+                bindDn == null ? ldapConnConf.get(\"principal\").getValues().get(0) : bindDn);\n+        env.put(Context.SECURITY_CREDENTIALS,\n+                bindPwd == null ? ldapConnConf.get(\"credentials\").getValues().get(0) : bindPwd);\n+\n+        try {\n+            final InitialDirContext ctx = new InitialDirContext(env);\n+            return ctx.lookup(objectDn);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+}"},{"sha":"ae35a2381c582176d5bee0ffdcb30c614d3ad602","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/ActivitiDetector.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FActivitiDetector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FActivitiDetector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FActivitiDetector.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// TODO: REMOVE!!!\n+public class ActivitiDetector {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ActivitiDetector.class);\n+\n+    public static boolean isActivitiEnabledForUsers() {\n+        return false;\n+    }\n+\n+    public static boolean isActivitiEnabledForRoles() {\n+        return false;\n+    }\n+}"},{"sha":"9c18a4d51c8a4dda7b9eafb3e5135ae26deb648c","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/AuthenticationITCase.java","status":"added","additions":440,"deletions":0,"changes":440,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FAuthenticationITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,440 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.security.AccessControlException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.mod.StatusMod;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n+import org.apache.syncope.common.lib.to.WorkflowFormTO;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.lib.wrap.EntitlementTO;\n+import org.apache.syncope.common.lib.wrap.ResourceName;\n+import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.rest.api.service.EntitlementService;\n+import org.apache.syncope.common.rest.api.service.SchemaService;\n+import org.apache.syncope.common.rest.api.service.UserSelfService;\n+import org.apache.syncope.common.rest.api.service.UserService;\n+import org.apache.syncope.server.misc.security.Encryptor;\n+import org.junit.Assume;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class AuthenticationITCase extends AbstractITCase {\n+\n+    private int getFailedLogins(UserService testUserService, long userId) {\n+        UserTO readUserTO = testUserService.read(userId);\n+        assertNotNull(readUserTO);\n+        assertNotNull(readUserTO.getFailedLogins());\n+        return readUserTO.getFailedLogins();\n+    }\n+\n+    private void assertReadFails(UserService userService, long id) {\n+        try {\n+            userService.read(id);\n+            fail(\"access should not work\");\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n+    @Test\n+    public void testAdminEntitlements() {\n+        // 1. as anonymous, read all available entitlements\n+        List<EntitlementTO> allEntitlements = entitlementService.getAllEntitlements();\n+        assertNotNull(allEntitlements);\n+        assertFalse(allEntitlements.isEmpty());\n+\n+        // 2. as admin, read own entitlements\n+        List<EntitlementTO> adminEntitlements = entitlementService.getOwnEntitlements();\n+\n+        assertEquals(new HashSet<String>(CollectionWrapper.unwrap(allEntitlements)),\n+                new HashSet<String>(CollectionWrapper.unwrap(adminEntitlements)));\n+    }\n+\n+    @Test\n+    public void testUserSchemaAuthorization() {\n+        // 0. create a role that can only read schemas\n+        RoleTO authRoleTO = new RoleTO();\n+        authRoleTO.setName(\"authRole\" + getUUIDString());\n+        authRoleTO.setParent(8L);\n+        authRoleTO.getEntitlements().add(\"SCHEMA_READ\");\n+\n+        authRoleTO = createRole(authRoleTO);\n+        assertNotNull(authRoleTO);\n+\n+        String schemaName = \"authTestSchema\" + getUUIDString();\n+\n+        // 1. create a schema (as admin)\n+        PlainSchemaTO schemaTO = new PlainSchemaTO();\n+        schemaTO.setKey(schemaName);\n+        schemaTO.setMandatoryCondition(\"false\");\n+        schemaTO.setType(AttrSchemaType.String);\n+\n+        PlainSchemaTO newPlainSchemaTO = createSchema(AttributableType.USER, SchemaType.PLAIN, schemaTO);\n+        assertEquals(schemaTO, newPlainSchemaTO);\n+\n+        // 2. create an user with the role created above (as admin)\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"auth@test.org\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(authRoleTO.getKey());\n+        AttrTO testAttrTO = new AttrTO();\n+        testAttrTO.setSchema(\"testAttribute\");\n+        testAttrTO.getValues().add(\"a value\");\n+        membershipTO.getPlainAttrs().add(testAttrTO);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        // 3. read the schema created above (as admin) - success\n+        schemaTO = schemaService.read(AttributableType.USER, SchemaType.PLAIN, schemaName);\n+        assertNotNull(schemaTO);\n+\n+        // 4. read the schema created above (as user) - success\n+        SchemaService schemaService2 = clientFactory.create(userTO.getUsername(), \"password123\").getService(\n+                SchemaService.class);\n+\n+        schemaTO = schemaService2.read(AttributableType.USER, SchemaType.PLAIN, schemaName);\n+        assertNotNull(schemaTO);\n+\n+        // 5. update the schema create above (as user) - failure\n+        try {\n+            schemaService2.update(AttributableType.ROLE, SchemaType.PLAIN, schemaName, schemaTO);\n+            fail(\"Schemaupdate as user schould not work\");\n+        } catch (SyncopeClientException e) {\n+            assertNotNull(e);\n+            assertEquals(Response.Status.UNAUTHORIZED, e.getType().getResponseStatus());\n+        } catch (AccessControlException e) {\n+            // CXF Service will throw this exception\n+            assertNotNull(e);\n+        }\n+\n+        assertEquals(0, getFailedLogins(userService, userTO.getKey()));\n+    }\n+\n+    @Test\n+    public void testUserRead() {\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"testuserread@test.org\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7L);\n+        AttrTO testAttrTO = new AttrTO();\n+        testAttrTO.setSchema(\"testAttribute\");\n+        testAttrTO.getValues().add(\"a value\");\n+        membershipTO.getPlainAttrs().add(testAttrTO);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        UserService userService2 = clientFactory.create(userTO.getUsername(), \"password123\").\n+                getService(UserService.class);\n+\n+        UserTO readUserTO = userService2.read(1L);\n+        assertNotNull(readUserTO);\n+\n+        UserService userService3 = clientFactory.create(\"verdi\", ADMIN_PWD).getService(UserService.class);\n+\n+        SyncopeClientException exception = null;\n+        try {\n+            userService3.read(1L);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            exception = e;\n+        }\n+        assertNotNull(exception);\n+        assertEquals(ClientExceptionType.UnauthorizedRole, exception.getType());\n+    }\n+\n+    @Test\n+    public void testUserSearch() {\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"testusersearch@test.org\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7L);\n+        AttrTO testAttrTO = new AttrTO();\n+        testAttrTO.setSchema(\"testAttribute\");\n+        testAttrTO.getValues().add(\"a value\");\n+        membershipTO.getPlainAttrs().add(testAttrTO);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        UserService userService2 = clientFactory.create(userTO.getUsername(), \"password123\").\n+                getService(UserService.class);\n+\n+        PagedResult<UserTO> matchedUsers = userService2.search(\n+                SyncopeClient.getUserSearchConditionBuilder().isNotNull(\"loginDate\").query());\n+        assertNotNull(matchedUsers);\n+        assertFalse(matchedUsers.getResult().isEmpty());\n+        Set<Long> userIds = new HashSet<Long>(matchedUsers.getResult().size());\n+        for (UserTO user : matchedUsers.getResult()) {\n+            userIds.add(user.getKey());\n+        }\n+        assertTrue(userIds.contains(1L));\n+\n+        UserService userService3 = clientFactory.create(\"verdi\", \"password\").getService(UserService.class);\n+\n+        matchedUsers = userService3.search(\n+                SyncopeClient.getUserSearchConditionBuilder().isNotNull(\"loginDate\").query());\n+        assertNotNull(matchedUsers);\n+\n+        userIds = new HashSet<>(matchedUsers.getResult().size());\n+\n+        for (UserTO user : matchedUsers.getResult()) {\n+            userIds.add(user.getKey());\n+        }\n+        assertFalse(userIds.contains(1L));\n+    }\n+\n+    @Test\n+    public void checkFailedLogins() {\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"checkFailedLogin@syncope.apache.org\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7L);\n+        AttrTO testAttrTO = new AttrTO();\n+        testAttrTO.setSchema(\"testAttribute\");\n+        testAttrTO.getValues().add(\"a value\");\n+        membershipTO.getPlainAttrs().add(testAttrTO);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        long userId = userTO.getKey();\n+\n+        UserService userService2 = clientFactory.create(userTO.getUsername(), \"password123\").getService(\n+                UserService.class);\n+        assertEquals(0, getFailedLogins(userService2, userId));\n+\n+        // authentications failed ...\n+        UserService userService3 = clientFactory.create(userTO.getUsername(), \"wrongpwd1\").getService(\n+                UserService.class);\n+        assertReadFails(userService3, userId);\n+        assertReadFails(userService3, userId);\n+\n+        assertEquals(2, getFailedLogins(userService, userId));\n+\n+        UserService userService4 = clientFactory.create(userTO.getUsername(), \"password123\").getService(\n+                UserService.class);\n+        assertEquals(0, getFailedLogins(userService4, userId));\n+    }\n+\n+    @Test\n+    public void checkUserSuspension() {\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"checkSuspension@syncope.apache.org\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7L);\n+        AttrTO testAttrTO = new AttrTO();\n+        testAttrTO.setSchema(\"testAttribute\");\n+        testAttrTO.getValues().add(\"a value\");\n+        membershipTO.getPlainAttrs().add(testAttrTO);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        userTO = createUser(userTO);\n+        long userId = userTO.getKey();\n+        assertNotNull(userTO);\n+\n+        UserService userService2 = clientFactory.create(userTO.getUsername(), \"password123\").\n+                getService(UserService.class);\n+        assertEquals(0, getFailedLogins(userService2, userId));\n+\n+        // authentications failed ...\n+        UserService userService3 = clientFactory.create(userTO.getUsername(), \"wrongpwd1\").\n+                getService(UserService.class);\n+        assertReadFails(userService3, userId);\n+        assertReadFails(userService3, userId);\n+        assertReadFails(userService3, userId);\n+\n+        assertEquals(3, getFailedLogins(userService, userId));\n+\n+        // last authentication before suspension\n+        assertReadFails(userService3, userId);\n+\n+        userTO = userService.read(userTO.getKey());\n+        assertNotNull(userTO);\n+        assertNotNull(userTO.getFailedLogins());\n+        assertEquals(3, userTO.getFailedLogins(), 0);\n+        assertEquals(\"suspended\", userTO.getStatus());\n+\n+        // Access with correct credentials should fail as user is suspended\n+        userService2 = clientFactory.create(userTO.getUsername(), \"password123\").getService(UserService.class);\n+        assertReadFails(userService2, userId);\n+\n+        StatusMod reactivate = new StatusMod();\n+        reactivate.setType(StatusMod.ModType.REACTIVATE);\n+        userTO = userService.status(userTO.getKey(), reactivate).readEntity(UserTO.class);\n+        assertNotNull(userTO);\n+        assertEquals(\"active\", userTO.getStatus());\n+\n+        userService2 = clientFactory.create(userTO.getUsername(), \"password123\").getService(UserService.class);\n+        assertEquals(0, getFailedLogins(userService2, userId));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE48() {\n+        // Parent role, able to create users with role 1\n+        RoleTO parentRole = new RoleTO();\n+        parentRole.setName(\"parentAdminRole\" + getUUIDString());\n+        parentRole.getEntitlements().add(\"USER_CREATE\");\n+        parentRole.getEntitlements().add(\"ROLE_1\");\n+        parentRole.setParent(1L);\n+        parentRole = createRole(parentRole);\n+        assertNotNull(parentRole);\n+\n+        // Child role, with no entitlements\n+        RoleTO childRole = new RoleTO();\n+        childRole.setName(\"childAdminRole\");\n+        childRole.setParent(parentRole.getKey());\n+\n+        childRole = createRole(childRole);\n+        assertNotNull(childRole);\n+\n+        // User with child role, created by admin\n+        UserTO role1Admin = UserITCase.getUniqueSampleTO(\"syncope48admin@apache.org\");\n+        role1Admin.setPassword(\"password\");\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(childRole.getKey());\n+        role1Admin.getMemberships().add(membershipTO);\n+\n+        role1Admin = createUser(role1Admin);\n+        assertNotNull(role1Admin);\n+\n+        UserService userService2 = clientFactory.create(role1Admin.getUsername(), \"password\").getService(\n+                UserService.class);\n+\n+        // User with role 1, created by user with child role created above\n+        UserTO role1User = UserITCase.getUniqueSampleTO(\"syncope48user@apache.org\");\n+        membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(1L);\n+        role1User.getMemberships().add(membershipTO);\n+\n+        Response response = userService2.create(role1User, true);\n+        assertNotNull(response);\n+        role1User = response.readEntity(UserTO.class);\n+        assertNotNull(role1User);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE434() {\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n+\n+        // 1. create user with role 9 (users with role 9 are defined in workflow as subject to approval)\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"createWithReject@syncope.apache.org\");\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(9L);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertEquals(\"createApproval\", userTO.getStatus());\n+\n+        // 2. try to authenticate: fail\n+        EntitlementService myEntitlementService = clientFactory.create(userTO.getUsername(), \"password123\").\n+                getService(EntitlementService.class);\n+        try {\n+            myEntitlementService.getOwnEntitlements();\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+\n+        // 3. approve user\n+        WorkflowFormTO form = userWorkflowService.getFormForUser(userTO.getKey());\n+        form = userWorkflowService.claimForm(form.getTaskId());\n+        Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n+        props.get(\"approve\").setValue(Boolean.TRUE.toString());\n+        form.getProperties().clear();\n+        form.getProperties().addAll(props.values());\n+        userTO = userWorkflowService.submitForm(form);\n+        assertNotNull(userTO);\n+        assertEquals(\"active\", userTO.getStatus());\n+\n+        // 4. try to authenticate again: success\n+        assertNotNull(myEntitlementService.getOwnEntitlements());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE164() throws Exception {\n+        // 1. create user with db resource\n+        UserTO user = UserITCase.getUniqueSampleTO(\"syncope164@syncope.apache.org\");\n+        user.setPassword(\"password1\");\n+        user.getResources().add(RESOURCE_NAME_TESTDB);\n+        user = createUser(user);\n+        assertNotNull(user);\n+\n+        // 2. unlink the resource from the created user\n+        assertNotNull(userService.bulkDeassociation(user.getKey(),\n+                ResourceDeassociationActionType.UNLINK,\n+                CollectionWrapper.wrap(RESOURCE_NAME_TESTDB, ResourceName.class)).\n+                readEntity(BulkActionResult.class));\n+\n+        // 3. change password on Syncope\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(user.getKey());\n+        userMod.setPassword(\"password2\");\n+        user = updateUser(userMod);\n+        assertNotNull(user);\n+\n+        // 4. check that the db resource has still the initial password value\n+        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        String value = jdbcTemplate.queryForObject(\n+                \"SELECT PASSWORD FROM test WHERE ID=?\", String.class, user.getUsername());\n+        assertEquals(Encryptor.getInstance().encode(\"password1\", CipherAlgorithm.SHA1), value.toUpperCase());\n+\n+        // 5. successfully authenticate with old (on db resource) and new (on internal storage) password values\n+        user = clientFactory.create(user.getUsername(), \"password1\").getService(UserSelfService.class).read();\n+        assertNotNull(user);\n+        user = clientFactory.create(user.getUsername(), \"password2\").getService(UserSelfService.class).read();\n+        assertNotNull(user);\n+    }\n+}"},{"sha":"bf35a9ce1311f1073f2ceb36d9fe3b103c4928f6","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/ConfigurationITCase.java","status":"added","additions":210,"deletions":0,"changes":210,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FConfigurationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FConfigurationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FConfigurationITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,210 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UnsupportedEncodingException;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.ConfTO;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class ConfigurationITCase extends AbstractITCase {\n+\n+    @Test\n+    public void create() {\n+        PlainSchemaTO testKey = new PlainSchemaTO();\n+        testKey.setKey(\"testKey\");\n+        testKey.setType(AttrSchemaType.String);\n+        createSchema(AttributableType.CONFIGURATION, SchemaType.PLAIN, testKey);\n+\n+        AttrTO conf = new AttrTO();\n+        conf.setSchema(\"testKey\");\n+        conf.getValues().add(\"testValue\");\n+\n+        configurationService.set(conf.getSchema(), conf);\n+\n+        AttrTO actual = configurationService.read(conf.getSchema());\n+        assertEquals(actual, conf);\n+    }\n+\n+    @Test\n+    public void delete() throws UnsupportedEncodingException {\n+        try {\n+            configurationService.delete(\"nonExistent\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n+        }\n+\n+        AttrTO tokenLength = configurationService.read(\"token.length\");\n+\n+        configurationService.delete(\"token.length\");\n+        try {\n+            configurationService.read(\"token.length\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n+        }\n+\n+        configurationService.set(tokenLength.getSchema(), tokenLength);\n+\n+        AttrTO actual = configurationService.read(tokenLength.getSchema());\n+        assertEquals(actual, tokenLength);\n+    }\n+\n+    @Test\n+    public void list() {\n+        ConfTO wholeConf = configurationService.list();\n+        assertNotNull(wholeConf);\n+        for (AttrTO conf : wholeConf.getPlainAttrs()) {\n+            assertNotNull(conf);\n+        }\n+    }\n+\n+    @Test\n+    public void read() {\n+        AttrTO conf = configurationService.read(\"token.expireTime\");\n+        assertNotNull(conf);\n+    }\n+\n+    @Test\n+    public void update() {\n+        AttrTO expireTime = configurationService.read(\"token.expireTime\");\n+        int value = Integer.parseInt(expireTime.getValues().get(0));\n+        value++;\n+        expireTime.getValues().set(0, value + \"\");\n+\n+        configurationService.set(expireTime.getSchema(), expireTime);\n+\n+        AttrTO newConfigurationTO = configurationService.read(expireTime.getSchema());\n+        assertEquals(expireTime, newConfigurationTO);\n+    }\n+\n+    @Test\n+    public void dbExport() throws IOException {\n+        Response response = configurationService.export();\n+        assertNotNull(response);\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatusInfo().getStatusCode());\n+        assertTrue(response.getMediaType().toString().startsWith(MediaType.TEXT_XML));\n+        String contentDisposition = response.getHeaderString(HttpHeaders.CONTENT_DISPOSITION);\n+        assertNotNull(contentDisposition);\n+\n+        Object entity = response.getEntity();\n+        assertTrue(entity instanceof InputStream);\n+        String configExport = IOUtils.toString((InputStream) entity, SyncopeConstants.DEFAULT_ENCODING);\n+        assertFalse(configExport.isEmpty());\n+        assertTrue(configExport.length() > 1000);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE418() {\n+        PlainSchemaTO failing = new PlainSchemaTO();\n+        failing.setKey(\"http://schemas.examples.org/security/authorization/organizationUnit\");\n+        failing.setType(AttrSchemaType.String);\n+\n+        try {\n+            createSchema(AttributableType.CONFIGURATION, SchemaType.PLAIN, failing);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidPlainSchema, e.getType());\n+\n+            assertNotNull(e.getElements());\n+            assertEquals(1, e.getElements().size());\n+            assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE629() throws IOException {\n+        PlainSchemaTO membershipKey = new PlainSchemaTO();\n+        membershipKey.setKey(\"membershipKey\" + getUUIDString());\n+        membershipKey.setType(AttrSchemaType.String);\n+        createSchema(AttributableType.MEMBERSHIP, SchemaType.PLAIN, membershipKey);\n+\n+        PlainSchemaTO roleKey = new PlainSchemaTO();\n+        roleKey.setKey(\"roleKey\" + getUUIDString());\n+        roleKey.setType(AttrSchemaType.String);\n+        createSchema(AttributableType.ROLE, SchemaType.PLAIN, roleKey);\n+\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"aRole\" + getUUIDString());\n+        roleTO.getMAttrTemplates().add(membershipKey.getKey());\n+        roleTO.getRAttrTemplates().add(roleKey.getKey());\n+        roleTO = createRole(roleTO);\n+\n+        try {\n+            Response response = configurationService.export();\n+            assertNotNull(response);\n+            assertEquals(Response.Status.OK.getStatusCode(), response.getStatusInfo().getStatusCode());\n+            assertTrue(response.getMediaType().toString().startsWith(MediaType.TEXT_XML));\n+            String contentDisposition = response.getHeaderString(HttpHeaders.CONTENT_DISPOSITION);\n+            assertNotNull(contentDisposition);\n+\n+            Object entity = response.getEntity();\n+            assertTrue(entity instanceof InputStream);\n+            String configExport = IOUtils.toString((InputStream) entity, SyncopeConstants.DEFAULT_ENCODING);\n+            assertFalse(configExport.isEmpty());\n+            assertTrue(configExport.length() > 1000);\n+\n+            String[] result = StringUtils.substringsBetween(configExport, \"<RPLAINATTRTEMPLATE\", \"/>\");\n+            assertNotNull(result);\n+            boolean rattrExists = false;\n+            for (String entry : result) {\n+                if (entry.contains(roleKey.getKey())) {\n+                    rattrExists = true;\n+                }\n+            }\n+            assertTrue(rattrExists);\n+\n+            result = StringUtils.substringsBetween(configExport, \"<MPLAINATTRTEMPLATE\", \"/>\");\n+            assertNotNull(result);\n+            boolean mattrExists = false;\n+            for (String entry : result) {\n+                if (entry.contains(membershipKey.getKey())) {\n+                    mattrExists = true;\n+                }\n+            }\n+            assertTrue(mattrExists);\n+        } finally {\n+            deleteRole(roleTO.getKey());\n+        }\n+    }\n+}"},{"sha":"e7d12d9215b12ca9a9b3a8f7c3391f44401cdf55","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/ConnectorITCase.java","status":"added","additions":723,"deletions":0,"changes":723,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FConnectorITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,723 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.BulkAction;\n+import org.apache.syncope.common.lib.to.ConnBundleTO;\n+import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n+import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n+import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.lib.types.ConnectorCapability;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.rest.api.service.ConnectorService;\n+import org.apache.syncope.common.rest.api.service.ResourceService;\n+import org.identityconnectors.common.security.GuardedString;\n+import org.junit.BeforeClass;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class ConnectorITCase extends AbstractITCase {\n+\n+    private static String connectorServerLocation;\n+\n+    private static String connidSoapVersion;\n+\n+    private static String connidDbTableVersion;\n+\n+    private static String testJDBCURL;\n+\n+    @BeforeClass\n+    public static void setUpConnIdBundles() throws IOException {\n+        InputStream propStream = null;\n+        try {\n+            Properties props = new Properties();\n+            propStream = ConnectorITCase.class.getResourceAsStream(\"/connid.properties\");\n+            props.load(propStream);\n+\n+            for (String location : props.getProperty(\"connid.locations\").split(\",\")) {\n+                if (!location.startsWith(\"file\")) {\n+                    connectorServerLocation = location;\n+                }\n+            }\n+\n+            connidSoapVersion = props.getProperty(\"connid.soap.version\");\n+            connidDbTableVersion = props.getProperty(\"connid.db.table.version\");\n+\n+            testJDBCURL = props.getProperty(\"testdb.url\");\n+        } catch (Exception e) {\n+            LOG.error(\"Could not load /connid.properties\", e);\n+        } finally {\n+            IOUtils.closeQuietly(propStream);\n+        }\n+        assertNotNull(connectorServerLocation);\n+        assertNotNull(connidSoapVersion);\n+        assertNotNull(connidDbTableVersion);\n+        assertNotNull(testJDBCURL);\n+    }\n+\n+    @Test(expected = SyncopeClientException.class)\n+    public void createWithException() {\n+        ConnInstanceTO connectorTO = new ConnInstanceTO();\n+\n+        Response response = connectorService.create(connectorTO);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            throw (RuntimeException) clientFactory.getExceptionMapper().fromResponse(response);\n+        }\n+    }\n+\n+    @Test\n+    public void create() {\n+        ConnInstanceTO connectorTO = new ConnInstanceTO();\n+        connectorTO.setLocation(connectorService.read(100L).getLocation());\n+        connectorTO.setVersion(connidSoapVersion);\n+        connectorTO.setConnectorName(\"net.tirasa.connid.bundles.soap.WebServiceConnector\");\n+        connectorTO.setBundleName(\"net.tirasa.connid.bundles.soap\");\n+        connectorTO.setDisplayName(\"Display name\");\n+        connectorTO.setConnRequestTimeout(15);\n+\n+        // set the connector configuration using PropertyTO\n+        Set<ConnConfProperty> conf = new HashSet<>();\n+\n+        ConnConfPropSchema endpointSchema = new ConnConfPropSchema();\n+        endpointSchema.setName(\"endpoint\");\n+        endpointSchema.setType(String.class.getName());\n+        endpointSchema.setRequired(true);\n+        ConnConfProperty endpoint = new ConnConfProperty();\n+        endpoint.setSchema(endpointSchema);\n+        endpoint.getValues().add(\"http://localhost:8888/wssample/services\");\n+        endpoint.getValues().add(\"Provisioning\");\n+        conf.add(endpoint);\n+\n+        ConnConfPropSchema servicenameSchema = new ConnConfPropSchema();\n+        servicenameSchema.setName(\"servicename\");\n+        servicenameSchema.setType(String.class.getName());\n+        servicenameSchema.setRequired(true);\n+        ConnConfProperty servicename = new ConnConfProperty();\n+        servicename.setSchema(servicenameSchema);\n+        conf.add(servicename);\n+\n+        // set connector configuration\n+        connectorTO.getConfiguration().addAll(conf);\n+\n+        // set connector capabilities\n+        connectorTO.getCapabilities().add(ConnectorCapability.TWO_PHASES_CREATE);\n+        connectorTO.getCapabilities().add(ConnectorCapability.ONE_PHASE_CREATE);\n+        connectorTO.getCapabilities().add(ConnectorCapability.TWO_PHASES_UPDATE);\n+\n+        // set connector pool conf\n+        ConnPoolConfTO cpc = new ConnPoolConfTO();\n+        cpc.setMaxObjects(1534);\n+        connectorTO.setPoolConf(cpc);\n+\n+        Response response = connectorService.create(connectorTO);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            throw (RuntimeException) clientFactory.getExceptionMapper().fromResponse(response);\n+        }\n+\n+        ConnInstanceTO actual = getObject(\n+                response.getLocation(), ConnectorService.class, ConnInstanceTO.class);\n+        assertNotNull(actual);\n+\n+        assertEquals(actual.getBundleName(), connectorTO.getBundleName());\n+        assertEquals(actual.getConnectorName(), connectorTO.getConnectorName());\n+        assertEquals(actual.getVersion(), connectorTO.getVersion());\n+        assertEquals(\"Display name\", actual.getDisplayName());\n+        assertEquals(Integer.valueOf(15), actual.getConnRequestTimeout());\n+        assertEquals(connectorTO.getCapabilities(), actual.getCapabilities());\n+        assertNotNull(actual.getPoolConf());\n+        assertEquals(1534, actual.getPoolConf().getMaxObjects().intValue());\n+        assertEquals(10, actual.getPoolConf().getMaxIdle().intValue());\n+\n+        Throwable t = null;\n+\n+        // check update\n+        actual.getCapabilities().remove(ConnectorCapability.TWO_PHASES_UPDATE);\n+        actual.getPoolConf().setMaxObjects(null);\n+\n+        try {\n+            connectorService.update(actual.getKey(), actual);\n+            actual = connectorService.read(actual.getKey());\n+        } catch (SyncopeClientException e) {\n+            LOG.error(\"update failed\", e);\n+            t = e;\n+        }\n+\n+        assertNull(t);\n+        assertNotNull(actual);\n+        assertEquals(EnumSet.of(ConnectorCapability.ONE_PHASE_CREATE, ConnectorCapability.TWO_PHASES_CREATE),\n+                actual.getCapabilities());\n+        assertEquals(10, actual.getPoolConf().getMaxObjects().intValue());\n+\n+        // check also for the deletion of the created object\n+        try {\n+            connectorService.delete(actual.getKey());\n+        } catch (SyncopeClientException e) {\n+            LOG.error(\"delete failed\", e);\n+            t = e;\n+        }\n+\n+        assertNull(t);\n+\n+        // check the non existence\n+        try {\n+            connectorService.read(actual.getKey());\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n+        }\n+    }\n+\n+    @Test\n+    public void update() {\n+        ConnInstanceTO connectorTO = new ConnInstanceTO();\n+\n+        // set connector instance id\n+        connectorTO.setKey(103L);\n+\n+        // set connector version\n+        connectorTO.setVersion(connidSoapVersion);\n+\n+        // set connector name\n+        connectorTO.setConnectorName(\"net.tirasa.connid.bundles.soap.WebServiceConnector\");\n+\n+        // set bundle name\n+        connectorTO.setBundleName(\"net.tirasa.connid.bundles.soap\");\n+\n+        connectorTO.setConnRequestTimeout(20);\n+\n+        // set the connector configuration using PropertyTO\n+        Set<ConnConfProperty> conf = new HashSet<ConnConfProperty>();\n+\n+        ConnConfPropSchema endpointSchema = new ConnConfPropSchema();\n+        endpointSchema.setName(\"endpoint\");\n+        endpointSchema.setType(String.class.getName());\n+        endpointSchema.setRequired(true);\n+        ConnConfProperty endpoint = new ConnConfProperty();\n+        endpoint.setSchema(endpointSchema);\n+        endpoint.getValues().add(\"http://localhost:8888/wssample/services\");\n+        conf.add(endpoint);\n+\n+        ConnConfPropSchema servicenameSchema = new ConnConfPropSchema();\n+        servicenameSchema.setName(\"servicename\");\n+        servicenameSchema.setType(String.class.getName());\n+        servicenameSchema.setRequired(true);\n+        ConnConfProperty servicename = new ConnConfProperty();\n+        servicename.setSchema(servicenameSchema);\n+        servicename.getValues().add(\"Provisioning\");\n+        conf.add(servicename);\n+\n+        // set connector configuration\n+        connectorTO.getConfiguration().addAll(conf);\n+\n+        connectorService.update(connectorTO.getKey(), connectorTO);\n+        ConnInstanceTO actual = connectorService.read(connectorTO.getKey());\n+\n+        assertNotNull(actual);\n+\n+        actual = connectorService.read(actual.getKey());\n+\n+        assertNotNull(actual);\n+        assertEquals(actual.getBundleName(), connectorTO.getBundleName());\n+        assertEquals(actual.getConnectorName(), connectorTO.getConnectorName());\n+        assertEquals(actual.getVersion(), connectorTO.getVersion());\n+        assertEquals(Integer.valueOf(20), actual.getConnRequestTimeout());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE10() {\n+        // ----------------------------------\n+        // Copy resource and connector in order to create new objects.\n+        // ----------------------------------\n+        // Retrieve a connector instance template.\n+        ConnInstanceTO connInstanceTO = connectorService.read(103L);\n+\n+        assertNotNull(connInstanceTO);\n+\n+        // check for resource\n+        List<ResourceTO> resources = resourceService.list(Long.valueOf(103));\n+\n+        assertEquals(4, resources.size());\n+\n+        // Retrieve a resource TO template.\n+        ResourceTO resourceTO = resources.get(0);\n+\n+        // Make it new.\n+        resourceTO.setKey(\"newAbout103\");\n+\n+        // Make it new.\n+        connInstanceTO.setKey(0);\n+        connInstanceTO.setDisplayName(\"newDisplayName\" + getUUIDString());\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // Create a new connector instance.\n+        // ----------------------------------\n+        Response response = connectorService.create(connInstanceTO);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            throw (RuntimeException) clientFactory.getExceptionMapper().fromResponse(response);\n+        }\n+\n+        connInstanceTO = getObject(response.getLocation(), ConnectorService.class, ConnInstanceTO.class);\n+        assertNotNull(connInstanceTO);\n+        assertTrue(connInstanceTO.getCapabilities().isEmpty());\n+\n+        long connId = connInstanceTO.getKey();\n+\n+        // Link resourceTO to the new connector instance.\n+        resourceTO.setConnectorId(connId);\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // Check for connector instance update after resource creation.\n+        // ----------------------------------\n+        response = resourceService.create(resourceTO);\n+        resourceTO = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+\n+        assertNotNull(resourceTO);\n+\n+        resources = resourceService.list(connId);\n+\n+        assertEquals(1, resources.size());\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // Check for spring bean.\n+        // ----------------------------------\n+        ConnInstanceTO connInstanceBean = connectorService.readByResource(resourceTO.getKey());\n+\n+        assertNotNull(connInstanceBean);\n+        assertTrue(connInstanceBean.getCapabilities().isEmpty());\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // Check for spring bean update after connector instance update.\n+        // ----------------------------------\n+        connInstanceTO.getCapabilities().add(ConnectorCapability.SEARCH);\n+\n+        connectorService.update(connInstanceTO.getKey(), connInstanceTO);\n+        ConnInstanceTO actual = connectorService.read(connInstanceTO.getKey());\n+\n+        assertNotNull(actual);\n+        assertFalse(connInstanceTO.getCapabilities().isEmpty());\n+\n+        // check for spring bean update\n+        connInstanceBean = connectorService.readByResource(resourceTO.getKey());\n+\n+        assertFalse(connInstanceBean.getCapabilities().isEmpty());\n+        // ----------------------------------\n+    }\n+\n+    @Test\n+    public void deleteWithException() {\n+        try {\n+            connectorService.delete(0L);\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n+        }\n+    }\n+\n+    @Test\n+    public void list() {\n+        List<ConnInstanceTO> connectorInstanceTOs = connectorService.list(null);\n+        assertNotNull(connectorInstanceTOs);\n+        assertFalse(connectorInstanceTOs.isEmpty());\n+        for (ConnInstanceTO instance : connectorInstanceTOs) {\n+            assertNotNull(instance);\n+        }\n+    }\n+\n+    @Test\n+    public void read() {\n+        ConnInstanceTO connectorInstanceTO = connectorService.read(100L);\n+        assertNotNull(connectorInstanceTO);\n+    }\n+\n+    @Test\n+    public void getBundles() {\n+        List<ConnBundleTO> bundles = connectorService.getBundles(null);\n+        assertNotNull(bundles);\n+        assertFalse(bundles.isEmpty());\n+        for (ConnBundleTO bundle : bundles) {\n+            assertNotNull(bundle);\n+        }\n+    }\n+\n+    @Test\n+    public void getConnectorConfiguration() {\n+        List<ConnConfProperty> props = connectorService.getConfigurationProperties(104L);\n+        assertNotNull(props);\n+        assertFalse(props.isEmpty());\n+    }\n+\n+    @Test\n+    public void checkHiddenProperty() {\n+        ConnInstanceTO connInstanceTO = connectorService.read(100L);\n+\n+        boolean check = false;\n+\n+        for (ConnConfProperty prop : connInstanceTO.getConfiguration()) {\n+            if (\"receiveTimeout\".equals(prop.getSchema().getName())) {\n+                check = true;\n+            }\n+        }\n+        assertTrue(check);\n+    }\n+\n+    @Test\n+    public void checkSelectedLanguage() {\n+        // 1. Check Italian\n+        List<ConnInstanceTO> connectorInstanceTOs = connectorService.list(\"it\");\n+\n+        Map<String, ConnConfProperty> instanceConfMap;\n+        for (ConnInstanceTO instance : connectorInstanceTOs) {\n+            if (\"net.tirasa.connid.bundles.db.table\".equals(instance.getBundleName())) {\n+                instanceConfMap = instance.getConfigurationMap();\n+                assertEquals(\"Utente\", instanceConfMap.get(\"user\").getSchema().getDisplayName());\n+            }\n+        }\n+\n+        // 2. Check English (default)\n+        connectorInstanceTOs = connectorService.list(null);\n+\n+        for (ConnInstanceTO instance : connectorInstanceTOs) {\n+            if (\"net.tirasa.connid.bundles.db.table\".equals(instance.getBundleName())) {\n+                instanceConfMap = instance.getConfigurationMap();\n+                assertEquals(\"User\", instanceConfMap.get(\"user\").getSchema().getDisplayName());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void validate() {\n+        ConnInstanceTO connectorTO = new ConnInstanceTO();\n+        connectorTO.setLocation(connectorServerLocation);\n+        connectorTO.setVersion(connidDbTableVersion);\n+        connectorTO.setConnectorName(\"net.tirasa.connid.bundles.db.table.DatabaseTableConnector\");\n+        connectorTO.setBundleName(\"net.tirasa.connid.bundles.db.table\");\n+        connectorTO.setDisplayName(\"H2Test\");\n+\n+        // set the connector configuration using PropertyTO\n+        Set<ConnConfProperty> conf = new HashSet<ConnConfProperty>();\n+\n+        ConnConfPropSchema jdbcDriverSchema = new ConnConfPropSchema();\n+        jdbcDriverSchema.setName(\"jdbcDriver\");\n+        jdbcDriverSchema.setType(String.class.getName());\n+        jdbcDriverSchema.setRequired(true);\n+        ConnConfProperty jdbcDriver = new ConnConfProperty();\n+        jdbcDriver.setSchema(jdbcDriverSchema);\n+        jdbcDriver.getValues().add(\"org.h2.Driver\");\n+        conf.add(jdbcDriver);\n+\n+        ConnConfPropSchema jdbcUrlTemplateSchema = new ConnConfPropSchema();\n+        jdbcUrlTemplateSchema.setName(\"jdbcUrlTemplate\");\n+        jdbcUrlTemplateSchema.setType(String.class.getName());\n+        jdbcUrlTemplateSchema.setRequired(true);\n+        ConnConfProperty jdbcUrlTemplate = new ConnConfProperty();\n+        jdbcUrlTemplate.setSchema(jdbcUrlTemplateSchema);\n+        jdbcUrlTemplate.getValues().add(testJDBCURL);\n+        conf.add(jdbcUrlTemplate);\n+\n+        ConnConfPropSchema userSchema = new ConnConfPropSchema();\n+        userSchema.setName(\"user\");\n+        userSchema.setType(String.class.getName());\n+        userSchema.setRequired(false);\n+        ConnConfProperty user = new ConnConfProperty();\n+        user.setSchema(userSchema);\n+        user.getValues().add(\"sa\");\n+        conf.add(user);\n+\n+        ConnConfPropSchema passwordSchema = new ConnConfPropSchema();\n+        passwordSchema.setName(\"password\");\n+        passwordSchema.setType(GuardedString.class.getName());\n+        passwordSchema.setRequired(true);\n+        ConnConfProperty password = new ConnConfProperty();\n+        password.setSchema(passwordSchema);\n+        password.getValues().add(\"sa\");\n+        conf.add(password);\n+\n+        ConnConfPropSchema tableSchema = new ConnConfPropSchema();\n+        tableSchema.setName(\"table\");\n+        tableSchema.setType(String.class.getName());\n+        tableSchema.setRequired(true);\n+        ConnConfProperty table = new ConnConfProperty();\n+        table.setSchema(tableSchema);\n+        table.getValues().add(\"test\");\n+        conf.add(table);\n+\n+        ConnConfPropSchema keyColumnSchema = new ConnConfPropSchema();\n+        keyColumnSchema.setName(\"keyColumn\");\n+        keyColumnSchema.setType(String.class.getName());\n+        keyColumnSchema.setRequired(true);\n+        ConnConfProperty keyColumn = new ConnConfProperty();\n+        keyColumn.setSchema(keyColumnSchema);\n+        keyColumn.getValues().add(\"id\");\n+        conf.add(keyColumn);\n+\n+        ConnConfPropSchema passwordColumnSchema = new ConnConfPropSchema();\n+        passwordColumnSchema.setName(\"passwordColumn\");\n+        passwordColumnSchema.setType(String.class.getName());\n+        passwordColumnSchema.setRequired(true);\n+        ConnConfProperty passwordColumn = new ConnConfProperty();\n+        passwordColumn.setSchema(passwordColumnSchema);\n+        passwordColumn.getValues().add(\"password\");\n+        conf.add(passwordColumn);\n+\n+        // set connector configuration\n+        connectorTO.getConfiguration().addAll(conf);\n+\n+        assertTrue(connectorService.check(connectorTO));\n+\n+        conf.remove(password);\n+        password.getValues().clear();\n+        password.getValues().add(\"password\");\n+        conf.add(password);\n+\n+        assertFalse(connectorService.check(connectorTO));\n+    }\n+\n+    @Test\n+    public void getSchemaNames() {\n+        ConnInstanceTO conn = connectorService.read(101L);\n+\n+        List<PlainSchemaTO> schemaNames = connectorService.getSchemaNames(conn.getKey(), conn, true);\n+        assertNotNull(schemaNames);\n+        assertFalse(schemaNames.isEmpty());\n+        assertNotNull(schemaNames.get(0).getKey());\n+        assertNull(schemaNames.get(0).getEnumerationValues());\n+\n+        schemaNames = connectorService.getSchemaNames(conn.getKey(), conn, false);\n+\n+        assertNotNull(schemaNames);\n+        assertEquals(0, schemaNames.size());\n+\n+        conn = connectorService.read(104L);\n+\n+        // to be used with overridden properties\n+        conn.getConfiguration().clear();\n+\n+        schemaNames = connectorService.getSchemaNames(conn.getKey(), conn, true);\n+        assertNotNull(schemaNames);\n+        assertFalse(schemaNames.isEmpty());\n+    }\n+\n+    @Test\n+    public void getSupportedObjectClasses() {\n+        ConnInstanceTO ldap = connectorService.read(105L);\n+        assertNotNull(ldap);\n+\n+        List<ConnIdObjectClassTO> objectClasses = connectorService.getSupportedObjectClasses(ldap.getKey(), ldap);\n+        assertNotNull(objectClasses);\n+        assertEquals(2, objectClasses.size());\n+        assertTrue(objectClasses.contains(ConnIdObjectClassTO.ACCOUNT));\n+        assertTrue(objectClasses.contains(ConnIdObjectClassTO.GROUP));\n+\n+        ConnInstanceTO csv = connectorService.read(104L);\n+        assertNotNull(csv);\n+\n+        objectClasses = connectorService.getSupportedObjectClasses(csv.getKey(), csv);\n+        assertNotNull(objectClasses);\n+        assertEquals(1, objectClasses.size());\n+        assertTrue(objectClasses.contains(ConnIdObjectClassTO.ACCOUNT));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE112() {\n+        // ----------------------------------------\n+        // Create a new connector\n+        // ----------------------------------------\n+        ConnInstanceTO connectorTO = new ConnInstanceTO();\n+\n+        connectorTO.setLocation(connectorService.read(100L).getLocation());\n+\n+        // set connector version\n+        connectorTO.setVersion(connidSoapVersion);\n+\n+        // set connector name\n+        connectorTO.setConnectorName(\"net.tirasa.connid.bundles.soap.WebServiceConnector\");\n+\n+        // set bundle name\n+        connectorTO.setBundleName(\"net.tirasa.connid.bundles.soap\");\n+\n+        // set display name\n+        connectorTO.setDisplayName(\"WSSoap\");\n+\n+        // set the connector configuration using PropertyTO\n+        Set<ConnConfProperty> conf = new HashSet<ConnConfProperty>();\n+\n+        ConnConfPropSchema userSchema = new ConnConfPropSchema();\n+        userSchema.setName(\"endpoint\");\n+        userSchema.setType(String.class.getName());\n+        userSchema.setRequired(true);\n+        ConnConfProperty endpoint = new ConnConfProperty();\n+        endpoint.setSchema(userSchema);\n+        endpoint.getValues().add(\"http://localhost:9080/does_not_work\");\n+        endpoint.setOverridable(true);\n+\n+        ConnConfPropSchema keyColumnSchema = new ConnConfPropSchema();\n+        keyColumnSchema.setName(\"servicename\");\n+        keyColumnSchema.setType(String.class.getName());\n+        keyColumnSchema.setRequired(true);\n+        ConnConfProperty servicename = new ConnConfProperty();\n+        servicename.setSchema(keyColumnSchema);\n+        servicename.getValues().add(\"net.tirasa.connid.bundles.soap.provisioning.interfaces.Provisioning\");\n+        servicename.setOverridable(false);\n+\n+        conf.add(endpoint);\n+        conf.add(servicename);\n+\n+        // set connector configuration\n+        connectorTO.getConfiguration().addAll(conf);\n+\n+        try {\n+            assertFalse(connectorService.check(connectorTO));\n+\n+            Response response = connectorService.create(connectorTO);\n+            if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+                throw (RuntimeException) clientFactory.getExceptionMapper().fromResponse(response);\n+            }\n+\n+            connectorTO = getObject(response.getLocation(), ConnectorService.class, ConnInstanceTO.class);\n+            assertNotNull(connectorTO);\n+            // ----------------------------------------\n+\n+            // ----------------------------------------\n+            // create a resourceTO\n+            // ----------------------------------------\n+            String resourceName = \"checkForPropOverriding\";\n+            ResourceTO resourceTO = new ResourceTO();\n+\n+            resourceTO.setKey(resourceName);\n+            resourceTO.setConnectorId(connectorTO.getKey());\n+\n+            conf = new HashSet<ConnConfProperty>();\n+            endpoint.getValues().clear();\n+            endpoint.getValues().add(\"http://localhost:9080/wssample/services/provisioning\");\n+            conf.add(endpoint);\n+\n+            resourceTO.getConnConfProperties().addAll(conf);\n+\n+            MappingTO mapping = new MappingTO();\n+            resourceTO.setUmapping(mapping);\n+\n+            MappingItemTO mapItem = new MappingItemTO();\n+            mapItem.setExtAttrName(\"uid\");\n+            mapItem.setIntAttrName(\"userId\");\n+            mapItem.setIntMappingType(IntMappingType.UserPlainSchema);\n+            mapItem.setAccountid(true);\n+            mapping.setAccountIdItem(mapItem);\n+            // ----------------------------------------\n+\n+            // ----------------------------------------\n+            // Check connection without saving the resource ....\n+            // ----------------------------------------\n+            assertTrue(resourceService.check(resourceTO));\n+            // ----------------------------------------\n+        } finally {\n+            // Remove connector from db to make test re-runnable\n+            connectorService.delete(connectorTO.getKey());\n+        }\n+    }\n+\n+    @Test\n+    public void reload() {\n+        connectorService.reload();\n+    }\n+\n+    @Test\n+    public void bulkAction() {\n+        final BulkAction bulkAction = new BulkAction();\n+        bulkAction.setOperation(BulkAction.Type.DELETE);\n+\n+        ConnInstanceTO conn = connectorService.read(101L);\n+\n+        conn.setKey(0);\n+        conn.setDisplayName(\"forBulk1\");\n+\n+        bulkAction.getTargets().add(String.valueOf(getObject(\n+                connectorService.create(conn).getLocation(), ConnectorService.class, ConnInstanceTO.class).getKey()));\n+\n+        conn.setDisplayName(\"forBulk2\");\n+\n+        bulkAction.getTargets().add(String.valueOf(getObject(\n+                connectorService.create(conn).getLocation(), ConnectorService.class, ConnInstanceTO.class).getKey()));\n+\n+        Iterator<String> iter = bulkAction.getTargets().iterator();\n+\n+        assertNotNull(connectorService.read(Long.valueOf(iter.next())));\n+        assertNotNull(connectorService.read(Long.valueOf(iter.next())));\n+\n+        connectorService.bulk(bulkAction);\n+\n+        iter = bulkAction.getTargets().iterator();\n+\n+        try {\n+            connectorService.read(Long.valueOf(iter.next()));\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertNotNull(e);\n+        }\n+\n+        try {\n+            connectorService.read(Long.valueOf(iter.next()));\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE605() {\n+\n+        ConnInstanceTO connectorInstanceTO = connectorService.read(103L);\n+        assertTrue(connectorInstanceTO.getCapabilities().isEmpty());\n+\n+        connectorInstanceTO.getCapabilities().add(ConnectorCapability.SEARCH);\n+        connectorService.update(connectorInstanceTO.getKey(), connectorInstanceTO);\n+\n+        ConnInstanceTO updatedCapabilities = connectorService.read(connectorInstanceTO.getKey());\n+        assertNotNull(updatedCapabilities.getCapabilities());\n+        assertTrue(updatedCapabilities.getCapabilities().size() == 1);\n+    }\n+}"},{"sha":"9ac24eabb51f3f571fb37ca50bdefe833c6f6c31","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/DerSchemaITCase.java","status":"added","additions":151,"deletions":0,"changes":151,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FDerSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FDerSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FDerSchemaITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.DerSchemaTO;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class DerSchemaITCase extends AbstractITCase {\n+\n+    @Test\n+    public void list() {\n+        List<DerSchemaTO> derivedSchemas = schemaService.list(AttributableType.USER, SchemaType.DERIVED);\n+        assertFalse(derivedSchemas.isEmpty());\n+        for (DerSchemaTO derivedSchemaTO : derivedSchemas) {\n+            assertNotNull(derivedSchemaTO);\n+        }\n+    }\n+\n+    @Test\n+    public void read() {\n+        DerSchemaTO derivedSchemaTO = schemaService.read(AttributableType.USER, SchemaType.DERIVED,\n+                \"cn\");\n+        assertNotNull(derivedSchemaTO);\n+    }\n+\n+    @Test\n+    public void create() {\n+        DerSchemaTO schema = new DerSchemaTO();\n+        schema.setKey(\"derived\");\n+        schema.setExpression(\"derived_sx + '_' + derived_dx\");\n+\n+        DerSchemaTO actual = createSchema(AttributableType.USER, SchemaType.DERIVED, schema);\n+        assertNotNull(actual);\n+\n+        actual = schemaService.read(AttributableType.USER, SchemaType.DERIVED, actual.getKey());\n+        assertNotNull(actual);\n+        assertEquals(actual.getExpression(), \"derived_sx + '_' + derived_dx\");\n+    }\n+\n+    @Test\n+    public void delete() {\n+        DerSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaType.DERIVED, \"rderiveddata\");\n+        assertNotNull(schema);\n+\n+        schemaService.delete(AttributableType.ROLE, SchemaType.DERIVED, schema.getKey());\n+\n+        try {\n+            schemaService.read(AttributableType.ROLE, SchemaType.DERIVED, \"rderiveddata\");\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        } finally {\n+            // Recreate schema to make test re-runnable\n+            schema = createSchema(AttributableType.ROLE, SchemaType.DERIVED, schema);\n+            assertNotNull(schema);\n+        }\n+    }\n+\n+    @Test\n+    public void update() {\n+        DerSchemaTO schema = schemaService.read(AttributableType.MEMBERSHIP, SchemaType.DERIVED,\n+                \"mderiveddata\");\n+        assertNotNull(schema);\n+        assertEquals(\"mderived_sx + '-' + mderived_dx\", schema.getExpression());\n+        try {\n+            schema.setExpression(\"mderived_sx + '.' + mderived_dx\");\n+\n+            schemaService.update(AttributableType.MEMBERSHIP, SchemaType.DERIVED,\n+                    schema.getKey(), schema);\n+\n+            schema = schemaService.read(AttributableType.MEMBERSHIP, SchemaType.DERIVED, \"mderiveddata\");\n+            assertNotNull(schema);\n+            assertEquals(\"mderived_sx + '.' + mderived_dx\", schema.getExpression());\n+        } finally {\n+            // Set updated back to make test re-runnable\n+            schema.setExpression(\"mderived_sx + '-' + mderived_dx\");\n+            schemaService.update(AttributableType.MEMBERSHIP, SchemaType.DERIVED,\n+                    schema.getKey(), schema);\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE323() {\n+        DerSchemaTO actual = schemaService.read(AttributableType.ROLE, SchemaType.DERIVED, \"rderiveddata\");\n+        assertNotNull(actual);\n+\n+        try {\n+            createSchema(AttributableType.ROLE, SchemaType.DERIVED, actual);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.CONFLICT, e.getType().getResponseStatus());\n+            assertEquals(ClientExceptionType.EntityExists, e.getType());\n+        }\n+\n+        actual.setKey(null);\n+        try {\n+            createSchema(AttributableType.ROLE, SchemaType.DERIVED, actual);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.BAD_REQUEST, e.getType().getResponseStatus());\n+            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE418() {\n+        DerSchemaTO schema = new DerSchemaTO();\n+        schema.setKey(\"http://schemas.examples.org/security/authorization/organizationUnit\");\n+        schema.setExpression(\"derived_sx + '_' + derived_dx\");\n+\n+        try {\n+            createSchema(AttributableType.ROLE, SchemaType.DERIVED, schema);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidDerSchema, e.getType());\n+            assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n+        }\n+    }\n+}"},{"sha":"68510bf06ecaac9152e1ac96b570bca2ea77390d","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/LoggerITCase.java","status":"added","additions":215,"deletions":0,"changes":215,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FLoggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FLoggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FLoggerITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.text.ParseException;\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.EventCategoryTO;\n+import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.common.lib.types.AuditElements.EventCategoryType;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.syncope.common.lib.types.LoggerLevel;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.server.logic.ReportLogic;\n+import org.apache.syncope.server.logic.ResourceLogic;\n+import org.apache.syncope.server.logic.RoleLogic;\n+import org.apache.syncope.server.logic.UserLogic;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class LoggerITCase extends AbstractITCase {\n+\n+    @Test\n+    public void listLogs() {\n+        List<LoggerTO> loggers = loggerService.list(LoggerType.LOG);\n+        assertNotNull(loggers);\n+        assertFalse(loggers.isEmpty());\n+        for (LoggerTO logger : loggers) {\n+            assertNotNull(logger);\n+        }\n+    }\n+\n+    @Test\n+    public void listAudits() throws ParseException {\n+        List<LoggerTO> audits = loggerService.list(LoggerType.AUDIT);\n+\n+        assertNotNull(audits);\n+        assertFalse(audits.isEmpty());\n+        for (LoggerTO audit : audits) {\n+            assertNotNull(AuditLoggerName.fromLoggerName(audit.getKey()));\n+        }\n+    }\n+\n+    @Test\n+    public void setLevel() {\n+        List<LoggerTO> loggers = loggerService.list(LoggerType.LOG);\n+        assertNotNull(loggers);\n+        int startSize = loggers.size();\n+\n+        LoggerTO logger = new LoggerTO();\n+        logger.setKey(\"TEST\");\n+        logger.setLevel(LoggerLevel.INFO);\n+        loggerService.update(LoggerType.LOG, logger.getKey(), logger);\n+        logger = loggerService.read(LoggerType.LOG, logger.getKey());\n+        assertNotNull(logger);\n+        assertEquals(LoggerLevel.INFO, logger.getLevel());\n+\n+        loggers = loggerService.list(LoggerType.LOG);\n+        assertNotNull(loggers);\n+        assertEquals(startSize + 1, loggers.size());\n+\n+        // TEST Delete\n+        loggerService.delete(LoggerType.LOG, \"TEST\");\n+        loggers = loggerService.list(LoggerType.LOG);\n+        assertNotNull(loggers);\n+        assertEquals(startSize, loggers.size());\n+    }\n+\n+    @Test\n+    public void enableDisableAudit() {\n+        AuditLoggerName auditLoggerName = new AuditLoggerName(\n+                EventCategoryType.REST,\n+                ReportLogic.class.getSimpleName(),\n+                null,\n+                \"deleteExecution\",\n+                AuditElements.Result.FAILURE);\n+\n+        List<AuditLoggerName> audits = CollectionWrapper.wrapLogger(loggerService.list(LoggerType.AUDIT));\n+        assertNotNull(audits);\n+        assertFalse(audits.contains(auditLoggerName));\n+\n+        LoggerTO loggerTO = new LoggerTO();\n+        String name = auditLoggerName.toLoggerName();\n+        loggerTO.setKey(name);\n+        loggerTO.setLevel(LoggerLevel.DEBUG);\n+        loggerService.update(LoggerType.AUDIT, name, loggerTO);\n+\n+        audits = CollectionWrapper.wrapLogger(loggerService.list(LoggerType.AUDIT));\n+        assertNotNull(audits);\n+        assertTrue(audits.contains(auditLoggerName));\n+\n+        loggerService.delete(LoggerType.AUDIT, auditLoggerName.toLoggerName());\n+\n+        audits = CollectionWrapper.wrapLogger(loggerService.list(LoggerType.AUDIT));\n+        assertNotNull(audits);\n+        assertFalse(audits.contains(auditLoggerName));\n+    }\n+\n+    @Test\n+    public void listAuditEvents() {\n+        final List<EventCategoryTO> events = loggerService.events();\n+\n+        boolean found = false;\n+\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (UserLogic.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n+                assertEquals(EventCategoryType.REST, eventCategoryTO.getType());\n+                assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n+                assertTrue(eventCategoryTO.getEvents().contains(\"list\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"doCreate\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"setStatusOnWfAdapter\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"resolveReference\"));\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (RoleLogic.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n+                assertEquals(EventCategoryType.REST, eventCategoryTO.getType());\n+                assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n+                assertTrue(eventCategoryTO.getEvents().contains(\"list\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"resolveReference\"));\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (ResourceLogic.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n+                assertEquals(EventCategoryType.REST, eventCategoryTO.getType());\n+                assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n+                assertTrue(eventCategoryTO.getEvents().contains(\"read\"));\n+                assertTrue(eventCategoryTO.getEvents().contains(\"delete\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"resolveReference\"));\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (AttributableType.USER.name().toLowerCase().equals(eventCategoryTO.getCategory())) {\n+                if (RESOURCE_NAME_LDAP.equals(eventCategoryTO.getSubcategory())\n+                        && EventCategoryType.SYNCHRONIZATION == eventCategoryTO.getType()) {\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.CREATE.name().toLowerCase()));\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.UPDATE.name().toLowerCase()));\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.DELETE.name().toLowerCase()));\n+                    found = true;\n+                }\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (AttributableType.USER.name().toLowerCase().equals(eventCategoryTO.getCategory())) {\n+                if (RESOURCE_NAME_CSV.equals(eventCategoryTO.getSubcategory())\n+                        && EventCategoryType.PROPAGATION == eventCategoryTO.getType()) {\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.CREATE.name().toLowerCase()));\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.UPDATE.name().toLowerCase()));\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.DELETE.name().toLowerCase()));\n+                    found = true;\n+                }\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (EventCategoryType.TASK == eventCategoryTO.getType()\n+                    && \"SampleJob\".equals(eventCategoryTO.getCategory())) {\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (EventCategoryType.TASK == eventCategoryTO.getType()\n+                    && \"SyncJob\".equals(eventCategoryTO.getCategory())) {\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n+    }\n+}"},{"sha":"cb09ea884424db7d92be9af242299f49b1bd8b7d","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/NotificationITCase.java","status":"added","additions":172,"deletions":0,"changes":172,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FNotificationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FNotificationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FNotificationITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.NotificationTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.TraceLevel;\n+import org.apache.syncope.common.rest.api.service.NotificationService;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class NotificationITCase extends AbstractITCase {\n+\n+    private NotificationTO buildNotificationTO() {\n+        NotificationTO notificationTO = new NotificationTO();\n+        notificationTO.setTraceLevel(TraceLevel.SUMMARY);\n+        notificationTO.getEvents().add(\"create\");\n+\n+        notificationTO.setUserAbout(SyncopeClient.getUserSearchConditionBuilder().\n+                is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query());\n+\n+        notificationTO.setRecipientAttrName(\"email\");\n+        notificationTO.setRecipientAttrType(IntMappingType.UserPlainSchema);\n+\n+        notificationTO.setSender(\"syncope@syncope.apache.org\");\n+        notificationTO.setSubject(\"Test notification\");\n+        notificationTO.setTemplate(\"test\");\n+        return notificationTO;\n+    }\n+\n+    @Test\n+    public void read() {\n+        NotificationTO notificationTO = notificationService.read(10L);\n+        assertNotNull(notificationTO);\n+    }\n+\n+    @Test\n+    public void list() {\n+        List<NotificationTO> notificationTOs = notificationService.list();\n+        assertNotNull(notificationTOs);\n+        assertFalse(notificationTOs.isEmpty());\n+        for (NotificationTO instance : notificationTOs) {\n+            assertNotNull(instance);\n+        }\n+    }\n+\n+    @Test\n+    public void create() {\n+        NotificationTO notificationTO = buildNotificationTO();\n+        notificationTO.setRecipients(SyncopeClient.getUserSearchConditionBuilder().hasRoles(7L).query());\n+\n+        Response response = notificationService.create(notificationTO);\n+        NotificationTO actual = getObject(response.getLocation(), NotificationService.class,\n+                NotificationTO.class);\n+\n+        assertNotNull(actual);\n+        assertNotNull(actual.getKey());\n+        notificationTO.setKey(actual.getKey());\n+        assertEquals(actual, notificationTO);\n+    }\n+\n+    @Test\n+    public void update() {\n+        NotificationTO notificationTO = notificationService.read(10L);\n+        notificationTO.setRecipients(SyncopeClient.getUserSearchConditionBuilder().hasRoles(7L).query());\n+\n+        notificationService.update(notificationTO.getKey(), notificationTO);\n+        NotificationTO actual = notificationService.read(notificationTO.getKey());\n+        assertNotNull(actual);\n+        assertEquals(actual, notificationTO);\n+    }\n+\n+    @Test\n+    public void delete() {\n+        NotificationTO notification = buildNotificationTO();\n+        notification.setSelfAsRecipient(true);\n+        Response response = notificationService.create(notification);\n+        notification = getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n+\n+        notificationService.delete(notification.getKey());\n+\n+        try {\n+            notificationService.read(notification.getKey());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE83() {\n+        NotificationTO notificationTO = buildNotificationTO();\n+        notificationTO.setSelfAsRecipient(true);\n+\n+        NotificationTO actual = null;\n+        try {\n+            Response response = notificationService.create(notificationTO);\n+            actual = getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n+        } catch (SyncopeClientException e) {\n+            assertNotNull(e);\n+        }\n+        assertNotNull(actual);\n+        assertNotNull(actual.getKey());\n+        notificationTO.setKey(actual.getKey());\n+        assertEquals(actual, notificationTO);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE445() {\n+        NotificationTO notificationTO = buildNotificationTO();\n+        notificationTO.getStaticRecipients().add(\"syncope445@syncope.apache.org\");\n+\n+        NotificationTO actual = null;\n+        try {\n+            Response response = notificationService.create(notificationTO);\n+            actual = getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n+        } catch (SyncopeClientException e) {\n+            assertNotNull(e);\n+        }\n+        assertNotNull(actual);\n+        assertNotNull(actual.getKey());\n+        notificationTO.setKey(actual.getKey());\n+        assertEquals(actual, notificationTO);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE446() {\n+        NotificationTO notificationTO = buildNotificationTO();\n+        notificationTO.getStaticRecipients().add(\"syncope446@syncope.apache.org\");\n+        notificationTO.setRoleAbout(SyncopeClient.getRoleSearchConditionBuilder().hasEntitlements(\"ROLE_READ\").query());\n+\n+        NotificationTO actual = null;\n+        try {\n+            Response response = notificationService.create(notificationTO);\n+            actual = getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n+        } catch (SyncopeClientException e) {\n+            assertNotNull(e);\n+        }\n+        assertNotNull(actual);\n+        assertNotNull(actual.getKey());\n+        notificationTO.setKey(actual.getKey());\n+        assertEquals(actual, notificationTO);\n+    }\n+}"},{"sha":"448d1fa94a17c733815481b526dbee270e999049","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/PlainSchemaITCase.java","status":"added","additions":317,"deletions":0,"changes":317,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FPlainSchemaITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,317 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.security.AccessControlException;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.syncope.common.lib.AttributableOperations;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.rest.api.service.SchemaService;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class PlainSchemaITCase extends AbstractITCase {\n+\n+    private PlainSchemaTO buildPlainSchemaTO(final String name, final AttrSchemaType type) {\n+        PlainSchemaTO schemaTO = new PlainSchemaTO();\n+        schemaTO.setKey(name + getUUIDString());\n+        schemaTO.setType(type);\n+        return schemaTO;\n+    }\n+\n+    @Test\n+    public void create() {\n+        PlainSchemaTO schemaTO = buildPlainSchemaTO(\"testAttribute\", AttrSchemaType.String);\n+        schemaTO.setMandatoryCondition(\"false\");\n+\n+        PlainSchemaTO newPlainSchemaTO = createSchema(AttributableType.USER, SchemaType.PLAIN, schemaTO);\n+        assertEquals(schemaTO, newPlainSchemaTO);\n+\n+        newPlainSchemaTO = createSchema(AttributableType.MEMBERSHIP, SchemaType.PLAIN, schemaTO);\n+        assertEquals(schemaTO, newPlainSchemaTO);\n+    }\n+\n+    @Test\n+    public void createWithNotPermittedName() {\n+        PlainSchemaTO schemaTO = new PlainSchemaTO();\n+        schemaTO.setKey(\"failedLogins\");\n+        schemaTO.setType(AttrSchemaType.String);\n+\n+        try {\n+            createSchema(AttributableType.USER, SchemaType.PLAIN, schemaTO);\n+            fail(\"This should not be reacheable\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidPlainSchema, e.getType());\n+\n+            assertTrue(e.getElements().iterator().next().toString().\n+                    contains(EntityViolationType.InvalidName.name()));\n+        }\n+    }\n+\n+    @Test\n+    public void createREnumWithoutEnumeration() {\n+        PlainSchemaTO schemaTO = new PlainSchemaTO();\n+        schemaTO.setKey(\"enumcheck\");\n+        schemaTO.setType(AttrSchemaType.Enum);\n+\n+        try {\n+            createSchema(AttributableType.ROLE, SchemaType.PLAIN, schemaTO);\n+            fail(\"This should not be reacheable\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidPlainSchema, e.getType());\n+\n+            assertTrue(e.getElements().iterator().next().toString().\n+                    contains(EntityViolationType.InvalidSchemaEnum.name()));\n+        }\n+    }\n+\n+    @Test\n+    public void createUEnumWithoutEnumeration() {\n+        PlainSchemaTO schemaTO = new PlainSchemaTO();\n+        schemaTO.setKey(\"enumcheck\");\n+        schemaTO.setType(AttrSchemaType.Enum);\n+\n+        try {\n+            createSchema(AttributableType.USER, SchemaType.PLAIN, schemaTO);\n+            fail(\"This should not be reacheable\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidPlainSchema, e.getType());\n+\n+            assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidSchemaEnum.name()));\n+        }\n+    }\n+\n+    @Test\n+    public void createEncrypted() {\n+        PlainSchemaTO schemaTO = new PlainSchemaTO();\n+        schemaTO.setKey(\"encrypted\");\n+        schemaTO.setType(AttrSchemaType.Encrypted);\n+        schemaTO.setCipherAlgorithm(CipherAlgorithm.AES);\n+        schemaTO.setSecretKey(\"huhadfhsjfsfsdkj!####\");\n+\n+        createSchema(AttributableType.MEMBERSHIP, SchemaType.PLAIN, schemaTO);\n+    }\n+\n+    @Test\n+    public void createBinary() {\n+        PlainSchemaTO schemaTO = new PlainSchemaTO();\n+        schemaTO.setKey(\"x509certificate\");\n+        schemaTO.setType(AttrSchemaType.Binary);\n+        schemaTO.setMimeType(\"application/x-x509-ca-cert\");\n+\n+        createSchema(AttributableType.ROLE, SchemaType.PLAIN, schemaTO);\n+    }\n+\n+    @Test\n+    public void delete() {\n+        PlainSchemaTO schemaTO = buildPlainSchemaTO(\"todelete\", AttrSchemaType.String);\n+        schemaTO.setMandatoryCondition(\"false\");\n+        createSchema(AttributableType.USER, SchemaType.PLAIN, schemaTO);\n+\n+        schemaService.delete(AttributableType.USER, SchemaType.PLAIN, schemaTO.getKey());\n+        PlainSchemaTO firstname = null;\n+        try {\n+            firstname = schemaService.read(AttributableType.USER, SchemaType.PLAIN, schemaTO.getKey());\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n+        }\n+        assertNull(firstname);\n+    }\n+\n+    @Test\n+    public void list() {\n+        List<PlainSchemaTO> userSchemas = schemaService.list(AttributableType.USER, SchemaType.PLAIN);\n+        assertFalse(userSchemas.isEmpty());\n+        for (PlainSchemaTO schemaTO : userSchemas) {\n+            assertNotNull(schemaTO);\n+        }\n+\n+        List<PlainSchemaTO> roleSchemas = schemaService.list(AttributableType.ROLE, SchemaType.PLAIN);\n+        assertFalse(roleSchemas.isEmpty());\n+        for (PlainSchemaTO schemaTO : roleSchemas) {\n+            assertNotNull(schemaTO);\n+        }\n+\n+        List<PlainSchemaTO> membershipSchemas = schemaService.list(AttributableType.MEMBERSHIP, SchemaType.PLAIN);\n+        assertFalse(membershipSchemas.isEmpty());\n+        for (PlainSchemaTO schemaTO : membershipSchemas) {\n+            assertNotNull(schemaTO);\n+        }\n+    }\n+\n+    @Test\n+    public void update() {\n+        PlainSchemaTO schemaTO = schemaService.read(AttributableType.ROLE, SchemaType.PLAIN, \"icon\");\n+        assertNotNull(schemaTO);\n+\n+        schemaService.update(AttributableType.ROLE, SchemaType.PLAIN, schemaTO.getKey(), schemaTO);\n+        PlainSchemaTO updatedTO = schemaService.read(AttributableType.ROLE, SchemaType.PLAIN, \"icon\");\n+        assertEquals(schemaTO, updatedTO);\n+\n+        updatedTO.setType(AttrSchemaType.Date);\n+        try {\n+            schemaService.update(AttributableType.ROLE, SchemaType.PLAIN, schemaTO.getKey(), updatedTO);\n+            fail(\"This should not be reacheable\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidPlainSchema, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void issue258() {\n+        PlainSchemaTO schemaTO = new PlainSchemaTO();\n+        schemaTO.setKey(\"schema_issue258\");\n+        schemaTO.setType(AttrSchemaType.Double);\n+\n+        schemaTO = createSchema(AttributableType.USER, SchemaType.PLAIN, schemaTO);\n+        assertNotNull(schemaTO);\n+\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"issue258@syncope.apache.org\");\n+        userTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"1.2\"));\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        schemaTO.setType(AttrSchemaType.Long);\n+        try {\n+            schemaService.update(AttributableType.USER, SchemaType.PLAIN, schemaTO.getKey(), schemaTO);\n+            fail(\"This should not be reacheable\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidPlainSchema, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void issue259() {\n+        PlainSchemaTO schemaTO = buildPlainSchemaTO(\"schema_issue259\", AttrSchemaType.Double);\n+        schemaTO.setUniqueConstraint(true);\n+\n+        schemaTO = createSchema(AttributableType.USER, SchemaType.PLAIN, schemaTO);\n+        assertNotNull(schemaTO);\n+\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"issue259@syncope.apache.org\");\n+        userTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"1\"));\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        UserTO newUserTO = SerializationUtils.clone(userTO);\n+        MembershipTO membership = new MembershipTO();\n+        membership.setRoleId(2L);\n+        newUserTO.getMemberships().add(membership);\n+\n+        UserMod userMod = AttributableOperations.diff(newUserTO, userTO);\n+\n+        userTO = userService.update(userMod.getKey(), userMod).readEntity(UserTO.class);\n+        assertNotNull(userTO);\n+    }\n+\n+    @Test\n+    public void issue260() {\n+        PlainSchemaTO schemaTO = buildPlainSchemaTO(\"schema_issue260\", AttrSchemaType.Double);\n+        schemaTO.setUniqueConstraint(true);\n+\n+        schemaTO = createSchema(AttributableType.USER, SchemaType.PLAIN, schemaTO);\n+        assertNotNull(schemaTO);\n+\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"issue260@syncope.apache.org\");\n+        userTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"1.2\"));\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        schemaTO.setUniqueConstraint(false);\n+        try {\n+            schemaService.update(AttributableType.USER, SchemaType.PLAIN, schemaTO.getKey(), schemaTO);\n+            fail(\"This should not be reacheable\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidPlainSchema, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE323() {\n+        PlainSchemaTO actual = schemaService.read(AttributableType.ROLE, SchemaType.PLAIN, \"icon\");\n+        assertNotNull(actual);\n+\n+        try {\n+            createSchema(AttributableType.ROLE, SchemaType.PLAIN, actual);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.CONFLICT, e.getType().getResponseStatus());\n+            assertEquals(ClientExceptionType.EntityExists, e.getType());\n+        }\n+\n+        actual.setKey(null);\n+        try {\n+            createSchema(AttributableType.ROLE, SchemaType.PLAIN, actual);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.BAD_REQUEST, e.getType().getResponseStatus());\n+            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE418() {\n+        PlainSchemaTO schema = buildPlainSchemaTO(\"http://schemas.examples.org/security/authorization/organizationUnit\",\n+                AttrSchemaType.Double);\n+\n+        try {\n+            createSchema(AttributableType.ROLE, SchemaType.PLAIN, schema);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidPlainSchema, e.getType());\n+            assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n+        }\n+    }\n+\n+    @Test\n+    public void anonymous() {\n+        SchemaService unauthenticated = clientFactory.createAnonymous().getService(SchemaService.class);\n+        try {\n+            unauthenticated.list(AttributableType.USER, SchemaType.VIRTUAL);\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+\n+        SchemaService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).getService(SchemaService.class);\n+        assertFalse(anonymous.list(AttributableType.USER, SchemaType.VIRTUAL).isEmpty());\n+    }\n+}"},{"sha":"075cdd9c9e0e9224ee4bef3a859c1ad6e08ac6fd","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/PolicyITCase.java","status":"added","additions":238,"deletions":0,"changes":238,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FPolicyITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AccountPolicyTO;\n+import org.apache.syncope.common.lib.to.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.to.SyncPolicyTO;\n+import org.apache.syncope.common.lib.types.AccountPolicySpec;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.lib.types.SyncPolicySpec;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class PolicyITCase extends AbstractITCase {\n+\n+    private SyncPolicyTO buildSyncPolicyTO() {\n+        SyncPolicyTO policy = new SyncPolicyTO();\n+\n+        SyncPolicySpec spec = new SyncPolicySpec();\n+        spec.setUserJavaRule(TestSyncRule.class.getName());\n+\n+        policy.setSpecification(spec);\n+        policy.setDescription(\"Sync policy\");\n+\n+        return policy;\n+    }\n+\n+    @Test\n+    public void listByType() {\n+        List<SyncPolicyTO> policyTOs = policyService.list(PolicyType.SYNC);\n+\n+        assertNotNull(policyTOs);\n+        assertFalse(policyTOs.isEmpty());\n+    }\n+\n+    @Test\n+    public void getAccountPolicy() {\n+        AccountPolicyTO policyTO = policyService.read(6L);\n+\n+        assertNotNull(policyTO);\n+        assertTrue(policyTO.getUsedByResources().isEmpty());\n+        assertEquals(Arrays.asList(6L, 7L, 10L, 14L), policyTO.getUsedByRoles());\n+    }\n+\n+    @Test\n+    public void getPasswordPolicy() {\n+        PasswordPolicyTO policyTO = policyService.read(4L);\n+\n+        assertNotNull(policyTO);\n+        assertTrue(policyTO.getUsedByResources().contains(RESOURCE_NAME_NOPROPAGATION));\n+        assertEquals(Arrays.asList(6L, 7L, 10L, 8L), policyTO.getUsedByRoles());\n+    }\n+\n+    @Test\n+    public void getSyncPolicy() {\n+        SyncPolicyTO policyTO = policyService.read(1L);\n+\n+        assertNotNull(policyTO);\n+        assertTrue(policyTO.getUsedByRoles().isEmpty());\n+    }\n+\n+    @Test\n+    public void getGlobalAccountPolicy() {\n+        AccountPolicyTO policyTO = policyService.readGlobal(PolicyType.ACCOUNT);\n+\n+        assertNotNull(policyTO);\n+        assertEquals(PolicyType.GLOBAL_ACCOUNT, policyTO.getType());\n+    }\n+\n+    @Test\n+    public void getGlobalPasswordPolicy() {\n+        PasswordPolicyTO policyTO = policyService.readGlobal(PolicyType.PASSWORD);\n+\n+        assertNotNull(policyTO);\n+        assertEquals(PolicyType.GLOBAL_PASSWORD, policyTO.getType());\n+        assertEquals(8, policyTO.getSpecification().getMinLength());\n+        assertFalse(policyTO.getUsedByResources().contains(RESOURCE_NAME_NOPROPAGATION));\n+    }\n+\n+    @Test\n+    public void getGlobalSyncPolicy() {\n+        SyncPolicyTO policyTO = policyService.readGlobal(PolicyType.SYNC);\n+\n+        assertNotNull(policyTO);\n+        assertEquals(PolicyType.GLOBAL_SYNC, policyTO.getType());\n+        assertFalse(policyTO.getUsedByResources().contains(RESOURCE_NAME_CSV));\n+        assertFalse(policyTO.getUsedByResources().contains(RESOURCE_NAME_WS2));\n+        assertTrue(policyTO.getUsedByRoles().isEmpty());\n+    }\n+\n+    @Test\n+    public void createWithException() {\n+        PasswordPolicyTO policy = new PasswordPolicyTO(true);\n+        policy.setSpecification(new PasswordPolicySpec());\n+        policy.setDescription(\"global password policy\");\n+\n+        try {\n+            createPolicy(policy);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidPolicy, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void createMissingDescription() {\n+        SyncPolicyTO policy = new SyncPolicyTO();\n+        policy.setSpecification(new SyncPolicySpec());\n+\n+        try {\n+            createPolicy(policy);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidPolicy, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void create() {\n+        SyncPolicyTO policy = buildSyncPolicyTO();\n+\n+        SyncPolicyTO policyTO = createPolicy(policy);\n+\n+        assertNotNull(policyTO);\n+        assertEquals(PolicyType.SYNC, policyTO.getType());\n+        assertEquals(TestSyncRule.class.getName(), policyTO.getSpecification().getUserJavaRule());\n+    }\n+\n+    @Test\n+    public void update() {\n+        // get global password\n+        PasswordPolicyTO globalPolicy = policyService.read(2L);\n+\n+        PasswordPolicyTO policy = new PasswordPolicyTO();\n+        policy.setDescription(\"A simple password policy\");\n+        policy.setSpecification(globalPolicy.getSpecification());\n+\n+        // create a new password policy using global password as a template\n+        policy = createPolicy(policy);\n+\n+        // read new password policy\n+        policy = policyService.read(policy.getKey());\n+\n+        assertNotNull(\"find to update did not work\", policy);\n+\n+        PasswordPolicySpec policySpec = policy.getSpecification();\n+        policySpec.setMaxLength(22);\n+        policy.setSpecification(policySpec);\n+\n+        // update new password policy\n+        policyService.update(policy.getKey(), policy);\n+        policy = policyService.read(policy.getKey());\n+\n+        assertNotNull(policy);\n+        assertEquals(PolicyType.PASSWORD, policy.getType());\n+        assertEquals(22, policy.getSpecification().getMaxLength());\n+        assertEquals(8, policy.getSpecification().getMinLength());\n+    }\n+\n+    @Test\n+    public void delete() {\n+        SyncPolicyTO policy = buildSyncPolicyTO();\n+\n+        SyncPolicyTO policyTO = createPolicy(policy);\n+        assertNotNull(policyTO);\n+\n+        policyService.delete(policyTO.getKey());\n+\n+        try {\n+            policyService.read(policyTO.getKey());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n+    @Test\n+    public void getCorrelationRules() {\n+        assertEquals(1, policyService.getSyncCorrelationRuleClasses().size());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE466() {\n+        PasswordPolicyTO policy = policyService.read(4L);\n+        assertEquals(PolicyType.PASSWORD, policy.getType());\n+\n+        policy.setType(PolicyType.GLOBAL_PASSWORD);\n+        try {\n+            policyService.update(policy.getKey(), policy);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidPolicy, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE553() {\n+        AccountPolicyTO policy = new AccountPolicyTO(false);\n+        policy.setDescription(\"SYNCOPE553\");\n+\n+        final AccountPolicySpec accountPolicySpec = new AccountPolicySpec();\n+        accountPolicySpec.setMinLength(3);\n+        accountPolicySpec.setMaxLength(8);\n+        policy.setSpecification(accountPolicySpec);\n+\n+        policy = createPolicy(policy);\n+        assertNotNull(policy);\n+    }\n+}"},{"sha":"8102fe0888ca577df672e11a1f9ce25ce18b2c12","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/ReportITCase.java","status":"added","additions":252,"deletions":0,"changes":252,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FReportITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,252 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.report.UserReportletConf;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.ReportExecTO;\n+import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n+import org.apache.syncope.common.lib.types.ReportExecStatus;\n+import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n+import org.apache.syncope.common.rest.api.service.ReportService;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class ReportITCase extends AbstractITCase {\n+\n+    private ReportTO createReport(final ReportTO report) {\n+        Response response = reportService.create(report);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatusInfo().getStatusCode());\n+        return getObject(response.getLocation(), ReportService.class, ReportTO.class);\n+    }\n+\n+    @Test\n+    public void getReportletClasses() {\n+        List<ReportletConfClass> reportletClasses = reportService.getReportletConfClasses();\n+        assertNotNull(reportletClasses);\n+        assertFalse(reportletClasses.isEmpty());\n+    }\n+\n+    @Test\n+    public void list() {\n+        PagedResult<ReportTO> reports = reportService.list();\n+        assertNotNull(reports);\n+        assertFalse(reports.getResult().isEmpty());\n+        for (ReportTO report : reports.getResult()) {\n+            assertNotNull(report);\n+        }\n+    }\n+\n+    @Test\n+    public void read() {\n+        ReportTO reportTO = reportService.read(1L);\n+\n+        assertNotNull(reportTO);\n+        assertNotNull(reportTO.getExecutions());\n+        assertFalse(reportTO.getExecutions().isEmpty());\n+    }\n+\n+    @Test\n+    public void readExecution() {\n+        ReportExecTO reportExecTO = reportService.readExecution(1L);\n+        assertNotNull(reportExecTO);\n+    }\n+\n+    @Test\n+    public void create() {\n+        ReportTO report = new ReportTO();\n+        report.setName(\"testReportForCreate\" + getUUIDString());\n+        report.getReportletConfs().add(new UserReportletConf(\"first\"));\n+        report.getReportletConfs().add(new UserReportletConf(\"second\"));\n+\n+        report = createReport(report);\n+        assertNotNull(report);\n+\n+        ReportTO actual = reportService.read(report.getKey());\n+        assertNotNull(actual);\n+\n+        assertEquals(actual, report);\n+    }\n+\n+    @Test\n+    public void update() {\n+        ReportTO report = new ReportTO();\n+        report.setName(\"testReportForUpdate\" + getUUIDString());\n+\n+        report.getReportletConfs().add(new UserReportletConf(\"first\"));\n+        report.getReportletConfs().add(new UserReportletConf(\"second\"));\n+\n+        report = createReport(report);\n+        assertNotNull(report);\n+        assertEquals(2, report.getReportletConfs().size());\n+\n+        report.getReportletConfs().add(new UserReportletConf(\"last\"));\n+\n+        reportService.update(report.getKey(), report);\n+        ReportTO updated = reportService.read(report.getKey());\n+        assertNotNull(updated);\n+        assertEquals(3, updated.getReportletConfs().size());\n+    }\n+\n+    @Test\n+    public void delete() {\n+        ReportTO report = new ReportTO();\n+        report.setName(\"testReportForDelete\" + getUUIDString());\n+        report.getReportletConfs().add(new UserReportletConf(\"first\"));\n+        report.getReportletConfs().add(new UserReportletConf(\"second\"));\n+\n+        report = createReport(report);\n+        assertNotNull(report);\n+\n+        reportService.delete(report.getKey());\n+\n+        try {\n+            reportService.read(report.getKey());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n+        }\n+    }\n+\n+    private void checkExport(final Long execId, final ReportExecExportFormat fmt) throws IOException {\n+        final Response response = reportService.exportExecutionResult(execId, fmt);\n+        assertNotNull(response);\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatusInfo().getStatusCode());\n+        assertNotNull(response.getHeaderString(HttpHeaders.CONTENT_DISPOSITION));\n+        assertTrue(response.getHeaderString(HttpHeaders.CONTENT_DISPOSITION).\n+                endsWith(\".\" + fmt.name().toLowerCase()));\n+\n+        Object entity = response.getEntity();\n+        assertTrue(entity instanceof InputStream);\n+        assertFalse(IOUtils.toString((InputStream) entity, SyncopeConstants.DEFAULT_ENCODING).isEmpty());\n+    }\n+\n+    @Test\n+    public void executeAndExport() throws IOException {\n+        ReportTO reportTO = reportService.read(1L);\n+        reportTO.setKey(0);\n+        reportTO.setName(\"executeAndExport\" + getUUIDString());\n+        reportTO.getExecutions().clear();\n+        reportTO = createReport(reportTO);\n+        assertNotNull(reportTO);\n+\n+        ReportExecTO execution = reportService.execute(reportTO.getKey());\n+        assertNotNull(execution);\n+\n+        int i = 0;\n+        int maxit = 50;\n+\n+        // wait for report execution completion (executions incremented)\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            reportTO = reportService.read(reportTO.getKey());\n+\n+            assertNotNull(reportTO);\n+            assertNotNull(reportTO.getExecutions());\n+\n+            i++;\n+        } while (reportTO.getExecutions().isEmpty()\n+                || (!ReportExecStatus.SUCCESS.name().equals(reportTO.getExecutions().get(0).getStatus()) && i < maxit));\n+        assertEquals(ReportExecStatus.SUCCESS.name(), reportTO.getExecutions().get(0).getStatus());\n+\n+        long execId = reportTO.getExecutions().get(0).getKey();\n+\n+        checkExport(execId, ReportExecExportFormat.XML);\n+        checkExport(execId, ReportExecExportFormat.HTML);\n+        checkExport(execId, ReportExecExportFormat.PDF);\n+        checkExport(execId, ReportExecExportFormat.RTF);\n+        checkExport(execId, ReportExecExportFormat.CSV);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE43() {\n+        ReportTO reportTO = new ReportTO();\n+        reportTO.setName(\"issueSYNCOPE43\" + getUUIDString());\n+        reportTO = createReport(reportTO);\n+        assertNotNull(reportTO);\n+\n+        ReportExecTO execution = reportService.execute(reportTO.getKey());\n+        assertNotNull(execution);\n+\n+        int maxit = 50;\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            reportTO = reportService.read(reportTO.getKey());\n+\n+            maxit--;\n+        } while (reportTO.getExecutions().isEmpty() && maxit > 0);\n+\n+        assertEquals(1, reportTO.getExecutions().size());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE102() throws IOException {\n+        // Create\n+        ReportTO reportTO = reportService.read(1L);\n+        reportTO.setKey(0);\n+        reportTO.setName(\"issueSYNCOPE102\" + getUUIDString());\n+        reportTO = createReport(reportTO);\n+        assertNotNull(reportTO);\n+\n+        // Execute (multiple requests)\n+        for (int i = 0; i < 10; i++) {\n+            ReportExecTO execution = reportService.execute(reportTO.getKey());\n+            assertNotNull(execution);\n+        }\n+\n+        // Wait for one execution\n+        int maxit = 50;\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            reportTO = reportService.read(reportTO.getKey());\n+\n+            maxit--;\n+        } while (reportTO.getExecutions().isEmpty() && maxit > 0);\n+        assertFalse(reportTO.getExecutions().isEmpty());\n+    }\n+}"},{"sha":"6cb624a4c1704c036ee2f6ed9c6f2a4e8dd93554","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/ResourceITCase.java","status":"added","additions":590,"deletions":0,"changes":590,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FResourceITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,590 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.security.AccessControlException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.BulkAction;\n+import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n+import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.wrap.PropagationActionClass;\n+import org.apache.syncope.common.rest.api.service.ResourceService;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class ResourceITCase extends AbstractITCase {\n+\n+    private ResourceTO buildResourceTO(final String resourceName) {\n+        ResourceTO resourceTO = new ResourceTO();\n+\n+        resourceTO.setKey(resourceName);\n+        resourceTO.setConnectorId(102L);\n+\n+        MappingTO mapping = new MappingTO();\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setExtAttrName(\"userId\");\n+        item.setIntAttrName(\"userId\");\n+        item.setIntMappingType(IntMappingType.UserPlainSchema);\n+        item.setPurpose(MappingPurpose.BOTH);\n+        mapping.addItem(item);\n+\n+        item = new MappingItemTO();\n+        item.setExtAttrName(\"username\");\n+        item.setIntAttrName(\"fullname\");\n+        item.setIntMappingType(IntMappingType.UserId);\n+        item.setPurpose(MappingPurpose.BOTH);\n+        mapping.setAccountIdItem(item);\n+\n+        item = new MappingItemTO();\n+        item.setExtAttrName(\"fullname\");\n+        item.setIntAttrName(\"cn\");\n+        item.setIntMappingType(IntMappingType.UserPlainSchema);\n+        item.setAccountid(false);\n+        item.setPurpose(MappingPurpose.BOTH);\n+        mapping.addItem(item);\n+\n+        resourceTO.setUmapping(mapping);\n+        return resourceTO;\n+    }\n+\n+    @Test\n+    public void getPropagationActionsClasses() {\n+        List<PropagationActionClass> actions = resourceService.getPropagationActionsClasses();\n+        assertNotNull(actions);\n+        assertFalse(actions.isEmpty());\n+    }\n+\n+    @Test\n+    public void create() {\n+        String resourceName = RESOURCE_NAME_CREATE;\n+        ResourceTO resourceTO = buildResourceTO(resourceName);\n+\n+        Response response = resourceService.create(resourceTO);\n+        ResourceTO actual = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+        assertNotNull(actual);\n+\n+        // check for existence\n+        actual = resourceService.read(resourceName);\n+        assertNotNull(actual);\n+    }\n+\n+    @Test\n+    public void createOverridingProps() {\n+        String resourceName = \"overriding-conn-conf-target-resource-create\";\n+        ResourceTO resourceTO = new ResourceTO();\n+\n+        MappingTO mapping = new MappingTO();\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setExtAttrName(\"uid\");\n+        item.setIntAttrName(\"userId\");\n+        item.setIntMappingType(IntMappingType.UserPlainSchema);\n+        item.setPurpose(MappingPurpose.BOTH);\n+        mapping.addItem(item);\n+\n+        item = new MappingItemTO();\n+        item.setExtAttrName(\"username\");\n+        item.setIntAttrName(\"fullname\");\n+        item.setIntMappingType(IntMappingType.UserId);\n+        item.setAccountid(true);\n+        item.setPurpose(MappingPurpose.BOTH);\n+        mapping.setAccountIdItem(item);\n+\n+        item = new MappingItemTO();\n+        item.setExtAttrName(\"fullname\");\n+        item.setIntAttrName(\"cn\");\n+        item.setIntMappingType(IntMappingType.UserPlainSchema);\n+        item.setAccountid(false);\n+        item.setPurpose(MappingPurpose.BOTH);\n+        mapping.addItem(item);\n+\n+        resourceTO.setKey(resourceName);\n+        resourceTO.setConnectorId(102L);\n+\n+        resourceTO.setUmapping(mapping);\n+\n+        ConnConfProperty p = new ConnConfProperty();\n+        ConnConfPropSchema schema = new ConnConfPropSchema();\n+        schema.setType(\"java.lang.String\");\n+        schema.setName(\"endpoint\");\n+        schema.setRequired(true);\n+        p.setSchema(schema);\n+        p.getValues().add(\"http://invalidurl/\");\n+\n+        Set<ConnConfProperty> connectorConfigurationProperties = new HashSet<ConnConfProperty>(Arrays.asList(p));\n+        resourceTO.getConnConfProperties().addAll(connectorConfigurationProperties);\n+\n+        Response response = resourceService.create(resourceTO);\n+        ResourceTO actual = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+        assertNotNull(actual);\n+\n+        // check the existence\n+        actual = resourceService.read(resourceName);\n+        assertNotNull(actual);\n+    }\n+\n+    @Test\n+    public void createWithSingleMappingItem() {\n+        String resourceName = RESOURCE_NAME_CREATE_SINGLE;\n+        ResourceTO resourceTO = new ResourceTO();\n+        resourceTO.setKey(resourceName);\n+        resourceTO.setConnectorId(102L);\n+\n+        MappingTO umapping = new MappingTO();\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setIntMappingType(IntMappingType.UserId);\n+        item.setExtAttrName(\"userId\");\n+        item.setAccountid(true);\n+        item.setPurpose(MappingPurpose.PROPAGATION);\n+        umapping.setAccountIdItem(item);\n+\n+        resourceTO.setUmapping(umapping);\n+\n+        MappingTO rmapping = new MappingTO();\n+\n+        item = new MappingItemTO();\n+        item.setIntMappingType(IntMappingType.RoleId);\n+        item.setExtAttrName(\"roleId\");\n+        item.setAccountid(true);\n+        item.setPurpose(MappingPurpose.SYNCHRONIZATION);\n+        rmapping.setAccountIdItem(item);\n+\n+        resourceTO.setRmapping(rmapping);\n+\n+        Response response = resourceService.create(resourceTO);\n+        ResourceTO actual = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+\n+        assertNotNull(actual);\n+        assertNotNull(actual.getUmapping());\n+        assertNotNull(actual.getUmapping().getItems());\n+        assertNotNull(actual.getRmapping());\n+        assertNotNull(actual.getRmapping().getItems());\n+        assertEquals(MappingPurpose.SYNCHRONIZATION, actual.getRmapping().getAccountIdItem().getPurpose());\n+        assertEquals(MappingPurpose.PROPAGATION, actual.getUmapping().getAccountIdItem().getPurpose());\n+    }\n+\n+    @Test\n+    public void createWithInvalidMapping() {\n+        String resourceName = RESOURCE_NAME_CREATE_WRONG;\n+        ResourceTO resourceTO = new ResourceTO();\n+        resourceTO.setKey(resourceName);\n+        resourceTO.setConnectorId(102L);\n+\n+        MappingTO mapping = new MappingTO();\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setIntMappingType(IntMappingType.UserId);\n+        item.setExtAttrName(\"userId\");\n+        item.setAccountid(true);\n+        mapping.setAccountIdItem(item);\n+\n+        item = new MappingItemTO();\n+        item.setIntMappingType(IntMappingType.UserPlainSchema);\n+        item.setExtAttrName(\"email\");\n+        // missing intAttrName ...\n+        mapping.addItem(item);\n+\n+        resourceTO.setUmapping(mapping);\n+\n+        try {\n+            createResource(resourceTO);\n+            fail(\"Create should not have worked\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n+            assertEquals(\"intAttrName\", e.getElements().iterator().next());\n+        }\n+    }\n+\n+    @Test(expected = SyncopeClientException.class)\n+    public void createWithoutExtAttr() {\n+        String resourceName = RESOURCE_NAME_CREATE_WRONG;\n+        ResourceTO resourceTO = new ResourceTO();\n+        resourceTO.setKey(resourceName);\n+        resourceTO.setConnectorId(102L);\n+\n+        MappingTO mapping = new MappingTO();\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setIntMappingType(IntMappingType.UserId);\n+        item.setExtAttrName(\"userId\");\n+        item.setAccountid(true);\n+        mapping.setAccountIdItem(item);\n+\n+        item = new MappingItemTO();\n+        item.setIntMappingType(IntMappingType.UserPlainSchema);\n+        item.setIntAttrName(\"usernane\");\n+        // missing extAttrName ...\n+        mapping.addItem(item);\n+\n+        resourceTO.setUmapping(mapping);\n+\n+        createResource(resourceTO);\n+    }\n+\n+    @Test\n+    public void createWithPasswordPolicy() {\n+        String resourceName = \"res-with-password-policy\";\n+        ResourceTO resourceTO = new ResourceTO();\n+        resourceTO.setKey(resourceName);\n+        resourceTO.setConnectorId(102L);\n+        resourceTO.setPasswordPolicy(4L);\n+\n+        MappingTO mapping = new MappingTO();\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setExtAttrName(\"userId\");\n+        item.setIntAttrName(\"userId\");\n+        item.setIntMappingType(IntMappingType.UserPlainSchema);\n+        item.setAccountid(true);\n+        item.setPurpose(MappingPurpose.BOTH);\n+        mapping.setAccountIdItem(item);\n+\n+        resourceTO.setUmapping(mapping);\n+\n+        Response response = resourceService.create(resourceTO);\n+        ResourceTO actual = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+        assertNotNull(actual);\n+\n+        // check the existence\n+        actual = resourceService.read(resourceName);\n+        assertNotNull(actual);\n+        assertNotNull(actual.getPasswordPolicy());\n+        assertEquals(4L, (long) actual.getPasswordPolicy());\n+    }\n+\n+    @Test\n+    public void updateWithException() {\n+        try {\n+            ResourceTO resourceTO = new ResourceTO();\n+            resourceTO.setKey(\"resourcenotfound\");\n+\n+            resourceService.update(resourceTO.getKey(), resourceTO);\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n+        }\n+    }\n+\n+    @Test\n+    public void update() {\n+        String resourceName = RESOURCE_NAME_UPDATE;\n+        ResourceTO resourceTO = new ResourceTO();\n+        resourceTO.setKey(resourceName);\n+        resourceTO.setConnectorId(101L);\n+\n+        MappingTO mapping = new MappingTO();\n+\n+        // Update with an existing and already assigned mapping\n+        MappingItemTO item = new MappingItemTO();\n+        item.setKey(112L);\n+        item.setExtAttrName(\"test3\");\n+        item.setIntAttrName(\"fullname\");\n+        item.setIntMappingType(IntMappingType.UserPlainSchema);\n+        item.setPurpose(MappingPurpose.BOTH);\n+        mapping.addItem(item);\n+\n+        // Update defining new mappings\n+        for (int i = 4; i < 6; i++) {\n+            item = new MappingItemTO();\n+            item.setExtAttrName(\"test\" + i);\n+            item.setIntAttrName(\"fullname\");\n+            item.setIntMappingType(IntMappingType.UserPlainSchema);\n+            item.setPurpose(MappingPurpose.BOTH);\n+            mapping.addItem(item);\n+        }\n+        item = new MappingItemTO();\n+        item.setExtAttrName(\"username\");\n+        item.setIntAttrName(\"fullname\");\n+        item.setIntMappingType(IntMappingType.UserId);\n+        item.setAccountid(true);\n+        item.setPurpose(MappingPurpose.BOTH);\n+        mapping.setAccountIdItem(item);\n+\n+        resourceTO.setUmapping(mapping);\n+\n+        resourceService.update(resourceTO.getKey(), resourceTO);\n+        ResourceTO actual = resourceService.read(resourceTO.getKey());\n+        assertNotNull(actual);\n+\n+        // check for existence\n+        Collection<MappingItemTO> mapItems = actual.getUmapping().getItems();\n+        assertNotNull(mapItems);\n+        assertEquals(4, mapItems.size());\n+    }\n+\n+    @Test\n+    public void deleteWithException() {\n+        try {\n+            resourceService.delete(\"resourcenotfound\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n+        }\n+    }\n+\n+    @Test\n+    public void updateResetSyncToken() {\n+        // create resource with sync token\n+        String resourceName = RESOURCE_NAME_RESETSYNCTOKEN + getUUIDString();\n+        ResourceTO pre = buildResourceTO(resourceName);\n+        pre.setUsyncToken(\"test\");\n+        resourceService.create(pre);\n+\n+        pre.setUsyncToken(null);\n+        resourceService.update(pre.getKey(), pre);\n+        ResourceTO actual = resourceService.read(pre.getKey());\n+        // check that the synctoken has been reset\n+        assertNull(actual.getUsyncToken());\n+    }\n+\n+    @Test\n+    public void delete() {\n+        String resourceName = \"tobedeleted\";\n+\n+        ResourceTO resource = buildResourceTO(resourceName);\n+        Response response = resourceService.create(resource);\n+        ResourceTO actual = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+        assertNotNull(actual);\n+\n+        resourceService.delete(resourceName);\n+\n+        try {\n+            resourceService.read(resourceName);\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n+        }\n+    }\n+\n+    @Test\n+    public void list() {\n+        List<ResourceTO> actuals = resourceService.list();\n+        assertNotNull(actuals);\n+        assertFalse(actuals.isEmpty());\n+        for (ResourceTO resourceTO : actuals) {\n+            assertNotNull(resourceTO);\n+        }\n+    }\n+\n+    @Test\n+    public void listByType() {\n+        List<ResourceTO> actuals = resourceService.list(105L);\n+        assertNotNull(actuals);\n+\n+        for (ResourceTO resourceTO : actuals) {\n+            assertNotNull(resourceTO);\n+            assertEquals(105L, resourceTO.getConnectorId().longValue());\n+        }\n+    }\n+\n+    @Test\n+    public void read() {\n+        ResourceTO actual = resourceService.read(RESOURCE_NAME_TESTDB);\n+        assertNotNull(actual);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE323() {\n+        ResourceTO actual = resourceService.read(RESOURCE_NAME_TESTDB);\n+        assertNotNull(actual);\n+\n+        try {\n+            createResource(actual);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.CONFLICT, e.getType().getResponseStatus());\n+            assertEquals(ClientExceptionType.EntityExists, e.getType());\n+        }\n+\n+        actual.setKey(null);\n+        try {\n+            createResource(actual);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.BAD_REQUEST, e.getType().getResponseStatus());\n+            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void bulkAction() {\n+        resourceService.create(buildResourceTO(\"forBulk1\"));\n+        resourceService.create(buildResourceTO(\"forBulk2\"));\n+\n+        assertNotNull(resourceService.read(\"forBulk1\"));\n+        assertNotNull(resourceService.read(\"forBulk2\"));\n+\n+        final BulkAction bulkAction = new BulkAction();\n+        bulkAction.setOperation(BulkAction.Type.DELETE);\n+\n+        bulkAction.getTargets().add(String.valueOf(\"forBulk1\"));\n+        bulkAction.getTargets().add(String.valueOf(\"forBulk2\"));\n+\n+        resourceService.bulk(bulkAction);\n+\n+        try {\n+            resourceService.read(\"forBulk1\");\n+            fail();\n+        } catch (SyncopeClientException e) {\n+        }\n+\n+        try {\n+            resourceService.read(\"forBulk2\");\n+            fail();\n+        } catch (SyncopeClientException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE360() {\n+        final String name = \"SYNCOPE360-\" + getUUIDString();\n+        resourceService.create(buildResourceTO(name));\n+\n+        ResourceTO resource = resourceService.read(name);\n+        assertNotNull(resource);\n+        assertNotNull(resource.getUmapping());\n+\n+        resource.setUmapping(new MappingTO());\n+        resourceService.update(name, resource);\n+\n+        resource = resourceService.read(name);\n+        assertNotNull(resource);\n+        assertNull(resource.getUmapping());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE368() {\n+        final String name = \"SYNCOPE368-\" + getUUIDString();\n+\n+        ResourceTO resourceTO = new ResourceTO();\n+\n+        resourceTO.setKey(name);\n+        resourceTO.setConnectorId(105L);\n+\n+        MappingTO mapping = new MappingTO();\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setIntMappingType(IntMappingType.RoleName);\n+        item.setExtAttrName(\"cn\");\n+        item.setPurpose(MappingPurpose.BOTH);\n+        mapping.setAccountIdItem(item);\n+\n+        item = new MappingItemTO();\n+        item.setIntMappingType(IntMappingType.RoleOwnerSchema);\n+        item.setExtAttrName(\"owner\");\n+        item.setPurpose(MappingPurpose.BOTH);\n+        mapping.addItem(item);\n+\n+        resourceTO.setRmapping(mapping);\n+\n+        resourceTO = createResource(resourceTO);\n+        assertNotNull(resourceTO);\n+        assertEquals(2, resourceTO.getRmapping().getItems().size());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE418() {\n+        try {\n+            resourceService.create(\n+                    buildResourceTO(\"http://schemas.examples.org/security/authorization/organizationUnit\"));\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidExternalResource, e.getType());\n+\n+            assertTrue(e.getElements().iterator().next().toString().contains(EntityViolationType.InvalidName.name()));\n+        }\n+    }\n+\n+    @Test\n+    public void anonymous() {\n+        ResourceService unauthenticated = clientFactory.createAnonymous().getService(ResourceService.class);\n+        try {\n+            unauthenticated.list();\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+\n+        ResourceService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).\n+                getService(ResourceService.class);\n+        assertFalse(anonymous.list().isEmpty());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE493() {\n+        // create resource with attribute mapping set to NONE and check its propagation\n+        String resourceName = RESOURCE_NAME_CREATE_NONE;\n+        ResourceTO resourceTO = new ResourceTO();\n+        resourceTO.setKey(resourceName);\n+        resourceTO.setConnectorId(102L);\n+\n+        MappingTO umapping = new MappingTO();\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setIntMappingType(IntMappingType.UserId);\n+        item.setExtAttrName(\"userId\");\n+        item.setAccountid(true);\n+        item.setPurpose(MappingPurpose.PROPAGATION);\n+        umapping.setAccountIdItem(item);\n+\n+        MappingItemTO item2 = new MappingItemTO();\n+        item2.setIntMappingType(IntMappingType.UserPlainSchema);\n+        item2.setAccountid(false);\n+        item2.setIntAttrName(\"gender\");\n+        item2.setExtAttrName(\"gender\");\n+        item2.setPurpose(MappingPurpose.NONE);\n+        umapping.addItem(item2);\n+\n+        resourceTO.setUmapping(umapping);\n+\n+        Response response = resourceService.create(resourceTO);\n+        ResourceTO actual = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+\n+        assertNotNull(actual);\n+        assertNotNull(actual.getUmapping());\n+        assertNotNull(actual.getUmapping().getItems());\n+        assertEquals(MappingPurpose.PROPAGATION, actual.getUmapping().getAccountIdItem().getPurpose());\n+        for (MappingItemTO itemTO : actual.getUmapping().getItems()) {\n+            if (\"gender\".equals(itemTO.getIntAttrName())) {\n+                assertEquals(MappingPurpose.NONE, itemTO.getPurpose());\n+            }\n+        }\n+    }\n+}"},{"sha":"dbd9532ba571414780045ecc2cf1499d30c4e801","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/RoleITCase.java","status":"added","additions":797,"deletions":0,"changes":797,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FRoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FRoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FRoleITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,797 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.AccessControlException;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.mod.ReferenceMod;\n+import org.apache.syncope.common.lib.mod.RoleMod;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.common.lib.wrap.ResourceName;\n+import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.rest.api.Preference;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.RoleService;\n+import org.identityconnectors.framework.common.objects.Name;\n+import org.junit.FixMethodOrder;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class RoleITCase extends AbstractITCase {\n+\n+    private RoleTO buildBasicRoleTO(final String name) {\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(name + getUUIDString());\n+        roleTO.setParent(8L);\n+        return roleTO;\n+    }\n+\n+    private RoleTO buildRoleTO(final String name) {\n+        RoleTO roleTO = buildBasicRoleTO(name);\n+\n+        // verify inheritance password and account policies\n+        roleTO.setInheritAccountPolicy(false);\n+        // not inherited so setter execution shouldn't be ignored\n+        roleTO.setAccountPolicy(6L);\n+\n+        roleTO.setInheritPasswordPolicy(true);\n+        // inherited so setter execution should be ignored\n+        roleTO.setPasswordPolicy(2L);\n+\n+        roleTO.getRAttrTemplates().add(\"icon\");\n+        roleTO.getPlainAttrs().add(attrTO(\"icon\", \"anIcon\"));\n+\n+        roleTO.getResources().add(RESOURCE_NAME_LDAP);\n+        return roleTO;\n+    }\n+\n+    @Test\n+    public void createWithException() {\n+        RoleTO newRoleTO = new RoleTO();\n+        newRoleTO.getPlainAttrs().add(attrTO(\"attr1\", \"value1\"));\n+\n+        try {\n+            createRole(newRoleTO);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidRole, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    @Ignore\n+    public void create() {\n+        RoleTO roleTO = buildRoleTO(\"lastRole\");\n+        roleTO.getRVirAttrTemplates().add(\"rvirtualdata\");\n+        roleTO.getVirAttrs().add(attrTO(\"rvirtualdata\", \"rvirtualvalue\"));\n+        roleTO.setRoleOwner(8L);\n+\n+        roleTO = createRole(roleTO);\n+        assertNotNull(roleTO);\n+\n+        assertNotNull(roleTO.getVirAttrMap());\n+        assertNotNull(roleTO.getVirAttrMap().get(\"rvirtualdata\").getValues());\n+        assertFalse(roleTO.getVirAttrMap().get(\"rvirtualdata\").getValues().isEmpty());\n+        assertEquals(\"rvirtualvalue\", roleTO.getVirAttrMap().get(\"rvirtualdata\").getValues().get(0));\n+\n+        assertNotNull(roleTO.getAccountPolicy());\n+        assertEquals(6L, (long) roleTO.getAccountPolicy());\n+\n+        assertNotNull(roleTO.getPasswordPolicy());\n+        assertEquals(4L, (long) roleTO.getPasswordPolicy());\n+\n+        assertTrue(roleTO.getResources().contains(RESOURCE_NAME_LDAP));\n+\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, roleTO.getKey());\n+        assertNotNull(connObjectTO);\n+        assertNotNull(connObjectTO.getPlainAttrMap().get(\"owner\"));\n+\n+        // SYNCOPE-515: remove ownership\n+        final RoleMod roleMod = new RoleMod();\n+        roleMod.setKey(roleTO.getKey());\n+        roleMod.setRoleOwner(new ReferenceMod());\n+\n+        assertNull(updateRole(roleMod).getRoleOwner());\n+    }\n+\n+    @Test\n+    public void createWithPasswordPolicy() {\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"roleWithPassword\" + getUUIDString());\n+        roleTO.setParent(8L);\n+        roleTO.setPasswordPolicy(4L);\n+\n+        RoleTO actual = createRole(roleTO);\n+        assertNotNull(actual);\n+\n+        actual = roleService.read(actual.getKey());\n+        assertNotNull(actual);\n+        assertNotNull(actual.getPasswordPolicy());\n+        assertEquals(4L, (long) actual.getPasswordPolicy());\n+    }\n+\n+    @Test\n+    public void delete() {\n+        try {\n+            roleService.delete(0L);\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n+        }\n+\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"toBeDeleted\" + getUUIDString());\n+        roleTO.setParent(8L);\n+\n+        roleTO.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        roleTO = createRole(roleTO);\n+        assertNotNull(roleTO);\n+\n+        RoleTO deletedRole = deleteRole(roleTO.getKey());\n+        assertNotNull(deletedRole);\n+\n+        try {\n+            roleService.read(deletedRole.getKey());\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n+        }\n+    }\n+\n+    @Test\n+    public void list() {\n+        PagedResult<RoleTO> roleTOs = roleService.list();\n+        assertNotNull(roleTOs);\n+        assertTrue(roleTOs.getResult().size() >= 8);\n+        for (RoleTO roleTO : roleTOs.getResult()) {\n+            assertNotNull(roleTO);\n+        }\n+    }\n+\n+    @Test\n+    public void parent() {\n+        RoleTO roleTO = roleService.parent(7L);\n+\n+        assertNotNull(roleTO);\n+        assertEquals(roleTO.getKey(), 6L);\n+    }\n+\n+    @Test\n+    public void read() {\n+        RoleTO roleTO = roleService.read(1L);\n+\n+        assertNotNull(roleTO);\n+        assertNotNull(roleTO.getPlainAttrs());\n+        assertFalse(roleTO.getPlainAttrs().isEmpty());\n+    }\n+\n+    @Test\n+    public void selfRead() {\n+        UserTO userTO = userService.read(1L);\n+        assertNotNull(userTO);\n+\n+        assertTrue(userTO.getMembershipMap().containsKey(1L));\n+        assertFalse(userTO.getMembershipMap().containsKey(3L));\n+\n+        RoleService roleService2 = clientFactory.create(\"rossini\", ADMIN_PWD).getService(RoleService.class);\n+\n+        try {\n+            roleService2.readSelf(3L);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.UnauthorizedRole, e.getType());\n+        }\n+\n+        RoleTO roleTO = roleService2.readSelf(1L);\n+        assertNotNull(roleTO);\n+        assertNotNull(roleTO.getPlainAttrs());\n+        assertFalse(roleTO.getPlainAttrs().isEmpty());\n+    }\n+\n+    @Test\n+    public void update() {\n+        RoleTO roleTO = buildRoleTO(\"latestRole\" + getUUIDString());\n+        roleTO.getRAttrTemplates().add(\"show\");\n+        roleTO = createRole(roleTO);\n+\n+        assertEquals(1, roleTO.getPlainAttrs().size());\n+\n+        assertNotNull(roleTO.getAccountPolicy());\n+        assertEquals(6L, (long) roleTO.getAccountPolicy());\n+\n+        assertNotNull(roleTO.getPasswordPolicy());\n+        assertEquals(4L, (long) roleTO.getPasswordPolicy());\n+\n+        RoleMod roleMod = new RoleMod();\n+        roleMod.setKey(roleTO.getKey());\n+        String modName = \"finalRole\" + getUUIDString();\n+        roleMod.setName(modName);\n+        roleMod.getPlainAttrsToUpdate().add(attrMod(\"show\", \"FALSE\"));\n+\n+        // change password policy inheritance\n+        roleMod.setInheritPasswordPolicy(Boolean.FALSE);\n+\n+        roleTO = updateRole(roleMod);\n+\n+        assertEquals(modName, roleTO.getName());\n+        assertEquals(2, roleTO.getPlainAttrs().size());\n+\n+        // changes ignored because not requested (null ReferenceMod)\n+        assertNotNull(roleTO.getAccountPolicy());\n+        assertEquals(6L, (long) roleTO.getAccountPolicy());\n+\n+        // password policy null because not inherited\n+        assertNull(roleTO.getPasswordPolicy());\n+    }\n+\n+    @Test\n+    public void updateRemovingVirAttribute() {\n+        RoleTO roleTO = buildBasicRoleTO(\"withvirtual\" + getUUIDString());\n+        roleTO.getRVirAttrTemplates().add(\"rvirtualdata\");\n+        roleTO.getVirAttrs().add(attrTO(\"rvirtualdata\", null));\n+\n+        roleTO = createRole(roleTO);\n+\n+        assertNotNull(roleTO);\n+        assertEquals(1, roleTO.getVirAttrs().size());\n+\n+        final RoleMod roleMod = new RoleMod();\n+        roleMod.setKey(roleTO.getKey());\n+        roleMod.getVirAttrsToRemove().add(\"rvirtualdata\");\n+\n+        roleTO = updateRole(roleMod);\n+        assertNotNull(roleTO);\n+        assertTrue(roleTO.getVirAttrs().isEmpty());\n+    }\n+\n+    @Test\n+    public void updateRemovingDerAttribute() {\n+        RoleTO roleTO = buildBasicRoleTO(\"withderived\" + getUUIDString());\n+        roleTO.getRDerAttrTemplates().add(\"rderivedschema\");\n+        roleTO.getDerAttrs().add(attrTO(\"rderivedschema\", null));\n+\n+        roleTO = createRole(roleTO);\n+\n+        assertNotNull(roleTO);\n+        assertEquals(1, roleTO.getDerAttrs().size());\n+\n+        final RoleMod roleMod = new RoleMod();\n+        roleMod.setKey(roleTO.getKey());\n+        roleMod.getDerAttrsToRemove().add(\"rderivedschema\");\n+\n+        roleTO = updateRole(roleMod);\n+        assertNotNull(roleTO);\n+        assertTrue(roleTO.getDerAttrs().isEmpty());\n+    }\n+\n+    @Test\n+    public void updateAsRoleOwner() {\n+        // 1. read role as admin\n+        RoleTO roleTO = roleService.read(7L);\n+\n+        // issue SYNCOPE-15\n+        assertNotNull(roleTO.getCreationDate());\n+        assertNotNull(roleTO.getLastChangeDate());\n+        assertEquals(\"admin\", roleTO.getCreator());\n+        assertEquals(\"admin\", roleTO.getLastModifier());\n+\n+        // 2. prepare update\n+        RoleMod roleMod = new RoleMod();\n+        roleMod.setKey(roleTO.getKey());\n+        roleMod.setName(\"Managing Director\");\n+\n+        // 3. try to update as verdi, not owner of role 7 - fail\n+        RoleService roleService2 = clientFactory.create(\"verdi\", ADMIN_PWD).getService(RoleService.class);\n+\n+        try {\n+            roleService2.update(roleMod.getKey(), roleMod);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.UNAUTHORIZED, e.getType().getResponseStatus());\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+\n+        // 4. update as puccini, owner of role 7 because owner of role 6 with inheritance - success\n+        RoleService roleService3 = clientFactory.create(\"puccini\", ADMIN_PWD).getService(RoleService.class);\n+\n+        roleTO = roleService3.update(roleMod.getKey(), roleMod).readEntity(RoleTO.class);\n+        assertEquals(\"Managing Director\", roleTO.getName());\n+\n+        // issue SYNCOPE-15\n+        assertNotNull(roleTO.getCreationDate());\n+        assertNotNull(roleTO.getLastChangeDate());\n+        assertEquals(\"admin\", roleTO.getCreator());\n+        assertEquals(\"puccini\", roleTO.getLastModifier());\n+        assertTrue(roleTO.getCreationDate().before(roleTO.getLastChangeDate()));\n+    }\n+\n+    /**\n+     * Role rename used to fail in case of parent null.\n+     *\n+     * http://code.google.com/p/syncope/issues/detail?id=178\n+     */\n+    @Test\n+    public void issue178() {\n+        RoleTO roleTO = new RoleTO();\n+        String roleName = \"torename\" + getUUIDString();\n+        roleTO.setName(roleName);\n+\n+        RoleTO actual = createRole(roleTO);\n+\n+        assertNotNull(actual);\n+        assertEquals(roleName, actual.getName());\n+        assertEquals(0L, actual.getParent());\n+\n+        RoleMod roleMod = new RoleMod();\n+        roleMod.setKey(actual.getKey());\n+        String renamedRole = \"renamed\" + getUUIDString();\n+        roleMod.setName(renamedRole);\n+\n+        actual = updateRole(roleMod);\n+        assertNotNull(actual);\n+        assertEquals(renamedRole, actual.getName());\n+        assertEquals(0L, actual.getParent());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE228() {\n+        RoleTO roleTO = buildRoleTO(\"issueSYNCOPE228\");\n+        roleTO.getEntitlements().add(\"USER_READ\");\n+        roleTO.getEntitlements().add(\"SCHEMA_READ\");\n+\n+        roleTO = createRole(roleTO);\n+        assertNotNull(roleTO);\n+        assertNotNull(roleTO.getEntitlements());\n+        assertFalse(roleTO.getEntitlements().isEmpty());\n+\n+        List<String> entitlements = roleTO.getEntitlements();\n+\n+        RoleMod roleMod = new RoleMod();\n+        roleMod.setKey(roleTO.getKey());\n+        roleMod.setInheritDerAttrs(Boolean.TRUE);\n+\n+        roleTO = updateRole(roleMod);\n+        assertNotNull(roleTO);\n+        assertEquals(entitlements, roleTO.getEntitlements());\n+\n+        roleMod = new RoleMod();\n+        roleMod.setKey(roleTO.getKey());\n+        roleMod.setModEntitlements(true);\n+        roleMod.getEntitlements().clear();\n+\n+        roleTO = updateRole(roleMod);\n+        assertNotNull(roleTO);\n+        assertTrue(roleTO.getEntitlements().isEmpty());\n+    }\n+\n+    @Test\n+    public void unlink() {\n+        RoleTO actual = createRole(buildRoleTO(\"unlink\"));\n+        assertNotNull(actual);\n+\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, actual.getKey()));\n+\n+        assertNotNull(roleService.bulkDeassociation(actual.getKey(),\n+                ResourceDeassociationActionType.UNLINK,\n+                CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceName.class)).\n+                readEntity(BulkActionResult.class));\n+\n+        actual = roleService.read(actual.getKey());\n+        assertNotNull(actual);\n+        assertTrue(actual.getResources().isEmpty());\n+\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, actual.getKey()));\n+    }\n+\n+    @Test\n+    public void link() {\n+        RoleTO roleTO = buildRoleTO(\"link\");\n+        roleTO.getResources().clear();\n+\n+        RoleTO actual = createRole(roleTO);\n+        assertNotNull(actual);\n+\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, actual.getKey());\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n+\n+        assertNotNull(roleService.bulkAssociation(actual.getKey(),\n+                ResourceAssociationActionType.LINK,\n+                CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceName.class)).\n+                readEntity(BulkActionResult.class));\n+\n+        actual = roleService.read(actual.getKey());\n+        assertFalse(actual.getResources().isEmpty());\n+\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, actual.getKey());\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n+    @Test\n+    public void unassign() {\n+        RoleTO actual = createRole(buildRoleTO(\"unassign\"));\n+        assertNotNull(actual);\n+\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, actual.getKey()));\n+\n+        assertNotNull(roleService.bulkDeassociation(actual.getKey(),\n+                ResourceDeassociationActionType.UNASSIGN,\n+                CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceName.class)).\n+                readEntity(BulkActionResult.class));\n+\n+        actual = roleService.read(actual.getKey());\n+        assertNotNull(actual);\n+        assertTrue(actual.getResources().isEmpty());\n+\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, actual.getKey());\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n+    @Test\n+    public void assign() {\n+        RoleTO roleTO = buildRoleTO(\"assign\");\n+        roleTO.getResources().clear();\n+\n+        RoleTO actual = createRole(roleTO);\n+        assertNotNull(actual);\n+\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, actual.getKey());\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n+\n+        assertNotNull(roleService.bulkAssociation(actual.getKey(),\n+                ResourceAssociationActionType.ASSIGN,\n+                CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceName.class)).\n+                readEntity(BulkActionResult.class));\n+\n+        actual = roleService.read(actual.getKey());\n+        assertFalse(actual.getResources().isEmpty());\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, actual.getKey()));\n+    }\n+\n+    @Test\n+    public void deprovision() {\n+        RoleTO actual = createRole(buildRoleTO(\"deprovision\"));\n+        assertNotNull(actual);\n+\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, actual.getKey()));\n+\n+        assertNotNull(roleService.bulkDeassociation(actual.getKey(),\n+                ResourceDeassociationActionType.DEPROVISION,\n+                CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceName.class)).\n+                readEntity(BulkActionResult.class));\n+\n+        actual = roleService.read(actual.getKey());\n+        assertNotNull(actual);\n+        assertFalse(actual.getResources().isEmpty());\n+\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, actual.getKey());\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n+    @Test\n+    public void provision() {\n+        RoleTO roleTO = buildRoleTO(\"assign\");\n+        roleTO.getResources().clear();\n+\n+        RoleTO actual = createRole(roleTO);\n+        assertNotNull(actual);\n+\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, actual.getKey());\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n+\n+        assertNotNull(roleService.bulkAssociation(actual.getKey(),\n+                ResourceAssociationActionType.PROVISION,\n+                CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceName.class)).\n+                readEntity(BulkActionResult.class));\n+\n+        actual = roleService.read(actual.getKey());\n+        assertTrue(actual.getResources().isEmpty());\n+\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, actual.getKey()));\n+    }\n+\n+    @Test\n+    public void deprovisionUnlinked() {\n+        RoleTO roleTO = buildRoleTO(\"assign\");\n+        roleTO.getResources().clear();\n+\n+        RoleTO actual = createRole(roleTO);\n+        assertNotNull(actual);\n+\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, actual.getKey());\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n+\n+        assertNotNull(roleService.bulkAssociation(actual.getKey(),\n+                ResourceAssociationActionType.PROVISION,\n+                CollectionWrapper.wrap(\"resource-ldap\", ResourceName.class)).\n+                readEntity(BulkActionResult.class));\n+\n+        actual = roleService.read(actual.getKey());\n+        assertTrue(actual.getResources().isEmpty());\n+\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, actual.getKey()));\n+\n+        assertNotNull(roleService.bulkDeassociation(actual.getKey(),\n+                ResourceDeassociationActionType.DEPROVISION,\n+                CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceName.class)).\n+                readEntity(BulkActionResult.class));\n+\n+        actual = roleService.read(actual.getKey());\n+        assertNotNull(actual);\n+        assertTrue(actual.getResources().isEmpty());\n+\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, actual.getKey());\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n+    @Test\n+    public void createWithMandatorySchemaNotTemplate() {\n+        // 1. create a role mandatory schema\n+        PlainSchemaTO badge = new PlainSchemaTO();\n+        badge.setKey(\"badge\");\n+        badge.setMandatoryCondition(\"true\");\n+        schemaService.create(AttributableType.ROLE, SchemaType.PLAIN, badge);\n+\n+        // 2. create a role *without* an attribute for that schema: it works\n+        RoleTO roleTO = buildRoleTO(\"lastRole\");\n+        assertFalse(roleTO.getPlainAttrMap().containsKey(badge.getKey()));\n+        roleTO = createRole(roleTO);\n+        assertNotNull(roleTO);\n+        assertFalse(roleTO.getPlainAttrMap().containsKey(badge.getKey()));\n+\n+        // 3. add a template for badge to the role just created - \n+        // failure since no values are provided and it is mandatory\n+        RoleMod roleMod = new RoleMod();\n+        roleMod.setKey(roleTO.getKey());\n+        roleMod.setModRAttrTemplates(true);\n+        roleMod.getRPlainAttrTemplates().add(\"badge\");\n+\n+        try {\n+            updateRole(roleMod);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n+        }\n+\n+        // 4. also add an actual attribute for badge - it will work        \n+        roleMod.getPlainAttrsToUpdate().add(attrMod(badge.getKey(), \"xxxxxxxxxx\"));\n+\n+        roleTO = updateRole(roleMod);\n+        assertNotNull(roleTO);\n+        assertTrue(roleTO.getPlainAttrMap().containsKey(badge.getKey()));\n+    }\n+\n+    @Test\n+    public void anonymous() {\n+        RoleService unauthenticated = clientFactory.createAnonymous().getService(RoleService.class);\n+        try {\n+            unauthenticated.list();\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+\n+        RoleService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).getService(RoleService.class);\n+        assertFalse(anonymous.list().getResult().isEmpty());\n+    }\n+\n+    @Test\n+    public void noContent() throws IOException {\n+        SyncopeClient noContentclient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n+        RoleService noContentService = noContentclient.prefer(RoleService.class, Preference.RETURN_NO_CONTENT);\n+\n+        RoleTO role = buildRoleTO(\"noContent\");\n+\n+        Response response = noContentService.create(role);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+        assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n+\n+        role = getObject(response.getLocation(), RoleService.class, RoleTO.class);\n+        assertNotNull(role);\n+\n+        RoleMod roleMod = new RoleMod();\n+        roleMod.getPlainAttrsToUpdate().add(attrMod(\"badge\", \"xxxxxxxxxx\"));\n+\n+        response = noContentService.update(role.getKey(), roleMod);\n+        assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n+        assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n+\n+        response = noContentService.delete(role.getKey());\n+        assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n+        assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE455() {\n+        final String parentName = \"issueSYNCOPE455-PRole\";\n+        final String childName = \"issueSYNCOPE455-CRole\";\n+\n+        // 1. create parent role\n+        RoleTO parent = buildBasicRoleTO(parentName);\n+        parent.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        parent = createRole(parent);\n+        assertTrue(parent.getResources().contains(RESOURCE_NAME_LDAP));\n+\n+        final ConnObjectTO parentRemoteObject =\n+                resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, parent.getKey());\n+        assertNotNull(parentRemoteObject);\n+        assertNotNull(getLdapRemoteObject(parentRemoteObject.getPlainAttrMap().get(Name.NAME).getValues().get(0)));\n+\n+        // 2. create child role\n+        RoleTO child = buildBasicRoleTO(childName);\n+        child.getResources().add(RESOURCE_NAME_LDAP);\n+        child.setParent(parent.getKey());\n+\n+        child = createRole(child);\n+        assertTrue(child.getResources().contains(RESOURCE_NAME_LDAP));\n+\n+        final ConnObjectTO childRemoteObject =\n+                resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, child.getKey());\n+        assertNotNull(childRemoteObject);\n+        assertNotNull(getLdapRemoteObject(childRemoteObject.getPlainAttrMap().get(Name.NAME).getValues().get(0)));\n+\n+        // 3. remove parent role\n+        roleService.delete(parent.getKey());\n+\n+        // 4. asserts for issue 455\n+        try {\n+            roleService.read(parent.getKey());\n+            fail();\n+        } catch (SyncopeClientException scce) {\n+            assertNotNull(scce);\n+        }\n+\n+        try {\n+            roleService.read(child.getKey());\n+            fail();\n+        } catch (SyncopeClientException scce) {\n+            assertNotNull(scce);\n+        }\n+\n+        assertNull(getLdapRemoteObject(parentRemoteObject.getPlainAttrMap().get(Name.NAME).getValues().get(0)));\n+        assertNull(getLdapRemoteObject(childRemoteObject.getPlainAttrMap().get(Name.NAME).getValues().get(0)));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE543() {\n+        final String ancestorName = \"issueSYNCOPE543-ARole\";\n+        final String parentName = \"issueSYNCOPE543-PRole\";\n+        final String childName = \"issueSYNCOPE543-CRole\";\n+\n+        // 1. create ancestor role\n+        RoleTO ancestor = buildBasicRoleTO(ancestorName);\n+        ancestor.setParent(0L);\n+        ancestor.getRAttrTemplates().add(\"icon\");\n+        ancestor.getPlainAttrs().add(attrTO(\"icon\", \"ancestorIcon\"));\n+        ancestor = createRole(ancestor);\n+        assertEquals(\"ancestorIcon\", ancestor.getPlainAttrMap().get(\"icon\").getValues().get(0));\n+\n+        // 2. create parent role\n+        RoleTO parent = buildBasicRoleTO(parentName);\n+        parent.setParent(ancestor.getKey());\n+        parent.getRAttrTemplates().add(\"icon\");\n+        parent.getPlainAttrs().add(attrTO(\"icon\", \"parentIcon\"));\n+        parent = createRole(parent);\n+        assertEquals(\"parentIcon\", parent.getPlainAttrMap().get(\"icon\").getValues().get(0));\n+\n+        // 3. create child role\n+        RoleTO child = buildBasicRoleTO(childName);\n+        child.setParent(parent.getKey());\n+        child.getRAttrTemplates().add(\"icon\");\n+        child.getPlainAttrs().add(attrTO(\"icon\", \"childIcon\"));\n+        child = createRole(child);\n+        assertEquals(\"childIcon\", child.getPlainAttrMap().get(\"icon\").getValues().get(0));\n+\n+        final RoleMod roleChildMod = new RoleMod();\n+        roleChildMod.setKey(child.getKey());\n+        roleChildMod.setInheritPlainAttrs(Boolean.TRUE);\n+        updateRole(roleChildMod);\n+\n+        child = roleService.read(child.getKey());\n+        assertNotNull(child);\n+        assertNotNull(child.getPlainAttrMap().get(\"icon\").getValues());\n+        assertEquals(\"parentIcon\", child.getPlainAttrMap().get(\"icon\").getValues().get(0));\n+\n+        final RoleMod roleParentMod = new RoleMod();\n+        roleParentMod.setKey(parent.getKey());\n+        roleParentMod.setInheritPlainAttrs(Boolean.TRUE);\n+        updateRole(roleParentMod);\n+\n+        child = roleService.read(child.getKey());\n+        assertNotNull(child);\n+        assertNotNull(child.getPlainAttrMap().get(\"icon\").getValues());\n+        assertEquals(\"ancestorIcon\", child.getPlainAttrMap().get(\"icon\").getValues().get(0));\n+\n+        parent = roleService.read(parent.getKey());\n+        assertNotNull(parent);\n+        assertNotNull(parent.getPlainAttrMap().get(\"icon\").getValues());\n+        assertEquals(\"ancestorIcon\", parent.getPlainAttrMap().get(\"icon\").getValues().get(0));\n+\n+        roleParentMod.setInheritPlainAttrs(Boolean.FALSE);\n+        updateRole(roleParentMod);\n+\n+        child = roleService.read(child.getKey());\n+        assertNotNull(child);\n+        assertNotNull(child.getPlainAttrMap().get(\"icon\").getValues());\n+        assertEquals(\"parentIcon\", child.getPlainAttrMap().get(\"icon\").getValues().get(0));\n+    }\n+}"},{"sha":"57dfbb070f7aad55dc3858df55e7fd3ae8bfb323","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/SearchITCase.java","status":"added","additions":182,"deletions":0,"changes":182,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FSearchITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class SearchITCase extends AbstractITCase {\n+\n+    @Test\n+    public void searchUser() {\n+        // LIKE\n+        PagedResult<UserTO> matchedUsers = userService.search(\n+                SyncopeClient.getUserSearchConditionBuilder().\n+                is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query());\n+        assertNotNull(matchedUsers);\n+        assertFalse(matchedUsers.getResult().isEmpty());\n+\n+        for (UserTO user : matchedUsers.getResult()) {\n+            assertNotNull(user);\n+        }\n+\n+        // ISNULL\n+        matchedUsers = userService.search(\n+                SyncopeClient.getUserSearchConditionBuilder().isNull(\"loginDate\").query());\n+        assertNotNull(matchedUsers);\n+        assertFalse(matchedUsers.getResult().isEmpty());\n+\n+        Set<Long> userIds = new HashSet<Long>(matchedUsers.getResult().size());\n+        for (UserTO user : matchedUsers.getResult()) {\n+            userIds.add(user.getKey());\n+        }\n+        assertTrue(userIds.contains(2L));\n+        assertTrue(userIds.contains(3L));\n+    }\n+\n+    @Test\n+    public void searchByUsernameAndKey() {\n+        final PagedResult<UserTO> matchingUsers = userService.search(\n+                SyncopeClient.getUserSearchConditionBuilder().\n+                is(\"username\").equalTo(\"rossini\").and(\"key\").lessThan(2).query());\n+\n+        assertNotNull(matchingUsers);\n+        assertEquals(1, matchingUsers.getResult().size());\n+        assertEquals(\"rossini\", matchingUsers.getResult().iterator().next().getUsername());\n+        assertEquals(1L, matchingUsers.getResult().iterator().next().getKey());\n+    }\n+\n+    @Test\n+    public void searchByRolenameAndKey() {\n+        final PagedResult<RoleTO> matchingRoles = roleService.search(\n+                SyncopeClient.getRoleSearchConditionBuilder().\n+                is(\"name\").equalTo(\"root\").and(\"key\").lessThan(2).query());\n+\n+        assertNotNull(matchingRoles);\n+        assertEquals(1, matchingRoles.getResult().size());\n+        assertEquals(\"root\", matchingRoles.getResult().iterator().next().getName());\n+        assertEquals(1L, matchingRoles.getResult().iterator().next().getKey());\n+    }\n+\n+    @Test\n+    public void searchUserByResourceName() {\n+        PagedResult<UserTO> matchedUsers = userService.search(\n+                SyncopeClient.getUserSearchConditionBuilder().hasResources(RESOURCE_NAME_MAPPINGS2).query());\n+        assertNotNull(matchedUsers);\n+        assertFalse(matchedUsers.getResult().isEmpty());\n+\n+        Set<Long> userIds = new HashSet<Long>(matchedUsers.getResult().size());\n+        for (UserTO user : matchedUsers.getResult()) {\n+            userIds.add(user.getKey());\n+        }\n+\n+        assertEquals(1, userIds.size());\n+        assertTrue(userIds.contains(2L));\n+    }\n+\n+    @Test\n+    public void paginatedSearch() {\n+        // LIKE\n+        PagedResult<UserTO> matchingUsers = userService.search(\n+                SyncopeClient.getUserSearchConditionBuilder().\n+                is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query(), 1, 2);\n+        assertNotNull(matchingUsers);\n+\n+        assertFalse(matchingUsers.getResult().isEmpty());\n+        for (UserTO user : matchingUsers.getResult()) {\n+            assertNotNull(user);\n+        }\n+\n+        // ISNULL\n+        matchingUsers = userService.search(\n+                SyncopeClient.getUserSearchConditionBuilder().isNull(\"loginDate\").query(), 1, 2);\n+\n+        assertNotNull(matchingUsers);\n+        assertFalse(matchingUsers.getResult().isEmpty());\n+        Set<Long> userIds = new HashSet<>(matchingUsers.getResult().size());\n+        for (UserTO user : matchingUsers.getResult()) {\n+            userIds.add(user.getKey());\n+        }\n+        assertEquals(2, userIds.size());\n+    }\n+\n+    @Test\n+    public void searchByBooleanSubjectCond() {\n+        final PagedResult<RoleTO> matchingRoles = roleService.search(\n+                SyncopeClient.getRoleSearchConditionBuilder().is(\"inheritPlainAttrs\").equalTo(\"true\").query());\n+        assertNotNull(matchingRoles);\n+        assertFalse(matchingRoles.getResult().isEmpty());\n+    }\n+\n+    @Test\n+    public void searchByEntitlement() {\n+        final PagedResult<RoleTO> matchingRoles = roleService.search(\n+                SyncopeClient.getRoleSearchConditionBuilder().hasEntitlements(\"USER_LIST\", \"USER_READ\").query());\n+        assertNotNull(matchingRoles);\n+        assertFalse(matchingRoles.getResult().isEmpty());\n+    }\n+\n+    @Test\n+    public void searchByRelationshipSubjectCond() {\n+        final PagedResult<RoleTO> matchingRoles = roleService.search(SyncopeClient.getRoleSearchConditionBuilder().\n+                isNotNull(\"passwordPolicy\").and(\"userOwner\").equalTo(5).query());\n+\n+        assertNotNull(matchingRoles);\n+        assertEquals(1, matchingRoles.getResult().size());\n+        assertEquals(\"director\", matchingRoles.getResult().iterator().next().getName());\n+        assertEquals(6L, matchingRoles.getResult().iterator().next().getKey());\n+    }\n+\n+    @Test\n+    public void nested() {\n+        PagedResult<UserTO> matchedUsers = userService.search(\n+                \"((fullname==*o*,fullname==*i*);$resources!=ws-target-resource-1)\", 1, 2);\n+        assertNotNull(matchedUsers);\n+\n+        assertFalse(matchedUsers.getResult().isEmpty());\n+        for (UserTO user : matchedUsers.getResult()) {\n+            assertNotNull(user);\n+        }\n+    }\n+\n+    @Test\n+    public void orderBy() {\n+        final PagedResult<UserTO> matchedUsers = userService.search(\n+                SyncopeClient.getUserSearchConditionBuilder().is(\"userId\").equalTo(\"*@apache.org\").query(),\n+                SyncopeClient.getOrderByClauseBuilder().asc(\"status\").desc(\"firstname\").build());\n+\n+        assertFalse(matchedUsers.getResult().isEmpty());\n+        for (UserTO user : matchedUsers.getResult()) {\n+            assertNotNull(user);\n+        }\n+    }\n+}"},{"sha":"da65d29ecc3a48eef561d8c07979fe1aa7a00918","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/SecurityQuestionITCase.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FSecurityQuestionITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FSecurityQuestionITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FSecurityQuestionITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.service.SecurityQuestionService;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class SecurityQuestionITCase extends AbstractITCase {\n+\n+    @Test\n+    public void read() {\n+        SecurityQuestionTO securityQuestionTO = securityQuestionService.read(1L);\n+        assertNotNull(securityQuestionTO);\n+    }\n+\n+    @Test\n+    public void list() {\n+        List<SecurityQuestionTO> securityQuestionTOs = securityQuestionService.list();\n+        assertNotNull(securityQuestionTOs);\n+        assertFalse(securityQuestionTOs.isEmpty());\n+        for (SecurityQuestionTO instance : securityQuestionTOs) {\n+            assertNotNull(instance);\n+        }\n+    }\n+\n+    @Test\n+    public void create() {\n+        SecurityQuestionTO securityQuestionTO = new SecurityQuestionTO();\n+        securityQuestionTO.setContent(\"What is your favorite pet's name?\");\n+\n+        Response response = securityQuestionService.create(securityQuestionTO);\n+        SecurityQuestionTO actual = getObject(response.getLocation(), SecurityQuestionService.class,\n+                SecurityQuestionTO.class);\n+\n+        assertNotNull(actual);\n+        assertNotNull(actual.getKey());\n+        securityQuestionTO.setKey(actual.getKey());\n+        assertEquals(actual, securityQuestionTO);\n+    }\n+\n+    @Test\n+    public void update() {\n+        SecurityQuestionTO securityQuestionTO = securityQuestionService.read(1L);\n+        securityQuestionTO.setContent(\"What is your favorite color?\");\n+\n+        securityQuestionService.update(securityQuestionTO.getKey(), securityQuestionTO);\n+        SecurityQuestionTO actual = securityQuestionService.read(securityQuestionTO.getKey());\n+        assertNotNull(actual);\n+        assertEquals(actual, securityQuestionTO);\n+    }\n+\n+    @Test\n+    public void delete() {\n+        SecurityQuestionTO securityQuestion = new SecurityQuestionTO();\n+        securityQuestion.setContent(\"What is your first pet's name?\");\n+\n+        Response response = securityQuestionService.create(securityQuestion);\n+        securityQuestion = getObject(response.getLocation(), SecurityQuestionService.class, SecurityQuestionTO.class);\n+\n+        securityQuestionService.delete(securityQuestion.getKey());\n+\n+        try {\n+            securityQuestionService.read(securityQuestion.getKey());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+    }\n+\n+}"},{"sha":"c144dbd01f0ed9b19dea8816e8834bf382177b6c","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/TaskITCase.java","status":"added","additions":1385,"deletions":0,"changes":1385,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FTaskITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,1385 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.mod.StatusMod;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.BulkAction;\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.NotificationTO;\n+import org.apache.syncope.common.lib.to.NotificationTaskTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n+import org.apache.syncope.common.lib.to.PushTaskTO;\n+import org.apache.syncope.common.lib.to.ReportExecTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.to.SyncPolicyTO;\n+import org.apache.syncope.common.lib.to.SyncTaskTO;\n+import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.MatchingRule;\n+import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.lib.types.TraceLevel;\n+import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.common.lib.wrap.JobClass;\n+import org.apache.syncope.common.lib.wrap.PushActionClass;\n+import org.apache.syncope.common.lib.wrap.ResourceName;\n+import org.apache.syncope.common.lib.wrap.SyncActionClass;\n+import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.rest.api.service.NotificationService;\n+import org.apache.syncope.common.rest.api.service.ResourceService;\n+import org.apache.syncope.common.rest.api.service.TaskService;\n+import org.apache.syncope.server.misc.security.Encryptor;\n+import org.apache.syncope.server.provisioning.api.job.SyncJob;\n+import org.apache.syncope.server.provisioning.java.sync.DBPasswordSyncActions;\n+import org.apache.syncope.server.provisioning.java.sync.LDAPPasswordSyncActions;\n+import org.identityconnectors.framework.common.objects.Name;\n+import org.junit.BeforeClass;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class TaskITCase extends AbstractITCase {\n+\n+    private static final Long SCHED_TASK_ID = 5L;\n+\n+    private static final Long SYNC_TASK_ID = 4L;\n+\n+    private static class ThreadExec implements Callable<TaskExecTO> {\n+\n+        private final TaskITCase test;\n+\n+        private final Long taskKey;\n+\n+        private final int maxWaitSeconds;\n+\n+        private final boolean dryRun;\n+\n+        public ThreadExec(TaskITCase test, Long taskKey, int maxWaitSeconds, boolean dryRun) {\n+            this.test = test;\n+            this.taskKey = taskKey;\n+            this.maxWaitSeconds = maxWaitSeconds;\n+            this.dryRun = dryRun;\n+        }\n+\n+        @Override\n+        public TaskExecTO call() throws Exception {\n+            return test.execSyncTask(taskKey, maxWaitSeconds, dryRun);\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void testSyncActionsSetup() {\n+        SyncTaskTO syncTask = taskService.read(SYNC_TASK_ID);\n+        syncTask.getActionsClassNames().add(TestSyncActions.class.getName());\n+        taskService.update(SYNC_TASK_ID, syncTask);\n+    }\n+\n+    /**\n+     * Remove initial and synchronized users to make test re-runnable.\n+     */\n+    private void removeTestUsers() {\n+        for (int i = 0; i < 10; i++) {\n+            String cUserName = \"test\" + i;\n+            try {\n+                UserTO cUserTO = readUser(cUserName);\n+                userService.delete(cUserTO.getKey());\n+            } catch (Exception e) {\n+                // Ignore\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void getJobClasses() {\n+        List<JobClass> jobClasses = taskService.getJobClasses();\n+        assertNotNull(jobClasses);\n+        assertFalse(jobClasses.isEmpty());\n+    }\n+\n+    @Test\n+    public void getSyncActionsClasses() {\n+        List<SyncActionClass> actions = taskService.getSyncActionsClasses();\n+        assertNotNull(actions);\n+        assertFalse(actions.isEmpty());\n+    }\n+\n+    @Test\n+    public void getPushActionsClasses() {\n+        List<PushActionClass> actions = taskService.getPushActionsClasses();\n+        assertNotNull(actions);\n+    }\n+\n+    @Test\n+    public void createSyncTask() {\n+        SyncTaskTO task = new SyncTaskTO();\n+        task.setName(\"Test create Sync\");\n+        task.setResource(RESOURCE_NAME_WS2);\n+\n+        UserTO userTemplate = new UserTO();\n+        userTemplate.getResources().add(RESOURCE_NAME_WS2);\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(8L);\n+        userTemplate.getMemberships().add(membershipTO);\n+        task.setUserTemplate(userTemplate);\n+\n+        RoleTO roleTemplate = new RoleTO();\n+        roleTemplate.getResources().add(RESOURCE_NAME_LDAP);\n+        task.setRoleTemplate(roleTemplate);\n+\n+        Response response = taskService.create(task);\n+        SyncTaskTO actual = getObject(response.getLocation(), TaskService.class, SyncTaskTO.class);\n+        assertNotNull(actual);\n+\n+        task = taskService.read(actual.getKey());\n+        assertNotNull(task);\n+        assertEquals(actual.getKey(), task.getKey());\n+        assertEquals(actual.getJobClassName(), task.getJobClassName());\n+        assertEquals(userTemplate, task.getUserTemplate());\n+        assertEquals(roleTemplate, task.getRoleTemplate());\n+    }\n+\n+    @Test\n+    public void createPushTask() {\n+        PushTaskTO task = new PushTaskTO();\n+        task.setName(\"Test create Push\");\n+        task.setResource(RESOURCE_NAME_WS2);\n+        task.setUserFilter(\n+                SyncopeClient.getUserSearchConditionBuilder().hasNotResources(RESOURCE_NAME_TESTDB2).query());\n+        task.setRoleFilter(\n+                SyncopeClient.getRoleSearchConditionBuilder().isNotNull(\"cool\").query());\n+        task.setMatchingRule(MatchingRule.LINK);\n+\n+        final Response response = taskService.create(task);\n+        final PushTaskTO actual = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n+        assertNotNull(actual);\n+\n+        task = taskService.read(actual.getKey());\n+        assertNotNull(task);\n+        assertEquals(task.getKey(), actual.getKey());\n+        assertEquals(task.getJobClassName(), actual.getJobClassName());\n+        assertEquals(task.getUserFilter(), actual.getUserFilter());\n+        assertEquals(task.getRoleFilter(), actual.getRoleFilter());\n+        assertEquals(UnmatchingRule.ASSIGN, actual.getUnmatchingRule());\n+        assertEquals(MatchingRule.LINK, actual.getMatchingRule());\n+    }\n+\n+    @Test\n+    public void update() {\n+        SchedTaskTO task = taskService.read(SCHED_TASK_ID);\n+        assertNotNull(task);\n+\n+        final SchedTaskTO taskMod = new SchedTaskTO();\n+        taskMod.setKey(5);\n+        taskMod.setCronExpression(null);\n+\n+        taskService.update(taskMod.getKey(), taskMod);\n+        SchedTaskTO actual = taskService.read(taskMod.getKey());\n+        assertNotNull(actual);\n+        assertEquals(task.getKey(), actual.getKey());\n+        assertNull(actual.getCronExpression());\n+    }\n+\n+    @Test\n+    public void listSchedTask() {\n+        final PagedResult<SchedTaskTO> tasks = taskService.list(TaskType.SCHEDULED);\n+        assertFalse(tasks.getResult().isEmpty());\n+        for (AbstractTaskTO task : tasks.getResult()) {\n+            if (!(task instanceof SchedTaskTO) || task instanceof SyncTaskTO || task instanceof PushTaskTO) {\n+                fail();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void listSyncTask() {\n+        final PagedResult<SyncTaskTO> tasks = taskService.list(TaskType.SYNCHRONIZATION);\n+        assertFalse(tasks.getResult().isEmpty());\n+        for (AbstractTaskTO task : tasks.getResult()) {\n+            if (!(task instanceof SyncTaskTO)) {\n+                fail();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void list() {\n+        final PagedResult<PushTaskTO> tasks = taskService.list(TaskType.PUSH);\n+        assertFalse(tasks.getResult().isEmpty());\n+        for (AbstractTaskTO task : tasks.getResult()) {\n+            if (!(task instanceof PushTaskTO)) {\n+                fail();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void paginatedList() {\n+        PagedResult<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION, 1, 2);\n+\n+        assertNotNull(tasks);\n+        assertFalse(tasks.getResult().isEmpty());\n+        assertEquals(2, tasks.getResult().size());\n+\n+        for (AbstractTaskTO task : tasks.getResult()) {\n+            assertNotNull(task);\n+        }\n+\n+        tasks = taskService.list(TaskType.PROPAGATION, 2, 2);\n+\n+        assertNotNull(tasks);\n+        assertFalse(tasks.getResult().isEmpty());\n+\n+        for (AbstractTaskTO task : tasks.getResult()) {\n+            assertNotNull(task);\n+        }\n+\n+        tasks = taskService.list(TaskType.PROPAGATION, 1000, 2);\n+\n+        assertNotNull(tasks);\n+        assertTrue(tasks.getResult().isEmpty());\n+    }\n+\n+    @Test\n+    public void read() {\n+        final PropagationTaskTO taskTO = taskService.read(3L);\n+\n+        assertNotNull(taskTO);\n+        assertNotNull(taskTO.getExecutions());\n+        assertTrue(taskTO.getExecutions().isEmpty());\n+\n+        final PushTaskTO pushTaskTO = taskService.<PushTaskTO>read(17L);\n+        assertEquals(UnmatchingRule.ASSIGN, pushTaskTO.getUnmatchingRule());\n+        assertEquals(MatchingRule.UPDATE, pushTaskTO.getMatchingRule());\n+    }\n+\n+    @Test\n+    public void readExecution() {\n+        TaskExecTO taskTO = taskService.readExecution(6L);\n+        assertNotNull(taskTO);\n+    }\n+\n+    @Test\n+    // Currently test is not re-runnable.\n+    // To successfully run test second time it is necessary to restart cargo.\n+    public void deal() {\n+        try {\n+            taskService.delete(0L);\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n+        }\n+        TaskExecTO exec = taskService.execute(1L, false);\n+        assertEquals(PropagationTaskExecStatus.SUBMITTED.name(), exec.getStatus());\n+\n+        ReportExecTO report = new ReportExecTO();\n+        report.setStatus(PropagationTaskExecStatus.SUCCESS.name());\n+        report.setMessage(\"OK\");\n+        taskService.report(exec.getKey(), report);\n+        exec = taskService.readExecution(exec.getKey());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS.name(), exec.getStatus());\n+        assertEquals(\"OK\", exec.getMessage());\n+\n+        taskService.delete(1L);\n+        try {\n+            taskService.readExecution(exec.getKey());\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n+        }\n+    }\n+\n+    @Test\n+    public void sync() throws Exception {\n+        removeTestUsers();\n+\n+        // -----------------------------\n+        // Create a new user ... it should be updated applying sync policy\n+        // -----------------------------\n+        UserTO inUserTO = new UserTO();\n+        inUserTO.setPassword(\"password123\");\n+        String userName = \"test9\";\n+        inUserTO.setUsername(userName);\n+        inUserTO.getPlainAttrs().add(attrTO(\"firstname\", \"nome9\"));\n+        inUserTO.getPlainAttrs().add(attrTO(\"surname\", \"cognome\"));\n+        inUserTO.getPlainAttrs().add(attrTO(\"type\", \"a type\"));\n+        inUserTO.getPlainAttrs().add(attrTO(\"fullname\", \"nome cognome\"));\n+        inUserTO.getPlainAttrs().add(attrTO(\"userId\", \"puccini@syncope.apache.org\"));\n+        inUserTO.getPlainAttrs().add(attrTO(\"email\", \"puccini@syncope.apache.org\"));\n+        inUserTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+        inUserTO = createUser(inUserTO);\n+        assertNotNull(inUserTO);\n+        assertFalse(inUserTO.getResources().contains(RESOURCE_NAME_CSV));\n+\n+        // -----------------------------\n+        try {\n+            int usersPre = userService.list(1, 1).getTotalCount();\n+            assertNotNull(usersPre);\n+\n+            execSyncTask(SYNC_TASK_ID, 50, false);\n+\n+            // after execution of the sync task the user data should be synced from\n+            // csv datasource and processed by user template\n+            UserTO userTO = userService.read(inUserTO.getKey());\n+            assertNotNull(userTO);\n+            assertEquals(userName, userTO.getUsername());\n+            assertEquals(ActivitiDetector.isActivitiEnabledForUsers() ? \"active\" : \"created\", userTO.getStatus());\n+            assertEquals(\"test9@syncope.apache.org\", userTO.getPlainAttrMap().get(\"email\").getValues().get(0));\n+            assertEquals(\"test9@syncope.apache.org\", userTO.getPlainAttrMap().get(\"userId\").getValues().get(0));\n+            assertTrue(Integer.valueOf(userTO.getPlainAttrMap().get(\"fullname\").getValues().get(0)) <= 10);\n+            assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB));\n+            assertTrue(userTO.getResources().contains(RESOURCE_NAME_WS2));\n+\n+            // Matching --> Update (no link)\n+            assertFalse(userTO.getResources().contains(RESOURCE_NAME_CSV));\n+\n+            // check for user template\n+            userTO = readUser(\"test7\");\n+            assertNotNull(userTO);\n+            assertEquals(\"TYPE_OTHER\", userTO.getPlainAttrMap().get(\"type\").getValues().get(0));\n+            assertEquals(3, userTO.getResources().size());\n+            assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB));\n+            assertTrue(userTO.getResources().contains(RESOURCE_NAME_WS2));\n+            assertEquals(1, userTO.getMemberships().size());\n+            assertTrue(userTO.getMemberships().get(0).getPlainAttrMap().containsKey(\"subscriptionDate\"));\n+\n+            // Unmatching --> Assign (link)\n+            assertTrue(userTO.getResources().contains(RESOURCE_NAME_CSV));\n+\n+            userTO = readUser(\"test8\");\n+            assertNotNull(userTO);\n+            assertEquals(\"TYPE_8\", userTO.getPlainAttrMap().get(\"type\").getValues().get(0));\n+\n+            // check for sync results\n+            int usersPost = userService.list(1, 1).getTotalCount();\n+            assertNotNull(usersPost);\n+            assertEquals(usersPre + 9, usersPost);\n+\n+            // Check for issue 215:\n+            // * expected disabled user test1\n+            // * expected enabled user test2\n+            userTO = readUser(\"test1\");\n+            assertNotNull(userTO);\n+            assertEquals(\"suspended\", userTO.getStatus());\n+\n+            userTO = readUser(\"test3\");\n+            assertNotNull(userTO);\n+            assertEquals(\"active\", userTO.getStatus());\n+\n+            // SYNCOPE-317\n+            execSyncTask(SYNC_TASK_ID, 50, false);\n+\n+            final Set<Long> pushTaskIds = new HashSet<Long>();\n+            pushTaskIds.add(25L);\n+            pushTaskIds.add(26L);\n+\n+            execSyncTasks(pushTaskIds, 50, false);\n+            // Matching --> UNLINK\n+            assertFalse(readUser(\"test9\").getResources().contains(RESOURCE_NAME_CSV));\n+            assertFalse(readUser(\"test7\").getResources().contains(RESOURCE_NAME_CSV));\n+        } finally {\n+            removeTestUsers();\n+        }\n+    }\n+\n+    @Test\n+    public void reconcileFromDB() {\n+        // update sync task\n+        TaskExecTO execution = execSyncTask(7L, 50, false);\n+        assertNotNull(execution.getStatus());\n+        assertTrue(PropagationTaskExecStatus.valueOf(execution.getStatus()).isSuccessful());\n+\n+        UserTO userTO = readUser(\"testuser1\");\n+        assertNotNull(userTO);\n+        assertEquals(\"reconciled@syncope.apache.org\", userTO.getPlainAttrMap().get(\"userId\").getValues().get(0));\n+        assertEquals(\"suspended\", userTO.getStatus());\n+\n+        // enable user on external resource\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        jdbcTemplate.execute(\"UPDATE TEST SET STATUS=TRUE\");\n+\n+        // re-execute the same SyncTask: now user must be active\n+        execution = execSyncTask(7L, 50, false);\n+        assertNotNull(execution.getStatus());\n+        assertTrue(PropagationTaskExecStatus.valueOf(execution.getStatus()).isSuccessful());\n+\n+        userTO = readUser(\"testuser1\");\n+        assertNotNull(userTO);\n+        assertEquals(\"active\", userTO.getStatus());\n+    }\n+\n+    /**\n+     * Clean Syncope and LDAP resource status.\n+     */\n+    private void ldapCleanup() {\n+        PagedResult<RoleTO> matchingRoles = roleService.search(\n+                SyncopeClient.getRoleSearchConditionBuilder().is(\"name\").equalTo(\"testLDAPGroup\").query());\n+        if (matchingRoles.getSize() > 0) {\n+            for (RoleTO role : matchingRoles.getResult()) {\n+                roleService.bulkDeassociation(role.getKey(),\n+                        ResourceDeassociationActionType.UNLINK,\n+                        CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceName.class));\n+                roleService.delete(role.getKey());\n+            }\n+        }\n+        PagedResult<UserTO> matchingUsers = userService.search(\n+                SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"syncFromLDAP\").query());\n+        if (matchingUsers.getSize() > 0) {\n+            for (UserTO user : matchingUsers.getResult()) {\n+                userService.bulkDeassociation(user.getKey(),\n+                        ResourceDeassociationActionType.UNLINK,\n+                        CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceName.class));\n+                userService.delete(user.getKey());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void reconcileFromLDAP() {\n+        // First of all, clear any potential conflict with existing user / role\n+        ldapCleanup();\n+\n+        // Update sync task\n+        TaskExecTO execution = execSyncTask(11L, 50, false);\n+\n+        // 1. verify execution status\n+        final String status = execution.getStatus();\n+        assertNotNull(status);\n+        assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n+\n+        // 2. verify that synchronized role is found, with expected attributes\n+        final PagedResult<RoleTO> matchingRoles = roleService.search(\n+                SyncopeClient.getRoleSearchConditionBuilder().is(\"name\").equalTo(\"testLDAPGroup\").query());\n+        assertNotNull(matchingRoles);\n+        assertEquals(1, matchingRoles.getResult().size());\n+\n+        final PagedResult<UserTO> matchingUsers = userService.search(\n+                SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"syncFromLDAP\").query());\n+        assertNotNull(matchingUsers);\n+        assertEquals(1, matchingUsers.getResult().size());\n+\n+        // Check for SYNCOPE-436\n+        assertEquals(\"syncFromLDAP\",\n+                matchingUsers.getResult().get(0).getVirAttrMap().get(\"virtualReadOnly\").getValues().get(0));\n+        // Check for SYNCOPE-270\n+        assertNotNull(matchingUsers.getResult().get(0).getPlainAttrMap().get(\"obscure\"));\n+        // Check for SYNCOPE-123\n+        assertNotNull(matchingUsers.getResult().get(0).getPlainAttrMap().get(\"photo\"));\n+\n+        final RoleTO roleTO = matchingRoles.getResult().iterator().next();\n+        assertNotNull(roleTO);\n+        assertEquals(\"testLDAPGroup\", roleTO.getName());\n+        assertEquals(8L, roleTO.getParent());\n+        assertEquals(\"true\", roleTO.getPlainAttrMap().get(\"show\").getValues().get(0));\n+        assertEquals(matchingUsers.getResult().iterator().next().getKey(), (long) roleTO.getUserOwner());\n+        assertNull(roleTO.getRoleOwner());\n+\n+        // 3. verify that LDAP group membership is propagated as Syncope role membership\n+        final PagedResult<UserTO> members = userService.search(\n+                SyncopeClient.getUserSearchConditionBuilder().hasRoles(roleTO.getKey()).query());\n+        assertNotNull(members);\n+        assertEquals(1, members.getResult().size());\n+    }\n+\n+    @Test\n+    public void issue196() {\n+        TaskExecTO exec = taskService.execute(6L, false);\n+        assertNotNull(exec);\n+        assertEquals(0, exec.getKey());\n+        assertNotNull(exec.getTask());\n+    }\n+\n+    @Test\n+    public void dryRun() {\n+        TaskExecTO execution = execSyncTask(SYNC_TASK_ID, 50, true);\n+        assertEquals(\"Execution of task \" + execution.getTask() + \" failed with message \" + execution.getMessage(),\n+                \"SUCCESS\", execution.getStatus());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE81() {\n+        String sender = \"syncope81@syncope.apache.org\";\n+        createNotificationTask(sender);\n+        NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n+        assertNotNull(taskTO);\n+\n+        assertTrue(taskTO.getExecutions().isEmpty());\n+\n+        // generate an execution in order to verify the deletion of a notification task with one or more executions\n+        TaskExecTO execution = taskService.execute(taskTO.getKey(), false);\n+        assertEquals(\"NOT_SENT\", execution.getStatus());\n+\n+        int i = 0;\n+        int maxit = 50;\n+        int executions = 0;\n+\n+        // wait for task exec completion (executions incremented)\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            taskTO = taskService.read(taskTO.getKey());\n+\n+            assertNotNull(taskTO);\n+            assertNotNull(taskTO.getExecutions());\n+\n+            i++;\n+        } while (executions == taskTO.getExecutions().size() && i < maxit);\n+\n+        assertFalse(taskTO.getExecutions().isEmpty());\n+\n+        taskService.delete(taskTO.getKey());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE86() {\n+        // 1. create notification task\n+        String sender = \"syncope86@syncope.apache.org\";\n+        createNotificationTask(sender);\n+\n+        // 2. get NotificationTaskTO for user just created\n+        NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n+        assertNotNull(taskTO);\n+        assertTrue(taskTO.getExecutions().isEmpty());\n+\n+        try {\n+            // 3. execute the generated NotificationTask\n+            TaskExecTO execution = taskService.execute(taskTO.getKey(), false);\n+            assertNotNull(execution);\n+\n+            // 4. verify\n+            taskTO = taskService.read(taskTO.getKey());\n+            assertNotNull(taskTO);\n+            assertEquals(1, taskTO.getExecutions().size());\n+        } finally {\n+            // Remove execution to make test re-runnable\n+            taskService.deleteExecution(taskTO.getExecutions().get(0).getKey());\n+        }\n+    }\n+\n+    private NotificationTaskTO findNotificationTaskBySender(final String sender) {\n+        PagedResult<NotificationTaskTO> tasks = taskService.list(TaskType.NOTIFICATION);\n+        assertNotNull(tasks);\n+        assertFalse(tasks.getResult().isEmpty());\n+        NotificationTaskTO taskTO = null;\n+        for (NotificationTaskTO task : tasks.getResult()) {\n+            if (sender.equals(task.getSender())) {\n+                taskTO = task;\n+            }\n+        }\n+        return taskTO;\n+    }\n+\n+    private void createNotificationTask(final String sender) {\n+        // 1. Create notification\n+        NotificationTO notification = new NotificationTO();\n+        notification.setTraceLevel(TraceLevel.FAILURES);\n+        notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n+\n+        notification.setUserAbout(SyncopeClient.getUserSearchConditionBuilder().hasRoles(7L).query());\n+\n+        notification.setRecipients(SyncopeClient.getUserSearchConditionBuilder().hasRoles(8L).query());\n+        notification.setSelfAsRecipient(true);\n+\n+        notification.setRecipientAttrName(\"email\");\n+        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n+\n+        notification.setSender(sender);\n+        String subject = \"Test notification\";\n+        notification.setSubject(subject);\n+        notification.setTemplate(\"optin\");\n+        notification.setActive(true);\n+\n+        Response response = notificationService.create(notification);\n+        notification = getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n+        assertNotNull(notification);\n+\n+        // 2. create user\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope@syncope.apache.org\");\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE68() {\n+        //-----------------------------\n+        // Create a new user ... it should be updated applying sync policy\n+        //-----------------------------\n+        UserTO userTO = new UserTO();\n+        userTO.setPassword(\"password123\");\n+        userTO.setUsername(\"testuser2\");\n+\n+        userTO.getPlainAttrs().add(attrTO(\"firstname\", \"testuser2\"));\n+        userTO.getPlainAttrs().add(attrTO(\"surname\", \"testuser2\"));\n+        userTO.getPlainAttrs().add(attrTO(\"type\", \"a type\"));\n+        userTO.getPlainAttrs().add(attrTO(\"fullname\", \"a type\"));\n+        userTO.getPlainAttrs().add(attrTO(\"userId\", \"testuser2@syncope.apache.org\"));\n+        userTO.getPlainAttrs().add(attrTO(\"email\", \"testuser2@syncope.apache.org\"));\n+\n+        userTO.getResources().add(RESOURCE_NAME_NOPROPAGATION2);\n+        userTO.getResources().add(RESOURCE_NAME_NOPROPAGATION4);\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7L);\n+\n+        userTO.getMemberships().add(membershipTO);\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertEquals(\"testuser2\", userTO.getUsername());\n+        assertEquals(1, userTO.getMemberships().size());\n+        assertEquals(3, userTO.getResources().size());\n+        //-----------------------------\n+\n+        try {\n+            //-----------------------------\n+            //  add user template\n+            //-----------------------------\n+            UserTO template = new UserTO();\n+\n+            membershipTO = new MembershipTO();\n+            membershipTO.setRoleId(10L);\n+\n+            template.getMemberships().add(membershipTO);\n+\n+            template.getResources().add(RESOURCE_NAME_NOPROPAGATION4);\n+            //-----------------------------\n+\n+            // Update sync task\n+            SyncTaskTO task = taskService.read(9L);\n+            assertNotNull(task);\n+\n+            task.setUserTemplate(template);\n+\n+            taskService.update(task.getKey(), task);\n+            SyncTaskTO actual = taskService.read(task.getKey());\n+            assertNotNull(actual);\n+            assertEquals(task.getKey(), actual.getKey());\n+            assertFalse(actual.getUserTemplate().getResources().isEmpty());\n+            assertFalse(actual.getUserTemplate().getMemberships().isEmpty());\n+\n+            TaskExecTO execution = execSyncTask(actual.getKey(), 50, false);\n+            final String status = execution.getStatus();\n+            assertNotNull(status);\n+            assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n+\n+            userTO = readUser(\"testuser2\");\n+            assertNotNull(userTO);\n+            assertEquals(\"testuser2@syncope.apache.org\", userTO.getPlainAttrMap().get(\"userId\").getValues().get(0));\n+            assertEquals(2, userTO.getMemberships().size());\n+            assertEquals(4, userTO.getResources().size());\n+        } finally {\n+            UserTO dUserTO = deleteUser(userTO.getKey());\n+            assertNotNull(dUserTO);\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE144() {\n+        SchedTaskTO task = new SchedTaskTO();\n+        task.setName(\"issueSYNCOPE144\");\n+        task.setDescription(\"issueSYNCOPE144 Description\");\n+        task.setJobClassName(SyncJob.class.getName());\n+\n+        Response response = taskService.create(task);\n+        SchedTaskTO actual = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n+        assertNotNull(actual);\n+        assertEquals(\"issueSYNCOPE144\", actual.getName());\n+        assertEquals(\"issueSYNCOPE144 Description\", actual.getDescription());\n+\n+        task = taskService.read(actual.getKey());\n+        assertNotNull(task);\n+        assertEquals(\"issueSYNCOPE144\", task.getName());\n+        assertEquals(\"issueSYNCOPE144 Description\", task.getDescription());\n+\n+        task.setName(\"issueSYNCOPE144_2\");\n+        task.setDescription(\"issueSYNCOPE144 Description_2\");\n+\n+        response = taskService.create(task);\n+        actual = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n+        assertNotNull(actual);\n+        assertEquals(\"issueSYNCOPE144_2\", actual.getName());\n+        assertEquals(\"issueSYNCOPE144 Description_2\", actual.getDescription());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE230() {\n+        // 1. read SyncTask for resource-db-sync (table TESTSYNC on external H2)\n+        execSyncTask(10L, 50, false);\n+\n+        // 3. read e-mail address for user created by the SyncTask first execution\n+        UserTO userTO = readUser(\"issuesyncope230\");\n+        assertNotNull(userTO);\n+        String email = userTO.getPlainAttrMap().get(\"email\").getValues().iterator().next();\n+        assertNotNull(email);\n+\n+        // 4. update TESTSYNC on external H2 by changing e-mail address\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        jdbcTemplate.execute(\"UPDATE TESTSYNC SET email='updatedSYNCOPE230@syncope.apache.org'\");\n+\n+        // 5. re-execute the SyncTask\n+        execSyncTask(10L, 50, false);\n+\n+        // 6. verify that the e-mail was updated\n+        userTO = readUser(\"issuesyncope230\");\n+        assertNotNull(userTO);\n+        email = userTO.getPlainAttrMap().get(\"email\").getValues().iterator().next();\n+        assertNotNull(email);\n+        assertEquals(\"updatedSYNCOPE230@syncope.apache.org\", email);\n+    }\n+\n+    private TaskExecTO execSyncTask(final Long taskKey, final int maxWaitSeconds, final boolean dryRun) {\n+        AbstractTaskTO taskTO = taskService.read(taskKey);\n+        assertNotNull(taskTO);\n+        assertNotNull(taskTO.getExecutions());\n+\n+        int preSyncSize = taskTO.getExecutions().size();\n+        TaskExecTO execution = taskService.execute(taskTO.getKey(), dryRun);\n+        assertEquals(\"JOB_FIRED\", execution.getStatus());\n+\n+        int i = 0;\n+        int maxit = maxWaitSeconds;\n+\n+        // wait for sync completion (executions incremented)\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            taskTO = taskService.read(taskTO.getKey());\n+\n+            assertNotNull(taskTO);\n+            assertNotNull(taskTO.getExecutions());\n+\n+            i++;\n+        } while (preSyncSize == taskTO.getExecutions().size() && i < maxit);\n+        if (i == maxit) {\n+            fail(\"Timeout when executing task \" + taskKey);\n+        }\n+        return taskTO.getExecutions().get(taskTO.getExecutions().size() - 1);\n+    }\n+\n+    private Map<Long, TaskExecTO> execSyncTasks(\n+            final Set<Long> taskKeys, final int maxWaitSeconds, final boolean dryRun) throws Exception {\n+\n+        final ExecutorService service = Executors.newFixedThreadPool(taskKeys.size());\n+        final List<Future<TaskExecTO>> futures = new ArrayList<>();\n+\n+        for (final Long id : taskKeys) {\n+            futures.add(service.submit(new ThreadExec(this, id, maxWaitSeconds, dryRun)));\n+        }\n+\n+        final Map<Long, TaskExecTO> res = new HashMap<>();\n+\n+        for (Future<TaskExecTO> f : futures) {\n+            TaskExecTO taskExecTO = f.get(100, TimeUnit.SECONDS);\n+            res.put(taskExecTO.getTask(), taskExecTO);\n+        }\n+\n+        service.shutdownNow();\n+\n+        return res;\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE272() {\n+        removeTestUsers();\n+\n+        // create user with testdb resource\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope272@syncope.apache.org\");\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+\n+        userTO = createUser(userTO);\n+        try {\n+            assertNotNull(userTO);\n+            assertEquals(1, userTO.getPropagationStatusTOs().size());\n+            assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n+\n+            TaskExecTO taskExecTO = execSyncTask(24L, 50, false);\n+\n+            assertNotNull(taskExecTO.getStatus());\n+            assertTrue(PropagationTaskExecStatus.valueOf(taskExecTO.getStatus()).isSuccessful());\n+\n+            userTO = userService.read(userTO.getKey());\n+            assertNotNull(userTO);\n+            assertNotNull(userTO.getPlainAttrMap().get(\"firstname\").getValues().get(0));\n+        } finally {\n+            removeTestUsers();\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE258() {\n+        // -----------------------------\n+        // Add a custom correlation rule\n+        // -----------------------------\n+        SyncPolicyTO policyTO = policyService.read(9L);\n+        policyTO.getSpecification().setUserJavaRule(TestSyncRule.class.getName());\n+\n+        policyService.update(policyTO.getKey(), policyTO);\n+        // -----------------------------\n+\n+        SyncTaskTO task = new SyncTaskTO();\n+        task.setName(\"Test Sync Rule\");\n+        task.setResource(RESOURCE_NAME_WS2);\n+        task.setFullReconciliation(true);\n+        task.setPerformCreate(true);\n+        task.setPerformDelete(true);\n+        task.setPerformUpdate(true);\n+\n+        Response response = taskService.create(task);\n+        SyncTaskTO actual = getObject(response.getLocation(), TaskService.class, SyncTaskTO.class);\n+        assertNotNull(actual);\n+\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"s258_1@apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getResources().add(RESOURCE_NAME_WS2);\n+\n+        createUser(userTO);\n+\n+        userTO = UserITCase.getUniqueSampleTO(\"s258_2@apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getResources().add(RESOURCE_NAME_WS2);\n+\n+        userTO = createUser(userTO);\n+\n+        // change email in order to unmatch the second user\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.getPlainAttrsToRemove().add(\"email\");\n+        userMod.getPlainAttrsToUpdate().add(attrMod(\"email\", \"s258@apache.org\"));\n+\n+        userService.update(userMod.getKey(), userMod);\n+\n+        execSyncTask(actual.getKey(), 50, false);\n+\n+        SyncTaskTO executed = taskService.read(actual.getKey());\n+        assertEquals(1, executed.getExecutions().size());\n+\n+        // asser for just one match\n+        assertTrue(executed.getExecutions().get(0).getMessage().substring(0, 55) + \"...\",\n+                executed.getExecutions().get(0).getMessage().contains(\"[updated/failures]: 1/0\"));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE307() {\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"s307@apache.org\");\n+\n+        AttrTO csvuserid = new AttrTO();\n+        csvuserid.setSchema(\"csvuserid\");\n+        userTO.getDerAttrs().add(csvuserid);\n+\n+        userTO.getResources().clear();\n+        userTO.getResources().add(RESOURCE_NAME_WS2);\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        userTO = userService.read(userTO.getKey());\n+        assertEquals(\"virtualvalue\", userTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+\n+        // Update sync task\n+        SyncTaskTO task = taskService.read(12L);\n+        assertNotNull(task);\n+\n+        //  add user template\n+        UserTO template = new UserTO();\n+        template.getResources().add(RESOURCE_NAME_DBVIRATTR);\n+\n+        AttrTO userId = attrTO(\"userId\", \"'s307@apache.org'\");\n+        template.getPlainAttrs().add(userId);\n+\n+        AttrTO email = attrTO(\"email\", \"'s307@apache.org'\");\n+        template.getPlainAttrs().add(email);\n+\n+        task.setUserTemplate(template);\n+\n+        taskService.update(task.getKey(), task);\n+        execSyncTask(task.getKey(), 50, false);\n+\n+        // check for sync policy\n+        userTO = userService.read(userTO.getKey());\n+        assertEquals(\"virtualvalue\", userTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+\n+        try {\n+            final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+\n+            String value = jdbcTemplate.queryForObject(\n+                    \"SELECT USERNAME FROM testsync WHERE ID=?\", String.class, userTO.getKey());\n+            assertEquals(\"virtualvalue\", value);\n+        } catch (EmptyResultDataAccessException e) {\n+            assertTrue(false);\n+        }\n+    }\n+\n+    @Test\n+    public void bulkAction() {\n+        final PagedResult<PropagationTaskTO> before = taskService.list(TaskType.PROPAGATION);\n+\n+        // create user with testdb resource\n+        final UserTO userTO = UserITCase.getUniqueSampleTO(\"taskBulk@apache.org\");\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+        createUser(userTO);\n+\n+        final List<PropagationTaskTO> after = new ArrayList<PropagationTaskTO>(\n+                taskService.<PropagationTaskTO>list(TaskType.PROPAGATION).getResult());\n+\n+        after.removeAll(before.getResult());\n+\n+        assertFalse(after.isEmpty());\n+\n+        final BulkAction bulkAction = new BulkAction();\n+        bulkAction.setOperation(BulkAction.Type.DELETE);\n+\n+        for (AbstractTaskTO taskTO : after) {\n+            bulkAction.getTargets().add(String.valueOf(taskTO.getKey()));\n+        }\n+\n+        taskService.bulk(bulkAction);\n+\n+        assertFalse(taskService.list(TaskType.PROPAGATION).getResult().containsAll(after));\n+    }\n+\n+    @Test\n+    public void pushMatchingUnmatchingRoles() {\n+        assertFalse(roleService.read(3L).getResources().contains(RESOURCE_NAME_LDAP));\n+\n+        execSyncTask(23L, 50, false);\n+\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, 3L));\n+        assertTrue(roleService.read(3L).getResources().contains(RESOURCE_NAME_LDAP));\n+\n+        execSyncTask(23L, 50, false);\n+\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, 3L));\n+        assertFalse(roleService.read(3L).getResources().contains(RESOURCE_NAME_LDAP));\n+    }\n+\n+    @Test\n+    public void pushUnmatchingUsers() throws Exception {\n+        assertFalse(userService.read(2L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        assertFalse(userService.read(3L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        assertFalse(userService.read(4L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        assertTrue(userService.read(5L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+\n+        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        assertEquals(0, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='puccini'\").size());\n+\n+        // ------------------------------------------\n+        // Unmatching --> Assign --> dryRuyn\n+        // ------------------------------------------\n+        execSyncTask(13L, 50, true);\n+        assertEquals(0, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='vivaldi'\").size());\n+        assertFalse(userService.read(3L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        // ------------------------------------------\n+\n+        final Set<Long> pushTaskIds = new HashSet<>();\n+        pushTaskIds.add(13L);\n+        pushTaskIds.add(14L);\n+        pushTaskIds.add(15L);\n+        pushTaskIds.add(16L);\n+        execSyncTasks(pushTaskIds, 50, false);\n+\n+        // ------------------------------------------\n+        // Unatching --> Ignore\n+        // ------------------------------------------\n+        assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='verdi'\").size());\n+        assertFalse(userService.read(2L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        // ------------------------------------------\n+\n+        // ------------------------------------------\n+        // Unmatching --> Assign\n+        // ------------------------------------------\n+        assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='vivaldi'\").size());\n+        assertTrue(userService.read(3L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        jdbcTemplate.execute(\"DELETE FROM test2 WHERE ID='vivaldi'\");\n+        // ------------------------------------------\n+\n+        // ------------------------------------------\n+        // Unmatching --> Provision\n+        // ------------------------------------------\n+        assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='bellini'\").size());\n+        assertFalse(userService.read(4L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        jdbcTemplate.execute(\"DELETE FROM test2 WHERE ID='bellini'\");\n+        // ------------------------------------------\n+\n+        // ------------------------------------------\n+        // Unmatching --> Unlink\n+        // ------------------------------------------\n+        assertEquals(0, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='puccini'\").size());\n+        assertFalse(userService.read(5L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        // ------------------------------------------\n+    }\n+\n+    @Test\n+    public void pushMatchingUser() throws Exception {\n+        assertTrue(userService.read(1L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        assertFalse(userService.read(2L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+\n+        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='verdi'\").size());\n+        assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='rossini'\").size());\n+\n+        // ------------------------------------------\n+        // Matching --> Deprovision --> dryRuyn\n+        // ------------------------------------------\n+        execSyncTask(19L, 50, true);\n+        assertTrue(userService.read(1L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='rossini'\").size());\n+        // ------------------------------------------\n+\n+        final Set<Long> pushTaskIds = new HashSet<>();\n+        pushTaskIds.add(18L);\n+        pushTaskIds.add(19L);\n+        pushTaskIds.add(16L);\n+\n+        execSyncTasks(pushTaskIds, 50, false);\n+\n+        // ------------------------------------------\n+        // Matching --> Deprovision && Ignore\n+        // ------------------------------------------\n+        assertFalse(userService.read(2L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        // DELETE Capability not available ....\n+        assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='verdi'\").size());\n+        // ------------------------------------------\n+\n+        // ------------------------------------------\n+        // Matching --> Unassign\n+        // ------------------------------------------\n+        assertFalse(userService.read(1L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        // DELETE Capability not available ....\n+        assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='rossini'\").size());\n+        // ------------------------------------------\n+\n+        // ------------------------------------------\n+        // Matching --> Link\n+        // ------------------------------------------\n+        execSyncTask(20L, 50, false);\n+        assertTrue(userService.read(2L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='verdi'\").size());\n+        // ------------------------------------------\n+\n+        pushTaskIds.clear();\n+        pushTaskIds.add(21L);\n+        pushTaskIds.add(22L);\n+\n+        execSyncTasks(pushTaskIds, 50, false);\n+\n+        // ------------------------------------------\n+        // Matching --> Unlink && Update\n+        // ------------------------------------------\n+        assertFalse(userService.read(2L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='verdi'\").size());\n+        // ------------------------------------------\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE313DB() throws Exception {\n+        // 1. create user in DB\n+        UserTO user = UserITCase.getUniqueSampleTO(\"syncope313-db@syncope.apache.org\");\n+        user.setPassword(\"security\");\n+        user.getResources().add(RESOURCE_NAME_TESTDB);\n+        user = createUser(user);\n+        assertNotNull(user);\n+        assertFalse(user.getResources().isEmpty());\n+\n+        // 2. Check that the DB resource has the correct password\n+        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        String value = jdbcTemplate.queryForObject(\n+                \"SELECT PASSWORD FROM test WHERE ID=?\", String.class, user.getUsername());\n+        assertEquals(Encryptor.getInstance().encode(\"security\", CipherAlgorithm.SHA1), value.toUpperCase());\n+\n+        // 3. Update the password in the DB\n+        String newPassword = Encryptor.getInstance().encode(\"new-security\", CipherAlgorithm.SHA1);\n+        jdbcTemplate.execute(\n+                \"UPDATE test set PASSWORD='\" + newPassword + \"' where ID='\" + user.getUsername() + \"'\");\n+\n+        // 4. Sync the user from the resource\n+        SyncTaskTO syncTask = new SyncTaskTO();\n+        syncTask.setName(\"DB Sync Task\");\n+        syncTask.setPerformCreate(true);\n+        syncTask.setPerformUpdate(true);\n+        syncTask.setFullReconciliation(true);\n+        syncTask.setResource(RESOURCE_NAME_TESTDB);\n+        syncTask.getActionsClassNames().add(DBPasswordSyncActions.class.getName());\n+        Response taskResponse = taskService.create(syncTask);\n+\n+        SyncTaskTO actual = getObject(taskResponse.getLocation(), TaskService.class, SyncTaskTO.class);\n+        assertNotNull(actual);\n+\n+        syncTask = taskService.read(actual.getKey());\n+        assertNotNull(syncTask);\n+        assertEquals(actual.getKey(), syncTask.getKey());\n+        assertEquals(actual.getJobClassName(), syncTask.getJobClassName());\n+\n+        TaskExecTO execution = execSyncTask(syncTask.getKey(), 50, false);\n+        final String status = execution.getStatus();\n+        assertNotNull(status);\n+        assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n+\n+        // 5. Test the sync'd user\n+        UserTO updatedUser = userService.read(user.getKey());\n+        assertEquals(newPassword, updatedUser.getPassword());\n+\n+        // 6. Delete SyncTask + user\n+        taskService.delete(syncTask.getKey());\n+        deleteUser(user.getKey());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE313LDAP() throws Exception {\n+        // First of all, clear any potential conflict with existing user / role\n+        ldapCleanup();\n+\n+        // 1. create user in LDAP\n+        UserTO user = UserITCase.getUniqueSampleTO(\"syncope313-ldap@syncope.apache.org\");\n+        user.setPassword(\"security\");\n+        user.getResources().add(RESOURCE_NAME_LDAP);\n+        user = createUser(user);\n+        assertNotNull(user);\n+        assertFalse(user.getResources().isEmpty());\n+\n+        // 2. request to change password only on Syncope and not on LDAP\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(user.getKey());\n+        userMod.setPassword(\"new-security\");\n+        StatusMod pwdPropRequest = new StatusMod();\n+        pwdPropRequest.setOnSyncope(true);\n+        pwdPropRequest.getResourceNames().clear();\n+        userMod.setPwdPropRequest(pwdPropRequest);\n+        updateUser(userMod);\n+\n+        // 3. Check that the Syncope user now has the changed password\n+        UserTO updatedUser = userService.read(user.getKey());\n+        String encodedNewPassword = Encryptor.getInstance().encode(\"new-security\", CipherAlgorithm.SHA1);\n+        assertEquals(encodedNewPassword, updatedUser.getPassword());\n+\n+        // 4. Check that the LDAP resource has the old password\n+        ConnObjectTO connObject =\n+                resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.USER, user.getKey());\n+        assertNotNull(getLdapRemoteObject(\n+                connObject.getPlainAttrMap().get(Name.NAME).getValues().get(0),\n+                \"security\",\n+                connObject.getPlainAttrMap().get(Name.NAME).getValues().get(0)));\n+\n+        // 5. Update the LDAP Connector to retrieve passwords\n+        ResourceTO ldapResource = resourceService.read(RESOURCE_NAME_LDAP);\n+        ConnInstanceTO resourceConnector = connectorService.read(ldapResource.getConnectorId());\n+        ConnConfProperty property = resourceConnector.getConfigurationMap().get(\"retrievePasswordsWithSearch\");\n+        property.getValues().clear();\n+        property.getValues().add(Boolean.TRUE);\n+        connectorService.update(ldapResource.getConnectorId(), resourceConnector);\n+\n+        // 6. Sync the user from the resource\n+        SyncTaskTO syncTask = new SyncTaskTO();\n+        syncTask.setName(\"LDAP Sync Task\");\n+        syncTask.setPerformCreate(true);\n+        syncTask.setPerformUpdate(true);\n+        syncTask.setFullReconciliation(true);\n+        syncTask.setResource(RESOURCE_NAME_LDAP);\n+        syncTask.getActionsClassNames().add(LDAPPasswordSyncActions.class.getName());\n+        Response taskResponse = taskService.create(syncTask);\n+\n+        SyncTaskTO actual = getObject(taskResponse.getLocation(), TaskService.class, SyncTaskTO.class);\n+        assertNotNull(actual);\n+\n+        syncTask = taskService.read(actual.getKey());\n+        assertNotNull(syncTask);\n+        assertEquals(actual.getKey(), syncTask.getKey());\n+        assertEquals(actual.getJobClassName(), syncTask.getJobClassName());\n+\n+        TaskExecTO execution = execSyncTask(syncTask.getKey(), 50, false);\n+        final String status = execution.getStatus();\n+        assertNotNull(status);\n+        assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n+\n+        // 7. Test the sync'd user\n+        String syncedPassword = Encryptor.getInstance().encode(\"security\", CipherAlgorithm.SHA1);\n+        updatedUser = userService.read(user.getKey());\n+        assertEquals(syncedPassword, updatedUser.getPassword());\n+\n+        // 8. Delete SyncTask + user + reset the connector\n+        taskService.delete(syncTask.getKey());\n+        property.getValues().clear();\n+        property.getValues().add(Boolean.FALSE);\n+        connectorService.update(ldapResource.getConnectorId(), resourceConnector);\n+        deleteUser(updatedUser.getKey());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE598() {\n+        // create a new role schema\n+        final PlainSchemaTO schemaTO = new PlainSchemaTO();\n+        schemaTO.setKey(\"LDAPGroupName\" + getUUIDString());\n+        schemaTO.setType(AttrSchemaType.String);\n+        schemaTO.setMandatoryCondition(\"true\");\n+\n+        final PlainSchemaTO newPlainSchemaTO = createSchema(AttributableType.ROLE, SchemaType.PLAIN, schemaTO);\n+        assertEquals(schemaTO, newPlainSchemaTO);\n+\n+        // create a new sample role\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"all\" + getUUIDString());\n+        roleTO.setParent(8L);\n+\n+        roleTO.getRAttrTemplates().add(newPlainSchemaTO.getKey());\n+        roleTO.getPlainAttrs().add(attrTO(newPlainSchemaTO.getKey(), \"all\"));\n+\n+        roleTO = createRole(roleTO);\n+        assertNotNull(roleTO);\n+\n+        String resourceName = \"resource-ldap-roleonly\";\n+        ResourceTO newResourceTO = null;\n+\n+        try {\n+            // Create resource ad-hoc\n+            ResourceTO resourceTO = new ResourceTO();\n+            resourceTO.setKey(resourceName);\n+            resourceTO.setConnectorId(105L);\n+\n+            final MappingTO umapping = new MappingTO();\n+            MappingItemTO item = new MappingItemTO();\n+            item.setIntMappingType(IntMappingType.Username);\n+            item.setExtAttrName(\"cn\");\n+            item.setAccountid(true);\n+            item.setPurpose(MappingPurpose.PROPAGATION);\n+            item.setMandatoryCondition(\"true\");\n+            umapping.setAccountIdItem(item);\n+\n+            item = new MappingItemTO();\n+            item.setIntMappingType(IntMappingType.UserPlainSchema);\n+            item.setExtAttrName(\"surname\");\n+            item.setIntAttrName(\"sn\");\n+            item.setPurpose(MappingPurpose.BOTH);\n+            umapping.addItem(item);\n+\n+            item = new MappingItemTO();\n+            item.setIntMappingType(IntMappingType.UserPlainSchema);\n+            item.setExtAttrName(\"email\");\n+            item.setIntAttrName(\"mail\");\n+            item.setPurpose(MappingPurpose.BOTH);\n+            umapping.addItem(item);\n+\n+            item = new MappingItemTO();\n+            item.setIntMappingType(IntMappingType.Password);\n+            item.setPassword(true);\n+            item.setPurpose(MappingPurpose.BOTH);\n+            item.setMandatoryCondition(\"true\");\n+            umapping.addItem(item);\n+\n+            umapping.setAccountLink(\"'cn=' + username + ',ou=people,o=isp'\");\n+\n+            final MappingTO rmapping = new MappingTO();\n+\n+            item = new MappingItemTO();\n+            item.setIntMappingType(IntMappingType.RolePlainSchema);\n+            item.setExtAttrName(\"cn\");\n+            item.setIntAttrName(newPlainSchemaTO.getKey());\n+            item.setAccountid(true);\n+            item.setPurpose(MappingPurpose.BOTH);\n+            rmapping.setAccountIdItem(item);\n+\n+            rmapping.setAccountLink(\"'cn=' + \" + newPlainSchemaTO.getKey() + \" + ',ou=groups,o=isp'\");\n+\n+            resourceTO.setRmapping(rmapping);\n+\n+            Response response = resourceService.create(resourceTO);\n+            newResourceTO = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+\n+            assertNotNull(newResourceTO);\n+            assertNull(newResourceTO.getUmapping());\n+            assertNotNull(newResourceTO.getRmapping());\n+\n+            // create push task ad-hoc\n+            final PushTaskTO task = new PushTaskTO();\n+            task.setName(\"issueSYNCOPE598\");\n+            task.setResource(resourceName);\n+            task.setPerformCreate(true);\n+            task.setPerformDelete(true);\n+            task.setPerformUpdate(true);\n+            task.setUnmatchingRule(UnmatchingRule.ASSIGN);\n+            task.setMatchingRule(MatchingRule.UPDATE);\n+\n+            response = taskService.create(task);\n+            final PushTaskTO push = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n+\n+            assertNotNull(push);\n+\n+            // execute the new task\n+            final TaskExecTO pushExec = execSyncTask(push.getKey(), 50, false);\n+            assertTrue(PropagationTaskExecStatus.valueOf(pushExec.getStatus()).isSuccessful());\n+        } finally {\n+            roleService.delete(roleTO.getKey());\n+            if (newResourceTO != null) {\n+                resourceService.delete(resourceName);\n+            }\n+        }\n+    }\n+}"},{"sha":"96ca3defab2e7d72b7a53fc0c1ef1c2802cd3846","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/UserITCase.java","status":"added","additions":2442,"deletions":0,"changes":2442,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FUserITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,2442 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.AccessControlException;\n+import java.text.SimpleDateFormat;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import javax.naming.NamingException;\n+import javax.ws.rs.core.EntityTag;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.common.util.Base64Utility;\n+import org.apache.cxf.helpers.IOUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.AttributableOperations;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.mod.AttrMod;\n+import org.apache.syncope.common.lib.mod.MembershipMod;\n+import org.apache.syncope.common.lib.mod.ResourceAssociationMod;\n+import org.apache.syncope.common.lib.mod.StatusMod;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.BulkAction;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.BulkActionResult.Status;\n+import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.lib.wrap.ResourceName;\n+import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.rest.api.Preference;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.PolicyService;\n+import org.apache.syncope.common.rest.api.service.ResourceService;\n+import org.apache.syncope.common.rest.api.service.UserSelfService;\n+import org.apache.syncope.common.rest.api.service.UserService;\n+import org.apache.syncope.server.misc.security.Encryptor;\n+import org.apache.syncope.server.provisioning.java.propagation.DBPasswordPropagationActions;\n+import org.apache.syncope.server.provisioning.java.propagation.LDAPPasswordPropagationActions;\n+import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.OperationalAttributes;\n+import org.junit.Assume;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class UserITCase extends AbstractITCase {\n+\n+    private String getStringAttribute(final ConnObjectTO connObjectTO, final String attrName) {\n+        return connObjectTO.getPlainAttrMap().get(attrName).getValues().get(0);\n+    }\n+\n+    private boolean getBooleanAttribute(final ConnObjectTO connObjectTO, final String attrName) {\n+        return Boolean.parseBoolean(getStringAttribute(connObjectTO, attrName));\n+    }\n+\n+    public static UserTO getUniqueSampleTO(final String email) {\n+        return getSampleTO(getUUIDString() + email);\n+    }\n+\n+    public static UserTO getSampleTO(final String email) {\n+        String uid = email;\n+        UserTO userTO = new UserTO();\n+        userTO.setPassword(\"password123\");\n+        userTO.setUsername(uid);\n+\n+        userTO.getPlainAttrs().add(attrTO(\"fullname\", uid));\n+        userTO.getPlainAttrs().add(attrTO(\"firstname\", uid));\n+        userTO.getPlainAttrs().add(attrTO(\"surname\", \"surname\"));\n+        userTO.getPlainAttrs().add(attrTO(\"type\", \"a type\"));\n+        userTO.getPlainAttrs().add(attrTO(\"userId\", uid));\n+        userTO.getPlainAttrs().add(attrTO(\"email\", uid));\n+        userTO.getPlainAttrs().add(attrTO(\"loginDate\", new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date())));\n+        userTO.getDerAttrs().add(attrTO(\"cn\", null));\n+        userTO.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualvalue\"));\n+        return userTO;\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void createUserWithNoPropagation() {\n+        // get task list\n+        PagedResult<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION, 1, 1);\n+        assertNotNull(tasks);\n+        assertFalse(tasks.getResult().isEmpty());\n+\n+        long maxKey = tasks.getResult().iterator().next().getKey();\n+\n+        // create a new user\n+        UserTO userTO = getUniqueSampleTO(\"xxx@xxx.xxx\");\n+\n+        userTO.setPassword(\"password123\");\n+        userTO.getResources().add(RESOURCE_NAME_NOPROPAGATION);\n+\n+        createUser(userTO);\n+\n+        // get the new task list\n+        tasks = taskService.list(TaskType.PROPAGATION, 1, 1);\n+        assertNotNull(tasks);\n+        assertFalse(tasks.getResult().isEmpty());\n+\n+        long newMaxId = tasks.getResult().iterator().next().getKey();\n+\n+        assertTrue(newMaxId > maxKey);\n+\n+        // get last task\n+        PropagationTaskTO taskTO = taskService.read(newMaxId);\n+\n+        assertNotNull(taskTO);\n+        assertTrue(taskTO.getExecutions().isEmpty());\n+    }\n+\n+    @Test\n+    public void issue172() {\n+        List<PasswordPolicyTO> policies = policyService.list(PolicyType.GLOBAL_PASSWORD);\n+        for (PasswordPolicyTO policyTO : policies) {\n+            policyService.delete(policyTO.getKey());\n+        }\n+\n+        try {\n+            UserTO userTO = getUniqueSampleTO(\"issue172@syncope.apache.org\");\n+            createUser(userTO);\n+        } finally {\n+            for (PasswordPolicyTO policyTO : policies) {\n+                Response response = policyService.create(policyTO);\n+                PasswordPolicyTO cPolicyTO = getObject(\n+                        response.getLocation(), PolicyService.class, PasswordPolicyTO.class);\n+                assertNotNull(cPolicyTO);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void issue186() {\n+        // 1. create an user with strict mandatory attributes only\n+        UserTO userTO = new UserTO();\n+        String userId = getUUIDString() + \"issue186@syncope.apache.org\";\n+        userTO.setUsername(userId);\n+        userTO.setPassword(\"password\");\n+\n+        userTO.getPlainAttrs().add(attrTO(\"userId\", userId));\n+        userTO.getPlainAttrs().add(attrTO(\"fullname\", userId));\n+        userTO.getPlainAttrs().add(attrTO(\"surname\", userId));\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertTrue(userTO.getResources().isEmpty());\n+\n+        // 2. update assigning a resource forcing mandatory constraints: must fail with RequiredValuesMissing\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.setPassword(\"newPassword\");\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_WS2);\n+\n+        try {\n+            userTO = updateUser(userMod);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n+        }\n+\n+        // 3. update assigning a resource NOT forcing mandatory constraints\n+        // AND primary: must fail with PropagationException\n+        userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.setPassword(\"newPassword\");\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_WS1);\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO.getPropagationStatusTOs().get(0).getFailureReason());\n+\n+        // 4. update assigning a resource NOT forcing mandatory constraints\n+        // BUT not primary: must succeed\n+        userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.setPassword(\"newPassword123456\");\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_CSV);\n+        updateUser(userMod);\n+    }\n+\n+    @Test\n+    public void enforceMandatoryCondition() {\n+        UserTO userTO = getUniqueSampleTO(\"enforce@apache.org\");\n+        userTO.getResources().add(RESOURCE_NAME_WS2);\n+        userTO.setPassword(\"newPassword\");\n+\n+        AttrTO type = null;\n+        for (AttrTO attr : userTO.getPlainAttrs()) {\n+            if (\"type\".equals(attr.getSchema())) {\n+                type = attr;\n+            }\n+        }\n+        assertNotNull(type);\n+        userTO.getPlainAttrs().remove(type);\n+\n+        try {\n+            userTO = createUser(userTO);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n+        }\n+\n+        userTO.getPlainAttrs().add(type);\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+    }\n+\n+    @Test\n+    public void enforceMandatoryConditionOnDerived() {\n+        ResourceTO resourceTO = resourceService.read(RESOURCE_NAME_CSV);\n+        assertNotNull(resourceTO);\n+        resourceTO.setKey(\"resource-csv-enforcing\");\n+        resourceTO.setEnforceMandatoryCondition(true);\n+\n+        Response response = resourceService.create(resourceTO);\n+        resourceTO = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+        assertNotNull(resourceTO);\n+\n+        UserTO userTO = getUniqueSampleTO(\"syncope222@apache.org\");\n+        userTO.getResources().add(resourceTO.getKey());\n+        userTO.setPassword(\"newPassword\");\n+\n+        try {\n+            userTO = createUser(userTO);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n+        }\n+\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertEquals(Collections.singleton(\"resource-csv-enforcing\"), userTO.getResources());\n+    }\n+\n+    @Test\n+    public void createUserWithDbPropagation() {\n+        UserTO userTO = getUniqueSampleTO(\"yyy@yyy.yyy\");\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertEquals(1, userTO.getPropagationStatusTOs().size());\n+        assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n+    }\n+\n+    @Test(expected = SyncopeClientException.class)\n+    public void createWithInvalidPassword() {\n+        UserTO userTO = getSampleTO(\"invalidpasswd@syncope.apache.org\");\n+        userTO.setPassword(\"pass\");\n+        createUser(userTO);\n+    }\n+\n+    @Test(expected = SyncopeClientException.class)\n+    public void createWithInvalidUsername() {\n+        UserTO userTO = getSampleTO(\"invalidusername@syncope.apache.org\");\n+        userTO.setUsername(\"us\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7L);\n+\n+        userTO.getMemberships().add(membershipTO);\n+\n+        createUser(userTO);\n+    }\n+\n+    @Test(expected = SyncopeClientException.class)\n+    public void createWithInvalidPasswordByRes() {\n+        UserTO userTO = getSampleTO(\"invalidPwdByRes@passwd.com\");\n+\n+        // configured to be minLength=16\n+        userTO.setPassword(\"password1\");\n+        userTO.getResources().add(RESOURCE_NAME_NOPROPAGATION);\n+        createUser(userTO);\n+    }\n+\n+    @Test(expected = SyncopeClientException.class)\n+    public void createWithInvalidPasswordByRole() {\n+        UserTO userTO = getSampleTO(\"invalidPwdByRole@passwd.com\");\n+\n+        // configured to be minLength=16\n+        userTO.setPassword(\"password1\");\n+\n+        final MembershipTO membership = new MembershipTO();\n+        membership.setRoleId(8L);\n+\n+        userTO.getMemberships().add(membership);\n+\n+        createUser(userTO);\n+    }\n+\n+    @Test(expected = SyncopeClientException.class)\n+    public void createWithException() {\n+        UserTO newUserTO = new UserTO();\n+        newUserTO.getPlainAttrs().add(attrTO(\"userId\", \"userId@nowhere.org\"));\n+        createUser(newUserTO);\n+    }\n+\n+    @Test\n+    public void create() {\n+        // get task list\n+        PagedResult<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION, 1, 1);\n+        assertNotNull(tasks);\n+        assertFalse(tasks.getResult().isEmpty());\n+\n+        long maxKey = tasks.getResult().iterator().next().getKey();\n+        PropagationTaskTO taskTO = taskService.read(maxKey);\n+\n+        assertNotNull(taskTO);\n+        int maxTaskExecutions = taskTO.getExecutions().size();\n+\n+        UserTO userTO = getUniqueSampleTO(\"a.b@c.com\");\n+\n+        // add a membership\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(8L);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        // add an attribute with no values: must be ignored\n+        membershipTO.getPlainAttrs().add(attrTO(\"subscriptionDate\", null));\n+\n+        // add an attribute with a non-existing schema: must be ignored\n+        AttrTO attrWithInvalidSchemaTO = attrTO(\"invalid schema\", \"a value\");\n+        userTO.getPlainAttrs().add(attrWithInvalidSchemaTO);\n+\n+        // add an attribute with null value: must be ignored\n+        userTO.getPlainAttrs().add(attrTO(\"activationDate\", null));\n+\n+        // 1. create user\n+        UserTO newUserTO = createUser(userTO);\n+\n+        assertNotNull(newUserTO);\n+\n+        // issue SYNCOPE-15\n+        assertNotNull(newUserTO.getCreationDate());\n+        assertNotNull(newUserTO.getCreator());\n+        assertNotNull(newUserTO.getLastChangeDate());\n+        assertNotNull(newUserTO.getLastModifier());\n+        assertEquals(newUserTO.getCreationDate(), newUserTO.getLastChangeDate());\n+\n+        assertFalse(newUserTO.getPlainAttrs().contains(attrWithInvalidSchemaTO));\n+\n+        // check for changePwdDate\n+        assertNotNull(newUserTO.getCreationDate());\n+\n+        // 2. check for virtual attribute value\n+        newUserTO = userService.read(newUserTO.getKey());\n+        assertNotNull(newUserTO);\n+\n+        assertNotNull(newUserTO.getVirAttrMap());\n+        assertNotNull(newUserTO.getVirAttrMap().get(\"virtualdata\").getValues());\n+        assertFalse(newUserTO.getVirAttrMap().get(\"virtualdata\").getValues().isEmpty());\n+        assertEquals(\"virtualvalue\", newUserTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+\n+        // get the new task list\n+        tasks = taskService.list(TaskType.PROPAGATION, 1, 1);\n+        assertNotNull(tasks);\n+        assertFalse(tasks.getResult().isEmpty());\n+\n+        long newMaxKey = tasks.getResult().iterator().next().getKey();\n+\n+        // default configuration for ws-target-resource2:\n+        // only failed executions have to be registered\n+        // --> no more tasks/executions should be added\n+        assertEquals(newMaxKey, maxKey);\n+\n+        // get last task\n+        taskTO = taskService.read(newMaxKey);\n+\n+        assertNotNull(taskTO);\n+        assertEquals(maxTaskExecutions, taskTO.getExecutions().size());\n+\n+        // 3. verify password\n+        UserSelfService userSelfService1 = clientFactory.create(\n+                newUserTO.getUsername(), \"password123\").getService(UserSelfService.class);\n+        try {\n+            UserTO user = userSelfService1.read();\n+            assertNotNull(user);\n+        } catch (AccessControlException e) {\n+            fail(\"Credentials should be valid and not cause AccessControlException\");\n+        }\n+\n+        UserSelfService userSelfService2 = clientFactory.create(\n+                newUserTO.getUsername(), \"passwordXX\").getService(UserSelfService.class);\n+        try {\n+            userSelfService2.read();\n+            fail(\"Credentials are invalid, thus request should raise AccessControlException\");\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+\n+        // 4. try (and fail) to create another user with same (unique) values\n+        userTO = getSampleTO(userTO.getUsername());\n+        AttrTO userIdAttr = userTO.getPlainAttrMap().get(\"userId\");\n+        userIdAttr.getValues().clear();\n+        userIdAttr.getValues().add(\"a.b@c.com\");\n+\n+        try {\n+            createUser(userTO);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.DataIntegrityViolation, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void createWithRequiredValueMissing() {\n+        UserTO userTO = getSampleTO(\"a.b@c.it\");\n+\n+        AttrTO type = userTO.getPlainAttrMap().get(\"type\");\n+        userTO.getPlainAttrs().remove(type);\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(8L);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        // 1. create user without type (mandatory by UserSchema)\n+        try {\n+            createUser(userTO);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n+        }\n+\n+        userTO.getPlainAttrs().add(attrTO(\"type\", \"F\"));\n+\n+        AttrTO surname = userTO.getPlainAttrMap().get(\"surname\");\n+        userTO.getPlainAttrs().remove(surname);\n+\n+        // 2. create user without surname (mandatory when type == 'F')\n+        try {\n+            createUser(userTO);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void delete() {\n+        try {\n+            userService.delete(0L);\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n+        }\n+\n+        UserTO userTO = getSampleTO(\"qqgf.z@nn.com\");\n+\n+        // specify a propagation\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+\n+        userTO = createUser(userTO);\n+\n+        long id = userTO.getKey();\n+\n+        userTO = deleteUser(id);\n+\n+        assertNotNull(userTO);\n+        assertEquals(id, userTO.getKey());\n+        assertTrue(userTO.getPlainAttrs().isEmpty());\n+\n+        // check for propagation result\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n+\n+        try {\n+            userService.delete(userTO.getKey());\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n+        }\n+    }\n+\n+    @Test\n+    public void deleteByUsername() {\n+        UserTO userTO = getSampleTO(\"delete.by.username@apache.org\");\n+\n+        // specify a propagation\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+\n+        userTO = createUser(userTO);\n+\n+        long id = userTO.getKey();\n+        userTO = userService.read(id);\n+        userTO = deleteUser(userTO.getKey());\n+\n+        assertNotNull(userTO);\n+        assertEquals(id, userTO.getKey());\n+        assertTrue(userTO.getPlainAttrs().isEmpty());\n+\n+        // check for propagation result\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n+\n+        try {\n+            userService.read(userTO.getKey());\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n+        }\n+    }\n+\n+    @Test\n+    public void list() {\n+        PagedResult<UserTO> users = userService.list();\n+        assertNotNull(users);\n+        assertFalse(users.getResult().isEmpty());\n+\n+        for (UserTO user : users.getResult()) {\n+            assertNotNull(user);\n+        }\n+    }\n+\n+    @Test\n+    public void paginatedList() {\n+        PagedResult<UserTO> users = userService.list(1, 2);\n+        assertNotNull(users);\n+        assertFalse(users.getResult().isEmpty());\n+        assertEquals(2, users.getResult().size());\n+\n+        for (UserTO user : users.getResult()) {\n+            assertNotNull(user);\n+        }\n+\n+        users = userService.list(2, 2);\n+        assertNotNull(users);\n+        assertFalse(users.getResult().isEmpty());\n+        assertEquals(2, users.getResult().size());\n+\n+        users = userService.list(100, 2);\n+        assertNotNull(users);\n+        assertTrue(users.getResult().isEmpty());\n+    }\n+\n+    @Test\n+    public void read() {\n+        UserTO userTO = userService.read(1L);\n+\n+        assertNotNull(userTO);\n+        assertNotNull(userTO.getPlainAttrs());\n+        assertFalse(userTO.getPlainAttrs().isEmpty());\n+    }\n+\n+    @Test\n+    public void readWithMailAddressAsUserName() {\n+        UserTO userTO = createUser(getUniqueSampleTO(\"mail@domain.org\"));\n+        userTO = userService.read(userTO.getKey());\n+        assertNotNull(userTO);\n+    }\n+\n+    @Test\n+    public void updateWithouPassword() {\n+        UserTO userTO = getUniqueSampleTO(\"updatewithout@password.com\");\n+\n+        userTO = createUser(userTO);\n+\n+        assertNotNull(userTO);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.getDerAttrsToRemove().add(\"cn\");\n+\n+        userTO = updateUser(userMod);\n+\n+        assertNotNull(userTO);\n+        assertNotNull(userTO.getDerAttrMap());\n+        assertFalse(userTO.getDerAttrMap().containsKey(\"cn\"));\n+    }\n+\n+    @Test(expected = SyncopeClientException.class)\n+    public void updateInvalidPassword() {\n+        UserTO userTO = getSampleTO(\"updateinvalid@password.com\");\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.setPassword(\"pass\");\n+\n+        userService.update(userMod.getKey(), userMod);\n+    }\n+\n+    @Test(expected = SyncopeClientException.class)\n+    public void updateSamePassword() {\n+        UserTO userTO = getSampleTO(\"updatesame@password.com\");\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.setPassword(\"password123\");\n+\n+        userService.update(userMod.getKey(), userMod);\n+    }\n+\n+    @Test\n+    public void update() {\n+        UserTO userTO = getUniqueSampleTO(\"g.h@t.com\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(8L);\n+        membershipTO.getPlainAttrs().add(attrTO(\"subscriptionDate\", \"2009-08-18T16:33:12.203+0200\"));\n+        userTO.getMemberships().add(membershipTO);\n+\n+        userTO = createUser(userTO);\n+\n+        assertFalse(userTO.getDerAttrs().isEmpty());\n+        assertEquals(1, userTO.getMemberships().size());\n+\n+        MembershipMod membershipMod = new MembershipMod();\n+        membershipMod.setRole(8L);\n+        membershipMod.getPlainAttrsToUpdate().add(attrMod(\"subscriptionDate\", \"2010-08-18T16:33:12.203+0200\"));\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.setPassword(\"new2Password\");\n+\n+        userMod.getPlainAttrsToRemove().add(\"userId\");\n+        String newUserId = getUUIDString() + \"t.w@spre.net\";\n+        userMod.getPlainAttrsToUpdate().add(attrMod(\"userId\", newUserId));\n+\n+        userMod.getPlainAttrsToRemove().add(\"fullname\");\n+        String newFullName = getUUIDString() + \"g.h@t.com\";\n+        userMod.getPlainAttrsToUpdate().add(attrMod(\"fullname\", newFullName));\n+\n+        userMod.getDerAttrsToAdd().add(\"cn\");\n+        userMod.getMembershipsToAdd().add(membershipMod);\n+        userMod.getMembershipsToRemove().add(userTO.getMemberships().iterator().next().getKey());\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+\n+        // issue SYNCOPE-15\n+        assertNotNull(userTO.getCreationDate());\n+        assertNotNull(userTO.getCreator());\n+        assertNotNull(userTO.getLastChangeDate());\n+        assertNotNull(userTO.getLastModifier());\n+        assertTrue(userTO.getCreationDate().before(userTO.getLastChangeDate()));\n+\n+        assertEquals(1, userTO.getMemberships().size());\n+        assertEquals(1, userTO.getMemberships().iterator().next().getPlainAttrs().size());\n+        assertFalse(userTO.getDerAttrs().isEmpty());\n+\n+        AttrTO userIdAttr = userTO.getPlainAttrMap().get(\"userId\");\n+        assertEquals(Collections.singletonList(newUserId), userIdAttr.getValues());\n+\n+        AttrTO fullNameAttr = userTO.getPlainAttrMap().get(\"fullname\");\n+        assertEquals(Collections.singletonList(newFullName), fullNameAttr.getValues());\n+    }\n+\n+    @Test\n+    public void updatePasswordOnly() {\n+        int beforeTasks = taskService.list(TaskType.PROPAGATION, 1, 1).getTotalCount();\n+        assertFalse(beforeTasks <= 0);\n+\n+        UserTO userTO = getUniqueSampleTO(\"pwdonly@t.com\");\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(8L);\n+        membershipTO.getPlainAttrs().add(attrTO(\"subscriptionDate\", \"2009-08-18T16:33:12.203+0200\"));\n+        userTO.getMemberships().add(membershipTO);\n+\n+        userTO = createUser(userTO);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.setPassword(\"newPassword123\");\n+\n+        userTO = updateUser(userMod);\n+\n+        // check for changePwdDate\n+        assertNotNull(userTO.getChangePwdDate());\n+\n+        int afterTasks = taskService.list(TaskType.PROPAGATION, 1, 1).getTotalCount();\n+        assertFalse(beforeTasks <= 0);\n+\n+        assertTrue(beforeTasks < afterTasks);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void verifyTaskRegistration() {\n+        // get task list\n+        PagedResult<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION, 1, 1);\n+        assertNotNull(tasks);\n+        assertFalse(tasks.getResult().isEmpty());\n+\n+        long maxKey = tasks.getResult().iterator().next().getKey();\n+\n+        // --------------------------------------\n+        // Create operation\n+        // --------------------------------------\n+        UserTO userTO = getUniqueSampleTO(\"t@p.mode\");\n+\n+        // add a membership\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(8L);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        // 1. create user\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        // get the new task list\n+        tasks = taskService.list(TaskType.PROPAGATION, 1, 1);\n+        assertNotNull(tasks);\n+        assertFalse(tasks.getResult().isEmpty());\n+\n+        long newMaxKey = tasks.getResult().iterator().next().getKey();\n+\n+        // default configuration for ws-target-resource2:\n+        // only failed executions have to be registered\n+        // --> no more tasks/executions should be added\n+        assertEquals(newMaxKey, maxKey);\n+\n+        // --------------------------------------\n+        // Update operation\n+        // --------------------------------------\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+\n+        userMod.getPlainAttrsToUpdate().add(attrMod(\"surname\", \"surname\"));\n+\n+        userTO = updateUser(userMod);\n+\n+        assertNotNull(userTO);\n+\n+        // get the new task list\n+        tasks = taskService.list(TaskType.PROPAGATION, 1, 1);\n+\n+        maxKey = newMaxKey;\n+        newMaxKey = tasks.getResult().iterator().next().getKey();\n+\n+        // default configuration for ws-target-resource2:\n+        // all update executions have to be registered\n+        assertTrue(newMaxKey > maxKey);\n+\n+        final PropagationTaskTO taskTO = taskService.read(newMaxKey);\n+\n+        assertNotNull(taskTO);\n+        assertEquals(1, taskTO.getExecutions().size());\n+\n+        // --------------------------------------\n+        // Delete operation\n+        // --------------------------------------\n+        userService.delete(userTO.getKey());\n+\n+        // get the new task list\n+        tasks = taskService.list(TaskType.PROPAGATION, 1, 1);\n+\n+        maxKey = newMaxKey;\n+        newMaxKey = tasks.getResult().iterator().next().getKey();\n+\n+        // default configuration for ws-target-resource2: no delete executions have to be registered\n+        // --> no more tasks/executions should be added\n+        assertEquals(newMaxKey, maxKey);\n+    }\n+\n+    @Test\n+    public void createActivate() {\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n+\n+        UserTO userTO = getUniqueSampleTO(\"createActivate@syncope.apache.org\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(11L);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        userTO = createUser(userTO);\n+\n+        assertNotNull(userTO);\n+        assertNotNull(userTO.getToken());\n+        assertNotNull(userTO.getTokenExpireTime());\n+\n+        assertEquals(\"created\", userTO.getStatus());\n+\n+        StatusMod statusMod = new StatusMod();\n+        statusMod.setType(StatusMod.ModType.ACTIVATE);\n+        statusMod.setToken(userTO.getToken());\n+        userTO = userService.status(userTO.getKey(), statusMod).readEntity(UserTO.class);\n+\n+        assertNotNull(userTO);\n+        assertNull(userTO.getToken());\n+        assertNull(userTO.getTokenExpireTime());\n+        assertEquals(\"active\", userTO.getStatus());\n+    }\n+\n+    @Test\n+    public void suspendReactivate() {\n+        UserTO userTO = getUniqueSampleTO(\"suspendReactivate@syncope.apache.org\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7L);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        userTO = createUser(userTO);\n+\n+        assertNotNull(userTO);\n+        assertEquals(ActivitiDetector.isActivitiEnabledForUsers()\n+                ? \"active\"\n+                : \"created\", userTO.getStatus());\n+\n+        StatusMod statusMod = new StatusMod();\n+        statusMod.setType(StatusMod.ModType.SUSPEND);\n+        userTO = userService.status(userTO.getKey(), statusMod).readEntity(UserTO.class);\n+        assertNotNull(userTO);\n+        assertEquals(\"suspended\", userTO.getStatus());\n+\n+        statusMod = new StatusMod();\n+        statusMod.setType(StatusMod.ModType.REACTIVATE);\n+        userTO = userService.status(userTO.getKey(), statusMod).readEntity(UserTO.class);\n+        assertNotNull(userTO);\n+        assertEquals(\"active\", userTO.getStatus());\n+    }\n+\n+    @Test\n+    public void suspendReactivateOnResource() {\n+        // Assert resources are present\n+        ResourceTO dbTable = resourceService.read(RESOURCE_NAME_TESTDB);\n+        assertNotNull(dbTable);\n+        ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n+        assertNotNull(ldap);\n+\n+        // Create user with reference to resources\n+        UserTO userTO = getUniqueSampleTO(\"suspreactonresource@syncope.apache.org\");\n+        userTO.getMemberships().clear();\n+        userTO.getResources().clear();\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+        userTO.getResources().add(RESOURCE_NAME_LDAP);\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertEquals(ActivitiDetector.isActivitiEnabledForUsers()\n+                ? \"active\"\n+                : \"created\", userTO.getStatus());\n+        long userId = userTO.getKey();\n+\n+        // Suspend with effect on syncope, ldap and db => user should be suspended in syncope and all resources\n+        StatusMod statusMod = new StatusMod();\n+        statusMod.setType(StatusMod.ModType.SUSPEND);\n+        statusMod.setOnSyncope(true);\n+        statusMod.getResourceNames().add(RESOURCE_NAME_TESTDB);\n+        statusMod.getResourceNames().add(RESOURCE_NAME_LDAP);\n+        userTO = userService.status(userId, statusMod).readEntity(UserTO.class);\n+        assertNotNull(userTO);\n+        assertEquals(\"suspended\", userTO.getStatus());\n+\n+        ConnObjectTO connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_TESTDB, SubjectType.USER, userId);\n+        assertFalse(getBooleanAttribute(connObjectTO, OperationalAttributes.ENABLE_NAME));\n+\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.USER, userId);\n+        assertNotNull(connObjectTO);\n+\n+        // Suspend and reactivate only on ldap => db and syncope should still show suspended\n+        statusMod = new StatusMod();\n+        statusMod.setType(StatusMod.ModType.SUSPEND);\n+        statusMod.setOnSyncope(false);\n+        statusMod.getResourceNames().add(RESOURCE_NAME_LDAP);\n+        userService.status(userId, statusMod);\n+        statusMod.setType(StatusMod.ModType.REACTIVATE);\n+        userTO = userService.status(userId, statusMod).readEntity(UserTO.class);\n+        assertNotNull(userTO);\n+        assertEquals(\"suspended\", userTO.getStatus());\n+\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_TESTDB, SubjectType.USER, userId);\n+        assertFalse(getBooleanAttribute(connObjectTO, OperationalAttributes.ENABLE_NAME));\n+\n+        // Reactivate on syncope and db => syncope and db should show the user as active\n+        statusMod = new StatusMod();\n+        statusMod.setType(StatusMod.ModType.REACTIVATE);\n+        statusMod.setOnSyncope(true);\n+        statusMod.getResourceNames().add(RESOURCE_NAME_TESTDB);\n+\n+        userTO = userService.status(userId, statusMod).readEntity(UserTO.class);\n+        assertNotNull(userTO);\n+        assertEquals(\"active\", userTO.getStatus());\n+\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_TESTDB, SubjectType.USER, userId);\n+        assertTrue(getBooleanAttribute(connObjectTO, OperationalAttributes.ENABLE_NAME));\n+    }\n+\n+    public void updateMultivalueAttribute() {\n+        UserTO userTO = getSampleTO(\"multivalue@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        AttrTO loginDate = userTO.getPlainAttrMap().get(\"loginDate\");\n+        assertNotNull(loginDate);\n+        assertEquals(1, loginDate.getValues().size());\n+\n+        UserMod userMod = new UserMod();\n+\n+        AttrMod loginDateMod = new AttrMod();\n+        loginDateMod.getValuesToBeAdded().add(\"2000-01-01\");\n+\n+        userMod.setKey(userTO.getKey());\n+        userMod.getPlainAttrsToUpdate().add(loginDateMod);\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+\n+        loginDate = userTO.getPlainAttrMap().get(\"loginDate\");\n+        assertNotNull(loginDate);\n+        assertEquals(2, loginDate.getValues().size());\n+    }\n+\n+    @Test(expected = EmptyResultDataAccessException.class)\n+    public void issue213() {\n+        UserTO userTO = getUniqueSampleTO(\"issue213@syncope.apache.org\");\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertEquals(1, userTO.getResources().size());\n+\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+\n+        String username = jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class,\n+                userTO.getUsername());\n+\n+        assertEquals(userTO.getUsername(), username);\n+\n+        UserMod userMod = new UserMod();\n+\n+        userMod.setKey(userTO.getKey());\n+        userMod.getResourcesToRemove().add(RESOURCE_NAME_TESTDB);\n+\n+        userTO = updateUser(userMod);\n+        assertTrue(userTO.getResources().isEmpty());\n+\n+        jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class, userTO.getUsername());\n+    }\n+\n+    @Test\n+    public void issue234() {\n+        UserTO inUserTO = getUniqueSampleTO(\"issue234@syncope.apache.org\");\n+        inUserTO.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        UserTO userTO = createUser(inUserTO);\n+        assertNotNull(userTO);\n+\n+        UserMod userMod = new UserMod();\n+\n+        userMod.setKey(userTO.getKey());\n+        userMod.setUsername(\"1\" + userTO.getUsername());\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+        assertEquals(\"1\" + inUserTO.getUsername(), userTO.getUsername());\n+    }\n+\n+    @Test\n+    public void issue270() {\n+        // 1. create a new user without virtual attributes\n+        UserTO original = getUniqueSampleTO(\"issue270@syncope.apache.org\");\n+        // be sure to remove all virtual attributes\n+        original.getVirAttrs().clear();\n+\n+        original = createUser(original);\n+\n+        assertNotNull(original);\n+\n+        assertTrue(original.getVirAttrs().isEmpty());\n+\n+        UserTO toBeUpdated = userService.read(original.getKey());\n+\n+        AttrTO virtual = attrTO(\"virtualdata\", \"virtualvalue\");\n+        toBeUpdated.getVirAttrs().add(virtual);\n+\n+        // 2. try to update by adding a resource, but no password: must fail\n+        UserMod userMod = AttributableOperations.diff(toBeUpdated, original);\n+        assertNotNull(userMod);\n+\n+        toBeUpdated = updateUser(userMod);\n+        assertNotNull(toBeUpdated);\n+\n+        assertFalse(toBeUpdated.getVirAttrs().isEmpty());\n+        assertNotNull(toBeUpdated.getVirAttrs().get(0));\n+\n+        assertEquals(virtual.getSchema(), toBeUpdated.getVirAttrs().get(0).getSchema());\n+    }\n+\n+    @Test\n+    public final void issue280() {\n+        UserTO userTO = getUniqueSampleTO(\"issue280@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.setPassword(\"123password\");\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_TESTDB);\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+\n+        final List<PropagationStatus> propagations = userTO.getPropagationStatusTOs();\n+\n+        assertNotNull(propagations);\n+        assertEquals(1, propagations.size());\n+\n+        final PropagationTaskExecStatus status = propagations.get(0).getStatus();\n+        final String resource = propagations.get(0).getResource();\n+\n+        assertNotNull(status);\n+        assertEquals(RESOURCE_NAME_TESTDB, resource);\n+        assertTrue(status.isSuccessful());\n+    }\n+\n+    @Test\n+    public void issue281() {\n+        UserTO userTO = getUniqueSampleTO(\"issue281@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        final List<PropagationStatus> propagations = userTO.getPropagationStatusTOs();\n+\n+        assertNotNull(propagations);\n+        assertEquals(1, propagations.size());\n+\n+        final PropagationTaskExecStatus status = propagations.get(0).getStatus();\n+        final String resource = propagations.get(0).getResource();\n+\n+        assertNotNull(status);\n+        assertEquals(RESOURCE_NAME_CSV, resource);\n+        assertFalse(status.isSuccessful());\n+    }\n+\n+    @Test\n+    public void issue288() {\n+        UserTO userTO = getSampleTO(\"issue288@syncope.apache.org\");\n+        userTO.getPlainAttrs().add(attrTO(\"aLong\", \"STRING\"));\n+\n+        try {\n+            createUser(userTO);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidValues, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void roleAttrPropagation() {\n+        UserTO userTO = getUniqueSampleTO(\"checkRoleAttrPropagation@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(1L);\n+\n+        userTO.getMemberships().add(membershipTO);\n+\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+        assertNotNull(actual.getDerAttrMap().get(\"csvuserid\"));\n+\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey());\n+        assertNotNull(connObjectTO);\n+        assertEquals(\"sx-dx\", connObjectTO.getPlainAttrMap().get(\"ROLE\").getValues().get(0));\n+    }\n+\n+    @Test\n+    public void membershipAttrPropagation() {\n+        UserTO userTO = getUniqueSampleTO(\"checkMembAttrPropagation@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(1L);\n+        membershipTO.getPlainAttrs().add(attrTO(\"mderived_sx\", \"sx\"));\n+        membershipTO.getPlainAttrs().add(attrTO(\"mderived_dx\", \"dx\"));\n+        membershipTO.getDerAttrs().add(attrTO(\"mderToBePropagated\", null));\n+        userTO.getMemberships().add(membershipTO);\n+\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+        assertNotNull(actual.getDerAttrMap().get(\"csvuserid\"));\n+\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey());\n+        assertNotNull(connObjectTO);\n+        assertEquals(\"sx-dx\", connObjectTO.getPlainAttrMap().get(\"MEMBERSHIP\").getValues().get(0));\n+    }\n+\n+    @Test\n+    public void noContent() throws IOException {\n+        SyncopeClient noContentclient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n+        UserService noContentService = noContentclient.prefer(UserService.class, Preference.RETURN_NO_CONTENT);\n+\n+        UserTO user = getUniqueSampleTO(\"nocontent@syncope.apache.org\");\n+\n+        Response response = noContentService.create(user, true);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+        assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n+\n+        user = getObject(response.getLocation(), UserService.class, UserTO.class);\n+        assertNotNull(user);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setPassword(\"password321\");\n+\n+        response = noContentService.update(user.getKey(), userMod);\n+        assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n+        assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n+\n+        response = noContentService.delete(user.getKey());\n+        assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n+        assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE108() {\n+        UserTO userTO = getUniqueSampleTO(\"syncope108@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+        MembershipTO memb12 = new MembershipTO();\n+        memb12.setRoleId(12L);\n+\n+        userTO.getMemberships().add(memb12);\n+\n+        MembershipTO memb13 = new MembershipTO();\n+        memb13.setRoleId(13L);\n+\n+        userTO.getMemberships().add(memb13);\n+\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+        assertEquals(2, actual.getMemberships().size());\n+        assertEquals(1, actual.getResources().size());\n+\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey());\n+        assertNotNull(connObjectTO);\n+\n+        // -----------------------------------\n+        // Remove the first membership: de-provisioning shouldn't happen\n+        // -----------------------------------\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(actual.getKey());\n+\n+        userMod.getMembershipsToRemove().add(actual.getMemberships().get(0).getKey());\n+\n+        actual = updateUser(userMod);\n+        assertNotNull(actual);\n+        assertEquals(1, actual.getMemberships().size());\n+\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey());\n+        assertNotNull(connObjectTO);\n+        // -----------------------------------\n+\n+        // -----------------------------------\n+        // Remove the resource assigned directly: de-provisioning shouldn't happen\n+        // -----------------------------------\n+        userMod = new UserMod();\n+        userMod.setKey(actual.getKey());\n+\n+        userMod.getResourcesToRemove().add(actual.getResources().iterator().next());\n+\n+        actual = updateUser(userMod);\n+        assertNotNull(actual);\n+        assertEquals(1, actual.getMemberships().size());\n+        assertFalse(actual.getResources().isEmpty());\n+\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey());\n+        assertNotNull(connObjectTO);\n+        // -----------------------------------\n+\n+        // -----------------------------------\n+        // Remove the first membership: de-provisioning should happen\n+        // -----------------------------------\n+        userMod = new UserMod();\n+        userMod.setKey(actual.getKey());\n+\n+        userMod.getMembershipsToRemove().add(actual.getMemberships().get(0).getKey());\n+\n+        actual = updateUser(userMod);\n+        assertNotNull(actual);\n+        assertTrue(actual.getMemberships().isEmpty());\n+        assertTrue(actual.getResources().isEmpty());\n+\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey());\n+            fail(\"Read should not succeeed\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE111() {\n+        UserTO userTO = getUniqueSampleTO(\"syncope111@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+        MembershipTO memb12 = new MembershipTO();\n+        memb12.setRoleId(12L);\n+        memb12.getPlainAttrs().add(attrTO(\"postalAddress\", \"postalAddress\"));\n+        userTO.getMemberships().add(memb12);\n+\n+        MembershipTO memb13 = new MembershipTO();\n+        memb13.setRoleId(13L);\n+        userTO.getMemberships().add(memb13);\n+\n+        userTO.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+        assertEquals(2, actual.getMemberships().size());\n+\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.USER, actual.getKey());\n+        assertNotNull(connObjectTO);\n+\n+        AttrTO postalAddress = connObjectTO.getPlainAttrMap().get(\"postalAddress\");\n+        assertNotNull(postalAddress);\n+        assertEquals(1, postalAddress.getValues().size());\n+        assertEquals(\"postalAddress\", postalAddress.getValues().get(0));\n+\n+        AttrTO title = connObjectTO.getPlainAttrMap().get(\"title\");\n+        assertNotNull(title);\n+        assertEquals(2, title.getValues().size());\n+        assertTrue(title.getValues().contains(\"r12\") && title.getValues().contains(\"r13\"));\n+\n+        // -----------------------------------\n+        // Remove the first membership and check for membership attr propagation and role attr propagation\n+        // -----------------------------------\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(actual.getKey());\n+\n+        MembershipTO membershipTO = actual.getMemberships().get(0).getRoleId() == 12L\n+                ? actual.getMemberships().get(0)\n+                : actual.getMemberships().get(1);\n+\n+        userMod.getMembershipsToRemove().add(membershipTO.getKey());\n+\n+        actual = updateUser(userMod);\n+        assertNotNull(actual);\n+        assertEquals(1, actual.getMemberships().size());\n+\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.USER, actual.getKey());\n+        assertNotNull(connObjectTO);\n+\n+        postalAddress = connObjectTO.getPlainAttrMap().get(\"postalAddress\");\n+        assertTrue(postalAddress == null || postalAddress.getValues().isEmpty()\n+                || StringUtils.isNotBlank(postalAddress.getValues().get(0)));\n+\n+        title = connObjectTO.getPlainAttrMap().get(\"title\");\n+        assertNotNull(title);\n+        assertEquals(1, title.getValues().size());\n+        assertTrue(title.getValues().contains(\"r13\"));\n+        // -----------------------------------\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE185() {\n+        // 1. create user with LDAP resource, succesfully propagated\n+        UserTO userTO = getSampleTO(\"syncope185@syncope.apache.org\");\n+        userTO.getVirAttrs().clear();\n+        userTO.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertEquals(RESOURCE_NAME_LDAP, userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n+\n+        // 2. delete this user\n+        userService.delete(userTO.getKey());\n+\n+        // 3. try (and fail) to find this user on the external LDAP resource\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.USER, userTO.getKey());\n+            fail(\"This entry should not be present on this resource\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+    }\n+\n+    @Test()\n+    public void issueSYNCOPE51() {\n+        AttrTO defaultCA = configurationService.read(\"password.cipher.algorithm\");\n+        final String originalCAValue = defaultCA.getValues().get(0);\n+        defaultCA.getValues().set(0, \"MD5\");\n+        configurationService.set(defaultCA.getSchema(), defaultCA);\n+\n+        AttrTO newCA = configurationService.read(defaultCA.getSchema());\n+        assertEquals(defaultCA, newCA);\n+\n+        UserTO userTO = getSampleTO(\"syncope51@syncope.apache.org\");\n+        userTO.setPassword(\"password\");\n+\n+        try {\n+            createUser(userTO);\n+            fail(\"Create user should not succeed\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+            assertTrue(e.getElements().iterator().next().contains(\"MD5\"));\n+        }\n+\n+        defaultCA.getValues().set(0, originalCAValue);\n+        configurationService.set(defaultCA.getSchema(), defaultCA);\n+\n+        AttrTO oldCA = configurationService.read(defaultCA.getSchema());\n+        assertEquals(defaultCA, oldCA);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE267() {\n+        // ----------------------------------\n+        // create user and check virtual attribute value propagation\n+        // ----------------------------------\n+        UserTO userTO = getUniqueSampleTO(\"syncope267@apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertEquals(RESOURCE_NAME_DBVIRATTR, userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n+\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_DBVIRATTR, SubjectType.USER, userTO.getKey());\n+        assertNotNull(connObjectTO);\n+        assertEquals(\"virtualvalue\", connObjectTO.getPlainAttrMap().get(\"USERNAME\").getValues().get(0));\n+        // ----------------------------------\n+\n+        userTO = userService.read(userTO.getKey());\n+\n+        assertNotNull(userTO);\n+        assertEquals(1, userTO.getVirAttrs().size());\n+        assertEquals(\"virtualvalue\", userTO.getVirAttrs().get(0).getValues().get(0));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE266() {\n+        UserTO userTO = getUniqueSampleTO(\"syncope266@apache.org\");\n+        userTO.getResources().clear();\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+\n+        // this resource has not a mapping for Password\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_UPDATE);\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE279() {\n+        UserTO userTO = getUniqueSampleTO(\"syncope279@apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getResources().add(RESOURCE_NAME_TIMEOUT);\n+        userTO = createUser(userTO);\n+        assertEquals(RESOURCE_NAME_TIMEOUT, userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertNotNull(userTO.getPropagationStatusTOs().get(0).getFailureReason());\n+        assertEquals(PropagationTaskExecStatus.UNSUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE122() {\n+        // 1. create user on testdb and testdb2\n+        UserTO userTO = getUniqueSampleTO(\"syncope122@apache.org\");\n+        userTO.getResources().clear();\n+\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB2);\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB));\n+        assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB2));\n+\n+        final String pwdOnSyncope = userTO.getPassword();\n+\n+        ConnObjectTO userOnDb = resourceService.getConnectorObject(\n+                RESOURCE_NAME_TESTDB, SubjectType.USER, userTO.getKey());\n+        final AttrTO pwdOnTestDbAttr = userOnDb.getPlainAttrMap().get(OperationalAttributes.PASSWORD_NAME);\n+        assertNotNull(pwdOnTestDbAttr);\n+        assertNotNull(pwdOnTestDbAttr.getValues());\n+        assertFalse(pwdOnTestDbAttr.getValues().isEmpty());\n+        final String pwdOnTestDb = pwdOnTestDbAttr.getValues().iterator().next();\n+\n+        ConnObjectTO userOnDb2 = resourceService.getConnectorObject(\n+                RESOURCE_NAME_TESTDB2, SubjectType.USER, userTO.getKey());\n+        final AttrTO pwdOnTestDb2Attr = userOnDb2.getPlainAttrMap().get(OperationalAttributes.PASSWORD_NAME);\n+        assertNotNull(pwdOnTestDb2Attr);\n+        assertNotNull(pwdOnTestDb2Attr.getValues());\n+        assertFalse(pwdOnTestDb2Attr.getValues().isEmpty());\n+        final String pwdOnTestDb2 = pwdOnTestDb2Attr.getValues().iterator().next();\n+\n+        // 2. request to change password only on testdb (no Syncope, no testdb2)\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.setPassword(getUUIDString());\n+        StatusMod pwdPropRequest = new StatusMod();\n+        pwdPropRequest.setOnSyncope(false);\n+        pwdPropRequest.getResourceNames().add(RESOURCE_NAME_TESTDB);\n+        userMod.setPwdPropRequest(pwdPropRequest);\n+\n+        userTO = updateUser(userMod);\n+\n+        // 3a. Chech that only a single propagation took place\n+        assertNotNull(userTO.getPropagationStatusTOs());\n+        assertEquals(1, userTO.getPropagationStatusTOs().size());\n+        assertEquals(RESOURCE_NAME_TESTDB, userTO.getPropagationStatusTOs().iterator().next().getResource());\n+\n+        // 3b. verify that password hasn't changed on Syncope\n+        assertEquals(pwdOnSyncope, userTO.getPassword());\n+\n+        // 3c. verify that password *has* changed on testdb\n+        userOnDb = resourceService.getConnectorObject(RESOURCE_NAME_TESTDB, SubjectType.USER, userTO.getKey());\n+        final AttrTO pwdOnTestDbAttrAfter = userOnDb.getPlainAttrMap().get(OperationalAttributes.PASSWORD_NAME);\n+        assertNotNull(pwdOnTestDbAttrAfter);\n+        assertNotNull(pwdOnTestDbAttrAfter.getValues());\n+        assertFalse(pwdOnTestDbAttrAfter.getValues().isEmpty());\n+        assertNotEquals(pwdOnTestDb, pwdOnTestDbAttrAfter.getValues().iterator().next());\n+\n+        // 3d. verify that password hasn't changed on testdb2\n+        userOnDb2 = resourceService.getConnectorObject(RESOURCE_NAME_TESTDB2, SubjectType.USER, userTO.getKey());\n+        final AttrTO pwdOnTestDb2AttrAfter = userOnDb2.getPlainAttrMap().get(OperationalAttributes.PASSWORD_NAME);\n+        assertNotNull(pwdOnTestDb2AttrAfter);\n+        assertNotNull(pwdOnTestDb2AttrAfter.getValues());\n+        assertFalse(pwdOnTestDb2AttrAfter.getValues().isEmpty());\n+        assertEquals(pwdOnTestDb2, pwdOnTestDb2AttrAfter.getValues().iterator().next());\n+    }\n+\n+    @Test\n+    public void isseSYNCOPE136AES() {\n+        // 1. read configured cipher algorithm in order to be able to restore it at the end of test\n+        AttrTO pwdCipherAlgo = configurationService.read(\"password.cipher.algorithm\");\n+        final String origpwdCipherAlgo = pwdCipherAlgo.getValues().get(0);\n+\n+        // 2. set AES password cipher algorithm\n+        pwdCipherAlgo.getValues().set(0, \"AES\");\n+        configurationService.set(pwdCipherAlgo.getSchema(), pwdCipherAlgo);\n+\n+        // 3. create user with no resources\n+        UserTO userTO = getUniqueSampleTO(\"syncope136_AES@apache.org\");\n+        userTO.getResources().clear();\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        // 4. update user, assign a propagation primary resource but don't provide any password\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_WS1);\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+\n+        // 5. verify that propagation was successful\n+        List<PropagationStatus> props = userTO.getPropagationStatusTOs();\n+        assertNotNull(props);\n+        assertEquals(1, props.size());\n+        PropagationStatus prop = props.iterator().next();\n+        assertNotNull(prop);\n+        assertEquals(RESOURCE_NAME_WS1, prop.getResource());\n+        assertEquals(PropagationTaskExecStatus.SUBMITTED, prop.getStatus());\n+\n+        // 6. restore initial cipher algorithm\n+        pwdCipherAlgo.getValues().set(0, origpwdCipherAlgo);\n+        configurationService.set(pwdCipherAlgo.getSchema(), pwdCipherAlgo);\n+    }\n+\n+    @Test\n+    public void isseSYNCOPE136Random() {\n+        // 1. create user with no resources\n+        UserTO userTO = getUniqueSampleTO(\"syncope136_Random@apache.org\");\n+        userTO.getResources().clear();\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        // 2. update user, assign a propagation primary resource but don't provide any password\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_LDAP);\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+\n+        // 3. verify that propagation was successful\n+        List<PropagationStatus> props = userTO.getPropagationStatusTOs();\n+        assertNotNull(props);\n+        assertEquals(1, props.size());\n+        PropagationStatus prop = props.iterator().next();\n+        assertNotNull(prop);\n+        assertEquals(RESOURCE_NAME_LDAP, prop.getResource());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, prop.getStatus());\n+    }\n+\n+    @Test\n+    public void mappingPurpose() {\n+        UserTO userTO = getUniqueSampleTO(\"mpurpose@apache.org\");\n+\n+        AttrTO csvuserid = new AttrTO();\n+        csvuserid.setSchema(\"csvuserid\");\n+        userTO.getDerAttrs().add(csvuserid);\n+\n+        userTO.getResources().clear();\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey());\n+        assertNull(connObjectTO.getPlainAttrMap().get(\"email\"));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE265() {\n+        for (long i = 1; i <= 5; i++) {\n+            UserMod userMod = new UserMod();\n+            userMod.setKey(i);\n+\n+            AttrMod attributeMod = new AttrMod();\n+            attributeMod.setSchema(\"type\");\n+            attributeMod.getValuesToBeAdded().add(\"a type\");\n+\n+            userMod.getPlainAttrsToRemove().add(\"type\");\n+            userMod.getPlainAttrsToUpdate().add(attributeMod);\n+\n+            UserTO userTO = updateUser(userMod);\n+            assertEquals(\"a type\", userTO.getPlainAttrMap().get(\"type\").getValues().get(0));\n+        }\n+    }\n+\n+    @Test\n+    public void bulkActions() {\n+        final BulkAction bulkAction = new BulkAction();\n+\n+        for (int i = 0; i < 10; i++) {\n+            UserTO userTO = getUniqueSampleTO(\"bulk_\" + i + \"@apache.org\");\n+            bulkAction.getTargets().add(String.valueOf(createUser(userTO).getKey()));\n+        }\n+\n+        // check for a fail\n+        bulkAction.getTargets().add(String.valueOf(Long.MAX_VALUE));\n+\n+        assertEquals(11, bulkAction.getTargets().size());\n+\n+        bulkAction.setOperation(BulkAction.Type.SUSPEND);\n+        BulkActionResult res = userService.bulk(bulkAction);\n+        assertEquals(10, res.getResultByStatus(Status.SUCCESS).size());\n+        assertEquals(1, res.getResultByStatus(Status.FAILURE).size());\n+        assertEquals(\"suspended\", userService.read(\n+                Long.parseLong(res.getResultByStatus(Status.SUCCESS).get(3).toString())).getStatus());\n+\n+        bulkAction.setOperation(BulkAction.Type.REACTIVATE);\n+        res = userService.bulk(bulkAction);\n+        assertEquals(10, res.getResultByStatus(Status.SUCCESS).size());\n+        assertEquals(1, res.getResultByStatus(Status.FAILURE).size());\n+        assertEquals(\"active\", userService.read(\n+                Long.parseLong(res.getResultByStatus(Status.SUCCESS).get(3).toString())).getStatus());\n+\n+        bulkAction.setOperation(BulkAction.Type.DELETE);\n+        res = userService.bulk(bulkAction);\n+        assertEquals(10, res.getResultByStatus(Status.SUCCESS).size());\n+        assertEquals(1, res.getResultByStatus(Status.FAILURE).size());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE354() {\n+        // change resource-ldap role mapping for including uniqueMember (need for assertions below)\n+        ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n+        for (MappingItemTO item : ldap.getRmapping().getItems()) {\n+            if (\"description\".equals(item.getExtAttrName())) {\n+                item.setExtAttrName(\"uniqueMember\");\n+            }\n+        }\n+        resourceService.update(ldap.getKey(), ldap);\n+\n+        // 1. create role with LDAP resource\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"SYNCOPE354-\" + getUUIDString());\n+        roleTO.setParent(8L);\n+        roleTO.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        roleTO = createRole(roleTO);\n+        assertNotNull(roleTO);\n+\n+        // 2. create user with LDAP resource and membership of the above role\n+        UserTO userTO = getUniqueSampleTO(\"syncope354@syncope.apache.org\");\n+        userTO.getResources().add(RESOURCE_NAME_LDAP);\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(roleTO.getKey());\n+        userTO.getMemberships().add(membershipTO);\n+\n+        userTO = createUser(userTO);\n+        assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n+\n+        // 3. read role on resource, check that user DN is included in uniqueMember\n+        ConnObjectTO connObj = resourceService.getConnectorObject(\n+                RESOURCE_NAME_LDAP, SubjectType.ROLE, roleTO.getKey());\n+        assertNotNull(connObj);\n+        assertTrue(connObj.getPlainAttrMap().get(\"uniqueMember\").getValues().\n+                contains(\"uid=\" + userTO.getUsername() + \",ou=people,o=isp\"));\n+\n+        // 4. remove membership\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.getMembershipsToRemove().add(userTO.getMemberships().iterator().next().getKey());\n+\n+        userTO = updateUser(userMod);\n+        assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n+\n+        // 5. read role on resource, check that user DN was removed from uniqueMember\n+        connObj = resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE, roleTO.getKey());\n+        assertNotNull(connObj);\n+        assertFalse(connObj.getPlainAttrMap().get(\"uniqueMember\").getValues().\n+                contains(\"uid=\" + userTO.getUsername() + \",ou=people,o=isp\"));\n+\n+        // 6. restore original resource-ldap role mapping\n+        for (MappingItemTO item : ldap.getRmapping().getItems()) {\n+            if (\"uniqueMember\".equals(item.getExtAttrName())) {\n+                item.setExtAttrName(\"description\");\n+            }\n+        }\n+        resourceService.update(ldap.getKey(), ldap);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE357() throws IOException {\n+        // 1. create role with LDAP resource\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"SYNCOPE357-\" + getUUIDString());\n+        roleTO.setParent(8L);\n+        roleTO.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        roleTO = createRole(roleTO);\n+        assertNotNull(roleTO);\n+\n+        // 2. create user with membership of the above role\n+        UserTO userTO = getUniqueSampleTO(\"syncope357@syncope.apache.org\");\n+        userTO.getPlainAttrs().add(attrTO(\"obscure\", \"valueToBeObscured\"));\n+        userTO.getPlainAttrs().add(attrTO(\"photo\",\n+                Base64Utility.encode(IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/favicon.jpg\")))));\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(roleTO.getKey());\n+        userTO.getMemberships().add(membershipTO);\n+\n+        userTO = createUser(userTO);\n+        assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n+        assertNotNull(userTO.getPlainAttrMap().get(\"obscure\"));\n+        assertNotNull(userTO.getPlainAttrMap().get(\"photo\"));\n+\n+        // 3. read user on resource\n+        ConnObjectTO connObj = resourceService.getConnectorObject(\n+                RESOURCE_NAME_LDAP, SubjectType.USER, userTO.getKey());\n+        assertNotNull(connObj);\n+        AttrTO registeredAddress = connObj.getPlainAttrMap().get(\"registeredAddress\");\n+        assertNotNull(registeredAddress);\n+        assertEquals(userTO.getPlainAttrMap().get(\"obscure\").getValues(), registeredAddress.getValues());\n+        AttrTO jpegPhoto = connObj.getPlainAttrMap().get(\"jpegPhoto\");\n+        assertNotNull(jpegPhoto);\n+        assertEquals(userTO.getPlainAttrMap().get(\"photo\").getValues(), jpegPhoto.getValues());\n+\n+        // 4. remove role\n+        roleService.delete(roleTO.getKey());\n+\n+        // 5. try to read user on resource: fail\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.USER, userTO.getKey());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE383() {\n+        // 1. create user without resources\n+        UserTO userTO = getUniqueSampleTO(\"syncope383@apache.org\");\n+        userTO.getResources().clear();\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        // 2. assign resource without specifying a new pwd and check propagation failure\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_TESTDB);\n+        userTO = updateUser(userMod);\n+        assertEquals(RESOURCE_NAME_TESTDB, userTO.getResources().iterator().next());\n+        assertFalse(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n+        assertNotNull(userTO.getPropagationStatusTOs().get(0).getFailureReason());\n+\n+        // 3. request to change password only on testdb\n+        userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.setPassword(getUUIDString());\n+        StatusMod pwdPropRequest = new StatusMod();\n+        pwdPropRequest.getResourceNames().add(RESOURCE_NAME_TESTDB);\n+        userMod.setPwdPropRequest(pwdPropRequest);\n+\n+        userTO = updateUser(userMod);\n+        assertEquals(RESOURCE_NAME_TESTDB, userTO.getResources().iterator().next());\n+        assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE402() {\n+        // 1. create an user with strict mandatory attributes only\n+        UserTO userTO = new UserTO();\n+        String userId = getUUIDString() + \"syncope402@syncope.apache.org\";\n+        userTO.setUsername(userId);\n+        userTO.setPassword(\"password\");\n+\n+        userTO.getPlainAttrs().add(attrTO(\"userId\", userId));\n+        userTO.getPlainAttrs().add(attrTO(\"fullname\", userId));\n+        userTO.getPlainAttrs().add(attrTO(\"surname\", userId));\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertTrue(userTO.getResources().isEmpty());\n+\n+        //2. update assigning a resource NOT forcing mandatory constraints\n+        // AND primary: must fail with PropagationException\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.setPassword(\"newPassword\");\n+\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_WS1);\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_TESTDB);\n+        userTO = updateUser(userMod);\n+\n+        List<PropagationStatus> propagationStatuses = userTO.getPropagationStatusTOs();\n+        PropagationStatus ws1PropagationStatus = null;\n+        if (propagationStatuses != null) {\n+            for (PropagationStatus propStatus : propagationStatuses) {\n+                if (RESOURCE_NAME_WS1.equals(propStatus.getResource())) {\n+                    ws1PropagationStatus = propStatus;\n+                    break;\n+                }\n+            }\n+        }\n+        assertNotNull(ws1PropagationStatus);\n+        assertEquals(RESOURCE_NAME_WS1, ws1PropagationStatus.getResource());\n+        assertNotNull(ws1PropagationStatus.getFailureReason());\n+        assertEquals(PropagationTaskExecStatus.UNSUBMITTED, ws1PropagationStatus.getStatus());\n+    }\n+\n+    @Test\n+    public void unlink() {\n+        UserTO userTO = getUniqueSampleTO(\"unlink@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey()));\n+\n+        assertNotNull(userService.bulkDeassociation(actual.getKey(),\n+                ResourceDeassociationActionType.UNLINK,\n+                CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceName.class)).\n+                readEntity(BulkActionResult.class));\n+\n+        actual = userService.read(actual.getKey());\n+        assertNotNull(actual);\n+        assertTrue(actual.getResources().isEmpty());\n+\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey()));\n+    }\n+\n+    @Test\n+    public void link() {\n+        UserTO userTO = getUniqueSampleTO(\"link@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+        assertTrue(actual.getResources().isEmpty());\n+\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey());\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n+\n+        final ResourceAssociationMod associationMod = new ResourceAssociationMod();\n+        associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceName.class));\n+\n+        assertNotNull(userService.bulkAssociation(\n+                actual.getKey(), ResourceAssociationActionType.LINK, associationMod).readEntity(BulkActionResult.class));\n+\n+        actual = userService.read(actual.getKey());\n+        assertNotNull(actual);\n+        assertFalse(actual.getResources().isEmpty());\n+\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey());\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n+    @Test\n+    public void unassign() {\n+        UserTO userTO = getUniqueSampleTO(\"unassign@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey()));\n+\n+        assertNotNull(userService.bulkDeassociation(actual.getKey(),\n+                ResourceDeassociationActionType.UNASSIGN,\n+                CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceName.class)).\n+                readEntity(BulkActionResult.class));\n+\n+        actual = userService.read(actual.getKey());\n+        assertNotNull(actual);\n+        assertTrue(actual.getResources().isEmpty());\n+\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey());\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n+    @Test\n+    public void assign() {\n+        UserTO userTO = getUniqueSampleTO(\"assign@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+        assertTrue(actual.getResources().isEmpty());\n+\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey());\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n+\n+        final ResourceAssociationMod associationMod = new ResourceAssociationMod();\n+        associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceName.class));\n+        associationMod.setChangePwd(true);\n+        associationMod.setPassword(\"password\");\n+\n+        assertNotNull(userService.bulkAssociation(actual.getKey(), ResourceAssociationActionType.ASSIGN, associationMod)\n+                .readEntity(BulkActionResult.class));\n+\n+        actual = userService.read(actual.getKey());\n+        assertNotNull(actual);\n+        assertFalse(actual.getResources().isEmpty());\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey()));\n+    }\n+\n+    @Test\n+    public void deprovision() {\n+        UserTO userTO = getUniqueSampleTO(\"deprovision@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey()));\n+\n+        assertNotNull(userService.bulkDeassociation(actual.getKey(),\n+                ResourceDeassociationActionType.DEPROVISION,\n+                CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceName.class)).\n+                readEntity(BulkActionResult.class));\n+\n+        actual = userService.read(actual.getKey());\n+        assertNotNull(actual);\n+        assertFalse(actual.getResources().isEmpty());\n+\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey());\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n+    @Test\n+    public void provision() {\n+        UserTO userTO = getUniqueSampleTO(\"provision@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+        assertTrue(actual.getResources().isEmpty());\n+\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey());\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n+\n+        final ResourceAssociationMod associationMod = new ResourceAssociationMod();\n+        associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceName.class));\n+        associationMod.setChangePwd(true);\n+        associationMod.setPassword(\"password\");\n+\n+        assertNotNull(userService.bulkAssociation(actual.getKey(), ResourceAssociationActionType.PROVISION,\n+                associationMod)\n+                .readEntity(BulkActionResult.class));\n+\n+        actual = userService.read(actual.getKey());\n+        assertNotNull(actual);\n+        assertTrue(actual.getResources().isEmpty());\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey()));\n+    }\n+\n+    @Test\n+    public void deprovisionUnlinked() {\n+        UserTO userTO = getUniqueSampleTO(\"provision@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+        assertTrue(actual.getResources().isEmpty());\n+\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey());\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n+\n+        final ResourceAssociationMod associationMod = new ResourceAssociationMod();\n+        associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceName.class));\n+        associationMod.setChangePwd(true);\n+        associationMod.setPassword(\"password\");\n+\n+        assertNotNull(userService.bulkAssociation(actual.getKey(), ResourceAssociationActionType.PROVISION,\n+                associationMod)\n+                .readEntity(BulkActionResult.class));\n+\n+        actual = userService.read(actual.getKey());\n+        assertNotNull(actual);\n+        assertTrue(actual.getResources().isEmpty());\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey()));\n+\n+        assertNotNull(userService.bulkDeassociation(actual.getKey(),\n+                ResourceDeassociationActionType.DEPROVISION,\n+                CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceName.class)).\n+                readEntity(BulkActionResult.class));\n+\n+        actual = userService.read(actual.getKey());\n+        assertNotNull(actual);\n+        assertTrue(actual.getResources().isEmpty());\n+\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, actual.getKey());\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE420() {\n+        UserTO userTO = getUniqueSampleTO(\"syncope420@syncope.apache.org\");\n+        userTO.getPlainAttrs().add(attrTO(\"makeItDouble\", \"3\"));\n+\n+        userTO = createUser(userTO);\n+        assertEquals(\"6\", userTO.getPlainAttrMap().get(\"makeItDouble\").getValues().get(0));\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.getPlainAttrsToRemove().add(\"makeItDouble\");\n+        userMod.getPlainAttrsToUpdate().add(attrMod(\"makeItDouble\", \"7\"));\n+\n+        userTO = updateUser(userMod);\n+        assertEquals(\"14\", userTO.getPlainAttrMap().get(\"makeItDouble\").getValues().get(0));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE426() {\n+        UserTO userTO = getUniqueSampleTO(\"syncope426@syncope.apache.org\");\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setPassword(\"anotherPassword123\");\n+        userTO = userService.update(userTO.getKey(), userMod).readEntity(UserTO.class);\n+        assertNotNull(userTO);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE435() {\n+        // 1. create user without password\n+        UserTO userTO = getUniqueSampleTO(\"syncope435@syncope.apache.org\");\n+        userTO.setPassword(null);\n+        userTO = createUser(userTO, false);\n+        assertNotNull(userTO);\n+\n+        // 2. try to update user by subscribing a resource - works but propagation is not even attempted\n+        UserMod userMod = new UserMod();\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_WS1);\n+\n+        userTO = userService.update(userTO.getKey(), userMod).readEntity(UserTO.class);\n+        assertEquals(Collections.singleton(RESOURCE_NAME_WS1), userTO.getResources());\n+        assertFalse(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n+        assertTrue(userTO.getPropagationStatusTOs().get(0).getFailureReason().\n+                startsWith(\"Not attempted because there are mandatory attributes without value(s): [__PASSWORD__]\"));\n+    }\n+\n+    @Test\n+    public void ifMatch() {\n+        UserTO userTO = userService.create(getUniqueSampleTO(\"ifmatch@syncope.apache.org\"), true).\n+                readEntity(UserTO.class);\n+        assertNotNull(userTO);\n+        assertNotNull(userTO.getKey());\n+\n+        EntityTag etag = adminClient.getLatestEntityTag(userService);\n+        assertNotNull(etag);\n+        assertTrue(StringUtils.isNotBlank(etag.getValue()));\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.setUsername(userTO.getUsername() + \"XX\");\n+        userTO = userService.update(userMod.getKey(), userMod).readEntity(UserTO.class);\n+        assertTrue(userTO.getUsername().endsWith(\"XX\"));\n+        EntityTag etag1 = adminClient.getLatestEntityTag(userService);\n+        assertFalse(etag.getValue().equals(etag1.getValue()));\n+\n+        UserService ifMatchService = adminClient.ifMatch(UserService.class, etag);\n+        userMod.setUsername(userTO.getUsername() + \"YY\");\n+        try {\n+            ifMatchService.update(userMod.getKey(), userMod);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.ConcurrentModification, e.getType());\n+        }\n+\n+        userTO = userService.read(userTO.getKey());\n+        assertTrue(userTO.getUsername().endsWith(\"XX\"));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE454() throws NamingException {\n+        // 1. create user with LDAP resource (with 'Generate password if missing' enabled)\n+        UserTO userTO = getUniqueSampleTO(\"syncope454@syncope.apache.org\");\n+        userTO.getResources().add(RESOURCE_NAME_LDAP);\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        // 2. read resource configuration for LDAP binding\n+        ConnObjectTO connObject =\n+                resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.USER, userTO.getKey());\n+\n+        // 3. try (and succeed) to perform simple LDAP binding with provided password ('password123')\n+        assertNotNull(getLdapRemoteObject(\n+                connObject.getPlainAttrMap().get(Name.NAME).getValues().get(0),\n+                \"password123\",\n+                connObject.getPlainAttrMap().get(Name.NAME).getValues().get(0)));\n+\n+        // 4. update user without any password change request\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.setPwdPropRequest(new StatusMod());\n+        userMod.getPlainAttrsToUpdate().add(attrMod(\"surname\", \"surname2\"));\n+\n+        userService.update(userTO.getKey(), userMod);\n+\n+        // 5. try (and succeed again) to perform simple LDAP binding: password has not changed\n+        assertNotNull(getLdapRemoteObject(\n+                connObject.getPlainAttrMap().get(Name.NAME).getValues().get(0),\n+                \"password123\",\n+                connObject.getPlainAttrMap().get(Name.NAME).getValues().get(0)));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE493() {\n+        // 1.  create user and check that firstname is not propagated on resource with mapping for firstname set to NONE\n+        UserTO userTO = getUniqueSampleTO(\"issueSYNCOPE493@test.org\");\n+        userTO.getResources().add(RESOURCE_NAME_WS1);\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertEquals(1, userTO.getPropagationStatusTOs().size());\n+        assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n+\n+        final ConnObjectTO actual = resourceService.getConnectorObject(RESOURCE_NAME_WS1, SubjectType.USER, userTO.\n+                getKey());\n+        assertNotNull(actual);\n+        // check if mapping attribute with purpose NONE really hasn't been propagated\n+        assertNull(actual.getPlainAttrMap().get(\"NAME\"));\n+\n+        // 2.  update resource ws-target-resource-1\n+        ResourceTO ws1 = resourceService.read(RESOURCE_NAME_WS1);\n+        assertNotNull(ws1);\n+\n+        MappingTO ws1NewUMapping = ws1.getUmapping();\n+        // change purpose from NONE to BOTH\n+        for (MappingItemTO itemTO : ws1NewUMapping.getItems()) {\n+            if (\"firstname\".equals(itemTO.getIntAttrName())) {\n+                itemTO.setPurpose(MappingPurpose.BOTH);\n+            }\n+        }\n+\n+        ws1.setUmapping(ws1NewUMapping);\n+        ws1.setRmapping(ws1.getRmapping());\n+\n+        resourceService.update(RESOURCE_NAME_WS1, ws1);\n+        ResourceTO newWs1 = resourceService.read(ws1.getKey());\n+        assertNotNull(newWs1);\n+\n+        // check for existence\n+        Collection<MappingItemTO> mapItems = newWs1.getUmapping().getItems();\n+        assertNotNull(mapItems);\n+        assertEquals(7, mapItems.size());\n+\n+        // 3.  update user and check firstname propagation        \n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.setPwdPropRequest(new StatusMod());\n+        userMod.getPlainAttrsToUpdate().add(attrMod(\"firstname\", \"firstnameNew\"));\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+        assertEquals(1, userTO.getPropagationStatusTOs().size());\n+        assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n+\n+        final ConnObjectTO newUser = resourceService.getConnectorObject(RESOURCE_NAME_WS1, SubjectType.USER,\n+                userTO.getKey());\n+\n+        assertNotNull(newUser.getPlainAttrMap().get(\"NAME\"));\n+        assertEquals(\"firstnameNew\", newUser.getPlainAttrMap().get(\"NAME\").getValues().get(0));\n+\n+        // 4.  restore resource ws-target-resource-1 mapping\n+        ws1NewUMapping = newWs1.getUmapping();\n+        // restore purpose from BOTH to NONE\n+        for (MappingItemTO itemTO : ws1NewUMapping.getItems()) {\n+            if (\"firstname\".equals(itemTO.getIntAttrName())) {\n+                itemTO.setPurpose(MappingPurpose.NONE);\n+            }\n+        }\n+\n+        newWs1.setUmapping(ws1NewUMapping);\n+        newWs1.setRmapping(newWs1.getRmapping());\n+\n+        resourceService.update(RESOURCE_NAME_WS1, newWs1);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE505DB() throws Exception {\n+        // 1. create user\n+        UserTO user = UserITCase.getUniqueSampleTO(\"syncope505-db@syncope.apache.org\");\n+        user.setPassword(\"security\");\n+        user = createUser(user);\n+        assertNotNull(user);\n+        assertTrue(user.getResources().isEmpty());\n+\n+        // 2. Add DBPasswordPropagationActions\n+        ResourceTO resourceTO = resourceService.read(RESOURCE_NAME_TESTDB);\n+        assertNotNull(resourceTO);\n+        resourceTO.getPropagationActionsClassNames().add(DBPasswordPropagationActions.class.getName());\n+        resourceService.update(RESOURCE_NAME_TESTDB, resourceTO);\n+\n+        // 3. Add a db resource to the User\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(user.getKey());\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_TESTDB);\n+        user = updateUser(userMod);\n+        assertNotNull(user);\n+        assertEquals(1, user.getResources().size());\n+\n+        // 4. Check that the DB resource has the correct password\n+        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        String value = jdbcTemplate.queryForObject(\n+                \"SELECT PASSWORD FROM test WHERE ID=?\", String.class, user.getUsername());\n+        assertEquals(Encryptor.getInstance().encode(\"security\", CipherAlgorithm.SHA1), value.toUpperCase());\n+\n+        // 5. Remove DBPasswordPropagationActions\n+        resourceTO = resourceService.read(RESOURCE_NAME_TESTDB);\n+        assertNotNull(resourceTO);\n+        resourceTO.getPropagationActionsClassNames().remove(DBPasswordPropagationActions.class.getName());\n+        resourceService.update(RESOURCE_NAME_TESTDB, resourceTO);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE505LDAP() throws Exception {\n+        // 1. create user\n+        UserTO user = UserITCase.getUniqueSampleTO(\"syncope505-ldap@syncope.apache.org\");\n+        user.setPassword(\"security\");\n+        user = createUser(user);\n+        assertNotNull(user);\n+        assertTrue(user.getResources().isEmpty());\n+\n+        // 2. Add LDAPPasswordPropagationActions\n+        ResourceTO resourceTO = resourceService.read(RESOURCE_NAME_LDAP);\n+        assertNotNull(resourceTO);\n+        resourceTO.getPropagationActionsClassNames().add(LDAPPasswordPropagationActions.class.getName());\n+        resourceTO.setRandomPwdIfNotProvided(false);\n+        resourceService.update(RESOURCE_NAME_LDAP, resourceTO);\n+\n+        // 3. Add a resource to the User\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(user.getKey());\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_LDAP);\n+        user = updateUser(userMod);\n+        assertNotNull(user);\n+        assertEquals(1, user.getResources().size());\n+\n+        // 4. Check that the LDAP resource has the correct password\n+        ConnObjectTO connObject =\n+                resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.USER, user.getKey());\n+\n+        assertNotNull(getLdapRemoteObject(\n+                connObject.getPlainAttrMap().get(Name.NAME).getValues().get(0),\n+                \"security\",\n+                connObject.getPlainAttrMap().get(Name.NAME).getValues().get(0)));\n+\n+        // 5. Remove LDAPPasswordPropagationActions\n+        resourceTO = resourceService.read(RESOURCE_NAME_LDAP);\n+        assertNotNull(resourceTO);\n+        resourceTO.getPropagationActionsClassNames().remove(LDAPPasswordPropagationActions.class.getName());\n+        resourceTO.setRandomPwdIfNotProvided(true);\n+        resourceService.update(RESOURCE_NAME_LDAP, resourceTO);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE391() {\n+        // 1. create user on Syncope with null password\n+        UserTO userTO = getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n+        userTO.setPassword(null);\n+\n+        userTO = createUser(userTO, false);\n+        assertNotNull(userTO);\n+        assertNull(userTO.getPassword());\n+\n+        // 2. create existing user on csv and check that password on Syncope is null and that password on resource\n+        // doesn't change\n+        userTO = new UserTO();\n+        userTO.setPassword(null);\n+        userTO.setUsername(\"syncope391@syncope.apache.org\");\n+        userTO.getPlainAttrs().add(attrTO(\"fullname\", \"fullname\"));\n+        userTO.getPlainAttrs().add(attrTO(\"firstname\", \"nome0\"));\n+        userTO.getPlainAttrs().add(attrTO(\"surname\", \"cognome0\"));\n+        userTO.getPlainAttrs().add(attrTO(\"userId\", \"syncope391@syncope.apache.org\"));\n+        userTO.getPlainAttrs().add(attrTO(\"email\", \"syncope391@syncope.apache.org\"));\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+        userTO = createUser(userTO, false);\n+        assertNotNull(userTO);\n+\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, userTO.getKey());\n+        assertNotNull(connObjectTO);\n+\n+        // check if password has not changed\n+        assertEquals(\"password0\", connObjectTO.getPlainAttrMap().\n+                get(OperationalAttributes.PASSWORD_NAME).getValues().get(0));\n+        assertNull(userTO.getPassword());\n+\n+        // 3. create user with not null password and propagate onto resource-csv, specify not to save password on\n+        // Syncope local storage\n+        userTO = getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n+        userTO.setPassword(\"passwordTESTNULL\");\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+        userTO = createUser(userTO, false);\n+        assertNotNull(userTO);\n+\n+        connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, userTO.getKey());\n+        assertNotNull(connObjectTO);\n+\n+        // check if password has been propagated and that saved userTO's password is null\n+        assertEquals(\"passwordTESTNULL\", connObjectTO.getPlainAttrMap().\n+                get(OperationalAttributes.PASSWORD_NAME).getValues().get(0));\n+        assertNull(userTO.getPassword());\n+\n+        // 4. create user and propagate password on resource-csv and on Syncope local storage\n+        userTO = getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n+        userTO.setPassword(\"passwordTESTNULL\");\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+        // storePassword true by default\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, userTO.getKey());\n+        assertNotNull(connObjectTO);\n+\n+        // check if password has been correctly propagated on Syncope and resource-csv as usual\n+        assertEquals(\"passwordTESTNULL\", connObjectTO.getPlainAttrMap().\n+                get(OperationalAttributes.PASSWORD_NAME).getValues().get(0));\n+        assertNotNull(userTO.getPassword());\n+\n+        // 4. add password policy to resource with passwordNotStore to false --> must store password\n+        ResourceTO csv = resourceService.read(RESOURCE_NAME_CSV);\n+        assertNotNull(csv);\n+        try {\n+            csv.setPasswordPolicy(4L);\n+            resourceService.update(RESOURCE_NAME_CSV, csv);\n+            csv = resourceService.read(RESOURCE_NAME_CSV);\n+\n+            userTO = getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n+            userTO.setPassword(null);\n+            userTO.getDerAttrs().clear();\n+            userTO.getVirAttrs().clear();\n+            userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+            userTO.getResources().add(RESOURCE_NAME_CSV);\n+            createUser(userTO, false);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidUser, e.getType());\n+            assertTrue(e.getMessage().contains(\"Password mandatory\"));\n+        } finally {\n+            // resource csv with null password policy\n+            csv.setPasswordPolicy(null);\n+            resourceService.update(RESOURCE_NAME_CSV, csv);\n+        }\n+    }\n+}"},{"sha":"8795f06ca2aa9e920623084a8d9b2f608ffacd44","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/UserSelfITCase.java","status":"added","additions":342,"deletions":0,"changes":342,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FUserSelfITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,342 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.AccessControlException;\n+import java.util.Map;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.helpers.IOUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.mod.AttrMod;\n+import org.apache.syncope.common.lib.mod.MembershipMod;\n+import org.apache.syncope.common.lib.mod.StatusMod;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n+import org.apache.syncope.common.lib.to.WorkflowFormTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.common.rest.api.Preference;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.UserSelfService;\n+import org.apache.syncope.common.rest.api.service.UserService;\n+import org.junit.Assume;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class UserSelfITCase extends AbstractITCase {\n+\n+    @Test\n+    public void selfRegistrationAllowed() {\n+        assertTrue(clientFactory.createAnonymous().isSelfRegAllowed());\n+    }\n+\n+    @Test\n+    public void create() {\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n+\n+        // 1. self-registration as admin: failure\n+        try {\n+            userSelfService.create(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"), true);\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+\n+        // 2. self-registration as anonymous: works\n+        SyncopeClient anonClient = clientFactory.createAnonymous();\n+        UserTO self = anonClient.getService(UserSelfService.class).\n+                create(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"), true).\n+                readEntity(UserTO.class);\n+        assertNotNull(self);\n+        assertEquals(\"createApproval\", self.getStatus());\n+    }\n+\n+    @Test\n+    public void createAndApprove() {\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n+\n+        // self-create user with membership: goes 'createApproval' with resources and membership but no propagation\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\");\n+        MembershipTO membership = new MembershipTO();\n+        membership.setRoleId(3L);\n+        userTO.getMemberships().add(membership);\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+\n+        SyncopeClient anonClient = clientFactory.createAnonymous();\n+        userTO = anonClient.getService(UserSelfService.class).\n+                create(userTO, true).\n+                readEntity(UserTO.class);\n+        assertNotNull(userTO);\n+        assertEquals(\"createApproval\", userTO.getStatus());\n+        assertFalse(userTO.getMemberships().isEmpty());\n+        assertFalse(userTO.getResources().isEmpty());\n+\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_TESTDB, SubjectType.USER, userTO.getKey());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+\n+        // now approve and verify that propagation has happened\n+        WorkflowFormTO form = userWorkflowService.getFormForUser(userTO.getKey());\n+        form = userWorkflowService.claimForm(form.getTaskId());\n+        Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n+        props.get(\"approve\").setValue(Boolean.TRUE.toString());\n+        form.getProperties().clear();\n+        form.getProperties().addAll(props.values());\n+        userTO = userWorkflowService.submitForm(form);\n+        assertNotNull(userTO);\n+        assertEquals(\"active\", userTO.getStatus());\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_TESTDB, SubjectType.USER, userTO.getKey()));\n+    }\n+\n+    @Test\n+    public void read() {\n+        UserService userService2 = clientFactory.create(\"rossini\", ADMIN_PWD).getService(UserService.class);\n+\n+        try {\n+            userService2.read(1L);\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+\n+        UserSelfService userSelfService2 = clientFactory.create(\"rossini\", ADMIN_PWD).getService(UserSelfService.class);\n+        UserTO userTO = userSelfService2.read();\n+        assertEquals(\"rossini\", userTO.getUsername());\n+    }\n+\n+    @Test\n+    public void updateWithoutApproval() {\n+        // 1. create user as admin\n+        UserTO created = createUser(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"));\n+        assertNotNull(created);\n+        assertFalse(created.getUsername().endsWith(\"XX\"));\n+\n+        // 2. self-update (username) - works\n+        UserMod userMod = new UserMod();\n+        userMod.setUsername(created.getUsername() + \"XX\");\n+\n+        SyncopeClient authClient = clientFactory.create(created.getUsername(), \"password123\");\n+        UserTO updated = authClient.getService(UserSelfService.class).update(created.getKey(), userMod).\n+                readEntity(UserTO.class);\n+        assertNotNull(updated);\n+        assertEquals(ActivitiDetector.isActivitiEnabledForUsers() ? \"active\" : \"created\", updated.getStatus());\n+        assertTrue(updated.getUsername().endsWith(\"XX\"));\n+    }\n+\n+    @Test\n+    public void updateWitApproval() {\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n+\n+        // 1. create user as admin\n+        UserTO created = createUser(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"));\n+        assertNotNull(created);\n+        assertFalse(created.getUsername().endsWith(\"XX\"));\n+\n+        // 2. self-update (username + memberships + resource) - works but needs approval\n+        MembershipMod membershipMod = new MembershipMod();\n+        membershipMod.setRole(7L);\n+        AttrMod testAttrMod = new AttrMod();\n+        testAttrMod.setSchema(\"testAttribute\");\n+        testAttrMod.getValuesToBeAdded().add(\"a value\");\n+        membershipMod.getPlainAttrsToUpdate().add(testAttrMod);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setUsername(created.getUsername() + \"XX\");\n+        userMod.getMembershipsToAdd().add(membershipMod);\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_TESTDB);\n+        userMod.setPassword(\"newPassword123\");\n+        StatusMod statusMod = new StatusMod();\n+        statusMod.setOnSyncope(false);\n+        statusMod.getResourceNames().add(RESOURCE_NAME_TESTDB);\n+        userMod.setPwdPropRequest(statusMod);\n+\n+        SyncopeClient authClient = clientFactory.create(created.getUsername(), \"password123\");\n+        UserTO updated = authClient.getService(UserSelfService.class).update(created.getKey(), userMod).\n+                readEntity(UserTO.class);\n+        assertNotNull(updated);\n+        assertEquals(\"updateApproval\", updated.getStatus());\n+        assertFalse(updated.getUsername().endsWith(\"XX\"));\n+        assertTrue(updated.getMemberships().isEmpty());\n+\n+        // no propagation happened\n+        assertTrue(updated.getResources().isEmpty());\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_TESTDB, SubjectType.USER, updated.getKey());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+\n+        // 3. approve self-update as admin\n+        WorkflowFormTO form = userWorkflowService.getFormForUser(updated.getKey());\n+        form = userWorkflowService.claimForm(form.getTaskId());\n+        Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n+        props.get(\"approve\").setValue(Boolean.TRUE.toString());\n+        form.getProperties().clear();\n+        form.getProperties().addAll(props.values());\n+        updated = userWorkflowService.submitForm(form);\n+        assertNotNull(updated);\n+        assertEquals(\"active\", updated.getStatus());\n+        assertTrue(updated.getUsername().endsWith(\"XX\"));\n+        assertEquals(1, updated.getMemberships().size());\n+\n+        // check that propagation also happened\n+        assertTrue(updated.getResources().contains(RESOURCE_NAME_TESTDB));\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_TESTDB, SubjectType.USER, updated.getKey()));\n+    }\n+\n+    @Test\n+    public void delete() {\n+        UserTO created = createUser(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"));\n+        assertNotNull(created);\n+\n+        SyncopeClient authClient = clientFactory.create(created.getUsername(), \"password123\");\n+        UserTO deleted = authClient.getService(UserSelfService.class).delete().readEntity(UserTO.class);\n+        assertNotNull(deleted);\n+        assertEquals(ActivitiDetector.isActivitiEnabledForUsers() ? \"deleteApproval\" : null, deleted.getStatus());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE373() {\n+        UserTO userTO = userSelfService.read();\n+        assertEquals(ADMIN_UNAME, userTO.getUsername());\n+    }\n+\n+    @Test\n+    public void noContent() throws IOException {\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n+\n+        SyncopeClient anonClient = clientFactory.createAnonymous();\n+        UserSelfService noContentService = anonClient.prefer(UserSelfService.class, Preference.RETURN_NO_CONTENT);\n+\n+        UserTO user = UserITCase.getUniqueSampleTO(\"nocontent-anonymous@syncope.apache.org\");\n+\n+        Response response = noContentService.create(user, true);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+        assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n+    }\n+\n+    @Test\n+    public void passwordReset() {\n+        // 1. create an user with security question and answer\n+        UserTO user = UserITCase.getUniqueSampleTO(\"pwdReset@syncope.apache.org\");\n+        user.setSecurityQuestion(1L);\n+        user.setSecurityAnswer(\"Rossi\");\n+        createUser(user);\n+\n+        // 2. verify that new user is able to authenticate\n+        SyncopeClient authClient = clientFactory.create(user.getUsername(), \"password123\");\n+        UserTO read = authClient.getService(UserSelfService.class).read();\n+        assertNotNull(read);\n+\n+        // 3. request password reset (as anonymous) providing the expected security answer\n+        SyncopeClient anonClient = clientFactory.createAnonymous();\n+        try {\n+            anonClient.getService(UserSelfService.class).requestPasswordReset(user.getUsername(), \"WRONG\");\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidSecurityAnswer, e.getType());\n+        }\n+        anonClient.getService(UserSelfService.class).requestPasswordReset(user.getUsername(), \"Rossi\");\n+\n+        // 4. get token (normally sent via e-mail, now reading as admin)\n+        String token = userService.read(read.getKey()).getToken();\n+        assertNotNull(token);\n+\n+        // 5. confirm password reset\n+        try {\n+            anonClient.getService(UserSelfService.class).confirmPasswordReset(\"WRONG TOKEN\", \"newPassword\");\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+            assertTrue(e.getMessage().contains(\"WRONG TOKEN\"));\n+        }\n+        anonClient.getService(UserSelfService.class).confirmPasswordReset(token, \"newPassword\");\n+\n+        // 6. verify that password was reset and token removed\n+        authClient = clientFactory.create(user.getUsername(), \"newPassword\");\n+        read = authClient.getService(UserSelfService.class).read();\n+        assertNotNull(read);\n+        assertNull(read.getToken());\n+    }\n+\n+    @Test\n+    public void passwordResetWithoutSecurityQuestion() {\n+        // 0. disable security question for password reset\n+        configurationService.set(\"passwordReset.securityQuestion\",\n+                attrTO(\"passwordReset.securityQuestion\", \"false\"));\n+\n+        // 1. create an user with security question and answer\n+        UserTO user = UserITCase.getUniqueSampleTO(\"pwdResetNoSecurityQuestion@syncope.apache.org\");\n+        createUser(user);\n+\n+        // 2. verify that new user is able to authenticate\n+        SyncopeClient authClient = clientFactory.create(user.getUsername(), \"password123\");\n+        UserTO read = authClient.getService(UserSelfService.class).read();\n+        assertNotNull(read);\n+\n+        // 3. request password reset (as anonymous) with no security answer\n+        SyncopeClient anonClient = clientFactory.createAnonymous();\n+        anonClient.getService(UserSelfService.class).requestPasswordReset(user.getUsername(), null);\n+\n+        // 4. get token (normally sent via e-mail, now reading as admin)\n+        String token = userService.read(read.getKey()).getToken();\n+        assertNotNull(token);\n+\n+        // 5. confirm password reset\n+        try {\n+            anonClient.getService(UserSelfService.class).confirmPasswordReset(\"WRONG TOKEN\", \"newPassword\");\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+            assertTrue(e.getMessage().contains(\"WRONG TOKEN\"));\n+        }\n+        anonClient.getService(UserSelfService.class).confirmPasswordReset(token, \"newPassword\");\n+\n+        // 6. verify that password was reset and token removed\n+        authClient = clientFactory.create(user.getUsername(), \"newPassword\");\n+        read = authClient.getService(UserSelfService.class).read();\n+        assertNotNull(read);\n+        assertNull(read.getToken());\n+\n+        // 7. re-enable security question for password reset\n+        configurationService.set(\"passwordReset.securityQuestion\",\n+                attrTO(\"passwordReset.securityQuestion\", \"true\"));\n+    }\n+\n+}"},{"sha":"9c81d0f7023bf5a535740d44f675b7bf915b2528","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/UserWorkflowITCase.java","status":"added","additions":299,"deletions":0,"changes":299,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FUserWorkflowITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FUserWorkflowITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FUserWorkflowITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,299 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n+import org.apache.syncope.common.lib.to.WorkflowFormTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.service.UserWorkflowService;\n+import org.junit.Assume;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class UserWorkflowITCase extends AbstractITCase {\n+\n+    @Test\n+    public void createWithReject() {\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n+\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"createWithReject@syncope.apache.org\");\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+\n+        // User with role 9 are defined in workflow as subject to approval\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(9L);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        // 1. create user with role 9\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertEquals(1, userTO.getMemberships().size());\n+        assertEquals(9, userTO.getMemberships().get(0).getRoleId());\n+        assertEquals(\"createApproval\", userTO.getStatus());\n+\n+        // 2. request if there is any pending task for user just created\n+        WorkflowFormTO form = userWorkflowService.getFormForUser(userTO.getKey());\n+        assertNotNull(form);\n+        assertNotNull(form.getUserKey());\n+        assertEquals(userTO.getKey(), form.getUserKey());\n+        assertNotNull(form.getTaskId());\n+        assertNull(form.getOwner());\n+\n+        // 3. claim task from rossini, not in role 7 (designated for approval in workflow definition): fail\n+        UserWorkflowService userService2 = clientFactory.create(\n+                \"rossini\", ADMIN_PWD).getService(UserWorkflowService.class);\n+\n+        try {\n+            userService2.claimForm(form.getTaskId());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.Workflow, e.getType());\n+        }\n+\n+        // 4. claim task from bellini, in role 7\n+        UserWorkflowService userService3 = clientFactory.create(\n+                \"bellini\", ADMIN_PWD).getService(UserWorkflowService.class);\n+\n+        form = userService3.claimForm(form.getTaskId());\n+        assertNotNull(form);\n+        assertNotNull(form.getTaskId());\n+        assertNotNull(form.getOwner());\n+\n+        // 5. reject user\n+        Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n+        props.get(\"approve\").setValue(Boolean.FALSE.toString());\n+        props.get(\"rejectReason\").setValue(\"I don't like him.\");\n+        form.getProperties().clear();\n+        form.getProperties().addAll(props.values());\n+        userTO = userService3.submitForm(form);\n+        assertNotNull(userTO);\n+        assertEquals(\"rejected\", userTO.getStatus());\n+\n+        // 6. check that rejected user was not propagated to external resource (SYNCOPE-364)\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        Exception exception = null;\n+        try {\n+            jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\",\n+                    new String[] { userTO.getUsername() }, Integer.class);\n+        } catch (EmptyResultDataAccessException e) {\n+            exception = e;\n+        }\n+        assertNotNull(exception);\n+    }\n+\n+    @Test\n+    public void createWithApproval() {\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n+\n+        // read forms *before* any operation\n+        List<WorkflowFormTO> forms = userWorkflowService.getForms();\n+        assertNotNull(forms);\n+        int preForms = forms.size();\n+\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"createWithApproval@syncope.apache.org\");\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+\n+        // User with role 9 are defined in workflow as subject to approval\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(9L);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        // 1. create user with role 9 (and verify that no propagation occurred)\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertEquals(1, userTO.getMemberships().size());\n+        assertEquals(9, userTO.getMemberships().get(0).getRoleId());\n+        assertEquals(\"createApproval\", userTO.getStatus());\n+        assertEquals(Collections.singleton(RESOURCE_NAME_TESTDB), userTO.getResources());\n+\n+        assertTrue(userTO.getPropagationStatusTOs().isEmpty());\n+\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+\n+        Exception exception = null;\n+        try {\n+            jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\",\n+                    new String[] { userTO.getUsername() }, Integer.class);\n+        } catch (EmptyResultDataAccessException e) {\n+            exception = e;\n+        }\n+        assertNotNull(exception);\n+\n+        // 2. request if there is any pending form for user just created\n+        forms = userWorkflowService.getForms();\n+        assertNotNull(forms);\n+        assertEquals(preForms + 1, forms.size());\n+\n+        WorkflowFormTO form = userWorkflowService.getFormForUser(userTO.getKey());\n+        assertNotNull(form);\n+        assertNotNull(form.getTaskId());\n+        assertNull(form.getOwner());\n+\n+        // 4. claim task (from admin)\n+        form = userWorkflowService.claimForm(form.getTaskId());\n+        assertNotNull(form);\n+        assertNotNull(form.getTaskId());\n+        assertNotNull(form.getOwner());\n+\n+        // 5. approve user (and verify that propagation occurred)\n+        Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n+        props.get(\"approve\").setValue(Boolean.TRUE.toString());\n+        form.getProperties().clear();\n+        form.getProperties().addAll(props.values());\n+        userTO = userWorkflowService.submitForm(form);\n+        assertNotNull(userTO);\n+        assertEquals(\"active\", userTO.getStatus());\n+        assertEquals(Collections.singleton(RESOURCE_NAME_TESTDB), userTO.getResources());\n+\n+        exception = null;\n+        try {\n+            final String username = jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class,\n+                    userTO.getUsername());\n+            assertEquals(userTO.getUsername(), username);\n+        } catch (EmptyResultDataAccessException e) {\n+            exception = e;\n+        }\n+        assertNull(exception);\n+\n+        // 6. update user\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.setPassword(\"anotherPassword123\");\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE15() {\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n+\n+        // read forms *before* any operation\n+        List<WorkflowFormTO> forms = userWorkflowService.getForms();\n+        assertNotNull(forms);\n+        int preForms = forms.size();\n+\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"issueSYNCOPE15@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getMemberships().clear();\n+\n+        // User with role 9 are defined in workflow as subject to approval\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(9L);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        // 1. create user with role 9 (and verify that no propagation occurred)\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertNotEquals(0L, userTO.getKey());\n+        assertNotNull(userTO.getCreationDate());\n+        assertNotNull(userTO.getCreator());\n+        assertNotNull(userTO.getLastChangeDate());\n+        assertNotNull(userTO.getLastModifier());\n+        assertEquals(userTO.getCreationDate(), userTO.getLastChangeDate());\n+\n+        // 2. request if there is any pending form for user just created\n+        forms = userWorkflowService.getForms();\n+        assertEquals(preForms + 1, forms.size());\n+\n+        WorkflowFormTO form = userWorkflowService.getFormForUser(userTO.getKey());\n+        assertNotNull(form);\n+\n+        // 3. first claim ny bellini ....\n+        UserWorkflowService userService3 = clientFactory.create(\n+                \"bellini\", ADMIN_PWD).getService(UserWorkflowService.class);\n+\n+        form = userService3.claimForm(form.getTaskId());\n+        assertNotNull(form);\n+        assertNotNull(form.getTaskId());\n+        assertNotNull(form.getOwner());\n+\n+        // 4. second claim task by admin\n+        form = userWorkflowService.claimForm(form.getTaskId());\n+        assertNotNull(form);\n+\n+        // 5. approve user\n+        final Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n+        props.get(\"approve\").setValue(Boolean.TRUE.toString());\n+        form.getProperties().clear();\n+        form.getProperties().addAll(props.values());\n+\n+        // 6. submit approve\n+        userTO = userWorkflowService.submitForm(form);\n+        assertNotNull(userTO);\n+        assertEquals(preForms, userWorkflowService.getForms().size());\n+        assertNull(userWorkflowService.getFormForUser(userTO.getKey()));\n+\n+        // 7. search approval into the history as well\n+        forms = userWorkflowService.getFormsByName(userTO.getKey(), \"Create approval\");\n+        assertFalse(forms.isEmpty());\n+\n+        int count = 0;\n+        for (WorkflowFormTO hform : forms) {\n+            if (form.getTaskId().equals(hform.getTaskId())) {\n+                count++;\n+\n+                assertEquals(\"createApproval\", hform.getKey());\n+                assertNotNull(hform.getCreateTime());\n+                assertNotNull(hform.getDueDate());\n+                assertTrue(Boolean.parseBoolean(hform.getPropertyMap().get(\"approve\").getValue()));\n+                assertNull(hform.getPropertyMap().get(\"rejectReason\").getValue());\n+            }\n+        }\n+        assertEquals(1, count);\n+\n+        userService.delete(userTO.getKey());\n+\n+        try {\n+            userService.read(userTO.getKey());\n+            fail();\n+        } catch (Exception ignore) {\n+            assertNotNull(ignore);\n+        }\n+\n+        try {\n+            userWorkflowService.getFormsByName(userTO.getKey(), \"Create approval\");\n+            fail();\n+        } catch (Exception ignore) {\n+            assertNotNull(ignore);\n+        }\n+    }\n+\n+}"},{"sha":"1dc6f203a1eac5c1fba4f41bb56aeade74fa3dad","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/VirAttrITCase.java","status":"added","additions":872,"deletions":0,"changes":872,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FVirAttrITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,872 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.mod.AttrMod;\n+import org.apache.syncope.common.lib.mod.MembershipMod;\n+import org.apache.syncope.common.lib.mod.StatusMod;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.common.rest.api.service.ResourceService;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class VirAttrITCase extends AbstractITCase {\n+\n+    @Test\n+    public void issueSYNCOPE16() {\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"issue16@apache.org\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(8L);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        // 1. create user\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+\n+        // 2. check for virtual attribute value\n+        actual = userService.read(actual.getKey());\n+        assertNotNull(actual);\n+        assertEquals(\"virtualvalue\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(actual.getKey());\n+        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n+        userMod.getVirAttrsToUpdate().add(attrMod(\"virtualdata\", \"virtualupdated\"));\n+\n+        // 3. update virtual attribute\n+        actual = updateUser(userMod);\n+        assertNotNull(actual);\n+\n+        // 4. check for virtual attribute value\n+        actual = userService.read(actual.getKey());\n+        assertNotNull(actual);\n+        assertEquals(\"virtualupdated\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE260() {\n+        // ----------------------------------\n+        // create user and check virtual attribute value propagation\n+        // ----------------------------------\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"260@a.com\");\n+        userTO.getResources().add(RESOURCE_NAME_WS2);\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertEquals(RESOURCE_NAME_WS2, userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n+\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_WS2, SubjectType.USER, userTO.getKey());\n+        assertNotNull(connObjectTO);\n+        assertEquals(\"virtualvalue\", connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().get(0));\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // update user virtual attribute and check virtual attribute value update propagation\n+        // ----------------------------------\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+\n+        AttrMod attrMod = new AttrMod();\n+        attrMod.setSchema(\"virtualdata\");\n+        attrMod.getValuesToBeRemoved().add(\"virtualvalue\");\n+        attrMod.getValuesToBeAdded().add(\"virtualvalue2\");\n+\n+        userMod.getVirAttrsToUpdate().add(attrMod);\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertEquals(\"ws-target-resource-2\", userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n+\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_WS2, SubjectType.USER, userTO.getKey());\n+        assertNotNull(connObjectTO);\n+        assertEquals(\"virtualvalue2\", connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().get(0));\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // suspend/reactivate user and check virtual attribute value (unchanged)\n+        // ----------------------------------\n+        StatusMod statusMod = new StatusMod();\n+        statusMod.setType(StatusMod.ModType.SUSPEND);\n+        userTO = userService.status(userTO.getKey(), statusMod).readEntity(UserTO.class);\n+        assertEquals(\"suspended\", userTO.getStatus());\n+\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_WS2, SubjectType.USER, userTO.getKey());\n+        assertNotNull(connObjectTO);\n+        assertFalse(connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().isEmpty());\n+        assertEquals(\"virtualvalue2\", connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().get(0));\n+\n+        statusMod = new StatusMod();\n+        statusMod.setType(StatusMod.ModType.REACTIVATE);\n+        userTO = userService.status(userTO.getKey(), statusMod).readEntity(UserTO.class);\n+        assertEquals(\"active\", userTO.getStatus());\n+\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_WS2, SubjectType.USER, userTO.getKey());\n+        assertNotNull(connObjectTO);\n+        assertFalse(connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().isEmpty());\n+        assertEquals(\"virtualvalue2\", connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().get(0));\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // update user attribute and check virtual attribute value (unchanged)\n+        // ----------------------------------\n+        userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+\n+        attrMod = new AttrMod();\n+        attrMod.setSchema(\"surname\");\n+        attrMod.getValuesToBeRemoved().add(\"Surname\");\n+        attrMod.getValuesToBeAdded().add(\"Surname2\");\n+\n+        userMod.getPlainAttrsToUpdate().add(attrMod);\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertEquals(RESOURCE_NAME_WS2, userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n+\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_WS2, SubjectType.USER, userTO.getKey());\n+        assertNotNull(connObjectTO);\n+        assertEquals(\"Surname2\", connObjectTO.getPlainAttrMap().get(\"SURNAME\").getValues().get(0));\n+\n+        // attribute \"name\" mapped on virtual attribute \"virtualdata\" shouldn't be changed\n+        assertFalse(connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().isEmpty());\n+        assertEquals(\"virtualvalue2\", connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().get(0));\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // remove user virtual attribute and check virtual attribute value (reset)\n+        // ----------------------------------\n+        userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+        assertTrue(userTO.getVirAttrs().isEmpty());\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertEquals(RESOURCE_NAME_WS2, userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n+\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_WS2, SubjectType.USER, userTO.getKey());\n+        assertNotNull(connObjectTO);\n+\n+        // attribute \"name\" mapped on virtual attribute \"virtualdata\" should be reset\n+        assertTrue(connObjectTO.getPlainAttrMap().get(\"NAME\").getValues() == null\n+                || connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().isEmpty());\n+        // ----------------------------------\n+    }\n+\n+    @Test\n+    public void virAttrCache() {\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"virattrcache@apache.org\");\n+        userTO.getVirAttrs().clear();\n+\n+        AttrTO virAttrTO = new AttrTO();\n+        virAttrTO.setSchema(\"virtualdata\");\n+        virAttrTO.getValues().add(\"virattrcache\");\n+        userTO.getVirAttrs().add(virAttrTO);\n+\n+        userTO.getMemberships().clear();\n+        userTO.getResources().clear();\n+        userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n+\n+        // 1. create user\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+\n+        // 2. check for virtual attribute value\n+        actual = userService.read(actual.getKey());\n+        assertEquals(\"virattrcache\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+\n+        // 3. update virtual attribute directly\n+        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+\n+        String value = jdbcTemplate.queryForObject(\n+                \"SELECT USERNAME FROM testsync WHERE ID=?\", String.class, actual.getKey());\n+        assertEquals(\"virattrcache\", value);\n+\n+        jdbcTemplate.update(\"UPDATE testsync set USERNAME='virattrcache2' WHERE ID=?\", actual.getKey());\n+\n+        value = jdbcTemplate.queryForObject(\n+                \"SELECT USERNAME FROM testsync WHERE ID=?\", String.class, actual.getKey());\n+        assertEquals(\"virattrcache2\", value);\n+\n+        // 4. check for cached attribute value\n+        actual = userService.read(actual.getKey());\n+        assertEquals(\"virattrcache\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(actual.getKey());\n+\n+        AttrMod virtualdata = new AttrMod();\n+        virtualdata.setSchema(\"virtualdata\");\n+        virtualdata.getValuesToBeAdded().add(\"virtualupdated\");\n+\n+        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n+        userMod.getVirAttrsToUpdate().add(virtualdata);\n+\n+        // 5. update virtual attribute\n+        actual = updateUser(userMod);\n+        assertNotNull(actual);\n+\n+        // 6. check for virtual attribute value\n+        actual = userService.read(actual.getKey());\n+        assertNotNull(actual);\n+        assertEquals(\"virtualupdated\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE397() {\n+        ResourceTO csv = resourceService.read(RESOURCE_NAME_CSV);\n+        final MappingTO origMapping = SerializationUtils.clone(csv.getUmapping());\n+        try {\n+            // change mapping of resource-csv\n+            assertNotNull(origMapping);\n+            for (MappingItemTO item : csv.getUmapping().getItems()) {\n+                if (\"email\".equals(item.getIntAttrName())) {\n+                    // unset internal attribute mail and set virtual attribute virtualdata as mapped to external email\n+                    item.setIntMappingType(IntMappingType.UserVirtualSchema);\n+                    item.setIntAttrName(\"virtualdata\");\n+                    item.setPurpose(MappingPurpose.BOTH);\n+                    item.setExtAttrName(\"email\");\n+                }\n+            }\n+\n+            resourceService.update(csv.getKey(), csv);\n+            csv = resourceService.read(RESOURCE_NAME_CSV);\n+            assertNotNull(csv.getUmapping());\n+\n+            boolean found = false;\n+            for (MappingItemTO item : csv.getUmapping().getItems()) {\n+                if (\"email\".equals(item.getExtAttrName()) && \"virtualdata\".equals(item.getIntAttrName())) {\n+                    found = true;\n+                }\n+            }\n+\n+            assertTrue(found);\n+\n+            // create a new user\n+            UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope397@syncope.apache.org\");\n+            userTO.getResources().clear();\n+            userTO.getMemberships().clear();\n+            userTO.getDerAttrs().clear();\n+            userTO.getVirAttrs().clear();\n+\n+            userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+            userTO.getDerAttrs().add(attrTO(\"cn\", null));\n+            userTO.getVirAttrs().add(attrTO(\"virtualdata\", \"test@testone.org\"));\n+            // assign resource-csv to user\n+            userTO.getResources().add(RESOURCE_NAME_CSV);\n+            // save user\n+            UserTO created = createUser(userTO);\n+            // make std controls about user\n+            assertNotNull(created);\n+            assertTrue(RESOURCE_NAME_CSV.equals(created.getResources().iterator().next()));\n+            // update user\n+            UserTO toBeUpdated = userService.read(created.getKey());\n+            UserMod userMod = new UserMod();\n+            userMod.setKey(toBeUpdated.getKey());\n+            userMod.setPassword(\"password2\");\n+            // assign new resource to user\n+            userMod.getResourcesToAdd().add(RESOURCE_NAME_WS2);\n+            //modify virtual attribute\n+            userMod.getVirAttrsToRemove().add(\"virtualdata\");\n+            userMod.getVirAttrsToUpdate().add(attrMod(\"virtualdata\", \"test@testoneone.com\"));\n+\n+            // check Syncope change password\n+            StatusMod pwdPropRequest = new StatusMod();\n+            pwdPropRequest.setOnSyncope(true);\n+            pwdPropRequest.getResourceNames().add(RESOURCE_NAME_WS2);\n+            userMod.setPwdPropRequest(pwdPropRequest);\n+\n+            toBeUpdated = updateUser(userMod);\n+            assertNotNull(toBeUpdated);\n+            assertEquals(\"test@testoneone.com\", toBeUpdated.getVirAttrs().get(0).getValues().get(0));\n+            // check if propagates correctly with assertEquals on size of tasks list\n+            assertEquals(2, toBeUpdated.getPropagationStatusTOs().size());\n+        } finally {\n+            // restore mapping of resource-csv\n+            csv.setUmapping(origMapping);\n+            resourceService.update(csv.getKey(), csv);\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE442() {\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope442@apache.org\");\n+        userTO.getVirAttrs().clear();\n+\n+        AttrTO virAttrTO = new AttrTO();\n+        virAttrTO.setSchema(\"virtualdata\");\n+        virAttrTO.getValues().add(\"virattrcache\");\n+        userTO.getVirAttrs().add(virAttrTO);\n+\n+        userTO.getMemberships().clear();\n+        userTO.getResources().clear();\n+        userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n+\n+        // 1. create user\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+\n+        // 2. check for virtual attribute value\n+        actual = userService.read(actual.getKey());\n+        assertEquals(\"virattrcache\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+\n+        // ----------------------------------------\n+        // 3. force cache expiring without any modification\n+        // ----------------------------------------\n+        String jdbcURL = null;\n+        ConnInstanceTO connInstanceBean = connectorService.readByResource(RESOURCE_NAME_DBVIRATTR);\n+        for (ConnConfProperty prop : connInstanceBean.getConfiguration()) {\n+            if (\"jdbcUrlTemplate\".equals(prop.getSchema().getName())) {\n+                jdbcURL = prop.getValues().iterator().next().toString();\n+                prop.getValues().clear();\n+                prop.getValues().add(\"jdbc:h2:tcp://localhost:9092/xxx\");\n+            }\n+        }\n+\n+        connectorService.update(connInstanceBean.getKey(), connInstanceBean);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(actual.getKey());\n+\n+        AttrMod virtualdata = new AttrMod();\n+        virtualdata.setSchema(\"virtualdata\");\n+        virtualdata.getValuesToBeAdded().add(\"virtualupdated\");\n+\n+        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n+        userMod.getVirAttrsToUpdate().add(virtualdata);\n+\n+        actual = updateUser(userMod);\n+        assertNotNull(actual);\n+        // ----------------------------------------\n+\n+        // ----------------------------------------\n+        // 4. update virtual attribute\n+        // ----------------------------------------\n+        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+\n+        String value = jdbcTemplate.queryForObject(\n+                \"SELECT USERNAME FROM testsync WHERE ID=?\", String.class, actual.getKey());\n+        assertEquals(\"virattrcache\", value);\n+\n+        jdbcTemplate.update(\"UPDATE testsync set USERNAME='virattrcache2' WHERE ID=?\", actual.getKey());\n+\n+        value = jdbcTemplate.queryForObject(\n+                \"SELECT USERNAME FROM testsync WHERE ID=?\", String.class, actual.getKey());\n+        assertEquals(\"virattrcache2\", value);\n+        // ----------------------------------------\n+\n+        actual = userService.read(actual.getKey());\n+        assertEquals(\"virattrcache\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+\n+        // ----------------------------------------\n+        // 5. restore connector\n+        // ----------------------------------------\n+        for (ConnConfProperty prop : connInstanceBean.getConfiguration()) {\n+            if (\"jdbcUrlTemplate\".equals(prop.getSchema().getName())) {\n+                prop.getValues().clear();\n+                prop.getValues().add(jdbcURL);\n+            }\n+        }\n+\n+        connectorService.update(connInstanceBean.getKey(), connInstanceBean);\n+        // ----------------------------------------\n+\n+        actual = userService.read(actual.getKey());\n+        assertEquals(\"virattrcache2\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE436() {\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope436@syncope.apache.org\");\n+        userTO.getMemberships().clear();\n+        userTO.getResources().clear();\n+        userTO.getResources().add(RESOURCE_NAME_LDAP);\n+        userTO.getVirAttrs().add(attrTO(\"virtualReadOnly\", \"readOnly\"));\n+        userTO = createUser(userTO);\n+        //Finding no values because the virtual attribute is readonly \n+        assertTrue(userTO.getVirAttrMap().get(\"virtualReadOnly\").getValues().isEmpty());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE453() {\n+        final String resourceName = \"issueSYNCOPE453-Res-\" + getUUIDString();\n+        final String roleName = \"issueSYNCOPE453-Role-\" + getUUIDString();\n+\n+        // -------------------------------------------\n+        // Create a resource ad-hoc\n+        // -------------------------------------------\n+        final ResourceTO resourceTO = new ResourceTO();\n+\n+        resourceTO.setKey(resourceName);\n+        resourceTO.setConnectorId(107L);\n+\n+        MappingTO mapping = new MappingTO();\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setIntAttrName(\"aLong\");\n+        item.setIntMappingType(IntMappingType.UserPlainSchema);\n+        item.setExtAttrName(roleName);\n+        item.setPurpose(MappingPurpose.PROPAGATION);\n+        item.setAccountid(true);\n+        mapping.setAccountIdItem(item);\n+\n+        item = new MappingItemTO();\n+        item.setExtAttrName(\"USERNAME\");\n+        item.setIntAttrName(\"username\");\n+        item.setIntMappingType(IntMappingType.Username);\n+        item.setPurpose(MappingPurpose.PROPAGATION);\n+        mapping.getItems().add(item);\n+\n+        item = new MappingItemTO();\n+        item.setExtAttrName(\"EMAIL\");\n+        item.setIntAttrName(\"rvirtualdata\");\n+        item.setIntMappingType(IntMappingType.RoleVirtualSchema);\n+        item.setPurpose(MappingPurpose.PROPAGATION);\n+        mapping.getItems().add(item);\n+\n+        resourceTO.setUmapping(mapping);\n+        assertNotNull(getObject(\n+                resourceService.create(resourceTO).getLocation(), ResourceService.class, ResourceTO.class));\n+        // -------------------------------------------\n+\n+        // -------------------------------------------\n+        // Create a role ad-hoc\n+        // -------------------------------------------\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(roleName);\n+        roleTO.setParent(8L);\n+        roleTO.getRVirAttrTemplates().add(\"rvirtualdata\");\n+        roleTO.getVirAttrs().add(attrTO(\"rvirtualdata\", \"ml@role.it\"));\n+        roleTO.getResources().add(RESOURCE_NAME_LDAP);\n+        roleTO = createRole(roleTO);\n+        assertEquals(1, roleTO.getVirAttrs().size());\n+        assertEquals(\"ml@role.it\", roleTO.getVirAttrs().get(0).getValues().get(0));\n+        // -------------------------------------------\n+\n+        // -------------------------------------------\n+        // Create new user\n+        // -------------------------------------------\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope453@syncope.apache.org\");\n+        userTO.getPlainAttrs().add(attrTO(\"aLong\", \"123\"));\n+        userTO.getResources().clear();\n+        userTO.getResources().add(resourceName);\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getMemberships().clear();\n+\n+        final MembershipTO membership = new MembershipTO();\n+        membership.setRoleId(roleTO.getKey());\n+        membership.getVirAttrs().add(attrTO(\"mvirtualdata\", \"mvirtualvalue\"));\n+        userTO.getMemberships().add(membership);\n+\n+        userTO = createUser(userTO);\n+        assertEquals(2, userTO.getPropagationStatusTOs().size());\n+        assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n+        assertTrue(userTO.getPropagationStatusTOs().get(1).getStatus().isSuccessful());\n+\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+\n+        final Map<String, Object> actuals = jdbcTemplate.queryForMap(\n+                \"SELECT id, surname, email FROM testsync WHERE id=?\",\n+                new Object[] { Integer.parseInt(userTO.getPlainAttrMap().get(\"aLong\").getValues().get(0)) });\n+\n+        assertEquals(userTO.getPlainAttrMap().get(\"aLong\").getValues().get(0), actuals.get(\"id\").toString());\n+        assertEquals(\"ml@role.it\", actuals.get(\"email\"));\n+        // -------------------------------------------\n+\n+        // -------------------------------------------\n+        // Delete resource and role ad-hoc\n+        // -------------------------------------------\n+        resourceService.delete(resourceName);\n+        roleService.delete(roleTO.getKey());\n+        // -------------------------------------------\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE459() {\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope459@apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getVirAttrs().clear();\n+\n+        final AttrTO virtualReadOnly = attrTO(\"virtualReadOnly\", \"\");\n+        virtualReadOnly.getValues().clear();\n+\n+        userTO.getVirAttrs().add(virtualReadOnly);\n+\n+        userTO = createUser(userTO);\n+\n+        assertNotNull(userTO.getVirAttrMap().get(\"virtualReadOnly\"));\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+\n+        AttrMod virtualdata = new AttrMod();\n+        virtualdata.setSchema(\"virtualdata\");\n+\n+        userMod.getVirAttrsToUpdate().add(virtualdata);\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO.getVirAttrMap().get(\"virtualdata\"));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE458() {\n+        // -------------------------------------------\n+        // Create a role ad-hoc\n+        // -------------------------------------------\n+        final String roleName = \"issueSYNCOPE458-Role-\" + getUUIDString();\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(roleName);\n+        roleTO.setParent(2L);\n+        roleTO.setInheritTemplates(true);\n+        roleTO = createRole(roleTO);\n+        // -------------------------------------------\n+\n+        // -------------------------------------------\n+        // Update resource-db-virattr mapping adding new membership virtual schema mapping\n+        // -------------------------------------------\n+        ResourceTO resourceDBVirAttr = resourceService.read(RESOURCE_NAME_DBVIRATTR);\n+        assertNotNull(resourceDBVirAttr);\n+\n+        final MappingTO resourceUMapping = resourceDBVirAttr.getUmapping();\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setIntAttrName(\"mvirtualdata\");\n+        item.setIntMappingType(IntMappingType.MembershipVirtualSchema);\n+        item.setExtAttrName(\"EMAIL\");\n+        item.setPurpose(MappingPurpose.BOTH);\n+\n+        resourceUMapping.addItem(item);\n+\n+        resourceDBVirAttr.setUmapping(resourceUMapping);\n+\n+        resourceService.update(RESOURCE_NAME_DBVIRATTR, resourceDBVirAttr);\n+        // -------------------------------------------\n+\n+        // -------------------------------------------\n+        // Create new user\n+        // -------------------------------------------\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope458@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getMemberships().clear();\n+\n+        // add membership, with virtual attribute populated, to user\n+        MembershipTO membership = new MembershipTO();\n+        membership.setRoleId(roleTO.getKey());\n+        membership.getVirAttrs().add(attrTO(\"mvirtualdata\", \"syncope458@syncope.apache.org\"));\n+        userTO.getMemberships().add(membership);\n+\n+        //propagate user\n+        userTO = createUser(userTO);\n+        assertEquals(1, userTO.getPropagationStatusTOs().size());\n+        assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n+       // -------------------------------------------\n+\n+        // 1. check if membership has virtual attribute populated\n+        assertNotNull(userTO.getMemberships().get(0).getVirAttrMap().get(\"mvirtualdata\"));\n+        assertEquals(\"syncope458@syncope.apache.org\",\n+                userTO.getMemberships().get(0).getVirAttrMap().get(\"mvirtualdata\").getValues().get(0));\n+        // -------------------------------------------\n+\n+        // 2. update membership virtual attribute\n+        MembershipMod membershipMod = new MembershipMod();\n+        membershipMod.setRole(roleTO.getKey());\n+        membershipMod.getVirAttrsToUpdate().add(attrMod(\"mvirtualdata\", \"syncope458_NEW@syncope.apache.org\"));\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.getMembershipsToAdd().add(membershipMod);\n+        userMod.getMembershipsToRemove().add(userTO.getMemberships().iterator().next().getKey());\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+        // 3. check again after update if membership has virtual attribute populated with new value\n+        assertNotNull(userTO.getMemberships().get(0).getVirAttrMap().get(\"mvirtualdata\"));\n+        assertEquals(\"syncope458_NEW@syncope.apache.org\", userTO.getMemberships().get(0).getVirAttrMap().get(\n+                \"mvirtualdata\").getValues().get(0));\n+\n+        // ----------------------------------------\n+        // force cache expiring without any modification\n+        // ----------------------------------------\n+        String jdbcURL = null;\n+        ConnInstanceTO connInstanceBean = connectorService.readByResource(RESOURCE_NAME_DBVIRATTR);\n+        for (ConnConfProperty prop : connInstanceBean.getConfiguration()) {\n+            if (\"jdbcUrlTemplate\".equals(prop.getSchema().getName())) {\n+                jdbcURL = prop.getValues().iterator().next().toString();\n+                prop.getValues().clear();\n+                prop.getValues().add(\"jdbc:h2:tcp://localhost:9092/xxx\");\n+            }\n+        }\n+\n+        connectorService.update(connInstanceBean.getKey(), connInstanceBean);\n+\n+        membershipMod = new MembershipMod();\n+        membershipMod.setRole(roleTO.getKey());\n+        membershipMod.getVirAttrsToUpdate().add(attrMod(\"mvirtualdata\", \"syncope458_updated@syncope.apache.org\"));\n+\n+        userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.getMembershipsToAdd().add(membershipMod);\n+        userMod.getMembershipsToRemove().add(userTO.getMemberships().iterator().next().getKey());\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+        // ----------------------------------\n+\n+        // change attribute value directly on resource\n+        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+\n+        String value = jdbcTemplate.queryForObject(\n+                \"SELECT EMAIL FROM testsync WHERE ID=?\", String.class, userTO.getKey());\n+        assertEquals(\"syncope458_NEW@syncope.apache.org\", value);\n+\n+        jdbcTemplate.update(\"UPDATE testsync set EMAIL='syncope458_NEW_TWO@syncope.apache.org' WHERE ID=?\", userTO.\n+                getKey());\n+\n+        value = jdbcTemplate.queryForObject(\"SELECT EMAIL FROM testsync WHERE ID=?\", String.class, userTO.getKey());\n+        assertEquals(\"syncope458_NEW_TWO@syncope.apache.org\", value);\n+        // ----------------------------------------\n+\n+        // ----------------------------------------\n+        // restore connector\n+        // ----------------------------------------\n+        for (ConnConfProperty prop : connInstanceBean.getConfiguration()) {\n+            if (\"jdbcUrlTemplate\".equals(prop.getSchema().getName())) {\n+                prop.getValues().clear();\n+                prop.getValues().add(jdbcURL);\n+            }\n+        }\n+        connectorService.update(connInstanceBean.getKey(), connInstanceBean);\n+        // ----------------------------------------\n+\n+        userTO = userService.read(userTO.getKey());\n+        assertNotNull(userTO);\n+        // 4. check virtual attribute synchronization after direct update on resource\n+        assertEquals(\"syncope458_NEW_TWO@syncope.apache.org\", userTO.getMemberships().get(0).getVirAttrMap().get(\n+                \"mvirtualdata\").getValues().get(0));\n+\n+        // 5. remove membership virtual attribute\n+        membershipMod = new MembershipMod();\n+        membershipMod.setRole(roleTO.getKey());\n+        membershipMod.getVirAttrsToRemove().add(\"mvirtualdata\");\n+\n+        userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.getMembershipsToAdd().add(membershipMod);\n+        userMod.getMembershipsToRemove().add(userTO.getMemberships().iterator().next().getKey());\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+        // check again after update if membership hasn't any virtual attribute\n+        assertTrue(userTO.getMemberships().get(0).getVirAttrMap().isEmpty());\n+\n+        // -------------------------------------------\n+        // Delete role ad-hoc and restore resource mapping\n+        // -------------------------------------------\n+        roleService.delete(roleTO.getKey());\n+\n+        resourceUMapping.removeItem(item);\n+        resourceDBVirAttr.setUmapping(resourceUMapping);\n+        resourceService.update(RESOURCE_NAME_DBVIRATTR, resourceDBVirAttr);\n+        // -------------------------------------------\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE501() {\n+        // PHASE 1: update only user virtual attributes\n+\n+        // 1. create user and propagate him on resource-db-virattr\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope501@apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getVirAttrs().clear();\n+\n+        userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n+\n+        // virtualdata is mapped with username\n+        final AttrTO virtualData = attrTO(\"virtualdata\", \"syncope501@apache.org\");\n+        userTO.getVirAttrs().add(virtualData);\n+\n+        userTO = createUser(userTO);\n+\n+        assertNotNull(userTO.getVirAttrMap().get(\"virtualdata\"));\n+        assertEquals(\"syncope501@apache.org\", userTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+\n+        // 2. update virtual attribute\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+\n+        final StatusMod statusMod = new StatusMod();\n+        statusMod.getResourceNames().addAll(Collections.<String>emptySet());\n+        statusMod.setOnSyncope(false);\n+\n+        userMod.setPwdPropRequest(statusMod);\n+        // change virtual attribute value\n+        final AttrMod virtualDataMod = new AttrMod();\n+        virtualDataMod.setSchema(\"virtualdata\");\n+        virtualDataMod.getValuesToBeAdded().add(\"syncope501_updated@apache.org\");\n+        virtualDataMod.getValuesToBeRemoved().add(\"syncope501@apache.org\");\n+        userMod.getVirAttrsToUpdate().add(virtualDataMod);\n+        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+\n+        // 3. check that user virtual attribute has really been updated \n+        assertFalse(userTO.getVirAttrMap().get(\"virtualdata\").getValues().isEmpty());\n+        assertEquals(\"syncope501_updated@apache.org\", userTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+\n+        // ----------------------------------------------------------\n+        // PHASE 2: update only membership virtual attributes\n+        // -------------------------------------------\n+        // Update resource-db-virattr mapping adding new membership virtual schema mapping\n+        // -------------------------------------------\n+        ResourceTO resourceDBVirAttr = resourceService.read(RESOURCE_NAME_DBVIRATTR);\n+        assertNotNull(resourceDBVirAttr);\n+\n+        final MappingTO resourceUMapping = resourceDBVirAttr.getUmapping();\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setIntAttrName(\"mvirtualdata\");\n+        item.setIntMappingType(IntMappingType.MembershipVirtualSchema);\n+        item.setExtAttrName(\"EMAIL\");\n+        item.setPurpose(MappingPurpose.BOTH);\n+\n+        resourceUMapping.addItem(item);\n+\n+        resourceDBVirAttr.setUmapping(resourceUMapping);\n+\n+        resourceService.update(RESOURCE_NAME_DBVIRATTR, resourceDBVirAttr);\n+        // -------------------------------------------\n+\n+        // -------------------------------------------\n+        // Create a role ad-hoc\n+        // -------------------------------------------\n+        final String roleName = \"issueSYNCOPE501-Role-\" + getUUIDString();\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(roleName);\n+        roleTO.setParent(2L);\n+        roleTO.setInheritTemplates(true);\n+        roleTO = createRole(roleTO);\n+        // -------------------------------------------\n+\n+        // 1. add membership, with virtual attribute populated, to user\n+        MembershipMod membershipMod = new MembershipMod();\n+        membershipMod.setRole(roleTO.getKey());\n+        membershipMod.getVirAttrsToUpdate().add(attrMod(\"mvirtualdata\", \"syncope501membership@test.org\"));\n+\n+        userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.getMembershipsToAdd().add(membershipMod);\n+        userMod.setPwdPropRequest(statusMod);\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+        assertEquals(\"syncope501membership@test.org\",\n+                userTO.getMemberships().get(0).getVirAttrMap().get(\"mvirtualdata\").getValues().get(0));\n+\n+        // 2. update only membership virtual attribute and propagate user\n+        membershipMod = new MembershipMod();\n+        membershipMod.setRole(roleTO.getKey());\n+        membershipMod.getVirAttrsToUpdate().add(attrMod(\"mvirtualdata\",\n+                \"syncope501membership_updated@test.org\"));\n+        membershipMod.getVirAttrsToRemove().add(\"syncope501membership@test.org\");\n+\n+        userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.getMembershipsToAdd().add(membershipMod);\n+        userMod.getMembershipsToRemove().add(userTO.getMemberships().iterator().next().getKey());\n+        userMod.setPwdPropRequest(statusMod);\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+\n+        // 3. check if change has been propagated\n+        assertEquals(\"syncope501membership_updated@test.org\", userTO.getMemberships().get(0).getVirAttrMap().\n+                get(\"mvirtualdata\").getValues().get(0));\n+\n+        // 4. delete membership and check on resource attribute deletion\n+        userMod = new UserMod();\n+        userMod.setKey(userTO.getKey());\n+        userMod.getMembershipsToRemove().add(userTO.getMemberships().get(0).getKey());\n+        userMod.setPwdPropRequest(statusMod);\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+        assertTrue(userTO.getMemberships().isEmpty());\n+\n+        // read attribute value directly on resource\n+        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+\n+        final String emailValue = jdbcTemplate.queryForObject(\n+                \"SELECT EMAIL FROM testsync WHERE ID=?\", String.class, userTO.getKey());\n+        assertTrue(StringUtils.isBlank(emailValue));\n+        // ----------------------------------------\n+\n+        // -------------------------------------------\n+        // Delete role ad-hoc and restore resource mapping\n+        // -------------------------------------------\n+        roleService.delete(roleTO.getKey());\n+\n+        resourceUMapping.removeItem(item);\n+        resourceDBVirAttr.setUmapping(resourceUMapping);\n+        resourceService.update(RESOURCE_NAME_DBVIRATTR, resourceDBVirAttr);\n+        // -------------------------------------------\n+    }\n+}"},{"sha":"884b5cb2ab0a462bb56e52a071b7de2d16ae3fec","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/VirSchemaITCase.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FVirSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FVirSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FVirSchemaITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.VirSchemaTO;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class VirSchemaITCase extends AbstractITCase {\n+\n+    @Test\n+    public void list() {\n+        List<VirSchemaTO> vSchemas = schemaService.list(AttributableType.USER, SchemaType.VIRTUAL);\n+        assertFalse(vSchemas.isEmpty());\n+        for (VirSchemaTO vSchemaTO : vSchemas) {\n+            assertNotNull(vSchemaTO);\n+        }\n+    }\n+\n+    @Test\n+    public void read() {\n+        VirSchemaTO vSchemaTO = schemaService.read(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL,\n+                \"mvirtualdata\");\n+        assertNotNull(vSchemaTO);\n+    }\n+\n+    @Test\n+    public void create() {\n+        VirSchemaTO schema = new VirSchemaTO();\n+        schema.setKey(\"virtual\");\n+\n+        VirSchemaTO actual = createSchema(AttributableType.USER, SchemaType.VIRTUAL, schema);\n+        assertNotNull(actual);\n+\n+        actual = schemaService.read(AttributableType.USER, SchemaType.VIRTUAL, actual.getKey());\n+        assertNotNull(actual);\n+    }\n+\n+    @Test\n+    public void delete() {\n+        VirSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaType.VIRTUAL, \"rvirtualdata\");\n+        assertNotNull(schema);\n+\n+        schemaService.delete(AttributableType.ROLE, SchemaType.VIRTUAL, schema.getKey());\n+\n+        try {\n+            schemaService.read(AttributableType.ROLE, SchemaType.VIRTUAL, \"rvirtualdata\");\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE323() {\n+        VirSchemaTO actual = schemaService.read(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL, \"mvirtualdata\");\n+        assertNotNull(actual);\n+\n+        try {\n+            createSchema(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL, actual);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.CONFLICT, e.getType().getResponseStatus());\n+            assertEquals(ClientExceptionType.EntityExists, e.getType());\n+        }\n+\n+        actual.setKey(null);\n+        try {\n+            createSchema(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL, actual);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.BAD_REQUEST, e.getType().getResponseStatus());\n+            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE418() {\n+        VirSchemaTO schema = new VirSchemaTO();\n+        schema.setKey(\"http://schemas.examples.org/security/authorization/organizationUnit\");\n+\n+        try {\n+            createSchema(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL, schema);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidVirSchema, e.getType());\n+\n+            assertTrue(e.getElements().iterator().next().toString().contains(EntityViolationType.InvalidName.name()));\n+        }\n+    }\n+}"},{"sha":"161a23c18f6a84fe474ab6f8701bed85735b22ce","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/WorkflowITCase.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FWorkflowITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FWorkflowITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FWorkflowITCase.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.junit.Assume;\n+import org.junit.Test;\n+\n+public class WorkflowITCase extends AbstractITCase {\n+\n+    @Test\n+    public void isActivitiEnabled() {\n+        assertEquals(ActivitiDetector.isActivitiEnabledForUsers(),\n+                adminClient.isActivitiEnabledFor(SubjectType.USER));\n+        assertEquals(ActivitiDetector.isActivitiEnabledForRoles(),\n+                adminClient.isActivitiEnabledFor(SubjectType.ROLE));\n+    }\n+\n+    private void exportDefinition(final SubjectType type) throws IOException {\n+        Response response = workflowService.exportDefinition(type);\n+        assertTrue(response.getMediaType().toString().\n+                startsWith(clientFactory.getContentType().getMediaType().toString()));\n+        assertTrue(response.getEntity() instanceof InputStream);\n+        String definition = IOUtils.toString((InputStream) response.getEntity());\n+        assertNotNull(definition);\n+        assertFalse(definition.isEmpty());\n+    }\n+\n+    @Test\n+    public void exportUserDefinition() throws IOException {\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n+        exportDefinition(SubjectType.USER);\n+    }\n+\n+    @Test\n+    public void getRoleDefinition() throws IOException {\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForRoles());\n+        exportDefinition(SubjectType.ROLE);\n+    }\n+\n+    private void importDefinition(final SubjectType type) throws IOException {\n+        Response response = workflowService.exportDefinition(type);\n+        String definition = IOUtils.toString((InputStream) response.getEntity());\n+\n+        workflowService.importDefinition(type, definition);\n+    }\n+\n+    @Test\n+    public void updateUserDefinition() throws IOException {\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n+\n+        importDefinition(SubjectType.USER);\n+    }\n+\n+    @Test\n+    public void updateRoleDefinition() throws IOException {\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForRoles());\n+\n+        importDefinition(SubjectType.ROLE);\n+    }\n+}"},{"sha":"cf212bedcc19ff0d9add48aefe15a89fd604d67f","filename":"syncope620/fit/reference/src/test/resources/favicon.jpg","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fresources%2Ffavicon.jpg","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fresources%2Ffavicon.jpg","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fresources%2Ffavicon.jpg?ref=80589a1b9b384f07670afe4f1581c3ceb2794501"},{"sha":"f227366d18c705f489518d3a56c8a506f0bef61c","filename":"syncope620/fit/reference/src/test/resources/test.csv","status":"added","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fresources%2Ftest.csv","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fresources%2Ftest.csv","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fresources%2Ftest.csv?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,10 @@\n+test0,nome0,cognome0,test0@syncope.apache.org,password0,role1,membership1,true,false\n+test1,nome1,cognome1,test1@syncope.apache.org,password1,role1,membership1,false,false\n+test2,nome2,cognome2,test2@syncope.apache.org,notpermitted1,role1,membership1,true,false\n+test3,nome3,cognome3,test3@syncope.apache.org,password3,role1,membership1,true,false\n+test4,nome4,cognome4,test4@syncope.apache.org,password4,role1,membership1,true,false\n+test5,nome5,cognome5,test5@syncope.apache.org,password5,role1,membership1,true,false\n+test6,nome6,cognome6,test6@syncope.apache.org,password6,role1,membership1,true,false\n+test7,nome7,cognome7,test7@syncope.apache.org,password7,role1,membership1,true,false\n+test8,nome8,cognome8,test8@syncope.apache.org,password8,role1,membership1,true,false\n+test9,nome9,cognome9,test9@syncope.apache.org,password999,role1,membership1,true,false"},{"sha":"d89e067703708da344daac5c0f527fbd16661360","filename":"syncope620/fit/reference/src/test/resources/testJDBCContext.xml","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fresources%2FtestJDBCContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fresources%2FtestJDBCContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fresources%2FtestJDBCContext.xml?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\">\n+\n+  <bean id=\"testDataSource\"\n+        class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n+    <property name=\"driverClassName\" value=\"${testdb.driver}\"/>\n+    <property name=\"url\" value=\"${testdb.url}\"/>\n+    <property name=\"username\" value=\"${testdb.username}\"/>\n+    <property name=\"password\" value=\"${testdb.password}\"/>\n+  </bean>\n+\n+</beans>"},{"sha":"b7847413c63cef8c2a80841df3414c63d78b47f7","filename":"syncope620/pom.xml","status":"modified","additions":139,"deletions":5,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fpom.xml?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -315,8 +315,8 @@ under the License.\n \n     <connid.version>1.4.0.0</connid.version>\n     <connid.soap.version>1.3.0</connid.soap.version>\n-    <connid.db.table.version>2.2.0</connid.db.table.version>\n-    <connid.csvdir.version>0.8</connid.csvdir.version>\n+    <connid.db.table.version>2.2.1</connid.db.table.version>\n+    <connid.csvdir.version>0.8.1</connid.csvdir.version>\n     <connid.ldap.version>1.4.0</connid.ldap.version>\n     <connid.ad.version>1.2.1</connid.ad.version>\n \n@@ -382,7 +382,7 @@ under the License.\n     <cargo.log>${log.directory}/cargo.log</cargo.log>\n     <cargo.output>${log.directory}/cargo-output.log</cargo.output>\n \n-    <tomcat.version>8.0.15</tomcat.version>\n+    <tomcat.version>8.0.17</tomcat.version>\n \n     <anonymousUser>anonymous</anonymousUser>\n     <!-- static keys, only used for build: generated overlays will override during archetype:generate -->\n@@ -880,6 +880,12 @@ under the License.\n           </configuration>\n         </plugin>\n         \n+        <plugin>\n+          <groupId>org.apache.maven.plugins</groupId>\n+          <artifactId>maven-javadoc-plugin</artifactId>\n+          <version>2.10.1</version>          \n+        </plugin>\n+        \n         <plugin>\n           <groupId>org.apache.openjpa</groupId>\n           <artifactId>openjpa-maven-plugin</artifactId>\n@@ -928,10 +934,16 @@ under the License.\n           <version>2.6</version>\n         </plugin>\n         \n+        <plugin>\n+          <groupId>org.apache.maven.plugins</groupId>\n+          <artifactId>maven-antrun-plugin</artifactId>\n+          <version>1.8</version>\n+        </plugin>\n+        \n         <plugin>\n           <groupId>org.codehaus.cargo</groupId>\n           <artifactId>cargo-maven2-plugin</artifactId>\n-          <version>1.4.11</version>\n+          <version>1.4.12</version>\n           <configuration>\n             <container>\n               <containerId>tomcat8x</containerId>\n@@ -950,14 +962,32 @@ under the License.\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-surefire-plugin</artifactId>\n-          <version>2.18</version>\n+          <version>2.18.1</version>\n           <configuration>\n             <redirectTestOutputToFile>true</redirectTestOutputToFile>\n             <encoding>utf-8</encoding>\n             <runOrder>alphabetical</runOrder>\n             <argLine>-Xms512m -Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=512m</argLine>\n           </configuration>\n         </plugin>\n+        <plugin>\n+          <groupId>org.apache.maven.plugins</groupId>\n+          <artifactId>maven-failsafe-plugin</artifactId>\n+          <version>2.18.1</version>\n+          <configuration>\n+            <redirectTestOutputToFile>true</redirectTestOutputToFile>\n+            <encoding>utf-8</encoding>\n+            <runOrder>alphabetical</runOrder>\n+          </configuration>\n+          <executions>\n+            <execution>\n+              <goals>\n+                <goal>integration-test</goal>\n+                <goal>verify</goal>\n+              </goals>\n+            </execution>\n+          </executions>\n+        </plugin>\n         \n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n@@ -986,6 +1016,110 @@ under the License.\n     </plugins>\n   </build>\n \n+  <profiles>\n+\n+    <profile>\n+      <id>apache-release</id>\n+\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-deploy-plugin</artifactId>\n+            <version>2.8.2</version>\n+          </plugin>  \n+\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-gpg-plugin</artifactId>\n+            <version>1.6</version>\n+            <executions>\n+              <execution>\n+                <id>sign-artifacts</id>\n+                <phase>verify</phase>\n+                <goals>\n+                  <goal>sign</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+        </plugins>\n+      </build>\n+    </profile>\n+\n+    <profile>\n+      <id>site</id>\n+      <build>\n+        <defaultGoal>clean site-deploy</defaultGoal>\n+\n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-site-plugin</artifactId>\n+            <version>3.4</version>\n+            <configuration>\n+              <locales>en</locales>\n+              <generateProjectInfo>false</generateProjectInfo>\n+              <reportPlugins>\n+                <plugin>\n+                  <groupId>org.apache.maven.plugins</groupId>\n+                  <artifactId>maven-project-info-reports-plugin</artifactId>\n+                  <version>2.8</version>\n+                  <configuration>\n+                    <dependencyDetailsEnabled>false</dependencyDetailsEnabled>\n+                    <dependencyLocationsEnabled>false</dependencyLocationsEnabled>\n+                  </configuration>\n+                  <reports>\n+                    <report>index</report>\n+                    <report>mailing-list</report>\n+                    <report>project-team</report>\n+                    <report>issue-tracking</report>\n+                    <report>license</report>\n+                  </reports>\n+                </plugin>\n+                <plugin>\n+                  <groupId>org.apache.maven.plugins</groupId>\n+                  <artifactId>maven-javadoc-plugin</artifactId>\n+                  <version>2.10.1</version>\n+                  <configuration>\n+                    <destDir>apidocs/2.0</destDir>\n+                    <detectLinks>true</detectLinks>\n+                    <detectJavaApiLink>true</detectJavaApiLink>\n+                    <links>\n+                      <link>http://docs.oracle.com/javaee/7/api/</link>\n+                      <link>http://www.slf4j.org/api/</link>\n+                      <link>http://connid.tirasa.net/apidocs/1.4/</link>\n+                      <link>http://camel.apache.org/maven/current/camel-core/apidocs/</link>\n+                      <link>http://camel.apache.org/maven/current/camel-spring/apidocs/</link>\n+                      <link>http://ci.apache.org/projects/wicket/apidocs/7.x/</link>\n+                      <link>http://docs.spring.io/spring/docs/4.1.x/javadoc-api/</link>\n+                      <link>http://docs.spring.io/spring-security/site/docs/3.2.x/apidocs/</link>\n+                      <link>http://activiti.org/javadocs/</link>\n+                    </links>\n+                  </configuration>\n+                  <reports>\n+                    <report>aggregate</report>\n+                  </reports>\n+                </plugin>\n+              </reportPlugins>\n+            </configuration>\n+          </plugin>\n+        </plugins>\n+      </build>\n+    </profile>\n+\n+    <profile>\n+      <id>skipTests</id>\n+      <properties>\n+        <skipTests>true</skipTests>\n+      </properties>\n+      <build>\n+        <defaultGoal>clean install</defaultGoal>\n+      </build>\n+    </profile>\n+\n+  </profiles>\n+  \n   <modules>\n     <module>common</module>\n     <module>server</module>"},{"sha":"3c9a614483d7344e5ef01cf05299755112f61f05","filename":"syncope620/server/logic/src/main/java/org/apache/syncope/server/logic/LoggerLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FLoggerLogic.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -80,9 +80,9 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {\n \n     private List<LoggerTO> list(final LoggerType type) {\n         List<LoggerTO> result = new ArrayList<>();\n-        for (Logger syncopeLogger : loggerDAO.findAll(type)) {\n+        for (Logger logger : loggerDAO.findAll(type)) {\n             LoggerTO loggerTO = new LoggerTO();\n-            BeanUtils.copyProperties(syncopeLogger, loggerTO);\n+            BeanUtils.copyProperties(logger, loggerTO);\n             result.add(loggerTO);\n         }\n \n@@ -102,9 +102,9 @@ public List<AuditLoggerName> listAudits() {\n \n         for (LoggerTO logger : list(LoggerType.AUDIT)) {\n             try {\n-                result.add(AuditLoggerName.fromLoggerName(logger.getName()));\n+                result.add(AuditLoggerName.fromLoggerName(logger.getKey()));\n             } catch (Exception e) {\n-                LOG.warn(\"Unexpected audit logger name: {}\", logger.getName(), e);\n+                LOG.warn(\"Unexpected audit logger name: {}\", logger.getKey(), e);\n             }\n         }\n "},{"sha":"e8502ecb68400d38da686ff5874c7583158953b6","filename":"syncope620/server/logic/src/main/java/org/apache/syncope/server/logic/ReportLogic.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FReportLogic.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -55,7 +55,7 @@\n import org.apache.syncope.server.provisioning.api.data.ReportDataBinder;\n import org.apache.syncope.server.provisioning.api.job.JobNamer;\n import org.apache.syncope.server.logic.init.ImplementationClassNamesLoader;\n-import org.apache.syncope.server.logic.init.JobInstanceLoader;\n+import org.apache.syncope.server.provisioning.api.job.JobInstanceLoader;\n import org.apache.syncope.server.logic.report.Reportlet;\n import org.apache.syncope.server.logic.report.ReportletConfClass;\n import org.apache.syncope.server.logic.report.TextSerializer;\n@@ -206,20 +206,20 @@ public Set<String> getReportletConfClasses() {\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_READ')\")\n-    public ReportTO read(final Long reportId) {\n-        Report report = reportDAO.find(reportId);\n+    public ReportTO read(final Long reportKey) {\n+        Report report = reportDAO.find(reportKey);\n         if (report == null) {\n-            throw new NotFoundException(\"Report \" + reportId);\n+            throw new NotFoundException(\"Report \" + reportKey);\n         }\n         return binder.getReportTO(report);\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_READ')\")\n     @Transactional(readOnly = true)\n-    public ReportExecTO readExecution(final Long executionId) {\n-        ReportExec reportExec = reportExecDAO.find(executionId);\n+    public ReportExecTO readExecution(final Long executionKey) {\n+        ReportExec reportExec = reportExecDAO.find(executionKey);\n         if (reportExec == null) {\n-            throw new NotFoundException(\"Report execution \" + executionId);\n+            throw new NotFoundException(\"Report execution \" + executionKey);\n         }\n         return binder.getReportExecTO(reportExec);\n     }\n@@ -291,10 +291,10 @@ public void exportExecutionResult(final OutputStream os, final ReportExec report\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_READ')\")\n-    public ReportExec getAndCheckReportExec(final Long executionId) {\n-        ReportExec reportExec = reportExecDAO.find(executionId);\n+    public ReportExec getAndCheckReportExec(final Long executionKey) {\n+        ReportExec reportExec = reportExecDAO.find(executionKey);\n         if (reportExec == null) {\n-            throw new NotFoundException(\"Report execution \" + executionId);\n+            throw new NotFoundException(\"Report execution \" + executionKey);\n         }\n         if (!ReportExecStatus.SUCCESS.name().equals(reportExec.getStatus()) || reportExec.getExecResult() == null) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidReportExec);\n@@ -307,10 +307,10 @@ public ReportExec getAndCheckReportExec(final Long executionId) {\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_EXECUTE')\")\n-    public ReportExecTO execute(final Long reportId) {\n-        Report report = reportDAO.find(reportId);\n+    public ReportExecTO execute(final Long reportKey) {\n+        Report report = reportDAO.find(reportKey);\n         if (report == null) {\n-            throw new NotFoundException(\"Report \" + reportId);\n+            throw new NotFoundException(\"Report \" + reportKey);\n         }\n \n         try {\n@@ -327,7 +327,7 @@ public ReportExecTO execute(final Long reportId) {\n         }\n \n         ReportExecTO result = new ReportExecTO();\n-        result.setReport(reportId);\n+        result.setReport(reportKey);\n         result.setStartDate(new Date());\n         result.setStatus(ReportExecStatus.STARTED.name());\n         result.setMessage(\"Job fired; waiting for results...\");\n@@ -336,10 +336,10 @@ public ReportExecTO execute(final Long reportId) {\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_DELETE')\")\n-    public ReportTO delete(final Long reportId) {\n-        Report report = reportDAO.find(reportId);\n+    public ReportTO delete(final Long reportKey) {\n+        Report report = reportDAO.find(reportKey);\n         if (report == null) {\n-            throw new NotFoundException(\"Report \" + reportId);\n+            throw new NotFoundException(\"Report \" + reportKey);\n         }\n \n         ReportTO deletedReport = binder.getReportTO(report);\n@@ -349,10 +349,10 @@ public ReportTO delete(final Long reportId) {\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_DELETE')\")\n-    public ReportExecTO deleteExecution(final Long executionId) {\n-        ReportExec reportExec = reportExecDAO.find(executionId);\n+    public ReportExecTO deleteExecution(final Long executionKey) {\n+        ReportExec reportExec = reportExecDAO.find(executionKey);\n         if (reportExec == null) {\n-            throw new NotFoundException(\"Report execution \" + executionId);\n+            throw new NotFoundException(\"Report execution \" + executionKey);\n         }\n \n         ReportExecTO reportExecToDelete = binder.getReportExecTO(reportExec);"},{"sha":"f97bc83b6936c32886fe7c6f85a807b165090c62","filename":"syncope620/server/logic/src/main/java/org/apache/syncope/server/logic/TaskLogic.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FTaskLogic.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -51,7 +51,7 @@\n import org.apache.syncope.server.provisioning.api.job.TaskJob;\n import org.apache.syncope.server.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.server.logic.init.ImplementationClassNamesLoader;\n-import org.apache.syncope.server.logic.init.JobInstanceLoader;\n+import org.apache.syncope.server.provisioning.api.job.JobInstanceLoader;\n import org.apache.syncope.server.logic.notification.NotificationJob;\n import org.quartz.JobDataMap;\n import org.quartz.JobKey;\n@@ -305,6 +305,7 @@ public <T extends AbstractTaskTO> T delete(final Long taskId) {\n         if (TaskType.SCHEDULED == taskUtil.getType()\n                 || TaskType.SYNCHRONIZATION == taskUtil.getType()\n                 || TaskType.PUSH == taskUtil.getType()) {\n+\n             jobInstanceLoader.unregisterJob(task);\n         }\n \n@@ -373,9 +374,6 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n         return res;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     @Override\n     protected AbstractTaskTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {"},{"sha":"3e0de7e6a0824be0ec7d1c82cd2587efe285066f","filename":"syncope620/server/logic/src/main/java/org/apache/syncope/server/logic/UserLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FUserLogic.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -339,7 +339,7 @@ public UserTO deleteSelf() {\n     public UserTO delete(final Long key) {\n         List<Role> ownedRoles = roleDAO.findOwnedByUser(key);\n         if (!ownedRoles.isEmpty()) {\n-            List<String> owned = new ArrayList<String>(ownedRoles.size());\n+            List<String> owned = new ArrayList<>(ownedRoles.size());\n             for (Role role : ownedRoles) {\n                 owned.add(role.getKey() + \" \" + role.getName());\n             }"},{"sha":"e1d4c7d65c6ec0e67e9717e443b63de091b7f7dc","filename":"syncope620/server/logic/src/main/java/org/apache/syncope/server/logic/init/JobInstanceLoaderImpl.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Finit%2FJobInstanceLoaderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Finit%2FJobInstanceLoaderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Finit%2FJobInstanceLoaderImpl.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.server.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.server.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.server.persistence.api.entity.task.Task;\n+import org.apache.syncope.server.provisioning.api.job.JobInstanceLoader;\n import org.apache.syncope.server.provisioning.api.job.JobNamer;\n import org.apache.syncope.server.provisioning.api.job.SyncJob;\n import org.apache.syncope.server.provisioning.api.job.TaskJob;"},{"sha":"a6f698af7d025c877b6132bb944de53bfb2cd712","filename":"syncope620/server/logic/src/main/java/org/apache/syncope/server/logic/report/RoleReportlet.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Freport%2FRoleReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Freport%2FRoleReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Freport%2FRoleReportlet.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -110,7 +110,7 @@ private void doExtractAttributes(final ContentHandler handler, final AbstractAtt\n \n         AttributesImpl atts = new AttributesImpl();\n         if (!attrs.isEmpty()) {\n-            Map<String, AttrTO> attrMap = attributableTO.getAttrMap();\n+            Map<String, AttrTO> attrMap = attributableTO.getPlainAttrMap();\n \n             handler.startElement(\"\", \"\", \"attributes\", null);\n             for (String attrName : attrs) {\n@@ -233,7 +233,7 @@ private void doExtract(final ContentHandler handler, final List<Role> roles)\n             // values to String is already encapsulated there\n             RoleTO roleTO = roleDataBinder.getRoleTO(role);\n \n-            doExtractAttributes(handler, roleTO, conf.getAttrs(), conf.getDerAttrs(), conf.getVirAttrs());\n+            doExtractAttributes(handler, roleTO, conf.getPlainAttrs(), conf.getDerAttrs(), conf.getVirAttrs());\n \n             if (conf.getFeatures().contains(Feature.entitlements)) {\n                 handler.startElement(\"\", \"\", \"entitlements\", null);\n@@ -292,7 +292,7 @@ private void doExtractConf(final ContentHandler handler) throws SAXException {\n             handler.endElement(\"\", \"\", \"feature\");\n         }\n \n-        for (String attr : conf.getAttrs()) {\n+        for (String attr : conf.getPlainAttrs()) {\n             atts.clear();\n             handler.startElement(\"\", \"\", \"attribute\", atts);\n             handler.characters(attr.toCharArray(), 0, attr.length());"},{"sha":"61b7cd8382bbeec48991cd1d2addfbd9213c63bd","filename":"syncope620/server/logic/src/main/java/org/apache/syncope/server/logic/report/UserReportlet.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Freport%2FUserReportlet.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -117,7 +117,7 @@ private void doExtractAttributes(final ContentHandler handler, final AbstractAtt\n \n         AttributesImpl atts = new AttributesImpl();\n         if (!attrs.isEmpty()) {\n-            Map<String, AttrTO> attrMap = attributableTO.getAttrMap();\n+            Map<String, AttrTO> attrMap = attributableTO.getPlainAttrMap();\n \n             handler.startElement(\"\", \"\", \"attributes\", null);\n             for (String attrName : attrs) {\n@@ -271,7 +271,7 @@ private void doExtract(final ContentHandler handler, final List<User> users)\n             // values to String is already encapsulated there\n             UserTO userTO = userDataBinder.getUserTO(user);\n \n-            doExtractAttributes(handler, userTO, conf.getAttrs(), conf.getDerAttrs(), conf.getVirAttrs());\n+            doExtractAttributes(handler, userTO, conf.getPlainAttrs(), conf.getDerAttrs(), conf.getVirAttrs());\n \n             if (conf.getFeatures().contains(Feature.memberships)) {\n                 handler.startElement(\"\", \"\", \"memberships\", null);\n@@ -284,7 +284,7 @@ private void doExtract(final ContentHandler handler, final List<User> users)\n                     atts.addAttribute(\"\", \"\", \"roleName\", ReportXMLConst.XSD_STRING, String.valueOf(memb.getRoleName()));\n                     handler.startElement(\"\", \"\", \"membership\", atts);\n \n-                    doExtractAttributes(handler, memb, memb.getAttrMap().keySet(), memb.getDerAttrMap()\n+                    doExtractAttributes(handler, memb, memb.getPlainAttrMap().keySet(), memb.getDerAttrMap()\n                             .keySet(), memb.getVirAttrMap().keySet());\n \n                     if (conf.getFeatures().contains(Feature.resources)) {\n@@ -324,7 +324,7 @@ private void doExtractConf(final ContentHandler handler) throws SAXException {\n             handler.endElement(\"\", \"\", \"feature\");\n         }\n \n-        for (String attr : conf.getAttrs()) {\n+        for (String attr : conf.getPlainAttrs()) {\n             atts.clear();\n             handler.startElement(\"\", \"\", \"attribute\", atts);\n             handler.characters(attr.toCharArray(), 0, attr.length());"},{"sha":"83a238f4e3ad274273a0175de461391c71a23fe8","filename":"syncope620/server/logic/src/test/java/org/apache/syncope/server/logic/NotificationTest.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FNotificationTest.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -262,7 +262,7 @@ public void notifyByMail() throws Exception {\n         notification.setSelfAsRecipient(true);\n \n         notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserSchema);\n+        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n \n         Random random = new Random(System.currentTimeMillis());\n         String sender = \"syncopetest-\" + random.nextLong() + \"@syncope.apache.org\";\n@@ -320,7 +320,7 @@ public void issueSYNCOPE192() throws Exception {\n         notification.setSelfAsRecipient(true);\n \n         notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserSchema);\n+        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n \n         Random random = new Random(System.currentTimeMillis());\n         String sender = \"syncope192-\" + random.nextLong() + \"@syncope.apache.org\";\n@@ -372,7 +372,7 @@ public void notifyByMailEmptyAbout() throws Exception {\n         notification.setSelfAsRecipient(true);\n \n         notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserSchema);\n+        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n \n         Random random = new Random(System.currentTimeMillis());\n         String sender = \"syncopetest-\" + random.nextLong() + \"@syncope.apache.org\";\n@@ -422,7 +422,7 @@ public void notifyByMailWithRetry() throws Exception {\n         notification.setSelfAsRecipient(true);\n \n         notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserSchema);\n+        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n \n         Random random = new Random(System.currentTimeMillis());\n         String sender = \"syncopetest-\" + random.nextLong() + \"@syncope.apache.org\";\n@@ -491,7 +491,7 @@ public void issueSYNCOPE445() throws Exception {\n         notification.setSelfAsRecipient(true);\n \n         notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserSchema);\n+        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n \n         notification.getStaticRecipients().add(\"syncope445@syncope.apache.org\");\n \n@@ -549,7 +549,7 @@ public void issueSYNCOPE492() throws Exception {\n         notification.setSelfAsRecipient(true);\n \n         notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserSchema);\n+        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n \n         notification.getStaticRecipients().add(\"syncope492@syncope.apache.org\");\n \n@@ -593,7 +593,7 @@ public void issueSYNCOPE446() throws Exception {\n         notification.setSelfAsRecipient(false);\n \n         notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserSchema);\n+        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n \n         notification.getStaticRecipients().add(MAIL_ADDRESS);\n \n@@ -635,7 +635,7 @@ public void issueSYNCOPE446() throws Exception {\n \n         assertNotNull(taskId);\n         assertNotNull(textBody);\n-        assertTrue(recipients.contains(MAIL_ADDRESS));\n+        assertTrue(recipients != null && recipients.contains(MAIL_ADDRESS));\n \n         // 5. execute Notification task and verify e-mail\n         taskLogic.execute(taskId, false);"},{"sha":"afb8730dd0091a0a1ead24080b86c50f9cd70f70","filename":"syncope620/server/logic/src/test/resources/logicTest.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Flogic%2Fsrc%2Ftest%2Fresources%2FlogicTest.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Flogic%2Fsrc%2Ftest%2Fresources%2FlogicTest.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Flogic%2Fsrc%2Ftest%2Fresources%2FlogicTest.xml?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -41,5 +41,5 @@ under the License.\n     <property name=\"primary\" value=\"file:${conf.directory}/content.xml\"/>\n     <property name=\"fallback\" value=\"classpath:content.xml\"/>\n   </bean>\n-  \n+\n </beans>"},{"sha":"592cd0cbf93e92ced736563cdb8e9ae98f124cb8","filename":"syncope620/server/misc/src/main/java/org/apache/syncope/server/misc/ConnObjectUtil.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fmisc%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fmisc%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fmisc%2FConnObjectUtil.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -304,8 +304,8 @@ private <T extends AbstractSubjectTO> T getSubjectTOFromConnObject(final Connect\n                     }\n                     break;\n \n-                case UserSchema:\n-                case RoleSchema:\n+                case UserPlainSchema:\n+                case RolePlainSchema:\n                     attributeTO = new AttrTO();\n                     attributeTO.setSchema(item.getIntAttrName());\n \n@@ -446,7 +446,7 @@ private <T extends AbstractSubjectTO> T getSubjectTOFromConnObject(final Connect\n \n                 ((RoleTO) subjectTO).setInheritOwner(((RoleTO) template).isInheritOwner());\n                 ((RoleTO) subjectTO).setInheritTemplates(((RoleTO) template).isInheritTemplates());\n-                ((RoleTO) subjectTO).setInheritAttrs(((RoleTO) template).isInheritAttrs());\n+                ((RoleTO) subjectTO).setInheritPlainAttrs(((RoleTO) template).isInheritPlainAttrs());\n                 ((RoleTO) subjectTO).setInheritDerAttrs(((RoleTO) template).isInheritDerAttrs());\n                 ((RoleTO) subjectTO).setInheritVirAttrs(((RoleTO) template).isInheritVirAttrs());\n                 ((RoleTO) subjectTO).setInheritPasswordPolicy(((RoleTO) template).isInheritPasswordPolicy());\n@@ -700,7 +700,7 @@ private Set<ExternalResource> getTargetResource(final VirAttr attr, final IntMap\n     }\n \n     private void fillFromTemplate(final AbstractAttributableTO attributableTO, final AbstractAttributableTO template) {\n-        Map<String, AttrTO> currentAttrMap = attributableTO.getAttrMap();\n+        Map<String, AttrTO> currentAttrMap = attributableTO.getPlainAttrMap();\n         for (AttrTO templateAttr : template.getPlainAttrs()) {\n             if (templateAttr.getValues() != null && !templateAttr.getValues().isEmpty()\n                     && (!currentAttrMap.containsKey(templateAttr.getSchema())"},{"sha":"209c800ea36f2274157ab60b38f014eb3ead8d3d","filename":"syncope620/server/misc/src/main/java/org/apache/syncope/server/misc/MappingUtil.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fmisc%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fmisc%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fmisc%2FMappingUtil.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -303,9 +303,9 @@ private static Map.Entry<String, Attribute> prepareAttr(\n         final Map.Entry<String, Attribute> result;\n \n         switch (mapItem.getIntMappingType()) {\n-            case UserSchema:\n-            case RoleSchema:\n-            case MembershipSchema:\n+            case UserPlainSchema:\n+            case RolePlainSchema:\n+            case MembershipPlainSchema:\n                 final PlainSchemaDAO plainSchemaDAO = context.getBean(PlainSchemaDAO.class);\n                 schema = plainSchemaDAO.find(mapItem.getIntAttrName(),\n                         MappingUtil.getIntMappingTypeClass(mapItem.getIntMappingType()));\n@@ -487,9 +487,9 @@ public static List<PlainAttrValue> getIntValues(final ExternalResource resource,\n         List<PlainAttrValue> values = new ArrayList<>();\n         PlainAttrValue attrValue;\n         switch (mappingItem.getIntMappingType()) {\n-            case UserSchema:\n-            case RoleSchema:\n-            case MembershipSchema:\n+            case UserPlainSchema:\n+            case RolePlainSchema:\n+            case MembershipPlainSchema:\n                 for (Attributable<?, ?, ?> attributable : attributables) {\n                     final PlainAttr attr = attributable.getPlainAttr(mappingItem.getIntAttrName());\n                     if (attr != null) {\n@@ -687,15 +687,15 @@ public static Class getIntMappingTypeClass(final IntMappingType intMappingType)\n         Class result;\n \n         switch (intMappingType) {\n-            case UserSchema:\n+            case UserPlainSchema:\n                 result = UPlainSchema.class;\n                 break;\n \n-            case RoleSchema:\n+            case RolePlainSchema:\n                 result = RPlainSchema.class;\n                 break;\n \n-            case MembershipSchema:\n+            case MembershipPlainSchema:\n                 result = MPlainSchema.class;\n                 break;\n "},{"sha":"002a5888f7bf1d97d1898ddd6fb6d1fb67e1e38b","filename":"syncope620/server/misc/src/main/java/org/apache/syncope/server/misc/policy/AccountPolicyEnforcer.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.common.lib.types.AccountPolicySpec;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.server.persistence.api.entity.user.User;\n+import org.apache.syncope.server.provisioning.api.UserSuspender;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n "},{"sha":"8bbc734b228da320e5457f72a5b0eff99f911a14","filename":"syncope620/server/misc/src/main/java/org/apache/syncope/server/misc/policy/PasswordPolicyEnforcer.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fmisc%2Fpolicy%2FPasswordPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fmisc%2Fpolicy%2FPasswordPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fmisc%2Fpolicy%2FPasswordPolicyEnforcer.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -26,11 +26,6 @@\n @Component\n public class PasswordPolicyEnforcer implements PolicyEnforcer<PasswordPolicySpec, User> {\n \n-    /* (non-Javadoc)\n-     * @see\n-     * org.apache.syncope.core.policy.PasswordPolicyEnforcer#enforce(org.apache.syncope.common.types.PasswordPolicySpec,\n-     * org.apache.syncope.common.types.PolicyType, java.lang.String)\n-     */\n     @Override\n     public void enforce(final PasswordPolicySpec policy, final PolicyType type, final User user)\n             throws PasswordPolicyException, PolicyEnforceException {\n@@ -43,7 +38,7 @@ public void enforce(final PasswordPolicySpec policy, final PolicyType type, fina\n         }\n \n         if (password == null && !policy.isAllowNullPassword()) {\n-            throw new PolicyEnforceException(\"Password must not be null and must be stored internally\");\n+            throw new PolicyEnforceException(\"Password mandatory\");\n         } else if (password != null && clearPassword != null) {\n             // check length\n             if (policy.getMinLength() > 0 && policy.getMinLength() > clearPassword.length()) {"},{"sha":"870b44419401b8d97c7944b0bc33065cbc46fb36","filename":"syncope620/server/misc/src/main/java/org/apache/syncope/server/misc/security/AuthContextUtil.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fmisc%2Fsecurity%2FAuthContextUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fmisc%2Fsecurity%2FAuthContextUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fmisc%2Fsecurity%2FAuthContextUtil.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -59,7 +59,7 @@ public static Set<String> getOwnedEntitlementNames() {\n      */\n     public static void extendAuthContext(final Long roleKey, final String roleEntitlement) {\n         Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n-        List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>(auth.getAuthorities());\n+        List<GrantedAuthority> authorities = new ArrayList<>(auth.getAuthorities());\n         authorities.add(new SimpleGrantedAuthority(roleEntitlement));\n         Authentication newAuth = new UsernamePasswordAuthenticationToken(\n                 auth.getPrincipal(), auth.getCredentials(), authorities);"},{"sha":"3456431a8c8f63051538676681ee0c3eec1a212d","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -86,6 +86,9 @@ public class XMLContentExporter extends AbstractContentDealer implements Content\n                 JPAMDerAttr.TABLE, JPAMVirAttr.TABLE\n             }));\n \n+    protected final static Set<String> TABLE_SUFFIXES_TO_BE_INCLUDED =\n+            new HashSet<>(Arrays.asList(new String[] { \"TEMPLATE\" }));\n+\n     protected static final Map<String, String> TABLES_TO_BE_FILTERED =\n             Collections.singletonMap(\"TASK\", \"DTYPE <> 'PropagationTask'\");\n \n@@ -96,7 +99,11 @@ private boolean isTableAllowed(final String tableName) {\n         boolean allowed = true;\n         for (String prefix : TABLE_PREFIXES_TO_BE_EXCLUDED) {\n             if (tableName.toUpperCase().startsWith(prefix)) {\n-                allowed = false;\n+                for (String suffix : TABLE_SUFFIXES_TO_BE_INCLUDED) {\n+                    if (!tableName.toUpperCase().endsWith(suffix)) {\n+                        allowed = false;\n+                    }\n+                }\n             }\n         }\n         return allowed;"},{"sha":"36d48e797b56cecf2bc52f246d9d284872e1b9d3","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/dao/JPASubjectSearchDAO.java","status":"modified","additions":22,"deletions":7,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPASubjectSearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPASubjectSearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPASubjectSearchDAO.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -20,6 +20,7 @@\n \n import java.lang.annotation.Annotation;\n import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Date;\n@@ -31,6 +32,7 @@\n import javax.validation.ValidationException;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n+import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.SubjectType;\n@@ -50,7 +52,6 @@\n import org.apache.syncope.server.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.server.persistence.api.entity.PlainSchema;\n import org.apache.syncope.server.persistence.api.entity.Subject;\n-import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.util.ReflectionUtils;\n@@ -652,6 +653,11 @@ private String getQuery(final SubjectCond cond, final boolean not, final List<Ob\n \n         final AttributableUtil attrUtil = attrUtilFactory.getInstance(type.asAttributableType());\n \n+        // Keeps track of difference between entity's getKey() and JPA @Id fields\n+        if (\"key\".equals(cond.getSchema())) {\n+            cond.setSchema(\"id\");\n+        }\n+\n         Field subjectField = ReflectionUtils.findField(attrUtil.attributableClass(), cond.getSchema());\n         if (subjectField == null) {\n             LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n@@ -685,13 +691,22 @@ private String getQuery(final SubjectCond cond, final boolean not, final List<Ob\n \n         // Deal with subject fields representing relationships to other entities\n         if (subjectField.getType().getAnnotation(Entity.class) != null) {\n-            if (BeanUtils.findDeclaredMethodWithMinimalParameters(subjectField.getType(), \"getId\") != null) {\n-                cond.setSchema(cond.getSchema() + \"_id\");\n-                schema.setType(AttrSchemaType.Long);\n+            Method relMethod = null;\n+            try {\n+                relMethod = ClassUtils.getPublicMethod(subjectField.getType(), \"getKey\", new Class[0]);\n+            } catch (Exception e) {\n+                LOG.error(\"Could not find {}#getKey\", subjectField.getType(), e);\n             }\n-            if (BeanUtils.findDeclaredMethodWithMinimalParameters(subjectField.getType(), \"getName\") != null) {\n-                cond.setSchema(cond.getSchema() + \"_name\");\n-                schema.setType(AttrSchemaType.String);\n+\n+            if (relMethod != null) {\n+                if (Long.class.isAssignableFrom(relMethod.getReturnType())) {\n+                    cond.setSchema(cond.getSchema() + \"_id\");\n+                    schema.setType(AttrSchemaType.Long);\n+                }\n+                if (String.class.isAssignableFrom(relMethod.getReturnType())) {\n+                    cond.setSchema(cond.getSchema() + \"_name\");\n+                    schema.setType(AttrSchemaType.String);\n+                }\n             }\n         }\n "},{"sha":"e0d23133f57ceb24cac9077cdddc725468163fc6","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -144,7 +144,7 @@ public <T extends Task> List<T> findAll(final int page, final int itemsPerPage,\n     @Override\n     public int count(final TaskType type) {\n         Query countQuery = entityManager.createNativeQuery(\"SELECT COUNT(id) FROM Task WHERE TYPE=?1\");\n-        countQuery.setParameter(1, type.toString());\n+        countQuery.setParameter(1, type.name());\n         return ((Number) countQuery.getSingleResult()).intValue();\n     }\n "},{"sha":"2a45ad3d775033033c61e454a9543f5080eae3b7","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -51,6 +51,7 @@\n import org.apache.syncope.server.misc.security.UnauthorizedRoleException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n public class JPAUserDAO extends AbstractSubjectDAO<UPlainAttr, UDerAttr, UVirAttr> implements UserDAO {\n@@ -249,6 +250,7 @@ private void securityChecks(final User user) {\n         }\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n     public User authFetch(final Long key) {\n         if (key == null) {\n@@ -265,6 +267,7 @@ public User authFetch(final Long key) {\n         return user;\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n     public User authFetch(final String username) {\n         if (username == null) {"},{"sha":"fe788894cb9823d634ae1dcdad506d78041a29c4","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/entity/AbstractAttrTemplate.java","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttrTemplate.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -18,25 +18,11 @@\n  */\n package org.apache.syncope.server.persistence.jpa.entity;\n \n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n-import javax.persistence.Id;\n-import javax.persistence.MappedSuperclass;\n import org.apache.syncope.server.persistence.api.entity.AttrTemplate;\n import org.apache.syncope.server.persistence.api.entity.Schema;\n \n-@MappedSuperclass\n public abstract class AbstractAttrTemplate<S extends Schema> extends AbstractEntity<Long> implements AttrTemplate<S> {\n \n     private static final long serialVersionUID = 4829112252713766666L;\n \n-    @Id\n-    @GeneratedValue(strategy = GenerationType.AUTO)\n-    protected Long id;\n-\n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n }"},{"sha":"2dec16a9ea515aaf392b7f68b781b4b36f4ae5e0","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/entity/AbstractDerAttrTemplate.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttrTemplate.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.persistence.jpa.entity;\n+\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import org.apache.syncope.server.persistence.api.entity.DerSchema;\n+\n+@MappedSuperclass\n+public abstract class AbstractDerAttrTemplate<D extends DerSchema> extends AbstractAttrTemplate<D> {\n+\n+    private static final long serialVersionUID = 8871895736733379865L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    protected Long id;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+}"},{"sha":"f8b0150285a5073ab584d2e8f077762dd2b1b28a","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/entity/AbstractPlainAttrTemplate.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrTemplate.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.persistence.jpa.entity;\n+\n+import org.apache.syncope.server.persistence.api.entity.PlainSchema;\n+\n+public abstract class AbstractPlainAttrTemplate<P extends PlainSchema> extends AbstractAttrTemplate<P> {\n+\n+    private static final long serialVersionUID = -943169893494860655L;\n+\n+}"},{"sha":"78356bf6048e343754a1acfdb0e3fa4d8129d2c8","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/entity/AbstractPlainSchema.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainSchema.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -29,6 +29,7 @@\n import javax.persistence.Transient;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.server.persistence.api.attrvalue.validation.Validator;\n@@ -231,7 +232,7 @@ public String getConversionPattern() {\n \n     @Override\n     public void setConversionPattern(final String conversionPattern) {\n-        if (!getType().isConversionPatternNeeded()) {\n+        if (StringUtils.isNotBlank(conversionPattern) && !getType().isConversionPatternNeeded()) {\n             LOG.warn(\"Conversion pattern will be ignored: this attribute type is {}\", getType());\n         }\n "},{"sha":"5a3b2e46075e7752b185babf41a39d788eae841f","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/entity/AbstractVirAttrTemplate.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttrTemplate.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.persistence.jpa.entity;\n+\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import org.apache.syncope.server.persistence.api.entity.VirSchema;\n+\n+@MappedSuperclass\n+public abstract class AbstractVirAttrTemplate<V extends VirSchema> extends AbstractAttrTemplate<V> {\n+\n+    private static final long serialVersionUID = -943169893494860655L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    protected Long id;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+}"},{"sha":"94f95a8e6a6b81cd72a4a80c8918747761989cc8","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/entity/JPAAttributableUtil.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FJPAAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FJPAAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FJPAAttributableUtil.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -744,15 +744,15 @@ public IntMappingType intMappingType() {\n \n         switch (type) {\n             case ROLE:\n-                result = IntMappingType.RoleSchema;\n+                result = IntMappingType.RolePlainSchema;\n                 break;\n \n             case MEMBERSHIP:\n-                result = IntMappingType.MembershipSchema;\n+                result = IntMappingType.MembershipPlainSchema;\n                 break;\n \n             case USER:\n-                result = IntMappingType.UserSchema;\n+                result = IntMappingType.UserPlainSchema;\n                 break;\n \n             case CONFIGURATION:\n@@ -768,15 +768,15 @@ public IntMappingType derIntMappingType() {\n \n         switch (type) {\n             case ROLE:\n-                result = IntMappingType.RoleSchema;\n+                result = IntMappingType.RoleDerivedSchema;\n                 break;\n \n             case MEMBERSHIP:\n-                result = IntMappingType.MembershipSchema;\n+                result = IntMappingType.MembershipDerivedSchema;\n                 break;\n \n             case USER:\n-                result = IntMappingType.UserSchema;\n+                result = IntMappingType.UserDerivedSchema;\n                 break;\n \n             case CONFIGURATION:"},{"sha":"28e1c878e0ad408bc4014189255e827f482838ad","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/entity/JPAConnInstance.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -186,7 +186,7 @@ public Set<ConnConfProperty> getConfiguration() {\n         if (!StringUtils.isBlank(jsonConf)) {\n             ConnConfProperty[] deserialized = POJOHelper.deserialize(jsonConf, ConnConfProperty[].class);\n             if (ArrayUtils.isNotEmpty(deserialized)) {\n-                configuration = new HashSet<ConnConfProperty>(Arrays.asList(deserialized));\n+                configuration = new HashSet<>(Arrays.asList(deserialized));\n             }\n         }\n \n@@ -195,7 +195,7 @@ public Set<ConnConfProperty> getConfiguration() {\n \n     @Override\n     public void setConfiguration(final Set<ConnConfProperty> configuration) {\n-        jsonConf = POJOHelper.serialize(new HashSet<ConnConfProperty>(configuration));\n+        jsonConf = POJOHelper.serialize(new HashSet<>(configuration));\n     }\n \n     @Override"},{"sha":"8b01c606d16f5f0cfef40cb79bbcdcdc8da4333c","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/entity/JPAReport.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -113,8 +113,6 @@ public boolean removeReportletConf(final ReportletConf reportletConf) {\n             return false;\n         }\n \n-        checkType(reportletConf, JPAReportletConfInstance.class);\n-\n         JPAReportletConfInstance found = null;\n         for (JPAReportletConfInstance instance : reportletConfs) {\n             if (reportletConf.equals(instance.getInstance())) {"},{"sha":"f52627c9a3c8af68e8c7ddd1398ecd66ce13bdd5","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/entity/membership/JPAMDerAttrTemplate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMDerAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMDerAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMDerAttrTemplate.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -25,12 +25,12 @@\n import org.apache.syncope.server.persistence.api.entity.membership.MDerAttrTemplate;\n import org.apache.syncope.server.persistence.api.entity.membership.MDerSchema;\n import org.apache.syncope.server.persistence.api.entity.role.Role;\n-import org.apache.syncope.server.persistence.jpa.entity.AbstractAttrTemplate;\n+import org.apache.syncope.server.persistence.jpa.entity.AbstractDerAttrTemplate;\n import org.apache.syncope.server.persistence.jpa.entity.role.JPARole;\n \n @Entity\n @Table(name = JPAMDerAttrTemplate.TABLE)\n-public class JPAMDerAttrTemplate extends AbstractAttrTemplate<MDerSchema> implements MDerAttrTemplate {\n+public class JPAMDerAttrTemplate extends AbstractDerAttrTemplate<MDerSchema> implements MDerAttrTemplate {\n \n     private static final long serialVersionUID = -4465930976210263434L;\n "},{"sha":"5f33b8c0c5924fb696fc3047e0dcf3624f60a80a","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/entity/membership/JPAMPlainAttrTemplate.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainAttrTemplate.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -19,30 +19,39 @@\n package org.apache.syncope.server.persistence.jpa.entity.membership;\n \n import javax.persistence.Entity;\n+import javax.persistence.Id;\n import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import org.apache.syncope.server.persistence.api.entity.membership.MPlainAttrTemplate;\n import org.apache.syncope.server.persistence.api.entity.membership.MPlainSchema;\n import org.apache.syncope.server.persistence.api.entity.role.Role;\n-import org.apache.syncope.server.persistence.jpa.entity.AbstractAttrTemplate;\n+import org.apache.syncope.server.persistence.jpa.entity.AbstractPlainAttrTemplate;\n import org.apache.syncope.server.persistence.jpa.entity.role.JPARole;\n \n @Entity\n @Table(name = JPAMPlainAttrTemplate.TABLE)\n-public class JPAMPlainAttrTemplate extends AbstractAttrTemplate<MPlainSchema> implements MPlainAttrTemplate {\n+public class JPAMPlainAttrTemplate extends AbstractPlainAttrTemplate<MPlainSchema> implements MPlainAttrTemplate {\n \n     private static final long serialVersionUID = -8768086609963244514L;\n \n     public static final String TABLE = \"MPlainAttrTemplate\";\n \n+    @Id\n+    private Long id;\n+\n     @ManyToOne\n     private JPARole owner;\n \n     @ManyToOne\n     @JoinColumn(name = \"schema_name\")\n     private JPAMPlainSchema schema;\n \n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n     @Override\n     public MPlainSchema getSchema() {\n         return schema;"},{"sha":"1d7e184a562716c11f57892e0ebc6bff4e12d6fb","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/entity/membership/JPAMVirAttrTemplate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirAttrTemplate.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -25,12 +25,12 @@\n import org.apache.syncope.server.persistence.api.entity.membership.MVirAttrTemplate;\n import org.apache.syncope.server.persistence.api.entity.membership.MVirSchema;\n import org.apache.syncope.server.persistence.api.entity.role.Role;\n-import org.apache.syncope.server.persistence.jpa.entity.AbstractAttrTemplate;\n+import org.apache.syncope.server.persistence.jpa.entity.AbstractVirAttrTemplate;\n import org.apache.syncope.server.persistence.jpa.entity.role.JPARole;\n \n @Entity\n @Table(name = JPAMVirAttrTemplate.TABLE)\n-public class JPAMVirAttrTemplate extends AbstractAttrTemplate<MVirSchema> implements MVirAttrTemplate {\n+public class JPAMVirAttrTemplate extends AbstractVirAttrTemplate<MVirSchema> implements MVirAttrTemplate {\n \n     private static final long serialVersionUID = 6618560912535667392L;\n "},{"sha":"7ddc20f9fc604bab0049ac9a7255b133364bf26e","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/entity/role/JPARDerAttrTemplate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARDerAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARDerAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARDerAttrTemplate.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -25,11 +25,11 @@\n import org.apache.syncope.server.persistence.api.entity.role.RDerAttrTemplate;\n import org.apache.syncope.server.persistence.api.entity.role.RDerSchema;\n import org.apache.syncope.server.persistence.api.entity.role.Role;\n-import org.apache.syncope.server.persistence.jpa.entity.AbstractAttrTemplate;\n+import org.apache.syncope.server.persistence.jpa.entity.AbstractDerAttrTemplate;\n \n @Entity\n @Table(name = JPARDerAttrTemplate.TABLE)\n-public class JPARDerAttrTemplate extends AbstractAttrTemplate<RDerSchema> implements RDerAttrTemplate {\n+public class JPARDerAttrTemplate extends AbstractDerAttrTemplate<RDerSchema> implements RDerAttrTemplate {\n \n     private static final long serialVersionUID = 624868884107016649L;\n "},{"sha":"fa6e8eefe2d1dc3b94bc50f5e7f83a4d7bcaefd3","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/entity/role/JPARPlainAttrTemplate.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARPlainAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARPlainAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARPlainAttrTemplate.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -19,25 +19,34 @@\n package org.apache.syncope.server.persistence.jpa.entity.role;\n \n import javax.persistence.Entity;\n+import javax.persistence.Id;\n import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import org.apache.syncope.server.persistence.api.entity.role.RPlainAttrTemplate;\n import org.apache.syncope.server.persistence.api.entity.role.RPlainSchema;\n import org.apache.syncope.server.persistence.api.entity.role.Role;\n-import org.apache.syncope.server.persistence.jpa.entity.AbstractAttrTemplate;\n+import org.apache.syncope.server.persistence.jpa.entity.AbstractPlainAttrTemplate;\n \n @Entity\n @Table(name = JPARPlainAttrTemplate.TABLE)\n-public class JPARPlainAttrTemplate extends AbstractAttrTemplate<RPlainSchema> implements RPlainAttrTemplate {\n+public class JPARPlainAttrTemplate extends AbstractPlainAttrTemplate<RPlainSchema> implements RPlainAttrTemplate {\n \n     private static final long serialVersionUID = 6943917051517266268L;\n \n     public static final String TABLE = \"RPlainAttrTemplate\";\n \n+    @Id\n+    private Long id;\n+\n     @ManyToOne\n     private JPARole owner;\n \n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n     @ManyToOne\n     @JoinColumn(name = \"schema_name\")\n     private JPARPlainSchema schema;"},{"sha":"74200db90aeb144de007c2d107345b385a2c80cb","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/entity/role/JPARVirAttrTemplate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARVirAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARVirAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARVirAttrTemplate.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -25,11 +25,11 @@\n import org.apache.syncope.server.persistence.api.entity.role.RVirAttrTemplate;\n import org.apache.syncope.server.persistence.api.entity.role.RVirSchema;\n import org.apache.syncope.server.persistence.api.entity.role.Role;\n-import org.apache.syncope.server.persistence.jpa.entity.AbstractAttrTemplate;\n+import org.apache.syncope.server.persistence.jpa.entity.AbstractVirAttrTemplate;\n \n @Entity\n @Table(name = JPARVirAttrTemplate.TABLE)\n-public class JPARVirAttrTemplate extends AbstractAttrTemplate<RVirSchema> implements RVirAttrTemplate {\n+public class JPARVirAttrTemplate extends AbstractVirAttrTemplate<RVirSchema> implements RVirAttrTemplate {\n \n     private static final long serialVersionUID = 4896495904794493479L;\n "},{"sha":"178d2b01f2582b6142fa4be5a5679f137999bc66","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/entity/task/JPATaskUtil.java","status":"modified","additions":26,"deletions":6,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtil.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -80,12 +80,33 @@ public <T extends Task> Class<T> taskClass() {\n \n     @Override\n     public <T extends Task> T newTask() {\n-        final Class<T> taskClass = taskClass();\n-        try {\n-            return taskClass == null ? null : taskClass.newInstance();\n-        } catch (Exception e) {\n-            return null;\n+        T result = null;\n+\n+        switch (type) {\n+            case PROPAGATION:\n+                result = (T) new JPAPropagationTask();\n+                break;\n+\n+            case SCHEDULED:\n+                result = (T) new JPASchedTask();\n+                break;\n+\n+            case SYNCHRONIZATION:\n+                result = (T) new JPASyncTask();\n+                break;\n+\n+            case PUSH:\n+                result = (T) new JPAPushTask();\n+                break;\n+\n+            case NOTIFICATION:\n+                result = (T) new JPANotificationTask();\n+                break;\n+\n+            default:\n         }\n+\n+        return result;\n     }\n \n     @Override\n@@ -119,7 +140,6 @@ public <T extends AbstractTaskTO> Class<T> taskTOClass() {\n         return result;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractTaskTO> T newTaskTO() {\n         final Class<T> taskClass = taskTOClass();"},{"sha":"5f8c89dde034ebb55706e6b59ff5d072994b0413","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/validation/entity/EntityValidationListener.java","status":"modified","additions":27,"deletions":1,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -23,8 +23,17 @@\n import javax.persistence.PreUpdate;\n import javax.validation.ConstraintViolation;\n import javax.validation.Validator;\n+import org.apache.commons.lang3.ClassUtils;\n import org.apache.syncope.server.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.server.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.server.persistence.api.entity.AnnotatedEntity;\n+import org.apache.syncope.server.persistence.api.entity.Attr;\n+import org.apache.syncope.server.persistence.api.entity.Attributable;\n+import org.apache.syncope.server.persistence.api.entity.Entity;\n+import org.apache.syncope.server.persistence.api.entity.Policy;\n+import org.apache.syncope.server.persistence.api.entity.Schema;\n+import org.apache.syncope.server.persistence.api.entity.Subject;\n+import org.apache.syncope.server.persistence.api.entity.task.Task;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -45,7 +54,24 @@ public void validate(final Object object) {\n         Set<ConstraintViolation<Object>> violations = validator.validate(object);\n         if (!violations.isEmpty()) {\n             LOG.warn(\"Bean validation errors found: {}\", violations);\n-            throw new InvalidEntityException(object.getClass().getSimpleName(), violations);\n+\n+            Class<?> entityInt = null;\n+            for (Class<?> interf : ClassUtils.getAllInterfaces(object.getClass())) {\n+                if (!Entity.class.equals(interf)\n+                        && !AnnotatedEntity.class.equals(interf)\n+                        && !Schema.class.equals(interf)\n+                        && !Attr.class.equals(interf)\n+                        && !Task.class.equals(interf)\n+                        && !Policy.class.equals(interf)\n+                        && !Attributable.class.equals(interf)\n+                        && !Subject.class.equals(interf)\n+                        && Entity.class.isAssignableFrom(interf)) {\n+\n+                    entityInt = interf;\n+                }\n+            }\n+\n+            throw new InvalidEntityException(entityInt == null ? \"Entity\" : entityInt.getSimpleName(), violations);\n         }\n     }\n }"},{"sha":"93bc24d42cd9a68c37ccf7b0e2999803d6e40c46","filename":"syncope620/server/persistence-jpa/src/main/resources/META-INF/orm.xml","status":"modified","additions":18,"deletions":2,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -124,11 +124,27 @@ under the License.\n       </id>\n     </attributes>\n   </entity>\n+  <entity class=\"org.apache.syncope.server.persistence.jpa.entity.role.JPARPlainAttrTemplate\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_RPlainAttrTemplate\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_RPlainAttrTemplate\" pk-column-value=\"SEQ_RPlainAttrTemplate\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n   <entity class=\"org.apache.syncope.server.persistence.jpa.entity.membership.JPAMPlainAttr\">\n     <attributes>\n       <id name=\"id\">\n-        <generated-value generator=\"SEQ_MAttrPlain\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_MAttrPlain\" pk-column-value=\"SEQ_MAttrPlain\" initial-value=\"1000\"/>\n+        <generated-value generator=\"SEQ_MPlainAttr\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_MPlainAttr\" pk-column-value=\"SEQ_MPlainAttr\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.server.persistence.jpa.entity.membership.JPAMPlainAttrTemplate\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_MPlainAttrTemplate\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_MPlainAttrTemplate\" pk-column-value=\"SEQ_MPlainAttrTemplate\" initial-value=\"1000\"/>\n       </id>\n     </attributes>\n   </entity>"},{"sha":"9eaa312becc48c1e258b76d535909eb3403c2b02","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/server/persistence/jpa/entity/AttributableSearchTest.java","status":"modified","additions":22,"deletions":8,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FAttributableSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FAttributableSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FAttributableSearchTest.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -131,7 +131,7 @@ public void searchWithNotCondition() {\n         assertNotNull(users);\n         assertEquals(4, users.size());\n \n-        Set<Long> ids = new HashSet<Long>(users.size());\n+        Set<Long> ids = new HashSet<>(users.size());\n         for (User user : users) {\n             ids.add(user.getKey());\n         }\n@@ -254,16 +254,30 @@ public void searchByResource() {\n     }\n \n     @Test\n-    public void searchByUsernameAndId() {\n-        SubjectCond usernameLeafCond = new SubjectCond(SubjectCond.Type.EQ);\n+    public void searchByBooleanSubjectCond() {\n+        SubjectCond booleanCond = new SubjectCond(SubjectCond.Type.EQ);\n+        booleanCond.setSchema(\"inheritPlainAttrs\");\n+        booleanCond.setExpression(\"true\");\n+\n+        SearchCond searchCondition = SearchCond.getLeafCond(booleanCond);\n+\n+        List<Role> matchingRoles = searchDAO.search(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()),\n+                searchCondition, SubjectType.ROLE);\n+        assertNotNull(matchingRoles);\n+        assertFalse(matchingRoles.isEmpty());\n+    }\n+\n+    @Test\n+    public void searchByUsernameAndKey() {\n+        SubjectCond usernameLeafCond = new SubjectCond(SubjectCond.Type.LIKE);\n         usernameLeafCond.setSchema(\"username\");\n-        usernameLeafCond.setExpression(\"rossini\");\n+        usernameLeafCond.setExpression(\"%ini\");\n \n         SubjectCond idRightCond = new SubjectCond(SubjectCond.Type.LT);\n-        idRightCond.setSchema(\"id\");\n+        idRightCond.setSchema(\"key\");\n         idRightCond.setExpression(\"2\");\n \n-        SearchCond searchCondition = SearchCond.getOrCond(SearchCond.getLeafCond(usernameLeafCond),\n+        SearchCond searchCondition = SearchCond.getAndCond(SearchCond.getLeafCond(usernameLeafCond),\n                 SearchCond.getLeafCond(idRightCond));\n \n         List<User> matchingUsers = searchDAO.search(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()),\n@@ -276,13 +290,13 @@ public void searchByUsernameAndId() {\n     }\n \n     @Test\n-    public void searchByRolenameAndId() {\n+    public void searchByRolenameAndKey() {\n         SubjectCond rolenameLeafCond = new SubjectCond(SubjectCond.Type.EQ);\n         rolenameLeafCond.setSchema(\"name\");\n         rolenameLeafCond.setExpression(\"root\");\n \n         SubjectCond idRightCond = new SubjectCond(SubjectCond.Type.LT);\n-        idRightCond.setSchema(\"id\");\n+        idRightCond.setSchema(\"key\");\n         idRightCond.setExpression(\"2\");\n \n         SearchCond searchCondition = SearchCond.getAndCond(SearchCond.getLeafCond(rolenameLeafCond),"},{"sha":"91ad890e7613f4b9eedd721eb4748ba934dcda87","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/server/persistence/jpa/entity/NotificationTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FNotificationTest.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -65,7 +65,7 @@ public void save() {\n         notification.setRecipients(\"fake search condition\");\n \n         notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserSchema);\n+        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n \n         notification.setSender(\"syncope@syncope.apache.org\");\n         notification.setSubject(\"Test notification\");\n@@ -92,7 +92,7 @@ public void issueSYNCOPE445() {\n         notification.setRecipients(\"fake search condition\");\n \n         notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserSchema);\n+        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n \n         notification.addStaticRecipient(\"syncope445@syncope.apache.org\");\n \n@@ -115,7 +115,7 @@ public void issueSYNCOPE446() {\n         notification.setRoleAbout(\"fake search condition\");\n \n         notification.setRecipientAttrName(\"email\");\n-        notification.setRecipientAttrType(IntMappingType.UserSchema);\n+        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n \n         notification.addStaticRecipient(\"syncope446@syncope.apache.org\");\n "},{"sha":"68d1516cd586cfbd58c00367d5b16f08b20a05cf","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/server/persistence/jpa/entity/ResourceTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FResourceTest.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -133,7 +133,7 @@ public void saveInvalidMappingIntAttr() {\n \n         UMappingItem accountId = entityFactory.newEntity(UMappingItem.class);\n         accountId.setAccountid(true);\n-        accountId.setIntMappingType(IntMappingType.UserSchema);\n+        accountId.setIntMappingType(IntMappingType.UserPlainSchema);\n         mapping.addItem(accountId);\n \n         // save the resource\n@@ -176,12 +176,12 @@ public void saveInvalidMappingExtAttr() {\n         UMappingItem item = entityFactory.newEntity(UMappingItem.class);\n         item.setAccountid(true);\n         item.setIntAttrName(\"fullname\");\n-        item.setIntMappingType(IntMappingType.UserSchema);\n+        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         mapping.addItem(item);\n \n         item = entityFactory.newEntity(UMappingItem.class);\n         item.setIntAttrName(\"userId\");\n-        item.setIntMappingType(IntMappingType.UserSchema);\n+        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         mapping.addItem(item);\n \n         ExternalResource actual = resourceDAO.save(resource);\n@@ -202,14 +202,14 @@ public void saveWithRoleMappingType() {\n         UMappingItem item = entityFactory.newEntity(UMappingItem.class);\n         item.setIntAttrName(\"fullname\");\n         item.setExtAttrName(\"fullname\");\n-        item.setIntMappingType(IntMappingType.UserSchema);\n+        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.setAccountIdItem(item);\n \n         item = entityFactory.newEntity(UMappingItem.class);\n         item.setIntAttrName(\"icon\");\n         item.setExtAttrName(\"icon\");\n-        item.setIntMappingType(IntMappingType.RoleSchema);\n+        item.setIntMappingType(IntMappingType.RolePlainSchema);\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.addItem(item);\n "},{"sha":"dc9124b09bc44afa0321597740111449ec51736f","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/server/persistence/jpa/relationship/ResourceTest.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Frelationship%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Frelationship%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Frelationship%2FResourceTest.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -118,7 +118,7 @@ public void save() {\n             UMappingItem item = entityFactory.newEntity(UMappingItem.class);\n             item.setExtAttrName(\"test\" + i);\n             item.setIntAttrName(\"nonexistent\" + i);\n-            item.setIntMappingType(IntMappingType.UserSchema);\n+            item.setIntMappingType(IntMappingType.UserPlainSchema);\n             item.setMandatoryCondition(\"false\");\n             item.setPurpose(MappingPurpose.SYNCHRONIZATION);\n             mapping.addItem(item);\n@@ -257,13 +257,16 @@ public void emptyMapping() {\n         List<? extends RMappingItem> items = ldap.getRmapping().getItems();\n         assertNotNull(items);\n         assertFalse(items.isEmpty());\n-        List<Long> itemIds = new ArrayList<Long>(items.size());\n+        List<Long> itemIds = new ArrayList<>(items.size());\n         for (RMappingItem item : items) {\n             itemIds.add(item.getKey());\n         }\n \n         ldap.setRmapping(null);\n \n+        // need to avoid any class not defined in this Maven module\n+        ldap.getPropagationActionsClassNames().clear();\n+        \n         resourceDAO.save(ldap);\n         resourceDAO.flush();\n "},{"sha":"ecbf06dbfc8c9c7139ec6a61b4e927c44731cfa7","filename":"syncope620/server/persistence-jpa/src/test/resources/content.xml","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -407,10 +407,10 @@ under the License.\n   <RDerAttrTemplate id=\"1003\" owner_id=\"1\" schema_name=\"rderToBePropagated\"/>    \n   <RDerAttr id=\"1003\" owner_id=\"1\" template_id=\"1003\"/>    \n \n-  <RVirAttrTemplate id=\"100\" owner_id=\"4\" schema_name=\"rvirtualdata\"/>\n-  <RVirAttr id=\"100\" owner_id=\"4\" template_id=\"100\"/>\n+  <RVirAttrTemplate id=\"98\" owner_id=\"4\" schema_name=\"rvirtualdata\"/>\n+  <RVirAttr id=\"98\" owner_id=\"4\" template_id=\"98\"/>\n \n-  <RVirAttrTemplate id=\"101\" owner_id=\"3\" schema_name=\"rvirtualdata\"/>\n+  <RVirAttrTemplate id=\"99\" owner_id=\"3\" schema_name=\"rvirtualdata\"/>\n \n   <MPlainAttrTemplate id=\"98\" owner_id=\"1\" schema_name=\"mderived_sx\"/>\n   \n@@ -438,7 +438,7 @@ under the License.\n   \n   <MDerAttrTemplate id=\"100\" owner_id=\"1\" schema_name=\"mderToBePropagated\"/>  \n     \n-  <MVirAttrTemplate id=\"100\" owner_id=\"2\" schema_name=\"mvirtualdata\"/>\n+  <MVirAttrTemplate id=\"99\" owner_id=\"2\" schema_name=\"mvirtualdata\"/>\n \n   <ConnInstance id=\"100\" displayName=\"ConnInstance100\"\n                 location=\"${connid.location}\"\n@@ -605,7 +605,7 @@ under the License.\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource_PropActions externalResource_name=\"resource-ldap\"\n-                                action=\"org.apache.syncope.server.provisioning.api.propagation.PropagationActions\"/>\n+                                action=\"org.apache.syncope.server.provisioning.java.propagation.LDAPMembershipPropagationActions\"/>\n   <ExternalResource name=\"ws-target-resource-nopropagation\" connector_id=\"103\"\n                     randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" \n@@ -664,49 +664,49 @@ under the License.\n                 intMappingType=\"UserId\" mandatoryCondition=\"true\"\n                 accountid=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <UMappingItem id=\"100\" extAttrName=\"email\" mapping_id=\"15\"\n-                intAttrName=\"email\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                intAttrName=\"email\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n                 accountid=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <UMappingItem id=\"101\" extAttrName=\"surname\" mapping_id=\"15\"\n-                intAttrName=\"surname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                intAttrName=\"surname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n                 accountid=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <UMappingItem id=\"102\" mapping_id=\"15\"\n                 extAttrName=\"__PASSWORD__\" intMappingType=\"Password\" mandatoryCondition=\"true\"\n                 accountid=\"0\" password=\"1\" purpose=\"PROPAGATION\"/>\n   <UMappingItem id=\"335\" mapping_id=\"15\" \n-                extAttrName=\"fullname\" intAttrName=\"surname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                extAttrName=\"fullname\" intAttrName=\"surname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n                 accountid=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <UMappingItem id=\"336\" mapping_id=\"15\"\n-                extAttrName=\"type\" intAttrName=\"type\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                extAttrName=\"type\" intAttrName=\"type\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n                 accountid=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <UMappingItem id=\"337\" mapping_id=\"15\"\n-                extAttrName=\"name\" intAttrName=\"firstname\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n+                extAttrName=\"name\" intAttrName=\"firstname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"false\"\n                 accountid=\"0\" password=\"0\" purpose=\"NONE\"/>\n   \n   <UMapping id=\"12\" resource_name=\"ws-target-resource-list-mappings-1\"/>\n   <UMappingItem id=\"103\" mapping_id=\"12\"\n-                extAttrName=\"email\" intAttrName=\"email\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                extAttrName=\"email\" intAttrName=\"email\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n                 accountid=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <UMappingItem id=\"104\" extAttrName=\"surname\" mapping_id=\"12\"\n-                intAttrName=\"surname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                intAttrName=\"surname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n                 accountid=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n \n   <UMapping id=\"13\" resource_name=\"ws-target-resource-list-mappings-2\"/>\n   <UMappingItem id=\"105\" mapping_id=\"13\"\n-                extAttrName=\"userId\" intAttrName=\"userId\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                extAttrName=\"userId\" intAttrName=\"userId\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n                 accountid=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n \n   <UMapping id=\"1\" resource_name=\"ws-target-resource-2\"/>\n   <UMappingItem id=\"106\" mapping_id=\"1\" extAttrName=\"fullname\"\n-                intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n                 accountid=\"1\" password=\"0\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"107\" mapping_id=\"1\"\n                 extAttrName=\"__PASSWORD__\" intMappingType=\"Password\" mandatoryCondition=\"true\"\n                 accountid=\"0\" password=\"1\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"108\" extAttrName=\"type\" mapping_id=\"1\"\n-                intAttrName=\"type\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                intAttrName=\"type\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n                 accountid=\"0\" password=\"0\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"109\" extAttrName=\"surname\" mapping_id=\"1\"\n-                intAttrName=\"surname\" intMappingType=\"UserSchema\" mandatoryCondition=\"type == 'F'\"\n+                intAttrName=\"surname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"type == 'F'\"\n                 accountid=\"0\" password=\"0\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"110\" extAttrName=\"name\" mapping_id=\"1\"\n                 intAttrName=\"virtualdata\" intMappingType=\"UserVirtualSchema\" mandatoryCondition=\"type == 'F'\"\n@@ -717,33 +717,33 @@ under the License.\n     \n   <UMapping id=\"2\" resource_name=\"ws-target-resource-update\"/>\n   <UMappingItem id=\"112\" extAttrName=\"email\" mapping_id=\"2\"\n-                intAttrName=\"email\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n+                intAttrName=\"email\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"false\"\n                 accountid=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <UMappingItem id=\"113\" extAttrName=\"userId\" mapping_id=\"2\"\n-                intAttrName=\"userId\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n+                intAttrName=\"userId\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"false\"\n                 accountid=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <UMappingItem id=\"114\" extAttrName=\"test3\" mapping_id=\"2\" \n-                intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n+                intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"false\"\n                 accountid=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n     \n   <UMapping id=\"3\" resource_name=\"ws-target-resource-nopropagation\"/>\n   <UMappingItem id=\"115\" mapping_id=\"3\" extAttrName=\"fullname\" \n-                intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n                 accountid=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n                      \n   <UMapping id=\"4\" resource_name=\"ws-target-resource-nopropagation2\"/>\n   <UMappingItem id=\"116\" mapping_id=\"4\" extAttrName=\"fullname\" \n-                intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n                 accountid=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n                      \n   <UMapping id=\"5\" resource_name=\"ws-target-resource-nopropagation3\"/>\n   <UMappingItem id=\"117\" mapping_id=\"5\" extAttrName=\"fullname\"\n-                intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n                 accountid=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n                      \n   <UMapping id=\"6\" resource_name=\"ws-target-resource-nopropagation4\"/>\n   <UMappingItem id=\"118\" mapping_id=\"6\"\n-                extAttrName=\"fullname\" intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                extAttrName=\"fullname\" intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n                 accountid=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n                        \n   <UMapping id=\"7\" resource_name=\"resource-testdb\"/>\n@@ -767,22 +767,22 @@ under the License.\n                 intMappingType=\"Username\" mandatoryCondition=\"true\"\n                 accountid=\"0\" password=\"0\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"201\" extAttrName=\"id\" mapping_id=\"9\"\n-                intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n                 accountid=\"0\" password=\"0\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"202\" mapping_id=\"9\"\n                 extAttrName=\"__PASSWORD__\" intMappingType=\"Password\" mandatoryCondition=\"true\"\n                 accountid=\"0\" password=\"1\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"203\" extAttrName=\"name\" mapping_id=\"9\"\n-                intAttrName=\"firstname\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n+                intAttrName=\"firstname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"false\"\n                 accountid=\"0\" password=\"0\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"204\" extAttrName=\"surname\" mapping_id=\"9\"\n-                intAttrName=\"surname\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n+                intAttrName=\"surname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"false\"\n                 accountid=\"0\" password=\"0\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"205\" extAttrName=\"email\" mapping_id=\"9\"\n-                intAttrName=\"userId\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                intAttrName=\"userId\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n                 accountid=\"0\" password=\"0\" purpose=\"SYNCHRONIZATION\"/>\n   <UMappingItem id=\"206\" extAttrName=\"email\" mapping_id=\"9\"\n-                intAttrName=\"email\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                intAttrName=\"email\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"true\"\n                 accountid=\"0\" password=\"0\" purpose=\"SYNCHRONIZATION\"/>\n   <UMappingItem id=\"207\" extAttrName=\"__NAME__\" mapping_id=\"9\"\n                 intAttrName=\"csvuserid\" intMappingType=\"UserDerivedSchema\" mandatoryCondition=\"true\"\n@@ -796,10 +796,10 @@ under the License.\n                          \n   <UMapping id=\"10\" resource_name=\"ws-target-resource-update-resetsynctoken\"/>\n   <UMappingItem id=\"300\" mapping_id=\"10\"\n-                extAttrName=\"userId\" intAttrName=\"userId\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n+                extAttrName=\"userId\" intAttrName=\"userId\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"false\"\n                 accountid=\"1\" password=\"0\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"301\" mapping_id=\"10\"\n-                extAttrName=\"__PASSWORD__\" intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n+                extAttrName=\"__PASSWORD__\" intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\" mandatoryCondition=\"false\"\n                 accountid=\"0\" password=\"1\" purpose=\"BOTH\"/>\n \n   <UMapping id=\"11\" resource_name=\"resource-ldap\"\n@@ -811,31 +811,31 @@ under the License.\n                 extAttrName=\"__PASSWORD__\" intAttrName=\"Password\" intMappingType=\"Password\"\n                 mandatoryCondition=\"true\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"313\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n-                extAttrName=\"sn\" intAttrName=\"surname\" intMappingType=\"UserSchema\"\n+                extAttrName=\"sn\" intAttrName=\"surname\" intMappingType=\"UserPlainSchema\"\n                 mandatoryCondition=\"true\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"314\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n-                extAttrName=\"cn\" intAttrName=\"fullname\" intMappingType=\"UserSchema\"\n+                extAttrName=\"cn\" intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\"\n                 mandatoryCondition=\"true\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"315\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n-                extAttrName=\"mail\" intAttrName=\"email\" intMappingType=\"UserSchema\"\n+                extAttrName=\"mail\" intAttrName=\"email\" intMappingType=\"UserPlainSchema\"\n                 mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"316\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n-                extAttrName=\"title\" intAttrName=\"title\" intMappingType=\"RoleSchema\"\n+                extAttrName=\"title\" intAttrName=\"title\" intMappingType=\"RolePlainSchema\"\n                 mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"317\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n-                extAttrName=\"postalAddress\" intAttrName=\"postalAddress\" intMappingType=\"MembershipSchema\"\n+                extAttrName=\"postalAddress\" intAttrName=\"postalAddress\" intMappingType=\"MembershipPlainSchema\"\n                 mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"318\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n-                extAttrName=\"mail\" intAttrName=\"userId\" intMappingType=\"UserSchema\"\n+                extAttrName=\"mail\" intAttrName=\"userId\" intMappingType=\"UserPlainSchema\"\n                 mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"319\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n                 extAttrName=\"givenname\" intAttrName=\"virtualReadOnly\" intMappingType=\"UserVirtualSchema\"\n                 mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"320\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n-                extAttrName=\"registeredAddress\" intAttrName=\"obscure\" intMappingType=\"UserSchema\"\n+                extAttrName=\"registeredAddress\" intAttrName=\"obscure\" intMappingType=\"UserPlainSchema\"\n                 mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"321\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n-                extAttrName=\"jpegPhoto\" intAttrName=\"photo\" intMappingType=\"UserSchema\"\n+                extAttrName=\"jpegPhoto\" intAttrName=\"photo\" intMappingType=\"UserPlainSchema\"\n                 mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   \n   <RMapping id=\"1\" resource_name=\"resource-ldap\"\n@@ -847,30 +847,30 @@ under the License.\n                 extAttrName=\"owner\" intAttrName=\"roleOwnerSchema\" intMappingType=\"RoleOwnerSchema\"\n                 mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <RMappingItem id=\"3\" accountid=\"0\" password=\"0\" mapping_id=\"1\"\n-                extAttrName=\"description\" intAttrName=\"title\" intMappingType=\"RoleSchema\"\n+                extAttrName=\"description\" intAttrName=\"title\" intMappingType=\"RolePlainSchema\"\n                 mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <RMappingItem id=\"4\" extAttrName=\"businessCategory\" mapping_id=\"1\"\n                 intAttrName=\"rvirtualdata\" intMappingType=\"RoleVirtualSchema\" mandatoryCondition=\"false\"\n                 accountid=\"0\" password=\"0\" purpose=\"BOTH\"/>\n         \n   <UMapping id=\"16\" resource_name=\"resource-db-sync\"/>\n   <UMappingItem id=\"322\" accountid=\"0\" mapping_id=\"16\"\n-                extAttrName=\"EMAIL\" intAttrName=\"email\" intMappingType=\"UserSchema\" \n+                extAttrName=\"EMAIL\" intAttrName=\"email\" intMappingType=\"UserPlainSchema\" \n                 mandatoryCondition=\"false\" password=\"0\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"323\" accountid=\"0\" mapping_id=\"16\"\n-                extAttrName=\"SURNAME\" intAttrName=\"fullname\" intMappingType=\"UserSchema\" \n+                extAttrName=\"SURNAME\" intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\" \n                 mandatoryCondition=\"false\" password=\"0\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"324\" accountid=\"1\" mapping_id=\"16\"\n-                extAttrName=\"ID\" intAttrName=\"aLong\" intMappingType=\"UserSchema\" \n+                extAttrName=\"ID\" intAttrName=\"aLong\" intMappingType=\"UserPlainSchema\" \n                 mandatoryCondition=\"false\" password=\"0\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"325\" accountid=\"0\" mapping_id=\"16\"\n-                extAttrName=\"SURNAME\" intAttrName=\"surname\" intMappingType=\"UserSchema\" \n+                extAttrName=\"SURNAME\" intAttrName=\"surname\" intMappingType=\"UserPlainSchema\" \n                 mandatoryCondition=\"false\" password=\"0\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"326\" accountid=\"0\" mapping_id=\"16\"\n                 extAttrName=\"USERNAME\" intAttrName=\"Username\" intMappingType=\"Username\" \n                 mandatoryCondition=\"false\" password=\"0\" purpose=\"BOTH\"/>\n   <UMappingItem id=\"327\" accountid=\"0\" mapping_id=\"16\"\n-                extAttrName=\"EMAIL\" intAttrName=\"userId\" intMappingType=\"UserSchema\" \n+                extAttrName=\"EMAIL\" intAttrName=\"userId\" intMappingType=\"UserPlainSchema\" \n                 mandatoryCondition=\"false\" password=\"0\" purpose=\"BOTH\"/>\n               \n   <UMapping id=\"17\" resource_name=\"resource-db-virattr\"/>\n@@ -883,7 +883,7 @@ under the License.\n                 \n   <UMapping id=\"18\" resource_name=\"ws-target-resource-timeout\"/>\n   <UMappingItem id=\"333\" mapping_id=\"18\" accountid=\"1\" password=\"0\"\n-                extAttrName=\"fullname\" intAttrName=\"fullname\" intMappingType=\"UserSchema\"\n+                extAttrName=\"fullname\" intAttrName=\"fullname\" intMappingType=\"UserPlainSchema\"\n                 mandatoryCondition=\"true\" purpose=\"PROPAGATION\"/>\n   \n   <UMapping id=\"19\" resource_name=\"ws-target-resource-delete\"/>\n@@ -904,7 +904,7 @@ under the License.\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"4\" name=\"CSV (update matching; assign unmatching)\" resource_name=\"resource-csv\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         jobClassName=\"org.apache.syncope.server.provisioning.api.job.SyncJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\"\n-        userTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"password\":null,\"status\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"attributes\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}],\"derivedAttributes\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[null]}],\"virtualAttributes\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"memberships\":[{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"id\":0,\"roleId\":8,\"roleName\":null,\"attributes\":[{\"schema\":\"subscriptionDate\",\"readonly\":false,\"values\":[\"&apos;2009-08-18T16:33:12.203+0200&apos;\"]}],\"derivedAttributes\":[],\"virtualAttributes\":[]}]}'\n+        userTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"password\":null,\"status\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"attributes\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}],\"derivedAttributes\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[null]}],\"virtualAttributes\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"memberships\":[{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"roleId\":8,\"roleName\":null,\"attributes\":[{\"schema\":\"subscriptionDate\",\"readonly\":false,\"values\":[\"&apos;2009-08-18T16:33:12.203+0200&apos;\"]}],\"derivedAttributes\":[],\"virtualAttributes\":[]}]}'\n         roleTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"name\":null,\"parent\":0,\"userOwner\":null,\"roleOwner\":null,\"inheritOwner\":false,\"inheritTemplates\":false,\"inheritPlainAttrs\":false,\"inheritDerAttrs\":false,\"inheritVirAttrs\":false,\"inheritPasswordPolicy\":false,\"inheritAccountPolicy\":false,\"passwordPolicy\":null,\"accountPolicy\":null,\"attributes\":[],\"derivedAttributes\":[],\"virtualAttributes\":[],\"resources\":[],\"propagationStatuses\":[],\"entitlements\":[],\"rAttrTemplates\":[],\"rDerAttrTemplates\":[],\"rVirAttrTemplates\":[],\"mAttrTemplates\":[],\"mDerAttrTemplates\":[],\"mVirAttrTemplates\":[]}'/>\n   <Task DTYPE=\"SchedTask\" type=\"SCHEDULED\" id=\"5\" name=\"SampleJob Task\" jobClassName=\"org.apache.syncope.server.provisioning.java.job.SampleJob\" cronExpression=\"0 0 0 1 * ?\"/>\n   <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"6\" propagationMode=\"TWO_PHASES\" propagationOperation=\"UPDATE\"\n@@ -989,12 +989,12 @@ under the License.\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         jobClassName=\"org.apache.syncope.server.provisioning.api.job.SyncJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"IGNORE\"/>\n \n-  <Notification id=\"1\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserSchema\" selfAsRecipient=\"1\" \n+  <Notification id=\"1\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset request\" template=\"requestPasswordReset\" \n                 traceLevel=\"FAILURES\" userAbout=\"token!=$null\"/> \n   <Notification_events Notification_id=\"1\" events=\"[CUSTOM]:[]:[]:[requestPasswordReset]:[SUCCESS]\"/>\n   \n-  <Notification id=\"2\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserSchema\" selfAsRecipient=\"1\" \n+  <Notification id=\"2\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset successful\" template=\"confirmPasswordReset\" \n                 traceLevel=\"FAILURES\" userAbout=\"token!=$null\"/> \n   <Notification_events Notification_id=\"2\" events=\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"/>\n@@ -1003,15 +1003,15 @@ under the License.\n                 traceLevel=\"FAILURES\"\n                 userAbout=\"fullname==*o*;fullname==*i*\"\n                 recipients=\"$roles==7\"\n-                recipientAttrType=\"UserSchema\" recipientAttrName=\"email\" active=\"1\"/>\n+                recipientAttrType=\"UserPlainSchema\" recipientAttrName=\"email\" active=\"1\"/>\n   <Notification_events Notification_id=\"10\" events=\"[CUSTOM]:[]:[]:[unexisting1]:[FAILURE]\"/>\n   <Notification_events Notification_id=\"10\" events=\"[CUSTOM]:[]:[]:[unexisting2]:[SUCCESS]\"/>\n     \n   <NotificationTask_recipients notificationtask_id=\"8\" address=\"recipient@prova.org\"/>  \n   \n   <Report id=\"1\" name=\"test\"/>\n   <ReportletConfInstance id=\"1\" Report_id=\"1\" \n-                         serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.report.UserReportletConf\",\"name\":\"testUserReportlet\",\"matchingCond\":null,\"attributes\":[\"fullname\",\"gender\"],\"derivedAttributes\":[\"cn\"],\"virtualAttributes\":[\"virtualdata\"],\"features\":[\"key\",\"username\",\"workflowId\",\"status\",\"creationDate\",\"lastLoginDate\",\"changePwdDate\",\"passwordHistorySize\",\"failedLoginCount\",\"memberships\",\"resources\"]}'/>\n+                         serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.report.UserReportletConf\",\"name\":\"testUserReportlet\",\"matchingCond\":null,\"plainAttributes\":[\"fullname\",\"gender\"],\"derivedAttributes\":[\"cn\"],\"virtualAttributes\":[\"virtualdata\"],\"features\":[\"key\",\"username\",\"workflowId\",\"status\",\"creationDate\",\"lastLoginDate\",\"changePwdDate\",\"passwordHistorySize\",\"failedLoginCount\",\"memberships\",\"resources\"]}'/>\n   <ReportExec Report_id=\"1\" id=\"1\" status=\"SUCCESS\" startDate=\"2012-02-26 15:40:04\" endDate=\"2012-02-26 15:41:04\"/>\n   \n   <SyncopeLogger logName=\"syncope.audit.[REST]:[EntitlementController]:[]:[getOwn]:[SUCCESS]\" logLevel=\"DEBUG\" logType=\"AUDIT\"/>"},{"sha":"218f826f362306eb3cf624c9914295e38ee4510a","filename":"syncope620/server/provisioning-api/src/main/java/org/apache/syncope/server/provisioning/api/UserSuspender.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2FUserSuspender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2FUserSuspender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2FUserSuspender.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.server.misc.policy;\n+package org.apache.syncope.server.provisioning.api;\n \n import org.apache.syncope.server.persistence.api.entity.user.User;\n ","previous_filename":"syncope620/server/misc/src/main/java/org/apache/syncope/server/misc/policy/UserSuspender.java"},{"sha":"e77aaca2cf743dc747e7de33c167aad579775477","filename":"syncope620/server/provisioning-api/src/main/java/org/apache/syncope/server/provisioning/api/job/JobInstanceLoader.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fjob%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fjob%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fjob%2FJobInstanceLoader.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.server.logic.init;\n+package org.apache.syncope.server.provisioning.api.job;\n \n import java.text.ParseException;\n import org.apache.syncope.server.persistence.api.entity.Report;","previous_filename":"syncope620/server/logic/src/main/java/org/apache/syncope/server/logic/init/JobInstanceLoader.java"},{"sha":"727770880d9f9bdfb2917cd6c7694612fe3e9024","filename":"syncope620/server/provisioning-api/src/main/java/org/apache/syncope/server/provisioning/api/sync/ProvisioningActions.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FProvisioningActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FProvisioningActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FProvisioningActions.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.server.provisioning.api.sync;\n \n-import java.util.List;\n import org.quartz.JobExecutionException;\n \n public interface ProvisioningActions {\n@@ -35,9 +34,7 @@ public interface ProvisioningActions {\n      * Action to be executed after the synchronization task completion.\n      *\n      * @param profile sync profile\n-     * @param results synchronization result\n      * @throws JobExecutionException in case of generic failure\n      */\n-    void afterAll(final ProvisioningProfile<?, ?> profile, final List<ProvisioningResult> results)\n-            throws JobExecutionException;\n+    void afterAll(final ProvisioningProfile<?, ?> profile) throws JobExecutionException;\n }"},{"sha":"0c765b5a104c7e803270822782795687764997fb","filename":"syncope620/server/provisioning-api/src/main/java/org/apache/syncope/server/provisioning/api/sync/RolePushResultHandler.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FRolePushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FRolePushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FRolePushResultHandler.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.api.sync;\n+\n+public interface RolePushResultHandler extends SyncopePushResultHandler {\n+\n+}"},{"sha":"1f775919d71cf40aee0386986efa44bc66c0b4e9","filename":"syncope620/server/provisioning-api/src/main/java/org/apache/syncope/server/provisioning/api/sync/RoleSyncResultHandler.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FRoleSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FRoleSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FRoleSyncResultHandler.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.api.sync;\n+\n+import java.util.Map;\n+\n+public interface RoleSyncResultHandler extends SyncopeSyncResultHandler {\n+\n+    Map<Long, String> getRoleOwnerMap();\n+}"},{"sha":"bf6f680beee1756cabdf8eeca1f9204c21343b9e","filename":"syncope620/server/provisioning-api/src/main/java/org/apache/syncope/server/provisioning/api/sync/SyncopePushResultHandler.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FSyncopePushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FSyncopePushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FSyncopePushResultHandler.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.api.sync;\n+\n+import org.apache.syncope.server.persistence.api.entity.task.PushTask;\n+\n+public interface SyncopePushResultHandler extends SyncopeResultHandler<PushTask, PushActions> {\n+\n+    boolean handle(long subjectId);\n+}"},{"sha":"111af19bb959e774d7f300c32da5541b1080448c","filename":"syncope620/server/provisioning-api/src/main/java/org/apache/syncope/server/provisioning/api/sync/SyncopeSyncResultHandler.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FSyncopeSyncResultHandler.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.api.sync;\n+\n+import org.apache.syncope.server.persistence.api.entity.task.SyncTask;\n+import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n+\n+public interface SyncopeSyncResultHandler extends SyncopeResultHandler<SyncTask, SyncActions>, SyncResultsHandler {\n+\n+    @Override\n+    boolean handle(SyncDelta delta);\n+}"},{"sha":"6d93a871e0aaae29d4ae6ed3fd3748d482ddbce6","filename":"syncope620/server/provisioning-api/src/main/java/org/apache/syncope/server/provisioning/api/sync/UserPushResultHandler.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FUserPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FUserPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FUserPushResultHandler.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.api.sync;\n+\n+public interface UserPushResultHandler extends SyncopePushResultHandler {\n+\n+}"},{"sha":"00b972cf00f35e49753691401e661d324c068b2c","filename":"syncope620/server/provisioning-api/src/main/java/org/apache/syncope/server/provisioning/api/sync/UserSyncResultHandler.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FUserSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FUserSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fsync%2FUserSyncResultHandler.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.api.sync;\n+\n+public interface UserSyncResultHandler extends SyncopeSyncResultHandler {\n+\n+}"},{"sha":"b7e21970311d71dc06acb263edf3605247a2a4a9","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/AsyncConnectorFacade.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -58,7 +58,7 @@ public Future<Uid> authenticate(\n             final GuardedString password,\n             final OperationOptions options) {\n \n-        return new AsyncResult<Uid>(connector.authenticate(ObjectClass.ACCOUNT, username, password, options));\n+        return new AsyncResult<>(connector.authenticate(ObjectClass.ACCOUNT, username, password, options));\n     }\n \n     @Async\n@@ -68,7 +68,7 @@ public Future<Uid> create(\n             final Set<Attribute> attrs,\n             final OperationOptions options) {\n \n-        return new AsyncResult<Uid>(connector.create(objectClass, attrs, options));\n+        return new AsyncResult<>(connector.create(objectClass, attrs, options));\n     }\n \n     @Async\n@@ -79,7 +79,7 @@ public Future<Uid> update(\n             final Set<Attribute> attrs,\n             final OperationOptions options) {\n \n-        return new AsyncResult<Uid>(connector.update(objectClass, uid, attrs, options));\n+        return new AsyncResult<>(connector.update(objectClass, uid, attrs, options));\n     }\n \n     @Async\n@@ -90,14 +90,14 @@ public Future<Uid> delete(\n             final OperationOptions options) {\n \n         connector.delete(objectClass, uid, options);\n-        return new AsyncResult<Uid>(uid);\n+        return new AsyncResult<>(uid);\n     }\n \n     @Async\n     public Future<SyncToken> getLatestSyncToken(\n             final ConnectorFacade connector, final ObjectClass objectClass) {\n \n-        return new AsyncResult<SyncToken>(connector.getLatestSyncToken(objectClass));\n+        return new AsyncResult<>(connector.getLatestSyncToken(objectClass));\n     }\n \n     @Async\n@@ -107,7 +107,7 @@ public Future<ConnectorObject> getObject(\n             final Uid uid,\n             final OperationOptions options) {\n \n-        return new AsyncResult<ConnectorObject>(connector.getObject(objectClass, uid, options));\n+        return new AsyncResult<>(connector.getObject(objectClass, uid, options));\n     }\n \n     @Async\n@@ -127,7 +127,7 @@ public Future<Attribute> getObjectAttribute(\n             attribute = object.getAttributeByName(attributeName);\n         }\n \n-        return new AsyncResult<Attribute>(attribute);\n+        return new AsyncResult<>(attribute);\n     }\n \n     @Async\n@@ -137,7 +137,7 @@ public Future<Set<Attribute>> getObjectAttributes(\n             final Uid uid,\n             final OperationOptions options) {\n \n-        final Set<Attribute> attributes = new HashSet<Attribute>();\n+        final Set<Attribute> attributes = new HashSet<>();\n \n         final ConnectorObject object = connector.getObject(objectClass, uid, options);\n \n@@ -149,7 +149,7 @@ public Future<Set<Attribute>> getObjectAttributes(\n             }\n         }\n \n-        return new AsyncResult<Set<Attribute>>(attributes);\n+        return new AsyncResult<>(attributes);\n     }\n \n     @Async\n@@ -170,7 +170,7 @@ public Future<Set<String>> getSchemaNames(final ConnectorFacade connector, final\n             LOG.debug(\"While reading schema on connector {}\", connector, e);\n         }\n \n-        return new AsyncResult<Set<String>>(schemaNames);\n+        return new AsyncResult<>(schemaNames);\n     }\n \n     @Async\n@@ -187,18 +187,18 @@ public Future<Set<ObjectClass>> getSupportedObjectClasses(final ConnectorFacade\n             LOG.debug(\"While reading schema on connector {}\", connector, e);\n         }\n \n-        return new AsyncResult<Set<ObjectClass>>(objectClasses);\n+        return new AsyncResult<>(objectClasses);\n     }\n \n     @Async\n     public Future<String> validate(final ConnectorFacade connector) {\n         connector.validate();\n-        return new AsyncResult<String>(\"OK\");\n+        return new AsyncResult<>(\"OK\");\n     }\n \n     @Async\n     public Future<String> test(final ConnectorFacade connector) {\n         connector.test();\n-        return new AsyncResult<String>(\"OK\");\n+        return new AsyncResult<>(\"OK\");\n     }\n }"},{"sha":"655797998ad283d3285c39668b5146e8db440d2d","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/ConnectorFacadeProxy.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -388,13 +388,12 @@ public void getAllObjects(\n \n             @Override\n             public boolean handle(final ConnectorObject obj) {\n-                final SyncDeltaBuilder bld = new SyncDeltaBuilder();\n-                bld.setObject(obj);\n-                bld.setUid(obj.getUid());\n-                bld.setDeltaType(SyncDeltaType.CREATE_OR_UPDATE);\n-                bld.setToken(new SyncToken(\"\"));\n-\n-                return handler.handle(bld.build());\n+                return handler.handle(new SyncDeltaBuilder().\n+                        setObject(obj).\n+                        setUid(obj.getUid()).\n+                        setDeltaType(SyncDeltaType.CREATE_OR_UPDATE).\n+                        setToken(new SyncToken(\"\")).\n+                        build());\n             }\n         }, options);\n     }"},{"sha":"06f205bc2094820e06d46a3ba6f49ab7dc93b2b6","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/DefaultRoleProvisioningManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FDefaultRoleProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FDefaultRoleProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FDefaultRoleProvisioningManager.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -99,7 +99,7 @@ public Map.Entry<Long, List<PropagationStatus>> create(\n             final RoleTO roleTO, final Map<Long, String> roleOwnerMap, final Set<String> excludedResources) {\n \n         WorkflowResult<Long> created = rwfAdapter.create((RoleTO) roleTO);\n-        AttrTO roleOwner = roleTO.getAttrMap().get(StringUtils.EMPTY);\n+        AttrTO roleOwner = roleTO.getPlainAttrMap().get(StringUtils.EMPTY);\n         if (roleOwner != null) {\n             roleOwnerMap.put(created.getResult(), roleOwner.getValues().iterator().next());\n         }"},{"sha":"3c4225ef6ee206aee0d2364ed3b14c06a1eed501","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":14,"deletions":13,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -73,6 +73,7 @@ public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO) {\n         return create(userTO, true, false, null, Collections.<String>emptySet());\n     }\n \n+    @Override\n     public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean storePassword) {\n         return create(userTO, storePassword, false, null, Collections.<String>emptySet());\n     }\n@@ -99,7 +100,7 @@ public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO, fina\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(\n+        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<>(\n                 created.getResult().getKey(), propagationReporter.getStatuses());\n         return result;\n     }\n@@ -149,7 +150,7 @@ public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod, fi\n             }\n         }\n \n-        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(\n+        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<>(\n                 updated.getResult().getKey().getKey(), propagationReporter.getStatuses());\n         return result;\n     }\n@@ -198,11 +199,11 @@ public Map.Entry<Long, List<PropagationStatus>> activate(final User user, final\n         if (statusMod.isOnSyncope()) {\n             updated = uwfAdapter.activate(user.getKey(), statusMod.getToken());\n         } else {\n-            updated = new WorkflowResult<Long>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n+            updated = new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n         }\n \n         List<PropagationStatus> statuses = propagateStatus(user, statusMod);\n-        return new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(updated.getResult(), statuses);\n+        return new AbstractMap.SimpleEntry<>(updated.getResult(), statuses);\n     }\n \n     @Override\n@@ -211,11 +212,11 @@ public Map.Entry<Long, List<PropagationStatus>> reactivate(final User user, fina\n         if (statusMod.isOnSyncope()) {\n             updated = uwfAdapter.reactivate(user.getKey());\n         } else {\n-            updated = new WorkflowResult<Long>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n+            updated = new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n         }\n \n         List<PropagationStatus> statuses = propagateStatus(user, statusMod);\n-        return new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(updated.getResult(), statuses);\n+        return new AbstractMap.SimpleEntry<>(updated.getResult(), statuses);\n     }\n \n     @Override\n@@ -224,15 +225,15 @@ public Map.Entry<Long, List<PropagationStatus>> suspend(final User user, final S\n         if (statusMod.isOnSyncope()) {\n             updated = uwfAdapter.suspend(user.getKey());\n         } else {\n-            updated = new WorkflowResult<Long>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n+            updated = new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n         }\n \n         List<PropagationStatus> statuses = propagateStatus(user, statusMod);\n-        return new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(updated.getResult(), statuses);\n+        return new AbstractMap.SimpleEntry<>(updated.getResult(), statuses);\n     }\n \n     protected List<PropagationStatus> propagateStatus(final User user, final StatusMod statusMod) {\n-        Set<String> resourcesToBeExcluded = new HashSet<String>(user.getResourceNames());\n+        Set<String> resourcesToBeExcluded = new HashSet<>(user.getResourceNames());\n         resourcesToBeExcluded.removeAll(statusMod.getResourceNames());\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n@@ -261,7 +262,7 @@ public void innerSuspend(final User user, final boolean propagate) {\n \n             final List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n                     new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n-                            new AbstractMap.SimpleEntry<UserMod, Boolean>(userMod, Boolean.FALSE),\n+                            new AbstractMap.SimpleEntry<>(userMod, Boolean.FALSE),\n                             updated.getPropByRes(), updated.getPerformedTasks()));\n \n             taskExecutor.execute(tasks);\n@@ -276,7 +277,7 @@ public List<PropagationStatus> deprovision(final Long userKey, final Collection<\n         noPropResourceName.removeAll(resources);\n \n         final List<PropagationTask> tasks =\n-                propagationManager.getUserDeleteTaskIds(userKey, new HashSet<String>(resources), noPropResourceName);\n+                propagationManager.getUserDeleteTaskIds(userKey, new HashSet<>(resources), noPropResourceName);\n         final PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n@@ -303,7 +304,7 @@ public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod, fi\n             result.setMessage(\"Update failed, trying to sync status anyway (if configured)\\n\" + e.getMessage());\n \n             updated = new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n-                    new AbstractMap.SimpleEntry<UserMod, Boolean>(userMod, false), new PropagationByResource(),\n+                    new AbstractMap.SimpleEntry<>(userMod, false), new PropagationByResource(),\n                     new HashSet<String>());\n         }\n \n@@ -341,7 +342,7 @@ public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod, fi\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        return new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(updated.getResult().getKey().getKey(),\n+        return new AbstractMap.SimpleEntry<>(updated.getResult().getKey().getKey(),\n                 propagationReporter.getStatuses());\n \n     }"},{"sha":"357c15fb9e4dfb9d1f6bc3e1766544aa6bb25a31","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/UserSuspenderImpl.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FUserSuspenderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FUserSuspenderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FUserSuspenderImpl.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.java;\n+\n+import org.apache.syncope.server.provisioning.api.UserSuspender;\n+import org.apache.syncope.server.persistence.api.entity.user.User;\n+import org.apache.syncope.server.provisioning.api.UserProvisioningManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class UserSuspenderImpl implements UserSuspender {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(UserSuspenderImpl.class);\n+\n+    @Autowired\n+    private UserProvisioningManager provisioningManager;\n+\n+    @Override\n+    public void suspend(final User user, final boolean suspend) {\n+        try {\n+            LOG.debug(\"User {}:{} is over to max failed logins\", user.getKey(), user.getUsername());\n+\n+            // reduce failed logins number to avoid multiple request\n+            user.setFailedLogins(user.getFailedLogins() - 1);\n+\n+            // disable user and propagate suspension if and only if it is required by policy          \n+            provisioningManager.innerSuspend(user, suspend);\n+        } catch (Exception e) {\n+            LOG.error(\"Error during user suspension\", e);\n+        }\n+    }\n+}"},{"sha":"f7e75c0ec2986de17c37eda46e5c85b99a62d5cd","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/data/AbstractAttributableDataBinder.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FAbstractAttributableDataBinder.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -215,7 +215,7 @@ protected void fillAttribute(final List<String> values, final AttributableUtil a\n     }\n \n     private boolean evaluateMandatoryCondition(final AttributableUtil attrUtil, final ExternalResource resource,\n-            final Attributable attributable, final String intAttrName, final IntMappingType intMappingType) {\n+            final Attributable<?,?,?> attributable, final String intAttrName, final IntMappingType intMappingType) {\n \n         boolean result = false;\n \n@@ -409,15 +409,15 @@ protected PropagationByResource fill(final Attributable attributable,\n         }\n \n         // 3. attributes to be removed\n-        for (String attributeToBeRemoved : attributableMod.getAttrsToRemove()) {\n+        for (String attributeToBeRemoved : attributableMod.getPlainAttrsToRemove()) {\n             PlainSchema schema = getPlainSchema(attributeToBeRemoved, attrUtil.plainSchemaClass());\n             if (schema != null) {\n                 PlainAttr attr = attributable.getPlainAttr(schema.getKey());\n                 if (attr == null) {\n                     LOG.debug(\"No attribute found for schema {}\", schema);\n                 } else {\n                     String newValue = null;\n-                    for (AttrMod mod : attributableMod.getAttrsToUpdate()) {\n+                    for (AttrMod mod : attributableMod.getPlainAttrsToUpdate()) {\n                         if (schema.getKey().equals(mod.getSchema())) {\n                             newValue = mod.getValuesToBeAdded().get(0);\n                         }\n@@ -456,7 +456,7 @@ protected PropagationByResource fill(final Attributable attributable,\n         LOG.debug(\"Attributes to be removed:\\n{}\", propByRes);\n \n         // 4. attributes to be updated\n-        for (AttrMod attributeMod : attributableMod.getAttrsToUpdate()) {\n+        for (AttrMod attributeMod : attributableMod.getPlainAttrsToUpdate()) {\n             PlainSchema schema = getPlainSchema(attributeMod.getSchema(), attrUtil.plainSchemaClass());\n             PlainAttr attr = null;\n             if (schema != null) {"},{"sha":"6ffe2fc353010f7487c91ff3c43853eec81ab03b","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/data/ReportDataBinderImpl.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.server.provisioning.java.data;\n \n+import java.util.HashSet;\n+import java.util.Set;\n import org.apache.syncope.server.provisioning.api.data.ReportDataBinder;\n import org.apache.syncope.common.lib.report.AbstractReportletConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n@@ -59,7 +61,17 @@ public class ReportDataBinderImpl implements ReportDataBinder {\n     @Override\n     public void getReport(final Report report, final ReportTO reportTO) {\n         BeanUtils.copyProperties(reportTO, report, IGNORE_REPORT_PROPERTIES);\n-        report.getReportletConfs().clear();\n+\n+        // 1. remove all reportlet confs\n+        Set<ReportletConf> toRemove = new HashSet<>();\n+        for (ReportletConf conf : report.getReportletConfs()) {\n+            toRemove.add(conf);\n+        }\n+        for (ReportletConf conf : toRemove) {\n+            report.removeReportletConf(conf);\n+        }\n+\n+        // 2. take all reportlet confs from reportTO\n         for (ReportletConf conf : reportTO.getReportletConfs()) {\n             report.addReportletConf(conf);\n         }"},{"sha":"851799c638dce80cf92daab734a369ebd1789946","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/data/RoleDataBinderImpl.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -29,7 +29,6 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.server.persistence.api.dao.EntitlementDAO;\n-import org.apache.syncope.server.persistence.api.dao.RoleDAO;\n import org.apache.syncope.server.persistence.api.entity.AccountPolicy;\n import org.apache.syncope.server.persistence.api.entity.AttrTemplate;\n import org.apache.syncope.server.persistence.api.entity.Entitlement;\n@@ -63,9 +62,6 @@\n @Transactional(rollbackFor = { Throwable.class })\n public class RoleDataBinderImpl extends AbstractAttributableDataBinder implements RoleDataBinder {\n \n-    @Autowired\n-    private RoleDAO roleDAO;\n-\n     @Autowired\n     private ConnObjectUtil connObjectUtil;\n \n@@ -76,7 +72,7 @@ private <T extends AttrTemplate<S>, S extends Schema> void setAttrTemplates(\n             final Role role, final List<String> schemaNames,\n             final Class<T> templateClass, final Class<S> schemaClass) {\n \n-        List<T> toRemove = new ArrayList<T>();\n+        List<T> toRemove = new ArrayList<>();\n         for (T template : role.getAttrTemplates(templateClass)) {\n             if (!schemaNames.contains(template.getSchema().getKey())) {\n                 toRemove.add(template);\n@@ -89,7 +85,7 @@ private <T extends AttrTemplate<S>, S extends Schema> void setAttrTemplates(\n                 S schema = getSchema(schemaName, schemaClass);\n                 if (schema != null) {\n                     try {\n-                        T template = templateClass.newInstance();\n+                        T template = entityFactory.newEntity(templateClass);\n                         template.setSchema(schema);\n                         template.setOwner(role);\n                         role.getAttrTemplates(templateClass).add(template);\n@@ -105,7 +101,7 @@ private <T extends AttrTemplate<S>, S extends Schema> void setAttrTemplates(\n     public Role create(final Role role, final RoleTO roleTO) {\n         role.setInheritOwner(roleTO.isInheritOwner());\n \n-        role.setInheritPlainAttrs(roleTO.isInheritAttrs());\n+        role.setInheritPlainAttrs(roleTO.isInheritPlainAttrs());\n         role.setInheritDerAttrs(roleTO.isInheritDerAttrs());\n         role.setInheritVirAttrs(roleTO.isInheritVirAttrs());\n \n@@ -335,7 +331,7 @@ public RoleTO getRoleTO(final Role role) {\n \n         roleTO.setInheritTemplates(role.isInheritTemplates());\n \n-        roleTO.setInheritAttrs(role.isInheritPlainAttrs());\n+        roleTO.setInheritPlainAttrs(role.isInheritPlainAttrs());\n         roleTO.setInheritDerAttrs(role.isInheritDerAttrs());\n         roleTO.setInheritVirAttrs(role.isInheritVirAttrs());\n "},{"sha":"31141c07b1dd2cce7f52b5569c8118455cc1c617","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/data/SchemaDataBinderImpl.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -69,15 +69,13 @@ public <T extends PlainSchema> void update(final PlainSchemaTO schemaTO, final T\n         List<PlainAttr> attrs = schemaDAO.findAttrs(schema, attributableUtil.plainAttrClass());\n         if (!attrs.isEmpty()) {\n             if (schema.getType() != schemaTO.getType()) {\n-                SyncopeClientException e = SyncopeClientException.build(\n-                        ClientExceptionType.valueOf(\"Invalid\" + schema.getClass().getSimpleName()));\n+                SyncopeClientException e = SyncopeClientException.build(ClientExceptionType.InvalidPlainSchema);\n                 e.getElements().add(\"Cannot change type since \" + schema.getKey() + \" has attributes\");\n \n                 scce.addException(e);\n             }\n             if (schema.isUniqueConstraint() != schemaTO.isUniqueConstraint()) {\n-                SyncopeClientException e = SyncopeClientException.build(ClientExceptionType.valueOf(\"Invalid\"\n-                        + schema.getClass().getSimpleName()));\n+                SyncopeClientException e = SyncopeClientException.build(ClientExceptionType.InvalidPlainSchema);\n                 e.getElements().add(\"Cannot alter unique contraint since \" + schema.getKey() + \" has attributes\");\n \n                 scce.addException(e);\n@@ -112,11 +110,10 @@ private <T extends DerSchema> T populate(final T derSchema, final DerSchemaTO de\n \n             scce.addException(requiredValuesMissing);\n         } else if (!JexlUtil.isExpressionValid(derSchemaTO.getExpression())) {\n-            SyncopeClientException invalidMandatoryCondition = SyncopeClientException.build(\n-                    ClientExceptionType.InvalidValues);\n-            invalidMandatoryCondition.getElements().add(derSchemaTO.getExpression());\n+            SyncopeClientException e = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n+            e.getElements().add(derSchemaTO.getExpression());\n \n-            scce.addException(invalidMandatoryCondition);\n+            scce.addException(e);\n         }\n \n         if (scce.hasExceptions()) {"},{"sha":"920d29485f873a868a4b30e6f3e4e8cbb872d626","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -180,7 +180,7 @@ public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtil taskUt\n         final Class<? extends AbstractTaskTO> taskTOClass = taskUtil.taskTOClass();\n \n         if (taskTOClass == null || !taskTOClass.equals(taskTO.getClass())) {\n-            throw new ClassCastException(\n+            throw new IllegalArgumentException(\n                     String.format(\"taskUtil is type %s but task is not: %s\", taskTOClass, taskTO.getClass()));\n         }\n \n@@ -211,13 +211,13 @@ public void updateSchedTask(final SchedTask task, final SchedTaskTO taskTO, fina\n         Class<? extends Task> taskClass = taskUtil.taskClass();\n         Class<? extends AbstractTaskTO> taskTOClass = taskUtil.taskTOClass();\n \n-        if (taskClass == null || !taskClass.equals(task.getClass())) {\n-            throw new ClassCastException(\n+        if (taskClass == null || !taskClass.isAssignableFrom(task.getClass())) {\n+            throw new IllegalArgumentException(\n                     String.format(\"taskUtil is type %s but task is not: %s\", taskClass, task.getClass()));\n         }\n \n         if (taskTOClass == null || !taskTOClass.equals(taskTO.getClass())) {\n-            throw new ClassCastException(\n+            throw new IllegalArgumentException(\n                     String.format(\"taskUtil is type %s but task is not: %s\", taskTOClass, taskTO.getClass()));\n         }\n \n@@ -283,15 +283,15 @@ public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtil ta\n         switch (taskUtil.getType()) {\n             case PROPAGATION:\n                 if (!(task instanceof PropagationTask)) {\n-                    throw new ClassCastException(\"taskUtil is type Propagation but task is not PropagationTask: \"\n+                    throw new IllegalArgumentException(\"taskUtil is type Propagation but task is not PropagationTask: \"\n                             + task.getClass().getName());\n                 }\n                 ((PropagationTaskTO) taskTO).setResource(((PropagationTask) task).getResource().getKey());\n                 break;\n \n             case SCHEDULED:\n                 if (!(task instanceof SchedTask)) {\n-                    throw new ClassCastException(\"taskUtil is type Sched but task is not SchedTask: \"\n+                    throw new IllegalArgumentException(\"taskUtil is type Sched but task is not SchedTask: \"\n                             + task.getClass().getName());\n                 }\n                 setExecTime((SchedTaskTO) taskTO, task);\n@@ -301,7 +301,7 @@ public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtil ta\n \n             case SYNCHRONIZATION:\n                 if (!(task instanceof SyncTask)) {\n-                    throw new ClassCastException(\"taskUtil is type Sync but task is not SyncTask: \"\n+                    throw new IllegalArgumentException(\"taskUtil is type Sync but task is not SyncTask: \"\n                             + task.getClass().getName());\n                 }\n                 setExecTime((SchedTaskTO) taskTO, task);\n@@ -316,7 +316,7 @@ public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtil ta\n \n             case PUSH:\n                 if (!(task instanceof PushTask)) {\n-                    throw new ClassCastException(\"taskUtil is type Push but task is not PushTask: \"\n+                    throw new IllegalArgumentException(\"taskUtil is type Push but task is not PushTask: \"\n                             + task.getClass().getName());\n                 }\n                 setExecTime((SchedTaskTO) taskTO, task);"},{"sha":"b56e92046a9ed76b135f080a024536cc0042d27c","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/job/SpringBeanJobFactory.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fjob%2FSpringBeanJobFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fjob%2FSpringBeanJobFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fjob%2FSpringBeanJobFactory.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -16,10 +16,10 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.server.logic;\n+package org.apache.syncope.server.provisioning.java.job;\n \n import org.apache.syncope.server.provisioning.api.job.JobNamer;\n-import org.apache.syncope.server.logic.init.JobInstanceLoader;\n+import org.apache.syncope.server.provisioning.api.job.JobInstanceLoader;\n import org.quartz.SchedulerContext;\n import org.quartz.spi.TriggerFiredBundle;\n import org.springframework.beans.BeanWrapper;","previous_filename":"syncope620/server/logic/src/main/java/org/apache/syncope/server/logic/SpringBeanJobFactory.java"},{"sha":"436f32ca29c0dae191c36d4781d295f1f5bc2893","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/notification/NotificationManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManager.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -350,7 +350,7 @@ private String getRecipientEmail(\n                 email = user.getUsername();\n                 break;\n \n-            case UserSchema:\n+            case UserPlainSchema:\n                 UPlainAttr attr = user.getPlainAttr(recipientAttrName);\n                 if (attr != null && !attr.getValuesAsStrings().isEmpty()) {\n                     email = attr.getValuesAsStrings().get(0);"},{"sha":"6d7bf383fb656a33c52726d3dbb56d314e8e697a","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -76,7 +76,7 @@ public void execute(final Collection<PropagationTask> tasks, final PropagationRe\n                     null,\n                     null,\n                     result,\n-                    reporter.getStatuses(),\n+                    reporter == null ? null : reporter.getStatuses(),\n                     tasks);\n \n             auditManager.audit(\n@@ -85,7 +85,7 @@ public void execute(final Collection<PropagationTask> tasks, final PropagationRe\n                     null,\n                     null,\n                     result,\n-                    reporter.getStatuses(),\n+                    reporter == null ? null : reporter.getStatuses(),\n                     tasks);\n         }\n     }"},{"sha":"311c6075275482c615d6686eefbe878c579ef04c","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/AbstractProvisioningJob.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -20,6 +20,7 @@\n \n import java.lang.reflect.ParameterizedType;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.server.persistence.api.dao.EntitlementDAO;\n@@ -97,7 +98,7 @@ public void setActions(final List<A> actions) {\n      * @param dryRun dry run?\n      * @return report as string\n      */\n-    protected String createReport(final List<ProvisioningResult> provResults, final TraceLevel syncTraceLevel,\n+    protected String createReport(final Collection<ProvisioningResult> provResults, final TraceLevel syncTraceLevel,\n             final boolean dryRun) {\n \n         if (syncTraceLevel == TraceLevel.NONE) {\n@@ -341,7 +342,9 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n                     uMapping,\n                     rMapping,\n                     dryRun);\n-\n+        } catch (Throwable t) {\n+            LOG.error(\"While executing provisioning job {}\", getClass().getName(), t);\n+            throw t;\n         } finally {\n             // POST: clean up the SecurityContextHolder\n             SecurityContextHolder.clearContext();"},{"sha":"74cd5f01d12ac4e2931837be4a43e076303a3ce2","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/AbstractPushResultHandler.java","status":"renamed","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -45,11 +45,13 @@\n import org.apache.syncope.server.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.server.provisioning.api.sync.PushActions;\n import org.apache.syncope.server.misc.MappingUtil;\n+import org.apache.syncope.server.provisioning.api.sync.SyncopePushResultHandler;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.quartz.JobExecutionException;\n import org.springframework.transaction.annotation.Transactional;\n \n-public abstract class AbstractSubjectPushResultHandler extends AbstractSyncopeResultHandler<PushTask, PushActions> {\n+public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHandler<PushTask, PushActions>\n+        implements SyncopePushResultHandler {\n \n     protected abstract String getName(final Subject<?, ?, ?> subject);\n \n@@ -72,6 +74,7 @@ public abstract class AbstractSubjectPushResultHandler extends AbstractSyncopeRe\n     protected abstract ConnectorObject getRemoteObject(final String accountId);\n \n     @Transactional\n+    @Override\n     public boolean handle(final long subjectId) {\n         try {\n             doHandle(subjectId);","previous_filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/AbstractSubjectPushResultHandler.java"},{"sha":"83377f36cc5117b0b1fa0dfbd2f4ed862a7a568c","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/AbstractSyncResultHandler.java","status":"renamed","additions":30,"deletions":37,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.server.provisioning.java.sync;\n \n import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n@@ -29,22 +28,21 @@\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.server.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.server.persistence.api.dao.UserDAO;\n import org.apache.syncope.server.persistence.api.entity.AttributableUtil;\n import org.apache.syncope.server.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.server.provisioning.api.AttributableTransformer;\n import org.apache.syncope.server.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.server.provisioning.api.sync.SyncActions;\n import org.apache.syncope.server.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.server.misc.security.UnauthorizedRoleException;\n+import org.apache.syncope.server.provisioning.api.sync.SyncopeSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.identityconnectors.framework.common.objects.SyncDeltaType;\n-import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-public abstract class AbstractSubjectSyncResultHandler extends AbstractSyncopeResultHandler<SyncTask, SyncActions>\n-        implements SyncResultsHandler {\n+public abstract class AbstractSyncResultHandler extends AbstractSyncopeResultHandler<SyncTask, SyncActions>\n+        implements SyncopeSyncResultHandler {\n \n     @Autowired\n     protected SyncUtilities syncUtilities;\n@@ -74,7 +72,7 @@ protected abstract AbstractSubjectTO update(AbstractSubjectTO before, AbstractSu\n     @Override\n     public boolean handle(final SyncDelta delta) {\n         try {\n-            doHandle(delta, profile.getResults());\n+            doHandle(delta);\n             return true;\n         } catch (JobExecutionException e) {\n             LOG.error(\"Synchronization failed\", e);\n@@ -203,30 +201,27 @@ protected List<ProvisioningResult> update(SyncDelta delta, final List<Long> subj\n \n         LOG.debug(\"About to update {}\", subjects);\n \n-        List<ProvisioningResult> updResults = new ArrayList<>();\n+        List<ProvisioningResult> results = new ArrayList<>();\n \n-        for (Long id : subjects) {\n-            LOG.debug(\"About to update {}\", id);\n-\n-            Object output;\n-            AbstractSubjectTO before = null;\n-            Result resultStatus;\n+        for (Long key : subjects) {\n+            LOG.debug(\"About to update {}\", key);\n \n             final ProvisioningResult result = new ProvisioningResult();\n             result.setOperation(ResourceOperation.UPDATE);\n             result.setSubjectType(attrUtil.getType());\n             result.setStatus(ProvisioningResult.Status.SUCCESS);\n-            result.setId(id);\n-\n-            before = getSubjectTO(id);\n+            result.setId(key);\n \n+            AbstractSubjectTO before = getSubjectTO(key);\n             if (before == null) {\n                 result.setStatus(ProvisioningResult.Status.FAILURE);\n-                result.setMessage(String.format(\"Subject '%s(%d)' not found\", attrUtil.getType().name(), id));\n+                result.setMessage(String.format(\"Subject '%s(%d)' not found\", attrUtil.getType().name(), key));\n             } else {\n                 result.setName(getName(before));\n             }\n \n+            Result resultStatus;\n+            Object output;\n             if (!profile.isDryRun()) {\n                 if (before == null) {\n                     resultStatus = Result.FAILURE;\n@@ -252,7 +247,7 @@ protected List<ProvisioningResult> update(SyncDelta delta, final List<Long> subj\n                         output = updated;\n                         resultStatus = Result.SUCCESS;\n                         result.setName(getName(updated));\n-                        LOG.debug(\"{} {} successfully updated\", attrUtil.getType(), id);\n+                        LOG.debug(\"{} {} successfully updated\", attrUtil.getType(), key);\n                     } catch (PropagationException e) {\n                         // A propagation failure doesn't imply a synchronization failure.\n                         // The propagation exception status will be reported into the propagation task execution.\n@@ -269,9 +264,9 @@ protected List<ProvisioningResult> update(SyncDelta delta, final List<Long> subj\n                 }\n                 audit(\"update\", resultStatus, before, output, delta);\n             }\n-            updResults.add(result);\n+            results.add(result);\n         }\n-        return updResults;\n+        return results;\n     }\n \n     protected List<ProvisioningResult> deprovision(\n@@ -513,7 +508,7 @@ protected List<ProvisioningResult> delete(\n      * @param delta returned by the underlying profile.getConnector()\n      * @throws JobExecutionException in case of synchronization failure.\n      */\n-    protected final void doHandle(final SyncDelta delta, final Collection<ProvisioningResult> syncResults)\n+    protected final void doHandle(final SyncDelta delta)\n             throws JobExecutionException {\n \n         final AttributableUtil attrUtil = getAttributableUtil();\n@@ -526,20 +521,20 @@ protected final void doHandle(final SyncDelta delta, final Collection<Provisioni\n                 : delta.getPreviousUid().getUidValue();\n \n         try {\n-            List<Long> subjectIds = syncUtilities.findExisting(\n+            List<Long> subjectKeys = syncUtilities.findExisting(\n                     uid, delta.getObject(), profile.getTask().getResource(), attrUtil);\n \n-            if (subjectIds.size() > 1) {\n+            if (subjectKeys.size() > 1) {\n                 switch (profile.getResAct()) {\n                     case IGNORE:\n-                        throw new IllegalStateException(\"More than one match \" + subjectIds);\n+                        throw new IllegalStateException(\"More than one match \" + subjectKeys);\n \n                     case FIRSTMATCH:\n-                        subjectIds = subjectIds.subList(0, 1);\n+                        subjectKeys = subjectKeys.subList(0, 1);\n                         break;\n \n                     case LASTMATCH:\n-                        subjectIds = subjectIds.subList(subjectIds.size() - 1, subjectIds.size());\n+                        subjectKeys = subjectKeys.subList(subjectKeys.size() - 1, subjectKeys.size());\n                         break;\n \n                     default:\n@@ -548,7 +543,7 @@ protected final void doHandle(final SyncDelta delta, final Collection<Provisioni\n             }\n \n             if (SyncDeltaType.CREATE_OR_UPDATE == delta.getDeltaType()) {\n-                if (subjectIds.isEmpty()) {\n+                if (subjectKeys.isEmpty()) {\n                     switch (profile.getTask().getUnmatchingRule()) {\n                         case ASSIGN:\n                             profile.getResults().addAll(assign(delta, attrUtil));\n@@ -562,34 +557,32 @@ protected final void doHandle(final SyncDelta delta, final Collection<Provisioni\n                 } else {\n                     switch (profile.getTask().getMatchingRule()) {\n                         case UPDATE:\n-                            profile.getResults().addAll(update(delta, subjectIds, attrUtil));\n+                            profile.getResults().addAll(update(delta, subjectKeys, attrUtil));\n                             break;\n                         case DEPROVISION:\n-                            profile.getResults().addAll(deprovision(delta, subjectIds, attrUtil, false));\n+                            profile.getResults().addAll(deprovision(delta, subjectKeys, attrUtil, false));\n                             break;\n                         case UNASSIGN:\n-                            profile.getResults().addAll(deprovision(delta, subjectIds, attrUtil, true));\n+                            profile.getResults().addAll(deprovision(delta, subjectKeys, attrUtil, true));\n                             break;\n                         case LINK:\n-                            profile.getResults().addAll(link(delta, subjectIds, attrUtil, false));\n+                            profile.getResults().addAll(link(delta, subjectKeys, attrUtil, false));\n                             break;\n                         case UNLINK:\n-                            profile.getResults().addAll(link(delta, subjectIds, attrUtil, true));\n+                            profile.getResults().addAll(link(delta, subjectKeys, attrUtil, true));\n                             break;\n                         default:\n                         // do nothing\n                     }\n                 }\n             } else if (SyncDeltaType.DELETE == delta.getDeltaType()) {\n-                if (subjectIds.isEmpty()) {\n+                if (subjectKeys.isEmpty()) {\n                     LOG.debug(\"No match found for deletion\");\n                 } else {\n-                    profile.getResults().addAll(delete(delta, subjectIds, attrUtil));\n+                    profile.getResults().addAll(delete(delta, subjectKeys, attrUtil));\n                 }\n             }\n-        } catch (IllegalStateException e) {\n-            LOG.warn(e.getMessage());\n-        } catch (IllegalArgumentException e) {\n+        } catch (IllegalStateException | IllegalArgumentException e) {\n             LOG.warn(e.getMessage());\n         }\n     }","previous_filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/AbstractSubjectSyncResultHandler.java"},{"sha":"dbbdd2a83ae93b8023da8a2ef8740b0d98cc305a","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/DefaultPushActions.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.server.provisioning.java.sync;\n \n-import java.util.List;\n import org.apache.syncope.server.persistence.api.entity.Subject;\n import org.apache.syncope.server.provisioning.api.sync.PushActions;\n import org.apache.syncope.server.provisioning.api.sync.ProvisioningProfile;\n@@ -78,11 +77,12 @@ public void beforeAll(final ProvisioningProfile<?, ?> profile) throws JobExecuti\n \n     @Override\n     public <T extends Subject<?, ?, ?>> void after(\n-            final ProvisioningProfile<?, ?> profile, final T subject, final ProvisioningResult result) throws JobExecutionException {\n+            final ProvisioningProfile<?, ?> profile, final T subject, final ProvisioningResult result)\n+            throws JobExecutionException {\n     }\n \n     @Override\n-    public void afterAll(final ProvisioningProfile<?, ?> profile, final List<ProvisioningResult> results)\n+    public void afterAll(final ProvisioningProfile<?, ?> profile)\n             throws JobExecutionException {\n     }\n }"},{"sha":"6589cdf26aa38f6206adcc34a2ee4eadce44609c","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/DefaultSyncActions.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FDefaultSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FDefaultSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FDefaultSyncActions.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.server.provisioning.java.sync;\n \n-import java.util.List;\n import org.apache.syncope.common.lib.mod.AbstractSubjectMod;\n import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n import org.apache.syncope.server.provisioning.api.sync.SyncActions;\n@@ -104,12 +103,13 @@ public <T extends AbstractSubjectTO> SyncDelta beforeUnlink(\n \n     @Override\n     public <T extends AbstractSubjectTO> void after(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T subject, final ProvisioningResult result)\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T subject,\n+            final ProvisioningResult result)\n             throws JobExecutionException {\n     }\n \n     @Override\n-    public void afterAll(final ProvisioningProfile<?, ?> profile, final List<ProvisioningResult> results)\n+    public void afterAll(final ProvisioningProfile<?, ?> profile)\n             throws JobExecutionException {\n     }\n }"},{"sha":"145cd4da01ba3954df6254bf963a486cae805d73","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/LDAPMembershipSyncActions.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -146,17 +146,17 @@ public <T extends AbstractSubjectTO, K extends AbstractSubjectMod> SyncDelta bef\n     /**\n      * Build UserMod for adding membership to given user, for given role.\n      *\n-     * @param userId user to be assigned membership to given role\n+     * @param userKey user to be assigned membership to given role\n      * @param roleTO role for adding membership\n      * @return UserMod for user update\n      */\n-    protected UserMod getUserMod(final Long userId, final RoleTO roleTO) {\n+    protected UserMod getUserMod(final Long userKey, final RoleTO roleTO) {\n         UserMod userMod = new UserMod();\n         // no actual modification takes place when user has already the role assigned\n-        if (membersBeforeRoleUpdate.containsKey(userId)) {\n-            membersBeforeRoleUpdate.remove(userId);\n+        if (membersBeforeRoleUpdate.containsKey(userKey)) {\n+            membersBeforeRoleUpdate.remove(userKey);\n         } else {\n-            userMod.setKey(userId);\n+            userMod.setKey(userKey);\n \n             MembershipMod membershipMod = new MembershipMod();\n             membershipMod.setRole(roleTO.getKey());\n@@ -265,13 +265,13 @@ protected void synchronizeMemberships(\n         final Connector connector = profile.getConnector();\n \n         for (Object membValue : getMembAttrValues(delta, connector)) {\n-            Long userId = syncUtilities.findMatchingAttributableId(\n+            Long userKey = syncUtilities.findMatchingAttributableKey(\n                     ObjectClass.ACCOUNT,\n                     membValue.toString(),\n                     profile.getTask().getResource(),\n                     profile.getConnector());\n-            if (userId != null) {\n-                UserMod userMod = getUserMod(userId, roleTO);\n+            if (userKey != null) {\n+                UserMod userMod = getUserMod(userKey, roleTO);\n                 userUpdate(userMod, resource.getKey());\n             }\n         }"},{"sha":"3f7b2916f2c06a35de9a0cfdba1456954d69d211","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/PushJobImpl.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FPushJobImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FPushJobImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FPushJobImpl.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.server.provisioning.java.sync;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n@@ -36,11 +35,12 @@\n import org.apache.syncope.server.persistence.api.entity.user.User;\n import org.apache.syncope.server.provisioning.api.Connector;\n import org.apache.syncope.server.provisioning.api.sync.ProvisioningProfile;\n-import org.apache.syncope.server.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.server.provisioning.api.sync.PushActions;\n import org.apache.syncope.server.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.server.misc.search.SearchCondConverter;\n import org.apache.syncope.server.provisioning.api.job.PushJob;\n+import org.apache.syncope.server.provisioning.api.sync.RolePushResultHandler;\n+import org.apache.syncope.server.provisioning.api.sync.UserPushResultHandler;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n@@ -50,6 +50,7 @@\n  *\n  * @see AbstractProvisioningJob\n  * @see PushTask\n+ * @see PushActions\n  */\n public class PushJobImpl extends AbstractProvisioningJob<PushTask, PushActions> implements PushJob {\n \n@@ -82,27 +83,26 @@ protected String executeWithSecurityContext(\n             final boolean dryRun) throws JobExecutionException {\n         LOG.debug(\"Execute synchronization (push) with resource {}\", pushTask.getResource());\n \n-        final List<ProvisioningResult> results = new ArrayList<>();\n-\n         final Set<Long> authorizations = RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll());\n \n         final ProvisioningProfile<PushTask, PushActions> profile = new ProvisioningProfile<>(connector, pushTask);\n-        profile.getActions().addAll(actions);\n+        if (actions != null) {\n+            profile.getActions().addAll(actions);\n+        }\n         profile.setDryRun(dryRun);\n         profile.setResAct(null);\n-        profile.getResults().addAll(results);\n \n         final UserPushResultHandler uhandler =\n-                (UserPushResultHandler) ApplicationContextProvider.getApplicationContext().getBeanFactory().createBean(\n-                        UserPushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+                (UserPushResultHandler) ApplicationContextProvider.getApplicationContext().getBeanFactory().\n+                createBean(UserPushResultHandlerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n         uhandler.setProfile(profile);\n \n         final RolePushResultHandler rhandler =\n-                (RolePushResultHandler) ApplicationContextProvider.getApplicationContext().getBeanFactory().createBean(\n-                        RolePushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+                (RolePushResultHandler) ApplicationContextProvider.getApplicationContext().getBeanFactory().\n+                createBean(RolePushResultHandlerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n         rhandler.setProfile(profile);\n \n-        if (!profile.isDryRun()) {\n+        if (actions != null && !profile.isDryRun()) {\n             for (PushActions action : actions) {\n                 action.beforeAll(profile);\n             }\n@@ -139,13 +139,13 @@ protected String executeWithSecurityContext(\n             }\n         }\n \n-        if (!profile.isDryRun()) {\n+        if (actions != null && !profile.isDryRun()) {\n             for (PushActions action : actions) {\n-                action.afterAll(profile, results);\n+                action.afterAll(profile);\n             }\n         }\n \n-        final String result = createReport(results, pushTask.getResource().getSyncTraceLevel(), dryRun);\n+        final String result = createReport(profile.getResults(), pushTask.getResource().getSyncTraceLevel(), dryRun);\n \n         LOG.debug(\"Sync result: {}\", result);\n "},{"sha":"112d8ccadeda57e61e15eda784b7a812fe5d6825","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/RolePushResultHandlerImpl.java","status":"renamed","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FRolePushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FRolePushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FRolePushResultHandlerImpl.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -31,11 +31,12 @@\n import org.apache.syncope.server.persistence.api.entity.Subject;\n import org.apache.syncope.server.persistence.api.entity.role.Role;\n import org.apache.syncope.server.provisioning.api.TimeoutException;\n+import org.apache.syncope.server.provisioning.api.sync.RolePushResultHandler;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.Uid;\n \n-public class RolePushResultHandler extends AbstractSubjectPushResultHandler {\n+public class RolePushResultHandlerImpl extends AbstractPushResultHandler implements RolePushResultHandler {\n \n     @Override\n     protected Subject<?, ?, ?> deprovision(final Subject<?, ?, ?> sbj) {\n@@ -110,7 +111,7 @@ protected String getName(final Subject<?, ?, ?> subject) {\n     @Override\n     protected AbstractSubjectTO getSubjectTO(final long key) {\n         try {\n-            return roleTransfer.getRoleTO(roleDAO.authFetch(key));\n+            return roleTransfer.getRoleTO(key);\n         } catch (Exception e) {\n             LOG.warn(\"Error retrieving user {}\", key, e);\n             return null;","previous_filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/RolePushResultHandler.java"},{"sha":"2cada75579403744d3d4b984848a71f22caa47f3","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/RoleSyncResultHandlerImpl.java","status":"renamed","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FRoleSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FRoleSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FRoleSyncResultHandlerImpl.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -32,12 +32,14 @@\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.server.persistence.api.entity.AttributableUtil;\n import org.apache.syncope.server.provisioning.api.sync.ProvisioningResult;\n+import org.apache.syncope.server.provisioning.api.sync.RoleSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n \n-public class RoleSyncResultHandler extends AbstractSubjectSyncResultHandler {\n+public class RoleSyncResultHandlerImpl extends AbstractSyncResultHandler implements RoleSyncResultHandler {\n \n     protected Map<Long, String> roleOwnerMap = new HashMap<>();\n \n+    @Override\n     public Map<Long, String> getRoleOwnerMap() {\n         return this.roleOwnerMap;\n     }\n@@ -55,7 +57,7 @@ protected String getName(final AbstractSubjectTO subjectTO) {\n     @Override\n     protected AbstractSubjectTO getSubjectTO(final long key) {\n         try {\n-            return roleTransfer.getRoleTO(roleDAO.authFetch(key));\n+            return roleTransfer.getRoleTO(key);\n         } catch (Exception e) {\n             LOG.warn(\"Error retrieving role {}\", key, e);\n             return null;\n@@ -83,7 +85,7 @@ protected AbstractSubjectTO create(\n         Map.Entry<Long, List<PropagationStatus>> created = roleProvisioningManager.create(roleTO, roleOwnerMap,\n                 Collections.singleton(profile.getTask().getResource().getKey()));\n \n-        roleTO = roleTransfer.getRoleTO(roleDAO.authFetch(created.getKey()));\n+        roleTO = roleTransfer.getRoleTO(created.getKey());\n \n         result.setId(created.getKey());\n         result.setName(getName(subjectTO));\n@@ -106,7 +108,7 @@ protected AbstractSubjectTO link(\n             roleMod.getResourcesToAdd().add(profile.getTask().getResource().getKey());\n         }\n \n-        return roleTransfer.getRoleTO(roleDAO.authFetch(rwfAdapter.update(roleMod).getResult()));\n+        return roleTransfer.getRoleTO(rwfAdapter.update(roleMod).getResult());\n     }\n \n     @Override\n@@ -122,7 +124,7 @@ protected AbstractSubjectTO update(\n \n         //moved after role provisioning manager\n         String roleOwner = null;\n-        for (AttrMod attrMod : roleMod.getAttrsToUpdate()) {\n+        for (AttrMod attrMod : roleMod.getPlainAttrsToUpdate()) {\n             if (attrMod.getSchema().isEmpty()) {\n                 roleOwner = attrMod.getValuesToBeAdded().iterator().next();\n             }\n@@ -131,7 +133,7 @@ protected AbstractSubjectTO update(\n             roleOwnerMap.put(updated.getKey(), roleOwner);\n         }\n \n-        final RoleTO after = roleTransfer.getRoleTO(roleDAO.authFetch(updated.getKey()));\n+        final RoleTO after = roleTransfer.getRoleTO(updated.getKey());\n \n         result.setName(getName(after));\n ","previous_filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/RoleSyncResultHandler.java"},{"sha":"47a118f52c00e490d0f20ee192ee0918baf96f95","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/SyncJobImpl.java","status":"modified","additions":15,"deletions":17,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FSyncJobImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FSyncJobImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FSyncJobImpl.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.server.provisioning.java.sync;\n \n-import java.util.ArrayList;\n-import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.mod.ReferenceMod;\n@@ -34,11 +32,12 @@\n import org.apache.syncope.server.persistence.api.entity.user.UMapping;\n import org.apache.syncope.server.provisioning.api.Connector;\n import org.apache.syncope.server.provisioning.api.sync.ProvisioningProfile;\n-import org.apache.syncope.server.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.server.provisioning.api.sync.SyncActions;\n import org.apache.syncope.server.misc.security.UnauthorizedRoleException;\n import org.apache.syncope.server.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.server.provisioning.api.job.SyncJob;\n+import org.apache.syncope.server.provisioning.api.sync.RoleSyncResultHandler;\n+import org.apache.syncope.server.provisioning.api.sync.UserSyncResultHandler;\n import org.apache.syncope.server.workflow.api.RoleWorkflowAdapter;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.SyncToken;\n@@ -74,14 +73,14 @@ protected void setRoleOwners(final RoleSyncResultHandler rhandler)\n                 roleMod.setRoleOwner(null);\n                 roleMod.setUserOwner(null);\n             } else {\n-                Long userId = syncUtilities.findMatchingAttributableId(\n+                Long userId = syncUtilities.findMatchingAttributableKey(\n                         ObjectClass.ACCOUNT,\n                         entry.getValue(),\n                         rhandler.getProfile().getTask().getResource(),\n                         rhandler.getProfile().getConnector());\n \n                 if (userId == null) {\n-                    Long roleId = syncUtilities.findMatchingAttributableId(\n+                    Long roleId = syncUtilities.findMatchingAttributableKey(\n                             ObjectClass.GROUP,\n                             entry.getValue(),\n                             rhandler.getProfile().getTask().getResource(),\n@@ -109,27 +108,26 @@ protected String executeWithSecurityContext(\n \n         LOG.debug(\"Execute synchronization with token {}\", syncTask.getResource().getUsyncToken());\n \n-        final List<ProvisioningResult> results = new ArrayList<>();\n-\n         final ProvisioningProfile<SyncTask, SyncActions> profile = new ProvisioningProfile<>(connector, syncTask);\n-        profile.getActions().addAll(actions);\n+        if (actions != null) {\n+            profile.getActions().addAll(actions);\n+        }\n         profile.setDryRun(dryRun);\n         profile.setResAct(getSyncPolicySpec(syncTask).getConflictResolutionAction());\n-        profile.getResults().addAll(results);\n \n         // Prepare handler for SyncDelta objects (users)\n         final UserSyncResultHandler uhandler =\n-                (UserSyncResultHandler) ApplicationContextProvider.getApplicationContext().getBeanFactory().createBean(\n-                        UserSyncResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+                (UserSyncResultHandler) ApplicationContextProvider.getApplicationContext().getBeanFactory().\n+                createBean(UserSyncResultHandlerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n         uhandler.setProfile(profile);\n \n         // Prepare handler for SyncDelta objects (roles/groups)\n         final RoleSyncResultHandler rhandler =\n-                (RoleSyncResultHandler) ApplicationContextProvider.getApplicationContext().getBeanFactory().createBean(\n-                        RoleSyncResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+                (RoleSyncResultHandler) ApplicationContextProvider.getApplicationContext().getBeanFactory().\n+                createBean(RoleSyncResultHandlerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n         rhandler.setProfile(profile);\n \n-        if (!profile.isDryRun()) {\n+        if (actions != null && !profile.isDryRun()) {\n             for (SyncActions action : actions) {\n                 action.beforeAll(profile);\n             }\n@@ -189,13 +187,13 @@ protected String executeWithSecurityContext(\n             LOG.error(\"While setting role owners\", e);\n         }\n \n-        if (!profile.isDryRun()) {\n+        if (actions != null && !profile.isDryRun()) {\n             for (SyncActions action : actions) {\n-                action.afterAll(profile, results);\n+                action.afterAll(profile);\n             }\n         }\n \n-        final String result = createReport(results, syncTask.getResource().getSyncTraceLevel(), dryRun);\n+        final String result = createReport(profile.getResults(), syncTask.getResource().getSyncTraceLevel(), dryRun);\n \n         LOG.debug(\"Sync result: {}\", result);\n "},{"sha":"299aba05886c0fe4c748cef101f72ad82b70a4fd","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/SyncUtilities.java","status":"modified","additions":14,"deletions":13,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FSyncUtilities.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FSyncUtilities.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FSyncUtilities.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -115,11 +115,12 @@ public class SyncUtilities {\n     @Autowired\n     protected AttributableUtilFactory attrUtilFactory;\n \n-    public Long findMatchingAttributableId(\n+    public Long findMatchingAttributableKey(\n             final ObjectClass oclass,\n             final String name,\n             final ExternalResource resource,\n             final Connector connector) {\n+\n         Long result = null;\n \n         final AttributableUtil attrUtil = attrUtilFactory.getInstance(oclass);\n@@ -137,15 +138,15 @@ public Long findMatchingAttributableId(\n \n             ConnectorObject connObj = found.iterator().next();\n             try {\n-                final List<Long> subjectIds = findExisting(connObj.getUid().getUidValue(), connObj, resource, attrUtil);\n-                if (subjectIds.isEmpty()) {\n+                List<Long> subjectKeys = findExisting(connObj.getUid().getUidValue(), connObj, resource, attrUtil);\n+                if (subjectKeys.isEmpty()) {\n                     LOG.debug(\"No matching {} found for {}, aborting\", attrUtil.getType(), connObj);\n                 } else {\n-                    if (subjectIds.size() > 1) {\n-                        LOG.warn(\"More than one {} found {} - taking first only\", attrUtil.getType(), subjectIds);\n+                    if (subjectKeys.size() > 1) {\n+                        LOG.warn(\"More than one {} found {} - taking first only\", attrUtil.getType(), subjectKeys);\n                     }\n \n-                    result = subjectIds.iterator().next();\n+                    result = subjectKeys.iterator().next();\n                 }\n             } catch (IllegalArgumentException e) {\n                 LOG.warn(e.getMessage());\n@@ -155,14 +156,14 @@ public Long findMatchingAttributableId(\n         return result;\n     }\n \n-    public List<Long> findByAccountIdItem(\n+    private List<Long> findByAccountIdItem(\n             final String uid, final ExternalResource resource, final AttributableUtil attrUtil) {\n         final List<Long> result = new ArrayList<>();\n \n         final MappingItem accountIdItem = attrUtil.getAccountIdItem(resource);\n         switch (accountIdItem.getIntMappingType()) {\n-            case UserSchema:\n-            case RoleSchema:\n+            case UserPlainSchema:\n+            case RolePlainSchema:\n                 final PlainAttrValue value = attrUtil.newPlainAttrValue();\n \n                 PlainSchema schema = plainSchemaDAO.find(accountIdItem.getIntAttrName(), attrUtil.plainSchemaClass());\n@@ -227,7 +228,7 @@ public List<Long> findByAccountIdItem(\n         return result;\n     }\n \n-    public List<Long> search(final SearchCond searchCond, final SubjectType type) {\n+    private List<Long> search(final SearchCond searchCond, final SubjectType type) {\n         final List<Long> result = new ArrayList<>();\n \n         List<Subject<?, ?, ?>> subjects = searchDAO.search(\n@@ -240,13 +241,13 @@ public List<Long> search(final SearchCond searchCond, final SubjectType type) {\n         return result;\n     }\n \n-    public List<Long> findByCorrelationRule(\n+    private List<Long> findByCorrelationRule(\n             final ConnectorObject connObj, final SyncCorrelationRule rule, final SubjectType type) {\n \n         return search(rule.getSearchCond(connObj), type);\n     }\n \n-    public List<Long> findByAttributableSearch(\n+    private List<Long> findByAttributableSearch(\n             final ConnectorObject connObj,\n             final List<String> altSearchSchemas,\n             final ExternalResource resource,\n@@ -287,7 +288,7 @@ public List<Long> findByAttributableSearch(\n             SearchCond nodeCond;\n             // users: just id or username can be selected to be used\n             // roles: just id or name can be selected to be used\n-            if (\"id\".equalsIgnoreCase(schema)\n+            if (\"key\".equalsIgnoreCase(schema)\n                     || \"username\".equalsIgnoreCase(schema) || \"name\".equalsIgnoreCase(schema)) {\n \n                 SubjectCond cond = new SubjectCond();"},{"sha":"57fe4a744a65ea4593e26ea90b4b9e20231a5ea7","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/UserPushResultHandlerImpl.java","status":"renamed","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -31,15 +31,16 @@\n import org.apache.syncope.server.persistence.api.entity.Subject;\n import org.apache.syncope.server.persistence.api.entity.user.User;\n import org.apache.syncope.server.provisioning.api.TimeoutException;\n+import org.apache.syncope.server.provisioning.api.sync.UserPushResultHandler;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.Uid;\n \n-public class UserPushResultHandler extends AbstractSubjectPushResultHandler {\n+public class UserPushResultHandlerImpl extends AbstractPushResultHandler implements UserPushResultHandler {\n \n     @Override\n     protected Subject<?, ?, ?> deprovision(final Subject<?, ?, ?> sbj) {\n-        final UserTO before = userTransfer.getUserTO(userDAO.authFetch(sbj.getKey()));\n+        final UserTO before = userTransfer.getUserTO(sbj.getKey());\n \n         final List<String> noPropResources = new ArrayList<>(before.getResources());\n         noPropResources.remove(profile.getTask().getResource().getKey());\n@@ -52,7 +53,7 @@ public class UserPushResultHandler extends AbstractSubjectPushResultHandler {\n \n     @Override\n     protected Subject<?, ?, ?> provision(final Subject<?, ?, ?> sbj, final Boolean enabled) {\n-        final UserTO before = userTransfer.getUserTO(userDAO.authFetch(sbj.getKey()));\n+        final UserTO before = userTransfer.getUserTO(sbj.getKey());\n \n         final List<String> noPropResources = new ArrayList<>(before.getResources());\n         noPropResources.remove(profile.getTask().getResource().getKey());\n@@ -114,7 +115,7 @@ protected String getName(final Subject<?, ?, ?> subject) {\n     @Override\n     protected AbstractSubjectTO getSubjectTO(final long key) {\n         try {\n-            return userTransfer.getUserTO(userDAO.authFetch(key));\n+            return userTransfer.getUserTO(key);\n         } catch (Exception e) {\n             LOG.warn(\"Error retrieving user {}\", key, e);\n             return null;","previous_filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/UserPushResultHandler.java"},{"sha":"9a7e1ba14b3cfdcdd3e995ff6552a4fd115174a6","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/UserSyncResultHandlerImpl.java","status":"renamed","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -29,10 +29,10 @@\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.server.persistence.api.entity.AttributableUtil;\n import org.apache.syncope.server.provisioning.api.sync.ProvisioningResult;\n+import org.apache.syncope.server.provisioning.api.sync.UserSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n-import org.quartz.JobExecutionException;\n \n-public class UserSyncResultHandler extends AbstractSubjectSyncResultHandler {\n+public class UserSyncResultHandlerImpl extends AbstractSyncResultHandler implements UserSyncResultHandler {\n \n     @Override\n     protected AttributableUtil getAttributableUtil() {\n@@ -47,7 +47,7 @@ protected String getName(final AbstractSubjectTO subjectTO) {\n     @Override\n     protected AbstractSubjectTO getSubjectTO(final long key) {\n         try {\n-            return userTransfer.getUserTO(userDAO.authFetch(key));\n+            return userTransfer.getUserTO(key);\n         } catch (Exception e) {\n             LOG.warn(\"Error retrieving user {}\", key, e);\n             return null;\n@@ -77,19 +77,13 @@ protected AbstractSubjectTO create(\n         Map.Entry<Long, List<PropagationStatus>> created = userProvisioningManager.create(userTO, true, true, enabled,\n                 Collections.singleton(profile.getTask().getResource().getKey()));\n \n-        userTO = userTransfer.getUserTO(userDAO.authFetch(created.getKey()));\n+        userTO = userTransfer.getUserTO(created.getKey());\n \n         result.setId(created.getKey());\n \n         return userTO;\n     }\n \n-    @Override\n-    protected List<ProvisioningResult> link(SyncDelta delta, List<Long> subjects, AttributableUtil attrUtil,\n-            boolean unlink) throws JobExecutionException {\n-        return super.link(delta, subjects, attrUtil, unlink); //To change body of generated methods, choose Tools | Templates.\n-    }\n-\n     @Override\n     protected AbstractSubjectTO link(\n             final AbstractSubjectTO before,\n@@ -105,7 +99,7 @@ protected AbstractSubjectTO link(\n             userMod.getResourcesToAdd().add(profile.getTask().getResource().getKey());\n         }\n \n-        return userTransfer.getUserTO(userDAO.authFetch(uwfAdapter.update(userMod).getResult().getKey().getKey()));\n+        return userTransfer.getUserTO(uwfAdapter.update(userMod).getResult().getKey().getKey());\n     }\n \n     @Override\n@@ -121,7 +115,7 @@ protected AbstractSubjectTO update(\n         Map.Entry<Long, List<PropagationStatus>> updated = userProvisioningManager.update(userMod, before.getKey(),\n                 result, enabled, Collections.singleton(profile.getTask().getResource().getKey()));\n \n-        return userTransfer.getUserTO(userDAO.authFetch(updated.getKey()));\n+        return userTransfer.getUserTO(updated.getKey());\n     }\n \n     @Override","previous_filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/UserSyncResultHandler.java"},{"sha":"8240c7b01697714191bfaaf549b1e47edbcbcd37","filename":"syncope620/server/provisioning-java/src/main/resources/mailTemplates/optin.html.vm","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FmailTemplates%2Foptin.html.vm","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FmailTemplates%2Foptin.html.vm","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FmailTemplates%2Foptin.html.vm?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -18,19 +18,19 @@ under the License.\n -->\n <html>\n <body>\n-<h3>Hi $user.getAttrMap().get(\"firstname\").getValues().get(0) $user.getAttrMap().get(\"surname\").getValues().get(0), welcome to Syncope!</h3>\n+<h3>Hi $user.getPlainAttrMap().get(\"firstname\").getValues().get(0) $user.getPlainAttrMap().get(\"surname\").getValues().get(0), welcome to Syncope!</h3>\n \n <p>\n    Your username is $user.getUsername().<br/>\n-   Your email address is $user.getAttrMap().get(\"email\").getValues().get(0).\n-   Your email address inside a <a href=\"http://localhost/?email=$esc.url($user.getAttrMap().get(\"email\").getValues().get(0))\">link</a>.\n+   Your email address is $user.getPlainAttrMap().get(\"email\").getValues().get(0).\n+   Your email address inside a <a href=\"http://localhost/?email=$esc.url($user.getPlainAttrMap().get(\"email\").getValues().get(0))\">link</a>.\n </p>\n \n <p>\n     This message was sent to the following recipients:\n <ul>\n #foreach($recipient in $recipients)\n-  <li>$recipient.getAttrMap().get(\"email\").getValues().get(0)</li>\n+  <li>$recipient.getPlainAttrMap().get(\"email\").getValues().get(0)</li>\n #end\n </ul>\n "},{"sha":"fc8e3988cf9aa9d9ebca8735efeaf347e71b5056","filename":"syncope620/server/provisioning-java/src/main/resources/mailTemplates/optin.txt.vm","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FmailTemplates%2Foptin.txt.vm","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FmailTemplates%2Foptin.txt.vm","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FmailTemplates%2Foptin.txt.vm?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -14,15 +14,15 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-Hi $user.getAttrMap().get(\"firstname\").getValues().get(0) $user.getAttrMap().get(\"surname\").getValues().get(0), welcome to Syncope!\n+Hi $user.getPlainAttrMap().get(\"firstname\").getValues().get(0) $user.getPlainAttrMap().get(\"surname\").getValues().get(0), welcome to Syncope!\n \n Your username is $user.getUsername().\n-Your email address is $user.getAttrMap().get(\"email\").getValues().get(0).\n-Your email address inside a link: http://localhost/?email=$esc.url($user.getAttrMap().get(\"email\").getValues().get(0)) .\n+Your email address is $user.getPlainAttrMap().get(\"email\").getValues().get(0).\n+Your email address inside a link: http://localhost/?email=$esc.url($user.getPlainAttrMap().get(\"email\").getValues().get(0)) .\n \n This message was sent to the following recipients:\n #foreach($recipient in $recipients)\n-   * $recipient.getAttrMap().get(\"surname\").getValues().get(0)\n+   * $recipient.getPlainAttrMap().get(\"surname\").getValues().get(0)\n #end\n \n because one of the following events occurred:"},{"sha":"3b4301e7e6b984d999e8ed56c1f465676f291b4c","filename":"syncope620/server/provisioning-java/src/main/resources/provisioningContext.xml","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -20,10 +20,16 @@ under the License.\n <beans xmlns=\"http://www.springframework.org/schema/beans\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xmlns:task=\"http://www.springframework.org/schema/task\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\n                            http://www.springframework.org/schema/context\n-                           http://www.springframework.org/schema/context/spring-context.xsd\">\n+                           http://www.springframework.org/schema/context/spring-context.xsd\n+                           http://www.springframework.org/schema/task\n+                           http://www.springframework.org/schema/task/spring-task.xsd\">\n+  \n+  <task:annotation-driven executor=\"connectorExecutor\"/>\n+  <task:executor id=\"connectorExecutor\" pool-size=\"10\"/>\n   \n   <bean id=\"scheduler\" class=\"org.springframework.scheduling.quartz.SchedulerFactoryBean\"\n         lazy-init=\"false\" depends-on=\"nonJPAdbInitializer\">\n@@ -34,7 +40,7 @@ under the License.\n     <property name=\"dataSource\" ref=\"dataSource\"/>\n     <property name=\"transactionManager\" ref=\"transactionManager\"/>\n     <property name=\"jobFactory\">\n-      <bean class=\"org.springframework.scheduling.quartz.SpringBeanJobFactory\"/>\n+      <bean class=\"org.apache.syncope.server.provisioning.java.job.SpringBeanJobFactory\"/>\n     </property>\n     <property name=\"quartzProperties\">\n       <props>"},{"sha":"34d73feffb177ab7d6810ad77ed17af061892353","filename":"syncope620/server/provisioning-java/src/test/java/org/apache/syncope/server/provisioning/java/data/ResourceDataBinderTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -115,7 +115,7 @@ public void issue42() {\n \n         MappingItemTO item = new MappingItemTO();\n         item.setIntAttrName(\"userId\");\n-        item.setIntMappingType(IntMappingType.UserSchema);\n+        item.setIntMappingType(IntMappingType.UserPlainSchema);\n         item.setExtAttrName(\"campo1\");\n         item.setAccountid(true);\n         item.setMandatoryCondition(\"false\");"},{"sha":"94003ab47f8d0b26843863b00ded0587fb4eedba","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/AbstractServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -163,7 +163,7 @@ protected List<OrderByClause> getOrderByClauses(final String orderBy) {\n             return Collections.<OrderByClause>emptyList();\n         }\n \n-        List<OrderByClause> result = new ArrayList<OrderByClause>();\n+        List<OrderByClause> result = new ArrayList<>();\n \n         for (String clause : orderBy.split(\",\")) {\n             String[] elems = clause.split(\" \");\n@@ -195,7 +195,7 @@ protected List<OrderByClause> getOrderByClauses(final String orderBy) {\n     protected <T extends AbstractBaseBean> PagedResult<T> buildPagedResult(\n             final List<T> list, final int page, final int size, final int totalCount) {\n \n-        PagedResult<T> result = new PagedResult<T>();\n+        PagedResult<T> result = new PagedResult<>();\n         result.getResult().addAll(list);\n \n         result.setPage(page);"},{"sha":"7651d05570a16687bf165c47248dc0ce1d356a69","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/LoggerServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -80,7 +80,7 @@ public List<LoggerTO> list(final LoggerType type) {\n     public LoggerTO read(final LoggerType type, final String name) {\n         List<LoggerTO> logger = list(type);\n         for (LoggerTO l : logger) {\n-            if (l.getName().equals(name)) {\n+            if (l.getKey().equals(name)) {\n                 return l;\n             }\n         }"},{"sha":"32306e9ab51fb3367be8cee26f40b6cd604727ea","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/ReportServiceImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -92,14 +92,14 @@ public ReportTO read(final Long reportKey) {\n     }\n \n     @Override\n-    public ReportExecTO readExecution(final Long executionId) {\n-        return logic.readExecution(executionId);\n+    public ReportExecTO readExecution(final Long executionKey) {\n+        return logic.readExecution(executionKey);\n     }\n \n     @Override\n-    public Response exportExecutionResult(final Long executionId, final ReportExecExportFormat fmt) {\n+    public Response exportExecutionResult(final Long executionKey, final ReportExecExportFormat fmt) {\n         final ReportExecExportFormat format = (fmt == null) ? ReportExecExportFormat.XML : fmt;\n-        final ReportExec reportExec = logic.getAndCheckReportExec(executionId);\n+        final ReportExec reportExec = logic.getAndCheckReportExec(executionKey);\n         StreamingOutput sout = new StreamingOutput() {\n \n             @Override\n@@ -125,7 +125,7 @@ public void delete(final Long reportKey) {\n     }\n \n     @Override\n-    public void deleteExecution(final Long executionId) {\n-        logic.deleteExecution(executionId);\n+    public void deleteExecution(final Long executionKey) {\n+        logic.deleteExecution(executionKey);\n     }\n }"},{"sha":"fc78a54ff3e5f22f2c057f6f091f8c1fd39df1f8","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/RestServiceExceptionMapper.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80589a1b9b384f07670afe4f1581c3ceb2794501/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FRestServiceExceptionMapper.java?ref=80589a1b9b384f07670afe4f1581c3ceb2794501","patch":"@@ -45,6 +45,7 @@\n import org.apache.syncope.server.misc.security.UnauthorizedRoleException;\n import org.apache.syncope.server.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.server.persistence.api.attrvalue.validation.ParsingValidationException;\n+import org.apache.syncope.server.persistence.api.dao.DuplicateException;\n import org.apache.syncope.server.persistence.api.dao.NotFoundException;\n import org.apache.syncope.server.workflow.api.WorkflowException;\n import org.identityconnectors.framework.common.exceptions.ConfigurationException;\n@@ -89,7 +90,7 @@ public Response toResponse(final Exception ex) {\n                     header(HttpHeaders.WWW_AUTHENTICATE, BASIC_REALM_UNAUTHORIZED);\n         } else if (ex instanceof UnauthorizedRoleException) {\n             builder = builder(Response.Status.UNAUTHORIZED, ClientExceptionType.UnauthorizedRole, getExMessage(ex));\n-        } else if (ex instanceof EntityExistsException) {\n+        } else if (ex instanceof EntityExistsException || ex instanceof DuplicateException) {\n             builder = builder(Response.Status.CONFLICT, ClientExceptionType.EntityExists, getExMessage(ex));\n         } else if (ex instanceof DataIntegrityViolationException) {\n             builder = builder(Response.Status.CONFLICT, ClientExceptionType.DataIntegrityViolation, getExMessage(ex));"}]}