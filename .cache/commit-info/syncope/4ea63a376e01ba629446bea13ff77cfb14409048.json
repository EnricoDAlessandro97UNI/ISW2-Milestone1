{"sha":"4ea63a376e01ba629446bea13ff77cfb14409048","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjRlYTYzYTM3NmUwMWJhNjI5NDQ2YmVhMTNmZjc3Y2ZiMTQ0MDkwNDg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-08-09T10:12:08Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-08-09T10:12:17Z"},"message":"[SYNCOPE-1350] Smarter getValueAsString","tree":{"sha":"790e59a98a4b72264fc4de4a12d54d22f7af1cf8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/790e59a98a4b72264fc4de4a12d54d22f7af1cf8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4ea63a376e01ba629446bea13ff77cfb14409048","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4ea63a376e01ba629446bea13ff77cfb14409048","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4ea63a376e01ba629446bea13ff77cfb14409048","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4ea63a376e01ba629446bea13ff77cfb14409048/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33"}],"stats":{"total":60,"additions":38,"deletions":22},"files":[{"sha":"67282ee2a8c62ee2d65a27b285b88349d4657592","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PlainAttrValue.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ea63a376e01ba629446bea13ff77cfb14409048/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ea63a376e01ba629446bea13ff77cfb14409048/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttrValue.java?ref=4ea63a376e01ba629446bea13ff77cfb14409048","patch":"@@ -43,6 +43,8 @@ public interface PlainAttrValue extends Entity {\n \n     String getValueAsString(AttrSchemaType type);\n \n+    String getValueAsString(PlainSchema schema);\n+\n     void parseValue(PlainSchema schema, String value);\n \n     void setAttr(PlainAttr<?> attr);"},{"sha":"39e382a81f71b8544ad4200e026da16b4182a046","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttrValue.java","status":"modified","additions":31,"deletions":21,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ea63a376e01ba629446bea13ff77cfb14409048/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ea63a376e01ba629446bea13ff77cfb14409048/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java?ref=4ea63a376e01ba629446bea13ff77cfb14409048","patch":"@@ -209,18 +209,7 @@ public <T> T getValue() {\n                                                 : getStringValue());\n     }\n \n-    @Override\n-    public String getValueAsString() {\n-        final AttrSchemaType type = getAttr() == null || getAttr().getSchema() == null\n-                || getAttr().getSchema().getType() == null\n-                ? AttrSchemaType.String\n-                : getAttr().getSchema().getType();\n-\n-        return getValueAsString(type);\n-    }\n-\n-    @Override\n-    public String getValueAsString(final AttrSchemaType type) {\n+    private String getValueAsString(final AttrSchemaType type, final PlainSchema schema) {\n         String result;\n         switch (type) {\n \n@@ -229,24 +218,21 @@ public String getValueAsString(final AttrSchemaType type) {\n                 break;\n \n             case Long:\n-                result = getAttr() == null || getAttr().getSchema() == null\n-                        || getAttr().getSchema().getConversionPattern() == null\n+                result = schema == null || schema.getConversionPattern() == null\n                         ? getLongValue().toString()\n-                        : FormatUtils.format(getLongValue(), getAttr().getSchema().getConversionPattern());\n+                        : FormatUtils.format(getLongValue(), schema.getConversionPattern());\n                 break;\n \n             case Double:\n-                result = getAttr() == null || getAttr().getSchema() == null\n-                        || getAttr().getSchema().getConversionPattern() == null\n+                result = schema == null || schema.getConversionPattern() == null\n                         ? getDoubleValue().toString()\n-                        : FormatUtils.format(getDoubleValue(), getAttr().getSchema().getConversionPattern());\n+                        : FormatUtils.format(getDoubleValue(), schema.getConversionPattern());\n                 break;\n \n             case Date:\n-                result = getAttr() == null || getAttr().getSchema() == null\n-                        || getAttr().getSchema().getConversionPattern() == null\n+                result = schema == null || schema.getConversionPattern() == null\n                         ? FormatUtils.format(getDateValue())\n-                        : FormatUtils.format(getDateValue(), false, getAttr().getSchema().getConversionPattern());\n+                        : FormatUtils.format(getDateValue(), false, schema.getConversionPattern());\n                 break;\n \n             case Binary:\n@@ -264,6 +250,30 @@ public String getValueAsString(final AttrSchemaType type) {\n         return result;\n     }\n \n+    @Override\n+    public String getValueAsString() {\n+        PlainSchema schema = getAttr() == null || getAttr().getSchema() == null\n+                ? null\n+                : getAttr().getSchema();\n+        AttrSchemaType type = schema == null || schema.getType() == null\n+                ? AttrSchemaType.String\n+                : getAttr().getSchema().getType();\n+\n+        return getValueAsString(type, schema);\n+    }\n+\n+    @Override\n+    public String getValueAsString(final AttrSchemaType type) {\n+        return getValueAsString(\n+                type,\n+                getAttr() == null || getAttr().getSchema() == null ? null : getAttr().getSchema());\n+    }\n+\n+    @Override\n+    public String getValueAsString(final PlainSchema schema) {\n+        return getValueAsString(schema.getType(), schema);\n+    }\n+\n     @Override\n     public String toString() {\n         return ReflectionToStringBuilder.toString(this, ToStringStyle.JSON_STYLE);"},{"sha":"fc4ac8b47c4dc757cf66ce5bf710d194a1492ffe","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ea63a376e01ba629446bea13ff77cfb14409048/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ea63a376e01ba629446bea13ff77cfb14409048/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=4ea63a376e01ba629446bea13ff77cfb14409048","patch":"@@ -361,7 +361,11 @@ public Pair<String, Attribute> prepareAttr(\n                 if (FrameworkUtil.isSupportedAttributeType(schemaType.getType())) {\n                     objValues.add(value.getValue());\n                 } else {\n-                    objValues.add(value.getValueAsString(schemaType));\n+                    if (schema instanceof PlainSchema) {\n+                        objValues.add(value.getValueAsString((PlainSchema) schema));\n+                    } else {\n+                        objValues.add(value.getValueAsString(schemaType));\n+                    }\n                 }\n             }\n "}]}