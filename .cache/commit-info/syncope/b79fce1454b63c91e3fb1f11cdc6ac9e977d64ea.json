{"sha":"b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI3OWZjZTE0NTRiNjNjOTFlM2ZiMWYxMWNkYzZhYzllOTc3ZDY0ZWE=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-02-16T11:41:48Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-02-16T11:41:48Z"},"message":"Some cleanings\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246795 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"10c0bff653ded29ae71078f3b44a7dae62e4ff5a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/10c0bff653ded29ae71078f3b44a7dae62e4ff5a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/comments","author":null,"committer":null,"parents":[{"sha":"75f8c515103887973082bd946b1e9fd1da1238f5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/75f8c515103887973082bd946b1e9fd1da1238f5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/75f8c515103887973082bd946b1e9fd1da1238f5"}],"stats":{"total":541,"additions":168,"deletions":373},"files":[{"sha":"1c4b07c2a7bfe850014663acb0739dd5833352e7","filename":"console/src/main/java/org/syncope/console/commons/SearchConditionWrapper.java","status":"modified","additions":12,"deletions":16,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FSearchConditionWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FSearchConditionWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FSearchConditionWrapper.java?ref=b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea","patch":"@@ -1,10 +1,10 @@\n-/* \n+/*\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -23,21 +23,25 @@\n  */\n public class SearchConditionWrapper implements Serializable {\n \n-    public enum OperationType {AND,OR};\n+    public enum OperationType {\n \n-    public enum FilterType {ATTRIBUTE,MEMBERSHIP};\n+        AND, OR\n \n-    //public enum NotOperator {NOT};\n+    };\n \n-    /** Not value: true if provided, false otherwise */\n+    public enum FilterType {\n+\n+        ATTRIBUTE, MEMBERSHIP\n+\n+    };\n     private boolean notOperator;\n \n     private OperationType operationType = null;\n \n     private Type type;\n \n     private FilterType filterType;\n-    \n+\n     private String filterName;\n \n     private String filterValue;\n@@ -50,14 +54,6 @@ public void setNotOperator(boolean notOperator) {\n         this.notOperator = notOperator;\n     }\n \n-//    public NotOperator getNotOperator() {\n-//        return notOperator;\n-//    }\n-//\n-//    public void setNotOperator(NotOperator notOperator) {\n-//        this.notOperator = notOperator;\n-//    }\n-\n     public OperationType getOperationType() {\n         return operationType;\n     }"},{"sha":"66f32191243975b75e918a441f3ae6fd06aa4d2e","filename":"console/src/main/java/org/syncope/console/pages/ResourceModalPage.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java?ref=b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea","patch":"@@ -30,6 +30,7 @@\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n import org.apache.wicket.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteTextField;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.form.CheckBox;\n@@ -54,10 +55,6 @@\n import org.syncope.console.rest.ResourceRestClient;\n import org.syncope.console.rest.SchemaRestClient;\n import org.syncope.console.wicket.markup.html.form.AjaxDecoratedCheckbox;\n-import org.syncope.console.wicket.markup.html.form.UpdatingAutoCompleteTextField;\n-import org.syncope.console.wicket.markup.html.form.UpdatingCheckBox;\n-import org.syncope.console.wicket.markup.html.form.UpdatingDropDownChoice;\n-import org.syncope.console.wicket.markup.html.form.UpdatingTextField;\n import org.syncope.types.PropagationMode;\n import org.syncope.types.SourceMappingType;\n \n@@ -216,7 +213,7 @@ public void detach() {\n \n             SchemaMappingTO mappingTO = null;\n \n-            UpdatingDropDownChoice schemaAttributeChoice = null;\n+            DropDownChoice schemaAttributeChoice = null;\n \n             @Override\n             protected void populateItem(final ListItem item) {\n@@ -249,14 +246,15 @@ public CharSequence preDecorateScript(\n                         };\n                     }\n                 });\n-                item.add(new UpdatingTextField(\"field\",\n+                item.add(new TextField(\"field\",\n                         new PropertyModel(mappingTO, \"destAttrName\")).\n                         setRequired(true).\n                         setLabel(new Model(getString(\"fieldName\"))));\n \n                 schemaAttributeChoice =\n-                        new UpdatingDropDownChoice(\"schemaAttributes\",\n-                        new PropertyModel(mappingTO, \"sourceAttrName\"), null);\n+                        new DropDownChoice(\"schemaAttributes\",\n+                        new PropertyModel(mappingTO, \"sourceAttrName\"),\n+                        (IModel) null);\n \n                 if (mappingTO.getSourceMappingType() == null) {\n                     schemaAttributeChoice.setChoices(Collections.emptyList());\n@@ -297,7 +295,7 @@ public CharSequence preDecorateScript(\n                         true).\n                         setOutputMarkupId(true));\n \n-                item.add(new UpdatingAutoCompleteTextField(\"mandatoryCondition\",\n+                item.add(new AutoCompleteTextField(\"mandatoryCondition\",\n                         new PropertyModel(mappingTO, \"mandatoryCondition\")) {\n \n                     @Override\n@@ -319,9 +317,9 @@ protected Iterator getChoices(String input) {\n                         return choices.iterator();\n                     }\n                 });\n-                item.add(new UpdatingCheckBox(\"accountId\",\n+                item.add(new CheckBox(\"accountId\",\n                         new PropertyModel(mappingTO, \"accountid\")));\n-                item.add(new UpdatingCheckBox(\"password\",\n+                item.add(new CheckBox(\"password\",\n                         new PropertyModel(mappingTO, \"password\")));\n             }\n         };"},{"sha":"3692566091fe4cde454ecc97a27c969302135a73","filename":"console/src/main/java/org/syncope/console/pages/Users.java","status":"modified","additions":118,"deletions":157,"changes":275,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java?ref=b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea","patch":"@@ -33,8 +33,10 @@\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.CheckBox;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.form.TextField;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n import org.apache.wicket.markup.html.list.PageableListView;\n@@ -44,7 +46,6 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.springframework.web.client.HttpServerErrorException;\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n@@ -56,13 +57,11 @@\n import org.syncope.console.commons.Constants;\n import org.syncope.console.commons.PreferenceManager;\n import org.syncope.console.commons.SearchConditionWrapper;\n+import org.syncope.console.commons.SearchConditionWrapper.FilterType;\n import org.syncope.console.commons.SearchConditionWrapper.OperationType;\n import org.syncope.console.rest.SchemaRestClient;\n import org.syncope.console.rest.RoleRestClient;\n import org.syncope.console.rest.UserRestClient;\n-import org.syncope.console.wicket.markup.html.form.UpdatingCheckBox;\n-import org.syncope.console.wicket.markup.html.form.UpdatingDropDownChoice;\n-import org.syncope.console.wicket.markup.html.form.UpdatingTextField;\n \n /**\n  * Users WebPage.\n@@ -108,8 +107,6 @@ public class Users extends BasePage {\n \n     private List<SearchConditionWrapper> searchConditionsList;\n \n-    private List<UserTO> searchMatchedUsers;\n-\n     private int paginatorRows;\n \n     private int paginatorSearchRows;\n@@ -169,8 +166,6 @@ public Users(PageParameters parameters) {\n \n         setupSearchConditionsList();\n \n-        searchMatchedUsers = new ArrayList<UserTO>();\n-\n         add(createUserWin = new ModalWindow(\"createUserWin\"));\n         add(editUserWin = new ModalWindow(\"editUserWin\"));\n         add(changeAttribsViewWin = new ModalWindow(\"changeAttributesViewWin\"));\n@@ -208,7 +203,8 @@ protected void populateItem(final ListItem item) {\n                 getWebRequestCycle().getWebRequest(),\n                 Constants.PREF_USERS_SEARCH_PAGINATOR_ROWS);\n \n-        setupPaginatedUsers();\n+        paginatedUsers = userRestClient.getPaginatedUser(\n+                currentViewPage, paginatorRows);\n \n         IModel usersModel = new LoadableDetachableModel() {\n \n@@ -218,8 +214,10 @@ protected Object load() {\n                         currentViewPage, paginatorRows);\n \n                 //Refresh links just after the selecting page click\n-                if (incrementUserViewLink != null && decrementUserViewLink != null\n+                if (incrementUserViewLink != null\n+                        && decrementUserViewLink != null\n                         && firstPageLink != null && lastPageLink != null) {\n+\n                     int totalPages = (int) Math.ceil(\n                             paginatedUsers.getTotalRecords()\n                             / new Double(paginatedUsers.getPageSize()));\n@@ -279,32 +277,32 @@ protected Object load() {\n \n         usersTableContainer = new WebMarkupContainer(\"usersTableContainer\");\n \n-        final PageableListView usersView = new PageableListView(\"results\",\n-                usersModel, paginatorRows) {\n+        final PageableListView usersView = new PageableListView<UserTO>(\n+                \"results\", usersModel, paginatorRows) {\n \n             @Override\n-            protected void populateItem(final ListItem item) {\n+            protected void populateItem(final ListItem<UserTO> item) {\n \n-                final UserTO userTO = (UserTO) item.getModelObject();\n+                final UserTO userTO = item.getModelObject();\n \n                 item.add(new Label(\"id\", String.valueOf(userTO.getId())));\n \n-                item.add(new Label(\"status\", String.valueOf(\n-                        userTO.getStatus())));\n+                item.add(new Label(\"status\", userTO.getStatus()));\n \n-                if (userTO.getToken() != null && !userTO.getToken().equals(\"\")) {\n+                if (userTO.getToken() != null && !userTO.getToken().isEmpty()) {\n                     item.add(new Label(\"token\", getString(\"tokenValued\")));\n                 } else {\n                     item.add(new Label(\"token\", getString(\"tokenNotValued\")));\n                 }\n \n-                item.add(new ListView(\"selectedAttributes\", attributesToDisplay(\n-                        userTO)) {\n+                item.add(new ListView<NameValuePair>(\"selectedAttributes\",\n+                        attributesToDisplay(userTO)) {\n \n                     @Override\n-                    protected void populateItem(ListItem item) {\n-                        NameValuePair attribute =\n-                                (NameValuePair) item.getDefaultModelObject();\n+                    protected void populateItem(\n+                            final ListItem<NameValuePair> item) {\n+\n+                        NameValuePair attribute = item.getModelObject();\n \n                         for (String name : columnList) {\n                             if (name.equalsIgnoreCase(attribute.getName())) {\n@@ -319,9 +317,8 @@ protected void populateItem(ListItem item) {\n                         new Model(getString(\"edit\"))) {\n \n                     @Override\n-                    public void onClick(AjaxRequestTarget target) {\n-                        final UserTO userTO = (UserTO) item.\n-                                getDefaultModelObject();\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        final UserTO userTO = item.getModelObject();\n \n                         editUserWin.setPageCreator(\n                                 new ModalWindow.PageCreator() {\n@@ -345,7 +342,7 @@ public Page createPage() {\n                         getString(\"delete\"))) {\n \n                     @Override\n-                    public void onClick(AjaxRequestTarget target) {\n+                    public void onClick(final AjaxRequestTarget target) {\n                         userRestClient.deleteUser(\n                                 String.valueOf(userTO.getId()));\n \n@@ -380,7 +377,7 @@ public CharSequence preDecorateScript(\n         incrementUserViewLink = new AjaxLink(\"incrementLink\") {\n \n             @Override\n-            public void onClick(AjaxRequestTarget target) {\n+            public void onClick(final AjaxRequestTarget target) {\n                 currentViewPage++;\n \n                 //Update pageLinks on paginator\n@@ -398,7 +395,7 @@ public void onClick(AjaxRequestTarget target) {\n         firstPageLink = new AjaxLink(\"firstPageLink\") {\n \n             @Override\n-            public void onClick(AjaxRequestTarget target) {\n+            public void onClick(final AjaxRequestTarget target) {\n                 currentViewPage = 1;\n \n                 //Update pageLinks on paginator\n@@ -413,7 +410,7 @@ public void onClick(AjaxRequestTarget target) {\n         lastPageLink = new AjaxLink(\"lastPageLink\") {\n \n             @Override\n-            public void onClick(AjaxRequestTarget target) {\n+            public void onClick(final AjaxRequestTarget target) {\n                 int totalPages = (int) Math.ceil(\n                         paginatedUsers.getTotalRecords()\n                         / new Double(paginatedUsers.getPageSize()));\n@@ -431,7 +428,7 @@ public void onClick(AjaxRequestTarget target) {\n         decrementUserViewLink = new AjaxLink(\"decrementLink\") {\n \n             @Override\n-            public void onClick(AjaxRequestTarget target) {\n+            public void onClick(final AjaxRequestTarget target) {\n                 currentViewPage--;\n \n                 //Update pageLinks on paginator\n@@ -499,7 +496,7 @@ protected void populateItem(ListItem item) {\n                 AjaxLink pageLink = new AjaxLink(\"pageLink\") {\n \n                     @Override\n-                    public void onClick(AjaxRequestTarget target) {\n+                    public void onClick(final AjaxRequestTarget target) {\n                         currentViewPage = pageId;\n \n                         //Update pageLinks on paginator\n@@ -511,12 +508,7 @@ public void onClick(AjaxRequestTarget target) {\n                     }\n                 };\n \n-                if (currentViewPage == pageId) {\n-                    pageLink.setEnabled(false);\n-                } else {\n-                    pageLink.setEnabled(true);\n-                }\n-\n+                pageLink.setEnabled(currentViewPage == pageId);\n                 pageLink.add(new Label(\"name\", new Model<String>(\n                         String.valueOf(pageId))));\n \n@@ -648,15 +640,17 @@ public Page createPage() {\n         add(changeAttributesViewLink);\n \n         //TAB 2 - Search section start\n-        final IModel userAttributes = new LoadableDetachableModel() {\n+        final IModel schemaNames = new LoadableDetachableModel() {\n \n+            @Override\n             protected Object load() {\n                 return schemaRestClient.getAllUserSchemasNames();\n             }\n         };\n \n         final IModel roleNames = new LoadableDetachableModel() {\n \n+            @Override\n             protected Object load() {\n                 List<RoleTO> roleTOs = roleRestClient.getAllRoles();\n \n@@ -672,15 +666,18 @@ protected Object load() {\n \n         final IModel attributeTypes = new LoadableDetachableModel() {\n \n+            @Override\n             protected Object load() {\n                 return Arrays.asList(AttributeCond.Type.values());\n             }\n         };\n \n         final IModel filterTypes = new LoadableDetachableModel() {\n \n+            @Override\n             protected Object load() {\n-                return Arrays.asList(SearchConditionWrapper.FilterType.values());\n+                return Arrays.asList(\n+                        SearchConditionWrapper.FilterType.values());\n             }\n         };\n \n@@ -708,20 +705,21 @@ protected void populateItem(final ListItem item) {\n                             getOperationType().toString()));\n                 }\n \n-                item.add(new UpdatingCheckBox(\"notOperator\",\n+                item.add(new CheckBox(\"notOperator\",\n                         new PropertyModel(searchCondition,\n                         \"notOperator\")));\n \n-                final UpdatingDropDownChoice filterNameChooser =\n-                        new UpdatingDropDownChoice(\"filterName\",\n+                final DropDownChoice filterNameChooser =\n+                        new DropDownChoice(\"filterName\",\n                         new PropertyModel(searchCondition, \"filterName\"),\n-                        null);\n+                        (IModel) null);\n+                filterNameChooser.setOutputMarkupId(true);\n \n                 if (searchCondition.getFilterType() == null) {\n                     filterNameChooser.setChoices(Collections.emptyList());\n                 } else if (searchCondition.getFilterType()\n                         == SearchConditionWrapper.FilterType.ATTRIBUTE) {\n-                    filterNameChooser.setChoices(userAttributes);\n+                    filterNameChooser.setChoices(schemaNames);\n                 } else {\n                     filterNameChooser.setChoices(roleNames);\n                 }\n@@ -730,13 +728,13 @@ protected void populateItem(final ListItem item) {\n \n                 item.add(filterNameChooser);\n \n-                final UpdatingDropDownChoice type = new UpdatingDropDownChoice(\n+                final DropDownChoice type = new DropDownChoice(\n                         \"type\", new PropertyModel(searchCondition, \"type\"),\n                         attributeTypes);\n \n                 item.add(type);\n \n-                final UpdatingTextField filterValue = new UpdatingTextField(\n+                final TextField filterValue = new TextField(\n                         \"filterValue\", new PropertyModel(searchCondition,\n                         \"filterValue\"));\n \n@@ -750,48 +748,41 @@ protected void populateItem(final ListItem item) {\n                     type.setModelObject(null);\n \n                     filterValue.setEnabled(false);\n-                    //filterValue.setRequired(false);\n                     filterValue.setModelObject(\"\");\n-\n                 } else {\n-\n                     if (!type.isEnabled()) {\n                         type.setEnabled(true);\n                         type.setRequired(true);\n                     }\n-\n                     if (!filterValue.isEnabled()) {\n                         filterValue.setEnabled(true);\n                     }\n-\n                 }\n \n-                UpdatingDropDownChoice filterTypeChooser =\n-                        new UpdatingDropDownChoice(\"filterType\",\n+                DropDownChoice filterTypeChooser =\n+                        new DropDownChoice(\"filterType\",\n                         new PropertyModel(searchCondition, \"filterType\"),\n                         filterTypes);\n+                filterTypeChooser.setOutputMarkupId(true);\n \n                 filterTypeChooser.add(new AjaxFormComponentUpdatingBehavior(\n                         \"onchange\") {\n \n-                    protected void onUpdate(AjaxRequestTarget target) {\n-                        filterNameChooser.setChoices(new LoadableDetachableModel() {\n-\n-                            @Override\n-                            protected Object load() {\n-                                SearchConditionWrapper.FilterType schemaType =\n-                                        searchCondition.getFilterType();\n-\n-                                if (schemaType == SearchConditionWrapper.FilterType.ATTRIBUTE) {\n-\n-                                    return userAttributes;\n-                                } else {\n+                    @Override\n+                    protected void onUpdate(final AjaxRequestTarget target) {\n+                        filterNameChooser.setChoices(\n+                                new LoadableDetachableModel() {\n \n-                                    return roleNames;\n-                                }\n+                                    @Override\n+                                    protected Object load() {\n+                                        FilterType schemaType =\n+                                                searchCondition.getFilterType();\n \n-                            }\n-                        });\n+                                        return schemaType\n+                                                == FilterType.ATTRIBUTE\n+                                                ? schemaNames : roleNames;\n+                                    }\n+                                });\n                         target.addComponent(filterNameChooser);\n                         target.addComponent(usersTableSearchContainer);\n                     }\n@@ -901,7 +892,8 @@ protected Object load() {\n                         }\n                     }\n \n-                    if (pageRecordFromSearch != null && pageRecordToSearch != null\n+                    if (pageRecordFromSearch != null\n+                            && pageRecordToSearch != null\n                             && totalRecordsSearch != null) {\n \n                         //Records indexes for paginator's labels\n@@ -910,11 +902,14 @@ protected Object load() {\n                                 getRecordsInPage();\n \n                         if (paginatedSearchUsers.getPageNumber() > 1) {\n-                            firstPageRecord = (paginatedSearchUsers.getPageSize()\n-                                    * (paginatedSearchUsers.getPageNumber() - 1)) + 1;\n+                            firstPageRecord = 1\n+                                    + (paginatedSearchUsers.getPageSize()\n+                                    * (paginatedSearchUsers.getPageNumber()\n+                                    - 1));\n \n                             lastPageRecord = (paginatedSearchUsers.getPageSize()\n-                                    * (paginatedSearchUsers.getPageNumber() - 1))\n+                                    * (paginatedSearchUsers.getPageNumber()\n+                                    - 1))\n                                     + paginatedSearchUsers.getRecordsInPage();\n                         }\n \n@@ -940,33 +935,26 @@ protected Object load() {\n                     }\n                     return paginatedSearchUsers.getRecords();\n                 } else {\n-\n-                    if (paginatedSearchUsers != null\n-                            && paginatedSearchUsers.getRecords() != null) {\n-                        return paginatedSearchUsers.getRecords();\n-                    } else {\n-                        return new ArrayList();\n-                    }\n-\n+                    return paginatedSearchUsers != null\n+                            && paginatedSearchUsers.getRecords() != null\n+                            ? paginatedSearchUsers.getRecords()\n+                            : Collections.emptyList();\n                 }\n-\n             }\n         };\n \n-        final PageableListView resultsView = new PageableListView(\"results\",\n-                resultsModel, paginatorSearchRows) {\n+        final PageableListView resultsView = new PageableListView<UserTO>(\n+                \"results\", resultsModel, paginatorSearchRows) {\n \n             @Override\n-            protected void populateItem(final ListItem item) {\n-\n-                final UserTO userTO = (UserTO) item.getModelObject();\n+            protected void populateItem(final ListItem<UserTO> item) {\n+                final UserTO userTO = item.getModelObject();\n \n                 item.add(new Label(\"id\", String.valueOf(userTO.getId())));\n \n-                item.add(new Label(\"status\", String.valueOf(\n-                        userTO.getStatus())));\n+                item.add(new Label(\"status\", userTO.getStatus()));\n \n-                if (userTO.getToken() != null && !userTO.getToken().equals(\"\")) {\n+                if (userTO.getToken() != null && !userTO.getToken().isEmpty()) {\n                     item.add(new Label(\"token\", getString(\"tokenValued\")));\n                 } else {\n                     item.add(new Label(\"token\", getString(\"tokenNotValued\")));\n@@ -976,16 +964,19 @@ protected void populateItem(final ListItem item) {\n                         new Model(getString(\"edit\"))) {\n \n                     @Override\n-                    protected void onSubmit(AjaxRequestTarget target, Form form) {\n+                    protected void onSubmit(final AjaxRequestTarget target,\n+                            final Form form) {\n \n-                        editUserWin.setPageCreator(new ModalWindow.PageCreator() {\n+                        editUserWin.setPageCreator(\n+                                new ModalWindow.PageCreator() {\n \n-                            public Page createPage() {\n-                                UserModalPage window = new UserModalPage(\n-                                        Users.this, editUserWin, userTO, false);\n-                                return window;\n-                            }\n-                        });\n+                                    @Override\n+                                    public Page createPage() {\n+                                        return new UserModalPage(\n+                                                Users.this, editUserWin, userTO,\n+                                                false);\n+                                    }\n+                                });\n \n                         editUserWin.show(target);\n                     }\n@@ -997,7 +988,7 @@ public Page createPage() {\n                         getString(\"delete\"))) {\n \n                     @Override\n-                    public void onClick(AjaxRequestTarget target) {\n+                    public void onClick(final AjaxRequestTarget target) {\n                         userRestClient.deleteUser(\n                                 String.valueOf(userTO.getId()));\n \n@@ -1137,7 +1128,8 @@ public void onClick(AjaxRequestTarget target) {\n                 \"pageRecordFrom\",\n                 new Model<String>(String.valueOf(firstPageRecordSearch))));\n \n-        searchResultsContainer.add(pageRecordToSearch = new Label(\"pageRecordTo\",\n+        searchResultsContainer.add(pageRecordToSearch = new Label(\n+                \"pageRecordTo\",\n                 new Model<String>(String.valueOf(lastPageRecordSearch))));\n \n         if (paginatedSearchUsers != null) {\n@@ -1159,13 +1151,13 @@ public void onClick(AjaxRequestTarget target) {\n         pageLinksSearchView = new ListView(\"pageLinksView\", pageIdListSearch) {\n \n             @Override\n-            protected void populateItem(ListItem item) {\n+            protected void populateItem(final ListItem item) {\n                 final int pageId = (Integer) item.getDefaultModelObject();\n \n                 AjaxLink pageLink = new AjaxLink(\"pageLink\") {\n \n                     @Override\n-                    public void onClick(AjaxRequestTarget target) {\n+                    public void onClick(final AjaxRequestTarget target) {\n                         currentSearchPage = pageId;\n                         target.addComponent(searchResultsContainer);\n                     }\n@@ -1198,12 +1190,11 @@ public void onClick(AjaxRequestTarget target) {\n                 getString(\"search\"))) {\n \n             @Override\n-            protected void onSubmit(AjaxRequestTarget target, Form form) {\n+            protected void onSubmit(final AjaxRequestTarget target,\n+                    final Form form) {\n \n                 nodeCond = buildSearchExpression(searchConditionsList);\n-\n                 if (nodeCond != null) {\n-\n                     try {\n                         paginatedSearchUsers = userRestClient.\n                                 paginatedSearchUser(\n@@ -1221,10 +1212,6 @@ protected void onSubmit(AjaxRequestTarget target, Form form) {\n                         List<Integer> pageIdList = getPaginatorSearchIndexes();\n                         pageLinksSearchView.setList(pageIdList);\n                         target.addChildren(pageLinksSearchView, AjaxLink.class);\n-                    } catch (HttpServerErrorException e) {\n-                        LOG.error(\"While searching users\", e);\n-                        error(e.getMessage());\n-                        return;\n                     } catch (SyncopeClientCompositeErrorException e) {\n                         LOG.error(\"While searching users\", e);\n                         error(e.getMessage());\n@@ -1245,7 +1232,9 @@ protected void onSubmit(AjaxRequestTarget target, Form form) {\n             }\n \n             @Override\n-            protected void onError(AjaxRequestTarget target, Form form) {\n+            protected void onError(final AjaxRequestTarget target,\n+                    final Form form) {\n+\n                 target.addComponent(form.get(\"searchFeedback\"));\n             }\n         });\n@@ -1339,8 +1328,8 @@ public List<Integer> getPaginatorIndexes() {\n     }\n \n     /**\n-     * Return the user's attributes columnsList to display, ordered\n-     * @param userTO instance\n+     * Return the user's attributes columnsList to display, ordered.\n+     * @param user instance\n      * @return attributes columnsList to view depending the selection\n      */\n     public List<NameValuePair> attributesToDisplay(final UserTO user) {\n@@ -1385,22 +1374,19 @@ public List<NameValuePair> attributesToDisplay(final UserTO user) {\n      * @param window\n      * @param usersTableSearchContainer\n      */\n-    public void setWindowClosedCallback(final ModalWindow window,\n+    public final void setWindowClosedCallback(final ModalWindow window,\n             final WebMarkupContainer container) {\n \n         window.setWindowClosedCallback(\n                 new ModalWindow.WindowClosedCallback() {\n \n                     public void onClose(AjaxRequestTarget target) {\n                         target.addComponent(container);\n+                        target.addComponent(feedbackPanel);\n \n                         if (operationResult) {\n                             info(getString(\"operation_succeded\"));\n-                            target.addComponent(feedbackPanel);\n                             operationResult = false;\n-                        } //When the window is closed without calling backend\n-                        else {\n-                            target.addComponent(feedbackPanel);\n                         }\n                     }\n                 });\n@@ -1427,33 +1413,27 @@ private void setupSearchConditionsList() {\n      * @return NodeCond\n      */\n     public NodeCond buildSearchExpression(\n-            List<SearchConditionWrapper> conditions) {\n-\n-        AttributeCond attributeCond = null;\n-        MembershipCond membershipCond = null;\n-\n-        List<SearchConditionWrapper> subList = null;\n+            final List<SearchConditionWrapper> conditions) {\n \n         SearchConditionWrapper searchConditionWrapper = conditions.iterator().\n                 next();\n \n+        AttributeCond attributeCond = null;\n+        MembershipCond membershipCond = null;\n         if (searchConditionWrapper.getFilterType()\n                 == SearchConditionWrapper.FilterType.ATTRIBUTE) {\n \n             attributeCond = new AttributeCond();\n             attributeCond.setSchema(searchConditionWrapper.getFilterName());\n             attributeCond.setType(searchConditionWrapper.getType());\n-            attributeCond.setExpression(searchConditionWrapper.getFilterValue());\n-\n+            attributeCond.setExpression(\n+                    searchConditionWrapper.getFilterValue());\n         } else {\n-\n             membershipCond = new MembershipCond();\n             membershipCond.setRoleName(searchConditionWrapper.getFilterName());\n-\n         }\n \n         if (conditions.size() == 1) {\n-\n             if (searchConditionWrapper.getFilterType()\n                     == SearchConditionWrapper.FilterType.ATTRIBUTE) {\n                 if (searchConditionWrapper.isNotOperator()) {\n@@ -1468,10 +1448,9 @@ public NodeCond buildSearchExpression(\n                     return NodeCond.getLeafCond(membershipCond);\n                 }\n             }\n-\n         } else {\n-\n-            subList = conditions.subList(1, conditions.size());\n+            List<SearchConditionWrapper> subList =\n+                    conditions.subList(1, conditions.size());\n \n             searchConditionWrapper = subList.iterator().next();\n \n@@ -1484,67 +1463,50 @@ public NodeCond buildSearchExpression(\n                     if (attributeCond != null) {\n                         return NodeCond.getAndCond(\n                                 NodeCond.getLeafCond(attributeCond),\n-                                buildSearchExpression(\n-                                new ArrayList<SearchConditionWrapper>(subList)));\n+                                buildSearchExpression(subList));\n                     } else {\n                         return NodeCond.getAndCond(\n                                 NodeCond.getLeafCond(membershipCond),\n-                                buildSearchExpression(\n-                                new ArrayList<SearchConditionWrapper>(subList)));\n+                                buildSearchExpression(subList));\n                     }\n                 } else {\n                     if (attributeCond != null) {\n                         return NodeCond.getAndCond(\n                                 NodeCond.getLeafCond(attributeCond),\n-                                buildSearchExpression(\n-                                new ArrayList<SearchConditionWrapper>(subList)));\n+                                buildSearchExpression(subList));\n                     } else {\n                         return NodeCond.getAndCond(\n                                 NodeCond.getLeafCond(membershipCond),\n-                                buildSearchExpression(\n-                                new ArrayList<SearchConditionWrapper>(subList)));\n+                                buildSearchExpression(subList));\n                     }\n                 }\n-\n             } else {\n                 if (searchConditionWrapper.getFilterType()\n                         == SearchConditionWrapper.FilterType.ATTRIBUTE) {\n                     if (attributeCond != null) {\n                         return NodeCond.getOrCond(\n                                 NodeCond.getLeafCond(attributeCond),\n-                                buildSearchExpression(\n-                                new ArrayList<SearchConditionWrapper>(subList)));\n+                                buildSearchExpression(subList));\n                     } else {\n                         return NodeCond.getOrCond(\n                                 NodeCond.getLeafCond(membershipCond),\n-                                buildSearchExpression(\n-                                new ArrayList<SearchConditionWrapper>(subList)));\n+                                buildSearchExpression(subList));\n                     }\n                 } else {\n                     if (attributeCond != null) {\n                         return NodeCond.getOrCond(\n                                 NodeCond.getLeafCond(attributeCond),\n-                                buildSearchExpression(\n-                                new ArrayList<SearchConditionWrapper>(subList)));\n+                                buildSearchExpression(subList));\n                     } else {\n                         return NodeCond.getOrCond(\n                                 NodeCond.getLeafCond(membershipCond),\n-                                buildSearchExpression(\n-                                new ArrayList<SearchConditionWrapper>(subList)));\n+                                buildSearchExpression(subList));\n                     }\n                 }\n             }\n         }\n     }\n \n-    /**\n-     *  Init users to display.\n-     */\n-    public void setupPaginatedUsers() {\n-        paginatedUsers = userRestClient.getPaginatedUser(currentViewPage,\n-                paginatorRows);\n-    }\n-\n     /**\n      * Refresh paginator search after page link click.\n      */\n@@ -1574,7 +1536,6 @@ public List<Integer> getPaginatorSearchIndexes() {\n         int endIndex = totalPages;\n \n         if (totalPages > 10) {\n-\n             if (startIndex + 9 <= totalPages) {\n                 endIndex = startIndex + 9;\n             } else {"},{"sha":"d44ce53f9513551afe4ca74b91fbbad8fef6fc6b","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/AjaxCheckBoxPanel.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java?ref=b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea","patch":"@@ -14,18 +14,19 @@\n  */\n package org.syncope.console.wicket.markup.html.form;\n \n+import org.apache.wicket.markup.html.form.CheckBox;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n \n public class AjaxCheckBoxPanel extends Panel {\n \n     public AjaxCheckBoxPanel(final String id, final String name,\n-            final IModel<Boolean> model, boolean required) {\n+            final IModel<Boolean> model, final boolean required) {\n \n         super(id, model);\n \n-        add(new UpdatingCheckBox(\"checkboxField\", model).setLabel(\n+        add(new CheckBox(\"checkboxField\", model).setLabel(\n                 new Model(name)));\n     }\n \n@@ -35,7 +36,7 @@ public AjaxCheckBoxPanel(final String id, final String name,\n \n         super(id, model);\n \n-        add(new UpdatingCheckBox(\"checkboxField\", model).setLabel(\n+        add(new CheckBox(\"checkboxField\", model).setLabel(\n                 new Model(name)).setEnabled(!readonly));\n     }\n }"},{"sha":"1ff7ae865aa2e03a80aaac327af4ff47f0b9b655","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/AjaxDropDownChoicePanel.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java?ref=b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea","patch":"@@ -16,7 +16,9 @@\n \n import java.util.List;\n import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n+import org.apache.wicket.markup.html.form.TextField;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n@@ -35,7 +37,7 @@ public AjaxDropDownChoicePanel(final String id, final String name,\n             add(new Label(\"required\", \"\"));\n         }\n \n-        add(new UpdatingDropDownChoice(\"dropDownChoiceField\", model, choices,\n+        add(new DropDownChoice(\"dropDownChoiceField\", model, choices,\n                 renderer).setRequired(required).setLabel(new Model(name)));\n     }\n \n@@ -51,7 +53,7 @@ public AjaxDropDownChoicePanel(final String id, final String name,\n             add(new Label(\"required\", \"\"));\n         }\n \n-        add(new UpdatingTextField(\"dropDownChoiceField\", model).setRequired(\n+        add(new TextField(\"dropDownChoiceField\", model).setRequired(\n                 required).setLabel(new Model(name)).setEnabled(!readonly));\n     }\n }"},{"sha":"d1d1151e936c3c239e329b8b56cee4545e1c19eb","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/AjaxTextFieldPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java?ref=b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea","patch":"@@ -15,6 +15,7 @@\n package org.syncope.console.wicket.markup.html.form;\n \n import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.TextField;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n@@ -32,7 +33,7 @@ public AjaxTextFieldPanel(final String id, final String name,\n             add(new Label(\"required\", \"\"));\n         }\n \n-        add(new UpdatingTextField(\"textField\", model).setRequired(required).\n+        add(new TextField(\"textField\", model).setRequired(required).\n                 setLabel(new Model(name)));\n     }\n \n@@ -48,7 +49,7 @@ public AjaxTextFieldPanel(final String id, final String name,\n             add(new Label(\"required\", \"\"));\n         }\n \n-        add(new UpdatingTextField(\"textField\", model).setRequired(required).\n+        add(new TextField(\"textField\", model).setRequired(required).\n                 setLabel(new Model(name)).setEnabled(!readonly));\n     }\n }"},{"sha":"14d5004c672c3c5c900656ee6ff0bb17a77f7948","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/UpdatingAutoCompleteTextField.java","status":"removed","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75f8c515103887973082bd946b1e9fd1da1238f5/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FUpdatingAutoCompleteTextField.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75f8c515103887973082bd946b1e9fd1da1238f5/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FUpdatingAutoCompleteTextField.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FUpdatingAutoCompleteTextField.java?ref=75f8c515103887973082bd946b1e9fd1da1238f5","patch":"@@ -1,37 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.console.wicket.markup.html.form;\n-\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n-import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteTextField;\n-import org.apache.wicket.model.IModel;\n-\n-/**\n- * Extension class of AutoCompleteTextField. It's purposed for storing values in\n- * the corresponding property model after pressing 'Add' button.\n- */\n-public abstract class UpdatingAutoCompleteTextField\n-        extends AutoCompleteTextField {\n-\n-    public UpdatingAutoCompleteTextField(final String id, final IModel model) {\n-        super(id, model);\n-        add(new AjaxFormComponentUpdatingBehavior(\"onblur\") {\n-\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-            }\n-        });\n-    }\n-}"},{"sha":"a46c3ad4c2c59232ee272f69adca77060bbc91b1","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/UpdatingCheckBox.java","status":"removed","additions":0,"deletions":34,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75f8c515103887973082bd946b1e9fd1da1238f5/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FUpdatingCheckBox.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75f8c515103887973082bd946b1e9fd1da1238f5/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FUpdatingCheckBox.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FUpdatingCheckBox.java?ref=75f8c515103887973082bd946b1e9fd1da1238f5","patch":"@@ -1,34 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.console.wicket.markup.html.form;\n-\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.markup.html.form.AjaxCheckBox;\n-import org.apache.wicket.model.IModel;\n-\n-/**\n- * Extension class of CheckBox. It's purposed for storing values in the\n- * corresponding property model after pressing 'Add' button.\n- */\n-public class UpdatingCheckBox extends AjaxCheckBox {\n-\n-    public UpdatingCheckBox(final String id, final IModel<Boolean> model) {\n-        super(id, model);\n-    }\n-\n-    @Override\n-    protected void onUpdate(final AjaxRequestTarget target) {\n-    }\n-}"},{"sha":"7d3c3466ce41b2a819c798024582551c2360e810","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/UpdatingDropDownChoice.java","status":"removed","additions":0,"deletions":52,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75f8c515103887973082bd946b1e9fd1da1238f5/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FUpdatingDropDownChoice.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75f8c515103887973082bd946b1e9fd1da1238f5/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FUpdatingDropDownChoice.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FUpdatingDropDownChoice.java?ref=75f8c515103887973082bd946b1e9fd1da1238f5","patch":"@@ -1,52 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.console.wicket.markup.html.form;\n-\n-import java.util.List;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n-import org.apache.wicket.markup.html.form.DropDownChoice;\n-import org.apache.wicket.markup.html.form.IChoiceRenderer;\n-import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.PropertyModel;\n-\n-/**\n- * Extension class of DropDownChoice. It's purposed for storing values in the\n- * corresponding property model after pressing 'Add' button.\n- */\n-public class UpdatingDropDownChoice extends DropDownChoice {\n-\n-    public UpdatingDropDownChoice(final String id, final PropertyModel model,\n-            final IModel imodel) {\n-\n-        super(id, model, imodel);\n-        add(new AjaxFormComponentUpdatingBehavior(\"onblur\") {\n-\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-            }\n-        });\n-    }\n-\n-    public UpdatingDropDownChoice(final String id, final IModel model,\n-            final List choices, final IChoiceRenderer renderer) {\n-\n-        super(id, model, choices, renderer);\n-        add(new AjaxFormComponentUpdatingBehavior(\"onblur\") {\n-\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-            }\n-        });\n-    }\n-}"},{"sha":"aa16707b6d896c5c72d01f820d14fab76336fb90","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/UpdatingTextField.java","status":"removed","additions":0,"deletions":47,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75f8c515103887973082bd946b1e9fd1da1238f5/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FUpdatingTextField.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75f8c515103887973082bd946b1e9fd1da1238f5/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FUpdatingTextField.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FUpdatingTextField.java?ref=75f8c515103887973082bd946b1e9fd1da1238f5","patch":"@@ -1,47 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.console.wicket.markup.html.form;\n-\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n-import org.apache.wicket.markup.html.form.TextField;\n-import org.apache.wicket.model.IModel;\n-\n-/**\n- * Extension class of TextField. It's purposed for storing values in the\n- * corresponding property model after pressing 'Add' button.\n- */\n-public class UpdatingTextField extends TextField {\n-\n-    public UpdatingTextField(final String id, final IModel model,\n-            final Class type) {\n-\n-        super(id, model, type);\n-        add(new AjaxFormComponentUpdatingBehavior(\"onblur\") {\n-\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-            }\n-        });\n-    }\n-\n-    public UpdatingTextField(final String id, final IModel model) {\n-        super(id, model);\n-        add(new AjaxFormComponentUpdatingBehavior(\"onblur\") {\n-\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-            }\n-        });\n-    }\n-}"},{"sha":"7db546c4672743161975af20724b0766d7526d34","filename":"console/src/main/resources/org/syncope/console/pages/BasePage.html","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBasePage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBasePage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBasePage.html?ref=b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea","patch":"@@ -157,8 +157,8 @@\n \n         <wicket:child />\n \n-        <div id=\"veil\" style=\"display:none;position:absolute;top:0;left:0;z-index:99999;background-color:black;width:100%;height:100%;color:white;opacity:0.1;filter:alpha(opacity=10);\">\n-            <h1>Can't touch this</h1>\n+        <div id=\"veil\" style=\"display:none;position:absolute;top:0;left:0;z-index:99999;background-color:black;width:2000px;height:20000px;color:white;opacity:0.1;filter:alpha(opacity=10);\">\n+            <h1>&nbsp;</h1>\n         </div>\n     </body>\n </html>\n\\ No newline at end of file"},{"sha":"6107cde9961f88267acea3c102ce0a0042b5fe1e","filename":"console/src/main/resources/org/syncope/console/pages/Users.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.properties?ref=b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea","patch":"@@ -25,7 +25,7 @@ search_results_title=Search results:\n search_noResults=No matches found.\n reset=Reset\n search_not_value=Not value\n-search_filter_type=Filter value\n+search_filter_type=Filter type\n search_filter_name=Filter name\n search_filter_value=Filter value\n search_type_cond=Condition"},{"sha":"74420fc894aefeee77ec64b84f72b76744331ae8","filename":"console/src/main/resources/org/syncope/console/pages/Users_it.properties","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers_it.properties?ref=b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea","patch":"@@ -24,9 +24,9 @@ search_noResults=Nessuna corrispondenza trovata.\n reset=Reset\n addOrButton=+ Or\n search_not_value=Not\n-search_filter_type=Filtro\n-search_filter_name=Nome\n-search_filter_value=Valore\n+search_filter_type=Tipo filtro\n+search_filter_name=Nome filtro\n+search_filter_value=Valore filtro\n search_type_cond=Condizione\n showingFrom=Risultati da\n showingTo=a"},{"sha":"3bbd813432477d51b5b0aae3a2673129058f5474","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserSearchDAOImpl.java","status":"modified","additions":12,"deletions":6,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java?ref=b79fce1454b63c91e3fb1f11cdc6ac9e977d64ea","patch":"@@ -134,7 +134,7 @@ private List<SyncopeUser> doSearch(final NodeCond nodeCond,\n         StringBuilder queryString = getQuery(nodeCond, parameters);\n \n         Query query = entityManager.createNativeQuery(queryString.toString());\n-        // @page starts from 1, while setFirtResult() starts from 0\n+        // page starts from 1, while setFirtResult() starts from 0\n         if (page >= 1) {\n             query.setFirstResult(page - 1);\n         }\n@@ -367,12 +367,18 @@ private String getQuery(final AttributeCond cond,\n                 break;\n \n             case LIKE:\n-                query.append(\"' AND \").append(getFieldName(schema.getType()));\n-                if (not) {\n-                    query.append(\" NOT \");\n+                if (schema.getType() == SchemaType.String) {\n+                    query.append(\"' AND \").\n+                            append(getFieldName(schema.getType()));\n+                    if (not) {\n+                        query.append(\" NOT \");\n+                    }\n+                    query.append(\" LIKE '\").append(cond.getExpression()).\n+                            append(\"'\");\n+                } else {\n+                    query.append(\"' AND 1=1\");\n+                    LOG.error(\"LIKE is only compatible with string schemas\");\n                 }\n-                query.append(\" LIKE '\").append(cond.getExpression()).\n-                        append(\"'\");\n                 break;\n \n             case EQ:"}]}