{"sha":"47bd8ca9fbba11a000d7bd13cd4992e13d868e69","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ3YmQ4Y2E5ZmJiYTExYTAwMGQ3YmQxM2NkNDk5MmUxM2Q4NjhlNjk=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-31T10:16:08Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-31T10:16:08Z"},"message":"[SYNCOPE-231]\n* adding JAVA DOC for Service Interfaces\n* Fixing getOptions Bug in UserRequestService (implementations)\n* Code cleanup\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1440895 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"00df8d21820e2dec10abebb8d0c893e82341c22d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/00df8d21820e2dec10abebb8d0c893e82341c22d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/47bd8ca9fbba11a000d7bd13cd4992e13d868e69","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/47bd8ca9fbba11a000d7bd13cd4992e13d868e69","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/47bd8ca9fbba11a000d7bd13cd4992e13d868e69","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/47bd8ca9fbba11a000d7bd13cd4992e13d868e69/comments","author":null,"committer":null,"parents":[{"sha":"4fc0b470bb807f027597a51279a916f16fa85464","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4fc0b470bb807f027597a51279a916f16fa85464","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4fc0b470bb807f027597a51279a916f16fa85464"}],"stats":{"total":129,"additions":111,"deletions":18},"files":[{"sha":"2076f947a45ac11ed701a0f8220c8083cee8035b","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/UserRequestServiceProxy.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47bd8ca9fbba11a000d7bd13cd4992e13d868e69/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserRequestServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47bd8ca9fbba11a000d7bd13cd4992e13d868e69/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserRequestServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserRequestServiceProxy.java?ref=47bd8ca9fbba11a000d7bd13cd4992e13d868e69","patch":"@@ -36,7 +36,10 @@ public UserRequestServiceProxy(final String baseUrl, final RestTemplate restTemp\n \r\n     @Override\r\n     public Response getOptions() {\r\n-        return Response.ok().allow(\"GET\", \"POST\", \"DELETE\").header(SYNCOPE_CREATE_ALLOWED, isCreateAllowed()).build();\r\n+        return Response.ok()\r\n+                .header(\"Allow\", \"GET,POST,OPTIONS,HEAD\")\r\n+                .header(SYNCOPE_CREATE_ALLOWED, isCreateAllowed())\r\n+                .build();\r\n     }\r\n \r\n     @Override\r\n@@ -75,13 +78,13 @@ public List<UserRequestTO> list() {\n \r\n     @Override\r\n     public UserRequestTO read(final Long requestId) {\r\n-        return getRestTemplate().getForObject(\r\n-                baseUrl + \"user/request/read/{requestId}.json\", UserRequestTO.class, requestId);\r\n+        return getRestTemplate().getForObject(baseUrl + \"user/request/read/{requestId}.json\", UserRequestTO.class,\r\n+                requestId);\r\n     }\r\n \r\n     @Override\r\n     public void delete(final Long requestId) {\r\n-        getRestTemplate().getForObject(\r\n-                baseUrl + \"user/request/deleteRequest/{requestId}.json\", UserRequestTO.class, requestId);\r\n+        getRestTemplate().getForObject(baseUrl + \"user/request/deleteRequest/{requestId}.json\", UserRequestTO.class,\r\n+                requestId);\r\n     }\r\n }\r"},{"sha":"4d5f58035f79140fa7f20a22af876ecc77a304c8","filename":"common/src/main/java/org/apache/syncope/common/services/ReportService.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47bd8ca9fbba11a000d7bd13cd4992e13d868e69/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47bd8ca9fbba11a000d7bd13cd4992e13d868e69/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java?ref=47bd8ca9fbba11a000d7bd13cd4992e13d868e69","patch":"@@ -28,9 +28,7 @@\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n-import javax.ws.rs.Produces;\r\n import javax.ws.rs.QueryParam;\r\n-import javax.ws.rs.core.MediaType;\r\n import javax.ws.rs.core.Response;\r\n \r\n import org.apache.syncope.common.to.ReportExecTO;\r"},{"sha":"78cbf267c6f6742ace23eb927e6ed6a5d9da624a","filename":"common/src/main/java/org/apache/syncope/common/services/ResourceService.java","status":"modified","additions":37,"deletions":3,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47bd8ca9fbba11a000d7bd13cd4992e13d868e69/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47bd8ca9fbba11a000d7bd13cd4992e13d868e69/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FResourceService.java?ref=47bd8ca9fbba11a000d7bd13cd4992e13d868e69","patch":"@@ -37,37 +37,71 @@\n @Path(\"resources\")\r\n public interface ResourceService {\r\n \r\n+    /**\r\n+     * @param resourceTO Resource to be checked\r\n+     * @return Returns true, if connection to resource could be established\r\n+     */\r\n     @POST\r\n-    @Path(\"validate\")\r\n+    @Path(\"check\")\r\n     boolean check(ResourceTO resourceTO);\r\n \r\n+    /**\r\n+     * @param resourceTO Resource to be created\r\n+     * @return Response containing URI location for created resource\r\n+     */\r\n     @POST\r\n     Response create(ResourceTO resourceTO);\r\n \r\n+    /**\r\n+     * @param resourceName Name of resource to be deleted\r\n+     */\r\n     @DELETE\r\n     @Path(\"{resourceName}\")\r\n     void delete(@PathParam(\"resourceName\") String resourceName);\r\n \r\n+    /**\r\n+     * @param resourceName Name of resource to get connector from\r\n+     * @param type\r\n+     * @param objectId\r\n+     * @return Returns connector for matching parameters\r\n+     */\r\n     @GET\r\n     @Path(\"{resourceName}/{type}/{objectId}\")\r\n     ConnObjectTO getConnector(@PathParam(\"resourceName\") String resourceName,\r\n             @PathParam(\"type\") AttributableType type, @PathParam(\"objectId\") String objectId);\r\n \r\n-    // TODO: is it a resource method?\r\n+    /**\r\n+     * @return Returns PropagationActionsClasses\r\n+     */\r\n     @GET\r\n     @Path(\"propagationActionsClasses\")\r\n     Set<PropagationActionClassTO> getPropagationActionsClasses();\r\n \r\n+    /**\r\n+     * @return Returns list of all Resources\r\n+     */\r\n     @GET\r\n     List<ResourceTO> list();\r\n \r\n+    /**\r\n+     * @param connInstanceId Connector id to filter for resources\r\n+     * @return Returns all resources using matching connector\r\n+     */\r\n     @GET\r\n-    List<ResourceTO> list(@MatrixParam(\"connInstanceId\") Long connInstanceId);\r\n+    List<ResourceTO> list(@MatrixParam(\"connectorId\") Long connInstanceId);\r\n \r\n+    /**\r\n+     * @param resourceName Name of resource to be read\r\n+     * @return Resource with matching name\r\n+     */\r\n     @GET\r\n     @Path(\"{resourceName}\")\r\n     ResourceTO read(@PathParam(\"resourceName\") String resourceName);\r\n \r\n+    /**\r\n+     * @param resourceName Name of resource to be updated\r\n+     * @param resourceTO Resource to be stored\r\n+     */\r\n     @PUT\r\n     @Path(\"{resourceName}\")\r\n     void update(@PathParam(\"resourceName\") String resourceName, ResourceTO resourceTO);\r"},{"sha":"cea1ac99f27b6ee7f5a145ba690e0dd18ea61fe3","filename":"common/src/main/java/org/apache/syncope/common/services/RoleService.java","status":"modified","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47bd8ca9fbba11a000d7bd13cd4992e13d868e69/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47bd8ca9fbba11a000d7bd13cd4992e13d868e69/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java?ref=47bd8ca9fbba11a000d7bd13cd4992e13d868e69","patch":"@@ -35,52 +35,110 @@\n @Path(\"roles\")\r\n public interface RoleService {\r\n \r\n+    /**\r\n+     * @param roleId ID of role to get children from\r\n+     * @return Returns list of children for selected role\r\n+     */\r\n     @GET\r\n     @Path(\"{roleId}/children\")\r\n     List<RoleTO> children(@PathParam(\"roleId\") Long roleId);\r\n \r\n+    /**\r\n+     * @return Returns number of known roles. (size of list)\r\n+     */\r\n     @GET\r\n     @Path(\"count\")\r\n     int count();\r\n \r\n+    /**\r\n+     * @param roleTO Role to be created\r\n+     * @return Response containing URI location for created role, as well as the role itself enriched with propagation\r\n+     * status information\r\n+     */\r\n     @POST\r\n     Response create(RoleTO roleTO);\r\n \r\n+    /**\r\n+     * @param roleId ID of role to be deleted\r\n+     * @return Returns deleted role, enriched with propagation status information\r\n+     */\r\n     @DELETE\r\n     @Path(\"{roleId}\")\r\n     RoleTO delete(@PathParam(\"roleId\") Long roleId);\r\n \r\n+    /**\r\n+     * @return Returns list of all knwon roles\r\n+     */\r\n     @GET\r\n     List<RoleTO> list();\r\n \r\n+    /**\r\n+     * @param page Page of roles in relation to size parameter\r\n+     * @param size Number of roles to be displayed per page\r\n+     * @return Returns paginated list of roles\r\n+     */\r\n     @GET\r\n     List<RoleTO> list(@QueryParam(\"page\") int page, @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n \r\n+    /**\r\n+     * @param roleId Id of role to get parent role from\r\n+     * @return Returns parent role or null if no parent exists\r\n+     */\r\n     @GET\r\n     @Path(\"{roleId}/parent\")\r\n     RoleTO parent(@PathParam(\"roleId\") Long roleId);\r\n \r\n+    /**\r\n+     * @param roleId ID of role to be read\r\n+     * @return Returns role with matching id\r\n+     */\r\n     @GET\r\n     @Path(\"{roleId}\")\r\n     RoleTO read(@PathParam(\"roleId\") Long roleId);\r\n \r\n+    /**\r\n+     * @param searchCondition Filter condition for role list\r\n+     * @return Returns list of roles with matching filter conditions\r\n+     */\r\n     @POST\r\n     @Path(\"search\")\r\n     List<RoleTO> search(NodeCond searchCondition);\r\n \r\n+    /**\r\n+     * @param searchCondition Filter condition for role list\r\n+     * @param page Page of roles in relation to size parameter\r\n+     * @param size Number of roles to be displayed per page\r\n+     * @return Returns paginated list of roles with matching filter conditions\r\n+     */\r\n     @POST\r\n     @Path(\"search\")\r\n     List<RoleTO> search(NodeCond searchCondition, @QueryParam(\"page\") int page,\r\n             @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n \r\n+    /**\r\n+     * @param searchCondition Filter condition for role list\r\n+     * @return Returns number of roles matching provided filter conditions\r\n+     */\r\n     @POST\r\n     @Path(\"search/count\")\r\n     int searchCount(NodeCond searchCondition);\r\n \r\n+    /**\r\n+     * This method is similar to {@link #read(Long)}, but uses different authentication handling to ensure that a user\r\n+     * can read his own roles.\r\n+     *\r\n+     * @param roleId ID of role to be read\r\n+     * @return Returns role with matching id\r\n+     */\r\n     @GET\r\n     @Path(\"{roleId}/own\")\r\n     RoleTO selfRead(@PathParam(\"roleId\") Long roleId);\r\n \r\n+    /**\r\n+     * @param roleId ID of role to be updated\r\n+     * @param roleMod Role object containing list of changes to be applied for selected role\r\n+     * @return Returns updated role, merged from existing role and provided roleMod\r\n+     */\r\n     @POST\r\n     @Path(\"{roleId}\")\r\n     RoleTO update(@PathParam(\"roleId\") Long roleId, RoleMod roleMod);\r"},{"sha":"24f52f2b045098293a696acde95406661e0e4eae","filename":"core/src/main/java/org/apache/syncope/core/services/UserRequestServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47bd8ca9fbba11a000d7bd13cd4992e13d868e69/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47bd8ca9fbba11a000d7bd13cd4992e13d868e69/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java?ref=47bd8ca9fbba11a000d7bd13cd4992e13d868e69","patch":"@@ -42,7 +42,7 @@ public class UserRequestServiceImpl implements UserRequestService, ContextAware\n \n     @Override\n     public Response getOptions() {\n-        return Response.ok().allow(\"GET\", \"POST\", \"DELETE\")\n+        return Response.ok().header(\"Allow\", \"GET,POST,OPTIONS,HEAD\")\n                 .header(SYNCOPE_CREATE_ALLOWED, userRequestController.isCreateAllowedByConf()).build();\n     }\n "},{"sha":"2b5f2ce9af2c15c10501be775a27bd46025c7244","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47bd8ca9fbba11a000d7bd13cd4992e13d868e69/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47bd8ca9fbba11a000d7bd13cd4992e13d868e69/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=47bd8ca9fbba11a000d7bd13cd4992e13d868e69","patch":"@@ -345,9 +345,9 @@ protected void assertCreated(final Response response) {\n                     + builder.toString());\n         }\n     }\n-    \n-    <T extends AbstractSchemaTO> Response createSchema(@PathParam(\"kind\") AttributableType kind,\n-            @PathParam(\"type\") SchemaType type, T schemaTO) {\n+\n+    <T extends AbstractSchemaTO> Response createSchema(final AttributableType kind,\n+            final SchemaType type, final T schemaTO) {\n         Response response = schemaService.create(kind, type, schemaTO);\n         if (response.getStatus() != HttpStatus.SC_CREATED) {\n             Exception ex = clientExceptionMapper.fromResponse(response);"},{"sha":"ef49409b364342b3a7ae7ddcf1b65d5f275fb5a9","filename":"core/src/test/java/org/apache/syncope/core/rest/UserRequestTestITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47bd8ca9fbba11a000d7bd13cd4992e13d868e69/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47bd8ca9fbba11a000d7bd13cd4992e13d868e69/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java?ref=47bd8ca9fbba11a000d7bd13cd4992e13d868e69","patch":"@@ -121,8 +121,8 @@ public void update() {\n         }\n \n         // 3. auth as user just created\n-        UserRequestService userRequestService2 = setupCredentials(userRequestService, UserRequestService.class, userTO.getUsername(),\n-                initialPassword);\n+        UserRequestService userRequestService2 = setupCredentials(userRequestService, UserRequestService.class,\n+                userTO.getUsername(), initialPassword);\n \n         // 4. update with same password: not matching password policy\n         try {\n@@ -170,8 +170,8 @@ public void delete() {\n         }\n \n         // 3. auth as user just created\n-        UserRequestService userRequestService2 = setupCredentials(userRequestService, UserRequestService.class, userTO.getUsername(),\n-                initialPassword);\n+        UserRequestService userRequestService2 = setupCredentials(userRequestService, UserRequestService.class,\n+                userTO.getUsername(), initialPassword);\n \n         // 4. now request user delete works\n         createUserRequest(userRequestService2, new UserRequestTO(userTO.getId()));"}]}