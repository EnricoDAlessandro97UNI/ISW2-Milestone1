{"sha":"dd4dd571c8544803a99124cbc0a992b14a18ec7a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRkNGRkNTcxYzg1NDQ4MDNhOTkxMjRjYmMwYTk5MmIxNGExOGVjN2E=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-09T12:27:56Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-09T12:27:56Z"},"message":"[SYNCOPE-704] Adjusting after CXF-6633","tree":{"sha":"0d1e84295a2de2f0b96fb79aa2cf05fce9396ae5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0d1e84295a2de2f0b96fb79aa2cf05fce9396ae5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/dd4dd571c8544803a99124cbc0a992b14a18ec7a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dd4dd571c8544803a99124cbc0a992b14a18ec7a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dd4dd571c8544803a99124cbc0a992b14a18ec7a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dd4dd571c8544803a99124cbc0a992b14a18ec7a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"62dd125d021d6b2ce18ce2746023d6ad4304b1af","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/62dd125d021d6b2ce18ce2746023d6ad4304b1af","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/62dd125d021d6b2ce18ce2746023d6ad4304b1af"}],"stats":{"total":292,"additions":1,"deletions":291},"files":[{"sha":"8f29f604f0c8a542d639f2e159f36d594197fc03","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeSwagger2Feature.java","status":"removed","additions":0,"deletions":137,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62dd125d021d6b2ce18ce2746023d6ad4304b1af/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeSwagger2Feature.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62dd125d021d6b2ce18ce2746023d6ad4304b1af/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeSwagger2Feature.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeSwagger2Feature.java?ref=62dd125d021d6b2ce18ce2746023d6ad4304b1af","patch":"@@ -1,137 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.cxf;\n-\n-import io.swagger.jaxrs.config.BeanConfig;\n-import io.swagger.jaxrs.config.DefaultReaderConfig;\n-import io.swagger.jaxrs.config.ReaderConfig;\n-import io.swagger.jaxrs.listing.ApiListingResource;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.LinkedHashSet;\n-import java.util.List;\n-import java.util.Set;\n-import javax.ws.rs.container.ContainerRequestContext;\n-import javax.ws.rs.container.ContainerRequestFilter;\n-import javax.ws.rs.core.Context;\n-import org.apache.cxf.BusFactory;\n-import org.apache.cxf.common.util.StringUtils;\n-import org.apache.cxf.endpoint.Server;\n-import org.apache.cxf.jaxrs.JAXRSServiceFactoryBean;\n-import org.apache.cxf.jaxrs.ext.MessageContext;\n-import org.apache.cxf.jaxrs.model.ClassResourceInfo;\n-import org.apache.cxf.jaxrs.model.wadl.DocumentationProvider;\n-import org.apache.cxf.jaxrs.model.wadl.JavaDocProvider;\n-import org.apache.cxf.jaxrs.provider.ServerProviderFactory;\n-import org.apache.cxf.jaxrs.swagger.Swagger2Feature;\n-import org.apache.cxf.jaxrs.utils.InjectionUtils;\n-\n-public class SyncopeSwagger2Feature extends Swagger2Feature {\n-\n-    private boolean dynamicBasePath;\n-\n-    private boolean replaceTags;\n-\n-    private DocumentationProvider javadocProvider;\n-\n-    public void setDynamicBasePath(final boolean dynamicBasePath) {\n-        this.dynamicBasePath = dynamicBasePath;\n-    }\n-\n-    public void setReplaceTags(final boolean replaceTags) {\n-        this.replaceTags = replaceTags;\n-    }\n-\n-    public void setJavaDocPath(final String javaDocPath) throws Exception {\n-        this.javadocProvider = new JavaDocProvider(BusFactory.getDefaultBus(), javaDocPath);\n-    }\n-\n-    @Override\n-    protected void addSwaggerResource(final Server server) {\n-        List<ClassResourceInfo> cris = Collections.emptyList();\n-        if (!runAsFilter) {\n-            List<Object> serviceBeans = new ArrayList<>();\n-            ApiListingResource apiListingResource = new ApiListingResource();\n-            serviceBeans.add(apiListingResource);\n-            JAXRSServiceFactoryBean sfb =\n-                    (JAXRSServiceFactoryBean) server.getEndpoint().get(JAXRSServiceFactoryBean.class.getName());\n-            sfb.setResourceClassesFromBeans(serviceBeans);\n-            cris = sfb.getClassResourceInfo();\n-            for (ClassResourceInfo cri : cris) {\n-                if (ApiListingResource.class == cri.getResourceClass()) {\n-                    InjectionUtils.injectContextProxiesAndApplication(cri, apiListingResource, null);\n-                }\n-            }\n-        }\n-        List<Object> providers = new ArrayList<>();\n-        providers.add(new SyncopeSwaggerSerializers(dynamicBasePath, replaceTags, javadocProvider, cris));\n-        providers.add(new ReaderConfigFilter());\n-        ((ServerProviderFactory) server.getEndpoint().get(\n-                ServerProviderFactory.class.getName())).setUserProviders(providers);\n-\n-        BeanConfig beanConfig = new BeanConfig();\n-        beanConfig.setResourcePackage(getResourcePackage());\n-        beanConfig.setVersion(getVersion());\n-        beanConfig.setBasePath(getBasePath());\n-        beanConfig.setHost(getHost());\n-        beanConfig.setSchemes(getSchemes());\n-        beanConfig.setTitle(getTitle());\n-        beanConfig.setDescription(getDescription());\n-        beanConfig.setContact(getContact());\n-        beanConfig.setLicense(getLicense());\n-        beanConfig.setLicenseUrl(getLicenseUrl());\n-        beanConfig.setTermsOfServiceUrl(getTermsOfServiceUrl());\n-        beanConfig.setScan(isScan());\n-        beanConfig.setPrettyPrint(isPrettyPrint());\n-        beanConfig.setFilterClass(getFilterClass());\n-    }\n-\n-    private class ReaderConfigFilter implements ContainerRequestFilter {\n-\n-        @Context\n-        private MessageContext mc;\n-\n-        @Override\n-        public void filter(final ContainerRequestContext requestContext) throws IOException {\n-            if (mc.getServletContext().getAttribute(ReaderConfig.class.getName()) == null) {\n-                if (mc.getServletConfig() != null\n-                        && Boolean.valueOf(mc.getServletConfig().getInitParameter(\"scan.all.resources\"))) {\n-\n-                    addReaderConfig(mc.getServletConfig().getInitParameter(\"ignore.routes\"));\n-                } else if (isScanAllResources()) {\n-                    addReaderConfig(getIgnoreRoutes());\n-                }\n-            }\n-        }\n-\n-        private void addReaderConfig(final String ignoreRoutesParam) {\n-            DefaultReaderConfig rc = new DefaultReaderConfig();\n-            rc.setScanAllResources(true);\n-            if (ignoreRoutesParam != null) {\n-                Set<String> routes = new LinkedHashSet<>();\n-                for (String route : StringUtils.split(ignoreRoutesParam, \",\")) {\n-                    routes.add(route.trim());\n-                }\n-                rc.setIgnoredRoutes(routes);\n-            }\n-            mc.getServletContext().setAttribute(ReaderConfig.class.getName(), rc);\n-        }\n-    }\n-}"},{"sha":"5596c2a261721f2331ffd2bb9ca3deb7c3e7228e","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeSwaggerSerializers.java","status":"removed","additions":0,"deletions":153,"changes":153,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62dd125d021d6b2ce18ce2746023d6ad4304b1af/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeSwaggerSerializers.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62dd125d021d6b2ce18ce2746023d6ad4304b1af/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeSwaggerSerializers.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeSwaggerSerializers.java?ref=62dd125d021d6b2ce18ce2746023d6ad4304b1af","patch":"@@ -1,153 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.cxf;\n-\n-import io.swagger.jaxrs.listing.SwaggerSerializers;\n-import io.swagger.models.HttpMethod;\n-import io.swagger.models.Operation;\n-import io.swagger.models.Path;\n-import io.swagger.models.Swagger;\n-import io.swagger.models.Tag;\n-import java.io.IOException;\n-import java.io.OutputStream;\n-import java.lang.annotation.Annotation;\n-import java.lang.reflect.Type;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.MultivaluedMap;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.tuple.ImmutablePair;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.cxf.jaxrs.ext.MessageContext;\n-import org.apache.cxf.jaxrs.model.ClassResourceInfo;\n-import org.apache.cxf.jaxrs.model.OperationResourceInfo;\n-import org.apache.cxf.jaxrs.model.wadl.DocumentationProvider;\n-import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n-\n-public class SyncopeSwaggerSerializers extends SwaggerSerializers {\n-\n-    private final boolean dynamicBasePath;\n-\n-    private final boolean replaceTags;\n-\n-    private final DocumentationProvider javadocProvider;\n-\n-    private final List<ClassResourceInfo> cris;\n-\n-    public SyncopeSwaggerSerializers(\n-            final boolean dynamicBasePath,\n-            final boolean replaceTags,\n-            final DocumentationProvider javadocProvider,\n-            final List<ClassResourceInfo> cris) {\n-\n-        super();\n-\n-        this.dynamicBasePath = dynamicBasePath;\n-        this.replaceTags = replaceTags;\n-        this.javadocProvider = javadocProvider;\n-        this.cris = cris;\n-    }\n-\n-    @Override\n-    public void writeTo(\n-            final Swagger data,\n-            final Class<?> type,\n-            final Type genericType,\n-            final Annotation[] annotations,\n-            final MediaType mediaType,\n-            final MultivaluedMap<String, Object> headers,\n-            final OutputStream out) throws IOException {\n-\n-        if (dynamicBasePath) {\n-            MessageContext ctx = JAXRSUtils.createContextValue(\n-                    JAXRSUtils.getCurrentMessage(), null, MessageContext.class);\n-            data.setBasePath(StringUtils.substringBeforeLast(ctx.getHttpServletRequest().getRequestURI(), \"/\"));\n-        }\n-\n-        if (replaceTags || javadocProvider != null) {\n-            Map<String, ClassResourceInfo> operations = new HashMap<>();\n-            Map<Pair<String, String>, OperationResourceInfo> methods = new HashMap<>();\n-            for (ClassResourceInfo cri : cris) {\n-                for (OperationResourceInfo ori : cri.getMethodDispatcher().getOperationResourceInfos()) {\n-                    StringBuilder fullPath = new StringBuilder().\n-                            append(cri.getURITemplate().getValue()).\n-                            append(ori.getURITemplate().getValue());\n-                    if (fullPath.charAt(fullPath.length() - 1) == '/') {\n-                        fullPath.setLength(fullPath.length() - 1);\n-                    }\n-                    // Adapt to Swagger's path expression\n-                    if (fullPath.toString().endsWith(\":.*}\")) {\n-                        fullPath.setLength(fullPath.length() - 4);\n-                        fullPath.append('}');\n-                    }\n-\n-                    operations.put(fullPath.toString(), cri);\n-                    methods.put(ImmutablePair.of(ori.getHttpMethod(), fullPath.toString()), ori);\n-                }\n-            }\n-\n-            if (replaceTags && data.getTags() != null) {\n-                data.getTags().clear();\n-            }\n-            for (final Map.Entry<String, Path> entry : data.getPaths().entrySet()) {\n-                Tag tag = null;\n-                if (replaceTags && operations.containsKey(entry.getKey())) {\n-                    ClassResourceInfo cri = operations.get(entry.getKey());\n-\n-                    tag = new Tag();\n-                    tag.setName(cri.getURITemplate().getValue());\n-                    if (javadocProvider != null) {\n-                        tag.setDescription(javadocProvider.getClassDoc(cri));\n-                    }\n-\n-                    data.addTag(tag);\n-                }\n-\n-                for (Map.Entry<HttpMethod, Operation> subentry : entry.getValue().getOperationMap().entrySet()) {\n-                    if (replaceTags && tag != null) {\n-                        subentry.getValue().setTags(Collections.singletonList(tag.getName()));\n-                    }\n-\n-                    Pair<String, String> key = ImmutablePair.of(subentry.getKey().name(), entry.getKey());\n-                    if (methods.containsKey(key) && javadocProvider != null) {\n-                        OperationResourceInfo ori = methods.get(key);\n-\n-                        subentry.getValue().setSummary(javadocProvider.getMethodDoc(ori));\n-                        for (int i = 0; i < subentry.getValue().getParameters().size(); i++) {\n-                            subentry.getValue().getParameters().get(i).\n-                                    setDescription(javadocProvider.getMethodParameterDoc(ori, i));\n-                        }\n-\n-                        if (subentry.getValue().getResponses() != null\n-                                && !subentry.getValue().getResponses().isEmpty()) {\n-\n-                            subentry.getValue().getResponses().entrySet().iterator().next().getValue().\n-                                    setDescription(javadocProvider.getMethodResponseDoc(ori));\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-        super.writeTo(data, type, genericType, annotations, mediaType, headers, out);\n-    }\n-}"},{"sha":"da615a1ad512b30b32b322b647fecd3016c90742","filename":"core/rest-cxf/src/main/resources/restCXFContext.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd4dd571c8544803a99124cbc0a992b14a18ec7a/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd4dd571c8544803a99124cbc0a992b14a18ec7a/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml?ref=dd4dd571c8544803a99124cbc0a992b14a18ec7a","patch":"@@ -92,7 +92,7 @@ under the License.\n     <property name=\"javaDocPath\" value=\"/WEB-INF/lib/syncope-common-rest-api-${syncope.version}-javadoc.jar\"/>\n   </bean>\n   \n-  <bean id=\"swagger2Feature\" class=\"org.apache.syncope.core.rest.cxf.SyncopeSwagger2Feature\">\n+  <bean id=\"swagger2Feature\" class=\"org.apache.cxf.jaxrs.swagger.Swagger2Feature\">\n     <property name=\"title\" value=\"Apache Syncope\"/>\n     <property name=\"version\" value=\"${syncope.version}\"/>\n     <property name=\"description\" value=\"Apache Syncope ${syncope.version}\"/>    "}]}