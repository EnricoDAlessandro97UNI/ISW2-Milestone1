{"sha":"62f56963c84b254dca3ab7b3941d78b31245fd55","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjYyZjU2OTYzYzg0YjI1NGRjYTNhYjdiMzk0MWQ3OGIzMTI0NWZkNTU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-06-22T06:43:36Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-06-22T06:43:36Z"},"message":"[SYNCOPE-874] Most of work done on core; console implementation is missing","tree":{"sha":"03f2b1fc6cb304f8964a6d6f2fc41a73d68a9c64","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/03f2b1fc6cb304f8964a6d6f2fc41a73d68a9c64"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/62f56963c84b254dca3ab7b3941d78b31245fd55","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/62f56963c84b254dca3ab7b3941d78b31245fd55","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/62f56963c84b254dca3ab7b3941d78b31245fd55","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/62f56963c84b254dca3ab7b3941d78b31245fd55/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"25edf001de33e017844fc21920915eac7bb883ba","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/25edf001de33e017844fc21920915eac7bb883ba","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/25edf001de33e017844fc21920915eac7bb883ba"}],"stats":{"total":3392,"additions":2669,"deletions":723},"files":[{"sha":"3e258f8fb83acf3ff8f3613e40a25ca884946802","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -206,7 +206,7 @@ protected Panel customResultBody(final String panelId, final AnyWrapper<A> item,\n \n         return new StatusPanel(\n                 panelId,\n-                ((ProvisioningResult<A>) result).getAny(),\n+                ((ProvisioningResult<A>) result).getEntity(),\n                 new ListModel<>(new ArrayList<StatusBean>()),\n                 CollectionUtils.collect(\n                         ((ProvisioningResult<A>) result).getPropagationStatuses(),\n@@ -218,7 +218,7 @@ protected Panel customResultBody(final String panelId, final AnyWrapper<A> item,\n                     public Pair<ConnObjectTO, ConnObjectWrapper> transform(final PropagationStatus input) {\n                         ConnObjectTO before = input.getBeforeObj();\n                         ConnObjectWrapper afterObjWrapper = new ConnObjectWrapper(\n-                                ((ProvisioningResult<A>) result).getAny(),\n+                                ((ProvisioningResult<A>) result).getEntity(),\n                                 input.getResource(),\n                                 input.getAfterObj());\n                         return Pair.of(before, afterObjWrapper);"},{"sha":"9a8ad8773be4014c5678abd2bf885c5918911051","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyObjectWizardBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -62,7 +62,7 @@ protected Serializable onApplyInternal(final AnyWrapper<AnyObjectTO> modelObject\n             // update just if it is changed\n             if (patch.isEmpty()) {\n                 actual = new ProvisioningResult<>();\n-                actual.setAny(inner);\n+                actual.setEntity(inner);\n             } else {\n                 actual = anyObjectRestClient.update(getOriginalItem().getInnerObject().getETagValue(), patch);\n             }"},{"sha":"875cca0288f5015a5ea6aa8e8c374ee49d24eff6","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupWizardBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -78,7 +78,7 @@ protected Serializable onApplyInternal(final AnyWrapper<GroupTO> modelObject) {\n             // update just if it is changed\n             if (patch.isEmpty()) {\n                 actual = new ProvisioningResult<>();\n-                actual.setAny(inner);\n+                actual.setEntity(inner);\n             } else {\n                 actual = groupRestClient.update(getOriginalItem().getInnerObject().getETagValue(), patch);\n             }"},{"sha":"fd4ba06ee826a088c479e0766a6834c52bbc6c7b","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/UserWizardBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -73,7 +73,7 @@ protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject) {\n             // update just if it is changed\n             if (patch.isEmpty()) {\n                 actual = new ProvisioningResult<>();\n-                actual.setAny(inner);\n+                actual.setEntity(inner);\n             } else {\n                 actual = userRestClient.update(getOriginalItem().getInnerObject().getETagValue(), patch);\n             }"},{"sha":"80743c0e6e0ab6d3b2aff916f70b265fc3b2213c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/OrgUnitTO.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"orgUnit\")\n+@XmlType\n+public class OrgUnitTO extends AbstractBaseBean implements EntityTO {\n+\n+    private static final long serialVersionUID = -1868877794174953177L;\n+\n+    private String key;\n+\n+    private String objectClass;\n+\n+    private String syncToken;\n+\n+    private String extAttrName;\n+\n+    private String connObjectLink;\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getObjectClass() {\n+        return objectClass;\n+    }\n+\n+    public void setObjectClass(final String objectClass) {\n+        this.objectClass = objectClass;\n+    }\n+\n+    public String getSyncToken() {\n+        return syncToken;\n+    }\n+\n+    public void setSyncToken(final String syncToken) {\n+        this.syncToken = syncToken;\n+    }\n+\n+    public String getExtAttrName() {\n+        return extAttrName;\n+    }\n+\n+    public void setExtAttrName(final String extAttrName) {\n+        this.extAttrName = extAttrName;\n+    }\n+\n+    public String getConnObjectLink() {\n+        return connObjectLink;\n+    }\n+\n+    public void setConnObjectLink(final String connObjectLink) {\n+        this.connObjectLink = connObjectLink;\n+    }\n+\n+}"},{"sha":"8b9f4ee60c42109af14d7ecbc502e3d1c7898a5d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisioningResult.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisioningResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisioningResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisioningResult.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.common.lib.to;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import java.util.ArrayList;\n import java.util.List;\n import javax.xml.bind.annotation.XmlElement;\n@@ -29,20 +30,21 @@\n \n @XmlRootElement(name = \"provisioningResult\")\n @XmlType\n-public class ProvisioningResult<A extends AnyTO> extends AbstractBaseBean {\n+public class ProvisioningResult<E extends EntityTO> extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 351317476398082746L;\n \n-    private A any;\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n+    private E entity;\n \n     private final List<PropagationStatus> propagationStatuses = new ArrayList<>();\n \n-    public A getAny() {\n-        return any;\n+    public E getEntity() {\n+        return entity;\n     }\n \n-    public void setAny(final A any) {\n-        this.any = any;\n+    public void setEntity(final E any) {\n+        this.entity = any;\n     }\n \n     @XmlElementWrapper(name = \"propagationStatuses\")"},{"sha":"db770e7a2105e89d85c3afaaefeb02858a26ae3a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RealmTO.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -57,6 +57,8 @@ public class RealmTO extends AbstractBaseBean implements EntityTO, TemplatableTO\n     @JsonIgnore\n     private final Map<String, AnyTO> templates = new HashMap<>();\n \n+    private final Set<String> resources = new HashSet<>();\n+\n     @Override\n     public String getKey() {\n         return key;\n@@ -121,4 +123,11 @@ public Map<String, AnyTO> getTemplates() {\n         return templates;\n     }\n \n+    @XmlElementWrapper(name = \"resources\")\n+    @XmlElement(name = \"resource\")\n+    @JsonProperty(\"resources\")\n+    public Set<String> getResources() {\n+        return resources;\n+    }\n+\n }"},{"sha":"080f73787e25e367c6036b99ff0e7b38071a3b33","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ResourceTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -57,6 +57,8 @@ public class ResourceTO extends AbstractBaseBean implements EntityTO {\n \n     private final List<ProvisionTO> provisions = new ArrayList<>();\n \n+    private OrgUnitTO orgUnit;\n+\n     private Integer propagationPriority;\n \n     private boolean randomPwdIfNotProvided;\n@@ -202,6 +204,14 @@ public List<ProvisionTO> getProvisions() {\n         return provisions;\n     }\n \n+    public OrgUnitTO getOrgUnit() {\n+        return orgUnit;\n+    }\n+\n+    public void setOrgUnit(final OrgUnitTO orgUnit) {\n+        this.orgUnit = orgUnit;\n+    }\n+\n     @XmlElementWrapper(name = \"confOverride\")\n     @XmlElement(name = \"property\")\n     @JsonProperty(\"confOverride\")"},{"sha":"2d7741550444447663b7a315b723bfe079ec3226","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -40,6 +40,7 @@ public enum ClientExceptionType {\n     InvalidConf(Response.Status.BAD_REQUEST),\n     InvalidPath(Response.Status.BAD_REQUEST),\n     InvalidProvision(Response.Status.BAD_REQUEST),\n+    InvalidOrgUnit(Response.Status.BAD_REQUEST),\n     InvalidReport(Response.Status.BAD_REQUEST),\n     InvalidReportExec(Response.Status.BAD_REQUEST),\n     InvalidRelationship(Response.Status.BAD_REQUEST),"},{"sha":"d172054e4bd4422709ec47635597339b1657f010","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/PropagationByResource.java","status":"modified","additions":42,"deletions":42,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationByResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationByResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationByResource.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -79,10 +79,10 @@ public final void purge() {\n      * Add an element.\n      *\n      * @param type resource operation type\n-     * @param resourceName target resource\n+     * @param resourceKey target resource\n      * @return whether the operation was successful or not\n      */\n-    public final boolean add(final ResourceOperation type, final String resourceName) {\n+    public final boolean add(final ResourceOperation type, final String resourceKey) {\n         Set<String> set;\n         switch (type) {\n             case CREATE:\n@@ -99,17 +99,17 @@ public final boolean add(final ResourceOperation type, final String resourceName\n                 break;\n         }\n \n-        return set.add(resourceName);\n+        return set.add(resourceKey);\n     }\n \n     /**\n      * Add some elements.\n      *\n      * @param type resource operation type\n-     * @param resourceNames target resources\n+     * @param resourceKeys target resources\n      * @return whether the operation was successful or not\n      */\n-    public boolean addAll(final ResourceOperation type, final Collection<String> resourceNames) {\n+    public boolean addAll(final ResourceOperation type, final Collection<String> resourceKeys) {\n         Set<String> set;\n         switch (type) {\n             case CREATE:\n@@ -126,30 +126,30 @@ public boolean addAll(final ResourceOperation type, final Collection<String> res\n                 break;\n         }\n \n-        return set.addAll(resourceNames);\n+        return set.addAll(resourceKeys);\n     }\n \n     /**\n      * Remove an element.\n      *\n      * @param type resource operation type\n-     * @param resourceName target resource\n+     * @param resourceKey target resource\n      * @return whether the operation was successful or not\n      */\n-    public final boolean remove(final ResourceOperation type, final String resourceName) {\n+    public final boolean remove(final ResourceOperation type, final String resourceKey) {\n         boolean result = false;\n \n         switch (type) {\n             case CREATE:\n-                result = toBeCreated.remove(resourceName);\n+                result = toBeCreated.remove(resourceKey);\n                 break;\n \n             case UPDATE:\n-                result = toBeUpdated.remove(resourceName);\n+                result = toBeUpdated.remove(resourceKey);\n                 break;\n \n             case DELETE:\n-                result = toBeDeleted.remove(resourceName);\n+                result = toBeDeleted.remove(resourceKey);\n                 break;\n \n             default:\n@@ -162,10 +162,10 @@ public final boolean remove(final ResourceOperation type, final String resourceN\n      * Remove some elements.\n      *\n      * @param type resource operation type\n-     * @param resourceNames target resources\n+     * @param resourceKeys target resources\n      * @return whether the operation was successful or not\n      */\n-    public boolean removeAll(final ResourceOperation type, final Set<String> resourceNames) {\n+    public boolean removeAll(final ResourceOperation type, final Set<String> resourceKeys) {\n         Set<String> set;\n         switch (type) {\n             case CREATE:\n@@ -182,51 +182,51 @@ public boolean removeAll(final ResourceOperation type, final Set<String> resourc\n                 break;\n         }\n \n-        return set.removeAll(resourceNames);\n+        return set.removeAll(resourceKeys);\n     }\n \n     /**\n      * Removes only the resource names in the underlying resource name sets that are contained in the specified\n      * collection.\n      *\n-     * @param resourceNames collection containing resource names to be retained in the underlying resource name sets\n+     * @param resourceKeys collection containing resource names to be retained in the underlying resource name sets\n      * @return <tt>true</tt> if the underlying resource name sets changed as a result of the call\n      * @see Collection#removeAll(java.util.Collection)\n      */\n-    public boolean removeAll(final Collection<String> resourceNames) {\n-        return toBeCreated.removeAll(resourceNames)\n-                | toBeUpdated.removeAll(resourceNames)\n-                | toBeDeleted.removeAll(resourceNames);\n+    public boolean removeAll(final Collection<String> resourceKeys) {\n+        return toBeCreated.removeAll(resourceKeys)\n+                | toBeUpdated.removeAll(resourceKeys)\n+                | toBeDeleted.removeAll(resourceKeys);\n     }\n \n     /**\n      * Retains only the resource names in the underlying resource name sets that are contained in the specified\n      * collection.\n      *\n-     * @param resourceNames collection containing resource names to be retained in the underlying resource name sets\n+     * @param resourceKeys collection containing resource names to be retained in the underlying resource name sets\n      * @return <tt>true</tt> if the underlying resource name sets changed as a result of the call\n      * @see Collection#retainAll(java.util.Collection)\n      */\n-    public boolean retainAll(final Collection<String> resourceNames) {\n-        return toBeCreated.retainAll(resourceNames)\n-                | toBeUpdated.retainAll(resourceNames)\n-                | toBeDeleted.retainAll(resourceNames);\n+    public boolean retainAll(final Collection<String> resourceKeys) {\n+        return toBeCreated.retainAll(resourceKeys)\n+                | toBeUpdated.retainAll(resourceKeys)\n+                | toBeDeleted.retainAll(resourceKeys);\n     }\n \n-    public boolean contains(final ResourceOperation type, final String resourceName) {\n+    public boolean contains(final ResourceOperation type, final String resourceKey) {\n         boolean result = false;\n \n         switch (type) {\n             case CREATE:\n-                result = toBeCreated.contains(resourceName);\n+                result = toBeCreated.contains(resourceKey);\n                 break;\n \n             case UPDATE:\n-                result = toBeUpdated.contains(resourceName);\n+                result = toBeUpdated.contains(resourceKey);\n                 break;\n \n             case DELETE:\n-                result = toBeDeleted.contains(resourceName);\n+                result = toBeDeleted.contains(resourceKey);\n                 break;\n \n             default:\n@@ -266,8 +266,8 @@ public final Set<String> get(final ResourceOperation type) {\n     public Map<String, ResourceOperation> asMap() {\n         Map<String, ResourceOperation> result = new HashMap<>();\n         for (ResourceOperation operation : ResourceOperation.values()) {\n-            for (String resourceName : get(operation)) {\n-                result.put(resourceName, operation);\n+            for (String resourceKey : get(operation)) {\n+                result.put(resourceKey, operation);\n             }\n         }\n \n@@ -278,24 +278,24 @@ public Map<String, ResourceOperation> asMap() {\n      * Set resources for a given resource operation type.\n      *\n      * @param type resource operation type\n-     * @param resourceNames to be set\n+     * @param resourceKeys to be set\n      */\n-    public final void set(final ResourceOperation type, final Collection<String> resourceNames) {\n+    public final void set(final ResourceOperation type, final Collection<String> resourceKeys) {\n \n         switch (type) {\n             case CREATE:\n                 toBeCreated.clear();\n-                toBeCreated.addAll(resourceNames);\n+                toBeCreated.addAll(resourceKeys);\n                 break;\n \n             case UPDATE:\n                 toBeUpdated.clear();\n-                toBeUpdated.addAll(resourceNames);\n+                toBeUpdated.addAll(resourceKeys);\n                 break;\n \n             case DELETE:\n                 toBeDeleted.clear();\n-                toBeDeleted.addAll(resourceNames);\n+                toBeDeleted.addAll(resourceKeys);\n                 break;\n \n             default:\n@@ -346,22 +346,22 @@ public Map<String, String> getOldConnObjectKeys() {\n     /**\n      * Fetch old connObjectKey for given resource name.\n      *\n-     * @param resourceName resource name\n+     * @param resourceKey resource name\n      * @return old connObjectKey; can be null\n      */\n-    public String getOldConnObjectKey(final String resourceName) {\n-        return oldConnObjectKeys.get(resourceName);\n+    public String getOldConnObjectKey(final String resourceKey) {\n+        return oldConnObjectKeys.get(resourceKey);\n     }\n \n     /**\n      * Add old ConnObjectKey for a given resource name.\n      *\n-     * @param resourceName resourceName resource name\n+     * @param resourceKey resourceKey resource name\n      * @param oldConnObjectKey old ConnObjectKey\n      */\n-    public void addOldConnObjectKey(final String resourceName, final String oldConnObjectKey) {\n-        if (resourceName != null && oldConnObjectKey != null) {\n-            oldConnObjectKeys.put(resourceName, oldConnObjectKey);\n+    public void addOldConnObjectKey(final String resourceKey, final String oldConnObjectKey) {\n+        if (resourceKey != null && oldConnObjectKey != null) {\n+            oldConnObjectKeys.put(resourceKey, oldConnObjectKey);\n         }\n     }\n "},{"sha":"f0960822431c91171c095d6924367f692aa97ddf","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RealmService.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -63,7 +63,8 @@ public interface RealmService extends JAXRSService {\n      *\n      * @param parentPath full path of the parent realm\n      * @param realmTO new realm.\n-     * @return Response object featuring Location header of created realm\n+     * @return Response object featuring Location header of created realm as well as the realm itself\n+     * enriched with propagation status information - ProvisioningResult as Entity\n      */\n     @POST\n     @Path(\"{parentPath:.*}\")\n@@ -74,18 +75,22 @@ public interface RealmService extends JAXRSService {\n      * Updates the realm under the given path.\n      *\n      * @param realmTO realm to be stored\n+     * @return Response object featuring the updated realm enriched with propagation status information\n+     * - ProvisioningResult as Entity\n      */\n     @PUT\n     @Path(\"{fullPath:.*}\")\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    void update(@NotNull RealmTO realmTO);\n+    Response update(@NotNull RealmTO realmTO);\n \n     /**\n      * Deletes the realm under the given path.\n      *\n      * @param fullPath realm path\n+     * @return Response object featuring the deleted realm enriched with propagation status information\n+     * - ProvisioningResult as Entity\n      */\n     @DELETE\n     @Path(\"{fullPath:.*}\")\n-    void delete(@NotNull @PathParam(\"fullPath\") String fullPath);\n+    Response delete(@NotNull @PathParam(\"fullPath\") String fullPath);\n }"},{"sha":"f8467cd0f4568fcdf87153d600f097d184031b20","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -164,7 +164,7 @@ protected ProvisioningResult<TO> after(\n         }\n \n         ProvisioningResult<TO> result = new ProvisioningResult<>();\n-        result.setAny(any);\n+        result.setEntity(any);\n         result.getPropagationStatuses().addAll(statuses);\n \n         return result;"},{"sha":"4a2462174651fac9ffdd00e1138be3a664dfaa6f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -300,7 +300,7 @@ public ProvisioningResult<AnyObjectTO> deprovision(\n         List<PropagationStatus> statuses = provisioningManager.deprovision(key, resources, nullPriorityAsync);\n \n         ProvisioningResult<AnyObjectTO> result = new ProvisioningResult<>();\n-        result.setAny(binder.getAnyObjectTO(key));\n+        result.setEntity(binder.getAnyObjectTO(key));\n         result.getPropagationStatuses().addAll(statuses);\n         return result;\n     }\n@@ -323,7 +323,7 @@ public ProvisioningResult<AnyObjectTO> provision(\n         List<PropagationStatus> statuses = provisioningManager.provision(key, resources, nullPriorityAsync);\n \n         ProvisioningResult<AnyObjectTO> result = new ProvisioningResult<>();\n-        result.setAny(binder.getAnyObjectTO(key));\n+        result.setEntity(binder.getAnyObjectTO(key));\n         result.getPropagationStatuses().addAll(statuses);\n         return result;\n     }"},{"sha":"c3a2df3d33e5f77e6cd136ff54ddea1701f45d64","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -388,7 +388,7 @@ public ProvisioningResult<GroupTO> deprovision(\n         List<PropagationStatus> statuses = provisioningManager.deprovision(key, resources, nullPriorityAsync);\n \n         ProvisioningResult<GroupTO> result = new ProvisioningResult<>();\n-        result.setAny(binder.getGroupTO(key));\n+        result.setEntity(binder.getGroupTO(key));\n         result.getPropagationStatuses().addAll(statuses);\n         return result;\n     }\n@@ -412,7 +412,7 @@ public ProvisioningResult<GroupTO> provision(\n         List<PropagationStatus> statuses = provisioningManager.provision(key, resources, nullPriorityAsync);\n \n         ProvisioningResult<GroupTO> result = new ProvisioningResult<>();\n-        result.setAny(binder.getGroupTO(key));\n+        result.setEntity(binder.getGroupTO(key));\n         result.getPropagationStatuses().addAll(statuses);\n         return result;\n     }"},{"sha":"47e04481215433e14d0919629533ed12c9a329d4","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":59,"deletions":8,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -28,9 +28,12 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n@@ -40,7 +43,12 @@\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.data.RealmDataBinder;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -57,6 +65,12 @@ public class RealmLogic extends AbstractTransactionalLogic<RealmTO> {\n     @Autowired\n     private RealmDataBinder binder;\n \n+    @Autowired\n+    private PropagationManager propagationManager;\n+\n+    @Autowired\n+    private PropagationTaskExecutor taskExecutor;\n+\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REALM_LIST + \"')\")\n     public List<RealmTO> list(final String fullPath) {\n         Realm realm = realmDAO.findByFullPath(fullPath);\n@@ -76,32 +90,56 @@ public RealmTO transform(final Realm input) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REALM_CREATE + \"')\")\n-    public RealmTO create(final String parentPath, final RealmTO realmTO) {\n+    public ProvisioningResult<RealmTO> create(final String parentPath, final RealmTO realmTO) {\n         String fullPath = StringUtils.appendIfMissing(parentPath, \"/\") + realmTO.getName();\n         if (realmDAO.findByFullPath(fullPath) != null) {\n             throw new DuplicateException(fullPath);\n         }\n \n-        return binder.getRealmTO(realmDAO.save(binder.create(parentPath, realmTO)));\n+        Realm realm = realmDAO.save(binder.create(parentPath, realmTO));\n+\n+        PropagationByResource propByRes = new PropagationByResource();\n+        for (String resource : realm.getResourceKeys()) {\n+            propByRes.add(ResourceOperation.CREATE, resource);\n+        }\n+        List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n+        taskExecutor.execute(tasks, propagationReporter, false);\n+\n+        ProvisioningResult<RealmTO> result = new ProvisioningResult<>();\n+        result.setEntity(binder.getRealmTO(realm));\n+        result.getPropagationStatuses().addAll(propagationReporter.getStatuses());\n+\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REALM_UPDATE + \"')\")\n-    public RealmTO update(final RealmTO realmTO) {\n+    public ProvisioningResult<RealmTO> update(final RealmTO realmTO) {\n         Realm realm = realmDAO.findByFullPath(realmTO.getFullPath());\n         if (realm == null) {\n             LOG.error(\"Could not find realm '\" + realmTO.getFullPath() + \"'\");\n \n             throw new NotFoundException(realmTO.getFullPath());\n         }\n \n-        binder.update(realm, realmTO);\n+        PropagationByResource propByRes = binder.update(realm, realmTO);\n         realm = realmDAO.save(realm);\n \n-        return binder.getRealmTO(realm);\n+        List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n+        taskExecutor.execute(tasks, propagationReporter, false);\n+\n+        ProvisioningResult<RealmTO> result = new ProvisioningResult<>();\n+        result.setEntity(binder.getRealmTO(realm));\n+        result.getPropagationStatuses().addAll(propagationReporter.getStatuses());\n+\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REALM_DELETE + \"')\")\n-    public RealmTO delete(final String fullPath) {\n+    public ProvisioningResult<RealmTO> delete(final String fullPath) {\n         Realm realm = realmDAO.findByFullPath(fullPath);\n         if (realm == null) {\n             LOG.error(\"Could not find realm '\" + fullPath + \"'\");\n@@ -129,9 +167,22 @@ public RealmTO delete(final String fullPath) {\n             throw containedAnys;\n         }\n \n-        RealmTO deleted = binder.getRealmTO(realm);\n+        PropagationByResource propByRes = new PropagationByResource();\n+        for (String resource : realm.getResourceKeys()) {\n+            propByRes.add(ResourceOperation.DELETE, resource);\n+        }\n+        List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n+        taskExecutor.execute(tasks, propagationReporter, false);\n+\n+        ProvisioningResult<RealmTO> result = new ProvisioningResult<>();\n+        result.setEntity(binder.getRealmTO(realm));\n+        result.getPropagationStatuses().addAll(propagationReporter.getStatuses());\n+\n         realmDAO.delete(realm);\n-        return deleted;\n+\n+        return result;\n     }\n \n     @Override"},{"sha":"d70aba0e615d8370e0a409b05c6dee939ac2effd","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -485,7 +485,7 @@ public ProvisioningResult<UserTO> deprovision(\n         List<PropagationStatus> statuses = provisioningManager.deprovision(key, resources, nullPriorityAsync);\n \n         ProvisioningResult<UserTO> result = new ProvisioningResult<>();\n-        result.setAny(binder.returnUserTO(binder.getUserTO(key)));\n+        result.setEntity(binder.returnUserTO(binder.getUserTO(key)));\n         result.getPropagationStatuses().addAll(statuses);\n         return result;\n     }\n@@ -510,7 +510,7 @@ public ProvisioningResult<UserTO> provision(\n                 provisioningManager.provision(key, changePwd, password, resources, nullPriorityAsync);\n \n         ProvisioningResult<UserTO> result = new ProvisioningResult<>();\n-        result.setAny(binder.returnUserTO(binder.getUserTO(key)));\n+        result.setEntity(binder.returnUserTO(binder.getUserTO(key)));\n         result.getPropagationStatuses().addAll(statuses);\n         return result;\n     }"},{"sha":"834f7e8353e1b5c3435a50032d43f62cfe0a70e6","filename":"core/migration/src/main/java/org/apache/syncope/core/migration/MigrationPullActions.java","status":"modified","additions":14,"deletions":15,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fmigration%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmigration%2FMigrationPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fmigration%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmigration%2FMigrationPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmigration%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmigration%2FMigrationPullActions.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -25,6 +25,7 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.TransformerUtils;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -60,19 +61,17 @@ public class MigrationPullActions extends SchedulingPullActions {\n     private final Map<String, Set<String>> memberships = new HashMap<>();\n \n     @Override\n-    public <A extends AnyTO> SyncDelta beforeProvision(\n+    public SyncDelta beforeProvision(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final A any) throws JobExecutionException {\n+            final EntityTO entity) throws JobExecutionException {\n \n         // handles resource assignment, for users and groups\n         Attribute resourcesAttr = delta.getObject().getAttributeByName(RESOURCES_ATTR);\n-        if (resourcesAttr != null\n+        if (entity instanceof AnyTO && resourcesAttr != null\n                 && resourcesAttr.getValue() != null && !resourcesAttr.getValue().isEmpty()) {\n \n-            LOG.debug(\"Found {} for {} {}, adding...\", RESOURCES_ATTR, any.getType(), any.getKey());\n-\n-            any.getResources().addAll(\n+            ((AnyTO) entity).getResources().addAll(\n                     CollectionUtils.collect(resourcesAttr.getValue(), TransformerUtils.stringValueTransformer()));\n         }\n \n@@ -81,12 +80,12 @@ public <A extends AnyTO> SyncDelta beforeProvision(\n \n     @Transactional\n     @Override\n-    public <A extends AnyTO> void after(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any,\n+    public void after(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final EntityTO entity,\n             final ProvisioningReport result)\n             throws JobExecutionException {\n \n-        if (any instanceof UserTO) {\n+        if (entity instanceof UserTO) {\n             // handles ciphered password import\n             CipherAlgorithm cipherAlgorithm = null;\n             Attribute cipherAlgorithmAttr = delta.getObject().getAttributeByName(CIPHER_ALGORITHM_ATTR);\n@@ -108,34 +107,34 @@ public void access(final char[] clearChars) {\n                     }\n                 });\n \n-                User user = userDAO.find(any.getKey());\n+                User user = userDAO.find(entity.getKey());\n                 LOG.debug(\"Setting encoded password for {}\", user);\n                 user.setEncodedPassword(password.toString(), cipherAlgorithm);\n             }\n-        } else if (any instanceof GroupTO) {\n+        } else if (entity instanceof GroupTO) {\n             // handles group membership\n             Attribute membershipsAttr = delta.getObject().getAttributeByName(MEMBERSHIPS_ATTR);\n             if (membershipsAttr != null\n                     && membershipsAttr.getValue() != null && !membershipsAttr.getValue().isEmpty()) {\n \n-                LOG.debug(\"Found {} for group {}\", MEMBERSHIPS_ATTR, any.getKey());\n+                LOG.debug(\"Found {} for group {}\", MEMBERSHIPS_ATTR, entity.getKey());\n \n                 for (Object membership : membershipsAttr.getValue()) {\n                     User member = userDAO.findByUsername(membership.toString());\n                     if (member == null) {\n-                        LOG.warn(\"Could not find member {} for group {}\", membership, any.getKey());\n+                        LOG.warn(\"Could not find member {} for group {}\", membership, entity.getKey());\n                     } else {\n                         Set<String> memb = memberships.get(member.getKey());\n                         if (memb == null) {\n                             memb = new HashSet<>();\n                             memberships.put(member.getKey(), memb);\n                         }\n-                        memb.add(any.getKey());\n+                        memb.add(entity.getKey());\n                     }\n                 }\n             }\n         } else {\n-            super.after(profile, delta, any, result);\n+            super.after(profile, delta, entity, result);\n         }\n     }\n "},{"sha":"603cfabdaebc4cc39564ba2a453b41df32d3514d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -41,7 +41,7 @@ <T extends Task> List<T> findAll(\n             ExternalResource resource,\n             Notification notification,\n             AnyTypeKind anyTypeKind,\n-            String anyKey,\n+            String entityKey,\n             int page,\n             int itemsPerPage,\n             List<OrderByClause> orderByClauses);\n@@ -51,7 +51,7 @@ int count(\n             ExternalResource resource,\n             Notification notification,\n             AnyTypeKind anyTypeKind,\n-            String anyKey);\n+            String entityKey);\n \n     <T extends Task> T save(T task);\n "},{"sha":"e041a6daf70f17d75edcf63f9ced28c7f6cc88ee","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Any.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -49,7 +49,7 @@\n \n     boolean add(ExternalResource resource);\n \n-    List<String> getResourceNames();\n+    List<String> getResourceKeys();\n \n     List<? extends ExternalResource> getResources();\n "},{"sha":"9796d229e41dae31b671ec008bb5a3f00b164b2c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Realm.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -22,6 +22,7 @@\n import java.util.Set;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface Realm extends Entity {\n \n@@ -50,4 +51,11 @@ public interface Realm extends Entity {\n     AnyTemplateRealm getTemplate(AnyType anyType);\n \n     List<? extends AnyTemplateRealm> getTemplates();\n+\n+    boolean add(ExternalResource resource);\n+\n+    List<String> getResourceKeys();\n+\n+    List<? extends ExternalResource> getResources();\n+\n }"},{"sha":"23232bb5454609ce495508d3c276cee1e1ed068f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/ExternalResource.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -97,4 +97,7 @@ public interface ExternalResource extends ProvidedKeyEntity {\n \n     List<? extends Provision> getProvisions();\n \n+    OrgUnit getOrgUnit();\n+\n+    void setOrgUnit(OrgUnit orgUnit);\n }"},{"sha":"da8bee1f757cd76c1b02ade33d59056724600e5a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/OrgUnit.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FOrgUnit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FOrgUnit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FOrgUnit.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.resource;\n+\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.SyncToken;\n+\n+public interface OrgUnit extends Entity {\n+\n+    ExternalResource getResource();\n+\n+    void setResource(ExternalResource resource);\n+\n+    ObjectClass getObjectClass();\n+\n+    void setObjectClass(ObjectClass objectClass);\n+\n+    SyncToken getSyncToken();\n+\n+    String getSerializedSyncToken();\n+\n+    void setSyncToken(SyncToken syncToken);\n+\n+    String getExtAttrName();\n+\n+    void setExtAttrName(String extAttrName);\n+\n+    String getConnObjectLink();\n+\n+    void setConnObjectLink(String connObjectLink);\n+\n+}"},{"sha":"e5709ca154e2ba2408eb01bcaa3f7c78c7914f73","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/PropagationTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -48,9 +48,9 @@ public interface PropagationTask extends Task {\n \n     void setOperation(ResourceOperation operation);\n \n-    String getAnyKey();\n+    String getEntityKey();\n \n-    void setAnyKey(String anyKey);\n+    void setEntityKey(String entityKey);\n \n     AnyTypeKind getAnyTypeKind();\n "},{"sha":"1f5db3b00c7b6b79da7e152db16a4c7be2bec77b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":14,"deletions":12,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -126,15 +126,17 @@ private StringBuilder buildFindAllQuery(\n             final ExternalResource resource,\n             final Notification notification,\n             final AnyTypeKind anyTypeKind,\n-            final String anyKey) {\n+            final String entityKey) {\n \n         if (resource != null\n                 && type != TaskType.PROPAGATION && type != TaskType.PUSH && type != TaskType.PULL) {\n \n             throw new IllegalArgumentException(type + \" is not related to \" + ExternalResource.class.getSimpleName());\n         }\n \n-        if ((anyTypeKind != null || anyKey != null) && type != TaskType.PROPAGATION && type != TaskType.NOTIFICATION) {\n+        if ((anyTypeKind != null || entityKey != null)\n+                && type != TaskType.PROPAGATION && type != TaskType.NOTIFICATION) {\n+\n             throw new IllegalArgumentException(type + \" is not related to users, groups or any objects\");\n         }\n \n@@ -150,8 +152,8 @@ private StringBuilder buildFindAllQuery(\n         if (notification != null) {\n             queryString.append(\"AND t.notification=:notification \");\n         }\n-        if (anyTypeKind != null && anyKey != null) {\n-            queryString.append(\"AND t.anyTypeKind=:anyTypeKind AND t.anyKey=:anyKey \");\n+        if (anyTypeKind != null && entityKey != null) {\n+            queryString.append(\"AND t.anyTypeKind=:anyTypeKind AND t.entityKey=:entityKey \");\n         }\n \n         return queryString;\n@@ -184,12 +186,12 @@ public <T extends Task> List<T> findAll(\n             final ExternalResource resource,\n             final Notification notification,\n             final AnyTypeKind anyTypeKind,\n-            final String anyKey,\n+            final String entityKey,\n             final int page,\n             final int itemsPerPage,\n             final List<OrderByClause> orderByClauses) {\n \n-        StringBuilder queryString = buildFindAllQuery(type, resource, notification, anyTypeKind, anyKey).\n+        StringBuilder queryString = buildFindAllQuery(type, resource, notification, anyTypeKind, entityKey).\n                 append(toOrderByStatement(getEntityReference(type), orderByClauses));\n \n         Query query = entityManager().createQuery(queryString.toString());\n@@ -199,9 +201,9 @@ public <T extends Task> List<T> findAll(\n         if (notification != null) {\n             query.setParameter(\"notification\", notification);\n         }\n-        if (anyTypeKind != null && anyKey != null) {\n+        if (anyTypeKind != null && entityKey != null) {\n             query.setParameter(\"anyTypeKind\", anyTypeKind);\n-            query.setParameter(\"anyKey\", anyKey);\n+            query.setParameter(\"entityKey\", entityKey);\n         }\n \n         query.setFirstResult(itemsPerPage * (page <= 0\n@@ -221,9 +223,9 @@ public int count(\n             final ExternalResource resource,\n             final Notification notification,\n             final AnyTypeKind anyTypeKind,\n-            final String anyKey) {\n+            final String entityKey) {\n \n-        StringBuilder queryString = buildFindAllQuery(type, resource, notification, anyTypeKind, anyKey);\n+        StringBuilder queryString = buildFindAllQuery(type, resource, notification, anyTypeKind, entityKey);\n \n         Query query = entityManager().createQuery(StringUtils.replaceOnce(\n                 queryString.toString(), \"SELECT t\", \"SELECT COUNT(t)\"));\n@@ -233,9 +235,9 @@ public int count(\n         if (notification != null) {\n             query.setParameter(\"notification\", notification);\n         }\n-        if (anyTypeKind != null && anyKey != null) {\n+        if (anyTypeKind != null && entityKey != null) {\n             query.setParameter(\"anyTypeKind\", anyTypeKind);\n-            query.setParameter(\"anyKey\", anyKey);\n+            query.setParameter(\"entityKey\", entityKey);\n         }\n \n         return ((Number) query.getSingleResult()).intValue();"},{"sha":"bd5a10846b4123b590a51182a4d761f2333061a2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAny.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -78,7 +78,7 @@ public void setStatus(final String status) {\n     }\n \n     @Override\n-    public List<String> getResourceNames() {\n+    public List<String> getResourceKeys() {\n         return CollectionUtils.collect(\n                 getResources(), EntityUtils.<ExternalResource>keyTransformer(), new ArrayList<String>());\n     }"},{"sha":"30483fcc84f09efc3b875f9997ae6499010499f2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -121,6 +121,8 @@\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnit;\n \n @Component\n public class JPAEntityFactory implements EntityFactory {\n@@ -180,6 +182,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAExternalResource();\n         } else if (reference.equals(Provision.class)) {\n             result = (E) new JPAProvision();\n+        } else if (reference.equals(OrgUnit.class)) {\n+            result = (E) new JPAOrgUnit();\n         } else if (reference.equals(ConnInstance.class)) {\n             result = (E) new JPAConnInstance();\n         } else if (reference.equals(PlainSchema.class)) {"},{"sha":"5bcb6fed148b71d31292ad4c7dde2580265938a5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARealm.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -30,11 +30,14 @@\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n import javax.validation.constraints.Size;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n@@ -45,9 +48,12 @@\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.validation.entity.RealmCheck;\n+import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n \n @Entity\n @Table(name = JPARealm.TABLE, uniqueConstraints =\n@@ -82,6 +88,13 @@ public class JPARealm extends AbstractGeneratedKeyEntity implements Realm {\n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"realm\")\n     private List<JPAAnyTemplateRealm> templates = new ArrayList<>();\n \n+    @ManyToMany(fetch = FetchType.LAZY)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"realm_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"resource_id\"))\n+    private List<JPAExternalResource> resources = new ArrayList<>();\n+\n     @Override\n     public String getName() {\n         return name;\n@@ -158,4 +171,21 @@ public boolean evaluate(final AnyTemplate template) {\n     public List<? extends AnyTemplateRealm> getTemplates() {\n         return templates;\n     }\n+\n+    @Override\n+    public boolean add(final ExternalResource resource) {\n+        checkType(resource, JPAExternalResource.class);\n+        return resources.add((JPAExternalResource) resource);\n+    }\n+\n+    @Override\n+    public List<String> getResourceKeys() {\n+        return CollectionUtils.collect(\n+                getResources(), EntityUtils.<ExternalResource>keyTransformer(), new ArrayList<String>());\n+    }\n+\n+    @Override\n+    public List<? extends ExternalResource> getResources() {\n+        return resources;\n+    }\n }"},{"sha":"2a0703d1fd9841eee5924602ce1568749d01f673","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -77,7 +77,7 @@\n             @JoinColumn(name = \"resource_id\"))\n     private List<JPAExternalResource> resources = new ArrayList<>();\n \n-    @ManyToMany(fetch = FetchType.EAGER)\n+    @ManyToMany(fetch = FetchType.LAZY)\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"anyObject_id\"),\n             inverseJoinColumns ="},{"sha":"a2ca0385e0f2efa391c0dca9a619a8f910ced4f6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPAConf.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -86,7 +86,7 @@ public boolean add(final ExternalResource resource) {\n     }\n \n     @Override\n-    public List<String> getResourceNames() {\n+    public List<String> getResourceKeys() {\n         return Collections.emptyList();\n     }\n "},{"sha":"fc4fc13af54136bd2aec68208aa703640cd13f2b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -79,15 +79,14 @@ public class JPAGroup extends AbstractAny<GPlainAttr> implements Group {\n     @Valid\n     private List<JPAGPlainAttr> plainAttrs = new ArrayList<>();\n \n-    @ManyToMany(fetch = FetchType.EAGER)\n+    @ManyToMany(fetch = FetchType.LAZY)\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"group_id\"),\n             inverseJoinColumns =\n             @JoinColumn(name = \"resource_id\"))\n-    @Valid\n     private List<JPAExternalResource> resources = new ArrayList<>();\n \n-    @ManyToMany(fetch = FetchType.EAGER)\n+    @ManyToMany(fetch = FetchType.LAZY)\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"group_id\"),\n             inverseJoinColumns ="},{"sha":"3bcbbee7deac9d1849476052330857bfce277e22","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":18,"deletions":2,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -35,6 +35,7 @@\n import javax.persistence.Lob;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n@@ -59,6 +60,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractProvidedKeyEntity;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n \n@@ -90,16 +92,19 @@ public class JPAExternalResource extends AbstractProvidedKeyEntity implements Ex\n     @NotNull\n     private JPAConnInstance connector;\n \n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"resource\")\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY, mappedBy = \"resource\")\n     private List<JPAProvision> provisions = new ArrayList<>();\n \n+    @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY, mappedBy = \"resource\")\n+    private JPAOrgUnit orgUnit;\n+\n     /**\n      * Priority index for propagation ordering.\n      */\n     private Integer propagationPriority;\n \n     /**\n-     * Generate random password for propagation, if not provided?\n+     * Generate random password, if not provided.\n      */\n     @NotNull\n     @Basic\n@@ -230,6 +235,17 @@ public List<? extends Provision> getProvisions() {\n         return provisions;\n     }\n \n+    @Override\n+    public OrgUnit getOrgUnit() {\n+        return orgUnit;\n+    }\n+\n+    @Override\n+    public void setOrgUnit(final OrgUnit orgUnit) {\n+        checkType(orgUnit, JPAOrgUnit.class);\n+        this.orgUnit = (JPAOrgUnit) orgUnit;\n+    }\n+\n     @Override\n     public Integer getPropagationPriority() {\n         return propagationPriority;"},{"sha":"7324bfc7f40fb440d52a77343b194997eea9b81a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAOrgUnit.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnit.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.resource;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+import javax.persistence.Lob;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.SyncToken;\n+\n+@Entity\n+@Table(name = JPAOrgUnit.TABLE)\n+@Cacheable\n+public class JPAOrgUnit extends AbstractGeneratedKeyEntity implements OrgUnit {\n+\n+    private static final long serialVersionUID = 8236319635989067603L;\n+\n+    public static final String TABLE = \"OrgUnit\";\n+\n+    @OneToOne\n+    private JPAExternalResource resource;\n+\n+    @NotNull\n+    private String objectClass;\n+\n+    @Lob\n+    private String serializedSyncToken;\n+\n+    @NotNull\n+    private String extAttrName;\n+\n+    @NotNull\n+    private String connObjectLink;\n+\n+    @Override\n+    public ExternalResource getResource() {\n+        return resource;\n+    }\n+\n+    @Override\n+    public void setResource(final ExternalResource resource) {\n+        checkType(resource, JPAExternalResource.class);\n+        this.resource = (JPAExternalResource) resource;\n+    }\n+\n+    @Override\n+    public ObjectClass getObjectClass() {\n+        return objectClass == null\n+                ? null\n+                : new ObjectClass(objectClass);\n+    }\n+\n+    @Override\n+    public void setObjectClass(final ObjectClass objectClass) {\n+        this.objectClass = objectClass == null ? null : objectClass.getObjectClassValue();\n+    }\n+\n+    @Override\n+    public SyncToken getSyncToken() {\n+        return serializedSyncToken == null\n+                ? null\n+                : POJOHelper.deserialize(serializedSyncToken, SyncToken.class);\n+    }\n+\n+    @Override\n+    public String getSerializedSyncToken() {\n+        return this.serializedSyncToken;\n+    }\n+\n+    @Override\n+    public void setSyncToken(final SyncToken syncToken) {\n+        this.serializedSyncToken = syncToken == null ? null : POJOHelper.serialize(syncToken);\n+    }\n+\n+    @Override\n+    public String getExtAttrName() {\n+        return extAttrName;\n+    }\n+\n+    @Override\n+    public void setExtAttrName(final String extAttrName) {\n+        this.extAttrName = extAttrName;\n+    }\n+\n+    @Override\n+    public String getConnObjectLink() {\n+        return connObjectLink;\n+    }\n+\n+    @Override\n+    public void setConnObjectLink(final String connObjectLink) {\n+        this.connObjectLink = connObjectLink;\n+    }\n+\n+}"},{"sha":"7b415ffbb22e30156854cedbe23eb2c3ddd4919f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPropagationTask.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -76,7 +76,7 @@ public class JPAPropagationTask extends AbstractTask implements PropagationTask\n \n     private String anyType;\n \n-    private String anyKey;\n+    private String entityKey;\n \n     /**\n      * ExternalResource to which the propagation happens.\n@@ -178,12 +178,12 @@ public void setAnyType(final String anyType) {\n     }\n \n     @Override\n-    public String getAnyKey() {\n-        return anyKey;\n+    public String getEntityKey() {\n+        return entityKey;\n     }\n \n     @Override\n-    public void setAnyKey(final String anyKey) {\n-        this.anyKey = anyKey;\n+    public void setEntityKey(final String entityKey) {\n+        this.entityKey = entityKey;\n     }\n }"},{"sha":"796982474998e7594a287410acec1bacc24d9e49","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -161,10 +161,9 @@\n             @JoinColumn(name = \"user_id\"),\n             inverseJoinColumns =\n             @JoinColumn(name = \"resource_id\"))\n-    @Valid\n     private List<JPAExternalResource> resources = new ArrayList<>();\n \n-    @ManyToMany(fetch = FetchType.EAGER)\n+    @ManyToMany(fetch = FetchType.LAZY)\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"user_id\"),\n             inverseJoinColumns ="},{"sha":"afd97b2fbdcb57804cbd910d1a326a5ed420f9c6","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -1022,14 +1022,14 @@ under the License.\n                mandatoryCondition=\"false\" connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n     \n   <Task DTYPE=\"PropagationTask\" id=\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\" operation=\"UPDATE\"\n-        objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-2\" anyTypeKind=\"USER\" anyKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n+        objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-2\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <TaskExec id=\"e58ca1c7-178a-4012-8a71-8aa14eaf0655\" task_id=\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\" startDate=\"2015-12-17 09:40:00.506\" endDate=\"2015-12-17 09:42:00.506\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"b8870cfb-3c1e-4fc4-abcb-2559826232e6\" operation=\"CREATE\"\n-        objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-2\" anyTypeKind=\"USER\" anyKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n+        objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-2\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <Task DTYPE=\"PropagationTask\" id=\"316285cc-ae52-4ea2-a33b-7355e189ac3f\" operation=\"DELETE\"\n-        objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-2\" anyTypeKind=\"USER\" anyKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n+        objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-2\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <Task DTYPE=\"PullTask\" id=\"c41b9b71-9bfa-4f90-89f2-84787def4c5c\" name=\"CSV (update matching; assign unmatching)\" resource_id=\"resource-csv\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" pullStatus=\"1\"\n@@ -1043,7 +1043,7 @@ under the License.\n   <Task DTYPE=\"SchedTask\" id=\"e95555d2-1b09-42c8-b25b-f4c4ec597979\" name=\"SampleJob Task\"  active=\"1\"\n         jobDelegateClassName=\"org.apache.syncope.fit.core.reference.TestSampleJobDelegate\" cronExpression=\"0 0 0 1 * ?\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"d6c2d6d3-6329-44c1-9187-f1469ead1cfa\" operation=\"UPDATE\"\n-        objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-nopropagation\" anyTypeKind=\"USER\" anyKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n+        objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-nopropagation\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <TaskExec id=\"d789462f-e395-424f-bd8e-0db44a93222f\" task_id=\"d6c2d6d3-6329-44c1-9187-f1469ead1cfa\" startDate=\"2015-12-17 09:40:00.506\" endDate=\"2015-12-17 09:42:00.506\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PullTask\" id=\"83f7e85d-9774-43fe-adba-ccd856312994\" name=\"TestDB Task\" resource_id=\"resource-testdb\"\n@@ -1139,7 +1139,7 @@ under the License.\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" pullStatus=\"1\" pullMode=\"FULL_RECONCILIATION\"\n         unmatchingRule=\"ASSIGN\" matchingRule=\"IGNORE\" active=\"1\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"0f618183-17ce-48bc-80bc-cc535f38983a\" operation=\"CREATE\"\n-        objectClassName=\"__ACCOUNT__\" resource_id=\"resource-testdb\" anyTypeKind=\"USER\" anyKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n+        objectClassName=\"__ACCOUNT__\" resource_id=\"resource-testdb\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <Task DTYPE=\"PullTask\" id=\"30cfd653-257b-495f-8665-281281dbcb3d\" name=\"Scripted SQL\" resource_id=\"resource-db-scripted\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" pullStatus=\"0\" pullMode=\"INCREMENTAL\""},{"sha":"8ac5fc888a4335a851ce890667f9dfe6bc8c1896","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/RealmDataBinder.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRealmDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRealmDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRealmDataBinder.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -19,13 +19,14 @@\n package org.apache.syncope.core.provisioning.api.data;\n \n import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n \n public interface RealmDataBinder {\n \n     Realm create(String parentPath, RealmTO realmTO);\n \n-    void update(Realm realm, RealmTO realmTO);\n+    PropagationByResource update(Realm realm, RealmTO realmTO);\n \n     RealmTO getRealmTO(Realm realm);\n "},{"sha":"5159088cadd333d91a43301a8ce6b4def7ea4be3","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java","status":"modified","additions":28,"deletions":15,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -25,37 +25,38 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n \n public interface PropagationManager {\n \n     /**\n-     * Create the any object tasks for every associated resource, unless in {@code noPropResourceNames}.\n+     * Create the any object tasks for every associated resource, unless in {@code noPropResourceKeys}.\n      *\n      * @param kind any object type kind\n      * @param key any object key\n      * @param propByRes operation to be performed per resource\n      * @param vAttrs virtual attributes to be set\n-     * @param noPropResourceNames external resources performing not to be considered for propagation\n+     * @param noPropResourceKeys external resources performing not to be considered for propagation\n      * @return list of propagation tasks\n      */\n     List<PropagationTask> getCreateTasks(\n             AnyTypeKind kind,\n             String key,\n             PropagationByResource propByRes,\n             Collection<AttrTO> vAttrs,\n-            Collection<String> noPropResourceNames);\n+            Collection<String> noPropResourceKeys);\n \n     /**\n-     * Create the user tasks for every associated resource, unless in {@code noPropResourceNames}.\n+     * Create the user tasks for every associated resource, unless in {@code noPropResourceKeys}.\n      *\n      * @param key user key\n      * @param password to be set\n      * @param enable whether user must be enabled or not\n      * @param propByRes operation to be performed per resource\n      * @param vAttrs virtual attributes to be set\n-     * @param noPropResourceNames external resources not to be considered for propagation\n+     * @param noPropResourceKeys external resources not to be considered for propagation\n      * @return list of propagation tasks\n      */\n     List<PropagationTask> getUserCreateTasks(\n@@ -64,18 +65,18 @@ List<PropagationTask> getUserCreateTasks(\n             Boolean enable,\n             PropagationByResource propByRes,\n             Collection<AttrTO> vAttrs,\n-            Collection<String> noPropResourceNames);\n+            Collection<String> noPropResourceKeys);\n \n     /**\n-     * Create the update tasks for the any object on each resource associated, unless in {@code noPropResourceNames}.\n+     * Create the update tasks for the any object on each resource associated, unless in {@code noPropResourceKeys}.\n      *\n      * @param kind any object type kind\n      * @param key any object key\n      * @param changePwd whether password should be included for propagation attributes or not\n      * @param enable whether any object should be enabled or not, may be null to leave unchanged\n      * @param propByRes operation to be performed per resource\n      * @param vAttrs virtual attributes to be set\n-     * @param noPropResourceNames external resource names not to be considered for propagation\n+     * @param noPropResourceKeys external resource keys not to be considered for propagation\n      * @return list of propagation tasks\n      */\n     List<PropagationTask> getUpdateTasks(\n@@ -85,20 +86,20 @@ List<PropagationTask> getUpdateTasks(\n             Boolean enable,\n             PropagationByResource propByRes,\n             Collection<AttrTO> vAttrs,\n-            Collection<String> noPropResourceNames);\n+            Collection<String> noPropResourceKeys);\n \n     /**\n-     * Create the update tasks for the user on each resource associated, unless in {@code noPropResourceNames}.\n+     * Create the update tasks for the user on each resource associated, unless in {@code noPropResourceKeys}.\n      *\n      * @param wfResult user to be propagated (and info associated), as per result from workflow\n      * @param changePwd whether password should be included for propagation attributes or not\n-     * @param noPropResourceNames external resources not to be considered for propagation\n+     * @param noPropResourceKeys external resources not to be considered for propagation\n      * @return list of propagation tasks\n      */\n     List<PropagationTask> getUserUpdateTasks(\n             WorkflowResult<Pair<UserPatch, Boolean>> wfResult,\n             boolean changePwd,\n-            Collection<String> noPropResourceNames);\n+            Collection<String> noPropResourceKeys);\n \n     /**\n      * Create the update tasks for the user on each resource associated; propagate password update only to requested\n@@ -110,18 +111,30 @@ List<PropagationTask> getUserUpdateTasks(\n     List<PropagationTask> getUserUpdateTasks(WorkflowResult<Pair<UserPatch, Boolean>> wfResult);\n \n     /**\n-     * Create the delete tasks for the any object from each resource associated, unless in {@code noPropResourceNames}.\n+     * Create the delete tasks for the any object from each resource associated, unless in {@code noPropResourceKeys}.\n      *\n      * @param kind any object type kind\n      * @param key any object key\n      * @param propByRes operation to be performed per resource\n-     * @param noPropResourceNames external resource names not to be considered for propagation\n+     * @param noPropResourceKeys external resource keys not to be considered for propagation\n      * @return list of propagation tasks\n      */\n     List<PropagationTask> getDeleteTasks(\n             AnyTypeKind kind,\n             String key,\n             PropagationByResource propByRes,\n-            Collection<String> noPropResourceNames);\n+            Collection<String> noPropResourceKeys);\n \n+    /**\n+     * Create the needed tasks for the realm for each resource associated, unless in {@code noPropResourceKeys}.\n+     *\n+     * @param realm realm\n+     * @param propByRes operation to be performed per resource\n+     * @param noPropResourceKeys external resource keys not to be considered for propagation\n+     * @return list of propagation tasks\n+     */\n+    List<PropagationTask> createTasks(\n+            Realm realm,\n+            PropagationByResource propByRes,\n+            Collection<String> noPropResourceKeys);\n }"},{"sha":"96668048a3eda92fb3e14f3f41185907cb8165c9","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullActions.java","status":"modified","additions":46,"deletions":53,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -20,6 +20,7 @@\n \n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;\n \n@@ -31,110 +32,104 @@\n public interface PullActions extends ProvisioningActions {\n \n     /**\n-     * Action to be executed before to create a pulled user / group locally.\n-     * User/group is created locally upon pull in case of the un-matching rule\n+     * Action to be executed before to create a pulled entity locally.\n+     * The entity is created locally upon pull in case of the un-matching rule\n      * {@link org.apache.syncope.common.lib.types.UnmatchingRule#PROVISION} (default un-matching rule) is applied.\n      *\n-     * @param <A> concrete any object\n      * @param profile profile of the pull being executed.\n      * @param delta retrieved pull information\n-     * @param any any object\n-     * @return pull information used for user status evaluation and to be passed to the 'after' method.\n+     * @param entity entity\n+     * @return pull information, possibly altered.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends AnyTO> SyncDelta beforeProvision(\n+    SyncDelta beforeProvision(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            A any) throws JobExecutionException;\n+            EntityTO entity) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before creating (and linking to the resource) a pulled user / group locally.\n-     * User/group is created locally and linked to the pulled resource upon pull in case of the\n+     * Action to be executed before creating (and linking to the resource) a pulled entity locally.\n+     * The entity is created locally and linked to the pulled resource upon pull in case of the\n      * un-matching rule {@link org.apache.syncope.common.lib.types.UnmatchingRule#ASSIGN} is applied.\n      *\n-     * @param <A> concrete any object\n      * @param profile profile of the pull being executed.\n      * @param delta retrieved pull information\n-     * @param any any object\n-     * @return pull information used for user status evaluation and to be passed to the 'after' method.\n+     * @param entity entity\n+     * @return pull information, possibly altered.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends AnyTO> SyncDelta beforeAssign(\n+    SyncDelta beforeAssign(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            A any) throws JobExecutionException;\n+            EntityTO entity) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before unlinking resource from the pulled user / group and de-provisioning.\n-     * User/group is unlinked and de-provisioned from the pulled resource upon pull in case of the\n+     * Action to be executed before unlinking resource from the pulled entity and de-provisioning.\n+     * The entity is unlinked and de-provisioned from the pulled resource upon pull in case of the\n      * matching rule {@link org.apache.syncope.common.lib.types.MatchingRule#UNASSIGN} is applied.\n      *\n-     * @param <A> concrete any object\n      * @param profile profile of the pull being executed.\n      * @param delta retrieved pull information\n-     * @param any any object\n-     * @return pull information used for user status evaluation and to be passed to the 'after' method.\n+     * @param entity entity\n+     * @return pull information, possibly altered.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends AnyTO> SyncDelta beforeUnassign(\n+    SyncDelta beforeUnassign(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            A any) throws JobExecutionException;\n+            EntityTO entity) throws JobExecutionException;\n \n     /**\n      * Action to be executed before de-provisioning action only.\n-     * User/group is de-provisioned (without unlinking) from the pulled resource upon pull in case of\n+     * The entity is de-provisioned (without unlinking) from the pulled resource upon pull in case of\n      * the matching rule {@link org.apache.syncope.common.lib.types.MatchingRule#DEPROVISION} is applied.\n      *\n-     * @param <A> concrete any object\n      * @param profile profile of the pull being executed.\n      * @param delta retrieved pull information\n-     * @param any any object\n-     * @return pull information used for user status evaluation and to be passed to the 'after' method.\n+     * @param entity entity\n+     * @return pull information, possibly altered.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends AnyTO> SyncDelta beforeDeprovision(\n+    SyncDelta beforeDeprovision(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            A any) throws JobExecutionException;\n+            EntityTO entity) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before unlinking resource from the pulled user / group.\n-     * User/group is unlinked (without de-provisioning) from the pulled resource upon pull in case of\n+     * Action to be executed before unlinking resource from the pulled entity.\n+     * The entity is unlinked (without de-provisioning) from the pulled resource upon pull in case of\n      * the matching rule {@link org.apache.syncope.common.lib.types.MatchingRule#UNLINK} is applied.\n      *\n-     * @param <A> concrete any object\n      * @param profile profile of the pull being executed.\n      * @param delta retrieved pull information\n-     * @param any any object\n-     * @return pull information used for user status evaluation and to be passed to the 'after' method.\n+     * @param entity entity\n+     * @return pull information, possibly altered.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends AnyTO> SyncDelta beforeUnlink(\n+    SyncDelta beforeUnlink(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            A any) throws JobExecutionException;\n+            EntityTO entity) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before linking resource to the pulled user / group.\n-     * User/group is linked (without updating) to the pulled resource upon pull in case of\n+     * Action to be executed before linking resource to the pulled entity.\n+     * The entity is linked (without updating) to the pulled resource upon pull in case of\n      * the matching rule {@link org.apache.syncope.common.lib.types.MatchingRule#LINK} is applied.\n      *\n-     * @param <A> concrete any object\n      * @param profile profile of the pull being executed.\n      * @param delta retrieved pull information\n-     * @param any any object\n-     * @return pull information used for user status evaluation and to be passed to the 'after' method.\n+     * @param entity entity\n+     * @return pull information, possibly altered.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends AnyTO> SyncDelta beforeLink(\n+    SyncDelta beforeLink(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            A any) throws JobExecutionException;\n+            EntityTO entity) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before to update a pulled user / group locally.\n-     * User/group is updated upon pull in case of the matching rule\n+     * Action to be executed before to update a pulled entity locally.\n+     * The entity is updated upon pull in case of the matching rule\n      * {@link org.apache.syncope.common.lib.types.MatchingRule#UPDATE} (default matching rule) is applied.\n      *\n      * @param <M> concrete any object\n@@ -154,35 +149,33 @@ <M extends AnyTO, P extends AnyPatch> SyncDelta beforeUpdate(\n             throws JobExecutionException;\n \n     /**\n-     * Action to be executed before to delete a pulled user / group locally.\n+     * Action to be executed before to delete a pulled entity locally.\n      *\n-     * @param <A> concrete any object\n      * @param profile profile of the pull being executed.\n      * @param delta retrieved pull information\n-     * @param any any object to be deleted\n+     * @param entity entity\n      * @return pull information used for logging and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends AnyTO> SyncDelta beforeDelete(\n+    SyncDelta beforeDelete(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            A any) throws JobExecutionException;\n+            EntityTO entity) throws JobExecutionException;\n \n     /**\n-     * Action to be executed after each local user / group pull.\n+     * Action to be executed after each local entity pull.\n      *\n-     * @param <A> concrete any object\n      * @param profile profile of the pull being executed.\n      * @param delta retrieved pull information (may be modified by beforeProvision / beforeUpdate /\n      * beforeDelete)\n-     * @param any any object\n+     * @param entity entity\n      * @param result global pull results at the current pull step\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends AnyTO> void after(\n+    void after(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            A any,\n+            EntityTO entity,\n             ProvisioningReport result) throws JobExecutionException;\n \n     /**"},{"sha":"592c18b0a3631338f75ddee05f0d23dd5f8d4687","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PushActions.java","status":"modified","additions":50,"deletions":60,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPushActions.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -18,146 +18,136 @@\n  */\n package org.apache.syncope.core.provisioning.api.pushpull;\n \n-import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.quartz.JobExecutionException;\n \n /**\n  * Interface for actions to be performed during push.\n- * All methods can throw {@link IgnoreProvisionException} to make the current any ignored by the push process.\n+ * All methods can throw {@link IgnoreProvisionException} to make the current entity ignored by the push process.\n  */\n public interface PushActions extends ProvisioningActions {\n \n     /**\n-     * Action to be executed before to assign (link &amp; provision) a synchronized any object to the resource.\n+     * Action to be executed before to assign (link &amp; provision) a pushed entity to the resource.\n      *\n-     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n-     * @param any any object to be created.\n-     * @return any.\n+     * @param entity entity to be created.\n+     * @return entity.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?>> A beforeAssign(\n+    Entity beforeAssign(\n             ProvisioningProfile<?, ?> profile,\n-            A any) throws JobExecutionException;\n+            Entity entity) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before to provision a synchronized any object to the resource.\n+     * Action to be executed before to provision a pushed entity to the resource.\n      *\n-     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n-     * @param any any object to be created.\n-     * @return any.\n+     * @param entity entity to be created.\n+     * @return entity.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?>> A beforeProvision(\n+    Entity beforeProvision(\n             ProvisioningProfile<?, ?> profile,\n-            A any) throws JobExecutionException;\n+            Entity entity) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before to update a synchronized any object on the resource.\n+     * Action to be executed before to update a pushed entity on the resource.\n      *\n-     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n-     * @param any any object to be updated.\n-     * @return any.\n+     * @param entity entity to be updated.\n+     * @return entity.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?>> A beforeUpdate(\n+    Entity beforeUpdate(\n             ProvisioningProfile<?, ?> profile,\n-            A any) throws JobExecutionException;\n+            Entity entity) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before to link a synchronized any object to the resource.\n+     * Action to be executed before to link a pushed entity to the resource.\n      *\n-     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n-     * @param any any object to be created.\n-     * @return any.\n+     * @param entity entity to be created.\n+     * @return entity.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?>> A beforeLink(\n+    Entity beforeLink(\n             ProvisioningProfile<?, ?> profile,\n-            A any) throws JobExecutionException;\n+            Entity entity) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before to unlink a synchronized any object from the resource.\n+     * Action to be executed before to unlink a pushed entity from the resource.\n      *\n-     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n-     * @param any any object to be created.\n-     * @return any.\n+     * @param entity entity to be created.\n+     * @return entity.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?>> A beforeUnlink(\n+    Entity beforeUnlink(\n             ProvisioningProfile<?, ?> profile,\n-            A any) throws JobExecutionException;\n+            Entity entity) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before to unassign a synchronized any object from the resource.\n+     * Action to be executed before to unassign a pushed entity from the resource.\n      *\n-     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n-     * @param any any object to be created.\n-     * @return any.\n+     * @param entity entity to be created.\n+     * @return entity.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?>> A beforeUnassign(\n+    Entity beforeUnassign(\n             ProvisioningProfile<?, ?> profile,\n-            A any) throws JobExecutionException;\n+            Entity entity) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before to unassign a synchronized any object from the resource.\n+     * Action to be executed before to unassign a pushed entity from the resource.\n      *\n-     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n-     * @param any any object to be created.\n-     * @return any.\n+     * @param entity entity to be created.\n+     * @return entity.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?>> A beforeDeprovision(\n+    Entity beforeDeprovision(\n             ProvisioningProfile<?, ?> profile,\n-            A any) throws JobExecutionException;\n+            Entity entity) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before delete a synchronized any object locally and from the resource.\n+     * Action to be executed before delete a pushed entity locally and from the resource.\n      *\n-     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n-     * @param any any object to be created.\n-     * @return any.\n+     * @param entity entity to be created.\n+     * @return entity.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?>> A beforeDelete(\n+    Entity beforeDelete(\n             ProvisioningProfile<?, ?> profile,\n-            A any) throws JobExecutionException;\n+            Entity entity) throws JobExecutionException;\n \n     /**\n-     * Action to be executed after any object push goes on error.\n+     * Action to be executed after entity push goes on error.\n      *\n-     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n-     * @param any synchronized any object.\n+     * @param entity pushed entity.\n      * @param result operation result.\n      * @param error error being reported\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?>> void onError(\n+    void onError(\n             ProvisioningProfile<?, ?> profile,\n-            A any,\n+            Entity entity,\n             ProvisioningReport result,\n             Exception error) throws JobExecutionException;\n \n     /**\n-     * Action to be executed after each local any object push.\n+     * Action to be executed after each local entity push.\n      *\n-     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n-     * @param any synchronized any object.\n+     * @param entity pushed entity.\n      * @param result operation result.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?>> void after(\n+    void after(\n             ProvisioningProfile<?, ?> profile,\n-            A any,\n+            Entity entity,\n             ProvisioningReport result) throws JobExecutionException;\n }"},{"sha":"8d32726429558c472691dd26c9cf12e6ad7ab5bf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -229,7 +229,7 @@ public List<PropagationStatus> deprovision(\n                 AnyTypeKind.GROUP,\n                 key,\n                 propByRes,\n-                CollectionUtils.removeAll(groupDAO.authFind(key).getResourceNames(), resources));\n+                CollectionUtils.removeAll(groupDAO.authFind(key).getResourceKeys(), resources));\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);"},{"sha":"f1e42708d482d65ccb36412fafdcd889f04b79a3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -496,10 +496,10 @@ protected void fill(\n         }\n \n         // 2. resources\n-        for (String resourceName : anyTO.getResources()) {\n-            ExternalResource resource = resourceDAO.find(resourceName);\n+        for (String resourceKey : anyTO.getResources()) {\n+            ExternalResource resource = resourceDAO.find(resourceKey);\n             if (resource == null) {\n-                LOG.debug(\"Invalid \" + ExternalResource.class.getSimpleName() + \"{}, ignoring...\", resourceName);\n+                LOG.debug(\"Invalid \" + ExternalResource.class.getSimpleName() + \"{}, ignoring...\", resourceKey);\n             } else {\n                 any.add(resource);\n             }"},{"sha":"3ad0ac94c7ef9d982a75e4a61016787e3b35ad54","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -266,7 +266,7 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n \n         // name\n         if (anyObjectPatch.getName() != null && StringUtils.isNotBlank(anyObjectPatch.getName().getValue())) {\n-            propByRes.addAll(ResourceOperation.UPDATE, anyObject.getResourceNames());\n+            propByRes.addAll(ResourceOperation.UPDATE, anyObject.getResourceKeys());\n \n             anyObject.setName(anyObjectPatch.getName().getValue());\n         }\n@@ -294,7 +294,7 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                         anyObject.getRelationships().remove(relationship);\n                         relationship.setLeftEnd(null);\n \n-                        toBeDeprovisioned.addAll(relationship.getRightEnd().getResourceNames());\n+                        toBeDeprovisioned.addAll(relationship.getRightEnd().getResourceKeys());\n                     }\n \n                     if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n@@ -319,7 +319,7 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n \n                                 anyObject.add(relationship);\n \n-                                toBeProvisioned.addAll(otherEnd.getResourceNames());\n+                                toBeProvisioned.addAll(otherEnd.getResourceKeys());\n                             } else {\n                                 LOG.error(\"{} cannot be assigned to {}\", otherEnd, anyObject);\n \n@@ -352,7 +352,7 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                         attr.setOwner(null);\n                     }\n \n-                    toBeDeprovisioned.addAll(membership.getRightEnd().getResourceNames());\n+                    toBeDeprovisioned.addAll(membership.getRightEnd().getResourceKeys());\n                 }\n \n                 if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n@@ -397,7 +397,7 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                             scce.addException(invalidValues);\n                         }\n \n-                        toBeProvisioned.addAll(group.getResourceNames());\n+                        toBeProvisioned.addAll(group.getResourceKeys());\n                     } else {\n                         LOG.error(\"{} cannot be assigned to {}\", group, anyObject);\n "},{"sha":"2306cdc0967df878d64dce93e183f6cbdfa3e6e9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -194,7 +194,7 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n \n         // name\n         if (groupPatch.getName() != null && StringUtils.isNotBlank(groupPatch.getName().getValue())) {\n-            propByRes.addAll(ResourceOperation.UPDATE, group.getResourceNames());\n+            propByRes.addAll(ResourceOperation.UPDATE, group.getResourceKeys());\n \n             group.setName(groupPatch.getName().getValue());\n         }"},{"sha":"f8f6334637e5945c327c4c72e25e71bef6ad8576","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java","status":"modified","additions":46,"deletions":1,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -25,8 +25,11 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n@@ -37,6 +40,7 @@\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.provisioning.api.data.RealmDataBinder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -57,6 +61,9 @@ public class RealmDataBinderImpl implements RealmDataBinder {\n     @Autowired\n     private PolicyDAO policyDAO;\n \n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -126,11 +133,20 @@ public Realm create(final String parentPath, final RealmTO realmTO) {\n \n         setTemplates(realmTO, realm);\n \n+        for (String resourceKey : realmTO.getResources()) {\n+            ExternalResource resource = resourceDAO.find(resourceKey);\n+            if (resource == null) {\n+                LOG.debug(\"Invalid \" + ExternalResource.class.getSimpleName() + \"{}, ignoring...\", resourceKey);\n+            } else {\n+                realm.add(resource);\n+            }\n+        }\n+\n         return realm;\n     }\n \n     @Override\n-    public void update(final Realm realm, final RealmTO realmTO) {\n+    public PropagationByResource update(final Realm realm, final RealmTO realmTO) {\n         realm.setName(realmTO.getName());\n         realm.setParent(realmTO.getParent() == null ? null : realmDAO.find(realmTO.getParent()));\n \n@@ -166,6 +182,31 @@ public void update(final Realm realm, final RealmTO realmTO) {\n         realm.getActionsClassNames().addAll(realmTO.getActionsClassNames());\n \n         setTemplates(realmTO, realm);\n+\n+        final PropagationByResource propByRes = new PropagationByResource();\n+        for (String resourceKey : realmTO.getResources()) {\n+            ExternalResource resource = resourceDAO.find(resourceKey);\n+            if (resource == null) {\n+                LOG.debug(\"Invalid \" + ExternalResource.class.getSimpleName() + \"{}, ignoring...\", resourceKey);\n+            } else {\n+                realm.add(resource);\n+                propByRes.add(ResourceOperation.CREATE, resource.getKey());\n+            }\n+        }\n+        // remove all resources not contained in the TO\n+        CollectionUtils.filter(realm.getResources(), new Predicate<ExternalResource>() {\n+\n+            @Override\n+            public boolean evaluate(final ExternalResource resource) {\n+                boolean contained = realmTO.getResources().contains(resource.getKey());\n+                if (!contained) {\n+                    propByRes.add(ResourceOperation.DELETE, resource.getKey());\n+                }\n+                return contained;\n+            }\n+        });\n+\n+        return propByRes;\n     }\n \n     @Override\n@@ -184,6 +225,10 @@ public RealmTO getRealmTO(final Realm realm) {\n             realmTO.getTemplates().put(template.getAnyType().getKey(), template.get());\n         }\n \n+        for (ExternalResource resource : realm.getResources()) {\n+            realmTO.getResources().add(resource.getKey());\n+        }\n+\n         return realmTO;\n     }\n "},{"sha":"74d6f1a032175d4532ac91817678f057b8df4dea","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":53,"deletions":2,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.OrgUnitTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -53,6 +54,7 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n@@ -225,6 +227,42 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n             }\n         }\n \n+        // 3. orgUnit\n+        if (resourceTO.getOrgUnit() == null && resource.getOrgUnit() != null) {\n+            resource.getOrgUnit().setResource(null);\n+            resource.setOrgUnit(null);\n+        } else if (resourceTO.getOrgUnit() != null) {\n+            OrgUnitTO orgUnitTO = resourceTO.getOrgUnit();\n+\n+            OrgUnit orgUnit = resource.getOrgUnit();\n+            if (orgUnit == null) {\n+                orgUnit = entityFactory.newEntity(OrgUnit.class);\n+                orgUnit.setResource(resource);\n+                resource.setOrgUnit(orgUnit);\n+            }\n+\n+            if (orgUnitTO.getObjectClass() == null) {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidOrgUnit);\n+                sce.getElements().add(\"Null \" + ObjectClass.class.getSimpleName());\n+                throw sce;\n+            }\n+            orgUnit.setObjectClass(new ObjectClass(orgUnitTO.getObjectClass()));\n+\n+            if (orgUnitTO.getExtAttrName() == null) {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidOrgUnit);\n+                sce.getElements().add(\"Null extAttrName\");\n+                throw sce;\n+            }\n+            orgUnit.setExtAttrName(orgUnitTO.getExtAttrName());\n+\n+            if (orgUnitTO.getConnObjectLink() == null) {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidOrgUnit);\n+                sce.getElements().add(\"Null connObjectLink\");\n+                throw sce;\n+            }\n+            orgUnit.setConnObjectLink(orgUnitTO.getConnObjectLink());\n+        }\n+\n         resource.setCreateTraceLevel(resourceTO.getCreateTraceLevel());\n         resource.setUpdateTraceLevel(resourceTO.getUpdateTraceLevel());\n         resource.setDeleteTraceLevel(resourceTO.getDeleteTraceLevel());\n@@ -313,10 +351,10 @@ private void populateMapping(\n                     item.setMapping(mapping);\n                     if (item.isConnObjectKey()) {\n                         if (intAttrName.getSchemaType() == SchemaType.VIRTUAL) {\n-                            throw new IllegalArgumentException(\"Virtual attributes cannot be set as ConnObjectKey\");\n+                            invalidMapping.getElements().add(\"Virtual attributes cannot be set as ConnObjectKey\");\n                         }\n                         if (\"password\".equals(intAttrName.getField())) {\n-                            throw new IllegalArgumentException(\"Password attributes cannot be set as ConnObjectKey\");\n+                            invalidMapping.getElements().add(\"Password attributes cannot be set as ConnObjectKey\");\n                         }\n \n                         mapping.setConnObjectKeyItem(item);\n@@ -429,6 +467,19 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n             resourceTO.getProvisions().add(provisionTO);\n         }\n \n+        if (resource.getOrgUnit() != null) {\n+            OrgUnit orgUnit = resource.getOrgUnit();\n+\n+            OrgUnitTO orgUnitTO = new OrgUnitTO();\n+            orgUnitTO.setKey(orgUnit.getKey());\n+            orgUnitTO.setObjectClass(orgUnit.getObjectClass().getObjectClassValue());\n+            orgUnitTO.setSyncToken(orgUnit.getSerializedSyncToken());\n+            orgUnitTO.setExtAttrName(orgUnit.getExtAttrName());\n+            orgUnitTO.setConnObjectLink(orgUnit.getConnObjectLink());\n+            \n+            resourceTO.setOrgUnit(orgUnitTO);\n+        }\n+\n         resourceTO.setEnforceMandatoryCondition(resource.isEnforceMandatoryCondition());\n \n         resourceTO.setPropagationPriority(resource.getPropagationPriority());"},{"sha":"422e7692b1a490abbef13e243275ec9870a5110c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -400,7 +400,7 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                         user.getRelationships().remove(relationship);\n                         relationship.setLeftEnd(null);\n \n-                        toBeDeprovisioned.addAll(relationship.getRightEnd().getResourceNames());\n+                        toBeDeprovisioned.addAll(relationship.getRightEnd().getResourceKeys());\n                     }\n \n                     if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n@@ -415,7 +415,7 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n \n                             user.add(relationship);\n \n-                            toBeProvisioned.addAll(otherEnd.getResourceNames());\n+                            toBeProvisioned.addAll(otherEnd.getResourceKeys());\n                         } else {\n                             LOG.error(\"{} cannot be assigned to {}\", otherEnd, user);\n \n@@ -448,7 +448,7 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                         attr.setMembership(null);\n                     }\n \n-                    toBeDeprovisioned.addAll(membership.getRightEnd().getResourceNames());\n+                    toBeDeprovisioned.addAll(membership.getRightEnd().getResourceKeys());\n                 }\n \n                 if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n@@ -493,7 +493,7 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                             scce.addException(invalidValues);\n                         }\n \n-                        toBeProvisioned.addAll(group.getResourceNames());\n+                        toBeProvisioned.addAll(group.getResourceKeys());\n \n                         // SYNCOPE-686: if password is invertible and we are adding resources with password mapping,\n                         // ensure that they are counted for password propagation"},{"sha":"3c115b7187a828d05a9772ab651bca549689130f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/GroupMemberProvisionTaskJobDelegate.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -86,8 +86,8 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         List<User> users = searchDAO.search(SearchCond.getLeafCond(membershipCond), AnyTypeKind.USER);\n         for (User user : users) {\n             List<PropagationStatus> statuses = actionType == BulkMembersActionType.DEPROVISION\n-                    ? userProvisioningManager.deprovision(user.getKey(), group.getResourceNames(), false)\n-                    : userProvisioningManager.provision(user.getKey(), true, null, group.getResourceNames(), false);\n+                    ? userProvisioningManager.deprovision(user.getKey(), group.getResourceKeys(), false)\n+                    : userProvisioningManager.provision(user.getKey(), true, null, group.getResourceKeys(), false);\n             for (PropagationStatus status : statuses) {\n                 result.append(\"User \").append(user.getKey()).append('\\t').\n                         append(\"Resource \").append(status.getResource()).append('\\t').\n@@ -105,8 +105,8 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         List<AnyObject> anyObjects = searchDAO.search(SearchCond.getLeafCond(membershipCond), AnyTypeKind.ANY_OBJECT);\n         for (AnyObject anyObject : anyObjects) {\n             List<PropagationStatus> statuses = actionType == BulkMembersActionType.DEPROVISION\n-                    ? anyObjectProvisioningManager.deprovision(anyObject.getKey(), group.getResourceNames(), false)\n-                    : anyObjectProvisioningManager.provision(anyObject.getKey(), group.getResourceNames(), false);\n+                    ? anyObjectProvisioningManager.deprovision(anyObject.getKey(), group.getResourceKeys(), false)\n+                    : anyObjectProvisioningManager.provision(anyObject.getKey(), group.getResourceKeys(), false);\n \n             for (PropagationStatus status : statuses) {\n                 result.append(anyObject.getType().getKey()).append(' ').append(anyObject.getKey()).append('\\t')."},{"sha":"2aabfd97b1e0849bfe39c3863cc95e91e18cfd41","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -271,25 +271,25 @@ public List<NotificationTask> createTasks(\n         } else if (output instanceof UserTO) {\n             any = userDAO.find(((UserTO) output).getKey());\n         } else if (output instanceof ProvisioningResult\n-                && ((ProvisioningResult) output).getAny() instanceof UserTO) {\n+                && ((ProvisioningResult) output).getEntity() instanceof UserTO) {\n \n-            any = userDAO.find(((ProvisioningResult) output).getAny().getKey());\n+            any = userDAO.find(((ProvisioningResult) output).getEntity().getKey());\n         } else if (before instanceof AnyObjectTO) {\n             any = anyObjectDAO.find(((AnyObjectTO) before).getKey());\n         } else if (output instanceof AnyObjectTO) {\n             any = anyObjectDAO.find(((AnyObjectTO) output).getKey());\n         } else if (output instanceof ProvisioningResult\n-                && ((ProvisioningResult) output).getAny() instanceof AnyObjectTO) {\n+                && ((ProvisioningResult) output).getEntity() instanceof AnyObjectTO) {\n \n-            any = anyObjectDAO.find(((ProvisioningResult) output).getAny().getKey());\n+            any = anyObjectDAO.find(((ProvisioningResult) output).getEntity().getKey());\n         } else if (before instanceof GroupTO) {\n             any = groupDAO.find(((GroupTO) before).getKey());\n         } else if (output instanceof GroupTO) {\n             any = groupDAO.find(((GroupTO) output).getKey());\n         } else if (output instanceof ProvisioningResult\n-                && ((ProvisioningResult) output).getAny() instanceof GroupTO) {\n+                && ((ProvisioningResult) output).getEntity() instanceof GroupTO) {\n \n-            any = groupDAO.find(((ProvisioningResult) output).getAny().getKey());\n+            any = groupDAO.find(((ProvisioningResult) output).getEntity().getKey());\n         }\n \n         AnyType anyType = any == null ? null : any.getType();"},{"sha":"a8f70e18b8e34b7597e7404f196a16065c6f30a1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":90,"deletions":27,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -48,13 +48,16 @@\n import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n@@ -65,12 +68,16 @@\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ConnectorObjectBuilder;\n import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.OperationOptionsBuilder;\n+import org.identityconnectors.framework.common.objects.ResultsHandler;\n import org.identityconnectors.framework.common.objects.Uid;\n+import org.identityconnectors.framework.common.objects.filter.EqualsFilter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -112,6 +119,12 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n     @Autowired\n     protected GroupDAO groupDAO;\n \n+    /**\n+     * Realm DAO.\n+     */\n+    @Autowired\n+    protected RealmDAO realmDAO;\n+\n     /**\n      * Task DAO.\n      */\n@@ -275,30 +288,30 @@ protected Uid createOrUpdate(\n     protected Any<?> getAny(final PropagationTask task) {\n         Any<?> any = null;\n \n-        if (task.getAnyKey() != null) {\n+        if (task.getEntityKey() != null && task.getAnyTypeKind() != null) {\n             switch (task.getAnyTypeKind()) {\n                 case USER:\n                     try {\n-                        any = userDAO.authFind(task.getAnyKey());\n+                        any = userDAO.authFind(task.getEntityKey());\n                     } catch (Exception e) {\n-                        LOG.error(\"Could not read user {}\", task.getAnyKey(), e);\n+                        LOG.error(\"Could not read user {}\", task.getEntityKey(), e);\n                     }\n                     break;\n \n                 case GROUP:\n                     try {\n-                        any = groupDAO.authFind(task.getAnyKey());\n+                        any = groupDAO.authFind(task.getEntityKey());\n                     } catch (Exception e) {\n-                        LOG.error(\"Could not read group {}\", task.getAnyKey(), e);\n+                        LOG.error(\"Could not read group {}\", task.getEntityKey(), e);\n                     }\n                     break;\n \n                 case ANY_OBJECT:\n                 default:\n                     try {\n-                        any = anyObjectDAO.authFind(task.getAnyKey());\n+                        any = anyObjectDAO.authFind(task.getEntityKey());\n                     } catch (Exception e) {\n-                        LOG.error(\"Could not read any object {}\", task.getAnyKey(), e);\n+                        LOG.error(\"Could not read any object {}\", task.getEntityKey(), e);\n                     }\n                     break;\n             }\n@@ -320,17 +333,17 @@ protected Uid delete(\n         } else {\n             /*\n              * We must choose here whether to\n-             * a. actually delete the provided any object from the external resource\n-             * b. just update the provided any object data onto the external resource\n+             * a. actually delete the provided entity from the external resource\n+             * b. just update the provided entity data onto the external resource\n              *\n-             * (a) happens when either there is no any object associated with the PropagationTask (this takes place\n-             * when the task is generated via UserLogic.delete() / GroupLogic.delete()) or the provided updated\n-             * any object hasn't the current resource assigned (when the task is generated via\n-             * UserController.update() / GroupLogic.update()).\n+             * (a) happens when either there is no entity associated with the PropagationTask (this takes place\n+             * when the task is generated via Logic's delete()) or the provided updated\n+             * entity hasn't the current resource assigned (when the task is generated via\n+             * Logic's update()).\n              *\n-             * (b) happens when the provided updated any object does have the current resource assigned (when the task\n-             * is generated via UserLogic.update() / GroupLogic.updae()): this basically means that before such\n-             * update, this any object used to have the current resource assigned by more than one mean (for example,\n+             * (b) happens when the provided updated entity does have the current resource assigned (when the task\n+             * is generated via Logic's update()): this basically means that before such\n+             * update, this entity used to have the current resource assigned by more than one mean (for example,\n              * two different memberships with the same resource).\n              */\n             Any<?> any = getAny(task);\n@@ -339,9 +352,9 @@ protected Uid delete(\n                     : any instanceof AnyObject\n                             ? anyObjectDAO.findAllResourceNames((AnyObject) any)\n                             : any instanceof Group\n-                                    ? ((Group) any).getResourceNames()\n+                                    ? ((Group) any).getResourceKeys()\n                                     : Collections.<String>emptySet();\n-            if (!resources.contains(task.getResource().getKey())) {\n+            if (task.getAnyTypeKind() == null || !resources.contains(task.getResource().getKey())) {\n                 LOG.debug(\"Delete {} on {}\", beforeObj.getUid(), task.getResource().getKey());\n \n                 connector.delete(beforeObj.getObjectClass(), beforeObj.getUid(), null, propagationAttempted);\n@@ -373,15 +386,21 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n         ConnectorObject afterObj = null;\n \n         Provision provision = null;\n+        OrgUnit orgUnit = null;\n         Uid uid = null;\n         Connector connector = null;\n         Result result;\n         try {\n             provision = task.getResource().getProvision(new ObjectClass(task.getObjectClassName()));\n+            orgUnit = task.getResource().getOrgUnit();\n             connector = connFactory.getConnector(task.getResource());\n \n             // Try to read remote object BEFORE any actual operation\n-            beforeObj = getRemoteObject(task, connector, provision, false);\n+            beforeObj = provision == null && orgUnit == null\n+                    ? null\n+                    : orgUnit == null\n+                            ? getRemoteObject(task, connector, provision, false)\n+                            : getRemoteObject(task, connector, orgUnit);\n \n             for (PropagationActions action : actions) {\n                 action.before(task, beforeObj);\n@@ -444,7 +463,11 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n                     task.setConnObjectKey(uid.getUidValue());\n                 }\n                 try {\n-                    afterObj = getRemoteObject(task, connector, provision, true);\n+                    afterObj = provision == null && orgUnit == null\n+                            ? null\n+                            : orgUnit == null\n+                                    ? getRemoteObject(task, connector, provision, true)\n+                                    : getRemoteObject(task, connector, orgUnit);\n                 } catch (Exception ignore) {\n                     // ignore exception\n                     LOG.error(\"Error retrieving after object\", ignore);\n@@ -492,22 +515,22 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n \n         notificationManager.createTasks(\n                 AuditElements.EventCategoryType.PROPAGATION,\n-                task.getAnyTypeKind().name().toLowerCase(),\n+                task.getAnyTypeKind() == null ? \"realm\" : task.getAnyTypeKind().name().toLowerCase(),\n                 task.getResource().getKey(),\n                 task.getOperation().name().toLowerCase(),\n                 result,\n-                beforeObj, // searching for before object is too much expensive ... \n+                beforeObj,\n                 new Object[] { execution, afterObj },\n                 task);\n \n         auditManager.audit(\n                 AuditElements.EventCategoryType.PROPAGATION,\n-                task.getAnyTypeKind().name().toLowerCase(),\n+                task.getAnyTypeKind() == null ? \"realm\" : task.getAnyTypeKind().name().toLowerCase(),\n                 task.getResource().getKey(),\n                 task.getOperation().name().toLowerCase(),\n                 result,\n-                connObjectUtils.getConnObjectTO(beforeObj), // searching for before object is too much expensive ... \n-                new Object[] { execution, connObjectUtils.getConnObjectTO(afterObj) },\n+                beforeObj,\n+                new Object[] { execution, afterObj },\n                 task);\n \n         return execution;\n@@ -606,11 +629,11 @@ protected ConnectorObject getRemoteObject(\n             for (MappingItem item : linkingMappingItems) {\n                 Attribute attr = obj.getAttributeByName(item.getExtAttrName());\n                 if (attr == null) {\n-                    virAttrCache.expire(task.getAnyType(), task.getAnyKey(), item.getIntAttrName());\n+                    virAttrCache.expire(task.getAnyType(), task.getEntityKey(), item.getIntAttrName());\n                 } else {\n                     VirAttrCacheValue cacheValue = new VirAttrCacheValue();\n                     cacheValue.setValues(attr.getValue());\n-                    virAttrCache.put(task.getAnyType(), task.getAnyKey(), item.getIntAttrName(), cacheValue);\n+                    virAttrCache.put(task.getAnyType(), task.getEntityKey(), item.getIntAttrName(), cacheValue);\n                 }\n             }\n         } catch (TimeoutException toe) {\n@@ -622,4 +645,44 @@ protected ConnectorObject getRemoteObject(\n \n         return obj;\n     }\n+\n+    /**\n+     * Get remote object for given task.\n+     *\n+     * @param connector connector facade proxy.\n+     * @param task current propagation task.\n+     * @param orgUnit orgUnit\n+     * @return remote connector object.\n+     */\n+    protected ConnectorObject getRemoteObject(\n+            final PropagationTask task,\n+            final Connector connector,\n+            final OrgUnit orgUnit) {\n+\n+        Realm realm = realmDAO.find(task.getEntityKey());\n+        if (realm == null) {\n+            return null;\n+        }\n+\n+        final ConnectorObject[] obj = new ConnectorObject[1];\n+        try {\n+            connector.search(new ObjectClass(task.getObjectClassName()),\n+                    new EqualsFilter(AttributeBuilder.build(orgUnit.getExtAttrName(), realm.getName())),\n+                    new ResultsHandler() {\n+\n+                @Override\n+                public boolean handle(final ConnectorObject connectorObject) {\n+                    obj[0] = connectorObject;\n+                    return false;\n+                }\n+            }, new OperationOptionsBuilder().setAttributesToGet(Name.NAME, Uid.NAME, orgUnit.getExtAttrName()).build());\n+        } catch (TimeoutException toe) {\n+            LOG.debug(\"Request timeout\", toe);\n+            throw toe;\n+        } catch (RuntimeException ignore) {\n+            LOG.debug(\"While resolving {}\", task.getConnObjectKey(), ignore);\n+        }\n+\n+        return obj[0];\n+    }\n }"},{"sha":"88489aa61e16abf041448c0b7b78431564cd7968","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DBPasswordPropagationActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -57,7 +57,7 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n         super.before(task, beforeObj);\n \n         if (AnyTypeKind.USER == task.getAnyTypeKind()) {\n-            User user = userDAO.find(task.getAnyKey());\n+            User user = userDAO.find(task.getEntityKey());\n \n             if (user != null && user.getPassword() != null) {\n                 Attribute missing = AttributeUtil.find("},{"sha":"54be32631851379ed8d1051fa8c154ce43245398","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPMembershipPropagationActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -74,11 +74,11 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n \n         Provision provision = task.getResource().getProvision(anyTypeDAO.findGroup());\n         if (AnyTypeKind.USER == task.getAnyTypeKind() && provision != null && provision.getMapping() != null) {\n-            User user = userDAO.find(task.getAnyKey());\n+            User user = userDAO.find(task.getEntityKey());\n             if (user != null) {\n                 List<String> groupConnObjectLinks = new ArrayList<>();\n                 for (Group group : userDAO.findAllGroups(user)) {\n-                    if (group.getResourceNames().contains(task.getResource().getKey())\n+                    if (group.getResourceKeys().contains(task.getResource().getKey())\n                             && StringUtils.isNotBlank(provision.getMapping().getConnObjectLink())) {\n \n                         LOG.debug(\"Evaluating connObjectLink for {}\", group);"},{"sha":"5d5c5b199cba409b045469b43728dde103b91026","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPPasswordPropagationActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -59,7 +59,7 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n         super.before(task, beforeObj);\n \n         if (AnyTypeKind.USER == task.getAnyTypeKind()) {\n-            User user = userDAO.find(task.getAnyKey());\n+            User user = userDAO.find(task.getEntityKey());\n \n             if (user != null && user.getPassword() != null) {\n                 Attribute missing = AttributeUtil.find("},{"sha":"9bf336ec4f672e4d38f9c4b35b6b6c20d52bd2fd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":96,"deletions":24,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -28,6 +28,9 @@\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.jexl3.JexlContext;\n+import org.apache.commons.jexl3.MapContext;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n@@ -50,18 +53,21 @@\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n+import org.identityconnectors.framework.common.objects.Name;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -139,9 +145,9 @@ public List<PropagationTask> getCreateTasks(\n             final String key,\n             final PropagationByResource propByRes,\n             final Collection<AttrTO> vAttrs,\n-            final Collection<String> noPropResourceNames) {\n+            final Collection<String> noPropResourceKeys) {\n \n-        return getCreateTasks(find(kind, key), null, null, propByRes, vAttrs, noPropResourceNames);\n+        return getCreateTasks(find(kind, key), null, null, propByRes, vAttrs, noPropResourceKeys);\n     }\n \n     @Override\n@@ -151,9 +157,9 @@ public List<PropagationTask> getUserCreateTasks(\n             final Boolean enable,\n             final PropagationByResource propByRes,\n             final Collection<AttrTO> vAttrs,\n-            final Collection<String> noPropResourceNames) {\n+            final Collection<String> noPropResourceKeys) {\n \n-        return getCreateTasks(userDAO.authFind(key), password, enable, propByRes, vAttrs, noPropResourceNames);\n+        return getCreateTasks(userDAO.authFind(key), password, enable, propByRes, vAttrs, noPropResourceKeys);\n     }\n \n     protected List<PropagationTask> getCreateTasks(\n@@ -162,14 +168,14 @@ protected List<PropagationTask> getCreateTasks(\n             final Boolean enable,\n             final PropagationByResource propByRes,\n             final Collection<AttrTO> vAttrs,\n-            final Collection<String> noPropResourceNames) {\n+            final Collection<String> noPropResourceKeys) {\n \n         if (propByRes == null || propByRes.isEmpty()) {\n             return Collections.<PropagationTask>emptyList();\n         }\n \n-        if (noPropResourceNames != null) {\n-            propByRes.get(ResourceOperation.CREATE).removeAll(noPropResourceNames);\n+        if (noPropResourceKeys != null) {\n+            propByRes.get(ResourceOperation.CREATE).removeAll(noPropResourceKeys);\n         }\n \n         return createTasks(any, password, true, enable, false, propByRes, vAttrs);\n@@ -183,16 +189,16 @@ public List<PropagationTask> getUpdateTasks(\n             final Boolean enable,\n             final PropagationByResource propByRes,\n             final Collection<AttrTO> vAttrs,\n-            final Collection<String> noPropResourceNames) {\n+            final Collection<String> noPropResourceKeys) {\n \n-        return getUpdateTasks(find(kind, key), null, changePwd, enable, propByRes, vAttrs, noPropResourceNames);\n+        return getUpdateTasks(find(kind, key), null, changePwd, enable, propByRes, vAttrs, noPropResourceKeys);\n     }\n \n     @Override\n     public List<PropagationTask> getUserUpdateTasks(\n             final WorkflowResult<Pair<UserPatch, Boolean>> wfResult,\n             final boolean changePwd,\n-            final Collection<String> noPropResourceNames) {\n+            final Collection<String> noPropResourceKeys) {\n \n         return getUpdateTasks(\n                 userDAO.authFind(wfResult.getResult().getKey().getKey()),\n@@ -203,7 +209,7 @@ public List<PropagationTask> getUserUpdateTasks(\n                 wfResult.getResult().getValue(),\n                 wfResult.getPropByRes(),\n                 wfResult.getResult().getKey().getVirAttrs(),\n-                noPropResourceNames);\n+                noPropResourceKeys);\n     }\n \n     @Override\n@@ -260,10 +266,10 @@ protected List<PropagationTask> getUpdateTasks(\n             final Boolean enable,\n             final PropagationByResource propByRes,\n             final Collection<AttrTO> vAttrs,\n-            final Collection<String> noPropResourceNames) {\n+            final Collection<String> noPropResourceKeys) {\n \n-        if (noPropResourceNames != null && propByRes != null) {\n-            propByRes.removeAll(noPropResourceNames);\n+        if (noPropResourceKeys != null && propByRes != null) {\n+            propByRes.removeAll(noPropResourceKeys);\n         }\n \n         return createTasks(\n@@ -281,29 +287,29 @@ public List<PropagationTask> getDeleteTasks(\n             final AnyTypeKind kind,\n             final String key,\n             final PropagationByResource propByRes,\n-            final Collection<String> noPropResourceNames) {\n+            final Collection<String> noPropResourceKeys) {\n \n         Any<?> any = find(kind, key);\n \n         PropagationByResource localPropByRes = new PropagationByResource();\n \n         if (propByRes == null || propByRes.isEmpty()) {\n-            localPropByRes.addAll(ResourceOperation.DELETE, any.getResourceNames());\n+            localPropByRes.addAll(ResourceOperation.DELETE, any.getResourceKeys());\n         } else {\n             localPropByRes.merge(propByRes);\n         }\n \n-        if (noPropResourceNames != null) {\n-            localPropByRes.removeAll(noPropResourceNames);\n+        if (noPropResourceKeys != null) {\n+            localPropByRes.removeAll(noPropResourceKeys);\n         }\n \n-        return getDeleteTasks(any, localPropByRes, noPropResourceNames);\n+        return getDeleteTasks(any, localPropByRes, noPropResourceKeys);\n     }\n \n     protected List<PropagationTask> getDeleteTasks(\n             final Any<?> any,\n             final PropagationByResource propByRes,\n-            final Collection<String> noPropResourceNames) {\n+            final Collection<String> noPropResourceKeys) {\n \n         return createTasks(any, null, false, false, true, propByRes, null);\n     }\n@@ -340,7 +346,7 @@ protected List<PropagationTask> createTasks(final Any<?> any,\n         } else if (any instanceof AnyObject) {\n             virtualResources.addAll(anyObjectDAO.findAllResourceNames((AnyObject) any));\n         } else {\n-            virtualResources.addAll(((Group) any).getResourceNames());\n+            virtualResources.addAll(((Group) any).getResourceKeys());\n         }\n \n         Map<String, Set<Attribute>> vAttrMap = new HashMap<>();\n@@ -388,12 +394,11 @@ protected List<PropagationTask> createTasks(final Any<?> any,\n             } else {\n                 PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n                 task.setResource(resource);\n-                task.setObjectClassName(\n-                        resource.getProvision(any.getType()).getObjectClass().getObjectClassValue());\n+                task.setObjectClassName(provision.getObjectClass().getObjectClassValue());\n                 task.setAnyTypeKind(any.getType().getKind());\n                 task.setAnyType(any.getType().getKey());\n                 if (!deleteOnResource) {\n-                    task.setAnyKey(any.getKey());\n+                    task.setEntityKey(any.getKey());\n                 }\n                 task.setOperation(entry.getValue());\n                 task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resource.getKey()));\n@@ -441,4 +446,71 @@ protected List<PropagationTask> createTasks(final Any<?> any,\n \n         return tasks;\n     }\n+\n+    @Override\n+    public List<PropagationTask> createTasks(\n+            final Realm realm,\n+            final PropagationByResource propByRes,\n+            final Collection<String> noPropResourceKeys) {\n+\n+        if (noPropResourceKeys != null) {\n+            propByRes.removeAll(noPropResourceKeys);\n+        }\n+\n+        LOG.debug(\"Provisioning {}:\\n{}\", realm, propByRes);\n+\n+        // Avoid duplicates - see javadoc\n+        propByRes.purge();\n+        LOG.debug(\"After purge {}:\\n{}\", realm, propByRes);\n+\n+        List<PropagationTask> tasks = new ArrayList<>();\n+\n+        for (Map.Entry<String, ResourceOperation> entry : propByRes.asMap().entrySet()) {\n+            ExternalResource resource = resourceDAO.find(entry.getKey());\n+            OrgUnit orgUnit = resource == null ? null : resource.getOrgUnit();\n+\n+            if (resource == null) {\n+                LOG.error(\"Invalid resource name specified: {}, ignoring...\", entry.getKey());\n+            } else if (orgUnit == null) {\n+                LOG.error(\"No orgUnit specified on resource {}, ignoring...\", resource);\n+            } else if (StringUtils.isBlank(orgUnit.getConnObjectLink())) {\n+                LOG.warn(\"Requesting propagation for {} but no ConnObjectLink provided for {}\",\n+                        realm.getFullPath(), resource);\n+            } else {\n+                PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n+                task.setResource(resource);\n+                task.setObjectClassName(orgUnit.getObjectClass().getObjectClassValue());\n+                task.setEntityKey(realm.getKey());\n+                task.setOperation(entry.getValue());\n+\n+                Set<Attribute> preparedAttrs = new HashSet<>();\n+                preparedAttrs.add(AttributeBuilder.build(orgUnit.getExtAttrName(), realm.getName()));\n+\n+                JexlContext jexlContext = new MapContext();\n+                JexlUtils.addFieldsToContext(realm, jexlContext);\n+                String evalConnObjectLink = JexlUtils.evaluate(orgUnit.getConnObjectLink(), jexlContext);\n+                if (StringUtils.isBlank(evalConnObjectLink)) {\n+                    // add connObjectKey as __NAME__ attribute ...\n+                    LOG.debug(\"Add connObjectKey [{}] as __NAME__\", realm.getName());\n+                    preparedAttrs.add(new Name(realm.getName()));\n+                } else {\n+                    LOG.debug(\"Add connObjectLink [{}] as __NAME__\", evalConnObjectLink);\n+                    preparedAttrs.add(new Name(evalConnObjectLink));\n+\n+                    // connObjectKey not propagated: it will be used to set the value for __UID__ attribute\n+                    LOG.debug(\"connObjectKey will be used just as __UID__ attribute\");\n+                }\n+\n+                task.setConnObjectKey(realm.getName());\n+\n+                task.setAttributes(preparedAttrs);\n+\n+                tasks.add(task);\n+\n+                LOG.debug(\"PropagationTask created: {}\", task);\n+            }\n+        }\n+\n+        return tasks;\n+    }\n }"},{"sha":"8beab31b719187ae0bf0735eeac447759c7838ac","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":15,"deletions":11,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -92,7 +92,7 @@ protected AnyTO doLink(final AnyTO before, final boolean unlink) {\n \n     protected abstract AnyTO doUpdate(AnyTO before, AnyPatch anyPatch, SyncDelta delta, ProvisioningReport result);\n \n-    protected void doDeprovision(final AnyTypeKind kind, final String key, final boolean unlink) {\n+    protected AnyPatch doDeprovision(final AnyTypeKind kind, final String key, final boolean unlink) {\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.add(ResourceOperation.DELETE, profile.getTask().getResource().getKey());\n         taskExecutor.execute(propagationManager.getDeleteTasks(\n@@ -101,12 +101,14 @@ protected void doDeprovision(final AnyTypeKind kind, final String key, final boo\n                 propByRes,\n                 null));\n \n+        AnyPatch anyPatch = null;\n         if (unlink) {\n-            AnyPatch anyObjectPatch = newPatch(key);\n-            anyObjectPatch.getResources().add(new StringPatchItem.Builder().\n+            anyPatch = newPatch(key);\n+            anyPatch.getResources().add(new StringPatchItem.Builder().\n                     operation(PatchOperation.DELETE).\n                     value(profile.getTask().getResource().getKey()).build());\n         }\n+        return anyPatch;\n     }\n \n     protected void doDelete(final AnyTypeKind kind, final String key) {\n@@ -442,8 +444,12 @@ protected List<ProvisioningReport> deprovision(\n                             }\n                         }\n \n-                        doDeprovision(provision.getAnyType().getKind(), key, unlink);\n-                        output = getAnyTO(key);\n+                        AnyPatch anyPatch = doDeprovision(provision.getAnyType().getKind(), key, unlink);\n+                        if (anyPatch == null) {\n+                            output = getAnyTO(key);\n+                        } else {\n+                            output = doUpdate(before, anyPatch, delta, result);\n+                        }\n \n                         for (PullActions action : profile.getActions()) {\n                             action.after(profile, delta, AnyTO.class.cast(output), result);\n@@ -638,31 +644,29 @@ protected List<ProvisioningReport> delete(\n         return delResults;\n     }\n \n-    protected List<ProvisioningReport> ignore(\n+    protected ProvisioningReport ignore(\n             final SyncDelta delta,\n             final Provision provision,\n             final boolean matching)\n             throws JobExecutionException {\n \n         LOG.debug(\"Any to ignore {}\", delta.getObject().getUid().getUidValue());\n \n-        final List<ProvisioningReport> ignoreResults = new ArrayList<>();\n         ProvisioningReport result = new ProvisioningReport();\n \n         result.setKey(null);\n         result.setName(delta.getObject().getUid().getUidValue());\n         result.setOperation(ResourceOperation.NONE);\n         result.setAnyType(provision.getAnyType().getKey());\n         result.setStatus(ProvisioningReport.Status.SUCCESS);\n-        ignoreResults.add(result);\n \n         if (!profile.isDryRun()) {\n             finalize(matching\n                     ? MatchingRule.toEventName(MatchingRule.IGNORE)\n                     : UnmatchingRule.toEventName(UnmatchingRule.IGNORE), Result.SUCCESS, null, null, delta);\n         }\n \n-        return ignoreResults;\n+        return result;\n     }\n \n     /**\n@@ -717,7 +721,7 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n                             break;\n \n                         case IGNORE:\n-                            profile.getResults().addAll(ignore(delta, provision, false));\n+                            profile.getResults().add(ignore(delta, provision, false));\n                             break;\n \n                         default:\n@@ -767,7 +771,7 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n                             break;\n \n                         case IGNORE:\n-                            profile.getResults().addAll(ignore(delta, provision, true));\n+                            profile.getResults().add(ignore(delta, provision, true));\n                             break;\n \n                         default:"},{"sha":"0766bd5e68bf17f677e69bf82d4a83507b08e4de","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":9,"deletions":12,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -94,7 +94,6 @@ protected void provision(final Any<?> any, final Boolean enabled) {\n                 noPropResources));\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     protected void link(final Any<?> any, final Boolean unlink) {\n         AnyPatch patch = newPatch(any.getKey());\n         patch.getResources().add(new StringPatchItem.Builder().\n@@ -104,7 +103,6 @@ protected void link(final Any<?> any, final Boolean unlink) {\n         update(patch);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     protected void unassign(final Any<?> any) {\n         AnyPatch patch = newPatch(any.getKey());\n         patch.getResources().add(new StringPatchItem.Builder().\n@@ -169,7 +167,7 @@ public boolean handle(final String anyKey) {\n         }\n     }\n \n-    protected final void doHandle(final Any<?> any) throws JobExecutionException {\n+    private void doHandle(final Any<?> any) throws JobExecutionException {\n         AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n \n         ProvisioningReport result = new ProvisioningReport();\n@@ -370,9 +368,8 @@ protected final void doHandle(final Any<?> any) throws JobExecutionException {\n                         profile.getTask().getResource().getKey(),\n                         operation,\n                         resultStatus,\n-                        connObjectUtils.getConnObjectTO(beforeObj),\n-                        output instanceof ConnectorObject\n-                                ? connObjectUtils.getConnObjectTO((ConnectorObject) output) : output,\n+                        beforeObj,\n+                        output,\n                         any);\n             }\n         }\n@@ -400,21 +397,21 @@ private ResourceOperation getResourceOperation(final MatchingRule rule) {\n         }\n     }\n \n-    protected Any<?> update(final Any<?> any, final Boolean enabled) {\n+    private Any<?> update(final Any<?> any, final Boolean enabled) {\n         boolean changepwd;\n-        Collection<String> resourceNames;\n+        Collection<String> resourceKeys;\n         if (any instanceof User) {\n             changepwd = true;\n-            resourceNames = userDAO.findAllResourceNames((User) any);\n+            resourceKeys = userDAO.findAllResourceNames((User) any);\n         } else if (any instanceof AnyObject) {\n             changepwd = false;\n-            resourceNames = anyObjectDAO.findAllResourceNames((AnyObject) any);\n+            resourceKeys = anyObjectDAO.findAllResourceNames((AnyObject) any);\n         } else {\n             changepwd = false;\n-            resourceNames = ((Group) any).getResourceNames();\n+            resourceKeys = ((Group) any).getResourceKeys();\n         }\n \n-        List<String> noPropResources = new ArrayList<>(resourceNames);\n+        List<String> noPropResources = new ArrayList<>(resourceKeys);\n         noPropResources.remove(profile.getTask().getResource().getKey());\n \n         PropagationByResource propByRes = new PropagationByResource();"},{"sha":"0df7f496a159de53019b0b14076dcf5688f3bf76","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractRealmResultHandler.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractRealmResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractRealmResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractRealmResultHandler.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.pushpull;\n+\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n+import org.apache.syncope.core.provisioning.api.AuditManager;\n+import org.apache.syncope.core.provisioning.api.data.RealmDataBinder;\n+import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningActions;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n+import org.apache.syncope.core.provisioning.api.pushpull.SyncopeResultHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public abstract class AbstractRealmResultHandler<T extends ProvisioningTask, A extends ProvisioningActions>\n+        implements SyncopeResultHandler<T, A> {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(SyncopeResultHandler.class);\n+\n+    protected static final String REALM_TYPE = \"REALM\";\n+    \n+    @Autowired\n+    protected RealmDAO realmDAO;\n+\n+    @Autowired\n+    protected RealmDataBinder binder;\n+\n+    /**\n+     * Notification Manager.\n+     */\n+    @Autowired\n+    protected NotificationManager notificationManager;\n+\n+    /**\n+     * Audit Manager.\n+     */\n+    @Autowired\n+    protected AuditManager auditManager;\n+\n+    /**\n+     * Propagation manager.\n+     */\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    /**\n+     * Task executor.\n+     */\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    /**\n+     * Provisioning profile.\n+     */\n+    protected ProvisioningProfile<T, A> profile;\n+\n+    @Override\n+    public void setProfile(final ProvisioningProfile<T, A> profile) {\n+        this.profile = profile;\n+    }\n+\n+    @Override\n+    public ProvisioningProfile<T, A> getProfile() {\n+        return profile;\n+    }\n+}"},{"sha":"8f3224c7dd0f49f427d55d01cb77c5d6794bf473","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractSyncopeResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractSyncopeResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractSyncopeResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractSyncopeResultHandler.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -129,7 +129,7 @@\n     protected AnyUtilsFactory anyUtilsFactory;\n \n     /**\n-     * Sync profile.\n+     * Provisioning profile.\n      */\n     protected ProvisioningProfile<T, A> profile;\n "},{"sha":"2fd67c5f99f0ef87eb72b24921f1d60d8446d461","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AnyObjectPullResultHandlerImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAnyObjectPullResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAnyObjectPullResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAnyObjectPullResultHandlerImpl.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -21,7 +21,6 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -45,7 +44,7 @@ protected AnyUtils getAnyUtils() {\n \n     @Override\n     protected String getName(final AnyTO anyTO) {\n-        return StringUtils.EMPTY;\n+        return AnyObjectTO.class.cast(anyTO).getName();\n     }\n \n     @Override"},{"sha":"cd2aaf31f840d9c7e087093833c03a220c5c5649","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DBPasswordPullActions.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n@@ -60,10 +61,10 @@ public class DBPasswordPullActions extends DefaultPullActions {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <A extends AnyTO> SyncDelta beforeProvision(\n+    public SyncDelta beforeProvision(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final A any) throws JobExecutionException {\n+            final EntityTO any) throws JobExecutionException {\n \n         if (any instanceof UserTO) {\n             String password = ((UserTO) any).getPassword();\n@@ -124,10 +125,10 @@ public boolean evaluate(final ConnConfProperty property) {\n \n     @Transactional\n     @Override\n-    public <A extends AnyTO> void after(\n+    public void after(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final A any,\n+            final EntityTO any,\n             final ProvisioningReport result) throws JobExecutionException {\n \n         if (any instanceof UserTO && encodedPassword != null && cipher != null) {"},{"sha":"a75ff8bc05a53e2f36e469977af38dee19e9fbb1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultPullActions.java","status":"modified","additions":17,"deletions":16,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultPullActions.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -20,6 +20,7 @@\n \n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n@@ -47,64 +48,64 @@ public <A extends AnyTO, P extends AnyPatch> SyncDelta beforeUpdate(\n     }\n \n     @Override\n-    public <A extends AnyTO> SyncDelta beforeDelete(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n+    public SyncDelta beforeDelete(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final EntityTO entity)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <A extends AnyTO> SyncDelta beforeAssign(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n+    public SyncDelta beforeAssign(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final EntityTO entity)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <A extends AnyTO> SyncDelta beforeProvision(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n+    public SyncDelta beforeProvision(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final EntityTO entity)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <A extends AnyTO> SyncDelta beforeLink(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n+    public SyncDelta beforeLink(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final EntityTO entity)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <A extends AnyTO> SyncDelta beforeUnassign(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n+    public SyncDelta beforeUnassign(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final EntityTO entity)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <A extends AnyTO> SyncDelta beforeDeprovision(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n+    public SyncDelta beforeDeprovision(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final EntityTO entity)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <A extends AnyTO> SyncDelta beforeUnlink(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n+    public SyncDelta beforeUnlink(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final EntityTO entity)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <A extends AnyTO> void after(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any,\n+    public void after(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final EntityTO entity,\n             final ProvisioningReport result)\n             throws JobExecutionException {\n     }"},{"sha":"eea4980d4b22097b934a33effe9bdb47adfd82f2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultPushActions.java","status":"modified","additions":17,"deletions":17,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultPushActions.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n-import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n@@ -34,58 +34,58 @@ public void beforeAll(final ProvisioningProfile<?, ?> profile) throws JobExecuti\n     }\n \n     @Override\n-    public <A extends Any<?>> A beforeAssign(final ProvisioningProfile<?, ?> profile, final A any)\n+    public Entity beforeAssign(final ProvisioningProfile<?, ?> profile, final Entity entity)\n             throws JobExecutionException {\n \n-        return any;\n+        return entity;\n     }\n \n     @Override\n-    public <A extends Any<?>> A beforeProvision(final ProvisioningProfile<?, ?> profile, final A any)\n+    public Entity beforeProvision(final ProvisioningProfile<?, ?> profile, final Entity entity)\n             throws JobExecutionException {\n \n-        return any;\n+        return entity;\n     }\n \n     @Override\n-    public <A extends Any<?>> A beforeLink(final ProvisioningProfile<?, ?> profile, final A any)\n+    public Entity beforeLink(final ProvisioningProfile<?, ?> profile, final Entity entity)\n             throws JobExecutionException {\n \n-        return any;\n+        return entity;\n     }\n \n     @Override\n-    public <A extends Any<?>> A beforeUnassign(final ProvisioningProfile<?, ?> profile, final A any)\n+    public Entity beforeUnassign(final ProvisioningProfile<?, ?> profile, final Entity entity)\n             throws JobExecutionException {\n \n-        return any;\n+        return entity;\n     }\n \n     @Override\n-    public <A extends Any<?>> A beforeDeprovision(final ProvisioningProfile<?, ?> profile, final A any)\n+    public Entity beforeDeprovision(final ProvisioningProfile<?, ?> profile, final Entity entity)\n             throws JobExecutionException {\n \n-        return any;\n+        return entity;\n     }\n \n     @Override\n-    public <A extends Any<?>> A beforeUnlink(final ProvisioningProfile<?, ?> profile, final A any)\n+    public Entity beforeUnlink(final ProvisioningProfile<?, ?> profile, final Entity entity)\n             throws JobExecutionException {\n \n-        return any;\n+        return entity;\n     }\n \n     @Override\n-    public <A extends Any<?>> void onError(\n-            final ProvisioningProfile<?, ?> profile, final A any, final ProvisioningReport result,\n+    public void onError(\n+            final ProvisioningProfile<?, ?> profile, final Entity entity, final ProvisioningReport result,\n             final Exception error) throws JobExecutionException {\n \n         // do nothing\n     }\n \n     @Override\n-    public <A extends Any<?>> void after(\n-            final ProvisioningProfile<?, ?> profile, final A any, final ProvisioningReport result)\n+    public void after(\n+            final ProvisioningProfile<?, ?> profile, final Entity entity, final ProvisioningReport result)\n             throws JobExecutionException {\n \n         // do nothing"},{"sha":"98ce3b95ad9b2afed8b2144a607d197c4af78af8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -26,7 +26,7 @@\n import java.util.Set;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n-import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -154,23 +154,23 @@ protected void populateMemberships(\n      * {@inheritDoc}\n      */\n     @Override\n-    public <A extends AnyTO> void after(\n+    public void after(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final A any,\n+            final EntityTO entity,\n             final ProvisioningReport result) throws JobExecutionException {\n \n         if (!(profile.getTask() instanceof PullTask)) {\n             return;\n         }\n \n-        if (!(any instanceof GroupTO)\n+        if (!(entity instanceof GroupTO)\n                 || profile.getTask().getResource().getProvision(anyTypeDAO.findUser()) == null\n                 || profile.getTask().getResource().getProvision(anyTypeDAO.findUser()).getMapping() == null) {\n \n-            super.after(profile, delta, any, result);\n+            super.after(profile, delta, entity, result);\n         } else {\n-            populateMemberships(profile, delta, (GroupTO) any);\n+            populateMemberships(profile, delta, (GroupTO) entity);\n         }\n     }\n "},{"sha":"967b27c25cad012c77dba8d2ccbef60355334eb5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPPasswordPullActions.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -54,13 +55,13 @@ public class LDAPPasswordPullActions extends DefaultPullActions {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <A extends AnyTO> SyncDelta beforeProvision(\n+    public SyncDelta beforeProvision(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final A any) throws JobExecutionException {\n+            final EntityTO entity) throws JobExecutionException {\n \n-        if (any instanceof UserTO) {\n-            String password = ((UserTO) any).getPassword();\n+        if (entity instanceof UserTO) {\n+            String password = ((UserTO) entity).getPassword();\n             parseEncodedPassword(password);\n         }\n \n@@ -102,14 +103,14 @@ private void parseEncodedPassword(final String password) {\n \n     @Transactional\n     @Override\n-    public <A extends AnyTO> void after(\n+    public void after(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final A any,\n+            final EntityTO entity,\n             final ProvisioningReport result) throws JobExecutionException {\n \n-        if (any instanceof UserTO && encodedPassword != null && cipher != null) {\n-            User user = userDAO.find(any.getKey());\n+        if (entity instanceof UserTO && encodedPassword != null && cipher != null) {\n+            User user = userDAO.find(entity.getKey());\n             if (user != null) {\n                 byte[] encodedPasswordBytes = Base64.decode(encodedPassword.getBytes());\n                 char[] encodedHex = Hex.encode(encodedPasswordBytes);"},{"sha":"565538529d52b0c635b5518eaa9ea846e565ac08","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":53,"deletions":2,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.provisioning.api.Connector;\n@@ -52,8 +53,12 @@\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePullResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.UserPullResultHandler;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.OperationOptions;\n+import org.identityconnectors.framework.common.objects.OperationOptionsBuilder;\n import org.identityconnectors.framework.common.objects.SyncToken;\n+import org.identityconnectors.framework.common.objects.Uid;\n \n public class PullJobDelegate extends AbstractProvisioningJobDelegate<PullTask> implements SyncopePullExecutor {\n \n@@ -76,7 +81,7 @@ public void setLatestSyncToken(final ObjectClass objectClass, final SyncToken la\n         latestSyncTokens.put(objectClass, latestSyncToken);\n     }\n \n-    protected void setGroupOwners(final GroupPullResultHandler ghandler) {\n+    private void setGroupOwners(final GroupPullResultHandler ghandler) {\n         for (Map.Entry<String, String> entry : ghandler.getGroupOwnerMap().entrySet()) {\n             Group group = groupDAO.find(entry.getKey());\n             if (group == null) {\n@@ -226,13 +231,59 @@ protected String doExecuteProvisioning(\n                 }\n             }\n         }\n-\n         try {\n             setGroupOwners(ghandler);\n         } catch (Exception e) {\n             LOG.error(\"While setting group owners\", e);\n         }\n \n+        if (pullTask.getResource().getOrgUnit() != null) {\n+            OrgUnit orgUnit = pullTask.getResource().getOrgUnit();\n+            OperationOptions options = new OperationOptionsBuilder().setAttributesToGet(Name.NAME, Uid.NAME).build();\n+\n+            SyncopePullResultHandler handler =\n+                    (SyncopePullResultHandler) ApplicationContextProvider.getBeanFactory().\n+                    createBean(RealmPullResultHandlerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+            ahandler.setProfile(profile);\n+            ahandler.setPullExecutor(this);\n+\n+            try {\n+                switch (pullTask.getPullMode()) {\n+                    case INCREMENTAL:\n+                        connector.sync(\n+                                orgUnit.getObjectClass(),\n+                                orgUnit.getSyncToken(),\n+                                handler,\n+                                options);\n+                        if (!dryRun) {\n+                            orgUnit.setSyncToken(latestSyncTokens.get(orgUnit.getObjectClass()));\n+                            resourceDAO.save(orgUnit.getResource());\n+                        }\n+                        break;\n+\n+                    case FILTERED_RECONCILIATION:\n+                        ReconciliationFilterBuilder filterBuilder =\n+                                (ReconciliationFilterBuilder) ApplicationContextProvider.getBeanFactory().\n+                                createBean(Class.forName(pullTask.getReconciliationFilterBuilderClassName()),\n+                                        AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+                        connector.filteredReconciliation(orgUnit.getObjectClass(),\n+                                filterBuilder,\n+                                handler,\n+                                options);\n+                        break;\n+\n+                    case FULL_RECONCILIATION:\n+                    default:\n+                        connector.fullReconciliation(orgUnit.getObjectClass(),\n+                                handler,\n+                                options);\n+                        break;\n+                }\n+            } catch (Throwable t) {\n+                throw new JobExecutionException(\"While pulling from connector\", t);\n+            }\n+        }\n+\n         if (!profile.isDryRun()) {\n             for (PullActions action : actions) {\n                 action.afterAll(profile);"},{"sha":"00be8a1b0f6ee0e55f2c88462e1f13966de41289","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":24,"deletions":3,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -30,9 +30,11 @@\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n@@ -72,6 +74,9 @@ public class PushJobDelegate extends AbstractProvisioningJobDelegate<PushTask> {\n     @Autowired\n     private AnyObjectDAO anyObjectDAO;\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n     private AnyDAO<?> getAnyDAO(final AnyTypeKind anyTypeKind) {\n         AnyDAO<?> result;\n         switch (anyTypeKind) {\n@@ -91,7 +96,7 @@ private AnyDAO<?> getAnyDAO(final AnyTypeKind anyTypeKind) {\n         return result;\n     }\n \n-    protected void handle(\n+    private void doHandle(\n             final List<? extends Any<?>> anys,\n             final SyncopePushResultHandler handler,\n             final ExternalResource resource)\n@@ -176,7 +181,7 @@ protected String doExecuteProvisioning(\n                         ? null\n                         : pushTask.getFilter(provision.getAnyType()).getFIQLCond();\n                 if (StringUtils.isBlank(filter)) {\n-                    handle(anyDAO.findAll(), handler, pushTask.getResource());\n+                    doHandle(anyDAO.findAll(), handler, pushTask.getResource());\n                 } else {\n                     int count = anyDAO.count(SyncopeConstants.FULL_ADMIN_REALMS);\n                     for (int page = 1; page <= (count / PAGE_SIZE) + 1; page++) {\n@@ -187,12 +192,28 @@ protected String doExecuteProvisioning(\n                                 PAGE_SIZE,\n                                 Collections.<OrderByClause>emptyList(),\n                                 provision.getAnyType().getKind());\n-                        handle(anys, handler, pushTask.getResource());\n+                        doHandle(anys, handler, pushTask.getResource());\n                     }\n                 }\n             }\n         }\n \n+        if (pushTask.getResource().getOrgUnit() != null) {\n+            SyncopePushResultHandler handler =\n+                    (SyncopePushResultHandler) ApplicationContextProvider.getBeanFactory().\n+                    createBean(RealmPullResultHandlerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+            handler.setProfile(profile);\n+\n+            for (Realm realm : realmDAO.findAll()) {\n+                try {\n+                    handler.handle(realm.getKey());\n+                } catch (Exception e) {\n+                    LOG.warn(\"Failure pushing '{}' on '{}'\", realm, pushTask.getResource(), e);\n+                    throw new JobExecutionException(\"While pushing \" + realm + \" on \" + pushTask.getResource(), e);\n+                }\n+            }\n+        }\n+\n         if (!profile.isDryRun()) {\n             for (PushActions action : actions) {\n                 action.afterAll(profile);"},{"sha":"c97ffb90c887d5093aa5668ee8656775976af4dd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/RealmPullResultHandlerImpl.java","status":"added","additions":693,"deletions":0,"changes":693,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPullResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPullResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPullResultHandlerImpl.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -0,0 +1,693 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.pushpull;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.jexl3.JexlContext;\n+import org.apache.commons.jexl3.MapContext;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.common.lib.types.AuditElements.Result;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.MatchingRule;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.common.lib.types.PullMode;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n+import org.apache.syncope.core.provisioning.api.pushpull.SyncopePullExecutor;\n+import org.apache.syncope.core.provisioning.api.pushpull.SyncopePullResultHandler;\n+import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.identityconnectors.framework.common.objects.SyncDeltaType;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(rollbackFor = Throwable.class)\n+public class RealmPullResultHandlerImpl\n+        extends AbstractRealmResultHandler<PullTask, PullActions>\n+        implements SyncopePullResultHandler {\n+\n+    @Autowired\n+    private AnySearchDAO searchDAO;\n+\n+    private SyncopePullExecutor executor;\n+\n+    private Result latestResult = null;\n+\n+    @Override\n+    public void setPullExecutor(final SyncopePullExecutor executor) {\n+        this.executor = executor;\n+    }\n+\n+    @Override\n+    public boolean handle(final SyncDelta delta) {\n+        try {\n+            OrgUnit orgUnit = profile.getTask().getResource().getOrgUnit();\n+            if (orgUnit == null) {\n+                throw new JobExecutionException(\"No orgUnit found on \" + profile.getTask().getResource() + \" for \"\n+                        + delta.getObject().getObjectClass());\n+            }\n+\n+            doHandle(delta, orgUnit);\n+\n+            LOG.debug(\"Successfully handled {}\", delta);\n+\n+            if (profile.getTask().getPullMode() != PullMode.INCREMENTAL) {\n+                return true;\n+            }\n+\n+            boolean shouldContinue;\n+            synchronized (this) {\n+                shouldContinue = latestResult == Result.SUCCESS;\n+                this.latestResult = null;\n+            }\n+            if (shouldContinue) {\n+                executor.setLatestSyncToken(delta.getObjectClass(), delta.getToken());\n+            }\n+            return shouldContinue;\n+        } catch (IgnoreProvisionException e) {\n+            ProvisioningReport ignoreResult = new ProvisioningReport();\n+            ignoreResult.setOperation(ResourceOperation.NONE);\n+            ignoreResult.setStatus(ProvisioningReport.Status.IGNORE);\n+            ignoreResult.setAnyType(REALM_TYPE);\n+            ignoreResult.setKey(null);\n+            ignoreResult.setName(delta.getObject().getName().getNameValue());\n+            profile.getResults().add(ignoreResult);\n+\n+            LOG.warn(\"Ignoring during pull\", e);\n+\n+            executor.setLatestSyncToken(delta.getObjectClass(), delta.getToken());\n+\n+            return true;\n+        } catch (JobExecutionException e) {\n+            LOG.error(\"Pull failed\", e);\n+\n+            return false;\n+        }\n+    }\n+\n+    private ProvisioningReport assign(final SyncDelta delta, final String name) throws JobExecutionException {\n+        if (!profile.getTask().isPerformCreate()) {\n+            LOG.debug(\"PullTask not configured for create\");\n+            return null;\n+        }\n+\n+        RealmTO realmTO = new RealmTO();\n+        realmTO.setName(name);\n+        realmTO.setParent(SyncopeConstants.ROOT_REALM);\n+        realmTO.getResources().add(profile.getTask().getResource().getKey());\n+\n+        ProvisioningReport result = new ProvisioningReport();\n+        result.setOperation(ResourceOperation.CREATE);\n+        result.setAnyType(REALM_TYPE);\n+        result.setStatus(ProvisioningReport.Status.SUCCESS);\n+        result.setName(SyncopeConstants.ROOT_REALM + name);\n+\n+        if (profile.isDryRun()) {\n+            result.setKey(null);\n+        } else {\n+            SyncDelta actionedDelta = delta;\n+            for (PullActions action : profile.getActions()) {\n+                actionedDelta = action.beforeAssign(profile, actionedDelta, realmTO);\n+            }\n+\n+            create(realmTO, actionedDelta, UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), result);\n+        }\n+\n+        return result;\n+    }\n+\n+    private ProvisioningReport provision(final SyncDelta delta, final String name) throws JobExecutionException {\n+        if (!profile.getTask().isPerformCreate()) {\n+            LOG.debug(\"PullTask not configured for create\");\n+            return null;\n+        }\n+\n+        RealmTO realmTO = new RealmTO();\n+        realmTO.setName(name);\n+        realmTO.setParent(SyncopeConstants.ROOT_REALM);\n+        realmTO.getResources().add(profile.getTask().getResource().getKey());\n+\n+        ProvisioningReport result = new ProvisioningReport();\n+        result.setOperation(ResourceOperation.CREATE);\n+        result.setAnyType(REALM_TYPE);\n+        result.setStatus(ProvisioningReport.Status.SUCCESS);\n+        result.setName(SyncopeConstants.ROOT_REALM + name);\n+\n+        if (profile.isDryRun()) {\n+            result.setKey(null);\n+        } else {\n+            SyncDelta actionedDelta = delta;\n+            for (PullActions action : profile.getActions()) {\n+                actionedDelta = action.beforeProvision(profile, actionedDelta, realmTO);\n+            }\n+\n+            create(realmTO, actionedDelta, UnmatchingRule.toEventName(UnmatchingRule.PROVISION), result);\n+        }\n+\n+        return result;\n+    }\n+\n+    private void throwIgnoreProvisionException(final SyncDelta delta, final Exception exception)\n+            throws JobExecutionException {\n+\n+        if (exception instanceof IgnoreProvisionException) {\n+            throw IgnoreProvisionException.class.cast(exception);\n+        }\n+\n+        IgnoreProvisionException ipe = null;\n+        for (PullActions action : profile.getActions()) {\n+            if (ipe == null) {\n+                ipe = action.onError(profile, delta, exception);\n+            }\n+        }\n+        if (ipe != null) {\n+            throw ipe;\n+        }\n+    }\n+\n+    private void create(\n+            final RealmTO realmTO,\n+            final SyncDelta delta,\n+            final String operation,\n+            final ProvisioningReport result)\n+            throws JobExecutionException {\n+\n+        Object output;\n+        Result resultStatus;\n+\n+        try {\n+            Realm realm = realmDAO.save(binder.create(SyncopeConstants.ROOT_REALM, realmTO));\n+\n+            PropagationByResource propByRes = new PropagationByResource();\n+            for (String resource : realm.getResourceKeys()) {\n+                propByRes.add(ResourceOperation.CREATE, resource);\n+            }\n+            List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);\n+            PropagationReporter propagationReporter =\n+                    ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n+            taskExecutor.execute(tasks, propagationReporter, false);\n+\n+            RealmTO actual = binder.getRealmTO(realm);\n+            result.setName(SyncopeConstants.ROOT_REALM + realmTO.getName());\n+            output = actual;\n+            resultStatus = Result.SUCCESS;\n+\n+            for (PullActions action : profile.getActions()) {\n+                action.after(profile, delta, actual, result);\n+            }\n+\n+            LOG.debug(\"Realm {} successfully created\", actual.getKey());\n+        } catch (PropagationException e) {\n+            // A propagation failure doesn't imply a pull failure.\n+            // The propagation exception status will be reported into the propagation task execution.\n+            LOG.error(\"Could not propagate Realm {}\", delta.getUid().getUidValue(), e);\n+            output = e;\n+            resultStatus = Result.FAILURE;\n+        } catch (Exception e) {\n+            throwIgnoreProvisionException(delta, e);\n+\n+            result.setStatus(ProvisioningReport.Status.FAILURE);\n+            result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n+            LOG.error(\"Could not create Realm {} \", delta.getUid().getUidValue(), e);\n+            output = e;\n+            resultStatus = Result.FAILURE;\n+        }\n+\n+        finalize(operation, resultStatus, null, output, delta);\n+    }\n+\n+    private ProvisioningReport update(final SyncDelta delta, final Realm realm, final String name)\n+            throws JobExecutionException {\n+\n+        if (!profile.getTask().isPerformUpdate()) {\n+            LOG.debug(\"PullTask not configured for update\");\n+            return null;\n+        }\n+\n+        LOG.debug(\"About to update {}\", realm);\n+\n+        RealmTO before = binder.getRealmTO(realm);\n+\n+        ProvisioningReport result = new ProvisioningReport();\n+        result.setOperation(ResourceOperation.UPDATE);\n+        result.setAnyType(REALM_TYPE);\n+        result.setStatus(ProvisioningReport.Status.SUCCESS);\n+        result.setKey(realm.getKey());\n+\n+        Result resultStatus;\n+        Object output;\n+        if (!profile.isDryRun()) {\n+            try {\n+                before.setName(name);\n+\n+                PropagationByResource propByRes = binder.update(realm, before);\n+                Realm updated = realmDAO.save(realm);\n+\n+                List<PropagationTask> tasks = propagationManager.createTasks(updated, propByRes, null);\n+                PropagationReporter propagationReporter =\n+                        ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n+                taskExecutor.execute(tasks, propagationReporter, false);\n+\n+                output = updated;\n+                resultStatus = Result.SUCCESS;\n+                result.setName(updated.getFullPath());\n+\n+                LOG.debug(\"{} successfully updated\", updated);\n+            } catch (PropagationException e) {\n+                // A propagation failure doesn't imply a pull failure.\n+                // The propagation exception status will be reported into the propagation task execution.\n+                LOG.error(\"Could not propagate Realm {}\", delta.getUid().getUidValue(), e);\n+                output = e;\n+                resultStatus = Result.FAILURE;\n+            } catch (Exception e) {\n+                throwIgnoreProvisionException(delta, e);\n+\n+                result.setStatus(ProvisioningReport.Status.FAILURE);\n+                result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n+                LOG.error(\"Could not update Realm {}\", delta.getUid().getUidValue(), e);\n+                output = e;\n+                resultStatus = Result.FAILURE;\n+            }\n+            finalize(MatchingRule.toEventName(MatchingRule.UPDATE), resultStatus, before, output, delta);\n+        }\n+\n+        return result;\n+    }\n+\n+    private ProvisioningReport deprovision(final SyncDelta delta, final Realm realm, final boolean unlink)\n+            throws JobExecutionException {\n+\n+        if (!profile.getTask().isPerformUpdate()) {\n+            LOG.debug(\"PullTask not configured for update\");\n+            return null;\n+        }\n+\n+        LOG.debug(\"About to deprovision {}\", realm);\n+\n+        ProvisioningReport result = new ProvisioningReport();\n+        result.setOperation(ResourceOperation.DELETE);\n+        result.setAnyType(REALM_TYPE);\n+        result.setStatus(ProvisioningReport.Status.SUCCESS);\n+        result.setKey(realm.getKey());\n+\n+        RealmTO before = binder.getRealmTO(realm);\n+\n+        Object output;\n+        Result resultStatus;\n+        if (!profile.isDryRun()) {\n+            result.setName(realm.getFullPath());\n+\n+            try {\n+                if (unlink) {\n+                    for (PullActions action : profile.getActions()) {\n+                        action.beforeUnassign(profile, delta, before);\n+                    }\n+                } else {\n+                    for (PullActions action : profile.getActions()) {\n+                        action.beforeDeprovision(profile, delta, before);\n+                    }\n+                }\n+\n+                PropagationByResource propByRes = new PropagationByResource();\n+                propByRes.add(ResourceOperation.DELETE, profile.getTask().getResource().getKey());\n+                taskExecutor.execute(propagationManager.createTasks(realm, propByRes, null));\n+\n+                if (unlink) {\n+                    realm.getResources().remove(profile.getTask().getResource());\n+                    output = binder.getRealmTO(realmDAO.save(realm));\n+                } else {\n+                    output = binder.getRealmTO(realm);\n+                }\n+\n+                for (PullActions action : profile.getActions()) {\n+                    action.after(profile, delta, RealmTO.class.cast(output), result);\n+                }\n+\n+                resultStatus = Result.SUCCESS;\n+\n+                LOG.debug(\"{} successfully updated\", realm);\n+            } catch (PropagationException e) {\n+                // A propagation failure doesn't imply a pull failure.\n+                // The propagation exception status will be reported into the propagation task execution.\n+                LOG.error(\"Could not propagate Realm {}\", delta.getUid().getUidValue(), e);\n+                output = e;\n+                resultStatus = Result.FAILURE;\n+            } catch (Exception e) {\n+                throwIgnoreProvisionException(delta, e);\n+\n+                result.setStatus(ProvisioningReport.Status.FAILURE);\n+                result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n+                LOG.error(\"Could not update Realm {}\", delta.getUid().getUidValue(), e);\n+                output = e;\n+                resultStatus = Result.FAILURE;\n+            }\n+\n+            finalize(unlink\n+                    ? MatchingRule.toEventName(MatchingRule.UNASSIGN)\n+                    : MatchingRule.toEventName(MatchingRule.DEPROVISION), resultStatus, before, output, delta);\n+        }\n+\n+        return result;\n+    }\n+\n+    private ProvisioningReport link(final SyncDelta delta, final Realm realm, final boolean unlink)\n+            throws JobExecutionException {\n+\n+        if (!profile.getTask().isPerformUpdate()) {\n+            LOG.debug(\"PullTask not configured for update\");\n+            return null;\n+        }\n+\n+        LOG.debug(\"About to link {}\", realm);\n+\n+        ProvisioningReport result = new ProvisioningReport();\n+        result.setOperation(ResourceOperation.NONE);\n+        result.setAnyType(REALM_TYPE);\n+        result.setStatus(ProvisioningReport.Status.SUCCESS);\n+        result.setKey(realm.getKey());\n+\n+        RealmTO before = binder.getRealmTO(realm);\n+\n+        Object output;\n+        Result resultStatus;\n+        if (!profile.isDryRun()) {\n+            result.setName(realm.getFullPath());\n+\n+            try {\n+                if (unlink) {\n+                    for (PullActions action : profile.getActions()) {\n+                        action.beforeUnlink(profile, delta, before);\n+                    }\n+                } else {\n+                    for (PullActions action : profile.getActions()) {\n+                        action.beforeLink(profile, delta, before);\n+                    }\n+                }\n+\n+                if (unlink) {\n+                    realm.getResources().remove(profile.getTask().getResource());\n+                } else {\n+                    realm.add(profile.getTask().getResource());\n+                }\n+                output = update(delta, realm, realm.getName());\n+\n+                for (PullActions action : profile.getActions()) {\n+                    action.after(profile, delta, RealmTO.class.cast(output), result);\n+                }\n+\n+                resultStatus = Result.SUCCESS;\n+\n+                LOG.debug(\"{} successfully updated\", realm);\n+            } catch (PropagationException e) {\n+                // A propagation failure doesn't imply a pull failure.\n+                // The propagation exception status will be reported into the propagation task execution.\n+                LOG.error(\"Could not propagate Realm {}\", delta.getUid().getUidValue(), e);\n+                output = e;\n+                resultStatus = Result.FAILURE;\n+            } catch (Exception e) {\n+                throwIgnoreProvisionException(delta, e);\n+\n+                result.setStatus(ProvisioningReport.Status.FAILURE);\n+                result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n+                LOG.error(\"Could not update Realm {}\", delta.getUid().getUidValue(), e);\n+                output = e;\n+                resultStatus = Result.FAILURE;\n+            }\n+\n+            finalize(unlink\n+                    ? MatchingRule.toEventName(MatchingRule.UNLINK)\n+                    : MatchingRule.toEventName(MatchingRule.LINK), resultStatus, before, output, delta);\n+        }\n+\n+        return result;\n+    }\n+\n+    private ProvisioningReport delete(final SyncDelta delta, final Realm realm)\n+            throws JobExecutionException {\n+\n+        if (!profile.getTask().isPerformDelete()) {\n+            LOG.debug(\"PullTask not configured for delete\");\n+            return null;\n+        }\n+\n+        LOG.debug(\"About to delete {}\", realm);\n+\n+        SyncDelta workingDelta = delta;\n+        Object output;\n+        Result resultStatus = Result.FAILURE;\n+\n+        ProvisioningReport result = new ProvisioningReport();\n+\n+        try {\n+            RealmTO before = binder.getRealmTO(realm);\n+\n+            result.setKey(realm.getKey());\n+            result.setName(realm.getFullPath());\n+            result.setOperation(ResourceOperation.DELETE);\n+            result.setAnyType(REALM_TYPE);\n+            result.setStatus(ProvisioningReport.Status.SUCCESS);\n+\n+            if (!profile.isDryRun()) {\n+                for (PullActions action : profile.getActions()) {\n+                    workingDelta = action.beforeDelete(profile, workingDelta, before);\n+                }\n+\n+                try {\n+                    if (!realmDAO.findChildren(realm).isEmpty()) {\n+                        throw SyncopeClientException.build(ClientExceptionType.HasChildren);\n+                    }\n+\n+                    Set<String> adminRealms = Collections.singleton(realm.getFullPath());\n+                    AnyCond keyCond = new AnyCond(AttributeCond.Type.ISNOTNULL);\n+                    keyCond.setSchema(\"key\");\n+                    SearchCond allMatchingCond = SearchCond.getLeafCond(keyCond);\n+                    int users = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.USER);\n+                    int groups = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.GROUP);\n+                    int anyObjects = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.ANY_OBJECT);\n+\n+                    if (users + groups + anyObjects > 0) {\n+                        SyncopeClientException containedAnys = SyncopeClientException.build(\n+                                ClientExceptionType.AssociatedAnys);\n+                        containedAnys.getElements().add(users + \" user(s)\");\n+                        containedAnys.getElements().add(groups + \" group(s)\");\n+                        containedAnys.getElements().add(anyObjects + \" anyObject(s)\");\n+                        throw containedAnys;\n+                    }\n+\n+                    PropagationByResource propByRes = new PropagationByResource();\n+                    for (String resource : realm.getResourceKeys()) {\n+                        propByRes.add(ResourceOperation.DELETE, resource);\n+                    }\n+                    List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);\n+                    PropagationReporter propagationReporter =\n+                            ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n+                    taskExecutor.execute(tasks, propagationReporter, false);\n+\n+                    realmDAO.delete(realm);\n+\n+                    output = null;\n+                    resultStatus = Result.SUCCESS;\n+\n+                    for (PullActions action : profile.getActions()) {\n+                        action.after(profile, workingDelta, before, result);\n+                    }\n+                } catch (Exception e) {\n+                    throwIgnoreProvisionException(delta, e);\n+\n+                    result.setStatus(ProvisioningReport.Status.FAILURE);\n+                    result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n+                    LOG.error(\"Could not delete {}\", realm, e);\n+                    output = e;\n+                }\n+\n+                finalize(ResourceOperation.DELETE.name().toLowerCase(), resultStatus, before, output, workingDelta);\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Could not delete {}\", realm, e);\n+        }\n+\n+        return result;\n+    }\n+\n+    private ProvisioningReport ignore(\n+            final SyncDelta delta,\n+            final boolean matching)\n+            throws JobExecutionException {\n+\n+        LOG.debug(\"Any to ignore {}\", delta.getObject().getUid().getUidValue());\n+\n+        ProvisioningReport result = new ProvisioningReport();\n+\n+        result.setKey(null);\n+        result.setName(delta.getObject().getUid().getUidValue());\n+        result.setOperation(ResourceOperation.NONE);\n+        result.setAnyType(REALM_TYPE);\n+        result.setStatus(ProvisioningReport.Status.SUCCESS);\n+\n+        if (!profile.isDryRun()) {\n+            finalize(matching\n+                    ? MatchingRule.toEventName(MatchingRule.IGNORE)\n+                    : UnmatchingRule.toEventName(UnmatchingRule.IGNORE), Result.SUCCESS, null, null, delta);\n+        }\n+\n+        return result;\n+    }\n+\n+    private void doHandle(final SyncDelta delta, final OrgUnit orgUnit) throws JobExecutionException {\n+        LOG.debug(\"Process {} for {} as {}\",\n+                delta.getDeltaType(), delta.getUid().getUidValue(), delta.getObject().getObjectClass());\n+\n+        Realm realm = IterableUtils.find(realmDAO.findAll(), new Predicate<Realm>() {\n+\n+            @Override\n+            public boolean evaluate(final Realm realm) {\n+                JexlContext jexlContext = new MapContext();\n+                JexlUtils.addFieldsToContext(realm, jexlContext);\n+                String evalConnObjectLink = JexlUtils.evaluate(orgUnit.getConnObjectLink(), jexlContext);\n+\n+                return delta.getObject().getName().getNameValue().equals(evalConnObjectLink);\n+            }\n+        });\n+        LOG.debug(\"Match found for {} as {}: {}\",\n+                delta.getObject().getName().getNameValue(), delta.getObject().getObjectClass(), realm);\n+\n+        try {\n+            if (SyncDeltaType.CREATE_OR_UPDATE == delta.getDeltaType()) {\n+                if (realm == null) {\n+                    switch (profile.getTask().getUnmatchingRule()) {\n+                        case ASSIGN:\n+                            CollectionUtils.addIgnoreNull(\n+                                    profile.getResults(), assign(delta, delta.getUid().getUidValue()));\n+                            break;\n+\n+                        case PROVISION:\n+                            CollectionUtils.addIgnoreNull(\n+                                    profile.getResults(), provision(delta, delta.getUid().getUidValue()));\n+                            break;\n+\n+                        case IGNORE:\n+                            CollectionUtils.addIgnoreNull(\n+                                    profile.getResults(), ignore(delta, false));\n+                            break;\n+\n+                        default:\n+                        // do nothing\n+                    }\n+                } else {\n+                    switch (profile.getTask().getMatchingRule()) {\n+                        case UPDATE:\n+                            CollectionUtils.addIgnoreNull(\n+                                    profile.getResults(), update(delta, realm, delta.getUid().getUidValue()));\n+                            break;\n+\n+                        case DEPROVISION:\n+                            CollectionUtils.addIgnoreNull(\n+                                    profile.getResults(), deprovision(delta, realm, false));\n+                            break;\n+\n+                        case UNASSIGN:\n+                            CollectionUtils.addIgnoreNull(\n+                                    profile.getResults(), deprovision(delta, realm, true));\n+                            break;\n+\n+                        case LINK:\n+                            CollectionUtils.addIgnoreNull(\n+                                    profile.getResults(), link(delta, realm, false));\n+                            break;\n+\n+                        case UNLINK:\n+                            CollectionUtils.addIgnoreNull(\n+                                    profile.getResults(), link(delta, realm, true));\n+                            break;\n+\n+                        case IGNORE:\n+                            CollectionUtils.addIgnoreNull(profile.getResults(), ignore(delta, true));\n+                            break;\n+\n+                        default:\n+                        // do nothing\n+                    }\n+                }\n+            } else if (SyncDeltaType.DELETE == delta.getDeltaType()) {\n+                if (realm == null) {\n+                    LOG.debug(\"No match found for deletion\");\n+                } else {\n+                    CollectionUtils.addIgnoreNull(profile.getResults(), delete(delta, realm));\n+                }\n+            }\n+        } catch (IllegalStateException | IllegalArgumentException e) {\n+            LOG.warn(e.getMessage());\n+        }\n+    }\n+\n+    private void finalize(\n+            final String event,\n+            final Result result,\n+            final Object before,\n+            final Object output,\n+            final SyncDelta delta) {\n+\n+        synchronized (this) {\n+            this.latestResult = result;\n+        }\n+\n+        notificationManager.createTasks(AuditElements.EventCategoryType.PULL,\n+                REALM_TYPE.toLowerCase(),\n+                profile.getTask().getResource().getKey(),\n+                event,\n+                result,\n+                before,\n+                output,\n+                delta);\n+\n+        auditManager.audit(AuditElements.EventCategoryType.PULL,\n+                REALM_TYPE.toLowerCase(),\n+                profile.getTask().getResource().getKey(),\n+                event,\n+                result,\n+                before,\n+                output,\n+                delta);\n+    }\n+}"},{"sha":"eb24796ccf4db38d703a705786e54da5527411d0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/RealmPushResultHandlerImpl.java","status":"added","additions":374,"deletions":0,"changes":374,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPushResultHandlerImpl.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -0,0 +1,374 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.pushpull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.IteratorUtils;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.common.lib.types.AuditElements.Result;\n+import org.apache.syncope.common.lib.types.MatchingRule;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n+import org.apache.syncope.core.provisioning.api.TimeoutException;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n+import org.apache.syncope.core.provisioning.api.pushpull.SyncopePushResultHandler;\n+import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.Uid;\n+import org.quartz.JobExecutionException;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class RealmPushResultHandlerImpl\n+        extends AbstractRealmResultHandler<PushTask, PushActions>\n+        implements SyncopePushResultHandler {\n+\n+    @Transactional(propagation = Propagation.REQUIRES_NEW)\n+    @Override\n+    public boolean handle(final String realmKey) {\n+        Realm realm = null;\n+        try {\n+            realm = realmDAO.find(realmKey);\n+            doHandle(realm);\n+            return true;\n+        } catch (IgnoreProvisionException e) {\n+            ProvisioningReport result = new ProvisioningReport();\n+            result.setOperation(ResourceOperation.NONE);\n+            result.setAnyType(realm == null ? null : REALM_TYPE);\n+            result.setStatus(ProvisioningReport.Status.IGNORE);\n+            result.setKey(realmKey);\n+            profile.getResults().add(result);\n+\n+            LOG.warn(\"Ignoring during push\", e);\n+            return true;\n+        } catch (JobExecutionException e) {\n+            LOG.error(\"Push failed\", e);\n+            return false;\n+        }\n+    }\n+\n+    private ConnectorObject getRemoteObject(final String connObjectKey, final ObjectClass objectClass) {\n+        ConnectorObject obj = null;\n+        try {\n+            Uid uid = new Uid(connObjectKey);\n+\n+            obj = profile.getConnector().getObject(objectClass,\n+                    uid,\n+                    MappingUtils.buildOperationOptions(IteratorUtils.<MappingItem>emptyIterator()));\n+        } catch (TimeoutException toe) {\n+            LOG.debug(\"Request timeout\", toe);\n+            throw toe;\n+        } catch (RuntimeException ignore) {\n+            LOG.debug(\"While resolving {}\", connObjectKey, ignore);\n+        }\n+\n+        return obj;\n+    }\n+\n+    private Realm update(final RealmTO realmTO) {\n+        Realm realm = realmDAO.findByFullPath(realmTO.getFullPath());\n+        PropagationByResource propByRes = binder.update(realm, realmTO);\n+        realm = realmDAO.save(realm);\n+\n+        List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n+        taskExecutor.execute(tasks, propagationReporter, false);\n+\n+        return realm;\n+    }\n+\n+    private void deprovision(final Realm realm) {\n+        List<String> noPropResources = new ArrayList<>(realm.getResourceKeys());\n+        noPropResources.remove(profile.getTask().getResource().getKey());\n+\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.addAll(ResourceOperation.DELETE, realm.getResourceKeys());\n+\n+        taskExecutor.execute(propagationManager.createTasks(realm, propByRes, noPropResources));\n+    }\n+\n+    private void provision(final Realm realm) {\n+        List<String> noPropResources = new ArrayList<>(realm.getResourceKeys());\n+        noPropResources.remove(profile.getTask().getResource().getKey());\n+\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n+\n+        taskExecutor.execute(propagationManager.createTasks(realm, propByRes, noPropResources));\n+    }\n+\n+    private void link(final Realm realm, final Boolean unlink) {\n+        RealmTO realmTO = binder.getRealmTO(realm);\n+        if (unlink) {\n+            realmTO.getResources().remove(profile.getTask().getResource().getKey());\n+        } else {\n+            realmTO.getResources().add(profile.getTask().getResource().getKey());\n+        }\n+\n+        update(realmTO);\n+    }\n+\n+    private void unassign(final Realm realm) {\n+        RealmTO realmTO = binder.getRealmTO(realm);\n+        realmTO.getResources().remove(profile.getTask().getResource().getKey());\n+\n+        deprovision(update(realmTO));\n+    }\n+\n+    private void assign(final Realm realm) {\n+        RealmTO realmTO = binder.getRealmTO(realm);\n+        realmTO.getResources().add(profile.getTask().getResource().getKey());\n+\n+        provision(update(realmTO));\n+    }\n+\n+    private void doHandle(final Realm realm) throws JobExecutionException {\n+        ProvisioningReport result = new ProvisioningReport();\n+        profile.getResults().add(result);\n+\n+        result.setKey(realm.getKey());\n+        result.setAnyType(REALM_TYPE);\n+        result.setName(realm.getFullPath());\n+\n+        LOG.debug(\"Propagating Realm with key {} towards {}\", realm.getKey(), profile.getTask().getResource());\n+\n+        Object output = null;\n+        Result resultStatus = null;\n+        String operation = null;\n+\n+        // Try to read remote object BEFORE any actual operation\n+        ConnectorObject beforeObj = getRemoteObject(\n+                realm.getName(), profile.getTask().getResource().getOrgUnit().getObjectClass());\n+\n+        if (profile.isDryRun()) {\n+            if (beforeObj == null) {\n+                result.setOperation(getResourceOperation(profile.getTask().getUnmatchingRule()));\n+            } else {\n+                result.setOperation(getResourceOperation(profile.getTask().getMatchingRule()));\n+            }\n+            result.setStatus(ProvisioningReport.Status.SUCCESS);\n+        } else {\n+            try {\n+                if (beforeObj == null) {\n+                    operation = UnmatchingRule.toEventName(profile.getTask().getUnmatchingRule());\n+                    result.setOperation(getResourceOperation(profile.getTask().getUnmatchingRule()));\n+\n+                    switch (profile.getTask().getUnmatchingRule()) {\n+                        case ASSIGN:\n+                            for (PushActions action : profile.getActions()) {\n+                                action.beforeAssign(this.getProfile(), realm);\n+                            }\n+\n+                            if (!profile.getTask().isPerformCreate()) {\n+                                LOG.debug(\"PushTask not configured for create\");\n+                            } else {\n+                                assign(realm);\n+                            }\n+\n+                            break;\n+\n+                        case PROVISION:\n+                            for (PushActions action : profile.getActions()) {\n+                                action.beforeProvision(this.getProfile(), realm);\n+                            }\n+\n+                            if (!profile.getTask().isPerformCreate()) {\n+                                LOG.debug(\"PushTask not configured for create\");\n+                            } else {\n+                                provision(realm);\n+                            }\n+\n+                            break;\n+\n+                        case UNLINK:\n+                            for (PushActions action : profile.getActions()) {\n+                                action.beforeUnlink(this.getProfile(), realm);\n+                            }\n+\n+                            if (!profile.getTask().isPerformUpdate()) {\n+                                LOG.debug(\"PushTask not configured for update\");\n+                            } else {\n+                                link(realm, true);\n+                            }\n+\n+                            break;\n+\n+                        case IGNORE:\n+                            LOG.debug(\"Ignored any: {}\", realm);\n+                            break;\n+                        default:\n+                        // do nothing\n+                    }\n+                } else {\n+                    operation = MatchingRule.toEventName(profile.getTask().getMatchingRule());\n+                    result.setOperation(getResourceOperation(profile.getTask().getMatchingRule()));\n+\n+                    switch (profile.getTask().getMatchingRule()) {\n+                        case UPDATE:\n+                            for (PushActions action : profile.getActions()) {\n+                                action.beforeUpdate(this.getProfile(), realm);\n+                            }\n+                            if (!profile.getTask().isPerformUpdate()) {\n+                                LOG.debug(\"PushTask not configured for update\");\n+                            } else {\n+                                update(binder.getRealmTO(realm));\n+                            }\n+\n+                            break;\n+\n+                        case DEPROVISION:\n+                            for (PushActions action : profile.getActions()) {\n+                                action.beforeDeprovision(this.getProfile(), realm);\n+                            }\n+\n+                            if (!profile.getTask().isPerformDelete()) {\n+                                LOG.debug(\"PushTask not configured for delete\");\n+                            } else {\n+                                deprovision(realm);\n+                            }\n+\n+                            break;\n+\n+                        case UNASSIGN:\n+                            for (PushActions action : profile.getActions()) {\n+                                action.beforeUnassign(this.getProfile(), realm);\n+                            }\n+\n+                            if (!profile.getTask().isPerformDelete()) {\n+                                LOG.debug(\"PushTask not configured for delete\");\n+                            } else {\n+                                unassign(realm);\n+                            }\n+\n+                            break;\n+\n+                        case LINK:\n+                            for (PushActions action : profile.getActions()) {\n+                                action.beforeLink(this.getProfile(), realm);\n+                            }\n+\n+                            if (!profile.getTask().isPerformUpdate()) {\n+                                LOG.debug(\"PushTask not configured for update\");\n+                            } else {\n+                                link(realm, false);\n+                            }\n+\n+                            break;\n+\n+                        case UNLINK:\n+                            for (PushActions action : profile.getActions()) {\n+                                action.beforeUnlink(this.getProfile(), realm);\n+                            }\n+\n+                            if (!profile.getTask().isPerformUpdate()) {\n+                                LOG.debug(\"PushTask not configured for update\");\n+                            } else {\n+                                link(realm, true);\n+                            }\n+\n+                            break;\n+\n+                        case IGNORE:\n+                            LOG.debug(\"Ignored any: {}\", realm);\n+                            break;\n+                        default:\n+                        // do nothing\n+                    }\n+                }\n+\n+                for (PushActions action : profile.getActions()) {\n+                    action.after(this.getProfile(), realm, result);\n+                }\n+\n+                result.setStatus(ProvisioningReport.Status.SUCCESS);\n+                resultStatus = AuditElements.Result.SUCCESS;\n+                output = getRemoteObject(\n+                        realm.getName(), profile.getTask().getResource().getOrgUnit().getObjectClass());\n+            } catch (IgnoreProvisionException e) {\n+                throw e;\n+            } catch (Exception e) {\n+                result.setStatus(ProvisioningReport.Status.FAILURE);\n+                result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n+                resultStatus = AuditElements.Result.FAILURE;\n+                output = e;\n+\n+                LOG.warn(\"Error pushing {} towards {}\", realm, profile.getTask().getResource(), e);\n+\n+                for (PushActions action : profile.getActions()) {\n+                    action.onError(this.getProfile(), realm, result, e);\n+                }\n+\n+                throw new JobExecutionException(e);\n+            } finally {\n+                notificationManager.createTasks(AuditElements.EventCategoryType.PUSH,\n+                        REALM_TYPE.toLowerCase(),\n+                        profile.getTask().getResource().getKey(),\n+                        operation,\n+                        resultStatus,\n+                        beforeObj,\n+                        output,\n+                        realm);\n+                auditManager.audit(AuditElements.EventCategoryType.PUSH,\n+                        REALM_TYPE.toLowerCase(),\n+                        profile.getTask().getResource().getKey(),\n+                        operation,\n+                        resultStatus,\n+                        beforeObj,\n+                        output,\n+                        realm);\n+            }\n+        }\n+    }\n+\n+    private ResourceOperation getResourceOperation(final UnmatchingRule rule) {\n+        switch (rule) {\n+            case ASSIGN:\n+            case PROVISION:\n+                return ResourceOperation.CREATE;\n+            default:\n+                return ResourceOperation.NONE;\n+        }\n+    }\n+\n+    private ResourceOperation getResourceOperation(final MatchingRule rule) {\n+        switch (rule) {\n+            case UPDATE:\n+                return ResourceOperation.UPDATE;\n+            case DEPROVISION:\n+            case UNASSIGN:\n+                return ResourceOperation.DELETE;\n+            default:\n+                return ResourceOperation.NONE;\n+        }\n+    }\n+}"},{"sha":"dc6f0e6dd86d9a944e2dc14397a4055e38421d9a","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/AddETagFilter.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAddETagFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAddETagFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAddETagFilter.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -27,6 +27,7 @@\n import javax.ws.rs.ext.Provider;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.AbstractAnnotatedBean;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n \n /**\n@@ -43,7 +44,10 @@ public void filter(final ContainerRequestContext reqCtx, final ContainerResponse\n             if (resCtx.getEntity() instanceof AbstractAnnotatedBean) {\n                 annotated = (AbstractAnnotatedBean) resCtx.getEntity();\n             } else if (resCtx.getEntity() instanceof ProvisioningResult) {\n-                annotated = ((ProvisioningResult<?>) resCtx.getEntity()).getAny();\n+                EntityTO entity = ((ProvisioningResult<?>) resCtx.getEntity()).getEntity();\n+                if (entity instanceof AbstractAnnotatedBean) {\n+                    annotated = (AbstractAnnotatedBean) entity;\n+                }\n             }\n             if (annotated != null) {\n                 String etagValue = annotated.getETagValue();"},{"sha":"8548fbb1b2643951f02eca0073bed7a5a888c340","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -227,7 +227,7 @@ public Response deassociate(final DeassociationPatch patch) {\n         switch (patch.getAction()) {\n             case UNLINK:\n                 updated = new ProvisioningResult<>();\n-                updated.setAny(getAnyLogic().unlink(patch.getKey(), patch.getResources()));\n+                updated.setEntity(getAnyLogic().unlink(patch.getKey(), patch.getResources()));\n                 break;\n \n             case UNASSIGN:\n@@ -240,15 +240,15 @@ public Response deassociate(final DeassociationPatch patch) {\n \n             default:\n                 updated = new ProvisioningResult<>();\n-                updated.setAny(getAnyLogic().read(patch.getKey()));\n+                updated.setEntity(getAnyLogic().read(patch.getKey()));\n         }\n \n         BulkActionResult result = new BulkActionResult();\n \n         if (patch.getAction() == ResourceDeassociationAction.UNLINK) {\n             for (String resource : patch.getResources()) {\n                 result.getResults().put(resource,\n-                        updated.getAny().getResources().contains(resource)\n+                        updated.getEntity().getResources().contains(resource)\n                         ? BulkActionResult.Status.FAILURE\n                         : BulkActionResult.Status.SUCCESS);\n             }\n@@ -272,7 +272,7 @@ public Response associate(final AssociationPatch patch) {\n         switch (patch.getAction()) {\n             case LINK:\n                 updated = new ProvisioningResult<>();\n-                updated.setAny(getAnyLogic().link(\n+                updated.setEntity(getAnyLogic().link(\n                         patch.getKey(),\n                         patch.getResources()));\n                 break;\n@@ -297,15 +297,15 @@ public Response associate(final AssociationPatch patch) {\n \n             default:\n                 updated = new ProvisioningResult<>();\n-                updated.setAny(getAnyLogic().read(patch.getKey()));\n+                updated.setEntity(getAnyLogic().read(patch.getKey()));\n         }\n \n         BulkActionResult result = new BulkActionResult();\n \n         if (patch.getAction() == ResourceAssociationAction.LINK) {\n             for (String resource : patch.getResources()) {\n                 result.getResults().put(resource,\n-                        updated.getAny().getResources().contains(resource)\n+                        updated.getEntity().getResources().contains(resource)\n                         ? BulkActionResult.Status.SUCCESS\n                         : BulkActionResult.Status.FAILURE);\n             }\n@@ -335,7 +335,7 @@ public Response bulk(final BulkAction bulkAction) {\n                             userPatch.setMustChangePassword(new BooleanReplacePatchItem.Builder().value(true).build());\n \n                             result.getResults().put(\n-                                    ((UserLogic) logic).update(userPatch, false).getAny().getKey(),\n+                                    ((UserLogic) logic).update(userPatch, false).getEntity().getKey(),\n                                     BulkActionResult.Status.SUCCESS);\n                         } catch (Exception e) {\n                             LOG.error(\"Error performing delete for user {}\", key, e);\n@@ -351,7 +351,7 @@ public Response bulk(final BulkAction bulkAction) {\n                 for (String key : bulkAction.getTargets()) {\n                     try {\n                         result.getResults().put(\n-                                logic.delete(key, isNullPriorityAsync()).getAny().getKey(),\n+                                logic.delete(key, isNullPriorityAsync()).getEntity().getKey(),\n                                 BulkActionResult.Status.SUCCESS);\n                     } catch (Exception e) {\n                         LOG.error(\"Error performing delete for user {}\", key, e);\n@@ -369,7 +369,7 @@ public Response bulk(final BulkAction bulkAction) {\n                         try {\n                             result.getResults().put(\n                                     ((UserLogic) logic).\n-                                    status(statusPatch, isNullPriorityAsync()).getAny().getKey(),\n+                                    status(statusPatch, isNullPriorityAsync()).getEntity().getKey(),\n                                     BulkActionResult.Status.SUCCESS);\n                         } catch (Exception e) {\n                             LOG.error(\"Error performing suspend for user {}\", key, e);\n@@ -390,7 +390,7 @@ public Response bulk(final BulkAction bulkAction) {\n                         try {\n                             result.getResults().put(\n                                     ((UserLogic) logic).\n-                                    status(statusPatch, isNullPriorityAsync()).getAny().getKey(),\n+                                    status(statusPatch, isNullPriorityAsync()).getEntity().getKey(),\n                                     BulkActionResult.Status.SUCCESS);\n                         } catch (Exception e) {\n                             LOG.error(\"Error performing reactivate for user {}\", key, e);"},{"sha":"4ca01dc95f48692c1760812642c3fb09c0b4a42d","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java","status":"modified","additions":23,"deletions":17,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -73,21 +73,12 @@ protected boolean isNullPriorityAsync() {\n      * @return a {@code Preference} instance matching the passed {@code Prefer} header,\n      * or {@code Preference.NONE} if missing.\n      */\n-    protected Preference getPreference() {\n+    private Preference getPreference() {\n         return Preference.fromString(messageContext.getHttpHeaders().getHeaderString(RESTHeaders.PREFER));\n     }\n \n-    /**\n-     * Builds response to successful {@code create} request, taking into account any {@code Prefer} header.\n-     *\n-     * @param provisioningResult the entity just created\n-     * @return response to successful {@code create} request\n-     */\n-    protected Response createResponse(final ProvisioningResult<?> provisioningResult) {\n-        String entityId = String.valueOf(provisioningResult.getAny().getKey());\n-        Response.ResponseBuilder builder = Response.\n-                created(uriInfo.getAbsolutePathBuilder().path(entityId).build()).\n-                header(RESTHeaders.RESOURCE_KEY, entityId);\n+    protected Response.ResponseBuilder applyPreference(\n+            final ProvisioningResult<?> provisioningResult, final Response.ResponseBuilder builder) {\n \n         switch (getPreference()) {\n             case RETURN_NO_CONTENT:\n@@ -96,15 +87,30 @@ protected Response createResponse(final ProvisioningResult<?> provisioningResult\n             case RETURN_CONTENT:\n             case NONE:\n             default:\n-                builder = builder.entity(provisioningResult);\n+                builder.entity(provisioningResult);\n                 break;\n \n         }\n         if (getPreference() == Preference.RETURN_CONTENT || getPreference() == Preference.RETURN_NO_CONTENT) {\n-            builder = builder.header(RESTHeaders.PREFERENCE_APPLIED, getPreference().toString());\n+            builder.header(RESTHeaders.PREFERENCE_APPLIED, getPreference().toString());\n         }\n \n-        return builder.build();\n+        return builder;\n+    }\n+\n+    /**\n+     * Builds response to successful {@code create} request, taking into account any {@code Prefer} header.\n+     *\n+     * @param provisioningResult the entity just created\n+     * @return response to successful {@code create} request\n+     */\n+    protected Response createResponse(final ProvisioningResult<?> provisioningResult) {\n+        String entityId = provisioningResult.getEntity().getKey();\n+        Response.ResponseBuilder builder = Response.\n+                created(uriInfo.getAbsolutePathBuilder().path(entityId).build()).\n+                header(RESTHeaders.RESOURCE_KEY, entityId);\n+\n+        return applyPreference(provisioningResult, builder).build();\n     }\n \n     /**\n@@ -127,7 +133,7 @@ protected Response modificationResponse(final Object entity) {\n                 break;\n         }\n         if (getPreference() == Preference.RETURN_CONTENT || getPreference() == Preference.RETURN_NO_CONTENT) {\n-            builder = builder.header(RESTHeaders.PREFERENCE_APPLIED, getPreference().toString());\n+            builder.header(RESTHeaders.PREFERENCE_APPLIED, getPreference().toString());\n         }\n \n         return builder.build();\n@@ -206,7 +212,7 @@ protected <T extends AbstractBaseBean> PagedResult<T> buildPagedResult(\n         UriBuilder builder = uriInfo.getAbsolutePathBuilder();\n         MultivaluedMap<String, String> queryParams = uriInfo.getQueryParameters();\n         for (Map.Entry<String, List<String>> queryParam : queryParams.entrySet()) {\n-            builder = builder.queryParam(queryParam.getKey(), queryParam.getValue().toArray());\n+            builder.queryParam(queryParam.getKey(), queryParam.getValue().toArray());\n         }\n \n         if (result.getPage() > 1) {"},{"sha":"e9372787d8a976f8bd33c4ba4cf52e845ebdd596","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RealmServiceImpl.java","status":"modified","additions":15,"deletions":10,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -23,6 +23,7 @@\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.RealmService;\n@@ -48,22 +49,26 @@ public List<RealmTO> list(final String fullPath) {\n \n     @Override\n     public Response create(final String parentPath, final RealmTO realmTO) {\n-        RealmTO created = logic.create(StringUtils.prependIfMissing(parentPath, SyncopeConstants.ROOT_REALM), realmTO);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(created.getName()).build();\n-        return Response.created(location).\n-                header(RESTHeaders.RESOURCE_KEY, created.getFullPath()).\n-                build();\n+        ProvisioningResult<RealmTO> created =\n+                logic.create(StringUtils.prependIfMissing(parentPath, SyncopeConstants.ROOT_REALM), realmTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(created.getEntity().getName()).build();\n+        Response.ResponseBuilder builder = Response.created(location).\n+                header(RESTHeaders.RESOURCE_KEY, created.getEntity().getFullPath());\n+\n+        return applyPreference(created, builder).build();\n     }\n \n     @Override\n-    public void update(final RealmTO realmTO) {\n+    public Response update(final RealmTO realmTO) {\n         realmTO.setFullPath(StringUtils.prependIfMissing(realmTO.getFullPath(), SyncopeConstants.ROOT_REALM));\n-        logic.update(realmTO);\n+        ProvisioningResult<RealmTO> updated = logic.update(realmTO);\n+        return modificationResponse(updated);\n     }\n \n     @Override\n-    public void delete(final String fullPath) {\n-        logic.delete(StringUtils.prependIfMissing(fullPath, SyncopeConstants.ROOT_REALM));\n+    public Response delete(final String fullPath) {\n+        ProvisioningResult<RealmTO> deleted =\n+                logic.delete(StringUtils.prependIfMissing(fullPath, SyncopeConstants.ROOT_REALM));\n+        return modificationResponse(deleted);\n     }\n-\n }"},{"sha":"3c8466dc7107e4cc3a6a4a4e76706177e6c7dd55","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultAnyObjectWorkflowAdapter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -45,7 +45,7 @@ public WorkflowResult<String> create(final AnyObjectTO anyObjectTO) {\n         anyObject = anyObjectDAO.save(anyObject);\n \n         PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.set(ResourceOperation.CREATE, anyObject.getResourceNames());\n+        propByRes.set(ResourceOperation.CREATE, anyObject.getResourceKeys());\n \n         return new WorkflowResult<>(anyObject.getKey(), propByRes, \"create\");\n     }"},{"sha":"2a9e1c8948935fb3c5905b862ddc89137f04e91b","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultGroupWorkflowAdapter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -45,7 +45,7 @@ public WorkflowResult<String> create(final GroupTO groupTO) {\n         group = groupDAO.save(group);\n \n         PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.set(ResourceOperation.CREATE, group.getResourceNames());\n+        propByRes.set(ResourceOperation.CREATE, group.getResourceKeys());\n \n         return new WorkflowResult<>(group.getKey(), propByRes, \"create\");\n     }"},{"sha":"89a6f79653a1bd8be18807c5db38ff73372b577f","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupDeprovisionProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeprovisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeprovisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeprovisionProcessor.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -60,7 +60,7 @@ public void process(final Exchange exchange) {\n                 AnyTypeKind.GROUP,\n                 key,\n                 propByRes,\n-                CollectionUtils.removeAll(groupDAO.authFind(key).getResourceNames(), resources));\n+                CollectionUtils.removeAll(groupDAO.authFind(key).getResourceKeys(), resources));\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);"},{"sha":"438b46ee8e3d16551e60439f28d13cf297a5f777","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPullActions.java","status":"modified","additions":22,"deletions":17,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -23,6 +23,7 @@\n import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n@@ -39,34 +40,38 @@ public class TestPullActions extends DefaultPullActions {\n     private int counter = 0;\n \n     @Override\n-    public <A extends AnyTO> SyncDelta beforeProvision(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n+    public SyncDelta beforeProvision(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final EntityTO entity)\n             throws JobExecutionException {\n \n-        AttrTO attrTO = null;\n-        for (int i = 0; i < any.getPlainAttrs().size(); i++) {\n-            AttrTO plainAttr = IterableUtils.get(any.getPlainAttrs(), i);\n-            if (\"fullname\".equals(plainAttr.getSchema())) {\n-                attrTO = plainAttr;\n+        if (entity instanceof AnyTO) {\n+            AnyTO any = (AnyTO) entity;\n+\n+            AttrTO attrTO = null;\n+            for (int i = 0; i < any.getPlainAttrs().size(); i++) {\n+                AttrTO plainAttr = IterableUtils.get(any.getPlainAttrs(), i);\n+                if (\"fullname\".equals(plainAttr.getSchema())) {\n+                    attrTO = plainAttr;\n+                }\n             }\n+            if (attrTO == null) {\n+                attrTO = new AttrTO();\n+                attrTO.setSchema(\"fullname\");\n+                any.getPlainAttrs().add(attrTO);\n+            }\n+            attrTO.getValues().clear();\n+            attrTO.getValues().add(String.valueOf(counter++));\n         }\n-        if (attrTO == null) {\n-            attrTO = new AttrTO();\n-            attrTO.setSchema(\"fullname\");\n-            any.getPlainAttrs().add(attrTO);\n-        }\n-        attrTO.getValues().clear();\n-        attrTO.getValues().add(String.valueOf(counter++));\n \n         return delta;\n     }\n \n     @Override\n-    public <A extends AnyTO> SyncDelta beforeAssign(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n+    public SyncDelta beforeAssign(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final EntityTO entity)\n             throws JobExecutionException {\n \n-        if (any instanceof UserTO && \"test2\".equals(UserTO.class.cast(any).getUsername())) {\n+        if (entity instanceof UserTO && \"test2\".equals(UserTO.class.cast(entity).getUsername())) {\n             throw new IgnoreProvisionException();\n         }\n "},{"sha":"b5ca87dae9159e325d647adae89d519f4cc693ae","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -450,8 +450,4 @@ protected Object getLdapRemoteObject(final String bindDn, final String bindPwd,\n             }\n         }\n     }\n-\n-    protected Object getLdapRemoteObject(final String objectDn) {\n-        return getLdapRemoteObject(null, null, objectDn);\n-    }\n }"},{"sha":"e5a9b080019ae846c425fc11bfd9fb0873e1b3e8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AnyObjectITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -64,7 +64,7 @@ public static AnyObjectTO getSampleTO(final String location) {\n     public void create() {\n         AnyObjectTO anyObjectTO = getSampleTO(\"create\");\n \n-        anyObjectTO = createAnyObject(anyObjectTO).getAny();\n+        anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n         assertNotNull(anyObjectTO);\n \n         ConnObjectTO connObjectTO =\n@@ -94,7 +94,7 @@ public void createInvalidMembership() {\n         // 2. change anyObject's realm to /even/two, now it works\n         anyObjectTO.setRealm(\"/even/two\");\n \n-        anyObjectTO = createAnyObject(anyObjectTO).getAny();\n+        anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n         assertTrue(anyObjectTO.getMembershipMap().containsKey(\"034740a9-fa10-453b-af37-dc7897e98fb1\"));\n     }\n \n@@ -109,10 +109,10 @@ public void delete() {\n         AnyObjectTO anyObjectTO = getSampleTO(\"deletable\");\n         anyObjectTO.setRealm(\"/even\");\n \n-        anyObjectTO = createAnyObject(anyObjectTO).getAny();\n+        anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n         assertNotNull(anyObjectTO);\n \n-        AnyObjectTO deletedAnyObject = deleteAnyObject(anyObjectTO.getKey()).getAny();\n+        AnyObjectTO deletedAnyObject = deleteAnyObject(anyObjectTO.getKey()).getEntity();\n         assertNotNull(deletedAnyObject);\n \n         try {\n@@ -146,7 +146,7 @@ public void read() {\n     @Test\n     public void update() {\n         AnyObjectTO anyObjectTO = getSampleTO(\"update\");\n-        anyObjectTO = createAnyObject(anyObjectTO).getAny();\n+        anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n \n         assertEquals(1, anyObjectTO.getPlainAttrs().size());\n \n@@ -155,15 +155,15 @@ public void update() {\n         String newLocation = \"new\" + getUUIDString();\n         anyObjectPatch.getPlainAttrs().add(attrAddReplacePatch(\"location\", newLocation));\n \n-        anyObjectTO = updateAnyObject(anyObjectPatch).getAny();\n+        anyObjectTO = updateAnyObject(anyObjectPatch).getEntity();\n \n         assertEquals(newLocation, anyObjectTO.getPlainAttrMap().get(\"location\").getValues().get(0));\n     }\n \n     @Test\n     public void readAttrs() {\n         AnyObjectTO anyObjectTO = getSampleTO(\"readAttrs\");\n-        anyObjectTO = createAnyObject(anyObjectTO).getAny();\n+        anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n         assertNotNull(anyObjectTO);\n \n         Set<AttrTO> attrs = anyObjectService.read(anyObjectTO.getKey(), SchemaType.PLAIN);\n@@ -176,7 +176,7 @@ public void readAttrs() {\n     @Test\n     public void updateAttr() {\n         AnyObjectTO anyObjectTO = getSampleTO(\"updateAttr\");\n-        anyObjectTO = createAnyObject(anyObjectTO).getAny();\n+        anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n         assertNotNull(anyObjectTO);\n \n         AttrTO updated = attrTO(\"location\", \"newlocation\");\n@@ -189,7 +189,7 @@ public void updateAttr() {\n     @Test\n     public void deleteAttr() {\n         AnyObjectTO anyObjectTO = getSampleTO(\"deleteAttr\");\n-        anyObjectTO = createAnyObject(anyObjectTO).getAny();\n+        anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n         assertNotNull(anyObjectTO);\n         assertNotNull(anyObjectTO.getPlainAttrMap().get(\"location\"));\n \n@@ -210,7 +210,7 @@ public void issueSYNCOPE756() {\n                 AnyTypeKind.USER.name(), \"1417acbe-cbf6-4277-9372-e75e04f97000\").build());\n \n         try {\n-            createAnyObject(anyObjectTO).getAny();\n+            createAnyObject(anyObjectTO).getEntity();\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidAnyType, e.getType());"},{"sha":"df51838c81633d1ae96ed163b4aee08df709a7bc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -143,7 +143,7 @@ public void testUserSchemaAuthorization() {\n \n         // 2. create an user with the role created above (as admin)\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"auth@test.org\");\n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         // 3. read the schema created above (as admin) - success\n@@ -173,7 +173,7 @@ public void testUserRead() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"testuserread@test.org\");\n         userTO.getRoles().add(\"User manager\");\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         UserService userService2 = clientFactory.create(userTO.getUsername(), \"password123\").\n@@ -198,7 +198,7 @@ public void testUserSearch() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"testusersearch@test.org\");\n         userTO.getRoles().add(\"User reviewer\");\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         // 1. user assigned to role 1, with search entitlement on realms /odd and /even: won't find anything with \n@@ -252,7 +252,7 @@ public void delegatedUserCRUD() {\n             // 2. as admin, create delegated admin user, and assign the role just created\n             UserTO delegatedAdmin = UserITCase.getUniqueSampleTO(\"admin@syncope.apache.org\");\n             delegatedAdmin.getRoles().add(roleKey);\n-            delegatedAdmin = createUser(delegatedAdmin).getAny();\n+            delegatedAdmin = createUser(delegatedAdmin).getEntity();\n             delegatedAdminKey = delegatedAdmin.getKey();\n \n             // 3. instantiate a delegate user service client, for further operatins\n@@ -275,7 +275,7 @@ public void delegatedUserCRUD() {\n             assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n \n             user = response.readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-            }).getAny();\n+            }).getEntity();\n             assertEquals(\"surname\", user.getPlainAttrMap().get(\"surname\").getValues().get(0));\n \n             // 5. as delegated, update user attempting to move under realm / -> fail\n@@ -298,7 +298,7 @@ public void delegatedUserCRUD() {\n             assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n \n             user = response.readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-            }).getAny();\n+            }).getEntity();\n             assertEquals(\"surname2\", user.getPlainAttrMap().get(\"surname\").getValues().get(0));\n \n             // 7. as delegated, delete user\n@@ -325,7 +325,7 @@ public void checkFailedLogins() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"checkFailedLogin@syncope.apache.org\");\n         userTO.getRoles().add(\"User manager\");\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n         String userKey = userTO.getKey();\n \n@@ -351,7 +351,7 @@ public void checkUserSuspension() {\n         userTO.setRealm(\"/odd\");\n         userTO.getRoles().add(\"User manager\");\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         String userKey = userTO.getKey();\n         assertNotNull(userTO);\n \n@@ -382,7 +382,7 @@ public void checkUserSuspension() {\n         reactivate.setKey(userTO.getKey());\n         reactivate.setType(StatusPatchType.REACTIVATE);\n         userTO = userService.status(reactivate).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-        }).getAny();\n+        }).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n \n@@ -456,7 +456,7 @@ public boolean evaluate(final String entitlement) {\n         patch.setKey(bellini.getKey());\n         patch.getRoles().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(role.getKey()).build());\n-        bellini = updateUser(patch).getAny();\n+        bellini = updateUser(patch).getEntity();\n         assertTrue(bellini.getRoles().contains(role.getKey()));\n \n         // 5. now the instance of the type above can be created successfully\n@@ -473,7 +473,7 @@ public void issueSYNCOPE434() {\n         userTO.getMemberships().add(\n                 new MembershipTO.Builder().group(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\").build());\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"createApproval\", userTO.getStatus());\n \n@@ -511,7 +511,7 @@ public void issueSYNCOPE164() throws Exception {\n         user.setRealm(\"/even/two\");\n         user.setPassword(\"password123\");\n         user.getResources().add(RESOURCE_NAME_TESTDB);\n-        user = createUser(user).getAny();\n+        user = createUser(user).getEntity();\n         assertNotNull(user);\n \n         // 2. unlink the resource from the created user\n@@ -525,7 +525,7 @@ public void issueSYNCOPE164() throws Exception {\n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(user.getKey());\n         userPatch.setPassword(new PasswordPatch.Builder().value(\"password234\").build());\n-        user = updateUser(userPatch).getAny();\n+        user = updateUser(userPatch).getEntity();\n         assertNotNull(user);\n \n         // 4. check that the db resource has still the initial password value"},{"sha":"764fe2c607f3792d65e6c125fb5b6709a0cb9bce","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/CamelRouteITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -165,7 +165,7 @@ public void scriptingUpdate() {\n             userTO.getPlainAttrs().add(attrTO(\"surname\", userId));\n             userTO.getPlainAttrs().add(attrTO(\"camelAttribute\", \"false\"));\n \n-            userTO = createUser(userTO).getAny();\n+            userTO = createUser(userTO).getEntity();\n             assertNotNull(userTO);\n             assertEquals(\"true\", userTO.getPlainAttrMap().get(\"camelAttribute\").getValues().get(0));\n         } finally {"},{"sha":"bf2efbbb3ab43736b551a3677fdf51bd6ce24e33","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -117,7 +117,7 @@ public void create() {\n         groupTO.getVirAttrs().add(attrTO(\"rvirtualdata\", \"rvirtualvalue\"));\n         groupTO.setGroupOwner(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\");\n \n-        groupTO = createGroup(groupTO).getAny();\n+        groupTO = createGroup(groupTO).getEntity();\n         assertNotNull(groupTO);\n \n         assertNotNull(groupTO.getVirAttrMap());\n@@ -137,7 +137,7 @@ public void create() {\n         groupPatch.setKey(groupTO.getKey());\n         groupPatch.setGroupOwner(new StringReplacePatchItem());\n \n-        assertNull(updateGroup(groupPatch).getAny().getGroupOwner());\n+        assertNull(updateGroup(groupPatch).getEntity().getGroupOwner());\n     }\n \n     @Test\n@@ -154,10 +154,10 @@ public void delete() {\n \n         groupTO.getResources().add(RESOURCE_NAME_LDAP);\n \n-        groupTO = createGroup(groupTO).getAny();\n+        groupTO = createGroup(groupTO).getEntity();\n         assertNotNull(groupTO);\n \n-        GroupTO deletedGroup = deleteGroup(groupTO.getKey()).getAny();\n+        GroupTO deletedGroup = deleteGroup(groupTO.getKey()).getEntity();\n         assertNotNull(deletedGroup);\n \n         try {\n@@ -218,7 +218,7 @@ public boolean evaluate(final GroupTO group) {\n     @Test\n     public void update() {\n         GroupTO groupTO = getSampleTO(\"latestGroup\" + getUUIDString());\n-        groupTO = createGroup(groupTO).getAny();\n+        groupTO = createGroup(groupTO).getEntity();\n \n         assertEquals(1, groupTO.getPlainAttrs().size());\n \n@@ -228,15 +228,15 @@ public void update() {\n         groupPatch.setName(new StringReplacePatchItem.Builder().value(modName).build());\n         groupPatch.getPlainAttrs().add(attrAddReplacePatch(\"show\", \"FALSE\"));\n \n-        groupTO = updateGroup(groupPatch).getAny();\n+        groupTO = updateGroup(groupPatch).getEntity();\n \n         assertEquals(modName, groupTO.getName());\n         assertEquals(2, groupTO.getPlainAttrs().size());\n \n         groupTO.getPlainAttrMap().get(\"show\").getValues().clear();\n \n         groupTO = groupService.update(groupTO).readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n-        }).getAny();\n+        }).getEntity();\n \n         assertFalse(groupTO.getPlainAttrMap().containsKey(\"show\"));\n     }\n@@ -249,7 +249,7 @@ public void patch() {\n                 \"PRINTER\",\n                 \"(($groups==7;cool==ss);$resources==ws-target-resource-2);$type==PRINTER\");\n \n-        GroupTO updated = createGroup(original).getAny();\n+        GroupTO updated = createGroup(original).getEntity();\n \n         updated.getPlainAttrs().add(new AttrTO.Builder().schema(\"icon\").build());\n         updated.getPlainAttrs().add(new AttrTO.Builder().schema(\"show\").build());\n@@ -260,7 +260,7 @@ public void patch() {\n         original = groupService.read(updated.getKey());\n \n         GroupPatch patch = AnyOperations.diff(updated, original, true);\n-        GroupTO group = updateGroup(patch).getAny();\n+        GroupTO group = updateGroup(patch).getEntity();\n \n         Map<String, AttrTO> attrs = group.getPlainAttrMap();\n         assertFalse(attrs.containsKey(\"icon\"));\n@@ -302,7 +302,7 @@ public void updateAsGroupOwner() {\n         GroupService groupService3 = clientFactory.create(\"puccini\", ADMIN_PWD).getService(GroupService.class);\n \n         groupTO = groupService3.update(groupPatch).readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n-        }).getAny();\n+        }).getEntity();\n         assertEquals(\"Director\", groupTO.getName());\n \n         // issue SYNCOPE-15\n@@ -315,7 +315,7 @@ public void updateAsGroupOwner() {\n \n     @Test\n     public void unlink() {\n-        GroupTO actual = createGroup(getSampleTO(\"unlink\")).getAny();\n+        GroupTO actual = createGroup(getSampleTO(\"unlink\")).getEntity();\n         assertNotNull(actual);\n \n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey()));\n@@ -339,7 +339,7 @@ public void link() {\n         GroupTO groupTO = getSampleTO(\"link\");\n         groupTO.getResources().clear();\n \n-        GroupTO actual = createGroup(groupTO).getAny();\n+        GroupTO actual = createGroup(groupTO).getEntity();\n         assertNotNull(actual);\n \n         try {\n@@ -372,7 +372,7 @@ public void unassign() {\n         GroupTO groupTO = null;\n \n         try {\n-            groupTO = createGroup(getSampleTO(\"unassign\")).getAny();\n+            groupTO = createGroup(getSampleTO(\"unassign\")).getEntity();\n             assertNotNull(groupTO);\n \n             assertNotNull(resourceService.readConnObject(\n@@ -408,7 +408,7 @@ public void assign() {\n         groupTO.getResources().clear();\n \n         try {\n-            groupTO = createGroup(groupTO).getAny();\n+            groupTO = createGroup(groupTO).getEntity();\n             assertNotNull(groupTO);\n \n             try {\n@@ -441,7 +441,7 @@ public void deprovision() {\n         GroupTO groupTO = null;\n \n         try {\n-            groupTO = createGroup(getSampleTO(\"deprovision\")).getAny();\n+            groupTO = createGroup(getSampleTO(\"deprovision\")).getEntity();\n             assertNotNull(groupTO);\n             assertNotNull(groupTO.getKey());\n \n@@ -477,7 +477,7 @@ public void provision() {\n         groupTO.getResources().clear();\n \n         try {\n-            groupTO = createGroup(groupTO).getAny();\n+            groupTO = createGroup(groupTO).getEntity();\n             assertNotNull(groupTO);\n \n             try {\n@@ -512,7 +512,7 @@ public void deprovisionUnlinked() {\n         groupTO.getResources().clear();\n \n         try {\n-            groupTO = createGroup(groupTO).getAny();\n+            groupTO = createGroup(groupTO).getEntity();\n             assertNotNull(groupTO);\n \n             try {\n@@ -570,7 +570,7 @@ public void createWithMandatorySchema() {\n         // 2. create a group *without* an attribute for that schema: it works\n         GroupTO groupTO = getSampleTO(\"lastGroup\");\n         assertFalse(groupTO.getPlainAttrMap().containsKey(badge.getKey()));\n-        groupTO = createGroup(groupTO).getAny();\n+        groupTO = createGroup(groupTO).getEntity();\n         assertNotNull(groupTO);\n         assertFalse(groupTO.getPlainAttrMap().containsKey(badge.getKey()));\n \n@@ -598,7 +598,7 @@ public void createWithMandatorySchema() {\n             // 5. also add an actual attribute for badge - it will work        \n             groupPatch.getPlainAttrs().add(attrAddReplacePatch(badge.getKey(), \"xxxxxxxxxx\"));\n \n-            groupTO = updateGroup(groupPatch).getAny();\n+            groupTO = updateGroup(groupPatch).getEntity();\n             assertNotNull(groupTO);\n             assertTrue(groupTO.getPlainAttrMap().containsKey(badge.getKey()));\n         } finally {\n@@ -631,7 +631,7 @@ public void uDynMembership() {\n \n         GroupTO group = getBasicSampleTO(\"uDynMembership\");\n         group.setUDynMembershipCond(\"cool==true\");\n-        group = createGroup(group).getAny();\n+        group = createGroup(group).getEntity();\n         assertNotNull(group);\n \n         assertTrue(userService.read(\n@@ -652,7 +652,7 @@ public void aDynMembership() {\n         // 1. create group with a given aDynMembership condition\n         GroupTO group = getBasicSampleTO(\"aDynMembership\");\n         group.getADynMembershipConds().put(\"PRINTER\", fiql);\n-        group = createGroup(group).getAny();\n+        group = createGroup(group).getEntity();\n         assertEquals(fiql, group.getADynMembershipConds().get(\"PRINTER\"));\n \n         group = groupService.read(group.getKey());\n@@ -661,7 +661,7 @@ public void aDynMembership() {\n         // verify that the condition is dynamically applied\n         AnyObjectTO newAny = AnyObjectITCase.getSampleTO(\"aDynMembership\");\n         newAny.getResources().clear();\n-        newAny = createAnyObject(newAny).getAny();\n+        newAny = createAnyObject(newAny).getEntity();\n         assertNotNull(newAny.getPlainAttrMap().get(\"location\"));\n         assertTrue(anyObjectService.read(\n                 \"fc6dbc3a-6c07-4965-8781-921e7401a4a5\").getDynGroups().contains(group.getKey()));\n@@ -676,7 +676,7 @@ public void aDynMembership() {\n         patch.setKey(group.getKey());\n         patch.getADynMembershipConds().put(\"PRINTER\", fiql);\n \n-        group = updateGroup(patch).getAny();\n+        group = updateGroup(patch).getEntity();\n         assertEquals(fiql, group.getADynMembershipConds().get(\"PRINTER\"));\n \n         group = groupService.read(group.getKey());\n@@ -689,7 +689,7 @@ public void aDynMembership() {\n                 operation(PatchOperation.DELETE).\n                 attrTO(new AttrTO.Builder().schema(\"location\").build()).\n                 build());\n-        newAny = updateAnyObject(anyPatch).getAny();\n+        newAny = updateAnyObject(anyPatch).getEntity();\n         assertNull(newAny.getPlainAttrMap().get(\"location\"));\n         assertFalse(anyObjectService.read(\n                 \"fc6dbc3a-6c07-4965-8781-921e7401a4a5\").getDynGroups().contains(group.getKey()));\n@@ -723,7 +723,7 @@ public void capabilitiesOverride() {\n             assertEquals(1, result.getPropagationStatuses().size());\n             assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n             assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-            group = result.getAny();\n+            group = result.getEntity();\n \n             // 2. update succeeds\n             GroupPatch patch = new GroupPatch();\n@@ -736,7 +736,7 @@ public void capabilitiesOverride() {\n             assertEquals(1, result.getPropagationStatuses().size());\n             assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n             assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-            group = result.getAny();\n+            group = result.getEntity();\n \n             // 3. set capability override with only search allowed, but not enable\n             ldap.getCapabilitiesOverride().add(ConnectorCapability.SEARCH);\n@@ -758,7 +758,7 @@ public void capabilitiesOverride() {\n             assertEquals(1, result.getPropagationStatuses().size());\n             assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n             assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-            group = result.getAny();\n+            group = result.getEntity();\n \n             // 5. enable capability override\n             ldap.setOverrideCapabilities(true);\n@@ -796,7 +796,7 @@ public void typeExtensions() {\n         GroupTO groupTO = getBasicSampleTO(\"typeExtensions\");\n         groupTO.getTypeExtensions().add(typeExtension);\n \n-        groupTO = createGroup(groupTO).getAny();\n+        groupTO = createGroup(groupTO).getEntity();\n         assertNotNull(groupTO);\n         assertEquals(1, groupTO.getTypeExtensions().size());\n         assertEquals(1, groupTO.getTypeExtension(AnyTypeKind.USER.name()).getAuxClasses().size());\n@@ -811,7 +811,7 @@ public void typeExtensions() {\n         groupPatch.setKey(groupTO.getKey());\n         groupPatch.getTypeExtensions().add(typeExtension);\n \n-        groupTO = updateGroup(groupPatch).getAny();\n+        groupTO = updateGroup(groupPatch).getEntity();\n         assertNotNull(groupTO);\n         assertEquals(1, groupTO.getTypeExtensions().size());\n         assertEquals(2, groupTO.getTypeExtension(AnyTypeKind.USER.name()).getAuxClasses().size());\n@@ -823,19 +823,19 @@ public void typeExtensions() {\n     public void bulkMembersAction() throws InterruptedException {\n         // 1. create group without resources\n         GroupTO groupTO = getBasicSampleTO(\"forProvision\");\n-        groupTO = createGroup(groupTO).getAny();\n+        groupTO = createGroup(groupTO).getEntity();\n \n         // 2. create user with such group assigned\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"forProvision@syncope.apache.org\");\n         userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n \n         // 3. modify the group by assiging the LDAP resource\n         GroupPatch groupPatch = new GroupPatch();\n         groupPatch.setKey(groupTO.getKey());\n         groupPatch.getResources().add(new StringPatchItem.Builder().value(RESOURCE_NAME_LDAP).build());\n         ProvisioningResult<GroupTO> groupUpdateResult = updateGroup(groupPatch);\n-        groupTO = groupUpdateResult.getAny();\n+        groupTO = groupUpdateResult.getEntity();\n \n         PropagationStatus propStatus = groupUpdateResult.getPropagationStatuses().get(0);\n         assertEquals(RESOURCE_NAME_LDAP, propStatus.getResource());\n@@ -889,7 +889,7 @@ public void issue178() {\n         groupTO.setName(groupName);\n         groupTO.setRealm(\"/\");\n \n-        GroupTO actual = createGroup(groupTO).getAny();\n+        GroupTO actual = createGroup(groupTO).getEntity();\n \n         assertNotNull(actual);\n         assertEquals(groupName, actual.getName());\n@@ -899,7 +899,7 @@ public void issue178() {\n         String renamedGroup = \"renamed\" + getUUIDString();\n         groupPatch.setName(new StringReplacePatchItem.Builder().value(renamedGroup).build());\n \n-        actual = updateGroup(groupPatch).getAny();\n+        actual = updateGroup(groupPatch).getEntity();\n         assertNotNull(actual);\n         assertEquals(renamedGroup, actual.getName());\n     }\n@@ -920,7 +920,7 @@ public void issueSYNCOPE632() {\n             groupTO.getDerAttrs().add(attrTO(\"displayProperty\", null));\n             groupTO.getResources().clear();\n \n-            groupTO = createGroup(groupTO).getAny();\n+            groupTO = createGroup(groupTO).getEntity();\n             assertNotNull(groupTO);\n \n             // 1. create new LDAP resource having ConnObjectKey mapped to a derived attribute\n@@ -956,15 +956,15 @@ public void issueSYNCOPE632() {\n                     operation(PatchOperation.ADD_REPLACE).\n                     value(\"new-ldap\").build());\n \n-            groupTO = updateGroup(patch).getAny();\n+            groupTO = updateGroup(patch).getEntity();\n             assertNotNull(groupTO);\n \n             // 3. update the group\n             GroupPatch groupPatch = new GroupPatch();\n             groupPatch.setKey(groupTO.getKey());\n             groupPatch.getPlainAttrs().add(attrAddReplacePatch(\"icon\", \"anotherIcon\"));\n \n-            groupTO = updateGroup(groupPatch).getAny();\n+            groupTO = updateGroup(groupPatch).getEntity();\n             assertNotNull(groupTO);\n \n             // 4. check that a single group exists in LDAP for the group created and updated above\n@@ -1027,7 +1027,7 @@ public void issueSYNCOPE717() {\n         GroupTO groupTO = getBasicSampleTO(\"syncope717\");\n         groupTO.getPlainAttrs().add(attrTO(doubleSchemaName, \"11.23\"));\n \n-        groupTO = createGroup(groupTO).getAny();\n+        groupTO = createGroup(groupTO).getEntity();\n         assertNotNull(groupTO);\n         assertEquals(\"11.23\", groupTO.getPlainAttrMap().get(doubleSchemaName).getValues().get(0));\n \n@@ -1045,7 +1045,7 @@ public void issueSYNCOPE717() {\n         patch.setKey(groupTO.getKey());\n         patch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(doubleSchemaName, \"11.257\")).build());\n \n-        groupTO = updateGroup(patch).getAny();\n+        groupTO = updateGroup(patch).getEntity();\n         assertNotNull(groupTO);\n         assertEquals(\"11.257\", groupTO.getPlainAttrMap().get(doubleSchemaName).getValues().get(0));\n \n@@ -1058,7 +1058,7 @@ public void issueSYNCOPE717() {\n         patch.setKey(groupTO.getKey());\n         patch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(doubleSchemaName, \"11.23\")).build());\n \n-        groupTO = updateGroup(patch).getAny();\n+        groupTO = updateGroup(patch).getEntity();\n         assertNotNull(groupTO);\n         assertEquals(\"11.23\", groupTO.getPlainAttrMap().get(doubleSchemaName).getValues().get(0));\n     }"},{"sha":"6a5f0d6e951caac5749449b9e1ac051579d4de20","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MembershipITCase.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.apache.syncope.fit.core.AbstractTaskITCase.execProvisioningTask;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n@@ -98,7 +97,7 @@ public boolean evaluate(final AttrTO object) {\n             }\n         });\n         try {\n-            user = createUser(user).getAny();\n+            user = createUser(user).getEntity();\n \n             // 1. verify that 'aLong' is correctly populated for user\n             assertEquals(1, user.getPlainAttrMap().get(\"aLong\").getValues().size());\n@@ -129,7 +128,7 @@ public boolean evaluate(final AttrTO object) {\n                     attrTO(new AttrTO.Builder().schema(\"ctype\").value(\"membership type\").build()).build());\n             userPatch.getMemberships().add(membershipPatch);\n \n-            user = updateUser(userPatch).getAny();\n+            user = updateUser(userPatch).getEntity();\n \n             // 4. verify that 'aLong' is correctly populated for user\n             assertEquals(1, user.getPlainAttrMap().get(\"aLong\").getValues().size());\n@@ -154,7 +153,7 @@ public boolean evaluate(final AttrTO object) {\n                     operation(PatchOperation.DELETE).build();\n             userPatch.getMemberships().add(membershipPatch);\n \n-            user = updateUser(userPatch).getAny();\n+            user = updateUser(userPatch).getEntity();\n \n             assertTrue(user.getMemberships().isEmpty());\n         } finally {\n@@ -174,7 +173,7 @@ public void deleteUserWithMembership() {\n         membership.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"1977\").build());\n         user.getMemberships().add(membership);\n \n-        user = createUser(user).getAny();\n+        user = createUser(user).getEntity();\n         assertNotNull(user.getKey());\n \n         userService.delete(user.getKey());\n@@ -190,7 +189,7 @@ public void onGroupDelete() {\n \n         GroupTO groupTO = GroupITCase.getBasicSampleTO(\"typeExt\");\n         groupTO.getTypeExtensions().add(typeExtension);\n-        groupTO = createGroup(groupTO).getAny();\n+        groupTO = createGroup(groupTO).getEntity();\n         assertNotNull(groupTO);\n \n         // pre: create user with membership to such group\n@@ -200,7 +199,7 @@ public void onGroupDelete() {\n         membership.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"1454\").build());\n         user.getMemberships().add(membership);\n \n-        user = createUser(user).getAny();\n+        user = createUser(user).getEntity();\n \n         // verify that 'aLong' is correctly populated for user's membership\n         assertEquals(1, user.getMemberships().size());\n@@ -266,7 +265,7 @@ public boolean evaluate(final MappingItemTO object) {\n             membership.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"5432\").build());\n             user.getMemberships().add(membership);\n \n-            user = createUser(user).getAny();\n+            user = createUser(user).getEntity();\n             assertNotNull(user);\n \n             // 2. verify that user was found on resource\n@@ -293,7 +292,7 @@ public boolean evaluate(final MappingItemTO object) {\n             newTask = getObject(response.getLocation(), TaskService.class, PullTaskTO.class);\n             assertNotNull(newTask);\n \n-            ExecTO execution = execProvisioningTask(taskService, newTask.getKey(), 50, false);\n+            ExecTO execution = AbstractTaskITCase.execProvisioningTask(taskService, newTask.getKey(), 50, false);\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n \n             // 5. verify that pulled user has"},{"sha":"510970c14507a37c8c62b289489c5e66f0c5a07a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MigrationITCase.java","status":"modified","additions":29,"deletions":11,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMigrationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMigrationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMigrationITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.aspectj.bridge.MessageUtil.fail;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.io.IOException;\n import java.io.InputStream;\n@@ -30,9 +30,11 @@\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n@@ -53,10 +55,12 @@\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.core.migration.MigrationPullActions;\n+import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.junit.BeforeClass;\n@@ -235,7 +239,7 @@ private String setupConnector() {\n         try {\n             connectorService.check(connInstanceTO);\n         } catch (Exception e) {\n-            fail(\"Unexpected exception\", e);\n+            fail(\"Unexpected exception:\\n\" + ExceptionUtils2.getFullStackTrace(e));\n         }\n \n         return connInstanceTO.getKey();\n@@ -384,10 +388,15 @@ private void setupResource(final String connectorKey, final String anyTypeClass)\n     }\n \n     private void setupRealm() {\n-        RealmTO realm = new RealmTO();\n-        realm.setName(MIGRATION_REALM);\n+        try {\n+            realmService.list(\"/\" + MIGRATION_REALM);\n+        } catch (SyncopeClientException e) {\n+            LOG.error(\"{} not found? Let's attempt to re-create...\", MIGRATION_REALM, e);\n \n-        realmService.create(\"/\", realm);\n+            RealmTO realm = new RealmTO();\n+            realm.setName(MIGRATION_REALM);\n+            realmService.create(\"/\", realm);\n+        }\n     }\n \n     private String setupPullTask() {\n@@ -416,11 +425,6 @@ private String setupPullTask() {\n     @Test\n     public void migrateFromSyncope12() throws InterruptedException {\n         // 1. cleanup\n-        try {\n-            realmService.delete(\"/\" + MIGRATION_REALM);\n-        } catch (Exception e) {\n-            // ignore\n-        }\n         try {\n             for (AbstractTaskTO task : taskService.list(\n                     new TaskQuery.Builder(TaskType.PULL).resource(RESOURCE_KEY).build()).getResult()) {\n@@ -455,6 +459,20 @@ public void migrateFromSyncope12() throws InterruptedException {\n             // ignore\n         }\n \n+        BulkAction bulkAction = new BulkAction();\n+        bulkAction.setType(BulkAction.Type.DELETE);\n+\n+        for (UserTO user : userService.search(new AnyQuery.Builder().fiql(\"username==*12\").build()).getResult()) {\n+            bulkAction.getTargets().add(user.getKey());\n+        }\n+        userService.bulk(bulkAction);\n+\n+        bulkAction.getTargets().clear();\n+        for (GroupTO group : groupService.search(new AnyQuery.Builder().fiql(\"name==*12\").build()).getResult()) {\n+            bulkAction.getTargets().add(group.getKey());\n+        }\n+        groupService.bulk(bulkAction);\n+\n         // 2. setup\n         setupResource(setupConnector(), setupAnyTypeClass());\n         setupRealm();\n@@ -463,7 +481,7 @@ public void migrateFromSyncope12() throws InterruptedException {\n         // 3. execute pull task\n         execProvisioningTask(taskService, pullTaskKey, 50, false);\n \n-        Thread.sleep(2000L);\n+        Thread.sleep(3000L);\n \n         // 4. verify\n         UserTO user = userService.read(\"rossini12\");"},{"sha":"d5209ac89fbadb64bb053a4d03e10597887939c6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -127,7 +127,7 @@ public void createUser() {\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n \n         user = response.readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-        }).getAny();\n+        }).getEntity();\n         assertNotNull(user);\n     }\n "},{"sha":"02a4c9bc01ed44d0434bd33596885359ab09721d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -340,7 +340,7 @@ public void issueSYNCOPE446() throws Exception {\n         GroupTO groupTO = new GroupTO();\n         groupTO.setName(groupName);\n         groupTO.setRealm(\"/even/two\");\n-        groupTO = createGroup(groupTO).getAny();\n+        groupTO = createGroup(groupTO).getEntity();\n         assertNotNull(groupTO);\n \n         // 3. verify\n@@ -411,7 +411,7 @@ private String createNotificationTask(\n         userTO.getMemberships().add(\n                 new MembershipTO.Builder().group(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").build());\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n         return userTO.getUsername();\n     }"},{"sha":"7dad413be7bc7b73e8c638f9691e87ef9c74b442","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PlainSchemaITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -233,7 +233,7 @@ public void issue258() {\n         userTO.getAuxClasses().add(typeClass.getKey());\n         userTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"1.2\"));\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         schemaTO.setType(AttrSchemaType.Long);\n@@ -261,15 +261,15 @@ public void issue259() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"issue259@syncope.apache.org\");\n         userTO.getAuxClasses().add(typeClass.getKey());\n         userTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"1\"));\n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         UserTO newUserTO = SerializationUtils.clone(userTO);\n         newUserTO.getMemberships().add(\n                 new MembershipTO.Builder().group(\"b1f7c12d-ec83-441f-a50e-1691daaedf3b\").build());\n \n         userTO = userService.update(newUserTO).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-        }).getAny();\n+        }).getEntity();\n         assertNotNull(userTO);\n     }\n \n@@ -289,7 +289,7 @@ public void issue260() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"issue260@syncope.apache.org\");\n         userTO.getAuxClasses().add(typeClass.getKey());\n         userTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"1.2\"));\n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         schemaTO.setUniqueConstraint(false);"},{"sha":"357119db0ac042d1cbdb6e6e525dcba2523fe44b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -91,7 +91,7 @@ public void bulkAction() {\n         // create user with testdb resource\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"taskBulk@apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n \n         List<PropagationTaskTO> tasks = new ArrayList<>(\n                 taskService.<PropagationTaskTO>list(new TaskQuery.Builder(TaskType.PROPAGATION).\n@@ -141,7 +141,7 @@ public boolean evaluate(final MappingItemTO object) {\n             String originalLocation = anyObjectTO.getPlainAttrMap().get(\"location\").getValues().get(0);\n             assertFalse(originalLocation.endsWith(suffix));\n \n-            anyObjectTO = createAnyObject(anyObjectTO).getAny();\n+            anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n             assertNotNull(anyObjectTO);\n \n             // 2. verify that JEXL MappingItemTransformer was applied during propagation"},{"sha":"60449f61c5d50196da92501b05b9e22c6b7ad5de","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -166,7 +166,7 @@ public void pull() throws Exception {\n         inUserTO.getAuxClasses().add(\"csv\");\n         inUserTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n-        inUserTO = createUser(inUserTO).getAny();\n+        inUserTO = createUser(inUserTO).getEntity();\n         assertNotNull(inUserTO);\n         assertFalse(inUserTO.getResources().contains(RESOURCE_NAME_CSV));\n \n@@ -413,7 +413,7 @@ public boolean evaluate(final MappingItemTO object) {\n             String originalLocation = anyObjectTO.getPlainAttrMap().get(\"location\").getValues().get(0);\n             assertFalse(originalLocation.startsWith(PrefixMappingItemTransformer.PREFIX));\n \n-            anyObjectTO = createAnyObject(anyObjectTO).getAny();\n+            anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n             assertNotNull(anyObjectTO);\n \n             // 2. verify that PrefixMappingItemTransformer was applied during propagation\n@@ -616,7 +616,7 @@ public void issueSYNCOPE68() {\n         userTO.getMemberships().add(\n                 new MembershipTO.Builder().group(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").build());\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"testuser2\", userTO.getUsername());\n         assertEquals(1, userTO.getMemberships().size());\n@@ -657,7 +657,7 @@ public void issueSYNCOPE68() {\n             assertEquals(2, userTO.getMemberships().size());\n             assertEquals(4, userTO.getResources().size());\n         } finally {\n-            UserTO dUserTO = deleteUser(userTO.getKey()).getAny();\n+            UserTO dUserTO = deleteUser(userTO.getKey()).getEntity();\n             assertNotNull(dUserTO);\n         }\n     }\n@@ -726,7 +726,7 @@ public void issueSYNCOPE258() {\n         userTO.getResources().clear();\n         userTO.getResources().add(RESOURCE_NAME_WS2);\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n \n         // change email in order to unmatch the second user\n         UserPatch userPatch = new UserPatch();\n@@ -754,7 +754,7 @@ public void issueSYNCOPE272() {\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n \n         ProvisioningResult<UserTO> result = createUser(userTO);\n-        userTO = result.getAny();\n+        userTO = result.getEntity();\n         try {\n             assertNotNull(userTO);\n             assertEquals(1, result.getPropagationStatuses().size());\n@@ -789,7 +789,7 @@ public void issueSYNCOPE307() {\n         userTO.getResources().clear();\n         userTO.getResources().add(RESOURCE_NAME_WS2);\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         userTO = userService.read(userTO.getKey());\n@@ -833,7 +833,7 @@ public void issueSYNCOPE313DB() throws Exception {\n         UserTO user = UserITCase.getUniqueSampleTO(\"syncope313-db@syncope.apache.org\");\n         user.setPassword(\"security123\");\n         user.getResources().add(RESOURCE_NAME_TESTDB);\n-        user = createUser(user).getAny();\n+        user = createUser(user).getEntity();\n         assertNotNull(user);\n         assertFalse(user.getResources().isEmpty());\n \n@@ -895,7 +895,7 @@ public void issueSYNCOPE313LDAP() throws Exception {\n             user = UserITCase.getUniqueSampleTO(\"syncope313-ldap@syncope.apache.org\");\n             user.setPassword(oldCleanPassword);\n             user.getResources().add(RESOURCE_NAME_LDAP);\n-            user = createUser(user).getAny();\n+            user = createUser(user).getEntity();\n             assertNotNull(user);\n             assertFalse(user.getResources().isEmpty());\n \n@@ -904,7 +904,7 @@ public void issueSYNCOPE313LDAP() throws Exception {\n             UserPatch userPatch = new UserPatch();\n             userPatch.setKey(user.getKey());\n             userPatch.setPassword(new PasswordPatch.Builder().value(newCleanPassword).build());\n-            user = updateUser(userPatch).getAny();\n+            user = updateUser(userPatch).getEntity();\n \n             // 3. Check that the Syncope user now has the changed password\n             Pair<Map<String, Set<String>>, UserTO> self ="},{"sha":"9896515592e664b7b2ccf6431f862baec067d5f4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -287,7 +287,7 @@ public void issueSYNCOPE598() {\n \n         groupTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"all\"));\n \n-        groupTO = createGroup(groupTO).getAny();\n+        groupTO = createGroup(groupTO).getEntity();\n         assertNotNull(groupTO);\n \n         String resourceName = \"resource-ldap-grouponly\";"},{"sha":"2af4718750941c23702988482dd86c14c9e4b84c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RESTITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -99,7 +99,7 @@ public void noContent() throws IOException {\n     public void ifMatch() {\n         UserTO userTO = userService.create(UserITCase.getUniqueSampleTO(\"ifmatch@syncope.apache.org\"), true).\n                 readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-                }).getAny();\n+                }).getEntity();\n         assertNotNull(userTO);\n         assertNotNull(userTO.getKey());\n \n@@ -111,7 +111,7 @@ public void ifMatch() {\n         userPatch.setKey(userTO.getKey());\n         userPatch.setUsername(new StringReplacePatchItem.Builder().value(userTO.getUsername() + \"XX\").build());\n         userTO = userService.update(userPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-        }).getAny();\n+        }).getEntity();\n         assertTrue(userTO.getUsername().endsWith(\"XX\"));\n         EntityTag etag1 = adminClient.getLatestEntityTag(userService);\n         assertFalse(etag.getValue().equals(etag1.getValue()));"},{"sha":"d4eb484ae35aea14599565ad4d960e63e482aa65","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -26,6 +26,7 @@\n import static org.junit.Assert.fail;\n \n import java.util.List;\n+import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n@@ -34,7 +35,12 @@\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.common.lib.to.OrgUnitTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.rest.api.service.RealmService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.FixMethodOrder;\n@@ -196,4 +202,67 @@ public void deleteNonEmpty() {\n             assertEquals(3, e.getElements().size());\n         }\n     }\n+\n+    @Test\n+    public void propagate() {\n+        ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n+        ConnInstanceTO ldapConn = null;\n+        try {\n+            // 0. setup the LDAP resource for organizations\n+            OrgUnitTO orgUnit = new OrgUnitTO();\n+            orgUnit.setConnObjectLink(\"'ou=' + name + ',o=isp'\");\n+            orgUnit.setExtAttrName(\"ou\");\n+            orgUnit.setObjectClass(\"organizationalUnit\");\n+\n+            ldap.setOrgUnit(orgUnit);\n+            resourceService.update(ldap);\n+\n+            ldap = resourceService.read(RESOURCE_NAME_LDAP);\n+            assertNotNull(ldap.getOrgUnit());\n+\n+            // 1. setup the LDAP connector\n+            ldapConn = connectorService.read(ldap.getConnector(), null);\n+            ldapConn.getConfMap().get(\"uidAttribute\").getValues().clear();\n+            ldapConn.getConfMap().get(\"baseContexts\").getValues().clear();\n+            ldapConn.getConfMap().get(\"baseContexts\").getValues().add(\"o=isp\");\n+            connectorService.update(ldapConn);\n+\n+            // 2. create realm and add the LDAP resource\n+            RealmTO realm = new RealmTO();\n+            realm.setName(\"test\");\n+            realm.getResources().add(RESOURCE_NAME_LDAP);\n+\n+            // 3. check propagation\n+            ProvisioningResult<RealmTO> result =\n+                    realmService.create(\"/\", realm).readEntity(new GenericType<ProvisioningResult<RealmTO>>() {\n+            });\n+            assertNotNull(result);\n+            assertEquals(1, result.getPropagationStatuses().size());\n+            assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n+            assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+\n+            realm = result.getEntity();\n+\n+            // 4. check on LDAP\n+            assertNotNull(getLdapRemoteObject(\"uid=admin,ou=system\", \"secret\", \"ou=test,o=isp\"));\n+\n+            // 5. remove realm\n+            realmService.delete(realm.getFullPath());\n+\n+            // 6. check on LDAP\n+            assertNull(getLdapRemoteObject(\"uid=admin,ou=system\", \"secret\", \"ou=test,o=isp\"));\n+        } finally {\n+            ldap.setOrgUnit(null);\n+            resourceService.update(ldap);\n+\n+            if (ldapConn != null) {\n+                ldapConn.getConfMap().get(\"uidAttribute\").getValues().add(\"cn\");\n+                ldapConn.getConfMap().get(\"baseContexts\").getValues().clear();\n+                ldapConn.getConfMap().get(\"baseContexts\").getValues().add(\"ou=people,o=isp\");\n+                ldapConn.getConfMap().get(\"baseContexts\").getValues().add(\"ou=groups,o=isp\");\n+\n+                connectorService.update(ldapConn);\n+            }\n+        }\n+    }\n }"},{"sha":"6ea7dcf980fe35df41e5edb61577d93e91279102","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ResourceITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -408,7 +408,7 @@ public void syncToken() {\n             assertNull(resource.getProvision(\"PRINTER\").getSyncToken());\n \n             // create some object on the new resource\n-            anyObject = createAnyObject(anyObject).getAny();\n+            anyObject = createAnyObject(anyObject).getEntity();\n \n             // update sync token\n             resourceService.setLatestSyncToken(resource.getKey(), \"PRINTER\");\n@@ -542,7 +542,7 @@ public void listConnObjects() {\n         for (int i = 0; i < 10; i++) {\n             GroupTO group = GroupITCase.getSampleTO(\"group\");\n             group.getResources().add(RESOURCE_NAME_LDAP);\n-            group = createGroup(group).getAny();\n+            group = createGroup(group).getEntity();\n             groupKeys.add(group.getKey());\n         }\n "},{"sha":"628a1ceb695d261ab2f8bc9962ec4102b5b5d97d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -120,7 +120,7 @@ public boolean evaluate(final UserTO user) {\n     public void searchByDynGroup() {\n         GroupTO group = GroupITCase.getBasicSampleTO(\"dynMembership\");\n         group.setUDynMembershipCond(\"cool==true\");\n-        group = createGroup(group).getAny();\n+        group = createGroup(group).getEntity();\n         assertNotNull(group);\n \n         PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM)."},{"sha":"af4b248424b3c45cd1a97a823306b8789fe62367","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":101,"deletions":101,"changes":202,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -146,7 +146,7 @@ public void createUserWithNoPropagation() {\n         userTO.setPassword(\"password123\");\n         userTO.getResources().add(RESOURCE_NAME_NOPROPAGATION);\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n \n         // get the propagation task just created\n         PagedResult<PropagationTaskTO> tasks = taskService.list(new TaskQuery.Builder(TaskType.PROPAGATION).\n@@ -173,7 +173,7 @@ public void issue186() {\n         userTO.getPlainAttrs().add(attrTO(\"fullname\", userId));\n         userTO.getPlainAttrs().add(attrTO(\"surname\", userId));\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n         assertTrue(userTO.getResources().isEmpty());\n \n@@ -185,7 +185,7 @@ public void issue186() {\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS2).build());\n \n         try {\n-            userTO = updateUser(userPatch).getAny();\n+            userTO = updateUser(userPatch).getEntity();\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n@@ -201,7 +201,7 @@ public void issue186() {\n \n         ProvisioningResult<UserTO> result = updateUser(userPatch);\n         assertNotNull(result.getPropagationStatuses().get(0).getFailureReason());\n-        userTO = result.getAny();\n+        userTO = result.getEntity();\n \n         // 4. update assigning a resource NOT forcing mandatory constraints\n         // BUT not priority: must succeed\n@@ -230,14 +230,14 @@ public void enforceMandatoryCondition() {\n         userTO.getPlainAttrs().remove(type);\n \n         try {\n-            userTO = createUser(userTO).getAny();\n+            userTO = createUser(userTO).getEntity();\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n         }\n \n         userTO.getPlainAttrs().add(type);\n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n     }\n \n@@ -258,7 +258,7 @@ public void enforceMandatoryConditionOnDerived() {\n             userTO.setPassword(\"newPassword12\");\n \n             try {\n-                userTO = createUser(userTO).getAny();\n+                userTO = createUser(userTO).getEntity();\n                 fail();\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n@@ -267,7 +267,7 @@ public void enforceMandatoryConditionOnDerived() {\n             userTO.getAuxClasses().add(\"csv\");\n             userTO.getDerAttrs().add(new AttrTO.Builder().schema(\"csvuserid\").build());\n \n-            userTO = createUser(userTO).getAny();\n+            userTO = createUser(userTO).getEntity();\n             assertNotNull(userTO);\n             assertEquals(Collections.singleton(resourceTO.getKey()), userTO.getResources());\n         } finally {\n@@ -359,7 +359,7 @@ public void create() {\n         userTO.getPlainAttrs().add(attrTO(\"activationDate\", null));\n \n         // 1. create user\n-        UserTO newUserTO = createUser(userTO).getAny();\n+        UserTO newUserTO = createUser(userTO).getEntity();\n \n         assertNotNull(newUserTO);\n \n@@ -470,13 +470,13 @@ public void delete() {\n         // specify a propagation\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n \n         String key = userTO.getKey();\n \n         ProvisioningResult<UserTO> result = deleteUser(key);\n         assertNotNull(result);\n-        userTO = result.getAny();\n+        userTO = result.getEntity();\n         assertEquals(key, userTO.getKey());\n         assertTrue(userTO.getPlainAttrs().isEmpty());\n \n@@ -498,14 +498,14 @@ public void deleteByUsername() {\n         // specify a propagation\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n \n         String key = userTO.getKey();\n         userTO = userService.read(key);\n \n         ProvisioningResult<UserTO> result = deleteUser(userTO.getKey());\n         assertNotNull(result);\n-        userTO = result.getAny();\n+        userTO = result.getEntity();\n         assertEquals(key, userTO.getKey());\n         assertTrue(userTO.getPlainAttrs().isEmpty());\n \n@@ -568,7 +568,7 @@ public void read() {\n \n     @Test\n     public void readWithMailAddressAsUserName() {\n-        UserTO userTO = createUser(getUniqueSampleTO(\"mail@domain.org\")).getAny();\n+        UserTO userTO = createUser(getUniqueSampleTO(\"mail@domain.org\")).getEntity();\n         userTO = userService.read(userTO.getKey());\n         assertNotNull(userTO);\n     }\n@@ -577,7 +577,7 @@ public void readWithMailAddressAsUserName() {\n     public void updateWithoutPassword() {\n         UserTO userTO = getUniqueSampleTO(\"updatewithout@password.com\");\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n \n         assertNotNull(userTO);\n \n@@ -587,7 +587,7 @@ public void updateWithoutPassword() {\n                 attrTO(new AttrTO.Builder().schema(\"ctype\").build()).\n                 build());\n \n-        userTO = updateUser(userPatch).getAny();\n+        userTO = updateUser(userPatch).getEntity();\n \n         assertNotNull(userTO);\n         assertNotNull(userTO.getDerAttrMap());\n@@ -598,7 +598,7 @@ public void updateWithoutPassword() {\n     public void updateInvalidPassword() {\n         UserTO userTO = getSampleTO(\"updateinvalid@password.com\");\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         UserPatch userPatch = new UserPatch();\n@@ -613,7 +613,7 @@ public void updateSamePassword() {\n         UserTO userTO = getUniqueSampleTO(\"updatesame@password.com\");\n         userTO.setRealm(\"/even/two\");\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         UserPatch userPatch = new UserPatch();\n@@ -630,7 +630,7 @@ public void update() {\n         userTO.getMemberships().add(new MembershipTO.Builder().\n                 group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n \n         assertFalse(userTO.getDerAttrs().isEmpty());\n         assertEquals(1, userTO.getMemberships().size());\n@@ -650,7 +650,7 @@ public void update() {\n         userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n                 group(userTO.getMemberships().get(0).getGroupKey()).build());\n \n-        userTO = updateUser(userPatch).getAny();\n+        userTO = updateUser(userPatch).getEntity();\n         assertNotNull(userTO);\n \n         // issue SYNCOPE-15\n@@ -680,13 +680,13 @@ public void updatePasswordOnly() {\n         userTO.getMemberships().add(new MembershipTO.Builder().\n                 group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n \n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n         userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").resource(RESOURCE_NAME_WS2).build());\n \n-        userTO = updateUser(userPatch).getAny();\n+        userTO = updateUser(userPatch).getEntity();\n \n         // check for changePwdDate\n         assertNotNull(userTO.getChangePwdDate());\n@@ -719,7 +719,7 @@ public void verifyTaskRegistration() {\n                 group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n         // 1. create user\n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         // get the new task list\n@@ -742,7 +742,7 @@ public void verifyTaskRegistration() {\n \n         userPatch.getPlainAttrs().add(attrAddReplacePatch(\"surname\", \"surname2\"));\n \n-        userTO = updateUser(userPatch).getAny();\n+        userTO = updateUser(userPatch).getEntity();\n \n         assertNotNull(userTO);\n \n@@ -783,7 +783,7 @@ public void createActivate() {\n         userTO.getMemberships().add(new MembershipTO.Builder().\n                 group(\"268fed79-f440-4390-9435-b273768eb5d6\").build());\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n \n         assertNotNull(userTO);\n         assertNotNull(userTO.getToken());\n@@ -796,7 +796,7 @@ public void createActivate() {\n         statusPatch.setType(StatusPatchType.ACTIVATE);\n         statusPatch.setToken(userTO.getToken());\n         userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-        }).getAny();\n+        }).getEntity();\n \n         assertNotNull(userTO);\n         assertNull(userTO.getToken());\n@@ -811,7 +811,7 @@ public void suspendReactivate() {\n         userTO.getMemberships().add(new MembershipTO.Builder().\n                 group(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").build());\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n \n         assertNotNull(userTO);\n         assertEquals(ActivitiDetector.isActivitiEnabledForUsers(syncopeService)\n@@ -822,15 +822,15 @@ public void suspendReactivate() {\n         statusPatch.setKey(userTO.getKey());\n         statusPatch.setType(StatusPatchType.SUSPEND);\n         userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-        }).getAny();\n+        }).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         statusPatch = new StatusPatch();\n         statusPatch.setKey(userTO.getKey());\n         statusPatch.setType(StatusPatchType.REACTIVATE);\n         userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-        }).getAny();\n+        }).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n     }\n@@ -849,7 +849,7 @@ public void suspendReactivateOnResource() {\n         userTO.getResources().clear();\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n         userTO.getResources().add(RESOURCE_NAME_LDAP);\n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n         assertEquals(ActivitiDetector.isActivitiEnabledForUsers(syncopeService)\n                 ? \"active\"\n@@ -864,7 +864,7 @@ public void suspendReactivateOnResource() {\n         statusPatch.getResources().add(RESOURCE_NAME_TESTDB);\n         statusPatch.getResources().add(RESOURCE_NAME_LDAP);\n         userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-        }).getAny();\n+        }).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n@@ -884,7 +884,7 @@ public void suspendReactivateOnResource() {\n         userService.status(statusPatch);\n         statusPatch.setType(StatusPatchType.REACTIVATE);\n         userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-        }).getAny();\n+        }).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n@@ -899,7 +899,7 @@ public void suspendReactivateOnResource() {\n         statusPatch.getResources().add(RESOURCE_NAME_TESTDB);\n \n         userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-        }).getAny();\n+        }).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n \n@@ -914,7 +914,7 @@ public void updateMultivalueAttribute() {\n         userTO.getDerAttrs().clear();\n         userTO.getVirAttrs().clear();\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         AttrTO loginDate = userTO.getPlainAttrMap().get(\"loginDate\");\n@@ -928,7 +928,7 @@ public void updateMultivalueAttribute() {\n         userPatch.getPlainAttrs().add(new AttrPatch.Builder().\n                 operation(PatchOperation.ADD_REPLACE).attrTO(loginDate).build());\n \n-        userTO = updateUser(userPatch).getAny();\n+        userTO = updateUser(userPatch).getEntity();\n         assertNotNull(userTO);\n \n         loginDate = userTO.getPlainAttrMap().get(\"loginDate\");\n@@ -971,7 +971,7 @@ public void async() {\n         verifyAsyncResult(result.getPropagationStatuses());\n \n         UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(result.getAny().getKey());\n+        userPatch.setKey(result.getEntity().getKey());\n         userPatch.setPassword(new PasswordPatch.Builder().\n                 onSyncope(true).resources(RESOURCE_NAME_LDAP, RESOURCE_NAME_TESTDB, RESOURCE_NAME_TESTDB2).\n                 value(\"password321\").build());\n@@ -982,7 +982,7 @@ public void async() {\n         assertNotNull(result);\n         verifyAsyncResult(result.getPropagationStatuses());\n \n-        result = asyncService.delete(result.getAny().getKey()).readEntity(\n+        result = asyncService.delete(result.getEntity().getKey()).readEntity(\n                 new GenericType<ProvisioningResult<UserTO>>() {\n         });\n         assertNotNull(result);\n@@ -994,7 +994,7 @@ public void issue213() {\n         UserTO userTO = getUniqueSampleTO(\"issue213@syncope.apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getResources().size());\n \n@@ -1011,7 +1011,7 @@ public void issue213() {\n         userPatch.getResources().add(\n                 new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(RESOURCE_NAME_TESTDB).build());\n \n-        userTO = updateUser(userPatch).getAny();\n+        userTO = updateUser(userPatch).getEntity();\n         assertTrue(userTO.getResources().isEmpty());\n \n         jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class, userTO.getUsername());\n@@ -1022,15 +1022,15 @@ public void issue234() {\n         UserTO inUserTO = getUniqueSampleTO(\"issue234@syncope.apache.org\");\n         inUserTO.getResources().add(RESOURCE_NAME_LDAP);\n \n-        UserTO userTO = createUser(inUserTO).getAny();\n+        UserTO userTO = createUser(inUserTO).getEntity();\n         assertNotNull(userTO);\n \n         UserPatch userPatch = new UserPatch();\n \n         userPatch.setKey(userTO.getKey());\n         userPatch.setUsername(new StringReplacePatchItem.Builder().value(\"1\" + userTO.getUsername()).build());\n \n-        userTO = updateUser(userPatch).getAny();\n+        userTO = updateUser(userPatch).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"1\" + inUserTO.getUsername(), userTO.getUsername());\n     }\n@@ -1042,7 +1042,7 @@ public final void issue280() {\n         userTO.getMemberships().clear();\n         userTO.getDerAttrs().clear();\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         UserPatch userPatch = new UserPatch();\n@@ -1114,7 +1114,7 @@ public void groupAttrPropagation() {\n \n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n-        UserTO actual = createUser(userTO).getAny();\n+        UserTO actual = createUser(userTO).getEntity();\n         assertNotNull(actual);\n         assertNotNull(actual.getDerAttrMap().get(\"csvuserid\"));\n \n@@ -1172,7 +1172,7 @@ public void customPolicyRules() {\n             }\n \n             user.setUsername(\"YYY\" + user.getUsername());\n-            user = createUser(user).getAny();\n+            user = createUser(user).getEntity();\n             assertNotNull(user);\n         } finally {\n             realm.setAccountPolicy(oldAccountPolicy);\n@@ -1201,7 +1201,7 @@ public void issueSYNCOPE108() {\n \n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n         assertEquals(2, userTO.getMemberships().size());\n         assertEquals(1, userTO.getResources().size());\n@@ -1219,7 +1219,7 @@ public void issueSYNCOPE108() {\n         userPatch.getMemberships().add(new MembershipPatch.Builder().\n                 operation(PatchOperation.DELETE).group(userTO.getMemberships().get(0).getGroupKey()).build());\n \n-        userTO = updateUser(userPatch).getAny();\n+        userTO = updateUser(userPatch).getEntity();\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getMemberships().size());\n \n@@ -1236,7 +1236,7 @@ public void issueSYNCOPE108() {\n         userPatch.getResources().add(new StringPatchItem.Builder().operation(PatchOperation.DELETE).\n                 value(userTO.getResources().iterator().next()).build());\n \n-        userTO = updateUser(userPatch).getAny();\n+        userTO = updateUser(userPatch).getEntity();\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getMemberships().size());\n         assertFalse(userTO.getResources().isEmpty());\n@@ -1254,7 +1254,7 @@ public void issueSYNCOPE108() {\n         userPatch.getMemberships().add(new MembershipPatch.Builder().\n                 operation(PatchOperation.DELETE).group(userTO.getMemberships().get(0).getGroupKey()).build());\n \n-        userTO = updateUser(userPatch).getAny();\n+        userTO = updateUser(userPatch).getEntity();\n         assertNotNull(userTO);\n         assertTrue(userTO.getMemberships().isEmpty());\n         assertTrue(userTO.getResources().isEmpty());\n@@ -1279,7 +1279,7 @@ public void issueSYNCOPE185() {\n         assertFalse(result.getPropagationStatuses().isEmpty());\n         assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n         assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        userTO = result.getAny();\n+        userTO = result.getEntity();\n \n         // 2. delete this user\n         userService.delete(userTO.getKey());\n@@ -1336,7 +1336,7 @@ public void issueSYNCOPE267() {\n         assertFalse(result.getPropagationStatuses().isEmpty());\n         assertEquals(RESOURCE_NAME_DBVIRATTR, result.getPropagationStatuses().get(0).getResource());\n         assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        userTO = result.getAny();\n+        userTO = result.getEntity();\n \n         ConnObjectTO connObjectTO =\n                 resourceService.readConnObject(RESOURCE_NAME_DBVIRATTR, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -1356,7 +1356,7 @@ public void issueSYNCOPE266() {\n         UserTO userTO = getUniqueSampleTO(\"syncope266@apache.org\");\n         userTO.getResources().clear();\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         UserPatch userPatch = new UserPatch();\n@@ -1366,7 +1366,7 @@ public void issueSYNCOPE266() {\n         userPatch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_UPDATE).build());\n \n-        userTO = updateUser(userPatch).getAny();\n+        userTO = updateUser(userPatch).getEntity();\n         assertNotNull(userTO);\n     }\n \n@@ -1390,7 +1390,7 @@ public void issueSYNCOPE122() {\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n         userTO.getResources().add(RESOURCE_NAME_TESTDB2);\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB));\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB2));\n@@ -1420,7 +1420,7 @@ public void issueSYNCOPE122() {\n                 resource(RESOURCE_NAME_TESTDB).build());\n \n         ProvisioningResult<UserTO> result = updateUser(userPatch);\n-        userTO = result.getAny();\n+        userTO = result.getEntity();\n \n         // 3a. Chech that only a single propagation took place\n         assertNotNull(result.getPropagationStatuses());\n@@ -1463,7 +1463,7 @@ public void issueSYNCOPE136AES() {\n             userTO = getUniqueSampleTO(\"syncope136_AES@apache.org\");\n             userTO.getResources().clear();\n \n-            userTO = createUser(userTO).getAny();\n+            userTO = createUser(userTO).getEntity();\n             assertNotNull(userTO);\n \n             // 4. update user, assign a propagation priority resource but don't provide any password\n@@ -1475,7 +1475,7 @@ public void issueSYNCOPE136AES() {\n \n             ProvisioningResult<UserTO> result = updateUser(userPatch);\n             assertNotNull(result);\n-            userTO = result.getAny();\n+            userTO = result.getEntity();\n             assertNotNull(userTO);\n \n             // 5. verify that propagation was successful\n@@ -1502,7 +1502,7 @@ public void isseSYNCOPE136Random() {\n         // 1. create user with no resources\n         UserTO userTO = getUniqueSampleTO(\"syncope136_Random@apache.org\");\n         userTO.getResources().clear();\n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         // 2. update user, assign a propagation priority resource but don't provide any password\n@@ -1537,7 +1537,7 @@ public void mappingPurpose() {\n         userTO.getResources().clear();\n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         ConnObjectTO connObjectTO =\n@@ -1558,7 +1558,7 @@ public void issueSYNCOPE265() {\n             UserPatch userPatch = new UserPatch();\n             userPatch.setKey(userKey);\n             userPatch.getPlainAttrs().add(attrAddReplacePatch(\"ctype\", \"a type\"));\n-            UserTO userTO = updateUser(userPatch).getAny();\n+            UserTO userTO = updateUser(userPatch).getEntity();\n             assertEquals(\"a type\", userTO.getPlainAttrMap().get(\"ctype\").getValues().get(0));\n         }\n     }\n@@ -1569,7 +1569,7 @@ public void bulkActions() {\n \n         for (int i = 0; i < 10; i++) {\n             UserTO userTO = getUniqueSampleTO(\"bulk_\" + i + \"@apache.org\");\n-            bulkAction.getTargets().add(String.valueOf(createUser(userTO).getAny().getKey()));\n+            bulkAction.getTargets().add(String.valueOf(createUser(userTO).getEntity().getKey()));\n         }\n \n         // check for a fail\n@@ -1612,15 +1612,15 @@ public void issueSYNCOPE354() {\n         groupTO.setRealm(\"/\");\n         groupTO.getResources().add(RESOURCE_NAME_LDAP);\n \n-        groupTO = createGroup(groupTO).getAny();\n+        groupTO = createGroup(groupTO).getEntity();\n         assertNotNull(groupTO);\n \n         // 2. create user with LDAP resource and membership of the above group\n         UserTO userTO = getUniqueSampleTO(\"syncope354@syncope.apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_LDAP);\n         userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n \n         // 3. read group on resource, check that user DN is included in uniqueMember\n@@ -1636,7 +1636,7 @@ public void issueSYNCOPE354() {\n         userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.DELETE).\n                 group(userTO.getMemberships().get(0).getGroupKey()).build());\n \n-        userTO = updateUser(userPatch).getAny();\n+        userTO = updateUser(userPatch).getEntity();\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n \n         // 5. read group on resource, check that user DN was removed from uniqueMember\n@@ -1662,7 +1662,7 @@ public void issueSYNCOPE357() throws IOException {\n         groupTO.setRealm(\"/\");\n         groupTO.getResources().add(RESOURCE_NAME_LDAP);\n \n-        groupTO = createGroup(groupTO).getAny();\n+        groupTO = createGroup(groupTO).getEntity();\n         assertNotNull(groupTO);\n \n         // 2. create user with membership of the above group\n@@ -1672,7 +1672,7 @@ public void issueSYNCOPE357() throws IOException {\n                 Base64Utility.encode(IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/favicon.jpg\")))));\n         userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n         assertNotNull(userTO.getPlainAttrMap().get(\"obscure\"));\n         assertNotNull(userTO.getPlainAttrMap().get(\"photo\"));\n@@ -1705,7 +1705,7 @@ public void issueSYNCOPE383() {\n         // 1. create user without resources\n         UserTO userTO = getUniqueSampleTO(\"syncope383@apache.org\");\n         userTO.getResources().clear();\n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         // 2. assign resource without specifying a new pwd and check propagation failure\n@@ -1716,11 +1716,11 @@ public void issueSYNCOPE383() {\n \n         ProvisioningResult<UserTO> result = updateUser(userPatch);\n         assertNotNull(result);\n-        userTO = result.getAny();\n+        userTO = result.getEntity();\n         assertEquals(RESOURCE_NAME_TESTDB, userTO.getResources().iterator().next());\n         assertNotEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         assertNotNull(result.getPropagationStatuses().get(0).getFailureReason());\n-        userTO = result.getAny();\n+        userTO = result.getEntity();\n \n         // 3. request to change password only on testdb\n         userPatch = new UserPatch();\n@@ -1747,7 +1747,7 @@ public void issueSYNCOPE402() {\n         userTO.getPlainAttrs().add(attrTO(\"fullname\", userId));\n         userTO.getPlainAttrs().add(attrTO(\"surname\", userId));\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n         assertTrue(userTO.getResources().isEmpty());\n \n@@ -1789,7 +1789,7 @@ public void unlink() {\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n-        UserTO actual = createUser(userTO).getAny();\n+        UserTO actual = createUser(userTO).getEntity();\n         assertNotNull(actual);\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n@@ -1817,7 +1817,7 @@ public void link() {\n         userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n-        UserTO actual = createUser(userTO).getAny();\n+        UserTO actual = createUser(userTO).getEntity();\n         assertNotNull(actual);\n         assertTrue(actual.getResources().isEmpty());\n \n@@ -1858,7 +1858,7 @@ public void unassign() {\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n-        UserTO actual = createUser(userTO).getAny();\n+        UserTO actual = createUser(userTO).getEntity();\n         assertNotNull(actual);\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n@@ -1891,7 +1891,7 @@ public void assign() {\n         userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n-        UserTO actual = createUser(userTO).getAny();\n+        UserTO actual = createUser(userTO).getEntity();\n         assertNotNull(actual);\n         assertTrue(actual.getResources().isEmpty());\n \n@@ -1927,7 +1927,7 @@ public void deprovision() {\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n-        UserTO actual = createUser(userTO).getAny();\n+        UserTO actual = createUser(userTO).getEntity();\n         assertNotNull(actual);\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n@@ -1960,7 +1960,7 @@ public void provision() {\n         userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n-        UserTO actual = createUser(userTO).getAny();\n+        UserTO actual = createUser(userTO).getEntity();\n         assertNotNull(actual);\n         assertTrue(actual.getResources().isEmpty());\n \n@@ -1995,7 +1995,7 @@ public void deprovisionUnlinked() {\n         userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n-        UserTO actual = createUser(userTO).getAny();\n+        UserTO actual = createUser(userTO).getEntity();\n         assertNotNull(actual);\n         assertTrue(actual.getResources().isEmpty());\n \n@@ -2049,28 +2049,28 @@ public void issueSYNCOPE420() {\n         userTO.setRealm(realm.getFullPath());\n         userTO.getPlainAttrs().add(attrTO(\"makeItDouble\", \"3\"));\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertEquals(\"6\", userTO.getPlainAttrMap().get(\"makeItDouble\").getValues().get(0));\n \n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n         userPatch.getPlainAttrs().add(attrAddReplacePatch(\"makeItDouble\", \"7\"));\n \n-        userTO = updateUser(userPatch).getAny();\n+        userTO = updateUser(userPatch).getEntity();\n         assertEquals(\"14\", userTO.getPlainAttrMap().get(\"makeItDouble\").getValues().get(0));\n     }\n \n     @Test\n     public void issueSYNCOPE426() {\n         UserTO userTO = getUniqueSampleTO(\"syncope426@syncope.apache.org\");\n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n         userPatch.setPassword(new PasswordPatch.Builder().value(\"anotherPassword123\").build());\n         userTO = userService.update(userPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-        }).getAny();\n+        }).getEntity();\n         assertNotNull(userTO);\n     }\n \n@@ -2079,7 +2079,7 @@ public void issueSYNCOPE435() {\n         // 1. create user without password\n         UserTO userTO = getUniqueSampleTO(\"syncope435@syncope.apache.org\");\n         userTO.setPassword(null);\n-        userTO = createUser(userTO, false).getAny();\n+        userTO = createUser(userTO, false).getEntity();\n         assertNotNull(userTO);\n \n         // 2. try to update user by subscribing a resource - works but propagation is not even attempted\n@@ -2090,7 +2090,7 @@ public void issueSYNCOPE435() {\n \n         ProvisioningResult<UserTO> result = updateUser(userPatch);\n         assertNotNull(result);\n-        userTO = result.getAny();\n+        userTO = result.getEntity();\n         assertEquals(Collections.singleton(RESOURCE_NAME_WS1), userTO.getResources());\n         assertNotEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         assertTrue(result.getPropagationStatuses().get(0).getFailureReason().\n@@ -2102,7 +2102,7 @@ public void issueSYNCOPE454() throws NamingException {\n         // 1. create user with LDAP resource (with 'Generate password if missing' enabled)\n         UserTO userTO = getUniqueSampleTO(\"syncope454@syncope.apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_LDAP);\n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         // 2. read resource configuration for LDAP binding\n@@ -2139,7 +2139,7 @@ public void issueSYNCOPE493() {\n         assertNotNull(userTO);\n         assertEquals(1, result.getPropagationStatuses().size());\n         assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        userTO = result.getAny();\n+        userTO = result.getEntity();\n \n         ConnObjectTO actual =\n                 resourceService.readConnObject(RESOURCE_NAME_WS1, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -2180,7 +2180,7 @@ public void issueSYNCOPE493() {\n         assertNotNull(userTO);\n         assertEquals(1, result.getPropagationStatuses().size());\n         assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        userTO = result.getAny();\n+        userTO = result.getEntity();\n \n         ConnObjectTO newUser =\n                 resourceService.readConnObject(RESOURCE_NAME_WS1, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -2207,7 +2207,7 @@ public void issueSYNCOPE505DB() throws Exception {\n         // 1. create user\n         UserTO user = UserITCase.getUniqueSampleTO(\"syncope505-db@syncope.apache.org\");\n         user.setPassword(\"security123\");\n-        user = createUser(user).getAny();\n+        user = createUser(user).getEntity();\n         assertNotNull(user);\n         assertTrue(user.getResources().isEmpty());\n \n@@ -2225,7 +2225,7 @@ public void issueSYNCOPE505DB() throws Exception {\n \n         userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_TESTDB).build());\n \n-        user = updateUser(userPatch).getAny();\n+        user = updateUser(userPatch).getEntity();\n         assertNotNull(user);\n         assertEquals(1, user.getResources().size());\n \n@@ -2247,7 +2247,7 @@ public void issueSYNCOPE505LDAP() throws Exception {\n         // 1. create user\n         UserTO user = UserITCase.getUniqueSampleTO(\"syncope505-ldap@syncope.apache.org\");\n         user.setPassword(\"security123\");\n-        user = createUser(user).getAny();\n+        user = createUser(user).getEntity();\n         assertNotNull(user);\n         assertTrue(user.getResources().isEmpty());\n \n@@ -2266,7 +2266,7 @@ public void issueSYNCOPE505LDAP() throws Exception {\n \n         userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_LDAP).build());\n \n-        user = updateUser(userPatch).getAny();\n+        user = updateUser(userPatch).getEntity();\n         assertNotNull(user);\n         assertEquals(1, user.getResources().size());\n \n@@ -2293,7 +2293,7 @@ public void issueSYNCOPE391() {\n         UserTO userTO = getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n         userTO.setPassword(null);\n \n-        userTO = createUser(userTO, false).getAny();\n+        userTO = createUser(userTO, false).getEntity();\n         assertNotNull(userTO);\n         assertNull(userTO.getPassword());\n \n@@ -2312,7 +2312,7 @@ public void issueSYNCOPE391() {\n \n         userTO.getAuxClasses().add(\"csv\");\n         userTO.getResources().add(RESOURCE_NAME_CSV);\n-        userTO = createUser(userTO, false).getAny();\n+        userTO = createUser(userTO, false).getEntity();\n         assertNotNull(userTO);\n \n         ConnObjectTO connObjectTO =\n@@ -2334,7 +2334,7 @@ public void issueSYNCOPE391() {\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n         userTO.getResources().add(RESOURCE_NAME_CSV);\n-        userTO = createUser(userTO, false).getAny();\n+        userTO = createUser(userTO, false).getEntity();\n         assertNotNull(userTO);\n \n         connObjectTO =\n@@ -2356,7 +2356,7 @@ public void issueSYNCOPE391() {\n \n         userTO.getResources().add(RESOURCE_NAME_CSV);\n         // storePassword true by default\n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -2413,7 +2413,7 @@ public void issueSYNCOPE647() {\n \n         userTO.getResources().add(RESOURCE_NAME_LDAP);\n \n-        UserTO actual = createUser(userTO).getAny();\n+        UserTO actual = createUser(userTO).getEntity();\n         assertNotNull(actual);\n         assertNotNull(actual.getDerAttrMap().get(\"csvuserid\"));\n \n@@ -2426,7 +2426,7 @@ public void issueSYNCOPE647() {\n         userPatch.setKey(actual.getKey());\n         userPatch.getPlainAttrs().add(attrAddReplacePatch(\"postalAddress\", \"newPostalAddress\"));\n \n-        actual = updateUser(userPatch).getAny();\n+        actual = updateUser(userPatch).getEntity();\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), actual.getKey());\n         assertNotNull(connObjectTO);\n@@ -2463,7 +2463,7 @@ public void issueSYNCOPE626() {\n             }\n \n             user.setPassword(\"password123\");\n-            user = createUser(user).getAny();\n+            user = createUser(user).getEntity();\n             assertNotNull(user);\n         } finally {\n             realm.setPasswordPolicy(oldPasswordPolicy);\n@@ -2488,14 +2488,14 @@ public void issueSYNCOPE686() {\n             // 3. create group with LDAP resource assigned\n             GroupTO group = GroupITCase.getBasicSampleTO(\"syncope686\");\n             group.getResources().add(RESOURCE_NAME_LDAP);\n-            group = createGroup(group).getAny();\n+            group = createGroup(group).getEntity();\n             assertNotNull(group);\n \n             // 4. create user with no resources\n             UserTO userTO = getUniqueSampleTO(\"syncope686@apache.org\");\n             userTO.getResources().clear();\n \n-            userTO = createUser(userTO).getAny();\n+            userTO = createUser(userTO).getEntity();\n             assertNotNull(userTO);\n \n             // 5. update user with the new group, and don't provide any password\n@@ -2527,11 +2527,11 @@ public void issueSYNCOPE710() {\n         // 1. create groups for indirect resource assignment\n         GroupTO ldapGroup = GroupITCase.getBasicSampleTO(\"syncope710.ldap\");\n         ldapGroup.getResources().add(RESOURCE_NAME_LDAP);\n-        ldapGroup = createGroup(ldapGroup).getAny();\n+        ldapGroup = createGroup(ldapGroup).getEntity();\n \n         GroupTO dbGroup = GroupITCase.getBasicSampleTO(\"syncope710.db\");\n         dbGroup.getResources().add(RESOURCE_NAME_TESTDB);\n-        dbGroup = createGroup(dbGroup).getAny();\n+        dbGroup = createGroup(dbGroup).getEntity();\n \n         // 2. create user with memberships for the groups created above\n         UserTO userTO = getUniqueSampleTO(\"syncope710@syncope.apache.org\");\n@@ -2542,7 +2542,7 @@ public void issueSYNCOPE710() {\n \n         ProvisioningResult<UserTO> result = createUser(userTO);\n         assertEquals(2, result.getPropagationStatuses().size());\n-        userTO = result.getAny();\n+        userTO = result.getEntity();\n \n         // 3. request to propagate passwod only to db\n         UserPatch userPatch = new UserPatch();"},{"sha":"2db3b952a604d5352dd406c70a2347d9e845271a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -85,7 +85,7 @@ public void create() {\n         UserTO self = anonClient.getService(UserSelfService.class).\n                 create(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"), true).\n                 readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-                }).getAny();\n+                }).getEntity();\n         assertNotNull(self);\n         assertEquals(\"createApproval\", self.getStatus());\n     }\n@@ -104,7 +104,7 @@ public void createAndApprove() {\n         userTO = anonClient.getService(UserSelfService.class).\n                 create(userTO, true).\n                 readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-                }).getAny();\n+                }).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"createApproval\", userTO.getStatus());\n         assertFalse(userTO.getMemberships().isEmpty());\n@@ -148,7 +148,7 @@ public void read() {\n     @Test\n     public void updateWithoutApproval() {\n         // 1. create user as admin\n-        UserTO created = createUser(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\")).getAny();\n+        UserTO created = createUser(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\")).getEntity();\n         assertNotNull(created);\n         assertFalse(created.getUsername().endsWith(\"XX\"));\n \n@@ -160,7 +160,7 @@ public void updateWithoutApproval() {\n         SyncopeClient authClient = clientFactory.create(created.getUsername(), \"password123\");\n         UserTO updated = authClient.getService(UserSelfService.class).update(userPatch).\n                 readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-                }).getAny();\n+                }).getEntity();\n         assertNotNull(updated);\n         assertEquals(ActivitiDetector.isActivitiEnabledForUsers(syncopeService)\n                 ? \"active\" : \"created\", updated.getStatus());\n@@ -172,7 +172,7 @@ public void updateWithApproval() {\n         Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers(syncopeService));\n \n         // 1. create user as admin\n-        UserTO created = createUser(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\")).getAny();\n+        UserTO created = createUser(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\")).getEntity();\n         assertNotNull(created);\n         assertFalse(created.getUsername().endsWith(\"XX\"));\n \n@@ -192,7 +192,7 @@ public void updateWithApproval() {\n         SyncopeClient authClient = clientFactory.create(created.getUsername(), \"password123\");\n         UserTO updated = authClient.getService(UserSelfService.class).update(userPatch).\n                 readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-                }).getAny();\n+                }).getEntity();\n         assertNotNull(updated);\n         assertEquals(\"updateApproval\", updated.getStatus());\n         assertFalse(updated.getUsername().endsWith(\"XX\"));\n@@ -227,13 +227,13 @@ public void updateWithApproval() {\n \n     @Test\n     public void delete() {\n-        UserTO created = createUser(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\")).getAny();\n+        UserTO created = createUser(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\")).getEntity();\n         assertNotNull(created);\n \n         SyncopeClient authClient = clientFactory.create(created.getUsername(), \"password123\");\n         UserTO deleted = authClient.getService(UserSelfService.class).delete().readEntity(\n                 new GenericType<ProvisioningResult<UserTO>>() {\n-        }).getAny();\n+        }).getEntity();\n         assertNotNull(deleted);\n         assertEquals(ActivitiDetector.isActivitiEnabledForUsers(syncopeService)\n                 ? \"deleteApproval\" : null, deleted.getStatus());\n@@ -364,7 +364,7 @@ public void mustChangePassword() {\n         userPatch = new UserPatch();\n         userPatch.setKey(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\");\n         userPatch.setMustChangePassword(new BooleanReplacePatchItem.Builder().value(true).build());\n-        UserTO vivaldi = updateUser(userPatch).getAny();\n+        UserTO vivaldi = updateUser(userPatch).getEntity();\n         assertTrue(vivaldi.isMustChangePassword());\n \n         // 2. attempt to access -> fail"},{"sha":"c8570a000faa873d7063f9dfcf7f1623ca90231d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserWorkflowITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserWorkflowITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserWorkflowITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserWorkflowITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -65,7 +65,7 @@ public void createWithReject() {\n                 new MembershipTO.Builder().group(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\").build());\n \n         // 1. create user with group 9\n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getMemberships().size());\n         assertEquals(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\", userTO.getMemberships().get(0).getRightKey());\n@@ -87,7 +87,7 @@ public void createWithReject() {\n             userPatch.setKey(\"1417acbe-cbf6-4277-9372-e75e04f97000\");\n             userPatch.getRoles().add(new StringPatchItem.Builder().\n                     operation(PatchOperation.ADD_REPLACE).value(\"User manager\").build());\n-            rossini = updateUser(userPatch).getAny();\n+            rossini = updateUser(userPatch).getEntity();\n         }\n         assertTrue(rossini.getRoles().contains(\"User manager\"));\n \n@@ -149,7 +149,7 @@ public void createWithApproval() {\n         // 1. create user with group 9 (and verify that no propagation occurred)\n         ProvisioningResult<UserTO> result = createUser(userTO);\n         assertNotNull(result);\n-        userTO = result.getAny();\n+        userTO = result.getEntity();\n         assertEquals(1, userTO.getMemberships().size());\n         assertEquals(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\", userTO.getMemberships().get(0).getRightKey());\n         assertEquals(\"createApproval\", userTO.getStatus());\n@@ -209,7 +209,7 @@ public void createWithApproval() {\n         userPatch.setKey(userTO.getKey());\n         userPatch.setPassword(new PasswordPatch.Builder().value(\"anotherPassword123\").build());\n \n-        userTO = updateUser(userPatch).getAny();\n+        userTO = updateUser(userPatch).getEntity();\n         assertNotNull(userTO);\n     }\n \n@@ -233,7 +233,7 @@ public void issueSYNCOPE15() {\n                 new MembershipTO.Builder().group(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\").build());\n \n         // 1. create user with group 9 (and verify that no propagation occurred)\n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n         assertNotEquals(0L, userTO.getKey());\n         assertNotNull(userTO.getCreationDate());"},{"sha":"90e1c35fe809153186ecafb157fd44204ad13693","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/VirAttrITCase.java","status":"modified","additions":21,"deletions":21,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f56963c84b254dca3ab7b3941d78b31245fd55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java?ref=62f56963c84b254dca3ab7b3941d78b31245fd55","patch":"@@ -76,7 +76,7 @@ public void issueSYNCOPE16() {\n                 new MembershipTO.Builder().group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n         // 1. create user\n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         // 2. check for virtual attribute value\n@@ -89,7 +89,7 @@ public void issueSYNCOPE16() {\n         userPatch.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualupdated\"));\n \n         // 3. update virtual attribute\n-        userTO = updateUser(userPatch).getAny();\n+        userTO = updateUser(userPatch).getEntity();\n         assertNotNull(userTO);\n \n         // 4. check for virtual attribute value\n@@ -133,7 +133,7 @@ public void issueSYNCOPE260() {\n         assertFalse(result.getPropagationStatuses().isEmpty());\n         assertEquals(RESOURCE_NAME_WS2, result.getPropagationStatuses().get(0).getResource());\n         assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        userTO = result.getAny();\n+        userTO = result.getEntity();\n \n         ConnObjectTO connObjectTO =\n                 resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -152,7 +152,7 @@ public void issueSYNCOPE260() {\n         assertFalse(result.getPropagationStatuses().isEmpty());\n         assertEquals(RESOURCE_NAME_WS2, result.getPropagationStatuses().get(0).getResource());\n         assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        userTO = result.getAny();\n+        userTO = result.getEntity();\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n         assertEquals(\"virtualvalue2\", connObjectTO.getPlainAttrMap().get(\"COMPANYNAME\").getValues().get(0));\n@@ -165,7 +165,7 @@ public void issueSYNCOPE260() {\n         statusPatch.setKey(userTO.getKey());\n         statusPatch.setType(StatusPatchType.SUSPEND);\n         userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-        }).getAny();\n+        }).getEntity();\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -175,7 +175,7 @@ public void issueSYNCOPE260() {\n         statusPatch.setKey(userTO.getKey());\n         statusPatch.setType(StatusPatchType.REACTIVATE);\n         userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-        }).getAny();\n+        }).getEntity();\n         assertEquals(\"active\", userTO.getStatus());\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -194,7 +194,7 @@ public void issueSYNCOPE260() {\n         assertFalse(result.getPropagationStatuses().isEmpty());\n         assertEquals(RESOURCE_NAME_WS2, result.getPropagationStatuses().get(0).getResource());\n         assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        userTO = result.getAny();\n+        userTO = result.getEntity();\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n         assertEquals(\"Surname2\", connObjectTO.getPlainAttrMap().get(\"SURNAME\").getValues().get(0));\n@@ -220,7 +220,7 @@ public void virAttrCache() {\n         userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n \n         // 1. create user\n-        UserTO actual = createUser(userTO).getAny();\n+        UserTO actual = createUser(userTO).getEntity();\n         assertNotNull(actual);\n \n         // 2. check for virtual attribute value\n@@ -249,7 +249,7 @@ public void virAttrCache() {\n         userPatch.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualupdated\"));\n \n         // 5. update virtual attribute\n-        actual = updateUser(userPatch).getAny();\n+        actual = updateUser(userPatch).getEntity();\n         assertNotNull(actual);\n \n         // 6. check for virtual attribute value\n@@ -313,7 +313,7 @@ public boolean evaluate(final MappingItemTO item) {\n             // assign resource-csv to user\n             userTO.getResources().add(RESOURCE_NAME_CSV);\n             // save user\n-            userTO = createUser(userTO).getAny();\n+            userTO = createUser(userTO).getEntity();\n             // make std controls about user\n             assertNotNull(userTO);\n             assertTrue(RESOURCE_NAME_CSV.equals(userTO.getResources().iterator().next()));\n@@ -339,7 +339,7 @@ public boolean evaluate(final MappingItemTO item) {\n \n             ProvisioningResult<UserTO> result = updateUser(userPatch);\n             assertNotNull(result);\n-            toBeUpdated = result.getAny();\n+            toBeUpdated = result.getEntity();\n             assertTrue(toBeUpdated.getVirAttrs().iterator().next().getValues().contains(\"test@testoneone.com\"));\n             // check if propagates correctly with assertEquals on size of tasks list\n             assertEquals(2, result.getPropagationStatuses().size());\n@@ -365,7 +365,7 @@ public void issueSYNCOPE442() {\n         userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n \n         // 1. create user\n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n         // 2. check for virtual attribute value\n@@ -430,7 +430,7 @@ public void issueSYNCOPE442() {\n         userPatch.setKey(userTO.getKey());\n         userPatch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS2).build());\n-        userTO = updateUser(userPatch).getAny();\n+        userTO = updateUser(userPatch).getEntity();\n         assertNotNull(userTO);\n \n         userTO = userService.read(userTO.getKey());\n@@ -444,7 +444,7 @@ public void issueSYNCOPE436() {\n         userTO.getResources().clear();\n         userTO.getResources().add(RESOURCE_NAME_LDAP);\n         userTO.getVirAttrs().add(attrTO(\"virtualReadOnly\", \"readOnly\"));\n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n         // finding no values because the virtual attribute is readonly \n         assertTrue(userTO.getVirAttrMap().get(\"virtualReadOnly\").getValues().isEmpty());\n     }\n@@ -530,7 +530,7 @@ public void issueSYNCOPE453() {\n             groupTO.setRealm(\"/\");\n             groupTO.getVirAttrs().add(attrTO(rvirtualdata.getKey(), \"ml@group.it\"));\n             groupTO.getResources().add(RESOURCE_NAME_LDAP);\n-            groupTO = createGroup(groupTO).getAny();\n+            groupTO = createGroup(groupTO).getEntity();\n             groupKey = groupTO.getKey();\n             assertEquals(1, groupTO.getVirAttrs().size());\n             assertEquals(\"ml@group.it\", groupTO.getVirAttrs().iterator().next().getValues().get(0));\n@@ -553,7 +553,7 @@ public void issueSYNCOPE453() {\n             assertEquals(2, result.getPropagationStatuses().size());\n             assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n             assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(1).getStatus());\n-            userTO = result.getAny();\n+            userTO = result.getEntity();\n \n             JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n \n@@ -586,7 +586,7 @@ public void issueSYNCOPE459() {\n         userTO.getMemberships().clear();\n         userTO.getVirAttrs().clear();\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n \n         assertNotNull(userTO.getVirAttrMap().get(\"virtualReadOnly\"));\n     }\n@@ -604,7 +604,7 @@ public void issueSYNCOPE501() {\n         // virtualdata is mapped with username\n         userTO.getVirAttrs().add(attrTO(\"virtualdata\", \"syncope501@apache.org\"));\n \n-        userTO = createUser(userTO).getAny();\n+        userTO = createUser(userTO).getEntity();\n \n         assertNotNull(userTO.getVirAttrMap().get(\"virtualdata\"));\n         assertEquals(\"syncope501@apache.org\", userTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n@@ -615,7 +615,7 @@ public void issueSYNCOPE501() {\n         // change virtual attribute value\n         userPatch.getVirAttrs().add(attrTO(\"virtualdata\", \"syncope501_updated@apache.org\"));\n \n-        userTO = updateUser(userPatch).getAny();\n+        userTO = updateUser(userPatch).getEntity();\n         assertNotNull(userTO);\n \n         // 3. check that user virtual attribute has really been updated \n@@ -680,7 +680,7 @@ public boolean evaluate(final MappingItemTO item) {\n             // assign resource-ldap691 to user\n             userTO.getResources().add(ldap.getKey());\n             // save user\n-            userTO = createUser(userTO).getAny();\n+            userTO = createUser(userTO).getEntity();\n             // make std controls about user\n             assertNotNull(userTO);\n             assertTrue(ldap.getKey().equals(userTO.getResources().iterator().next()));\n@@ -699,7 +699,7 @@ public boolean evaluate(final MappingItemTO item) {\n                     value(\"test@issue691.dom4.org\").\n                     build());\n \n-            UserTO updated = updateUser(userPatch).getAny();\n+            UserTO updated = updateUser(userPatch).getEntity();\n             assertNotNull(updated);\n             assertEquals(2, updated.getVirAttrs().iterator().next().getValues().size(), 0);\n             assertTrue(updated.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom3.org\"));"}]}