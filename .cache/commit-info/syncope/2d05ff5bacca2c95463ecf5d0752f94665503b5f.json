{"sha":"2d05ff5bacca2c95463ecf5d0752f94665503b5f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJkMDVmZjViYWNjYTJjOTU0NjNlY2Y1ZDA3NTJmOTQ2NjU1MDNiNWY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-10-09T09:48:42Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-10-09T09:48:42Z"},"message":"[SYNCOPE-562] Fixing ConfDAO implementation\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_2_X@1630356 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"399bc0d7c47be2ba5523fd3d7bbbf50db510df94","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/399bc0d7c47be2ba5523fd3d7bbbf50db510df94"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2d05ff5bacca2c95463ecf5d0752f94665503b5f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2d05ff5bacca2c95463ecf5d0752f94665503b5f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2d05ff5bacca2c95463ecf5d0752f94665503b5f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2d05ff5bacca2c95463ecf5d0752f94665503b5f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"80e51e11395fe21c59935e5457d0abcace5a6093","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/80e51e11395fe21c59935e5457d0abcace5a6093","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/80e51e11395fe21c59935e5457d0abcace5a6093"}],"stats":{"total":30,"additions":24,"deletions":6},"files":[{"sha":"b0fdf7e205f49d75eb0f08922046f1c15b860627","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/ConfDAOImpl.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2d05ff5bacca2c95463ecf5d0752f94665503b5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConfDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2d05ff5bacca2c95463ecf5d0752f94665503b5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConfDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConfDAOImpl.java?ref=2d05ff5bacca2c95463ecf5d0752f94665503b5f","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.core.persistence.beans.conf.CAttr;\n import org.apache.syncope.core.persistence.beans.conf.CSchema;\n import org.apache.syncope.core.persistence.beans.conf.SyncopeConf;\n+import org.apache.syncope.core.persistence.dao.AttrDAO;\n import org.apache.syncope.core.persistence.dao.ConfDAO;\n import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.util.AttributableUtil;\n@@ -35,6 +36,9 @@ public class ConfDAOImpl extends AbstractDAOImpl implements ConfDAO {\n     @Autowired\n     private SchemaDAO schemaDAO;\n \n+    @Autowired\n+    private AttrDAO attrDAO;\n+\n     @Override\n     public SyncopeConf get() {\n         SyncopeConf instance = entityManager.find(SyncopeConf.class, 1L);\n@@ -70,10 +74,19 @@ public CAttr find(final String key, final String defaultValue) {\n \n     @Override\n     public SyncopeConf save(final CAttr attr) {\n-        delete(attr.getSchema().getName());\n-\n         SyncopeConf instance = get();\n+\n+        CAttr old = instance.getAttr(attr.getSchema().getName());\n+        if (old != null && (!attr.getSchema().isUniqueConstraint()\n+                || (!attr.getUniqueValue().getStringValue().equals(old.getUniqueValue().getStringValue())))) {\n+\n+            instance.removeAttr(old);\n+            attrDAO.delete(old.getId(), CAttr.class);\n+        }\n+\n         instance.addAttr(attr);\n+        attr.setOwner(instance);\n+\n         return entityManager.merge(instance);\n     }\n "},{"sha":"3af0e2f662354461f451f43c9f019d5c72311c3f","filename":"core/src/test/java/org/apache/syncope/core/notification/NotificationTest.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2d05ff5bacca2c95463ecf5d0752f94665503b5f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2d05ff5bacca2c95463ecf5d0752f94665503b5f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java?ref=2d05ff5bacca2c95463ecf5d0752f94665503b5f","patch":"@@ -48,9 +48,11 @@\n import org.apache.syncope.core.persistence.beans.Notification;\n import org.apache.syncope.core.persistence.beans.NotificationTask;\n import org.apache.syncope.core.persistence.beans.conf.CAttr;\n+import org.apache.syncope.core.persistence.beans.conf.CSchema;\n import org.apache.syncope.core.persistence.dao.ConfDAO;\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.dao.NotificationDAO;\n+import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n import org.apache.syncope.core.rest.UserTestITCase;\n import org.apache.syncope.core.rest.controller.RoleController;\n@@ -120,6 +122,9 @@ public class NotificationTest {\n     @Autowired\n     private TaskDAO taskDAO;\n \n+    @Autowired\n+    private SchemaDAO schemaDAO;\n+\n     @Autowired\n     private ConfDAO confDAO;\n \n@@ -400,8 +405,8 @@ public void notifyByMailWithRetry() throws Exception {\n         userController.create(userTO, true);\n \n         // 3. Set number of retries\n-        CAttr maxRetries = confDAO.find(\"notification.maxRetries\", \"5\");\n-        maxRetries.getValues().clear();\n+        CAttr maxRetries = new CAttr();\n+        maxRetries.setSchema(schemaDAO.find(\"notification.maxRetries\", CSchema.class));\n         maxRetries.addValue(\"5\", AttributableUtil.getInstance(AttributableType.CONFIGURATION));\n         confDAO.save(maxRetries);\n         confDAO.flush();\n@@ -429,8 +434,8 @@ public void notifyByMailWithRetry() throws Exception {\n         startGreenMail();\n \n         // 8. reset number of retries\n-        maxRetries = confDAO.find(\"notification.maxRetries\", \"5\");\n-        maxRetries.getValues().clear();\n+        maxRetries = new CAttr();\n+        maxRetries.setSchema(schemaDAO.find(\"notification.maxRetries\", CSchema.class));\n         maxRetries.addValue(\"0\", AttributableUtil.getInstance(AttributableType.CONFIGURATION));\n         confDAO.save(maxRetries);\n         confDAO.flush();"}]}