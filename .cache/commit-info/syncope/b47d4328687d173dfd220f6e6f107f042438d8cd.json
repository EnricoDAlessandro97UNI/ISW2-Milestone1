{"sha":"b47d4328687d173dfd220f6e6f107f042438d8cd","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI0N2Q0MzI4Njg3ZDE3M2RmZDIyMGY2ZTZmMTA3ZjA0MjQzOGQ4Y2Q=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-10-10T04:54:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-10-10T06:34:14Z"},"message":"[SYNCOPE-956] Protecting delete when Implementation is in use + refining Pull correlation rules","tree":{"sha":"0740ae664fe506fff41b169d8893c3a826dff325","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0740ae664fe506fff41b169d8893c3a826dff325"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b47d4328687d173dfd220f6e6f107f042438d8cd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b47d4328687d173dfd220f6e6f107f042438d8cd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b47d4328687d173dfd220f6e6f107f042438d8cd","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b47d4328687d173dfd220f6e6f107f042438d8cd/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9889072252105c0f3c029ae188a12ead3aff542f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9889072252105c0f3c029ae188a12ead3aff542f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9889072252105c0f3c029ae188a12ead3aff542f"}],"stats":{"total":866,"additions":635,"deletions":231},"files":[{"sha":"4bdba0d7024a72f8ee4de4a1d446bf6b0751f4f4","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyResultManager.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -103,12 +103,10 @@ public void printPullPolicy(final PullPolicyTO policyTO) {\n         System.out.println(\"    description: \" + policyTO.getDescription());\n         System.out.println(\"    resources : \" + policyTO.getUsedByResources().toString());\n         System.out.println(\"    realms : \" + policyTO.getUsedByRealms().toString());\n-        if (policyTO.getSpecification() != null) {\n-            System.out.println(\"    conflict resolution action: \"\n-                    + policyTO.getSpecification().getConflictResolutionAction().name());\n-            System.out.println(\"    correlation rule : \"\n-                    + policyTO.getSpecification().getCorrelationRules().toString());\n-        }\n+        System.out.println(\"    conflict resolution action: \"\n+                + policyTO.getConflictResolutionAction().name());\n+        System.out.println(\"    correlation rules : \"\n+                + policyTO.getCorrelationRules().toString());\n         System.out.println(\"\");\n     }\n "},{"sha":"c964c290899cf89b6f7c132f0c5e4483f29d8a07","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceHistoryConfDirectoryPanel.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import static org.apache.syncope.client.console.panels.DirectoryPanel.LOG;\n-\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;"},{"sha":"4280996c90e0a902de43fa3877e002c2e63d367e","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicySpecModalPanel.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -81,15 +81,15 @@ public PolicySpecModalPanel(\n         add(new AjaxDropDownChoicePanel<>(\n                 \"conflictResolutionAction\",\n                 \"conflictResolutionAction\",\n-                new PropertyModel<>(policyTO.getSpecification(), \"conflictResolutionAction\")).\n+                new PropertyModel<>(policyTO, \"conflictResolutionAction\")).\n                 setChoices(Arrays.asList((Serializable[]) ConflictResolutionAction.values())));\n \n-        model = new PropertyModel<List<CorrelationRule>>(policyTO.getSpecification(), \"correlationRules\") {\n+        model = new PropertyModel<List<CorrelationRule>>(policyTO, \"correlationRules\") {\n \n             private static final long serialVersionUID = -8168676563540297301L;\n \n-            private List<CorrelationRule> rules = policyTO.getSpecification().getCorrelationRules().keySet().stream().\n-                    map(rule -> new CorrelationRule(rule, policyTO.getSpecification().getCorrelationRules().get(rule))).\n+            private List<CorrelationRule> rules = policyTO.getCorrelationRules().keySet().stream().\n+                    map(rule -> new CorrelationRule(rule, policyTO.getCorrelationRules().get(rule))).\n                     collect(Collectors.toList());\n \n             @Override\n@@ -99,9 +99,9 @@ public List<CorrelationRule> getObject() {\n \n             @Override\n             public void setObject(final List<CorrelationRule> object) {\n-                policyTO.getSpecification().getCorrelationRules().clear();\n+                policyTO.getCorrelationRules().clear();\n                 rules.forEach(rule -> {\n-                    policyTO.getSpecification().getCorrelationRules().put(rule.getAny(), rule.getRule());\n+                    policyTO.getCorrelationRules().put(rule.getAny(), rule.getRule());\n                 });\n             }\n         };\n@@ -125,9 +125,9 @@ protected CorrelationRulePanel getItemPanel(final ListItem<CorrelationRule> item\n     @Override\n     public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n         try {\n-            getItem().getSpecification().getCorrelationRules().clear();\n+            getItem().getCorrelationRules().clear();\n             model.getObject().forEach(rule -> {\n-                getItem().getSpecification().getCorrelationRules().put(rule.getAny(), rule.getRule());\n+                getItem().getCorrelationRules().put(rule.getAny(), rule.getRule());\n             });\n             restClient.updatePolicy(getItem());\n             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));"},{"sha":"5a29cae5ddef8ce0c6637f20a8c4cb95ea1de925","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyDirectoryPanel.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyDirectoryPanel.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -20,7 +20,6 @@\n \n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n-import org.apache.syncope.common.lib.policy.PullPolicySpec;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n@@ -42,7 +41,6 @@ public PullPolicyDirectoryPanel(final String id, final PageReference pageRef) {\n         super(id, PolicyType.PULL, pageRef);\n \n         final PullPolicyTO defaultItem = new PullPolicyTO();\n-        defaultItem.setSpecification(new PullPolicySpec());\n \n         this.addNewItemPanelBuilder(\n                 new PolicyModalPanelBuilder<>(defaultItem, modal, pageRef), true);"},{"sha":"a6b533803b5f43bd57240e521183876ea01df173","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicySpec.java","status":"removed","additions":0,"deletions":64,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9889072252105c0f3c029ae188a12ead3aff542f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9889072252105c0f3c029ae188a12ead3aff542f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullPolicySpec.java?ref=9889072252105c0f3c029ae188a12ead3aff542f","patch":"@@ -1,64 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.policy;\n-\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.HashMap;\n-import java.util.Map;\n-import javax.xml.bind.annotation.XmlType;\n-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n-import org.apache.syncope.common.lib.AbstractBaseBean;\n-import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n-import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n-\n-@XmlType\n-public class PullPolicySpec extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = -3144027171719498127L;\n-\n-    private ConflictResolutionAction conflictResolutionAction;\n-\n-    /**\n-     * Associates anyTypeKey to either:\n-     * <ol>\n-     * <li>Java class name, implementing {@code PullCorrelationRule}</li>\n-     * <li>JSON array containing plain schema names - this will be used to feed\n-     * {@code PlainAttrsPullCorrelationRule}</li>\n-     * </ol>\n-     */\n-    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n-    @JsonIgnore\n-    private final Map<String, String> correlationRules = new HashMap<>();\n-\n-    public ConflictResolutionAction getConflictResolutionAction() {\n-        return conflictResolutionAction == null\n-                ? ConflictResolutionAction.IGNORE\n-                : conflictResolutionAction;\n-    }\n-\n-    public void setConflictResolutionAction(final ConflictResolutionAction conflictResolutionAction) {\n-        this.conflictResolutionAction = conflictResolutionAction;\n-    }\n-\n-    @JsonProperty\n-    public Map<String, String> getCorrelationRules() {\n-        return correlationRules;\n-    }\n-}"},{"sha":"1ab6000dd21953a61a17444a146f33a127b059cc","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicyTO.java","status":"modified","additions":22,"deletions":5,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullPolicyTO.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -18,23 +18,40 @@\n  */\n package org.apache.syncope.common.lib.policy;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashMap;\n+import java.util.Map;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n \n @XmlRootElement(name = \"pullPolicy\")\n @XmlType\n public class PullPolicyTO extends AbstractPolicyTO {\n \n     private static final long serialVersionUID = 993024634238024242L;\n \n-    private PullPolicySpec specification;\n+    private ConflictResolutionAction conflictResolutionAction;\n \n-    public PullPolicySpec getSpecification() {\n-        return specification;\n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    @JsonIgnore\n+    private final Map<String, String> correlationRules = new HashMap<>();\n+\n+    public ConflictResolutionAction getConflictResolutionAction() {\n+        return conflictResolutionAction == null\n+                ? ConflictResolutionAction.IGNORE\n+                : conflictResolutionAction;\n     }\n \n-    public void setSpecification(final PullPolicySpec specification) {\n-        this.specification = specification;\n+    public void setConflictResolutionAction(final ConflictResolutionAction conflictResolutionAction) {\n+        this.conflictResolutionAction = conflictResolutionAction;\n     }\n \n+    @JsonProperty\n+    public Map<String, String> getCorrelationRules() {\n+        return correlationRules;\n+    }\n }"},{"sha":"c75ab5b54a7da6f205cfdfef01c57f660dde2915","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -72,7 +72,7 @@ public enum ClientExceptionType {\n     RequiredValuesMissing(Response.Status.BAD_REQUEST),\n     RESTValidation(Response.Status.BAD_REQUEST),\n     GroupOwnership(Response.Status.BAD_REQUEST),\n-    InUseByNotifications(Response.Status.BAD_REQUEST),\n+    InUse(Response.Status.BAD_REQUEST),\n     Scheduling(Response.Status.BAD_REQUEST),\n     DelegatedAdministration(Response.Status.FORBIDDEN),\n     Unknown(Response.Status.BAD_REQUEST),"},{"sha":"d4915ceacc74d3f10d721c0668abbc186e09203c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.logic;\n \n-import static org.apache.syncope.core.logic.AbstractLogic.LOG;\n-\n import java.lang.reflect.Method;\n import java.util.Collections;\n import java.util.Date;"},{"sha":"65e629063a14c8b43b4b24790710d1d0decdb5a4","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java","status":"modified","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -29,8 +29,15 @@\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n+import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.provisioning.api.data.ImplementationDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -46,6 +53,27 @@ public class ImplementationLogic extends AbstractTransactionalLogic<Implementati\n     @Autowired\n     private ImplementationDAO implementationDAO;\n \n+    @Autowired\n+    private ReportDAO reportDAO;\n+\n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private TaskDAO taskDAO;\n+\n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private NotificationDAO notificationDAO;\n+\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.IMPLEMENTATION_LIST + \"')\")\n     public List<ImplementationTO> list(final ImplementationType type) {\n         return implementationDAO.find(type).stream().\n@@ -104,6 +132,69 @@ public void delete(final String key) {\n             throw new NotFoundException(key);\n         }\n \n+        boolean inUse = false;\n+        switch (implementation.getType()) {\n+            case REPORTLET:\n+                inUse = !reportDAO.findByReportlet(implementation).isEmpty();\n+                break;\n+\n+            case ACCOUNT_RULE:\n+                inUse = !policyDAO.findByAccountRule(implementation).isEmpty();\n+                break;\n+\n+            case PASSWORD_RULE:\n+                inUse = !policyDAO.findByPasswordRule(implementation).isEmpty();\n+                break;\n+\n+            case ITEM_TRANSFORMER:\n+                inUse = !resourceDAO.findByTransformer(implementation).isEmpty();\n+                break;\n+\n+            case TASKJOB_DELEGATE:\n+                inUse = !taskDAO.findByDelegate(implementation).isEmpty();\n+                break;\n+\n+            case RECON_FILTER_BUILDER:\n+                inUse = !taskDAO.findByReconFilterBuilder(implementation).isEmpty();\n+                break;\n+\n+            case LOGIC_ACTIONS:\n+                inUse = !realmDAO.findByLogicActions(implementation).isEmpty();\n+                break;\n+\n+            case PROPAGATION_ACTIONS:\n+                inUse = !resourceDAO.findByPropagationActions(implementation).isEmpty();\n+                break;\n+\n+            case PULL_ACTIONS:\n+                inUse = !taskDAO.findByPullActions(implementation).isEmpty();\n+                break;\n+\n+            case PUSH_ACTIONS:\n+                inUse = !taskDAO.findByPushActions(implementation).isEmpty();\n+                break;\n+\n+            case PULL_CORRELATION_RULE:\n+                inUse = !policyDAO.findByCorrelationRule(implementation).isEmpty();\n+                break;\n+\n+            case VALIDATOR:\n+                inUse = !plainSchemaDAO.findByValidator(implementation).isEmpty();\n+                break;\n+\n+            case RECIPIENTS_PROVIDER:\n+                inUse = !notificationDAO.findByRecipientsProvider(implementation).isEmpty();\n+                break;\n+\n+            default:\n+        }\n+\n+        if (inUse) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InUse);\n+            sce.getElements().add(\"This implementation is in use\");\n+            throw sce;\n+        }\n+\n         implementationDAO.delete(key);\n     }\n "},{"sha":"3f2b7c834eddd10b13a44eb373d82b3648e4130f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/MailTemplateLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -138,7 +138,7 @@ public MailTemplateTO delete(final String key) {\n \n         List<Notification> notifications = notificationDAO.findByTemplate(mailTemplate);\n         if (!notifications.isEmpty()) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InUseByNotifications);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InUse);\n             sce.getElements().addAll(notifications.stream().map(Entity::getKey).collect(Collectors.toList()));\n             throw sce;\n         }"},{"sha":"d59831cc3185f86cac9b8f0e65fd8615c92b3dd0","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportTemplateLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -150,7 +150,7 @@ public ReportTemplateTO delete(final String key) {\n \n         List<Report> reports = reportDAO.findByTemplate(reportTemplate);\n         if (!reports.isEmpty()) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InUseByNotifications);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InUse);\n             sce.getElements().addAll(reports.stream().map(Entity::getKey).collect(Collectors.toList()));\n             throw sce;\n         }"},{"sha":"ea1ceb887a5c86d5eef883f1a2767f9abe3bdb11","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ExternalResourceDAO.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -20,8 +20,10 @@\n \n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n \n public interface ExternalResourceDAO extends DAO<ExternalResource> {\n@@ -34,6 +36,10 @@ public interface ExternalResourceDAO extends DAO<ExternalResource> {\n \n     List<Provision> findProvisionsByAuxClass(AnyTypeClass anyTypeClass);\n \n+    List<MappingItem> findByTransformer(Implementation transformer);\n+\n+    List<ExternalResource> findByPropagationActions(Implementation propagationActions);\n+\n     List<ExternalResource> findByPolicy(Policy policy);\n \n     List<ExternalResource> findAll();\n@@ -43,4 +49,5 @@ public interface ExternalResourceDAO extends DAO<ExternalResource> {\n     void deleteMapping(String schemaName);\n \n     void delete(String key);\n+\n }"},{"sha":"48f410dbaef376669d769bccc498ec19a46ebaaf","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/NotificationDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FNotificationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FNotificationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FNotificationDAO.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n \n@@ -28,6 +29,8 @@ public interface NotificationDAO extends DAO<Notification> {\n \n     List<Notification> findByTemplate(MailTemplate template);\n \n+    List<Notification> findByRecipientsProvider(Implementation recipientsProvider);\n+\n     List<Notification> findAll();\n \n     Notification save(Notification notification);"},{"sha":"7f066acab40c9355da1862f8a28c2015353df592","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainSchemaDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainSchemaDAO.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -19,11 +19,13 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n public interface PlainSchemaDAO extends SchemaDAO<PlainSchema> {\n \n     <T extends PlainAttr<?>> List<T> findAttrs(PlainSchema schema, Class<T> reference);\n \n+    List<PlainSchema> findByValidator(Implementation validator);\n }"},{"sha":"456850c7b13a359b50cd027005d38941a55f6bc6","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PolicyDAO.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -19,21 +19,31 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n \n public interface PolicyDAO extends DAO<Policy> {\n \n     <T extends Policy> T find(String key);\n \n     <T extends Policy> List<T> find(Class<T> reference);\n \n+    List<AccountPolicy> findByAccountRule(Implementation accountRule);\n+\n+    List<PasswordPolicy> findByPasswordRule(Implementation passwordRule);\n+\n+    List<PullPolicy> findByCorrelationRule(Implementation correlationRule);\n+\n     List<AccountPolicy> findByResource(ExternalResource resource);\n \n     List<Policy> findAll();\n \n     <T extends Policy> T save(T policy);\n \n     <T extends Policy> void delete(T policy);\n+\n }"},{"sha":"c838338720f8884f13e4482a10a70aba57861086","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RealmDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import java.util.regex.Pattern;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -40,6 +41,8 @@ public interface RealmDAO extends DAO<Realm> {\n \n     <T extends Policy> List<Realm> findByPolicy(T policy);\n \n+    List<Realm> findByLogicActions(Implementation logicActions);\n+\n     List<Realm> findAncestors(Realm realm);\n \n     List<Realm> findChildren(Realm realm);"},{"sha":"50d2c5ea4c6a78f7c26a13559bfb081b4fac583f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ReportDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportDAO.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -19,13 +19,16 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportTemplate;\n \n public interface ReportDAO extends DAO<Report> {\n \n     Report find(String key);\n \n+    List<Report> findByReportlet(Implementation reportlet);\n+\n     List<Report> findByTemplate(ReportTemplate template);\n \n     List<Report> findAll();"},{"sha":"f61915457b3b6a28d32b4485dbc07a74699f3440","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskDAO.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -22,8 +22,12 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n+import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n+import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n \n public interface TaskDAO extends DAO<Task> {\n@@ -32,6 +36,14 @@ public interface TaskDAO extends DAO<Task> {\n \n     <T extends Task> T find(String key);\n \n+    List<SchedTask> findByDelegate(Implementation delegate);\n+\n+    List<PullTask> findByReconFilterBuilder(Implementation reconFilterBuilder);\n+\n+    List<PullTask> findByPullActions(Implementation pullActions);\n+\n+    List<PushTask> findByPushActions(Implementation pushActions);\n+\n     <T extends Task> List<T> findToExec(TaskType type);\n \n     <T extends Task> List<T> findAll(TaskType type);\n@@ -60,4 +72,5 @@ int count(\n     void delete(Task task);\n \n     void deleteAll(ExternalResource resource, TaskType type);\n+\n }"},{"sha":"69ad1de8b0f06cc30f7d3bb2722d9004e997f046","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/CorrelationRule.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FCorrelationRule.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.policy;\n+\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+\n+public interface CorrelationRule extends Entity {\n+\n+    PullPolicy getPullPolicy();\n+\n+    void setPullPolicy(PullPolicy pullPolicy);\n+\n+    AnyType getAnyType();\n+\n+    void setAnyType(AnyType anyType);\n+\n+    Implementation getImplementation();\n+\n+    void setImplementation(Implementation implementation);\n+}"},{"sha":"6612fe51bcbfcf946e24f4d9017653147a98d1a2","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PullPolicy.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPullPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPullPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPullPolicy.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -18,13 +18,21 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.policy;\n \n-import org.apache.syncope.common.lib.policy.PullPolicySpec;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n \n public interface PullPolicy extends Policy {\n \n-    PullPolicySpec getSpecification();\n+    ConflictResolutionAction getConflictResolutionAction();\n \n-    void setSpecification(PullPolicySpec spec);\n+    void setConflictResolutionAction(ConflictResolutionAction conflictResolutionAction);\n \n+    boolean add(CorrelationRule rule);\n+\n+    Optional<? extends CorrelationRule> getCorrelationRule(AnyType anyType);\n+\n+    List<? extends CorrelationRule> getCorrelationRules();\n }"},{"sha":"530b539cdc94e3c027397b9d1a564dab65df81d8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -38,6 +38,7 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n@@ -195,6 +196,26 @@ public List<Provision> findProvisionsByAuxClass(final AnyTypeClass anyTypeClass)\n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<MappingItem> findByTransformer(final Implementation transformer) {\n+        TypedQuery<MappingItem> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAMappingItem.class.getSimpleName()\n+                + \" e WHERE :transformer MEMBER OF e.transformers\", MappingItem.class);\n+        query.setParameter(\"transformer\", transformer);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public List<ExternalResource> findByPropagationActions(final Implementation propagationActions) {\n+        TypedQuery<ExternalResource> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAExternalResource.class.getSimpleName() + \" e \"\n+                + \"WHERE :propagationActions MEMBER OF e.propagationActions\", ExternalResource.class);\n+        query.setParameter(\"propagationActions\", propagationActions);\n+\n+        return query.getResultList();\n+    }\n+\n     private StringBuilder getByPolicyQuery(final Class<? extends Policy> policyClass) {\n         StringBuilder query = new StringBuilder(\"SELECT e FROM \").\n                 append(JPAExternalResource.class.getSimpleName())."},{"sha":"1005ac7d8254db0a9c98b7cef399f117950d779e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPANotificationDAO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.persistence.jpa.entity.JPANotification;\n@@ -55,6 +56,16 @@ public List<Notification> findByTemplate(final MailTemplate template) {\n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<Notification> findByRecipientsProvider(final Implementation recipientsProvider) {\n+        TypedQuery<Notification> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPANotification.class.getSimpleName()\n+                + \" e WHERE e.recipientsProvider=:recipientsProvider\", Notification.class);\n+        query.setParameter(\"recipientsProvider\", recipientsProvider);\n+\n+        return query.getResultList();\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public List<Notification> findAll() {"},{"sha":"eef9ff1f1c0203e86284a905f46fe5134c57a050","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n@@ -73,6 +74,16 @@ public List<PlainSchema> findByAnyTypeClasses(final Collection<AnyTypeClass> any\n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<PlainSchema> findByValidator(final Implementation validator) {\n+        TypedQuery<PlainSchema> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAPlainSchema.class.getSimpleName()\n+                + \" e WHERE e.validator=:validator\", PlainSchema.class);\n+        query.setParameter(\"validator\", validator);\n+\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public List<PlainSchema> findAll() {\n         TypedQuery<PlainSchema> query = entityManager().createQuery("},{"sha":"38d260fdbd46c864e0513f53040091b2a0eb8bea","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -22,6 +22,7 @@\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n@@ -31,6 +32,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.AbstractPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPACorrelationRule;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushPolicy;\n@@ -69,6 +71,36 @@ public <T extends Policy> List<T> find(final Class<T> reference) {\n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<AccountPolicy> findByAccountRule(final Implementation accountRule) {\n+        TypedQuery<AccountPolicy> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAAccountPolicy.class.getSimpleName() + \" e \"\n+                + \"WHERE :accountRule MEMBER OF e.rules\", AccountPolicy.class);\n+        query.setParameter(\"accountRule\", accountRule);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public List<PasswordPolicy> findByPasswordRule(final Implementation passwordRule) {\n+        TypedQuery<PasswordPolicy> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAPasswordPolicy.class.getSimpleName() + \" e \"\n+                + \"WHERE :passwordRule MEMBER OF e.rules\", PasswordPolicy.class);\n+        query.setParameter(\"passwordRule\", passwordRule);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public List<PullPolicy> findByCorrelationRule(final Implementation correlationRule) {\n+        TypedQuery<PullPolicy> query = entityManager().createQuery(\n+                \"SELECT DISTINCT e.pullPolicy FROM \" + JPACorrelationRule.class.getSimpleName() + \" e \"\n+                + \"WHERE e.implementation=:correlationRule\", PullPolicy.class);\n+        query.setParameter(\"correlationRule\", correlationRule);\n+\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public List<AccountPolicy> findByResource(final ExternalResource resource) {\n         TypedQuery<AccountPolicy> query = entityManager().createQuery("},{"sha":"3594b70dabb01f7ad359a0b44f13440e96c6921d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -151,6 +152,16 @@ public <T extends Policy> List<Realm> findByPolicy(final T policy) {\n         return result;\n     }\n \n+    @Override\n+    public List<Realm> findByLogicActions(final Implementation logicActions) {\n+        TypedQuery<Realm> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPARealm.class.getSimpleName() + \" e \"\n+                + \"WHERE :logicActions MEMBER OF e.actions\", Realm.class);\n+        query.setParameter(\"logicActions\", logicActions);\n+\n+        return query.getResultList();\n+    }\n+\n     private void findAncestors(final List<Realm> result, final Realm realm) {\n         if (realm.getParent() != null && !result.contains(realm.getParent())) {\n             result.add(realm.getParent());"},{"sha":"a281e2b26f45a41a26d0c07120226a2493a8043c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportDAO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportDAO.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportTemplate;\n import org.apache.syncope.core.persistence.jpa.entity.JPAReport;\n@@ -36,6 +37,15 @@ public Report find(final String key) {\n         return entityManager().find(JPAReport.class, key);\n     }\n \n+    @Override\n+    public List<Report> findByReportlet(final Implementation reportlet) {\n+        TypedQuery<Report> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAReport.class.getSimpleName() + \" e \"\n+                + \"WHERE :reportlet MEMBER OF e.reportlets\", Report.class);\n+        query.setParameter(\"reportlet\", reportlet);\n+        return query.getResultList();\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public List<Report> findByTemplate(final ReportTemplate template) {"},{"sha":"792a661982e62d3ef456a4dea721be03addc70f5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -21,14 +21,19 @@\n import java.util.Collections;\n import java.util.List;\n import javax.persistence.Query;\n+import javax.persistence.TypedQuery;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n+import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n+import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPANotificationTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPropagationTask;\n@@ -81,6 +86,46 @@ public <T extends Task> T find(final String key) {\n         return (T) entityManager().find(AbstractTask.class, key);\n     }\n \n+    @Override\n+    public List<SchedTask> findByDelegate(final Implementation delegate) {\n+        TypedQuery<SchedTask> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPASchedTask.class.getSimpleName()\n+                + \" e WHERE e.jobDelegate=:delegate\", SchedTask.class);\n+        query.setParameter(\"delegate\", delegate);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public List<PullTask> findByReconFilterBuilder(final Implementation reconFilterBuilder) {\n+        TypedQuery<PullTask> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAPullTask.class.getSimpleName()\n+                + \" e WHERE e.reconFilterBuilder=:reconFilterBuilder\", PullTask.class);\n+        query.setParameter(\"reconFilterBuilder\", reconFilterBuilder);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public List<PullTask> findByPullActions(final Implementation pullActions) {\n+        TypedQuery<PullTask> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAPullTask.class.getSimpleName() + \" e \"\n+                + \"WHERE :pullActions MEMBER OF e.actions\", PullTask.class);\n+        query.setParameter(\"pullActions\", pullActions);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public List<PushTask> findByPushActions(final Implementation pushActions) {\n+        TypedQuery<PushTask> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAPushTask.class.getSimpleName() + \" e \"\n+                + \"WHERE :pushActions MEMBER OF e.actions\", PushTask.class);\n+        query.setParameter(\"pushActions\", pushActions);\n+\n+        return query.getResultList();\n+    }\n+\n     private <T extends Task> StringBuilder buildFindAllQuery(final TaskType type) {\n         StringBuilder builder = new StringBuilder(\"SELECT t FROM \").\n                 append(getEntityReference(type).getSimpleName())."},{"sha":"fe3a0370d6863028b265b3c3b74f08134d72ad76","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -128,8 +128,10 @@\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPACorrelationRule;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResourceHistoryConf;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnitItem;\n \n@@ -159,6 +161,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAPushPolicy();\n         } else if (reference.equals(PullPolicy.class)) {\n             result = (E) new JPAPullPolicy();\n+        } else if (reference.equals(CorrelationRule.class)) {\n+            result = (E) new JPACorrelationRule();\n         } else if (reference.equals(AnyTypeClass.class)) {\n             result = (E) new JPAAnyTypeClass();\n         } else if (reference.equals(AnyType.class)) {"},{"sha":"aec4e9b1a2708417eca3414f8c09d7691d0c6524","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPANotification.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -33,7 +33,6 @@\n import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n-import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n@@ -76,7 +75,7 @@ public class JPANotification extends AbstractGeneratedKeyEntity implements Notif\n     @NotNull\n     private String recipientAttrName;\n \n-    @OneToOne\n+    @ManyToOne\n     private JPAImplementation recipientsProvider;\n \n     @NotNull"},{"sha":"d4c7bb7d1e3406791361cc8b9544dcecb82111d1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPlainSchema.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -81,9 +81,6 @@ public class JPAPlainSchema extends AbstractSchema implements PlainSchema {\n     @Column(nullable = true)\n     private String conversionPattern;\n \n-    @Column(nullable = true)\n-    private String validatorClass;\n-\n     @Column(nullable = true)\n     @Lob\n     private String enumerationValues;"},{"sha":"7b4bb1cefafe415734f6b67563d6b9b7b9d22020","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPACorrelationRule.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPACorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPACorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPACorrelationRule.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n+\n+@Entity\n+@Table(name = JPACorrelationRule.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"pullPolicy_id\", \"anyType_id\" }))\n+public class JPACorrelationRule extends AbstractGeneratedKeyEntity implements CorrelationRule {\n+\n+    private static final long serialVersionUID = 4276417265524083919L;\n+\n+    public static final String TABLE = \"CorrelationRule\";\n+\n+    @ManyToOne(optional = false)\n+    private JPAPullPolicy pullPolicy;\n+\n+    @ManyToOne(optional = false)\n+    private JPAAnyType anyType;\n+\n+    @ManyToOne(optional = false)\n+    private JPAImplementation implementation;\n+\n+    @Override\n+    public PullPolicy getPullPolicy() {\n+        return pullPolicy;\n+    }\n+\n+    @Override\n+    public void setPullPolicy(final PullPolicy pullPolicy) {\n+        checkType(pullPolicy, JPAPullPolicy.class);\n+        this.pullPolicy = (JPAPullPolicy) pullPolicy;\n+    }\n+\n+    @Override\n+    public AnyType getAnyType() {\n+        return anyType;\n+    }\n+\n+    @Override\n+    public void setAnyType(final AnyType anyType) {\n+        checkType(anyType, JPAAnyType.class);\n+        this.anyType = (JPAAnyType) anyType;\n+    }\n+\n+    @Override\n+    public Implementation getImplementation() {\n+        return implementation;\n+    }\n+\n+    @Override\n+    public void setImplementation(final Implementation implementation) {\n+        checkType(implementation, JPAImplementation.class);\n+        checkImplementationType(implementation, ImplementationType.PULL_CORRELATION_RULE);\n+        this.implementation = (JPAImplementation) implementation;\n+    }\n+\n+}"},{"sha":"b7d0720dfcef4a32ad7d0e968c4215beaa4c7bdd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPullPolicy.java","status":"modified","additions":39,"deletions":9,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPullPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPullPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPullPolicy.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -18,11 +18,20 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.policy;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n-import javax.persistence.Lob;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n+import javax.persistence.OneToMany;\n import javax.persistence.Table;\n-import org.apache.syncope.common.lib.policy.PullPolicySpec;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n \n @Entity\n@@ -33,16 +42,37 @@ public class JPAPullPolicy extends AbstractPolicy implements PullPolicy {\n \n     public static final String TABLE = \"PullPolicy\";\n \n-    @Lob\n-    private String specification;\n+    @Enumerated(EnumType.STRING)\n+    @NotNull\n+    private ConflictResolutionAction conflictResolutionAction;\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"pullPolicy\")\n+    private List<JPACorrelationRule> correlationRules = new ArrayList<>();\n+\n+    @Override\n+    public ConflictResolutionAction getConflictResolutionAction() {\n+        return conflictResolutionAction;\n+    }\n+\n+    @Override\n+    public void setConflictResolutionAction(final ConflictResolutionAction conflictResolutionAction) {\n+        this.conflictResolutionAction = conflictResolutionAction;\n+    }\n+\n+    @Override\n+    public boolean add(final CorrelationRule filter) {\n+        checkType(filter, JPACorrelationRule.class);\n+        return this.correlationRules.add((JPACorrelationRule) filter);\n+    }\n \n     @Override\n-    public PullPolicySpec getSpecification() {\n-        return POJOHelper.deserialize(specification, PullPolicySpec.class);\n+    public Optional<? extends CorrelationRule> getCorrelationRule(final AnyType anyType) {\n+        return correlationRules.stream().\n+                filter(rule -> anyType != null && anyType.equals(rule.getAnyType())).findFirst();\n     }\n \n     @Override\n-    public void setSpecification(final PullPolicySpec policy) {\n-        this.specification = POJOHelper.serialize(policy);\n+    public List<? extends CorrelationRule> getCorrelationRules() {\n+        return correlationRules;\n     }\n }"},{"sha":"434e92155a8ba19744c797808e22fc966dd87544","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPushTaskAnyFilter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTaskAnyFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTaskAnyFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTaskAnyFilter.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -38,10 +38,10 @@ public class JPAPushTaskAnyFilter extends AbstractGeneratedKeyEntity implements\n \n     public static final String TABLE = \"PushTaskAnyFilter\";\n \n-    @ManyToOne\n+    @ManyToOne(optional = false)\n     private JPAPushTask pushTask;\n \n-    @ManyToOne\n+    @ManyToOne(optional = false)\n     private JPAAnyType anyType;\n \n     @NotNull"},{"sha":"eea08c991c4d20010f6432430c43335f97c2fe6f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ImplementationTest.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -43,7 +43,7 @@ public void findAll() {\n         List<Implementation> implementations = implementationDAO.findAll();\n         assertFalse(implementations.isEmpty());\n \n-        assertEquals(15, implementations.size());\n+        assertEquals(16, implementations.size());\n \n         implementations = implementationDAO.find(ImplementationType.PULL_ACTIONS);\n         assertEquals(1, implementations.size());\n@@ -65,6 +65,9 @@ public void findAll() {\n \n         implementations = implementationDAO.find(ImplementationType.VALIDATOR);\n         assertEquals(1, implementations.size());\n+\n+        implementations = implementationDAO.find(ImplementationType.PULL_CORRELATION_RULE);\n+        assertEquals(1, implementations.size());\n     }\n \n     @Test"},{"sha":"abf6ea3f94305aaae0b90c5ce8021ac10b03ea8c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":34,"deletions":16,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -27,9 +27,8 @@\n import java.util.List;\n import java.util.UUID;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n-import org.apache.syncope.common.lib.policy.PullPolicySpec;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n@@ -39,11 +38,13 @@\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n+import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.provisioning.api.pushpull.PullCorrelationRule;\n \n @Transactional(\"Master\")\n public class PolicyTest extends AbstractTest {\n@@ -69,12 +70,9 @@ public void findByKey() {\n         PullPolicy policy = policyDAO.find(\"880f8553-069b-4aed-9930-2cd53873f544\");\n         assertNotNull(policy);\n \n-        PullPolicySpec spec = policy.getSpecification();\n-        assertNotNull(spec);\n-\n-        String rule = spec.getCorrelationRules().get(AnyTypeKind.USER.name());\n+        CorrelationRule rule = policy.getCorrelationRule(anyTypeDAO.findUser()).orElse(null);\n         assertNotNull(rule);\n-        String[] plainSchemas = POJOHelper.deserialize(rule, String[].class);\n+        String[] plainSchemas = POJOHelper.deserialize(rule.getImplementation().getBody(), String[].class);\n         assertNotNull(plainSchemas);\n         assertEquals(2, plainSchemas.length);\n         assertTrue(ArrayUtils.contains(plainSchemas, \"username\"));\n@@ -91,25 +89,45 @@ public void findByType() {\n     @Test\n     public void create() {\n         PullPolicy policy = entityFactory.newEntity(PullPolicy.class);\n+        policy.setConflictResolutionAction(ConflictResolutionAction.IGNORE);\n+        policy.setDescription(\"Pull policy\");\n \n         final String pullURuleName = \"net.tirasa.pull.correlation.TirasaURule\";\n         final String pullGRuleName = \"net.tirasa.pull.correlation.TirasaGRule\";\n \n-        PullPolicySpec pullPolicySpec = new PullPolicySpec();\n-\n-        pullPolicySpec.getCorrelationRules().put(anyTypeDAO.findUser().getKey(), pullURuleName);\n-        pullPolicySpec.getCorrelationRules().put(anyTypeDAO.findGroup().getKey(), pullGRuleName);\n-\n-        policy.setSpecification(pullPolicySpec);\n-        policy.setDescription(\"Pull policy\");\n+        Implementation impl1 = entityFactory.newEntity(Implementation.class);\n+        impl1.setKey(pullURuleName);\n+        impl1.setEngine(ImplementationEngine.JAVA);\n+        impl1.setType(ImplementationType.PULL_CORRELATION_RULE);\n+        impl1.setBody(PullCorrelationRule.class.getName());\n+        impl1 = implementationDAO.save(impl1);\n+\n+        CorrelationRule rule1 = entityFactory.newEntity(CorrelationRule.class);\n+        rule1.setAnyType(anyTypeDAO.findUser());\n+        rule1.setPullPolicy(policy);\n+        rule1.setImplementation(impl1);\n+        policy.add(rule1);\n+\n+        Implementation impl2 = entityFactory.newEntity(Implementation.class);\n+        impl2.setKey(pullGRuleName);\n+        impl2.setEngine(ImplementationEngine.JAVA);\n+        impl2.setType(ImplementationType.PULL_CORRELATION_RULE);\n+        impl2.setBody(PullCorrelationRule.class.getName());\n+        impl2 = implementationDAO.save(impl2);\n+\n+        CorrelationRule rule2 = entityFactory.newEntity(CorrelationRule.class);\n+        rule2.setAnyType(anyTypeDAO.findGroup());\n+        rule2.setPullPolicy(policy);\n+        rule2.setImplementation(impl2);\n+        policy.add(rule2);\n \n         policy = policyDAO.save(policy);\n \n         assertNotNull(policy);\n         assertEquals(pullURuleName,\n-                policy.getSpecification().getCorrelationRules().get(anyTypeDAO.findUser().getKey()));\n+                policy.getCorrelationRule(anyTypeDAO.findUser()).get().getImplementation().getKey());\n         assertEquals(pullGRuleName,\n-                policy.getSpecification().getCorrelationRules().get(anyTypeDAO.findGroup().getKey()));\n+                policy.getCorrelationRule(anyTypeDAO.findGroup()).get().getImplementation().getKey());\n     }\n \n     @Test"},{"sha":"5205ffe2728f615c913514810023f6edc4848c76","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -279,6 +279,7 @@ public void issueSYNCOPE144() {\n         assertNotNull(resource);\n \n         Implementation pullActions = entityFactory.newEntity(Implementation.class);\n+        pullActions.setKey(\"syncope144\");\n         pullActions.setEngine(ImplementationEngine.JAVA);\n         pullActions.setType(ImplementationType.PULL_ACTIONS);\n         pullActions.setBody(PullActions.class.getName());"},{"sha":"2a84a81a95f5a043166bb149f6ead523d11e4d09","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":10,"deletions":7,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -170,15 +170,11 @@ under the License.\n                    attribute_id=\"ae7ae53a-74cf-48b0-9a57-6d2c94928e60\" longValue=\"10\"/>\n   \n   <!-- sample policies -->\n-  <PullPolicy id=\"66691e96-285f-4464-bc19-e68384ea4c85\" description=\"a pull policy\"\n-              specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n   <PasswordPolicy id=\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\" description=\"a password policy\"\n                   historyLength=\"1\" allowNullPassword=\"1\"/>\n   <Implementation id=\"DefaultPasswordRuleConf1\" type=\"PASSWORD_RULE\" engine=\"JAVA\"\n                   body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":8,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":false,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <PasswordPolicyRule policy_id=\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\" implementation_id=\"DefaultPasswordRuleConf1\"/>\n-  <PullPolicy id=\"880f8553-069b-4aed-9930-2cd53873f544\" description=\"another pull policy\"\n-              specification='{\"conflictResolutionAction\":\"ALL\",\"correlationRules\":{\"USER\":\"[\\\"username\\\",\\\"firstname\\\"]\"}}'/>\n   <PasswordPolicy id=\"986d1236-3ac5-4a19-810c-5ab21d79cba1\"\n                   description=\"sample password policy\" historyLength=\"0\" allowNullPassword=\"1\"/> \n   <Implementation id=\"DefaultPasswordRuleConf2\" type=\"PASSWORD_RULE\"  engine=\"JAVA\"\n@@ -194,13 +190,10 @@ under the License.\n   <Implementation id=\"DefaultAccountRuleConf2\" type=\"ACCOUNT_RULE\"  engine=\"JAVA\"\n                   body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAccountRuleConf\",\"maxLength\":0,\"minLength\":4,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <AccountPolicyRule policy_id=\"06e2ed52-6966-44aa-a177-a0ca7434201f\" implementation_id=\"DefaultAccountRuleConf2\"/>\n-  <PullPolicy id=\"4ad10d94-e002-4b3f-b771-16089cc71da9\" description=\"pull policy 1\" specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n   <PasswordPolicy id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" description=\"sample password policy\" historyLength=\"0\" allowNullPassword=\"0\"/> \n   <Implementation id=\"DefaultPasswordRuleConf3\" type=\"PASSWORD_RULE\" engine=\"JAVA\"\n                   body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <PasswordPolicyRule policy_id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" implementation_id=\"DefaultPasswordRuleConf3\"/>\n-  <PullPolicy id=\"9454b0d7-2610-400a-be82-fc23cf553dd6\" description=\"pull policy for java rule\"\n-              specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n \n   <RelationshipType id=\"inclusion\" description=\"Models the act that an object is included in another\"/>\n   <RelationshipType id=\"neighborhood\" description=\"Models the act that an object is near another\"/>\n@@ -638,6 +631,16 @@ under the License.\n   <GPlainAttr id=\"22690472-ed3f-4972-8979-4c9251fab044\" owner_id=\"ba9ed509-b1f5-48ab-a334-c8530a6422dc\" schema_id=\"title\"/>\n   <GPlainAttrValue attribute_id=\"22690472-ed3f-4972-8979-4c9251fab044\" id=\"e16765e6-f806-469e-ae34-1ddf56f2102a\" stringValue=\"r13\"/>\n \n+  <!-- pull policies -->\n+  <PullPolicy id=\"66691e96-285f-4464-bc19-e68384ea4c85\" description=\"a pull policy\" conflictResolutionAction=\"IGNORE\"/>\n+  <PullPolicy id=\"880f8553-069b-4aed-9930-2cd53873f544\" description=\"another pull policy\" conflictResolutionAction=\"ALL\"/>\n+  <Implementation id=\"TestPullCorrelationRule\" type=\"PULL_CORRELATION_RULE\" engine=\"JAVA\"\n+                  body='[\"username\",\"firstname\"]'/>\n+  <CorrelationRule id=\"10e3d196-7486-4c88-aefd-59e40d93a0c1\" pullPolicy_id=\"880f8553-069b-4aed-9930-2cd53873f544\" \n+                   anyType_id=\"USER\" implementation_id=\"TestPullCorrelationRule\"/>\n+  <PullPolicy id=\"4ad10d94-e002-4b3f-b771-16089cc71da9\" description=\"pull policy 1\" conflictResolutionAction=\"IGNORE\"/>\n+  <PullPolicy id=\"9454b0d7-2610-400a-be82-fc23cf553dd6\" description=\"pull policy for java rule\" conflictResolutionAction=\"IGNORE\"/>\n+\n   <ConnInstance id=\"88a7a819-dab5-46b4-9b90-0b9769eabdb8\" displayName=\"ConnInstance100\"\n                 adminRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n                 location=\"${connid.location}\""},{"sha":"fe826f41ad8b7a56a9be7f2b302a8ab1f0ca9f74","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":29,"deletions":13,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -19,12 +19,10 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import java.util.stream.Collectors;\n-import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n-import org.apache.syncope.common.lib.policy.PullPolicySpec;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -39,6 +37,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -133,24 +132,35 @@ private <T extends Policy> T getPolicy(final T policy, final AbstractPolicyTO po\n             PullPolicy pullPolicy = PullPolicy.class.cast(result);\n             PullPolicyTO pullPolicyTO = PullPolicyTO.class.cast(policyTO);\n \n-            PullPolicySpec pullPolicySpec = SerializationUtils.clone(pullPolicyTO.getSpecification());\n-            pullPolicySpec.getCorrelationRules().clear();\n-            pullPolicyTO.getSpecification().getCorrelationRules().entrySet().forEach(entry -> {\n+            pullPolicy.setConflictResolutionAction(pullPolicyTO.getConflictResolutionAction());\n+\n+            pullPolicyTO.getCorrelationRules().entrySet().forEach(entry -> {\n                 AnyType anyType = anyTypeDAO.find(entry.getKey());\n                 if (anyType == null) {\n-                    LOG.debug(\"Invalid \" + AnyType.class.getSimpleName() + \" {}, ignoring...\",\n-                            entry.getKey());\n+                    LOG.debug(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());\n                 } else {\n-                    Implementation rule = implementationDAO.find(entry.getValue());\n-                    if (rule == null) {\n+                    CorrelationRule correlationRule = pullPolicy.getCorrelationRule(anyType).orElse(null);\n+                    if (correlationRule == null) {\n+                        correlationRule = entityFactory.newEntity(CorrelationRule.class);\n+                        correlationRule.setAnyType(anyTypeDAO.find(entry.getKey()));\n+                        correlationRule.setPullPolicy(pullPolicy);\n+                        pullPolicy.add(correlationRule);\n+                    }\n+\n+                    Implementation implementation = implementationDAO.find(entry.getValue());\n+                    if (implementation == null) {\n                         LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n                                 entry.getValue());\n                     } else {\n-                        pullPolicySpec.getCorrelationRules().put(anyType.getKey(), rule.getKey());\n+                        correlationRule.setImplementation(implementation);\n                     }\n                 }\n             });\n-            pullPolicy.setSpecification(pullPolicySpec);\n+            // remove all rules not contained in the TO\n+            pullPolicy.getCorrelationRules().removeAll(\n+                    pullPolicy.getCorrelationRules().stream().filter(anyFilter\n+                            -> !pullPolicyTO.getCorrelationRules().containsKey(anyFilter.getAnyType().getKey())).\n+                            collect(Collectors.toList()));\n         }\n \n         if (result != null) {\n@@ -199,8 +209,14 @@ public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n             accountPolicyTO.getPassthroughResources().addAll(\n                     accountPolicy.getResources().stream().map(Entity::getKey).collect(Collectors.toList()));\n         } else if (policy instanceof PullPolicy) {\n-            policyTO = (T) new PullPolicyTO();\n-            ((PullPolicyTO) policyTO).setSpecification(((PullPolicy) policy).getSpecification());\n+            PullPolicy pullPolicy = PullPolicy.class.cast(policy);\n+            PullPolicyTO pullPolicyTO = new PullPolicyTO();\n+            policyTO = (T) pullPolicyTO;\n+\n+            pullPolicyTO.setConflictResolutionAction(((PullPolicy) policy).getConflictResolutionAction());\n+            pullPolicy.getCorrelationRules().forEach(rule -> {\n+                pullPolicyTO.getCorrelationRules().put(rule.getAnyType().getKey(), rule.getImplementation().getKey());\n+            });\n         }\n \n         if (policyTO != null) {"},{"sha":"05d7112e2103af8656b75c3efafa0a3521211ffe","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":4,"deletions":18,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -28,7 +28,7 @@\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.collections.IteratorChain;\n-import org.apache.syncope.common.lib.policy.PullPolicySpec;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -38,7 +38,6 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n import org.quartz.JobExecutionException;\n@@ -182,7 +181,9 @@ protected String doExecuteProvisioning(\n         profile = new ProvisioningProfile<>(connector, pullTask);\n         profile.getActions().addAll(actions);\n         profile.setDryRun(dryRun);\n-        profile.setResAct(getPullPolicySpec(pullTask).getConflictResolutionAction());\n+        profile.setResAct(pullTask.getResource().getPullPolicy() == null\n+                ? ConflictResolutionAction.IGNORE\n+                : pullTask.getResource().getPullPolicy().getConflictResolutionAction());\n \n         latestSyncTokens.clear();\n \n@@ -327,19 +328,4 @@ protected String doExecuteProvisioning(\n         LOG.debug(\"Pull result: {}\", result);\n         return result;\n     }\n-\n-    protected PullPolicySpec getPullPolicySpec(final ProvisioningTask task) {\n-        PullPolicySpec pullPolicySpec;\n-\n-        if (task instanceof PullTask) {\n-            pullPolicySpec = task.getResource().getPullPolicy() == null\n-                    ? null\n-                    : task.getResource().getPullPolicy().getSpecification();\n-        } else {\n-            pullPolicySpec = null;\n-        }\n-\n-        // step required because the call <policy>.getSpecification() could return a null value\n-        return pullPolicySpec == null ? new PullPolicySpec() : pullPolicySpec;\n-    }\n }"},{"sha":"32e21184019aac108153709075acb6c09084db41","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java","status":"modified","additions":18,"deletions":36,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -24,7 +24,6 @@\n import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.policy.PullPolicySpec;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n@@ -40,12 +39,12 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n@@ -274,31 +273,6 @@ private List<String> findByCorrelationRule(\n                 map(Entity::getKey).collect(Collectors.toList());\n     }\n \n-    private PullCorrelationRule getCorrelationRule(final Provision provision, final PullPolicySpec policySpec) {\n-        PullCorrelationRule rule = null;\n-\n-        String pullCorrelationRule = policySpec.getCorrelationRules().get(provision.getAnyType().getKey());\n-        if (pullCorrelationRule != null) {\n-            if (pullCorrelationRule.charAt(0) == '[') {\n-                rule = new PlainAttrsPullCorrelationRule(\n-                        POJOHelper.deserialize(pullCorrelationRule, String[].class), provision);\n-            } else {\n-                Implementation impl = implementationDAO.find(pullCorrelationRule);\n-                if (impl == null) {\n-                    LOG.error(\"Could not find any Implementation matching '{}'\", pullCorrelationRule);\n-                } else {\n-                    try {\n-                        rule = ImplementationManager.build(impl);\n-                    } catch (Exception e) {\n-                        LOG.error(\"While building {}\", impl, e);\n-                    }\n-                }\n-            }\n-        }\n-\n-        return rule;\n-    }\n-\n     /**\n      * Find any objects based on mapped uid value (or previous uid value, if updated).\n      *\n@@ -314,20 +288,28 @@ public List<String> findExisting(\n             final Provision provision,\n             final AnyUtils anyUtils) {\n \n-        PullPolicySpec pullPolicySpec = null;\n-        if (provision.getResource().getPullPolicy() != null) {\n-            pullPolicySpec = provision.getResource().getPullPolicy().getSpecification();\n-        }\n+        Optional<? extends CorrelationRule> correlationRule = provision.getResource().getPullPolicy() == null\n+                ? Optional.empty()\n+                : provision.getResource().getPullPolicy().getCorrelationRule(provision.getAnyType());\n \n-        PullCorrelationRule pullRule = null;\n-        if (pullPolicySpec != null) {\n-            pullRule = getCorrelationRule(provision, pullPolicySpec);\n+        PullCorrelationRule rule = null;\n+        if (correlationRule.isPresent()) {\n+            if (correlationRule.get().getImplementation().getBody().charAt(0) == '[') {\n+                rule = new PlainAttrsPullCorrelationRule(POJOHelper.deserialize(\n+                        correlationRule.get().getImplementation().getBody(), String[].class), provision);\n+            } else {\n+                try {\n+                    rule = ImplementationManager.build(correlationRule.get().getImplementation());\n+                } catch (Exception e) {\n+                    LOG.error(\"While building {}\", correlationRule.get().getImplementation(), e);\n+                }\n+            }\n         }\n \n         try {\n-            return pullRule == null\n+            return rule == null\n                     ? findByConnObjectKeyItem(uid, provision, anyUtils)\n-                    : findByCorrelationRule(connObj, pullRule, anyUtils.getAnyTypeKind());\n+                    : findByCorrelationRule(connObj, rule, anyUtils.getAnyTypeKind());\n         } catch (RuntimeException e) {\n             return Collections.<String>emptyList();\n         }"},{"sha":"b4e243d5c4c8cf1aac810e93294b3e46a6f8fafe","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ImplementationITCase.java","status":"modified","additions":39,"deletions":3,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FImplementationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FImplementationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FImplementationITCase.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -26,10 +26,10 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.ImplementationType;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.ImplementationService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.core.reference.TestPullActions;\n@@ -65,9 +65,45 @@ public void create() {\n         ImplementationTO actual =\n                 getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n         assertNotNull(actual);\n-\n-        implementationTO.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n         assertEquals(actual, implementationTO);\n     }\n \n+    @Test\n+    public void delete() {\n+        ImplementationTO implementationTO = new ImplementationTO();\n+        implementationTO.setKey(UUID.randomUUID().toString());\n+        implementationTO.setEngine(ImplementationEngine.JAVA);\n+        implementationTO.setType(ImplementationType.PULL_ACTIONS);\n+        implementationTO.setBody(TestPullActions.class.getName());\n+\n+        implementationService.create(implementationTO);\n+\n+        PullTaskTO pullTask = taskService.read(AbstractTaskITCase.PULL_TASK_KEY, false);\n+        assertNotNull(pullTask);\n+\n+        int before = pullTask.getActions().size();\n+\n+        pullTask.getActions().add(implementationTO.getKey());\n+        taskService.update(pullTask);\n+\n+        pullTask = taskService.read(AbstractTaskITCase.PULL_TASK_KEY, false);\n+        assertNotNull(pullTask);\n+\n+        int after = pullTask.getActions().size();\n+        assertEquals(before + 1, after);\n+\n+        // fails because the implementation is used\n+        try {\n+            implementationService.delete(implementationTO.getKey());\n+            fail(\"Unexpected\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(e.getType(), ClientExceptionType.InUse);\n+        }\n+\n+        pullTask.getActions().remove(implementationTO.getKey());\n+        taskService.update(pullTask);\n+\n+        implementationService.delete(implementationTO.getKey());\n+    }\n+\n }"},{"sha":"a077358fbb9075257d27d39bd0d8695f6bfde454","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":3,"deletions":24,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -38,10 +38,8 @@\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.lib.policy.PullPolicySpec;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.ImplementationType;\n@@ -72,11 +70,8 @@ private PullPolicyTO buildPullPolicyTO() throws IOException {\n         }\n         assertNotNull(corrRule);\n \n-        PullPolicySpec spec = new PullPolicySpec();\n-        spec.getCorrelationRules().put(AnyTypeKind.USER.name(), corrRule.getKey());\n-\n         PullPolicyTO policy = new PullPolicyTO();\n-        policy.setSpecification(spec);\n+        policy.getCorrelationRules().put(AnyTypeKind.USER.name(), corrRule.getKey());\n         policy.setDescription(\"Pull policy\");\n \n         return policy;\n@@ -116,27 +111,11 @@ public void getPullPolicy() {\n         assertTrue(policyTO.getUsedByRealms().isEmpty());\n     }\n \n-    @Test\n-    public void createMissingDescription() {\n-        PullPolicyTO policy = new PullPolicyTO();\n-        policy.setSpecification(new PullPolicySpec());\n-\n-        try {\n-            createPolicy(policy);\n-            fail(\"This should not happen\");\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidPolicy, e.getType());\n-        }\n-    }\n-\n     @Test\n     public void create() throws IOException {\n-        PullPolicyTO policy = buildPullPolicyTO();\n-\n-        PullPolicyTO policyTO = createPolicy(policy);\n-\n+        PullPolicyTO policyTO = createPolicy(buildPullPolicyTO());\n         assertNotNull(policyTO);\n-        assertEquals(\"TestPullRule\", policyTO.getSpecification().getCorrelationRules().get(AnyTypeKind.USER.name()));\n+        assertEquals(\"TestPullRule\", policyTO.getCorrelationRules().get(AnyTypeKind.USER.name()));\n     }\n \n     @Test"},{"sha":"273509aa21630c9f1d5475c675719124fbb92428","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b47d4328687d173dfd220f6e6f107f042438d8cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b47d4328687d173dfd220f6e6f107f042438d8cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=b47d4328687d173dfd220f6e6f107f042438d8cd","patch":"@@ -772,7 +772,7 @@ public void issueSYNCOPE258() throws IOException {\n         assertNotNull(corrRule);\n \n         PullPolicyTO policyTO = policyService.read(\"9454b0d7-2610-400a-be82-fc23cf553dd6\");\n-        policyTO.getSpecification().getCorrelationRules().put(AnyTypeKind.USER.name(), corrRule.getKey());\n+        policyTO.getCorrelationRules().put(AnyTypeKind.USER.name(), corrRule.getKey());\n         policyService.update(policyTO);\n         // -----------------------------\n "}]}