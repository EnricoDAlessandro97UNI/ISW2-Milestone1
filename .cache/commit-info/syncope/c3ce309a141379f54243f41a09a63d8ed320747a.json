{"sha":"c3ce309a141379f54243f41a09a63d8ed320747a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmMzY2UzMDlhMTQxMzc5ZjU0MjQzZjQxYTA5YTYzZDhlZDMyMDc0N2E=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-07-12T09:46:05Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-07-12T10:23:46Z"},"message":"[SYNCOPE-1336] Pagination and sorting controls added","tree":{"sha":"c5b703d7191655fe8c628fed6e9694c901ea96b2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c5b703d7191655fe8c628fed6e9694c901ea96b2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c3ce309a141379f54243f41a09a63d8ed320747a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c3ce309a141379f54243f41a09a63d8ed320747a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c3ce309a141379f54243f41a09a63d8ed320747a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c3ce309a141379f54243f41a09a63d8ed320747a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"98f8e0ea5e1466e6998cfa781bb93991e0de19e3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/98f8e0ea5e1466e6998cfa781bb93991e0de19e3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/98f8e0ea5e1466e6998cfa781bb93991e0de19e3"}],"stats":{"total":507,"additions":217,"deletions":290},"files":[{"sha":"65e71241f08c37cf9208b05e84d65bed215fa2b6","filename":"client/console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDirectoryPanel.java?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -29,10 +29,10 @@\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.DirectoryDataProvider;\n-import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.client.console.panels.DirectoryPanel;\n import org.apache.syncope.client.console.rest.UserWorkflowRestClient;\n import org.apache.syncope.client.console.approvals.ApprovalDirectoryPanel.ApprovalProvider;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.client.console.layout.FormLayoutInfoUtils;\n import org.apache.syncope.client.console.layout.UserFormLayoutInfo;\n import org.apache.syncope.client.console.pages.BasePage;\n@@ -118,14 +118,15 @@ protected List<IColumn<WorkflowFormTO, String>> getColumns() {\n         columns.add(new PropertyColumn<>(\n                 new ResourceModel(\"taskId\"), \"taskId\", \"taskId\"));\n         columns.add(new PropertyColumn<>(\n-                new ResourceModel(\"key\"), \"key\", \"key\"));\n+                new ResourceModel(\"key\"), \"key\"));\n         columns.add(new PropertyColumn<>(\n-                new ResourceModel(\"username\"), \"username\", \"username\"));\n+                new ResourceModel(\"username\"), \"username\"));\n         columns.add(new DatePropertyColumn<>(\n                 new ResourceModel(\"createTime\"), \"createTime\", \"createTime\"));\n         columns.add(new DatePropertyColumn<>(\n                 new ResourceModel(\"dueDate\"), \"dueDate\", \"dueDate\"));\n-        columns.add(new PropertyColumn<>(new ResourceModel(\"owner\"), \"owner\", \"owner\"));\n+        columns.add(new PropertyColumn<>(\n+                new ResourceModel(\"owner\"), \"owner\", \"owner\"));\n \n         return columns;\n     }\n@@ -258,20 +259,20 @@ public static class ApprovalProvider extends DirectoryDataProvider<WorkflowFormT\n \n         public ApprovalProvider(final int paginatorRows) {\n             super(paginatorRows);\n+\n             setSort(\"createTime\", SortOrder.ASCENDING);\n-            this.comparator = new SortableDataProviderComparator<>(this);\n+            comparator = new SortableDataProviderComparator<>(this);\n         }\n \n         @Override\n         public Iterator<WorkflowFormTO> iterator(final long first, final long count) {\n-            final List<WorkflowFormTO> list = restClient.getForms();\n-            Collections.sort(list, comparator);\n-            return list.subList((int) first, (int) first + (int) count).iterator();\n+            int page = ((int) first / paginatorRows);\n+            return restClient.getForms((page < 0 ? 0 : page) + 1, paginatorRows, getSort()).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.getForms().size();\n+            return restClient.countForms();\n         }\n \n         @Override"},{"sha":"b68ab42e71f89a9ea5614ceaba297ca4e3fe9160","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/TaskDataProvider.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FTaskDataProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FTaskDataProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FTaskDataProvider.java?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -40,10 +40,6 @@ public TaskDataProvider(final int paginatorRows, final TaskType taskType) {\n         this.taskType = taskType;\n     }\n \n-    public SortableDataProviderComparator<T> getComparator() {\n-        return comparator;\n-    }\n-\n     @Override\n     public IModel<T> model(final T object) {\n         return new CompoundPropertyModel<>(object);"},{"sha":"8ccf057f7583730e0edb3d3b323cb66094581d1a","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/UserWorkflowRestClient.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserWorkflowRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserWorkflowRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserWorkflowRestClient.java?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -21,14 +21,24 @@\n import java.util.List;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n+import org.apache.syncope.common.rest.api.beans.WorkflowFormQuery;\n import org.apache.syncope.common.rest.api.service.UserWorkflowService;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n \n public class UserWorkflowRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -4785231164900813921L;\n \n-    public List<WorkflowFormTO> getForms() {\n-        return getService(UserWorkflowService.class).getForms();\n+    public int countForms() {\n+        return getService(UserWorkflowService.class).\n+                getForms(new WorkflowFormQuery.Builder().page(1).size(1).build()).\n+                getTotalCount();\n+    }\n+\n+    public List<WorkflowFormTO> getForms(final int page, final int size, final SortParam<String> sort) {\n+        return getService(UserWorkflowService.class).\n+                getForms(new WorkflowFormQuery.Builder().page(page).size(size).orderBy(toOrderBy(sort)).build()).\n+                getResult();\n     }\n \n     public WorkflowFormTO getFormForUser(final String userKey) {"},{"sha":"f564ac8f02e7b322ab7b2b5d75262c544bed5c78","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/AlertWidget.java","status":"modified","additions":10,"deletions":24,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FAlertWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FAlertWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FAlertWidget.java?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -25,8 +25,6 @@\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.link.AbstractLink;\n-import org.apache.wicket.markup.html.list.ListItem;\n-import org.apache.wicket.markup.html.list.ListView;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n@@ -39,14 +37,14 @@\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AlertWidget.class);\n \n+    protected static final int MAX_SIZE = 5;\n+\n     protected final Label linkAlertsNumber;\n \n     protected final Label headerAlertsNumber;\n \n     protected final WebMarkupContainer latestAlertsList;\n \n-    protected final ListView<T> latestFive;\n-\n     protected IModel<List<T>> latestAlerts;\n \n     public AlertWidget(final String id) {\n@@ -61,7 +59,7 @@ public AlertWidget(final String id) {\n \n             @Override\n             protected Integer load() {\n-                return AlertWidget.this.latestAlerts.getObject().size();\n+                return getLatestAlertsSize();\n             }\n         };\n \n@@ -72,7 +70,7 @@ protected Integer load() {\n             @Override\n             protected List<T> load() {\n                 final List<T> latest = AlertWidget.this.latestAlerts.getObject();\n-                return latest.subList(0, latest.size() < 6 ? latest.size() : 5);\n+                return latest.subList(0, latest.size() <= MAX_SIZE ? latest.size() : MAX_SIZE);\n             }\n         };\n \n@@ -98,31 +96,20 @@ protected void onComponentTag(final ComponentTag tag) {\n         headerAlertsNumber.setOutputMarkupId(true);\n         add(headerAlertsNumber);\n \n+        add(getEventsLink(\"alertsLink\"));\n+\n         latestAlertsList = new WebMarkupContainer(\"latestAlertsList\");\n         latestAlertsList.setOutputMarkupId(true);\n         add(latestAlertsList);\n+    }\n \n-        latestFive = new ListView<T>(\"latestAlerts\", items) {\n-\n-            private static final long serialVersionUID = 4949588177564901031L;\n-\n-            @Override\n-            protected void populateItem(final ListItem<T> item) {\n-                item.add(getAlertLink(\"alert\", item.getModelObject()).setRenderBodyOnly(true));\n-            }\n-        };\n-        latestAlertsList.add(latestFive.setReuseItems(false).setOutputMarkupId(true));\n-\n-        add(getEventsLink(\"alertsLink\"));\n+    protected int getLatestAlertsSize() {\n+        return latestAlerts.getObject().size();\n     }\n \n     protected abstract IModel<List<T>> getLatestAlerts();\n \n-    protected Panel getAlertLink(final String panelid, final T alert) {\n-        return new AlertLink<>(panelid, alert);\n-    }\n-\n-    protected abstract AbstractLink getEventsLink(final String linkid);\n+    protected abstract AbstractLink getEventsLink(String linkid);\n \n     protected abstract Icon getIcon(String iconid);\n \n@@ -135,5 +122,4 @@ public AlertLink(final String id, final T alert) {\n             add(new Label(\"alert\", alert.toString()));\n         }\n     }\n-\n }"},{"sha":"ee47619478b7100289b7dd19b6c090cb77c6b673","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/ApprovalsWidget.java","status":"modified","additions":13,"deletions":72,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FApprovalsWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FApprovalsWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FApprovalsWidget.java?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -22,10 +22,7 @@\n import de.agilecoders.wicket.extensions.markup.html.bootstrap.icon.FontAwesomeIconTypeBuilder;\n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.List;\n-import java.util.stream.Collectors;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.pages.Approvals;\n@@ -35,17 +32,12 @@\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n-import org.apache.wicket.markup.ComponentTag;\n-import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.apache.wicket.markup.html.WebPage;\n-import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.link.AbstractLink;\n import org.apache.wicket.markup.html.link.BookmarkablePageLink;\n-import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.model.util.ListModel;\n import org.apache.wicket.util.time.Duration;\n \n@@ -78,19 +70,27 @@ public final void refreshLatestAlerts(final AjaxRequestTarget target) {\n         latestAlerts.getObject().clear();\n         latestAlerts.getObject().addAll(lastApprovals);\n \n-        linkAlertsNumber.setDefaultModelObject(latestAlerts.getObject().size());\n+        int latestAlertSize = getLatestAlertsSize();\n+        linkAlertsNumber.setDefaultModelObject(latestAlertSize);\n         target.add(linkAlertsNumber);\n \n-        headerAlertsNumber.setDefaultModelObject(latestAlerts.getObject().size());\n+        headerAlertsNumber.setDefaultModelObject(latestAlertSize);\n         target.add(headerAlertsNumber);\n \n-        latestFive.removeAll();\n         target.add(latestAlertsList);\n \n         lastApprovals.clear();\n         lastApprovals.addAll(latestAlerts.getObject());\n     }\n \n+    @Override\n+    protected int getLatestAlertsSize() {\n+        return SyncopeConsoleSession.get().owns(StandardEntitlement.WORKFLOW_FORM_LIST)\n+                && SyncopeConsoleSession.get().owns(StandardEntitlement.WORKFLOW_FORM_READ)\n+                ? restClient.countForms()\n+                : 0;\n+    }\n+\n     @Override\n     protected IModel<List<WorkflowFormTO>> getLatestAlerts() {\n         return new ListModel<WorkflowFormTO>() {\n@@ -103,9 +103,7 @@ public List<WorkflowFormTO> getObject() {\n                 if (SyncopeConsoleSession.get().owns(StandardEntitlement.WORKFLOW_FORM_LIST)\n                         && SyncopeConsoleSession.get().owns(StandardEntitlement.WORKFLOW_FORM_READ)) {\n \n-                    updatedApprovals = restClient.getForms().stream().\n-                            sorted(Comparator.comparing(WorkflowFormTO::getCreateTime)).\n-                            collect(Collectors.toList());\n+                    updatedApprovals = restClient.getForms(1, MAX_SIZE, new SortParam<>(\"createTime\", true));\n                 } else {\n                     updatedApprovals = Collections.<WorkflowFormTO>emptyList();\n                 }\n@@ -115,11 +113,6 @@ public List<WorkflowFormTO> getObject() {\n         };\n     }\n \n-    @Override\n-    protected Panel getAlertLink(final String panelid, final WorkflowFormTO event) {\n-        return new ApprovalsWidget.InnerPanel(panelid, event);\n-    }\n-\n     @Override\n     protected AbstractLink getEventsLink(final String linkid) {\n         BookmarkablePageLink<Approvals> approvals = BookmarkablePageLinkBuilder.build(linkid, Approvals.class);\n@@ -132,56 +125,4 @@ protected Icon getIcon(final String iconid) {\n         return new Icon(iconid,\n                 FontAwesomeIconTypeBuilder.on(FontAwesomeIconTypeBuilder.FontAwesomeGraphic.handshake_o).build());\n     }\n-\n-    public static final class InnerPanel extends Panel {\n-\n-        private static final long serialVersionUID = 3829642687027801451L;\n-\n-        public InnerPanel(final String id, final WorkflowFormTO alert) {\n-            super(id);\n-\n-            final AjaxLink<String> approval = new AjaxLink<String>(\"approval\") {\n-\n-                private static final long serialVersionUID = 7021195294339489084L;\n-\n-                @Override\n-                public void onClick(final AjaxRequestTarget target) {\n-                    // do nothing\n-                }\n-\n-                @Override\n-                protected void onComponentTag(final ComponentTag tag) {\n-                    super.onComponentTag(tag);\n-                    if (StringUtils.isNotBlank(alert.getUsername())) {\n-                        tag.put(\"title\", alert.getUsername().trim());\n-                    }\n-                }\n-            };\n-\n-            add(approval);\n-\n-            approval.add(new Label(\"key\", new ResourceModel(alert.getKey(), alert.getKey())).\n-                    setRenderBodyOnly(true));\n-\n-            approval.add(new Label(\"owner\", alert.getOwner()));\n-\n-            approval.add(new Label(\"createTime\",\n-                    SyncopeConsoleSession.get().getDateFormat().format(alert.getCreateTime())).\n-                    setRenderBodyOnly(true));\n-\n-            WebMarkupContainer dueDateContainer = new WebMarkupContainer(\"dueDateContainer\");\n-            dueDateContainer.setOutputMarkupId(true);\n-            approval.add(dueDateContainer);\n-\n-            if (alert.getDueDate() == null) {\n-                dueDateContainer.add(new Label(\"dueDate\"));\n-                dueDateContainer.setVisible(false);\n-            } else {\n-                dueDateContainer.add(new Label(\"dueDate\",\n-                        SyncopeConsoleSession.get().getDateFormat().format(alert.getDueDate())).\n-                        setRenderBodyOnly(true));\n-            }\n-        }\n-\n-    }\n }"},{"sha":"79e0ec4743d6a18a171dac0c8ca0ef43e2b85112","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/RemediationsWidget.java","status":"modified","additions":3,"deletions":47,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget.java?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -34,14 +34,10 @@\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n-import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.html.WebPage;\n-import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.link.AbstractLink;\n import org.apache.wicket.markup.html.link.BookmarkablePageLink;\n-import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.util.ListModel;\n import org.apache.wicket.util.time.Duration;\n@@ -75,13 +71,13 @@ public final void refreshLatestAlerts(final AjaxRequestTarget target) {\n         latestAlerts.getObject().clear();\n         latestAlerts.getObject().addAll(lastRemediations);\n \n-        linkAlertsNumber.setDefaultModelObject(latestAlerts.getObject().size());\n+        int latestAlertSize = getLatestAlertsSize();\n+        linkAlertsNumber.setDefaultModelObject(latestAlertSize);\n         target.add(linkAlertsNumber);\n \n-        headerAlertsNumber.setDefaultModelObject(latestAlerts.getObject().size());\n+        headerAlertsNumber.setDefaultModelObject(latestAlertSize);\n         target.add(headerAlertsNumber);\n \n-        latestFive.removeAll();\n         target.add(latestAlertsList);\n \n         lastRemediations.clear();\n@@ -112,11 +108,6 @@ public List<RemediationTO> getObject() {\n         };\n     }\n \n-    @Override\n-    protected Panel getAlertLink(final String panelid, final RemediationTO event) {\n-        return new RemediationsWidget.InnerPanel(panelid, event);\n-    }\n-\n     @Override\n     protected AbstractLink getEventsLink(final String linkid) {\n         BookmarkablePageLink<Remediations> remediations = BookmarkablePageLinkBuilder.build(linkid, Remediations.class);\n@@ -129,39 +120,4 @@ protected Icon getIcon(final String iconid) {\n         return new Icon(iconid,\n                 FontAwesomeIconTypeBuilder.on(FontAwesomeIconTypeBuilder.FontAwesomeGraphic.medkit).build());\n     }\n-\n-    public static final class InnerPanel extends Panel {\n-\n-        private static final long serialVersionUID = 8074027899915634928L;\n-\n-        public InnerPanel(final String id, final RemediationTO alert) {\n-            super(id);\n-\n-            AjaxLink<String> approval = new AjaxLink<String>(\"remediation\") {\n-\n-                private static final long serialVersionUID = 7021195294339489084L;\n-\n-                @Override\n-                public void onClick(final AjaxRequestTarget target) {\n-                    // do nothing\n-                }\n-\n-                @Override\n-                protected void onComponentTag(final ComponentTag tag) {\n-                    super.onComponentTag(tag);\n-                    tag.put(\"title\", alert.getRemoteName().trim());\n-                }\n-            };\n-\n-            add(approval);\n-\n-            approval.add(new Label(\"label\", alert.getOperation().name() + \" \" + alert.getAnyType()));\n-\n-            approval.add(new Label(\"resource\", alert.getResource()));\n-\n-            approval.add(new Label(\"instant\",\n-                    SyncopeConsoleSession.get().getDateFormat().format(alert.getInstant())).\n-                    setRenderBodyOnly(true));\n-        }\n-    }\n }"},{"sha":"4d75003ca6cc7a7c7fda285d0c7cbfef351f8932","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/AlertWidget.html","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FAlertWidget.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FAlertWidget.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FAlertWidget.html?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -27,11 +27,7 @@\n         <wicket:message key=\"summary\"><span wicket:id=\"number\"/></wicket:message>\n       </li>\n       <li>\n-        <ul wicket:id=\"latestAlertsList\" class=\"menu\">\n-          <li class=\"todoitem\" wicket:id=\"latestAlerts\">\n-            <span wicket:id=\"alert\">[ALERT]</span>\n-          </li>\n-        </ul>\n+        <span wicket:id=\"latestAlertsList\"/>\n       </li>\n       <li class=\"footer\">\n         <a href=\"#\" wicket:id=\"alertsLink\"><wicket:message key=\"alerts.view.all\">View all alerts</wicket:message></a>"},{"sha":"6976d65b59844f75d62081ec08bf0c4b47a4523c","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget$InnerPanel.html","status":"removed","additions":0,"deletions":27,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98f8e0ea5e1466e6998cfa781bb93991e0de19e3/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FApprovalsWidget%24InnerPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98f8e0ea5e1466e6998cfa781bb93991e0de19e3/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FApprovalsWidget%24InnerPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FApprovalsWidget%24InnerPanel.html?ref=98f8e0ea5e1466e6998cfa781bb93991e0de19e3","patch":"@@ -1,27 +0,0 @@\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n-  <wicket:panel>\n-    <a href=\"#\" wicket:id=\"approval\" style=\"cursor: not-allowed;\">\n-      <h3><small class=\"pull-right\" wicket:id=\"owner\"/> <p wicket:id=\"key\"/></h3>\n-      <small wicket:id=\"dueDateContainer\" class=\"pull-right\"><i class=\"fa fa-hourglass-end\"></i> <p wicket:id=\"dueDate\"/></small>\n-      <small><i class=\"fa fa-clock-o\"></i> <p wicket:id=\"createTime\"/></small>\n-    </a>\n-  </wicket:panel>\n-</html>\n\\ No newline at end of file"},{"sha":"3ffaa88ae0e7d5bf00cdeedb330023da2a903640","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/RemediationsWidget$InnerPanel.html","status":"removed","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98f8e0ea5e1466e6998cfa781bb93991e0de19e3/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget%24InnerPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98f8e0ea5e1466e6998cfa781bb93991e0de19e3/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget%24InnerPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget%24InnerPanel.html?ref=98f8e0ea5e1466e6998cfa781bb93991e0de19e3","patch":"@@ -1,26 +0,0 @@\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n-  <wicket:panel>\n-    <a href=\"#\" wicket:id=\"remediation\" style=\"cursor: not-allowed;\">\n-      <h3><small class=\"pull-right\" wicket:id=\"resource\"/> <p wicket:id=\"label\"/></h3>\n-      <small><i class=\"fa fa-clock-o\"></i> <p wicket:id=\"instant\"/></small>\n-    </a>\n-  </wicket:panel>\n-</html>\n\\ No newline at end of file"},{"sha":"f5cdeccf089245cbab3fae220937f90da895bf6c","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/TaskQuery.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -137,5 +137,4 @@ public Boolean getDetails() {\n     public void setDetails(final Boolean details) {\n         this.details = details;\n     }\n-\n }"},{"sha":"c3454bf64dbecdeb1116d1f9df05cc2f1b39658b","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/WorkflowFormQuery.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FWorkflowFormQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FWorkflowFormQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FWorkflowFormQuery.java?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+public class WorkflowFormQuery extends AbstractQuery {\n+\n+    private static final long serialVersionUID = -4762457303770028554L;\n+\n+    public static class Builder extends AbstractQuery.Builder<WorkflowFormQuery, Builder> {\n+\n+        @Override\n+        protected WorkflowFormQuery newInstance() {\n+            return new WorkflowFormQuery();\n+        }\n+    }\n+}"},{"sha":"ee65b7e1d33accd7d6a6fca0f483ddf996e7bf77","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowService.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserWorkflowService.java?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -23,6 +23,7 @@\n import io.swagger.v3.oas.annotations.tags.Tag;\n import java.util.List;\n import javax.validation.constraints.NotNull;\n+import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n@@ -31,9 +32,11 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.to.WorkflowTaskTO;\n+import org.apache.syncope.common.rest.api.beans.WorkflowFormQuery;\n \n /**\n  * REST operations related to user workflow.\n@@ -48,12 +51,13 @@ public interface UserWorkflowService extends JAXRSService {\n     /**\n      * Returns a list of all available workflow forms.\n      *\n+     * @param query query conditions\n      * @return list of all available workflow forms\n      */\n     @GET\n     @Path(\"forms\")\n     @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<WorkflowFormTO> getForms();\n+    PagedResult<WorkflowFormTO> getForms(@BeanParam WorkflowFormQuery query);\n \n     /**\n      * Returns a list of available forms for the given user key."},{"sha":"8023c25e56a76bf7484669fe3df158e379acc7db","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowLogic.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.lib.to.WorkflowTaskTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n@@ -90,8 +91,12 @@ public WorkflowFormTO getFormForUser(final String key) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_FORM_LIST + \"')\")\n     @Transactional(readOnly = true)\n-    public List<WorkflowFormTO> getForms() {\n-        return uwfAdapter.getForms();\n+    public Pair<Integer, List<WorkflowFormTO>> getForms(\n+            final int page,\n+            final int size,\n+            final List<OrderByClause> orderByClauses) {\n+\n+        return uwfAdapter.getForms(page, size, orderByClauses);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_TASK_LIST + \"') \""},{"sha":"9e71908011283003a3100fbb4b245fe43874e48e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -22,7 +22,6 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import java.util.function.Predicate;\n import javax.persistence.DiscriminatorValue;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n@@ -378,17 +377,14 @@ public <T extends Task> List<T> findAll(\n \n         List<Object> queryParameters = new ArrayList<>();\n \n-        boolean orderByTaskExecInfo = orderByClauses.stream().anyMatch(new Predicate<OrderByClause>() {\n+        boolean orderByTaskExecInfo = orderByClauses.stream().\n+                anyMatch(clause -> clause.getField().equals(\"start\")\n+                || clause.getField().equals(\"end\")\n+                || clause.getField().equals(\"latestExecStatus\")\n+                || clause.getField().equals(\"status\"));\n \n-            @Override\n-            public boolean test(final OrderByClause t) {\n-                return t.getField().equals(\"start\")\n-                        || t.getField().equals(\"end\")\n-                        || t.getField().equals(\"latestExecStatus\")\n-                        || t.getField().equals(\"status\");\n-            }\n-        });\n-        StringBuilder queryString = buildFindAllQuery(type,\n+        StringBuilder queryString = buildFindAllQuery(\n+                type,\n                 resource,\n                 notification,\n                 anyTypeKind,"},{"sha":"7a25cb8c01ec617ef432cc9d119396fe1ba1b267","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserWorkflowServiceImpl.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserWorkflowServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserWorkflowServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserWorkflowServiceImpl.java?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -19,16 +19,19 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.to.WorkflowTaskTO;\n+import org.apache.syncope.common.rest.api.beans.WorkflowFormQuery;\n import org.apache.syncope.common.rest.api.service.UserWorkflowService;\n import org.apache.syncope.core.logic.UserWorkflowLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class UserWorkflowServiceImpl implements UserWorkflowService {\n+public class UserWorkflowServiceImpl extends AbstractServiceImpl implements UserWorkflowService {\n \n     @Autowired\n     private UserWorkflowLogic logic;\n@@ -49,8 +52,10 @@ public WorkflowFormTO getFormForUser(final String userKey) {\n     }\n \n     @Override\n-    public List<WorkflowFormTO> getForms() {\n-        return logic.getForms();\n+    public PagedResult<WorkflowFormTO> getForms(final WorkflowFormQuery query) {\n+        Pair<Integer, List<WorkflowFormTO>> result = logic.getForms(\n+                query.getPage(), query.getSize(), getOrderByClauses(query.getOrderBy()));\n+        return buildPagedResult(result.getRight(), query.getPage(), query.getSize(), result.getLeft());\n     }\n \n     @Override"},{"sha":"07ca5b4b2a396ec77a59b5d36a4f631ab7636c03","filename":"core/workflow-api/src/main/java/org/apache/syncope/core/workflow/api/WorkflowAdapter.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FWorkflowAdapter.java?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -19,9 +19,11 @@\n package org.apache.syncope.core.workflow.api;\n \n import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.to.WorkflowTaskTO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n \n public interface WorkflowAdapter {\n@@ -32,11 +34,14 @@ public interface WorkflowAdapter {\n     String getPrefix();\n \n     /**\n-     * Get all defined forms for current workflow process instances.\n+     * Get the forms for current workflow process instances matching the provided parameters.\n      *\n-     * @return list of defined forms\n+     * @param page result page\n+     * @param size items per page\n+     * @param orderByClauses sort conditions\n+     * @return total number of forms, list of forms matching the provided parameters\n      */\n-    List<WorkflowFormTO> getForms();\n+    Pair<Integer, List<WorkflowFormTO>> getForms(int page, int size, List<OrderByClause> orderByClauses);\n \n     /**\n      * Get form for given workflowId (if present)."},{"sha":"8738d8863250b605149dcbd603f179af8b64586f","filename":"core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java","status":"modified","additions":56,"deletions":24,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/core%2Fworkflow-flowable%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fflowable%2FFlowableUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/core%2Fworkflow-flowable%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fflowable%2FFlowableUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-flowable%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fflowable%2FFlowableUserWorkflowAdapter.java?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -52,6 +52,7 @@\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.workflow.flowable.spring.DomainProcessEngine;\n@@ -67,7 +68,6 @@\n import org.flowable.editor.constants.ModelDataJsonConstants;\n import org.flowable.editor.language.json.converter.BpmnJsonConverter;\n import org.flowable.common.engine.api.FlowableException;\n-import org.flowable.common.engine.api.query.Query;\n import org.flowable.engine.form.FormProperty;\n import org.flowable.engine.form.FormType;\n import org.flowable.engine.form.TaskFormData;\n@@ -78,6 +78,7 @@\n import org.flowable.engine.repository.ProcessDefinition;\n import org.flowable.engine.runtime.ProcessInstance;\n import org.flowable.task.api.Task;\n+import org.flowable.task.api.TaskQuery;\n import org.flowable.task.api.history.HistoricTaskInstance;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -597,56 +598,87 @@ protected WorkflowFormTO getFormTO(\n \n     @Transactional(readOnly = true)\n     @Override\n-    public List<WorkflowFormTO> getForms() {\n-        List<WorkflowFormTO> forms = new ArrayList<>();\n+    public Pair<Integer, List<WorkflowFormTO>> getForms(\n+            final int page, final int size, final List<OrderByClause> orderByClauses) {\n+\n+        Pair<Integer, List<WorkflowFormTO>> forms = null;\n \n         String authUser = AuthContextUtils.getUsername();\n         if (adminUser.equals(authUser)) {\n-            forms.addAll(getForms(engine.getTaskService().createTaskQuery().\n-                    taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE)));\n+            forms = getForms(engine.getTaskService().createTaskQuery().\n+                    taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE), page, size, orderByClauses);\n         } else {\n             User user = userDAO.findByUsername(authUser);\n             if (user == null) {\n                 throw new NotFoundException(\"Syncope User \" + authUser);\n             }\n \n-            forms.addAll(getForms(engine.getTaskService().createTaskQuery().\n+            forms = getForms(engine.getTaskService().createTaskQuery().\n                     taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE).\n-                    taskCandidateOrAssigned(user.getKey())));\n+                    taskCandidateOrAssigned(user.getKey()), page, size, orderByClauses);\n \n             List<String> candidateGroups = new ArrayList<>();\n             userDAO.findAllGroupNames(user).forEach(group -> {\n                 candidateGroups.add(group);\n             });\n             if (!candidateGroups.isEmpty()) {\n-                forms.addAll(getForms(engine.getTaskService().createTaskQuery().\n+                forms = getForms(engine.getTaskService().createTaskQuery().\n                         taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE).\n-                        taskCandidateGroupIn(candidateGroups)));\n+                        taskCandidateGroupIn(candidateGroups), page, size, orderByClauses);\n             }\n         }\n \n-        return forms;\n+        return forms == null\n+                ? Pair.of(0, Collections.<WorkflowFormTO>emptyList())\n+                : forms;\n     }\n \n-    protected <T extends Query<?, ?>, U extends Object> List<WorkflowFormTO> getForms(final Query<T, U> query) {\n-        List<WorkflowFormTO> forms = new ArrayList<>();\n+    protected Pair<Integer, List<WorkflowFormTO>> getForms(\n+            final TaskQuery query, final int page, final int size, final List<OrderByClause> orderByClauses) {\n \n-        query.list().forEach(obj -> {\n-            try {\n-                if (obj instanceof HistoricTaskInstance) {\n-                    forms.add(getFormTO((HistoricTaskInstance) obj));\n-                } else if (obj instanceof Task) {\n-                    forms.add(getFormTO((Task) obj));\n+        TaskQuery sortedQuery = query;\n+        for (OrderByClause clause : orderByClauses) {\n+            boolean ack = true;\n+            switch (clause.getField().trim()) {\n+                case \"taskId\":\n+                    sortedQuery = sortedQuery.orderByTaskId();\n+                    break;\n+\n+                case \"createTime\":\n+                    sortedQuery = sortedQuery.orderByTaskCreateTime();\n+                    break;\n+\n+                case \"dueDate\":\n+                    sortedQuery = sortedQuery.orderByTaskDueDate();\n+                    break;\n+\n+                case \"owner\":\n+                    sortedQuery = sortedQuery.orderByTaskOwner();\n+                    break;\n+\n+                default:\n+                    LOG.warn(\"Form sort request by {}: unsupported, ignoring\", clause.getField().trim());\n+                    ack = false;\n+            }\n+            if (ack) {\n+                if (clause.getDirection() == OrderByClause.Direction.ASC) {\n+                    sortedQuery = sortedQuery.asc();\n                 } else {\n-                    throw new FlowableException(\n-                            \"Failure retrieving form\", new IllegalArgumentException(\"Invalid task type\"));\n+                    sortedQuery = sortedQuery.desc();\n                 }\n-            } catch (FlowableException e) {\n-                LOG.debug(\"No form found for task {}\", obj, e);\n             }\n-        });\n+        }\n+\n+        List<WorkflowFormTO> result = sortedQuery.listPage(size * (page <= 0 ? 0 : page - 1), size).stream().\n+                map(task -> {\n+                    if (task instanceof HistoricTaskInstance) {\n+                        return getFormTO((HistoricTaskInstance) task);\n+                    } else {\n+                        return getFormTO(task);\n+                    }\n+                }).collect(Collectors.toList());\n \n-        return forms;\n+        return Pair.of((int) query.count(), result);\n     }\n \n     @Override"},{"sha":"6cd0468fe1a2337abb5ca10abf71ead95e075f74","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultAnyObjectWorkflowAdapter.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -21,13 +21,15 @@\n import java.io.OutputStream;\n import java.util.Collections;\n import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.WorkflowDefinitionTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.to.WorkflowTaskTO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.workflow.api.WorkflowDefinitionFormat;\n@@ -67,8 +69,10 @@ public WorkflowResult<String> execute(final AnyObjectTO anyObject, final String\n     }\n \n     @Override\n-    public List<WorkflowFormTO> getForms() {\n-        return Collections.emptyList();\n+    public Pair<Integer, List<WorkflowFormTO>> getForms(\n+            final int page, final int size, final List<OrderByClause> orderByClauses) {\n+\n+        return Pair.of(0, Collections.<WorkflowFormTO>emptyList());\n     }\n \n     @Override"},{"sha":"c10a3aa84b32425a40e3e55dd25b44b9d9867a82","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultGroupWorkflowAdapter.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -21,13 +21,15 @@\n import java.io.OutputStream;\n import java.util.Collections;\n import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.WorkflowDefinitionTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.to.WorkflowTaskTO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.workflow.api.WorkflowDefinitionFormat;\n@@ -67,8 +69,10 @@ public WorkflowResult<String> execute(final GroupTO group, final String taskId)\n     }\n \n     @Override\n-    public List<WorkflowFormTO> getForms() {\n-        return Collections.emptyList();\n+    public Pair<Integer, List<WorkflowFormTO>> getForms(\n+            final int page, final int size, final List<OrderByClause> orderByClauses) {\n+\n+        return Pair.of(0, Collections.<WorkflowFormTO>emptyList());\n     }\n \n     @Override"},{"sha":"ebb3445ed6ac4bdbb85f7c3e2946f842cf94b0b4","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapter.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.workflow.api.WorkflowDefinitionFormat;\n@@ -156,8 +157,10 @@ public WorkflowResult<String> execute(final UserTO userTO, final String taskId)\n     }\n \n     @Override\n-    public List<WorkflowFormTO> getForms() {\n-        return Collections.emptyList();\n+    public Pair<Integer, List<WorkflowFormTO>> getForms(\n+            final int page, final int size, final List<OrderByClause> orderByClauses) {\n+\n+        return Pair.of(0, Collections.<WorkflowFormTO>emptyList());\n     }\n \n     @Override"},{"sha":"dc0066d81b8914ae2946182d8f29729b585ea8b1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SchedTaskITCase.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -47,6 +47,7 @@\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n+import org.apache.syncope.common.rest.api.beans.WorkflowFormQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.fit.FlowableDetector;\n import org.apache.syncope.fit.core.reference.TestSampleJobDelegate;\n@@ -143,7 +144,8 @@ public void recertification() {\n \n         execTask(taskService, TaskType.SCHEDULED, \"e95555d2-1b09-42c8-b25b-f4c4ec598989\", \"JOB_FIRED\", 50, false);\n \n-        List<WorkflowFormTO> forms = userWorkflowService.getForms();\n+        List<WorkflowFormTO> forms = userWorkflowService.getForms(\n+                new WorkflowFormQuery.Builder().page(1).size(1000).build()).getResult();\n         assertFalse(forms.isEmpty());\n         forms.forEach(form -> {\n             userWorkflowService.claimForm(form.getTaskId());\n@@ -152,7 +154,8 @@ public void recertification() {\n             userWorkflowService.submitForm(form);\n         });\n \n-        forms = userWorkflowService.getForms();\n+        forms = userWorkflowService.getForms(\n+                new WorkflowFormQuery.Builder().page(1).size(1000).build()).getResult();\n         assertTrue(forms.isEmpty());\n     }\n "},{"sha":"24dc61dd36fab23ee5b2e29e55b46097b41430be","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserWorkflowITCase.java","status":"modified","additions":23,"deletions":21,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3ce309a141379f54243f41a09a63d8ed320747a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserWorkflowITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3ce309a141379f54243f41a09a63d8ed320747a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserWorkflowITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserWorkflowITCase.java?ref=c3ce309a141379f54243f41a09a63d8ed320747a","patch":"@@ -41,12 +41,14 @@\n import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.to.WorkflowTaskTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.common.rest.api.beans.WorkflowFormQuery;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.common.rest.api.service.UserWorkflowService;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -141,9 +143,9 @@ public void createWithApproval() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n \n         // read forms *before* any operation\n-        List<WorkflowFormTO> forms = userWorkflowService.getForms();\n-        assertNotNull(forms);\n-        int preForms = forms.size();\n+        PagedResult<WorkflowFormTO> forms =\n+                userWorkflowService.getForms(new WorkflowFormQuery.Builder().page(1).size(1000).build());\n+        int preForms = forms.getTotalCount();\n \n         UserTO userTO = UserITCase.getUniqueSampleTO(\"createWithApproval@syncope.apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n@@ -175,9 +177,8 @@ public void createWithApproval() {\n         assertNotNull(exception);\n \n         // 2. request if there is any pending form for user just created\n-        forms = userWorkflowService.getForms();\n-        assertNotNull(forms);\n-        assertEquals(preForms + 1, forms.size());\n+        forms = userWorkflowService.getForms(new WorkflowFormQuery.Builder().page(1).size(1000).build());\n+        assertEquals(preForms + 1, forms.getTotalCount());\n \n         // 3. as admin, request for changes: still pending approval\n         String updatedUsername = \"changed-\" + UUID.randomUUID().toString();\n@@ -227,9 +228,9 @@ public void updateApproval() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n \n         // read forms *before* any operation\n-        List<WorkflowFormTO> forms = userWorkflowService.getForms();\n-        assertNotNull(forms);\n-        int preForms = forms.size();\n+        PagedResult<WorkflowFormTO> forms = userWorkflowService.getForms(\n+                new WorkflowFormQuery.Builder().page(1).size(1000).build());\n+        int preForms = forms.getTotalCount();\n \n         UserTO created = createUser(UserITCase.getUniqueSampleTO(\"updateApproval@syncope.apache.org\")).getEntity();\n         assertNotNull(created);\n@@ -245,9 +246,8 @@ public void updateApproval() {\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertEquals(\"updateApproval\", userService.read(created.getKey()).getStatus());\n \n-        forms = userWorkflowService.getForms();\n-        assertNotNull(forms);\n-        assertEquals(preForms + 1, forms.size());\n+        forms = userWorkflowService.getForms(new WorkflowFormQuery.Builder().page(1).size(1000).build());\n+        assertEquals(preForms + 1, forms.getTotalCount());\n \n         WorkflowFormTO form = userWorkflowService.getFormForUser(created.getKey());\n         assertNotNull(form);\n@@ -299,9 +299,9 @@ public void issueSYNCOPE15() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n \n         // read forms *before* any operation\n-        List<WorkflowFormTO> forms = userWorkflowService.getForms();\n-        assertNotNull(forms);\n-        int preForms = forms.size();\n+        PagedResult<WorkflowFormTO> forms = userWorkflowService.getForms(\n+                new WorkflowFormQuery.Builder().page(1).size(1000).build());\n+        int preForms = forms.getTotalCount();\n \n         UserTO userTO = UserITCase.getUniqueSampleTO(\"issueSYNCOPE15@syncope.apache.org\");\n         userTO.getResources().clear();\n@@ -324,8 +324,8 @@ public void issueSYNCOPE15() {\n         assertEquals(userTO.getCreationDate(), userTO.getLastChangeDate());\n \n         // 2. request if there is any pending form for user just created\n-        forms = userWorkflowService.getForms();\n-        assertEquals(preForms + 1, forms.size());\n+        forms = userWorkflowService.getForms(new WorkflowFormQuery.Builder().page(1).size(1000).build());\n+        assertEquals(preForms + 1, forms.getTotalCount());\n \n         WorkflowFormTO form = userWorkflowService.getFormForUser(userTO.getKey());\n         assertNotNull(form);\n@@ -348,12 +348,14 @@ public void issueSYNCOPE15() {\n         // 6. submit approve\n         userTO = userWorkflowService.submitForm(form);\n         assertNotNull(userTO);\n-        assertEquals(preForms, userWorkflowService.getForms().size());\n+        assertEquals(\n+                preForms,\n+                userWorkflowService.getForms(\n+                        new WorkflowFormQuery.Builder().page(1).size(1000).build()).getTotalCount());\n         assertNull(userWorkflowService.getFormForUser(userTO.getKey()));\n \n         // 7.check that no more forms are still to be processed\n-        forms = userWorkflowService.getForms();\n-        assertEquals(preForms, forms.size());\n+        forms = userWorkflowService.getForms(new WorkflowFormQuery.Builder().page(1).size(1000).build());\n+        assertEquals(preForms, forms.getTotalCount());\n     }\n-\n }"}]}