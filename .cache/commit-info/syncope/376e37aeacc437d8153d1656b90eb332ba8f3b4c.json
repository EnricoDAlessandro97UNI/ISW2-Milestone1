{"sha":"376e37aeacc437d8153d1656b90eb332ba8f3b4c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM3NmUzN2FlYWNjNDM3ZDgxNTNkMTY1NmI5MGViMzMyYmE4ZjNiNGM=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-26T16:22:02Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-26T16:22:02Z"},"message":"Bean validation implemented\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246661 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d5058437f387649beab7d0e9e344f24224a698ea","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d5058437f387649beab7d0e9e344f24224a698ea"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/376e37aeacc437d8153d1656b90eb332ba8f3b4c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/376e37aeacc437d8153d1656b90eb332ba8f3b4c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/376e37aeacc437d8153d1656b90eb332ba8f3b4c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/376e37aeacc437d8153d1656b90eb332ba8f3b4c/comments","author":null,"committer":null,"parents":[{"sha":"6b7074a2f76b7e7a576670a1ee7984f51c7839fc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6b7074a2f76b7e7a576670a1ee7984f51c7839fc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6b7074a2f76b7e7a576670a1ee7984f51c7839fc"}],"stats":{"total":1137,"additions":835,"deletions":302},"files":[{"sha":"a02a5e472dca2b8e85a861dfc79c564c7a509327","filename":"client/src/main/java/org/syncope/types/EntityViolationType.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -0,0 +1,41 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.types;\n+\n+public enum EntityViolationType {\n+\n+    Standard(\"\"),\n+    MultivalueAndUniqueConstraint(\n+    \"org.syncope.core.validation.schema.multivalueAndUniqueConstraint\"),\n+    MoreThanOneNonNull(\n+    \"org.syncope.core.validation.attrvalue.moreThanOneNonNull\"),\n+    InvalidValues(\n+    \"org.syncope.core.validation.attr.invalidValues\");\n+\n+    private String message;\n+\n+    private EntityViolationType(final String message) {\n+        this.message = message;\n+    }\n+\n+    public void setMessageTemplate(final String message) {\n+        this.message = message;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return this == Standard ? message : super.toString();\n+    }\n+}"},{"sha":"f96784babb0b66069f3d21999034ae5973e306da","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"sha":"d232041b09d790b35fc1f05bb62667a32bfbdff1","filename":"core/src/main/java/org/syncope/core/monitor/CacheMonitor.java","status":"modified","additions":33,"deletions":9,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fmonitor%2FCacheMonitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fmonitor%2FCacheMonitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fmonitor%2FCacheMonitor.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -26,6 +26,9 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n \n+/**\n+ * Log cache hits and misses.\n+ */\n @Aspect\n public class CacheMonitor {\n \n@@ -34,10 +37,33 @@ public class CacheMonitor {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(\n             CacheMonitor.class);\n-    private static final NumberFormat NF = new DecimalFormat(\"0.0###\");\n+\n+    /**\n+     * Number formatter for hit / miss percentage.\n+     */\n+    private static final ThreadLocal<NumberFormat> PERCENT_FORMAT =\n+            new ThreadLocal<NumberFormat>() {\n+\n+                @Override\n+                protected NumberFormat initialValue() {\n+                    return new DecimalFormat(\"0.0###\");\n+                }\n+            };\n+\n+    /**\n+     * EntityManager.\n+     */\n     @Autowired\n     private EntityManager entityManager;\n \n+    /**\n+     * Intercept any DAO method call and use Hibernate's statistics features\n+     * to log cache access.\n+     *\n+     * @param pjp Aspect's ProceedingJoinPoint\n+     * @return DAO method's return value\n+     * @throws Throwable if anything goes wrong\n+     */\n     @Around(\"execution(* org.syncope.core.persistence.dao..*.*(..))\")\n     public final Object log(final ProceedingJoinPoint pjp)\n             throws Throwable {\n@@ -51,18 +77,16 @@ public final Object log(final ProceedingJoinPoint pjp)\n                     getStatistics();\n             //statistics.logSummary();\n \n-            long hit0 = statistics.getQueryCacheHitCount();\n-            long miss0 = statistics.getQueryCacheMissCount();\n+            final long hit0 = statistics.getQueryCacheHitCount();\n+            final long miss0 = statistics.getQueryCacheMissCount();\n \n             result = pjp.proceed();\n \n-            long hit1 = statistics.getQueryCacheHitCount();\n-            long miss1 = statistics.getQueryCacheMissCount();\n+            final long hit1 = statistics.getQueryCacheHitCount();\n+            final long miss1 = statistics.getQueryCacheMissCount();\n \n-            String ratio;\n-            synchronized (NF) {\n-                ratio = NF.format((double) hit1 / (hit1 + miss1));\n-            }\n+            final String ratio = PERCENT_FORMAT.get().\n+                    format((double) hit1 / (hit1 + miss1));\n \n             if (hit1 > hit0) {\n                 LOG.debug("},{"sha":"b23292911eb587869064b3b2b6d0138baecf3a19","filename":"core/src/main/java/org/syncope/core/persistence/ConnectorInstanceLoader.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -33,7 +33,7 @@\n import org.syncope.core.persistence.beans.SyncopeConf;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n+import org.syncope.core.persistence.dao.SyncopeConfDAO;\n import org.syncope.core.persistence.propagation.ConnectorFacadeProxy;\n import org.syncope.core.persistence.util.ApplicationContextManager;\n \n@@ -55,9 +55,8 @@ public static ConnectorInfoManager getConnectorManager()\n                 ApplicationContextManager.getApplicationContext();\n \n         // 1. Bundles directory\n-        SyncopeConfigurationDAO syncopeConfigurationDAO =\n-                (SyncopeConfigurationDAO) context.getBean(\n-                \"syncopeConfigurationDAOImpl\");\n+        SyncopeConfDAO syncopeConfigurationDAO =\n+                (SyncopeConfDAO) context.getBean(\"syncopeConfDAOImpl\");\n         SyncopeConf connectorBundleDir = null;\n         try {\n             connectorBundleDir = syncopeConfigurationDAO.find("},{"sha":"78878c0e89a1acd4cc25cff88916f8f1b8acaf45","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttr.java","status":"modified","additions":27,"deletions":13,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -17,47 +17,59 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.MappedSuperclass;\n-import org.syncope.core.persistence.validation.ParseException;\n-import org.syncope.core.persistence.validation.ValidationFailedException;\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+import org.syncope.core.persistence.validation.attrvalue.ParseException;\n+import org.syncope.core.persistence.validation.attrvalue.InvalidAttrValueException;\n+import org.syncope.core.persistence.validation.entity.AttrCheck;\n import org.syncope.core.rest.data.AttributableUtil;\n \n @MappedSuperclass\n+@AttrCheck\n public abstract class AbstractAttr extends AbstractBaseBean {\n \n     public abstract Long getId();\n \n     public <T extends AbstractAttrValue> T addValue(final String value,\n             final AttributableUtil attributableUtil)\n-            throws ParseException, ValidationFailedException {\n+            throws ParseException, InvalidAttrValueException {\n+\n+        T attrValue;\n+        if (getSchema().isUniqueConstraint()) {\n+            attrValue = (T) attributableUtil.newAttributeUniqueValue();\n+            ((IAttrUniqueValue) attrValue).setSchema(getSchema());\n+        } else {\n+            attrValue = (T) attributableUtil.newAttributeValue();\n+        }\n \n-        T actualValue = getSchema().getValidator().getValue(value,\n-                getSchema().isUniqueConstraint()\n-                ? (T) attributableUtil.newAttributeUniqueValue()\n-                : (T) attributableUtil.newAttributeValue());\n-        actualValue.setAttribute(this);\n+        attrValue = getSchema().getValidator().getValue(value, attrValue);\n+        attrValue.setAttribute(this);\n \n         if (!getSchema().isMultivalue()) {\n             getValues().clear();\n         }\n \n-        addValue(actualValue);\n-\n-        return actualValue;\n+        addValue(attrValue);\n+        return attrValue;\n     }\n \n+    @NotNull\n+    @Valid\n     public abstract <T extends AbstractAttributable> T getOwner();\n \n     public abstract <T extends AbstractAttributable> void setOwner(T owner);\n \n+    @NotNull\n+    @Valid\n     public abstract <T extends AbstractSchema> T getSchema();\n \n     public abstract <T extends AbstractSchema> void setSchema(T schema);\n \n     public abstract <T extends AbstractAttrValue> boolean addValue(\n-            T attributeValue);\n+            T attrValue);\n \n     public abstract <T extends AbstractAttrValue> boolean removeValue(\n-            T attributeValue);\n+            T attrValue);\n \n     public <T extends AbstractAttrValue> List<String> getValuesAsStrings() {\n         List<T> values = getValues();\n@@ -70,6 +82,8 @@ public <T extends AbstractAttrValue> List<String> getValuesAsStrings() {\n         return result;\n     }\n \n+    @NotNull\n+    @Valid\n     public abstract <T extends AbstractAttrValue> List<T> getValues();\n \n     public abstract <T extends AbstractAttrValue> void setValues("},{"sha":"d2350df016cf0a34fea6ccbcb41d7e89d14f28bc","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttrValue.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -21,8 +21,11 @@\n import javax.persistence.TemporalType;\n import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang.builder.ToStringStyle;\n+import org.hibernate.validator.constraints.Range;\n+import org.syncope.core.persistence.validation.entity.AttrValueCheck;\n \n @MappedSuperclass\n+@AttrValueCheck\n public abstract class AbstractAttrValue extends AbstractBaseBean {\n \n     private String stringValue;\n@@ -31,6 +34,7 @@ public abstract class AbstractAttrValue extends AbstractBaseBean {\n     private Date dateValue;\n \n     @Basic\n+    @Range(min = 0, max = 1)\n     private Integer booleanValue;\n \n     private Long longValue;"},{"sha":"d6da31e25d73cf8078f5e5034a6d4aef881e5005","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":15,"deletions":9,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -14,24 +14,27 @@\n  */\n package org.syncope.core.persistence.beans;\n \n+import static javax.persistence.EnumType.STRING;\n+\n import java.lang.reflect.Constructor;\n import java.text.DecimalFormat;\n import java.text.Format;\n import java.text.SimpleDateFormat;\n import java.util.List;\n import javax.persistence.Basic;\n-import static javax.persistence.EnumType.STRING;\n-\n import javax.persistence.Column;\n import javax.persistence.Enumerated;\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n import javax.persistence.Transient;\n-import org.syncope.core.persistence.validation.BasicAttributeValidator;\n-import org.syncope.core.persistence.validation.AbstractAttributeValidator;\n+import org.hibernate.validator.constraints.Range;\n+import org.syncope.core.persistence.validation.attrvalue.BasicValidator;\n+import org.syncope.core.persistence.validation.attrvalue.AbstractValidator;\n+import org.syncope.core.persistence.validation.entity.SchemaCheck;\n import org.syncope.types.SchemaValueType;\n \n @MappedSuperclass\n+@SchemaCheck\n public abstract class AbstractSchema extends AbstractBaseBean {\n \n     private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT =\n@@ -63,18 +66,22 @@ protected DecimalFormat initialValue() {\n      * Specify if the attribute should be stored on the local repository.\n      */\n     @Basic\n+    @Range(min = 0, max = 1)\n     private Integer virtual;\n \n     @Column(nullable = false)\n     private String mandatoryCondition;\n \n     @Basic\n+    @Range(min = 0, max = 1)\n     private Integer multivalue;\n \n     @Basic\n+    @Range(min = 0, max = 1)\n     private Integer uniqueConstraint;\n \n     @Basic\n+    @Range(min = 0, max = 1)\n     private Integer readonly;\n \n     @Column(nullable = true)\n@@ -84,7 +91,7 @@ protected DecimalFormat initialValue() {\n     private String validatorClass;\n \n     @Transient\n-    private AbstractAttributeValidator validator;\n+    private AbstractValidator validator;\n \n     public AbstractSchema() {\n         super();\n@@ -153,7 +160,7 @@ public void setReadonly(boolean readonly) {\n         this.readonly = getBooleanAsInteger(readonly);\n     }\n \n-    public AbstractAttributeValidator getValidator() {\n+    public AbstractValidator getValidator() {\n         if (validator != null) {\n             return validator;\n         }\n@@ -164,8 +171,7 @@ public AbstractAttributeValidator getValidator() {\n                         Class.forName(getValidatorClass()).getConstructor(\n                         new Class[]{getClass().getSuperclass()});\n                 validator =\n-                        (AbstractAttributeValidator) validatorConstructor.\n-                        newInstance(\n+                        (AbstractValidator) validatorConstructor.newInstance(\n                         this);\n             } catch (Exception e) {\n                 LOG.error(\"Could not instantiate validator of type \"\n@@ -175,7 +181,7 @@ public AbstractAttributeValidator getValidator() {\n         }\n \n         if (validator == null) {\n-            validator = new BasicAttributeValidator(this);\n+            validator = new BasicValidator(this);\n         }\n \n         return validator;"},{"sha":"d69dfde43c2a9634267691a8bd8b082bb432c2ee","filename":"core/src/main/java/org/syncope/core/persistence/beans/SchemaMapping.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -25,6 +25,7 @@\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.TableGenerator;\n+import org.hibernate.validator.constraints.Range;\n import org.syncope.types.SchemaType;\n \n @Entity\n@@ -64,13 +65,15 @@ public class SchemaMapping extends AbstractBaseBean {\n      */\n     @Column(nullable = false)\n     @Basic\n+    @Range(min = 0, max = 1)\n     private Integer accountid;\n \n     /**\n      * Specify if the mapped target resource's field is the password.\n      */\n     @Column(nullable = false)\n     @Basic\n+    @Range(min = 0, max = 1)\n     private Integer password;\n \n     /**"},{"sha":"47cad7442850273d74a231ddf9053cef6313f7fe","filename":"core/src/main/java/org/syncope/core/persistence/beans/TargetResource.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -33,6 +33,7 @@\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.hibernate.annotations.Cascade;\n+import org.hibernate.validator.constraints.Range;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n \n@@ -75,6 +76,7 @@ public class TargetResource extends AbstractBaseBean {\n      */\n     @Column(nullable = false)\n     @Basic\n+    @Range(min = 0, max = 1)\n     private Integer forceMandatoryConstraint;\n \n     /**"},{"sha":"8d8130eb7a8a4e7db2e67fd42519968d102bf72d","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MAttrUniqueValue.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -18,6 +18,7 @@\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n+import javax.validation.Valid;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.IAttrUniqueValue;\n \n@@ -34,7 +35,8 @@\n public class MAttrUniqueValue extends MAttrValue\n         implements IAttrUniqueValue {\n \n-    @OneToOne\n+    @OneToOne(optional = false)\n+    @Valid\n     private MSchema schema;\n \n     @Override"},{"sha":"ed18df1bd7ea183ccbad3ba7a62d236e27fabce8","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MAttrValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrValue.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -35,7 +35,7 @@ public class MAttrValue extends AbstractAttrValue {\n     @TableGenerator(name = \"SEQ_MAttrValue\", allocationSize = 200)\n     private Long id;\n \n-    @ManyToOne\n+    @ManyToOne(optional = false)\n     private MAttr attribute;\n \n     @Override"},{"sha":"f507e10719d2159e05fe2d346fe0eb6b30c84dca","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RAttrUniqueValue.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrUniqueValue.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -18,6 +18,7 @@\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n+import javax.validation.Valid;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.IAttrUniqueValue;\n \n@@ -34,7 +35,8 @@\n public class RAttrUniqueValue extends RAttrValue\n         implements IAttrUniqueValue {\n \n-    @OneToOne\n+    @OneToOne(optional = false)\n+    @Valid\n     private RSchema schema;\n \n     @Override"},{"sha":"ad30df5ccd3285d9f4d103c6767fd4422cf05953","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RAttrValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrValue.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -35,7 +35,7 @@ public class RAttrValue extends AbstractAttrValue {\n     @TableGenerator(name = \"SEQ_RAttrValue\", allocationSize = 200)\n     private Long id;\n \n-    @ManyToOne\n+    @ManyToOne(optional = false)\n     private RAttr attribute;\n \n     @Override"},{"sha":"3051f37f8929dfc448bf383add702b2e7ad8d4c3","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -36,6 +36,7 @@\n import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.hibernate.validator.constraints.Range;\n \n @Entity\n @Table(uniqueConstraints =\n@@ -67,9 +68,11 @@ public class SyncopeRole extends AbstractAttributable {\n     private List<RDerAttr> derivedAttributes;\n \n     @Basic\n+    @Range(min = 0, max = 1)\n     private Integer inheritAttributes;\n \n     @Basic\n+    @Range(min = 0, max = 1)\n     private Integer inheritDerivedAttributes;\n \n     public SyncopeRole() {"},{"sha":"ea5289513b0c1792b5f1e24ebd22502e4e1531ab","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UAttr.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -32,30 +32,52 @@\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.beans.AbstractSchema;\n \n+/**\n+ * User attribute.\n+ */\n @Entity\n public class UAttr extends AbstractAttr {\n \n+    /**\n+     * Auto-generated id for this table.\n+     */\n     @Id\n     @GeneratedValue(strategy = GenerationType.TABLE,\n     generator = \"SEQ_UAttr\")\n     @TableGenerator(name = \"SEQ_UAttr\", allocationSize = 200)\n     private Long id;\n \n+    /**\n+     * The owner of this attribute.\n+     */\n     @ManyToOne(fetch = FetchType.EAGER)\n     private SyncopeUser owner;\n \n+    /**\n+     * The schema of this attribute.\n+     */\n     @ManyToOne(fetch = FetchType.EAGER)\n     private USchema schema;\n \n+    /**\n+     * Values of this attribute (if schema is not UNIQUE).\n+     */\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n     private List<UAttrValue> values;\n \n+    /**\n+     * Value of this attribute (if schema is UNIQUE).\n+     */\n     @OneToOne(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n     private UAttrUniqueValue uniqueValue;\n \n+    /**\n+     * Default constructor.\n+     */\n     public UAttr() {\n+        super();\n         values = new ArrayList<UAttrValue>();\n     }\n "},{"sha":"cdb63e3c015030f80012067a1142d9055c50e59f","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UAttrUniqueValue.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrUniqueValue.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -15,7 +15,7 @@\n package org.syncope.core.persistence.beans.user;\n \n import javax.persistence.Entity;\n-import javax.persistence.OneToOne;\n+import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n import org.syncope.core.persistence.beans.AbstractSchema;\n@@ -34,7 +34,7 @@\n public class UAttrUniqueValue extends UAttrValue\n         implements IAttrUniqueValue {\n \n-    @OneToOne\n+    @ManyToOne(optional = false)\n     private USchema schema;\n \n     @Override"},{"sha":"f7e7b974ab5833876657f498f2b8e57732eab14c","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UAttrValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrValue.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -35,7 +35,7 @@ public class UAttrValue extends AbstractAttrValue {\n     @TableGenerator(name = \"SEQ_UAttrValue\", allocationSize = 200)\n     private Long id;\n \n-    @ManyToOne\n+    @ManyToOne(optional = false)\n     private UAttr attribute;\n \n     @Override"},{"sha":"2c7c47a030907ea72fb5412b4668ca65822c72f4","filename":"core/src/main/java/org/syncope/core/persistence/dao/AttributeDAO.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeDAO.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence.dao;\n \n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import java.util.List;\n import org.syncope.core.persistence.beans.AbstractAttr;\n \n@@ -23,7 +24,8 @@ public interface AttributeDAO extends DAO {\n \n     <T extends AbstractAttr> List<T> findAll(Class<T> reference);\n \n-    <T extends AbstractAttr> T save(T attribute);\n+    <T extends AbstractAttr> T save(T attribute)\n+            throws InvalidEntityException;\n \n     <T extends AbstractAttr> void delete(Long id, Class<T> reference);\n "},{"sha":"f4f4aab04f862d9ffd9e32a6cbc1f180458a59bf","filename":"core/src/main/java/org/syncope/core/persistence/dao/AttributeValueDAO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeValueDAO.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -16,14 +16,16 @@\n \n import java.util.List;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface AttributeValueDAO extends DAO {\n \n     <T extends AbstractAttrValue> T find(Long id, Class<T> reference);\n \n     <T extends AbstractAttrValue> List<T> findAll(Class<T> reference);\n \n-    <T extends AbstractAttrValue> T save(T attributeValue);\n+    <T extends AbstractAttrValue> T save(T attributeValue)\n+            throws InvalidEntityException;\n \n     <T extends AbstractAttrValue> void delete(Long id, Class<T> reference);\n "},{"sha":"0180a57ea0e4efc4235f9f3b73264d0af7799830","filename":"core/src/main/java/org/syncope/core/persistence/dao/ConnectorInstanceDAO.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnectorInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnectorInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnectorInstanceDAO.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -16,14 +16,16 @@\n \n import java.util.List;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface ConnectorInstanceDAO extends DAO {\n \n     ConnectorInstance find(Long id);\n \n     List<ConnectorInstance> findAll();\n \n-    ConnectorInstance save(ConnectorInstance connector);\n+    ConnectorInstance save(ConnectorInstance connector)\n+            throws InvalidEntityException;\n \n     void delete(Long id);\n }"},{"sha":"e960d4f33c5ffc3ac89d74c1dc3e02718c17c5b4","filename":"core/src/main/java/org/syncope/core/persistence/dao/DerivedAttributeDAO.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedAttributeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedAttributeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedAttributeDAO.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -16,14 +16,16 @@\n \n import java.util.List;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface DerivedAttributeDAO extends DAO {\n \n     <T extends AbstractDerAttr> T find(Long id, Class<T> reference);\n \n     <T extends AbstractDerAttr> List<T> findAll(Class<T> reference);\n \n-    <T extends AbstractDerAttr> T save(T derivedAttribute);\n+    <T extends AbstractDerAttr> T save(T derivedAttribute)\n+            throws InvalidEntityException;\n \n     <T extends AbstractDerAttr> void delete(Long id, Class<T> reference);\n "},{"sha":"c9d9993dd175f1e10e7058553b281102aa58008b","filename":"core/src/main/java/org/syncope/core/persistence/dao/DerivedSchemaDAO.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedSchemaDAO.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -16,14 +16,16 @@\n \n import java.util.List;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface DerivedSchemaDAO extends DAO {\n \n     <T extends AbstractDerSchema> T find(String name, Class<T> reference);\n \n     <T extends AbstractDerSchema> List<T> findAll(Class<T> reference);\n \n-    <T extends AbstractDerSchema> T save(T derivedSchema);\n+    <T extends AbstractDerSchema> T save(T derivedSchema)\n+            throws InvalidEntityException;\n \n     <T extends AbstractDerSchema> void delete(\n             String name, Class<T> reference);"},{"sha":"bc9a5e29edc654ffbbf82d353311a1da7c8f4b88","filename":"core/src/main/java/org/syncope/core/persistence/dao/EntitlementDAO.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementDAO.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -16,14 +16,16 @@\n \n import java.util.List;\n import org.syncope.core.persistence.beans.Entitlement;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface EntitlementDAO extends DAO {\n \n     Entitlement find(String name);\n \n     List<Entitlement> findAll();\n \n-    Entitlement save(Entitlement entitlement);\n+    Entitlement save(Entitlement entitlement)\n+            throws InvalidEntityException;\n \n     void delete(String name);\n }"},{"sha":"dcd719d505107f1309cf7e9c07572e9a5d85f089","filename":"core/src/main/java/org/syncope/core/persistence/dao/MembershipDAO.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipDAO.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -18,6 +18,7 @@\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface MembershipDAO extends DAO {\n \n@@ -27,7 +28,8 @@ public interface MembershipDAO extends DAO {\n \n     List<Membership> findAll();\n \n-    Membership save(Membership membership);\n+    Membership save(Membership membership)\n+            throws InvalidEntityException;\n \n     void delete(Long id);\n }"},{"sha":"fa90aaf34e44fca94140d3366f35d7f28a72f8fb","filename":"core/src/main/java/org/syncope/core/persistence/dao/MissingConfKeyException.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMissingConfKeyException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMissingConfKeyException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMissingConfKeyException.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -18,7 +18,7 @@ public class MissingConfKeyException extends Exception {\n \n     private String confKey;\n \n-    public MissingConfKeyException(String confKey) {\n+    public MissingConfKeyException(final String confKey) {\n         this.confKey = confKey;\n     }\n "},{"sha":"47d6e30df0c0981609699d6945bd2b4376a759e8","filename":"core/src/main/java/org/syncope/core/persistence/dao/ResourceDAO.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -17,6 +17,7 @@\n import java.util.List;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.TargetResource;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.syncope.types.SchemaType;\n \n public interface ResourceDAO extends DAO {\n@@ -25,7 +26,8 @@ public interface ResourceDAO extends DAO {\n \n     List<TargetResource> findAll();\n \n-    TargetResource save(TargetResource resource);\n+    TargetResource save(TargetResource resource)\n+            throws InvalidEntityException;\n \n     List<SchemaMapping> getMappings(String schemaName, SchemaType schemaType);\n "},{"sha":"d4329e98e388777eb03166266082828205ecfd2d","filename":"core/src/main/java/org/syncope/core/persistence/dao/SchemaDAO.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -16,17 +16,16 @@\n \n import java.util.List;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.validation.MultiUniqueValueException;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface SchemaDAO extends DAO {\n \n     <T extends AbstractSchema> T find(String name, Class<T> reference);\n \n     <T extends AbstractSchema> List<T> findAll(Class<T> reference);\n \n-    <T extends AbstractSchema> T save(\n-            T schema)\n-            throws MultiUniqueValueException;\n+    <T extends AbstractSchema> T save(T schema)\n+            throws InvalidEntityException;\n \n     <T extends AbstractSchema> void delete(String name, Class<T> reference);\n }"},{"sha":"e3bb67d9de1fd6ab7ff7fe666b8a1403a375fffa","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeConfDAO.java","status":"renamed","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeConfDAO.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -16,14 +16,17 @@\n \n import java.util.List;\n import org.syncope.core.persistence.beans.SyncopeConf;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n-public interface SyncopeConfigurationDAO extends DAO {\n+public interface SyncopeConfDAO extends DAO {\n \n-    SyncopeConf find(String name) throws MissingConfKeyException;\n+    SyncopeConf find(String name)\n+            throws MissingConfKeyException;\n \n     List<SyncopeConf> findAll();\n \n-    SyncopeConf save(SyncopeConf syncopeConfiguration);\n+    SyncopeConf save(SyncopeConf syncopeConfiguration)\n+            throws InvalidEntityException;\n \n     void delete(String name);\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeConfigurationDAO.java"},{"sha":"1c5294722376d7b933772d29d72ba74b3245a089","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeRoleDAO.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeRoleDAO.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -18,6 +18,7 @@\n import org.syncope.core.persistence.beans.role.RAttr;\n import org.syncope.core.persistence.beans.role.RDerAttr;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface SyncopeRoleDAO extends DAO {\n \n@@ -33,7 +34,8 @@ public interface SyncopeRoleDAO extends DAO {\n \n     List<SyncopeRole> findAll();\n \n-    SyncopeRole save(SyncopeRole syncopeRole);\n+    SyncopeRole save(SyncopeRole syncopeRole)\n+            throws InvalidEntityException;\n \n     void delete(Long id);\n }"},{"sha":"9eb2aa1f8e5444b4ca3836ff64cd48fdff3a4b9e","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeUserDAO.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -18,6 +18,7 @@\n import org.syncope.client.search.NodeCond;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface SyncopeUserDAO extends DAO {\n \n@@ -39,7 +40,8 @@ List<SyncopeUser> findByAttributeValue(UAttrValue attributeValue,\n     List<SyncopeUser> search(NodeCond searchCondition,\n             int page, int itemsPerPage);\n \n-    SyncopeUser save(SyncopeUser syncopeUser);\n+    SyncopeUser save(SyncopeUser syncopeUser)\n+            throws InvalidEntityException;\n \n     void delete(Long id);\n }"},{"sha":"a31c516eedbb71d148af7f96ed3bd7cd7fef103d","filename":"core/src/main/java/org/syncope/core/persistence/dao/TaskDAO.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -16,14 +16,16 @@\n \n import java.util.List;\n import org.syncope.core.persistence.beans.Task;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface TaskDAO extends DAO {\n \n     Task find(Long id);\n \n     List<Task> findAll();\n \n-    Task save(Task task);\n+    Task save(Task task)\n+            throws InvalidEntityException;\n \n     void delete(Long id);\n "},{"sha":"213c3d1d0fca0422b12a5a30d9e7fd15a29632cb","filename":"core/src/main/java/org/syncope/core/persistence/dao/TaskExecutionDAO.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecutionDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecutionDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecutionDAO.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -16,14 +16,16 @@\n \n import java.util.List;\n import org.syncope.core.persistence.beans.TaskExecution;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface TaskExecutionDAO extends DAO {\n \n     TaskExecution find(Long id);\n \n     List<TaskExecution> findAll();\n \n-    TaskExecution save(TaskExecution execution);\n+    TaskExecution save(TaskExecution execution)\n+            throws InvalidEntityException;\n \n     void delete(Long id);\n "},{"sha":"c8938a3c96bb3b2f450384a67335f7bd1ba693cd","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -26,7 +26,6 @@\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.validation.MultiUniqueValueException;\n import org.syncope.types.SchemaType;\n \n @Repository\n@@ -57,13 +56,7 @@ public <T extends AbstractSchema> List<T> findAll(\n     }\n \n     @Override\n-    public <T extends AbstractSchema> T save(final T schema)\n-            throws MultiUniqueValueException {\n-\n-        if (schema.isMultivalue() && schema.isUniqueConstraint()) {\n-            throw new MultiUniqueValueException(schema);\n-        }\n-\n+    public <T extends AbstractSchema> T save(final T schema) {\n         return entityManager.merge(schema);\n     }\n "},{"sha":"794ef704b1b5c2815f1a1e4ee0d0c8136908331b","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeConfDAOImpl.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeConfDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeConfDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeConfDAOImpl.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -19,11 +19,11 @@\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.SyncopeConf;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n+import org.syncope.core.persistence.dao.SyncopeConfDAO;\n \n @Repository\n-public class SyncopeConfigurationDAOImpl extends AbstractDAOImpl\n-        implements SyncopeConfigurationDAO {\n+public class SyncopeConfDAOImpl extends AbstractDAOImpl\n+        implements SyncopeConfDAO {\n \n     @Override\n     public SyncopeConf find(final String name)\n@@ -42,7 +42,7 @@ public SyncopeConf find(final String name)\n     @Override\n     public List<SyncopeConf> findAll() {\n         Query query = entityManager.createQuery(\n-                \"SELECT e FROM SyncopeConfiguration e\");\n+                \"SELECT e FROM SyncopeConf e\");\n         return query.getResultList();\n     }\n ","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeConfigurationDAOImpl.java"},{"sha":"10d2ddb93df37604f60150e696f92ffa794fa914","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":44,"deletions":45,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -18,14 +18,14 @@\n import java.util.List;\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n+import javax.validation.ValidationException;\n import org.hibernate.Criteria;\n import org.hibernate.Session;\n import org.hibernate.criterion.Criterion;\n import org.hibernate.criterion.Restrictions;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.syncope.client.search.AttributeCond;\n-import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.beans.membership.Membership;\n@@ -35,7 +35,6 @@\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n-import org.syncope.core.persistence.validation.ValidationException;\n \n @Repository\n public class SyncopeUserDAOImpl extends AbstractDAOImpl\n@@ -100,8 +99,7 @@ public final List<SyncopeUser> findByAttributeValue(\n         query.setParameter(\"longValue\", attributeValue.getLongValue());\n         query.setParameter(\"doubleValue\", attributeValue.getDoubleValue());\n \n-        query.setFirstResult(\n-                itemsPerPage * (page <= 0 ? 0 : page - 1));\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n \n         if (itemsPerPage > 0) {\n             query.setMaxResults(itemsPerPage);\n@@ -122,8 +120,7 @@ public final List<SyncopeUser> findAll(\n         final Query query = entityManager.createQuery(\n                 \"SELECT e FROM SyncopeUser e ORDER BY e.id\");\n \n-        query.setFirstResult(\n-                itemsPerPage * (page <= 0 ? 0 : page - 1));\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n \n         if (itemsPerPage > 0) {\n             query.setMaxResults(itemsPerPage);\n@@ -256,7 +253,9 @@ private List<SyncopeUser> doSearch(\n                 }\n \n                 for (SyncopeUser user : from) {\n-                    if (!to.contains(user)) to.add(user);\n+                    if (!to.contains(user)) {\n+                        to.add(user);\n+                    }\n                 }\n \n                 result = to;\n@@ -297,45 +296,45 @@ private Criterion getCriterion(final NodeCond leafCond) {\n                                 leafCond.getMembershipCond().getRoleName());\n                     }\n                 } else if (leafCond.getAttributeCond() != null) {\n-                        USchema userSchema = schemaDAO.find(\n-                                leafCond.getAttributeCond().getSchema(),\n-                                USchema.class);\n-                        if (userSchema == null) {\n-                            LOG.warn(\"Ignoring invalid schema '\"\n-                                    + leafCond.getAttributeCond().getSchema()\n-                                    + \"'\");\n-                        } else {\n-                            UAttrValue attributeValue =\n-                                    new UAttrValue();\n-                            try {\n-                                if (leafCond.getAttributeCond().getType()\n-                                        == AttributeCond.Type.LIKE) {\n-\n-                                    attributeValue.setStringValue(\n-                                            leafCond.getAttributeCond().\n-                                            getExpression());\n-                                } else {\n-                                    attributeValue =\n-                                            userSchema.getValidator().\n-                                            getValue(\n-                                            leafCond.getAttributeCond().\n-                                            getExpression(),\n-                                            attributeValue);\n-                                }\n-\n-                                criterion = Restrictions.and(\n-                                        Restrictions.eq(\"a.schema.name\",\n-                                        leafCond.getAttributeCond().getSchema()),\n-                                        getCriterion(\n-                                        leafCond.getAttributeCond().getType(),\n-                                        attributeValue));\n-                            } catch (ValidationException e) {\n-                                LOG.error(\"Could not validate expression '\"\n-                                        + leafCond.getAttributeCond().\n-                                        getExpression() + \"'\", e);\n+                    USchema userSchema = schemaDAO.find(\n+                            leafCond.getAttributeCond().getSchema(),\n+                            USchema.class);\n+                    if (userSchema == null) {\n+                        LOG.warn(\"Ignoring invalid schema '\"\n+                                + leafCond.getAttributeCond().getSchema()\n+                                + \"'\");\n+                    } else {\n+                        UAttrValue attributeValue =\n+                                new UAttrValue();\n+                        try {\n+                            if (leafCond.getAttributeCond().getType()\n+                                    == AttributeCond.Type.LIKE) {\n+\n+                                attributeValue.setStringValue(\n+                                        leafCond.getAttributeCond().\n+                                        getExpression());\n+                            } else {\n+                                attributeValue =\n+                                        userSchema.getValidator().\n+                                        getValue(\n+                                        leafCond.getAttributeCond().\n+                                        getExpression(),\n+                                        attributeValue);\n                             }\n+\n+                            criterion = Restrictions.and(\n+                                    Restrictions.eq(\"a.schema.name\",\n+                                    leafCond.getAttributeCond().getSchema()),\n+                                    getCriterion(\n+                                    leafCond.getAttributeCond().getType(),\n+                                    attributeValue));\n+                        } catch (ValidationException e) {\n+                            LOG.error(\"Could not validate expression '\"\n+                                    + leafCond.getAttributeCond().\n+                                    getExpression() + \"'\", e);\n                         }\n                     }\n+                }\n \n                 break;\n \n@@ -379,8 +378,8 @@ private Criterion getCriterion(final NodeCond leafCond) {\n                                     leafCond.getAttributeCond().getType(),\n                                     attributeValue)));\n \n-                            // if user doesn't have the attribute it won't be returned\n-\n+                            // if user doesn't have the attribute\n+                            // it won't be returned\n                         } catch (ValidationException e) {\n                             LOG.error(\"Could not validate expression '\"\n                                     + leafCond.getAttributeCond()."},{"sha":"dc93eff5e5d74a6efebba4fa3095c1eef69b5670","filename":"core/src/main/java/org/syncope/core/persistence/validation/MultiUniqueValueException.java","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FMultiUniqueValueException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FMultiUniqueValueException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FMultiUniqueValueException.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -1,25 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.persistence.validation;\n-\n-import org.syncope.core.persistence.beans.AbstractSchema;\n-\n-public class MultiUniqueValueException extends ValidationException {\n-\n-    public MultiUniqueValueException(AbstractSchema schema) {\n-        super(\"A schema cannot be multivalue and uniquevalue at the same time\"\n-                + schema);\n-    }\n-}"},{"sha":"876491dbb55b087aa7d10bca001510c626573053","filename":"core/src/main/java/org/syncope/core/persistence/validation/ValidationException.java","status":"removed","additions":0,"deletions":30,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FValidationException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FValidationException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FValidationException.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -1,30 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.persistence.validation;\n-\n-public abstract class ValidationException extends Exception {\n-\n-    public ValidationException(String message) {\n-        super(message);\n-    }\n-\n-    public ValidationException(Throwable cause) {\n-        super(cause);\n-    }\n-\n-    public ValidationException(String message, Throwable cause) {\n-        super(message, cause);\n-    }\n-}"},{"sha":"d175471567e34508c2c2de7544a970a97cce5e38","filename":"core/src/main/java/org/syncope/core/persistence/validation/attrvalue/AbstractValidator.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FAbstractValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FAbstractValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FAbstractValidator.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -12,26 +12,26 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.validation;\n+package org.syncope.core.persistence.validation.attrvalue;\n \n import java.text.DecimalFormat;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n-public abstract class AbstractAttributeValidator implements AttributeValidator {\n+public abstract class AbstractValidator implements Validator {\n \n-    final protected AbstractSchema schema;\n+    protected final AbstractSchema schema;\n \n-    public AbstractAttributeValidator(final AbstractSchema schema) {\n+    public AbstractValidator(final AbstractSchema schema) {\n         this.schema = schema;\n     }\n \n     @Override\n     public <T extends AbstractAttrValue> T getValue(final String value,\n             T attributeValue)\n-            throws ParseException, ValidationFailedException {\n+            throws ParseException, InvalidAttrValueException {\n \n         attributeValue = parseValue(value, attributeValue);\n         doValidate(attributeValue);\n@@ -96,5 +96,5 @@ private <T extends AbstractAttrValue> T parseValue(final String value,\n \n     protected abstract <T extends AbstractAttrValue> void doValidate(\n             T attributeValue)\n-            throws ValidationFailedException;\n+            throws InvalidAttrValueException;\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/validation/AbstractAttributeValidator.java"},{"sha":"ca392301337287906ae30b48b5c2bab733677ea2","filename":"core/src/main/java/org/syncope/core/persistence/validation/attrvalue/AlwaysTrueValidator.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FAlwaysTrueValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FAlwaysTrueValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FAlwaysTrueValidator.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,22 +2,22 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.validation;\n+package org.syncope.core.persistence.validation.attrvalue;\n \n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n-public class AlwaysTrueValidator extends AbstractAttributeValidator {\n+public class AlwaysTrueValidator extends AbstractValidator {\n \n     public AlwaysTrueValidator(AbstractSchema schema) {\n \n@@ -26,11 +26,11 @@ public AlwaysTrueValidator(AbstractSchema schema) {\n \n     @Override\n     protected void doValidate(AbstractAttrValue attributeValue)\n-            throws ValidationFailedException {\n+            throws InvalidAttrValueException {\n \n         Boolean value = attributeValue.getValue();\n         if (!value) {\n-            throw new ValidationFailedException(attributeValue);\n+            throw new InvalidAttrValueException(attributeValue);\n         }\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/validation/AlwaysTrueValidator.java"},{"sha":"667ab24ae7bd92f4ece3b5627782e55a174487b3","filename":"core/src/main/java/org/syncope/core/persistence/validation/attrvalue/BasicValidator.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FBasicValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FBasicValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FBasicValidator.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,30 +2,30 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.validation;\n+package org.syncope.core.persistence.validation.attrvalue;\n \n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n-public class BasicAttributeValidator extends AbstractAttributeValidator {\n+public class BasicValidator extends AbstractValidator {\n \n-    public BasicAttributeValidator(AbstractSchema schema) {\n+    public BasicValidator(AbstractSchema schema) {\n \n         super(schema);\n     }\n \n     @Override\n     protected void doValidate(AbstractAttrValue attributeValue)\n-            throws ValidationFailedException {\n+            throws InvalidAttrValueException {\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/validation/BasicAttributeValidator.java"},{"sha":"28e77466859b5698d144700875ac2943e738b14b","filename":"core/src/main/java/org/syncope/core/persistence/validation/attrvalue/EmailAddressValidator.java","status":"renamed","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FEmailAddressValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FEmailAddressValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FEmailAddressValidator.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,43 +2,42 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.validation;\n+package org.syncope.core.persistence.validation.attrvalue;\n \n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n-public class EmailAddressValidator extends AbstractAttributeValidator {\n+public class EmailAddressValidator extends AbstractValidator {\n \n-    final private static Pattern emailValidationPattern = Pattern.compile(\n+    private static final Pattern EMAIL_PATTERN = Pattern.compile(\n             \"^[\\\\w\\\\-]([\\\\.\\\\w])+[\\\\w]+@([\\\\w\\\\-]+\\\\.)+[A-Z]{2,4}$\",\n             Pattern.CASE_INSENSITIVE);\n \n     public EmailAddressValidator(AbstractSchema schema) {\n-\n         super(schema);\n     }\n \n     @Override\n     protected void doValidate(AbstractAttrValue attributeValue)\n-            throws ValidationFailedException {\n+            throws InvalidAttrValueException {\n \n         CharSequence emailAddress = attributeValue.getValue();\n-        Matcher matcher = emailValidationPattern.matcher(emailAddress);\n+        Matcher matcher = EMAIL_PATTERN.matcher(emailAddress);\n \n         if (!matcher.matches()) {\n-            throw new ValidationFailedException(attributeValue);\n+            throw new InvalidAttrValueException(attributeValue);\n         }\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/validation/EmailAddressValidator.java"},{"sha":"b581c423e47979926f292308506b0304b9b4fa50","filename":"core/src/main/java/org/syncope/core/persistence/validation/attrvalue/InvalidAttrValueException.java","status":"renamed","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FInvalidAttrValueException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FInvalidAttrValueException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FInvalidAttrValueException.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,23 +2,24 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.validation;\n+package org.syncope.core.persistence.validation.attrvalue;\n \n+import javax.validation.ValidationException;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n-public class ValidationFailedException extends ValidationException {\n+public class InvalidAttrValueException extends ValidationException {\n \n-    public ValidationFailedException(AbstractAttrValue attributeValue) {\n-        super(\"Could not validate \" + attributeValue);\n+    public InvalidAttrValueException(AbstractAttrValue value) {\n+        super(\"Could not validate \" + value);\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/validation/ValidationFailedException.java"},{"sha":"8b673bb3e1bcfc0c10c542f222d6747ea7a25a00","filename":"core/src/main/java/org/syncope/core/persistence/validation/attrvalue/ParseException.java","status":"renamed","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FParseException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FParseException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FParseException.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,17 +2,19 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.validation;\n+package org.syncope.core.persistence.validation.attrvalue;\n+\n+import javax.validation.ValidationException;\n \n public class ParseException extends ValidationException {\n ","previous_filename":"core/src/main/java/org/syncope/core/persistence/validation/ParseException.java"},{"sha":"bcbda5e87bc306b94a7b65e44253fe3d31263e0b","filename":"core/src/main/java/org/syncope/core/persistence/validation/attrvalue/Validator.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FValidator.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -12,13 +12,13 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.validation;\n+package org.syncope.core.persistence.validation.attrvalue;\n \n import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n-public interface AttributeValidator {\n+public interface Validator {\n \n     <T extends AbstractAttrValue> T getValue(String value,\n             T attributeValue)\n-            throws ParseException, ValidationFailedException;\n+            throws ParseException, InvalidAttrValueException;\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/validation/AttributeValidator.java"},{"sha":"8e4f1f5558e185ead50fa627539f64c3ad2dd23e","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/AttrCheck.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrCheck.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -0,0 +1,38 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({\n+    ElementType.TYPE\n+})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = AttrValidator.class)\n+@Documented\n+public @interface AttrCheck {\n+\n+    String message() default \"{org.syncope.core.validation.attr}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"001ca7fdf21a48fbda099b345331a8d342529c4c","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/AttrValidator.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValidator.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -0,0 +1,60 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.types.EntityViolationType;\n+\n+public class AttrValidator\n+        implements ConstraintValidator<AttrCheck, AbstractAttr> {\n+\n+    @Override\n+    public void initialize(final AttrCheck constraintAnnotation) {\n+    }\n+\n+    @Override\n+    public boolean isValid(final AbstractAttr object,\n+            final ConstraintValidatorContext context) {\n+\n+        boolean isValid;\n+\n+        if (object == null) {\n+            isValid = true;\n+        } else {\n+            if (object.getSchema().isUniqueConstraint()) {\n+                isValid = object.getValues().isEmpty()\n+                        && object.getUniqueValue() != null;\n+            } else {\n+                isValid = !object.getValues().isEmpty()\n+                        && object.getUniqueValue() == null;\n+            }\n+            if (!object.getSchema().isMultivalue()) {\n+                isValid &= object.getValues().size() == 1\n+                        && object.getUniqueValue() == null;\n+            }\n+\n+            if (!isValid) {\n+                context.disableDefaultConstraintViolation();\n+                context.buildConstraintViolationWithTemplate(\n+                        EntityViolationType.InvalidValues.toString()).\n+                        addConstraintViolation();\n+            }\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"d9a143e16dd7c48e8a5dc7ec13da7e841166a4f0","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/AttrValueCheck.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValueCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValueCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValueCheck.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -0,0 +1,38 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({\n+    ElementType.TYPE\n+})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = AttrValueValidator.class)\n+@Documented\n+public @interface AttrValueCheck {\n+\n+    String message() default \"{org.syncope.core.validation.attrvalue}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"8df16724803ab3941f70f0dc6d50f086e1d2f41b","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/AttrValueValidator.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValueValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValueValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValueValidator.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -0,0 +1,66 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n+import org.syncope.types.EntityViolationType;\n+\n+public class AttrValueValidator\n+        implements ConstraintValidator<AttrValueCheck, AbstractAttrValue> {\n+\n+    @Override\n+    public void initialize(final AttrValueCheck constraintAnnotation) {\n+    }\n+\n+    @Override\n+    public boolean isValid(final AbstractAttrValue object,\n+            final ConstraintValidatorContext context) {\n+\n+        boolean isValid = false;\n+\n+        if (object == null) {\n+            isValid = true;\n+        } else {\n+            int nonNullVales = 0;\n+            if (object.getBooleanValue() != null) {\n+                nonNullVales++;\n+            }\n+            if (object.getDateValue() != null) {\n+                nonNullVales++;\n+            }\n+            if (object.getDoubleValue() != null) {\n+                nonNullVales++;\n+            }\n+            if (object.getLongValue() != null) {\n+                nonNullVales++;\n+            }\n+            if (object.getStringValue() != null) {\n+                nonNullVales++;\n+            }\n+            isValid = nonNullVales == 1;\n+\n+            if (!isValid) {\n+                context.disableDefaultConstraintViolation();\n+                context.buildConstraintViolationWithTemplate(\n+                        EntityViolationType.MoreThanOneNonNull.toString()).\n+                        addConstraintViolation();\n+            }\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"20aa65f3a14fa5232807ce9db6c7a8f727d4a900","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/EntityValidationInterceptor.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntityValidationInterceptor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntityValidationInterceptor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntityValidationInterceptor.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -0,0 +1,68 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.util.Set;\n+import javax.validation.ConstraintViolation;\n+import javax.validation.Validation;\n+import javax.validation.Validator;\n+import javax.validation.ValidatorFactory;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * AOP proxy intercepting DAO calls.\n+ */\n+@Component\n+@Aspect\n+public class EntityValidationInterceptor {\n+\n+    private static final ValidatorFactory VALIDATOR_FACTORY =\n+            Validation.buildDefaultValidatorFactory();\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(\n+            EntityValidationInterceptor.class);\n+\n+    /**\n+     * Validate bean prior saving to DB.\n+     *\n+     * @param pjp Aspect's ProceedingJoinPoint\n+     * @return DAO method's return value\n+     * @throws Throwable if anything goes wrong\n+     */\n+    @Around(\"execution(* org.syncope.core.persistence.dao..*.save(..))\")\n+    public final Object save(final ProceedingJoinPoint pjp)\n+            throws Throwable {\n+\n+        Validator validator = VALIDATOR_FACTORY.getValidator();\n+\n+        Set<ConstraintViolation<Object>> violations =\n+                validator.validate(pjp.getArgs()[0]);\n+        if (!violations.isEmpty()) {\n+            LOG.error(\"Bean validation errors found: {}\", violations);\n+            throw new InvalidEntityException(\n+                    pjp.getArgs()[0].getClass(), violations);\n+        }\n+\n+        return pjp.proceed();\n+    }\n+}"},{"sha":"e253503220240cb138d91b1007be63e38ac11797","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/InvalidEntityException.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FInvalidEntityException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FInvalidEntityException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FInvalidEntityException.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -0,0 +1,57 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ValidationException;\n+import org.syncope.types.EntityViolationType;\n+\n+public class InvalidEntityException extends ValidationException {\n+\n+    final private Class entityClass;\n+\n+    final private Set<EntityViolationType> violations;\n+\n+    public InvalidEntityException(final Class entityClass,\n+            final Set<ConstraintViolation<Object>> violations) {\n+\n+        super();\n+\n+        this.entityClass = entityClass;\n+\n+        this.violations = EnumSet.noneOf(EntityViolationType.class);\n+        EntityViolationType entityViolationType;\n+        for (ConstraintViolation<Object> violation : violations) {\n+            try {\n+                entityViolationType = EntityViolationType.valueOf(\n+                        violation.getMessageTemplate());\n+            } catch (IllegalArgumentException e) {\n+                entityViolationType = EntityViolationType.Standard;\n+                entityViolationType.setMessageTemplate(\n+                        violation.getPropertyPath() + \": \"\n+                        + violation.getMessage());\n+            }\n+\n+            this.violations.add(entityViolationType);\n+        }\n+    }\n+\n+    @Override\n+    public String getMessage() {\n+        return entityClass.getSimpleName() + \" \" + violations.toString();\n+    }\n+}"},{"sha":"1cd6266454a2785989bebd41fc5f8d633f912d44","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SchemaCheck.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaCheck.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -0,0 +1,38 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({\n+    ElementType.TYPE\n+})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = SchemaValidator.class)\n+@Documented\n+public @interface SchemaCheck {\n+\n+    String message() default \"{org.syncope.core.validation.schema}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"d840427c3b0f5c1fdc66150f29b61076330f8a3d","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SchemaValidator.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaValidator.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -0,0 +1,51 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.types.EntityViolationType;\n+\n+public class SchemaValidator\n+        implements ConstraintValidator<SchemaCheck, AbstractSchema> {\n+\n+    @Override\n+    public void initialize(final SchemaCheck constraintAnnotation) {\n+    }\n+\n+    @Override\n+    public boolean isValid(final AbstractSchema object,\n+            final ConstraintValidatorContext context) {\n+\n+        boolean isValid = false;\n+\n+        if (object == null) {\n+            isValid = true;\n+        } else {\n+            isValid = object.isMultivalue()\n+                    ? !object.isUniqueConstraint() : true;\n+\n+            if (!isValid) {\n+                context.disableDefaultConstraintViolation();\n+                context.buildConstraintViolationWithTemplate(\n+                        EntityViolationType.MultivalueAndUniqueConstraint.\n+                        toString()).addConstraintViolation();\n+            }\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"180bdd934e27a1edb285a5cf16f40171ffea8584","filename":"core/src/main/java/org/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -32,16 +32,16 @@\n import org.syncope.client.to.ConfigurationTO;\n import org.syncope.core.persistence.beans.SyncopeConf;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n-import org.syncope.core.persistence.validation.AttributeValidator;\n+import org.syncope.core.persistence.dao.SyncopeConfDAO;\n+import org.syncope.core.persistence.validation.attrvalue.Validator;\n import org.syncope.core.rest.data.ConfigurationDataBinder;\n \n @Controller\n @RequestMapping(\"/configuration\")\n public class ConfigurationController extends AbstractController {\n \n     @Autowired\n-    private SyncopeConfigurationDAO syncopeConfigurationDAO;\n+    private SyncopeConfDAO syncopeConfigurationDAO;\n     @Autowired\n     private ConfigurationDataBinder configurationDataBinder;\n \n@@ -137,8 +137,8 @@ public ModelAndView getValidators() {\n         Reflections reflections = new Reflections(\n                 \"org.syncope.core.persistence.validation\");\n \n-        Set<Class<? extends AttributeValidator>> subTypes =\n-                reflections.getSubTypesOf(AttributeValidator.class);\n+        Set<Class<? extends Validator>> subTypes =\n+                reflections.getSubTypesOf(Validator.class);\n \n         Set<String> validators = new HashSet<String>();\n         for (Class validatorClass : subTypes) {"},{"sha":"33f155a45dbfbe6b98ff0dc735d50ee45ff8ed65","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -29,7 +29,6 @@\n import org.syncope.core.rest.data.SchemaDataBinder;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.validation.MultiUniqueValueException;\n \n @Controller\n @RequestMapping(\"/schema\")\n@@ -45,8 +44,7 @@ public class SchemaController extends AbstractController {\n     public SchemaTO create(final HttpServletResponse response,\n             @RequestBody final SchemaTO schemaTO,\n             @PathVariable(\"kind\") final String kind)\n-            throws MultiUniqueValueException,\n-            SyncopeClientCompositeErrorException {\n+            throws SyncopeClientCompositeErrorException {\n \n         AbstractSchema schema = schemaDataBinder.create(schemaTO,\n                 getAttributableUtil(kind).newSchema(),\n@@ -107,8 +105,7 @@ public SchemaTO read(@PathVariable(\"kind\") final String kind,\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n     public SchemaTO update(@RequestBody final SchemaTO schemaTO,\n             @PathVariable(\"kind\") final String kind)\n-            throws SyncopeClientCompositeErrorException,\n-            MultiUniqueValueException, NotFoundException {\n+            throws SyncopeClientCompositeErrorException, NotFoundException {\n \n         Class reference = getAttributableUtil(kind).schemaClass();\n         AbstractSchema schema = schemaDAO.find(schemaTO.getName(), reference);"},{"sha":"8825a467d892a5c130d61917d5bc00dc6ea77fce","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -20,6 +20,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n+import javax.validation.ValidationException;\n import org.apache.commons.jexl2.Expression;\n import org.apache.commons.jexl2.JexlContext;\n import org.apache.commons.jexl2.JexlEngine;\n@@ -54,7 +55,6 @@\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n import org.syncope.core.persistence.propagation.ResourceOperations;\n-import org.syncope.core.persistence.validation.ValidationException;\n import org.syncope.types.ResourceOperationType;\n import org.syncope.types.SchemaType;\n import org.syncope.types.SyncopeClientExceptionType;"},{"sha":"6b9126f612f0642d57292ee1a726711ce8d91289","filename":"core/src/main/java/org/syncope/core/workflow/BaseSendEmail.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FBaseSendEmail.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FBaseSendEmail.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FBaseSendEmail.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -25,17 +25,16 @@\n import org.apache.commons.mail.EmailException;\n import org.apache.commons.mail.HtmlEmail;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n+import org.syncope.core.persistence.dao.SyncopeConfDAO;\n \n public class BaseSendEmail extends OSWorkflowComponent\n         implements FunctionProvider {\n \n-    protected SyncopeConfigurationDAO syncopeConfigurationDAO;\n+    protected SyncopeConfDAO syncopeConfigurationDAO;\n \n     public BaseSendEmail() {\n         syncopeConfigurationDAO =\n-                (SyncopeConfigurationDAO) context.getBean(\n-                \"syncopeConfigurationDAOImpl\");\n+                (SyncopeConfDAO) context.getBean(\"syncopeConfDAOImpl\");\n     }\n \n     protected String getEmailBody(String urlPrefix, String template,"},{"sha":"b95ebfe6940d8a708f4c1d6d9c4109de3bd59a53","filename":"core/src/main/java/org/syncope/core/workflow/GenerateToken.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -21,7 +21,7 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n+import org.syncope.core.persistence.dao.SyncopeConfDAO;\n import javax.crypto.Cipher;\n import javax.crypto.SecretKey;\n import javax.crypto.SecretKeyFactory;\n@@ -31,14 +31,13 @@\n public class GenerateToken extends OSWorkflowComponent\n         implements FunctionProvider {\n \n-    private SyncopeConfigurationDAO syncopeConfigurationDAO;\n+    private SyncopeConfDAO syncopeConfigurationDAO;\n \n     public GenerateToken() {\n         super();\n \n         syncopeConfigurationDAO =\n-                (SyncopeConfigurationDAO) context.getBean(\n-                \"syncopeConfigurationDAOImpl\");\n+                (SyncopeConfDAO) context.getBean(\"syncopeConfDAOImpl\");\n     }\n \n     @Override"},{"sha":"f7481bd7f65c7b51cb0f67b4f22375077793e29e","filename":"core/src/main/resources/content.xml","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -20,12 +20,12 @@\n     <hibernate_sequences sequence_name=\"SyncopeUser\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SchemaMapping\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"ConnectorInstance\" sequence_next_hi_value=\"10\"/>\n-    <hibernate_sequences sequence_name=\"UserAttribute\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"RoleAttribute\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"MembershipAttribute\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"UserAttributeValue\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"RoleAttributeValue\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"MembershipAttributeValue\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"UAttr\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"RAttr\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"MAttr\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"UAttrValue\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"RAttrValue\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"MAttrValue\" sequence_next_hi_value=\"1000\"/>\n \n     <SyncopeConfiguration confKey=\"token.length\" confValue=\"256\"/>\n     <SyncopeConfiguration confKey=\"token.expireTime\" confValue=\"60\"/>\n@@ -48,24 +48,24 @@\n     <SyncopeConfiguration confKey=\"identityconnectors.bundle.directory\" confValue=\"${bundles.directory}\"/>\n     <SyncopeConfiguration confKey=\"users.attributes.view\" confValue=\"userId;\"/>\n \n-    <UserSchema name=\"surname\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"surname\" type=\"String\" virtual=\"0\"\n                 mandatoryCondition=\"true\" multivalue=\"0\" uniquevalue=\"0\" readonly=\"0\"/>\n-    <UserSchema name=\"firstname\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"firstname\" type=\"String\" virtual=\"0\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniquevalue=\"0\" readonly=\"0\"/>\n-    <UserSchema name=\"email\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"email\" type=\"String\" virtual=\"0\"\n                 mandatoryCondition=\"false\" multivalue=\"1\" uniquevalue=\"0\" readonly=\"0\"\n-                validatorClass=\"org.syncope.core.persistence.validation.EmailAddressValidator\"/>\n+                validatorClass=\"org.syncope.core.persistence.validation.attrvalue.EmailAddressValidator\"/>\n                \n-    <UserDerivedSchema name=\"username\" expression=\"firstname + '.' + surname\"/>\n+    <UDerSchema name=\"username\" expression=\"firstname + '.' + surname\"/>\n \n-    <UserSchemaDerivation derivedSchemas_name=\"username\"\n+    <USchemaDerivation derivedSchemas_name=\"username\"\n                           schemas_name=\"firstname\"/>\n-    <UserSchemaDerivation derivedSchemas_name=\"username\"\n+    <USchemaDerivation derivedSchemas_name=\"username\"\n                           schemas_name=\"surname\"/>\n \n     <SyncopeRole id=\"0\" name=\"/\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\"/>\n \n-    <MembershipSchema name=\"subscriptionDate\" type=\"Date\" virtual=\"0\"\n+    <MSchema name=\"subscriptionDate\" type=\"Date\" virtual=\"0\"\n                       mandatoryCondition=\"false\" multivalue=\"0\" uniquevalue=\"0\" readonly=\"0\"\n                       conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n "},{"sha":"a6d440d3b802800aeb76ec12ad39fc4b36ef73b5","filename":"core/src/main/webapp/syncopeClientError.jsp","status":"modified","additions":2,"deletions":10,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -2,7 +2,6 @@\n <%@page isErrorPage=\"true\" contentType=\"application/json\" pageEncoding=\"UTF-8\"%>\n <%@page import=\"org.syncope.core.rest.data.InvalidSearchConditionException\"%>\n <%@page import=\"org.syncope.core.persistence.dao.MissingConfKeyException\"%>\n-<%@page import=\"org.syncope.core.persistence.validation.MultiUniqueValueException\"%>\n <%@page import=\"org.syncope.client.validation.SyncopeClientException\"%>\n <%@page import=\"org.syncope.client.validation.SyncopeClientCompositeErrorException\"%>\n <%@page import=\"org.syncope.core.persistence.propagation.PropagationException\"%>\n@@ -14,13 +13,13 @@\n <%@page import=\"org.slf4j.Logger\"%>\n <%@page import=\"org.syncope.core.rest.controller.AbstractController\"%>\n \n-<%!    static final Logger log =\n+<%!    static final Logger LOG =\n             LoggerFactory.getLogger(AbstractController.class);%>\n \n <%\n             Throwable ex = pageContext.getErrorData().getThrowable();\n \n-            log.error(\"Exception thrown by REST methods\", ex);\n+            LOG.error(\"Exception thrown by REST methods\", ex);\n \n             int statusCode = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n \n@@ -70,13 +69,6 @@\n \n                 statusCode = ((SyncopeClientCompositeErrorException) ex).\n                         getStatusCode().value();\n-            } else if (ex instanceof MultiUniqueValueException) {\n-                response.setHeader(\n-                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                        SyncopeClientExceptionType.InvalidSchemaDefinition.\n-                        getHeaderValue());\n-\n-                statusCode = HttpServletResponse.SC_BAD_REQUEST;\n             } else if (ex instanceof MissingConfKeyException) {\n                 response.setHeader(\n                         SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,"},{"sha":"b4bf29ab2dd867b8645aed0f3db8ec821e63611a","filename":"core/src/test/java/org/syncope/core/persistence/dao/AttributeTest.java","status":"modified","additions":36,"deletions":2,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeTest.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -14,21 +14,28 @@\n  */\n package org.syncope.core.persistence.dao;\n \n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import static org.junit.Assert.*;\n \n import java.util.List;\n+import javax.validation.ValidationException;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.annotation.ExpectedException;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.UAttr;\n import org.syncope.core.persistence.beans.user.USchema;\n-import org.syncope.core.persistence.validation.ValidationException;\n import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.beans.user.UAttrUniqueValue;\n import org.syncope.core.rest.data.AttributableUtil;\n \n @Transactional\n public class AttributeTest extends AbstractTest {\n \n+    @Autowired\n+    private SyncopeUserDAO syncopeUserDAO;\n+\n     @Autowired\n     private AttributeDAO attributeDAO;\n \n@@ -55,11 +62,15 @@ public final void findById() {\n     @Test\n     public final void save()\n             throws ClassNotFoundException {\n+\n+        SyncopeUser user = syncopeUserDAO.find(1L);\n+\n         USchema emailSchema = userSchemaDAO.find(\"email\", USchema.class);\n         assertNotNull(emailSchema);\n \n         UAttr attribute = new UAttr();\n         attribute.setSchema(emailSchema);\n+        attribute.setOwner(user);\n \n         Exception thrown = null;\n         try {\n@@ -78,14 +89,37 @@ public final void save()\n         }\n         assertNotNull(\"validation exception expected here \", thrown);\n \n-        attribute = attributeDAO.save(attribute);\n+        try {\n+            attribute = attributeDAO.save(attribute);\n+        } catch (InvalidEntityException e) {\n+            assertNull(e);\n+        }\n \n         UAttr actual = attributeDAO.find(attribute.getId(),\n                 UAttr.class);\n         assertNotNull(\"expected save to work\", actual);\n         assertEquals(attribute, actual);\n     }\n \n+    @Test\n+    @ExpectedException(InvalidEntityException.class)\n+    public final void validateAndSave() {\n+        USchema emailSchema = userSchemaDAO.find(\"email\", USchema.class);\n+        assertNotNull(emailSchema);\n+\n+        UAttr attribute = new UAttr();\n+        attribute.setSchema(emailSchema);\n+\n+        UAttrUniqueValue uauv = new UAttrUniqueValue();\n+        uauv.setAttribute(attribute);\n+        uauv.setSchema(emailSchema);\n+        uauv.setStringValue(\"a value\");\n+\n+        attribute.setUniqueValue(uauv);\n+\n+        attribute = attributeDAO.save(attribute);\n+    }\n+\n     @Test\n     public final void delete() {\n         UAttr attribute = attributeDAO.find(200L, UAttr.class);"},{"sha":"5c1c7e4a6daa12fe4e1725eb84f19d752a274a53","filename":"core/src/test/java/org/syncope/core/persistence/dao/SchemaTest.java","status":"modified","additions":18,"deletions":9,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -19,11 +19,12 @@\n import java.util.List;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.annotation.ExpectedException;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.role.RSchema;\n import org.syncope.core.persistence.beans.user.USchema;\n-import org.syncope.core.persistence.validation.MultiUniqueValueException;\n import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.syncope.types.SchemaValueType;\n \n @Transactional\n@@ -32,9 +33,6 @@ public class SchemaTest extends AbstractTest {\n     @Autowired\n     private SchemaDAO schemaDAO;\n \n-    @Autowired\n-    private AttributeDAO attributeDAO;\n-\n     @Test\n     public final void findAll() {\n         List<USchema> userList = schemaDAO.findAll(USchema.class);\n@@ -62,17 +60,28 @@ public final void save() {\n         attributeSchema.setMandatoryCondition(\"false\");\n         attributeSchema.setMultivalue(true);\n \n-        try {\n-            schemaDAO.save(attributeSchema);\n-        } catch (MultiUniqueValueException e) {\n-            LOG.error(\"Unexpected exception\", e);\n-        }\n+        schemaDAO.save(attributeSchema);\n \n         USchema actual = schemaDAO.find(\"secondaryEmail\", USchema.class);\n         assertNotNull(\"expected save to work\", actual);\n         assertEquals(attributeSchema, actual);\n     }\n \n+    @Test\n+    @ExpectedException(InvalidEntityException.class)\n+    public final void saveNonValid() {\n+        USchema attributeSchema = new USchema();\n+        attributeSchema.setName(\"secondaryEmail\");\n+        attributeSchema.setType(SchemaValueType.String);\n+        attributeSchema.setValidatorClass(\n+                \"org.syncope.core.validation.EmailAddressValidator\");\n+        attributeSchema.setMandatoryCondition(\"false\");\n+        attributeSchema.setMultivalue(true);\n+        attributeSchema.setUniqueConstraint(true);\n+\n+        schemaDAO.save(attributeSchema);\n+    }\n+\n     @Test\n     public final void delete() {\n         USchema schema ="},{"sha":"ac6e3f8282121c25c33d0e9d7f7c6cb0bf3b0d12","filename":"core/src/test/resources/content.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/376e37aeacc437d8153d1656b90eb332ba8f3b4c/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=376e37aeacc437d8153d1656b90eb332ba8f3b4c","patch":"@@ -70,7 +70,7 @@\n                 mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"1\" readonly=\"0\"/>\n     <USchema name=\"userId\" type=\"String\" virtual=\"0\"\n                 mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"1\" readonly=\"0\"\n-                validatorClass=\"org.syncope.core.persistence.validation.EmailAddressValidator\"/>\n+                validatorClass=\"org.syncope.core.persistence.validation.attrvalue.EmailAddressValidator\"/>\n     <USchema name=\"loginDate\" type=\"Date\" virtual=\"0\"\n                 mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"\n                 conversionPattern=\"yyyy-MM-dd\"/>\n@@ -81,8 +81,8 @@\n     <USchema name=\"type\" type=\"String\" virtual=\"0\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n     <USchema name=\"email\" type=\"String\" virtual=\"0\"\n-                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"1\" readonly=\"0\"\n-                validatorClass=\"org.syncope.core.persistence.validation.EmailAddressValidator\"/>\n+                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n+                validatorClass=\"org.syncope.core.persistence.validation.attrvalue.EmailAddressValidator\"/>\n     <USchema name=\"activationDate\" type=\"Date\" virtual=\"0\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                 conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>"}]}