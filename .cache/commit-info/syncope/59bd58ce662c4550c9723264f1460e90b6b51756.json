{"sha":"59bd58ce662c4550c9723264f1460e90b6b51756","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjU5YmQ1OGNlNjYyYzQ1NTBjOTcyMzI2NGYxNDYwZTkwYjZiNTE3NTY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-26T14:47:55Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-26T14:47:55Z"},"message":"Merge branch 'master' into 2_0_X","tree":{"sha":"1aeb0f7713a6faab1595f777fb1f945188a83676","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1aeb0f7713a6faab1595f777fb1f945188a83676"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/59bd58ce662c4550c9723264f1460e90b6b51756","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/59bd58ce662c4550c9723264f1460e90b6b51756","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/59bd58ce662c4550c9723264f1460e90b6b51756","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/59bd58ce662c4550c9723264f1460e90b6b51756/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"1327b2a44abe1cc1cea08540af17749bdbd88d4e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1327b2a44abe1cc1cea08540af17749bdbd88d4e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1327b2a44abe1cc1cea08540af17749bdbd88d4e"},{"sha":"f32528c1fb798ec51a6da7a43abaa1f52b1efe28","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f32528c1fb798ec51a6da7a43abaa1f52b1efe28","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f32528c1fb798ec51a6da7a43abaa1f52b1efe28"}],"stats":{"total":846,"additions":802,"deletions":44},"files":[{"sha":"da87d466c1a53279736babea4ebb59ad0c20b68f","filename":"cli/src/main/java/org/apache/syncope/cli/SyncopeAdm.java","status":"modified","additions":41,"deletions":5,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59bd58ce662c4550c9723264f1460e90b6b51756/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2FSyncopeAdm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59bd58ce662c4550c9723264f1460e90b6b51756/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2FSyncopeAdm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2FSyncopeAdm.java?ref=59bd58ce662c4550c9723264f1460e90b6b51756","patch":"@@ -20,7 +20,11 @@\n \n import com.beust.jcommander.JCommander;\n import com.beust.jcommander.ParameterException;\n+import org.apache.syncope.cli.commands.ConfigurationCommand;\n import org.apache.syncope.cli.commands.LoggerCommand;\n+import org.apache.syncope.cli.commands.NotificationCommand;\n+import org.apache.syncope.cli.commands.PolicyCommand;\n+import org.apache.syncope.cli.commands.ReportCommand;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -30,11 +34,23 @@ public class SyncopeAdm {\n \n     private static final String helpMessage = \"Usage: Main [options]\\n\"\n             + \"  Options:\\n\"\n-            + \"    logger --help \\n\";\n+            + \"    logger --help \\n\"\n+            + \"    config --help \\n\"\n+            + \"    notification --help \\n\"\n+            + \"    report --help \\n\"\n+            + \"    policy --help \\n\";\n+\n+    private static final JCommander jcommander = new JCommander();\n \n     private static LoggerCommand loggerCommand;\n \n-    private static final JCommander jc = new JCommander();\n+    private static ConfigurationCommand configurationCommand;\n+\n+    private static NotificationCommand notificationCommand;\n+\n+    private static ReportCommand reportCommand;\n+\n+    private static PolicyCommand policyCommand;\n \n     public static void main(final String[] args) {\n         LOG.debug(\"Starting with args \\n\");\n@@ -49,7 +65,7 @@ public static void main(final String[] args) {\n             System.out.println(helpMessage);\n         } else {\n             try {\n-                jc.parse(args);\n+                jcommander.parse(args);\n             } catch (final ParameterException ioe) {\n                 System.out.println(helpMessage);\n                 LOG.error(\"Parameter exception\", ioe);\n@@ -62,17 +78,37 @@ public static void main(final String[] args) {\n     private static void instantiateCommands() {\n         LOG.debug(\"Init JCommander\");\n         loggerCommand = new LoggerCommand();\n-        jc.addCommand(loggerCommand);\n+        jcommander.addCommand(loggerCommand);\n         LOG.debug(\"Added LoggerCommand\");\n+        configurationCommand = new ConfigurationCommand();\n+        jcommander.addCommand(configurationCommand);\n+        LOG.debug(\"Added ConfigurationCommand\");\n+        notificationCommand = new NotificationCommand();\n+        jcommander.addCommand(notificationCommand);\n+        LOG.debug(\"Added NotificationCommand\");\n+        reportCommand = new ReportCommand();\n+        jcommander.addCommand(reportCommand);\n+        LOG.debug(\"Added ReportCommand\");\n+        policyCommand = new PolicyCommand();\n+        jcommander.addCommand(policyCommand);\n+        LOG.debug(\"Added PolicyCommand\");\n     }\n \n     private static void executeCommand() {\n-        final String command = jc.getParsedCommand();\n+        final String command = jcommander.getParsedCommand();\n \n         LOG.debug(\"Called command {}\", command);\n \n         if (\"logger\".equalsIgnoreCase(command)) {\n             loggerCommand.execute();\n+        } else if (\"config\".equalsIgnoreCase(command)) {\n+            configurationCommand.execute();\n+        } else if (\"notification\".equalsIgnoreCase(command)) {\n+            notificationCommand.execute();\n+        } else if (\"report\".equalsIgnoreCase(command)) {\n+            reportCommand.execute();\n+        } else if (\"policy\".equalsIgnoreCase(command)) {\n+            policyCommand.execute();\n         }\n     }\n }"},{"sha":"e7cddd4e1153cd988e3acbbb7be0f1a127d24879","filename":"cli/src/main/java/org/apache/syncope/cli/commands/AbstractCommand.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59bd58ce662c4550c9723264f1460e90b6b51756/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FAbstractCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59bd58ce662c4550c9723264f1460e90b6b51756/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FAbstractCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FAbstractCommand.java?ref=59bd58ce662c4550c9723264f1460e90b6b51756","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+\n+public abstract class AbstractCommand {\n+\n+    @Parameter(names = {\"-h\", \"--help\"})\n+    protected boolean help = false;\n+\n+    @Parameter(names = {\"-l\", \"--list\"})\n+    protected boolean list = false;\n+\n+    protected abstract void execute();\n+}"},{"sha":"5aea462935a750ae566dada3f179523664327463","filename":"cli/src/main/java/org/apache/syncope/cli/commands/ConfigurationCommand.java","status":"added","additions":212,"deletions":0,"changes":212,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59bd58ce662c4550c9723264f1460e90b6b51756/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FConfigurationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59bd58ce662c4550c9723264f1460e90b6b51756/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FConfigurationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FConfigurationCommand.java?ref=59bd58ce662c4550c9723264f1460e90b6b51756","patch":"@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.cli.commands;\n+\n+import com.beust.jcommander.DynamicParameter;\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import java.io.IOException;\n+import java.io.SequenceInputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.cli.SyncopeServices;\n+import org.apache.syncope.cli.util.XmlUtils;\n+import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.services.ConfigurationService;\n+import org.apache.syncope.common.to.AttributeTO;\n+import org.apache.syncope.common.to.ConfTO;\n+import org.apache.syncope.common.wrap.MailTemplate;\n+import org.apache.syncope.common.wrap.Validator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.xml.sax.SAXException;\n+\n+@Parameters(\n+        commandNames = \"config\",\n+        optionPrefixes = \"-\",\n+        separators = \"=\",\n+        commandDescription = \"Apache Syncope configuration service\")\n+public class ConfigurationCommand extends AbstractCommand {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ConfigurationCommand.class);\n+\n+    private static final Class SYNCOPE_CONFIGURATION_CLASS = ConfigurationService.class;\n+\n+    private static final String EXPORT_FILE_NAME = \"/content.xml\";\n+\n+    private final String helpMessage = \"Usage: config [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    -h, --help \\n\"\n+            + \"    -l, --list \\n\"\n+            + \"    -r, --read \\n\"\n+            + \"       Syntax: -r={CONF-NAME} \\n\"\n+            + \"    -u, --update \\n\"\n+            + \"       Syntax: {CONF-NAME}={CONF-VALUE} \\n\"\n+            + \"    -c, --create \\n\"\n+            + \"       Syntax: {CONF-NAME}={CONF-VALUE} \\n\"\n+            + \"    -d, --delete \\n\"\n+            + \"       Syntax: -d={CONF-NAME}\"\n+            + \"    -v, --validators \\n\"\n+            + \"    -mt, --mail-templates \\n\"\n+            + \"    -e, --export \\n\"\n+            + \"       Syntax: -e={WHERE-DIR} \\n\";\n+\n+    @Parameter(names = {\"-r\", \"--read\"})\n+    public String confNameToRead;\n+\n+    @DynamicParameter(names = {\"-u\", \"--update\"})\n+    private final Map<String, String> updateConf = new HashMap<String, String>();\n+\n+    @DynamicParameter(names = {\"-c\", \"--create\"})\n+    private final Map<String, String> createConf = new HashMap<String, String>();\n+\n+    @Parameter(names = {\"-d\", \"--delete\"})\n+    public String confNameToDelete;\n+\n+    @Parameter(names = {\"-v\", \"--validators\"})\n+    public boolean validators = false;\n+\n+    @Parameter(names = {\"-mt\", \"--mail-templates\"})\n+    public boolean mailTemplates = false;\n+\n+    @Parameter(names = {\"-e\", \"--export\"})\n+    public String export;\n+\n+    @Override\n+    public void execute() {\n+        final ConfigurationService configurationService = ((ConfigurationService) SyncopeServices.\n+                get(SYNCOPE_CONFIGURATION_CLASS));\n+\n+        LOG.debug(\"Logger service successfully created\");\n+\n+        if (help) {\n+            LOG.debug(\"- configuration help command\");\n+            System.out.println(helpMessage);\n+        } else if (list) {\n+            LOG.debug(\"- configuration list command\");\n+            try {\n+                final ConfTO confTO = configurationService.list();\n+                for (final AttributeTO attrTO : confTO.getAttrMap().values()) {\n+                    System.out.println(\" - Conf \" + attrTO.getSchema() + \" has value(s) \" + attrTO.getValues()\n+                            + \" - readonly: \" + attrTO.isReadonly());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (StringUtils.isNotBlank(confNameToRead)) {\n+            LOG.debug(\"- configuration read {} command\", confNameToRead);\n+            try {\n+                final AttributeTO attrTO = configurationService.read(confNameToRead);\n+                System.out.println(\" - Conf \" + attrTO.getSchema() + \" has value(s) \" + attrTO.getValues()\n+                        + \" - readonly: \" + attrTO.isReadonly());\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (!updateConf.isEmpty()) {\n+            LOG.debug(\"- configuration update command with params {}\", updateConf);\n+            try {\n+                for (final Map.Entry<String, String> entrySet : updateConf.entrySet()) {\n+                    final AttributeTO attrTO = configurationService.read(entrySet.getKey());\n+                    attrTO.getValues().clear();\n+                    attrTO.getValues().add(entrySet.getValue());\n+                    configurationService.set(entrySet.getKey(), attrTO);\n+                    System.out.println(\" - Conf \" + attrTO.getSchema() + \" has value(s) \" + attrTO.getValues()\n+                            + \" - readonly: \" + attrTO.isReadonly());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (!createConf.isEmpty()) {\n+            LOG.debug(\"- configuration create command with params {}\", createConf);\n+            try {\n+                for (final Map.Entry<String, String> entrySet : createConf.entrySet()) {\n+                    final AttributeTO attrTO = new AttributeTO();\n+                    attrTO.setSchema(entrySet.getKey());\n+                    attrTO.getValues().add(entrySet.getValue());\n+                    configurationService.set(entrySet.getKey(), attrTO);\n+                    System.out.println(\" - Conf \" + attrTO.getSchema() + \" created with value(s) \" + attrTO.getValues()\n+                            + \" - readonly: \" + attrTO.isReadonly());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (StringUtils.isNotBlank(confNameToDelete)) {\n+            try {\n+                LOG.debug(\"- configuration delete {} command\", confNameToDelete);\n+                configurationService.delete(confNameToDelete);\n+                System.out.println(\" - Conf \" + confNameToDelete + \" deleted!\");\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (validators) {\n+            LOG.debug(\"- configuration validators command\");\n+            try {\n+                System.out.println(\"Conf validator class: \");\n+                for (final Validator validator : configurationService.getValidators()) {\n+                    System.out.println(\"  *** \" + validator.getElement());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (mailTemplates) {\n+            LOG.debug(\"- configuration mailTemplates command\");\n+            try {\n+                System.out.println(\"Conf mail template for:\");\n+                for (final MailTemplate mailTemplate : configurationService.getMailTemplates()) {\n+                    System.out.println(\"  *** \" + mailTemplate.getElement());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (StringUtils.isNotBlank(export)) {\n+            LOG.debug(\"- configuration export command, directory where xml will be export: {}\", export);\n+\n+            try {\n+                XmlUtils.createXMLFile((SequenceInputStream) configurationService.export().getEntity(), export\n+                        + EXPORT_FILE_NAME);\n+                System.out.println(\" - \" + export + EXPORT_FILE_NAME + \" successfully created\");\n+            } catch (final IOException ex) {\n+                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n+                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+            } catch (final ParserConfigurationException ex) {\n+                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n+                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+            } catch (final SAXException ex) {\n+                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n+                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+            } catch (final TransformerConfigurationException ex) {\n+                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n+                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+            } catch (final TransformerException ex) {\n+                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n+                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+            } catch (final SyncopeClientException ex) {\n+                LOG.error(\"Error calling configuration service\", ex);\n+                System.out.println(\" - Error calling configuration service \" + ex.getMessage());\n+            }\n+        } else {\n+            System.out.println(helpMessage);\n+        }\n+    }\n+\n+}"},{"sha":"f6007ddc81f80482e2e8ba438504e0fc7baf8ab0","filename":"cli/src/main/java/org/apache/syncope/cli/commands/LoggerCommand.java","status":"modified","additions":89,"deletions":36,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59bd58ce662c4550c9723264f1460e90b6b51756/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FLoggerCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59bd58ce662c4550c9723264f1460e90b6b51756/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FLoggerCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FLoggerCommand.java?ref=59bd58ce662c4550c9723264f1460e90b6b51756","patch":"@@ -25,7 +25,7 @@\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.cli.SyncopeServices;\n-import org.apache.syncope.cli.validators.DebugLevelValidator;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.common.services.LoggerService;\n import org.apache.syncope.common.to.LoggerTO;\n import org.apache.syncope.common.types.LoggerLevel;\n@@ -38,43 +38,45 @@\n         optionPrefixes = \"-\",\n         separators = \"=\",\n         commandDescription = \"Apache Syncope logger service\")\n-public class LoggerCommand {\n+public class LoggerCommand extends AbstractCommand {\n \n     private static final Logger LOG = LoggerFactory.getLogger(LoggerCommand.class);\n \n-    private static final Class syncopeLoggerClass = LoggerService.class;\n+    private static final Class SYNCOPE_LOGGER_CLASS = LoggerService.class;\n \n     private final String helpMessage = \"Usage: logger [options]\\n\"\n             + \"  Options:\\n\"\n             + \"    -h, --help \\n\"\n             + \"    -l, --list \\n\"\n-            + \"    -ua, --update-all \\n\"\n-            + \"       Syntax: -ua={LOGGER-LEVEL} \\n\"\n+            + \"    -r, --read \\n\"\n+            + \"       Syntax: -r={LOG-NAME} \\n\"\n             + \"    -u, --update \\n\"\n             + \"       Syntax: {LOG-NAME}={LOG-LEVEL} \\n\"\n+            + \"    -ua, --update-all \\n\"\n+            + \"       Syntax: -ua={LOG-LEVEL} \\n\"\n+            + \"    -c, --create \\n\"\n+            + \"       Syntax: {LOG-NAME}={LOG-LEVEL} \\n\"\n             + \"    -d, --delete \\n\"\n-            + \"       Syntax: -d={LOGGER-NAME}\";\n+            + \"       Syntax: -d={LOG-NAME}\";\n \n-    @Parameter(names = {\"-h\", \"--help\"})\n-    public boolean help = false;\n+    @Parameter(names = {\"-r\", \"--read\"})\n+    public String logNameToRead;\n \n-    @Parameter(names = {\"-l\", \"--list\"})\n-    public boolean list = false;\n+    @DynamicParameter(names = {\"-u\", \"--update\"})\n+    private final Map<String, String> updateLogs = new HashMap<String, String>();\n \n-    @Parameter(names = {\"-ua\", \"--update-all\"}, validateWith = DebugLevelValidator.class)\n+    @Parameter(names = {\"-ua\", \"--update-all\"})\n     public String logLevel;\n \n-    @Parameter(names = {\"-r\", \"--read\"})\n-    public String logNameToRead;\n+    @DynamicParameter(names = {\"-c\", \"--create\"})\n+    private final Map<String, String> createLogs = new HashMap<String, String>();\n \n     @Parameter(names = {\"-d\", \"--delete\"})\n     public String logNameToDelete;\n \n-    @DynamicParameter(names = {\"-u\", \"--update\"})\n-    private final Map<String, String> params = new HashMap<String, String>();\n-\n+    @Override\n     public void execute() {\n-        final LoggerService loggerService = ((LoggerService) SyncopeServices.get(syncopeLoggerClass));\n+        final LoggerService loggerService = ((LoggerService) SyncopeServices.get(SYNCOPE_LOGGER_CLASS));\n \n         LOG.debug(\"Logger service successfully created\");\n \n@@ -83,32 +85,83 @@ public void execute() {\n             System.out.println(helpMessage);\n         } else if (list) {\n             LOG.debug(\"- logger list command\");\n-            for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n-                System.out.println(\" - \" + loggerTO.getName() + \" -> \" + loggerTO.getLevel());\n+            try {\n+                for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n+                    System.out.println(\" - \" + loggerTO.getName() + \" -> \" + loggerTO.getLevel());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (StringUtils.isNotBlank(logNameToRead)) {\n+            LOG.debug(\"- logger read {} command\", logNameToRead);\n+            try {\n+                final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, logNameToRead);\n+                System.out.println(\" - Logger \" + loggerTO.getName() + \" with level -> \" + loggerTO.getLevel());\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (!updateLogs.isEmpty()) {\n+            LOG.debug(\"- logger update command with params {}\", updateLogs);\n+\n+            for (final Map.Entry<String, String> log : updateLogs.entrySet()) {\n+                final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, log.getKey());\n+                try {\n+                    loggerTO.setLevel(LoggerLevel.valueOf(log.getValue()));\n+                    loggerService.update(LoggerType.LOG, loggerTO.getName(), loggerTO);\n+                    System.out.println(\" - Logger \" + loggerTO.getName() + \" new level -> \" + loggerTO.getLevel());\n+                } catch (final SyncopeClientException ex) {\n+                    System.out.println(\" - Error: \" + ex.getMessage());\n+                } catch (final IllegalArgumentException ex) {\n+                    System.out.println(\" - Error: \" + log.getValue() + \" isn't a valid logger level, try with:\");\n+                    for (final LoggerLevel level : LoggerLevel.values()) {\n+                        System.out.println(\"  *** \" + level.name());\n+                    }\n+                }\n             }\n         } else if (StringUtils.isNotBlank(logLevel)) {\n             LOG.debug(\"- logger update all command with level {}\", logLevel);\n             for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n-                loggerTO.setLevel(LoggerLevel.valueOf(logLevel));\n-                loggerService.update(LoggerType.LOG, loggerTO.getName(), loggerTO);\n-                System.out.println(\" - Logger \" + loggerTO.getName() + \" new value -> \" + loggerTO.getLevel());\n+                try {\n+                    loggerTO.setLevel(LoggerLevel.valueOf(logLevel));\n+                    loggerService.update(LoggerType.LOG, loggerTO.getName(), loggerTO);\n+                    System.out.println(\" - Logger \" + loggerTO.getName() + \" new level -> \" + loggerTO.getLevel());\n+                } catch (final SyncopeClientException ex) {\n+                    System.out.println(\" - Error: \" + ex.getMessage());\n+                } catch (final IllegalArgumentException ex) {\n+                    System.out.println(\" - Error: \" + loggerTO.getLevel() + \" isn't a valid logger level, try with:\");\n+                    for (final LoggerLevel level : LoggerLevel.values()) {\n+                        System.out.println(\"  *** \" + level.name());\n+                    }\n+                }\n             }\n-        } else if (!params.isEmpty()) {\n-            LOG.debug(\"- logger update command with params {}\", params);\n-            for (final Map.Entry<String, String> entrySet : params.entrySet()) {\n-                final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, entrySet.getKey());\n-                loggerTO.setLevel(LoggerLevel.valueOf(entrySet.getValue()));\n-                loggerService.update(LoggerType.LOG, loggerTO.getName(), loggerTO);\n-                System.out.println(\" - Logger \" + loggerTO.getName() + \" new value -> \" + loggerTO.getLevel());\n+        } else if (!createLogs.isEmpty()) {\n+            LOG.debug(\"- logger create command with params {}\", createLogs);\n+\n+            for (final Map.Entry<String, String> entrySet : createLogs.entrySet()) {\n+                final LoggerTO loggerTO = new LoggerTO();\n+                try {\n+                    loggerTO.setName(entrySet.getKey());\n+                    loggerTO.setLevel(LoggerLevel.valueOf(entrySet.getValue()));\n+                    loggerService.update(LoggerType.LOG, loggerTO.getName(), loggerTO);\n+                    System.out.println(\" - Logger \" + loggerTO.getName() + \" created with level -> \" + loggerTO.\n+                            getLevel());\n+                } catch (final SyncopeClientException ex) {\n+                    System.out.println(\" - Error: \" + ex.getMessage());\n+                } catch (final IllegalArgumentException ex) {\n+                    System.out.println(\" - Error: \" + loggerTO.getLevel() + \" isn't a valid logger level, try with:\");\n+                    for (final LoggerLevel level : LoggerLevel.values()) {\n+                        System.out.println(\"  *** \" + level.name());\n+                    }\n+                }\n             }\n-        } else if (StringUtils.isNotBlank(logNameToRead)) {\n-            LOG.debug(\"- logger read {} command\", logNameToRead);\n-            final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, logNameToRead);\n-            System.out.println(\" - Logger \" + loggerTO.getName() + \" with level -> \" + loggerTO.getLevel());\n         } else if (StringUtils.isNotBlank(logNameToDelete)) {\n-            LOG.debug(\"- logger delete {} command\", logNameToDelete);\n-            loggerService.delete(LoggerType.LOG, logNameToDelete);\n-            System.out.println(\" - Logger \" + logNameToDelete + \" deleted!\");\n+            try {\n+                LOG.debug(\"- logger delete {} command\", logNameToDelete);\n+                loggerService.delete(LoggerType.LOG, logNameToDelete);\n+                System.out.println(\" - Logger \" + logNameToDelete + \" deleted!\");\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n         } else {\n             System.out.println(helpMessage);\n         }"},{"sha":"fdc0d3769178dbae02feb752ebbecdbcd2e8b2e8","filename":"cli/src/main/java/org/apache/syncope/cli/commands/NotificationCommand.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59bd58ce662c4550c9723264f1460e90b6b51756/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FNotificationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59bd58ce662c4550c9723264f1460e90b6b51756/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FNotificationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FNotificationCommand.java?ref=59bd58ce662c4550c9723264f1460e90b6b51756","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import org.apache.syncope.cli.SyncopeServices;\n+import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.services.NotificationService;\n+import org.apache.syncope.common.to.NotificationTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Parameters(\n+        commandNames = \"notification\",\n+        optionPrefixes = \"-\",\n+        separators = \"=\",\n+        commandDescription = \"Apache Syncope notification service\")\n+public class NotificationCommand extends AbstractCommand {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(NotificationCommand.class);\n+\n+    private static final Class SYNCOPE_NOTIFICATION_CLASS = NotificationService.class;\n+\n+    private final String helpMessage = \"Usage: notification [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    -h, --help \\n\"\n+            + \"    -l, --list \\n\"\n+            + \"    -r, --read \\n\"\n+            + \"       Syntax: -r={NOTIFICATION-ID} \\n\"\n+            + \"    -d, --delete \\n\"\n+            + \"       Syntax: -d={NOTIFICATION-ID}\";\n+\n+    @Parameter(names = {\"-r\", \"--read\"})\n+    public Long notificationIdToRead = -1L;\n+\n+    @Parameter(names = {\"-d\", \"--delete\"})\n+    public Long notificationIdToDelete = -1L;\n+\n+    @Override\n+    public void execute() {\n+        final NotificationService notificationService = ((NotificationService) SyncopeServices.get(\n+                SYNCOPE_NOTIFICATION_CLASS));\n+\n+        LOG.debug(\"Notification service successfully created\");\n+\n+        if (help) {\n+            LOG.debug(\"- notification help command\");\n+            System.out.println(helpMessage);\n+        } else if (list) {\n+            LOG.debug(\"- notification list command\");\n+            try {\n+                for (final NotificationTO notificationTO : notificationService.list()) {\n+                    System.out.println(notificationTO);\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (notificationIdToRead > -1L) {\n+            LOG.debug(\"- notification read {} command\", notificationIdToRead);\n+            try {\n+                System.out.println(notificationService.read(notificationIdToRead));\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (notificationIdToDelete > -1L) {\n+            try {\n+                LOG.debug(\"- notification delete {} command\", notificationIdToDelete);\n+                notificationService.delete(notificationIdToDelete);\n+                System.out.println(\" - Notification \" + notificationIdToDelete + \" deleted!\");\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else {\n+            System.out.println(helpMessage);\n+        }\n+    }\n+\n+}"},{"sha":"d1574ebc9517b8e9cddc1e7bd4e0b047262a0123","filename":"cli/src/main/java/org/apache/syncope/cli/commands/PolicyCommand.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59bd58ce662c4550c9723264f1460e90b6b51756/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FPolicyCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59bd58ce662c4550c9723264f1460e90b6b51756/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FPolicyCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FPolicyCommand.java?ref=59bd58ce662c4550c9723264f1460e90b6b51756","patch":"@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.cli.SyncopeServices;\n+import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.services.PolicyService;\n+import org.apache.syncope.common.to.AbstractPolicyTO;\n+import org.apache.syncope.common.types.PolicyType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Parameters(\n+        commandNames = \"policy\",\n+        optionPrefixes = \"-\",\n+        separators = \"=\",\n+        commandDescription = \"Apache Syncope policy service\")\n+public class PolicyCommand extends AbstractCommand {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PolicyCommand.class);\n+\n+    private static final Class SYNCOPE_POLICY_CLASS = PolicyService.class;\n+\n+    private final String helpMessage = \"Usage: policy [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    -h, --help \\n\"\n+            + \"    -l, --list \\n\"\n+            + \"    -ll, --list-policy \\n\"\n+            + \"       Syntax: -ll={POLICY-TYPE} \\n\"\n+            + \"    -r, --read \\n\"\n+            + \"       Syntax: -r={POLICY-ID} \\n\"\n+            + \"    -d, --delete \\n\"\n+            + \"       Syntax: -d={POLICY-ID}\";\n+\n+    @Parameter(names = {\"-ll\", \"--list-policy\"})\n+    public String policyType;\n+\n+    @Parameter(names = {\"-r\", \"--read\"})\n+    public Long policyIdToRead = -1L;\n+\n+    @Parameter(names = {\"-d\", \"--delete\"})\n+    public Long policyIdToDelete = -1L;\n+\n+    @Override\n+    public void execute() {\n+        final PolicyService policyService = (PolicyService) SyncopeServices.get(SYNCOPE_POLICY_CLASS);\n+        LOG.debug(\"Policy service successfully created\");\n+\n+        if (help) {\n+            LOG.debug(\"- policy help command\");\n+            System.out.println(helpMessage);\n+        } else if (list) {\n+\n+        } else if (StringUtils.isNotBlank(policyType)) {\n+            LOG.debug(\"- policy list command for type {}\", policyType);\n+            try {\n+                for (final AbstractPolicyTO policyTO : policyService.list(PolicyType.valueOf(policyType))) {\n+                    System.out.println(policyTO);\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            } catch (final IllegalArgumentException ex) {\n+                System.out.println(\" - Error: \" + policyType + \" isn't a valid policy type, try with:\");\n+                for (final PolicyType type : PolicyType.values()) {\n+                    System.out.println(\"  *** \" + type.name() + \": \" + type.getDescription());\n+                }\n+            }\n+        } else if (policyIdToRead > -1L) {\n+            LOG.debug(\"- policy read {} command\", policyIdToRead);\n+            try {\n+                System.out.println(policyService.read(policyIdToRead));\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (policyIdToDelete > -1L) {\n+            try {\n+                LOG.debug(\"- policy delete {} command\", policyIdToDelete);\n+                policyService.delete(policyIdToDelete);\n+                System.out.println(\" - Report \" + policyIdToDelete + \" deleted!\");\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else {\n+            System.out.println(helpMessage);\n+        }\n+    }\n+\n+}"},{"sha":"721503b091eb2e7455a2c4bed40d94190cf4dc8e","filename":"cli/src/main/java/org/apache/syncope/cli/commands/ReportCommand.java","status":"added","additions":195,"deletions":0,"changes":195,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59bd58ce662c4550c9723264f1460e90b6b51756/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FReportCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59bd58ce662c4550c9723264f1460e90b6b51756/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FReportCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FReportCommand.java?ref=59bd58ce662c4550c9723264f1460e90b6b51756","patch":"@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import java.io.IOException;\n+import java.io.SequenceInputStream;\n+import java.util.List;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import org.apache.syncope.cli.SyncopeServices;\n+import org.apache.syncope.cli.util.XmlUtils;\n+import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.services.ReportService;\n+import org.apache.syncope.common.to.ReportExecTO;\n+import org.apache.syncope.common.to.ReportTO;\n+import org.apache.syncope.common.types.ReportExecExportFormat;\n+import org.apache.syncope.common.wrap.ReportletConfClass;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.xml.sax.SAXException;\n+\n+@Parameters(\n+        commandNames = \"report\",\n+        optionPrefixes = \"-\",\n+        separators = \"=\",\n+        commandDescription = \"Apache Syncope report service\")\n+public class ReportCommand extends AbstractCommand {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ReportCommand.class);\n+\n+    private static final Class SYNCOPE_REPORT_CLASS = ReportService.class;\n+\n+    private final String helpMessage = \"Usage: report [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    -h, --help \\n\"\n+            + \"    -l, --list \\n\"\n+            + \"    -r, --read \\n\"\n+            + \"       Syntax: -r={POLICY-ID} \\n\"\n+            + \"    -d, --delete \\n\"\n+            + \"       Syntax: -d={POLICY-ID} \\n\"\n+            + \"    -e, --execute \\n\"\n+            + \"       Syntax: -e={POLICY-ID} \\n\"\n+            + \"    -re, --read-executecution \\n\"\n+            + \"       Syntax: -re={EXECUTION-ID} \\n\"\n+            + \"    -de, --delete-executecution \\n\"\n+            + \"       Syntax: -de={EXECUTION-ID} \\n\"\n+            + \"    -eer, --export-executecution-result \\n\"\n+            + \"       Syntax: -eer={EXECUTION-ID} \\n\"\n+            + \"    -rc, --reportlet-class\";\n+\n+    @Parameter(names = {\"-r\", \"--read\"})\n+    public Long reportIdToRead = -1L;\n+\n+    @Parameter(names = {\"-d\", \"--delete\"})\n+    public Long reportIdToDelete = -1L;\n+\n+    @Parameter(names = {\"-e\", \"--execute\"})\n+    public Long reportIdToExecute = -1L;\n+\n+    @Parameter(names = {\"-re\", \"--read-execution\"})\n+    public Long executionIdToRead = -1L;\n+\n+    @Parameter(names = {\"-de\", \"--delete-execution\"})\n+    public Long executionIdToDelete = -1L;\n+\n+    @Parameter(names = {\"-eer\", \"--export-execution-result\"})\n+    public Long exportId = -1L;\n+\n+    @Parameter(names = {\"-rc\", \"--reportlet-class\"})\n+    public boolean reportletClass = false;\n+\n+    @Override\n+    public void execute() {\n+        final ReportService reportService = (ReportService) SyncopeServices.get(SYNCOPE_REPORT_CLASS);\n+        LOG.debug(\"Report service successfully created\");\n+\n+        if (help) {\n+            LOG.debug(\"- report help command\");\n+            System.out.println(helpMessage);\n+        } else if (list) {\n+            LOG.debug(\"- report list command\");\n+            try {\n+                for (final ReportTO reportTO : reportService.list().getResult()) {\n+                    System.out.println(reportTO);\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (reportIdToRead > -1L) {\n+            LOG.debug(\"- report read {} command\", reportIdToRead);\n+            try {\n+                System.out.println(reportService.read(reportIdToRead));\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (reportIdToDelete > -1L) {\n+            try {\n+                LOG.debug(\"- report delete {} command\", reportIdToDelete);\n+                reportService.delete(reportIdToDelete);\n+                System.out.println(\" - Report \" + reportIdToDelete + \" deleted!\");\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (reportIdToExecute > -1L) {\n+            try {\n+                LOG.debug(\"- report execute {} command\", reportIdToExecute);\n+                reportService.execute(reportIdToExecute);\n+                final List<ReportExecTO> executionList = reportService.read(reportIdToExecute).getExecutions();\n+                final ReportExecTO lastExecution = executionList.get(executionList.size() - 1);\n+                System.out.println(\" - Report execution id: \" + lastExecution.getId());\n+                System.out.println(\" - Report execution status: \" + lastExecution.getStatus());\n+                System.out.println(\" - Report execution start date: \" + lastExecution.getStartDate());\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (executionIdToRead > -1L) {\n+            try {\n+                LOG.debug(\"- report execution read {} command\", executionIdToRead);\n+                ReportExecTO reportExecTO = reportService.readExecution(executionIdToRead);\n+                System.out.println(\" - Report execution id: \" + reportExecTO.getId());\n+                System.out.println(\" - Report execution status: \" + reportExecTO.getStatus());\n+                System.out.println(\" - Report execution start date: \" + reportExecTO.getStartDate());\n+                System.out.println(\" - Report execution end date: \" + reportExecTO.getEndDate());\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (executionIdToDelete > -1L) {\n+            try {\n+                LOG.debug(\"- report execution delete {} command\", executionIdToDelete);\n+                reportService.deleteExecution(executionIdToDelete);\n+                System.out.println(\" - Report execution \" + executionIdToDelete + \"successfyllt deleted!\");\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (exportId > -1L) {\n+            LOG.debug(\"- report export command for report: {}\", exportId);\n+\n+            try {\n+                XmlUtils.createXMLFile((SequenceInputStream) reportService.exportExecutionResult(exportId,\n+                        ReportExecExportFormat.XML).getEntity(), \"export_\" + exportId + \".xml\");\n+                System.out.println(\" - \" + \"export_\" + exportId + \" successfully created\");\n+            } catch (final IOException ex) {\n+                LOG.error(\"Error creating xml file\", ex);\n+                System.out.println(\" - Error creating \" + \"export_\" + exportId + \" \" + ex.getMessage());\n+            } catch (final ParserConfigurationException ex) {\n+                LOG.error(\"Error creating xml file\", ex);\n+                System.out.println(\" - Error creating \" + \"export_\" + exportId + \" \" + ex.getMessage());\n+            } catch (final SAXException ex) {\n+                LOG.error(\"Error creating xml file\", ex);\n+                System.out.println(\" - Error creating \" + \"export_\" + exportId + \" \" + ex.getMessage());\n+            } catch (final TransformerConfigurationException ex) {\n+                LOG.error(\"Error creating xml file\", ex);\n+                System.out.println(\" - Error creating \" + \"export_\" + exportId + \" \" + ex.getMessage());\n+            } catch (final TransformerException ex) {\n+                LOG.error(\"Error creating xml file\", ex);\n+                System.out.println(\" - Error creating export_\" + exportId + \" \" + ex.getMessage());\n+            } catch (final SyncopeClientException ex) {\n+                LOG.error(\"Error calling configuration service\", ex);\n+                System.out.println(\" - Error calling configuration service \" + ex.getMessage());\n+            }\n+        } else if (reportletClass) {\n+            try {\n+                LOG.debug(\"- reportlet configuration class list command\");\n+                System.out.println(\"Reportlet conf classes\");\n+                for (final ReportletConfClass reportletConfClass : reportService.getReportletConfClasses()) {\n+                    System.out.println(\"  *** \" + reportletConfClass.getElement());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else {\n+            System.out.println(helpMessage);\n+        }\n+    }\n+\n+}"},{"sha":"8da1fba6523d0d0b67fefcb22fd18597c08258dd","filename":"cli/src/main/java/org/apache/syncope/cli/util/XmlUtils.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59bd58ce662c4550c9723264f1460e90b6b51756/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Futil%2FXmlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59bd58ce662c4550c9723264f1460e90b6b51756/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Futil%2FXmlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Futil%2FXmlUtils.java?ref=59bd58ce662c4550c9723264f1460e90b6b51756","patch":"@@ -0,0 +1,28 @@\n+package org.apache.syncope.cli.util;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.SequenceInputStream;\n+import java.io.StringReader;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import org.apache.cxf.helpers.IOUtils;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class XmlUtils {\n+\n+    public static void createXMLFile(SequenceInputStream sis, String filePath)\n+            throws TransformerConfigurationException, TransformerException, SAXException, IOException,\n+            ParserConfigurationException {\n+        TransformerFactory.newInstance().newTransformer()\n+                .transform(new DOMSource(DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(\n+                                        new InputSource(new StringReader(IOUtils.toString(sis))))),\n+                        new StreamResult(new File(filePath)));\n+    }\n+}"},{"sha":"9f84a720cb5e18846a62b69b3cb3a759ad339340","filename":"cli/src/main/resources/syncope.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59bd58ce662c4550c9723264f1460e90b6b51756/cli%2Fsrc%2Fmain%2Fresources%2Fsyncope.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59bd58ce662c4550c9723264f1460e90b6b51756/cli%2Fsrc%2Fmain%2Fresources%2Fsyncope.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/cli%2Fsrc%2Fmain%2Fresources%2Fsyncope.properties?ref=59bd58ce662c4550c9723264f1460e90b6b51756","patch":"@@ -14,6 +14,6 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-syncope.rest.services=http://localhost:8080/syncope/rest/\n+syncope.rest.services=http://localhost:9080/syncope/rest/\n syncope.user=admin\n-syncope.password=password\n\\ No newline at end of file\n+syncope.password=password"},{"sha":"afe4d8d3392a2803e6db9e97c8f3bce8107529d3","filename":"core/src/main/java/org/apache/syncope/core/services/ReportServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59bd58ce662c4550c9723264f1460e90b6b51756/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59bd58ce662c4550c9723264f1460e90b6b51756/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java?ref=59bd58ce662c4550c9723264f1460e90b6b51756","patch":"@@ -50,7 +50,7 @@ public Response create(final ReportTO reportTO) {\n         ReportTO createdReportTO = controller.create(reportTO);\n         URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(createdReportTO.getId())).build();\n         return Response.created(location).\n-                header(RESTHeaders.RESOURCE_ID.toString(), createdReportTO.getId()).\n+                header(RESTHeaders.RESOURCE_ID, createdReportTO.getId()).\n                 build();\n     }\n "}]}