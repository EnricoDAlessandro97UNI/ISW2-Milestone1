{"sha":"6b9cd592b21440d54fabd6012616c4f6a18a81f3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjZiOWNkNTkyYjIxNDQwZDU0ZmFiZDYwMTI2MTZjNGY2YTE4YTgxZjM=","commit":{"author":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-21T08:54:47Z"},"committer":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-21T08:54:47Z"},"message":"refactoring for configuration stack, SYNCOPE-158","tree":{"sha":"2f842593b92bda00d3eeb43ba1c38a8db280f647","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2f842593b92bda00d3eeb43ba1c38a8db280f647"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6b9cd592b21440d54fabd6012616c4f6a18a81f3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6b9cd592b21440d54fabd6012616c4f6a18a81f3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6b9cd592b21440d54fabd6012616c4f6a18a81f3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6b9cd592b21440d54fabd6012616c4f6a18a81f3/comments","author":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"committer":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"parents":[{"sha":"462289dce937d9590947d1d9141bd75804288f03","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/462289dce937d9590947d1d9141bd75804288f03","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/462289dce937d9590947d1d9141bd75804288f03"}],"stats":{"total":944,"additions":590,"deletions":354},"files":[{"sha":"b5a1365f269527c492e8ed0ea312ae6923e28933","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/SyncopeAdm.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java?ref=6b9cd592b21440d54fabd6012616c4f6a18a81f3","patch":"@@ -20,7 +20,7 @@\n \n import javax.ws.rs.ProcessingException;\n import org.apache.syncope.client.cli.commands.AbstractCommand;\n-import org.apache.syncope.client.cli.commands.logger.ResultManager;\n+import org.apache.syncope.client.cli.commands.logger.LoggerResultManager;\n import org.apache.syncope.client.cli.util.CommandUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -49,12 +49,12 @@ public static void main(final String[] args) {\n             System.out.println(helpMessage());\n         } catch (final IllegalArgumentException ex) {\n             LOG.error(\"Error in main\", ex);\n-            new ResultManager().genericError(ex.getMessage());\n+            new LoggerResultManager().genericError(ex.getMessage());\n             if (!ex.getMessage().startsWith(\"It seems you\")) {\n                 System.out.println(helpMessage());\n             }\n         } catch (final ProcessingException e) {\n-            new ResultManager().genericError(\"Syncope server offline\", e.getCause().getMessage());\n+            new LoggerResultManager().genericError(\"Syncope server offline\", e.getCause().getMessage());\n         }\n \n     }\n@@ -72,7 +72,7 @@ private static String helpMessage() {\n                 helpMessageBuilder.append(\"\\n\");\n             }\n         } catch (final IllegalAccessException | IllegalArgumentException | InstantiationException ex) {\n-            new ResultManager().genericError(ex.getMessage());\n+            new LoggerResultManager().genericError(ex.getMessage());\n         }\n \n         return helpMessageBuilder.toString();"},{"sha":"9bfde8dcfd322a799985303722a3b64573ddaaa4","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/CommonsResultManager.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java?ref=6b9cd592b21440d54fabd6012616c4f6a18a81f3","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands;\n+\n+import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+import org.apache.syncope.common.lib.types.LoggerLevel;\n+\n+public abstract class CommonsResultManager {\n+\n+    public void deletedMessage(final String what, final String key) {\n+        Messages.printDeletedMessage(what, key);\n+    }\n+\n+    public void notFoundError(final String what, final String parameter) {\n+        Messages.printNofFoundMessage(what, parameter);\n+    }\n+\n+    public void typeNotValidError(final String parameter) {\n+        Messages.printTypeNotValidMessage(\"logger level\", parameter, CommandUtils.fromEnumToArray(LoggerLevel.class));\n+    }\n+\n+    public void commandOptionError(final String message) {\n+        Messages.printCommandOptionMessage(message);\n+    }\n+\n+    public void defaultError(final String option, final String helpMessage) {\n+        Messages.printDefaultMessage(option, helpMessage);\n+    }\n+\n+    public void genericError(final String... messages) {\n+        Messages.printMessage(messages);\n+    }\n+}"},{"sha":"e7d893896e368dd4e18e4540f58b66027541eaf5","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/ConfigurationCommand.java","status":"removed","additions":0,"deletions":297,"changes":297,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/462289dce937d9590947d1d9141bd75804288f03/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/462289dce937d9590947d1d9141bd75804288f03/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java?ref=462289dce937d9590947d1d9141bd75804288f03","patch":"@@ -1,297 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.cli.commands;\n-\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.io.SequenceInputStream;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.transform.TransformerConfigurationException;\n-import javax.xml.transform.TransformerException;\n-import javax.xml.ws.WebServiceException;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.cli.Command;\n-import org.apache.syncope.client.cli.Input;\n-import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.client.cli.messages.Messages;\n-import org.apache.syncope.client.cli.messages.TwoColumnTable;\n-import org.apache.syncope.client.cli.util.XMLUtils;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.ConfTO;\n-import org.apache.syncope.common.rest.api.service.ConfigurationService;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.xml.sax.SAXException;\n-\n-@Command(name = \"configuration\")\n-public class ConfigurationCommand extends AbstractCommand {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(ConfigurationCommand.class);\n-\n-    private static final String EXPORT_FILE_NAME = \"/content.xml\";\n-\n-    private static final String HELP_MESSAGE = \"Usage: configuration [options]\\n\"\n-            + \"  Options:\\n\"\n-            + \"    --help \\n\"\n-            + \"    --get \\n\"\n-            + \"    --read \\n\"\n-            + \"       Syntax: --read {CONF-NAME} {CONF-NAME} [...] \\n\"\n-            + \"    --update \\n\"\n-            + \"       Syntax: --update {CONF-NAME}={CONF-VALUE} {CONF-NAME}={CONF-VALUE} [...]\\n\"\n-            + \"    --delete \\n\"\n-            + \"       Syntax: --delete {CONF-NAME} {CONF-NAME} [...]\\n\"\n-            + \"    --export \\n\"\n-            + \"       Syntax: --export {WHERE-DIR}\";\n-\n-    @Override\n-    public void execute(final Input input) {\n-        LOG.debug(\"Logger service successfully created\");\n-        LOG.debug(\"Option: {}\", input.getOption());\n-        LOG.debug(\"Parameters:\");\n-        for (final String parameter : input.getParameters()) {\n-            LOG.debug(\"   > \" + parameter);\n-        }\n-\n-        final String[] parameters = input.getParameters();\n-\n-        if (StringUtils.isBlank(input.getOption())) {\n-            input.setOption(Options.HELP.getOptionName());\n-        }\n-\n-        final ConfigurationService configurationService = SyncopeServices.get(ConfigurationService.class);\n-        switch (Options.fromName(input.getOption())) {\n-            case GET:\n-                try {\n-                    final ConfTO confTO = configurationService.list();\n-                    toTable(\"Syncope configuration\", \"attribute\", \"value\", confTO.getPlainAttrs());\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case READ:\n-                final String readErrorMessage = \"configuration --read {CONF-NAME} {CONF-NAME} [...]\";\n-                if (parameters.length >= 1) {\n-                    final Set<AttrTO> attrList = new HashSet<>();\n-                    boolean failed = false;\n-                    for (final String parameter : parameters) {\n-                        try {\n-                            attrList.add(configurationService.get(parameter));\n-                        } catch (final SyncopeClientException | WebServiceException ex) {\n-                            if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                Messages.printNofFoundMessage(\"Logger\", parameter);\n-                            } else {\n-                                Messages.printMessage(ex.getMessage());\n-                            }\n-                            failed = true;\n-                            break;\n-                        }\n-                    }\n-                    if (!failed) {\n-                        toTable(\"Read result\", \"attribute\", \"value\", attrList);\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(readErrorMessage);\n-                }\n-                break;\n-            case UPDATE:\n-                final String updateErrorMessage\n-                        = \"configuration --update {CONF-NAME}={CONF-VALUE} {CONF-NAME}={CONF-VALUE} [...]\";\n-                if (parameters.length >= 1) {\n-                    Input.PairParameter pairParameter = null;\n-                    AttrTO attrTO;\n-                    final Set<AttrTO> attrList = new HashSet<>();\n-                    boolean failed = false;\n-                    for (final String parameter : parameters) {\n-                        try {\n-                            pairParameter = input.toPairParameter(parameter);\n-                            attrTO = configurationService.get(pairParameter.getKey());\n-                            attrTO.getValues().clear();\n-                            attrTO.getValues().add(pairParameter.getValue());\n-                            configurationService.set(attrTO);\n-                            attrList.add(attrTO);\n-                        } catch (final IllegalArgumentException ex) {\n-                            Messages.printMessage(ex.getMessage(), updateErrorMessage);\n-                            failed = true;\n-                            break;\n-                        } catch (final SyncopeClientException | WebServiceException ex) {\n-                            if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                Messages.printNofFoundMessage(\"Configuration\", pairParameter.getKey());\n-                            } else if (ex.getMessage().startsWith(\"InvalidValues\")) {\n-                                Messages.printMessage(\n-                                        pairParameter.getValue() + \" is not a valid value for \"\n-                                        + pairParameter.getKey());\n-                            } else {\n-                                Messages.printMessage(ex.getMessage());\n-                            }\n-                            failed = true;\n-                            break;\n-                        }\n-                    }\n-                    if (!failed) {\n-                        toTable(\"updated attribute\", \"attribute\", \"new value\", attrList);\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(updateErrorMessage);\n-                }\n-                break;\n-            case DELETE:\n-                final String deleteErrorMessage = \"configuration --delete {CONF-NAME} {CONF-NAME} [...]\";\n-                if (parameters.length >= 1) {\n-                    for (final String parameter : parameters) {\n-                        try {\n-                            configurationService.delete(parameter);\n-                            Messages.printDeletedMessage(\"Configuration\", parameter);\n-                        } catch (final SyncopeClientException | WebServiceException ex) {\n-                            if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                Messages.printNofFoundMessage(\"Configuration\", parameter);\n-                            } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n-                                Messages.printMessage(\"You cannot delete configuration\", parameter);\n-                            } else {\n-                                Messages.printMessage(ex.getMessage());\n-                            }\n-                            break;\n-                        }\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(deleteErrorMessage);\n-                }\n-                break;\n-            case EXPORT:\n-                final String exportErrorMessage = \"configuration --export {WHERE-DIR}\";\n-                if (parameters.length == 1) {\n-                    try {\n-                        XMLUtils.createXMLFile((SequenceInputStream) configurationService.export().getEntity(),\n-                                parameters[0] + EXPORT_FILE_NAME);\n-                        System.out.println(\" - \" + parameters[0] + EXPORT_FILE_NAME + \" successfully created\");\n-                    } catch (final IOException ex) {\n-                        Messages.printMessage(ex.getMessage());\n-                    } catch (ParserConfigurationException | SAXException | TransformerConfigurationException ex) {\n-                        LOG.error(\"Error creating content.xml file in {} directory\", parameters[0], ex);\n-                        Messages.printMessage(\n-                                \"Error creating \" + parameters[0] + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n-                        break;\n-                    } catch (final TransformerException ex) {\n-                        LOG.error(\"Error creating content.xml file in {} directory\", parameters[0], ex);\n-                        if (ex.getCause() instanceof FileNotFoundException) {\n-                            Messages.printMessage(\"Permission denied on \" + parameters[0]);\n-                        } else {\n-                            Messages.printMessage(\n-                                    \"Error creating \" + parameters[0] + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n-                        }\n-                        break;\n-                    } catch (final SyncopeClientException ex) {\n-                        LOG.error(\"Error calling configuration service\", ex);\n-                        Messages.printMessage(\"Error calling configuration service \" + ex.getMessage());\n-                        break;\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(exportErrorMessage);\n-                }\n-                break;\n-            case HELP:\n-                System.out.println(HELP_MESSAGE);\n-                break;\n-            default:\n-                Messages.printDefaultMessage(input.getOption(), HELP_MESSAGE);\n-                break;\n-        }\n-    }\n-\n-    private void toTable(final String tableTitle,\n-            final String firstHeader,\n-            final String seconHeader,\n-            final Set<AttrTO> attrList) {\n-        int maxFirstColumnLenght = 0;\n-        int maxSecondColumnLenght = 0;\n-        final Map<String, String> attributes = new HashMap<>();\n-        for (final AttrTO attrTO : attrList) {\n-            String value = attrTO.getValues().toString();\n-            value = value.substring(0, value.length() - 1);\n-            value = value.substring(1, value.length());\n-            attributes.put(attrTO.getSchema(), value);\n-            if (attrTO.getSchema().length() > maxFirstColumnLenght) {\n-                maxFirstColumnLenght = attrTO.getSchema().length();\n-            }\n-\n-            if (value.length() > maxSecondColumnLenght) {\n-                maxSecondColumnLenght = attrTO.getSchema().length();\n-            }\n-        }\n-        final TwoColumnTable loggerTableResult = new TwoColumnTable(\n-                tableTitle,\n-                firstHeader, maxFirstColumnLenght,\n-                seconHeader, maxSecondColumnLenght);\n-        loggerTableResult.printTable(attributes);\n-    }\n-\n-    @Override\n-    public String getHelpMessage() {\n-        return HELP_MESSAGE;\n-    }\n-\n-    private enum Options {\n-\n-        HELP(\"--help\"),\n-        GET(\"--get\"),\n-        READ(\"--read\"),\n-        UPDATE(\"--update\"),\n-        DELETE(\"--delete\"),\n-        EXPORT(\"--export\");\n-\n-        private final String optionName;\n-\n-        Options(final String optionName) {\n-            this.optionName = optionName;\n-        }\n-\n-        public String getOptionName() {\n-            return optionName;\n-        }\n-\n-        public boolean equalsOptionName(final String otherName) {\n-            return (otherName == null) ? false : optionName.equals(otherName);\n-        }\n-\n-        public static Options fromName(final String name) {\n-            Options optionToReturn = HELP;\n-            for (final Options option : Options.values()) {\n-                if (option.equalsOptionName(name)) {\n-                    optionToReturn = option;\n-                }\n-            }\n-            return optionToReturn;\n-        }\n-\n-        public static List<String> toList() {\n-            final List<String> options = new ArrayList<>();\n-            for (final Options value : values()) {\n-                options.add(value.getOptionName());\n-            }\n-            return options;\n-        }\n-    }\n-}"},{"sha":"59fc4237e7aa549d8a1031d2d0cfdbd0deb6b110","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/AbstractConfigurationCommand.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FAbstractConfigurationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FAbstractConfigurationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FAbstractConfigurationCommand.java?ref=6b9cd592b21440d54fabd6012616c4f6a18a81f3","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.configuration;\n+\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.rest.api.service.ConfigurationService;\n+\n+public class AbstractConfigurationCommand {\n+\n+    protected final ConfigurationService configurationService = SyncopeServices.get(ConfigurationService.class);\n+\n+    protected final ConfigurationResultManager configurationResultManager = new ConfigurationResultManager();\n+\n+}"},{"sha":"d74ea78a6257c4fa79f09562aaa83e31e195074b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationCommand.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationCommand.java?ref=6b9cd592b21440d54fabd6012616c4f6a18a81f3","patch":"@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.configuration;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Command(name = \"configuration\")\n+public class ConfigurationCommand extends AbstractCommand {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ConfigurationCommand.class);\n+\n+    private static final String HELP_MESSAGE = \"Usage: configuration [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    --help \\n\"\n+            + \"    --get \\n\"\n+            + \"    --read \\n\"\n+            + \"       Syntax: --read {CONF-NAME} {CONF-NAME} [...] \\n\"\n+            + \"    --update \\n\"\n+            + \"       Syntax: --update {CONF-NAME}={CONF-VALUE} {CONF-NAME}={CONF-VALUE} [...]\\n\"\n+            + \"    --delete \\n\"\n+            + \"       Syntax: --delete {CONF-NAME} {CONF-NAME} [...]\\n\"\n+            + \"    --export \\n\"\n+            + \"       Syntax: --export {WHERE-DIR}\";\n+\n+    @Override\n+    public void execute(final Input input) {\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        switch (Options.fromName(input.getOption())) {\n+            case GET:\n+                new ConfigurationGet().get();\n+                break;\n+            case READ:\n+                new ConfigurationRead(input).read();\n+                break;\n+            case UPDATE:\n+                new ConfigurationUpdate(input).update();\n+                break;\n+            case DELETE:\n+                new ConfigurationDelete(input).delete();\n+                break;\n+            case EXPORT:\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                new ConfigurationResultManager().defaultError(input.getOption(), HELP_MESSAGE);\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        GET(\"--get\"),\n+        READ(\"--read\"),\n+        UPDATE(\"--update\"),\n+        DELETE(\"--delete\"),\n+        EXPORT(\"--export\");\n+\n+        private final String optionName;\n+\n+        Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+}"},{"sha":"4f8c2272bdd65ae713ee7375f7c03f8e0d02457f","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationDelete.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationDelete.java?ref=6b9cd592b21440d54fabd6012616c4f6a18a81f3","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.configuration;\n+\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+\n+public class ConfigurationDelete extends AbstractConfigurationCommand {\n+\n+    private static final String DELETE_HELP_MESSAGE = \"configuration --delete {CONF-NAME} {CONF-NAME} [...]\";\n+\n+    private final Input input;\n+\n+    public ConfigurationDelete(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void delete() {\n+        if (input.parameterNumber() >= 1) {\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    configurationService.delete(parameter);\n+                    configurationResultManager.deletedMessage(\"Configuration\", parameter);\n+                } catch (final SyncopeClientException | WebServiceException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        configurationResultManager.notFoundError(\"Configuration\", parameter);\n+                    } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                        configurationResultManager.genericError(\"You cannot delete configuration\", parameter);\n+                    } else {\n+                        configurationResultManager.genericError(ex.getMessage());\n+                    }\n+                    break;\n+                }\n+            }\n+        } else {\n+            configurationResultManager.commandOptionError(DELETE_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"0bc274f0f681e790ea5c576a76d6c1cf61526e5d","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationExport.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationExport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationExport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationExport.java?ref=6b9cd592b21440d54fabd6012616c4f6a18a81f3","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.configuration;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.SequenceInputStream;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.util.XMLUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.xml.sax.SAXException;\n+\n+public class ConfigurationExport extends AbstractConfigurationCommand {\n+\n+    private static final String EXPORT_HELP_MESSAGE = \"configuration --export {WHERE-DIR}\";\n+\n+    private static final String EXPORT_FILE_NAME = \"/content.xml\";\n+\n+    private final Input input;\n+\n+    public ConfigurationExport(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void export() {\n+        if (input.parameterNumber() == 1) {\n+            try {\n+                XMLUtils.createXMLFile(\n+                        (SequenceInputStream) configurationService.export().getEntity(),\n+                        input.firstParameter() + EXPORT_FILE_NAME);\n+                configurationResultManager.genericError(\n+                        input.firstParameter() + EXPORT_FILE_NAME + \" successfully created\");\n+            } catch (final IOException ex) {\n+                configurationResultManager.genericError(ex.getMessage());\n+            } catch (ParserConfigurationException | SAXException | TransformerConfigurationException ex) {\n+                configurationResultManager.genericError(\n+                        \"Error creating \" + input.firstParameter() + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+            } catch (final TransformerException ex) {\n+                if (ex.getCause() instanceof FileNotFoundException) {\n+                    configurationResultManager.genericError(\"Permission denied on \" + input.firstParameter());\n+                } else {\n+                    configurationResultManager.genericError(\n+                            \"Error creating \" + input.firstParameter() + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                configurationResultManager.genericError(\"Error calling configuration service \" + ex.getMessage());\n+            }\n+        } else {\n+            configurationResultManager.commandOptionError(EXPORT_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"91f3dce7974a63452752e53cba124092e9b3b023","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationGet.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationGet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationGet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationGet.java?ref=6b9cd592b21440d54fabd6012616c4f6a18a81f3","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.configuration;\n+\n+import java.util.LinkedList;\n+\n+public class ConfigurationGet extends AbstractConfigurationCommand {\n+\n+    public ConfigurationGet() {\n+    }\n+\n+    public void get() {\n+        try {\n+            configurationResultManager.fromGet(new LinkedList<>(configurationService.list().getPlainAttrs()));\n+        } catch (final Exception ex) {\n+            configurationResultManager.genericError(ex.getMessage());\n+        }\n+    }\n+\n+}"},{"sha":"801f01d21bbe2fe2387af3561c499264224f814e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationRead.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationRead.java?ref=6b9cd592b21440d54fabd6012616c4f6a18a81f3","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.configuration;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+\n+public class ConfigurationRead extends AbstractConfigurationCommand {\n+\n+    private static final String READ_HELP_MESSAGE = \"configuration --read {CONF-NAME} {CONF-NAME} [...]\";\n+\n+    private final Input input;\n+\n+    public ConfigurationRead(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void read() {\n+        if (input.parameterNumber() >= 1) {\n+            final LinkedList<AttrTO> attrList = new LinkedList<>();\n+            boolean failed = false;\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    attrList.add(configurationService.get(parameter));\n+                } catch (final SyncopeClientException | WebServiceException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        configurationResultManager.notFoundError(\"Configuration\", parameter);\n+                    } else {\n+                        configurationResultManager.genericError(ex.getMessage());\n+                    }\n+                    failed = true;\n+                    break;\n+                }\n+            }\n+            if (!failed) {\n+                configurationResultManager.fromGet(attrList);\n+            }\n+        } else {\n+            configurationResultManager.commandOptionError(READ_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"446d08af7ed8c38a5646c32e04ae286fe0034a1a","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationResultManager.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationResultManager.java?ref=6b9cd592b21440d54fabd6012616c4f6a18a81f3","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.configuration;\n+\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n+import org.apache.syncope.client.cli.messages.Table;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+\n+public class ConfigurationResultManager extends CommonsResultManager {\n+\n+    public void fromGet(final LinkedList<AttrTO> attrTOs) {\n+        fromCommandToView(\"syncope configuration\", attrTOs);\n+    }\n+\n+    public void fromRead(final LinkedList<AttrTO> attrTOs) {\n+        fromCommandToView(\"selected configuration attributes\", attrTOs);\n+    }\n+    \n+    public void fromUpdate(final LinkedList<AttrTO> attrTOs) {\n+        fromCommandToView(\"updated configuration attributes\", attrTOs);\n+    }\n+\n+    private void fromCommandToView(final String title, final LinkedList<AttrTO> attrTOs) {\n+        final Table.TableBuilder tableBuilder\n+                = new Table.TableBuilder(title).header(\"attribute\").header(\"value\");\n+        for (final AttrTO attrTO : attrTOs) {\n+            String attrValue = attrTO.getValues().toString();\n+            attrValue = attrValue.substring(0, attrValue.length() - 1);\n+            attrValue = attrValue.substring(1, attrValue.length());\n+            tableBuilder.rowValues(\n+                    new LinkedList(Arrays.asList(attrTO.getSchema(), attrValue)));\n+        }\n+        tableBuilder.build().print();\n+    }\n+}"},{"sha":"9be74e22beb6e5449f1f5b33c3ba4398baef7b0d","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationUpdate.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationUpdate.java?ref=6b9cd592b21440d54fabd6012616c4f6a18a81f3","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.configuration;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+\n+public class ConfigurationUpdate extends AbstractConfigurationCommand {\n+\n+    private static final String UPDATE_HELP_MESSAGE\n+            = \"configuration --update {CONF-NAME}={CONF-VALUE} {CONF-NAME}={CONF-VALUE} [...]\";\n+\n+    private final Input input;\n+\n+    public ConfigurationUpdate(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void update() {\n+        if (input.parameterNumber() >= 1) {\n+            Input.PairParameter pairParameter = null;\n+            AttrTO attrTO;\n+            final LinkedList<AttrTO> attrList = new LinkedList<>();\n+            boolean failed = false;\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    pairParameter = input.toPairParameter(parameter);\n+                    attrTO = configurationService.get(pairParameter.getKey());\n+                    attrTO.getValues().clear();\n+                    attrTO.getValues().add(pairParameter.getValue());\n+                    configurationService.set(attrTO);\n+                    attrList.add(attrTO);\n+                } catch (final IllegalArgumentException ex) {\n+                    configurationResultManager.genericError(ex.getMessage(), UPDATE_HELP_MESSAGE);\n+                    failed = true;\n+                    break;\n+                } catch (final SyncopeClientException | WebServiceException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        configurationResultManager.notFoundError(\"Configuration\", pairParameter.getKey());\n+                    } else if (ex.getMessage().startsWith(\"InvalidValues\")) {\n+                        configurationResultManager.genericError(\n+                                pairParameter.getValue() + \" is not a valid value for \" + pairParameter.getKey());\n+                    } else {\n+                        configurationResultManager.genericError(ex.getMessage());\n+                    }\n+                    failed = true;\n+                    break;\n+                }\n+            }\n+            if (!failed) {\n+                configurationResultManager.fromUpdate(attrList);\n+            }\n+        } else {\n+            configurationResultManager.commandOptionError(UPDATE_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"3782eac94fde3d53ce5ccd8e23c864687a8137b9","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/AbstractLoggerCommand.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FAbstractLoggerCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FAbstractLoggerCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FAbstractLoggerCommand.java?ref=6b9cd592b21440d54fabd6012616c4f6a18a81f3","patch":"@@ -25,6 +25,6 @@ public class AbstractLoggerCommand {\n \n     protected final LoggerService loggerService = SyncopeServices.get(LoggerService.class);\n     \n-    protected final ResultManager resultManager = new ResultManager();\n+    protected final LoggerResultManager loggerResultManager = new LoggerResultManager();\n \n }"},{"sha":"134c294efc169fcdfbd28a11e533f9eb49b3a783","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerCommand.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCommand.java?ref=6b9cd592b21440d54fabd6012616c4f6a18a81f3","patch":"@@ -24,7 +24,6 @@\n import org.apache.syncope.client.cli.Command;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.commands.AbstractCommand;\n-import org.apache.syncope.client.cli.messages.Messages;\n \n @Command(name = \"logger\")\n public class LoggerCommand extends AbstractCommand {\n@@ -73,7 +72,7 @@ public void execute(final Input input) {\n                 System.out.println(HELP_MESSAGE);\n                 break;\n             default:\n-                Messages.printDefaultMessage(input.getOption(), HELP_MESSAGE);\n+                new LoggerResultManager().defaultError(input.getOption(), HELP_MESSAGE);\n         }\n     }\n "},{"sha":"29d60ad84974f54c8ef3f8df82c9616d0fceac37","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerCreate.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCreate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCreate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCreate.java?ref=6b9cd592b21440d54fabd6012616c4f6a18a81f3","patch":"@@ -52,16 +52,16 @@ public void create() {\n                     loggerService.update(LoggerType.LOG, loggerTO);\n                     loggerTOs.add(loggerTO);\n                 } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n-                    resultManager.typeNotValidError(input.firstParameter());\n+                    loggerResultManager.typeNotValidError(input.firstParameter());\n                     failed = true;\n                     break;\n                 }\n             }\n             if (!failed) {\n-                resultManager.fromUpdate(loggerTOs);\n+                loggerResultManager.fromUpdate(loggerTOs);\n             }\n         } else {\n-            resultManager.commandOptionError(CREATE_HELP_MESSAGE);\n+            loggerResultManager.commandOptionError(CREATE_HELP_MESSAGE);\n         }\n     }\n "},{"sha":"6614f077e305d49bca10ea1c2929992668756a72","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerDelete.java","status":"modified","additions":4,"deletions":11,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerDelete.java?ref=6b9cd592b21440d54fabd6012616c4f6a18a81f3","patch":"@@ -18,11 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands.logger;\n \n-import java.util.LinkedList;\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n import org.apache.syncope.common.lib.types.LoggerType;\n \n public class LoggerDelete extends AbstractLoggerCommand {\n@@ -37,25 +35,20 @@ public LoggerDelete(final Input input) {\n \n     public void delete() {\n         if (input.parameterNumber() >= 1) {\n-            final LinkedList<LoggerTO> loggerTOs = new LinkedList<>();\n-            boolean failed = false;\n             for (final String parameter : input.getParameters()) {\n                 try {\n                     loggerService.delete(LoggerType.LOG, parameter);\n+                    loggerResultManager.deletedMessage(\"Logger\", parameter);\n                 } catch (final WebServiceException | SyncopeClientException ex) {\n                     if (ex.getMessage().startsWith(\"NotFound\")) {\n-                        resultManager.notFoundError(parameter);\n+                        loggerResultManager.notFoundError(\"Logger\", parameter);\n                     } else {\n-                        resultManager.genericError(ex.getMessage());\n+                        loggerResultManager.genericError(ex.getMessage());\n                     }\n-                    failed = true;\n                 }\n             }\n-            if (!failed) {\n-                resultManager.fromDelete(loggerTOs);\n-            }\n         } else {\n-            resultManager.commandOptionError(DELETE_HELP_MESSAGE);\n+            loggerResultManager.commandOptionError(DELETE_HELP_MESSAGE);\n         }\n     }\n "},{"sha":"f65da34e4a0fbb824fc972b4a1b7a9c6f442db17","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerList.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerList.java?ref=6b9cd592b21440d54fabd6012616c4f6a18a81f3","patch":"@@ -29,9 +29,9 @@ public LoggerList() {\n \n     public void list() {\n         try {\n-            resultManager.fromList(new LinkedList<>(loggerService.list(LoggerType.LOG)));\n+            loggerResultManager.fromList(new LinkedList<>(loggerService.list(LoggerType.LOG)));\n         } catch (final SyncopeClientException ex) {\n-            resultManager.genericError(\"Error: \" + ex.getMessage());\n+            loggerResultManager.genericError(\"Error: \" + ex.getMessage());\n         }\n     }\n }"},{"sha":"c796c471dba5970d03fea60a0f8490477686d0b2","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerRead.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerRead.java?ref=6b9cd592b21440d54fabd6012616c4f6a18a81f3","patch":"@@ -44,19 +44,19 @@ public void read() {\n                     loggerTOs.add(loggerService.read(LoggerType.LOG, parameter));\n                 } catch (final SyncopeClientException | WebServiceException ex) {\n                     if (ex.getMessage().startsWith(\"NotFound\")) {\n-                        resultManager.notFoundError(parameter);\n+                        loggerResultManager.notFoundError(\"Logger\", parameter);\n                     } else {\n-                        resultManager.genericError(\"Error: \" + ex.getMessage());\n+                        loggerResultManager.genericError(\"Error: \" + ex.getMessage());\n                     }\n                     failed = true;\n                     break;\n                 }\n             }\n             if (!failed) {\n-                resultManager.fromRead(loggerTOs);\n+                loggerResultManager.fromRead(loggerTOs);\n             }\n         } else {\n-            resultManager.commandOptionError(READ_HELP_MESSAGE);\n+            loggerResultManager.commandOptionError(READ_HELP_MESSAGE);\n         }\n     }\n }"},{"sha":"1a686cd467ef3442d05f99dd8732abd16fb21628","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerResultManager.java","status":"renamed","additions":2,"deletions":20,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java?ref=6b9cd592b21440d54fabd6012616c4f6a18a81f3","patch":"@@ -20,29 +20,11 @@\n \n import java.util.Arrays;\n import java.util.LinkedList;\n-import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n import org.apache.syncope.client.cli.messages.Table;\n-import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.to.LoggerTO;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n \n-public class ResultManager {\n-\n-    public void notFoundError(final String parameter) {\n-        Messages.printNofFoundMessage(\"Logger\", parameter);\n-    }\n-\n-    public void typeNotValidError(final String parameter) {\n-        Messages.printTypeNotValidMessage(\"logger level\", parameter, CommandUtils.fromEnumToArray(LoggerLevel.class));\n-    }\n-\n-    public void commandOptionError(final String message) {\n-        Messages.printCommandOptionMessage(message);\n-    }\n-\n-    public void genericError(final String... messages) {\n-        Messages.printMessage(messages);\n-    }\n+public class LoggerResultManager extends CommonsResultManager {\n \n     public void fromList(final LinkedList<LoggerTO> loggerTOs) {\n         fromCommandToView(\"list loggers\", \"level\", loggerTOs);","previous_filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/ResultManager.java"},{"sha":"cbfc196f1597b885c08cdf2b458525abd5b3ee8f","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerUpdate.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdate.java?ref=6b9cd592b21440d54fabd6012616c4f6a18a81f3","patch":"@@ -52,23 +52,23 @@ public void update() {\n                     loggerTOs.add(loggerTO);\n                 } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n                     if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n-                        resultManager.typeNotValidError(input.firstParameter());\n+                        loggerResultManager.typeNotValidError(input.firstParameter());\n                     } else if (\"Parameter syntax error!\".equalsIgnoreCase(ex.getMessage())) {\n-                        resultManager.genericError(ex.getMessage(), UPDATE_HELP_MESSAGE);\n+                        loggerResultManager.genericError(ex.getMessage(), UPDATE_HELP_MESSAGE);\n                     } else if (ex.getMessage().startsWith(\"NotFound\")) {\n-                        resultManager.notFoundError(parameter);\n+                        loggerResultManager.notFoundError(\"Logger\", parameter);\n                     } else {\n-                        resultManager.genericError(ex.getMessage(), UPDATE_HELP_MESSAGE);\n+                        loggerResultManager.genericError(ex.getMessage(), UPDATE_HELP_MESSAGE);\n                     }\n                     failed = true;\n                     break;\n                 }\n             }\n             if (!failed) {\n-                resultManager.fromUpdate(loggerTOs);\n+                loggerResultManager.fromUpdate(loggerTOs);\n             }\n         } else {\n-            resultManager.commandOptionError(UPDATE_HELP_MESSAGE);\n+            loggerResultManager.commandOptionError(UPDATE_HELP_MESSAGE);\n         }\n     }\n }"},{"sha":"305fa3002ee2002e9a706e84fb8803734ac3abbd","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerUpdateAll.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdateAll.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b9cd592b21440d54fabd6012616c4f6a18a81f3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdateAll.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdateAll.java?ref=6b9cd592b21440d54fabd6012616c4f6a18a81f3","patch":"@@ -47,19 +47,19 @@ public void updateAll() {\n                     loggerTOs.add(loggerTO);\n                 } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n                     if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n-                        resultManager.typeNotValidError(input.firstParameter());\n+                        loggerResultManager.typeNotValidError(input.firstParameter());\n                     } else {\n-                        resultManager.genericError(ex.getMessage(), UPDATE_ALL_HELP_MESSAGE);\n+                        loggerResultManager.genericError(ex.getMessage(), UPDATE_ALL_HELP_MESSAGE);\n                     }\n                     failed = true;\n                     break;\n                 }\n             }\n             if (!failed) {\n-                resultManager.fromUpdate(loggerTOs);\n+                loggerResultManager.fromUpdate(loggerTOs);\n             }\n         } else {\n-            resultManager.commandOptionError(UPDATE_ALL_HELP_MESSAGE);\n+            loggerResultManager.commandOptionError(UPDATE_ALL_HELP_MESSAGE);\n         }\n     }\n }"}]}