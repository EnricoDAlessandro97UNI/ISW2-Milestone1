{"sha":"ffb78c0871ca6b99b39d67c6998438b3e9f832fb","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZmYjc4YzA4NzFjYTZiOTliMzlkNjdjNjk5ODQzOGIzZTlmODMyZmI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-05T10:19:52Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-05T10:20:06Z"},"message":"[SYNCOPE-1149] Working support for third party JWT SSO providers, with test case and sample implementation","tree":{"sha":"2c0f7c0754135182984449a47733646f36e1f46d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2c0f7c0754135182984449a47733646f36e1f46d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ffb78c0871ca6b99b39d67c6998438b3e9f832fb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ffb78c0871ca6b99b39d67c6998438b3e9f832fb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ffb78c0871ca6b99b39d67c6998438b3e9f832fb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ffb78c0871ca6b99b39d67c6998438b3e9f832fb/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0f5116c2fc4fa175ed0b7062dad000fa8c9f46d6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0f5116c2fc4fa175ed0b7062dad000fa8c9f46d6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0f5116c2fc4fa175ed0b7062dad000fa8c9f46d6"}],"stats":{"total":265,"additions":224,"deletions":41},"files":[{"sha":"61b9aa7856508e208623383902626aef59ccc210","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":26,"deletions":16,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ffb78c0871ca6b99b39d67c6998438b3e9f832fb/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ffb78c0871ca6b99b39d67c6998438b3e9f832fb/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=ffb78c0871ca6b99b39d67c6998438b3e9f832fb","patch":"@@ -389,37 +389,47 @@ public Set<SyncopeGrantedAuthority> getAuthorities(final String username) {\n     }\n \n     @Transactional\n-    public Set<SyncopeGrantedAuthority> authenticate(final JWTAuthentication authentication) {\n-        AccessToken accessToken = accessTokenDAO.find(authentication.getClaims().getTokenId());\n-        if (accessToken == null) {\n-            throw new AuthenticationCredentialsNotFoundException(\n-                    \"Could not find JWT \" + authentication.getClaims().getTokenId());\n-        }\n-\n+    public Pair<String, Set<SyncopeGrantedAuthority>> authenticate(final JWTAuthentication authentication) {\n+        String username;\n         Set<SyncopeGrantedAuthority> authorities;\n \n-        if (adminUser.equals(accessToken.getOwner())) {\n+        if (adminUser.equals(authentication.getClaims().getSubject())) {\n+            AccessToken accessToken = accessTokenDAO.find(authentication.getClaims().getTokenId());\n+            if (accessToken == null) {\n+                throw new AuthenticationCredentialsNotFoundException(\n+                        \"Could not find an Access Token for JWT \" + authentication.getClaims().getTokenId());\n+            }\n+\n+            username = adminUser;\n             authorities = getAdminAuthorities();\n         } else {\n             JWTSSOProvider jwtSSOProvider = getJWTSSOProvider(authentication.getClaims().getIssuer());\n-            User user = jwtSSOProvider.resolve(accessToken.getOwner());\n-            if (user == null) {\n+            Pair<User, AccessToken> resolved = jwtSSOProvider.resolve(authentication.getClaims());\n+            if (resolved == null || resolved.getLeft() == null) {\n                 throw new AuthenticationCredentialsNotFoundException(\n-                        \"Could not find user \" + accessToken.getOwner()\n+                        \"Could not find User \" + authentication.getClaims().getSubject()\n                         + \" for JWT \" + authentication.getClaims().getTokenId());\n             }\n-            LOG.debug(\"JWT {} issued by {} resolved to user {}\",\n+            if (resolved == null || resolved.getRight() == null) {\n+                throw new AuthenticationCredentialsNotFoundException(\n+                        \"Could not find an Access Token for JWT \" + authentication.getClaims().getTokenId());\n+            }\n+\n+            User user = resolved.getLeft();\n+            username = user.getUsername();\n+            AccessToken accessToken = resolved.getRight();\n+            LOG.debug(\"JWT {} issued by {} resolved to User {} and Access Token {}\",\n                     authentication.getClaims().getTokenId(),\n                     authentication.getClaims().getIssuer(),\n-                    user.getUsername());\n+                    username, accessToken.getKey());\n \n             if (BooleanUtils.isTrue(user.isSuspended())) {\n-                throw new DisabledException(\"User \" + user.getUsername() + \" is suspended\");\n+                throw new DisabledException(\"User \" + username + \" is suspended\");\n             }\n \n             CPlainAttr authStatuses = confDAO.find(\"authentication.statuses\");\n             if (authStatuses != null && !authStatuses.getValuesAsStrings().contains(user.getStatus())) {\n-                throw new DisabledException(\"User \" + user.getUsername() + \" not allowed to authenticate\");\n+                throw new DisabledException(\"User \" + username + \" not allowed to authenticate\");\n             }\n \n             if (BooleanUtils.isTrue(user.isMustChangePassword())) {\n@@ -440,7 +450,7 @@ public Set<SyncopeGrantedAuthority> authenticate(final JWTAuthentication authent\n             }\n         }\n \n-        return authorities;\n+        return Pair.of(username, authorities);\n     }\n \n     @Transactional"},{"sha":"2ddf002156ddce103268a9ea8255df09cd8a3ab7","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAccessToken.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ffb78c0871ca6b99b39d67c6998438b3e9f832fb/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAccessToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ffb78c0871ca6b99b39d67c6998438b3e9f832fb/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAccessToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAccessToken.java?ref=ffb78c0871ca6b99b39d67c6998438b3e9f832fb","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring.security;\n+\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.UUID;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.entity.AccessToken;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+/**\n+ * Convenience {@link AccessToken} implementation wrapping the received JWT, for usage with custom\n+ * {@link JWTSSOProvider#resolve} implementations.\n+ */\n+public class JWTAccessToken implements AccessToken {\n+\n+    private static final long serialVersionUID = -3824671946137458487L;\n+\n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n+    private final String key = UUID.randomUUID().toString();\n+\n+    private final JwtClaims claims;\n+\n+    private byte[] authorities;\n+\n+    public JWTAccessToken(final JwtClaims claims) throws Exception {\n+        this.claims = claims;\n+        this.authorities = ENCRYPTOR.encode(\n+                POJOHelper.serialize(Collections.emptySet()), CipherAlgorithm.AES).\n+                getBytes();\n+    }\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @Override\n+    public String getBody() {\n+        return null;\n+    }\n+\n+    @Override\n+    public Date getExpiryTime() {\n+        return new Date(claims.getExpiryTime());\n+    }\n+\n+    @Override\n+    public String getOwner() {\n+        return claims.getSubject();\n+    }\n+\n+    @Override\n+    public byte[] getAuthorities() {\n+        return authorities;\n+    }\n+\n+    @Override\n+    public void setKey(final String key) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void setBody(final String body) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void setExpiryTime(final Date expiryTime) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void setOwner(final String owner) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void setAuthorities(final byte[] authorities) {\n+        this.authorities = ArrayUtils.clone(authorities);\n+    }\n+\n+}"},{"sha":"0b5ac61cc6669f43683d9ed66aa9ccab576ac7c7","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthentication.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ffb78c0871ca6b99b39d67c6998438b3e9f832fb/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthentication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ffb78c0871ca6b99b39d67c6998438b3e9f832fb/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthentication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthentication.java?ref=ffb78c0871ca6b99b39d67c6998438b3e9f832fb","patch":"@@ -38,6 +38,8 @@ public class JWTAuthentication implements Authentication {\n \n     private final SyncopeAuthenticationDetails details;\n \n+    private String username;\n+\n     private final Set<SyncopeGrantedAuthority> authorities = new HashSet<>();\n \n     private boolean authenticated = false;\n@@ -68,7 +70,11 @@ public SyncopeAuthenticationDetails getDetails() {\n \n     @Override\n     public Object getPrincipal() {\n-        return claims.getSubject();\n+        return username == null ? claims.getSubject() : username;\n+    }\n+\n+    public void setUsername(final String username) {\n+        this.username = username;\n     }\n \n     @Override\n@@ -83,6 +89,6 @@ public void setAuthenticated(final boolean authenticated) throws IllegalArgument\n \n     @Override\n     public String getName() {\n-        return claims.getSubject();\n+        return username == null ? claims.getSubject() : username;\n     }\n }"},{"sha":"36d718aa0aba24e6e6eaa0d490e68838ad28503b","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthenticationProvider.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ffb78c0871ca6b99b39d67c6998438b3e9f832fb/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ffb78c0871ca6b99b39d67c6998438b3e9f832fb/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java?ref=ffb78c0871ca6b99b39d67c6998438b3e9f832fb","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.core.spring.security;\n \n import java.util.Date;\n+import java.util.Set;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.authentication.AuthenticationProvider;\n@@ -44,7 +46,9 @@ public Authentication authenticate(final Authentication authentication) throws A\n \n             @Override\n             public Void exec() {\n-                jwtAuthentication.getAuthorities().addAll(dataAccessor.authenticate(jwtAuthentication));\n+                Pair<String, Set<SyncopeGrantedAuthority>> authenticated = dataAccessor.authenticate(jwtAuthentication);\n+                jwtAuthentication.setUsername(authenticated.getLeft());\n+                jwtAuthentication.getAuthorities().addAll(authenticated.getRight());\n                 return null;\n             }\n         });"},{"sha":"cb9ce0dac542970d2c162b57d997f07ab5b8f246","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTSSOProvider.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ffb78c0871ca6b99b39d67c6998438b3e9f832fb/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTSSOProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ffb78c0871ca6b99b39d67c6998438b3e9f832fb/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTSSOProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTSSOProvider.java?ref=ffb78c0871ca6b99b39d67c6998438b3e9f832fb","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n+import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n+import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n \n /**\n@@ -35,10 +38,11 @@ public interface JWTSSOProvider extends JwsSignatureVerifier {\n     String getIssuer();\n \n     /**\n-     * Attempts to resolve the subject from a given JWT into an internal user.\n+     * Attempts to resolve the given JWT claims into internal {@link User} and {@link AccessToken}.\n+     * <strong>IMPORTANT</strong>: this is not invoked for the {@code}admin{@code} super-user.\n      *\n-     * @param jwtSubject subject from JWT claims\n-     * @return internal user matching the provided subject if found, otherwise null\n+     * @param jwtClaims JWT claims\n+     * @return internal User and Access Token matching the provided JWT claims, if found; otherwise null\n      */\n-    User resolve(String jwtSubject);\n+    Pair<User, AccessToken> resolve(JwtClaims jwtClaims);\n }"},{"sha":"8d561a6a6454073d302e6727e9d8d4670a5d4804","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeJWTSSOProvider.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ffb78c0871ca6b99b39d67c6998438b3e9f832fb/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeJWTSSOProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ffb78c0871ca6b99b39d67c6998438b3e9f832fb/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeJWTSSOProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeJWTSSOProvider.java?ref=ffb78c0871ca6b99b39d67c6998438b3e9f832fb","patch":"@@ -19,11 +19,15 @@\n package org.apache.syncope.core.spring.security;\n \n import javax.annotation.Resource;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n import org.apache.cxf.rs.security.jose.jws.JwsHeaders;\n import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n import org.apache.cxf.rs.security.jose.jws.JwsVerificationSignature;\n+import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n+import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -42,6 +46,9 @@ public class SyncopeJWTSSOProvider implements JWTSSOProvider {\n     @Autowired\n     private UserDAO userDAO;\n \n+    @Autowired\n+    private AccessTokenDAO accessTokenDAO;\n+\n     @Override\n     public String getIssuer() {\n         return jwtIssuer;\n@@ -64,8 +71,8 @@ public JwsVerificationSignature createJwsVerificationSignature(final JwsHeaders\n \n     @Transactional(readOnly = true)\n     @Override\n-    public User resolve(final String jwtSubject) {\n-        return userDAO.findByUsername(jwtSubject);\n+    public Pair<User, AccessToken> resolve(final JwtClaims jwtClaims) {\n+        return Pair.of(userDAO.findByUsername(jwtClaims.getSubject()), accessTokenDAO.find(jwtClaims.getTokenId()));\n     }\n \n }"},{"sha":"61ab6322bc2bb5892f308ab416e8a37ec6e230fb","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/CustomJWTSSOProvider.java","status":"modified","additions":52,"deletions":8,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ffb78c0871ca6b99b39d67c6998438b3e9f832fb/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCustomJWTSSOProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ffb78c0871ca6b99b39d67c6998438b3e9f832fb/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCustomJWTSSOProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCustomJWTSSOProvider.java?ref=ffb78c0871ca6b99b39d67c6998438b3e9f832fb","patch":"@@ -18,14 +18,28 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n+import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n import org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureVerifier;\n import org.apache.cxf.rs.security.jose.jws.JwsHeaders;\n import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n import org.apache.cxf.rs.security.jose.jws.JwsVerificationSignature;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.spring.security.AuthDataAccessor;\n+import org.apache.syncope.core.spring.security.Encryptor;\n+import org.apache.syncope.core.spring.security.JWTAccessToken;\n import org.apache.syncope.core.spring.security.JWTSSOProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -34,21 +48,29 @@\n  */\n public class CustomJWTSSOProvider implements JWTSSOProvider {\n \n-    private String jwtIssuer = \"custom-issuer\";\n+    private static final Logger LOG = LoggerFactory.getLogger(CustomJWTSSOProvider.class);\n+\n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n+    public static final String ISSUER = \"custom-issuer\";\n+\n+    public static final String CUSTOM_KEY = \"12345678910987654321\";\n \n     private final JwsSignatureVerifier delegate;\n \n     @Autowired\n-    private UserDAO userDAO;\n+    private AnySearchDAO searchDAO;\n+\n+    @Autowired\n+    private AuthDataAccessor authDataAccessor;\n \n     public CustomJWTSSOProvider() {\n-        String customKey = \"12345678910987654321\";\n-        delegate = new HmacJwsSignatureVerifier(customKey.getBytes(), SignatureAlgorithm.HS512);\n+        delegate = new HmacJwsSignatureVerifier(CUSTOM_KEY.getBytes(), SignatureAlgorithm.HS512);\n     }\n \n     @Override\n     public String getIssuer() {\n-        return jwtIssuer;\n+        return ISSUER;\n     }\n \n     @Override\n@@ -68,8 +90,30 @@ public JwsVerificationSignature createJwsVerificationSignature(final JwsHeaders\n \n     @Transactional(readOnly = true)\n     @Override\n-    public User resolve(final String jwtSubject) {\n-        return userDAO.findByUsername(jwtSubject);\n+    public Pair<User, AccessToken> resolve(final JwtClaims jwtClaims) {\n+        AttributeCond userIdCond = new AttributeCond();\n+        userIdCond.setSchema(\"userId\");\n+        userIdCond.setType(AttributeCond.Type.EQ);\n+        userIdCond.setExpression(jwtClaims.getSubject());\n+\n+        List<User> matching = searchDAO.search(SearchCond.getLeafCond(userIdCond), AnyTypeKind.USER);\n+        if (matching.size() == 1) {\n+            User user = matching.get(0);\n+\n+            AccessToken accessToken = null;\n+            try {\n+                accessToken = new JWTAccessToken(jwtClaims);\n+                accessToken.setAuthorities(ENCRYPTOR.encode(\n+                        POJOHelper.serialize(authDataAccessor.getAuthorities(user.getUsername())), CipherAlgorithm.AES).\n+                        getBytes());\n+            } catch (Exception e) {\n+                LOG.error(\"Could not fetch or store authorities\", e);\n+            }\n+\n+            return Pair.of(user, accessToken);\n+        }\n+\n+        return null;\n     }\n \n }"},{"sha":"ef122f64e74def8984e802ab3e534b9f454f33e8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/JWTITCase.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ffb78c0871ca6b99b39d67c6998438b3e9f832fb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ffb78c0871ca6b99b39d67c6998438b3e9f832fb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java?ref=ffb78c0871ca6b99b39d67c6998438b3e9f832fb","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.fit.core;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n@@ -28,9 +29,12 @@\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n import java.util.Date;\n+import java.util.Map;\n+import java.util.Set;\n import java.util.UUID;\n import javax.ws.rs.core.Response;\n import javax.xml.ws.WebServiceException;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.rs.security.jose.common.JoseType;\n import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n import org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureProvider;\n@@ -44,10 +48,12 @@\n import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n import org.apache.cxf.rs.security.jose.jwt.JwtToken;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.AccessTokenService;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.apache.syncope.fit.core.reference.CustomJWTSSOProvider;\n import org.junit.Test;\n \n /**\n@@ -384,7 +390,6 @@ public void unknownId() throws ParseException {\n     }\n \n     @Test\n-    @org.junit.Ignore\n     public void thirdPartyToken() throws ParseException {\n         // Create a new token\n         Date now = new Date();\n@@ -395,24 +400,24 @@ public void thirdPartyToken() throws ParseException {\n \n         JwtClaims jwtClaims = new JwtClaims();\n         jwtClaims.setTokenId(UUID.randomUUID().toString());\n-        jwtClaims.setSubject(ADMIN_UNAME);\n+        jwtClaims.setSubject(\"puccini@apache.org\");\n         jwtClaims.setIssuedAt(now.getTime());\n-        jwtClaims.setIssuer(\"custom-issuer\");\n+        jwtClaims.setIssuer(CustomJWTSSOProvider.ISSUER);\n         jwtClaims.setExpiryTime(expiry.getTime().getTime());\n         jwtClaims.setNotBefore(now.getTime());\n \n         JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n         JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n \n-        String customKey = \"12345678910987654321\";\n-\n         JwsSignatureProvider jwsSignatureProvider =\n-                new HmacJwsSignatureProvider(customKey.getBytes(), SignatureAlgorithm.HS512);\n+                new HmacJwsSignatureProvider(CustomJWTSSOProvider.CUSTOM_KEY.getBytes(), SignatureAlgorithm.HS512);\n         String signed = producer.signWith(jwsSignatureProvider);\n \n         SyncopeClient jwtClient = clientFactory.create(signed);\n-        UserSelfService jwtUserSelfService = jwtClient.getService(UserSelfService.class);\n-        jwtUserSelfService.read();\n+\n+        Pair<Map<String, Set<String>>, UserTO> self = jwtClient.self();\n+        assertFalse(self.getLeft().isEmpty());\n+        assertEquals(\"puccini\", self.getRight().getUsername());\n     }\n }"}]}