{"sha":"6306562fde0b345b6ff944bb98f275901c675be8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjYzMDY1NjJmZGUwYjM0NWI2ZmY5NDRiYjk4ZjI3NTkwMWM2NzViZTg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-03-01T19:14:21Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-03-01T19:14:21Z"},"message":"[SYNCOPE-744][SYNCOPE-750] Job widget almost done","tree":{"sha":"8c017a5af44246f9115ab8990301a28102fa0940","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8c017a5af44246f9115ab8990301a28102fa0940"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6306562fde0b345b6ff944bb98f275901c675be8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6306562fde0b345b6ff944bb98f275901c675be8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6306562fde0b345b6ff944bb98f275901c675be8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6306562fde0b345b6ff944bb98f275901c675be8/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"6da4eec2fc149668e38f4dd43b536f9613b465d1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6da4eec2fc149668e38f4dd43b536f9613b465d1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6da4eec2fc149668e38f4dd43b536f9613b465d1"}],"stats":{"total":1372,"additions":1073,"deletions":299},"files":[{"sha":"7fd2a93ff9b7f82507a05ad0a1c30e17b273e724","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportResultManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportResultManager.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -71,13 +71,13 @@ public void printReportExecutions(final List<ExecTO> reportExecTOs) {\n             System.out.println(\"       message: \" + reportExecTO.getMessage());\n             System.out.println(\"       start date: \" + reportExecTO.getStart());\n             System.out.println(\"       end date: \" + reportExecTO.getEnd());\n-            System.out.println(\"       report: \" + reportExecTO.getReference());\n+            System.out.println(\"       report: \" + reportExecTO.getRefDesc());\n         }\n     }\n \n     public void printJobs(final List<JobTO> jobTOs) {\n         for (final JobTO jobTO : jobTOs) {\n-            System.out.println(\"       REPORT: \" + jobTO.getReference());\n+            System.out.println(\"       REPORT: \" + jobTO.getRefDesc());\n             System.out.println(\"       status: \" + jobTO.getStatus());\n             System.out.println(\"       start date: \" + jobTO.getStart());\n             System.out.println(\"       running: \" + jobTO.isRunning());"},{"sha":"5c9006977fcc691118e3c4e81cb5700be2958855","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportSyncopeOperations.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportSyncopeOperations.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -41,7 +41,7 @@ public ReportTO read(final String reportKey) {\n     }\n \n     public List<JobTO> listJobs() {\n-        return reportService.listJobs(10);\n+        return reportService.listJobs();\n     }\n \n     public List<ReportTO> list() {"},{"sha":"ed5b977f12894cd2fa435346dd30befaf58d64d7","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskResultManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -199,7 +199,7 @@ public void printTaskExecTOs(final List<ExecTO> taskExecTOs) {\n         for (final ExecTO taskExecTO : taskExecTOs) {\n             System.out.println(\"     EXECUTIONS: \");\n             System.out.println(\"     - task execution key: \" + taskExecTO.getKey());\n-            System.out.println(\"       task: \" + taskExecTO.getReference());\n+            System.out.println(\"       task: \" + taskExecTO.getRefDesc());\n             System.out.println(\"       message: \");\n             System.out.println(\"       ###############     <BEGIN MESSAGE>     ###############\");\n             System.out.println(\"       message: \" + taskExecTO.getMessage());\n@@ -213,7 +213,7 @@ public void printTaskExecTOs(final List<ExecTO> taskExecTOs) {\n \n     public void printJobs(final List<JobTO> jobTOs) {\n         for (final JobTO jobTO : jobTOs) {\n-            System.out.println(\"       TASK: \" + jobTO.getReference());\n+            System.out.println(\"       TASK: \" + jobTO.getRefDesc());\n             System.out.println(\"       status: \" + jobTO.getStatus());\n             System.out.println(\"       start date: \" + jobTO.getStart());\n             System.out.println(\"       running: \" + jobTO.isRunning());"},{"sha":"5cee290bac1e886bf088f68a7b8ad1fb6feef911","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskSyncopeOperations.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -33,7 +33,7 @@ public class TaskSyncopeOperations {\n     private final TaskService taskService = SyncopeServices.get(TaskService.class);\n \n     public List<JobTO> listJobs() {\n-        return taskService.listJobs(10);\n+        return taskService.listJobs();\n     }\n \n     public <T extends AbstractTaskTO> T read(final String taskKey) {"},{"sha":"d383e4c2baefafa05118140aea08f69ee9f93023","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -26,6 +26,10 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n import javax.ws.rs.core.EntityTag;\n import javax.ws.rs.core.MediaType;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -67,6 +71,8 @@ public class SyncopeConsoleSession extends AuthenticatedWebSession {\n \n     private String domain;\n \n+    private final ScheduledExecutorService executorService = Executors.newScheduledThreadPool(5);\n+\n     private final Map<Class<?>, Object> services = Collections.synchronizedMap(new HashMap<Class<?>, Object>());\n \n     private SyncopeClient client;\n@@ -102,6 +108,25 @@ public SyncopeConsoleSession(final Request request) {\n                 domains);\n     }\n \n+    public void execute(final Runnable command) {\n+        executorService.execute(command);\n+    }\n+\n+    public ScheduledFuture<?> scheduleAtFixedRate(\n+            final Runnable command,\n+            final long initialDelay,\n+            final long period,\n+            final TimeUnit unit) {\n+\n+        return executorService.scheduleAtFixedRate(command, initialDelay, period, unit);\n+    }\n+\n+    @Override\n+    public void invalidate() {\n+        super.invalidate();\n+        executorService.shutdownNow();\n+    }\n+\n     public PlatformInfo getPlatformInfo() {\n         return platformInfo;\n     }"},{"sha":"0c50aa5a8ef7a7619ccfa5309e3aa7256fc2e6be","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/Constants.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConstants.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -24,10 +24,12 @@ public final class Constants {\n \n     public static final String ON_CHANGE = \"change\";\n \n-    public static final String ON_KEYUP = \"keyup\";\n-\n     public static final String ON_BLUR = \"blur\";\n \n+    public static final String ON_MOUSE_ENTER = \"mouseenter\";\n+\n+    public static final String ON_MOUSE_LEAVE = \"mouseleave\";\n+\n     public static final String PNG_EXT = \".png\";\n \n     public static final String FEEDBACK = \"feedback\";"},{"sha":"76b298cdcc3f1294577ef79dd1eb66c9c6e282d2","filename":"client/console/src/main/java/org/apache/syncope/client/console/init/ClassPathScanImplementationLookup.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -25,7 +25,7 @@\n import java.util.List;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.console.pages.AbstractExtPage;\n+import org.apache.syncope.client.console.pages.BaseExtPage;\n import org.apache.syncope.client.console.annotations.BinaryPreview;\n import org.apache.syncope.client.console.annotations.ExtPage;\n import org.apache.syncope.client.console.pages.BasePage;\n@@ -45,7 +45,7 @@ public class ClassPathScanImplementationLookup {\n \n     private List<Class<? extends AbstractBinaryPreviewer>> previewers;\n \n-    private List<Class<? extends AbstractExtPage>> extPages;\n+    private List<Class<? extends BaseExtPage>> extPages;\n \n     @SuppressWarnings(\"unchecked\")\n     public void load() {\n@@ -56,7 +56,7 @@ public void load() {\n         ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n         scanner.addIncludeFilter(new AssignableTypeFilter(BasePage.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(AbstractBinaryPreviewer.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(AbstractExtPage.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(BaseExtPage.class));\n \n         for (BeanDefinition bd : scanner.findCandidateComponents(StringUtils.EMPTY)) {\n             try {\n@@ -65,9 +65,9 @@ public void load() {\n                 boolean isAbsractClazz = Modifier.isAbstract(clazz.getModifiers());\n \n                 if (!isAbsractClazz) {\n-                    if (AbstractExtPage.class.isAssignableFrom(clazz)) {\n+                    if (BaseExtPage.class.isAssignableFrom(clazz)) {\n                         if (clazz.isAnnotationPresent(ExtPage.class)) {\n-                            extPages.add((Class<? extends AbstractExtPage>) clazz);\n+                            extPages.add((Class<? extends BaseExtPage>) clazz);\n                         } else {\n                             LOG.error(\"Could not find annotation {} in {}, ignoring\",\n                                     ExtPage.class.getName(), clazz.getName());\n@@ -85,12 +85,12 @@ public void load() {\n         pages = Collections.unmodifiableList(pages);\n         previewers = Collections.unmodifiableList(previewers);\n \n-        Collections.sort(extPages, new Comparator<Class<? extends AbstractExtPage>>() {\n+        Collections.sort(extPages, new Comparator<Class<? extends BaseExtPage>>() {\n \n             @Override\n             public int compare(\n-                    final Class<? extends AbstractExtPage> o1,\n-                    final Class<? extends AbstractExtPage> o2) {\n+                    final Class<? extends BaseExtPage> o1,\n+                    final Class<? extends BaseExtPage> o2) {\n \n                 int prio1 = o1.getAnnotation(ExtPage.class).priority();\n                 int prio2 = o2.getAnnotation(ExtPage.class).priority();\n@@ -130,7 +130,7 @@ public List<Class<? extends AbstractBinaryPreviewer>> getPreviewerClasses() {\n         return previewers;\n     }\n \n-    public List<Class<? extends AbstractExtPage>> getExtPageClasses() {\n+    public List<Class<? extends BaseExtPage>> getExtPageClasses() {\n         return extPages;\n     }\n "},{"sha":"c666fe365235e7890041ee63887033f95b380f28","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/BaseExtPage.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBaseExtPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBaseExtPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBaseExtPage.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -20,15 +20,15 @@\n \n import org.apache.wicket.request.mapper.parameter.PageParameters;\n \n-public abstract class AbstractExtPage extends BasePage {\n+public abstract class BaseExtPage extends BasePage {\n \n     private static final long serialVersionUID = 4627828052717627159L;\n \n-    public AbstractExtPage() {\n+    public BaseExtPage() {\n         super();\n     }\n \n-    public AbstractExtPage(final PageParameters parameters) {\n+    public BaseExtPage(final PageParameters parameters) {\n         super(parameters);\n     }\n }","previous_filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/AbstractExtPage.java"},{"sha":"a860bfeb61339aabd09f5df4c1d8605ec4589c0a","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/BasePage.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -251,20 +251,20 @@ public void onComponentTag(final Component component, final ComponentTag tag) {\n         ClassPathScanImplementationLookup classPathScanImplementationLookup =\n                 (ClassPathScanImplementationLookup) SyncopeConsoleApplication.get().\n                 getServletContext().getAttribute(ConsoleInitializer.CLASSPATH_LOOKUP);\n-        List<Class<? extends AbstractExtPage>> extPageClasses = classPathScanImplementationLookup.getExtPageClasses();\n+        List<Class<? extends BaseExtPage>> extPageClasses = classPathScanImplementationLookup.getExtPageClasses();\n \n         WebMarkupContainer extensionsLI = new WebMarkupContainer(getLIContainerId(\"extensions\"));\n         extensionsLI.setOutputMarkupPlaceholderTag(true);\n         extensionsLI.setVisible(!extPageClasses.isEmpty());\n         body.add(extensionsLI);\n \n-        ListView<Class<? extends AbstractExtPage>> extPages = new ListView<Class<? extends AbstractExtPage>>(\n+        ListView<Class<? extends BaseExtPage>> extPages = new ListView<Class<? extends BaseExtPage>>(\n                 \"extPages\", extPageClasses) {\n \n             private static final long serialVersionUID = 4949588177564901031L;\n \n             @Override\n-            protected void populateItem(final ListItem<Class<? extends AbstractExtPage>> item) {\n+            protected void populateItem(final ListItem<Class<? extends BaseExtPage>> item) {\n                 WebMarkupContainer containingLI = new WebMarkupContainer(\"extPageLI\");\n                 item.add(containingLI);\n                 if (item.getModelObject().equals(BasePage.this.getClass())) {\n@@ -294,7 +294,7 @@ public void onComponentTag(final Component component, final ComponentTag tag) {\n         extPages.setOutputMarkupId(true);\n         extensionsLI.add(extPages);\n \n-        if (getPage() instanceof AbstractExtPage) {\n+        if (getPage() instanceof BaseExtPage) {\n             extPages.add(new Behavior() {\n \n                 private static final long serialVersionUID = 1469628524240283489L;"},{"sha":"4d26d937c3181d54b8a623cc57bd50d01851da4e","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Dashboard.java","status":"modified","additions":128,"deletions":21,"changes":149,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDashboard.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDashboard.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDashboard.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -18,31 +18,148 @@\n  */\n package org.apache.syncope.client.console.pages;\n \n+import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxTimerBehavior;\n import org.apache.syncope.client.console.widgets.NumberWidget;\n import org.apache.syncope.client.console.widgets.AnyByRealmWidget;\n import org.apache.syncope.client.console.widgets.CompletenessWidget;\n import org.apache.syncope.client.console.widgets.JobWidget;\n import org.apache.syncope.client.console.widgets.LoadWidget;\n import org.apache.syncope.client.console.widgets.UsersByStatusWidget;\n import org.apache.syncope.common.lib.info.NumbersInfo;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.WebPage;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.apache.wicket.util.time.Duration;\n \n public class Dashboard extends BasePage {\n \n     private static final long serialVersionUID = -1100228004207271270L;\n \n+    private final NumberWidget totalUsers;\n+\n+    private final NumberWidget totalGroups;\n+\n+    private final NumberWidget totalAny1OrRoles;\n+\n+    private final NumberWidget totalAny2OrResources;\n+\n+    private final UsersByStatusWidget usersByStatus;\n+\n+    private final CompletenessWidget completeness;\n+\n+    private final AnyByRealmWidget anyByRealm;\n+\n+    private final LoadWidget load;\n+\n     public Dashboard(final PageParameters parameters) {\n         super(parameters);\n \n         NumbersInfo numbers = SyncopeConsoleSession.get().getService(SyncopeService.class).numbers();\n \n-        body.add(new NumberWidget(\n-                \"totalUsers\", \"bg-yellow\", numbers.getTotalUsers(), getString(\"users\"), \"ion ion-person\"));\n-        body.add(new NumberWidget(\n-                \"totalGroups\", \"bg-red\", numbers.getTotalGroups(), getString(\"groups\"), \"ion ion-person-stalker\"));\n+        WebMarkupContainer timer = new WebMarkupContainer(\"timer\");\n+        timer.setOutputMarkupId(true);\n+        body.add(timer);\n+\n+        totalUsers = new NumberWidget(\n+                \"totalUsers\", \"bg-yellow\", numbers.getTotalUsers(), getString(\"users\"), \"ion ion-person\");\n+        timer.add(totalUsers);\n+        totalGroups = new NumberWidget(\n+                \"totalGroups\", \"bg-red\", numbers.getTotalGroups(), getString(\"groups\"), \"ion ion-person-stalker\");\n+        timer.add(totalGroups);\n+\n+        Triple<Integer, String, String> built = buildTotalAny1OrRoles(numbers);\n+        totalAny1OrRoles = new NumberWidget(\n+                \"totalAny1OrRoles\", \"bg-green\", built.getLeft(), built.getMiddle(), built.getRight());\n+        timer.add(totalAny1OrRoles);\n+\n+        built = buildTotalAny2OrResources(numbers);\n+        totalAny2OrResources = new NumberWidget(\n+                \"totalAny2OrResources\", \"bg-aqua\", built.getLeft(), built.getMiddle(), built.getRight());\n+        timer.add(totalAny2OrResources);\n+\n+        usersByStatus = new UsersByStatusWidget(\"usersByStatus\", numbers.getUsersByStatus());\n+        timer.add(usersByStatus);\n+\n+        completeness = new CompletenessWidget(\"completeness\", numbers.getConfCompleteness());\n+        timer.add(completeness);\n+\n+        anyByRealm = new AnyByRealmWidget(\n+                \"anyByRealm\",\n+                numbers.getUsersByRealm(),\n+                numbers.getGroupsByRealm(),\n+                numbers.getAnyType1(),\n+                numbers.getAny1ByRealm(),\n+                numbers.getAnyType2(),\n+                numbers.getAny2ByRealm());\n+        timer.add(anyByRealm);\n+\n+        load = new LoadWidget(\"load\", SyncopeConsoleSession.get().getService(SyncopeService.class).system());\n+        timer.add(load);\n+\n+        timer.add(new IndicatorAjaxTimerBehavior(Duration.seconds(60)) {\n+\n+            private static final long serialVersionUID = -4426283634345968585L;\n \n+            @Override\n+            protected void onTimer(final AjaxRequestTarget target) {\n+                NumbersInfo numbers = SyncopeConsoleSession.get().getService(SyncopeService.class).numbers();\n+\n+                if (totalUsers.refresh(numbers.getTotalUsers())) {\n+                    target.add(totalUsers);\n+                }\n+                if (totalGroups.refresh(numbers.getTotalGroups())) {\n+                    target.add(totalGroups);\n+                }\n+\n+                Triple<Integer, String, String> updatedBuild = buildTotalAny1OrRoles(numbers);\n+                if (totalAny1OrRoles.refresh(updatedBuild.getLeft())) {\n+                    target.add(totalAny1OrRoles);\n+                }\n+                updatedBuild = buildTotalAny2OrResources(numbers);\n+                if (totalAny2OrResources.refresh(updatedBuild.getLeft())) {\n+                    target.add(totalAny2OrResources);\n+                }\n+\n+                if (usersByStatus.refresh(numbers.getUsersByStatus())) {\n+                    target.add(usersByStatus);\n+                }\n+\n+                if (completeness.refresh(numbers.getConfCompleteness())) {\n+                    target.add(completeness);\n+                }\n+\n+                if (anyByRealm.refresh(\n+                        numbers.getUsersByRealm(),\n+                        numbers.getGroupsByRealm(),\n+                        numbers.getAnyType1(),\n+                        numbers.getAny1ByRealm(),\n+                        numbers.getAnyType2(),\n+                        numbers.getAny2ByRealm())) {\n+\n+                    target.add(anyByRealm);\n+                }\n+\n+                load.refresh(SyncopeConsoleSession.get().getService(SyncopeService.class).system());\n+                target.add(load);\n+            }\n+        });\n+\n+        JobWidget job = new JobWidget(\"job\", getPageReference());\n+        MetaDataRoleAuthorizationStrategy.authorize(job, WebPage.ENABLE,\n+                String.format(\"%s,%s,%s\",\n+                        StandardEntitlement.NOTIFICATION_LIST,\n+                        StandardEntitlement.TASK_LIST,\n+                        StandardEntitlement.REPORT_LIST));\n+        body.add(job);\n+    }\n+\n+    private Triple<Integer, String, String> buildTotalAny1OrRoles(final NumbersInfo numbers) {\n         int number;\n         String label;\n         String icon;\n@@ -55,8 +172,13 @@ public Dashboard(final PageParameters parameters) {\n             label = numbers.getAnyType1();\n             icon = \"ion ion-gear-a\";\n         }\n-        body.add(new NumberWidget(\"totalAny1OrRoles\", \"bg-green\", number, label, icon));\n+        return Triple.of(number, label, icon);\n+    }\n \n+    private Triple<Integer, String, String> buildTotalAny2OrResources(final NumbersInfo numbers) {\n+        int number;\n+        String label;\n+        String icon;\n         if (numbers.getAnyType2() == null) {\n             number = numbers.getTotalResources();\n             label = getString(\"resources\");\n@@ -66,21 +188,6 @@ public Dashboard(final PageParameters parameters) {\n             label = numbers.getAnyType2();\n             icon = \"ion ion-gear-a\";\n         }\n-        body.add(new NumberWidget(\"totalAny1OrResources\", \"bg-aqua\", number, label, icon));\n-\n-        body.add(new UsersByStatusWidget(\"usersByStatus\", numbers.getUsersByStatus()));\n-        body.add(new CompletenessWidget(\"completeness\", numbers.getConfCompleteness()));\n-        body.add(new AnyByRealmWidget(\n-                \"anyByRealm\",\n-                numbers.getUsersByRealm(),\n-                numbers.getGroupsByRealm(),\n-                numbers.getAnyType1(),\n-                numbers.getAny1ByRealm(),\n-                numbers.getAnyType2(),\n-                numbers.getAny2ByRealm()));\n-\n-        body.add(new LoadWidget(\"load\", SyncopeConsoleSession.get().getService(SyncopeService.class).system()));\n-\n-        body.add(new JobWidget(\"job\", getPageReference()));\n+        return Triple.of(number, label, icon);\n     }\n }"},{"sha":"c563fca6e88b47a6626c38dbdec36b076efe9a8e","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeClassesPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -137,8 +137,8 @@ public String getCssClass() {\n                             String css = super.getCssClass();\n                             if (\"key\".equals(fieldName)) {\n                                 css = StringUtils.isBlank(css)\n-                                        ? \"medium_fixedsize\"\n-                                        : css + \" medium_fixedsize\";\n+                                        ? \"col-xs-1\"\n+                                        : css + \" col-xs-1\";\n                             }\n                             return css;\n                         }"},{"sha":"d7f5a95ee5e46ea5d29a458dfad4b6bfdc5e92a5","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypesPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -138,8 +138,8 @@ public String getCssClass() {\n                             String css = super.getCssClass();\n                             if (\"key\".equals(fieldName)) {\n                                 css = StringUtils.isBlank(css)\n-                                        ? \"medium_fixedsize\"\n-                                        : css + \" medium_fixedsize\";\n+                                        ? \"col-xs-1\"\n+                                        : css + \" col-xs-1\";\n                             }\n                             return css;\n                         }"},{"sha":"5d8190e6999a55c7568dc45adf68294bf3fb4fa9","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersPanel.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -160,8 +160,8 @@ public String getCssClass() {\n                             String css = super.getCssClass();\n                             if (\"key\".equals(fieldName)) {\n                                 css = StringUtils.isBlank(css)\n-                                        ? \"medium_fixedsize\"\n-                                        : css + \" medium_fixedsize\";\n+                                        ? \"col-xs-1\"\n+                                        : css + \" col-xs-1\";\n                             }\n                             return css;\n                         }"},{"sha":"5efbf474c60407bb34abae39fc2d5c32276a1f2b","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RelationshipTypePanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypePanel.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -135,8 +135,8 @@ public String getCssClass() {\n                         String css = super.getCssClass();\n                         if (\"key\".equals(fieldName)) {\n                             css = StringUtils.isBlank(css)\n-                                    ? \"medium_fixedsize\"\n-                                    : css + \" medium_fixedsize\";\n+                                    ? \"col-xs-1\"\n+                                    : css + \" col-xs-1\";\n                         }\n                         return css;\n                     }"},{"sha":"5fb55647fe301e8fde68348f89200fad729bb65c","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceMappingPanel.java","status":"modified","additions":2,"deletions":15,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -71,21 +71,11 @@ public class ResourceMappingPanel extends Panel {\n \n     private static final long serialVersionUID = -7982691107029848579L;\n \n-    /**\n-     * Mapping field style sheet.\n-     */\n-    private static final String FIELD_STYLE = \"short_fixedsize\";\n-\n     /**\n      * Mapping field style sheet.\n      */\n     private static final String DEF_FIELD_STYLE = \"\";\n \n-    /**\n-     * Mapping field style sheet.\n-     */\n-    private static final String SHORT_FIELD_STYLE = \"veryshort_fixedsize\";\n-\n     /**\n      * Schema rest client.\n      */\n@@ -264,7 +254,6 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                         false);\n                 intAttrNames.setChoices(schemaNames);\n                 intAttrNames.setRequired(true).hideLabel();\n-                intAttrNames.setStyleSheet(false, FIELD_STYLE);\n \n                 intAttrNames.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n@@ -283,7 +272,6 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                         new PropertyModel<IntMappingType>(mapItem, \"intMappingType\"));\n                 intMappingTypes.setRequired(true).hideLabel();\n                 intMappingTypes.setChoices(attrTypes);\n-                intMappingTypes.setStyleSheet(false, FIELD_STYLE);\n                 item.add(intMappingTypes);\n \n                 final AjaxDropDownChoicePanel<AnyTypeKind> entitiesPanel = new AjaxDropDownChoicePanel<>(\n@@ -330,7 +318,6 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 }\n                 extAttrNames.setRequired(required).hideLabel();\n                 extAttrNames.setEnabled(required);\n-                extAttrNames.setStyleSheet(false, FIELD_STYLE);\n                 item.add(extAttrNames);\n \n                 final AjaxTextFieldPanel mandatory = new AjaxTextFieldPanel(\n@@ -339,7 +326,6 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                         new PropertyModel<String>(mapItem, \"mandatoryCondition\"));\n                 mandatory.hideLabel();\n                 mandatory.setChoices(Arrays.asList(new String[] { \"true\", \"false\" }));\n-                mandatory.setStyleSheet(false, SHORT_FIELD_STYLE);\n                 item.add(mandatory);\n \n                 final AjaxCheckBoxPanel connObjectKey = new AjaxCheckBoxPanel(\n@@ -456,9 +442,10 @@ public boolean evaluate(final ConnIdObjectClassTO object) {\n \n         return clazz == null ? new ArrayList<String>()\n                 : IterableUtils.toList(IterableUtils.filteredIterable(clazz.getAttributes(), new Predicate<String>() {\n+\n                     @Override\n                     public boolean evaluate(final String object) {\n-                        return !(\"__NAME__\".equals(object) || \"__ENABLE__\".equals(object) \n+                        return !(\"__NAME__\".equals(object) || \"__ENABLE__\".equals(object)\n                                 || \"__PASSWORD__\".equals(object));\n                     }\n                 }));"},{"sha":"fe965c041958707680bb9e5936696a121167584d","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypePanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -171,8 +171,8 @@ public String getCssClass() {\n                             String css = super.getCssClass();\n                             if (\"key\".equals(field)) {\n                                 css = StringUtils.isBlank(css)\n-                                        ? \"medium_fixedsize\"\n-                                        : css + \" medium_fixedsize\";\n+                                        ? \"col-xs-1\"\n+                                        : css + \" col-xs-1\";\n                             }\n                             return css;\n                         }"},{"sha":"c7d2fccff6e0b3c983b5b3ce6760cc8e736c478b","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SecurityQuestionsPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -139,8 +139,8 @@ public String getCssClass() {\n                             String css = super.getCssClass();\n                             if (\"key\".equals(fieldName)) {\n                                 css = StringUtils.isBlank(css)\n-                                        ? \"medium_fixedsize\"\n-                                        : css + \" medium_fixedsize\";\n+                                        ? \"col-xs-1\"\n+                                        : css + \" col-xs-1\";\n                             }\n                             return css;\n                         }"},{"sha":"a57127ec2d587a432c20b6b82089047b4fa7d24b","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -165,7 +165,7 @@ protected List<Pair<Long, String>> load() {\n \n                 switch (field.getModel().getObject().getType()) {\n                     case ATTRIBUTE:\n-                        final List<String> names = new ArrayList<String>(dnames.getObject());\n+                        final List<String> names = new ArrayList<>(dnames.getObject());\n                         if (anames != null && anames.getObject() != null && !anames.getObject().isEmpty()) {\n                             names.addAll(anames.getObject());\n                         }\n@@ -293,7 +293,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             operatorContainer.add(searchButtonFragment);\n         }\n \n-        final AjaxDropDownChoicePanel<Pair<Long, String>> property = new AjaxDropDownChoicePanel<Pair<Long, String>>(\n+        final AjaxDropDownChoicePanel<Pair<Long, String>> property = new AjaxDropDownChoicePanel<>(\n                 \"property\", \"property\", new PropertyModel<Pair<Long, String>>(searchClause, \"property\") {\n \n             private static final long serialVersionUID = -8430020195995502040L;"},{"sha":"801723879bd0d2910ebec1c93ca0a2b8bcd8500e","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -147,8 +147,7 @@ protected enum SupportedOperation {\n     }\n \n     public Topology() {\n-\n-        modal = new BaseModal<Serializable>(\"resource-modal\");\n+        modal = new BaseModal<>(\"resource-modal\");\n         body.add(modal.size(Modal.Size.Large));\n         modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n \n@@ -594,7 +593,7 @@ public void onEvent(final IEvent<?> event) {\n \n     private static class WebMarkupContainerNoVeil extends WebMarkupContainer implements IAjaxIndicatorAware {\n \n-        private static final long serialVersionUID = 1L;\n+        private static final long serialVersionUID = 6883930486048460708L;\n \n         WebMarkupContainerNoVeil(final String id) {\n             super(id);"},{"sha":"e8b1edc163846f2a81c97a0c485ffe60d8b5a09a","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java","status":"modified","additions":8,"deletions":13,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -25,8 +25,7 @@\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n import org.apache.syncope.client.console.rest.ResourceRestClient;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n@@ -42,10 +41,12 @@\n \n public class TopologyWebSocketBehavior extends WebSocketBehavior {\n \n-    protected static final Logger LOG = LoggerFactory.getLogger(TopologyWebSocketBehavior.class);\n-\n     private static final long serialVersionUID = -1653665542635275551L;\n \n+    private static final Logger LOG = LoggerFactory.getLogger(TopologyWebSocketBehavior.class);\n+\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n     private final Map<String, String> resources = new HashMap<>();\n \n     private final Set<String> runningResCheck = new HashSet<>();\n@@ -61,10 +62,7 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {\n     @Override\n     protected void onMessage(final WebSocketRequestHandler handler, final TextMessage message) {\n         try {\n-            final ObjectMapper mapper = new ObjectMapper();\n-            final JsonNode obj = mapper.readTree(message.getText());\n-\n-            final ExecutorService executorService = Executors.newFixedThreadPool(1);\n+            JsonNode obj = OBJECT_MAPPER.readTree(message.getText());\n \n             switch (Topology.SupportedOperation.valueOf(obj.get(\"kind\").asText())) {\n                 case CHECK_CONNECTOR:\n@@ -85,7 +83,7 @@ protected void onMessage(final WebSocketRequestHandler handler, final TextMessag\n                         }\n                     }\n \n-                    executorService.execute(new ConnCheck(ckey));\n+                    SyncopeConsoleSession.get().execute(new ConnCheck(ckey));\n \n                     break;\n                 case CHECK_RESOURCE:\n@@ -106,7 +104,7 @@ protected void onMessage(final WebSocketRequestHandler handler, final TextMessag\n                         }\n                     }\n \n-                    executorService.execute(new ResCheck(rkey));\n+                    SyncopeConsoleSession.get().execute(new ResCheck(rkey));\n \n                     break;\n                 case ADD_ENDPOINT:\n@@ -117,9 +115,6 @@ protected void onMessage(final WebSocketRequestHandler handler, final TextMessag\n                     break;\n                 default:\n             }\n-\n-            executorService.shutdown();\n-\n         } catch (IOException e) {\n             LOG.error(\"Eror managing websocket message\", e);\n         }"},{"sha":"b2864864303ca8c3bbeea14c75e7193027f7ebf7","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/ajax/IndicatorAjaxEventBehavior.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2FIndicatorAjaxEventBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2FIndicatorAjaxEventBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2FIndicatorAjaxEventBehavior.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wicket.ajax;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.wicket.ajax.AjaxEventBehavior;\n+import org.apache.wicket.ajax.IAjaxIndicatorAware;\n+\n+/**\n+ * An {@link AjaxEventBehavior} not showin veil.\n+ */\n+public abstract class IndicatorAjaxEventBehavior extends AjaxEventBehavior implements IAjaxIndicatorAware {\n+\n+    private static final long serialVersionUID = 8531694702059356303L;\n+\n+    public IndicatorAjaxEventBehavior(final String event) {\n+        super(event);\n+    }\n+\n+    @Override\n+    public String getAjaxIndicatorMarkupId() {\n+        return StringUtils.EMPTY;\n+    }\n+}"},{"sha":"5efc5a90fbf8fceb917e0cf7f82381cf03e6f4ea","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/ajax/IndicatorAjaxTimerBehavior.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2FIndicatorAjaxTimerBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2FIndicatorAjaxTimerBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2FIndicatorAjaxTimerBehavior.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wicket.ajax;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.wicket.ajax.AbstractAjaxTimerBehavior;\n+import org.apache.wicket.ajax.IAjaxIndicatorAware;\n+import org.apache.wicket.util.time.Duration;\n+\n+/**\n+ * An {@link AbstractAjaxTimerBehavior} not showin veil.\n+ */\n+public abstract class IndicatorAjaxTimerBehavior extends AbstractAjaxTimerBehavior implements IAjaxIndicatorAware {\n+\n+    private static final long serialVersionUID = 8863750325559215077L;\n+\n+    public IndicatorAjaxTimerBehavior(final Duration updateInterval) {\n+        super(updateInterval);\n+    }\n+\n+    @Override\n+    public String getAjaxIndicatorMarkupId() {\n+        return StringUtils.EMPTY;\n+    }\n+}"},{"sha":"8177818ca752e20e9312153ee1fde99fdd248bb8","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/ajax/form/IndicatorAjaxFormChoiceComponentUpdatingBehavior.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fform%2FIndicatorAjaxFormChoiceComponentUpdatingBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fform%2FIndicatorAjaxFormChoiceComponentUpdatingBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fform%2FIndicatorAjaxFormChoiceComponentUpdatingBehavior.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -22,6 +22,9 @@\n import org.apache.wicket.ajax.IAjaxIndicatorAware;\n import org.apache.wicket.ajax.form.AjaxFormChoiceComponentUpdatingBehavior;\n \n+/**\n+ * An {@link AjaxFormChoiceComponentUpdatingBehavior} not showin veil.\n+ */\n public abstract class IndicatorAjaxFormChoiceComponentUpdatingBehavior\n         extends AjaxFormChoiceComponentUpdatingBehavior implements IAjaxIndicatorAware {\n "},{"sha":"d67fc089a20e5dabb6bac1d0d2cd8cfe1d13b02e","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/AnyByRealmWidget.java","status":"modified","additions":65,"deletions":1,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FAnyByRealmWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FAnyByRealmWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FAnyByRealmWidget.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -35,6 +35,20 @@ public class AnyByRealmWidget extends AbstractWidget {\n \n     private static final int MAX_REALMS = 9;\n \n+    private Map<String, Integer> usersByRealm;\n+\n+    private Map<String, Integer> groupsByRealm;\n+\n+    private String anyType1;\n+\n+    private Map<String, Integer> any1ByRealm;\n+\n+    private String anyType2;\n+\n+    private Map<String, Integer> any2ByRealm;\n+\n+    private final BarChartPanel chart;\n+\n     public AnyByRealmWidget(\n             final String id,\n             final Map<String, Integer> usersByRealm,\n@@ -45,6 +59,27 @@ public AnyByRealmWidget(\n             final Map<String, Integer> any2ByRealm) {\n \n         super(id);\n+        this.usersByRealm = usersByRealm;\n+        this.groupsByRealm = groupsByRealm;\n+        this.anyType1 = anyType1;\n+        this.any1ByRealm = any1ByRealm;\n+        this.anyType2 = anyType2;\n+        this.any2ByRealm = any2ByRealm;\n+        setOutputMarkupId(true);\n+\n+        chart = new BarChartPanel(\n+                \"chart\",\n+                Model.of(build(usersByRealm, groupsByRealm, anyType1, any1ByRealm, anyType2, any2ByRealm)));\n+        add(chart);\n+    }\n+\n+    private Bar build(\n+            final Map<String, Integer> usersByRealm,\n+            final Map<String, Integer> groupsByRealm,\n+            final String anyType1,\n+            final Map<String, Integer> any1ByRealm,\n+            final String anyType2,\n+            final Map<String, Integer> any2ByRealm) {\n \n         List<String> labels = new ArrayList<>();\n \n@@ -106,7 +141,36 @@ public AnyByRealmWidget(\n         }\n         bar.getData().setDatasets(datasets);\n \n-        add(new BarChartPanel(\"chart\", Model.of(bar)));\n+        return bar;\n     }\n \n+    public boolean refresh(\n+            final Map<String, Integer> usersByRealm,\n+            final Map<String, Integer> groupsByRealm,\n+            final String anyType1,\n+            final Map<String, Integer> any1ByRealm,\n+            final String anyType2,\n+            final Map<String, Integer> any2ByRealm) {\n+\n+        if (!this.usersByRealm.equals(usersByRealm)\n+                || !this.groupsByRealm.equals(groupsByRealm)\n+                || (!(this.anyType1 == null && anyType1 == null) && !this.anyType1.equals(anyType1))\n+                || !this.any1ByRealm.equals(any1ByRealm)\n+                || (!(this.anyType2 == null && anyType2 == null) && !this.anyType2.equals(anyType2))\n+                || !this.any2ByRealm.equals(any2ByRealm)) {\n+\n+            this.usersByRealm = usersByRealm;\n+            this.groupsByRealm = groupsByRealm;\n+            this.anyType1 = anyType1;\n+            this.any1ByRealm = any1ByRealm;\n+            this.anyType2 = anyType2;\n+            this.any2ByRealm = any2ByRealm;\n+\n+            chart.setDefaultModelObject(\n+                    build(usersByRealm, groupsByRealm, anyType1, any1ByRealm, anyType2, any2ByRealm));\n+\n+            return true;\n+        }\n+        return false;\n+    }\n }"},{"sha":"a14563214fe93ca5348be0abd1bcaa1c5fb21da4","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/CompletenessWidget.java","status":"modified","additions":100,"deletions":52,"changes":152,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCompletenessWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCompletenessWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCompletenessWidget.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -21,6 +21,7 @@\n import com.pingunaut.wicket.chartjs.chart.impl.Doughnut;\n import com.pingunaut.wicket.chartjs.core.panel.DoughnutChartPanel;\n import java.util.Map;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.pages.Notifications;\n import org.apache.syncope.client.console.pages.Policies;\n@@ -41,9 +42,85 @@ public class CompletenessWidget extends AbstractWidget {\n \n     private static final long serialVersionUID = 7667120094526529934L;\n \n+    private Map<NumbersInfo.ConfItem, Boolean> confCompleteness;\n+\n+    private final DoughnutChartPanel chart;\n+\n+    private final WebMarkupContainer actions;\n+\n+    private final BookmarkablePageLink<Page> topology;\n+\n+    private final BookmarkablePageLink<Page> policies;\n+\n+    private final BookmarkablePageLink<Page> notifications;\n+\n+    private final BookmarkablePageLink<Page> types;\n+\n+    private final BookmarkablePageLink<Page> securityquestions;\n+\n+    private final BookmarkablePageLink<Page> roles;\n+\n     public CompletenessWidget(final String id, final Map<NumbersInfo.ConfItem, Boolean> confCompleteness) {\n         super(id);\n+        this.confCompleteness = confCompleteness;\n+        setOutputMarkupId(true);\n+\n+        Pair<Doughnut, Integer> built = build(confCompleteness);\n+\n+        chart = new DoughnutChartPanel(\"chart\", Model.of(built.getLeft()));\n+        add(chart);\n+\n+        actions = new WebMarkupContainer(\"actions\");\n+        actions.setOutputMarkupPlaceholderTag(true);\n+        actions.setVisible(built.getRight() > 0);\n+\n+        add(actions);\n \n+        topology = BookmarkablePageLinkBuilder.build(\"topology\", Topology.class);\n+        topology.setOutputMarkupPlaceholderTag(true);\n+        actions.add(topology);\n+        MetaDataRoleAuthorizationStrategy.authorize(topology, WebPage.ENABLE,\n+                String.format(\"%s,%s\", StandardEntitlement.CONNECTOR_LIST, StandardEntitlement.RESOURCE_LIST));\n+        topology.setVisible(\n+                !confCompleteness.get(NumbersInfo.ConfItem.RESOURCE)\n+                || !confCompleteness.get(NumbersInfo.ConfItem.SYNC_TASK));\n+\n+        policies = BookmarkablePageLinkBuilder.build(\"policies\", Policies.class);\n+        policies.setOutputMarkupPlaceholderTag(true);\n+        MetaDataRoleAuthorizationStrategy.authorize(policies, WebPage.ENABLE, StandardEntitlement.POLICY_LIST);\n+        actions.add(policies);\n+        policies.setVisible(\n+                !confCompleteness.get(NumbersInfo.ConfItem.ACCOUNT_POLICY)\n+                || !confCompleteness.get(NumbersInfo.ConfItem.PASSWORD_POLICY));\n+\n+        notifications = BookmarkablePageLinkBuilder.build(\"notifications\", Notifications.class);\n+        notifications.setOutputMarkupPlaceholderTag(true);\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                notifications, WebPage.ENABLE, StandardEntitlement.NOTIFICATION_LIST);\n+        actions.add(notifications);\n+        notifications.setVisible(!confCompleteness.get(NumbersInfo.ConfItem.NOTIFICATION));\n+\n+        types = BookmarkablePageLinkBuilder.build(\"types\", Types.class);\n+        types.setOutputMarkupPlaceholderTag(true);\n+        MetaDataRoleAuthorizationStrategy.authorize(types, WebPage.ENABLE, StandardEntitlement.SCHEMA_LIST);\n+        actions.add(types);\n+        types.setVisible(\n+                !confCompleteness.get(NumbersInfo.ConfItem.VIR_SCHEMA)\n+                || !confCompleteness.get(NumbersInfo.ConfItem.ANY_TYPE));\n+\n+        securityquestions = BookmarkablePageLinkBuilder.build(\"securityquestions\", SecurityQuestions.class);\n+        securityquestions.setOutputMarkupPlaceholderTag(true);\n+        actions.add(securityquestions);\n+        securityquestions.setVisible(!confCompleteness.get(NumbersInfo.ConfItem.SECURITY_QUESTION));\n+\n+        roles = BookmarkablePageLinkBuilder.build(\"roles\", Roles.class);\n+        roles.setOutputMarkupPlaceholderTag(true);\n+        MetaDataRoleAuthorizationStrategy.authorize(roles, WebPage.ENABLE, StandardEntitlement.ROLE_LIST);\n+        actions.add(roles);\n+        roles.setVisible(!confCompleteness.get(NumbersInfo.ConfItem.ROLE));\n+    }\n+\n+    private Pair<Doughnut, Integer> build(final Map<NumbersInfo.ConfItem, Boolean> confCompleteness) {\n         Doughnut doughnut = new Doughnut();\n         doughnut.getOptions().setResponsive(true);\n         doughnut.getOptions().setMaintainAspectRatio(true);\n@@ -64,68 +141,39 @@ public CompletenessWidget(final String id, final Map<NumbersInfo.ConfItem, Boole\n         doughnut.getData().add(\n                 new LabeledDoughnutChartData(100 - done, \"red\", getString(\"todo\") + \": \" + todo));\n \n-        add(new DoughnutChartPanel(\"chart\", Model.of(doughnut)));\n+        return Pair.of(doughnut, todo);\n+    }\n \n-        WebMarkupContainer actions = new WebMarkupContainer(\"actions\");\n-        actions.setOutputMarkupPlaceholderTag(true);\n-        if (todo == 0) {\n-            actions.setVisible(false);\n-        }\n-        add(actions);\n+    public boolean refresh(final Map<NumbersInfo.ConfItem, Boolean> confCompleteness) {\n+        if (!this.confCompleteness.equals(confCompleteness)) {\n+            this.confCompleteness = confCompleteness;\n \n-        BookmarkablePageLink<Page> link = BookmarkablePageLinkBuilder.build(\"topology\", Topology.class);\n-        link.setOutputMarkupPlaceholderTag(true);\n-        actions.add(link);\n-        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.ENABLE,\n-                String.format(\"%s,%s\", StandardEntitlement.CONNECTOR_LIST, StandardEntitlement.RESOURCE_LIST));\n-        if (confCompleteness.get(NumbersInfo.ConfItem.RESOURCE)\n-                || confCompleteness.get(NumbersInfo.ConfItem.SYNC_TASK)) {\n+            Pair<Doughnut, Integer> built = build(confCompleteness);\n \n-            link.setVisible(false);\n-        }\n+            chart.setDefaultModelObject(built.getLeft());\n \n-        link = BookmarkablePageLinkBuilder.build(\"policies\", Policies.class);\n-        link.setOutputMarkupPlaceholderTag(true);\n-        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.ENABLE, StandardEntitlement.POLICY_LIST);\n-        actions.add(link);\n-        if (confCompleteness.get(NumbersInfo.ConfItem.ACCOUNT_POLICY)\n-                || confCompleteness.get(NumbersInfo.ConfItem.PASSWORD_POLICY)) {\n+            actions.setVisible(built.getRight() > 0);\n \n-            link.setVisible(false);\n-        }\n+            topology.setVisible(\n+                    !confCompleteness.get(NumbersInfo.ConfItem.RESOURCE)\n+                    || !confCompleteness.get(NumbersInfo.ConfItem.SYNC_TASK));\n \n-        link = BookmarkablePageLinkBuilder.build(\"notifications\", Notifications.class);\n-        link.setOutputMarkupPlaceholderTag(true);\n-        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.ENABLE, StandardEntitlement.NOTIFICATION_LIST);\n-        actions.add(link);\n-        if (confCompleteness.get(NumbersInfo.ConfItem.NOTIFICATION)) {\n-            link.setVisible(false);\n-        }\n+            policies.setVisible(\n+                    !confCompleteness.get(NumbersInfo.ConfItem.ACCOUNT_POLICY)\n+                    || !confCompleteness.get(NumbersInfo.ConfItem.PASSWORD_POLICY));\n \n-        link = BookmarkablePageLinkBuilder.build(\"types\", Types.class);\n-        link.setOutputMarkupPlaceholderTag(true);\n-        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.ENABLE, StandardEntitlement.SCHEMA_LIST);\n-        actions.add(link);\n-        if (confCompleteness.get(NumbersInfo.ConfItem.VIR_SCHEMA)\n-                || confCompleteness.get(NumbersInfo.ConfItem.ANY_TYPE)) {\n+            notifications.setVisible(!confCompleteness.get(NumbersInfo.ConfItem.NOTIFICATION));\n \n-            link.setVisible(false);\n-        }\n+            types.setVisible(\n+                    !confCompleteness.get(NumbersInfo.ConfItem.VIR_SCHEMA)\n+                    || !confCompleteness.get(NumbersInfo.ConfItem.ANY_TYPE));\n \n-        link = BookmarkablePageLinkBuilder.build(\"securityquestions\", SecurityQuestions.class);\n-        link.setOutputMarkupPlaceholderTag(true);\n-        actions.add(link);\n-        if (confCompleteness.get(NumbersInfo.ConfItem.SECURITY_QUESTION)) {\n-            link.setVisible(false);\n-        }\n+            securityquestions.setVisible(!confCompleteness.get(NumbersInfo.ConfItem.SECURITY_QUESTION));\n+\n+            roles.setVisible(!confCompleteness.get(NumbersInfo.ConfItem.ROLE));\n \n-        link = BookmarkablePageLinkBuilder.build(\"roles\", Roles.class);\n-        link.setOutputMarkupPlaceholderTag(true);\n-        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.ENABLE, StandardEntitlement.ROLE_LIST);\n-        actions.add(link);\n-        if (confCompleteness.get(NumbersInfo.ConfItem.ROLE)) {\n-            link.setVisible(false);\n+            return true;\n         }\n+        return false;\n     }\n-\n }"},{"sha":"bd55689e1a5f3967b8d93d7a7a34dcaea6d19180","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/JobActionPanel.java","status":"added","additions":139,"deletions":0,"changes":139,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.widgets;\n+\n+import java.io.Serializable;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.common.lib.to.JobTO;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.rest.api.service.NotificationService;\n+import org.apache.syncope.common.rest.api.service.ReportService;\n+import org.apache.syncope.common.rest.api.service.TaskService;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.markup.html.panel.Fragment;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JobActionPanel extends Panel {\n+\n+    private static final long serialVersionUID = 6645135178773151224L;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(JobActionPanel.class);\n+\n+    public JobActionPanel(final String id, final JobTO jobTO, final JobWidget widget) {\n+        super(id);\n+        setOutputMarkupId(true);\n+\n+        Fragment controls;\n+        if (jobTO.isRunning()) {\n+            controls = new Fragment(\"controls\", \"runningFragment\", this);\n+            controls.add(new AjaxLink<Void>(\"stop\") {\n+\n+                private static final long serialVersionUID = -7978723352517770644L;\n+\n+                @Override\n+                public void onClick(final AjaxRequestTarget target) {\n+                    try {\n+                        switch (jobTO.getType()) {\n+                            case NOTIFICATION:\n+                                SyncopeConsoleSession.get().getService(NotificationService.class).\n+                                        actionJob(JobAction.STOP);\n+                                break;\n+\n+                            case REPORT:\n+                                SyncopeConsoleSession.get().getService(ReportService.class).\n+                                        actionJob(jobTO.getRefKey(), JobAction.STOP);\n+                                break;\n+\n+                            case TASK:\n+                                SyncopeConsoleSession.get().getService(TaskService.class).\n+                                        actionJob(jobTO.getRefKey(), JobAction.STOP);\n+                                break;\n+\n+                            default:\n+                        }\n+                        info(getString(Constants.OPERATION_SUCCEEDED));\n+                        send(widget, Broadcast.EXACT, new JobActionPayload(target));\n+                    } catch (Exception e) {\n+                        LOG.error(\"While stopping {}\", jobTO.getRefDesc(), e);\n+                        error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                    }\n+                    SyncopeConsoleSession.get().getNotificationPanel().refresh(target);\n+                }\n+            });\n+        } else {\n+            controls = new Fragment(\"controls\", \"notRunningFragment\", this);\n+            controls.add(new AjaxLink<Void>(\"start\") {\n+\n+                private static final long serialVersionUID = -7978723352517770644L;\n+\n+                @Override\n+                public void onClick(final AjaxRequestTarget target) {\n+                    try {\n+                        switch (jobTO.getType()) {\n+                            case NOTIFICATION:\n+                                SyncopeConsoleSession.get().getService(NotificationService.class).\n+                                        actionJob(JobAction.START);\n+                                break;\n+\n+                            case REPORT:\n+                                SyncopeConsoleSession.get().getService(ReportService.class).\n+                                        actionJob(jobTO.getRefKey(), JobAction.START);\n+                                break;\n+\n+                            case TASK:\n+                                SyncopeConsoleSession.get().getService(TaskService.class).\n+                                        actionJob(jobTO.getRefKey(), JobAction.START);\n+                                break;\n+\n+                            default:\n+                        }\n+                        info(getString(Constants.OPERATION_SUCCEEDED));\n+                        send(widget, Broadcast.EXACT, new JobActionPayload(target));\n+                    } catch (Exception e) {\n+                        LOG.error(\"While stopping {}\", jobTO.getRefDesc(), e);\n+                        error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                    }\n+                    SyncopeConsoleSession.get().getNotificationPanel().refresh(target);\n+                }\n+            });\n+        }\n+        add(controls);\n+    }\n+\n+    public static class JobActionPayload implements Serializable {\n+\n+        private static final long serialVersionUID = -6798174303329212126L;\n+\n+        private final AjaxRequestTarget target;\n+\n+        public JobActionPayload(final AjaxRequestTarget target) {\n+            this.target = target;\n+        }\n+\n+        public AjaxRequestTarget getTarget() {\n+            return target;\n+        }\n+\n+    }\n+}"},{"sha":"b04718885c4f8d07078903477132abc80bc0f441","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"modified","additions":216,"deletions":26,"changes":242,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -18,79 +18,184 @@\n  */\n package org.apache.syncope.client.console.widgets;\n \n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.concurrent.TimeUnit;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.SearchableDataProvider;\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.client.console.panels.AbstractSearchResultPanel;\n import org.apache.syncope.client.console.rest.BaseRestClient;\n+import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxEventBehavior;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.apache.syncope.common.rest.api.service.TaskService;\n+import org.apache.wicket.Application;\n import org.apache.wicket.PageReference;\n+import org.apache.wicket.ThreadContext;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.markup.repeater.Item;\n import org.apache.wicket.model.CompoundPropertyModel;\n import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.protocol.ws.WebSocketSettings;\n+import org.apache.wicket.protocol.ws.api.WebSocketBehavior;\n+import org.apache.wicket.protocol.ws.api.WebSocketPushBroadcaster;\n+import org.apache.wicket.protocol.ws.api.event.WebSocketPushPayload;\n+import org.apache.wicket.protocol.ws.api.message.ConnectedMessage;\n+import org.apache.wicket.protocol.ws.api.message.IWebSocketPushMessage;\n+import org.apache.wicket.protocol.ws.api.registry.IKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class JobWidget extends AbstractWidget {\n \n     private static final long serialVersionUID = 7667120094526529934L;\n \n+    private static final Logger LOG = LoggerFactory.getLogger(JobWidget.class);\n+\n     private static final int ROWS = 5;\n \n+    private static List<JobTO> getAvailable(final SyncopeConsoleSession session) {\n+        List<JobTO> available = new ArrayList<>();\n+        available.add(session.getService(NotificationService.class).getJob());\n+        available.addAll(session.getService(TaskService.class).listJobs());\n+        available.addAll(session.getService(ReportService.class).listJobs());\n+\n+        return available;\n+    }\n+\n+    private static List<ExecTO> getRecent(final SyncopeConsoleSession session) {\n+        List<ExecTO> recent = new ArrayList<>();\n+        recent.addAll(session.getService(ReportService.class).listRecentExecutions(10));\n+        recent.addAll(session.getService(TaskService.class).listRecentExecutions(10));\n+\n+        return recent;\n+    }\n+\n     private final List<JobTO> available;\n \n+    private final AvailableJobsPanel availableJobsPanel;\n+\n     private final List<ExecTO> recent;\n \n+    private final RecentExecPanel recentExecPanel;\n+\n+    private boolean refresh = true;\n+\n+    private boolean pendingRefresh = false;\n+\n     public JobWidget(final String id, final PageReference pageRef) {\n         super(id);\n \n-        JobTO notificationJob = SyncopeConsoleSession.get().getService(NotificationService.class).getJob();\n+        setOutputMarkupId(true);\n+\n+        available = getAvailable(SyncopeConsoleSession.get());\n+        availableJobsPanel = new AvailableJobsPanel(\"available\", pageRef);\n+        availableJobsPanel.setOutputMarkupId(true);\n+        add(availableJobsPanel);\n+\n+        recent = getRecent(SyncopeConsoleSession.get());\n+        recentExecPanel = new RecentExecPanel(\"recent\", pageRef);\n+        recentExecPanel.setOutputMarkupId(true);\n+        add(recentExecPanel);\n \n-        List<JobTO> taskJobs = SyncopeConsoleSession.get().getService(TaskService.class).listJobs(10);\n+        add(new WebSocketBehavior() {\n \n-        List<JobTO> reportJobs = SyncopeConsoleSession.get().getService(ReportService.class).listJobs(10);\n+            private static final long serialVersionUID = 7944352891541344021L;\n \n-        available = new ArrayList<>();\n-        available.add(notificationJob);\n-        available.addAll(taskJobs);\n-        available.addAll(reportJobs);\n+            @Override\n+            protected void onConnect(final ConnectedMessage message) {\n+                super.onConnect(message);\n+                SyncopeConsoleSession.get().scheduleAtFixedRate(new JobInfoUpdater(message), 0, 10, TimeUnit.SECONDS);\n+            }\n+        });\n \n-        add(new AvailableJobsPanel(\"available\", pageRef));\n+        add(new IndicatorAjaxEventBehavior(Constants.ON_MOUSE_ENTER) {\n \n-        List<ExecTO> reportExecs = SyncopeConsoleSession.get().\n-                getService(ReportService.class).listRecentExecutions(10);\n+            private static final long serialVersionUID = -7133385027739964990L;\n \n-        List<ExecTO> taskExecs = SyncopeConsoleSession.get().\n-                getService(TaskService.class).listRecentExecutions(10);\n+            @Override\n+            protected void onEvent(final AjaxRequestTarget target) {\n+                refresh = false;\n+                LOG.debug(\"Refresh disabled\");\n+            }\n+        });\n+        add(new IndicatorAjaxEventBehavior(Constants.ON_MOUSE_LEAVE) {\n \n-        recent = new ArrayList<>();\n-        recent.addAll(reportExecs);\n-        recent.addAll(taskExecs);\n+            private static final long serialVersionUID = -7133385027739964990L;\n \n-        add(new RecentExecPanel(\"recent\", pageRef));\n+            @Override\n+            protected void onEvent(final AjaxRequestTarget target) {\n+                refresh = true;\n+                LOG.debug(\"Refresh enabled\");\n+\n+                if (pendingRefresh) {\n+                    LOG.debug(\"Refresh pending\");\n+\n+                    target.add(availableJobsPanel);\n+                    pendingRefresh = false;\n+                }\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        if (event.getPayload() instanceof WebSocketPushPayload) {\n+            WebSocketPushPayload wsEvent = (WebSocketPushPayload) event.getPayload();\n+            if (wsEvent.getMessage() instanceof JobWidgetMessage) {\n+                available.clear();\n+                available.addAll(((JobWidgetMessage) wsEvent.getMessage()).getUpdatedAvailable());\n+\n+                recent.clear();\n+                recent.addAll(((JobWidgetMessage) wsEvent.getMessage()).getUpdatedRecent());\n+\n+                if (refresh) {\n+                    availableJobsPanel.modelChanged();\n+                    wsEvent.getHandler().add(availableJobsPanel);\n+                    recentExecPanel.modelChanged();\n+                    wsEvent.getHandler().add(recentExecPanel);\n+                } else {\n+                    pendingRefresh = true;\n+                }\n+            }\n+        } else if (event.getPayload() instanceof JobActionPanel.JobActionPayload) {\n+            available.clear();\n+            available.addAll(getAvailable(SyncopeConsoleSession.get()));\n+            availableJobsPanel.modelChanged();\n+            JobActionPanel.JobActionPayload.class.cast(event.getPayload()).getTarget().add(availableJobsPanel);\n+        }\n     }\n \n-    protected class AvailableJobsPanel extends AbstractSearchResultPanel<\n+    private class AvailableJobsPanel extends AbstractSearchResultPanel<\n         JobTO, JobTO, AvailableJobsProvider, BaseRestClient> {\n \n         private static final long serialVersionUID = -8214546246301342868L;\n \n-        public AvailableJobsPanel(final String id, final PageReference pageRef) {\n+        AvailableJobsPanel(final String id, final PageReference pageRef) {\n             super(id, new Builder<JobTO, JobTO, BaseRestClient>(null, pageRef) {\n \n                 private static final long serialVersionUID = 8769126634538601689L;\n@@ -99,11 +204,10 @@ public AvailableJobsPanel(final String id, final PageReference pageRef) {\n                 protected WizardMgtPanel<JobTO> newInstance(final String id) {\n                     return new AvailableJobsPanel(id, pageRef);\n                 }\n-            }.disableCheckBoxes());\n+            }.disableCheckBoxes().hidePaginator());\n \n             rows = ROWS;\n             initResultTable();\n-            container.get(\"paginator\").setVisible(false);\n         }\n \n         @Override\n@@ -125,9 +229,33 @@ protected Collection<ActionLink.ActionType> getBulkActions() {\n         protected List<IColumn<JobTO, String>> getColumns() {\n             List<IColumn<JobTO, String>> columns = new ArrayList<>();\n \n-            columns.add(new PropertyColumn<JobTO, String>(new ResourceModel(\"reference\"), \"reference\", \"reference\"));\n+            columns.add(new PropertyColumn<JobTO, String>(new ResourceModel(\"refDesc\"), \"refDesc\", \"refDesc\"));\n+\n+            columns.add(new AbstractColumn<JobTO, String>(new Model<>(\"\"), \"running\") {\n+\n+                private static final long serialVersionUID = -4008579357070833846L;\n \n-            columns.add(new BooleanPropertyColumn<JobTO>(new ResourceModel(\"running\"), \"running\", \"running\"));\n+                @Override\n+                public void populateItem(\n+                        final Item<ICellPopulator<JobTO>> cellItem,\n+                        final String componentId,\n+                        final IModel<JobTO> rowModel) {\n+\n+                    JobTO jobTO = rowModel.getObject();\n+                    JobActionPanel panel = new JobActionPanel(componentId, jobTO, JobWidget.this);\n+                    MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.ENABLE,\n+                            String.format(\"%s,%s\",\n+                                    StandardEntitlement.TASK_EXECUTE,\n+                                    StandardEntitlement.REPORT_EXECUTE));\n+                    cellItem.add(panel);\n+                }\n+\n+                @Override\n+                public String getCssClass() {\n+                    return \"col-xs-1\";\n+                }\n+\n+            });\n \n             columns.add(new BooleanPropertyColumn<JobTO>(new ResourceModel(\"scheduled\"), \"scheduled\", \"scheduled\"));\n \n@@ -148,7 +276,7 @@ protected final class AvailableJobsProvider extends SearchableDataProvider<JobTO\n \n         private AvailableJobsProvider() {\n             super(ROWS);\n-            setSort(\"running\", SortOrder.DESCENDING);\n+            setSort(\"type\", SortOrder.ASCENDING);\n             comparator = new SortableDataProviderComparator<>(this);\n         }\n \n@@ -169,12 +297,12 @@ public IModel<JobTO> model(final JobTO object) {\n         }\n     }\n \n-    protected class RecentExecPanel extends AbstractSearchResultPanel<\n+    private class RecentExecPanel extends AbstractSearchResultPanel<\n         ExecTO, ExecTO, RecentExecProvider, BaseRestClient> {\n \n         private static final long serialVersionUID = -8214546246301342868L;\n \n-        public RecentExecPanel(final String id, final PageReference pageRef) {\n+        RecentExecPanel(final String id, final PageReference pageRef) {\n             super(id, new Builder<ExecTO, ExecTO, BaseRestClient>(null, pageRef) {\n \n                 private static final long serialVersionUID = 8769126634538601689L;\n@@ -208,7 +336,7 @@ protected Collection<ActionLink.ActionType> getBulkActions() {\n         protected List<IColumn<ExecTO, String>> getColumns() {\n             List<IColumn<ExecTO, String>> columns = new ArrayList<>();\n \n-            columns.add(new PropertyColumn<ExecTO, String>(new ResourceModel(\"reference\"), \"reference\", \"reference\"));\n+            columns.add(new PropertyColumn<ExecTO, String>(new ResourceModel(\"refDesc\"), \"refDesc\", \"refDesc\"));\n \n             columns.add(new DatePropertyColumn<ExecTO>(new ResourceModel(\"start\"), \"start\", \"start\"));\n \n@@ -250,4 +378,66 @@ public IModel<ExecTO> model(final ExecTO object) {\n         }\n     }\n \n+    protected final class JobInfoUpdater implements Runnable {\n+\n+        private final Application application;\n+\n+        private final SyncopeConsoleSession session;\n+\n+        private final IKey key;\n+\n+        public JobInfoUpdater(final ConnectedMessage message) {\n+            this.application = message.getApplication();\n+            this.session = SyncopeConsoleSession.get();\n+            this.key = message.getKey();\n+        }\n+\n+        @Override\n+        public void run() {\n+            try {\n+                ThreadContext.setApplication(application);\n+                ThreadContext.setSession(session);\n+\n+                List<JobTO> updatedAvailable = getAvailable(session);\n+                List<ExecTO> updatedRecent = getRecent(session);\n+                if (!updatedAvailable.equals(available) || !updatedRecent.equals(recent)) {\n+                    LOG.debug(\"Updated Job info found\");\n+\n+                    WebSocketSettings webSocketSettings = WebSocketSettings.Holder.get(application);\n+                    WebSocketPushBroadcaster broadcaster =\n+                            new WebSocketPushBroadcaster(webSocketSettings.getConnectionRegistry());\n+                    broadcaster.broadcast(\n+                            new ConnectedMessage(application, session.getId(), key),\n+                            new JobWidgetMessage(updatedAvailable, updatedRecent));\n+                }\n+            } catch (Throwable t) {\n+                LOG.error(\"Unexpected error while checking for updated Job info\", t);\n+            } finally {\n+                ThreadContext.detach();\n+            }\n+        }\n+    }\n+\n+    private static class JobWidgetMessage implements IWebSocketPushMessage, Serializable {\n+\n+        private static final long serialVersionUID = -824793424112532838L;\n+\n+        private final List<JobTO> updatedAvailable;\n+\n+        private final List<ExecTO> updatedRecent;\n+\n+        JobWidgetMessage(final List<JobTO> updatedAvailable, final List<ExecTO> updatedRecent) {\n+            this.updatedAvailable = updatedAvailable;\n+            this.updatedRecent = updatedRecent;\n+        }\n+\n+        public List<JobTO> getUpdatedAvailable() {\n+            return updatedAvailable;\n+        }\n+\n+        public List<ExecTO> getUpdatedRecent() {\n+            return updatedRecent;\n+        }\n+\n+    }\n }"},{"sha":"4a61bdf59fc54ab31528893fd795f97a1b1ca376","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/LoadWidget.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FLoadWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FLoadWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FLoadWidget.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -32,13 +32,21 @@ public class LoadWidget extends AbstractWidget {\n \n     private static final long serialVersionUID = -816175678514035085L;\n \n+    private final LineChartPanel chart;\n+\n     public LoadWidget(final String id, final SystemInfo systeminfo) {\n         super(id);\n+        setOutputMarkupId(true);\n \n         add(new Label(\"hostname\", systeminfo.getHostname()));\n         add(new Label(\"os\", systeminfo.getOs()));\n         add(new Label(\"jvm\", systeminfo.getJvm()));\n \n+        chart = new LineChartPanel(\"chart\", Model.of(build(systeminfo)));\n+        add(chart);\n+    }\n+\n+    private Line build(final SystemInfo systeminfo) {\n         List<String> labels = new ArrayList<>();\n \n         List<Double> cpuValues = new ArrayList<>();\n@@ -75,7 +83,10 @@ public LoadWidget(final String id, final SystemInfo systeminfo) {\n         datasets.add(memDataSet);\n         line.getData().setDatasets(datasets);\n \n-        add(new LineChartPanel(\"chart\", Model.of(line)));\n+        return line;\n     }\n \n+    public void refresh(final SystemInfo systeminfo) {\n+        chart.setDefaultModelObject(build(systeminfo));\n+    }\n }"},{"sha":"d0a66f04c6e56ebce2d8cb9841ab1926c6e4ce8e","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/NumberWidget.java","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -26,19 +26,35 @@ public class NumberWidget extends AbstractWidget {\n \n     private static final long serialVersionUID = -816175678514035085L;\n \n+    private int number;\n+\n+    private final Label numberLabel;\n+\n     public NumberWidget(final String id, final String bg, final int number, final String label, final String icon) {\n         super(id);\n+        this.number = number;\n+        setOutputMarkupId(true);\n \n         WebMarkupContainer box = new WebMarkupContainer(\"box\");\n         box.add(new AttributeAppender(\"class\", \" \" + bg));\n         add(box);\n \n-        box.add(new Label(\"number\", number));\n+        numberLabel = new Label(\"number\", number);\n+        numberLabel.setOutputMarkupId(true);\n+        box.add(numberLabel);\n         box.add(new Label(\"label\", label));\n \n         Label iconLabel = new Label(\"icon\");\n         iconLabel.add(new AttributeAppender(\"class\", icon));\n         box.add(iconLabel);\n     }\n \n+    public boolean refresh(final int number) {\n+        if (this.number != number) {\n+            this.number = number;\n+            numberLabel.setDefaultModelObject(number);\n+            return true;\n+        }\n+        return false;\n+    }\n }"},{"sha":"fc3800b70abf29214ec3e3ba13481174c19a521e","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/UsersByStatusWidget.java","status":"modified","additions":21,"deletions":1,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FUsersByStatusWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FUsersByStatusWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FUsersByStatusWidget.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -29,9 +29,20 @@ public class UsersByStatusWidget extends AbstractWidget {\n \n     private static final String[] COLORS = { \"green\", \"orange\", \"aqua\", \"red\", \"gray\" };\n \n+    private Map<String, Integer> usersByStatus;\n+\n+    private final DoughnutChartPanel chart;\n+\n     public UsersByStatusWidget(final String id, final Map<String, Integer> usersByStatus) {\n         super(id);\n+        this.usersByStatus = usersByStatus;\n+        setOutputMarkupId(true);\n+\n+        chart = new DoughnutChartPanel(\"chart\", Model.of(build(usersByStatus)));\n+        add(chart);\n+    }\n \n+    private Doughnut build(final Map<String, Integer> usersByStatus) {\n         Doughnut doughnut = new Doughnut();\n         doughnut.getOptions().setResponsive(true);\n         doughnut.getOptions().setMaintainAspectRatio(true);\n@@ -42,7 +53,16 @@ public UsersByStatusWidget(final String id, final Map<String, Integer> usersBySt\n             i++;\n         }\n \n-        add(new DoughnutChartPanel(\"chart\", Model.of(doughnut)));\n+        return doughnut;\n+    }\n+\n+    public boolean refresh(final Map<String, Integer> usersByStatus) {\n+        if (!this.usersByStatus.equals(usersByStatus)) {\n+            this.usersByStatus = usersByStatus;\n+            chart.setDefaultModelObject(build(usersByStatus));\n+            return true;\n+        }\n+        return false;\n     }\n \n }"},{"sha":"fd0f2744e4758c1d6a225fde94287e965d9f7ab8","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Dashboard.html","status":"modified","additions":21,"deletions":19,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDashboard.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDashboard.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDashboard.html?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -25,28 +25,30 @@ <h1>\n     </section>\n \n     <section class=\"content\">\n-      <div class=\"row\">\n-        <span wicket:id=\"totalUsers\"/>\n-        <span wicket:id=\"totalGroups\"/>\n-        <span wicket:id=\"totalAny1OrRoles\"/>\n-        <span wicket:id=\"totalAny1OrResources\"/>\n-      </div>\n-\n-      <div class=\"row\">\n-        <div class=\"col-md-4\">\n-          <span wicket:id=\"usersByStatus\"/>\n+      <div wicket:id=\"timer\">\n+        <div class=\"row\">\n+          <span wicket:id=\"totalUsers\"/>\n+          <span wicket:id=\"totalGroups\"/>\n+          <span wicket:id=\"totalAny1OrRoles\"/>\n+          <span wicket:id=\"totalAny2OrResources\"/>\n         </div>\n-        <div class=\"col-md-4\">\n-          <span wicket:id=\"completeness\"/>\n-        </div>\n-        <div class=\"col-md-4\">\n-          <span wicket:id=\"load\"/>\n+\n+        <div class=\"row\">\n+          <div class=\"col-md-4\">\n+            <span wicket:id=\"usersByStatus\"/>\n+          </div>\n+          <div class=\"col-md-4\">\n+            <span wicket:id=\"completeness\"/>\n+          </div>\n+          <div class=\"col-md-4\">\n+            <span wicket:id=\"load\"/>\n+          </div>\n         </div>\n-      </div>\n \n-      <div class=\"row\">\n-        <div class=\"col-md-6\">\n-          <span wicket:id=\"anyByRealm\"/>\n+        <div class=\"row\">\n+          <div class=\"col-md-6\">\n+            <span wicket:id=\"anyByRealm\"/>\n+          </div>\n         </div>\n       </div>\n "},{"sha":"51dedbdb6eda4a9cef701fe1923c12182146f6d0","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/JobActionPanel.html","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.html?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -0,0 +1,33 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"controls\" style=\"text-align: right;\"></div>\n+\n+    <wicket:fragment wicket:id=\"runningFragment\">\n+      <i class=\"fa fa-refresh fa-spin\"></i>\n+      &nbsp;\n+      <a href=\"#\" wicket:id=\"stop\" class=\"fa fa-stop-circle\"></a>\n+    </wicket:fragment>\n+\n+    <wicket:fragment wicket:id=\"notRunningFragment\">\n+      <a href=\"#\" wicket:id=\"start\" class=\"fa fa-play-circle\"></a>\n+    </wicket:fragment>\n+  </wicket:panel>\n+</html>\n\\ No newline at end of file"},{"sha":"bc19be26a682ac3f0063a507e407d5ddbc9b6308","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/JobWidget.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.html?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -18,7 +18,7 @@\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n-    <div class=\"nav-tabs-custom\" style=\"cursor: move;\">\n+    <div class=\"nav-tabs-custom\">\n       <ul class=\"nav nav-tabs pull-right ui-sortable-handle\">\n         <li class=\"active\"><a data-toggle=\"tab\" href=\"#running\">Available</a></li>\n         <li><a data-toggle=\"tab\" href=\"#recent\">Recent</a></li>"},{"sha":"35dbb2e4dbbda60ce24378ab27fc847512ff659f","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/JobWidget.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.properties?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -14,7 +14,7 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-reference=Reference\n+refDesc=Reference\n running=Running\n scheduled=Scheduled\n start=Start"},{"sha":"3738c3cbd9567b77e8ae9a460100c52b658d023c","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/JobWidget_it.properties","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget_it.properties?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -14,9 +14,9 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-reference=Reference\n-running=Running\n-scheduled=Scheduled\n-start=Start\n-message=Message\n-end=End\n+refDesc=Riferimento\n+running=In Esecuzione\n+scheduled=Programmato\n+start=Inizio\n+message=Messaggio\n+end=Fine"},{"sha":"02411aba331cc28caaea882a76723d49a8f6f897","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/JobWidget_pt_BR.properties","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget_pt_BR.properties?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -14,9 +14,9 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-reference=Reference\n-running=Running\n-scheduled=Scheduled\n-start=Start\n-message=Message\n-end=End\n+refDesc=Refer\\u00eancia\n+running=Correndo\n+scheduled=Programado\n+start=Come\\u00e7o\n+message=Mensagem\n+end=Final"},{"sha":"2ebe33cdeae19abd8485da9e006a27b283cec2ed","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ExecTO.java","status":"modified","additions":26,"deletions":5,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FExecTO.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -20,6 +20,7 @@\n \n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.types.JobType;\n \n @XmlRootElement(name = \"exec\")\n @XmlType()\n@@ -29,7 +30,11 @@ public class ExecTO extends AbstractStartEndBean implements EntityTO<Long> {\n \n     private Long key;\n \n-    private String reference;\n+    private JobType jobType;\n+\n+    private Long refKey;\n+\n+    private String refDesc;\n \n     private String status;\n \n@@ -45,12 +50,28 @@ public void setKey(final Long key) {\n         this.key = key;\n     }\n \n-    public String getReference() {\n-        return reference;\n+    public JobType getJobType() {\n+        return jobType;\n+    }\n+\n+    public void setJobType(final JobType jobType) {\n+        this.jobType = jobType;\n+    }\n+\n+    public Long getRefKey() {\n+        return refKey;\n+    }\n+\n+    public void setRefKey(final Long refKey) {\n+        this.refKey = refKey;\n+    }\n+\n+    public String getRefDesc() {\n+        return refDesc;\n     }\n \n-    public void setReference(final String reference) {\n-        this.reference = reference;\n+    public void setRefDesc(final String refDesc) {\n+        this.refDesc = refDesc;\n     }\n \n     public String getMessage() {"},{"sha":"02930a500074f48d87e0661478d465b0a430abc3","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/JobTO.java","status":"modified","additions":26,"deletions":5,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJobTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJobTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJobTO.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -22,14 +22,19 @@\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.JobType;\n \n @XmlRootElement(name = \"job\")\n @XmlType\n public class JobTO extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -7254450981751326711L;\n \n-    private String reference;\n+    private JobType type;\n+\n+    private Long refKey;\n+\n+    private String refDesc;\n \n     private boolean running;\n \n@@ -39,12 +44,28 @@ public class JobTO extends AbstractBaseBean {\n \n     private Date start;\n \n-    public String getReference() {\n-        return reference;\n+    public JobType getType() {\n+        return type;\n+    }\n+\n+    public void setType(final JobType type) {\n+        this.type = type;\n+    }\n+\n+    public Long getRefKey() {\n+        return refKey;\n+    }\n+\n+    public void setRefKey(final Long refKey) {\n+        this.refKey = refKey;\n+    }\n+\n+    public String getRefDesc() {\n+        return refDesc;\n     }\n \n-    public void setReference(final String reference) {\n-        this.reference = reference;\n+    public void setRefDesc(final String refDesc) {\n+        this.refDesc = refDesc;\n     }\n \n     public boolean isRunning() {"},{"sha":"b48084805300dcac28f5b9ffbdc34ea4d851bc1d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/JobType.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobType.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum JobType {\n+    NOTIFICATION,\n+    REPORT,\n+    TASK;\n+\n+}"},{"sha":"df8fab17ebcf1285ed0480068aee829dc0abf7e1","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -157,13 +157,12 @@ Response exportExecutionResult(\n     /**\n      * List report jobs (running and / or scheduled).\n      *\n-     * @param max the maximum number of jobs to return\n      * @return report jobs (running and / or scheduled)\n      */\n     @GET\n     @Path(\"jobs\")\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<JobTO> listJobs(@Min(1) @QueryParam(JAXRSService.PARAM_MAX) @DefaultValue(\"25\") int max);\n+    List<JobTO> listJobs();\n \n     /**\n      * Executes an action on an existing report's job."},{"sha":"4ad482c048ea35c96b7588af5fa52549d95f33b2","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -176,13 +176,12 @@ <T extends AbstractTaskTO> T read(\n     /**\n      * List task jobs (running and / or scheduled).\n      *\n-     * @param max the maximum number of jobs to return\n      * @return task jobs (running and / or scheduled)\n      */\n     @GET\n     @Path(\"jobs\")\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<JobTO> listJobs(@Min(1) @QueryParam(JAXRSService.PARAM_MAX) @DefaultValue(\"25\") int max);\n+    List<JobTO> listJobs();\n \n     /**\n      * Executes an action on an existing task's job."},{"sha":"2841c9d42dfc74179c9efbec55d6cec8bace3180","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractJobLogic.java","status":"modified","additions":9,"deletions":47,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -19,13 +19,12 @@\n package org.apache.syncope.core.logic;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Comparator;\n import java.util.List;\n-import org.apache.commons.collections4.ComparatorUtils;\n+import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.quartz.JobKey;\n import org.quartz.Scheduler;\n@@ -37,53 +36,15 @@\n \n abstract class AbstractJobLogic<T extends AbstractBaseBean> extends AbstractTransactionalLogic<T> {\n \n-    private static final Comparator<Boolean> BOOLEAN_COMPARATOR = ComparatorUtils.booleanComparator(true);\n-\n-    @SuppressWarnings(\"unchecked\")\n-    private static final Comparator<JobTO> CHAINED_COMPARATOR = ComparatorUtils.chainedComparator(\n-            new Comparator<JobTO>() {\n-\n-        @Override\n-        public int compare(final JobTO job1, final JobTO job2) {\n-            return BOOLEAN_COMPARATOR.compare(job1.isRunning(), job2.isRunning());\n-        }\n-    },\n-            new Comparator<JobTO>() {\n-\n-        @Override\n-        public int compare(final JobTO job1, final JobTO job2) {\n-            return BOOLEAN_COMPARATOR.compare(job1.isScheduled(), job2.isScheduled());\n-        }\n-    },\n-            new Comparator<JobTO>() {\n-\n-        @Override\n-        public int compare(final JobTO job1, final JobTO job2) {\n-            int result;\n-\n-            if (job1.getStart() == null && job2.getStart() == null) {\n-                result = 0;\n-            } else if (job1.getStart() == null) {\n-                result = -1;\n-            } else if (job2.getStart() == null) {\n-                result = 1;\n-            } else {\n-                result = job1.getStart().compareTo(job2.getStart());\n-            }\n-\n-            return result;\n-        }\n-    });\n-\n     @Autowired\n     protected JobManager jobManager;\n \n     @Autowired\n     protected SchedulerFactoryBean scheduler;\n \n-    protected abstract String getReference(final JobKey jobKey);\n+    protected abstract Triple<JobType, Long, String> getReference(final JobKey jobKey);\n \n-    protected List<JobTO> listJobs(final int max) {\n+    protected List<JobTO> listJobs() {\n         List<JobTO> jobTOs = new ArrayList<>();\n \n         try {\n@@ -92,11 +53,13 @@ protected List<JobTO> listJobs(final int max) {\n \n                 JobTO jobTO = new JobTO();\n \n-                String reference = getReference(jobKey);\n+                Triple<JobType, Long, String> reference = getReference(jobKey);\n                 if (reference != null) {\n                     jobTOs.add(jobTO);\n \n-                    jobTO.setReference(reference);\n+                    jobTO.setType(reference.getLeft());\n+                    jobTO.setRefKey(reference.getMiddle());\n+                    jobTO.setRefDesc(reference.getRight());\n \n                     List<? extends Trigger> jobTriggers = scheduler.getScheduler().getTriggersOfJob(jobKey);\n                     if (jobTriggers.isEmpty()) {\n@@ -114,8 +77,7 @@ protected List<JobTO> listJobs(final int max) {\n             LOG.debug(\"Problems while retrieving scheduled jobs\", e);\n         }\n \n-        Collections.sort(jobTOs, CHAINED_COMPARATOR);\n-        return jobTOs.size() > max ? jobTOs.subList(0, max) : jobTOs;\n+        return jobTOs;\n     }\n \n     protected void actionJob(final JobKey jobKey, final JobAction action) {"},{"sha":"79f2baa3e700a7a3080387aa5778f34e174bde71","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/NotificationLogic.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -24,9 +24,11 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.logic.notification.NotificationJob;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -105,12 +107,15 @@ public NotificationTO delete(final Long key) {\n     }\n \n     @Override\n-    protected String getReference(final JobKey jobKey) {\n-        return JobManager.NOTIFICATION_JOB.equals(jobKey) ? NotificationJob.class.getSimpleName() : null;\n+    protected Triple<JobType, Long, String> getReference(final JobKey jobKey) {\n+        return JobManager.NOTIFICATION_JOB.equals(jobKey)\n+                ? Triple.of(JobType.NOTIFICATION, 0L, NotificationJob.class.getSimpleName())\n+                : null;\n     }\n \n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_LIST + \"')\")\n     public JobTO getJob() {\n-        List<JobTO> jobs = super.listJobs(1);\n+        List<JobTO> jobs = super.listJobs();\n         return jobs.isEmpty() ? null : jobs.get(0);\n     }\n "},{"sha":"33f8e0e95ff777978f8ac84bcd23ae538c218481","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -38,6 +38,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n@@ -56,6 +57,7 @@\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.logic.report.XSLTTransformer;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n@@ -181,7 +183,9 @@ public ExecTO execute(final Long key, final Date startAt) {\n         }\n \n         ExecTO result = new ExecTO();\n-        result.setReference(binder.buildReference(report));\n+        result.setJobType(JobType.REPORT);\n+        result.setRefKey(report.getKey());\n+        result.setRefDesc(binder.buildRefDesc(report));\n         result.setStart(new Date());\n         result.setStatus(ReportExecStatus.STARTED.name());\n         result.setMessage(\"Job fired; waiting for results...\");\n@@ -337,17 +341,19 @@ public BulkActionResult deleteExecutions(\n     }\n \n     @Override\n-    protected String getReference(final JobKey jobKey) {\n+    protected Triple<JobType, Long, String> getReference(final JobKey jobKey) {\n         Long key = JobNamer.getReportKeyFromJobName(jobKey.getName());\n \n         Report report = reportDAO.find(key);\n-        return report == null ? null : binder.buildReference(report);\n+        return report == null\n+                ? null\n+                : Triple.of(JobType.REPORT, key, binder.buildRefDesc(report));\n     }\n \n     @Override\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_LIST + \"')\")\n-    public List<JobTO> listJobs(final int max) {\n-        return super.listJobs(max);\n+    public List<JobTO> listJobs() {\n+        return super.listJobs();\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_EXECUTE + \"')\")"},{"sha":"0bb270d89b0696499343cc8eef92c86ab8c73324","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -26,6 +26,7 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n@@ -35,6 +36,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -225,7 +227,9 @@ public ExecTO execute(final Long taskKey, final Date startAt, final boolean dryR\n                 }\n \n                 result = new ExecTO();\n-                result.setReference(binder.buildReference(task));\n+                result.setJobType(JobType.TASK);\n+                result.setRefKey(task.getKey());\n+                result.setRefDesc(binder.buildRefDesc(task));\n                 result.setStart(new Date());\n                 result.setStatus(\"JOB_FIRED\");\n                 result.setMessage(\"Job fired; waiting for results...\");\n@@ -331,17 +335,19 @@ public BulkActionResult deleteExecutions(\n     }\n \n     @Override\n-    protected String getReference(final JobKey jobKey) {\n+    protected Triple<JobType, Long, String> getReference(final JobKey jobKey) {\n         Long key = JobNamer.getTaskKeyFromJobName(jobKey.getName());\n \n         Task task = taskDAO.find(key);\n-        return task == null || !(task instanceof SchedTask) ? null : binder.buildReference(task);\n+        return task == null || !(task instanceof SchedTask)\n+                ? null\n+                : Triple.of(JobType.TASK, key, binder.buildRefDesc(task));\n     }\n \n     @Override\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n-    public List<JobTO> listJobs(final int max) {\n-        return super.listJobs(max);\n+    public List<JobTO> listJobs() {\n+        return super.listJobs();\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")"},{"sha":"9b1448f5917bca05754887fdaffec2e9b6a1431a","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ReportDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FReportDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FReportDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FReportDataBinder.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -27,7 +27,7 @@ public interface ReportDataBinder {\n \n     void getReport(Report report, ReportTO reportTO);\n \n-    String buildReference(Report report);\n+    String buildRefDesc(Report report);\n \n     ExecTO getExecTO(ReportExec execution);\n "},{"sha":"f5869d61cf95a52e229cda28363aad7bda401c85","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/TaskDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FTaskDataBinder.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -32,7 +32,7 @@ public interface TaskDataBinder {\n \n     void updateSchedTask(SchedTask task, SchedTaskTO taskTO, TaskUtils taskUtil);\n \n-    String buildReference(Task task);\n+    String buildRefDesc(Task task);\n \n     ExecTO getExecTO(TaskExec execution);\n "},{"sha":"1bf5dc9750c3be60b06d470fd5bd11b8161ffebf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n@@ -123,7 +124,7 @@ public ReportTO getReportTO(final Report report) {\n     }\n \n     @Override\n-    public String buildReference(final Report report) {\n+    public String buildRefDesc(final Report report) {\n         return \"Report \"\n                 + report.getKey() + \" \"\n                 + report.getName();\n@@ -137,7 +138,9 @@ public ExecTO getExecTO(final ReportExec execution) {\n         if (execution.getKey() != null) {\n             execTO.setKey(execution.getKey());\n         }\n-        execTO.setReference(buildReference(execution.getReport()));\n+        execTO.setJobType(JobType.REPORT);\n+        execTO.setRefKey(execution.getReport().getKey());\n+        execTO.setRefDesc(buildRefDesc(execution.getReport()));\n \n         return execTO;\n     }"},{"sha":"fb7b2683f4519f77d159807fb275cc741d87bd86","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n@@ -248,14 +249,12 @@ public void updateSchedTask(final SchedTask task, final SchedTaskTO taskTO, fina\n     }\n \n     @Override\n-    public String buildReference(final Task task) {\n+    public String buildRefDesc(final Task task) {\n         return taskUtilsFactory.getInstance(task).getType().name() + \" \"\n                 + \"Task \"\n                 + task.getKey() + \" \"\n                 + (task instanceof SchedTask\n-                        ? SchedTask.class.cast(task).getName() == null\n-                        ? StringUtils.EMPTY\n-                        : SchedTask.class.cast(task).getName()\n+                        ? SchedTask.class.cast(task).getName()\n                         : task instanceof PropagationTask\n                                 ? PropagationTask.class.cast(task).getConnObjectKey()\n                                 : StringUtils.EMPTY);\n@@ -271,7 +270,9 @@ public ExecTO getExecTO(final TaskExec execution) {\n         }\n \n         if (execution.getTask() != null && execution.getTask().getKey() != null) {\n-            execTO.setReference(buildReference(execution.getTask()));\n+            execTO.setJobType(JobType.TASK);\n+            execTO.setRefKey(execution.getTask().getKey());\n+            execTO.setRefDesc(buildRefDesc(execution.getTask()));\n         }\n \n         return execTO;"},{"sha":"738f76c8900d3adb559d3534fca10febedc86e59","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -118,8 +118,8 @@ public BulkActionResult deleteExecutions(final BulkExecDeleteQuery query) {\n     }\n \n     @Override\n-    public List<JobTO> listJobs(final int max) {\n-        return logic.listJobs(max);\n+    public List<JobTO> listJobs() {\n+        return logic.listJobs();\n     }\n \n     @Override"},{"sha":"54d256f8d07ad765214f1c4ef7c38294e6e930a2","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -191,8 +191,8 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n     }\n \n     @Override\n-    public List<JobTO> listJobs(final int max) {\n-        return logic.listJobs(max);\n+    public List<JobTO> listJobs() {\n+        return logic.listJobs();\n     }\n \n     @Override"},{"sha":"b2d22744320cca25ce3ef318a6f97d17e7570e72","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/pages/CamelRoutes.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -35,7 +35,7 @@\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n \n @ExtPage(label = \"Camel Routes\", icon = \"fa-road\", listEntitlement = CamelEntitlement.ROUTE_LIST, priority = 100)\n-public class CamelRoutes extends AbstractExtPage {\n+public class CamelRoutes extends BaseExtPage {\n \n     private static final long serialVersionUID = 1965360932245590233L;\n "},{"sha":"cac381099cba1a617f94b5e5cce0c5c0b4c86c8c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SchedTaskITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -161,7 +161,7 @@ public void issueSYNCOPE144() {\n \n     @Test\n     public void issueSYNCOPE660() {\n-        List<JobTO> jobs = taskService.listJobs(50);\n+        List<JobTO> jobs = taskService.listJobs();\n         int old_size = jobs.size();\n \n         SchedTaskTO task = new SchedTaskTO();\n@@ -172,7 +172,7 @@ public void issueSYNCOPE660() {\n         Response response = taskService.create(task);\n         task = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n \n-        jobs = taskService.listJobs(50);\n+        jobs = taskService.listJobs();\n         assertEquals(old_size + 1, jobs.size());\n \n         taskService.actionJob(task.getKey(), JobAction.START);\n@@ -186,7 +186,7 @@ public void issueSYNCOPE660() {\n                 // ignore\n             }\n \n-            jobs = taskService.listJobs(50);\n+            jobs = taskService.listJobs();\n             CollectionUtils.filter(jobs, new Predicate<JobTO>() {\n \n                 @Override\n@@ -198,7 +198,7 @@ public boolean evaluate(final JobTO job) {\n         } while (jobs.size() < 1 && i < maxit);\n \n         assertEquals(1, jobs.size());\n-        assertEquals(\"SCHEDULED Task \" + task.getKey() + \" \" + task.getName(), jobs.get(0).getReference());\n+        assertEquals(task.getKey(), jobs.get(0).getRefKey());\n \n         taskService.actionJob(task.getKey(), JobAction.STOP);\n \n@@ -211,7 +211,7 @@ public boolean evaluate(final JobTO job) {\n                 // ignore\n             }\n \n-            jobs = taskService.listJobs(50);\n+            jobs = taskService.listJobs();\n             CollectionUtils.filter(jobs, new Predicate<JobTO>() {\n \n                 @Override"},{"sha":"3ce072c2525c364324e8bdc4b19b0e6e6ca1878a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SyncTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6306562fde0b345b6ff944bb98f275901c675be8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6306562fde0b345b6ff944bb98f275901c675be8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSyncTaskITCase.java?ref=6306562fde0b345b6ff944bb98f275901c675be8","patch":"@@ -260,7 +260,7 @@ public boolean evaluate(final AttrTO attributeTO) {\n     public void dryRun() {\n         ExecTO execution = execProvisioningTask(taskService, SYNC_TASK_ID, 50, true);\n         assertEquals(\n-                \"Execution of \" + execution.getReference() + \" failed with message \" + execution.getMessage(),\n+                \"Execution of \" + execution.getRefDesc() + \" failed with message \" + execution.getMessage(),\n                 \"SUCCESS\", execution.getStatus());\n     }\n "}]}