{"sha":"72e3836cf29e1edeb2c619c2d06ce64252e31f34","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjcyZTM4MzZjZjI5ZTFlZGViMmM2MTljMmQwNmNlNjQyNTJlMzFmMzQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-22T11:50:40Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-22T11:50:40Z"},"message":"[SYNCOPE-742] Downgrade to CXF 3.1.4","tree":{"sha":"78def26872d4349b1f318bd55b4742fe8cf56715","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/78def26872d4349b1f318bd55b4742fe8cf56715"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/72e3836cf29e1edeb2c619c2d06ce64252e31f34","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/72e3836cf29e1edeb2c619c2d06ce64252e31f34","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/72e3836cf29e1edeb2c619c2d06ce64252e31f34","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/72e3836cf29e1edeb2c619c2d06ce64252e31f34/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a9c2624546887787a6e0389e4bbb1fff5f14f612","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a9c2624546887787a6e0389e4bbb1fff5f14f612","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a9c2624546887787a6e0389e4bbb1fff5f14f612"}],"stats":{"total":178,"additions":128,"deletions":50},"files":[{"sha":"0201be00c24470785cea3f77f82570ee73701ff5","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaSyncopeOperations.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaSyncopeOperations.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -34,19 +34,27 @@ public <T extends AbstractSchemaTO> T read(final String schemaTypeString, final\n     }\n \n     public <T extends AbstractSchemaTO> List<T> list(final String schemaTypeString) {\n-        return schemaService.list(new SchemaQuery.Builder().type(SchemaType.valueOf(schemaTypeString)).build());\n+        return schemaService.list(\n+                SchemaType.valueOf(schemaTypeString),\n+                new SchemaQuery.Builder().type(SchemaType.valueOf(schemaTypeString)).build());\n     }\n \n     public <T extends AbstractSchemaTO> List<T> listPlain() {\n-        return schemaService.list(new SchemaQuery.Builder().type(SchemaType.PLAIN).build());\n+        return schemaService.list(\n+                SchemaType.PLAIN,\n+                new SchemaQuery.Builder().type(SchemaType.PLAIN).build());\n     }\n \n     public <T extends AbstractSchemaTO> List<T> listDerived() {\n-        return schemaService.list(new SchemaQuery.Builder().type(SchemaType.DERIVED).build());\n+        return schemaService.list(\n+                SchemaType.DERIVED,\n+                new SchemaQuery.Builder().type(SchemaType.DERIVED).build());\n     }\n \n     public <T extends AbstractSchemaTO> List<T> listVirtual() {\n-        return schemaService.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n+        return schemaService.list(\n+                SchemaType.VIRTUAL,\n+                new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n     }\n \n     public void delete(final String schemaTypeString, final String schemaName) {"},{"sha":"65761d320822e87cb832e6d05f0eb44bbc6f8baf","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskSyncopeOperations.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -49,11 +49,15 @@ public void delete(final String taskKey) {\n     }\n \n     public List<AbstractTaskTO> list(final String type) {\n-        return taskService.list(new TaskQuery.Builder().type(TaskType.valueOf(type)).build()).getResult();\n+        return taskService.list(\n+                TaskType.valueOf(type),\n+                new TaskQuery.Builder().type(TaskType.valueOf(type)).build()).getResult();\n     }\n \n     public List<AbstractTaskTO> listPropagationTask() {\n-        return taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).getResult();\n+        return taskService.list(\n+                TaskType.PROPAGATION,\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).getResult();\n     }\n \n     public void deleteExecution(final String executionKey) {"},{"sha":"38b1992285abf2e772af23f52cd1fe368c7b303c","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/SchemaRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -64,10 +64,10 @@ public <T extends AbstractSchemaTO> List<T> getSchemas(final SchemaType schemaTy\n         try {\n             if (kind == null || kind.length == 0) {\n                 schemas.addAll(getService(SchemaService.class).\n-                        <T>list(new SchemaQuery.Builder().type(schemaType).build()));\n+                        <T>list(schemaType, new SchemaQuery.Builder().type(schemaType).build()));\n             } else {\n                 schemas.addAll(getService(SchemaService.class).\n-                        <T>list(new SchemaQuery.Builder().type(schemaType).anyTypeClasses(kind).build()));\n+                        <T>list(schemaType, new SchemaQuery.Builder().type(schemaType).anyTypeClasses(kind).build()));\n             }\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While getting all {} schemas for {}\", schemaType, kind, e);"},{"sha":"7b75073c507bc68093efb961fb385ff7f821fca7","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -65,7 +65,8 @@ public Set<String> getPushActionsClasses() {\n      */\n     public int count(final String kind) {\n         return getService(TaskService.class).\n-                list(new TaskQuery.Builder().type(TaskType.valueOf(kind)).page(1).size(1).build()).\n+                list(TaskType.valueOf(kind),\n+                        new TaskQuery.Builder().type(TaskType.valueOf(kind)).page(1).size(1).build()).\n                 getTotalCount();\n     }\n \n@@ -74,7 +75,8 @@ public <T extends AbstractTaskTO> List<T> list(\n             final Class<T> reference, final int page, final int size, final SortParam<String> sort) {\n \n         return (List<T>) getService(TaskService.class).\n-                list(new TaskQuery.Builder().type(getTaskType(reference)).page(page).size(size).\n+                list(getTaskType(reference),\n+                        new TaskQuery.Builder().type(getTaskType(reference)).page(page).size(size).\n                         orderBy(toOrderBy(sort)).build()).\n                 getResult();\n     }"},{"sha":"77fce950490b974eed9259e8b0ff8e4e2898b8ad","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SchemaResource.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -67,13 +67,13 @@ protected AbstractResource.ResourceResponse newResourceResponse(final IResource.\n             final AnyTypeTO anyTypeUserTO = anyTypeService.read(AnyTypeKind.USER.name());\n \n             final List<PlainSchemaTO> plainSchemas = schemaService.list(\n-                    new SchemaQuery.Builder().type(SchemaType.PLAIN).\n+                    SchemaType.PLAIN, new SchemaQuery.Builder().type(SchemaType.PLAIN).\n                     anyTypeClasses(anyTypeUserTO.getClasses()).build());\n             final List<DerSchemaTO> derSchemas = schemaService.list(\n-                    new SchemaQuery.Builder().type(SchemaType.DERIVED).\n+                    SchemaType.DERIVED, new SchemaQuery.Builder().type(SchemaType.DERIVED).\n                     anyTypeClasses(anyTypeUserTO.getClasses()).build());\n             final List<VirSchemaTO> virSchemas = schemaService.list(\n-                    new SchemaQuery.Builder().type(SchemaType.VIRTUAL).\n+                    SchemaType.VIRTUAL, new SchemaQuery.Builder().type(SchemaType.VIRTUAL).\n                     anyTypeClasses(anyTypeUserTO.getClasses()).build());\n \n             response.setWriteCallback(new AbstractResource.WriteCallback() {"},{"sha":"d0f6bd59f9ff6082afdc552e8bdc91e65f9712b4","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -59,12 +59,15 @@ <T extends AbstractSchemaTO> T read(\n      * Returns a list of schemas matching the given query.\n      *\n      * @param <T> actual SchemaTO\n+     * @param type type for schemas to be listed\n      * @param query query conditions\n      * @return list of schemas with matching type, for the given anyTypeClass if provided\n      */\n     @GET\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractSchemaTO> List<T> list(@BeanParam SchemaQuery query);\n+    <T extends AbstractSchemaTO> List<T> list(\n+            @NotNull @PathParam(\"type\") SchemaType type,\n+            @BeanParam SchemaQuery query);\n \n     /**\n      * Creates a new schema."},{"sha":"ebd379c19db13df7229c44fd6db1135dba2d2b99","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.TaskExecQuery;\n@@ -71,13 +72,16 @@ <T extends AbstractTaskTO> T read(\n     /**\n      * Returns a paged list of existing tasks matching the given query.\n      *\n+     * @param type type of tasks to be listed\n      * @param query query conditions\n      * @param <T> type of taskTO\n      * @return paged list of existing tasks matching the given query\n      */\n     @GET\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractTaskTO> PagedResult<T> list(@BeanParam TaskQuery query);\n+    <T extends AbstractTaskTO> PagedResult<T> list(\n+            @NotNull @MatrixParam(\"type\") TaskType type,\n+            @BeanParam TaskQuery query);\n \n     /**\n      * Creates a new task."},{"sha":"350bd613e102fecaae27faaf8d9c66a17f52e376","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/Swagger2Feature.java","status":"modified","additions":34,"deletions":6,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSwagger2Feature.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSwagger2Feature.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSwagger2Feature.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -21,20 +21,48 @@\n import java.net.URL;\n import org.apache.cxf.Bus;\n import org.apache.cxf.endpoint.Server;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Automatically loads available javadocs from class loader (when {@link java.net.URLClassLoader}).\n  */\n public class Swagger2Feature extends org.apache.cxf.jaxrs.swagger.Swagger2Feature {\n \n-    @Override\n-    public void initialize(final Server server, final Bus bus) {\n-        URL[] javaDocURLs = JavaDocUtils.getJavaDocURLs();\n-        if (javaDocURLs != null) {\n-            super.setJavaDocURLs(javaDocURLs);\n+    private static final Logger LOG = LoggerFactory.getLogger(Swagger2Feature.class);\n+\n+    private static final boolean SWAGGER_JAXRS_AVAILABLE;\n+\n+    static {\n+        SWAGGER_JAXRS_AVAILABLE = isSwaggerJaxRsAvailable();\n+    }\n+\n+    private static boolean isSwaggerJaxRsAvailable() {\n+        try {\n+            Class.forName(\"io.swagger.jaxrs.DefaultParameterExtension\");\n+            return true;\n+        } catch (Throwable ex) {\n+            return false;\n         }\n+    }\n \n-        super.initialize(server, bus);\n+    public void setActivateOnlyIfJaxrsSupported(final boolean activateOnlyIfJaxrsSupported) {\n+        // do nothing\n     }\n \n+    @Override\n+    public void initialize(final Server server, final Bus bus) {\n+        if (SWAGGER_JAXRS_AVAILABLE) {\n+            URL[] javaDocURLs = JavaDocUtils.getJavaDocURLs();\n+            if (javaDocURLs != null && javaDocURLs.length >= 0) {\n+                try {\n+                    super.setJavaDocPath(javaDocURLs[0].toExternalForm());\n+                } catch (Exception e) {\n+                    LOG.error(\"Could not load Javadocs from {}\", javaDocURLs[0], e);\n+                }\n+            }\n+\n+            super.initialize(server, bus);\n+        }\n+    }\n }"},{"sha":"664b4399f12f62d6c70209293822641ed3e604df","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/WadlGenerator.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -20,21 +20,27 @@\n \n import java.net.URL;\n import javax.ws.rs.container.ContainerRequestContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Automatically loads available javadocs from class loader (when {@link java.net.URLClassLoader}).\n  */\n public class WadlGenerator extends org.apache.cxf.jaxrs.model.wadl.WadlGenerator {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(WadlGenerator.class);\n+\n     private boolean inited = false;\n \n     @Override\n     public void filter(final ContainerRequestContext context) {\n         synchronized (this) {\n             if (!inited) {\n                 URL[] javaDocURLs = JavaDocUtils.getJavaDocURLs();\n-                if (javaDocURLs != null) {\n-                    super.setJavaDocURLs(javaDocURLs);\n+                try {\n+                    super.setJavaDocPath(javaDocURLs[0].toExternalForm());\n+                } catch (Exception e) {\n+                    LOG.error(\"Could not load Javadocs from {}\", javaDocURLs[0], e);\n                 }\n \n                 inited = true;"},{"sha":"0dd04822b90897814c85a632c6c9e927076fb4a8","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SchemaServiceImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -52,7 +52,8 @@ public void delete(final SchemaType schemaType, final String key) {\n     }\n \n     @Override\n-    public <T extends AbstractSchemaTO> List<T> list(final SchemaQuery query) {\n+    public <T extends AbstractSchemaTO> List<T> list(final SchemaType type, final SchemaQuery query) {\n+        query.setType(type);\n         return logic.list(query.getType(), query.getAnyTypeClasses());\n     }\n "},{"sha":"44e5cf72560f5a7ea622e9341a3fa6a243e5ac70","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n@@ -75,7 +76,8 @@ public TaskExecTO execute(final ExecuteQuery query) {\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskQuery query) {\n+    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType type, final TaskQuery query) {\n+        query.setType(type);\n         return (PagedResult<T>) buildPagedResult(\n                 logic.list(\n                         query.getType(),"},{"sha":"2e815a5eb76a2a456c1cc675bcf7711333fac7e6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -168,7 +168,7 @@ protected Map<Long, TaskExecTO> execProvisioningTasks(final TaskService taskServ\n \n     protected NotificationTaskTO findNotificationTaskBySender(final String sender) {\n         PagedResult<NotificationTaskTO> tasks =\n-                taskService.list(new TaskQuery.Builder().type(TaskType.NOTIFICATION).build());\n+                taskService.list(TaskType.NOTIFICATION, new TaskQuery.Builder().type(TaskType.NOTIFICATION).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n "},{"sha":"15f8384857e191f973539946e59ce42755880059","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/DerSchemaITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDerSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDerSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDerSchemaITCase.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -41,7 +41,8 @@ public class DerSchemaITCase extends AbstractITCase {\n \n     @Test\n     public void list() {\n-        List<DerSchemaTO> derSchemas = schemaService.list(new SchemaQuery.Builder().type(SchemaType.DERIVED).build());\n+        List<DerSchemaTO> derSchemas = schemaService.list(\n+                SchemaType.DERIVED, new SchemaQuery.Builder().type(SchemaType.DERIVED).build());\n         assertFalse(derSchemas.isEmpty());\n         for (DerSchemaTO derivedSchemaTO : derSchemas) {\n             assertNotNull(derivedSchemaTO);"},{"sha":"0cbf5714de42a7d0231cff338feced5631c01044","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/MultitenancyITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -104,7 +104,7 @@ public void masterOnly() {\n     @Test\n     public void readPlainSchemas() {\n         assertEquals(17, adminClient.getService(SchemaService.class).\n-                list(new SchemaQuery.Builder().type(SchemaType.PLAIN).build()).size());\n+                list(SchemaType.PLAIN, new SchemaQuery.Builder().type(SchemaType.PLAIN).build()).size());\n     }\n \n     @Test"},{"sha":"f20bb48c9b0b27ac4d40cb027b158b8bf743ab52","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PlainSchemaITCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -158,7 +158,8 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        List<PlainSchemaTO> schemas = schemaService.list(new SchemaQuery.Builder().type(SchemaType.PLAIN).build());\n+        List<PlainSchemaTO> schemas = schemaService.list(\n+                SchemaType.PLAIN, new SchemaQuery.Builder().type(SchemaType.PLAIN).build());\n         assertFalse(schemas.isEmpty());\n         for (PlainSchemaTO schemaTO : schemas) {\n             assertNotNull(schemaTO);\n@@ -170,7 +171,7 @@ public void listByAnyTypeClass() {\n         final String clazz = anyTypeService.read(AnyTypeKind.USER.name()).getClasses().get(0);\n \n         List<PlainSchemaTO> userSchemas = schemaService.list(\n-                new SchemaQuery.Builder().type(SchemaType.PLAIN).anyTypeClass(clazz).build());\n+                SchemaType.PLAIN, new SchemaQuery.Builder().type(SchemaType.PLAIN).anyTypeClass(clazz).build());\n \n         assertTrue(IterableUtils.matchesAny(userSchemas, new Predicate<PlainSchemaTO>() {\n "},{"sha":"0bf11d879a855f59017075880e4db2c1e734c98e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PropagationTaskITCase.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -45,7 +45,7 @@ public class PropagationTaskITCase extends AbstractTaskITCase {\n     @Test\n     public void paginatedList() {\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(2).build());\n+                TaskType.PROPAGATION, new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(2).build());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.getResult().size());\n \n@@ -54,7 +54,7 @@ public void paginatedList() {\n         }\n \n         tasks = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(2).size(2).build());\n+                TaskType.PROPAGATION, new TaskQuery.Builder().type(TaskType.PROPAGATION).page(2).size(2).build());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.getPage());\n         assertEquals(2, tasks.getResult().size());\n@@ -64,7 +64,7 @@ public void paginatedList() {\n         }\n \n         tasks = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1000).size(2).build());\n+                TaskType.PROPAGATION, new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1000).size(2).build());\n         assertNotNull(tasks);\n         assertTrue(tasks.getResult().isEmpty());\n     }\n@@ -80,15 +80,16 @@ public void read() {\n     @Test\n     public void bulkAction() {\n         PagedResult<PropagationTaskTO> before = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).build());\n+                TaskType.PROPAGATION, new TaskQuery.Builder().type(TaskType.PROPAGATION).build());\n \n         // create user with testdb resource\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"taskBulk@apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n         createUser(userTO);\n \n         List<PropagationTaskTO> after = new ArrayList<>(\n-                taskService.<PropagationTaskTO>list(new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).\n+                taskService.<PropagationTaskTO>list(\n+                        TaskType.PROPAGATION, new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).\n                 getResult());\n         after.removeAll(before.getResult());\n         assertFalse(after.isEmpty());\n@@ -102,7 +103,8 @@ public void bulkAction() {\n \n         taskService.bulk(bulkAction);\n \n-        assertFalse(taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).getResult().\n+        assertFalse(taskService.list(\n+                TaskType.PROPAGATION, new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).getResult().\n                 containsAll(after));\n     }\n \n@@ -120,12 +122,14 @@ public void issueSYNCOPE741() {\n \n         // check list\n         PagedResult<AbstractTaskTO> tasks = taskService.list(\n+                TaskType.PROPAGATION,\n                 new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(2).details(false).build());\n         for (AbstractTaskTO item : tasks.getResult()) {\n             assertTrue(item.getExecutions().isEmpty());\n         }\n \n         tasks = taskService.list(\n+                TaskType.PROPAGATION,\n                 new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(2).details(true).build());\n         for (AbstractTaskTO item : tasks.getResult()) {\n             assertFalse(item.getExecutions().isEmpty());"},{"sha":"14cd318267ea361002692c3f5c5a45b032ec74a6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PushTaskITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -80,7 +80,8 @@ public void read() {\n \n     @Test\n     public void list() {\n-        PagedResult<PushTaskTO> tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PUSH).build());\n+        PagedResult<PushTaskTO> tasks = taskService.list(\n+                TaskType.PUSH, new TaskQuery.Builder().type(TaskType.PUSH).build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof PushTaskTO)) {"},{"sha":"09d1e5c152110b65076a40689ee090b9f84b1aad","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SchedTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -60,7 +60,7 @@ public void getJobClasses() {\n     @Test\n     public void list() {\n         PagedResult<SchedTaskTO> tasks =\n-                taskService.list(new TaskQuery.Builder().type(TaskType.SCHEDULED).build());\n+                taskService.list(TaskType.SCHEDULED, new TaskQuery.Builder().type(TaskType.SCHEDULED).build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof SchedTaskTO) || task instanceof SyncTaskTO || task instanceof PushTaskTO) {"},{"sha":"20705893473b8d82ae49e3d240627169c91c6405","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -98,7 +98,7 @@ public void getSyncActionsClasses() {\n     @Test\n     public void list() {\n         PagedResult<SyncTaskTO> tasks = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.SYNCHRONIZATION).build());\n+                TaskType.SYNCHRONIZATION, new TaskQuery.Builder().type(TaskType.SYNCHRONIZATION).build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof SyncTaskTO)) {"},{"sha":"eb394f45190302cc267318224f783f81157eb3fe","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":18,"deletions":7,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -144,7 +144,7 @@ public static UserTO getSampleTO(final String email) {\n     public void createUserWithNoPropagation() {\n         // get task list\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+                TaskType.PROPAGATION, new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -159,7 +159,7 @@ public void createUserWithNoPropagation() {\n \n         // get the new task list\n         tasks = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+                TaskType.PROPAGATION, new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -348,7 +348,7 @@ public void createWithException() {\n     public void create() {\n         // get task list\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+                TaskType.PROPAGATION, new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -388,7 +388,9 @@ public void create() {\n         assertNotNull(newUserTO.getCreationDate());\n \n         // get the new task list\n-        tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+        tasks = taskService.list(\n+                TaskType.PROPAGATION,\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -683,6 +685,7 @@ public void update() {\n     @Test\n     public void updatePasswordOnly() {\n         int beforeTasks = taskService.list(\n+                TaskType.PROPAGATION,\n                 new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build()).getTotalCount();\n         assertFalse(beforeTasks <= 0);\n \n@@ -701,6 +704,7 @@ public void updatePasswordOnly() {\n         assertNotNull(userTO.getChangePwdDate());\n \n         int afterTasks = taskService.list(\n+                TaskType.PROPAGATION,\n                 new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build()).getTotalCount();\n         assertFalse(beforeTasks <= 0);\n \n@@ -712,6 +716,7 @@ public void updatePasswordOnly() {\n     public void verifyTaskRegistration() {\n         // get task list\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n+                TaskType.PROPAGATION,\n                 new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n@@ -731,7 +736,9 @@ public void verifyTaskRegistration() {\n         assertNotNull(userTO);\n \n         // get the new task list\n-        tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+        tasks = taskService.list(\n+                TaskType.PROPAGATION,\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -755,7 +762,9 @@ public void verifyTaskRegistration() {\n         assertNotNull(userTO);\n \n         // get the new task list\n-        tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+        tasks = taskService.list(\n+                TaskType.PROPAGATION,\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n \n         maxKey = newMaxKey;\n         newMaxKey = tasks.getResult().iterator().next().getKey();\n@@ -775,7 +784,9 @@ public void verifyTaskRegistration() {\n         userService.delete(userTO.getKey());\n \n         // get the new task list\n-        tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+        tasks = taskService.list(\n+                TaskType.PROPAGATION,\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n \n         maxKey = newMaxKey;\n         newMaxKey = tasks.getResult().iterator().next().getKey();"},{"sha":"6cc506051a733ff8b23cbe1182c18a129fcdaa81","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/VirSchemaITCase.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -44,7 +44,8 @@ public class VirSchemaITCase extends AbstractITCase {\n \n     @Test\n     public void list() {\n-        List<VirSchemaTO> vSchemas = schemaService.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n+        List<VirSchemaTO> vSchemas = schemaService.list(\n+                SchemaType.VIRTUAL, new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n         assertFalse(vSchemas.isEmpty());\n         for (VirSchemaTO vSchemaTO : vSchemas) {\n             assertNotNull(vSchemaTO);\n@@ -94,14 +95,15 @@ public void crud() {\n     public void anonymous() {\n         SchemaService unauthenticated = clientFactory.create().getService(SchemaService.class);\n         try {\n-            unauthenticated.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n+            unauthenticated.list(SchemaType.VIRTUAL, new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n             fail();\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n \n         SchemaService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).getService(SchemaService.class);\n-        assertFalse(anonymous.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build()).isEmpty());\n+        assertFalse(anonymous.list(\n+                SchemaType.VIRTUAL, new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build()).isEmpty());\n     }\n \n     @Test"},{"sha":"bc9df36a39786c91dfa43a8c2877df67f732871b","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72e3836cf29e1edeb2c619c2d06ce64252e31f34/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72e3836cf29e1edeb2c619c2d06ce64252e31f34/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=72e3836cf29e1edeb2c619c2d06ce64252e31f34","patch":"@@ -326,7 +326,7 @@ under the License.\n     <connid.ldap.version>1.5.0</connid.ldap.version>\n     <connid.ad.version>1.3.0</connid.ad.version>\n \n-    <cxf.version>3.1.5-SNAPSHOT</cxf.version>\n+    <cxf.version>3.1.4</cxf.version>\n \n     <camel.version>2.16.1</camel.version>\t\n "}]}