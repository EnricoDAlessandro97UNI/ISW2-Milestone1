{"sha":"c2e6a9b360a61d367297ac9920b3bb982b165610","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmMyZTZhOWIzNjBhNjFkMzY3Mjk3YWM5OTIwYjNiYjk4MmIxNjU2MTA=","commit":{"author":{"name":"Christian Schneider","email":"cschneider@apache.org","date":"2013-01-28T14:44:09Z"},"committer":{"name":"Christian Schneider","email":"cschneider@apache.org","date":"2013-01-28T14:44:09Z"},"message":"SYNCOPE-231 Adding UserServiceImpl for CXF\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1439430 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"faa35190a7624bb64acc2ee66f71b921a6d597b8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/faa35190a7624bb64acc2ee66f71b921a6d597b8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c2e6a9b360a61d367297ac9920b3bb982b165610","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c2e6a9b360a61d367297ac9920b3bb982b165610","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c2e6a9b360a61d367297ac9920b3bb982b165610","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c2e6a9b360a61d367297ac9920b3bb982b165610/comments","author":{"login":"cschneider","id":484584,"node_id":"MDQ6VXNlcjQ4NDU4NA==","avatar_url":"https://avatars.githubusercontent.com/u/484584?v=4","gravatar_id":"","url":"https://api.github.com/users/cschneider","html_url":"https://github.com/cschneider","followers_url":"https://api.github.com/users/cschneider/followers","following_url":"https://api.github.com/users/cschneider/following{/other_user}","gists_url":"https://api.github.com/users/cschneider/gists{/gist_id}","starred_url":"https://api.github.com/users/cschneider/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cschneider/subscriptions","organizations_url":"https://api.github.com/users/cschneider/orgs","repos_url":"https://api.github.com/users/cschneider/repos","events_url":"https://api.github.com/users/cschneider/events{/privacy}","received_events_url":"https://api.github.com/users/cschneider/received_events","type":"User","site_admin":false},"committer":{"login":"cschneider","id":484584,"node_id":"MDQ6VXNlcjQ4NDU4NA==","avatar_url":"https://avatars.githubusercontent.com/u/484584?v=4","gravatar_id":"","url":"https://api.github.com/users/cschneider","html_url":"https://github.com/cschneider","followers_url":"https://api.github.com/users/cschneider/followers","following_url":"https://api.github.com/users/cschneider/following{/other_user}","gists_url":"https://api.github.com/users/cschneider/gists{/gist_id}","starred_url":"https://api.github.com/users/cschneider/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cschneider/subscriptions","organizations_url":"https://api.github.com/users/cschneider/orgs","repos_url":"https://api.github.com/users/cschneider/repos","events_url":"https://api.github.com/users/cschneider/events{/privacy}","received_events_url":"https://api.github.com/users/cschneider/received_events","type":"User","site_admin":false},"parents":[{"sha":"3ac851746dd4bd609c5376564cb9d0ab4dd6fb7b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3ac851746dd4bd609c5376564cb9d0ab4dd6fb7b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3ac851746dd4bd609c5376564cb9d0ab4dd6fb7b"}],"stats":{"total":232,"additions":222,"deletions":10},"files":[{"sha":"6b92032dcf47c93e61044d52932b29bb44d497d5","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/InvalidSearchConditionException.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c2e6a9b360a61d367297ac9920b3bb982b165610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FInvalidSearchConditionException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c2e6a9b360a61d367297ac9920b3bb982b165610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FInvalidSearchConditionException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FInvalidSearchConditionException.java?ref=c2e6a9b360a61d367297ac9920b3bb982b165610","patch":"@@ -18,7 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.dao;\n \n-public class InvalidSearchConditionException extends Exception {\n+public class InvalidSearchConditionException extends RuntimeException {\n+\n+    private static final long serialVersionUID = 1785286543933086849L;\n \n     public InvalidSearchConditionException() {\n         super();"},{"sha":"3b219cc15a09abe7f9610da36889be272a5b087d","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":21,"deletions":9,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c2e6a9b360a61d367297ac9920b3bb982b165610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c2e6a9b360a61d367297ac9920b3bb982b165610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=c2e6a9b360a61d367297ac9920b3bb982b165610","patch":"@@ -123,36 +123,44 @@ public class UserController {\n     public ModelAndView verifyPassword(@PathVariable(\"username\") String username,\n             @RequestParam(\"password\") final String password)\n             throws NotFoundException, UnauthorizedRoleException {\n+        return new ModelAndView().addObject(verifyPasswordInternal(username, password));\n+    }\n \n+    public Boolean verifyPasswordInternal(String username,\n+            final String password) {\n         auditManager.audit(Category.user, UserSubCategory.create, Result.success,\n                 \"Verified password for: \" + username);\n-\n-        return new ModelAndView().addObject(dataBinder.verifyPassword(username, password));\n+        return dataBinder.verifyPassword(username, password);\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/count\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public ModelAndView count() {\n+        return new ModelAndView().addObject(countInternal());\n+    }\n+    \n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    public int countInternal() {\n         Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n-\n-        return new ModelAndView().addObject(userDAO.count(adminRoleIds));\n+        return userDAO.count(adminRoleIds);\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/search/count\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public ModelAndView searchCount(@RequestBody final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n+        return new ModelAndView().addObject(searchCountInternal(searchCondition));\n+    }\n \n+    public int searchCountInternal(final NodeCond searchCondition) {\n         if (!searchCondition.isValid()) {\n             LOG.error(\"Invalid search condition: {}\", searchCondition);\n             throw new InvalidSearchConditionException();\n         }\n-\n         final Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n-        return new ModelAndView().addObject(searchDAO.count(adminRoleIds, searchCondition,\n-                AttributableUtil.getInstance(AttributableType.USER)));\n+        return searchDAO.count(adminRoleIds, searchCondition, AttributableUtil.getInstance(AttributableType.USER));\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n@@ -273,7 +281,12 @@ public List<UserTO> search(@RequestBody final NodeCond searchCondition, @PathVar\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n     public UserTO create(final HttpServletResponse response, @RequestBody final UserTO userTO)\n             throws PropagationException, UnauthorizedRoleException, WorkflowException, NotFoundException {\n-\n+        UserTO savedTO = createInternal(userTO);\n+        response.setStatus(HttpServletResponse.SC_CREATED);\n+        return savedTO;\n+    }\n+    \n+    public UserTO createInternal(final UserTO userTO) {\n         LOG.debug(\"User create called with {}\", userTO);\n \n         Set<Long> requestRoleIds = new HashSet<Long>(userTO.getMemberships().size());\n@@ -305,7 +318,6 @@ public UserTO create(final HttpServletResponse response, @RequestBody final User\n         auditManager.audit(Category.user, UserSubCategory.create, Result.success,\n                 \"Successfully created user: \" + savedTO.getUsername());\n \n-        response.setStatus(HttpServletResponse.SC_CREATED);\n         return savedTO;\n     }\n "},{"sha":"749343b41ce02ccfdf0868e1bdbd5d9f31223f02","filename":"core/src/main/java/org/apache/syncope/core/services/UserServiceImpl.java","status":"added","additions":197,"deletions":0,"changes":197,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c2e6a9b360a61d367297ac9920b3bb982b165610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c2e6a9b360a61d367297ac9920b3bb982b165610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java?ref=c2e6a9b360a61d367297ac9920b3bb982b165610","patch":"@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.services;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.MatrixParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PathParam;\n+\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.services.UserService;\n+import org.apache.syncope.common.to.PropagationRequestTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.to.WorkflowFormTO;\n+import org.apache.syncope.core.rest.controller.UserController;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class UserServiceImpl implements UserService {\n+    @Autowired\n+    UserController userController;\n+\n+    @Override\n+    public UserTO activate(@PathParam(\"userId\") long userId, String token) {\n+        return userController.activate(userId, token);\n+    }\n+\n+    @Override\n+    public UserTO activate(long userId, String token,\n+            PropagationRequestTO propagationRequestTO) {\n+        return userController.activate(userId, token, propagationRequestTO);\n+    }\n+\n+    @Override\n+    public UserTO activateByUsername(String username,\n+            @MatrixParam(\"token\") String token) {\n+        return userController.activate(username, token);\n+    }\n+\n+    @Override\n+    public UserTO activateByUsername(String username, String token,\n+            PropagationRequestTO propagationRequestTO) {\n+        return userController.activate(username, token, propagationRequestTO);\n+    }\n+\n+    @Override\n+    public WorkflowFormTO claimForm(String taskId) {\n+        return userController.claimForm(taskId);\n+    }\n+\n+    @Override\n+    public int count() {\n+        return userController.countInternal();\n+    }\n+\n+    @Override\n+    public UserTO create(UserTO userTO) {\n+        return userController.createInternal(userTO);\n+    }\n+\n+    @Override\n+    public UserTO delete(Long userId) {\n+        return userController.delete(userId);\n+    }\n+\n+    @Override\n+    @POST\n+    public UserTO executeWorkflow(String taskId, UserTO userTO) {\n+        return userController.executeWorkflow(userTO, taskId);\n+    }\n+\n+    @Override\n+    public WorkflowFormTO getFormForUser(Long userId) {\n+        return userController.getFormForUser(userId);\n+    }\n+\n+    @Override\n+    public List<WorkflowFormTO> getForms() {\n+        return userController.getForms();\n+    }\n+\n+    @Override\n+    public List<UserTO> list() {\n+        return userController.list();\n+    }\n+\n+    @Override\n+    public List<UserTO> list(int page, int size) {\n+        return userController.list(page, size);\n+    }\n+\n+    @Override\n+    public UserTO reactivate(long userId) {\n+        return userController.reactivate(userId);\n+    }\n+\n+    @Override\n+    public UserTO reactivate(long userId, PropagationRequestTO propagationRequestTO) {\n+        return userController.reactivate(userId, propagationRequestTO);\n+    }\n+\n+    @Override\n+    public UserTO reactivateByUsername(String username) {\n+        return userController.reactivate(username);\n+    }\n+\n+    @Override\n+    public UserTO reactivateByUsername(String username,\n+            PropagationRequestTO propagationRequestTO) {\n+        return userController.reactivate(username, propagationRequestTO);\n+    }\n+\n+    @Override\n+    public UserTO read(Long userId) {\n+        return userController.read(userId);\n+    }\n+\n+    @Override\n+    public UserTO read(String username) {\n+        return userController.read(username);\n+    }\n+\n+    @Override\n+    public UserTO readSelf() {\n+        return userController.read();\n+    }\n+\n+    @Override\n+    public List<UserTO> search(NodeCond searchCondition) {\n+        return userController.search(searchCondition);\n+    }\n+\n+    @Override\n+    public List<UserTO> search(NodeCond searchCondition, int page, int size) {\n+        return userController.search(searchCondition, page, size);\n+    }\n+\n+    @Override\n+    public int searchCount(NodeCond searchCondition) {\n+        return userController.searchCountInternal(searchCondition);\n+    }\n+\n+    @Override\n+    public UserTO submitForm(WorkflowFormTO form) {\n+        return userController.submitForm(form);\n+    }\n+\n+    @Override\n+    public UserTO suspend(long userId) {\n+        return userController.suspend(userId);\n+    }\n+\n+    @Override\n+    public UserTO suspend(long userId, PropagationRequestTO propagationRequestTO) {\n+        return userController.suspend(userId, propagationRequestTO);\n+    }\n+\n+    @Override\n+    public UserTO suspendByUsername(String username) {\n+        return userController.suspend(username);\n+    }\n+\n+    @Override\n+    public UserTO suspendByUsername(String username, PropagationRequestTO propagationRequestTO) {\n+        return userController.suspend(username, propagationRequestTO);\n+    }\n+\n+    @Override\n+    public UserTO update(Long userId, UserMod userMod) {\n+        return userController.update(userMod);\n+    }\n+\n+    @Override\n+    public Boolean verifyPassword(String username, String password) {\n+        return userController.verifyPasswordInternal(username, password);\n+    }\n+\n+}"},{"sha":"7f7b2066cbfc7ca1ad4a489e27b84a3d92ac03d3","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c2e6a9b360a61d367297ac9920b3bb982b165610/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c2e6a9b360a61d367297ac9920b3bb982b165610/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=c2e6a9b360a61d367297ac9920b3bb982b165610","patch":"@@ -77,6 +77,7 @@ under the License.\n       <ref bean=\"roleServiceImpl\"/>\n       <ref bean=\"schemaServiceImpl\"/>\n       <ref bean=\"userRequestServiceImpl\"/>\n+      <ref bean=\"userServiceImpl\"/>\n     </jaxrs:serviceBeans>\n     <jaxrs:resourceComparator>\n       <bean id=\"myServiceComparator\" class=\"org.apache.syncope.core.rest.utils.QueryResourceInfoComperator\"/>"}]}