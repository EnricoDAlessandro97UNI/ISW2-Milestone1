{"sha":"0a5fd9196e129e4ccb52603e5c74af1fa7c796ca","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjBhNWZkOTE5NmUxMjllNGNjYjUyNjAzZTVjNzRhZjFmYTdjNzk2Y2E=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-02-05T16:57:28Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-02-05T17:04:10Z"},"message":"[SYNCOPE-1540] Use JPA metamodel to guess the right case for column and table names","tree":{"sha":"f1de651c848c9da2fae9c249c7cfb656c5c74330","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f1de651c848c9da2fae9c249c7cfb656c5c74330"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0a5fd9196e129e4ccb52603e5c74af1fa7c796ca","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0a5fd9196e129e4ccb52603e5c74af1fa7c796ca","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0a5fd9196e129e4ccb52603e5c74af1fa7c796ca","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0a5fd9196e129e4ccb52603e5c74af1fa7c796ca/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b4ea6171116ce51e6c99a65a5c8b2aeed6c9adce","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b4ea6171116ce51e6c99a65a5c8b2aeed6c9adce","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b4ea6171116ce51e6c99a65a5c8b2aeed6c9adce"}],"stats":{"total":174,"additions":160,"deletions":14},"files":[{"sha":"80150886ed0989ff337050e086ac1deb31b069a8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":153,"deletions":9,"changes":162,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0a5fd9196e129e4ccb52603e5c74af1fa7c796ca/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0a5fd9196e129e4ccb52603e5c74af1fa7c796ca/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=0a5fd9196e129e4ccb52603e5c74af1fa7c796ca","patch":"@@ -21,6 +21,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.lang.reflect.Field;\n import java.nio.charset.StandardCharsets;\n import java.sql.Blob;\n import java.sql.Connection;\n@@ -38,24 +39,38 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.TreeMap;\n import java.util.TreeSet;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import javax.persistence.CollectionTable;\n+import javax.persistence.Column;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.JoinTable;\n+import javax.persistence.Table;\n+import javax.persistence.metamodel.Attribute;\n+import javax.persistence.metamodel.EntityType;\n+import javax.persistence.metamodel.PluralAttribute;\n import javax.sql.DataSource;\n-import javax.xml.bind.DatatypeConverter;\n import javax.xml.XMLConstants;\n+import javax.xml.bind.DatatypeConverter;\n import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.TransformerConfigurationException;\n import javax.xml.transform.sax.SAXTransformerFactory;\n import javax.xml.transform.sax.TransformerHandler;\n import javax.xml.transform.stream.StreamResult;\n-\n+import org.apache.commons.collections4.BidiMap;\n+import org.apache.commons.collections4.bidimap.DualHashBidiMap;\n import org.apache.commons.collections4.SetUtils;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.content.ContentExporter;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAccessToken;\n@@ -76,8 +91,10 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.datasource.DataSourceUtils;\n+import org.springframework.orm.jpa.EntityManagerFactoryUtils;\n import org.springframework.stereotype.Component;\n import org.xml.sax.SAXException;\n import org.xml.sax.helpers.AttributesImpl;\n@@ -238,11 +255,44 @@ private static String getValues(final ResultSet rs, final String columnName, fin\n         return res;\n     }\n \n+    private String columnName(final Supplier<Stream<Attribute<?, ?>>> attrs, final String columnName) {\n+        String name = attrs.get().map(attr -> {\n+            if (attr.getName().equalsIgnoreCase(columnName)) {\n+                return attr.getName();\n+            }\n+\n+            Field field = (Field) attr.getJavaMember();\n+            Column column = field.getAnnotation(Column.class);\n+            if (column != null && column.name().equalsIgnoreCase(columnName)) {\n+                return column.name();\n+            }\n+\n+            return null;\n+        }).filter(Objects::nonNull).findFirst().orElse(columnName);\n+\n+        if (StringUtils.endsWithIgnoreCase(name, \"_ID\")) {\n+            String left = StringUtils.substringBefore(name, \"_\");\n+            String prefix = attrs.get().filter(attr -> left.equalsIgnoreCase(attr.getName())).findFirst().\n+                    map(Attribute::getName).orElse(left);\n+            name = prefix + \"_id\";\n+        }\n+\n+        return name;\n+    }\n+\n+    private boolean isTask(final String tableName) {\n+        return \"TASK\".equalsIgnoreCase(tableName);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     private void exportTable(\n             final TransformerHandler handler,\n             final Connection conn,\n             final String tableName,\n-            final String whereClause) throws SQLException, SAXException {\n+            final String whereClause,\n+            final BidiMap<String, EntityType<?>> entities,\n+            final Set<EntityType<?>> taskEntities,\n+            final Map<String, Pair<String, String>> relationTables) throws SQLException, SAXException {\n \n         LOG.debug(\"Export table {}\", tableName);\n \n@@ -290,6 +340,19 @@ private void exportTable(\n \n             List<Map<String, String>> rows = new ArrayList<>();\n \n+            Optional<EntityType<?>> entity = entities.entrySet().stream().\n+                    filter(entry -> entry.getKey().equalsIgnoreCase(tableName)).\n+                    findFirst().\n+                    map(Map.Entry::getValue);\n+\n+            String outputTableName = entity.isPresent()\n+                    ? entities.getKey(entity.get())\n+                    : relationTables.keySet().stream().filter(key -> tableName.equalsIgnoreCase(key)).findFirst().\n+                            orElse(tableName);\n+            if (isTask(tableName)) {\n+                outputTableName = \"Task\";\n+            }\n+\n             rs = stmt.executeQuery();\n             while (rs.next()) {\n                 Map<String, String> row = new HashMap<>();\n@@ -305,8 +368,28 @@ private void exportTable(\n                     if (value != null && (!COLUMNS_TO_BE_NULLIFIED.containsKey(tableName)\n                             || !COLUMNS_TO_BE_NULLIFIED.get(tableName).contains(columnName))) {\n \n-                        row.put(columnName, value);\n-                        LOG.debug(\"Add for table {}: {}=\\\"{}\\\"\", tableName, columnName, value);\n+                        String name = columnName;\n+                        if (entity.isPresent()) {\n+                            name = columnName(\n+                                    () -> (Stream<Attribute<?, ?>>) entity.get().getAttributes().stream(), columnName);\n+                        }\n+\n+                        if (isTask(tableName)) {\n+                            name = columnName(\n+                                    () -> taskEntities.stream().flatMap(e -> e.getAttributes().stream()), columnName);\n+                        }\n+\n+                        if (relationTables.containsKey(outputTableName)) {\n+                            Pair<String, String> relationColumns = relationTables.get(outputTableName);\n+                            if (name.equalsIgnoreCase(relationColumns.getLeft())) {\n+                                name = relationColumns.getLeft();\n+                            } else if (name.equalsIgnoreCase(relationColumns.getRight())) {\n+                                name = relationColumns.getRight();\n+                            }\n+                        }\n+\n+                        row.put(name, value);\n+                        LOG.debug(\"Add for table {}: {}=\\\"{}\\\"\", outputTableName, name, value);\n                     }\n                 }\n             }\n@@ -327,8 +410,8 @@ private void exportTable(\n                 AttributesImpl attrs = new AttributesImpl();\n                 row.forEach((key, value) -> attrs.addAttribute(\"\", \"\", key, \"CDATA\", value));\n \n-                handler.startElement(\"\", \"\", tableName, attrs);\n-                handler.endElement(\"\", \"\", tableName);\n+                handler.startElement(\"\", \"\", outputTableName, attrs);\n+                handler.endElement(\"\", \"\", outputTableName);\n             }\n         } finally {\n             if (rs != null) {\n@@ -348,6 +431,60 @@ private void exportTable(\n         }\n     }\n \n+    private Set<EntityType<?>> taskEntities(final Set<EntityType<?>> entityTypes) {\n+        return entityTypes.stream().filter(e -> e.getName().endsWith(\"Task\")).collect(Collectors.toSet());\n+    }\n+\n+    private BidiMap<String, EntityType<?>> entities(final Set<EntityType<?>> entityTypes) {\n+        BidiMap<String, EntityType<?>> entities = new DualHashBidiMap<>();\n+        entityTypes.forEach(entity -> {\n+            Table table = entity.getBindableJavaType().getAnnotation(Table.class);\n+            if (table != null) {\n+                entities.put(table.name(), entity);\n+            }\n+        });\n+\n+        return entities;\n+    }\n+\n+    private Map<String, Pair<String, String>> relationTables(final BidiMap<String, EntityType<?>> entities) {\n+        Map<String, Pair<String, String>> relationTables = new HashMap<>();\n+        entities.values().stream().forEach(e -> e.getAttributes().stream().\n+                filter(a -> a.getPersistentAttributeType() != Attribute.PersistentAttributeType.BASIC).\n+                forEach(a -> {\n+                    String attrName = a.getName();\n+\n+                    Field field = (Field) a.getJavaMember();\n+                    Column column = field.getAnnotation(Column.class);\n+                    if (column != null) {\n+                        attrName = column.name();\n+                    }\n+\n+                    CollectionTable collectionTable = field.getAnnotation(CollectionTable.class);\n+                    if (collectionTable != null) {\n+                        relationTables.put(\n+                                collectionTable.name(),\n+                                Pair.of(attrName, collectionTable.joinColumns()[0].name()));\n+                    }\n+\n+                    JoinTable joinTable = field.getAnnotation(JoinTable.class);\n+                    if (joinTable != null) {\n+                        String tableName = joinTable.name();\n+                        if (StringUtils.isBlank(tableName)) {\n+                            tableName = entities.getKey(e) + \"_\"\n+                                    + entities.getKey((EntityType) ((PluralAttribute) a).getElementType());\n+                        }\n+\n+                        relationTables.put(\n+                                tableName,\n+                                Pair.of(joinTable.joinColumns()[0].name(),\n+                                        joinTable.inverseJoinColumns()[0].name()));\n+                    }\n+                }));\n+\n+        return relationTables;\n+    }\n+\n     @Override\n     public void export(\n             final String domain,\n@@ -409,10 +546,17 @@ public void export(\n \n             LOG.debug(\"Tables to be exported {}\", tableNames);\n \n+            EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(\n+                    ApplicationContextProvider.getBeanFactory(), domain);\n+            Set<EntityType<?>> entityTypes = emf == null ? Collections.emptySet() : emf.getMetamodel().getEntities();\n+            BidiMap<String, EntityType<?>> entities = entities(entityTypes);\n+\n             // then sort tables based on foreign keys and dump\n             for (String tableName : sortByForeignKeys(schema, conn, tableNames)) {\n                 try {\n-                    exportTable(handler, conn, tableName, TABLES_TO_BE_FILTERED.get(tableName.toUpperCase()));\n+                    exportTable(\n+                            handler, conn, tableName, TABLES_TO_BE_FILTERED.get(tableName.toUpperCase()),\n+                            entities, taskEntities(entityTypes), relationTables(entities));\n                 } catch (Exception e) {\n                     LOG.error(\"Failure exporting table {}\", tableName, e);\n                 }"},{"sha":"97f4ff74da80e0b8c598208e073c481a480013bb","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/XMLContentExporterTest.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0a5fd9196e129e4ccb52603e5c74af1fa7c796ca/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FXMLContentExporterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0a5fd9196e129e4ccb52603e5c74af1fa7c796ca/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FXMLContentExporterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FXMLContentExporterTest.java?ref=0a5fd9196e129e4ccb52603e5c74af1fa7c796ca","patch":"@@ -53,13 +53,15 @@ public void issueSYNCOPE1128() throws Exception {\n         String exported = baos.toString(Charset.defaultCharset());\n         assertTrue(StringUtils.isNotBlank(exported));\n \n+        System.out.println(\"EEEEEEEEEEEEEE\\n\" + exported);\n+        \n         List<String> realms = IOUtils.readLines(\n                 IOUtils.toInputStream(exported, Charset.defaultCharset()), Charset.defaultCharset()).stream().\n-                filter(row -> StringUtils.startsWithIgnoreCase(row.trim(), \"<REALM\")).collect(Collectors.toList());\n+                filter(row -> row.trim().startsWith(\"<Realm\")).collect(Collectors.toList());\n         assertEquals(4, realms.size());\n-        assertTrue(StringUtils.containsIgnoreCase(realms.get(0), \"NAME=\\\"/\\\"\"));\n-        assertTrue(StringUtils.containsIgnoreCase(realms.get(1), \"NAME=\\\"odd\\\"\"));\n-        assertTrue(StringUtils.containsIgnoreCase(realms.get(2), \"NAME=\\\"even\\\"\"));\n-        assertTrue(StringUtils.containsIgnoreCase(realms.get(3), \"NAME=\\\"two\\\"\"));\n+        assertTrue(realms.get(0).contains(\"name=\\\"/\\\"\"));\n+        assertTrue(realms.get(1).contains(\"name=\\\"odd\\\"\"));\n+        assertTrue(realms.get(2).contains(\"name=\\\"even\\\"\"));\n+        assertTrue(realms.get(3).contains(\"name=\\\"two\\\"\"));\n     }\n }"}]}