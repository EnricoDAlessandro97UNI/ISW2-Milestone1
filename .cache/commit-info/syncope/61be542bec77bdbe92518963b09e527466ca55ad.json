{"sha":"61be542bec77bdbe92518963b09e527466ca55ad","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjYxYmU1NDJiZWM3N2JkYmU5MjUxODk2M2IwOWU1Mjc0NjZjYTU1YWQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-11-22T14:37:20Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-11-22T14:37:20Z"},"message":"[SYNCOPE-431] Removing unnecessary debug statements from controllers' methods and enhancing ControllerHandler's debug statements\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1544553 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e00924266c6232e6156b9c68d9c8b55500436cd0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e00924266c6232e6156b9c68d9c8b55500436cd0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/61be542bec77bdbe92518963b09e527466ca55ad","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/61be542bec77bdbe92518963b09e527466ca55ad","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/61be542bec77bdbe92518963b09e527466ca55ad","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/61be542bec77bdbe92518963b09e527466ca55ad/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"361b589a9b408c0e1032517d2924c6352cc3b415","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/361b589a9b408c0e1032517d2924c6352cc3b415","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/361b589a9b408c0e1032517d2924c6352cc3b415"}],"stats":{"total":519,"additions":213,"deletions":306},"files":[{"sha":"6f0f1e1264d2e58b086da1cd058ae5a76f013c83","filename":"common/src/main/java/org/apache/syncope/common/to/EventCategoryTO.java","status":"modified","additions":15,"deletions":12,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FEventCategoryTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FEventCategoryTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FEventCategoryTO.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -1,17 +1,20 @@\n /*\n- * Copyright 2013 The Apache Software Foundation.\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.common.to;\n \n@@ -22,7 +25,7 @@\n import org.apache.syncope.common.AbstractBaseBean;\n import org.apache.syncope.common.types.AuditElements;\n \n-@XmlRootElement(name = \"user\")\n+@XmlRootElement(name = \"eventCategory\")\n @XmlType\n public class EventCategoryTO extends AbstractBaseBean {\n "},{"sha":"bb6c7b255fb3756a3b20bfd282e43657a55a0511","filename":"common/src/main/java/org/apache/syncope/common/util/LoggerEventUtils.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FLoggerEventUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FLoggerEventUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FLoggerEventUtils.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -1,17 +1,20 @@\n /*\n- * Copyright 2013 The Apache Software Foundation.\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.common.util;\n "},{"sha":"2e594b42b315dc85d2908cbad57b978e8a157e72","filename":"console/src/main/java/org/apache/syncope/console/pages/ReportletConfModalPage.java","status":"modified","additions":28,"deletions":27,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -71,8 +71,8 @@ public class ReportletConfModalPage extends BaseModalPage {\n \n     private static final long serialVersionUID = 3910027601200382958L;\n \n-    private static final String[] EXCLUDE_PROPERTIES = new String[]{\"serialVersionUID\", \"class\", \"name\",\n-        \"reportletClassName\"};\n+    private static final String[] EXCLUDE_PROPERTIES = new String[] { \"serialVersionUID\", \"class\", \"name\",\n+        \"reportletClassName\" };\n \n     private AbstractReportletConf reportletConf;\n \n@@ -104,30 +104,31 @@ public ReportletConfModalPage(final AbstractReportletConf reportletConf, final M\n         final AjaxDropDownChoicePanel<String> reportletClass = new AjaxDropDownChoicePanel<String>(\"reportletClass\",\n                 \"reportletClass\", new IModel<String>() {\n \n-            private static final long serialVersionUID = -2316468110411802130L;\n+                    private static final long serialVersionUID = -2316468110411802130L;\n \n-            @Override\n-            public String getObject() {\n-                return ReportletConfModalPage.this.reportletConf == null\n+                    @Override\n+                    public String getObject() {\n+                        return ReportletConfModalPage.this.reportletConf == null\n                         ? null\n                         : ReportletConfModalPage.this.reportletConf.getClass().getName();\n-            }\n+                    }\n \n-            @Override\n-            public void setObject(final String object) {\n-                try {\n-                    Class<?> reportletClass = Class.forName(object);\n-                    ReportletConfModalPage.this.reportletConf = (AbstractReportletConf) reportletClass.newInstance();\n-                    propertiesContainer.replace(buildPropView());\n-                } catch (Exception e) {\n-                    LOG.error(\"Cannot find or initialize {}\", object, e);\n-                }\n-            }\n+                    @Override\n+                    public void setObject(final String object) {\n+                        try {\n+                            Class<?> reportletClass = Class.forName(object);\n+                            ReportletConfModalPage.this.reportletConf = (AbstractReportletConf) reportletClass.\n+                            newInstance();\n+                            propertiesContainer.replace(buildPropView());\n+                        } catch (Exception e) {\n+                            LOG.error(\"Cannot find or initialize {}\", object, e);\n+                        }\n+                    }\n \n-            @Override\n-            public void detach() {\n-            }\n-        });\n+                    @Override\n+                    public void detach() {\n+                    }\n+                });\n         reportletClass.setStyleSheet(\"long_dynamicsize\");\n         reportletClass.setChoices(reportRestClient.getReportletConfClasses());\n         ((DropDownChoice) reportletClass.getField()).setNullValid(true);\n@@ -254,15 +255,15 @@ protected void populateItem(final ListItem<String> item) {\n                 try {\n                     field = ReportletConfModalPage.this.reportletConf.getClass().getDeclaredField(fieldName);\n                 } catch (Exception e) {\n-                    LOG.error(\"Could not find field {} in class {}\", new Object[]{fieldName,\n-                        ReportletConfModalPage.this.reportletConf.getClass(), e});\n+                    LOG.error(\"Could not find field {} in class {}\",\n+                            fieldName, ReportletConfModalPage.this.reportletConf.getClass(), e);\n                 }\n                 if (field == null) {\n                     return;\n                 }\n \n-                BeanWrapper wrapper = PropertyAccessorFactory\n-                        .forBeanPropertyAccess(ReportletConfModalPage.this.reportletConf);\n+                BeanWrapper wrapper = PropertyAccessorFactory.\n+                        forBeanPropertyAccess(ReportletConfModalPage.this.reportletConf);\n \n                 Panel panel;\n \n@@ -333,15 +334,15 @@ protected void populateItem(final ListItem<String> item) {\n                     } else if (listItemType.isEnum()) {\n                         panel = new CheckBoxMultipleChoiceFieldPanel(\"value\", new PropertyModel(\n                                 ReportletConfModalPage.this.reportletConf, fieldName), new ListModel(Arrays\n-                                .asList(listItemType.getEnumConstants())));\n+                                        .asList(listItemType.getEnumConstants())));\n                     } else {\n                         if (((List) wrapper.getPropertyValue(fieldName)).isEmpty()) {\n                             ((List) wrapper.getPropertyValue(fieldName)).add(null);\n                         }\n \n                         panel = new MultiValueSelectorPanel(\"value\", new PropertyModel<List>(\n                                 ReportletConfModalPage.this.reportletConf, fieldName), buildSinglePanel(\n-                                field.getType(), fieldName, \"panel\"));\n+                                        field.getType(), fieldName, \"panel\"));\n                     }\n                 } else {\n                     panel = buildSinglePanel(field.getType(), fieldName, \"value\");"},{"sha":"751aa4c1c552c283d0717d7c232edd4da3c44986","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PoliciesPanel.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -178,15 +178,13 @@ public Page createPage() {\n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-\n                             policyRestClient.delete(accountPolicyTO.getId(), accountPolicyTO.getClass());\n                             info(getString(Constants.OPERATION_SUCCEEDED));\n-\n                         } catch (SyncopeClientCompositeErrorException e) {\n                             error(getString(Constants.OPERATION_ERROR));\n \n-                            LOG.error(\"While deleting resource {}({})\", new Object[]{accountPolicyTO.getId(),\n-                                accountPolicyTO.getDescription()}, e);\n+                            LOG.error(\"While deleting resource {}({})\",\n+                                    accountPolicyTO.getId(), accountPolicyTO.getDescription(), e);\n                         }\n \n                         target.add(container);"},{"sha":"59bcdd8e5425630175f1d6f548075b01d6f47ae6","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SelectedEventsPanel.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectedEventsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectedEventsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectedEventsPanel.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -1,17 +1,20 @@\n /*\n- * Copyright 2013 The Apache Software Foundation.\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.console.pages.panels;\n "},{"sha":"f621f92576196e5c577b1895aa3de9204e3bf250","filename":"console/src/main/resources/org/apache/syncope/console/markup/html/CrontabContainer_pt_BR.properties","status":"modified","additions":14,"deletions":12,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fmarkup%2Fhtml%2FCrontabContainer_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fmarkup%2Fhtml%2FCrontabContainer_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fmarkup%2Fhtml%2FCrontabContainer_pt_BR.properties?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -1,17 +1,19 @@\n-# Copyright 2013 The Apache Software Foundation.\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n #\n-# Licensed under the Apache License, Version 2.0 (the \"License\");\n-# you may not use this file except in compliance with the License.\n-# You may obtain a copy of the License at\n+#   http://www.apache.org/licenses/LICENSE-2.0\n #\n-#      http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing, software\n-# distributed under the License is distributed on an \"AS IS\" BASIS,\n-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-# See the License for the specific language governing permissions and\n-# limitations under the License.\n-\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n selOpt1=N\\u00E3o Agendado\n selOpt2=A cada 5 minutos\n selOpt3=Acionar \\u00E0s 12\\:00 todos os dias"},{"sha":"e03893961bea103307898d97e33f9412e372adda","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/AbstractController.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -36,6 +36,11 @@\n import org.springframework.beans.TypeMismatchException;\n import org.springframework.transaction.annotation.Transactional;\n \n+/**\n+ * Superclass for all controllers.\n+ *\n+ * @param <T> transfer object used for input / output\n+ */\n public abstract class AbstractController<T extends AbstractBaseBean> {\n \n     /**"},{"sha":"76b8b59c9f5779c622d55187f92c7dab40a771e5","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/AbstractTransactionalController.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractTransactionalController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractTransactionalController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractTransactionalController.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -21,6 +21,12 @@\n import org.apache.syncope.common.AbstractBaseBean;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional(rollbackFor = {Throwable.class})\n-public abstract class AbstractTransactionalController<T extends AbstractBaseBean> extends AbstractController<T> {\n+/**\n+ * Adds Spring's transactional support to <tt>AbstractController</tt>.\n+ *\n+ * @param <T> transfer object used for input / output\n+ * @see AbstractController\n+ */\n+@Transactional(rollbackFor = { Throwable.class })\n+abstract class AbstractTransactionalController<T extends AbstractBaseBean> extends AbstractController<T> {\n }"},{"sha":"801be9165380ccc1ca3fbe59d86ad0392539cddb","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -78,7 +78,6 @@ public class ConfigurationController extends AbstractTransactionalController<Con\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n     public ConfigurationTO create(final HttpServletResponse response,\n             @RequestBody final ConfigurationTO configurationTO) {\n-        LOG.debug(\"Configuration create called with parameters {}\", configurationTO);\n \n         SyncopeConf conf = binder.create(configurationTO);\n         conf = confDAO.save(conf);"},{"sha":"4e3550e879b2b3c9c5bd60e4789e6335cc6f8514","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -82,8 +82,6 @@ public class ConnInstanceController extends AbstractTransactionalController<Conn\n     @PreAuthorize(\"hasRole('CONNECTOR_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n     public ConnInstanceTO create(final HttpServletResponse response, @RequestBody final ConnInstanceTO connInstanceTO) {\n-        LOG.debug(\"ConnInstance create called with configuration {}\", connInstanceTO);\n-\n         ConnInstance connInstance = binder.getConnInstance(connInstanceTO);\n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n@@ -106,8 +104,6 @@ public ConnInstanceTO create(final HttpServletResponse response, @RequestBody fi\n     @PreAuthorize(\"hasRole('CONNECTOR_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n     public ConnInstanceTO update(@RequestBody final ConnInstanceTO connInstanceTO) {\n-        LOG.debug(\"Connector update called with configuration {}\", connInstanceTO);\n-\n         ConnInstance connInstance = binder.updateConnInstance(connInstanceTO.getId(), connInstanceTO);\n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n@@ -348,8 +344,6 @@ public void reload() {\n     @PreAuthorize(\"hasRole('CONNECTOR_DELETE') and #bulkAction.operation == #bulkAction.operation.DELETE\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/bulk\")\n     public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n-        LOG.debug(\"Bulk action '{}' called on '{}'\", bulkAction.getOperation(), bulkAction.getTargets());\n-\n         BulkActionRes res = new BulkActionRes();\n \n         switch (bulkAction.getOperation()) {"},{"sha":"284284e288842b94a9175391f96346c9fc87eeda","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ControllerHandler.java","status":"renamed","additions":19,"deletions":17,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FControllerHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FControllerHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FControllerHandler.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -1,26 +1,28 @@\n /*\n- * Copyright 2013 The Apache Software Foundation.\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n-package org.apache.syncope.core.services;\n+package org.apache.syncope.core.rest.controller;\n \n import java.lang.reflect.Method;\n+import java.util.Arrays;\n import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.notification.NotificationManager;\n-import org.apache.syncope.core.rest.controller.AbstractController;\n-import org.apache.syncope.core.rest.controller.UnresolvedReferenceException;\n import org.aspectj.lang.ProceedingJoinPoint;\n import org.aspectj.lang.annotation.Around;\n import org.aspectj.lang.annotation.Aspect;\n@@ -61,8 +63,8 @@ public Object around(final ProceedingJoinPoint joinPoint) throws Throwable {\n         Object before = null;\n \n         try {\n-            LOG.debug(\"Before {}.{}({})\",\n-                    new Object[] {clazz.getSimpleName(), event, input == null || input.length == 0 ? \"\" : \"...\"});\n+            LOG.debug(\"Before {}.{}({})\", clazz.getSimpleName(), event,\n+                    input == null || input.length == 0 ? \"\" : Arrays.asList(input));\n \n             try {\n                 before = ((AbstractController) joinPoint.getTarget()).resolveBeanReference(method, input);\n@@ -73,7 +75,7 @@ public Object around(final ProceedingJoinPoint joinPoint) throws Throwable {\n             output = joinPoint.proceed();\n             result = AuditElements.Result.SUCCESS;\n \n-            LOG.debug(\"After returning {}.{}\", clazz.getSimpleName(), event);\n+            LOG.debug(\"After returning {}.{}: {}\", clazz.getSimpleName(), event, output);\n             return output;\n         } catch (Throwable t) {\n             output = t;","previous_filename":"core/src/main/java/org/apache/syncope/core/services/ControllerHandler.java"},{"sha":"b8cb244934e7e3c59505512fdcfa0b4c3f7539ca","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/NotificationController.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -81,15 +81,12 @@ public NotificationTO create(final HttpServletResponse response, @RequestBody fi\n \n     @PreAuthorize(\"hasRole('NOTIFICATION_CREATE')\")\n     public NotificationTO createInternal(final NotificationTO notificationTO) {\n-        LOG.debug(\"Notification create called with parameter {}\", notificationTO);\n         return binder.getNotificationTO(notificationDAO.save(binder.createNotification(notificationTO)));\n     }\n \n     @PreAuthorize(\"hasRole('NOTIFICATION_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n     public NotificationTO update(@RequestBody final NotificationTO notificationTO) {\n-        LOG.debug(\"ConnNotificationtor update called with parameter {}\", notificationTO);\n-\n         Notification notification = notificationDAO.find(notificationTO.getId());\n         if (notification == null) {\n             LOG.error(\"Could not find notification '\" + notificationTO.getId() + \"'\");\n@@ -124,6 +121,7 @@ public NotificationTO delete(@PathVariable(\"notificationId\") final Long notifica\n     @Override\n     protected NotificationTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n+\n         Long id = null;\n \n         if (ArrayUtils.isNotEmpty(args)) {"},{"sha":"b4bde63c089451d244c3bce8d710f905019a59d9","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":3,"deletions":13,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -76,12 +76,10 @@ public SyncPolicyTO create(final HttpServletResponse response, @RequestBody fina\n \n     @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n     public <T extends PolicyTO> T createInternal(final T policyTO) {\n-        LOG.debug(\"Creating policy \" + policyTO);\n         return binder.getPolicyTO(policyDAO.save(binder.getPolicy(null, policyTO)));\n     }\n \n     private <T extends PolicyTO, K extends Policy> T update(final T policyTO, final K policy) {\n-        LOG.debug(\"Updating policy \" + policyTO);\n         binder.getPolicy(policy, policyTO);\n         K savedPolicy = policyDAO.save(policy);\n         return binder.getPolicyTO(savedPolicy);\n@@ -123,7 +121,6 @@ public SyncPolicyTO update(@RequestBody final SyncPolicyTO policyTO) {\n     @PreAuthorize(\"hasRole('POLICY_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n     public List<PolicyTO> list(@PathVariable(\"kind\") final String kind) {\n-        LOG.debug(\"Listing policies\");\n         List<? extends Policy> policies = policyDAO.find(PolicyType.valueOf(kind.toUpperCase(Locale.ENGLISH)));\n \n         final List<PolicyTO> policyTOs = new ArrayList<PolicyTO>();\n@@ -137,8 +134,6 @@ public List<PolicyTO> list(@PathVariable(\"kind\") final String kind) {\n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/password/global/read\")\n     public PasswordPolicyTO getGlobalPasswordPolicy() {\n-        LOG.debug(\"Reading global password policy\");\n-\n         PasswordPolicy policy = policyDAO.getGlobalPasswordPolicy();\n         if (policy == null) {\n             throw new NotFoundException(\"No password policy found\");\n@@ -150,8 +145,6 @@ public PasswordPolicyTO getGlobalPasswordPolicy() {\n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/account/global/read\")\n     public AccountPolicyTO getGlobalAccountPolicy() {\n-        LOG.debug(\"Reading global account policy\");\n-\n         AccountPolicy policy = policyDAO.getGlobalAccountPolicy();\n         if (policy == null) {\n             throw new NotFoundException(\"No account policy found\");\n@@ -163,8 +156,6 @@ public AccountPolicyTO getGlobalAccountPolicy() {\n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/sync/global/read\")\n     public SyncPolicyTO getGlobalSyncPolicy() {\n-        LOG.debug(\"Reading global sync policy\");\n-\n         SyncPolicy policy = policyDAO.getGlobalSyncPolicy();\n         if (policy == null) {\n             throw new NotFoundException(\"No sync policy found\");\n@@ -176,8 +167,6 @@ public SyncPolicyTO getGlobalSyncPolicy() {\n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{id}\")\n     public <T extends PolicyTO> T read(@PathVariable(\"id\") final Long id) {\n-        LOG.debug(\"Reading policy with id {}\", id);\n-\n         Policy policy = policyDAO.find(id);\n         if (policy == null) {\n             throw new NotFoundException(\"Policy \" + id + \" not found\");\n@@ -211,8 +200,9 @@ public ModelAndView getSyncCorrelationRuleClasses() {\n      * {@inheritDoc}\n      */\n     @Override\n-    protected PolicyTO resolveReference(final Method method, final Object... args) throws\n-            UnresolvedReferenceException {\n+    protected PolicyTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n         Long id = null;\n \n         if (ArrayUtils.isNotEmpty(args)) {"},{"sha":"98838b644eaf9d5c14c5e543b342e49b55bf0114","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ReportController.java","status":"modified","additions":5,"deletions":14,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -103,8 +103,6 @@ public ReportTO create(final HttpServletResponse response, @RequestBody final Re\n \n     @PreAuthorize(\"hasRole('REPORT_CREATE')\")\n     public ReportTO createInternal(final ReportTO reportTO) {\n-        LOG.debug(\"Creating report \" + reportTO);\n-\n         Report report = new Report();\n         binder.getReport(report, reportTO);\n         report = reportDAO.save(report);\n@@ -128,8 +126,6 @@ public ReportTO createInternal(final ReportTO reportTO) {\n     @PreAuthorize(\"hasRole('REPORT_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n     public ReportTO update(@RequestBody final ReportTO reportTO) {\n-        LOG.debug(\"Report update called with parameter {}\", reportTO);\n-\n         Report report = reportDAO.find(reportTO.getId());\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + reportTO.getId());\n@@ -250,8 +246,6 @@ public void exportExecutionResult(final HttpServletResponse response,\n     public void exportExecutionResultInternal(final OutputStream os, final ReportExec reportExec,\n             final ReportExecExportFormat format) {\n \n-        LOG.debug(\"Exporting result of {} as {}\", reportExec, format);\n-\n         // streaming SAX handler from a compressed byte array stream\n         ByteArrayInputStream bais = new ByteArrayInputStream(reportExec.getExecResult());\n         ZipInputStream zis = new ZipInputStream(bais);\n@@ -261,7 +255,7 @@ public void exportExecutionResultInternal(final OutputStream os, final ReportExe\n \n             Pipeline<SAXPipelineComponent> pipeline = new NonCachingPipeline<SAXPipelineComponent>();\n             pipeline.addComponent(new XMLGenerator(zis));\n-            \n+\n             Map<String, Object> parameters = new HashMap<String, Object>();\n             parameters.put(\"status\", reportExec.getStatus());\n             parameters.put(\"message\", reportExec.getMessage());\n@@ -341,10 +335,6 @@ public ReportExecTO execute(@PathVariable(\"reportId\") final Long reportId) {\n             throw new NotFoundException(\"Report \" + reportId);\n         }\n \n-        ReportExecTO result;\n-\n-        LOG.debug(\"Triggering new execution of report {}\", report);\n-\n         try {\n             jobInstanceLoader.registerJob(report);\n \n@@ -361,7 +351,7 @@ public ReportExecTO execute(@PathVariable(\"reportId\") final Long reportId) {\n             throw scce;\n         }\n \n-        result = new ReportExecTO();\n+        ReportExecTO result = new ReportExecTO();\n         result.setReport(reportId);\n         result.setStartDate(new Date());\n         result.setStatus(ReportExecStatus.STARTED.name());\n@@ -401,8 +391,9 @@ public ReportExecTO deleteExecution(@PathVariable(\"executionId\") final Long exec\n      * {@inheritDoc}\n      */\n     @Override\n-    protected ReportTO resolveReference(final Method method, final Object... args) throws\n-            UnresolvedReferenceException {\n+    protected ReportTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n         Long id = null;\n \n         if (ArrayUtils.isNotEmpty(args) && (\"create\".equals(method.getName())"},{"sha":"fe5943791287d36f6cf70edf1ab8b206247f5b4d","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -102,8 +102,6 @@ public class ResourceController extends AbstractTransactionalController<Resource\n     @PreAuthorize(\"hasRole('RESOURCE_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n     public ResourceTO create(final HttpServletResponse response, @RequestBody final ResourceTO resourceTO) {\n-        LOG.debug(\"Resource creation: {}\", resourceTO);\n-\n         if (StringUtils.isBlank(resourceTO.getName())) {\n             SyncopeClientCompositeErrorException sccee =\n                     new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n@@ -126,8 +124,6 @@ public ResourceTO create(final HttpServletResponse response, @RequestBody final\n     @PreAuthorize(\"hasRole('RESOURCE_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n     public ResourceTO update(@RequestBody final ResourceTO resourceTO) {\n-        LOG.debug(\"Role update request: {}\", resourceTO);\n-\n         ExternalResource resource = resourceDAO.find(resourceTO.getName());\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceTO.getName() + \"'\");\n@@ -275,8 +271,6 @@ public ModelAndView check(@RequestBody final ResourceTO resourceTO) {\n     @PreAuthorize(\"hasRole('RESOURCE_DELETE') and #bulkAction.operation == #bulkAction.operation.DELETE\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/bulk\")\n     public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n-        LOG.debug(\"Bulk action '{}' called on '{}'\", bulkAction.getOperation(), bulkAction.getTargets());\n-\n         BulkActionRes res = new BulkActionRes();\n \n         switch (bulkAction.getOperation()) {\n@@ -300,8 +294,9 @@ public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n      * {@inheritDoc}\n      */\n     @Override\n-    protected ResourceTO resolveReference(final Method method, final Object... args) throws\n-            UnresolvedReferenceException {\n+    protected ResourceTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n         String name = null;\n \n         if (ArrayUtils.isNotEmpty(args)) {"},{"sha":"f6ce619d614883410d27f706726b11a1315a9238","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":12,"deletions":23,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -59,6 +59,12 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.servlet.ModelAndView;\n \n+/**\n+ * Note that this controller does not extend AbstractTransactionalController, hence does not provide any\n+ * Spring's Transactional logic at class level.\n+ *\n+ * @see AbstractTransactionalController\n+ */\n @Controller\n @RequestMapping(\"/role\")\n public class RoleController extends AbstractController<RoleTO> {\n@@ -167,7 +173,7 @@ public List<RoleTO> children(@PathVariable(\"roleId\") final Long roleId) {\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/search\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public List<RoleTO> search(@RequestBody final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n@@ -176,13 +182,11 @@ public List<RoleTO> search(@RequestBody final NodeCond searchCondition)\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/search/{page}/{size}\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public List<RoleTO> search(@RequestBody final NodeCond searchCondition, @PathVariable(\"page\") final int page,\n             @PathVariable(\"size\") final int size)\n             throws InvalidSearchConditionException {\n \n-        LOG.debug(\"Role search called with condition {}\", searchCondition);\n-\n         if (!searchCondition.isValid()) {\n             LOG.error(\"Invalid search condition: {}\", searchCondition);\n             throw new InvalidSearchConditionException();\n@@ -202,7 +206,7 @@ public List<RoleTO> search(@RequestBody final NodeCond searchCondition, @PathVar\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/search/count\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public ModelAndView searchCount(@RequestBody final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n@@ -232,8 +236,6 @@ public List<RoleTO> list() {\n     @PreAuthorize(\"hasRole('ROLE_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n     public RoleTO create(final HttpServletResponse response, @RequestBody final RoleTO roleTO) {\n-        LOG.debug(\"Role create called with parameters {}\", roleTO);\n-\n         // Check that this operation is allowed to be performed by caller\n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         if (roleTO.getParent() != 0 && !allowedRoleIds.contains(roleTO.getParent())) {\n@@ -247,7 +249,6 @@ public RoleTO create(final HttpServletResponse response, @RequestBody final Role\n         /*\n          * Actual operations: workflow, propagation\n          */\n-\n         WorkflowResult<Long> created = rwfAdapter.create(actual);\n \n         EntitlementUtil.extendAuthContext(created.getResult());\n@@ -262,22 +263,18 @@ public RoleTO create(final HttpServletResponse response, @RequestBody final Role\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n+        response.setStatus(HttpServletResponse.SC_CREATED);\n+\n         final RoleTO savedTO = binder.getRoleTO(created.getResult());\n         savedTO.setPropagationStatusTOs(propagationReporter.getStatuses());\n-\n-        LOG.debug(\"About to return created role\\n{}\", savedTO);\n-\n-        response.setStatus(HttpServletResponse.SC_CREATED);\n         return savedTO;\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n     public RoleTO update(@RequestBody final RoleMod roleMod) {\n-        LOG.debug(\"Role update called with {}\", roleMod);\n-\n         // Check that this operation is allowed to be performed by caller\n-        SyncopeRole role = binder.getRoleFromId(roleMod.getId());\n+        binder.getRoleFromId(roleMod.getId());\n \n         // Attribute value transformation (if configured)\n         RoleMod actual = attrTransformer.transform(roleMod);\n@@ -286,7 +283,6 @@ public RoleTO update(@RequestBody final RoleMod roleMod) {\n         /*\n          * Actual operations: workflow, propagation\n          */\n-\n         WorkflowResult<Long> updated = rwfAdapter.update(actual);\n \n         List<PropagationTask> tasks = propagationManager.getRoleUpdateTaskIds(updated,\n@@ -301,17 +297,12 @@ public RoleTO update(@RequestBody final RoleMod roleMod) {\n         }\n         final RoleTO updatedTO = binder.getRoleTO(updated.getResult());\n         updatedTO.setPropagationStatusTOs(propagationReporter.getStatuses());\n-\n-        LOG.debug(\"About to return updated role\\n{}\", updatedTO);\n-\n         return updatedTO;\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{roleId}\")\n     public RoleTO delete(@PathVariable(\"roleId\") final Long roleId) {\n-        LOG.debug(\"Role delete called for {}\", roleId);\n-\n         // Generate propagation tasks for deleting users from role resources, if they are on those resources only\n         // because of the reason being deleted (see SYNCOPE-357)\n         List<PropagationTask> tasks = new ArrayList<PropagationTask>();\n@@ -337,8 +328,6 @@ public RoleTO delete(@PathVariable(\"roleId\") final Long roleId) {\n \n         rwfAdapter.delete(roleId);\n \n-        LOG.debug(\"Role successfully deleted: {}\", roleId);\n-\n         return roleTO;\n     }\n "},{"sha":"c1f0080374d55fd127e0f956de73090c0651816f","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -144,8 +144,9 @@ public SchemaTO update(@RequestBody final SchemaTO schemaTO, @PathVariable(\"kind\n      * {@inheritDoc}\n      */\n     @Override\n-    protected SchemaTO resolveReference(final Method method, final Object... args) throws\n-            UnresolvedReferenceException {\n+    protected SchemaTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n         String kind = null;\n         String name = null;\n "},{"sha":"28c4c72f09de73313ccb757cdffad741f464c6ea","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/TaskController.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -107,8 +107,6 @@ public TaskTO createSchedTask(final HttpServletResponse response, @RequestBody f\n \n     @PreAuthorize(\"hasRole('TASK_CREATE')\")\n     public TaskTO createSchedTaskInternal(final SchedTaskTO taskTO) {\n-        LOG.debug(\"Creating task \" + taskTO);\n-\n         TaskUtil taskUtil = getTaskUtil(taskTO);\n \n         SchedTask task = binder.createSchedTask(taskTO, taskUtil);\n@@ -139,8 +137,6 @@ public TaskTO updateSync(@RequestBody final SyncTaskTO taskTO) {\n     @PreAuthorize(\"hasRole('TASK_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update/sched\")\n     public TaskTO updateSched(@RequestBody final SchedTaskTO taskTO) {\n-        LOG.debug(\"Task update called with parameter {}\", taskTO);\n-\n         SchedTask task = taskDAO.find(taskTO.getId());\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskTO.getId());\n@@ -253,7 +249,6 @@ public TaskExecTO execute(@PathVariable(\"taskId\") final Long taskId,\n         TaskUtil taskUtil = getTaskUtil(task);\n \n         TaskExecTO result = null;\n-        LOG.debug(\"Execution started for {}\", task);\n         switch (taskUtil) {\n             case PROPAGATION:\n                 final TaskExec propExec = taskExecutor.execute((PropagationTask) task);\n@@ -297,7 +292,7 @@ public TaskExecTO execute(@PathVariable(\"taskId\") final Long taskId,\n \n             default:\n         }\n-        LOG.debug(\"Execution finished for {}, {}\", task, result);\n+\n         return result;\n     }\n \n@@ -389,8 +384,6 @@ public TaskExecTO deleteExecution(@PathVariable(\"executionId\") final Long execut\n             + \"#bulkAction.operation == #bulkAction.operation.DRYRUN))\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/bulk\")\n     public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n-        LOG.debug(\"Bulk action '{}' called on '{}'\", bulkAction.getOperation(), bulkAction.getTargets());\n-\n         BulkActionRes res = new BulkActionRes();\n \n         switch (bulkAction.getOperation()) {"},{"sha":"46d754bc6ad63d35721e2c15d3b0ca1799304b98","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UnauthorizedRoleException.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnauthorizedRoleException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnauthorizedRoleException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnauthorizedRoleException.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -23,9 +23,9 @@\n \n public class UnauthorizedRoleException extends RuntimeException {\n \n-\tprivate static final long serialVersionUID = 7540587364235915081L;\n-\t\n-\tprivate final Set<Long> roleIds;\n+    private static final long serialVersionUID = 7540587364235915081L;\n+\n+    private final Set<Long> roleIds;\n \n     public UnauthorizedRoleException(final Set<Long> roleIds) {\n         super(\"Missing entitlement for role(s) \" + roleIds);"},{"sha":"ca63ef699cfe3a065f10ca700eeeac2a85df8418","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UnresolvedReferenceException.java","status":"modified","additions":15,"deletions":11,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnresolvedReferenceException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnresolvedReferenceException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnresolvedReferenceException.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -1,17 +1,20 @@\n /*\n- * Copyright 2013 The Apache Software Foundation.\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.core.rest.controller;\n \n@@ -23,6 +26,7 @@ public class UnresolvedReferenceException extends Exception {\n     private static final long serialVersionUID = -675489116009955632L;\n \n     public UnresolvedReferenceException() {\n+        super();\n     }\n \n     public UnresolvedReferenceException(Throwable cause) {"},{"sha":"1880d7ee1fc27fb3e84698563201294e925631c4","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":39,"deletions":102,"changes":141,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -74,10 +74,10 @@\n import org.springframework.web.servlet.ModelAndView;\n \n /**\n- * Note that this controller does not extend AbstractController, hence does not provide any Spring's Transactional logic\n- * at class level.\n+ * Note that this controller does not extend AbstractTransactionalController, hence does not provide any\n+ * Spring's Transactional logic at class level.\n  *\n- * @see AbstractController\n+ * @see AbstractTransactionalController\n  */\n @Controller\n @RequestMapping(\"/user\")\n@@ -126,7 +126,7 @@ public ModelAndView count() {\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public int countInternal() {\n         return userDAO.count(EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()));\n     }\n@@ -139,7 +139,7 @@ public ModelAndView searchCount(@RequestBody final NodeCond searchCondition)\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public int searchCountInternal(final NodeCond searchCondition) throws InvalidSearchConditionException {\n         if (!searchCondition.isValid()) {\n             LOG.error(\"Invalid search condition: {}\", searchCondition);\n@@ -152,7 +152,7 @@ public int searchCountInternal(final NodeCond searchCondition) throws InvalidSea\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public List<UserTO> list() {\n         List<SyncopeUser> users =\n                 userDAO.findAll(EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()));\n@@ -167,7 +167,7 @@ public List<UserTO> list() {\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/list/{page}/{size}\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public List<UserTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"size\") final int size) {\n         Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n \n@@ -182,14 +182,14 @@ public List<UserTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"si\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{userId}\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public UserTO read(@PathVariable(\"userId\") final Long userId) {\n         return binder.getUserTO(userId);\n     }\n \n     @PreAuthorize(\"#username == authentication.name or hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/readByUsername/{username}\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public UserTO read(@PathVariable final String username) {\n         return binder.getUserTO(username);\n     }\n@@ -203,7 +203,7 @@ public UserTO read() {\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/search\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public List<UserTO> search(@RequestBody final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n@@ -212,13 +212,11 @@ public List<UserTO> search(@RequestBody final NodeCond searchCondition)\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/search/{page}/{size}\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public List<UserTO> search(@RequestBody final NodeCond searchCondition, @PathVariable(\"page\") final int page,\n             @PathVariable(\"size\") final int size)\n             throws InvalidSearchConditionException {\n \n-        LOG.debug(\"User search called with condition {}\", searchCondition);\n-\n         if (!searchCondition.isValid()) {\n             LOG.error(\"Invalid search condition: {}\", searchCondition);\n             throw new InvalidSearchConditionException();\n@@ -245,8 +243,6 @@ public UserTO create(final HttpServletResponse response, @RequestBody final User\n \n     @PreAuthorize(\"hasRole('USER_CREATE')\")\n     public UserTO createInternal(final UserTO userTO) {\n-        LOG.debug(\"User create called with {}\", userTO);\n-\n         // Check that this operation is allowed to be performed by caller\n         Set<Long> requestRoleIds = new HashSet<Long>(userTO.getMemberships().size());\n         for (MembershipTO membership : userTO.getMemberships()) {\n@@ -265,7 +261,6 @@ public UserTO createInternal(final UserTO userTO) {\n         /*\n          * Actual operations: workflow, propagation, notification\n          */\n-\n         WorkflowResult<Map.Entry<Long, Boolean>> created = uwfAdapter.create(actual);\n \n         List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(\n@@ -281,17 +276,12 @@ public UserTO createInternal(final UserTO userTO) {\n \n         final UserTO savedTO = binder.getUserTO(created.getResult().getKey());\n         savedTO.setPropagationStatusTOs(propagationReporter.getStatuses());\n-\n-        LOG.debug(\"About to return created user\\n{}\", savedTO);\n-\n         return savedTO;\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n     public UserTO update(@RequestBody final UserMod userMod) {\n-        LOG.debug(\"User update called with {}\", userMod);\n-\n         // AttributableMod transformation (if configured)\n         UserMod actual = attrTransformer.transform(userMod);\n         LOG.debug(\"Transformed: {}\", actual);\n@@ -365,15 +355,12 @@ public UserTO update(@RequestBody final UserMod userMod) {\n         // 4. prepare result, including propagation status on external resources\n         final UserTO updatedTO = binder.getUserTO(updated.getResult().getKey());\n         updatedTO.setPropagationStatusTOs(propagationReporter.getStatuses());\n-\n-        LOG.debug(\"About to return updated user\\n{}\", updatedTO);\n-\n         return updatedTO;\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/activate/{userId}\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public UserTO activate(@PathVariable(\"userId\") final Long userId,\n             @RequestParam(required = true) final String token) {\n \n@@ -382,21 +369,17 @@ public UserTO activate(@PathVariable(\"userId\") final Long userId,\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/activate/{userId}\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public UserTO activate(@PathVariable(\"userId\") final Long userId,\n             @RequestParam(required = true) final String token,\n             @RequestBody final PropagationRequestTO propagationRequestTO) {\n \n-        LOG.debug(\"About to activate \" + userId);\n-\n-        SyncopeUser user = binder.getUserFromId(userId);\n-\n-        return setStatus(user, token, propagationRequestTO, true, \"activate\");\n+        return setStatus(binder.getUserFromId(userId), token, propagationRequestTO, true, \"activate\");\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/activateByUsername/{username}\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public UserTO activate(@PathVariable(\"username\") final String username,\n             @RequestParam(required = true) final String token) {\n \n@@ -405,113 +388,89 @@ public UserTO activate(@PathVariable(\"username\") final String username,\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/activateByUsername/{username}\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public UserTO activate(@PathVariable(\"username\") final String username,\n             @RequestParam(required = true) final String token,\n             @RequestBody final PropagationRequestTO propagationRequestTO) {\n \n-        LOG.debug(\"About to activate \" + username);\n-\n-        SyncopeUser user = binder.getUserFromUsername(username);\n-\n-        return setStatus(user, token, propagationRequestTO, true, \"activate\");\n+        return setStatus(binder.getUserFromUsername(username), token, propagationRequestTO, true, \"activate\");\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/suspend/{userId}\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public UserTO suspend(@PathVariable(\"userId\") final Long userId) {\n \n         return suspend(userId, null);\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/suspend/{userId}\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public UserTO suspend(@PathVariable(\"userId\") final Long userId,\n             @RequestBody final PropagationRequestTO propagationRequestTO) {\n \n-        LOG.debug(\"About to suspend \" + userId);\n-\n-        SyncopeUser user = binder.getUserFromId(userId);\n-\n-        return setStatus(user, null, propagationRequestTO, false, \"suspend\");\n+        return setStatus(binder.getUserFromId(userId), null, propagationRequestTO, false, \"suspend\");\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/suspendByUsername/{username}\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public UserTO suspend(@PathVariable(\"username\") final String username) {\n \n         return suspend(username, null);\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/suspendByUsername/{username}\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public UserTO suspend(@PathVariable(\"username\") final String username,\n             @RequestBody final PropagationRequestTO propagationRequestTO) {\n \n-        LOG.debug(\"About to suspend \" + username);\n-\n-        SyncopeUser user = binder.getUserFromUsername(username);\n-\n-        return setStatus(user, null, propagationRequestTO, false, \"suspend\");\n+        return setStatus(binder.getUserFromUsername(username), null, propagationRequestTO, false, \"suspend\");\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/reactivate/{userId}\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public UserTO reactivate(@PathVariable(\"userId\") final Long userId) {\n \n         return reactivate(userId, null);\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/reactivate/{userId}\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public UserTO reactivate(@PathVariable(\"userId\") final Long userId,\n             @RequestBody final PropagationRequestTO propagationRequestTO) {\n \n-        LOG.debug(\"About to reactivate \" + userId);\n-\n-        SyncopeUser user = binder.getUserFromId(userId);\n-\n-        return setStatus(user, null, propagationRequestTO, true, \"reactivate\");\n+        return setStatus(binder.getUserFromId(userId), null, propagationRequestTO, true, \"reactivate\");\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/reactivateByUsername/{username}\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public UserTO reactivate(@PathVariable(\"username\") final String username) {\n         return reactivate(username, null);\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/reactivateByUsername/{username}\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public UserTO reactivate(@PathVariable(\"username\") final String username,\n             @RequestBody final PropagationRequestTO propagationRequestTO) {\n \n-        LOG.debug(\"About to reactivate \" + username);\n-\n-        SyncopeUser user = binder.getUserFromUsername(username);\n-\n-        return setStatus(user, null, propagationRequestTO, true, \"reactivate\");\n+        return setStatus(binder.getUserFromUsername(username), null, propagationRequestTO, true, \"reactivate\");\n     }\n \n     @PreAuthorize(\"hasRole('USER_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{userId}\")\n     public UserTO delete(@PathVariable(\"userId\") final Long userId) {\n-        LOG.debug(\"User delete called with {}\", userId);\n-\n         return doDelete(userId);\n     }\n \n     @PreAuthorize(\"hasRole('USER_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/deleteByUsername/{username}\")\n     public UserTO delete(@PathVariable final String username) {\n-        LOG.debug(\"User delete called with {}\", username);\n-\n         UserTO result = binder.getUserTO(username);\n         long userId = result.getId();\n \n@@ -521,51 +480,43 @@ public UserTO delete(@PathVariable final String username) {\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/execute/workflow/{taskId}\")\n     public UserTO executeWorkflow(@RequestBody final UserTO userTO, @PathVariable(\"taskId\") final String taskId) {\n-        LOG.debug(\"About to execute {} on {}\", taskId, userTO.getId());\n-\n         WorkflowResult<Long> updated = uwfAdapter.execute(userTO, taskId);\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n                 new WorkflowResult<Map.Entry<Long, Boolean>>(new SimpleEntry<Long, Boolean>(updated.getResult(), null),\n-                updated.getPropByRes(), updated.getPerformedTasks()));\n+                        updated.getPropByRes(), updated.getPerformedTasks()));\n \n         taskExecutor.execute(tasks);\n \n-        final UserTO savedTO = binder.getUserTO(updated.getResult());\n-\n-        LOG.debug(\"About to return updated user\\n{}\", savedTO);\n-\n-        return savedTO;\n+        return binder.getUserTO(updated.getResult());\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/workflow/form/list\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public List<WorkflowFormTO> getForms() {\n         return uwfAdapter.getForms();\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_READ') and hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/workflow/form/{userId}\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public WorkflowFormTO getFormForUser(@PathVariable(\"userId\") final Long userId) {\n         SyncopeUser user = binder.getUserFromId(userId);\n         return uwfAdapter.getForm(user.getWorkflowId());\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_CLAIM')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/workflow/form/claim/{taskId}\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public WorkflowFormTO claimForm(@PathVariable(\"taskId\") final String taskId) {\n         return uwfAdapter.claimForm(taskId, SecurityContextHolder.getContext().getAuthentication().getName());\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_SUBMIT')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/workflow/form/submit\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public UserTO submitForm(@RequestBody final WorkflowFormTO form) {\n-        LOG.debug(\"About to process form {}\", form);\n-\n         WorkflowResult<Map.Entry<Long, String>> updated = uwfAdapter.submitForm(form,\n                 SecurityContextHolder.getContext().getAuthentication().getName());\n \n@@ -574,28 +525,22 @@ public UserTO submitForm(@RequestBody final WorkflowFormTO form) {\n         if (updated.getPropByRes() != null && !updated.getPropByRes().isEmpty()) {\n             List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n                     new WorkflowResult<Map.Entry<Long, Boolean>>(\n-                    new SimpleEntry<Long, Boolean>(updated.getResult().getKey(), Boolean.TRUE),\n-                    updated.getPropByRes(),\n-                    updated.getPerformedTasks()),\n+                            new SimpleEntry<Long, Boolean>(updated.getResult().getKey(), Boolean.TRUE),\n+                            updated.getPropByRes(),\n+                            updated.getPerformedTasks()),\n                     updated.getResult().getValue(),\n                     null,\n                     null,\n                     null);\n             taskExecutor.execute(tasks);\n         }\n \n-        final UserTO savedTO = binder.getUserTO(updated.getResult().getKey());\n-\n-        LOG.debug(\"About to return user after form processing\\n{}\", savedTO);\n-\n-        return savedTO;\n+        return binder.getUserTO(updated.getResult().getKey());\n     }\n \n     protected UserTO setStatus(final SyncopeUser user, final String token,\n             final PropagationRequestTO propagationRequestTO, final boolean status, final String task) {\n \n-        LOG.debug(\"About to set status of {}\" + user);\n-\n         WorkflowResult<Long> updated;\n         if (propagationRequestTO == null || propagationRequestTO.isOnSyncope()) {\n             updated = setStatusOnWfAdapter(user, token, task);\n@@ -621,9 +566,6 @@ protected UserTO setStatus(final SyncopeUser user, final String token,\n \n         final UserTO savedTO = binder.getUserTO(updated.getResult());\n         savedTO.setPropagationStatusTOs(propReporter.getStatuses());\n-\n-        LOG.debug(\"About to return updated user\\n{}\", savedTO);\n-\n         return savedTO;\n     }\n \n@@ -662,7 +604,6 @@ protected UserTO doDelete(final Long userId) {\n         // information could only be available after uwfAdapter.delete(), which\n         // will also effectively remove user from db, thus making virtually\n         // impossible by NotificationManager to fetch required user information\n-\n         List<PropagationTask> tasks = propagationManager.getUserDeleteTaskIds(userId);\n \n         final UserTO userTO = new UserTO();\n@@ -681,8 +622,6 @@ protected UserTO doDelete(final Long userId) {\n \n         uwfAdapter.delete(userId);\n \n-        LOG.debug(\"User successfully deleted: {}\", userId);\n-\n         return userTO;\n     }\n \n@@ -692,8 +631,6 @@ protected UserTO doDelete(final Long userId) {\n             + \"#bulkAction.operation == #bulkAction.operation.SUSPEND))\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/bulk\")\n     public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n-        LOG.debug(\"Bulk action '{}' called on '{}'\", bulkAction.getOperation(), bulkAction.getTargets());\n-\n         BulkActionRes res = new BulkActionRes();\n \n         switch (bulkAction.getOperation()) {"},{"sha":"d311d498c753be3257d7757eb9e738f3b69bd848","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserRequestController.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -75,8 +75,6 @@ public UserRequestTO create(@RequestBody final UserTO userTO) {\n             throw new UnauthorizedRoleException(-1L);\n         }\n \n-        LOG.debug(\"Request user create called with {}\", userTO);\n-\n         try {\n             binder.testCreate(userTO);\n         } catch (RollbackException e) {\n@@ -91,8 +89,6 @@ public UserRequestTO create(@RequestBody final UserTO userTO) {\n     @PreAuthorize(\"isAuthenticated()\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n     public UserRequestTO update(@RequestBody final UserMod userMod) {\n-        LOG.debug(\"Request user update called with {}\", userMod);\n-\n         try {\n             binder.testUpdate(userMod);\n         } catch (RollbackException e) {\n@@ -129,8 +125,6 @@ public UserRequestTO read(@PathVariable(\"requestId\") final Long requestId) {\n     @PreAuthorize(\"isAuthenticated()\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{userId}\")\n     public UserRequestTO delete(@PathVariable(\"userId\") final Long userId) {\n-        LOG.debug(\"Request user delete called with {}\", userId);\n-\n         try {\n             binder.testDelete(userId);\n         } catch (RollbackException e) {\n@@ -164,7 +158,8 @@ protected UserRequestTO resolveReference(final Method method, final Object... ob\n \n         if (ArrayUtils.isNotEmpty(obj) && obj[0] instanceof Long\n                 && (\"deleteRequest\".equals(method.getName()) || \"read\".equals(method.getName()))) {\n-            final UserRequest request = userRequestDAO.find((Long) obj[0]);\n+\n+            UserRequest request = userRequestDAO.find((Long) obj[0]);\n             result = request == null ? null : binder.getUserRequestTO(request);\n         } else {\n             result = null;"},{"sha":"4b17972e7db201fc6dd8edc6a94eded6df827470","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/VirtualSchemaController.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -139,8 +139,9 @@ public VirtualSchemaTO delete(@PathVariable(\"kind\") final String kind,\n      * {@inheritDoc}\n      */\n     @Override\n-    protected VirtualSchemaTO resolveReference(final Method method, final Object... args) throws\n-            UnresolvedReferenceException {\n+    protected VirtualSchemaTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n         String kind = null;\n         String name = null;\n "},{"sha":"dfe28f7537239a996c32e467bf95a3f19f3e87d0","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -38,11 +38,10 @@ under the License.\n   <import resource=\"classpath:META-INF/cxf/cxf-servlet.xml\"/>\n \n   <context:component-scan base-package=\"org.apache.syncope.core.rest.controller\"/>\n+  <bean class=\"org.apache.syncope.core.rest.controller.ControllerHandler\"/>\n \n   <!-- CXF Configuration - BEGIN -->\n-  <context:component-scan base-package=\"org.apache.syncope.core.services\"/>\n-  \n-  <bean id=\"controllerHandler\" name=\"controllerHandler\" class=\"org.apache.syncope.core.services.ControllerHandler\" />\n+  <context:component-scan base-package=\"org.apache.syncope.core.services\"/>  \n \n   <bean id=\"jaxbProvider\" class=\"org.apache.cxf.jaxrs.provider.JAXBElementProvider\">\n     <property name=\"depthProperties\">"},{"sha":"95df9acce2efa82230644db9ae913b8382ee64d8","filename":"core/src/test/java/org/apache/syncope/core/rest/VirtualSchemaTestITCase.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61be542bec77bdbe92518963b09e527466ca55ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java?ref=61be542bec77bdbe92518963b09e527466ca55ad","patch":"@@ -73,12 +73,10 @@ public void create() {\n \n     @Test\n     public void delete() {\n-        VirtualSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaType.VIRTUAL,\n-                \"rvirtualdata\");\n+        VirtualSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaType.VIRTUAL, \"rvirtualdata\");\n         assertNotNull(schema);\n \n-        schemaService.delete(AttributableType.ROLE, SchemaType.VIRTUAL,\n-                schema.getName());\n+        schemaService.delete(AttributableType.ROLE, SchemaType.VIRTUAL, schema.getName());\n \n         Throwable t = null;\n         try {"}]}