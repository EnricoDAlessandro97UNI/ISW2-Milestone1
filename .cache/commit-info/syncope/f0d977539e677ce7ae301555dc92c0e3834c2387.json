{"sha":"f0d977539e677ce7ae301555dc92c0e3834c2387","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYwZDk3NzUzOWU2NzdjZTdhZTMwMTU1NWRjOTJjMGUzODM0YzIzODc=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-02-04T18:22:00Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-02-04T18:22:00Z"},"message":"SYNCOPE-258: provided feature on the core; the next step will be done on the console ...\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1442286 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a0ea2612c33fd53eb24f1b900b156145391e5470","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a0ea2612c33fd53eb24f1b900b156145391e5470"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f0d977539e677ce7ae301555dc92c0e3834c2387","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f0d977539e677ce7ae301555dc92c0e3834c2387","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f0d977539e677ce7ae301555dc92c0e3834c2387","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f0d977539e677ce7ae301555dc92c0e3834c2387/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"36a2b0bd551954d0364b279ddf50c541142904ee","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/36a2b0bd551954d0364b279ddf50c541142904ee","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/36a2b0bd551954d0364b279ddf50c541142904ee"}],"stats":{"total":341,"additions":307,"deletions":34},"files":[{"sha":"9c8fb599c7857a51cc9cf771dc6ac9e08fdc0447","filename":"common/src/main/java/org/apache/syncope/common/annotation/ClassList.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0d977539e677ce7ae301555dc92c0e3834c2387/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FClassList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0d977539e677ce7ae301555dc92c0e3834c2387/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FClassList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FClassList.java?ref=f0d977539e677ce7ae301555dc92c0e3834c2387","patch":"@@ -0,0 +1,26 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.annotation;\r\n+\r\n+import java.lang.annotation.Retention;\r\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\r\n+\r\n+@Retention(RUNTIME)\r\n+public @interface ClassList {\r\n+}\r"},{"sha":"92a599eda519444c0482f345972aeca2a54ea224","filename":"common/src/main/java/org/apache/syncope/common/types/AuditElements.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0d977539e677ce7ae301555dc92c0e3834c2387/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0d977539e677ce7ae301555dc92c0e3834c2387/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java?ref=f0d977539e677ce7ae301555dc92c0e3834c2387","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.common.types;\r\n \r\n import java.util.EnumSet;\r\n-\r\n import javax.xml.bind.annotation.XmlEnum;\r\n \r\n public final class AuditElements {\r\n@@ -135,7 +134,8 @@ public enum PolicySubCategory {\n         create,\r\n         read,\r\n         update,\r\n-        delete\r\n+        delete,\r\n+        getCorrelationRuleClasses\r\n \r\n     }\r\n \r"},{"sha":"88d26981fdd220b655c272a693aa4803775e6b01","filename":"common/src/main/java/org/apache/syncope/common/types/SyncPolicySpec.java","status":"modified","additions":27,"deletions":2,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0d977539e677ce7ae301555dc92c0e3834c2387/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0d977539e677ce7ae301555dc92c0e3834c2387/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncPolicySpec.java?ref=f0d977539e677ce7ae301555dc92c0e3834c2387","patch":"@@ -20,11 +20,10 @@\n \r\n import java.util.ArrayList;\r\n import java.util.List;\r\n-\r\n import javax.xml.bind.annotation.XmlElement;\r\n import javax.xml.bind.annotation.XmlElementWrapper;\r\n import javax.xml.bind.annotation.XmlType;\r\n-\r\n+import org.apache.syncope.common.annotation.ClassList;\r\n import org.apache.syncope.common.annotation.SchemaList;\r\n \r\n @XmlType\r\n@@ -38,12 +37,18 @@ public class SyncPolicySpec extends AbstractPolicySpec {\n     @SchemaList(extended = true)\r\n     private List<String> uAltSearchSchemas;\r\n \r\n+    @ClassList\r\n+    private String userJavaRule;\r\n+\r\n     /**\r\n      * SyncopeRole attributes and fields for matching during synchronization.\r\n      */\r\n     @SchemaList(extended = true)\r\n     private List<String> rAltSearchSchemas;\r\n \r\n+    @ClassList\r\n+    private String roleJavaRule;\r\n+\r\n     /**\r\n      * Conflict resolution action.\r\n      */\r\n@@ -85,4 +90,24 @@ public List<String> getrAltSearchSchemas() {\n     public void setrAltSearchSchemas(List<String> rAltSearchSchemas) {\r\n         this.rAltSearchSchemas = rAltSearchSchemas;\r\n     }\r\n+\r\n+    @XmlElementWrapper(name = \"roleJavaRule\")\r\n+    @XmlElement(name = \"roleJavaRule\")\r\n+    public String getRoleJavaRule() {\r\n+        return roleJavaRule;\r\n+    }\r\n+\r\n+    public void setRoleJavaRule(String roleJavaRule) {\r\n+        this.roleJavaRule = roleJavaRule;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"userJavaRule\")\r\n+    @XmlElement(name = \"userJavaRule\")\r\n+    public String getUserJavaRule() {\r\n+        return userJavaRule;\r\n+    }\r\n+\r\n+    public void setUserJavaRule(String userJavaRule) {\r\n+        this.userJavaRule = userJavaRule;\r\n+    }\r\n }\r"},{"sha":"073b31ce131da260bb73cebef9b15bdbb3f9ad2c","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PolicyBeanPanel.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0d977539e677ce7ae301555dc92c0e3834c2387/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0d977539e677ce7ae301555dc92c0e3834c2387/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java?ref=f0d977539e677ce7ae301555dc92c0e3834c2387","patch":"@@ -99,7 +99,6 @@ public PolicyBeanPanel(final String id, final AbstractPolicySpec policy) {\n                 fieldWrapper.setType(field.getType());\n \n                 final SchemaList schemaList = field.getAnnotation(SchemaList.class);\n-\n                 fieldWrapper.setSchemaList(schemaList);\n \n                 items.add(fieldWrapper);"},{"sha":"9f905a7b41a6a24def6e0d2f95556c7a16d3cb30","filename":"console/src/main/resources/org/apache/syncope/console/pages/PolicyModalPage.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0d977539e677ce7ae301555dc92c0e3834c2387/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0d977539e677ce7ae301555dc92c0e3834c2387/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties?ref=f0d977539e677ce7ae301555dc92c0e3834c2387","patch":"@@ -71,6 +71,9 @@ permittedLoginRetries=Maximum number of subsequent failed logins\n # Sync policy specification properties\n #-----------------------------\n uAltSearchSchemas=Alternative attributes for local search (users)\n+rAltSearchSchemas=Alternative attributes for local search (roles)\n+userJavaRule=Custom user correlation rule\n+roleJavaRule=Custom role correlation rule\n conflictResolutionAction= Conflict resolution action\n #-----------------------------\n \n@@ -84,4 +87,3 @@ GLOBAL_PASSWORD=Global Password Policy\n SYNC=Synchronization Policy\n GLOBAL_SYNC=Global Synchronization Policy\n #-----------------------------\n-rAltSearchSchemas=Alternative attributes for local search (roles)"},{"sha":"c06c03e3d90d211dd26f628fed8e813a97db20d7","filename":"core/pom.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=f0d977539e677ce7ae301555dc92c0e3834c2387","patch":"@@ -442,6 +442,8 @@ under the License.\n                 </unzip>\n                 <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/sync/TestSyncActions.class\" \n                       todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/sync\"/>\n+                <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/sync/TestSyncRule.class\" \n+                      todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/sync\"/>\n                 <copy file=\"${project.build.directory}/test-classes/db.jsp\" todir=\"${cargo.run.dir}\"/>\n                 <copy todir=\"${cargo.run.dir}/WEB-INF/classes\" includeEmptyDirs=\"false\">\n                   <fileset dir=\"${project.build.directory}/test-classes\">"},{"sha":"b7443faf05cdc55e6d4669241c21edb700d63e1b","filename":"core/src/main/java/org/apache/syncope/core/init/ImplementationClassNamesLoader.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java?ref=f0d977539e677ce7ae301555dc92c0e3834c2387","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.core.report.ReportJob;\n import org.apache.syncope.core.report.Reportlet;\n import org.apache.syncope.core.sync.SyncActions;\n+import org.apache.syncope.core.sync.SyncRule;\n import org.apache.syncope.core.sync.impl.SyncJob;\n import org.quartz.Job;\n import org.slf4j.Logger;\n@@ -54,6 +55,7 @@ public enum Type {\n         REPORTLET,\n         JOB,\n         SYNC_ACTIONS,\n+        SYNC_CORRELATION_RULES,\n         PROPAGATION_ACTIONS,\n         VALIDATOR\n \n@@ -100,6 +102,10 @@ public void load() {\n                     if (interfaces.contains(SyncActions.class) && !metadata.isAbstract()) {\n                         classNames.get(Type.SYNC_ACTIONS).add(metadata.getClassName());\n                     }\n+                    \n+                    if (interfaces.contains(SyncRule.class) && !metadata.isAbstract()) {\n+                        classNames.get(Type.SYNC_CORRELATION_RULES).add(metadata.getClassName());\n+                    }\n \n                     if (interfaces.contains(PropagationActions.class) && !metadata.isAbstract()) {\n                         classNames.get(Type.PROPAGATION_ACTIONS).add(metadata.getClassName());"},{"sha":"bd2b748856e8304a71e68f0ba56598c45e052352","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/Policy.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java?ref=f0d977539e677ce7ae301555dc92c0e3834c2387","patch":"@@ -24,7 +24,6 @@\n import javax.persistence.Id;\n import javax.persistence.Lob;\n import javax.validation.constraints.NotNull;\n-\n import org.apache.syncope.common.types.AbstractPolicySpec;\n import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.core.persistence.validation.entity.PolicyCheck;"},{"sha":"6af9267535268650f6d58744c9af6df67f115dd5","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/SyncPolicy.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncPolicy.java?ref=f0d977539e677ce7ae301555dc92c0e3834c2387","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.beans;\n \n import javax.persistence.Entity;\n-\n import org.apache.syncope.common.types.PolicyType;\n \n @Entity"},{"sha":"9c00cda612f19bcac7abe2cb2757b4e2ae26bf05","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":27,"deletions":4,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=f0d977539e677ce7ae301555dc92c0e3834c2387","patch":"@@ -21,19 +21,22 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Locale;\n+import java.util.Set;\n \n import javax.servlet.http.HttpServletResponse;\n \n import org.apache.syncope.common.to.AccountPolicyTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n import org.apache.syncope.common.to.PolicyTO;\n import org.apache.syncope.common.to.SyncPolicyTO;\n+import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.PolicySubCategory;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.core.audit.AuditManager;\n+import org.apache.syncope.core.init.ImplementationClassNamesLoader;\n import org.apache.syncope.core.persistence.beans.AccountPolicy;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n import org.apache.syncope.core.persistence.beans.Policy;\n@@ -48,11 +51,15 @@\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.servlet.ModelAndView;\n \n @Controller\n @RequestMapping(\"/policy\")\n public class PolicyController extends AbstractController {\n \n+    @Autowired\n+    private ImplementationClassNamesLoader classNamesLoader;\n+\n     @Autowired\n     private AuditManager auditManager;\n \n@@ -166,7 +173,8 @@ public List<PolicyTO> listByType(@PathVariable(\"kind\") final String kind) {\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/password/global/read\")\n-    public PasswordPolicyTO getGlobalPasswordPolicy() throws NotFoundException {\n+    public PasswordPolicyTO getGlobalPasswordPolicy()\n+            throws NotFoundException {\n \n         LOG.debug(\"Reading global password policy\");\n \n@@ -183,7 +191,8 @@ public PasswordPolicyTO getGlobalPasswordPolicy() throws NotFoundException {\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/account/global/read\")\n-    public AccountPolicyTO getGlobalAccountPolicy() throws NotFoundException {\n+    public AccountPolicyTO getGlobalAccountPolicy()\n+            throws NotFoundException {\n \n         LOG.debug(\"Reading global account policy\");\n \n@@ -200,7 +209,8 @@ public AccountPolicyTO getGlobalAccountPolicy() throws NotFoundException {\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/sync/global/read\")\n-    public SyncPolicyTO getGlobalSyncPolicy() throws NotFoundException {\n+    public SyncPolicyTO getGlobalSyncPolicy()\n+            throws NotFoundException {\n \n         LOG.debug(\"Reading global sync policy\");\n \n@@ -235,7 +245,8 @@ public PolicyTO read(@PathVariable(\"id\") final Long id)\n \n     @PreAuthorize(\"hasRole('POLICY_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{id}\")\n-    public PolicyTO delete(@PathVariable(\"id\") final Long id) throws NotFoundException {\n+    public PolicyTO delete(@PathVariable(\"id\") final Long id)\n+            throws NotFoundException {\n         Policy policy = policyDAO.find(id);\n         if (policy == null) {\n             throw new NotFoundException(\"Policy \" + id + \" not found\");\n@@ -249,4 +260,16 @@ public PolicyTO delete(@PathVariable(\"id\") final Long id) throws NotFoundExcepti\n \n         return policyToDelete;\n     }\n+\n+    @PreAuthorize(\"hasRole('POLICY_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/correlationRuleClasses\")\n+    public ModelAndView getCorrelationRuleClasses() {\n+        final Set<String> actionsClasses =\n+                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.SYNC_CORRELATION_RULES);\n+\n+        auditManager.audit(Category.policy, AuditElements.PolicySubCategory.getCorrelationRuleClasses,\n+                Result.success, \"Successfully listed all correlation rule classes: \" + actionsClasses.size());\n+\n+        return new ModelAndView().addObject(actionsClasses);\n+    }\n }"},{"sha":"6bb429898e4fc7ecd7872f191f92edd7efcfb91a","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncRule.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncRule.java?ref=f0d977539e677ce7ae301555dc92c0e3834c2387","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.sync;\n+\n+import org.apache.syncope.common.search.NodeCond;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+\n+/**\n+ * Interface for correlation rule to be evaluated during SyncJob execution.\n+ */\n+public interface SyncRule {\n+\n+    /**\n+     * Return a search condition.\n+     *\n+     * @param connObj connector object.\n+     * @return search condition.\n+     */\n+    NodeCond getSearchCond(final ConnectorObject connObj);\n+}"},{"sha":"e446eea7c81c8a22c8b55df1214daf9fa2ac1e0d","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":27,"deletions":7,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=f0d977539e677ce7ae301555dc92c0e3834c2387","patch":"@@ -69,6 +69,7 @@\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.sync.SyncActions;\n import org.apache.syncope.core.sync.SyncResult;\n+import org.apache.syncope.core.sync.SyncRule;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.workflow.WorkflowResult;\n@@ -332,10 +333,13 @@ private List<Long> findByAccountIdItem(final String uid, final AttributableUtil\n         return result;\n     }\n \n-    private List<Long> findByAttributableSearch(final ConnectorObject connObj, final SyncPolicySpec policySpec,\n-            final AttributableUtil attrUtil) {\n+    private List<Long> findByCorrelationRule(\n+            final ConnectorObject connObj, final SyncRule rule, final AttributableUtil attrUtil) {\n+        return search(rule.getSearchCond(connObj), attrUtil);\n+    }\n \n-        final List<Long> result = new ArrayList<Long>();\n+    private List<Long> findByAttributableSearch(\n+            final ConnectorObject connObj, final List<String> altSearchSchemas, final AttributableUtil attrUtil) {\n \n         // search for external attribute's name/value of each specified name\n \n@@ -348,7 +352,7 @@ private List<Long> findByAttributableSearch(final ConnectorObject connObj, final\n         // search for user/role by attribute(s) specified in the policy\n         NodeCond searchCond = null;\n \n-        for (String schema : attrUtil.getAltSearchSchemas(policySpec)) {\n+        for (String schema : altSearchSchemas) {\n             Attribute value = extValues.get(schema);\n \n             AttributeCond.Type type;\n@@ -390,6 +394,12 @@ private List<Long> findByAttributableSearch(final ConnectorObject connObj, final\n                     : NodeCond.getAndCond(searchCond, nodeCond);\n         }\n \n+        return search(searchCond, attrUtil);\n+    }\n+\n+    private List<Long> search(final NodeCond searchCond, final AttributableUtil attrUtil) {\n+        final List<Long> result = new ArrayList<Long>();\n+\n         final List<AbstractAttributable> subjects = searchDAO.search(\n                 EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCond, attrUtil);\n         for (AbstractAttributable subject : subjects) {\n@@ -413,9 +423,18 @@ public List<Long> findExisting(final String uid, final ConnectorObject connObj,\n             policySpec = (SyncPolicySpec) syncTask.getResource().getSyncPolicy().getSpecification();\n         }\n \n-        return policySpec == null || attrUtil.getAltSearchSchemas(policySpec).isEmpty()\n+        SyncRule syncRule = null;\n+        List<String> altSearchSchemas = null;\n+\n+        if (policySpec != null) {\n+            syncRule = attrUtil.getCorrelationRule(policySpec);\n+            altSearchSchemas = attrUtil.getAltSearchSchemas(policySpec);\n+        }\n+        \n+        return syncRule == null ? altSearchSchemas == null\n                 ? findByAccountIdItem(uid, attrUtil)\n-                : findByAttributableSearch(connObj, policySpec, attrUtil);\n+                : findByAttributableSearch(connObj, altSearchSchemas, attrUtil)\n+                : findByCorrelationRule(connObj, syncRule, attrUtil);\n     }\n \n     public Long findMatchingAttributableId(final ObjectClass objectClass, final String name) {\n@@ -645,7 +664,8 @@ protected void updateRole(final Long id, SyncDelta delta, final boolean dryRun,\n     }\n \n     protected List<SyncResult> update(SyncDelta delta, final List<Long> subjects, final AttributableUtil attrUtil,\n-            final boolean dryRun) throws JobExecutionException {\n+            final boolean dryRun)\n+            throws JobExecutionException {\n \n         if (!syncTask.isPerformUpdate()) {\n             LOG.debug(\"SyncTask not configured for update\");"},{"sha":"5230c68932bad2c70bb206eae89ebbec7b856aae","filename":"core/src/main/java/org/apache/syncope/core/util/AttributableUtil.java","status":"modified","additions":46,"deletions":11,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java?ref=f0d977539e677ce7ae301555dc92c0e3834c2387","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Collections;\n import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.RoleTO;\n@@ -66,11 +67,18 @@\n import org.apache.syncope.core.persistence.beans.user.USchema;\n import org.apache.syncope.core.persistence.beans.user.UVirAttr;\n import org.apache.syncope.core.persistence.beans.user.UVirSchema;\n+import org.apache.syncope.core.sync.SyncRule;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.slf4j.LoggerFactory;\n \n @SuppressWarnings(\"unchecked\")\n public class AttributableUtil {\n \n+    /**\n+     * Logger.\n+     */\n+    protected static final org.slf4j.Logger LOG = LoggerFactory.getLogger(AttributableUtil.class);\n+\n     private final AttributableType type;\n \n     public static AttributableUtil getInstance(final AttributableType type) {\n@@ -579,22 +587,49 @@ public <T extends AbstractAttrValue> T newAttrUniqueValue() {\n     public List<String> getAltSearchSchemas(final SyncPolicySpec policySpec) {\n         List<String> result = Collections.EMPTY_LIST;\n \n-        if (policySpec != null) {\n-            switch (type) {\n-                case USER:\n-                    result = policySpec.getuAltSearchSchemas();\n-                    break;\n-                case ROLE:\n-                    result = policySpec.getrAltSearchSchemas();\n-                    break;\n-                case MEMBERSHIP:\n-                default:\n-            }\n+        switch (type) {\n+            case USER:\n+                result = policySpec.getuAltSearchSchemas();\n+                break;\n+            case ROLE:\n+                result = policySpec.getrAltSearchSchemas();\n+                break;\n+            case MEMBERSHIP:\n+            default:\n         }\n \n         return result;\n     }\n \n+    public SyncRule getCorrelationRule(final SyncPolicySpec policySpec) {\n+\n+        String clazz;\n+\n+        switch (type) {\n+            case USER:\n+                clazz = policySpec.getUserJavaRule();\n+                break;\n+            case ROLE:\n+                clazz = policySpec.getRoleJavaRule();\n+                break;\n+            case MEMBERSHIP:\n+            default:\n+                clazz = null;\n+        }\n+\n+        SyncRule res = null;\n+\n+        if (StringUtils.isNotBlank(clazz)) {\n+            try {\n+                res = (SyncRule) Class.forName(clazz).newInstance();\n+            } catch (Exception e) {\n+                LOG.error(\"Failure instantiating correlation rule class '{}'\", clazz, e);\n+            }\n+        }\n+\n+        return res;\n+    }\n+\n     public String searchView() {\n         String result = \"\";\n "},{"sha":"5cb04c33cab0a12205ad711b0c1bcff1c3248f1b","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/PolicyTest.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java?ref=f0d977539e677ce7ae301555dc92c0e3834c2387","patch":"@@ -101,13 +101,23 @@ public void saveSecondPasswordPolicy() {\n     @Test\n     public void create() {\n         SyncPolicy policy = new SyncPolicy();\n-        policy.setSpecification(new SyncPolicySpec());\n+\n+        final String syncURuleName = \"net.tirasa.sync.correlation.TirasaURule\";\n+        final String syncRRuleName = \"net.tirasa.sync.correlation.TirasaRRule\";\n+\n+        SyncPolicySpec syncPolicySpec = new SyncPolicySpec();\n+        syncPolicySpec.setUserJavaRule(syncURuleName);\n+        syncPolicySpec.setRoleJavaRule(syncRRuleName);\n+\n+        policy.setSpecification(syncPolicySpec);\n         policy.setDescription(\"Sync policy\");\n \n         policy = policyDAO.save(policy);\n \n         assertNotNull(policy);\n         assertEquals(PolicyType.SYNC, policy.getType());\n+        assertEquals(syncURuleName, ((SyncPolicySpec) policy.getSpecification()).getUserJavaRule());\n+        assertEquals(syncRRuleName, ((SyncPolicySpec) policy.getSpecification()).getRoleJavaRule());\n     }\n \n     @Test"},{"sha":"b11798802e8211b04392d568da13b47ede6003e0","filename":"core/src/test/java/org/apache/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=f0d977539e677ce7ae301555dc92c0e3834c2387","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.common.types.SyncPolicySpec;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.core.sync.TestSyncRule;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -111,6 +112,7 @@ public void create() {\n \n         assertNotNull(policyTO);\n         assertEquals(PolicyType.SYNC, policyTO.getType());\n+        assertEquals(TestSyncRule.class.getName(), ((SyncPolicySpec) policyTO.getSpecification()).getUserJavaRule());\n     }\n \n     @Test\n@@ -166,8 +168,13 @@ public void delete() {\n \n     private SyncPolicyTO buildSyncPolicyTO() {\n         SyncPolicyTO policy = new SyncPolicyTO();\n-        policy.setSpecification(new SyncPolicySpec());\n+\n+        SyncPolicySpec spec = new SyncPolicySpec();\n+        spec.setUserJavaRule(TestSyncRule.class.getName());\n+\n+        policy.setSpecification(spec);\n         policy.setDescription(\"Sync policy\");\n+\n         return policy;\n     }\n }"},{"sha":"d32dc3fa27193187302e2dd49a0396d8eb3bf188","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":47,"deletions":1,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=f0d977539e677ce7ae301555dc92c0e3834c2387","patch":"@@ -47,6 +47,7 @@\n import org.apache.syncope.common.to.TaskExecTO;\n import org.apache.syncope.common.to.TaskTO;\n import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.types.TaskType;\n@@ -372,7 +373,8 @@ public void reconcileFromDB() {\n     }\n \n     @Test\n-    public void reconcileFromLDAP() throws InvalidSearchConditionException {\n+    public void reconcileFromLDAP()\n+            throws InvalidSearchConditionException {\n         // Update sync task\n         SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, 11L);\n         assertNotNull(task);\n@@ -777,6 +779,50 @@ public void issueSYNCOPE272() {\n         }\n     }\n \n+    @Test\n+    public void issueSYNCOPE258() {\n+        SyncTaskTO task = new SyncTaskTO();\n+        task.setName(\"Test Sync Rule\");\n+        task.setResource(\"ws-target-resource-2\");\n+        task.setFullReconciliation(true);\n+        task.setPerformCreate(true);\n+        task.setPerformDelete(true);\n+        task.setPerformUpdate(true);\n+\n+        Response response = taskService.create(task);\n+        SyncTaskTO actual = getObject(response, SyncTaskTO.class, taskService);\n+        assertNotNull(actual);\n+\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"s258_1@apache.org\");\n+        userTO.getResources().clear();\n+        userTO.addResource(\"ws-target-resource-2\");\n+\n+        userTO = createUser(userTO);\n+\n+        userTO = UserTestITCase.getUniqueSampleTO(\"s258_2@apache.org\");\n+        userTO.getResources().clear();\n+        userTO.addResource(\"ws-target-resource-2\");\n+\n+        userTO = createUser(userTO);\n+\n+        // change email in order to unmatch the second user\n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.addAttributeToBeRemoved(\"email\");\n+        userMod.addAttributeToBeUpdated(attributeMod(\"email\", \"s258@apache.org\"));\n+\n+        userTO = userService.update(userMod.getId(), userMod);\n+        \n+        execSyncTask(actual.getId(), 50, false);\n+\n+        SyncTaskTO executed = taskService.read(TaskType.SYNCHRONIZATION, actual.getId());\n+        assertEquals(1, executed.getExecutions().size());\n+\n+        // asser for just one match\n+        assertTrue(executed.getExecutions().get(0).getMessage().substring(0, 55) + \"...\",\n+                executed.getExecutions().get(0).getMessage().contains(\"[updated/failures]: 1/0\"));\n+    }\n+\n     /**\n      * remove initial and synchronized users to make test re-runnable\n      */"},{"sha":"b1302fabafdfc3c5c43f0b8f12715f07d0b04a9b","filename":"core/src/test/java/org/apache/syncope/core/sync/TestSyncRule.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FTestSyncRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FTestSyncRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FTestSyncRule.java?ref=f0d977539e677ce7ae301555dc92c0e3834c2387","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.sync;\n+\n+import org.apache.syncope.common.search.AttributeCond;\n+import org.apache.syncope.common.search.NodeCond;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+\n+public class TestSyncRule implements SyncRule {\n+\n+    @Override\n+    public NodeCond getSearchCond(ConnectorObject connObj) {\n+        AttributeCond cond = new AttributeCond();\n+        cond.setSchema(\"email\");\n+        cond.setType(AttributeCond.Type.EQ);\n+        cond.setExpression(connObj.getName().getNameValue());\n+\n+        return NodeCond.getLeafCond(cond);\n+    }\n+}"},{"sha":"53a8623322f3957e53a10f7316e9b3e222e77193","filename":"core/src/test/resources/content.xml","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0d977539e677ce7ae301555dc92c0e3834c2387/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=f0d977539e677ce7ae301555dc92c0e3834c2387","patch":"@@ -40,6 +40,7 @@ under the License.\n   <Policy DTYPE=\"AccountPolicy\" id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\" specification=\"%3Corg.apache.syncope.common.types.AccountPolicySpec%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E4%3C%2FminLength%3E%0A++%3CprefixesNotPermitted%3E%0A++++%3Cstring%3Enotpermitted1%3C%2Fstring%3E%0A++++%3Cstring%3Enotpermitted2%3C%2Fstring%3E%0A++%3C%2FprefixesNotPermitted%3E%0A++%3CallUpperCase%3Efalse%3C%2FallUpperCase%3E%0A++%3CallLowerCase%3Efalse%3C%2FallLowerCase%3E%0A++%3CpropagateSuspension%3Efalse%3C%2FpropagateSuspension%3E%0A++%3CpermittedLoginRetries%3E3%3C%2FpermittedLoginRetries%3E%0A%3C%2Forg.apache.syncope.common.types.AccountPolicySpec%3E\"/>\n   <Policy DTYPE=\"SyncPolicy\" id=\"7\" description=\"sync policy 1\" type=\"SYNC\" specification=\"%3Corg.apache.syncope.common.types.SyncPolicySpec%2F%3E\"/>\n   <Policy DTYPE=\"PasswordPolicy\" id=\"8\" description=\"sample password policy\" type=\"PASSWORD\" specification=\"%3Corg.apache.syncope.common.types.PasswordPolicySpec%3E%0A++%3ChistoryLength%3E0%3C%2FhistoryLength%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E10%3C%2FminLength%3E%0A++%3CnonAlphanumericRequired%3Etrue%3C%2FnonAlphanumericRequired%3E%0A++%3CalphanumericRequired%3Efalse%3C%2FalphanumericRequired%3E%0A++%3CdigitRequired%3Etrue%3C%2FdigitRequired%3E%0A++%3ClowercaseRequired%3Etrue%3C%2FlowercaseRequired%3E%0A++%3CuppercaseRequired%3Etrue%3C%2FuppercaseRequired%3E%0A++%3CmustStartWithDigit%3Etrue%3C%2FmustStartWithDigit%3E%0A++%3CmustntStartWithDigit%3Efalse%3C%2FmustntStartWithDigit%3E%0A++%3CmustEndWithDigit%3Etrue%3C%2FmustEndWithDigit%3E%0A++%3CmustntEndWithDigit%3Efalse%3C%2FmustntEndWithDigit%3E%0A++%3CmustStartWithNonAlpha%3Efalse%3C%2FmustStartWithNonAlpha%3E%0A++%3CmustStartWithAlpha%3Efalse%3C%2FmustStartWithAlpha%3E%0A++%3CmustntStartWithNonAlpha%3Efalse%3C%2FmustntStartWithNonAlpha%3E%0A++%3CmustntStartWithAlpha%3Efalse%3C%2FmustntStartWithAlpha%3E%0A++%3CmustEndWithNonAlpha%3Efalse%3C%2FmustEndWithNonAlpha%3E%0A++%3CmustEndWithAlpha%3Efalse%3C%2FmustEndWithAlpha%3E%0A++%3CmustntEndWithNonAlpha%3Efalse%3C%2FmustntEndWithNonAlpha%3E%0A++%3CmustntEndWithAlpha%3Efalse%3C%2FmustntEndWithAlpha%3E%0A++%3CprefixesNotPermitted%3E%0A++++%3Cstring%3Enotpermitted1%3C%2Fstring%3E%0A++++%3Cstring%3Enotpermitted2%3C%2Fstring%3E%0A++%3C%2FprefixesNotPermitted%3E%0A%3C%2Forg.apache.syncope.common.types.PasswordPolicySpec%3E\"/>\n+  <Policy DTYPE=\"SyncPolicy\" id=\"9\" description=\"sync policy with a rule\" type=\"SYNC\" specification=\"%3Corg.apache.syncope.common.types.SyncPolicySpec%3E%0A++%3CuserJavaRule%3Eorg.apache.syncope.core.sync.TestSyncRule%3C/userJavaRule%3E%0A++%3CroleJavaRule%3E%3C/roleJavaRule%3E%0A++%3CconflictResolutionAction%3EIGNORE%3C/conflictResolutionAction%3E%0A%3C/org.apache.syncope.common.types.SyncPolicySpec%3E\"/>\n     \n   <SyncopeUser id=\"1\" workflowId=\"0\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                username=\"user1\" creationDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n@@ -343,7 +344,8 @@ under the License.\n                     propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n   <ExternalResource name=\"ws-target-resource-2\" connector_id=\"100\"\n                     randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n-                    propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"FAILURES\" deleteTraceLevel=\"NONE\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n+                    propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"FAILURES\" deleteTraceLevel=\"NONE\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n+                    syncPolicy_id=\"9\"/>\n   <ExternalResource name=\"ws-target-resource-3\" connector_id=\"102\"\n                     randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"FAILURES\" deleteTraceLevel=\"NONE\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\""}]}