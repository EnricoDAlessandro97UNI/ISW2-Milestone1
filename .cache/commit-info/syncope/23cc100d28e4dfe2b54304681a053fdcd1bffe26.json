{"sha":"23cc100d28e4dfe2b54304681a053fdcd1bffe26","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjIzY2MxMDBkMjhlNGRmZTJiNTQzMDQ2ODFhMDUzZmRjZDFiZmZlMjY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-05-30T10:04:01Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-05-30T10:04:01Z"},"message":"[SYNCOPE-1455] SRA now working with routes defined in Core","tree":{"sha":"1486e14b6c5937bf4c3261b9d605007cfe1f5bb1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1486e14b6c5937bf4c3261b9d605007cfe1f5bb1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/23cc100d28e4dfe2b54304681a053fdcd1bffe26","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/23cc100d28e4dfe2b54304681a053fdcd1bffe26","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/23cc100d28e4dfe2b54304681a053fdcd1bffe26","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/23cc100d28e4dfe2b54304681a053fdcd1bffe26/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0486ab6f401540f7022ad827a2a138b827a0f4cf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0486ab6f401540f7022ad827a2a138b827a0f4cf","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0486ab6f401540f7022ad827a2a138b827a0f4cf"}],"stats":{"total":2836,"additions":2487,"deletions":349},"files":[{"sha":"c51466b743e5950d67d77abf20eb08c4d6890d98","filename":"archetype/pom.xml","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/archetype%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/archetype%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fpom.xml?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -42,7 +42,7 @@ under the License.\n       <extension>\n         <groupId>org.apache.maven.archetype</groupId>\n         <artifactId>archetype-packaging</artifactId>\n-        <version>3.0.1</version>\n+        <version>3.1.0</version>\n       </extension>\n     </extensions>\n \n@@ -334,6 +334,18 @@ under the License.\n         <directory>../fit/enduser-reference/src/main/webapp/WEB-INF</directory>\n         <targetPath>${project.build.outputDirectory}/archetype-resources/enduser/src/main/webapp/WEB-INF</targetPath>\n       </resource>\n+      \n+      <resource>\n+        <directory>../sra/src/main/resources</directory>\n+        <targetPath>${project.build.outputDirectory}/archetype-resources/sra/src/main/resources</targetPath>\n+      </resource>\n+      <resource>\n+        <directory>../sra/src/test/resources</directory>\n+        <targetPath>${project.build.outputDirectory}/archetype-resources/sra/src/main/resources</targetPath>\n+        <includes>\n+          <include>keymaster.properties</include>          \n+        </includes>\n+      </resource>\n     </resources>\n   </build>\n   "},{"sha":"f22b5fbff1baddf4a316efb22eed1f94ba8880c8","filename":"archetype/src/main/resources/META-INF/maven/archetype-metadata.xml","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/archetype%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fmaven%2Farchetype-metadata.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/archetype%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fmaven%2Farchetype-metadata.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fmaven%2Farchetype-metadata.xml?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -79,5 +79,25 @@ under the License.\n         </fileSet>\n       </fileSets>\n     </module>\n+    <module id=\"syncope-sra\" dir=\"sra\" name=\"syncope-sra\">\n+      <fileSets>\n+        <fileSet filtered=\"false\" encoding=\"UTF-8\">\n+          <directory>src/main/resources</directory>\n+        </fileSet>\n+        <fileSet filtered=\"false\" encoding=\"UTF-8\">\n+          <directory>src/test/resources</directory>\n+        </fileSet>\n+      </fileSets>\n+    </module>\n+    <module id=\"syncope-fit\" dir=\"fit\" name=\"syncope-fit\">\n+      <fileSets>\n+        <fileSet filtered=\"false\" encoding=\"UTF-8\">\n+          <directory>src/main/resources</directory>\n+        </fileSet>\n+        <fileSet filtered=\"false\" encoding=\"UTF-8\">\n+          <directory>src/test/resources</directory>\n+        </fileSet>\n+      </fileSets>\n+    </module>\n   </modules>\n </archetype-descriptor>"},{"sha":"2902c7352664ad914e37cfaf794d406d5ce9367f","filename":"archetype/src/main/resources/archetype-resources/enduser/pom.xml","status":"modified","additions":0,"deletions":177,"changes":177,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fenduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fenduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fenduser%2Fpom.xml?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -93,183 +93,6 @@ under the License.\n   </build>\n \n   <profiles>\n-    <profile>\n-      <id>embedded</id>\n-      \n-      <properties>\n-        <conf.directory>${project.build.directory}/test-classes</conf.directory>\n-      </properties>\n-      \n-      <dependencies>\n-        <dependency>\n-          <groupId>org.apache.syncope.fit</groupId>\n-          <artifactId>syncope-fit-build-tools</artifactId>\n-          <version>${syncope.version}</version>\n-          <type>war</type>\n-          <scope>test</scope>\n-        </dependency>\n-        <dependency>\n-          <groupId>com.h2database</groupId>\n-          <artifactId>h2</artifactId>\n-          <scope>test</scope>\n-        </dependency>\n-      </dependencies>\n-      \n-      <build>\n-        <defaultGoal>clean verify cargo:run</defaultGoal>  \n-        \n-        <plugins>\n-          <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-antrun-plugin</artifactId>\n-            <inherited>true</inherited>\n-            <executions>\n-              <execution>\n-                <id>addFlowableTestContent</id>\n-                <phase>prepare-package</phase>\n-                <configuration>\n-                  <target>\n-                    <taskdef resource=\"net/sf/antcontrib/antcontrib.properties\"\n-                             classpathref=\"maven.plugin.classpath\"/>\n-\n-                    <if>\n-                      <not>\n-                        <available file=\"../core/target/test-classes/backup/MasterContent.xml\"/>\n-                      </not>\n-                      <then>\n-                        <mkdir dir=\"../core/target/test-classes/backup\"/>\n-                        <copy file=\"../core/target/test-classes/domains/MasterContent.xml\" \n-                              todir=\"../core/target/test-classes/backup\"/>\n-                      </then>\n-                    </if>\n-                    <if>\n-                      <available file=\"../core/target/syncope/WEB-INF/lib/flowable-engine-${flowable.version}.jar\"/>\n-                      <then>\n-                        <xslt basedir=\"../core/target/test-classes/backup\" \n-                              includes=\"MasterContent.xml\"\n-                              destdir=\"../core/target/test-classes/domains\"\n-                              extension=\".xml\"\n-                              force=\"true\"\n-                              style=\"../core/src/test/resources/addFlowableToContent.xsl\"/>\n-                      </then>\n-                    </if>\n-                  </target>\n-                </configuration>\n-                <goals>\n-                  <goal>run</goal>\n-                </goals>\n-              </execution>\n-              <execution>\n-                <id>setupEmbeddedConf</id>\n-                <phase>package</phase>\n-                <configuration>\n-                  <target>\n-                    <delete dir=\"../core/target/syncope/WEB-INF/classes/domains\"/>\n-                    <copy todir=\"../core/target/syncope/WEB-INF/classes/domains\">\n-                      <fileset dir=\"../core/target/test-classes/domains\"/>\n-                    </copy>\n-                    <copy file=\"../core/target/test-classes/connid.properties\" \n-                          todir=\"../core/target/syncope/WEB-INF/classes\" \n-                          overwrite=\"true\"/>\n-                    <copy file=\"../core/target/test-classes/keymaster.properties\" \n-                          todir=\"../core/target/syncope/WEB-INF/classes\" \n-                          overwrite=\"true\"/>\n-\n-                    <copy file=\"../console/target/test-classes/keymaster.properties\" \n-                          todir=\"../console/target/syncope-console/WEB-INF/classes\" \n-                          overwrite=\"true\"/>\n-\n-                    <copy file=\"${project.build.directory}/test-classes/enduser.properties\" \n-                          todir=\"${project.build.directory}/${project.build.finalName}/WEB-INF/classes\" \n-                          overwrite=\"true\"/>                    \n-                    <copy file=\"${project.build.directory}/test-classes/keymaster.properties\" \n-                          todir=\"${project.build.directory}/${project.build.finalName}/WEB-INF/classes\" \n-                          overwrite=\"true\"/>                    \n-                    <copy file=\"${project.build.directory}/test-classes/customFormAttributes.json\" \n-                          todir=\"${project.build.directory}/${project.build.finalName}/WEB-INF/classes\" \n-                          overwrite=\"true\"/>\n-                    <copy file=\"${project.build.directory}/test-classes/customTemplate.json\" \n-                          todir=\"${project.build.directory}/${project.build.finalName}/WEB-INF/classes\" \n-                          overwrite=\"true\"/>\n-                  </target>\n-                </configuration>\n-                <goals>\n-                  <goal>run</goal>\n-                </goals>\n-              </execution>\n-            </executions>\n-            <dependencies>\n-              <dependency>\n-                <groupId>ant-contrib</groupId>\n-                <artifactId>ant-contrib</artifactId>\n-                <version>20020829</version>\n-              </dependency>\n-            </dependencies>\n-          </plugin>\n-      \n-          <plugin>\n-            <groupId>org.codehaus.cargo</groupId>\n-            <artifactId>cargo-maven2-plugin</artifactId>\n-            <inherited>true</inherited>\n-            <configuration>\n-              <container>\n-                <containerId>tomcat9x</containerId>\n-                <zipUrlInstaller>\n-                  <url>http://central.maven.org/maven2/org/apache/tomcat/tomcat/${tomcat.version}/tomcat-${tomcat.version}.zip</url>\n-                  <downloadDir>${settings.localRepository}/org/codehaus/cargo/cargo-container-archives</downloadDir>\n-                  <extractDir>${project.build.directory}/cargo/extract</extractDir>\n-                </zipUrlInstaller>\n-                <dependencies>\n-                  <dependency>\n-                    <groupId>com.h2database</groupId>\n-                    <artifactId>h2</artifactId>\n-                  </dependency>\n-                </dependencies>\n-                <timeout>300000</timeout>\n-                <log>${cargo.log}</log>\n-                <output>${cargo.output}</output> \n-              </container>\n-              <configuration>\n-                <properties>\n-                  <cargo.jvmargs>\n-                    -Dspring.profiles.active=embedded\n-                    -XX:+CMSClassUnloadingEnabled -Xmx1024m -Xms512m</cargo.jvmargs>\n-                </properties>\n-              </configuration>\n-              <deployables>\n-                <deployable>\n-                  <groupId>org.apache.syncope.fit</groupId>\n-                  <artifactId>syncope-fit-build-tools</artifactId>\n-                  <type>war</type>\n-                  <properties>\n-                    <context>syncope-fit-build-tools</context>\n-                  </properties>\n-                </deployable>\n-                <deployable>\n-                  <location>../core/target/syncope</location>\n-                  <properties>\n-                    <context>syncope</context>\n-                  </properties>\n-                </deployable>\n-                <deployable>\n-                  <location>../console/target/syncope-console</location>\n-                  <properties>\n-                    <context>syncope-console</context>\n-                  </properties>\n-                </deployable>\n-                <deployable>\n-                  <location>${project.build.directory}/${project.build.finalName}</location>\n-                  <properties>\n-                    <context>syncope-enduser</context>\n-                  </properties>\n-                </deployable>\n-              </deployables>\n-            </configuration>\n-          </plugin>\n-        </plugins>  \n-      </build>\n-    </profile>\n-\n     <profile>\n       <id>all</id>\n "},{"sha":"7c939d2b037e8c2fbdcd6e90b88f0dbf0bc896d5","filename":"archetype/src/main/resources/archetype-resources/fit/pom.xml","status":"added","additions":275,"deletions":0,"changes":275,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Ffit%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Ffit%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Ffit%2Fpom.xml?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -0,0 +1,275 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>${groupId}</groupId>\n+    <artifactId>${rootArtifactId}</artifactId>\n+    <version>${version}</version>\n+  </parent>\n+\n+  <name>Apache Syncope sample project - FIT</name>\n+  <groupId>${groupId}</groupId>\n+  <artifactId>${artifactId}</artifactId>\n+  <packaging>war</packaging>\n+\n+  <properties>\n+    <exec.skip>true</exec.skip>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.fit</groupId>\n+      <artifactId>syncope-fit-build-tools</artifactId>\n+      <version>${syncope.version}</version>\n+      <type>war</type>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.h2database</groupId>\n+      <artifactId>h2</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-install-plugin</artifactId>\n+        <configuration>\n+          <skip>true</skip>\n+        </configuration>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-deploy-plugin</artifactId>\n+        <configuration>\n+          <skip>true</skip>\n+        </configuration>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-war-plugin</artifactId>\n+        <inherited>false</inherited>\n+        <configuration>\n+          <failOnMissingWebXml>false</failOnMissingWebXml>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <id>default-war</id>\n+            <phase>none</phase>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-antrun-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <executions>\n+          <execution>\n+            <id>addFlowableTestContent</id>\n+            <phase>prepare-package</phase>\n+            <configuration>\n+              <target>\n+                <taskdef resource=\"net/sf/antcontrib/antcontrib.properties\"\n+                         classpathref=\"maven.plugin.classpath\"/>\n+\n+                <if>\n+                  <not>\n+                    <available file=\"../core/target/test-classes/backup/MasterContent.xml\"/>\n+                  </not>\n+                  <then>\n+                    <mkdir dir=\"../core/target/test-classes/backup\"/>\n+                    <copy file=\"../core/target/test-classes/domains/MasterContent.xml\" \n+                          todir=\"../core/target/test-classes/backup\"/>\n+                  </then>\n+                </if>\n+                <if>\n+                  <available file=\"../core/target/syncope/WEB-INF/lib/flowable-engine-${flowable.version}.jar\"/>\n+                  <then>\n+                    <xslt basedir=\"../core/target/test-classes/backup\" \n+                          includes=\"MasterContent.xml\"\n+                          destdir=\"../core/target/test-classes/domains\"\n+                          extension=\".xml\"\n+                          force=\"true\"\n+                          style=\"../core/src/test/resources/addFlowableToContent.xsl\"/>\n+                  </then>\n+                </if>\n+              </target>\n+            </configuration>\n+            <goals>\n+              <goal>run</goal>\n+            </goals>\n+          </execution>\n+          <execution>\n+            <id>setupEmbeddedConf</id>\n+            <phase>package</phase>\n+            <configuration>\n+              <target>\n+                <delete dir=\"../core/target/syncope/WEB-INF/classes/domains\"/>\n+                <copy todir=\"../core/target/syncope/WEB-INF/classes/domains\">\n+                  <fileset dir=\"../core/target/test-classes/domains\"/>\n+                </copy>\n+                <copy file=\"../core/target/test-classes/connid.properties\" \n+                      todir=\"../core/target/syncope/WEB-INF/classes\" \n+                      overwrite=\"true\"/>\n+                <copy file=\"../core/target/test-classes/keymaster.properties\" \n+                      todir=\"../core/target/syncope/WEB-INF/classes\" \n+                      overwrite=\"true\"/>\n+\n+                <copy file=\"../console/target/test-classes/keymaster.properties\" \n+                      todir=\"../console/target/syncope-console/WEB-INF/classes\" \n+                      overwrite=\"true\"/>\n+\n+                <copy file=\"../enduser/target/test-classes/keymaster.properties\" \n+                      todir=\"../enduser/target/syncope-enduser/WEB-INF/classes\" \n+                      overwrite=\"true\"/>                \n+                <copy file=\"../enduser/target/test-classes/customFormAttributes.json\" \n+                      todir=\"../enduser/target/syncope-enduser/WEB-INF/classes\" \n+                      overwrite=\"true\"/>\n+                <copy file=\"../enduser/target/test-classes/customTemplate.json\" \n+                      todir=\"../enduser/target/syncope-enduser/WEB-INF/classes\" \n+                      overwrite=\"true\"/>\n+              </target>\n+            </configuration>\n+            <goals>\n+              <goal>run</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <dependencies>\n+          <dependency>\n+            <groupId>ant-contrib</groupId>\n+            <artifactId>ant-contrib</artifactId>\n+            <version>20020829</version>\n+          </dependency>\n+        </dependencies>\n+      </plugin>\n+      \n+      <plugin>\n+        <groupId>org.codehaus.mojo</groupId>\n+        <artifactId>exec-maven-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <executions>\n+          <execution>\n+            <id>default-cli</id>\n+            <phase>pre-integration-test</phase>\n+            <goals>\n+              <goal>exec</goal>\n+            </goals>\n+            <configuration>\n+              <executable>java</executable>\n+              <arguments>\n+                <argument>-jar</argument>\n+                <argument>${basedir}/../sra/target/syncope-sra.jar</argument>\n+                <argument>-Dreactor.netty.http.server.accessLogEnabled=true</argument>\n+              </arguments>\n+              <environmentVariables>\n+                <LOADER_PATH>${basedir}/../sra/target/test-classes</LOADER_PATH>\n+              </environmentVariables>\n+              <async>true</async>\n+              <asyncDestroyOnShutdown>true</asyncDestroyOnShutdown>\n+            </configuration>                        \n+          </execution>\n+        </executions>\n+      </plugin>\n+      \n+      <plugin>\n+        <groupId>org.codehaus.cargo</groupId>\n+        <artifactId>cargo-maven2-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <configuration>\n+          <container>\n+            <containerId>tomcat9x</containerId>\n+            <zipUrlInstaller>\n+              <url>http://central.maven.org/maven2/org/apache/tomcat/tomcat/${tomcat.version}/tomcat-${tomcat.version}.zip</url>\n+              <downloadDir>${settings.localRepository}/org/codehaus/cargo/cargo-container-archives</downloadDir>\n+              <extractDir>${project.build.directory}/cargo/extract</extractDir>\n+            </zipUrlInstaller>\n+            <dependencies>\n+              <dependency>\n+                <groupId>com.h2database</groupId>\n+                <artifactId>h2</artifactId>\n+              </dependency>\n+            </dependencies>\n+            <timeout>300000</timeout>\n+            <log>${cargo.log}</log>\n+            <output>${cargo.output}</output> \n+          </container>\n+          <configuration>\n+            <properties>\n+              <cargo.jvmargs>\n+                -Dspring.profiles.active=embedded\n+                -XX:+CMSClassUnloadingEnabled -Xmx1024m -Xms512m</cargo.jvmargs>\n+            </properties>\n+          </configuration>\n+          <deployables>\n+            <deployable>\n+              <groupId>org.apache.syncope.fit</groupId>\n+              <artifactId>syncope-fit-build-tools</artifactId>\n+              <type>war</type>\n+              <properties>\n+                <context>syncope-fit-build-tools</context>\n+              </properties>\n+            </deployable>\n+            <deployable>\n+              <location>../core/target/syncope</location>\n+              <properties>\n+                <context>syncope</context>\n+              </properties>\n+            </deployable>\n+            <deployable>\n+              <location>../console/target/syncope-console</location>\n+              <properties>\n+                <context>syncope-console</context>\n+              </properties>\n+            </deployable>\n+            <deployable>\n+              <location>../enduser/target/syncope-enduser</location>\n+              <properties>\n+                <context>syncope-enduser</context>\n+              </properties>\n+            </deployable>\n+          </deployables>\n+        </configuration>\n+      </plugin>\n+    </plugins> \n+  </build>\n+  \n+  <profiles>\n+    <profile>\n+      <id>embedded</id>\n+\n+      <properties>\n+        <exec.skip>false</exec.skip>\n+      </properties>\n+\n+      <build>\n+        <defaultGoal>clean verify cargo:run</defaultGoal>  \n+      </build>\n+    </profile>\n+  </profiles>\n+</project>"},{"sha":"48376d922f19acb190d1be7acb24b1af1e85ef51","filename":"archetype/src/main/resources/archetype-resources/sra/pom.xml","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fsra%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fsra%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fsra%2Fpom.xml?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -0,0 +1,85 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>${groupId}</groupId>\n+    <artifactId>${rootArtifactId}</artifactId>\n+    <version>${version}</version>\n+  </parent>\n+\n+  <name>Apache Syncope sample project - SRA</name>\n+  <groupId>${groupId}</groupId>\n+  <artifactId>${artifactId}</artifactId>\n+  <packaging>jar</packaging>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>${groupId}</groupId>\n+      <artifactId>syncope-common</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.syncope</groupId>\n+      <artifactId>syncope-sra</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.self-keymaster</groupId>\n+      <artifactId>syncope-ext-self-keymaster-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.common.keymaster</groupId>\n+      <artifactId>syncope-common-keymaster-client-zookeeper</artifactId>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <finalName>syncope-sra</finalName>\n+\n+    <plugins>\n+      <plugin>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-maven-plugin</artifactId>\n+        <configuration>\n+          <mainClass>org.apache.syncope.sra.SyncopeSRAApplication</mainClass>\n+          <layout>ZIP</layout>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>repackage</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+\n+    <resources>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+        <filtering>true</filtering>\n+      </resource>\n+    </resources>\n+  </build>\n+</project>"},{"sha":"033fe3b8cdc122c28c9d2c96c62b4aaeab664fc4","filename":"archetype/src/main/resources/archetype-resources/sra/src/test/resources/keymaster.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fsra%2Fsrc%2Ftest%2Fresources%2Fkeymaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fsra%2Fsrc%2Ftest%2Fresources%2Fkeymaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fsra%2Fsrc%2Ftest%2Fresources%2Fkeymaster.properties?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","previous_filename":"sra/src/main/resources/keymaster.properties"},{"sha":"8eb4a43162a6bcfe3664cdb0b8e165daa002c9d1","filename":"archetype/src/main/resources/meta-pom.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/archetype%2Fsrc%2Fmain%2Fresources%2Fmeta-pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/archetype%2Fsrc%2Fmain%2Fresources%2Fmeta-pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Fmeta-pom.xml?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -82,6 +82,12 @@ under the License.\n         <version>${syncope.version}</version>\n       </dependency>\n \n+      <dependency>\n+        <groupId>org.apache.syncope</groupId>\n+        <artifactId>syncope-sra</artifactId>\n+        <version>${syncope.version}</version>\n+      </dependency>\n+\n       <dependency>\n         <groupId>org.apache.syncope.ext.self-keymaster</groupId>\n         <artifactId>syncope-ext-self-keymaster-rest-cxf</artifactId>\n@@ -128,6 +134,8 @@ under the License.\n     <module>core</module>\n     <module>console</module>\n     <module>enduser</module>\n+    <module>sra</module>\n+    <module>fit</module>\n   </modules>\n \n </project>"},{"sha":"c250a19a486ab1a811a93903dbe38fe040f6dfea","filename":"client/idrepo/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -277,13 +277,11 @@ public SyncopeClient create(final String username, final String password) {\n \n     /**\n      * Builds client instance which will be passing the provided value in the\n-     * {@link javax.ws.rs.core.HttpHeaders#AUTHORIZATION}\n-     * request header.\n+     * {@link javax.ws.rs.core.HttpHeaders#AUTHORIZATION} request header.\n      *\n      * @param jwt value received after login, in the {@link RESTHeaders#TOKEN} response header\n      * @return client instance which will be passing the provided value in the\n-     * {@link javax.ws.rs.core.HttpHeaders#AUTHORIZATION}\n-     * request header\n+     * {@link javax.ws.rs.core.HttpHeaders#AUTHORIZATION} request header\n      */\n     public SyncopeClient create(final String jwt) {\n         return create(new JWTAuthenticationHandler(jwt));"},{"sha":"17ae03a1043d24513fc1a63b416d082f31bdd864","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/GatewayRouteTO.java","status":"modified","additions":20,"deletions":6,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGatewayRouteTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGatewayRouteTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGatewayRouteTO.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -25,12 +25,16 @@\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.syncope.common.lib.types.GatewayFilter;\n-import org.apache.syncope.common.lib.types.GatewayPredicate;\n+import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n+import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n \n+@XmlRootElement(name = \"gatewayRoute\")\n+@XmlType\n public class GatewayRouteTO implements EntityTO {\n \n     private static final long serialVersionUID = 4044528284951757870L;\n@@ -39,11 +43,13 @@ public class GatewayRouteTO implements EntityTO {\n \n     private String name;\n \n+    private int order = 0;\n+\n     private URI target;\n \n-    private final List<GatewayFilter> filters = new ArrayList<>();\n+    private final List<GatewayRouteFilter> filters = new ArrayList<>();\n \n-    private final List<GatewayPredicate> predicates = new ArrayList<>();\n+    private final List<GatewayRoutePredicate> predicates = new ArrayList<>();\n \n     private GatewayRouteStatus status;\n \n@@ -66,6 +72,14 @@ public void setName(final String name) {\n         this.name = name;\n     }\n \n+    public int getOrder() {\n+        return order;\n+    }\n+\n+    public void setOrder(final int order) {\n+        this.order = order;\n+    }\n+\n     public URI getTarget() {\n         return target;\n     }\n@@ -77,14 +91,14 @@ public void setTarget(final URI target) {\n     @XmlElementWrapper(name = \"filters\")\n     @XmlElement(name = \"filter\")\n     @JsonProperty(\"filters\")\n-    public List<GatewayFilter> getFilters() {\n+    public List<GatewayRouteFilter> getFilters() {\n         return filters;\n     }\n \n     @XmlElementWrapper(name = \"predicates\")\n     @XmlElement(name = \"predicate\")\n     @JsonProperty(\"predicates\")\n-    public List<GatewayPredicate> getPredicates() {\n+    public List<GatewayRoutePredicate> getPredicates() {\n         return predicates;\n     }\n "},{"sha":"06d511cb7245b036e6d108724272cb297b851871","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMEntitlement.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -26,12 +26,8 @@\n \n public final class AMEntitlement {\n \n-    public static final String GATEWAY_ROUTE_LIST = \"GATEWAY_ROUTE_LIST\";\n-\n     public static final String GATEWAY_ROUTE_CREATE = \"GATEWAY_ROUTE_CREATE\";\n \n-    public static final String GATEWAY_ROUTE_READ = \"GATEWAY_ROUTE_READ\";\n-\n     public static final String GATEWAY_ROUTE_UPDATE = \"GATEWAY_ROUTE_UPDATE\";\n \n     public static final String GATEWAY_ROUTE_DELETE = \"GATEWAY_ROUTE_DELETE\";"},{"sha":"e7fd117334ff8a5e405e8069c403e3fd6708177f","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/FilterFactory.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FFilterFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FFilterFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FFilterFactory.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -26,8 +26,7 @@ public enum FilterFactory {\n     ADD_REQUEST_PARAMETER,\n     ADD_RESPONSE_HEADER,\n     HYSTRIX,\n-    MODIFY_REQUEST_BODY,\n-    MODIFY_RESPONSE_BODY,\n+    FALLBACK_HEADERS,\n     PREFIX_PATH,\n     PRESERVE_HOST_HEADER,\n     REDIRECT,\n@@ -45,9 +44,7 @@ public enum FilterFactory {\n     SAVE_SESSION,\n     STRIP_PREFIX,\n     REQUEST_HEADER_TO_REQUEST_URI,\n-    CHANGE_REQUEST_URI,\n-    SET_REQIEST_SIZE,\n-    FALLBACK_HEADERS,\n+    SET_REQUEST_SIZE,\n     CUSTOM\n \n }"},{"sha":"1b103a57d3d0c06c159733b61ca94bcf488ad272","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/GatewayRouteFilter.java","status":"renamed","additions":16,"deletions":4,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayRouteFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayRouteFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayRouteFilter.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -19,16 +19,20 @@\n package org.apache.syncope.common.lib.types;\n \n import java.io.Serializable;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n-public class GatewayFilter implements Serializable {\n+@XmlRootElement(name = \"gatewayRouteFilter\")\n+@XmlType\n+public class GatewayRouteFilter implements Serializable {\n \n     private static final long serialVersionUID = -635785645207375128L;\n \n     public static class Builder {\n \n-        private final GatewayFilter instance = new GatewayFilter();\n+        private final GatewayRouteFilter instance = new GatewayRouteFilter();\n \n         public Builder factory(final FilterFactory factory) {\n             instance.setFactory(factory);\n@@ -40,7 +44,7 @@ public Builder args(final String args) {\n             return this;\n         }\n \n-        public GatewayFilter build() {\n+        public GatewayRouteFilter build() {\n             return instance;\n         }\n     }\n@@ -84,10 +88,18 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        final GatewayFilter other = (GatewayFilter) obj;\n+        final GatewayRouteFilter other = (GatewayRouteFilter) obj;\n         return new EqualsBuilder().\n                 append(factory, other.factory).\n                 append(args, other.args).\n                 build();\n     }\n+\n+    @Override\n+    public String toString() {\n+        return \"GatewayFilter{\"\n+                + \"factory=\" + factory\n+                + \", args=\" + args\n+                + '}';\n+    }\n }","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/GatewayFilter.java"},{"sha":"9f26bbe0c72fc385b7979390d22ea545f4da296e","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/GatewayRoutePredicate.java","status":"renamed","additions":33,"deletions":4,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayRoutePredicate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayRoutePredicate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayRoutePredicate.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -19,16 +19,25 @@\n package org.apache.syncope.common.lib.types;\n \n import java.io.Serializable;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n-public class GatewayPredicate implements Serializable {\n+@XmlRootElement(name = \"gatewayRoutePredicate\")\n+@XmlType\n+public class GatewayRoutePredicate implements Serializable {\n \n     private static final long serialVersionUID = -635785645207375128L;\n \n     public static class Builder {\n \n-        private final GatewayPredicate instance = new GatewayPredicate();\n+        private final GatewayRoutePredicate instance = new GatewayRoutePredicate();\n+\n+        public Builder negate() {\n+            instance.setNegate(true);\n+            return this;\n+        }\n \n         public Builder cond(final PredicateCond cond) {\n             instance.setCond(cond);\n@@ -45,17 +54,27 @@ public Builder args(final String args) {\n             return this;\n         }\n \n-        public GatewayPredicate build() {\n+        public GatewayRoutePredicate build() {\n             return instance;\n         }\n     }\n \n+    private boolean negate;\n+\n     private PredicateCond cond;\n \n     private PredicateFactory factory;\n \n     private String args;\n \n+    public boolean isNegate() {\n+        return negate;\n+    }\n+\n+    public void setNegate(final boolean negate) {\n+        this.negate = negate;\n+    }\n+\n     public PredicateCond getCond() {\n         return cond;\n     }\n@@ -100,11 +119,21 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        final GatewayPredicate other = (GatewayPredicate) obj;\n+        final GatewayRoutePredicate other = (GatewayRoutePredicate) obj;\n         return new EqualsBuilder().\n                 append(cond, other.cond).\n                 append(factory, other.factory).\n                 append(args, other.args).\n                 build();\n     }\n+\n+    @Override\n+    public String toString() {\n+        return \"GatewayPredicate{\"\n+                + \"negate=\" + negate\n+                + \", cond=\" + cond\n+                + \", factory=\" + factory\n+                + \", args=\" + args\n+                + '}';\n+    }\n }","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/GatewayPredicate.java"},{"sha":"12d27048879afa86d362d600bb31793e5c1387e8","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/PredicateCond.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPredicateCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPredicateCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPredicateCond.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -23,7 +23,6 @@\n @XmlEnum\n public enum PredicateCond {\n     AND,\n-    OR,\n-    NOT\n+    OR\n \n }"},{"sha":"c1e431f3e1c58c1997fc19794c936cc939b7373c","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/PredicateFactory.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPredicateFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPredicateFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPredicateFactory.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -32,7 +32,6 @@ public enum PredicateFactory {\n     PATH,\n     QUERY,\n     REMOTE_ADDR,\n-    READ_BODY,\n     CUSTOM\n \n }"},{"sha":"c44af7ea45ef9ecb61a9262243f4083a717aa330","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GatewayRouteService.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGatewayRouteService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGatewayRouteService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGatewayRouteService.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -129,16 +129,4 @@ public interface GatewayRouteService extends JAXRSService {\n     @Path(\"push\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void pushToSRA();\n-\n-    /**\n-     * Push route with matching key to SRA.\n-     *\n-     * @param key route key\n-     */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n-    @POST\n-    @Path(\"push/{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void pushToSRA(@NotNull @PathParam(\"key\") String key);\n }"},{"sha":"033f5b7cd50d6b5ed60c3f260632daad456940dc","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperKeymasterClientContext.java","status":"modified","additions":20,"deletions":18,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperKeymasterClientContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperKeymasterClientContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperKeymasterClientContext.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -59,7 +59,8 @@ public class ZookeeperKeymasterClientContext {\n     @Value(\"${keymaster.maxRetries:3}\")\n     private Integer maxRetries;\n \n-    @ConditionalOnExpression(\"#{'${keymaster.address}' matches '^(?!http).+'}\")\n+    @ConditionalOnExpression(\"#{'${keymaster.address}' \"\n+            + \"matches '^((\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})|[a-z\\\\.]+):[0-9]+$'}\")\n     @Bean\n     public CuratorFramework curatorFramework() throws InterruptedException {\n         if (StringUtils.isNotBlank(username) && StringUtils.isNotBlank(password)) {\n@@ -86,20 +87,18 @@ public AppConfigurationEntry[] getAppConfigurationEntry(final String name) {\n                 connectString(address).\n                 retryPolicy(new ExponentialBackoffRetry(baseSleepTimeMs, maxRetries));\n         if (StringUtils.isNotBlank(username)) {\n-            clientBuilder.\n-                    authorization(\"digest\", (username).getBytes()).\n-                    aclProvider(new ACLProvider() {\n-\n-                        @Override\n-                        public List<ACL> getDefaultAcl() {\n-                            return ZooDefs.Ids.CREATOR_ALL_ACL;\n-                        }\n-\n-                        @Override\n-                        public List<ACL> getAclForPath(final String path) {\n-                            return ZooDefs.Ids.CREATOR_ALL_ACL;\n-                        }\n-                    });\n+            clientBuilder.authorization(\"digest\", username.getBytes()).aclProvider(new ACLProvider() {\n+\n+                @Override\n+                public List<ACL> getDefaultAcl() {\n+                    return ZooDefs.Ids.CREATOR_ALL_ACL;\n+                }\n+\n+                @Override\n+                public List<ACL> getAclForPath(final String path) {\n+                    return ZooDefs.Ids.CREATOR_ALL_ACL;\n+                }\n+            });\n         }\n         CuratorFramework client = clientBuilder.build();\n         client.start();\n@@ -108,20 +107,23 @@ public List<ACL> getAclForPath(final String path) {\n         return client;\n     }\n \n-    @ConditionalOnExpression(\"#{'${keymaster.address}' matches '^(?!http).+'}\")\n+    @ConditionalOnExpression(\"#{'${keymaster.address}' \"\n+            + \"matches '^((\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})|[a-z\\\\.]+):[0-9]+$'}\")\n     @Bean\n     public ConfParamOps selfConfParamOps() {\n         return new ZookeeperConfParamOps();\n     }\n \n-    @ConditionalOnExpression(\"#{'${keymaster.address}' matches '^(?!http).+'}\")\n+    @ConditionalOnExpression(\"#{'${keymaster.address}' \"\n+            + \"matches '^((\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})|[a-z\\\\.]+):[0-9]+$'}\")\n     @Bean\n     public ServiceOps serviceOps() {\n         return new ZookeeperServiceDiscoveryOps();\n         //return new ZookeeperServiceOps();\n     }\n \n-    @ConditionalOnExpression(\"#{'${keymaster.address}' matches '^(?!http).+'}\")\n+    @ConditionalOnExpression(\"#{'${keymaster.address}' \"\n+            + \"matches '^((\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})|[a-z\\\\.]+):[0-9]+$'}\")\n     @Bean\n     public DomainOps domainOps() {\n         return new ZookeeperDomainOps();"},{"sha":"71a343efd881cb78f5dcde42975e5322fe1a40bc","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/GatewayRouteLogic.java","status":"modified","additions":34,"deletions":7,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGatewayRouteLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGatewayRouteLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGatewayRouteLogic.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -19,9 +19,20 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n import java.util.List;\n import java.util.stream.Collectors;\n+import javax.annotation.Resource;\n+import javax.ws.rs.core.HttpHeaders;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.transport.http.auth.DefaultBasicAuthSupplier;\n+import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.lib.to.GatewayRouteTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n import org.apache.syncope.core.persistence.api.dao.GatewayRouteDAO;\n@@ -45,6 +56,16 @@ public class GatewayRouteLogic extends AbstractTransactionalLogic<GatewayRouteTO\n     @Autowired\n     private EntityFactory entityFactory;\n \n+    @Autowired\n+    private ServiceOps serviceOps;\n+\n+    @Resource(name = \"anonymousUser\")\n+    private String anonymousUser;\n+\n+    @Resource(name = \"anonymousKey\")\n+    private String anonymousKey;\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n     public List<GatewayRouteTO> list() {\n         return routeDAO.findAll().stream().map(binder::getGatewayRouteTO).collect(Collectors.toList());\n     }\n@@ -57,7 +78,7 @@ public GatewayRouteTO create(final GatewayRouteTO routeTO) {\n         return binder.getGatewayRouteTO(routeDAO.save(route));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GATEWAY_ROUTE_READ + \"')\")\n+    @PreAuthorize(\"isAuthenticated()\")\n     public GatewayRouteTO read(final String key) {\n         GatewayRoute route = routeDAO.find(key);\n         if (route == null) {\n@@ -92,12 +113,18 @@ public GatewayRouteTO delete(final String key) {\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GATEWAY_ROUTE_PUSH + \"')\")\n     public void pushToSRA() {\n-        // TODO\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GATEWAY_ROUTE_PUSH + \"')\")\n-    public void pushToSRA(final String key) {\n-        // TODO\n+        try {\n+            NetworkService sra = serviceOps.get(NetworkService.Type.SRA);\n+            HttpClient.newBuilder().build().sendAsync(\n+                    HttpRequest.newBuilder(URI.create(\n+                            StringUtils.appendIfMissing(sra.getAddress(), \"/\") + \"management/routes/refresh\")).\n+                            header(HttpHeaders.AUTHORIZATION,\n+                                    DefaultBasicAuthSupplier.getBasicAuthHeader(anonymousUser, anonymousKey)).\n+                            POST(HttpRequest.BodyPublishers.noBody()).build(),\n+                    HttpResponse.BodyHandlers.discarding());\n+        } catch (KeymasterException e) {\n+            throw new NotFoundException(\"Could not find any SRA instance\", e);\n+        }\n     }\n \n     @Override"},{"sha":"545b6307d67b7e31e832b6fc29b2481c434d9747","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GatewayRouteServiceImpl.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGatewayRouteServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGatewayRouteServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGatewayRouteServiceImpl.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -33,7 +33,7 @@ public class GatewayRouteServiceImpl extends AbstractServiceImpl implements Gate\n \n     @Autowired\n     private GatewayRouteLogic logic;\n-    \n+\n     @Override\n     public List<GatewayRouteTO> list() {\n         return logic.list();\n@@ -67,9 +67,4 @@ public void delete(final String key) {\n     public void pushToSRA() {\n         logic.pushToSRA();\n     }\n-\n-    @Override\n-    public void pushToSRA(final String key) {\n-        logic.pushToSRA(key);\n-    }\n }"},{"sha":"1a64ee124a447ad145e87fff45c98c21e50a1a0f","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/init/IdMImplementationTypeLoader.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdMImplementationTypeLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdMImplementationTypeLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdMImplementationTypeLoader.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -21,14 +21,15 @@\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n+import org.springframework.core.Ordered;\n import org.springframework.stereotype.Component;\n \n @Component\n public class IdMImplementationTypeLoader implements SyncopeCoreLoader {\n \n     @Override\n     public int getOrder() {\n-        return Integer.MIN_VALUE;\n+        return Ordered.HIGHEST_PRECEDENCE;\n     }\n \n     @Override"},{"sha":"c594ecbf7a639d92e363bd1a4682dcd85c7d3fbc","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -61,6 +61,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n+import org.springframework.core.Ordered;\n import org.springframework.core.type.filter.AssignableTypeFilter;\n import org.springframework.util.ClassUtils;\n \n@@ -91,7 +92,7 @@ public class ClassPathScanImplementationLookup implements ImplementationLookup {\n \n     @Override\n     public int getOrder() {\n-        return 250;\n+        return Ordered.HIGHEST_PRECEDENCE;\n     }\n \n     /**"},{"sha":"0eded04e5d59ccfcec893b56ffff4e44215b4914","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/IdRepoImplementationTypeLoader.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdRepoImplementationTypeLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdRepoImplementationTypeLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdRepoImplementationTypeLoader.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -21,14 +21,15 @@\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n+import org.springframework.core.Ordered;\n import org.springframework.stereotype.Component;\n \n @Component\n public class IdRepoImplementationTypeLoader implements SyncopeCoreLoader {\n \n     @Override\n     public int getOrder() {\n-        return Integer.MIN_VALUE;\n+        return Ordered.HIGHEST_PRECEDENCE;\n     }\n \n     @Override"},{"sha":"f5e6be18e7a4d6073fd9354adbe10176d4ba7097","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -103,10 +103,13 @@ public Response toResponse(final Exception ex) {\n \n             builder = builder(ClientExceptionType.DelegatedAdministration, ExceptionUtils.getRootCauseMessage(ex));\n         } else if (ex instanceof EntityExistsException || ex instanceof DuplicateException\n-                || ex instanceof PersistenceException && ex.getCause() instanceof EntityExistsException) {\n+                || ((ex instanceof PersistenceException || ex instanceof DataIntegrityViolationException)\n+                && ex.getCause() instanceof EntityExistsException)) {\n \n             builder = builder(ClientExceptionType.EntityExists,\n-                    getPersistenceErrorMessage(ex instanceof PersistenceException ? ex.getCause() : ex));\n+                    getPersistenceErrorMessage(\n+                            ex instanceof PersistenceException || ex instanceof DataIntegrityViolationException\n+                                    ? ex.getCause() : ex));\n         } else if (ex instanceof DataIntegrityViolationException || ex instanceof UncategorizedDataAccessException) {\n             builder = builder(ClientExceptionType.DataIntegrityViolation, getPersistenceErrorMessage(ex));\n         } else if (ex instanceof ConnectorException) {"},{"sha":"4aef3f7ab07c326e4bc7f6572194ece83e1ee865","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/GatewayRoute.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGatewayRoute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGatewayRoute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGatewayRoute.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -20,8 +20,8 @@\n \n import java.net.URI;\n import java.util.List;\n-import org.apache.syncope.common.lib.types.GatewayFilter;\n-import org.apache.syncope.common.lib.types.GatewayPredicate;\n+import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n+import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n \n public interface GatewayRoute extends Entity {\n@@ -30,17 +30,21 @@ public interface GatewayRoute extends Entity {\n \n     void setName(String name);\n \n+    int getOrder();\n+\n+    void setOrder(int order);\n+\n     URI getTarget();\n \n     void setTarget(URI target);\n \n-    List<GatewayFilter> getFilters();\n+    List<GatewayRouteFilter> getFilters();\n \n-    void setFilters(List<GatewayFilter> filters);\n+    void setFilters(List<GatewayRouteFilter> filters);\n \n-    List<GatewayPredicate> getPredicates();\n+    List<GatewayRoutePredicate> getPredicates();\n \n-    void setPredicates(List<GatewayPredicate> predicates);\n+    void setPredicates(List<GatewayRoutePredicate> predicates);\n \n     GatewayRouteStatus getStatus();\n "},{"sha":"36ba211a05105a507a05dc7b99eb0a6f941b8897","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/RuntimeDomainLoader.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FRuntimeDomainLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FRuntimeDomainLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FRuntimeDomainLoader.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -53,7 +53,7 @@ public void added(final Domain domain) {\n \n             ApplicationContextProvider.getApplicationContext().getBeansOfType(SyncopeCoreLoader.class).values().\n                     stream().sorted(Comparator.comparing(SyncopeCoreLoader::getOrder)).\n-                    forEach(loader -> {\n+                    forEachOrdered(loader -> {\n                         String loaderName = AopUtils.getTargetClass(loader).getName();\n \n                         LOG.debug(\"[{}] Starting on domain '{}'\", loaderName, domain);\n@@ -72,7 +72,7 @@ public void removed(final String domain) {\n \n             ApplicationContextProvider.getApplicationContext().getBeansOfType(SyncopeCoreLoader.class).values().\n                     stream().sorted(Comparator.comparing(SyncopeCoreLoader::getOrder).reversed()).\n-                    forEach(loader -> {\n+                    forEachOrdered(loader -> {\n                         String loaderName = AopUtils.getTargetClass(loader).getName();\n \n                         LOG.debug(\"[{}] Starting on domain '{}'\", loaderName, domain);"},{"sha":"545c14c65043468ce66a002149e0d92896963968","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/StartupDomainLoader.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FStartupDomainLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FStartupDomainLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FStartupDomainLoader.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -69,7 +69,7 @@ public class StartupDomainLoader implements SyncopeCoreLoader {\n \n     @Override\n     public int getOrder() {\n-        return Ordered.HIGHEST_PRECEDENCE;\n+        return Ordered.LOWEST_PRECEDENCE;\n     }\n \n     @Override"},{"sha":"a6c4e1e44e4017f29a6fdabdd92d773fe47990bb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAGatewayRoute.java","status":"modified","additions":21,"deletions":8,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAGatewayRoute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAGatewayRoute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAGatewayRoute.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -29,8 +29,8 @@\n import javax.persistence.Lob;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.types.GatewayFilter;\n-import org.apache.syncope.common.lib.types.GatewayPredicate;\n+import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n+import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n import org.apache.syncope.core.persistence.jpa.validation.entity.GatewayRouteCheck;\n@@ -48,6 +48,9 @@ public class JPAGatewayRoute extends AbstractGeneratedKeyEntity implements Gatew\n     @Column(unique = true, nullable = false)\n     private String name;\n \n+    private Integer routeOrder;\n+\n+    @NotNull\n     private String target;\n \n     @Lob\n@@ -70,6 +73,16 @@ public void setName(final String name) {\n         this.name = name;\n     }\n \n+    @Override\n+    public int getOrder() {\n+        return routeOrder == null ? 0 : routeOrder;\n+    }\n+\n+    @Override\n+    public void setOrder(final int order) {\n+        this.routeOrder = order;\n+    }\n+\n     @Override\n     public URI getTarget() {\n         return URI.create(target);\n@@ -81,26 +94,26 @@ public void setTarget(final URI target) {\n     }\n \n     @Override\n-    public List<GatewayFilter> getFilters() {\n+    public List<GatewayRouteFilter> getFilters() {\n         return filters == null\n                 ? Collections.emptyList()\n-                : Arrays.asList(POJOHelper.deserialize(filters, GatewayFilter[].class));\n+                : Arrays.asList(POJOHelper.deserialize(filters, GatewayRouteFilter[].class));\n     }\n \n     @Override\n-    public void setFilters(final List<GatewayFilter> filters) {\n+    public void setFilters(final List<GatewayRouteFilter> filters) {\n         this.filters = POJOHelper.serialize(filters);\n     }\n \n     @Override\n-    public List<GatewayPredicate> getPredicates() {\n+    public List<GatewayRoutePredicate> getPredicates() {\n         return predicates == null\n                 ? Collections.emptyList()\n-                : Arrays.asList(POJOHelper.deserialize(predicates, GatewayPredicate[].class));\n+                : Arrays.asList(POJOHelper.deserialize(predicates, GatewayRoutePredicate[].class));\n     }\n \n     @Override\n-    public void setPredicates(final List<GatewayPredicate> predicates) {\n+    public void setPredicates(final List<GatewayRoutePredicate> predicates) {\n         this.predicates = POJOHelper.serialize(predicates);\n     }\n "},{"sha":"7fdab6034ab247ccfe3047e5774070680136ce15","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/GatewayRouteTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGatewayRouteTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGatewayRouteTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGatewayRouteTest.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -28,8 +28,8 @@\n import java.util.UUID;\n import javax.ws.rs.HttpMethod;\n import org.apache.syncope.common.lib.types.FilterFactory;\n-import org.apache.syncope.common.lib.types.GatewayFilter;\n-import org.apache.syncope.common.lib.types.GatewayPredicate;\n+import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n+import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n import org.apache.syncope.common.lib.types.PredicateFactory;\n import org.apache.syncope.core.persistence.api.dao.GatewayRouteDAO;\n@@ -68,9 +68,9 @@ public void save() {\n         GatewayRoute route = entityFactory.newEntity(GatewayRoute.class);\n         route.setName(\"just for test\");\n         route.setTarget(URI.create(\"http://httpbin.org:80\"));\n-        route.setPredicates(Arrays.asList(new GatewayPredicate.Builder().\n+        route.setPredicates(Arrays.asList(new GatewayRoutePredicate.Builder().\n                 factory(PredicateFactory.METHOD).args(HttpMethod.GET).build()));\n-        route.setFilters(Arrays.asList(new GatewayFilter.Builder().\n+        route.setFilters(Arrays.asList(new GatewayRouteFilter.Builder().\n                 factory(FilterFactory.ADD_REQUEST_HEADER).args(\"X-Request-Foo, Bar\").build()));\n         route.setStatus(GatewayRouteStatus.DRAFT);\n "},{"sha":"0259510ce07828575d711aec78687241abd2b72d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GatewayRouteDataBinderImpl.java","status":"modified","additions":18,"deletions":1,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGatewayRouteDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGatewayRouteDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGatewayRouteDataBinderImpl.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -18,7 +18,11 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.GatewayRouteTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n import org.apache.syncope.core.provisioning.api.data.GatewayRouteDataBinder;\n import org.springframework.stereotype.Component;\n@@ -28,18 +32,31 @@ public class GatewayRouteDataBinderImpl implements GatewayRouteDataBinder {\n \n     @Override\n     public void getGatewayRoute(final GatewayRoute route, final GatewayRouteTO routeTO) {\n+        SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n+        if (StringUtils.isBlank(routeTO.getName())) {\n+            sce.getElements().add(\"name\");\n+        }\n+        if (routeTO.getTarget() == null) {\n+            sce.getElements().add(\"target\");\n+        }\n+        if (!sce.isEmpty()) {\n+            throw sce;\n+        }\n+\n         route.setName(routeTO.getName());\n+        route.setOrder(routeTO.getOrder());\n         route.setTarget(routeTO.getTarget());\n         route.setFilters(routeTO.getFilters());\n         route.setPredicates(routeTO.getPredicates());\n-        route.setStatus(routeTO.getStatus());\n+        route.setStatus(routeTO.getStatus() == null ? GatewayRouteStatus.DRAFT : routeTO.getStatus());\n     }\n \n     @Override\n     public GatewayRouteTO getGatewayRouteTO(final GatewayRoute route) {\n         GatewayRouteTO routeTO = new GatewayRouteTO();\n         routeTO.setKey(route.getKey());\n         routeTO.setName(route.getName());\n+        routeTO.setOrder(route.getOrder());\n         routeTO.setTarget(route.getTarget());\n         routeTO.getFilters().addAll(route.getFilters());\n         routeTO.getPredicates().addAll(route.getPredicates());"},{"sha":"f93de92519c4cffe7147305e9dd631eac05a3425","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/SyncopeCoreStartup.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreStartup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreStartup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreStartup.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -51,7 +51,7 @@ public int getOrder() {\n     public void onApplicationEvent(final ContextRefreshedEvent event) {\n         event.getApplicationContext().getBeansOfType(SyncopeCoreLoader.class).values().stream().\n                 sorted(Comparator.comparing(SyncopeCoreLoader::getOrder)).\n-                forEach(loader -> {\n+                forEachOrdered(loader -> {\n                     String loaderName = AopUtils.getTargetClass(loader).getName();\n \n                     LOG.debug(\"[{}] Starting initialization\", loaderName);"},{"sha":"6a80959eb02e9d21b0db8416171d7a708d61e7fe","filename":"docker/sra/pom.xml","status":"modified","additions":19,"deletions":17,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/docker%2Fsra%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/docker%2Fsra%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsra%2Fpom.xml?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -42,26 +42,36 @@ under the License.\n       <groupId>org.apache.syncope</groupId>\n       <artifactId>syncope-sra</artifactId>\n       <version>${project.version}</version>\n-      <scope>test</scope>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.self-keymaster</groupId>\n+      <artifactId>syncope-ext-self-keymaster-client</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.common.keymaster</groupId>\n+      <artifactId>syncope-common-keymaster-client-zookeeper</artifactId>\n+      <version>${project.version}</version>\n     </dependency>\n   </dependencies>\n \n   <build>\n     <plugins>\n       <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-antrun-plugin</artifactId>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-maven-plugin</artifactId>\n+        <configuration>\n+          <mainClass>org.apache.syncope.sra.SyncopeSRAApplication</mainClass>\n+          <layout>ZIP</layout>\n+        </configuration>\n         <executions>\n           <execution>\n             <goals>\n-              <goal>run</goal>\n+              <goal>repackage</goal>\n             </goals>\n-            <phase>package</phase>\n             <configuration>\n-              <target>\n-                <copy file=\"${settings.localRepository}/org/apache/syncope/syncope-sra/${syncope.version}/syncope-sra-${syncope.version}.jar\"\n-                      todir=\"${project.build.outputDirectory}\"/>\n-              </target>\n+              <outputDirectory>${project.build.outputDirectory}</outputDirectory>\n             </configuration>\n           </execution>\n         </executions>\n@@ -105,14 +115,6 @@ under the License.\n         <directory>src/main/resources</directory>\n         <filtering>true</filtering>\n       </resource>\n-\n-      <resource>\n-        <directory>${project.basedir}/../../sra/src/main/resources</directory>\n-        <includes>\n-          <include>application.properties</include>\n-        </includes>\n-        <filtering>true</filtering>\n-      </resource>\n     </resources>\n   </build>\n "},{"sha":"c7398f3b97a85801f67364720366f230d64a9101","filename":"docker/sra/src/main/resources/Dockerfile","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2FDockerfile","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2FDockerfile","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2FDockerfile?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -26,10 +26,10 @@ RUN mkdir /opt/syncope/conf\n RUN mkdir /opt/syncope/lib\n RUN mkdir /opt/syncope/log\n \n-COPY application.properties /opt/syncope/conf/\n+COPY *.properties /opt/syncope/conf/\n COPY log4j2.xml /opt/syncope/conf/\n \n-COPY syncope-sra-*jar /opt/syncope/lib/syncope-sra.jar\n+COPY syncope-docker-sra-*jar /opt/syncope/lib/syncope-sra.jar\n \n COPY startup.sh /opt/syncope/bin\n RUN chmod 755 /opt/syncope/bin/startup.sh"},{"sha":"b6b51470202dedda69284259600eebf23313b6ad","filename":"docker/sra/src/main/resources/application.properties","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -0,0 +1,28 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+spring.application.name=Apache Syncope ${syncope.version} SRA\n+spring.groovy.template.check-template-location=false\n+spring.main.banner-mode=log\n+\n+server.port=8080\n+\n+spring.cloud.gateway.metrics.enabled=true\n+management.endpoint.metrics.enabled=true\n+management.endpoint.prometheus.enabled=true\n+management.metrics.export.prometheus.enabled=true\n+\n+service.discovery.address=${SERVICE_DISCOVERY_ADDRESS}"},{"sha":"14e8ca6cf0494f0e8e28d69cdfcd1d39b36603d5","filename":"docker/sra/src/main/resources/keymaster.properties","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fkeymaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fkeymaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fkeymaster.properties?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+keymaster.address=${KEYMASTER_ADDRESS}\n+keymaster.username=${KEYMASTER_USERNAME}\n+keymaster.password=${KEYMASTER_PASSWORD}"},{"sha":"6fdccd14e408aadb5fce6d893c6d5e0798e68db2","filename":"docker/sra/src/main/resources/log4j2.xml","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -32,11 +32,23 @@ under the License.\n     <asyncLogger name=\"org.apache.syncope.client.lib\" additivity=\"false\" level=\"OFF\">\n       <appender-ref ref=\"console\"/>\n     </asyncLogger>\n-\n     <asyncLogger name=\"org.apache.syncope.sra\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"console\"/>\n     </asyncLogger>\n-    \n+\n+    <asyncLogger name=\"org.apache.cxf\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"console\"/>\n+    </asyncLogger>\n+\n+    <asyncLogger name=\"org.springframework.cloud.gateway\" additivity=\"false\" level=\"INFO\">\n+      <appender-ref ref=\"console\"/>\n+    </asyncLogger>\n+\n+    <!-- Requires -Dreactor.netty.http.server.accessLogEnabled=true to work-->\n+    <asyncLogger name=\"reactor.netty.http.server.AccessLog\" additivity=\"false\" level=\"INFO\">\n+      <appender-ref ref=\"console\"/>\n+    </asyncLogger>\n+\n     <root level=\"INFO\">\n       <appender-ref ref=\"console\"/>\n     </root>"},{"sha":"77cb93e4016f49bfa8e5fadf31d46a3452f2ca76","filename":"docker/sra/src/main/resources/sra.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fsra.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fsra.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fsra.properties?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+anonymousUser=${anonymousUser}\n+anonymousKey=${anonymousKey}\n+\n+useGZIPCompression=true"},{"sha":"df42979071447cd18474b6170a0cc70bba1a7234","filename":"docker/sra/src/main/resources/startup.sh","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fstartup.sh","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fstartup.sh","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fstartup.sh?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -19,4 +19,5 @@\n \n export LOADER_PATH=\"/opt/syncope/conf,/opt/syncope/lib\"\n java -Dfile.encoding=UTF-8 -server -Xms1536m -Xmx1536m -XX:NewSize=256m -XX:MaxNewSize=256m \\\n- -XX:+DisableExplicitGC -Djava.security.egd=file:/dev/./urandom -jar /opt/syncope/lib/syncope-sra.jar\n+ -XX:+DisableExplicitGC -Djava.security.egd=file:/dev/./urandom \\\n+ -Dreactor.netty.http.server.accessLogEnabled=true -jar /opt/syncope/lib/syncope-sra.jar"},{"sha":"1ed6be1e97a8f01a2440e1c0069d1b02abfb46d4","filename":"docker/src/main/resources/docker-compose/docker-compose-all.yml","status":"renamed","additions":18,"deletions":1,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-all.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-all.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-all.yml?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -15,7 +15,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-# Full deployment (Core, Console, Enduser) on PostgreSQL, with Keymaster on Zookeeper\n+# Full deployment (Core, Console, Enduser, SRA) on PostgreSQL, with Keymaster on Zookeeper\n \n # Zookeeper is configured without JAAS, hence empty KEYMASTER_USERNAME / KEYMASTER_PASSWORD\n # are passed to other containers\n@@ -38,6 +38,7 @@ services:\n    syncope:\n      depends_on:\n        - db\n+       - keymaster\n      image: apache/syncope:${SYNCOPE_VERSION}\n      ports:\n        - \"18080:8080\"\n@@ -58,6 +59,7 @@ services:\n    syncope-console:\n      depends_on:\n        - syncope\n+       - keymaster\n      image: apache/syncope-console:${SYNCOPE_VERSION}\n      ports:\n        - \"28080:8080\"\n@@ -71,6 +73,7 @@ services:\n    syncope-enduser:\n      depends_on:\n        - syncope\n+       - keymaster\n      image: apache/syncope-enduser:${SYNCOPE_VERSION}\n      ports:\n        - \"38080:8080\"\n@@ -80,3 +83,17 @@ services:\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME:-}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD:-}\n        SERVICE_DISCOVERY_ADDRESS: http://syncope-enduser:8080/syncope-enduser/\n+\n+   syncope-sra:\n+     depends_on:\n+       - syncope\n+       - keymaster\n+     image: apache/syncope-sra:${SYNCOPE_VERSION}\n+     ports:\n+       - \"48080:8080\"\n+     restart: always\n+     environment:\n+       KEYMASTER_ADDRESS: keymaster:2181\n+       KEYMASTER_USERNAME: ${KEYMASTER_USERNAME:-}\n+       KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD:-}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope-sra:8080/","previous_filename":"docker/src/main/resources/docker-compose/docker-compose-zookeeper.yml"},{"sha":"1971cc97db39d9cb935f080ebdfb939ea2d91d43","filename":"fit/console-reference/pom.xml","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/fit%2Fconsole-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/fit%2Fconsole-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fpom.xml?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -291,8 +291,7 @@ under the License.\n                     -Dspring.profiles.active=embedded\n                     -javaagent:${java.home}/lib/hotswap/hotswap-agent.jar=autoHotswap=true,disablePlugin=Spring,disablePlugin=Hibernate,disablePlugin=CxfJAXRS\n                     -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000\n-                    -XX:+CMSClassUnloadingEnabled\n-                    -Xmx1024m -Xms512m</cargo.jvmargs>\n+                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx1024m -Xms512m</cargo.jvmargs>\n                 </properties>\n               </configuration>\n             </configuration>"},{"sha":"0f6bf3bceeec519638abe8674c2a87ed63fb819b","filename":"fit/core-reference/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -1626,7 +1626,7 @@ under the License.\n                     -Dspring.profiles.active=embedded\n                     -javaagent:${java.home}/lib/hotswap/hotswap-agent.jar=autoHotswap=true,disablePlugin=Spring,disablePlugin=Hibernate\n                     -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000\n-                    -XX:+CMSClassUnloadingEnabled -XX:+UseG1GC -Xmx1024m -Xms512m</cargo.jvmargs>\n+                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx1024m -Xms512m</cargo.jvmargs>\n                 </properties>\n               </configuration>\n             </configuration>"},{"sha":"4994066cdfdd7d7d4450acbec967d7846e68cbd7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GatewayRouteITCase.java","status":"modified","additions":48,"deletions":4,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGatewayRouteITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGatewayRouteITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGatewayRouteITCase.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -32,8 +32,8 @@\n import org.apache.syncope.common.lib.to.GatewayRouteTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.FilterFactory;\n-import org.apache.syncope.common.lib.types.GatewayFilter;\n-import org.apache.syncope.common.lib.types.GatewayPredicate;\n+import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n+import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n import org.apache.syncope.common.lib.types.PredicateFactory;\n import org.apache.syncope.common.rest.api.service.GatewayRouteService;\n@@ -69,9 +69,9 @@ public void createUpdateDelete() {\n         GatewayRouteTO route = new GatewayRouteTO();\n         route.setName(\"just for test\");\n         route.setTarget(URI.create(\"http://httpbin.org:80\"));\n-        route.getPredicates().add(new GatewayPredicate.Builder().\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n                 factory(PredicateFactory.METHOD).args(HttpMethod.GET).build());\n-        route.getFilters().add(new GatewayFilter.Builder().\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n                 factory(FilterFactory.ADD_REQUEST_HEADER).args(\"X-Request-Foo, Bar\").build());\n         route.setStatus(GatewayRouteStatus.DRAFT);\n \n@@ -103,4 +103,48 @@ public void createUpdateDelete() {\n         int endCount = gatewayRouteService.list().size();\n         assertEquals(endCount, beforeCount);\n     }\n+\n+    @Test\n+    public void exceptions() {\n+        GatewayRouteTO route = new GatewayRouteTO();\n+        try {\n+            gatewayRouteService.create(route);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n+        }\n+\n+        route.setName(\"createException\");\n+        try {\n+            gatewayRouteService.create(route);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n+        }\n+\n+        route.setTarget(URI.create(\"http://httpbin.org:80\"));\n+        Response response = gatewayRouteService.create(route);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatusInfo().getStatusCode());\n+\n+        try {\n+            gatewayRouteService.create(route);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.EntityExists, e.getType());\n+        }\n+\n+        route.setKey(UUID.randomUUID().toString());\n+        try {\n+            gatewayRouteService.update(route);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+        try {\n+            gatewayRouteService.delete(route.getKey());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+    }\n }"},{"sha":"9bf0e738481c35273d577a1c2df8574a6d1804dc","filename":"fit/enduser-reference/pom.xml","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/fit%2Fenduser-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/fit%2Fenduser-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fpom.xml?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -282,8 +282,7 @@ under the License.\n                     -Dspring.profiles.active=embedded\n                     -javaagent:${java.home}/lib/hotswap/hotswap-agent.jar=autoHotswap=true,disablePlugin=Spring,disablePlugin=Hibernate,disablePlugin=CxfJAXRS\n                     -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000\n-                    -XX:+CMSClassUnloadingEnabled\n-                    -Xmx1024m -Xms512m</cargo.jvmargs>\n+                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx1024m -Xms512m</cargo.jvmargs>\n                 </properties>\n               </configuration>\n             </configuration>"},{"sha":"639d09adaa6f81112359444342a5b3b848839ad0","filename":"pom.xml","status":"modified","additions":37,"deletions":4,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -396,6 +396,7 @@ under the License.\n     <spring.version>5.1.7.RELEASE</spring.version>\n     <spring-security.version>5.1.5.RELEASE</spring-security.version>\n     <spring-boot.version>2.1.5.RELEASE</spring-boot.version>\n+    <spring-cloud-gateway.version>2.1.1.RELEASE</spring-cloud-gateway.version>\n \n     <openjpa.version>3.1.0</openjpa.version>\n     <hikaricp.version>3.3.1</hikaricp.version>\n@@ -1035,10 +1036,13 @@ under the License.\n \n       <dependency>\n         <groupId>org.springframework.cloud</groupId>\n-        <artifactId>spring-cloud-dependencies</artifactId>\n-        <version>Greenwich.SR1</version>\n-        <type>pom</type>\n-        <scope>import</scope>\n+        <artifactId>spring-cloud-starter-gateway</artifactId>\n+        <version>${spring-cloud-gateway.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.springframework.cloud</groupId>\n+        <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n+        <version>${spring-cloud-gateway.version}</version>\n       </dependency>\n \n       <dependency>\n@@ -1830,6 +1834,17 @@ under the License.\n           </exclusion>\n         </exclusions>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apache.curator</groupId>\n+        <artifactId>curator-x-discovery</artifactId>\n+        <version>${curator.version}</version>\n+        <exclusions>\n+          <exclusion>\n+            <groupId>org.apache.zookeeper</groupId>\n+            <artifactId>zookeeper</artifactId>\n+          </exclusion>\n+        </exclusions>\n+      </dependency>\n       <dependency>\n         <groupId>org.apache.zookeeper</groupId>\n         <artifactId>zookeeper</artifactId>\n@@ -1847,6 +1862,24 @@ under the License.\n       </dependency>\n \n       <!-- TEST -->\n+      <dependency>\n+        <groupId>org.apache.curator</groupId>\n+        <artifactId>curator-test</artifactId>\n+        <version>2.13.0</version>\n+        <scope>test</scope>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.apache.cxf</groupId>\n+        <artifactId>cxf-rt-transports-http-netty-server</artifactId>\n+        <version>${cxf.version}</version>\n+        <scope>test</scope>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.springframework.cloud</groupId>\n+        <artifactId>spring-cloud-contract-wiremock</artifactId>\n+        <version>${spring-cloud-gateway.version}</version>\n+        <scope>test</scope>\n+      </dependency>\n       <dependency>\n         <groupId>org.bouncycastle</groupId>\n         <artifactId>bcpkix-jdk15on</artifactId>"},{"sha":"5b0d5952ed6ab609d6245f9d3413ef85cdd455ac","filename":"sra/pom.xml","status":"modified","additions":163,"deletions":25,"changes":188,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fpom.xml?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -43,18 +43,18 @@ under the License.\n       <artifactId>spring-cloud-starter-gateway</artifactId>\n     </dependency>\n     <dependency>\n-      <groupId>org.springframework.cloud</groupId>\n-      <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.springframework.cloud</groupId>\n-      <artifactId>spring-cloud-starter-contract-stub-runner</artifactId>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n       <exclusions>\n         <exclusion>\n-          <artifactId>spring-boot-starter-web</artifactId>\n           <groupId>org.springframework.boot</groupId>\n+          <artifactId>spring-boot-starter-logging</artifactId>\n         </exclusion>\n-      </exclusions>\n+      </exclusions>    \n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.cloud</groupId>\n+      <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n     </dependency>\n     <dependency>\n       <groupId>org.springframework.boot</groupId>\n@@ -76,14 +76,9 @@ under the License.\n       <artifactId>micrometer-registry-prometheus</artifactId>\n     </dependency>\n \n-    <dependency>\n-      <groupId>org.apache.syncope.ext.self-keymaster</groupId>\n-      <artifactId>syncope-ext-self-keymaster-client</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n     <dependency>\n       <groupId>org.apache.syncope.common.keymaster</groupId>\n-      <artifactId>syncope-common-keymaster-client-zookeeper</artifactId>\n+      <artifactId>syncope-common-keymaster-client-api</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n \n@@ -123,6 +118,33 @@ under the License.\n       <artifactId>jcl-over-slf4j</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.apache.syncope.common.keymaster</groupId>\n+      <artifactId>syncope-common-keymaster-client-zookeeper</artifactId>\n+      <version>${project.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.curator</groupId>\n+      <artifactId>curator-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-transports-http-netty-server</artifactId>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.apache.geronimo.specs</groupId>\n+          <artifactId>geronimo-servlet_2.5_spec</artifactId>\n+        </exclusion>\n+      </exclusions>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.cloud</groupId>\n+      <artifactId>spring-cloud-contract-wiremock</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-test</artifactId>\n@@ -138,18 +160,14 @@ under the License.\n   <build>\n     <plugins>\n       <plugin>\n-        <groupId>org.springframework.boot</groupId>\n-        <artifactId>spring-boot-maven-plugin</artifactId>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <inherited>true</inherited>\n         <configuration>\n-          <mainClass>org.apache.syncope.sra.SyncopeSRAApplication</mainClass>\n+          <systemPropertyVariables>\n+            <reactor.netty.http.server.accessLogEnabled>true</reactor.netty.http.server.accessLogEnabled>\n+          </systemPropertyVariables>\n         </configuration>\n-        <executions>\n-          <execution>\n-            <goals>\n-              <goal>repackage</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n       </plugin>\n     </plugins>\n     \n@@ -158,7 +176,6 @@ under the License.\n         <directory>src/main/resources</directory>\n         <filtering>true</filtering>\n       </resource>\n-\n       <resource>\n         <directory>${basedir}/../src/main/resources</directory>\n         <filtering>true</filtering>\n@@ -167,9 +184,130 @@ under the License.\n         </includes>\n       </resource>\n     </resources>\n+    \n+    <testResources>\n+      <testResource>\n+        <directory>${basedir}/src/test/resources</directory>\n+        <filtering>true</filtering>\n+      </testResource>\n+    </testResources>\n   </build>\n \n   <profiles>\n+    <profile>\n+      <id>debug</id>\n+\n+      <properties>\n+        <skipTests>true</skipTests>\n+      </properties>\n+\n+      <dependencies>\n+        <dependency>\n+          <groupId>org.apache.syncope.common.keymaster</groupId>\n+          <artifactId>syncope-common-keymaster-client-zookeeper</artifactId>\n+          <version>${project.version}</version>\n+          <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+          <groupId>org.apache.curator</groupId>\n+          <artifactId>curator-test</artifactId>\n+          <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+          <groupId>org.apache.cxf</groupId>\n+          <artifactId>cxf-rt-transports-http-netty-server</artifactId>\n+          <scope>compile</scope>\n+        </dependency>\n+      </dependencies>\n+\n+      <build>\n+        <defaultGoal>clean package io.fabric8:docker-maven-plugin:start spring-boot:run</defaultGoal>\n+\n+        <plugins>\n+          <plugin>\n+            <groupId>io.fabric8</groupId>\n+            <artifactId>docker-maven-plugin</artifactId>\n+            <configuration>\n+              <images>\n+                <image>\n+                  <name>zookeeper:${zookeeper.version}</name>\n+                  <run>\n+                    <ports>\n+                      <port>2181:2181</port>\n+                    </ports>\n+                    <volumes>\n+                      <bind>\n+                        <volume>${project.build.testOutputDirectory}/zoo.cfg:/conf/zoo.cfg</volume>\n+                        <volume>${project.build.testOutputDirectory}/java.env:/conf/java.env</volume>\n+                        <volume>${project.build.testOutputDirectory}/server-jaas.conf:/conf/server-jaas.conf</volume>\n+                        <volume>${project.build.testOutputDirectory}/client-jaas.conf:/conf/client-jaas.conf</volume>\n+                      </bind>\n+                    </volumes>\n+                  </run>\n+                </image>\n+              </images>\n+            </configuration>\n+          </plugin>\n+\n+          <plugin>\n+            <groupId>org.codehaus.mojo</groupId>\n+            <artifactId>build-helper-maven-plugin</artifactId>\n+            <executions>\n+              <execution>\n+                <goals>\n+                  <goal>add-source</goal>\n+                </goals>\n+                <configuration>\n+                  <sources>\n+                    <source>${basedir}/src/test/java</source>\n+                  </sources>\n+                </configuration>\n+              </execution>\n+            </executions>\n+          </plugin>\n+\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-compiler-plugin</artifactId>\n+            <configuration>\n+              <excludes>\n+                <exclude>**/org/apache/syncope/sra/**Test.java</exclude>\n+                <exclude>**/org/apache/syncope/sra/**Keymaster*.java</exclude>\n+              </excludes>\n+            </configuration>\n+          </plugin>\n+\n+          <plugin>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-maven-plugin</artifactId>\n+            <configuration>\n+              <mainClass>org.apache.syncope.sra.SyncopeSRAApplication</mainClass>\n+              <systemPropertyVariables>\n+                <reactor.netty.http.server.accessLogEnabled>true</reactor.netty.http.server.accessLogEnabled>\n+              </systemPropertyVariables>\n+              <jvmArguments>\n+                -Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n\n+              </jvmArguments>\n+            </configuration>\n+          </plugin>\n+        </plugins>\n+        \n+        <resources>\n+          <resource>\n+            <directory>${basedir}/src/test/resources</directory>\n+            <filtering>true</filtering>\n+          </resource>\n+        </resources>\n+\n+        <testResources>\n+          <testResource>\n+            <directory>${basedir}/../common/keymaster/client-zookeeper/src/main/resources</directory>\n+            <filtering>true</filtering>\n+          </testResource>\n+        </testResources>\n+      </build>\n+    </profile>\n+\n     <profile>\n       <id>site</id>\n "},{"sha":"7ac2cd8b3f4fe21282d1893eddb689de644be0e2","filename":"sra/src/main/java/org/apache/syncope/sra/CustomGatewayFilterFactory.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FCustomGatewayFilterFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FCustomGatewayFilterFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FCustomGatewayFilterFactory.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra;\n+\n+import org.springframework.cloud.gateway.filter.GatewayFilter;\n+import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;\n+\n+/**\n+ * Base class for custom gateway filter factories.\n+ */\n+public abstract class CustomGatewayFilterFactory\n+        extends AbstractGatewayFilterFactory<CustomGatewayFilterFactory.Config> {\n+\n+    public static class Config {\n+\n+        private String data;\n+\n+        public String getData() {\n+            return data;\n+        }\n+\n+        public void setData(final String data) {\n+            this.data = data;\n+        }\n+    }\n+\n+    public CustomGatewayFilterFactory() {\n+        super(CustomGatewayFilterFactory.Config.class);\n+    }\n+\n+    @Override\n+    public abstract GatewayFilter apply(Config config);\n+}"},{"sha":"22d92998e0043f3df83881891de64addf002fc7b","filename":"sra/src/main/java/org/apache/syncope/sra/CustomRoutePredicateFactory.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FCustomRoutePredicateFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FCustomRoutePredicateFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FCustomRoutePredicateFactory.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra;\n+\n+import java.util.function.Predicate;\n+import org.springframework.cloud.gateway.handler.AsyncPredicate;\n+import org.springframework.cloud.gateway.handler.predicate.AbstractRoutePredicateFactory;\n+import org.springframework.web.server.ServerWebExchange;\n+\n+/**\n+ * Base class for custom predicate factories.\n+ */\n+public abstract class CustomRoutePredicateFactory\n+        extends AbstractRoutePredicateFactory<CustomRoutePredicateFactory.Config> {\n+\n+    public static class Config {\n+\n+        private String data;\n+\n+        public String getData() {\n+            return data;\n+        }\n+\n+        public void setData(final String data) {\n+            this.data = data;\n+        }\n+    }\n+\n+    public CustomRoutePredicateFactory() {\n+        super(CustomRoutePredicateFactory.Config.class);\n+    }\n+\n+    @Override\n+    public abstract AsyncPredicate<ServerWebExchange> applyAsync(Config config);\n+\n+    @Override\n+    public Predicate<ServerWebExchange> apply(final Config config) {\n+        throw new UnsupportedOperationException(getClass().getName() + \" is only async.\");\n+    }\n+}"},{"sha":"7d15556a90ed86c5edbdad30d7b3dd7bb317a225","filename":"sra/src/main/java/org/apache/syncope/sra/ManagementController.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FManagementController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FManagementController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FManagementController.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.gateway.route.Route;\n+import org.springframework.cloud.gateway.route.RouteDefinition;\n+import org.springframework.cloud.gateway.route.RouteDefinitionLocator;\n+import org.springframework.cloud.gateway.route.RouteLocator;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import reactor.core.publisher.Mono;\n+\n+@RestController\n+@RequestMapping(path = \"/management\")\n+public class ManagementController {\n+\n+    @Autowired\n+    private RouteRefresher routeRefresher;\n+\n+    @Autowired\n+    private RouteDefinitionLocator routeDefinitionLocator;\n+\n+    @Autowired\n+    private RouteLocator routeLocator;\n+\n+    @PostMapping(\"/routes/refresh\")\n+    public Mono<Void> refresh() {\n+        routeRefresher.refresh();\n+        return Mono.empty();\n+    }\n+\n+    @GetMapping(\"/routes\")\n+    public Mono<List<Map<String, Object>>> routes() {\n+        Mono<Map<String, RouteDefinition>> routeDefs =\n+                routeDefinitionLocator.getRouteDefinitions().collectMap(RouteDefinition::getId);\n+        Mono<List<Route>> routes = routeLocator.getRoutes().collectList();\n+        return Mono.zip(routeDefs, routes).map(tuple -> {\n+            Map<String, RouteDefinition> defs = tuple.getT1();\n+            List<Route> routeList = tuple.getT2();\n+            List<Map<String, Object>> allRoutes = new ArrayList<>();\n+\n+            routeList.forEach(route -> {\n+                Map<String, Object> r = new HashMap<>();\n+                r.put(\"route_id\", route.getId());\n+                r.put(\"order\", route.getOrder());\n+\n+                if (defs.containsKey(route.getId())) {\n+                    r.put(\"route_definition\", defs.get(route.getId()));\n+                } else {\n+                    Map<String, Object> obj = new HashMap<>();\n+\n+                    obj.put(\"predicate\", route.getPredicate().toString());\n+\n+                    if (!route.getFilters().isEmpty()) {\n+                        obj.put(\"filters\",\n+                                route.getFilters().stream().map(Object::toString).collect(Collectors.toList()));\n+                    }\n+\n+                    if (!obj.isEmpty()) {\n+                        r.put(\"route_object\", obj);\n+                    }\n+                }\n+                allRoutes.add(r);\n+            });\n+\n+            return allRoutes;\n+        });\n+    }\n+}"},{"sha":"709705a535ec5a34030ec013d0f880196aa0e9c1","filename":"sra/src/main/java/org/apache/syncope/sra/RouteProvider.java","status":"added","additions":472,"deletions":0,"changes":472,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -0,0 +1,472 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+import org.apache.syncope.common.lib.to.GatewayRouteTO;\n+import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n+import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n+import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n+import org.apache.syncope.common.rest.api.service.GatewayRouteService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.cloud.gateway.filter.GatewayFilter;\n+import org.springframework.cloud.gateway.filter.OrderedGatewayFilter;\n+import org.springframework.cloud.gateway.filter.factory.AddRequestHeaderGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.AddRequestParameterGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.AddResponseHeaderGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.FallbackHeadersGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.HystrixGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.PrefixPathGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.PreserveHostHeaderGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.RedirectToGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.RemoveRequestHeaderGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.RemoveResponseHeaderGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.RequestHeaderToRequestUriGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.RequestRateLimiterGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.RequestSizeGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.RetryGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.RewritePathGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.RewriteResponseHeaderGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.SaveSessionGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.SecureHeadersGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.SetPathGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.SetRequestHeaderGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.SetResponseHeaderGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.SetStatusGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.StripPrefixGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;\n+import org.springframework.cloud.gateway.filter.ratelimit.RateLimiter;\n+import org.springframework.cloud.gateway.handler.AsyncPredicate;\n+import org.springframework.cloud.gateway.handler.predicate.AfterRoutePredicateFactory;\n+import org.springframework.cloud.gateway.handler.predicate.BeforeRoutePredicateFactory;\n+import org.springframework.cloud.gateway.handler.predicate.BetweenRoutePredicateFactory;\n+import org.springframework.cloud.gateway.handler.predicate.CookieRoutePredicateFactory;\n+import org.springframework.cloud.gateway.handler.predicate.HeaderRoutePredicateFactory;\n+import org.springframework.cloud.gateway.handler.predicate.HostRoutePredicateFactory;\n+import org.springframework.cloud.gateway.handler.predicate.MethodRoutePredicateFactory;\n+import org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory;\n+import org.springframework.cloud.gateway.handler.predicate.QueryRoutePredicateFactory;\n+import org.springframework.cloud.gateway.handler.predicate.RemoteAddrRoutePredicateFactory;\n+import org.springframework.cloud.gateway.route.Route;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.core.Ordered;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.server.ServerWebExchange;\n+\n+@Component\n+public class RouteProvider {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RouteProvider.class);\n+\n+    @Autowired\n+    private ServiceOps serviceOps;\n+\n+    @Autowired\n+    private ConfigurableApplicationContext ctx;\n+\n+    @Value(\"${anonymousUser}\")\n+    private String anonymousUser;\n+\n+    @Value(\"${anonymousKey}\")\n+    private String anonymousKey;\n+\n+    @Value(\"${useGZIPCompression}\")\n+    private boolean useGZIPCompression;\n+\n+    private SyncopeClient client;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private GatewayFilter toFilter(final String routeId, final GatewayRouteFilter gwfilter)\n+            throws ClassNotFoundException {\n+\n+        GatewayFilter filter;\n+\n+        switch (gwfilter.getFactory()) {\n+            case ADD_REQUEST_HEADER:\n+                String[] addRequestHeaderArgs = gwfilter.getArgs().split(\",\");\n+                filter = ctx.getBean(AddRequestHeaderGatewayFilterFactory.class).\n+                        apply(c -> c.setName(addRequestHeaderArgs[0].trim()).\n+                        setValue(addRequestHeaderArgs[1].trim()));\n+                break;\n+\n+            case ADD_REQUEST_PARAMETER:\n+                String[] addRequestParameterArgs = gwfilter.getArgs().split(\",\");\n+                filter = ctx.getBean(AddRequestParameterGatewayFilterFactory.class).\n+                        apply(c -> c.setName(addRequestParameterArgs[0].trim()).\n+                        setValue(addRequestParameterArgs[1].trim()));\n+                break;\n+\n+            case ADD_RESPONSE_HEADER:\n+                String[] addResponseHeaderArgs = gwfilter.getArgs().split(\",\");\n+                filter = ctx.getBean(AddResponseHeaderGatewayFilterFactory.class).\n+                        apply(c -> c.setName(addResponseHeaderArgs[0].trim()).\n+                        setValue(addResponseHeaderArgs[1].trim()));\n+                break;\n+\n+            case HYSTRIX:\n+                String[] hystrixArgs = gwfilter.getArgs().split(\",\");\n+                filter = ctx.getBean(HystrixGatewayFilterFactory.class).\n+                        apply(routeId, c -> {\n+                            if (StringUtils.isNotBlank(hystrixArgs[0])) {\n+                                c.setName(hystrixArgs[0].trim());\n+                            }\n+                            if (StringUtils.isNotBlank(hystrixArgs[1])) {\n+                                c.setFallbackUri(hystrixArgs[1].trim());\n+                            }\n+                        });\n+                break;\n+\n+            case FALLBACK_HEADERS:\n+                String[] fallbackHeadersArgs = gwfilter.getArgs().split(\",\");\n+                filter = ctx.getBean(FallbackHeadersGatewayFilterFactory.class).\n+                        apply(c -> {\n+                            if (StringUtils.isNotBlank(fallbackHeadersArgs[0])) {\n+                                c.setCauseExceptionMessageHeaderName(fallbackHeadersArgs[0].trim());\n+                            }\n+                            if (StringUtils.isNotBlank(fallbackHeadersArgs[1])) {\n+                                c.setExecutionExceptionMessageHeaderName(fallbackHeadersArgs[1].trim());\n+                            }\n+                            if (StringUtils.isNotBlank(fallbackHeadersArgs[2])) {\n+                                c.setExecutionExceptionTypeHeaderName(fallbackHeadersArgs[2].trim());\n+                            }\n+                            if (StringUtils.isNotBlank(fallbackHeadersArgs[3])) {\n+                                c.setRootCauseExceptionTypeHeaderName(fallbackHeadersArgs[3].trim());\n+                            }\n+                        });\n+                break;\n+\n+            case PREFIX_PATH:\n+                filter = ctx.getBean(PrefixPathGatewayFilterFactory.class).\n+                        apply(c -> c.setPrefix(gwfilter.getArgs().trim()));\n+                break;\n+\n+            case PRESERVE_HOST_HEADER:\n+                filter = ctx.getBean(PreserveHostHeaderGatewayFilterFactory.class).apply();\n+                break;\n+\n+            case REDIRECT:\n+                String[] redirectArgs = gwfilter.getArgs().split(\",\");\n+                filter = ctx.getBean(RedirectToGatewayFilterFactory.class).\n+                        apply(redirectArgs[0].trim(), redirectArgs[1].trim());\n+                break;\n+\n+            case REMOVE_REQUEST_HEADER:\n+                filter = ctx.getBean(RemoveRequestHeaderGatewayFilterFactory.class).\n+                        apply(c -> c.setName(gwfilter.getArgs().trim()));\n+                break;\n+\n+            case REMOVE_RESPONSE_HEADER:\n+                filter = ctx.getBean(RemoveResponseHeaderGatewayFilterFactory.class).\n+                        apply(c -> c.setName(gwfilter.getArgs().trim()));\n+                break;\n+\n+            case REQUEST_RATE_LIMITER:\n+                String[] requestRateLimiterArgs = gwfilter.getArgs().split(\",\");\n+                filter = ctx.getBean(RequestRateLimiterGatewayFilterFactory.class).\n+                        apply(c -> {\n+                            if (StringUtils.isNotBlank(requestRateLimiterArgs[0])) {\n+                                c.setDenyEmptyKey(BooleanUtils.toBoolean(requestRateLimiterArgs[0].trim()));\n+                            }\n+                            if (StringUtils.isNotBlank(requestRateLimiterArgs[1])) {\n+                                c.setEmptyKeyStatus(requestRateLimiterArgs[1].trim());\n+                            }\n+                            if (StringUtils.isNotBlank(requestRateLimiterArgs[2])) {\n+                                c.setKeyResolver(ctx.getBean(requestRateLimiterArgs[2].trim(), KeyResolver.class));\n+                            }\n+                            if (StringUtils.isNotBlank(requestRateLimiterArgs[3])) {\n+                                c.setRateLimiter(ctx.getBean(requestRateLimiterArgs[3].trim(), RateLimiter.class));\n+                            }\n+                            if (StringUtils.isNotBlank(requestRateLimiterArgs[4])) {\n+                                c.setStatusCode(HttpStatus.valueOf(requestRateLimiterArgs[4].trim()));\n+                            }\n+                        });\n+                break;\n+\n+            case REWRITE_PATH:\n+                String[] rewritePathArgs = gwfilter.getArgs().split(\",\");\n+                filter = ctx.getBean(RewritePathGatewayFilterFactory.class).\n+                        apply(c -> c.setRegexp(rewritePathArgs[0].trim()).\n+                        setReplacement(rewritePathArgs[1].trim()));\n+                break;\n+\n+            case RETRY:\n+                filter = ctx.getBean(RetryGatewayFilterFactory.class).\n+                        apply(c -> c.setRetries(Integer.valueOf(gwfilter.getArgs().trim())));\n+                break;\n+\n+            case SECURE_HEADERS:\n+                filter = ctx.getBean(SecureHeadersGatewayFilterFactory.class).apply(c -> {\n+                });\n+                break;\n+\n+            case SET_PATH:\n+                filter = ctx.getBean(SetPathGatewayFilterFactory.class).\n+                        apply(c -> c.setTemplate(gwfilter.getArgs().trim()));\n+                break;\n+\n+            case SET_REQUEST_HEADER:\n+                String[] setRequestHeaderArgs = gwfilter.getArgs().split(\",\");\n+                filter = ctx.getBean(SetRequestHeaderGatewayFilterFactory.class).\n+                        apply(c -> c.setName(setRequestHeaderArgs[0].trim()).\n+                        setValue(setRequestHeaderArgs[1].trim()));\n+                break;\n+\n+            case SET_RESPONSE_HEADER:\n+                String[] setResponseHeaderArgs = gwfilter.getArgs().split(\",\");\n+                filter = ctx.getBean(SetResponseHeaderGatewayFilterFactory.class).\n+                        apply(c -> c.setName(setResponseHeaderArgs[0].trim()).\n+                        setValue(setResponseHeaderArgs[1].trim()));\n+                break;\n+\n+            case REWRITE_RESPONSE_HEADER:\n+                String[] rewriteResponseHeaderArgs = gwfilter.getArgs().split(\",\");\n+                filter = ctx.getBean(RewriteResponseHeaderGatewayFilterFactory.class).\n+                        apply(c -> c.setReplacement(rewriteResponseHeaderArgs[2].trim()).\n+                        setRegexp(rewriteResponseHeaderArgs[1].trim()).\n+                        setName(rewriteResponseHeaderArgs[0].trim()));\n+                break;\n+\n+            case SET_STATUS:\n+                filter = ctx.getBean(SetStatusGatewayFilterFactory.class).\n+                        apply(c -> c.setStatus(gwfilter.getArgs().trim()));\n+                break;\n+\n+            case SAVE_SESSION:\n+                filter = ctx.getBean(SaveSessionGatewayFilterFactory.class).apply(c -> {\n+                });\n+                break;\n+\n+            case STRIP_PREFIX:\n+                filter = ctx.getBean(StripPrefixGatewayFilterFactory.class).\n+                        apply(c -> c.setParts(Integer.valueOf(gwfilter.getArgs().trim())));\n+                break;\n+\n+            case REQUEST_HEADER_TO_REQUEST_URI:\n+                filter = ctx.getBean(RequestHeaderToRequestUriGatewayFilterFactory.class).\n+                        apply(c -> c.setName(gwfilter.getArgs().trim()));\n+                break;\n+\n+            case SET_REQUEST_SIZE:\n+                filter = ctx.getBean(RequestSizeGatewayFilterFactory.class).\n+                        apply(c -> c.setMaxSize(Long.valueOf(gwfilter.getArgs().trim())));\n+                break;\n+\n+            case CUSTOM:\n+                String[] customArgs = gwfilter.getArgs().split(\";\");\n+                CustomGatewayFilterFactory factory;\n+                if (ctx.getBeanFactory().containsSingleton(customArgs[0])) {\n+                    factory = (CustomGatewayFilterFactory) ctx.getBeanFactory().getSingleton(customArgs[0]);\n+                } else {\n+                    factory = (CustomGatewayFilterFactory) ctx.getBeanFactory().\n+                            createBean(Class.forName(customArgs[0]), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+                    ctx.getBeanFactory().registerSingleton(customArgs[0], factory);\n+                }\n+                filter = factory.apply(c -> c.setData(customArgs[1]));\n+                break;\n+\n+            default:\n+                filter = null;\n+        }\n+\n+        if (filter == null) {\n+            throw new IllegalArgumentException(\"Could not translate \" + gwfilter);\n+        }\n+\n+        return filter instanceof Ordered ? filter : new OrderedGatewayFilter(filter, 0);\n+    }\n+\n+    private AsyncPredicate<ServerWebExchange> toPredicate(final GatewayRoutePredicate gwpredicate, final boolean negate)\n+            throws ClassNotFoundException {\n+\n+        AsyncPredicate<ServerWebExchange> predicate;\n+        switch (gwpredicate.getFactory()) {\n+            case AFTER:\n+                predicate = ctx.getBean(AfterRoutePredicateFactory.class).\n+                        applyAsync(c -> c.setDatetime(ZonedDateTime.parse(gwpredicate.getArgs().trim())));\n+                break;\n+\n+            case BEFORE:\n+                predicate = ctx.getBean(BeforeRoutePredicateFactory.class).\n+                        applyAsync(c -> c.setDatetime(ZonedDateTime.parse(gwpredicate.getArgs().trim())));\n+                break;\n+\n+            case BETWEEN:\n+                String[] betweenArgs = gwpredicate.getArgs().split(\",\");\n+                predicate = ctx.getBean(BetweenRoutePredicateFactory.class).\n+                        applyAsync(c -> c.setDatetime1(ZonedDateTime.parse(betweenArgs[0].trim())).\n+                        setDatetime2(ZonedDateTime.parse(betweenArgs[1].trim())));\n+                break;\n+\n+            case COOKIE:\n+                String[] cookieArgs = gwpredicate.getArgs().split(\",\");\n+                predicate = ctx.getBean(CookieRoutePredicateFactory.class).\n+                        applyAsync(c -> c.setName(cookieArgs[0].trim()).\n+                        setRegexp(cookieArgs[1].trim()));\n+                break;\n+\n+            case HEADER:\n+                predicate = ctx.getBean(HeaderRoutePredicateFactory.class).\n+                        applyAsync(c -> c.setHeader(gwpredicate.getArgs().trim()));\n+                break;\n+\n+            case HOST:\n+                String[] hostArgs = gwpredicate.getArgs().split(\",\");\n+                predicate = ctx.getBean(HostRoutePredicateFactory.class).\n+                        applyAsync(c -> c.setPatterns(Arrays.asList(hostArgs)));\n+                break;\n+\n+            case METHOD:\n+                predicate = ctx.getBean(MethodRoutePredicateFactory.class).\n+                        applyAsync(c -> c.setMethod(HttpMethod.resolve(gwpredicate.getArgs().trim())));\n+                break;\n+\n+            case PATH:\n+                String[] pathArgs = gwpredicate.getArgs().split(\",\");\n+                predicate = ctx.getBean(PathRoutePredicateFactory.class).\n+                        applyAsync(c -> c.setPatterns(Arrays.asList(pathArgs)));\n+                break;\n+\n+            case QUERY:\n+                String[] queryArgs = gwpredicate.getArgs().split(\",\");\n+                predicate = ctx.getBean(QueryRoutePredicateFactory.class).\n+                        applyAsync(c -> c.setParam(queryArgs[0].trim()).\n+                        setRegexp(queryArgs[1].trim()));\n+                break;\n+\n+            case REMOTE_ADDR:\n+                String[] remoteAddrArgs = gwpredicate.getArgs().split(\",\");\n+                predicate = ctx.getBean(RemoteAddrRoutePredicateFactory.class).\n+                        applyAsync(c -> c.setSources(Arrays.asList(remoteAddrArgs)));\n+                break;\n+\n+            case CUSTOM:\n+                String[] customArgs = gwpredicate.getArgs().split(\";\");\n+                CustomRoutePredicateFactory factory;\n+                if (ctx.getBeanFactory().containsSingleton(customArgs[0])) {\n+                    factory = (CustomRoutePredicateFactory) ctx.getBeanFactory().getSingleton(customArgs[0]);\n+                } else {\n+                    factory = (CustomRoutePredicateFactory) ctx.getBeanFactory().\n+                            createBean(Class.forName(customArgs[0]), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+                    ctx.getBeanFactory().registerSingleton(customArgs[0], factory);\n+                }\n+                predicate = factory.applyAsync(c -> c.setData(customArgs[1]));\n+                break;\n+\n+            default:\n+                predicate = null;\n+        }\n+\n+        if (predicate == null) {\n+            throw new IllegalArgumentException(\"Could not translate \" + gwpredicate);\n+        }\n+\n+        if (negate) {\n+            predicate.negate();\n+        }\n+        return predicate;\n+    }\n+\n+    private Route.AsyncBuilder toRoute(final GatewayRouteTO gwroute) {\n+        Route.AsyncBuilder builder = new Route.AsyncBuilder().\n+                id(gwroute.getKey()).order(gwroute.getOrder()).uri(gwroute.getTarget());\n+\n+        if (gwroute.getPredicates().isEmpty()) {\n+            builder.predicate(exchange -> true);\n+        } else {\n+            gwroute.getPredicates().forEach(gwpredicate -> {\n+                if (builder.getPredicate() == null) {\n+                    try {\n+                        builder.asyncPredicate(toPredicate(gwpredicate, gwpredicate.isNegate()));\n+                    } catch (Exception e) {\n+                        LOG.error(\"Could not translate {}, skipping\", gwpredicate, e);\n+                    }\n+                } else {\n+                    try {\n+                        switch (gwpredicate.getCond()) {\n+                            case OR:\n+                                builder.or(toPredicate(gwpredicate, gwpredicate.isNegate()));\n+                                break;\n+\n+                            case AND:\n+                            default:\n+                                builder.and(toPredicate(gwpredicate, gwpredicate.isNegate()));\n+                        }\n+                    } catch (Exception e) {\n+                        LOG.error(\"Could not translate {}, skipping\", gwpredicate, e);\n+                    }\n+                }\n+            });\n+        }\n+\n+        if (!gwroute.getFilters().isEmpty()) {\n+            builder.filters(gwroute.getFilters().stream().\n+                    map(gwfilter -> {\n+                        try {\n+                            return toFilter(gwroute.getKey(), gwfilter);\n+                        } catch (Exception e) {\n+                            LOG.error(\"Could not translate {}, skipping\", gwfilter, e);\n+                            return null;\n+                        }\n+                    }).\n+                    filter(Objects::nonNull).\n+                    collect(Collectors.toList()));\n+        }\n+\n+        return builder;\n+    }\n+\n+    public List<Route.AsyncBuilder> fetch() {\n+        synchronized (this) {\n+            if (client == null) {\n+                try {\n+                    client = new SyncopeClientFactoryBean().\n+                            setAddress(serviceOps.get(NetworkService.Type.CORE).getAddress()).\n+                            setUseCompression(useGZIPCompression).\n+                            create(new AnonymousAuthenticationHandler(anonymousUser, anonymousKey));\n+                } catch (Exception e) {\n+                    LOG.error(\"Could not init SyncopeClient\", e);\n+                    return Collections.emptyList();\n+                }\n+            }\n+        }\n+\n+        return client.getService(GatewayRouteService.class).list().stream().\n+                filter(gwroute -> gwroute.getStatus() == GatewayRouteStatus.PUBLISHED).\n+                map(gwroute -> toRoute(gwroute)).\n+                collect(Collectors.toList());\n+    }\n+}"},{"sha":"8d1996594281ac04b3d494a23978ad506f485af9","filename":"sra/src/main/java/org/apache/syncope/sra/RouteRefresher.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteRefresher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteRefresher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteRefresher.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra;\n+\n+import org.springframework.cloud.gateway.event.RefreshRoutesEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.context.ApplicationEventPublisherAware;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class RouteRefresher implements ApplicationEventPublisherAware {\n+\n+    private ApplicationEventPublisher publisher;\n+\n+    @Override\n+    public void setApplicationEventPublisher(final ApplicationEventPublisher publisher) {\n+        this.publisher = publisher;\n+    }\n+\n+    public void refresh() {\n+        publisher.publishEvent(new RefreshRoutesEvent(this));\n+    }\n+}"},{"sha":"c0bda5850b27a27a7a28367fa9628e80908ea3b5","filename":"sra/src/main/java/org/apache/syncope/sra/SyncopeSRAApplication.java","status":"modified","additions":47,"deletions":2,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -18,21 +18,66 @@\n  */\n package org.apache.syncope.sra;\n \n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.cloud.gateway.route.RouteLocator;\n import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;\n+import org.springframework.context.EnvironmentAware;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.core.env.Environment;\n+import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\n+import org.springframework.security.config.web.server.ServerHttpSecurity;\n+import org.springframework.security.core.userdetails.MapReactiveUserDetailsService;\n+import org.springframework.security.core.userdetails.User;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.web.server.SecurityWebFilterChain;\n+import org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher;\n+import org.springframework.web.util.pattern.PathPatternParser;\n+import reactor.core.publisher.Flux;\n \n+@PropertySource(\"classpath:sra.properties\")\n+@PropertySource(value = \"file:${conf.directory}/sra.properties\", ignoreResourceNotFound = true)\n+@EnableWebFluxSecurity\n @SpringBootApplication\n-public class SyncopeSRAApplication {\n+public class SyncopeSRAApplication implements EnvironmentAware {\n \n     public static void main(final String[] args) {\n         SpringApplication.run(SyncopeSRAApplication.class, args);\n     }\n \n+    @Autowired\n+    private RouteProvider provider;\n+\n+    private Environment env;\n+\n+    @Override\n+    public void setEnvironment(final Environment env) {\n+        this.env = env;\n+    }\n+\n     @Bean\n     public RouteLocator routes(final RouteLocatorBuilder builder) {\n-        return builder.routes().build();\n+        return () -> Flux.fromIterable(provider.fetch()).map(routeBuilder -> routeBuilder.build());\n+    }\n+\n+    @Bean\n+    public SecurityWebFilterChain springSecurityFilterChain(final ServerHttpSecurity http) {\n+        http.csrf().disable().securityMatcher(\n+                new PathPatternParserServerWebExchangeMatcher(new PathPatternParser().parse(\"/management/**\"))).\n+                authorizeExchange().anyExchange().hasRole(IdRepoEntitlement.ANONYMOUS).and().httpBasic();\n+        return http.build();\n+    }\n+\n+    @Bean\n+    public MapReactiveUserDetailsService userDetailsService() {\n+        UserDetails user = User.builder().\n+                username(env.getProperty(\"anonymousUser\")).\n+                password(\"{noop}\" + env.getProperty(\"anonymousKey\")).\n+                roles(IdRepoEntitlement.ANONYMOUS).\n+                build();\n+        return new MapReactiveUserDetailsService(user);\n     }\n }"},{"sha":"4ed772c67f70dbff010b55aed39bcd48eb3993e5","filename":"sra/src/main/java/org/apache/syncope/sra/SyncopeSRAShutdown.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAShutdown.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAShutdown.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAShutdown.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -20,7 +20,9 @@\n \n import org.springframework.context.ApplicationListener;\n import org.springframework.context.event.ContextClosedEvent;\n+import org.springframework.stereotype.Component;\n \n+@Component\n public class SyncopeSRAShutdown extends SyncopeSRAStartStop\n         implements ApplicationListener<ContextClosedEvent> {\n "},{"sha":"cbc7b5911d8ca8feeb19f016931b3480ebc22363","filename":"sra/src/main/java/org/apache/syncope/sra/SyncopeSRAStartup.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAStartup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAStartup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAStartup.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -20,7 +20,9 @@\n \n import org.springframework.context.ApplicationListener;\n import org.springframework.context.event.ContextRefreshedEvent;\n+import org.springframework.stereotype.Component;\n \n+@Component\n public class SyncopeSRAStartup extends SyncopeSRAStartStop\n         implements ApplicationListener<ContextRefreshedEvent> {\n "},{"sha":"b50f4f91f06cc02b71d806b5292e333bd5a934a9","filename":"sra/src/main/resources/application.properties","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -20,12 +20,8 @@ spring.main.banner-mode=log\n \n server.port=8080\n \n-management.endpoint.gateway.enabled=true\n-management.endpoints.web.exposure.include=gateway\n-\n spring.cloud.gateway.metrics.enabled=true\n management.endpoint.metrics.enabled=true\n-management.endpoints.web.exposure.include=*\n management.endpoint.prometheus.enabled=true\n management.metrics.export.prometheus.enabled=true\n "},{"sha":"3e0fa0c89a3b4296153d67fc049b0298129f150e","filename":"sra/src/main/resources/log4j2.xml","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -52,11 +52,18 @@ under the License.\n     <asyncLogger name=\"org.apache.syncope.client.lib\" additivity=\"false\" level=\"OFF\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n-\n     <asyncLogger name=\"org.apache.syncope.sra\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n \n+    <asyncLogger name=\"org.apache.cxf\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+\n+    <asyncLogger name=\"org.springframework.cloud.gateway\" additivity=\"false\" level=\"INFO\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+\n     <!-- Requires -Dreactor.netty.http.server.accessLogEnabled=true to work-->\n     <asyncLogger name=\"reactor.netty.http.server.AccessLog\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"access\"/>"},{"sha":"77cb93e4016f49bfa8e5fadf31d46a3452f2ca76","filename":"sra/src/main/resources/sra.properties","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fresources%2Fsra.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Fmain%2Fresources%2Fsra.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fresources%2Fsra.properties?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -14,8 +14,6 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-sra.directory=${conf.directory}\n-\n anonymousUser=${anonymousUser}\n anonymousKey=${anonymousKey}\n "},{"sha":"aec3dcc8b3f1ad623c8025d4e71eef92cdc2e82a","filename":"sra/src/test/java/org/apache/syncope/sra/BodyPropertyAddingGatewayFilterFactory.java","status":"added","additions":201,"deletions":0,"changes":201,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FBodyPropertyAddingGatewayFilterFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FBodyPropertyAddingGatewayFilterFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FBodyPropertyAddingGatewayFilterFactory.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.zip.GZIPInputStream;\n+import java.util.zip.GZIPOutputStream;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.zookeeper.common.IOUtils;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.cloud.gateway.filter.GatewayFilter;\n+import org.springframework.cloud.gateway.filter.GatewayFilterChain;\n+import org.springframework.cloud.gateway.filter.NettyWriteResponseFilter;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.io.buffer.DataBuffer;\n+import org.springframework.core.io.buffer.DataBufferFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseCookie;\n+import org.springframework.http.client.reactive.ClientHttpResponse;\n+import org.springframework.http.server.reactive.ServerHttpResponse;\n+import org.springframework.http.server.reactive.ServerHttpResponseDecorator;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.server.ServerWebExchange;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Inspired by {@link org.springframework.cloud.gateway.filter.factory.rewrite.ModifyResponseBodyGatewayFilterFactory}.\n+ */\n+public class BodyPropertyAddingGatewayFilterFactory extends CustomGatewayFilterFactory {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(BodyPropertyAddingGatewayFilterFactory.class);\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private static boolean isCompressed(final byte[] bytes) {\n+        if ((bytes == null) || (bytes.length < 2)) {\n+            return false;\n+        } else {\n+            return ((bytes[0] == (byte) (GZIPInputStream.GZIP_MAGIC))\n+                    && (bytes[1] == (byte) (GZIPInputStream.GZIP_MAGIC >> 8)));\n+        }\n+    }\n+\n+    @Override\n+    public GatewayFilter apply(final Config config) {\n+        return new ModifyResponseGatewayFilter(config);\n+    }\n+\n+    public class ModifyResponseGatewayFilter implements GatewayFilter, Ordered {\n+\n+        private final Config config;\n+\n+        public ModifyResponseGatewayFilter(final Config config) {\n+            this.config = config;\n+        }\n+\n+        @Override\n+        public Mono<Void> filter(final ServerWebExchange exchange, final GatewayFilterChain chain) {\n+            ServerHttpResponse originalResponse = exchange.getResponse();\n+\n+            DataBufferFactory bufferFactory = originalResponse.bufferFactory();\n+            ServerHttpResponseDecorator responseDecorator = new ServerHttpResponseDecorator(originalResponse) {\n+\n+                @Override\n+                public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {\n+                    if (body instanceof Flux) {\n+                        Flux<? extends DataBuffer> flux = (Flux<? extends DataBuffer>) body;\n+\n+                        return super.writeWith(flux.buffer().map(dataBuffers -> {\n+                            ByteArrayOutputStream payload = new ByteArrayOutputStream();\n+                            dataBuffers.forEach(buffer -> {\n+                                byte[] array = new byte[buffer.readableByteCount()];\n+                                buffer.read(array);\n+                                try {\n+                                    payload.write(array);\n+                                } catch (IOException e) {\n+                                    LOG.error(\"While reading original body content\", e);\n+                                }\n+                            });\n+\n+                            byte[] input = payload.toByteArray();\n+\n+                            InputStream is = null;\n+                            boolean compressed = false;\n+                            byte[] output;\n+                            try {\n+                                if (isCompressed(input)) {\n+                                    compressed = true;\n+                                    is = new GZIPInputStream(new ByteArrayInputStream(input));\n+                                } else {\n+                                    is = new ByteArrayInputStream(input);\n+                                }\n+\n+                                ObjectNode content = (ObjectNode) MAPPER.readTree(is);\n+                                String[] kv = config.getData().split(\"=\");\n+                                content.put(kv[0], kv[1]);\n+\n+                                output = MAPPER.writeValueAsBytes(content);\n+                            } catch (IOException e) {\n+                                LOG.error(\"While (de)serializing as JSON\", e);\n+                                output = ArrayUtils.clone(input);\n+                            } finally {\n+                                IOUtils.closeStream(is);\n+                            }\n+\n+                            if (compressed) {\n+                                try (ByteArrayOutputStream baos = new ByteArrayOutputStream(output.length);\n+                                        GZIPOutputStream gzipos = new GZIPOutputStream(baos)) {\n+\n+                                    gzipos.write(output);\n+                                    gzipos.close();\n+                                    output = baos.toByteArray();\n+                                } catch (IOException e) {\n+                                    LOG.error(\"While GZIP-encoding output\", e);\n+                                }\n+                            }\n+\n+                            return bufferFactory.wrap(output);\n+                        }));\n+                    }\n+\n+                    return super.writeWith(body);\n+                }\n+            };\n+\n+            return chain.filter(exchange.mutate().response(responseDecorator).build());\n+        }\n+\n+        @Override\n+        public int getOrder() {\n+            return NettyWriteResponseFilter.WRITE_RESPONSE_FILTER_ORDER - 1;\n+        }\n+    }\n+\n+    public class ResponseAdapter implements ClientHttpResponse {\n+\n+        private final Flux<DataBuffer> flux;\n+\n+        private final HttpHeaders headers;\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public ResponseAdapter(final Publisher<? extends DataBuffer> body, final HttpHeaders headers) {\n+            this.headers = headers;\n+            if (body instanceof Flux) {\n+                flux = (Flux) body;\n+            } else {\n+                flux = ((Mono) body).flux();\n+            }\n+        }\n+\n+        @Override\n+        public Flux<DataBuffer> getBody() {\n+            return flux;\n+        }\n+\n+        @Override\n+        public HttpHeaders getHeaders() {\n+            return headers;\n+        }\n+\n+        @Override\n+        public HttpStatus getStatusCode() {\n+            return null;\n+        }\n+\n+        @Override\n+        public int getRawStatusCode() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public MultiValueMap<String, ResponseCookie> getCookies() {\n+            return null;\n+        }\n+    }\n+}"},{"sha":"bff39034049a03bfd4be315d29bcdf1acd337730","filename":"sra/src/test/java/org/apache/syncope/sra/BodyPropertyMatchingRoutePredicateFactory.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FBodyPropertyMatchingRoutePredicateFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FBodyPropertyMatchingRoutePredicateFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FBodyPropertyMatchingRoutePredicateFactory.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.List;\n+import org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter;\n+import org.springframework.cloud.gateway.handler.AsyncPredicate;\n+import org.springframework.core.io.buffer.DataBuffer;\n+import org.springframework.core.io.buffer.DataBufferUtils;\n+import org.springframework.http.codec.HttpMessageReader;\n+import org.springframework.http.server.reactive.ServerHttpRequest;\n+import org.springframework.http.server.reactive.ServerHttpRequestDecorator;\n+import org.springframework.web.reactive.function.server.HandlerStrategies;\n+import org.springframework.web.reactive.function.server.ServerRequest;\n+import org.springframework.web.server.ServerWebExchange;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Inspired by {@link org.springframework.cloud.gateway.handler.predicate.ReadBodyPredicateFactory}.\n+ */\n+public class BodyPropertyMatchingRoutePredicateFactory extends CustomRoutePredicateFactory {\n+\n+    private static final String CACHE_REQUEST_BODY_OBJECT_KEY = \"cachedRequestBodyObject\";\n+\n+    private static final List<HttpMessageReader<?>> MESSAGE_READERS =\n+            HandlerStrategies.withDefaults().messageReaders();\n+\n+    @Override\n+    public AsyncPredicate<ServerWebExchange> applyAsync(final Config config) {\n+        return exchange -> {\n+            JsonNode cachedBody = exchange.getAttribute(CACHE_REQUEST_BODY_OBJECT_KEY);\n+            if (cachedBody == null) {\n+                // Join all the DataBuffers so we have a single DataBuffer for the body\n+                return DataBufferUtils.join(exchange.getRequest().getBody()).flatMap(dataBuffer -> {\n+                    // Update the retain counts so we can read the body twice, once to parse into an object\n+                    // that we can test the predicate against and a second time when the HTTP client sends\n+                    // the request downstream \n+                    // Note: if we end up reading the body twice we will run into a problem, but as of right\n+                    // now there is no good use case for doing this\n+                    DataBufferUtils.retain(dataBuffer);\n+                    // Make a slice for each read so each read has its own read/write indexes\n+                    Flux<DataBuffer> cachedFlux = Flux.defer(() -> Flux.just(\n+                            dataBuffer.slice(0, dataBuffer.readableByteCount())));\n+\n+                    ServerHttpRequest mutatedRequest = new ServerHttpRequestDecorator(exchange.getRequest()) {\n+\n+                        @Override\n+                        public Flux<DataBuffer> getBody() {\n+                            return cachedFlux;\n+                        }\n+                    };\n+                    return ServerRequest.create(exchange.mutate().request(mutatedRequest).build(), MESSAGE_READERS).\n+                            bodyToMono(JsonNode.class).doOnNext(value -> {\n+                        exchange.getAttributes().put(CACHE_REQUEST_BODY_OBJECT_KEY, value);\n+                        exchange.getAttributes().put(AdaptCachedBodyGlobalFilter.CACHED_REQUEST_BODY_KEY, cachedFlux);\n+                    }).map(objectValue -> objectValue.has(config.getData()));\n+                });\n+            } else {\n+                return Mono.just(cachedBody.has(config.getData()));\n+            }\n+        };\n+    }\n+}"},{"sha":"3b16c64e9d733852c80efc0e87301e91664568bc","filename":"sra/src/test/java/org/apache/syncope/sra/SyncopeSRATest.java","status":"added","additions":207,"deletions":0,"changes":207,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATest.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.net.URI;\n+import org.apache.syncope.common.lib.to.GatewayRouteTO;\n+import org.apache.syncope.common.lib.types.FilterFactory;\n+import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n+import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n+import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n+import org.apache.syncope.common.lib.types.PredicateCond;\n+import org.apache.syncope.common.lib.types.PredicateFactory;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.cloud.contract.wiremock.AutoConfigureWireMock;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.reactive.server.WebTestClient;\n+import org.springframework.web.reactive.function.BodyInserters;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@AutoConfigureWireMock(port = 0)\n+public class SyncopeSRATest {\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    @Autowired\n+    private WebTestClient webClient;\n+\n+    @Autowired\n+    private RouteRefresher routeRefresher;\n+\n+    @Value(\"${wiremock.server.port}\")\n+    private int wiremockPort;\n+\n+    @BeforeEach\n+    public void clearRoutes() {\n+        SyncopeSRATestCoreStartup.ROUTES.clear();\n+    }\n+\n+    @Test\n+    public void root() {\n+        webClient.get().exchange().expectStatus().isNotFound();\n+    }\n+\n+    @Test\n+    public void getAddResponseHeader() {\n+        // 1. no mapping for URL\n+        webClient.get().uri(\"/getAddResponseHeader\").exchange().expectStatus().isNotFound();\n+\n+        // 2. stub for proxied URL\n+        stubFor(get(urlEqualTo(\"/getAddResponseHeader\")).willReturn(aResponse()));\n+\n+        // 3. create route configuration\n+        GatewayRouteTO routeTO = new GatewayRouteTO();\n+        routeTO.setKey(\"getAddResponseHeader\");\n+        routeTO.setStatus(GatewayRouteStatus.PUBLISHED);\n+        routeTO.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        routeTO.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.METHOD).args(\"GET\").build());\n+        routeTO.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.PATH).args(\"/getAddResponseHeader\").cond(PredicateCond.AND).build());\n+        routeTO.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.ADD_RESPONSE_HEADER).args(\"Hello,World\").build());\n+\n+        SyncopeSRATestCoreStartup.ROUTES.put(routeTO.getKey(), routeTO);\n+\n+        routeRefresher.refresh();\n+\n+        // 4. now mapping works for URL\n+        webClient.get().uri(\"/getAddResponseHeader\").exchange().\n+                expectStatus().isOk().\n+                expectHeader().valueEquals(\"Hello\", \"World\");\n+\n+        // 5. update route configuration\n+        routeTO.getFilters().clear();\n+        routeTO.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.ADD_RESPONSE_HEADER).args(\"Hello,WorldZ\").build());\n+\n+        routeRefresher.refresh();\n+\n+        // 6. mapping for URL is updated too\n+        webClient.get().uri(\"/getAddResponseHeader\").exchange().\n+                expectStatus().isOk().\n+                expectHeader().valueEquals(\"Hello\", \"WorldZ\");\n+\n+        // 7. update route configuration again\n+        routeTO.getFilters().clear();\n+\n+        routeRefresher.refresh();\n+\n+        // 8. mapping for URL is updated again\n+        webClient.get().uri(\"/getAddResponseHeader\").exchange().\n+                expectStatus().isOk().\n+                expectHeader().doesNotExist(\"Hello\");\n+    }\n+\n+    @Test\n+    public void hystrix() {\n+        webClient.get().uri(\"/fallback\").exchange().\n+                expectStatus().isOk().\n+                expectBody().\n+                consumeWith(response -> assertThat(response.getResponseBody()).isEqualTo(\"fallback\".getBytes()));\n+\n+        stubFor(get(urlEqualTo(\"/delay/3\")).\n+                willReturn(aResponse().\n+                        withBody(\"no fallback\").\n+                        withFixedDelay(3000)));\n+\n+        GatewayRouteTO routeTO = new GatewayRouteTO();\n+        routeTO.setKey(\"hystrix\");\n+        routeTO.setStatus(GatewayRouteStatus.PUBLISHED);\n+        routeTO.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        routeTO.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.HOST).args(\"*.hystrix.com\").build());\n+        routeTO.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.HYSTRIX).args(\"fallbackcmd,forward:/fallback\").build());\n+\n+        SyncopeSRATestCoreStartup.ROUTES.put(routeTO.getKey(), routeTO);\n+\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/delay/3\").\n+                header(HttpHeaders.HOST, \"www.hystrix.com\").\n+                exchange().\n+                expectStatus().isOk().\n+                expectBody().\n+                consumeWith(response -> assertThat(response.getResponseBody()).isEqualTo(\"fallback\".getBytes()));\n+    }\n+\n+    @Test\n+    public void custom() {\n+        stubFor(post(urlEqualTo(\"/custom\")).\n+                willReturn(aResponse().\n+                        withHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE).\n+                        withBody(\"{\\\"data\\\": \\\"data\\\"}\")));\n+\n+        GatewayRouteTO routeTO = new GatewayRouteTO();\n+        routeTO.setKey(\"custom\");\n+        routeTO.setStatus(GatewayRouteStatus.PUBLISHED);\n+        routeTO.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        routeTO.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.CUSTOM).\n+                args(BodyPropertyMatchingRoutePredicateFactory.class.getName() + \";cool\").build());\n+        routeTO.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.ADD_RESPONSE_HEADER).args(\"Custom,matched\").build());\n+        routeTO.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.CUSTOM).\n+                args(BodyPropertyAddingGatewayFilterFactory.class.getName() + \";customized=true\").build());\n+\n+        SyncopeSRATestCoreStartup.ROUTES.put(routeTO.getKey(), routeTO);\n+\n+        routeRefresher.refresh();\n+\n+        webClient.post().uri(\"/custom\").\n+                body(BodyInserters.fromObject(MAPPER.createObjectNode().put(\"other\", true))).\n+                exchange().\n+                expectStatus().isNotFound();\n+\n+        webClient.post().uri(\"/custom\").\n+                body(BodyInserters.fromObject(MAPPER.createObjectNode().put(\"cool\", true))).\n+                exchange().\n+                expectStatus().isOk().\n+                expectHeader().valueEquals(\"Custom\", \"matched\").\n+                expectBody().\n+                consumeWith(response -> {\n+                    try {\n+                        JsonNode body = MAPPER.readTree(response.getResponseBody());\n+                        assertTrue(body.has(\"customized\"));\n+                        assertTrue(body.get(\"customized\").asBoolean());\n+                    } catch (IOException e) {\n+                        fail(e.getMessage(), e);\n+                    }\n+                });\n+    }\n+}"},{"sha":"c56490f916dc2ab4a2e6ef86e00c602904792b67","filename":"sra/src/test/java/org/apache/syncope/sra/SyncopeSRATestController.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATestController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATestController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATestController.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra;\n+\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import reactor.core.publisher.Mono;\n+\n+@RestController\n+public class SyncopeSRATestController {\n+\n+    @RequestMapping(\"/fallback\")\n+    public Mono<String> fallback() {\n+        return Mono.just(\"fallback\");\n+    }\n+}"},{"sha":"9a12b669d88a7523886687d9dd217a7c7bb89326","filename":"sra/src/test/java/org/apache/syncope/sra/SyncopeSRATestCoreStartup.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATestCoreStartup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATestCoreStartup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATestCoreStartup.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra;\n+\n+import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import javax.ws.rs.NotFoundException;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;\n+import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+import org.apache.syncope.common.lib.to.GatewayRouteTO;\n+import org.apache.syncope.common.rest.api.service.GatewayRouteService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationListener;\n+import org.springframework.context.event.ContextRefreshedEvent;\n+import org.springframework.core.Ordered;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SyncopeSRATestCoreStartup extends SyncopeSRAStartStop\n+        implements ApplicationListener<ContextRefreshedEvent>, Ordered {\n+\n+    public static final String ADDRESS = \"http://localhost:9080/syncope/rest\";\n+\n+    public static final Map<String, GatewayRouteTO> ROUTES = new ConcurrentHashMap<>();\n+\n+    @Autowired\n+    private RouteRefresher routeRefresher;\n+\n+    @Override\n+    public int getOrder() {\n+        return Ordered.LOWEST_PRECEDENCE;\n+    }\n+\n+    @Override\n+    public void onApplicationEvent(final ContextRefreshedEvent event) {\n+        // 1. start (mocked) Core as embedded CXF\n+        JAXRSServerFactoryBean sf = new JAXRSServerFactoryBean();\n+        sf.setAddress(ADDRESS);\n+        sf.setResourceClasses(GatewayRouteService.class);\n+        sf.setResourceProvider(\n+                GatewayRouteService.class,\n+                new SingletonResourceProvider(new StubGatewayRouteService(), true));\n+        sf.setProviders(Collections.singletonList(new JacksonJsonProvider()));\n+        sf.create();\n+\n+        // 2. register Core in Keymaster\n+        NetworkService core = new NetworkService();\n+        core.setType(NetworkService.Type.CORE);\n+        core.setAddress(SyncopeSRATestCoreStartup.ADDRESS);\n+        serviceOps.register(core);\n+    }\n+\n+    public class StubGatewayRouteService implements GatewayRouteService {\n+\n+        @Override\n+        public List<GatewayRouteTO> list() {\n+            return ROUTES.values().stream().\n+                    sorted(Comparator.comparing(GatewayRouteTO::getKey)).\n+                    collect(Collectors.toList());\n+        }\n+\n+        @Override\n+        public Response create(final GatewayRouteTO routeTO) {\n+            ROUTES.putIfAbsent(routeTO.getKey(), routeTO);\n+            return Response.noContent().build();\n+        }\n+\n+        @Override\n+        public GatewayRouteTO read(final String key) {\n+            GatewayRouteTO route = ROUTES.get(key);\n+            if (route == null) {\n+                throw new NotFoundException();\n+            }\n+            return route;\n+        }\n+\n+        @Override\n+        public void update(final GatewayRouteTO routeTO) {\n+            read(routeTO.getKey());\n+            ROUTES.put(routeTO.getKey(), routeTO);\n+        }\n+\n+        @Override\n+        public void delete(final String key) {\n+            ROUTES.remove(key);\n+        }\n+\n+        @Override\n+        public void pushToSRA() {\n+            routeRefresher.refresh();\n+        }\n+    }\n+}"},{"sha":"c5649f6b2ad9833260647e34297cd9e09e823367","filename":"sra/src/test/java/org/apache/syncope/sra/SyncopeSRATestKeymasterStartup.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATestKeymasterStartup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATestKeymasterStartup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATestKeymasterStartup.java?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra;\n+\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.security.auth.login.AppConfigurationEntry;\n+import javax.security.auth.login.Configuration;\n+import org.apache.curator.test.InstanceSpec;\n+import org.apache.curator.test.TestingServer;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+import org.springframework.context.ApplicationListener;\n+import org.springframework.context.event.ContextRefreshedEvent;\n+import org.springframework.core.Ordered;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SyncopeSRATestKeymasterStartup extends SyncopeSRAStartStop\n+        implements ApplicationListener<ContextRefreshedEvent>, Ordered {\n+\n+    @Override\n+    public int getOrder() {\n+        return Ordered.HIGHEST_PRECEDENCE;\n+    }\n+\n+    @Override\n+    public void onApplicationEvent(final ContextRefreshedEvent event) {\n+        // 1. start Zookeeper for Keymaster\n+        AtomicReference<String> username = new AtomicReference<>();\n+        AtomicReference<String> password = new AtomicReference<>();\n+        try (InputStream propStream = getClass().getResourceAsStream(\"/keymaster.properties\")) {\n+            Properties props = new Properties();\n+            props.load(propStream);\n+\n+            username.set(props.getProperty(\"keymaster.username\"));\n+            password.set(props.getProperty(\"keymaster.password\"));\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Could not load /keymaster.properties\", e);\n+        }\n+\n+        Configuration.setConfiguration(new Configuration() {\n+\n+            private final AppConfigurationEntry[] entries = {\n+                new AppConfigurationEntry(\n+                \"org.apache.zookeeper.server.auth.DigestLoginModule\",\n+                AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,\n+                Map.of(\n+                \"user_\" + username.get(), password.get()\n+                ))\n+            };\n+\n+            @Override\n+            public AppConfigurationEntry[] getAppConfigurationEntry(final String name) {\n+                return entries;\n+            }\n+        });\n+\n+        Map<String, Object> customProperties = new HashMap<>();\n+        customProperties.put(\"authProvider.1\", \"org.apache.zookeeper.server.auth.SASLAuthenticationProvider\");\n+        InstanceSpec spec = new InstanceSpec(null, 2181, -1, -1, true, 1, -1, -1, customProperties);\n+        try {\n+            new TestingServer(spec, true).start();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Could not start Zookeeper\", e);\n+        }\n+\n+        // 2. register Core in Keymaster\n+        NetworkService core = new NetworkService();\n+        core.setType(NetworkService.Type.CORE);\n+        core.setAddress(SyncopeSRATestCoreStartup.ADDRESS);\n+        serviceOps.register(core);\n+    }\n+}"},{"sha":"f374d8ca3a94d0370aa4ab93b5ad8897eb4e944b","filename":"sra/src/test/resources/keymaster.properties","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Ftest%2Fresources%2Fkeymaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/23cc100d28e4dfe2b54304681a053fdcd1bffe26/sra%2Fsrc%2Ftest%2Fresources%2Fkeymaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fresources%2Fkeymaster.properties?ref=23cc100d28e4dfe2b54304681a053fdcd1bffe26","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+keymaster.address=127.0.0.1:2181\n+keymaster.username=${anonymousUser}\n+keymaster.password=${anonymousKey}"}]}