{"sha":"e34a8e4f3330c1ce4bc9565f894bfe336b28cb7b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmUzNGE4ZTRmMzMzMGMxY2U0YmM5NTY1Zjg5NGJmZTMzNmIyOGNiN2I=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-01T11:19:39Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-01T11:19:39Z"},"message":"[SYNCOPE-119] Adding isAssignable support to dynamic group memberships","tree":{"sha":"29f869f134ba5d2191015af50070e097535ff864","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/29f869f134ba5d2191015af50070e097535ff864"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e34a8e4f3330c1ce4bc9565f894bfe336b28cb7b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e34a8e4f3330c1ce4bc9565f894bfe336b28cb7b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e34a8e4f3330c1ce4bc9565f894bfe336b28cb7b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e34a8e4f3330c1ce4bc9565f894bfe336b28cb7b/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d433501b978ea120436de48c7dbcaf08f8d8e249","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d433501b978ea120436de48c7dbcaf08f8d8e249","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d433501b978ea120436de48c7dbcaf08f8d8e249"}],"stats":{"total":129,"additions":83,"deletions":46},"files":[{"sha":"54587f3afca41d18c839daac80b71d315b1dd746","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AssignableCond.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e34a8e4f3330c1ce4bc9565f894bfe336b28cb7b/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAssignableCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e34a8e4f3330c1ce4bc9565f894bfe336b28cb7b/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAssignableCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAssignableCond.java?ref=e34a8e4f3330c1ce4bc9565f894bfe336b28cb7b","patch":"@@ -24,6 +24,13 @@ public class AssignableCond extends AbstractSearchCond {\n \n     private String realmFullPath;\n \n+    /**\n+     * Whether this condition should be evaluated from the assignable group (default) - or instead the\n+     * assignee - point of view.\n+     * The converter from FIQL will ignore this setting, which is meant for internal usage.\n+     */\n+    private boolean fromGroup = true;\n+\n     public String getRealmFullPath() {\n         return realmFullPath;\n     }\n@@ -32,6 +39,14 @@ public void setRealmFullPath(final String realmFullPath) {\n         this.realmFullPath = realmFullPath;\n     }\n \n+    public boolean isFromGroup() {\n+        return fromGroup;\n+    }\n+\n+    public void setFromGroup(final boolean fromGroup) {\n+        this.fromGroup = fromGroup;\n+    }\n+\n     @Override\n     public final boolean isValid() {\n         return realmFullPath != null;"},{"sha":"942b9502388414459bd07021cf18b06933b69714","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":37,"deletions":36,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e34a8e4f3330c1ce4bc9565f894bfe336b28cb7b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e34a8e4f3330c1ce4bc9565f894bfe336b28cb7b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=e34a8e4f3330c1ce4bc9565f894bfe336b28cb7b","patch":"@@ -137,7 +137,7 @@ public int count(final Set<String> adminRealms, final SearchCond searchCondition\n \n         // 1. get the query string from the search condition\n         SearchSupport svs = new SearchSupport(typeKind);\n-        StringBuilder queryString = getQuery(searchCondition, parameters, typeKind, svs);\n+        StringBuilder queryString = getQuery(searchCondition, parameters, svs);\n \n         // 2. take into account administrative realms\n         queryString.insert(0, \"SELECT u.any_id FROM (\");\n@@ -206,7 +206,7 @@ public <T extends Any<?>> boolean matches(\n \n         // 1. get the query string from the search condition\n         SearchSupport svs = new SearchSupport(typeKind);\n-        StringBuilder queryString = getQuery(searchCondition, parameters, typeKind, svs);\n+        StringBuilder queryString = getQuery(searchCondition, parameters, svs);\n \n         boolean matches;\n         if (queryString.length() == 0) {\n@@ -365,7 +365,7 @@ private <T extends Any<?>> List<T> doSearch(final Set<String> adminRealms,\n \n         // 1. get the query string from the search condition\n         SearchSupport svs = new SearchSupport(typeKind);\n-        StringBuilder queryString = getQuery(nodeCond, parameters, typeKind, svs);\n+        StringBuilder queryString = getQuery(nodeCond, parameters, svs);\n \n         // 2. take into account administrative groups and ordering\n         OrderBySupport orderBySupport = parseOrderBy(typeKind, svs, orderBy);\n@@ -417,64 +417,59 @@ private <T extends Any<?>> List<T> doSearch(final Set<String> adminRealms,\n         return result;\n     }\n \n-    private StringBuilder getQuery(final SearchCond nodeCond, final List<Object> parameters,\n-            final AnyTypeKind anyTypeKind, final SearchSupport svs) {\n-\n+    private StringBuilder getQuery(final SearchCond nodeCond, final List<Object> parameters, final SearchSupport svs) {\n         StringBuilder query = new StringBuilder();\n \n         switch (nodeCond.getType()) {\n \n             case LEAF:\n             case NOT_LEAF:\n-                if (nodeCond.getAnyTypeCond() != null && AnyTypeKind.ANY_OBJECT == anyTypeKind) {\n+                if (nodeCond.getAnyTypeCond() != null && AnyTypeKind.ANY_OBJECT == svs.anyTypeKind()) {\n                     query.append(getQuery(nodeCond.getAnyTypeCond(),\n                             nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 } else if (nodeCond.getRelationshipTypeCond() != null\n-                        && (AnyTypeKind.USER == anyTypeKind || AnyTypeKind.ANY_OBJECT == anyTypeKind)) {\n+                        && (AnyTypeKind.USER == svs.anyTypeKind() || AnyTypeKind.ANY_OBJECT == svs.anyTypeKind())) {\n \n                     query.append(getQuery(nodeCond.getRelationshipTypeCond(),\n                             nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 } else if (nodeCond.getRelationshipCond() != null\n-                        && (AnyTypeKind.USER == anyTypeKind || AnyTypeKind.ANY_OBJECT == anyTypeKind)) {\n+                        && (AnyTypeKind.USER == svs.anyTypeKind() || AnyTypeKind.ANY_OBJECT == svs.anyTypeKind())) {\n \n                     query.append(getQuery(nodeCond.getRelationshipCond(),\n                             nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 } else if (nodeCond.getMembershipCond() != null\n-                        && (AnyTypeKind.USER == anyTypeKind || AnyTypeKind.ANY_OBJECT == anyTypeKind)) {\n+                        && (AnyTypeKind.USER == svs.anyTypeKind() || AnyTypeKind.ANY_OBJECT == svs.anyTypeKind())) {\n \n                     query.append(getQuery(nodeCond.getMembershipCond(),\n                             nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n-                } else if (nodeCond.getAssignableCond() != null\n-                        && (AnyTypeKind.GROUP == anyTypeKind || AnyTypeKind.ANY_OBJECT == anyTypeKind)) {\n-\n-                    query.append(getQuery(nodeCond.getAssignableCond(), parameters, anyTypeKind, svs));\n-                } else if (nodeCond.getRoleCond() != null && AnyTypeKind.USER == anyTypeKind) {\n+                } else if (nodeCond.getAssignableCond() != null) {\n+                    query.append(getQuery(nodeCond.getAssignableCond(), parameters, svs));\n+                } else if (nodeCond.getRoleCond() != null && AnyTypeKind.USER == svs.anyTypeKind()) {\n                     query.append(getQuery(nodeCond.getRoleCond(),\n                             nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 } else if (nodeCond.getResourceCond() != null) {\n                     query.append(getQuery(nodeCond.getResourceCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, anyTypeKind, svs));\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 } else if (nodeCond.getAttributeCond() != null) {\n                     query.append(getQuery(nodeCond.getAttributeCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, anyTypeKind, svs));\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 } else if (nodeCond.getAnyCond() != null) {\n                     query.append(getQuery(nodeCond.getAnyCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, anyTypeKind,\n-                            svs));\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 }\n                 break;\n \n             case AND:\n-                query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, anyTypeKind, svs)).\n+                query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, svs)).\n                         append(\" AND any_id IN ( \").\n-                        append(getQuery(nodeCond.getRightNodeCond(), parameters, anyTypeKind, svs)).\n+                        append(getQuery(nodeCond.getRightNodeCond(), parameters, svs)).\n                         append(\")\");\n                 break;\n \n             case OR:\n-                query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, anyTypeKind, svs)).\n+                query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, svs)).\n                         append(\" OR any_id IN ( \").\n-                        append(getQuery(nodeCond.getRightNodeCond(), parameters, anyTypeKind, svs)).\n+                        append(getQuery(nodeCond.getRightNodeCond(), parameters, svs)).\n                         append(\")\");\n                 break;\n \n@@ -607,7 +602,7 @@ private String getQuery(final RoleCond cond, final boolean not, final List<Objec\n     }\n \n     private String getQuery(final ResourceCond cond, final boolean not, final List<Object> parameters,\n-            final AnyTypeKind typeKind, final SearchSupport svs) {\n+            final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n@@ -623,7 +618,7 @@ private String getQuery(final ResourceCond cond, final boolean not, final List<O\n                 append(\" WHERE resource_name=?\").\n                 append(setParameter(parameters, cond.getResourceName()));\n \n-        if (typeKind == AnyTypeKind.USER) {\n+        if (svs.anyTypeKind() == AnyTypeKind.USER) {\n             query.append(\" UNION SELECT DISTINCT any_id FROM \").\n                     append(svs.groupResource().name).\n                     append(\" WHERE resource_name=?\").\n@@ -635,20 +630,26 @@ private String getQuery(final ResourceCond cond, final boolean not, final List<O\n         return query.toString();\n     }\n \n-    private String getQuery(final AssignableCond cond, final List<Object> parameters, final AnyTypeKind typeKind,\n-            final SearchSupport svs) {\n-\n+    private String getQuery(final AssignableCond cond, final List<Object> parameters, final SearchSupport svs) {\n         Realm realm = realmDAO.find(cond.getRealmFullPath());\n         if (realm == null) {\n             return EMPTY_QUERY;\n         }\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE (\");\n-        for (Realm current = realm; current.getParent() != null; current = current.getParent()) {\n-            query.append(\"realm_id=?\").append(setParameter(parameters, current.getKey())).append(\" OR \");\n+        if (cond.isFromGroup()) {\n+            for (Realm current = realm; current.getParent() != null; current = current.getParent()) {\n+                query.append(\"realm_id=?\").append(setParameter(parameters, current.getKey())).append(\" OR \");\n+            }\n+            query.append(\"realm_id=?\").append(setParameter(parameters, realmDAO.getRoot().getKey()));\n+        } else {\n+            for (Realm current : realmDAO.findDescendants(realm)) {\n+                query.append(\"realm_id=?\").append(setParameter(parameters, current.getKey())).append(\" OR \");\n+            }\n+            query.setLength(query.length() - 4);\n         }\n-        query.append(\"realm_id=?\").append(setParameter(parameters, realmDAO.getRoot().getKey())).append(')');\n+        query.append(')');\n \n         return query.toString();\n     }\n@@ -746,9 +747,9 @@ private void fillAttributeQuery(final StringBuilder query, final PlainAttrValue\n     }\n \n     private String getQuery(final AttributeCond cond, final boolean not, final List<Object> parameters,\n-            final AnyTypeKind typeKind, final SearchSupport svs) {\n+            final SearchSupport svs) {\n \n-        AnyUtils attrUtils = anyUtilsFactory.getInstance(typeKind);\n+        AnyUtils attrUtils = anyUtilsFactory.getInstance(svs.anyTypeKind());\n \n         PlainSchema schema = schemaDAO.find(cond.getSchema());\n         if (schema == null) {\n@@ -797,9 +798,9 @@ private String getQuery(final AttributeCond cond, final boolean not, final List<\n \n     @SuppressWarnings(\"rawtypes\")\n     private String getQuery(final AnyCond cond, final boolean not, final List<Object> parameters,\n-            final AnyTypeKind typeKind, final SearchSupport svs) {\n+            final SearchSupport svs) {\n \n-        AnyUtils attrUtils = anyUtilsFactory.getInstance(typeKind);\n+        AnyUtils attrUtils = anyUtilsFactory.getInstance(svs.anyTypeKind());\n \n         // Keeps track of difference between entity's getKey() and JPA @Id fields\n         if (\"key\".equals(cond.getSchema())) {\n@@ -840,7 +841,7 @@ private String getQuery(final AnyCond cond, final boolean not, final List<Object\n         if (anyField.getType().getAnnotation(Entity.class) != null) {\n             Method relMethod = null;\n             try {\n-                relMethod = ClassUtils.getPublicMethod(anyField.getType(), \"getKey\", new Class[0]);\n+                relMethod = ClassUtils.getPublicMethod(anyField.getType(), \"getKey\", new Class<?>[0]);\n             } catch (Exception e) {\n                 LOG.error(\"Could not find {}#getKey\", anyField.getType(), e);\n             }"},{"sha":"671582ce296f7ca482c1b79dd7d389bf920f95e8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":27,"deletions":10,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e34a8e4f3330c1ce4bc9565f894bfe336b28cb7b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e34a8e4f3330c1ce4bc9565f894bfe336b28cb7b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=e34a8e4f3330c1ce4bc9565f894bfe336b28cb7b","patch":"@@ -42,9 +42,12 @@\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n@@ -159,12 +162,21 @@ public List<UMembership> findUMemberships(final Group group) {\n         return query.getResultList();\n     }\n \n+    private SearchCond buildDynMembershipCond(final String baseCondFIQL, final Realm groupRealm) {\n+        AssignableCond cond = new AssignableCond();\n+        cond.setRealmFullPath(groupRealm.getFullPath());\n+        cond.setFromGroup(false);\n+\n+        return SearchCond.getAndCond(SearchCond.getLeafCond(cond), SearchCondConverter.convert(baseCondFIQL));\n+    }\n+\n     @Override\n     public Group save(final Group group) {\n         // refresh dynaminc memberships\n         if (group.getADynMembership() != null) {\n             List<AnyObject> matching = searchDAO.search(\n-                    SearchCondConverter.convert(group.getADynMembership().getFIQLCond()), AnyTypeKind.ANY_OBJECT);\n+                    buildDynMembershipCond(group.getADynMembership().getFIQLCond(), group.getRealm()),\n+                    AnyTypeKind.ANY_OBJECT);\n \n             group.getADynMembership().getMembers().clear();\n             for (AnyObject anyObject : matching) {\n@@ -173,7 +185,8 @@ public Group save(final Group group) {\n         }\n         if (group.getUDynMembership() != null) {\n             List<User> matching = searchDAO.search(\n-                    SearchCondConverter.convert(group.getUDynMembership().getFIQLCond()), AnyTypeKind.USER);\n+                    buildDynMembershipCond(group.getUDynMembership().getFIQLCond(), group.getRealm()),\n+                    AnyTypeKind.USER);\n \n             group.getUDynMembership().getMembers().clear();\n             for (User user : matching) {\n@@ -258,23 +271,27 @@ public List<TypeExtension> findTypeExtensionByAnyTypeClass(final AnyTypeClass an\n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public void refreshDynMemberships(final AnyObject anyObject) {\n-        for (Group role : findAll()) {\n-            if (role.getADynMembership() != null && !searchDAO.matches(anyObject,\n-                    SearchCondConverter.convert(role.getADynMembership().getFIQLCond()), AnyTypeKind.ANY_OBJECT)) {\n+        for (Group group : findAll()) {\n+            if (group.getADynMembership() != null && !searchDAO.matches(\n+                    anyObject,\n+                    buildDynMembershipCond(group.getADynMembership().getFIQLCond(), group.getRealm()),\n+                    AnyTypeKind.ANY_OBJECT)) {\n \n-                role.getADynMembership().remove(anyObject);\n+                group.getADynMembership().remove(anyObject);\n             }\n         }\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public void refreshDynMemberships(final User user) {\n-        for (Group role : findAll()) {\n-            if (role.getUDynMembership() != null && !searchDAO.matches(user,\n-                    SearchCondConverter.convert(role.getUDynMembership().getFIQLCond()), AnyTypeKind.USER)) {\n+        for (Group group : findAll()) {\n+            if (group.getUDynMembership() != null && !searchDAO.matches(\n+                    user,\n+                    buildDynMembershipCond(group.getUDynMembership().getFIQLCond(), group.getRealm()),\n+                    AnyTypeKind.USER)) {\n \n-                role.getUDynMembership().remove(user);\n+                group.getUDynMembership().remove(user);\n             }\n         }\n     }"},{"sha":"06854df1fbbb9dc4cb660f67ef81d33cd3ef25fe","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchSupport.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e34a8e4f3330c1ce4bc9565f894bfe336b28cb7b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e34a8e4f3330c1ce4bc9565f894bfe336b28cb7b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java?ref=e34a8e4f3330c1ce4bc9565f894bfe336b28cb7b","patch":"@@ -53,6 +53,10 @@ public int hashCode() {\n         this.anyTypeKind = anyTypeKind;\n     }\n \n+    public AnyTypeKind anyTypeKind() {\n+        return anyTypeKind;\n+    }\n+\n     public String fieldName(final AttrSchemaType attrSchemaType) {\n         String result;\n "}]}