{"sha":"48ef39783f3c3cadbdb5247807d89a5153908791","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ4ZWYzOTc4M2YzYzNjYWRiZGI1MjQ3ODA3ZDg5YTUxNTM5MDg3OTE=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-08-04T07:14:57Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-08-04T07:14:57Z"},"message":"Some workflow utility classes\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246421 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2922cf6b89651a7a117b70978b2e2e51e408da38","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2922cf6b89651a7a117b70978b2e2e51e408da38"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/48ef39783f3c3cadbdb5247807d89a5153908791","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/48ef39783f3c3cadbdb5247807d89a5153908791","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/48ef39783f3c3cadbdb5247807d89a5153908791","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/48ef39783f3c3cadbdb5247807d89a5153908791/comments","author":null,"committer":null,"parents":[{"sha":"8a73dae9259032f62d25203c58cba445515fcf58","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8a73dae9259032f62d25203c58cba445515fcf58","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8a73dae9259032f62d25203c58cba445515fcf58"}],"stats":{"total":322,"additions":280,"deletions":42},"files":[{"sha":"edb4c6e607b0e5d35113752695877e6cd1d97dc0","filename":"core/src/main/java/org/syncope/core/persistence/ConnectorInstanceBeansLoader.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceBeansLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceBeansLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceBeansLoader.java?ref=48ef39783f3c3cadbdb5247807d89a5153908791","patch":"@@ -39,13 +39,6 @@ public class ConnectorInstanceBeansLoader implements ServletContextListener {\n     private static final Logger log = LoggerFactory.getLogger(\n             ConnectorInstanceBeansLoader.class);\n \n-    /**\n-     * <em>WARNING</em>: this method connects to the database by mean of the \n-     * underlying Spring's datasource, not using the provided one, to be fetched\n-     * via JNDI. This in order to avoid potential conflicts and problems with\n-     * DbUnit.\n-     * @param sce\n-     */\n     @Override\n     public void contextInitialized(ServletContextEvent sce) {\n         ConfigurableApplicationContext context ="},{"sha":"26f2df184faa98deeead79f5b884f6fe0cb77788","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=48ef39783f3c3cadbdb5247807d89a5153908791","patch":"@@ -144,9 +144,11 @@ public void setValidatorClass(String validatorClass) {\n     }\n \n     public String getConversionPattern() {\n-        if (!getType().isConversionPatternNeeded()) {\n-            log.warn(\"Conversion pattern is not needed: \"\n-                    + \"this attribute type is \" + getType());\n+        if (!getType().isConversionPatternNeeded()\n+                && log.isDebugEnabled()) {\n+\n+            log.debug(\"Conversion pattern is not needed: \"\n+                    + this + \"'s type is \" + getType());\n         }\n \n         return conversionPattern;"},{"sha":"d76abe378fea5484a67cf1d7510fc003d42e4db9","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeUserDAO.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java?ref=48ef39783f3c3cadbdb5247807d89a5153908791","patch":"@@ -15,7 +15,6 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n-import java.util.Set;\n import org.syncope.client.to.NodeSearchCondition;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UserAttributeValue;"},{"sha":"70ab510e66ed7cacc3bd7c57243ef3bdb27a4dcd","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=48ef39783f3c3cadbdb5247807d89a5153908791","patch":"@@ -41,7 +41,6 @@\n import java.util.Map;\n import java.util.Set;\n import javassist.NotFoundException;\n-import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.http.HttpStatus;\n import org.syncope.client.mod.UserMod;\n@@ -75,7 +74,8 @@ public class UserController extends AbstractController {\n     @Autowired\n     private PropagationManager propagationManager;\n \n-    private SyncopeUser doExecuteAction(String actionName, UserTO userTO)\n+    public SyncopeUser doExecuteAction(String actionName, UserTO userTO,\n+            Map<String, Object> moreInputs)\n             throws WorkflowException, NotFoundException {\n \n         SyncopeUser syncopeUser = syncopeUserDAO.find(userTO.getId());\n@@ -87,8 +87,10 @@ private SyncopeUser doExecuteAction(String actionName, UserTO userTO)\n         }\n \n         Map<String, Object> inputs = new HashMap<String, Object>();\n+        if (moreInputs != null && !moreInputs.isEmpty()) {\n+            inputs.putAll(moreInputs);\n+        }\n         inputs.put(Constants.SYNCOPE_USER, syncopeUser);\n-        inputs.put(Constants.TOKEN, userTO.getToken());\n \n         WorkflowDescriptor workflowDescriptor =\n                 userWorkflow.getWorkflowDescriptor(Constants.USER_WORKFLOW);\n@@ -121,44 +123,45 @@ public UserTO executeAction(HttpServletResponse response,\n             throws WorkflowException, NotFoundException {\n \n         return userDataBinder.getUserTO(\n-                doExecuteAction(actionName, userTO));\n+                doExecuteAction(actionName, userTO, null));\n     }\n \n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/activate\")\n-    public UserTO activate(HttpServletResponse response,\n-            @RequestBody UserTO userTO)\n+    public UserTO activate(@RequestBody UserTO userTO)\n             throws WorkflowException, NotFoundException {\n \n         return userDataBinder.getUserTO(\n-                doExecuteAction(Constants.ACTION_ACTIVATE, userTO));\n+                doExecuteAction(Constants.ACTION_ACTIVATE, userTO,\n+                Collections.singletonMap(Constants.TOKEN,\n+                (Object) userTO.getToken())));\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/generateToken/{userId}\")\n-    public UserTO generateToken(HttpServletResponse response,\n-            @PathVariable(\"userId\") Long userId)\n+    public UserTO generateToken(@PathVariable(\"userId\") Long userId)\n             throws WorkflowException, NotFoundException {\n \n         UserTO userTO = new UserTO();\n         userTO.setId(userId);\n         return userDataBinder.getUserTO(\n-                doExecuteAction(Constants.ACTION_GENERATE_TOKEN, userTO));\n+                doExecuteAction(Constants.ACTION_GENERATE_TOKEN, userTO, null));\n     }\n \n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/verifyToken\")\n-    public UserTO verifyToken(HttpServletResponse response,\n-            @RequestBody UserTO userTO)\n+    public UserTO verifyToken(@RequestBody UserTO userTO)\n             throws WorkflowException, NotFoundException {\n \n         return userDataBinder.getUserTO(\n-                doExecuteAction(Constants.ACTION_VERIFY_TOKEN, userTO));\n+                doExecuteAction(Constants.ACTION_VERIFY_TOKEN, userTO,\n+                Collections.singletonMap(Constants.TOKEN,\n+                (Object) userTO.getToken())));\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n-    public UserTOs list(HttpServletRequest request) {\n+    public UserTOs list() {\n         List<SyncopeUser> users = syncopeUserDAO.findAll();\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n \n@@ -173,8 +176,7 @@ public UserTOs list(HttpServletRequest request) {\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{userId}\")\n-    public UserTO read(HttpServletResponse response,\n-            @PathVariable(\"userId\") Long userId)\n+    public UserTO read(@PathVariable(\"userId\") Long userId)\n             throws NotFoundException {\n \n         SyncopeUser user = syncopeUserDAO.find(userId);\n@@ -190,8 +192,8 @@ public UserTO read(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/actions/{userId}\")\n-    public WorkflowActionsTO actions(HttpServletResponse response,\n-            @PathVariable(\"userId\") Long userId) throws NotFoundException {\n+    public WorkflowActionsTO getActions(@PathVariable(\"userId\") Long userId)\n+            throws NotFoundException {\n \n         SyncopeUser user = syncopeUserDAO.find(userId);\n \n@@ -217,8 +219,7 @@ public WorkflowActionsTO actions(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/search\")\n-    public UserTOs search(HttpServletResponse response,\n-            @RequestBody NodeSearchCondition searchCondition)\n+    public UserTOs search(@RequestBody NodeSearchCondition searchCondition)\n             throws InvalidSearchConditionException {\n \n         if (log.isDebugEnabled()) {\n@@ -243,8 +244,8 @@ public UserTOs search(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/status/{userId}\")\n-    public ModelAndView getStatus(HttpServletResponse response,\n-            @PathVariable(\"userId\") Long userId) throws NotFoundException {\n+    public ModelAndView getStatus(@PathVariable(\"userId\") Long userId)\n+            throws NotFoundException {\n \n         SyncopeUser user = syncopeUserDAO.find(userId);\n \n@@ -293,8 +294,7 @@ private Set<String> getSyncResourceNames(SyncopeUser syncopeUser,\n \n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n-    public UserTO create(HttpServletRequest request,\n-            HttpServletResponse response,\n+    public UserTO create(HttpServletResponse response,\n             @RequestBody UserTO userTO,\n             @RequestParam(value = \"syncRoles\",\n             required = false) Set<Long> syncRoles,\n@@ -326,8 +326,10 @@ public UserTO create(HttpServletRequest request,\n         if (wie != null) {\n             switch (wie.getExceptionOperation()) {\n                 case OVERWRITE:\n-                    return update(response, new UserMod(),\n-                            syncRoles, syncResources);\n+                    UserMod overwriteMod = userTO.buildUserMod();\n+                    overwriteMod.setId(wie.getSyncopeUserId());\n+\n+                    return update(overwriteMod, syncRoles, syncResources);\n                 case REJECT:\n                     SyncopeClientCompositeErrorException compositeException =\n                             new SyncopeClientCompositeErrorException(\n@@ -379,8 +381,7 @@ public UserTO create(HttpServletRequest request,\n \n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n-    public UserTO update(HttpServletResponse response,\n-            @RequestBody UserMod userMod,\n+    public UserTO update(@RequestBody UserMod userMod,\n             @RequestParam(value = \"syncRoles\",\n             required = false) Set<Long> syncRoles,\n             @RequestParam(value = \"syncResources\",\n@@ -401,7 +402,7 @@ public UserTO update(HttpServletResponse response,\n \n         // First of all, let's check if update is allowed\n         syncopeUser = doExecuteAction(Constants.ACTION_UPDATE,\n-                userDataBinder.getUserTO(syncopeUser));\n+                userDataBinder.getUserTO(syncopeUser), null);\n \n         // Update user with provided userMod\n         ResourceOperations resourceOperations =\n@@ -427,8 +428,7 @@ public UserTO update(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/delete/{userId}\")\n-    public void delete(HttpServletResponse response,\n-            @PathVariable(\"userId\") Long userId)\n+    public void delete(@PathVariable(\"userId\") Long userId)\n             throws NotFoundException {\n \n         SyncopeUser user = syncopeUserDAO.find(userId);"},{"sha":"343466fb4dd0ad4555196afda10c495d8ee8fdf0","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=48ef39783f3c3cadbdb5247807d89a5153908791","patch":"@@ -177,6 +177,7 @@ public UserTO getUserTO(SyncopeUser user) {\n \n         MembershipTO membershipTO = new MembershipTO();\n         for (Membership membership : user.getMemberships()) {\n+            membershipTO.setId(membership.getId());\n             membershipTO.setRole(membership.getSyncopeRole().getId());\n \n             membershipTO = (MembershipTO) fillTO(membershipTO,"},{"sha":"6449542ea71da729798df71a45012c850510739f","filename":"core/src/main/java/org/syncope/core/workflow/AbstractStoreAttributeValue.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractStoreAttributeValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractStoreAttributeValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractStoreAttributeValue.java?ref=48ef39783f3c3cadbdb5247807d89a5153908791","patch":"@@ -0,0 +1,85 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.workflow;\n+\n+import com.opensymphony.workflow.FunctionProvider;\n+import com.opensymphony.workflow.WorkflowException;\n+import java.util.Map;\n+import org.syncope.core.persistence.beans.AbstractAttributable;\n+import org.syncope.core.persistence.beans.AbstractAttribute;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.membership.Membership;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.rest.data.AttributableUtil;\n+\n+abstract class AbstractStoreAttributeValue extends OSWorkflowComponent\n+        implements FunctionProvider {\n+\n+    protected AbstractAttribute getAttribute(Map transientVars, Map args)\n+            throws WorkflowException {\n+\n+        String schemaName = (String) args.get(\"schema\");\n+        if (schemaName == null || schemaName.length() == 0) {\n+            throw new WorkflowException(\"Must specify schema name\");\n+        }\n+\n+        String kind = (String) args.get(\"kind\");\n+        if (kind == null || kind.length() == 0) {\n+            kind = Constants.SYNCOPE_USER;\n+        }\n+\n+        AttributableUtil attributableUtil = null;\n+        AbstractAttributable attributable = null;\n+        if (Constants.SYNCOPE_USER.equals(kind)) {\n+            attributableUtil = AttributableUtil.USER;\n+            attributable = (SyncopeUser) transientVars.get(\n+                    Constants.SYNCOPE_USER);\n+        } else if (Constants.SYNCOPE_ROLE.equals(kind)) {\n+            attributableUtil = AttributableUtil.ROLE;\n+            attributable = (SyncopeRole) transientVars.get(\n+                    Constants.SYNCOPE_ROLE);\n+        } else if (Constants.MEMBERSHIP.equals(kind)) {\n+            attributableUtil = AttributableUtil.MEMBERSHIP;\n+            attributable = (Membership) transientVars.get(\n+                    Constants.MEMBERSHIP);\n+        } else {\n+            throw new WorkflowException(\n+                    \"Invalid attributable specified: \" + kind);\n+        }\n+        if (attributable == null) {\n+            throw new WorkflowException(\"Could not find instance \"\n+                    + attributableUtil);\n+        }\n+\n+        SchemaDAO schemaDAO = (SchemaDAO) context.getBean(\"schemaDAOImpl\");\n+        AbstractSchema schema = schemaDAO.find(schemaName,\n+                attributableUtil.getSchemaClass());\n+        if (schema == null) {\n+            throw new WorkflowException(\"Invalid schema: \" + schemaName);\n+        }\n+\n+        AbstractAttribute attribute = attributable.getAttribute(schemaName);\n+        if (attribute == null) {\n+            attribute = attributableUtil.newAttribute();\n+            attribute.setSchema(schema);\n+            attribute.setOwner(attributable);\n+            attributable.addAttribute(attribute);\n+        }\n+\n+        return attribute;\n+    }\n+}"},{"sha":"76dda5f591e10ec0eeac6490b1e38fe9ac86afa5","filename":"core/src/main/java/org/syncope/core/workflow/Constants.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java?ref=48ef39783f3c3cadbdb5247807d89a5153908791","patch":"@@ -22,6 +22,8 @@ public class Constants {\n     final public static String ACTION_UPDATE = \"update\";\n     final public static String ENTRY = \"entry\";\n     final public static String SYNCOPE_USER = \"syncopeUser\";\n+    final public static String SYNCOPE_ROLE = \"syncopeRole\";\n+    final public static String MEMBERSHIP = \"membership\";\n     final public static String TOKEN = \"token\";\n     final public static String USER_TO = \"userTO\";\n     final public static String USER_WORKFLOW = \"userWorkflow\";"},{"sha":"7cbf6e6762a6f1f651540226fbae8efcc1caf219","filename":"core/src/main/java/org/syncope/core/workflow/EmptyUser.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FEmptyUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FEmptyUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FEmptyUser.java?ref=48ef39783f3c3cadbdb5247807d89a5153908791","patch":"@@ -0,0 +1,67 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.workflow;\n+\n+import com.opensymphony.module.propertyset.PropertySet;\n+import com.opensymphony.workflow.FunctionProvider;\n+import com.opensymphony.workflow.WorkflowException;\n+import java.util.Map;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.AbstractAttribute;\n+import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n+import org.syncope.core.persistence.beans.membership.Membership;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.beans.user.UserAttribute;\n+import org.syncope.core.persistence.beans.user.UserDerivedAttribute;\n+import org.syncope.core.persistence.dao.AttributeDAO;\n+import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n+import org.syncope.core.persistence.dao.MembershipDAO;\n+\n+public class EmptyUser extends OSWorkflowComponent\n+        implements FunctionProvider {\n+\n+    @Override\n+    @Transactional\n+    public void execute(Map transientVars, Map args, PropertySet ps)\n+            throws WorkflowException {\n+\n+        SyncopeUser syncopeUser = (SyncopeUser) transientVars.get(\n+                Constants.SYNCOPE_USER);\n+\n+        AttributeDAO attributeDAO =\n+                (AttributeDAO) context.getBean(\"attributeDAOImpl\");\n+        for (AbstractAttribute attribute : syncopeUser.getAttributes()) {\n+            attributeDAO.delete(attribute.getId(), UserAttribute.class);\n+        }\n+\n+        DerivedAttributeDAO derivedAttributeDAO =\n+                (DerivedAttributeDAO) context.getBean(\n+                \"derivedAttributeDAOImpl\");\n+        for (AbstractDerivedAttribute derivedAttribute :\n+                syncopeUser.getDerivedAttributes()) {\n+\n+            derivedAttributeDAO.delete(derivedAttribute.getId(),\n+                    UserDerivedAttribute.class);\n+        }\n+\n+        MembershipDAO membershipDAO =\n+                (MembershipDAO) context.getBean(\"membershipDAOImpl\");\n+        for (Membership membership : syncopeUser.getMemberships()) {\n+            membershipDAO.delete(membership.getId());\n+        }\n+\n+        transientVars.put(Constants.SYNCOPE_USER, syncopeUser);\n+    }\n+}"},{"sha":"9ad15978b5120af5d5069124b10881aecc5f6f54","filename":"core/src/main/java/org/syncope/core/workflow/StoreDate.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreDate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreDate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreDate.java?ref=48ef39783f3c3cadbdb5247807d89a5153908791","patch":"@@ -0,0 +1,42 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.workflow;\n+\n+import com.opensymphony.module.propertyset.PropertySet;\n+import com.opensymphony.workflow.WorkflowException;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Map;\n+import org.syncope.core.persistence.beans.AbstractAttribute;\n+import org.syncope.core.persistence.beans.user.UserAttributeValue;\n+\n+public class StoreDate extends AbstractStoreAttributeValue {\n+\n+    @Override\n+    public void execute(Map transientVars, Map args, PropertySet ps)\n+            throws WorkflowException {\n+\n+        AbstractAttribute attribute = getAttribute(transientVars, args);\n+\n+        UserAttributeValue date = new UserAttributeValue();\n+        date.setDateValue(new Date());\n+        date.setAttribute(attribute);\n+        if (attribute.getSchema().isMultivalue()) {\n+            attribute.addAttributeValue(date);\n+        } else {\n+            attribute.setAttributeValues(Collections.singletonList(date));\n+        }\n+    }\n+}"},{"sha":"d0964192e4eee892a5da13e570ece3587b7370ca","filename":"core/src/main/java/org/syncope/core/workflow/StoreText.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreText.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48ef39783f3c3cadbdb5247807d89a5153908791/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreText.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreText.java?ref=48ef39783f3c3cadbdb5247807d89a5153908791","patch":"@@ -0,0 +1,47 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.workflow;\n+\n+import com.opensymphony.module.propertyset.PropertySet;\n+import com.opensymphony.workflow.WorkflowException;\n+import java.util.Collections;\n+import java.util.Map;\n+import org.syncope.core.persistence.beans.AbstractAttribute;\n+import org.syncope.core.persistence.beans.user.UserAttributeValue;\n+\n+public class StoreText extends AbstractStoreAttributeValue {\n+\n+    @Override\n+    public void execute(Map transientVars, Map args, PropertySet ps)\n+            throws WorkflowException {\n+\n+        AbstractAttribute attribute = getAttribute(transientVars, args);\n+\n+        String text = (String) transientVars.get(args.get(\"schema\"));\n+        if (text == null) {\n+            throw new WorkflowException(\"Missing text\");\n+        }\n+\n+        UserAttributeValue textAttributeValue = new UserAttributeValue();\n+        textAttributeValue.setStringValue(text);\n+        textAttributeValue.setAttribute(attribute);\n+        if (attribute.getSchema().isMultivalue()) {\n+            attribute.addAttributeValue(textAttributeValue);\n+        } else {\n+            attribute.setAttributeValues(\n+                    Collections.singletonList(textAttributeValue));\n+        }\n+    }\n+}"}]}