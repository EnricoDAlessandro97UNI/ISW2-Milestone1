{"sha":"6fc42652b2bd0844e9fbd4410143c746c6c038b1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjZmYzQyNjUyYjJiZDA4NDRlOWZiZDQ0MTAxNDNjNzQ2YzZjMDM4YjE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-07-16T09:47:19Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-07-16T09:48:50Z"},"message":"[SYNCOPE-1338] Do not apply conversion pattern twice during Pull","tree":{"sha":"8c6a7aaba0da328898def9967c2362f341860d46","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8c6a7aaba0da328898def9967c2362f341860d46"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6fc42652b2bd0844e9fbd4410143c746c6c038b1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6fc42652b2bd0844e9fbd4410143c746c6c038b1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6fc42652b2bd0844e9fbd4410143c746c6c038b1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6fc42652b2bd0844e9fbd4410143c746c6c038b1/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"2170e4d50316143ee9b2cd203188814718b0d5e9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2170e4d50316143ee9b2cd203188814718b0d5e9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2170e4d50316143ee9b2cd203188814718b0d5e9"}],"stats":{"total":38,"additions":9,"deletions":29},"files":[{"sha":"a7d425212f4156356b1c60541039b290cc8175e5","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/MappingManager.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6fc42652b2bd0844e9fbd4410143c746c6c038b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6fc42652b2bd0844e9fbd4410143c746c6c038b1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java?ref=6fc42652b2bd0844e9fbd4410143c746c6c038b1","patch":"@@ -25,7 +25,6 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n@@ -105,9 +104,8 @@ Pair<String, Set<Attribute>> prepareAttrs(\n      * @param mapItem mapping item\n      * @param attr attribute received from connector\n      * @param anyTO any object\n-     * @param anyUtils any utils\n      */\n-    <T extends AnyTO> void setIntValues(Item mapItem, Attribute attr, T anyTO, AnyUtils anyUtils);\n+    <T extends AnyTO> void setIntValues(Item mapItem, Attribute attr, T anyTO);\n \n     /**\n      * Set attribute values, according to the given {@link Item}, to realm from attribute received from\n@@ -118,5 +116,4 @@ Pair<String, Set<Attribute>> prepareAttrs(\n      * @param realmTO realm\n      */\n     void setIntValues(Item orgUnitItem, Attribute attr, RealmTO realmTO);\n-\n }"},{"sha":"bc3706b254408cbdd2989aebbd656119afadd813","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":7,"deletions":24,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6fc42652b2bd0844e9fbd4410143c746c6c038b1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6fc42652b2bd0844e9fbd4410143c746c6c038b1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=6fc42652b2bd0844e9fbd4410143c746c6c038b1","patch":"@@ -42,7 +42,6 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n@@ -99,6 +98,7 @@\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n+import org.identityconnectors.common.Base64;\n import org.identityconnectors.framework.common.objects.Name;\n \n @Component\n@@ -694,7 +694,7 @@ public Optional<String> getConnObjectKeyValue(final Realm realm, final OrgUnit o\n \n     @Transactional(readOnly = true)\n     @Override\n-    public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO anyTO, final AnyUtils anyUtils) {\n+    public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO anyTO) {\n         List<Object> values = null;\n         if (attr != null) {\n             values = attr.getValue();\n@@ -706,7 +706,7 @@ public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO a\n \n         IntAttrName intAttrName;\n         try {\n-            intAttrName = intAttrNameParser.parse(mapItem.getIntAttrName(), anyUtils.anyTypeKind());\n+            intAttrName = intAttrNameParser.parse(mapItem.getIntAttrName(), AnyTypeKind.fromTOClass(anyTO.getClass()));\n         } catch (ParseException e) {\n             LOG.error(\"Invalid intAttrName '{}' specified, ignoring\", mapItem.getIntAttrName(), e);\n             return;\n@@ -783,27 +783,11 @@ public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO a\n                     for (Object value : values) {\n                         AttrSchemaType schemaType = schema == null ? AttrSchemaType.String : schema.getType();\n                         if (value != null) {\n-                            PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n-                            switch (schemaType) {\n-                                case String:\n-                                    attrValue.setStringValue(value.toString());\n-                                    break;\n-\n-                                case Binary:\n-                                    attrValue.setBinaryValue((byte[]) value);\n-                                    break;\n-\n-                                default:\n-                                    try {\n-                                        attrValue.parseValue(schema, value.toString());\n-                                    } catch (ParsingValidationException e) {\n-                                        LOG.error(\"While parsing provided value {}\", value, e);\n-                                        attrValue.setStringValue(value.toString());\n-                                        schemaType = AttrSchemaType.String;\n-                                    }\n-                                    break;\n+                            if (schemaType == AttrSchemaType.Binary) {\n+                                attrTO.getValues().add(Base64.encode((byte[]) value));\n+                            } else {\n+                                attrTO.getValues().add(value.toString());\n                             }\n-                            attrTO.getValues().add(attrValue.getValueAsString(schemaType));\n                         }\n                     }\n \n@@ -895,5 +879,4 @@ public void setIntValues(final Item orgUnitItem, final Attribute attr, final Rea\n             }\n         }\n     }\n-\n }"},{"sha":"5abc34f22977b70694d3e47a6dd35d58388df8f8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6fc42652b2bd0844e9fbd4410143c746c6c038b1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6fc42652b2bd0844e9fbd4410143c746c6c038b1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java?ref=6fc42652b2bd0844e9fbd4410143c746c6c038b1","patch":"@@ -312,7 +312,7 @@ private <T extends AnyTO> T getAnyTOFromConnObject(\n         // 1. fill with data from connector object\n         anyTO.setRealm(pullTask.getDestinatioRealm().getFullPath());\n         MappingUtils.getPullItems(provision.getMapping().getItems()).forEach(item -> {\n-            mappingManager.setIntValues(item, obj.getAttributeByName(item.getExtAttrName()), anyTO, anyUtils);\n+            mappingManager.setIntValues(item, obj.getAttributeByName(item.getExtAttrName()), anyTO);\n         });\n \n         // 2. add data from defined template (if any)"}]}