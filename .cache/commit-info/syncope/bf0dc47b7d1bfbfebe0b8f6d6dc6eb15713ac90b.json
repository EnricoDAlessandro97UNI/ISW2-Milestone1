{"sha":"bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","node_id":"C_kwDOJfYA1toAKGJmMGRjNDdiN2QxYmZiZmViZTBiOGY2ZDZkYzZlYjE1NzEzYWM5MGI","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-08-26T09:17:19Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-08-26T09:17:19Z"},"message":"Removing the Camel extension (#371)","tree":{"sha":"1649b30a6965d1af27970a0f2e75e779c7ac3753","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1649b30a6965d1af27970a0f2e75e779c7ac3753"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjCI+fCRBK7hj4Ov3rIwAAs3AIABGDqlMKZ4im+PXD9VMEhR2D\no4PRrXIGW1DyLZi+Y/dg4qoOsdIBs0zYUwBww7QrUhsdij/pp2nyQ7whpSGuyTA0\nrWhH0BcZPVsLV6t1+/0JHhLTJY+G7yFPfwYyrFXzpyy+WclWau+3g790cDgDIoRu\nhj+Dh9a+VPG35rgM8Aaizp3mFRfcOCk5ar21UKa9e/HW/jRelzDUb7vSsdlUfR16\nQoX4WD3HaJ4+Kn18+otlJZZPa5DX22+j3gllHtrIHnVx2wswWqm5jTw/PAw4eQ7z\ndv+EYOHvskJHWw0E6fIuiI861jnKvC3AjxVTRK9aH0aOCkSzllxKxxY+W2WsGRM=\n=qQIb\n-----END PGP SIGNATURE-----\n","payload":"tree 1649b30a6965d1af27970a0f2e75e779c7ac3753\nparent a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1661505439 +0200\ncommitter GitHub <noreply@github.com> 1661505439 +0200\n\nRemoving the Camel extension (#371)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b"}],"stats":{"total":6172,"additions":12,"deletions":6160},"files":[{"sha":"db5f4f5f421a956397e8eaae52fb0da3ae772617","filename":"archetype/src/main/resources/archetype-resources/console/pom.xml","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fconsole%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fconsole%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fconsole%2Fpom.xml?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -87,12 +87,6 @@ under the License.\n           <version>${syncope.version}</version>\n         </dependency>\n \n-        <dependency>\n-          <groupId>org.apache.syncope.ext.camel</groupId>\n-          <artifactId>syncope-ext-camel-client-console</artifactId>\n-          <version>${syncope.version}</version>\n-        </dependency> \n-\n         <dependency>\n           <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n           <artifactId>syncope-ext-saml2sp4ui-client-console</artifactId>"},{"sha":"c4e82b50a0337e97c0574dae5acfece39e4b1f3a","filename":"archetype/src/main/resources/archetype-resources/core/pom.xml","status":"modified","additions":0,"deletions":16,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -119,22 +119,6 @@ under the License.\n           <version>${syncope.version}</version>\n         </dependency>\n \n-        <dependency>\n-          <groupId>org.apache.syncope.ext.camel</groupId>\n-          <artifactId>syncope-ext-camel-rest-cxf</artifactId>\n-          <version>${syncope.version}</version>\n-        </dependency>\n-        <dependency>\n-          <groupId>org.apache.syncope.ext.camel</groupId>\n-          <artifactId>syncope-ext-camel-persistence-jpa</artifactId>\n-          <version>${syncope.version}</version>\n-        </dependency>\n-        <dependency>\n-          <groupId>org.apache.syncope.ext.camel</groupId>\n-          <artifactId>syncope-ext-camel-provisioning</artifactId>\n-          <version>${syncope.version}</version>\n-        </dependency>\n-        \n         <dependency>\n           <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n           <artifactId>syncope-ext-saml2sp4ui-rest-cxf</artifactId>"},{"sha":"5f7b353ab04f4da2be22b319b209493ba98459c7","filename":"client/idrepo/console/pom.xml","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/client%2Fidrepo%2Fconsole%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/client%2Fidrepo%2Fconsole%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fpom.xml?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -328,12 +328,6 @@ under the License.\n           <version>${project.version}</version>\n         </dependency>\n \n-        <dependency>\n-          <groupId>org.apache.syncope.ext.camel</groupId>\n-          <artifactId>syncope-ext-camel-client-console</artifactId>\n-          <version>${project.version}</version>\n-        </dependency>\n-\n         <dependency>\n           <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n           <artifactId>syncope-ext-saml2sp4ui-client-console</artifactId>"},{"sha":"dc374ee35ea6c623b84cae925eab8ff11c878c13","filename":"docker/console/pom.xml","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/docker%2Fconsole%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/docker%2Fconsole%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fconsole%2Fpom.xml?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -71,12 +71,6 @@ under the License.\n       <version>${project.version}</version>\n     </dependency>\n \n-    <dependency>\n-      <groupId>org.apache.syncope.ext.camel</groupId>\n-      <artifactId>syncope-ext-camel-client-console</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-\n     <dependency>\n       <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n       <artifactId>syncope-ext-saml2sp4ui-client-console</artifactId>"},{"sha":"de821b519965029aacb73c576cfc7da36fa6ddbf","filename":"docker/core/pom.xml","status":"modified","additions":1,"deletions":17,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/docker%2Fcore%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/docker%2Fcore%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fpom.xml?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -82,23 +82,7 @@ under the License.\n       <artifactId>syncope-ext-flowable-rest-cxf</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n-\n-    <dependency>\n-      <groupId>org.apache.syncope.ext.camel</groupId>\n-      <artifactId>syncope-ext-camel-rest-cxf</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.ext.camel</groupId>\n-      <artifactId>syncope-ext-camel-persistence-jpa</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.ext.camel</groupId>\n-      <artifactId>syncope-ext-camel-provisioning</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-    \n+   \n     <dependency>\n       <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n       <artifactId>syncope-ext-saml2sp4ui-rest-cxf</artifactId>"},{"sha":"770fc91c7b8e6f239faffe7e0536da8d3868ffe3","filename":"docker/core/src/main/resources/log4j2.xml","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -89,9 +89,6 @@ under the License.\n     <asyncLogger name=\"org.apache.fop\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"console\"/>\n     </asyncLogger>\n-    <asyncLogger name=\"org.apache.camel\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"console\"/>\n-    </asyncLogger>\n     <asyncLogger name=\"org.apache.wss4j\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"console\"/>\n     </asyncLogger>"},{"sha":"45bc6a957d0fdf861de695f683150b804ca83ed0","filename":"ext/camel/client-console/pom.xml","status":"removed","additions":0,"deletions":73,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fpom.xml?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,73 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <parent>\n-    <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-camel</artifactId>\n-    <version>3.0.0-SNAPSHOT</version>\n-  </parent>\n-\n-  <name>Apache Syncope Ext: Camel Client Console</name>\n-  <description>Apache Syncope Ext: Camel Client Console</description>\n-  <groupId>org.apache.syncope.ext.camel</groupId>\n-  <artifactId>syncope-ext-camel-client-console</artifactId>\n-  <packaging>jar</packaging>\n-  \n-  <properties>\n-    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n-  </properties>\n-\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.apache.syncope.ext.camel</groupId>\n-      <artifactId>syncope-ext-camel-common-lib</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.ext.camel</groupId>\n-      <artifactId>syncope-ext-camel-rest-api</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.client.idm</groupId>\n-      <artifactId>syncope-client-idm-console</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-  </dependencies>\n-\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-checkstyle-plugin</artifactId>\n-      </plugin>\n-    </plugins>\n-    \n-    <resources>\n-      <resource>\n-        <directory>src/main/resources</directory>\n-        <filtering>true</filtering>\n-      </resource>\n-    </resources>\n-  </build>\n-</project>"},{"sha":"d46ac02fb9859628388e6917fdf34313c9052582","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/pages/CamelRoutes.java","status":"removed","additions":0,"deletions":104,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,104 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.pages;\n-\n-import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n-import org.apache.syncope.client.console.panels.CamelRoutesDirectoryPanel;\n-import org.apache.syncope.client.console.rest.CamelRoutesRestClient;\n-import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.CamelEntitlement;\n-import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n-import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n-import org.apache.wicket.extensions.markup.html.tabs.ITab;\n-import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.wicket.markup.html.panel.Panel;\n-import org.apache.wicket.model.Model;\n-import org.apache.wicket.request.mapper.parameter.PageParameters;\n-\n-@ExtPage(label = \"Camel Routes\", icon = \"fa fa-road\", listEntitlement = CamelEntitlement.ROUTE_LIST, priority = 100)\n-public class CamelRoutes extends BaseExtPage {\n-\n-    private static final long serialVersionUID = 1965360932245590233L;\n-\n-    public static final String PREF_CAMEL_ROUTES_PAGINATOR_ROWS = \"camel.routes.paginator.rows\";\n-\n-    public CamelRoutes(final PageParameters parameters) {\n-        super(parameters);\n-\n-        body.add(BookmarkablePageLinkBuilder.build(\"dashboard\", \"dashboardBr\", Dashboard.class));\n-\n-        WebMarkupContainer content = new WebMarkupContainer(\"content\");\n-        content.setOutputMarkupId(true);\n-        AjaxBootstrapTabbedPanel<ITab> tabbedPanel = new AjaxBootstrapTabbedPanel<>(\"tabbedPanel\", buildTabList());\n-        content.add(tabbedPanel);\n-\n-        MetaDataRoleAuthorizationStrategy.authorize(content, ENABLE, CamelEntitlement.ROUTE_LIST);\n-        body.add(content);\n-    }\n-\n-    private List<ITab> buildTabList() {\n-        List<ITab> tabs = new ArrayList<>(3);\n-\n-        tabs.add(new AbstractTab(new Model<>(AnyTypeKind.USER.name())) {\n-\n-            private static final long serialVersionUID = -6815067322125799251L;\n-\n-            @Override\n-            public Panel getPanel(final String panelId) {\n-                CamelRoutesDirectoryPanel panel =\n-                        new CamelRoutesDirectoryPanel(panelId, getPageReference(), AnyTypeKind.USER);\n-                panel.setEnabled(CamelRoutesRestClient.isCamelEnabledFor(AnyTypeKind.USER));\n-                return panel;\n-            }\n-        });\n-\n-        tabs.add(new AbstractTab(new Model<>(AnyTypeKind.GROUP.name())) {\n-\n-            private static final long serialVersionUID = -6815067322125799251L;\n-\n-            @Override\n-            public Panel getPanel(final String panelId) {\n-                CamelRoutesDirectoryPanel panel =\n-                        new CamelRoutesDirectoryPanel(panelId, getPageReference(), AnyTypeKind.GROUP);\n-                panel.setEnabled(CamelRoutesRestClient.isCamelEnabledFor(AnyTypeKind.GROUP));\n-                return panel;\n-            }\n-        });\n-\n-        tabs.add(new AbstractTab(new Model<>(AnyTypeKind.ANY_OBJECT.name())) {\n-\n-            private static final long serialVersionUID = -6815067322125799251L;\n-\n-            @Override\n-            public Panel getPanel(final String panelId) {\n-                CamelRoutesDirectoryPanel panel =\n-                        new CamelRoutesDirectoryPanel(panelId, getPageReference(), AnyTypeKind.ANY_OBJECT);\n-                panel.setEnabled(CamelRoutesRestClient.isCamelEnabledFor(AnyTypeKind.ANY_OBJECT));\n-                return panel;\n-            }\n-        });\n-\n-        return tabs;\n-    }\n-\n-}"},{"sha":"251de8be3b9edfdb8d78797b290cac70268ddf88","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/panels/CamelRoutesDirectoryPanel.java","status":"removed","additions":0,"deletions":178,"changes":178,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,178 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.panels;\n-\n-import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.List;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n-import org.apache.syncope.client.console.panels.CamelRoutesDirectoryPanel.CamelRoutesProvider;\n-import org.apache.syncope.client.console.rest.CamelRoutesRestClient;\n-import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n-import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n-import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n-import org.apache.syncope.client.console.wicket.markup.html.form.XMLEditorPanel;\n-import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n-import org.apache.syncope.client.ui.commons.Constants;\n-import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n-import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n-import org.apache.syncope.common.lib.to.CamelRouteTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.CamelEntitlement;\n-import org.apache.wicket.PageReference;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n-import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n-import org.apache.wicket.model.CompoundPropertyModel;\n-import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.Model;\n-import org.apache.wicket.model.PropertyModel;\n-import org.apache.wicket.model.ResourceModel;\n-\n-public class CamelRoutesDirectoryPanel extends DirectoryPanel<\n-        CamelRouteTO, CamelRouteTO, CamelRoutesProvider, CamelRoutesRestClient> {\n-\n-    private static final long serialVersionUID = 3727444742501082182L;\n-\n-    private static final String PREF_CAMEL_ROUTES_PAGINATOR_ROWS = \"camel.routes.paginator.rows\";\n-\n-    private final BaseModal<String> utilityModal = new BaseModal<>(\"outer\");\n-\n-    private final AnyTypeKind anyTypeKind;\n-\n-    public CamelRoutesDirectoryPanel(final String id, final PageReference pageRef, final AnyTypeKind anyTypeKind) {\n-        super(id, new Builder<CamelRouteTO, CamelRouteTO, CamelRoutesRestClient>(new CamelRoutesRestClient(), pageRef) {\n-\n-            private static final long serialVersionUID = 8769126634538601689L;\n-\n-            @Override\n-            protected WizardMgtPanel<CamelRouteTO> newInstance(final String id, final boolean wizardInModal) {\n-                throw new UnsupportedOperationException();\n-            }\n-        }.disableCheckBoxes());\n-        setOutputMarkupId(true);\n-\n-        this.anyTypeKind = anyTypeKind;\n-        setFooterVisibility(true);\n-\n-        addOuterObject(utilityModal);\n-        setWindowClosedReloadCallback(utilityModal);\n-        utilityModal.size(Modal.Size.Large);\n-        utilityModal.addSubmitButton();\n-\n-        initResultTable();\n-    }\n-\n-    @Override\n-    protected CamelRoutesProvider dataProvider() {\n-        return new CamelRoutesProvider(anyTypeKind, rows);\n-    }\n-\n-    @Override\n-    protected String paginatorRowsKey() {\n-        return PREF_CAMEL_ROUTES_PAGINATOR_ROWS;\n-    }\n-\n-    @Override\n-    protected Collection<ActionLink.ActionType> getBatches() {\n-        return List.of();\n-    }\n-\n-    @Override\n-    protected List<IColumn<CamelRouteTO, String>> getColumns() {\n-        final List<IColumn<CamelRouteTO, String>> columns = new ArrayList<>();\n-        columns.add(new PropertyColumn<>(new ResourceModel(\"key\"), \"key\", \"key\"));\n-        return columns;\n-    }\n-\n-    @Override\n-    public ActionsPanel<CamelRouteTO> getActions(final IModel<CamelRouteTO> model) {\n-        final ActionsPanel<CamelRouteTO> panel = super.getActions(model);\n-\n-        panel.add(new ActionLink<>() {\n-\n-            private static final long serialVersionUID = -3722207913631435501L;\n-\n-            @Override\n-            public void onClick(final AjaxRequestTarget target, final CamelRouteTO ignore) {\n-                final CamelRouteTO route = CamelRoutesRestClient.read(anyTypeKind, model.getObject().getKey());\n-\n-                utilityModal.header(Model.of(route.getKey()));\n-                utilityModal.setContent(new XMLEditorPanel(\n-                    utilityModal, new PropertyModel<>(route, \"content\"), filtered, pageRef) {\n-\n-                    private static final long serialVersionUID = 5488080606102212554L;\n-\n-                    @Override\n-                    public void onSubmit(final AjaxRequestTarget target) {\n-                        try {\n-                            CamelRoutesRestClient.update(anyTypeKind, route);\n-                            SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n-                            modal.close(target);\n-                        } catch (Exception e) {\n-                            LOG.error(\"While creating or updating CamelRouteTO\", e);\n-                            error(getString(Constants.ERROR) + \": \" + e.getMessage());\n-                        }\n-                        ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n-                    }\n-\n-                });\n-                utilityModal.show(true);\n-                target.add(utilityModal);\n-            }\n-        }, ActionLink.ActionType.EDIT, CamelEntitlement.ROUTE_UPDATE);\n-\n-        return panel;\n-    }\n-\n-    protected static final class CamelRoutesProvider extends DirectoryDataProvider<CamelRouteTO> {\n-\n-        private static final long serialVersionUID = -185944053385660794L;\n-\n-        private final AnyTypeKind anyTypeKind;\n-\n-        private final SortableDataProviderComparator<CamelRouteTO> comparator;\n-\n-        private CamelRoutesProvider(final AnyTypeKind anyTypeKind, final int paginatorRows) {\n-            super(paginatorRows);\n-            this.anyTypeKind = anyTypeKind;\n-            comparator = new SortableDataProviderComparator<>(this);\n-        }\n-\n-        @Override\n-        public Iterator<CamelRouteTO> iterator(final long first, final long count) {\n-            List<CamelRouteTO> list = CamelRoutesRestClient.list(anyTypeKind);\n-            list.sort(comparator);\n-            return list.subList((int) first, (int) first + (int) count).iterator();\n-        }\n-\n-        @Override\n-        public long size() {\n-            return CamelRoutesRestClient.list(anyTypeKind).size();\n-        }\n-\n-        @Override\n-        public IModel<CamelRouteTO> model(final CamelRouteTO object) {\n-            return new CompoundPropertyModel<>(object);\n-        }\n-    }\n-}"},{"sha":"d3873ea5f41fa361a8c6ae667afa4e792a62d36a","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/rest/CamelRoutesRestClient.java","status":"removed","additions":0,"deletions":61,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FCamelRoutesRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FCamelRoutesRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FCamelRoutesRestClient.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,61 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.rest;\n-\n-import java.util.List;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.common.lib.to.CamelMetrics;\n-import org.apache.syncope.common.lib.to.CamelRouteTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.rest.api.service.CamelRouteService;\n-\n-public class CamelRoutesRestClient extends BaseRestClient {\n-\n-    private static final long serialVersionUID = -2018208424159468912L;\n-\n-    public static List<CamelRouteTO> list(final AnyTypeKind anyTypeKind) {\n-        return isCamelEnabledFor(anyTypeKind)\n-                ? getService(CamelRouteService.class).list(anyTypeKind)\n-                : List.of();\n-    }\n-\n-    public static CamelRouteTO read(final AnyTypeKind anyTypeKind, final String key) {\n-        return getService(CamelRouteService.class).read(anyTypeKind, key);\n-    }\n-\n-    public static void update(final AnyTypeKind anyTypeKind, final CamelRouteTO routeTO) {\n-        getService(CamelRouteService.class).update(anyTypeKind, routeTO);\n-    }\n-\n-    public static boolean isCamelEnabledFor(final AnyTypeKind anyTypeKind) {\n-        return anyTypeKind == AnyTypeKind.USER\n-                ? SyncopeConsoleSession.get().getPlatformInfo().\n-                        getProvisioningInfo().getUserProvisioningManager().contains(\"Camel\")\n-                : anyTypeKind == AnyTypeKind.ANY_OBJECT\n-                        ? SyncopeConsoleSession.get().getPlatformInfo().getProvisioningInfo().\n-                                getAnyObjectProvisioningManager().contains(\"Camel\")\n-                        : SyncopeConsoleSession.get().getPlatformInfo().getProvisioningInfo().\n-                                getGroupProvisioningManager().contains(\"Camel\");\n-\n-    }\n-\n-    public static CamelMetrics metrics() {\n-        return getService(CamelRouteService.class).metrics();\n-    }\n-}"},{"sha":"582894e32177ecdbc58b7ed76fb3966186cfd429","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/widgets/CamelMetricsWidget.java","status":"removed","additions":0,"deletions":112,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,112 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.widgets;\n-\n-import java.time.Duration;\n-import java.time.temporal.ChronoUnit;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import org.apache.syncope.client.console.chartjs.Bar;\n-import org.apache.syncope.client.console.chartjs.BarDataSet;\n-import org.apache.syncope.client.console.chartjs.ChartJSPanel;\n-import org.apache.syncope.client.console.rest.CamelRoutesRestClient;\n-import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxTimerBehavior;\n-import org.apache.syncope.client.ui.commons.annotations.ExtWidget;\n-import org.apache.syncope.common.lib.to.CamelMetrics;\n-import org.apache.wicket.PageReference;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.wicket.model.Model;\n-\n-@ExtWidget(cssClass = \"col-md-6\")\n-public class CamelMetricsWidget extends BaseExtWidget {\n-\n-    private static final long serialVersionUID = 4157815058487313617L;\n-\n-    private List<CamelMetrics.MeanRate> meanRates;\n-\n-    private final ChartJSPanel chart;\n-\n-    public CamelMetricsWidget(final String id, final PageReference pageRef) {\n-        super(id, pageRef);\n-\n-        WebMarkupContainer container = new WebMarkupContainer(\"container\");\n-        container.setOutputMarkupId(true);\n-        add(container);\n-\n-        CamelMetrics metrics = CamelRoutesRestClient.metrics();\n-        meanRates = new ArrayList<>(5);\n-        for (int i = 0; i < 5; i++) {\n-            meanRates.add(metrics.getResponseMeanRates().get(i));\n-        }\n-\n-        chart = new ChartJSPanel(\"chart\", Model.of(build(meanRates)));\n-        container.add(chart);\n-\n-        container.add(new IndicatorAjaxTimerBehavior(Duration.of(60, ChronoUnit.SECONDS)) {\n-\n-            private static final long serialVersionUID = -4426283634345968585L;\n-\n-            @Override\n-            protected void onTimer(final AjaxRequestTarget target) {\n-                CamelMetrics metrics = CamelRoutesRestClient.metrics();\n-                List<CamelMetrics.MeanRate> updatedMeanRates = new ArrayList<>(5);\n-                for (int i = 0; i < 5; i++) {\n-                    updatedMeanRates.add(metrics.getResponseMeanRates().get(i));\n-                }\n-\n-                if (refresh(updatedMeanRates)) {\n-                    target.add(CamelMetricsWidget.this);\n-                }\n-            }\n-        });\n-    }\n-\n-    private static Bar build(final List<CamelMetrics.MeanRate> meanRates) {\n-        Bar bar = new Bar();\n-        bar.getOptions().setScaleBeginAtZero(true);\n-        bar.getOptions().setBarShowStroke(true);\n-        bar.getOptions().setBarStrokeWidth(2);\n-        bar.getOptions().setBarValueSpacing(5);\n-        bar.getOptions().setBarDatasetSpacing(1);\n-        bar.getOptions().setResponsive(true);\n-        bar.getOptions().setMaintainAspectRatio(true);\n-\n-        bar.getData().getLabels().addAll(\n-                meanRates.stream().map(CamelMetrics.MeanRate::getRouteId).collect(Collectors.toList()));\n-\n-        BarDataSet dataset = new BarDataSet(\n-                meanRates.stream().map(CamelMetrics.MeanRate::getValue).collect(Collectors.toList()));\n-        dataset.setFillColor(\"blue\");\n-        bar.getData().getDatasets().add(dataset);\n-\n-        return bar;\n-    }\n-\n-    private boolean refresh(final List<CamelMetrics.MeanRate> meanRates) {\n-        if (!this.meanRates.equals(meanRates)) {\n-            this.meanRates = meanRates;\n-\n-            chart.setDefaultModelObject(build(meanRates));\n-            return true;\n-        }\n-        return false;\n-    }\n-}"},{"sha":"1f61c8ef37f362e34f3940e5ef06a8532d01c9e3","filename":"ext/camel/client-console/src/main/resources/org/apache/syncope/client/console/pages/CamelRoutes.html","status":"removed","additions":0,"deletions":49,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes.html?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,49 +0,0 @@\n-<!DOCTYPE html>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n-  <wicket:extend>\n-    <section class=\"content-header\">\n-      <div class=\"container-fluid\">\n-        <div class=\"row mb-2\">\n-          <div class=\"col-sm-6\">\n-            <h1>&nbsp;</h1>\n-          </div>\n-          <div class=\"col-sm-6\">\n-            <ol class=\"breadcrumb float-sm-right\">\n-              <li class=\"breadcrumb-item\">\n-                <a wicket:id=\"dashboardBr\"><i class=\"fa fa-tachometer-alt\"></i> <wicket:message key=\"dashboard\"></wicket:message></a>\n-              </li>\n-              <li class=\"breadcrumb-item\"><wicket:message key=\"extensions\"/></li>\n-              <li class=\"breadcrumb-item active\"><wicket:message key=\"camelRoutes\"/></li>\n-            </ol>\n-          </div>\n-        </div>\n-      </div><!-- /.container-fluid -->\n-    </section>\n-\n-    <section class=\"content\" wicket:id=\"content\">\n-      <div class=\"container-fluid\">\n-        <div class=\"card card-outline\">\n-          <div class=\"card-body\" wicket:id=\"tabbedPanel\"/>\n-        </div>\n-      </div>\n-    </section>\n-  </wicket:extend>\n-</html>\n\\ No newline at end of file"},{"sha":"bd959d5f89e606a209d0cc82911969211960dbd1","filename":"ext/camel/client-console/src/main/resources/org/apache/syncope/client/console/pages/CamelRoutes.properties","status":"removed","additions":0,"deletions":17,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes.properties?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,17 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-camelRoutes=Camel Routes"},{"sha":"5e5b7c0afa3ba437e0cd0e73a1fb067ef0e40e03","filename":"ext/camel/client-console/src/main/resources/org/apache/syncope/client/console/pages/CamelRoutes_it.properties","status":"removed","additions":0,"deletions":17,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes_it.properties?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,17 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-camelRoutes=Rotte Camel"},{"sha":"46ecbfd7eeec13fd2384628aa60f51f49a45e831","filename":"ext/camel/client-console/src/main/resources/org/apache/syncope/client/console/pages/CamelRoutes_pt_BR.properties","status":"removed","additions":0,"deletions":17,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes_pt_BR.properties?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,17 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-camelRoutes=Rotas Camel"},{"sha":"bbb89ab2c17799ea039144d1eefc3a805f794979","filename":"ext/camel/client-console/src/main/resources/org/apache/syncope/client/console/panels/CamelRoutesDirectoryPanel.properties","status":"removed","additions":0,"deletions":20,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.properties?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,20 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-any.edit=Edit Camel Route ${key}\n-any.new=New Camel Route\n-any.finish=Update\n-any.cancel=Cancel"},{"sha":"07d463e76f662b806e15b5af8fbf89c97777a690","filename":"ext/camel/client-console/src/main/resources/org/apache/syncope/client/console/panels/CamelRoutesDirectoryPanel_it.properties","status":"removed","additions":0,"deletions":20,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel_it.properties?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,20 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-any.edit=Modifica Camel Route ${key}\n-any.new=Nuova Camel Route\n-any.finish=Aggiorna\n-any.cancel=Annulla"},{"sha":"a25f1a10d34277d7e3800e11baa735c2b2613a5f","filename":"ext/camel/client-console/src/main/resources/org/apache/syncope/client/console/panels/CamelRoutesDirectoryPanel_pt_BR.properties","status":"removed","additions":0,"deletions":20,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel_pt_BR.properties?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,20 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-any.edit=Alterar Camel Route ${key}\n-any.new=Nova Camel Route\n-any.finish=Atualizar\n-any.cancel=Cancelar"},{"sha":"b2c917fcd1d9e8a9bdaa1b9442d850f28fcc50aa","filename":"ext/camel/client-console/src/main/resources/org/apache/syncope/client/console/widgets/CamelMetricsWidget.html","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.html?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,35 +0,0 @@\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n-  <wicket:panel>\n-    <div class=\"card card-gray\">\n-      <div class=\"card-header\">\n-        <h3 class=\"card-title\"><wicket:message key=\"camelMetrics\"/></h3>\n-\n-        <div class=\"card-tools\">\n-          <button type=\"button\" class=\"btn btn-tool\" data-card-widget=\"collapse\"><i class=\"fas fa-minus\"></i>\n-          </button>\n-        </div>\n-      </div>\n-      <div class=\"card-body\" wicket:id=\"container\">\n-        <div class=\"chart\" wicket:id=\"chart\"/>\n-      </div>\n-    </div>\n-  </wicket:panel>\n-</html>\n\\ No newline at end of file"},{"sha":"c8bdd12874489b9b1461ed040f44b8d22920de8a","filename":"ext/camel/client-console/src/main/resources/org/apache/syncope/client/console/widgets/CamelMetricsWidget.properties","status":"removed","additions":0,"deletions":17,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.properties?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,17 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-camelMetrics=Camel Metrics"},{"sha":"7df012d5283a0a3d5355d6e58e4a59e018c8d34b","filename":"ext/camel/client-console/src/main/resources/org/apache/syncope/client/console/widgets/CamelMetricsWidget_it.properties","status":"removed","additions":0,"deletions":17,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget_it.properties?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,17 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-camelMetrics=Metriche Camel"},{"sha":"57a15ed5113c965f374bf153122519f17538b9d5","filename":"ext/camel/client-console/src/main/resources/org/apache/syncope/client/console/widgets/CamelMetricsWidget_pt_BR.properties","status":"removed","additions":0,"deletions":17,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget_pt_BR.properties?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,17 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-camelMetrics=M\\u00e9tricas Camel"},{"sha":"c5e07a4a320bae7f20019787b04746bfb93306a3","filename":"ext/camel/common-lib/pom.xml","status":"removed","additions":0,"deletions":56,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fcommon-lib%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fcommon-lib%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fcommon-lib%2Fpom.xml?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,56 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <parent>\n-    <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-camel</artifactId>\n-    <version>3.0.0-SNAPSHOT</version>\n-  </parent>\n-\n-  <name>Apache Syncope Ext: Camel Common Lib</name>\n-  <description>Apache Syncope Ext: Camel Common Lib</description>\n-  <groupId>org.apache.syncope.ext.camel</groupId>\n-  <artifactId>syncope-ext-camel-common-lib</artifactId>\n-  <packaging>jar</packaging>\n-  \n-  <properties>\n-    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n-  </properties>\n-\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.apache.syncope.common.idm</groupId>\n-      <artifactId>syncope-common-idm-lib</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-  </dependencies>\n-\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-checkstyle-plugin</artifactId>\n-      </plugin>\n-    </plugins>\n-  </build>\n-</project>"},{"sha":"8f1d977139affa8c80110674f6558536182551ef","filename":"ext/camel/common-lib/src/main/java/org/apache/syncope/common/lib/to/CamelMetrics.java","status":"removed","additions":0,"deletions":64,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCamelMetrics.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCamelMetrics.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCamelMetrics.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,64 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.to;\n-\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-public class CamelMetrics implements Serializable {\n-\n-    private static final long serialVersionUID = -391404198406614231L;\n-\n-    public static class MeanRate implements Serializable {\n-\n-        private static final long serialVersionUID = -233921226510124154L;\n-\n-        private String routeId;\n-\n-        private double value;\n-\n-        public String getRouteId() {\n-            return routeId;\n-        }\n-\n-        public void setRouteId(final String routeId) {\n-            this.routeId = routeId;\n-        }\n-\n-        public double getValue() {\n-            return value;\n-        }\n-\n-        public void setValue(final double value) {\n-            this.value = value;\n-        }\n-\n-    }\n-\n-    private final List<MeanRate> responseMeanRates = new ArrayList<>();\n-\n-    @JacksonXmlElementWrapper(localName = \"responseMeanRates\")\n-    @JacksonXmlProperty(localName = \"meanRate\")\n-    public List<MeanRate> getResponseMeanRates() {\n-        return responseMeanRates;\n-    }\n-}"},{"sha":"5b007c58657ded3b6bc620c1b0cb6200c46dbda2","filename":"ext/camel/common-lib/src/main/java/org/apache/syncope/common/lib/to/CamelRouteTO.java","status":"removed","additions":0,"deletions":61,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCamelRouteTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCamelRouteTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCamelRouteTO.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,61 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.to;\n-\n-import javax.ws.rs.PathParam;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-\n-public class CamelRouteTO implements EntityTO {\n-\n-    private static final long serialVersionUID = 6431992877435181674L;\n-\n-    private String key;\n-\n-    private AnyTypeKind anyTypeKind;\n-\n-    private String content;\n-\n-    @Override\n-    public String getKey() {\n-        return key;\n-    }\n-\n-    @PathParam(\"key\")\n-    @Override\n-    public void setKey(final String key) {\n-        this.key = key;\n-    }\n-\n-    public String getContent() {\n-        return content;\n-    }\n-\n-    public void setContent(final String content) {\n-        this.content = content;\n-    }\n-\n-    public AnyTypeKind getAnyTypeKind() {\n-        return anyTypeKind;\n-    }\n-\n-    public void setAnyTypeKind(final AnyTypeKind anyTypeKind) {\n-        this.anyTypeKind = anyTypeKind;\n-    }\n-\n-}"},{"sha":"f9763a7d2c0944dc6576b30193ff851471119500","filename":"ext/camel/common-lib/src/main/java/org/apache/syncope/common/lib/types/CamelEntitlement.java","status":"removed","additions":0,"deletions":54,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FCamelEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FCamelEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FCamelEntitlement.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,54 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.types;\n-\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n-import java.util.Collections;\n-import java.util.Set;\n-import java.util.TreeSet;\n-\n-public final class CamelEntitlement {\n-\n-    public static final String ROUTE_READ = \"ROUTE_READ\";\n-\n-    public static final String ROUTE_LIST = \"ROUTE_LIST\";\n-\n-    public static final String ROUTE_UPDATE = \"ROUTE_UPDATE\";\n-\n-    private static final Set<String> VALUES;\n-\n-    static {\n-        Set<String> values = new TreeSet<>();\n-        for (Field field : CamelEntitlement.class.getDeclaredFields()) {\n-            if (Modifier.isStatic(field.getModifiers()) && String.class.equals(field.getType())) {\n-                values.add(field.getName());\n-            }\n-        }\n-        VALUES = Collections.unmodifiableSet(values);\n-    }\n-\n-    public static Set<String> values() {\n-        return VALUES;\n-    }\n-\n-    private CamelEntitlement() {\n-        // private constructor for static utility class\n-    }\n-}"},{"sha":"38cf26fc9e42d720e54c8b791931896dca25b166","filename":"ext/camel/logic/pom.xml","status":"removed","additions":0,"deletions":61,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fpom.xml?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,61 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <parent>\n-    <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-camel</artifactId>\n-    <version>3.0.0-SNAPSHOT</version>\n-  </parent>\n-\n-  <name>Apache Syncope Ext: Camel Logic</name>\n-  <description>Apache Syncope Ext: Camel Logic</description>\n-  <groupId>org.apache.syncope.ext.camel</groupId>\n-  <artifactId>syncope-ext-camel-logic</artifactId>\n-  <packaging>jar</packaging>\n-  \n-  <properties>\n-    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n-  </properties>\n-\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.apache.syncope.core.idm</groupId>\n-      <artifactId>syncope-core-idm-logic</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.ext.camel</groupId>\n-      <artifactId>syncope-ext-camel-provisioning</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>  \n-  </dependencies>\n-\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-checkstyle-plugin</artifactId>\n-      </plugin>\n-    </plugins>\n-  </build>\n-</project>"},{"sha":"8c46d0b08ccee63c332bf76c299e6e433027aae6","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/CamelLogicContext.java","status":"removed","additions":0,"deletions":52,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelLogicContext.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,52 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic;\n-\n-import org.apache.syncope.core.logic.init.CamelRouteLoader;\n-import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;\n-import org.apache.syncope.core.provisioning.api.data.CamelRouteDataBinder;\n-import org.apache.syncope.core.provisioning.camel.SyncopeCamelContext;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.io.Resource;\n-\n-@Configuration(proxyBeanMethods = false)\n-public class CamelLogicContext {\n-\n-    @ConditionalOnMissingBean\n-    @Bean\n-    public CamelRouteLoader camelRouteLoader(\n-        @Qualifier(\"anyObjectRoutes\") final Resource anyObjectRoutes,\n-        @Qualifier(\"groupRoutes\") final Resource groupRoutes,\n-        @Qualifier(\"userRoutes\") final Resource userRoutes) {\n-        return new CamelRouteLoader(userRoutes, groupRoutes, anyObjectRoutes);\n-    }\n-\n-    @ConditionalOnMissingBean\n-    @Bean\n-    public CamelRouteLogic camelRouteLogic(\n-            final CamelRouteDAO routeDAO,\n-            final CamelRouteDataBinder binder,\n-            final SyncopeCamelContext context) {\n-\n-        return new CamelRouteLogic(routeDAO, binder, context);\n-    }\n-}"},{"sha":"764679b2e065a281c51be3915d3c01de805c45ad","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/CamelRouteLogic.java","status":"removed","additions":0,"deletions":174,"changes":174,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,174 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic;\n-\n-import com.codahale.metrics.MetricRegistry;\n-import java.lang.reflect.Method;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.List;\n-import org.apache.camel.component.metrics.routepolicy.MetricsRegistryService;\n-import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.CamelMetrics;\n-import org.apache.syncope.common.lib.to.CamelRouteTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.CamelEntitlement;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.entity.CamelRoute;\n-import org.apache.syncope.core.provisioning.api.data.CamelRouteDataBinder;\n-import org.apache.syncope.core.provisioning.camel.CamelException;\n-import org.apache.syncope.core.provisioning.camel.SyncopeCamelContext;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-public class CamelRouteLogic extends AbstractTransactionalLogic<CamelRouteTO> {\n-\n-    protected final CamelRouteDAO routeDAO;\n-\n-    protected final CamelRouteDataBinder binder;\n-\n-    protected final SyncopeCamelContext context;\n-\n-    public CamelRouteLogic(\n-            final CamelRouteDAO routeDAO,\n-            final CamelRouteDataBinder binder,\n-            final SyncopeCamelContext context) {\n-\n-        this.routeDAO = routeDAO;\n-        this.binder = binder;\n-        this.context = context;\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + CamelEntitlement.ROUTE_LIST + \"')\")\n-    @Transactional(readOnly = true)\n-    public List<CamelRouteTO> list(final AnyTypeKind anyTypeKind) {\n-        List<CamelRouteTO> routes = new ArrayList<>();\n-\n-        routeDAO.find(anyTypeKind).forEach(route -> routes.add(binder.getRouteTO(route)));\n-        return routes;\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + CamelEntitlement.ROUTE_READ + \"')\")\n-    @Transactional(readOnly = true)\n-    public CamelRouteTO read(final AnyTypeKind anyTypeKind, final String key) {\n-        CamelRoute route = routeDAO.find(key);\n-        if (route == null) {\n-            throw new NotFoundException(\"CamelRoute with key=\" + key);\n-        }\n-\n-        if (route.getAnyTypeKind() != anyTypeKind) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n-            sce.getElements().add(\"Found \" + anyTypeKind + \", expected \" + route.getAnyTypeKind());\n-            throw sce;\n-        }\n-\n-        return binder.getRouteTO(route);\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + CamelEntitlement.ROUTE_UPDATE + \"')\")\n-    public void update(final AnyTypeKind anyTypeKind, final CamelRouteTO routeTO) {\n-        CamelRoute route = routeDAO.find(routeTO.getKey());\n-        if (route == null) {\n-            throw new NotFoundException(\"CamelRoute with key=\" + routeTO.getKey());\n-        }\n-\n-        if (route.getAnyTypeKind() != anyTypeKind) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n-            sce.getElements().add(\"Found \" + anyTypeKind + \", expected \" + route.getAnyTypeKind());\n-            throw sce;\n-        }\n-\n-        String originalContent = route.getContent();\n-\n-        LOG.debug(\"Updating route {} with content {}\", routeTO.getKey(), routeTO.getContent());\n-        binder.update(route, routeTO);\n-\n-        try {\n-            context.updateContext(routeTO.getKey());\n-        } catch (CamelException e) {\n-            // if an exception was thrown while updating the context, restore the former route definition\n-            LOG.debug(\"Update of route {} failed, reverting\", routeTO.getKey());\n-            context.restoreRoute(routeTO.getKey(), originalContent);\n-\n-            throw e;\n-        }\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + CamelEntitlement.ROUTE_UPDATE + \"')\")\n-    public void restartContext() {\n-        context.restartContext();\n-    }\n-\n-    @PreAuthorize(\"isAuthenticated()\")\n-    public CamelMetrics metrics() {\n-        CamelMetrics metrics = new CamelMetrics();\n-\n-        MetricsRegistryService registryService = context.getCamelContext().hasService(MetricsRegistryService.class);\n-        if (registryService == null) {\n-            LOG.warn(\"Camel metrics not available\");\n-        } else {\n-            MetricRegistry registry = registryService.getMetricsRegistry();\n-            registry.getTimers().entrySet().stream().map(entry -> {\n-                CamelMetrics.MeanRate meanRate = new CamelMetrics.MeanRate();\n-                meanRate.setRouteId(StringUtils.substringBetween(entry.getKey(), \".\", \".\"));\n-                meanRate.setValue(entry.getValue().getMeanRate());\n-                return meanRate;\n-            }).forEachOrdered(meanRate -> metrics.getResponseMeanRates().add(meanRate));\n-\n-            metrics.getResponseMeanRates().sort((o1, o2) -> Collections.reverseOrder(Comparator.<Double>naturalOrder()).\n-                    compare(o1.getValue(), o2.getValue()));\n-        }\n-\n-        return metrics;\n-    }\n-\n-    @Override\n-    protected CamelRouteTO resolveReference(final Method method, final Object... args)\n-            throws UnresolvedReferenceException {\n-\n-        String key = null;\n-\n-        if (ArrayUtils.isNotEmpty(args)) {\n-            for (int i = 0; key == null && i < args.length; i++) {\n-                if (args[i] instanceof String) {\n-                    key = (String) args[i];\n-                } else if (args[i] instanceof CamelRouteTO) {\n-                    key = ((CamelRouteTO) args[i]).getKey();\n-                }\n-            }\n-        }\n-\n-        if (key != null) {\n-            try {\n-                return binder.getRouteTO(routeDAO.find(key));\n-            } catch (Throwable ignore) {\n-                LOG.debug(\"Unresolved reference\", ignore);\n-                throw new UnresolvedReferenceException(ignore);\n-            }\n-        }\n-\n-        throw new UnresolvedReferenceException();\n-    }\n-\n-}"},{"sha":"f3a4fdd3c30a930d79303264b3cc0091332d522e","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/init/CamelRouteLoader.java","status":"removed","additions":0,"deletions":189,"changes":189,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,189 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic.init;\n-\n-import java.io.StringWriter;\n-import javax.sql.DataSource;\n-import javax.xml.XMLConstants;\n-import javax.xml.transform.OutputKeys;\n-import javax.xml.transform.Transformer;\n-import javax.xml.transform.TransformerException;\n-import javax.xml.transform.TransformerFactory;\n-import javax.xml.transform.dom.DOMSource;\n-import javax.xml.transform.stream.StreamResult;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.cxf.staxutils.StaxUtils;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.CamelEntitlement;\n-import org.apache.syncope.common.lib.types.EntitlementsHolder;\n-import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n-import org.apache.syncope.core.persistence.api.entity.CamelRoute;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.core.io.Resource;\n-import org.springframework.jdbc.core.JdbcTemplate;\n-import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n-import org.w3c.dom.NodeList;\n-import org.w3c.dom.bootstrap.DOMImplementationRegistry;\n-import org.w3c.dom.ls.DOMImplementationLS;\n-import org.w3c.dom.ls.LSInput;\n-import org.w3c.dom.ls.LSOutput;\n-import org.w3c.dom.ls.LSParser;\n-import org.w3c.dom.ls.LSSerializer;\n-\n-public class CamelRouteLoader implements SyncopeCoreLoader {\n-\n-    protected static final Logger LOG = LoggerFactory.getLogger(CamelRouteLoader.class);\n-\n-    protected static final boolean IS_JBOSS;\n-\n-    static {\n-        IS_JBOSS = isJBoss();\n-    }\n-\n-    protected static boolean isJBoss() {\n-        try {\n-            Class.forName(\"org.jboss.vfs.VirtualFile\");\n-            LOG.debug(\"Running in JBoss AS / Wildfly, disabling {}\", DOMImplementationRegistry.class.getName());\n-            return true;\n-        } catch (Throwable ex) {\n-            LOG.debug(\"Not running in JBoss AS / Wildfly, enabling {}\", DOMImplementationRegistry.class.getName());\n-            return false;\n-        }\n-    }\n-\n-    protected final Resource userRoutes;\n-\n-    protected final Resource groupRoutes;\n-\n-    protected final Resource anyObjectRoutes;\n-\n-    public CamelRouteLoader(final Resource userRoutes, final Resource groupRoutes, final Resource anyObjectRoutes) {\n-        this.userRoutes = userRoutes;\n-        this.groupRoutes = groupRoutes;\n-        this.anyObjectRoutes = anyObjectRoutes;\n-    }\n-\n-    @Override\n-    public int getOrder() {\n-        return 1000;\n-    }\n-\n-    @Override\n-    public void load() {\n-        EntitlementsHolder.getInstance().addAll(CamelEntitlement.values());\n-    }\n-\n-    @Override\n-    public void load(final String domain, final DataSource datasource) {\n-        loadRoutes(domain, datasource, userRoutes, AnyTypeKind.USER);\n-        loadRoutes(domain, datasource, groupRoutes, AnyTypeKind.GROUP);\n-        loadRoutes(domain, datasource, anyObjectRoutes, AnyTypeKind.ANY_OBJECT);\n-    }\n-\n-    protected static String nodeToString(final Node content, final DOMImplementationLS domImpl) {\n-        StringWriter writer = new StringWriter();\n-        try {\n-            LSSerializer serializer = domImpl.createLSSerializer();\n-            serializer.getDomConfig().setParameter(\"xml-declaration\", false);\n-            LSOutput lso = domImpl.createLSOutput();\n-            lso.setCharacterStream(writer);\n-            serializer.write(content, lso);\n-        } catch (Exception e) {\n-            LOG.debug(\"While serializing route node\", e);\n-        }\n-        return writer.toString();\n-    }\n-\n-    protected static String nodeToString(final Node content, final TransformerFactory tf) {\n-        String output = StringUtils.EMPTY;\n-\n-        try {\n-            Transformer transformer = tf.newTransformer();\n-            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n-            StringWriter writer = new StringWriter();\n-            transformer.transform(new DOMSource(content), new StreamResult(writer));\n-            output = writer.getBuffer().toString();\n-        } catch (TransformerException e) {\n-            LOG.debug(\"While serializing route node\", e);\n-        }\n-\n-        return output;\n-    }\n-\n-    protected static void loadRoutes(\n-            final String domain, final DataSource dataSource, final Resource resource, final AnyTypeKind anyTypeKind) {\n-\n-        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n-        boolean shouldLoadRoutes = jdbcTemplate.queryForList(\n-                String.format(\"SELECT * FROM %s WHERE ANYTYPEKIND = ?\", CamelRoute.class.getSimpleName()),\n-                new Object[] { anyTypeKind.name() }).\n-                isEmpty();\n-\n-        if (shouldLoadRoutes) {\n-            try {\n-                TransformerFactory tf = null;\n-                DOMImplementationLS domImpl = null;\n-                NodeList routeNodes;\n-                if (IS_JBOSS) {\n-                    tf = TransformerFactory.newInstance();\n-                    tf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n-                    try {\n-                        tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n-                        tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");\n-                    } catch (IllegalArgumentException ex) {\n-                        LOG.debug(\"The JAXP parser does not support the following attribute: \", ex);\n-                    }\n-                    tf.setURIResolver((href, base) -> null);\n-\n-                    Document doc = StaxUtils.read(resource.getInputStream());\n-\n-                    routeNodes = doc.getDocumentElement().getElementsByTagName(\"route\");\n-                } else {\n-                    DOMImplementationRegistry reg = DOMImplementationRegistry.newInstance();\n-                    domImpl = (DOMImplementationLS) reg.getDOMImplementation(\"LS\");\n-                    LSInput lsinput = domImpl.createLSInput();\n-                    lsinput.setByteStream(resource.getInputStream());\n-\n-                    LSParser parser = domImpl.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, null);\n-\n-                    routeNodes = parser.parse(lsinput).getDocumentElement().getElementsByTagName(\"route\");\n-                }\n-\n-                for (int s = 0; s < routeNodes.getLength(); s++) {\n-                    Node routeElement = routeNodes.item(s);\n-                    String routeContent = IS_JBOSS\n-                            ? nodeToString(routeNodes.item(s), tf)\n-                            : nodeToString(routeNodes.item(s), domImpl);\n-                    String routeId = ((Element) routeElement).getAttribute(\"id\");\n-\n-                    jdbcTemplate.update(\n-                            String.format(\"INSERT INTO %s(ID, ANYTYPEKIND, CONTENT) VALUES (?, ?, ?)\",\n-                                    CamelRoute.class.getSimpleName()),\n-                            new Object[] { routeId, anyTypeKind.name(), routeContent });\n-                    LOG.info(\"[{}] Route successfully loaded: {}\", domain, routeId);\n-                }\n-            } catch (Exception e) {\n-                LOG.error(\"[{}] Route load failed\", domain, e);\n-            }\n-        }\n-    }\n-}"},{"sha":"86b1362b3dd88417482fd3c24a842c5036d10cfe","filename":"ext/camel/logic/src/main/resources/META-INF/spring.factories","status":"removed","additions":0,"deletions":19,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,19 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-\n-org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n-  org.apache.syncope.core.logic.CamelLogicContext"},{"sha":"a24df3c2ea5b3f6fac649cef4912c7fea77d1d33","filename":"ext/camel/persistence-api/pom.xml","status":"removed","additions":0,"deletions":56,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fpersistence-api%2Fpom.xml?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,56 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <parent>\n-    <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-camel</artifactId>\n-    <version>3.0.0-SNAPSHOT</version>\n-  </parent>\n-\n-  <name>Apache Syncope Ext: Camel Persistence API</name>\n-  <description>Apache Syncope Ext: Camel Persistence API</description>\n-  <groupId>org.apache.syncope.ext.camel</groupId>\n-  <artifactId>syncope-ext-camel-persistence-api</artifactId>\n-  <packaging>jar</packaging>\n-  \n-  <properties>\n-    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n-  </properties>\n-\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.apache.syncope.core</groupId>\n-      <artifactId>syncope-core-persistence-api</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-  </dependencies>\n-\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-checkstyle-plugin</artifactId>\n-      </plugin>\n-    </plugins>\n-  </build>\n-</project>"},{"sha":"d843ab8ce0664334e07d85d41f68ba995f99dc9e","filename":"ext/camel/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/CamelRouteDAO.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FCamelRouteDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FCamelRouteDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FCamelRouteDAO.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,36 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.dao;\n-\n-import java.util.List;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.entity.CamelRoute;\n-\n-public interface CamelRouteDAO extends DAO<CamelRoute> {\n-\n-    CamelRoute find(String key);\n-\n-    List<CamelRoute> find(AnyTypeKind anyTypeKind);\n-\n-    List<CamelRoute> findAll();\n-\n-    CamelRoute save(CamelRoute route);\n-\n-    void delete(String key);\n-}"},{"sha":"bca885c579e46a4e0a08414cb527075028789f27","filename":"ext/camel/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/CamelEntityFactory.java","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FCamelEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FCamelEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FCamelEntityFactory.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,25 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity;\n-\n-@FunctionalInterface\n-public interface CamelEntityFactory {\n-\n-    CamelRoute newCamelRoute();\n-}"},{"sha":"8e6676e96f3b9bdddf9ba2c2d6ba4f2deac28423","filename":"ext/camel/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/CamelRoute.java","status":"removed","additions":0,"deletions":33,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FCamelRoute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FCamelRoute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FCamelRoute.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,33 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity;\n-\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-\n-public interface CamelRoute extends ProvidedKeyEntity {\n-\n-    AnyTypeKind getAnyTypeKind();\n-\n-    void setAnyTypeKind(AnyTypeKind anyTypeKind);\n-\n-    String getContent();\n-\n-    void setContent(String routeContent);\n-\n-}"},{"sha":"33a1efc0976371a3d7defeabd41760d3ac9843a1","filename":"ext/camel/persistence-jpa/pom.xml","status":"removed","additions":0,"deletions":134,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fpersistence-jpa%2Fpom.xml?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,134 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <parent>\n-    <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-camel</artifactId>\n-    <version>3.0.0-SNAPSHOT</version>\n-  </parent>\n-\n-  <name>Apache Syncope Ext: Camel Persistence JPA</name>\n-  <description>Apache Syncope Ext: Camel Persistence JPA</description>\n-  <groupId>org.apache.syncope.ext.camel</groupId>\n-  <artifactId>syncope-ext-camel-persistence-jpa</artifactId>\n-  <packaging>jar</packaging>\n-  \n-  <properties>\n-    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n-  </properties>\n-\n-  <dependencies>    \n-    <dependency>\n-      <groupId>org.apache.syncope.core</groupId>\n-      <artifactId>syncope-core-persistence-jpa</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.ext.camel</groupId>\n-      <artifactId>syncope-ext-camel-persistence-api</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-  </dependencies>\n-\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa-maven-plugin</artifactId>\n-        <inherited>true</inherited>\n-        <dependencies>\n-          <dependency>\n-            <groupId>com.h2database</groupId>\n-            <artifactId>h2</artifactId>\n-            <version>${h2.version}</version>\n-          </dependency>\n-        </dependencies>\n-        <configuration>\n-          <persistenceXmlFile>${rootpom.basedir}/core/persistence-jpa/src/main/resources/persistence-enhance.xml</persistenceXmlFile> \n-          <includes>org/apache/syncope/core/persistence/jpa/entity/**/*.class</includes>\n-          <connectionDriverName>org.springframework.jdbc.datasource.DriverManagerDataSource</connectionDriverName>\n-          <connectionProperties>\n-            driverClassName=org.h2.Driver,\n-            url=jdbc:h2:mem:syncopedb\n-            username=sa,\n-            password=\n-          </connectionProperties>\n-        </configuration>\n-        <executions>\n-          <execution>\n-            <id>enhancer</id>\n-            <phase>process-classes</phase>\n-            <goals>\n-              <goal>enhance</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n-      </plugin>\n-      \n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-checkstyle-plugin</artifactId>\n-      </plugin>\n-    </plugins>\n-\n-    <testResources>\n-      <testResource>\n-        <directory>${rootpom.basedir}/core/persistence-jpa/src/main/resources</directory>\n-        <filtering>true</filtering>        \n-      </testResource>\n-    </testResources>\n-  </build>\n-\n-  <profiles>\n-    <profile>\n-      <id>sqlgen</id>\n-      \n-      <properties>\n-        <skipTests>true</skipTests>\n-      </properties>\n-      \n-      <build>\n-        <defaultGoal>clean verify</defaultGoal>\n-        \n-        <plugins>\n-          <plugin>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-maven-plugin</artifactId>\n-            <inherited>true</inherited>\n-            <executions>\n-              <execution>\n-                <id>sqlgen</id>\n-                <phase>process-classes</phase>\n-                <goals>\n-                  <goal>sql</goal>\n-                </goals>\n-              </execution>\n-            </executions>\n-          </plugin>          \n-        </plugins>\n-      </build>\n-        \n-    </profile>\n-  </profiles>\n-\n-</project>"},{"sha":"900f759fdad83c5d5c7d5937fe66afd59c0f24cf","filename":"ext/camel/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/CamelPersistenceContext.java","status":"removed","additions":0,"deletions":43,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FCamelPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FCamelPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FCamelPersistenceContext.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,43 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa;\n-\n-import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;\n-import org.apache.syncope.core.persistence.api.entity.CamelEntityFactory;\n-import org.apache.syncope.core.persistence.jpa.dao.JPACamelRouteDAO;\n-import org.apache.syncope.core.persistence.jpa.entity.JPACamelEntityFactory;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-\n-@Configuration(proxyBeanMethods = false)\n-public class CamelPersistenceContext {\n-\n-    @ConditionalOnMissingBean\n-    @Bean\n-    public CamelEntityFactory camelEntityFactory() {\n-        return new JPACamelEntityFactory();\n-    }\n-\n-    @ConditionalOnMissingBean\n-    @Bean\n-    public CamelRouteDAO camelRouteDAO() {\n-        return new JPACamelRouteDAO();\n-    }\n-}"},{"sha":"0196fd472d42862af5c6545f77e5be1d2b138331","filename":"ext/camel/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPACamelRouteDAO.java","status":"removed","additions":0,"deletions":68,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPACamelRouteDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPACamelRouteDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPACamelRouteDAO.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,68 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.dao;\n-\n-import java.util.List;\n-import javax.persistence.TypedQuery;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;\n-import org.apache.syncope.core.persistence.api.entity.CamelRoute;\n-import org.apache.syncope.core.persistence.jpa.entity.JPACamelRoute;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-public class JPACamelRouteDAO extends AbstractDAO<CamelRoute> implements CamelRouteDAO {\n-\n-    @Override\n-    public CamelRoute find(final String key) {\n-        return entityManager().find(JPACamelRoute.class, key);\n-    }\n-\n-    @Transactional(readOnly = true)\n-    @Override\n-    public List<CamelRoute> find(final AnyTypeKind anyTypeKind) {\n-        TypedQuery<CamelRoute> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPACamelRoute.class.getSimpleName()\n-                + \" e WHERE e.anyTypeKind = :anyTypeKind\", CamelRoute.class);\n-        query.setParameter(\"anyTypeKind\", anyTypeKind);\n-\n-        return query.getResultList();\n-    }\n-\n-    @Transactional(readOnly = true)\n-    @Override\n-    public List<CamelRoute> findAll() {\n-        TypedQuery<CamelRoute> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPACamelRoute.class.getSimpleName() + \" e \", CamelRoute.class);\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    public CamelRoute save(final CamelRoute route) {\n-        return entityManager().merge(route);\n-    }\n-\n-    @Override\n-    public void delete(final String key) {\n-        CamelRoute route = find(key);\n-        if (route != null) {\n-            entityManager().remove(route);\n-        }\n-    }\n-\n-}"},{"sha":"f152a4dc1d490f769d48e00f1282fcf5ff9e5b64","filename":"ext/camel/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPACamelEntityFactory.java","status":"removed","additions":0,"deletions":30,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPACamelEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPACamelEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPACamelEntityFactory.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,30 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import org.apache.syncope.core.persistence.api.entity.CamelEntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.CamelRoute;\n-\n-public class JPACamelEntityFactory implements CamelEntityFactory {\n-\n-    @Override\n-    public CamelRoute newCamelRoute() {\n-        return new JPACamelRoute();\n-    }\n-}"},{"sha":"9dcf3f8d33d9fc0602548b3a119298b0e21a2db9","filename":"ext/camel/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPACamelRoute.java","status":"removed","additions":0,"deletions":65,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPACamelRoute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPACamelRoute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPACamelRoute.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,65 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.EnumType;\n-import javax.persistence.Enumerated;\n-import javax.persistence.Lob;\n-import javax.persistence.Table;\n-import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.entity.CamelRoute;\n-\n-@Entity\n-@Table(name = JPACamelRoute.TABLE)\n-public class JPACamelRoute extends AbstractProvidedKeyEntity implements CamelRoute {\n-\n-    private static final long serialVersionUID = -2767606675667839161L;\n-\n-    public static final String TABLE = \"CamelRoute\";\n-\n-    @NotNull\n-    @Enumerated(EnumType.STRING)\n-    private AnyTypeKind anyTypeKind;\n-\n-    @Lob\n-    private String content;\n-\n-    @Override\n-    public AnyTypeKind getAnyTypeKind() {\n-        return anyTypeKind;\n-    }\n-\n-    @Override\n-    public void setAnyTypeKind(final AnyTypeKind anyTypeKind) {\n-        this.anyTypeKind = anyTypeKind;\n-    }\n-\n-    @Override\n-    public String getContent() {\n-        return content;\n-    }\n-\n-    @Override\n-    public void setContent(final String content) {\n-        this.content = content;\n-    }\n-\n-}"},{"sha":"f12a24b2eaf54473e1446f7400589b667cf30fbe","filename":"ext/camel/persistence-jpa/src/main/resources/META-INF/spring.factories","status":"removed","additions":0,"deletions":19,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,19 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-\n-org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n-  org.apache.syncope.core.persistence.jpa.CamelPersistenceContext"},{"sha":"13f82614bc9437fbd2f391555cb51b12e70b237b","filename":"ext/camel/pom.xml","status":"removed","additions":0,"deletions":52,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fpom.xml?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,52 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <parent>\n-    <groupId>org.apache.syncope</groupId>\n-    <artifactId>syncope-ext</artifactId>\n-    <version>3.0.0-SNAPSHOT</version>\n-  </parent>\n-\n-  <name>Apache Syncope Ext: Camel</name>\n-  <description>Apache Syncope Ext: Camel</description>\n-  <groupId>org.apache.syncope.ext</groupId>\n-  <artifactId>syncope-ext-camel</artifactId>\n-  <packaging>pom</packaging>\n-  \n-  <properties>\n-    <rootpom.basedir>${basedir}/../..</rootpom.basedir>\n-  </properties>\n-  \n-  <modules>\n-    <module>persistence-api</module>\n-    <module>persistence-jpa</module>\n-    <module>common-lib</module>\n-    <module>provisioning-api</module>\n-    <module>provisioning-camel</module>\n-    <module>logic</module>\n-    <module>rest-api</module>\n-    <module>rest-cxf</module>\n-    <module>client-console</module>\n-  </modules>\n-\n-</project>"},{"sha":"dc32b076f2267bb326ecc943bbc3020cdde9f498","filename":"ext/camel/provisioning-api/pom.xml","status":"removed","additions":0,"deletions":67,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-api%2Fpom.xml?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,67 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <parent>\n-    <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-camel</artifactId>\n-    <version>3.0.0-SNAPSHOT</version>\n-  </parent>\n-\n-  <name>Apache Syncope Ext: Camel Provisioning API</name>\n-  <description>Apache Syncope Ext: Camel Provisioning API</description>\n-  <groupId>org.apache.syncope.ext.camel</groupId>\n-  <artifactId>syncope-ext-camel-provisioning-api</artifactId>\n-  <packaging>jar</packaging>\n-  \n-  <properties>\n-    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n-  </properties>\n-\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.apache.syncope.core</groupId>\n-      <artifactId>syncope-core-provisioning-api</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.ext.camel</groupId>\n-      <artifactId>syncope-ext-camel-persistence-api</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.ext.camel</groupId>\n-      <artifactId>syncope-ext-camel-common-lib</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-\n-  </dependencies>\n-\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-checkstyle-plugin</artifactId>\n-      </plugin>\n-    </plugins>\n-  </build>\n-</project>"},{"sha":"f355b2bf63c1e720e568327796caa489a680f66b","filename":"ext/camel/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/CamelRouteDataBinder.java","status":"removed","additions":0,"deletions":29,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FCamelRouteDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FCamelRouteDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FCamelRouteDataBinder.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,29 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.api.data;\n-\n-import org.apache.syncope.common.lib.to.CamelRouteTO;\n-import org.apache.syncope.core.persistence.api.entity.CamelRoute;\n-\n-public interface CamelRouteDataBinder {\n-\n-    CamelRouteTO getRouteTO(CamelRoute route);\n-\n-    void update(CamelRoute route, CamelRouteTO routeTO);\n-}"},{"sha":"600874b6fbf83fce620418bd4b0603bc82731e29","filename":"ext/camel/provisioning-camel/pom.xml","status":"removed","additions":0,"deletions":78,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fpom.xml?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,78 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <parent>\n-    <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-camel</artifactId>\n-    <version>3.0.0-SNAPSHOT</version>\n-  </parent>\n-\n-  <name>Apache Syncope Ext: Camel Provisioning</name>\n-  <description>Apache Syncope Ext: Camel Provisioning</description>\n-  <groupId>org.apache.syncope.ext.camel</groupId>\n-  <artifactId>syncope-ext-camel-provisioning</artifactId>\n-  <packaging>jar</packaging>\n-  \n-  <properties>\n-    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n-  </properties>\n-\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.apache.camel.springboot</groupId>\n-      <artifactId>camel-spring-boot-starter</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.camel</groupId>\n-      <artifactId>camel-groovy</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.camel</groupId>\n-      <artifactId>camel-metrics</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.camel</groupId>\n-      <artifactId>spi-annotations</artifactId>\n-    </dependency>\n-\n-    <dependency>\n-      <groupId>org.apache.syncope.core</groupId>\n-      <artifactId>syncope-core-provisioning-java</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.ext.camel</groupId>\n-      <artifactId>syncope-ext-camel-provisioning-api</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-  </dependencies>\n-\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-checkstyle-plugin</artifactId>\n-      </plugin>\n-    </plugins>\n-  </build>\n-</project>"},{"sha":"85cf0f6c98005cef93b74711d587abec1449ada3","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/AbstractCamelProvisioningManager.java","status":"removed","additions":0,"deletions":100,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FAbstractCamelProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FAbstractCamelProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FAbstractCamelProvisioningManager.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,100 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel;\n-\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-import org.apache.camel.Endpoint;\n-import org.apache.camel.Exchange;\n-import org.apache.camel.PollingConsumer;\n-import org.apache.camel.ProducerTemplate;\n-import org.apache.camel.model.RoutesDefinition;\n-import org.apache.camel.support.DefaultExchange;\n-import org.apache.camel.support.DefaultMessage;\n-import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-abstract class AbstractCamelProvisioningManager {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(AbstractCamelProvisioningManager.class);\n-\n-    protected final CamelRouteDAO routeDAO;\n-\n-    protected final SyncopeCamelContext contextFactory;\n-\n-    protected RoutesDefinition routes;\n-\n-    protected final Map<String, PollingConsumer> consumerMap = new HashMap<>();\n-\n-    protected final List<String> knownURIs = new ArrayList<>();\n-\n-    protected AbstractCamelProvisioningManager(final CamelRouteDAO routeDAO, final SyncopeCamelContext contextFactory) {\n-        this.routeDAO = routeDAO;\n-        this.contextFactory = contextFactory;\n-    }\n-\n-    protected void sendMessage(final String uri, final Object obj) {\n-        Exchange exchange = new DefaultExchange(contextFactory.getCamelContext());\n-\n-        DefaultMessage message = new DefaultMessage(contextFactory.getCamelContext());\n-        message.setBody(obj);\n-        exchange.setIn(message);\n-\n-        ProducerTemplate template = contextFactory.getCamelContext().createProducerTemplate();\n-        template.send(uri, exchange);\n-    }\n-\n-    protected void sendMessage(final String uri, final Object body, final Map<String, Object> properties) {\n-        DefaultExchange exchange = new DefaultExchange(contextFactory.getCamelContext());\n-        // exclude properties with null value, otherwise DefaultExchange#properties, being a ConcurrentHashMap,\n-        // will raise NPE; no problems for later usage, as Map#get will return null for missing keys anyway\n-        exchange.setProperties(properties.keySet().stream().\n-                filter(key -> properties.get(key) != null).\n-                collect(Collectors.toMap(Function.identity(), properties::get)));\n-\n-        DefaultMessage message = new DefaultMessage(contextFactory.getCamelContext());\n-        message.setBody(body);\n-        exchange.setIn(message);\n-        ProducerTemplate template = contextFactory.getCamelContext().createProducerTemplate();\n-        template.send(uri, exchange);\n-    }\n-\n-    protected PollingConsumer getConsumer(final String uri) {\n-        if (!knownURIs.contains(uri)) {\n-            knownURIs.add(uri);\n-            Endpoint endpoint = contextFactory.getCamelContext().getEndpoint(uri);\n-            PollingConsumer pollingConsumer = null;\n-            try {\n-                pollingConsumer = endpoint.createPollingConsumer();\n-                consumerMap.put(uri, pollingConsumer);\n-                pollingConsumer.start();\n-            } catch (Exception ex) {\n-                LOG.error(\"Unexpected error in Consumer creation \", ex);\n-            }\n-            return pollingConsumer;\n-        } else {\n-            return consumerMap.get(uri);\n-        }\n-    }\n-}"},{"sha":"f72c8cc301f1688a3e78b24152700f36a60ccddc","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelAnyObjectProvisioningManager.java","status":"removed","additions":0,"deletions":248,"changes":248,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,248 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel;\n-\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import org.apache.camel.Exchange;\n-import org.apache.camel.PollingConsumer;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.request.AnyObjectCR;\n-import org.apache.syncope.common.lib.request.AnyObjectUR;\n-import org.apache.syncope.common.lib.to.PropagationStatus;\n-import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;\n-import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n-import org.springframework.transaction.annotation.Propagation;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-public class CamelAnyObjectProvisioningManager\n-        extends AbstractCamelProvisioningManager implements AnyObjectProvisioningManager {\n-\n-    public CamelAnyObjectProvisioningManager(final CamelRouteDAO routeDAO, final SyncopeCamelContext contextFactory) {\n-        super(routeDAO, contextFactory);\n-    }\n-\n-    @Override\n-    public Pair<String, List<PropagationStatus>> create(\n-            final AnyObjectCR req, final boolean nullPriorityAsync, final String creator, final String context) {\n-\n-        return create(req, Set.of(), nullPriorityAsync, creator, context);\n-    }\n-\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public Pair<String, List<PropagationStatus>> create(\n-            final AnyObjectCR req,\n-            final Set<String> excludedResources,\n-            final boolean nullPriorityAsync,\n-            final String creator,\n-            final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:createAnyObjectPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"excludedResources\", excludedResources);\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"creator\", creator);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:createAnyObject\", req, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(Pair.class);\n-    }\n-\n-    @Override\n-    public Pair<AnyObjectUR, List<PropagationStatus>> update(\n-            final AnyObjectUR anyUR, final boolean nullPriorityAsync, final String updater, final String context) {\n-\n-        return update(anyUR, Set.of(), nullPriorityAsync, updater, context);\n-    }\n-\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public Pair<AnyObjectUR, List<PropagationStatus>> update(\n-            final AnyObjectUR anyUR,\n-            final Set<String> excludedResources,\n-            final boolean nullPriorityAsync,\n-            final String updater,\n-            final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:updateAnyObjectPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"excludedResources\", excludedResources);\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:updateAnyObject\", anyUR, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(Pair.class);\n-    }\n-\n-    @Override\n-    public List<PropagationStatus> delete(\n-            final String anyObjectObjectKey,\n-            final boolean nullPriorityAsync,\n-            final String eraser,\n-            final String context) {\n-\n-        return delete(anyObjectObjectKey, Set.of(), nullPriorityAsync, eraser, context);\n-    }\n-\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public List<PropagationStatus> delete(\n-            final String key,\n-            final Set<String> excludedResources,\n-            final boolean nullPriorityAsync,\n-            final String eraser,\n-            final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:deleteAnyObjectPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"excludedResources\", excludedResources);\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"eraser\", eraser);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:deleteAnyObject\", key, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(List.class);\n-    }\n-\n-    @Override\n-    public String unlink(final AnyObjectUR anyObjectUR, final String updater, final String context) {\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:unlinkAnyObjectPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:unlinkAnyObject\", anyObjectUR, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(AnyObjectUR.class).getKey();\n-    }\n-\n-    @Override\n-    public String link(final AnyObjectUR anyObjectUR, final String updater, final String context) {\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:linkAnyObjectPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:linkAnyObject\", anyObjectUR, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(AnyObjectUR.class).getKey();\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public List<PropagationStatus> provision(\n-            final String key,\n-            final Collection<String> resources,\n-            final boolean nullPriorityAsync,\n-            final String updater,\n-            final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:provisionAnyObjectPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"resources\", resources);\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:provisionAnyObject\", key, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(List.class);\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public List<PropagationStatus> deprovision(\n-            final String key,\n-            final Collection<String> resources,\n-            final boolean nullPriorityAsync,\n-            final String updater,\n-            final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:deprovisionAnyObjectPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"resources\", resources);\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:deprovisionAnyObject\", key, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(List.class);\n-    }\n-}"},{"sha":"4df313727a21b26abaa5aa9ae4acd341a2abdc0a","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelException.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelException.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,32 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel;\n-\n-/**\n- * Wraps checked exceptions thrown by Apache Camel.\n- */\n-public class CamelException extends RuntimeException {\n-\n-    private static final long serialVersionUID = 517692473216575144L;\n-\n-    public CamelException(final Throwable cause) {\n-        super(cause);\n-    }\n-\n-}"},{"sha":"4aa4bb517ae439bc9efcad325772db9a8163f5b5","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelGroupProvisioningManager.java","status":"removed","additions":0,"deletions":264,"changes":264,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,264 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel;\n-\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import org.apache.camel.Exchange;\n-import org.apache.camel.PollingConsumer;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.request.GroupCR;\n-import org.apache.syncope.common.lib.request.GroupUR;\n-import org.apache.syncope.common.lib.to.PropagationStatus;\n-import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;\n-import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n-import org.springframework.transaction.annotation.Propagation;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-public class CamelGroupProvisioningManager\n-        extends AbstractCamelProvisioningManager implements GroupProvisioningManager {\n-\n-    public CamelGroupProvisioningManager(final CamelRouteDAO routeDAO, final SyncopeCamelContext contextFactory) {\n-        super(routeDAO, contextFactory);\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public Pair<String, List<PropagationStatus>> create(\n-            final GroupCR req, final boolean nullPriorityAsync, final String creator, final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:createGroupPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"excludedResources\", Set.of());\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"creator\", creator);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:createGroup\", req, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(Pair.class);\n-    }\n-\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public Pair<String, List<PropagationStatus>> create(\n-            final GroupCR req,\n-            final Map<String, String> groupOwnerMap,\n-            final Set<String> excludedResources,\n-            final boolean nullPriorityAsync,\n-            final String creator,\n-            final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:createGroupInPullPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"groupOwnerMap\", groupOwnerMap);\n-        props.put(\"excludedResources\", excludedResources);\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"creator\", creator);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:createGroupInPull\", req, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(Pair.class);\n-    }\n-\n-    @Override\n-    public Pair<GroupUR, List<PropagationStatus>> update(\n-            final GroupUR groupUR, final boolean nullPriorityAsync, final String updater, final String context) {\n-\n-        return update(groupUR, Set.of(), nullPriorityAsync, updater, context);\n-    }\n-\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public Pair<GroupUR, List<PropagationStatus>> update(\n-            final GroupUR groupUR,\n-            final Set<String> excludedResources,\n-            final boolean nullPriorityAsync,\n-            final String updater,\n-            final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:updateGroupPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"excludedResources\", excludedResources);\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:updateGroup\", groupUR, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(Pair.class);\n-    }\n-\n-    @Override\n-    public List<PropagationStatus> delete(\n-            final String key, final boolean nullPriorityAsync, final String eraser, final String context) {\n-\n-        return delete(key, Set.of(), nullPriorityAsync, eraser, context);\n-    }\n-\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public List<PropagationStatus> delete(\n-            final String key,\n-            final Set<String> excludedResources,\n-            final boolean nullPriorityAsync,\n-            final String eraser,\n-            final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:deleteGroupPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"excludedResources\", excludedResources);\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"eraser\", eraser);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:deleteGroup\", key, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(List.class);\n-    }\n-\n-    @Override\n-    public String unlink(final GroupUR groupUR, final String updater, final String context) {\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:unlinkGroupPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:unlinkGroup\", groupUR, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(GroupUR.class).getKey();\n-    }\n-\n-    @Override\n-    public String link(final GroupUR groupUR, final String updater, final String context) {\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:linkGroupPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:linkGroup\", groupUR, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(GroupUR.class).getKey();\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public List<PropagationStatus> provision(\n-            final String key,\n-            final Collection<String> resources,\n-            final boolean nullPriorityAsync,\n-            final String updater,\n-            final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:provisionGroupPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"resources\", resources);\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:provisionGroup\", key, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(List.class);\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public List<PropagationStatus> deprovision(\n-            final String key,\n-            final Collection<String> resources,\n-            final boolean nullPriorityAsync,\n-            final String updater,\n-            final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:deprovisionGroupPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"resources\", resources);\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:deprovisionGroup\", key, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(List.class);\n-    }\n-}"},{"sha":"35b3233ad89251ce6348af25042bdcc13da29b87","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelProvisioningContext.java","status":"removed","additions":0,"deletions":86,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelProvisioningContext.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,86 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel;\n-\n-import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;\n-import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.data.CamelRouteDataBinder;\n-import org.apache.syncope.core.provisioning.camel.data.CamelRouteDataBinderImpl;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.io.ClassPathResource;\n-import org.springframework.core.io.Resource;\n-\n-@Configuration(proxyBeanMethods = false)\n-public class CamelProvisioningContext {\n-\n-    @Bean\n-    public Resource userRoutes() {\n-        return new ClassPathResource(\"userRoutes.xml\");\n-    }\n-\n-    @Bean\n-    public Resource groupRoutes() {\n-        return new ClassPathResource(\"groupRoutes.xml\");\n-    }\n-\n-    @Bean\n-    public Resource anyObjectRoutes() {\n-        return new ClassPathResource(\"anyObjectRoutes.xml\");\n-    }\n-\n-    @ConditionalOnMissingBean\n-    @Bean\n-    public SyncopeCamelContext syncopeCamelContext(final CamelRouteDAO routeDAO) {\n-        return new SyncopeCamelContext(routeDAO);\n-    }\n-\n-    @Bean\n-    public UserProvisioningManager userProvisioningManager(\n-            final CamelRouteDAO routeDAO,\n-            final SyncopeCamelContext contextFactory) {\n-\n-        return new CamelUserProvisioningManager(routeDAO, contextFactory);\n-    }\n-\n-    @Bean\n-    public GroupProvisioningManager groupProvisioningManager(\n-            final CamelRouteDAO routeDAO,\n-            final SyncopeCamelContext contextFactory) {\n-\n-        return new CamelGroupProvisioningManager(routeDAO, contextFactory);\n-    }\n-\n-    @Bean\n-    public AnyObjectProvisioningManager anyObjectProvisioningManager(\n-            final CamelRouteDAO routeDAO,\n-            final SyncopeCamelContext contextFactory) {\n-\n-        return new CamelAnyObjectProvisioningManager(routeDAO, contextFactory);\n-    }\n-\n-    @ConditionalOnMissingBean\n-    @Bean\n-    public CamelRouteDataBinder camelRouteDataBinder(final CamelRouteDAO routeDAO) {\n-        return new CamelRouteDataBinderImpl(routeDAO);\n-    }\n-}"},{"sha":"a1555b601a8ccc06bf3602bde7bed8c48f039b68","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelUserProvisioningManager.java","status":"removed","additions":0,"deletions":457,"changes":457,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,457 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel;\n-\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import org.apache.camel.Exchange;\n-import org.apache.camel.PollingConsumer;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.request.StatusR;\n-import org.apache.syncope.common.lib.request.UserCR;\n-import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.to.PropagationStatus;\n-import org.apache.syncope.common.lib.to.ProvisioningReport;\n-import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;\n-import org.apache.syncope.core.provisioning.api.PropagationByResource;\n-import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.transaction.annotation.Propagation;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-public class CamelUserProvisioningManager extends AbstractCamelProvisioningManager implements UserProvisioningManager {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(CamelUserProvisioningManager.class);\n-\n-    public CamelUserProvisioningManager(final CamelRouteDAO routeDAO, final SyncopeCamelContext contextFactory) {\n-        super(routeDAO, contextFactory);\n-    }\n-\n-    @Override\n-    public Pair<String, List<PropagationStatus>> create(\n-            final UserCR req, final boolean nullPriorityAsync, final String creator, final String context) {\n-\n-        return create(req, false, null, Set.of(), nullPriorityAsync, creator, context);\n-    }\n-\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public Pair<String, List<PropagationStatus>> create(\n-            final UserCR req,\n-            final boolean disablePwdPolicyCheck,\n-            final Boolean enabled,\n-            final Set<String> excludedResources,\n-            final boolean nullPriorityAsync,\n-            final String creator,\n-            final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:createPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"disablePwdPolicyCheck\", disablePwdPolicyCheck);\n-        props.put(\"enabled\", enabled);\n-        props.put(\"excludedResources\", excludedResources);\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"creator\", creator);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:createUser\", req, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(Pair.class);\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public Pair<UserUR, List<PropagationStatus>> update(\n-            final UserUR userUR, final boolean nullPriorityAsync, final String updater, final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:updatePort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:updateUser\", userUR, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(Pair.class);\n-    }\n-\n-    @Override\n-    public Pair<UserUR, List<PropagationStatus>> update(\n-            final UserUR userUR,\n-            final Set<String> excludedResources,\n-            final boolean nullPriorityAsync,\n-            final String updater,\n-            final String context) {\n-\n-        return update(userUR, new ProvisioningReport(), null, excludedResources, nullPriorityAsync, updater, context);\n-    }\n-\n-    @Override\n-    public List<PropagationStatus> delete(\n-            final String key, final boolean nullPriorityAsync, final String eraser, final String context) {\n-\n-        return delete(key, Set.of(), nullPriorityAsync, eraser, context);\n-    }\n-\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public List<PropagationStatus> delete(\n-            final String key,\n-            final Set<String> excludedResources,\n-            final boolean nullPriorityAsync,\n-            final String eraser,\n-            final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:deletePort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"excludedResources\", excludedResources);\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"eraser\", eraser);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:deleteUser\", key, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(List.class);\n-    }\n-\n-    @Override\n-    public String unlink(final UserUR userUR, final String updater, final String context) {\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:unlinkPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:unlinkUser\", userUR, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(UserUR.class).getKey();\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public Pair<String, List<PropagationStatus>> activate(\n-            final StatusR statusR, final boolean nullPriorityAsync, final String updater, final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"token\", statusR.getToken());\n-        props.put(\"key\", statusR.getKey());\n-        props.put(\"statusR\", statusR);\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        if (statusR.isOnSyncope()) {\n-            sendMessage(\"direct:activateUser\", statusR.getKey(), props);\n-        } else {\n-            UserWorkflowResult<String> updated =\n-                    new UserWorkflowResult<>(statusR.getKey(), null, null, statusR.getType().name().toLowerCase());\n-            sendMessage(\"direct:userStatusPropagation\", updated, props);\n-        }\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(Pair.class);\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public Pair<String, List<PropagationStatus>> reactivate(\n-            final StatusR statusR, final boolean nullPriorityAsync, final String updater, final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"key\", statusR.getKey());\n-        props.put(\"statusR\", statusR);\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        if (statusR.isOnSyncope()) {\n-            sendMessage(\"direct:reactivateUser\", statusR.getKey(), props);\n-        } else {\n-            UserWorkflowResult<String> updated =\n-                    new UserWorkflowResult<>(statusR.getKey(), null, null, statusR.getType().name().toLowerCase());\n-            sendMessage(\"direct:userStatusPropagation\", updated, props);\n-        }\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(Pair.class);\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public Pair<String, List<PropagationStatus>> suspend(\n-            final StatusR statusR, final boolean nullPriorityAsync, final String updater, final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"key\", statusR.getKey());\n-        props.put(\"statusR\", statusR);\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        if (statusR.isOnSyncope()) {\n-            sendMessage(\"direct:suspendUser\", statusR.getKey(), props);\n-        } else {\n-            UserWorkflowResult<String> updated =\n-                    new UserWorkflowResult<>(statusR.getKey(), null, null, statusR.getType().name().toLowerCase());\n-            sendMessage(\"direct:userStatusPropagation\", updated, props);\n-        }\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(Pair.class);\n-    }\n-\n-    @Override\n-    public String link(final UserUR userUR, final String updater, final String context) {\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:linkPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:linkUser\", userUR, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(UserUR.class).getKey();\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public List<PropagationStatus> provision(\n-            final String key,\n-            final boolean changePwd,\n-            final String password,\n-            final Collection<String> resources,\n-            final boolean nullPriorityAsync,\n-            final String updater,\n-            final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:provisionPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"key\", key);\n-        props.put(\"changePwd\", changePwd);\n-        props.put(\"password\", password);\n-        props.put(\"resources\", resources);\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:provisionUser\", key, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(List.class);\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public List<PropagationStatus> deprovision(\n-            final String user,\n-            final Collection<String> resources,\n-            final boolean nullPriorityAsync,\n-            final String updater,\n-            final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:deprovisionPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"resources\", resources);\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:deprovisionUser\", user, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-\n-        return exchange.getIn().getBody(List.class);\n-    }\n-\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public Pair<UserUR, List<PropagationStatus>> update(\n-            final UserUR userUR,\n-            final ProvisioningReport result,\n-            final Boolean enabled,\n-            final Set<String> excludedResources,\n-            final boolean nullPriorityAsync,\n-            final String updater,\n-            final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:updateInPullPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"key\", userUR.getKey());\n-        props.put(\"result\", result);\n-        props.put(\"enabled\", enabled);\n-        props.put(\"excludedResources\", excludedResources);\n-        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:updateUserInPull\", userUR, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        Exception ex = (Exception) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        if (ex != null) {\n-            LOG.error(\"Update of user {} failed, trying to pull its status anyway (if configured)\",\n-                    userUR.getKey(), ex);\n-\n-            result.setStatus(ProvisioningReport.Status.FAILURE);\n-            result.setMessage(\"Update failed, trying to pull status anyway (if configured)\\n\" + ex.getMessage());\n-\n-            UserWorkflowResult<Pair<UserUR, Boolean>> updated = new UserWorkflowResult<>(\n-                    Pair.of(userUR, false),\n-                    new PropagationByResource<>(),\n-                    new PropagationByResource<>(),\n-                    new HashSet<>());\n-            sendMessage(\"direct:userInPull\", updated, props);\n-            exchange = pollingConsumer.receive();\n-        }\n-\n-        return exchange.getIn().getBody(Pair.class);\n-    }\n-\n-    @Override\n-    public void internalSuspend(final String key, final String updater, final String context) {\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:internalSuspendUserPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:internalSuspendUser\", key, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-    }\n-\n-    @Override\n-    public void requestPasswordReset(final String key, final String updater, final String context) {\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:requestPwdResetPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:requestPwdReset\", key, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-    }\n-\n-    @Override\n-    public void confirmPasswordReset(\n-            final String key, final String token, final String password, final String updater, final String context) {\n-\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:confirmPwdResetPort\");\n-\n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"key\", key);\n-        props.put(\"token\", token);\n-        props.put(\"password\", password);\n-        props.put(\"updater\", updater);\n-        props.put(\"context\", context);\n-\n-        sendMessage(\"direct:confirmPwdReset\", key, props);\n-\n-        Exchange exchange = pollingConsumer.receive();\n-\n-        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n-            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n-        }\n-    }\n-}"},{"sha":"02ae71c10c6eb7e417fccac8eb91a450a0be3dfc","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/SyncopeCamelContext.java","status":"removed","additions":0,"deletions":108,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,108 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel;\n-\n-import java.io.ByteArrayInputStream;\n-import java.nio.charset.StandardCharsets;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import org.apache.camel.component.metrics.routepolicy.MetricsRoutePolicyFactory;\n-import org.apache.camel.model.RoutesDefinition;\n-import org.apache.camel.spring.SpringCamelContext;\n-import org.apache.camel.xml.jaxb.JaxbHelper;\n-import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;\n-import org.apache.syncope.core.persistence.api.entity.CamelRoute;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.transaction.annotation.Propagation;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-public class SyncopeCamelContext {\n-\n-    protected static final Logger LOG = LoggerFactory.getLogger(SyncopeCamelContext.class);\n-\n-    protected final CamelRouteDAO routeDAO;\n-\n-    public SyncopeCamelContext(final CamelRouteDAO routeDAO) {\n-        this.routeDAO = routeDAO;\n-    }\n-\n-    protected SpringCamelContext camelContext;\n-\n-    public SpringCamelContext getCamelContext() {\n-        synchronized (this) {\n-            if (camelContext == null) {\n-                camelContext = ApplicationContextProvider.getBeanFactory().getBean(SpringCamelContext.class);\n-                camelContext.addRoutePolicyFactory(new MetricsRoutePolicyFactory());\n-            }\n-\n-            if (camelContext.getRoutes().isEmpty()) {\n-                List<CamelRoute> routes = routeDAO.findAll();\n-                LOG.debug(\"{} route(s) are going to be loaded \", routes.size());\n-\n-                loadRouteDefinitions(routes.stream().map(CamelRoute::getContent).collect(Collectors.toList()));\n-            }\n-        }\n-\n-        return camelContext;\n-    }\n-\n-    protected void loadRouteDefinitions(final List<String> routes) {\n-        try {\n-            RoutesDefinition routeDefs = JaxbHelper.loadRoutesDefinition(\n-                    camelContext,\n-                    new ByteArrayInputStream((\"<routes xmlns=\\\"http://camel.apache.org/schema/spring\\\">\"\n-                            + routes.stream().collect(Collectors.joining())\n-                            + \"</routes>\").getBytes(StandardCharsets.UTF_8)));\n-            camelContext.addRouteDefinitions(routeDefs.getRoutes());\n-        } catch (Exception e) {\n-            LOG.error(\"While adding route definitions into Camel Context {}\", camelContext, e);\n-            throw new CamelException(e);\n-        }\n-    }\n-\n-    @Transactional(propagation = Propagation.SUPPORTS)\n-    public void updateContext(final String routeKey) {\n-        if (!getCamelContext().getRouteDefinitions().isEmpty()) {\n-            getCamelContext().getRouteDefinitions().remove(getCamelContext().getRouteDefinition(routeKey));\n-            loadRouteDefinitions(List.of(routeDAO.find(routeKey).getContent()));\n-        }\n-    }\n-\n-    public void restoreRoute(final String routeKey, final String routeContent) {\n-        try {\n-            getCamelContext().getRouteDefinitions().remove(getCamelContext().getRouteDefinition(routeKey));\n-            loadRouteDefinitions(List.of(routeContent));\n-        } catch (Exception e) {\n-            LOG.error(\"While restoring Camel route {}\", routeKey, e);\n-            throw new CamelException(e);\n-        }\n-    }\n-\n-    public void restartContext() {\n-        try {\n-            getCamelContext().stop();\n-            getCamelContext().start();\n-        } catch (Exception e) {\n-            LOG.error(\"While restarting Camel context\", e);\n-            throw new CamelException(e);\n-        }\n-    }\n-}"},{"sha":"ce00b0f9fd2e8532f6ff7eae87e8aa5ad8d85bde","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/component/PropagateComponent.java","status":"removed","additions":0,"deletions":92,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,92 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.component;\n-\n-import java.util.Map;\n-import org.apache.camel.Endpoint;\n-import org.apache.camel.support.DefaultComponent;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.spring.security.SecurityProperties;\n-import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-public class PropagateComponent extends DefaultComponent {\n-\n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n-    @Autowired\n-    protected UserDAO userDAO;\n-\n-    @Autowired\n-    protected GroupDAO groupDAO;\n-\n-    @Autowired\n-    protected AnyObjectDAO anyObjectDAO;\n-\n-    @Autowired\n-    protected GroupDataBinder groupDataBinder;\n-\n-    @Autowired\n-    protected UserWorkflowAdapter uwfAdapter;\n-\n-    @Autowired\n-    protected SecurityProperties props;\n-\n-    @Override\n-    protected Endpoint createEndpoint(\n-            final String uri,\n-            final String remaining,\n-            final Map<String, Object> parameters) throws Exception {\n-\n-        PropagateType type = PropagateType.valueOf(remaining);\n-        PropagateEndpoint endpoint = new PropagateEndpoint(uri, this);\n-        endpoint.setPropagateType(type);\n-        endpoint.setPropagationManager(propagationManager);\n-        endpoint.setPropagationTaskExecutor(taskExecutor);\n-        endpoint.setUserDAO(userDAO);\n-        endpoint.setGroupDAO(groupDAO);\n-        endpoint.setAnyObjectDAO(anyObjectDAO);\n-        endpoint.setGroupDataBinder(groupDataBinder);\n-        endpoint.setUwfAdapter(uwfAdapter);\n-\n-        String executor = (String) parameters.get(\"creator\");\n-        if (executor == null) {\n-            executor = (String) parameters.get(\"updater\");\n-        }\n-        if (executor == null) {\n-            executor = (String) parameters.get(\"eraser\");\n-        }\n-        if (executor == null) {\n-            executor = props.getAdminUser();\n-        }\n-        endpoint.setExecutor(executor);\n-\n-        setProperties(endpoint, parameters);\n-        return endpoint;\n-    }\n-}"},{"sha":"469dd52557d30246871fd1f9b896f89376da2043","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/component/PropagateEndpoint.java","status":"removed","additions":0,"deletions":189,"changes":189,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateEndpoint.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateEndpoint.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateEndpoint.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,189 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.component;\n-\n-import org.apache.camel.Component;\n-import org.apache.camel.Consumer;\n-import org.apache.camel.Processor;\n-import org.apache.camel.Producer;\n-import org.apache.camel.spi.Metadata;\n-import org.apache.camel.spi.UriEndpoint;\n-import org.apache.camel.spi.UriParam;\n-import org.apache.camel.spi.UriPath;\n-import org.apache.camel.support.DefaultEndpoint;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.provisioning.camel.producer.AbstractProducer;\n-import org.apache.syncope.core.provisioning.camel.producer.ConfirmPasswordResetProducer;\n-import org.apache.syncope.core.provisioning.camel.producer.CreateProducer;\n-import org.apache.syncope.core.provisioning.camel.producer.DeleteProducer;\n-import org.apache.syncope.core.provisioning.camel.producer.DeprovisionProducer;\n-import org.apache.syncope.core.provisioning.camel.producer.ProvisionProducer;\n-import org.apache.syncope.core.provisioning.camel.producer.StatusProducer;\n-import org.apache.syncope.core.provisioning.camel.producer.SuspendProducer;\n-import org.apache.syncope.core.provisioning.camel.producer.UpdateProducer;\n-import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n-\n-@UriEndpoint(scheme = \"propagate\", title = \"propagate\", syntax = \"propagate:propagateType\", producerOnly = true)\n-public class PropagateEndpoint extends DefaultEndpoint {\n-\n-    @UriPath\n-    @Metadata(required = true)\n-    private PropagateType propagateType;\n-\n-    @UriParam\n-    private AnyTypeKind anyTypeKind;\n-\n-    @UriParam\n-    private boolean pull;\n-\n-    private PropagationManager propagationManager;\n-\n-    private PropagationTaskExecutor taskExecutor;\n-\n-    private UserDAO userDAO;\n-\n-    private GroupDAO groupDAO;\n-\n-    private AnyObjectDAO anyObjectDAO;\n-\n-    private GroupDataBinder groupDataBinder;\n-\n-    private UserWorkflowAdapter uwfAdapter;\n-\n-    private String executor;\n-    \n-    public PropagateEndpoint(final String endpointUri, final Component component) {\n-        super(endpointUri, component);\n-    }\n-\n-    @Override\n-    public Producer createProducer() throws Exception {\n-        AbstractProducer producer = null;\n-        if (null != propagateType) {\n-            switch (propagateType) {\n-                case create:\n-                    producer = new CreateProducer(this, anyTypeKind);\n-                    break;\n-                case update:\n-                    producer = new UpdateProducer(this, anyTypeKind);\n-                    break;\n-                case delete:\n-                    producer = new DeleteProducer(this, anyTypeKind, userDAO, groupDataBinder);\n-                    break;\n-                case provision:\n-                    producer = new ProvisionProducer(this, anyTypeKind, userDAO);\n-                    break;\n-                case deprovision:\n-                    producer = new DeprovisionProducer(this, anyTypeKind, userDAO, groupDAO, anyObjectDAO);\n-                    break;\n-                case status:\n-                    producer = new StatusProducer(this, anyTypeKind, userDAO, uwfAdapter);\n-                    break;\n-                case suspend:\n-                    producer = new SuspendProducer(this, anyTypeKind);\n-                    break;\n-                case confirmPasswordReset:\n-                    producer = new ConfirmPasswordResetProducer(this, anyTypeKind);\n-                    break;\n-                default:\n-                    break;\n-            }\n-        }\n-\n-        if (producer != null) {\n-            producer.setPropagationManager(propagationManager);\n-            producer.setPropagationTaskExecutor(taskExecutor);\n-            producer.setPull(pull);\n-            producer.setExecutor(this.executor);\n-        }\n-        return producer;\n-    }\n-\n-    @Override\n-    public Consumer createConsumer(final Processor processor) throws Exception {\n-        throw new UnsupportedOperationException(\"Consumer not supported\");\n-    }\n-\n-    @Override\n-    public boolean isSingleton() {\n-        return false;\n-    }\n-\n-    public PropagateType getPropagateType() {\n-        return propagateType;\n-    }\n-\n-    public void setPropagateType(final PropagateType propagateType) {\n-        this.propagateType = propagateType;\n-    }\n-\n-    public void setPropagationManager(final PropagationManager propagationManager) {\n-        this.propagationManager = propagationManager;\n-    }\n-\n-    public void setPropagationTaskExecutor(final PropagationTaskExecutor taskExecutor) {\n-        this.taskExecutor = taskExecutor;\n-    }\n-\n-    public AnyTypeKind getAnyTypeKind() {\n-        return anyTypeKind;\n-    }\n-\n-    public void setAnyTypeKind(final AnyTypeKind anyTypeKind) {\n-        this.anyTypeKind = anyTypeKind;\n-    }\n-\n-    public void setUserDAO(final UserDAO userDAO) {\n-        this.userDAO = userDAO;\n-    }\n-\n-    public void setGroupDAO(final GroupDAO groupDAO) {\n-        this.groupDAO = groupDAO;\n-    }\n-\n-    public void setAnyObjectDAO(final AnyObjectDAO anyObjectDAO) {\n-        this.anyObjectDAO = anyObjectDAO;\n-    }\n-\n-    public void setGroupDataBinder(final GroupDataBinder groupDataBinder) {\n-        this.groupDataBinder = groupDataBinder;\n-    }\n-\n-    public boolean isPull() {\n-        return pull;\n-    }\n-\n-    public void setPull(final boolean pull) {\n-        this.pull = pull;\n-    }\n-\n-    public void setUwfAdapter(final UserWorkflowAdapter uwfAdapter) {\n-        this.uwfAdapter = uwfAdapter;\n-    }\n-\n-    public void setExecutor(final String executor) {\n-        this.executor = executor;\n-    }\n-}"},{"sha":"5e2e8ef9a562566ad9956a8ee359bfe3158c9967","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/component/PropagateType.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateType.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,32 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.component;\n-\n-public enum PropagateType {\n-\n-    create,\n-    update,\n-    delete,\n-    provision,\n-    deprovision,\n-    status,\n-    suspend,\n-    confirmPasswordReset\n-\n-}"},{"sha":"b4eb84a25ff5fc42303443bec47df849600193ca","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/data/CamelRouteDataBinderImpl.java","status":"removed","additions":0,"deletions":49,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fdata%2FCamelRouteDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fdata%2FCamelRouteDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fdata%2FCamelRouteDataBinderImpl.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,49 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.data;\n-\n-import org.apache.syncope.common.lib.to.CamelRouteTO;\n-import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;\n-import org.apache.syncope.core.persistence.api.entity.CamelRoute;\n-import org.apache.syncope.core.provisioning.api.data.CamelRouteDataBinder;\n-\n-public class CamelRouteDataBinderImpl implements CamelRouteDataBinder {\n-\n-    protected final CamelRouteDAO routeDAO;\n-\n-    public CamelRouteDataBinderImpl(final CamelRouteDAO routeDAO) {\n-        this.routeDAO = routeDAO;\n-    }\n-\n-    @Override\n-    public CamelRouteTO getRouteTO(final CamelRoute route) {\n-        CamelRouteTO routeTO = new CamelRouteTO();\n-        routeTO.setKey(route.getKey());\n-        routeTO.setAnyTypeKind(route.getAnyTypeKind());\n-        routeTO.setContent(route.getContent());\n-\n-        return routeTO;\n-    }\n-\n-    @Override\n-    public void update(final CamelRoute route, final CamelRouteTO routeTO) {\n-        route.setContent(routeTO.getContent());\n-        routeDAO.save(route);\n-    }\n-}"},{"sha":"5a411a9070dc05964cb61f664a782e8e2ad7f5b6","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/AbstractProducer.java","status":"removed","additions":0,"deletions":79,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FAbstractProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FAbstractProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FAbstractProducer.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,79 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.producer;\n-\n-import org.apache.camel.Endpoint;\n-import org.apache.camel.support.DefaultProducer;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-\n-public abstract class AbstractProducer extends DefaultProducer {\n-\n-    private final AnyTypeKind anyTypeKind;\n-\n-    private PropagationManager propagationManager;\n-\n-    private PropagationTaskExecutor taskExecutor;\n-\n-    private boolean pull;\n-\n-    private String executor;\n-\n-    public AbstractProducer(final Endpoint endpoint, final AnyTypeKind anyTypeKind) {\n-        super(endpoint);\n-        this.anyTypeKind = anyTypeKind;\n-    }\n-\n-    public void setPropagationManager(final PropagationManager propagationManager) {\n-        this.propagationManager = propagationManager;\n-    }\n-\n-    public PropagationManager getPropagationManager() {\n-        return propagationManager;\n-    }\n-\n-    public void setPropagationTaskExecutor(final PropagationTaskExecutor taskExecutor) {\n-        this.taskExecutor = taskExecutor;\n-    }\n-\n-    public PropagationTaskExecutor getPropagationTaskExecutor() {\n-        return taskExecutor;\n-    }\n-\n-    public AnyTypeKind getAnyTypeKind() {\n-        return anyTypeKind;\n-    }\n-\n-    public boolean isPull() {\n-        return pull;\n-    }\n-\n-    public void setPull(final boolean pull) {\n-        this.pull = pull;\n-    }\n-\n-    public String getExecutor() {\n-        return executor;\n-    }\n-\n-    public void setExecutor(final String executor) {\n-        this.executor = executor;\n-    }\n-}"},{"sha":"0d4d080af9a145d91e48536b0a0f2cb8f89dd5b0","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ConfirmPasswordResetProducer.java","status":"removed","additions":0,"deletions":48,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,48 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.producer;\n-\n-import java.util.List;\n-import org.apache.camel.Endpoint;\n-import org.apache.camel.Exchange;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n-\n-public class ConfirmPasswordResetProducer extends AbstractProducer {\n-\n-    public ConfirmPasswordResetProducer(final Endpoint endpoint, final AnyTypeKind anyTypeKind) {\n-        super(endpoint, anyTypeKind);\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public void process(final Exchange exchange) throws Exception {\n-        if (getAnyTypeKind() == AnyTypeKind.USER) {\n-            UserWorkflowResult<Pair<UserUR, Boolean>> updated =\n-                    (UserWorkflowResult<Pair<UserUR, Boolean>>) exchange.getIn().getBody();\n-\n-            List<PropagationTaskInfo> taskInfos = getPropagationManager().getUserUpdateTasks(updated);\n-\n-            getPropagationTaskExecutor().execute(taskInfos, false, getExecutor());\n-        }\n-    }\n-}"},{"sha":"c1014987975e385936ae20a640e5e3b89808fb9e","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java","status":"removed","additions":0,"deletions":103,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,103 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.producer;\n-\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import org.apache.camel.Endpoint;\n-import org.apache.camel.Exchange;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.request.AnyCR;\n-import org.apache.syncope.common.lib.request.AnyObjectCR;\n-import org.apache.syncope.common.lib.request.GroupCR;\n-import org.apache.syncope.common.lib.request.UserCR;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n-\n-public class CreateProducer extends AbstractProducer {\n-\n-    public CreateProducer(final Endpoint endpoint, final AnyTypeKind anyTypeKind) {\n-        super(endpoint, anyTypeKind);\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public void process(final Exchange exchange) throws Exception {\n-        if ((exchange.getIn().getBody() instanceof WorkflowResult)) {\n-            Object actual = exchange.getProperty(\"actual\");\n-            Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n-            Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-\n-            if (actual instanceof UserCR) {\n-                UserWorkflowResult<Pair<String, Boolean>> created =\n-                        (UserWorkflowResult<Pair<String, Boolean>>) exchange.getIn().getBody();\n-\n-                List<PropagationTaskInfo> taskInfos = getPropagationManager().getUserCreateTasks(\n-                        created.getResult().getKey(),\n-                        ((UserCR) actual).getPassword(),\n-                        created.getResult().getValue(),\n-                        created.getPropByRes(),\n-                        created.getPropByLinkedAccount(),\n-                        ((UserCR) actual).getVirAttrs(),\n-                        excludedResources);\n-                PropagationReporter reporter = getPropagationTaskExecutor().\n-                        execute(taskInfos, nullPriorityAsync, getExecutor());\n-\n-                exchange.getMessage().setBody(Pair.of(created.getResult().getKey(), reporter.getStatuses()));\n-            } else if (actual instanceof AnyCR) {\n-                WorkflowResult<String> created = (WorkflowResult<String>) exchange.getIn().getBody();\n-\n-                if (actual instanceof GroupCR && isPull()) {\n-                    Map<String, String> groupOwnerMap = exchange.getProperty(\"groupOwnerMap\", Map.class);\n-                    ((GroupCR) actual).getPlainAttr(StringUtils.EMPTY).\n-                            ifPresent(groupOwner -> groupOwnerMap.put(\n-                            created.getResult(), groupOwner.getValues().iterator().next()));\n-\n-                    List<PropagationTaskInfo> taskInfos = getPropagationManager().getCreateTasks(\n-                            AnyTypeKind.GROUP,\n-                            created.getResult(),\n-                            null,\n-                            created.getPropByRes(),\n-                            ((AnyCR) actual).getVirAttrs(),\n-                            excludedResources);\n-                    getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n-\n-                    exchange.getMessage().setBody(Pair.of(created.getResult(), null));\n-                } else {\n-                    List<PropagationTaskInfo> taskInfos = getPropagationManager().getCreateTasks(\n-                            actual instanceof AnyObjectCR ? AnyTypeKind.ANY_OBJECT : AnyTypeKind.GROUP,\n-                            created.getResult(),\n-                            null,\n-                            created.getPropByRes(),\n-                            ((AnyCR) actual).getVirAttrs(),\n-                            excludedResources);\n-                    PropagationReporter reporter =\n-                            getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n-\n-                    exchange.getMessage().setBody(Pair.of(created.getResult(), reporter.getStatuses()));\n-                }\n-            }\n-        }\n-    }\n-}"},{"sha":"46b6165401d5d3ce65fb2a510092c3fc2218cdea","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeleteProducer.java","status":"removed","additions":0,"deletions":135,"changes":135,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,135 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.producer;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Set;\n-import org.apache.camel.Endpoint;\n-import org.apache.camel.Exchange;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.provisioning.api.PropagationByResource;\n-import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n-\n-public class DeleteProducer extends AbstractProducer {\n-\n-    private final UserDAO userDAO;\n-\n-    private final GroupDataBinder groupDataBinder;\n-\n-    public DeleteProducer(\n-            final Endpoint endpoint,\n-            final AnyTypeKind anyTypeKind,\n-            final UserDAO userDao,\n-            final GroupDataBinder groupDataBinder) {\n-\n-        super(endpoint, anyTypeKind);\n-        this.userDAO = userDao;\n-        this.groupDataBinder = groupDataBinder;\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public void process(final Exchange exchange) throws Exception {\n-        String key = exchange.getIn().getBody(String.class);\n-        Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n-        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-\n-        if (null != getAnyTypeKind()) {\n-            List<PropagationTaskInfo> taskInfos;\n-            PropagationReporter reporter;\n-            switch (getAnyTypeKind()) {\n-                case USER:\n-                    PropagationByResource<String> propByRes = new PropagationByResource<>();\n-                    propByRes.set(ResourceOperation.DELETE, userDAO.findAllResourceKeys(key));\n-\n-                    PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n-                    userDAO.findLinkedAccounts(key).forEach(account -> propByLinkedAccount.add(\n-                            ResourceOperation.DELETE,\n-                            Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue())));\n-\n-                    // Note here that we can only notify about \"delete\", not any other\n-                    // task defined in workflow process definition: this because this\n-                    // information could only be available after uwfAdapter.delete(), which\n-                    // will also effectively remove user from db, thus making virtually\n-                    // impossible by NotificationManager to fetch required user information\n-                    taskInfos = getPropagationManager().getDeleteTasks(\n-                            AnyTypeKind.USER,\n-                            key,\n-                            propByRes,\n-                            propByLinkedAccount,\n-                            excludedResources);\n-                    reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n-                    exchange.setProperty(\"statuses\", reporter.getStatuses());\n-                    break;\n-\n-                case GROUP:\n-                    taskInfos = new ArrayList<>();\n-                    // Generate propagation tasks for deleting users from group resources, if they are on those\n-                    // resources only because of the reason being deleted (see SYNCOPE-357)\n-                    groupDataBinder.findUsersWithTransitiveResources(key).\n-                            forEach((anyKey, anyPropByRes) -> taskInfos.addAll(\n-                            getPropagationManager().getDeleteTasks(\n-                                    AnyTypeKind.USER,\n-                                    anyKey,\n-                                    anyPropByRes,\n-                                    null,\n-                                    excludedResources)));\n-                    groupDataBinder.findAnyObjectsWithTransitiveResources(key).\n-                            forEach((anyKey, anyPropByRes) -> {\n-                                taskInfos.addAll(getPropagationManager().getDeleteTasks(\n-                                        AnyTypeKind.ANY_OBJECT,\n-                                        anyKey,\n-                                        anyPropByRes,\n-                                        null,\n-                                        excludedResources));\n-                            });\n-                    // Generate propagation tasks for deleting this group from resources\n-                    taskInfos.addAll(getPropagationManager().getDeleteTasks(\n-                            AnyTypeKind.GROUP,\n-                            key,\n-                            null,\n-                            null,\n-                            null));\n-                    reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n-                    exchange.setProperty(\"statuses\", reporter.getStatuses());\n-                    break;\n-\n-                case ANY_OBJECT:\n-                    taskInfos = getPropagationManager().getDeleteTasks(\n-                            AnyTypeKind.ANY_OBJECT,\n-                            key,\n-                            null,\n-                            null,\n-                            excludedResources);\n-                    reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n-                    exchange.setProperty(\"statuses\", reporter.getStatuses());\n-                    break;\n-\n-                default:\n-                    break;\n-            }\n-        }\n-    }\n-}"},{"sha":"d9cc56897de9f85935a2dd4f0dac21acf14a98f5","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeprovisionProducer.java","status":"removed","additions":0,"deletions":123,"changes":123,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,123 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.producer;\n-\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import org.apache.camel.Endpoint;\n-import org.apache.camel.Exchange;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.provisioning.api.PropagationByResource;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n-\n-public class DeprovisionProducer extends AbstractProducer {\n-\n-    private final UserDAO userDAO;\n-\n-    private final GroupDAO groupDAO;\n-\n-    private final AnyObjectDAO anyObjectDAO;\n-\n-    public DeprovisionProducer(\n-            final Endpoint endpoint,\n-            final AnyTypeKind anyTypeKind,\n-            final UserDAO userDAO,\n-            final GroupDAO groupDAO,\n-            final AnyObjectDAO anyObjectDAO) {\n-\n-        super(endpoint, anyTypeKind);\n-        this.userDAO = userDAO;\n-        this.groupDAO = groupDAO;\n-        this.anyObjectDAO = anyObjectDAO;\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public void process(final Exchange exchange) throws Exception {\n-        String key = exchange.getIn().getBody(String.class);\n-        List<String> resources = exchange.getProperty(\"resources\", List.class);\n-        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-\n-        if (null != getAnyTypeKind()) {\n-            PropagationByResource<String> propByRes = new PropagationByResource<>();\n-            List<PropagationTaskInfo> taskInfos;\n-            PropagationReporter propagationReporter;\n-            switch (getAnyTypeKind()) {\n-                case USER:\n-                    propByRes.set(ResourceOperation.DELETE, resources);\n-\n-                    PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n-                    userDAO.findLinkedAccounts(key).stream().\n-                            filter(account -> resources.contains(account.getResource().getKey())).\n-                            forEach(account -> propByLinkedAccount.add(\n-                            ResourceOperation.DELETE,\n-                            Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue())));\n-\n-                    taskInfos = getPropagationManager().getDeleteTasks(\n-                            AnyTypeKind.USER,\n-                            key,\n-                            propByRes,\n-                            propByLinkedAccount,\n-                            userDAO.findAllResourceKeys(key).stream().\n-                                    filter(resource -> !resources.contains(resource)).collect(Collectors.toList()));\n-                    propagationReporter =\n-                        getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n-                    exchange.getMessage().setBody(propagationReporter.getStatuses());\n-                    break;\n-\n-                case GROUP:\n-                    propByRes.addAll(ResourceOperation.DELETE, resources);\n-                    taskInfos = getPropagationManager().getDeleteTasks(\n-                            AnyTypeKind.GROUP,\n-                            key,\n-                            propByRes,\n-                            null,\n-                            groupDAO.findAllResourceKeys(key).stream().\n-                                    filter(resource -> !resources.contains(resource)).collect(Collectors.toList()));\n-                    propagationReporter =\n-                        getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n-                    exchange.getMessage().setBody(propagationReporter.getStatuses());\n-                    break;\n-\n-                case ANY_OBJECT:\n-                    propByRes.addAll(ResourceOperation.DELETE, resources);\n-                    taskInfos = getPropagationManager().getDeleteTasks(\n-                            AnyTypeKind.ANY_OBJECT,\n-                            key,\n-                            propByRes,\n-                            null,\n-                            anyObjectDAO.findAllResourceKeys(key).stream().\n-                                    filter(resource -> !resources.contains(resource)).collect(Collectors.toList()));\n-                    propagationReporter =\n-                        getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n-                    exchange.getMessage().setBody(propagationReporter.getStatuses());\n-                    break;\n-\n-                default:\n-                    break;\n-            }\n-        }\n-    }\n-}"},{"sha":"48459b9fd4d5288b316271cd2ac713d4de9c0c4a","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ProvisionProducer.java","status":"removed","additions":0,"deletions":111,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,111 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.producer;\n-\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import org.apache.camel.Endpoint;\n-import org.apache.camel.Exchange;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.request.PasswordPatch;\n-import org.apache.syncope.common.lib.request.StringPatchItem;\n-import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.PatchOperation;\n-import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.provisioning.api.PropagationByResource;\n-import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n-\n-public class ProvisionProducer extends AbstractProducer {\n-\n-    private final UserDAO userDAO;\n-\n-    public ProvisionProducer(final Endpoint endpoint, final AnyTypeKind anyType, final UserDAO userDAO) {\n-        super(endpoint, anyType);\n-        this.userDAO = userDAO;\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public void process(final Exchange exchange) throws Exception {\n-        String key = exchange.getIn().getBody(String.class);\n-        List<String> resources = exchange.getProperty(\"resources\", List.class);\n-        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-\n-        if (getAnyTypeKind() == AnyTypeKind.USER) {\n-            Boolean changePwd = exchange.getProperty(\"changePwd\", Boolean.class);\n-            String password = exchange.getProperty(\"password\", String.class);\n-\n-            UserUR userUR = new UserUR();\n-            userUR.setKey(key);\n-            userUR.getResources().addAll(resources.stream().map(resource\n-                    -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n-                    collect(Collectors.toList()));\n-\n-            if (changePwd) {\n-                userUR.setPassword(\n-                        new PasswordPatch.Builder().onSyncope(true).value(password).resources(resources).build());\n-            }\n-\n-            PropagationByResource<String> propByRes = new PropagationByResource<>();\n-            propByRes.addAll(ResourceOperation.UPDATE, resources);\n-\n-            UserWorkflowResult<Pair<UserUR, Boolean>> wfResult = new UserWorkflowResult<>(\n-                    Pair.of(userUR, (Boolean) null), propByRes, null, \"update\");\n-\n-            List<PropagationTaskInfo> taskInfos = getPropagationManager().getUserUpdateTasks(wfResult, changePwd, null);\n-            PropagationReporter reporter =\n-                getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n-\n-            exchange.getMessage().setBody(reporter.getStatuses());\n-        } else {\n-            PropagationByResource<String> propByRes = new PropagationByResource<>();\n-            propByRes.addAll(ResourceOperation.UPDATE, resources);\n-\n-            PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n-            userDAO.findLinkedAccounts(key).stream().\n-                    filter(account -> resources.contains(account.getResource().getKey())).\n-                    forEach(account -> propByLinkedAccount.add(\n-                    ResourceOperation.UPDATE,\n-                    Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue())));\n-\n-            AnyTypeKind anyTypeKind = AnyTypeKind.GROUP;\n-            if (getAnyTypeKind() != null) {\n-                anyTypeKind = getAnyTypeKind();\n-            }\n-\n-            List<PropagationTaskInfo> taskInfos = getPropagationManager().getUpdateTasks(\n-                    anyTypeKind,\n-                    key,\n-                    false,\n-                    null,\n-                    propByRes,\n-                    propByLinkedAccount,\n-                    null,\n-                    null);\n-            PropagationReporter reporter =\n-                getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n-\n-            exchange.getMessage().setBody(reporter.getStatuses());\n-        }\n-    }\n-}"},{"sha":"b81cd1e10308ef3b30b9b5056c7d77e6a8afcade","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/StatusProducer.java","status":"removed","additions":0,"deletions":119,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,119 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.producer;\n-\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-import org.apache.camel.Endpoint;\n-import org.apache.camel.Exchange;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.request.StatusR;\n-import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.common.lib.types.StatusRType;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.PropagationByResource;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n-import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n-\n-public class StatusProducer extends AbstractProducer {\n-\n-    private final UserDAO userDAO;\n-\n-    private final UserWorkflowAdapter uwfAdapter;\n-\n-    public StatusProducer(\n-            final Endpoint endpoint,\n-            final AnyTypeKind anyTypeKind,\n-            final UserDAO userDAO,\n-            final UserWorkflowAdapter uwfAdapter) {\n-\n-        super(endpoint, anyTypeKind);\n-        this.userDAO = userDAO;\n-        this.uwfAdapter = uwfAdapter;\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public void process(final Exchange exchange) throws Exception {\n-        if (getAnyTypeKind() == AnyTypeKind.USER && isPull()) {\n-            WorkflowResult<Map.Entry<UserUR, Boolean>> updated =\n-                    (WorkflowResult<Entry<UserUR, Boolean>>) exchange.getIn().getBody();\n-\n-            Boolean enabled = exchange.getProperty(\"enabled\", Boolean.class);\n-            String key = exchange.getProperty(\"key\", String.class);\n-            String updater = exchange.getProperty(\"updater\", String.class);\n-            String context = exchange.getProperty(\"context\", String.class);\n-\n-            if (enabled != null) {\n-                User user = userDAO.find(key);\n-\n-                WorkflowResult<String> enableUpdate = null;\n-                if (user.isSuspended() == null) {\n-                    enableUpdate = uwfAdapter.activate(key, null, updater, context);\n-                } else if (enabled && user.isSuspended()) {\n-                    enableUpdate = uwfAdapter.reactivate(key, updater, context);\n-                } else if (!enabled && !user.isSuspended()) {\n-                    enableUpdate = uwfAdapter.suspend(key, updater, context);\n-                }\n-\n-                if (enableUpdate != null) {\n-                    if (enableUpdate.getPropByRes() != null) {\n-                        updated.getPropByRes().merge(enableUpdate.getPropByRes());\n-                        updated.getPropByRes().purge();\n-                    }\n-                    updated.getPerformedTasks().addAll(enableUpdate.getPerformedTasks());\n-                }\n-            }\n-        } else if (getAnyTypeKind() == AnyTypeKind.USER) {\n-            WorkflowResult<String> updated = (WorkflowResult<String>) exchange.getIn().getBody();\n-            StatusR statusR = exchange.getProperty(\"statusR\", StatusR.class);\n-            Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-\n-            PropagationByResource<String> propByRes = new PropagationByResource<>();\n-            propByRes.addAll(ResourceOperation.UPDATE, statusR.getResources());\n-\n-            PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n-            userDAO.findLinkedAccounts(statusR.getKey()).stream().\n-                    filter(account -> statusR.getResources().contains(account.getResource().getKey())).\n-                    forEach(account -> propByLinkedAccount.add(\n-                    ResourceOperation.UPDATE,\n-                    Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue())));\n-\n-            List<PropagationTaskInfo> taskInfos = getPropagationManager().getUpdateTasks(\n-                    AnyTypeKind.USER,\n-                    statusR.getKey(),\n-                    false,\n-                    statusR.getType() != StatusRType.SUSPEND,\n-                    propByRes,\n-                    propByLinkedAccount,\n-                    null,\n-                    null);\n-            PropagationReporter reporter =\n-                    getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n-\n-            exchange.getMessage().setBody(Pair.of(updated.getResult(), reporter.getStatuses()));\n-        }\n-    }\n-}"},{"sha":"f49a5a1e6f72668c595c8e9c3f8773b9c058aa01","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/SuspendProducer.java","status":"removed","additions":0,"deletions":57,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,57 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.producer;\n-\n-import java.util.List;\n-import org.apache.camel.Endpoint;\n-import org.apache.camel.Exchange;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n-\n-public class SuspendProducer extends AbstractProducer {\n-\n-    public SuspendProducer(final Endpoint endpoint, final AnyTypeKind anyTypeKind) {\n-        super(endpoint, anyTypeKind);\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public void process(final Exchange exchange) throws Exception {\n-        if (getAnyTypeKind() == AnyTypeKind.USER) {\n-            Pair<UserWorkflowResult<String>, Boolean> updated =\n-                    (Pair<UserWorkflowResult<String>, Boolean>) exchange.getIn().getBody();\n-\n-            // propagate suspension if and only if it is required by policy\n-            if (updated != null && updated.getRight()) {\n-                UserUR userUR = new UserUR.Builder(updated.getLeft().getResult()).build();\n-\n-                List<PropagationTaskInfo> taskInfos = getPropagationManager().getUserUpdateTasks(\n-                        new UserWorkflowResult<>(\n-                                Pair.of(userUR, Boolean.FALSE),\n-                                updated.getLeft().getPropByRes(),\n-                                updated.getKey().getPropByLinkedAccount(),\n-                                updated.getLeft().getPerformedTasks()));\n-                getPropagationTaskExecutor().execute(taskInfos, false, getExecutor());\n-            }\n-        }\n-    }\n-}"},{"sha":"b3bb1691819fef2a8737b9bd9c58010241dc1e13","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/UpdateProducer.java","status":"removed","additions":0,"deletions":84,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,84 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.producer;\n-\n-import java.util.List;\n-import java.util.Set;\n-import org.apache.camel.Endpoint;\n-import org.apache.camel.Exchange;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.request.AnyObjectUR;\n-import org.apache.syncope.common.lib.request.AnyUR;\n-import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n-\n-public class UpdateProducer extends AbstractProducer {\n-\n-    public UpdateProducer(final Endpoint endpoint, final AnyTypeKind anyTypeKind) {\n-        super(endpoint, anyTypeKind);\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public void process(final Exchange exchange) throws Exception {\n-        if ((exchange.getIn().getBody() instanceof WorkflowResult)) {\n-            Object actual = exchange.getProperty(\"actual\");\n-            Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-            Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n-\n-            if (actual instanceof UserUR || isPull()) {\n-                UserWorkflowResult<Pair<UserUR, Boolean>> updated =\n-                        (UserWorkflowResult<Pair<UserUR, Boolean>>) exchange.getIn().getBody();\n-\n-                List<PropagationTaskInfo> taskInfos;\n-                if (isPull()) {\n-                    boolean passwordNotNull = updated.getResult().getKey().getPassword() != null;\n-                    taskInfos = getPropagationManager().getUserUpdateTasks(updated, passwordNotNull, excludedResources);\n-                } else {\n-                    taskInfos = getPropagationManager().getUserUpdateTasks(updated);\n-                }\n-                PropagationReporter reporter =\n-                    getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n-\n-                exchange.getMessage().setBody(Pair.of(updated.getResult().getLeft(), reporter.getStatuses()));\n-            } else if (actual instanceof AnyUR) {\n-                WorkflowResult<? extends AnyUR> updated =\n-                        (WorkflowResult<? extends AnyUR>) exchange.getIn().getBody();\n-\n-                List<PropagationTaskInfo> taskInfos = getPropagationManager().getUpdateTasks(\n-                        actual instanceof AnyObjectUR ? AnyTypeKind.ANY_OBJECT : AnyTypeKind.GROUP,\n-                        updated.getResult().getKey(),\n-                        false,\n-                        null,\n-                        updated.getPropByRes(),\n-                        null,\n-                        ((AnyUR) actual).getVirAttrs(),\n-                        excludedResources);\n-                PropagationReporter reporter =\n-                    getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync, getExecutor());\n-\n-                exchange.getMessage().setBody(Pair.of(updated.getResult(), reporter.getStatuses()));\n-            }\n-        }\n-    }\n-}"},{"sha":"92513e8120f8b77894ba7b8f0fbb0b4330f9a264","filename":"ext/camel/provisioning-camel/src/main/resources/META-INF/services/org/apache/camel/component/propagate","status":"removed","additions":0,"deletions":19,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fservices%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fpropagate","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fservices%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fpropagate","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fservices%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fpropagate?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,19 +0,0 @@\n-#\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#    http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-#\n-class=org.apache.syncope.core.provisioning.camel.component.PropagateComponent\n\\ No newline at end of file"},{"sha":"4c0a4eededb48dffbcc59035b18f015ad13fcfb0","filename":"ext/camel/provisioning-camel/src/main/resources/META-INF/spring.factories","status":"removed","additions":0,"deletions":19,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,19 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-\n-org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n-  org.apache.syncope.core.provisioning.camel.CamelProvisioningContext"},{"sha":"717ed3c1f48635c1c88587c69dbc532cd203fb3a","filename":"ext/camel/provisioning-camel/src/main/resources/anyObjectRoutes.xml","status":"removed","additions":0,"deletions":127,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FanyObjectRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FanyObjectRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FanyObjectRoutes.xml?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,127 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<routes>\n-     \n-  <route id=\"createAnyObject\">\n-    <from uri=\"direct:createAnyObject\"/>\n-    <setProperty name=\"actual\">\n-      <simple>${body}</simple>\n-    </setProperty>\n-    <doTry>\n-      <bean ref=\"awfAdapter\" method=\"create(${body},${exchangeProperty.creator},${exchangeProperty.context})\"/>\n-      <to uri=\"propagate:create?anyTypeKind=ANY_OBJECT\"/>\n-      <to uri=\"direct:createAnyObjectPort\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:createAnyObjectPort\"/>\n-      </doCatch>\n-    </doTry>\n-  </route>\n-         \n-  <route id=\"updateAnyObject\">\n-    <from uri=\"direct:updateAnyObject\"/>\n-    <setProperty name=\"actual\">\n-      <simple>${body}</simple>\n-    </setProperty>\n-    <doTry>\n-      <bean ref=\"awfAdapter\" method=\"update(${body},${exchangeProperty.updater},${exchangeProperty.context})\"/>\n-      <to uri=\"propagate:update?anyTypeKind=ANY_OBJECT\"/>\n-      <to uri=\"direct:updateAnyObjectPort\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:updateAnyObjectPort\"/>\n-      </doCatch>\n-    </doTry>\n-  </route>\n-\n-  <route id=\"deleteAnyObject\">\n-    <from uri=\"direct:deleteAnyObject\"/>\n-    <doTry>\n-      <to uri=\"propagate:delete?anyTypeKind=ANY_OBJECT\"/>\n-      <bean ref=\"awfAdapter\" method=\"delete(${body})\"/>\n-      <setBody>\n-        <simple>${exchangeProperty.statuses}</simple>\n-      </setBody>\n-      <to uri=\"direct:deleteAnyObjectPort\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:deleteAnyObjectPort\"/>\n-      </doCatch>\n-    </doTry>\n-  </route>\n-\n-  <route id=\"unlinkAnyObject\">\n-    <from uri=\"direct:unlinkAnyObject\"/>\n-    <doTry>\n-      <bean ref=\"awfAdapter\" method=\"update(${body},${exchangeProperty.updater},${exchangeProperty.context})\"/>\n-      <setBody>\n-        <simple>${body.getResult}</simple>\n-      </setBody>\n-      <to uri=\"direct:unlinkAnyObjectPort\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:unlinkAnyObjectPort\"/>\n-      </doCatch>\n-    </doTry>            \n-  </route>\n-        \n-  <route id=\"linkAnyObject\">\n-    <from uri=\"direct:linkAnyObject\"/>\n-    <doTry>\n-      <bean ref=\"awfAdapter\" method=\"update(${body},${exchangeProperty.updater},${exchangeProperty.context})\"/>\n-      <setBody>\n-        <simple>${body.getResult}</simple>\n-      </setBody>\n-      <to uri=\"direct:linkAnyObjectPort\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:linkAnyObjectPort\"/>\n-      </doCatch>\n-    </doTry>            \n-  </route>\n-        \n-  <route id=\"provisionAnyObject\">\n-    <from uri=\"direct:provisionAnyObject\"/>            \n-    <to uri=\"propagate:provision?anyTypeKind=ANY_OBJECT\"/>\n-    <to uri=\"direct:provisionAnyObjectPort\"/>              \n-  </route>\n-\n-  <route id=\"deprovisionAnyObject\">\n-    <from uri=\"direct:deprovisionAnyObject\"/>            \n-    <to uri=\"propagate:deprovision?anyTypeKind=ANY_OBJECT\"/>\n-    <to uri=\"direct:deprovisionAnyObjectPort\"/>              \n-  </route>\n-    \n-</routes>"},{"sha":"4b5d5fb2b4f5b5b511777cebeccdaf1ef88adc95","filename":"ext/camel/provisioning-camel/src/main/resources/groupRoutes.xml","status":"removed","additions":0,"deletions":146,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FgroupRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FgroupRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FgroupRoutes.xml?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,146 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<routes>\n-     \n-  <route id=\"createGroup\">\n-    <from uri=\"direct:createGroup\"/>\n-    <setProperty name=\"actual\">\n-      <simple>${body}</simple>\n-    </setProperty>\n-    <doTry>\n-      <bean ref=\"gwfAdapter\" method=\"create(${body},${exchangeProperty.creator},${exchangeProperty.context})\"/>\n-      <to uri=\"propagate:create?anyTypeKind=GROUP\"/>\n-      <to uri=\"direct:createGroupPort\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:createGroupPort\"/>\n-      </doCatch>\n-    </doTry>\n-  </route> \n-               \n-  <route id=\"createGroupPull\">\n-    <from uri=\"direct:createGroupInPull\"/>\n-    <setProperty name=\"actual\">\n-      <simple>${body}</simple>\n-    </setProperty>\n-    <doTry>\n-      <bean ref=\"gwfAdapter\" method=\"create(${body},${exchangeProperty.creator},${exchangeProperty.context})\"/>\n-      <to uri=\"propagate:create?anyTypeKind=GROUP&amp;pull=true\"/>\n-      <to uri=\"direct:createGroupInPullPort\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:createGroupInPullPort\"/>\n-      </doCatch>\n-    </doTry>\n-  </route> \n-         \n-  <route id=\"updateGroup\">\n-    <from uri=\"direct:updateGroup\"/>\n-    <setProperty name=\"actual\">\n-      <simple>${body}</simple>\n-    </setProperty>\n-    <doTry>\n-      <bean ref=\"gwfAdapter\" method=\"update(${body},${exchangeProperty.updater},${exchangeProperty.context})\"/>\n-      <to uri=\"propagate:update?anyTypeKind=GROUP\"/>\n-      <to uri=\"direct:updateGroupPort\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:updateGroupPort\"/>\n-      </doCatch>\n-    </doTry>\n-  </route>\n-\n-  <route id=\"deleteGroup\">\n-    <from uri=\"direct:deleteGroup\"/>\n-    <doTry>\n-      <to uri=\"propagate:delete?anyTypeKind=GROUP\"/>\n-      <bean ref=\"gwfAdapter\" method=\"delete(${body})\"/>\n-      <setBody>\n-        <simple>${exchangeProperty.statuses}</simple>\n-      </setBody>\n-      <to uri=\"direct:deleteGroupPort\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:deleteGroupPort\"/>\n-      </doCatch>\n-    </doTry>\n-  </route>\n-\n-  <route id=\"unlinkGroup\">\n-    <from uri=\"direct:unlinkGroup\"/>\n-    <doTry>\n-      <bean ref=\"gwfAdapter\" method=\"update(${body},${exchangeProperty.updater},${exchangeProperty.context})\"/>\n-      <setBody>\n-        <simple>${body.getResult}</simple>\n-      </setBody>\n-      <to uri=\"direct:unlinkGroupPort\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:unlinkGroupPort\"/>\n-      </doCatch>\n-    </doTry>            \n-  </route>\n-        \n-  <route id=\"linkGroup\">\n-    <from uri=\"direct:linkGroup\"/>\n-    <doTry>\n-      <bean ref=\"gwfAdapter\" method=\"update(${body},${exchangeProperty.updater},${exchangeProperty.context})\"/>\n-      <setBody>\n-        <simple>${body.getResult}</simple>\n-      </setBody>\n-      <to uri=\"direct:linkGroupPort\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:linkGroupPort\"/>\n-      </doCatch>\n-    </doTry>            \n-  </route>\n-        \n-  <route id=\"provisionGroup\">\n-    <from uri=\"direct:provisionGroup\"/>            \n-    <to uri=\"propagate:provision?anyTypeKind=GROUP\"/>\n-    <to uri=\"direct:provisionGroupPort\"/>              \n-  </route>\n-\n-  <route id=\"deprovisionGroup\">\n-    <from uri=\"direct:deprovisionGroup\"/>            \n-    <to uri=\"propagate:deprovision?anyTypeKind=GROUP\"/>\n-    <to uri=\"direct:deprovisionGroupPort\"/>              \n-  </route>\n-    \n-</routes>"},{"sha":"c985812e562451a4474bcf1178670c4147b2d1b0","filename":"ext/camel/provisioning-camel/src/main/resources/userRoutes.xml","status":"removed","additions":0,"deletions":263,"changes":263,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,263 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<routes>\n-  \n-  <route id=\"createUser\">\n-    <from uri=\"direct:createUser\"/>\n-    <setProperty name=\"actual\">\n-      <simple>${body}</simple>\n-    </setProperty>\n-    <doTry>\n-      <bean method=\"create(${body},\n-                           ${exchangeProperty.disablePwdPolicyCheck},\n-                           ${exchangeProperty.enabled},\n-                           ${exchangeProperty.creator},\n-                           ${exchangeProperty.context})\"\n-            ref=\"uwfAdapter\" />\n-      <to uri=\"propagate:create?anyTypeKind=USER\"/>\n-      <to uri=\"direct:createPort\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:createPort\"/>\n-      </doCatch>\n-    </doTry>\n-  </route> \n-       \n-  <route id=\"updateUser\">\n-    <from uri=\"direct:updateUser\"/>\n-    <setProperty name=\"actual\">\n-      <simple>${body}</simple>\n-    </setProperty>\n-    <doTry>\n-      <bean ref=\"uwfAdapter\" method=\"update(${body},${exchangeProperty.updater},${exchangeProperty.context})\"/>\n-      <to uri=\"propagate:update?anyTypeKind=USER\"/>\n-      <to uri=\"direct:updatePort\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:updatePort\"/>\n-      </doCatch>\n-    </doTry>\n-  </route>\n-                \n-  <route id=\"updateUserInPull\">\n-    <from uri=\"direct:updateUserInPull\"/>            \n-    <doTry>\n-      <bean ref=\"uwfAdapter\" method=\"update(${body},${exchangeProperty.updater},${exchangeProperty.context})\"/>\n-      <to uri=\"direct:userInPull\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:updateInPullPort\"/>\n-      </doCatch>\n-    </doTry>\n-  </route>\n-        \n-  <route id=\"userInPull\">\n-    <from uri=\"direct:userInPull\"/>\n-    <to uri=\"propagate:status?anyTypeKind=USER&amp;pull=true\"/>\n-    <to uri=\"propagate:update?anyTypeKind=USER&amp;pull=true\"/>\n-    <to uri=\"direct:updateInPullPort\"/>\n-  </route>\n-  \n-  <route id=\"deleteUser\">\n-    <from uri=\"direct:deleteUser\"/>\n-    <doTry>\n-      <to uri=\"propagate:delete?anyTypeKind=USER\"/>\n-      <bean ref=\"uwfAdapter\" method=\"delete(${body},${exchangeProperty.eraser},${exchangeProperty.context})\"/>\n-      <setBody>\n-        <simple>${exchangeProperty.statuses}</simple>\n-      </setBody>\n-      <to uri=\"direct:deletePort\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:deletePort\"/>\n-      </doCatch>\n-    </doTry>\n-  </route>\n-        \n-  <route id=\"unlinkUser\">\n-    <from uri=\"direct:unlinkUser\"/>\n-    <doTry>\n-      <bean ref=\"uwfAdapter\" method=\"update(${body},${exchangeProperty.updater},${exchangeProperty.context})\"/>\n-      <setBody>\n-        <simple>${body.getResult.getKey}</simple>\n-      </setBody>\n-      <to uri=\"direct:unlinkPort\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:unlinkPort\"/>\n-      </doCatch>\n-    </doTry>            \n-  </route>\n-        \n-  <route id=\"linkUser\">\n-    <from uri=\"direct:linkUser\"/>\n-    <doTry>\n-      <bean ref=\"uwfAdapter\" method=\"update(${body},${exchangeProperty.updater},${exchangeProperty.context})\"/>\n-      <setBody>\n-        <simple>${body.getResult.getKey}</simple>\n-      </setBody>\n-      <to uri=\"direct:linkPort\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:linkPort\"/>\n-      </doCatch>\n-    </doTry>            \n-  </route>\n-        \n-  <route id=\"activateUser\">\n-    <from uri=\"direct:activateUser\"/>\n-    <doTry>\n-      <bean ref=\"uwfAdapter\" method=\"activate(${body},\n-                                              ${exchangeProperty.token},\n-                                              ${exchangeProperty.updater},\n-                                              ${exchangeProperty.context})\"/>\n-      <to uri=\"direct:userStatusPropagation\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:statusPort\"/>\n-      </doCatch>\n-    </doTry>    \n-  </route>\n-  \n-  <route id=\"reactivateUser\">\n-    <from uri=\"direct:reactivateUser\"/>\n-    <doTry>\n-      <bean ref=\"uwfAdapter\" method=\"reactivate(${body},${exchangeProperty.updater},${exchangeProperty.context})\"/>\n-      <to uri=\"direct:userStatusPropagation\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:statusPort\"/>\n-      </doCatch>\n-    </doTry>    \n-  </route>\n-  \n-  <route id=\"suspendUser\">\n-    <from uri=\"direct:suspendUser\"/>\n-    <doTry>\n-      <bean ref=\"uwfAdapter\" method=\"suspend(${body},${exchangeProperty.updater},${exchangeProperty.context})\"/>\n-      <to uri=\"direct:userStatusPropagation\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:statusPort\"/>\n-      </doCatch>\n-    </doTry>  \n-  </route>\n-        \n-  <route id=\"userStatusPropagation\">\n-    <from uri=\"direct:userStatusPropagation\"/>            \n-    <to uri=\"propagate:status?anyTypeKind=USER\"/>\n-    <to uri=\"direct:statusPort\"/> \n-  </route>\n-    \n-  <route id=\"provisionUser\">\n-    <from uri=\"direct:provisionUser\"/>            \n-    <to uri=\"propagate:provision?anyTypeKind=USER\"/>\n-    <to uri=\"direct:provisionPort\"/>              \n-  </route>\n-                \n-  <route id=\"deprovisionUser\">\n-    <from uri=\"direct:deprovisionUser\"/>            \n-    <to uri=\"propagate:deprovision?anyTypeKind=USER\"/>\n-    <to uri=\"direct:deprovisionPort\"/>              \n-  </route>\n-    \n-  <route id=\"internalSuspendUser\">\n-    <from uri=\"direct:internalSuspendUser\"/>\n-    <doTry>\n-      <bean ref=\"uwfAdapter\" method=\"internalSuspend(${body},\n-                                                     ${exchangeProperty.updater},\n-                                                     ${exchangeProperty.context})\"/>\n-      <to uri=\"propagate:suspend?anyTypeKind=USER\"/>\n-      <to uri=\"direct:internalSuspendUserPort\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:internalSuspendUserPort\"/>\n-      </doCatch>\n-    </doTry>  \n-  </route>\n-        \n-  <route id=\"requestPwdReset\">\n-    <from uri=\"direct:requestPwdReset\"/>\n-    <doTry>\n-      <bean ref=\"uwfAdapter\" method=\"requestPasswordReset(${body},\n-                                                          ${exchangeProperty.updater},\n-                                                          ${exchangeProperty.context})\"/>\n-      <to uri=\"direct:requestPwdResetPort\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:requestPwdResetPort\"/>\n-      </doCatch>\n-    </doTry>  \n-  </route>\n-  \n-  <route id=\"confirmPwdReset\">\n-    <from uri=\"direct:confirmPwdReset\"/>\n-    <doTry>\n-      <bean ref=\"uwfAdapter\" method=\"confirmPasswordReset(${exchangeProperty.key},\n-                                                          ${exchangeProperty.token},\n-                                                          ${exchangeProperty.password},\n-                                                          ${exchangeProperty.updater},\n-                                                          ${exchangeProperty.context})\"/>\n-      <to uri=\"propagate:confirmPasswordReset?anyTypeKind=USER\"/>\n-      <to uri=\"direct:confirmPwdResetPort\"/>\n-      <doCatch>        \n-        <exception>java.lang.RuntimeException</exception>\n-        <handled>\n-          <constant>false</constant>\n-        </handled>\n-        <to uri=\"direct:confirmPwdResetPort\"/>\n-      </doCatch>\n-    </doTry>\n-  </route>\n-  \n-</routes>"},{"sha":"ca8ea861220fc08d96ec728d2f6cd095f12ef3a3","filename":"ext/camel/rest-api/pom.xml","status":"removed","additions":0,"deletions":76,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Frest-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Frest-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Frest-api%2Fpom.xml?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,76 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <parent>\n-    <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-camel</artifactId>\n-    <version>3.0.0-SNAPSHOT</version>\n-  </parent>\n-\n-  <name>Apache Syncope Ext: Camel REST API</name>\n-  <description>Apache Syncope Ext: Camel REST API</description>\n-  <groupId>org.apache.syncope.ext.camel</groupId>\n-  <artifactId>syncope-ext-camel-rest-api</artifactId>\n-  <packaging>jar</packaging>\n-  \n-  <properties>\n-    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n-  </properties>\n-\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.apache.syncope.common.idm</groupId>\n-      <artifactId>syncope-common-idm-rest-api</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.ext.camel</groupId>\n-      <artifactId>syncope-ext-camel-common-lib</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-  </dependencies>\n-\n-  <build>\n-    <plugins>\n-      <!-- Generating javadoc JAR artifact for usage with CXF's WADL generator (for core) -->\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-javadoc-plugin</artifactId>\n-        <inherited>true</inherited>\n-        <executions>\n-          <execution>\n-            <id>attach-javadocs</id>\n-            <goals>\n-              <goal>jar</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n-      </plugin>\n-\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-checkstyle-plugin</artifactId>\n-      </plugin>\n-    </plugins>\n-  </build>\n-</project>"},{"sha":"8010544aa57f6198d0ce5365e982d643454ccf89","filename":"ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java","status":"removed","additions":0,"deletions":114,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FCamelRouteService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FCamelRouteService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FCamelRouteService.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,114 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.rest.api.service;\n-\n-import io.swagger.v3.oas.annotations.Parameter;\n-import io.swagger.v3.oas.annotations.enums.ParameterIn;\n-import io.swagger.v3.oas.annotations.media.Schema;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n-import java.util.List;\n-import javax.validation.constraints.NotNull;\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.PUT;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.to.CamelMetrics;\n-import org.apache.syncope.common.lib.to.CamelRouteTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-\n-/**\n- * REST operations for Camel routes.\n- */\n-@Tag(name = \"Camel\")\n-@SecurityRequirements({\n-    @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\") })\n-@Path(\"camelRoutes\")\n-public interface CamelRouteService extends JAXRSService {\n-\n-    /**\n-     * List all routes for the given any type kind.\n-     *\n-     * @param anyTypeKind any type kind\n-     * @return all routes for the given any type kind\n-     */\n-    @GET\n-    @Path(\"{anyTypeKind}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<CamelRouteTO> list(@NotNull @PathParam(\"anyTypeKind\") AnyTypeKind anyTypeKind);\n-\n-    /**\n-     * Read the route with the given key.\n-     *\n-     * @param anyTypeKind any type kind\n-     * @param key route key\n-     * @return route with given key\n-     */\n-    @GET\n-    @Path(\"{anyTypeKind}/{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    CamelRouteTO read(\n-            @NotNull @PathParam(\"anyTypeKind\") AnyTypeKind anyTypeKind,\n-            @NotNull @PathParam(\"key\") String key);\n-\n-    /**\n-     * Update the given route.\n-     *\n-     * @param anyTypeKind any type kind\n-     * @param route to be updated\n-     */\n-    @Parameter(name = \"key\", description = \"Camel route's key\", in = ParameterIn.PATH, schema =\n-            @Schema(type = \"string\"))\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n-    @PUT\n-    @Path(\"{anyTypeKind}/{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void update(@NotNull @PathParam(\"anyTypeKind\") AnyTypeKind anyTypeKind, @NotNull CamelRouteTO route);\n-\n-    /**\n-     * Restart the underlying Apache Camel context.\n-     */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n-    @POST\n-    @Path(\"restartContext\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void restartContext();\n-\n-    /**\n-     * Provides Camel metrics.\n-     *\n-     * @return Camel metrics\n-     */\n-    @GET\n-    @Path(\"metrics\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    CamelMetrics metrics();\n-}"},{"sha":"5617e75066459e1109cc1f0f888954f3accd34cf","filename":"ext/camel/rest-cxf/pom.xml","status":"removed","additions":0,"deletions":72,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Frest-cxf%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Frest-cxf%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Frest-cxf%2Fpom.xml?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,72 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <parent>\n-    <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-camel</artifactId>\n-    <version>3.0.0-SNAPSHOT</version>\n-  </parent>\n-\n-  <name>Apache Syncope Ext: Camel REST CXF</name>\n-  <description>Apache Syncope Ext: Camel REST CXF</description>\n-  <groupId>org.apache.syncope.ext.camel</groupId>\n-  <artifactId>syncope-ext-camel-rest-cxf</artifactId>\n-  <packaging>jar</packaging>\n-  \n-  <properties>\n-    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n-  </properties>\n-\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.apache.syncope.core.idm</groupId>\n-      <artifactId>syncope-core-idm-rest-cxf</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.ext.camel</groupId>\n-      <artifactId>syncope-ext-camel-rest-api</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.ext.camel</groupId>\n-      <artifactId>syncope-ext-camel-rest-api</artifactId>\n-      <version>${project.version}</version>\n-      <classifier>javadoc</classifier>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.ext.camel</groupId>\n-      <artifactId>syncope-ext-camel-logic</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-  </dependencies>\n-\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-checkstyle-plugin</artifactId>\n-      </plugin>\n-    </plugins>\n-  </build>\n-</project>"},{"sha":"1437d0dbe54ffe57639b538364177d5d57cef75b","filename":"ext/camel/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/CamelRESTCXFContext.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FCamelRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FCamelRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FCamelRESTCXFContext.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,36 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.cxf;\n-\n-import org.apache.syncope.common.rest.api.service.CamelRouteService;\n-import org.apache.syncope.core.logic.CamelRouteLogic;\n-import org.apache.syncope.core.rest.cxf.service.CamelRouteServiceImpl;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-\n-@Configuration(proxyBeanMethods = false)\n-public class CamelRESTCXFContext {\n-\n-    @ConditionalOnMissingBean\n-    @Bean\n-    public CamelRouteService camelRouteService(final CamelRouteLogic camelRouteLogic) {\n-        return new CamelRouteServiceImpl(camelRouteLogic);\n-    }\n-}"},{"sha":"cd0c294af7111d89b8c970149c3fd4908ac57179","filename":"ext/camel/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/CamelRouteServiceImpl.java","status":"removed","additions":0,"deletions":62,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FCamelRouteServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FCamelRouteServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FCamelRouteServiceImpl.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,62 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.cxf.service;\n-\n-import java.util.List;\n-import org.apache.syncope.common.lib.to.CamelMetrics;\n-import org.apache.syncope.common.lib.to.CamelRouteTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.rest.api.service.CamelRouteService;\n-import org.apache.syncope.core.logic.CamelRouteLogic;\n-import org.springframework.stereotype.Service;\n-\n-@Service\n-public class CamelRouteServiceImpl extends AbstractService implements CamelRouteService {\n-\n-    protected final CamelRouteLogic logic;\n-\n-    public CamelRouteServiceImpl(final CamelRouteLogic logic) {\n-        this.logic = logic;\n-    }\n-\n-    @Override\n-    public List<CamelRouteTO> list(final AnyTypeKind anyTypeKind) {\n-        return logic.list(anyTypeKind);\n-    }\n-\n-    @Override\n-    public CamelRouteTO read(final AnyTypeKind anyTypeKind, final String key) {\n-        return logic.read(anyTypeKind, key);\n-    }\n-\n-    @Override\n-    public void update(final AnyTypeKind anyTypeKind, final CamelRouteTO route) {\n-        logic.update(anyTypeKind, route);\n-    }\n-\n-    @Override\n-    public void restartContext() {\n-        logic.restartContext();\n-    }\n-\n-    @Override\n-    public CamelMetrics metrics() {\n-        return logic.metrics();\n-    }\n-}"},{"sha":"7dc2a454b8eadc6effc1c935b263276c9f18b4a7","filename":"ext/camel/rest-cxf/src/main/resources/META-INF/spring.factories","status":"removed","additions":0,"deletions":19,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/ext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,19 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-\n-org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n-  org.apache.syncope.core.rest.cxf.CamelRESTCXFContext"},{"sha":"9f86be187d22b20b894c37ee640b682f5a259bc3","filename":"ext/pom.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/ext%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/ext%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fpom.xml?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -78,7 +78,6 @@ under the License.\n   \n   <modules>\n     <module>flowable</module>\n-    <module>camel</module>\n     <module>saml2sp4ui</module>\n     <module>oidcc4ui</module>\n     <module>elasticsearch</module>"},{"sha":"988e9e225b3d7884263e946a7adb80e4525e3a12","filename":"fit/console-reference/pom.xml","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/fit%2Fconsole-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/fit%2Fconsole-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fpom.xml?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -62,12 +62,6 @@ under the License.\n       <artifactId>syncope-ext-flowable-client-console</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n-\n-    <dependency>\n-      <groupId>org.apache.syncope.ext.camel</groupId>\n-      <artifactId>syncope-ext-camel-client-console</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n     \n     <dependency>\n       <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>"},{"sha":"4b64c487af469bd562e8e3890a0cdd110e1337cc","filename":"fit/console-reference/src/test/resources/hotswap-agent.properties","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fresources%2Fhotswap-agent.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fresources%2Fhotswap-agent.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fresources%2Fhotswap-agent.properties?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -24,7 +24,6 @@ ${basedir}/../../client/idrepo/common-ui/target/classes/org,\\\n ${basedir}/../../client/idrepo/console/target/classes/org,\\\n ${basedir}/../../client/idm/console/target/classes/org,\\\n ${basedir}/../../client/am/console/target/classes/org,\\\n-${basedir}/../../ext/camel/client-console/target/classes/org,\\\n ${basedir}/../../ext/flowable/client-console/target/classes/org,\\\n ${basedir}/../../ext/saml2sp/client-console/target/classes/org,\\\n ${basedir}/../../ext/scimv2/client-console/target/classes/org,\\"},{"sha":"5f8d426ac01eaf70bc2dd03edea6d5133fca1663","filename":"fit/core-reference/pom.xml","status":"modified","additions":1,"deletions":29,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -136,18 +136,6 @@ under the License.\n       <version>${project.version}</version>\n       <scope>test</scope>\n     </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.ext.camel</groupId>\n-      <artifactId>syncope-ext-camel-rest-cxf</artifactId>\n-      <version>${project.version}</version>\n-      <scope>test</scope>          \n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.ext.camel</groupId>\n-      <artifactId>syncope-ext-camel-client-console</artifactId>\n-      <version>${project.version}</version>\n-      <scope>test</scope>\n-    </dependency>  \n     <dependency>\n       <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n       <artifactId>syncope-ext-saml2sp4ui-rest-cxf</artifactId>\n@@ -1631,23 +1619,7 @@ under the License.\n           <artifactId>syncope-ext-flowable-rest-cxf</artifactId>\n           <version>${project.version}</version>\n         </dependency>\n-\n-        <dependency>\n-          <groupId>org.apache.syncope.ext.camel</groupId>\n-          <artifactId>syncope-ext-camel-rest-cxf</artifactId>\n-          <version>${project.version}</version>\n-        </dependency>\n-        <dependency>\n-          <groupId>org.apache.syncope.ext.camel</groupId>\n-          <artifactId>syncope-ext-camel-persistence-jpa</artifactId>\n-          <version>${project.version}</version>\n-        </dependency>\n-        <dependency>\n-          <groupId>org.apache.syncope.ext.camel</groupId>\n-          <artifactId>syncope-ext-camel-provisioning</artifactId>\n-          <version>${project.version}</version>\n-        </dependency>\n-        \n+       \n         <dependency>\n           <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n           <artifactId>syncope-ext-saml2sp4ui-rest-cxf</artifactId>"},{"sha":"cdd8cc39badf2dc5c049640c3ac89154ddc61e67","filename":"fit/core-reference/src/main/resources/log4j2.xml","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -135,9 +135,6 @@ under the License.\n     <asyncLogger name=\"org.apache.fop\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n-    <asyncLogger name=\"org.apache.camel\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"main\"/>\n-    </asyncLogger>\n     <asyncLogger name=\"org.apache.wss4j\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>"},{"sha":"c4b3de736d83d98bf6862ace7b74df9294b1714b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -115,7 +115,6 @@\n import org.apache.syncope.common.rest.api.service.AuthModuleService;\n import org.apache.syncope.common.rest.api.service.AuthProfileService;\n import org.apache.syncope.common.rest.api.service.BpmnProcessService;\n-import org.apache.syncope.common.rest.api.service.CamelRouteService;\n import org.apache.syncope.common.rest.api.service.ClientAppService;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.common.rest.api.service.DelegationService;\n@@ -351,8 +350,6 @@ public void initialize(final ConfigurableApplicationContext ctx) {\n \n     protected static SRARouteService SRA_ROUTE_SERVICE;\n \n-    protected static CamelRouteService CAMEL_ROUTE_SERVICE;\n-\n     protected static SAML2SP4UIService SAML2SP4UI_SERVICE;\n \n     protected static SAML2SP4UIIdPService SAML2SP4UI_IDP_SERVICE;\n@@ -457,7 +454,6 @@ public static void restSetup() {\n         REMEDIATION_SERVICE = ADMIN_CLIENT.getService(RemediationService.class);\n         DELEGATION_SERVICE = ADMIN_CLIENT.getService(DelegationService.class);\n         SRA_ROUTE_SERVICE = ADMIN_CLIENT.getService(SRARouteService.class);\n-        CAMEL_ROUTE_SERVICE = ADMIN_CLIENT.getService(CamelRouteService.class);\n         SAML2SP4UI_SERVICE = ADMIN_CLIENT.getService(SAML2SP4UIService.class);\n         SAML2SP4UI_IDP_SERVICE = ADMIN_CLIENT.getService(SAML2SP4UIIdPService.class);\n         OIDCC4UI_SERVICE = ADMIN_CLIENT.getService(OIDCC4UIService.class);"},{"sha":"33b10b67293629af6c0f1900c29984e40d4fd0ca","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/CamelRouteITCase.java","status":"removed","additions":0,"deletions":209,"changes":209,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java?ref=a8c3bd5ad4eb56bd6c3fedb3ea558309a058899b","patch":"@@ -1,209 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit.core;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.fail;\n-import static org.junit.jupiter.api.Assumptions.assumeTrue;\n-\n-import java.util.List;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.request.UserCR;\n-import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n-import org.apache.syncope.common.lib.to.CamelRouteTO;\n-import org.apache.syncope.common.lib.to.PlainSchemaTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-\n-public class CamelRouteITCase extends AbstractITCase {\n-\n-    @BeforeEach\n-    public void check() {\n-        assumeTrue(ADMIN_CLIENT.platform().getProvisioningInfo().getUserProvisioningManager().contains(\"Camel\"));\n-    }\n-\n-    @Test\n-    public void userRoutes() {\n-        List<CamelRouteTO> userRoutes = CAMEL_ROUTE_SERVICE.list(AnyTypeKind.USER);\n-        assertNotNull(userRoutes);\n-        assertEquals(16, userRoutes.size());\n-        userRoutes.forEach(route -> assertNotNull(route.getContent()));\n-    }\n-\n-    @Test\n-    public void groupRoutes() {\n-        List<CamelRouteTO> groupRoutes = CAMEL_ROUTE_SERVICE.list(AnyTypeKind.GROUP);\n-        assertNotNull(groupRoutes);\n-        assertEquals(8, groupRoutes.size());\n-        groupRoutes.forEach(route -> assertNotNull(route.getContent()));\n-    }\n-\n-    private static CamelRouteTO doUpdate(final AnyTypeKind anyTypeKind, final String key, final String content) {\n-        CamelRouteTO route = CAMEL_ROUTE_SERVICE.read(anyTypeKind, key);\n-        route.setContent(content);\n-        CAMEL_ROUTE_SERVICE.update(anyTypeKind, route);\n-        // getting new route definition\n-        return CAMEL_ROUTE_SERVICE.read(anyTypeKind, key);\n-    }\n-\n-    @Test\n-    public void update() {\n-        CamelRouteTO oldRoute = CAMEL_ROUTE_SERVICE.read(AnyTypeKind.USER, \"createUser\");\n-        assertNotNull(oldRoute);\n-        String routeContent = \"<route id=\\\"createUser\\\">\\n\"\n-                + \"  <from uri=\\\"direct:createUser\\\"/>\\n\"\n-                + \"  <setProperty name=\\\"actual\\\">\\n\"\n-                + \"    <simple>${body}</simple>\\n\"\n-                + \"  </setProperty>\\n\"\n-                + \"  <doTry>\\n\"\n-                + \"    <bean ref=\\\"uwfAdapter\\\" method=\\\"create(${body},${exchangeProperty.disablePwdPolicyCheck},\\n\"\n-                + \"                             ${exchangeProperty.enabled})\\\"/>\\n\"\n-                + \"    <to uri=\\\"propagate:create?anyTypeKind=USER\\\"/>\\n\"\n-                + \"    <to uri=\\\"direct:createPort\\\"/>\\n\"\n-                + \"    <to uri=\\\"log:myLog\\\"/>\\n\"\n-                + \"    <doCatch>        \\n\"\n-                + \"      <exception>java.lang.RuntimeException</exception>\\n\"\n-                + \"      <handled>\\n\"\n-                + \"        <constant>false</constant>\\n\"\n-                + \"      </handled>\\n\"\n-                + \"      <to uri=\\\"direct:createPort\\\"/>\\n\"\n-                + \"    </doCatch>\\n\"\n-                + \"  </doTry>\\n\"\n-                + \"</route>\";\n-        try {\n-            CamelRouteTO route = doUpdate(AnyTypeKind.USER, \"createUser\", routeContent);\n-            assertEquals(routeContent, route.getContent());\n-        } finally {\n-            doUpdate(AnyTypeKind.USER, oldRoute.getKey(), oldRoute.getContent());\n-        }\n-    }\n-\n-    @Test\n-    public void scriptingUpdate() {\n-        CamelRouteTO oldRoute = CAMEL_ROUTE_SERVICE.read(AnyTypeKind.USER, \"createUser\");\n-        // updating route content including new attribute management\n-\n-        String routeContent = \"\"\n-                + \"  <route id=\\\"createUser\\\">\\n\"\n-                + \"    <from uri=\\\"direct:createUser\\\"/>\\n\"\n-                + \"    <setProperty name=\\\"actual\\\">\\n\"\n-                + \"      <simple>${body}</simple>\\n\"\n-                + \"    </setProperty>\\n\"\n-                + \"    <setBody>\\n\"\n-                + \"     <groovy>\\n\"\n-                + \"request.body.getPlainAttr(\\\"camelAttribute\\\").get().getValues().set(0,\\\"true\\\")\\n\"\n-                + \"       return request.body\\n\"\n-                + \"     </groovy>\\n\"\n-                + \"    </setBody>\\n\"\n-                + \"    <doTry>\\n\"\n-                + \"      <bean ref=\\\"uwfAdapter\\\" method=\\\"create(${body},${exchangeProperty.disablePwdPolicyCheck},\\n\"\n-                + \"                                     ${exchangeProperty.enabled})\\\"/>\\n\"\n-                + \"      <to uri=\\\"propagate:create?anyTypeKind=USER\\\"/>\\n\"\n-                + \"      <to uri=\\\"direct:createPort\\\"/>\\n\"\n-                + \"      <doCatch>        \\n\"\n-                + \"        <exception>java.lang.RuntimeException</exception>\\n\"\n-                + \"        <handled>\\n\"\n-                + \"          <constant>false</constant>\\n\"\n-                + \"        </handled>\\n\"\n-                + \"        <to uri=\\\"direct:createPort\\\"/>\\n\"\n-                + \"      </doCatch>\\n\"\n-                + \"    </doTry>\\n\"\n-                + \"  </route> \";\n-        try {\n-            doUpdate(AnyTypeKind.USER, \"createUser\", routeContent);\n-\n-            // creating new schema attribute for user\n-            PlainSchemaTO schemaTO = new PlainSchemaTO();\n-            schemaTO.setKey(\"camelAttribute\");\n-            schemaTO.setType(AttrSchemaType.String);\n-            createSchema(SchemaType.PLAIN, schemaTO);\n-\n-            AnyTypeClassTO typeClass = new AnyTypeClassTO();\n-            typeClass.setKey(\"camelAttribute\");\n-            typeClass.getPlainSchemas().add(schemaTO.getKey());\n-            ANY_TYPE_CLASS_SERVICE.create(typeClass);\n-\n-            UserCR userCR = new UserCR();\n-            userCR.setRealm(SyncopeConstants.ROOT_REALM);\n-            userCR.getAuxClasses().add(typeClass.getKey());\n-            String userId = getUUIDString() + \"camelUser@syncope.apache.org\";\n-            userCR.setUsername(userId);\n-            userCR.setPassword(\"password123\");\n-            userCR.getPlainAttrs().add(attr(\"userId\", userId));\n-            userCR.getPlainAttrs().add(attr(\"fullname\", userId));\n-            userCR.getPlainAttrs().add(attr(\"surname\", userId));\n-            userCR.getPlainAttrs().add(attr(\"camelAttribute\", \"false\"));\n-\n-            UserTO userTO = createUser(userCR).getEntity();\n-            assertNotNull(userTO);\n-            assertEquals(\"true\", userTO.getPlainAttr(\"camelAttribute\").get().getValues().get(0));\n-        } finally {\n-            doUpdate(AnyTypeKind.USER, oldRoute.getKey(), oldRoute.getContent());\n-        }\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE931() {\n-        CamelRouteTO oldRoute = CAMEL_ROUTE_SERVICE.read(AnyTypeKind.USER, \"createUser\");\n-        assertNotNull(oldRoute);\n-        String routeContent = \"<route id=\\\"createUser\\\">\\n\"\n-                + \"  <from uri=\\\"direct:createUser\\\"/>\\n\"\n-                + \"  <setProperty name=\\\"actual\\\">\\n\"\n-                + \"    <simple>${body}</simple>\\n\"\n-                + \"  </setProperty>\\n\"\n-                + \"  <doTry>\\n\"\n-                + \"    <bean ref=\\\"uwfAdapter\\\" method=\\\"create(${body},${exchangeProperty.disablePwdPolicyCheck},\\n\"\n-                + \"                             ${exchangeProperty.enabled})\\\"/>\\n\"\n-                + \"    <to uri=\\\"propagate:create123?anyTypeKind=USER\\\"/>\\n\"\n-                + \"    <to uri=\\\"direct:createPort\\\"/>\\n\"\n-                + \"    <to uri=\\\"log:myLog\\\"/>\\n\"\n-                + \"    <doCatch>        \\n\"\n-                + \"      <exception>java.lang.RuntimeException</exception>\\n\"\n-                + \"      <handled>\\n\"\n-                + \"        <constant>false</constant>\\n\"\n-                + \"      </handled>\\n\"\n-                + \"      <to uri=\\\"direct:createPort\\\"/>\\n\"\n-                + \"    </doCatch>\\n\"\n-                + \"  </doTry>\\n\"\n-                + \"</route>\";\n-\n-        // Try to update a route with an incorrect propagation type\n-        try {\n-            doUpdate(AnyTypeKind.USER, \"createUser\", routeContent);\n-            fail(\"Error expected on an incorrect propagation type\");\n-        } catch (Exception ex) {\n-            // Expected\n-        }\n-\n-        // Now update the route again with the correct propagation type\n-        routeContent = routeContent.replaceFirst(\"create123\", \"create\");\n-        try {\n-            CamelRouteTO route = doUpdate(AnyTypeKind.USER, \"createUser\", routeContent);\n-            assertEquals(routeContent, route.getContent());\n-        } finally {\n-            doUpdate(AnyTypeKind.USER, oldRoute.getKey(), oldRoute.getContent());\n-        }\n-    }\n-}"},{"sha":"a7ef5e8ac4cc3ca9bfc96019bb9e5cc295e81ea0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ExceptionMapperITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -68,7 +68,7 @@ public void uniqueSchemaConstraint() {\n         createSchema(SchemaType.PLAIN, schemaTO);\n \n         AnyTypeClassTO typeClass = new AnyTypeClassTO();\n-        typeClass.setKey(\"camelAttribute\" + getUUIDString());\n+        typeClass.setKey(\"uniqueAttribute\" + getUUIDString());\n         typeClass.getPlainSchemas().add(schemaTO.getKey());\n         ANY_TYPE_CLASS_SERVICE.create(typeClass);\n "},{"sha":"facc5bf15a772794c69c64d2200fbd8a1e5765e1","filename":"fit/core-reference/src/test/resources/hotswap-agent.properties","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fhotswap-agent.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fhotswap-agent.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fhotswap-agent.properties?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -45,9 +45,6 @@ ${basedir}/../../ext/flowable/provisioning-api/target/classes,\\\n ${basedir}/../../ext/flowable/provisioning-java/target/classes,\\\n ${basedir}/../../ext/flowable/rest-api/target/classes,\\\n ${basedir}/../../ext/flowable/rest-cxf/target/classes/org,\\\n-${basedir}/../../ext/camel/common-lib/target/classes,\\\n-${basedir}/../../ext/camel/logic/target/classes,\\\n-${basedir}/../../ext/camel/provisioning-camel/target/classes/org,\\\n ${basedir}/../../ext/saml2sp/common-lib/target/classes,\\\n ${basedir}/../../ext/saml2sp/logic/target/classes,\\\n ${basedir}/../../ext/saml2sp/persistence-api/target/classes,\\"},{"sha":"dcaf66c723bd42b6ce5e49b0991ef35da8329f2c","filename":"pom.xml","status":"modified","additions":0,"deletions":51,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -430,8 +430,6 @@ under the License.\n \n     <flowable.version>6.7.2</flowable.version>\n \n-    <camel.version>3.18.1</camel.version>\n-\n     <slf4j.version>1.7.36</slf4j.version>\n \n     <elasticsearch.version>8.4.0</elasticsearch.version>\n@@ -636,53 +634,6 @@ under the License.\n       </dependency>\n       <!-- /Swagger -->\n \n-      <!-- Camel -->\n-      <dependency>\n-        <groupId>org.apache.camel.springboot</groupId>\n-        <artifactId>camel-spring-boot-starter</artifactId>\n-        <version>${camel.version}</version>\n-      </dependency>\n-      <dependency>\n-        <groupId>org.apache.camel</groupId>\n-        <artifactId>camel-groovy</artifactId>\n-        <version>${camel.version}</version>\n-        <exclusions>\n-          <exclusion>\n-            <groupId>com.sun.xml.bind</groupId>\n-            <artifactId>jaxb-core</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>com.sun.xml.bind</groupId>\n-            <artifactId>jaxb-impl</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>org.codehaus.groovy</groupId>\n-            <artifactId>groovy</artifactId>\n-          </exclusion>\n-        </exclusions>\n-      </dependency>\n-      <dependency>\n-        <groupId>org.apache.camel</groupId>\n-        <artifactId>camel-metrics</artifactId>\n-        <version>${camel.version}</version>\n-        <exclusions>\n-          <exclusion>\n-            <groupId>com.sun.xml.bind</groupId>\n-            <artifactId>jaxb-core</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>com.sun.xml.bind</groupId>\n-            <artifactId>jaxb-impl</artifactId>\n-          </exclusion>\n-        </exclusions>\n-      </dependency>\n-      <dependency>\n-        <groupId>org.apache.camel</groupId>\n-        <artifactId>spi-annotations</artifactId>\n-        <version>${camel.version}</version>\n-      </dependency>\n-      <!-- /Camel -->\n-\n       <dependency>\n         <groupId>co.elastic.clients</groupId>\n         <artifactId>elasticsearch-java</artifactId>\n@@ -2250,8 +2201,6 @@ under the License.\n             <link>http://fasterxml.github.io/jackson-dataformat-xml/javadoc/2.13/</link>\n             <link>http://fasterxml.github.io/jackson-dataformats-text/javadoc/yaml/2.13/</link>\n             <link>http://fasterxml.github.io/jackson-dataformats-text/javadoc/csv/2.13/</link>\n-            <link>https://www.javadoc.io/doc/org.apache.camel/camel-core/latest/</link>\n-            <link>https://www.javadoc.io/doc/org.apache.camel/camel-spring/latest/</link>\n             <link>https://ci.apache.org/projects/wicket/apidocs/9.x/</link>\n             <link>https://commons.apache.org/proper/commons-lang/javadocs/api-release/</link>\n             <link>https://commons.apache.org/proper/commons-jexl/apidocs/</link>"},{"sha":"02615746796ad95a635f8dde2ecccc13e4fee537","filename":"src/main/asciidoc/getting-started/introduction.adoc","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/src%2Fmain%2Fasciidoc%2Fgetting-started%2Fintroduction.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/src%2Fmain%2Fasciidoc%2Fgetting-started%2Fintroduction.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Fgetting-started%2Fintroduction.adoc?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -139,8 +139,7 @@ features (notifications, reports and auditing)\n representation of Users, Groups and Any Objects. +\n This component often needs to be tailored to meet the requirements of a specific deployment, as it is the crucial decision \n point for defining and enforcing the consistency and transformations between internal and external data. The default\n-all-Java implementation can be extended for this purpose. In addition, an https://camel.apache.org/[Apache Camel^]-based \n-implementation is also available as an extension, which brings all the power of runtime changes and adaptation.\n+all-Java implementation can be extended for this purpose.\n  * *_Workflow_*  is one of the pluggable aspects of Apache Syncope: this lets every deployment choose the preferred engine\n from a provided list - including one based on https://www.flowable.org/[Flowable^], the reference open source\n http://www.bpmn.org/[BPMN 2.0^] implementations - or define new, custom ones. "},{"sha":"0eecc3435c3c0e429e5852c53944fa03003a2b33","filename":"src/main/asciidoc/reference-guide/architecture/core.adoc","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/src%2Fmain%2Fasciidoc%2Freference-guide%2Farchitecture%2Fcore.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/src%2Fmain%2Fasciidoc%2Freference-guide%2Farchitecture%2Fcore.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Farchitecture%2Fcore.adoc?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -62,9 +62,6 @@ The default implementation can be sometimes tailored to meet the requirements of\n it is the crucial decision point for defining and enforcing the consistency and transformations between internal and \n external data.\n \n-In addition, an https://camel.apache.org/[Apache Camel^]-based implementation is also available as an \n-<<apache-camel-provisioning-manager,extension>>, which brings all the power of runtime changes and adaptation.\n-\n [[workflow-layer]]\n ==== Workflow\n "},{"sha":"f6cf1a456153f80be81d9fbaa268288d120cf507","filename":"src/main/asciidoc/reference-guide/concepts/entitlements.adoc","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fentitlements.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fentitlements.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fentitlements.adoc?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -54,10 +54,10 @@ https://github.com/apache/syncope/blob/master/common/idrepo/lib/src/main/java/or\n endif::[]\n - even though <<extensions,extensions>> have the ability to\n ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n-https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/camel/common-lib/src/main/java/org/apache/syncope/common/lib/types/CamelEntitlement.java[enlarge the initial list^]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/types/FlowableEntitlement.java[enlarge the initial list^]\n endif::[]\n ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n-https://github.com/apache/syncope/blob/master/ext/camel/common-lib/src/main/java/org/apache/syncope/common/lib/types/CamelEntitlement.java[enlarge the initial list^]\n+https://github.com/apache/syncope/blob/master/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/types/FlowableEntitlement.java[enlarge the initial list^]\n endif::[]\n : this is because entitlements are the pillars of the internal security model and are not meant for external usage.\n "},{"sha":"e71ece95cb54101f1650a110df308f8fa8eae1b9","filename":"src/main/asciidoc/reference-guide/concepts/extensions.adoc","status":"modified","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fextensions.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fextensions.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fextensions.adoc?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -33,32 +33,6 @@ ones detailed below;\n . as Maven artifacts published by third parties;\n . as part of a given deployment source code, as explained <<customization-extensions, in the following>>.\n \n-==== Apache Camel Provisioning Manager\n-\n-This extension delegates the <<provisioning,provisioning>> process execution to a set of\n-https://camel.apache.org[Apache Camel^] routes.\n-\n-The pre-loaded routes can be dynamically changed at runtime via REST or admin console, and modifications are immediately\n-made available for processing.\n-\n-For example, on creating a new user, you may wish to send an email to an administrator; or if a user is\n-reactivated, you may wish to reactivate the user's home page on a web server. +\n-All these things and more are possible using the myriad of\n-https://camel.apache.org/components.html[components^] that are available to be used in Apache Camel routes.\n-\n-[NOTE]\n-.Extension Sources\n-====\n-The source code of this extension is available from the Apache Syncope\n-ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n-https://github.com/apache/syncope/tree/syncope-{docVersion}/ext/camel[source tree^]\n-endif::[]\n-ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n-https://github.com/apache/syncope/tree/master/ext/camel[source tree^]\n-endif::[]\n-.\n-====\n-\n [[saml2sp4ui]]\n ==== SAML 2.0 Service Provider for UI\n "},{"sha":"7e71ae284c96079f1324838ecd95fe5559fe0835","filename":"src/main/asciidoc/reference-guide/concepts/provisioning/provisioning.adoc","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fprovisioning%2Fprovisioning.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fprovisioning%2Fprovisioning.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fprovisioning%2Fprovisioning.adoc?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -83,8 +83,6 @@ endif::[]\n ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n * https://github.com/apache/syncope/blob/master/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java[DefaultAnyObjectProvisioningManager^]\n endif::[]\n-\n-An Apache Camel-based implementation is available as <<apache-camel-provisioning-manager,extension>>.\n ====\n \n include::propagation.adoc[]"},{"sha":"9137dfe524ccc4ab839eaf97fc59cc9660b19705","filename":"src/main/asciidoc/reference-guide/usage/clientlibrary.adoc","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fclientlibrary.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fclientlibrary.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fclientlibrary.adoc?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -115,14 +115,6 @@ loggerTO.setLevel(LoggerLevel.DEBUG);\n loggerService.update(LoggerType.LOG, loggerTO);\n ----\n \n-[NOTE]\n-More RESTful services could be available besides the \n-https://syncope.apache.org/apidocs/3.0/org/apache/syncope/common/rest/api/service/package-summary.html[default set^],\n-as there might be <<extensions,extensions>> installed in the given deployment; the\n-<<apache-camel-provisioning-manager>> provides the\n-https://syncope.apache.org/apidocs/3.0/org/apache/syncope/common/rest/api/service/CamelRouteService.html[CamelRouteService^],\n-for instance.\n-\n [TIP]\n Advanced REST features are also available from `SyncopeClient` instances: check\n https://syncope.apache.org/apidocs/3.0/org/apache/syncope/client/lib/SyncopeClient.html[the javadoc^]"},{"sha":"54461774b12fbe6493c4983fb0ead11fa2636121","filename":"src/main/asciidoc/reference-guide/usage/customization.adoc","status":"modified","additions":6,"deletions":44,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fcustomization.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fcustomization.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fcustomization.adoc?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -308,30 +308,6 @@ Add the following dependency to `core/pom.xml`:\n </dependency>\n ----\n \n-[discrete]\n-===== Enable the <<apache-camel-provisioning-manager>>\n-\n-Add the following dependencies to `core/pom.xml`:\n-\n-[source,xml,subs=\"verbatim,attributes\"]\n-----\n-<dependency>\n-  <groupId>org.apache.syncope.ext.camel</groupId>\n-  <artifactId>syncope-ext-camel-rest-cxf</artifactId>\n-  <version>${syncope.version}</version>\n-</dependency>\n-<dependency>\n-  <groupId>org.apache.syncope.ext.camel</groupId>\n-  <artifactId>syncope-ext-camel-persistence-jpa</artifactId>\n-  <version>${syncope.version}</version>\n-</dependency>\n-<dependency>\n-  <groupId>org.apache.syncope.ext.camel</groupId>\n-  <artifactId>syncope-ext-camel-provisioning</artifactId>\n-  <version>${syncope.version}</version>\n-</dependency>\n-----\n-\n [discrete]\n ===== Enable the <<saml2sp4ui>> extension\n \n@@ -436,28 +412,28 @@ Adding a new REST endpoint involves several operations:\n . create - in an extension's `rest-api` module or under `common` otherwise - a Java interface with package\n `org.apache.syncope.common.rest.api.service` and proper JAX-RS annotations; check\n ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n-https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java[CamelRouteService^]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/BpmnProcessService.java[BpmnProcessService^]\n endif::[]\n ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n-https://github.com/apache/syncope/blob/master/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java[CamelRouteService^]\n+https://github.com/apache/syncope/blob/master/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/BpmnProcessService.java[BpmnProcessService^]\n endif::[]\n for reference;\n . if needed, define supporting payload objects - in an extension's `common-lib` module or under `common` otherwise;\n check\n ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n-https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/camel/common-lib/src/main/java/org/apache/syncope/common/lib/to/CamelRouteTO.java[CamelRouteTO^]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/BpmnProcess.java[BpmnProcess^]\n endif::[]\n ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n-https://github.com/apache/syncope/blob/master/ext/camel/common-lib/src/main/java/org/apache/syncope/common/lib/to/CamelRouteTO.java[CamelRouteTO^]\n+https://github.com/apache/syncope/blob/master/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/BpmnProcess.java[BpmnProcess^]\n endif::[]\n for reference;\n . implement - in an extension's `rest-cxf` module or under `core` otherwise -  the interface defined above in a Java\n class with package `org.apache.syncope.core.rest.cxf.service`; check\n ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n-https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/camel/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/CamelRouteServiceImpl.java[CamelRouteServiceImpl^]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/flowable/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/BpmnProcessServiceImpl.java[BpmnProcessServiceImpl^]\n endif::[]\n ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n-https://github.com/apache/syncope/blob/master/ext/camel/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/CamelRouteServiceImpl.java[CamelRouteServiceImpl^]\n+https://github.com/apache/syncope/blob/master/ext/flowable/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/BpmnProcessServiceImpl.java[BpmnProcessServiceImpl^]\n endif::[]\n for reference.\n \n@@ -485,20 +461,6 @@ Add the following dependency to `console/pom.xml`:\n </dependency>\n ----\n \n-[discrete]\n-===== Enable the <<apache-camel-provisioning-manager>>\n-\n-Add the following dependency to `console/pom.xml`:\n-\n-[source,xml,subs=\"verbatim,attributes\"]\n-----\n-<dependency>\n-  <groupId>org.apache.syncope.ext.camel</groupId>\n-  <artifactId>syncope-ext-camel-client-console</artifactId>\n-  <version>${syncope.version}</version>\n-</dependency> \n-----\n-\n [discrete]\n ===== Enable the <<saml2sp4ui>> extension\n "},{"sha":"be8705af72ada4b6a12dd3621dfeca60bad37251","filename":"src/site/xdoc/architecture.xml","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/src%2Fsite%2Fxdoc%2Farchitecture.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b/src%2Fsite%2Fxdoc%2Farchitecture.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fsite%2Fxdoc%2Farchitecture.xml?ref=bf0dc47b7d1bfbfebe0b8f6d6dc6eb15713ac90b","patch":"@@ -95,9 +95,6 @@ under the License.\n             This component often needs to be tailored to meet the requirements of a specific deployment, as it is the \n             crucial decision point for defining and enforcing the consistency and transformations between internal and \n             external data. The default all-Java implementation can be extended for this purpose.\n-            In addition, an <a target=\"_blank\" href=\"https://camel.apache.org/\">Apache Camel</a>-based\n-            implementation is also available as an extension, which brings all the power of runtime changes and \n-            adaptation.\n           </p>\n         </li>\n         <li>"}]}