{"sha":"b4b12bd45f2e07651be683e17fa95fd51c21f855","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI0YjEyYmQ0NWYyZTA3NjUxYmU2ODNlMTdmYTk1ZmQ1MWMyMWY4NTU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-02-27T13:28:43Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-02-27T13:28:43Z"},"message":"More java 8 friendliness","tree":{"sha":"1014bb5f06b87904aa2ecea5a368c1509af7df43","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1014bb5f06b87904aa2ecea5a368c1509af7df43"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b4b12bd45f2e07651be683e17fa95fd51c21f855","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b4b12bd45f2e07651be683e17fa95fd51c21f855","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b4b12bd45f2e07651be683e17fa95fd51c21f855","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b4b12bd45f2e07651be683e17fa95fd51c21f855/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"2a9cf78af4101f0f8c4d5b05e09d91304f5b175e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a9cf78af4101f0f8c4d5b05e09d91304f5b175e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2a9cf78af4101f0f8c4d5b05e09d91304f5b175e"}],"stats":{"total":379,"additions":167,"deletions":212},"files":[{"sha":"da5b2b4dd3ca6bc4b9bb51b26041d77afa382880","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/CommonsResultManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -91,8 +91,8 @@ protected void printConfiguration(final Collection<ConnConfProperty> props) {\n \n     protected void printDetails(final String title, final Map<String, String> details) {\n         final Table.TableBuilder tableBuilder = new Table.TableBuilder(title).header(\"detail\").header(\"value\");\n-        details.entrySet().forEach(entrySet -> {\n-            tableBuilder.rowValues(Arrays.asList(entrySet.getKey(), entrySet.getValue()));\n+        details.forEach((key, value) -> {\n+            tableBuilder.rowValues(Arrays.asList(key, value));\n         });\n         tableBuilder.build().print();\n     }"},{"sha":"82823c75d25026580bdc973dbe138deab1e005e1","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskResultManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -185,11 +185,11 @@ private void printPullTask(final PullTaskTO pullTaskTO) {\n     }\n \n     private void printTemplates(final Map<String, AnyTO> templates) {\n-        templates.entrySet().forEach(entrySet -> {\n+        templates.forEach((type, template) -> {\n             System.out.println(\"        \"\n-                    + entrySet.getKey() + \" key: \" + entrySet.getValue().getKey()\n-                    + \" of realm\" + entrySet.getValue().getRealm()\n-                    + \" on resource \" + entrySet.getValue().getResources());\n+                    + type + \" key: \" + template.getKey()\n+                    + \" of realm\" + template.getRealm()\n+                    + \" on resources \" + template.getResources());\n         });\n     }\n "},{"sha":"96374a1aca3970756b9b5c3b4fa1d204ab0c1ab8","filename":"client/console/src/main/java/org/apache/syncope/client/console/PreferenceManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -135,8 +135,8 @@ public void set(final Request request, final Response response, final Map<String\n         }\n \n         // after retrieved previous setting in order to overwrite the key ...\n-        prefs.entrySet().forEach(entry -> {\n-            current.put(entry.getKey(), StringUtils.join(entry.getValue(), \";\"));\n+        prefs.forEach((key, values) -> {\n+            current.put(key, StringUtils.join(values, \";\"));\n         });\n \n         try {"},{"sha":"bbe34cbdad0ad1257f2273e340b1a8bc10ce49ba","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -225,8 +225,8 @@ public UserTO getSelfTO() {\n     public List<String> getAuthRealms() {\n         List<String> sortable = new ArrayList<>();\n         List<String> available = SetUniqueList.setUniqueList(sortable);\n-        auth.entrySet().forEach(entitlement -> {\n-            available.addAll(entitlement.getValue());\n+        auth.values().forEach(entitlement -> {\n+            available.addAll(entitlement);\n         });\n         Collections.sort(sortable);\n         return sortable;"},{"sha":"070085e4928cef5215bcbe007a26fed60fc75732","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -530,12 +530,12 @@ protected void populateItem(final ListItem<TopologyNode> item) {\n     private List<String> createConnections(final Map<Serializable, Map<Serializable, TopologyNode>> targets) {\n         List<String> list = new ArrayList<>();\n \n-        targets.entrySet().forEach(source -> {\n-            source.getValue().entrySet().forEach(target -> {\n+        targets.forEach((key, value) -> {\n+            value.forEach((label, node) -> {\n                 list.add(String.format(\"connect('%s','%s','%s');\",\n-                        source.getKey(),\n-                        target.getKey(),\n-                        target.getValue().getKind()));\n+                        key,\n+                        label,\n+                        node.getKind()));\n             });\n         });\n         return list;"},{"sha":"92b797ffe60159e10a9a5f9c95c4183958814347","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/cocoon/XSLTTransformer.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -111,8 +111,8 @@ private void load(final Source source, final String localCacheKey, final Map<Str\n             transformerFactory = TRAX_FACTORY;\n         } else {\n             transformerFactory = createNewSAXTransformerFactory();\n-            attributes.entrySet().forEach(attribute -> {\n-                transformerFactory.setAttribute(attribute.getKey(), attribute.getValue());\n+            attributes.forEach((key, values) -> {\n+                transformerFactory.setAttribute(key, values);\n             });\n         }\n \n@@ -151,11 +151,10 @@ protected void setSAXConsumer(final SAXConsumer consumer) {\n         if (this.parameters != null) {\n             final Transformer transformer = transformerHandler.getTransformer();\n \n-            this.parameters.entrySet().forEach(entry -> {\n-                final String name = entry.getKey();\n+            this.parameters.forEach((name, values)-> {\n                 // is valid XSLT parameter name\n                 if (XSLT_PARAMETER_NAME_PATTERN.matcher(name).matches()) {\n-                    transformer.setParameter(name, entry.getValue());\n+                    transformer.setParameter(name, values);\n                 }\n             });\n         }"},{"sha":"3dc5a05ea485e23f953e40560bb1253fc468d627","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentLoader.java","status":"modified","additions":17,"deletions":21,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -20,7 +20,6 @@\n \n import java.io.IOException;\n import java.io.InputStream;\n-import java.util.Map;\n import java.util.Properties;\n import javax.annotation.Resource;\n import javax.sql.DataSource;\n@@ -55,40 +54,40 @@ public Integer getPriority() {\n \n     @Override\n     public void load() {\n-        for (Map.Entry<String, DataSource> entry : domainsHolder.getDomains().entrySet()) {\n+        domainsHolder.getDomains().forEach((domain, datasource) -> {\n             // create EntityManager so OpenJPA will build the SQL schema\n             EntityManagerFactoryUtils.findEntityManagerFactory(\n-                    ApplicationContextProvider.getBeanFactory(), entry.getKey()).createEntityManager();\n+                    ApplicationContextProvider.getBeanFactory(), domain).createEntityManager();\n \n-            JdbcTemplate jdbcTemplate = new JdbcTemplate(entry.getValue());\n+            JdbcTemplate jdbcTemplate = new JdbcTemplate(datasource);\n             boolean existingData;\n             try {\n                 existingData = jdbcTemplate.queryForObject(\"SELECT COUNT(0) FROM \" + JPAConf.TABLE, Integer.class) > 0;\n             } catch (DataAccessException e) {\n-                LOG.error(\"[{}] Could not access to table \" + JPAConf.TABLE, entry.getKey(), e);\n+                LOG.error(\"[{}] Could not access to table \" + JPAConf.TABLE, domain, e);\n                 existingData = true;\n             }\n \n             if (existingData) {\n-                LOG.info(\"[{}] Data found in the database, leaving untouched\", entry.getKey());\n+                LOG.info(\"[{}] Data found in the database, leaving untouched\", domain);\n             } else {\n-                LOG.info(\"[{}] Empty database found, loading default content\", entry.getKey());\n+                LOG.info(\"[{}] Empty database found, loading default content\", domain);\n \n                 try {\n                     ResourceWithFallbackLoader contentXML = ApplicationContextProvider.getBeanFactory().\n-                            getBean(entry.getKey() + \"ContentXML\", ResourceWithFallbackLoader.class);\n-                    loadDefaultContent(entry.getKey(), contentXML, entry.getValue());\n+                            getBean(domain + \"ContentXML\", ResourceWithFallbackLoader.class);\n+                    loadDefaultContent(domain, contentXML, datasource);\n                 } catch (Exception e) {\n-                    LOG.error(\"[{}] While loading default content\", entry.getKey(), e);\n+                    LOG.error(\"[{}] While loading default content\", domain, e);\n                 }\n                 try {\n-                    createViews(entry.getKey(), entry.getValue());\n-                    createIndexes(entry.getKey(), entry.getValue());\n+                    createViews(domain, datasource);\n+                    createIndexes(domain, datasource);\n                 } catch (IOException e) {\n-                    LOG.error(\"[{}] While creating indexes and views\", entry.getKey(), e);\n+                    LOG.error(\"[{}] While creating indexes and views\", domain, e);\n                 }\n             }\n-        }\n+        });\n     }\n \n     private void loadDefaultContent(\n@@ -97,7 +96,6 @@ private void loadDefaultContent(\n \n         SAXParserFactory factory = SAXParserFactory.newInstance();\n         try (InputStream in = contentXML.getResource().getInputStream()) {\n-\n             SAXParser parser = factory.newSAXParser();\n             parser.parse(in, new ContentLoaderHandler(dataSource, ROOT_ELEMENT, true));\n             LOG.debug(\"[{}] Default content successfully loaded\", domain);\n@@ -110,15 +108,14 @@ private void createViews(final String domain, final DataSource dataSource) throw\n         JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n \n         Properties views = PropertiesLoaderUtils.loadProperties(viewsXML.getResource());\n-        for (String idx : views.stringPropertyNames()) {\n+        views.stringPropertyNames().stream().forEach(idx -> {\n             LOG.debug(\"[{}] Creating view {}\", domain, views.get(idx).toString());\n-\n             try {\n                 jdbcTemplate.execute(views.get(idx).toString().replaceAll(\"\\\\n\", \" \"));\n             } catch (DataAccessException e) {\n                 LOG.error(\"[{}] Could not create view\", domain, e);\n             }\n-        }\n+        });\n \n         LOG.debug(\"Views created\");\n     }\n@@ -129,15 +126,14 @@ private void createIndexes(final String domain, final DataSource dataSource) thr\n         JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n \n         Properties indexes = PropertiesLoaderUtils.loadProperties(indexesXML.getResource());\n-        for (String idx : indexes.stringPropertyNames()) {\n+        indexes.stringPropertyNames().stream().forEach(idx -> {\n             LOG.debug(\"[{}] Creating index {}\", domain, indexes.get(idx).toString());\n-\n             try {\n                 jdbcTemplate.execute(indexes.get(idx).toString());\n             } catch (DataAccessException e) {\n                 LOG.error(\"[{}] Could not create index\", domain, e);\n             }\n-        }\n+        });\n \n         LOG.debug(\"Indexes created\");\n     }"},{"sha":"a7dcd970b1792aa4b155a1bba3d51add03c8a844","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/PropagationByResource.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -25,6 +25,7 @@\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import java.util.stream.Stream;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n \n /**\n@@ -272,11 +273,10 @@ public final Set<String> get(final ResourceOperation type) {\n \n     public Map<String, ResourceOperation> asMap() {\n         Map<String, ResourceOperation> result = new HashMap<>();\n-        for (ResourceOperation operation : ResourceOperation.values()) {\n-            for (String resourceKey : get(operation)) {\n-                result.put(resourceKey, operation);\n-            }\n-        }\n+        Stream.of(ResourceOperation.values()).\n+                forEach(operation -> get(operation).forEach(resource -> {\n+            result.put(resource, operation);\n+        }));\n \n         return result;\n     }"},{"sha":"4346c1abada04beab5dc0f026622b1459a5e7190","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":20,"deletions":21,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -262,20 +262,19 @@ private SyncopeClientException checkMandatory(final Any<?> any, final AnyUtils a\n \n         // Check if there is some mandatory schema defined for which no value has been provided\n         AllowedSchemas<PlainSchema> allowedPlainSchemas = anyUtils.getAllowedSchemas(any, PlainSchema.class);\n-        allowedPlainSchemas.getForSelf().\n-                forEach(schema -> {\n-                    checkMandatory(schema, any.getPlainAttr(schema.getKey()).orElse(null), any, reqValMissing);\n-                });\n-        allowedPlainSchemas.getForMemberships().entrySet().stream().\n-                filter(entry -> any instanceof GroupableRelatable).\n-                forEachOrdered(entry -> {\n-                    GroupableRelatable<?, ?, ?, ?, ?> groupable = GroupableRelatable.class.cast(any);\n-                    Membership<?> membership = groupable.getMembership(entry.getKey().getKey()).orElse(null);\n-                    entry.getValue().forEach(schema -> {\n-                        checkMandatory(schema, groupable.getPlainAttr(schema.getKey(), membership).orElse(null),\n-                                any, reqValMissing);\n-                    });\n+        allowedPlainSchemas.getForSelf().forEach(schema -> {\n+            checkMandatory(schema, any.getPlainAttr(schema.getKey()).orElse(null), any, reqValMissing);\n+        });\n+        if (any instanceof GroupableRelatable) {\n+            allowedPlainSchemas.getForMemberships().forEach((group, schemas) -> {\n+                GroupableRelatable<?, ?, ?, ?, ?> groupable = GroupableRelatable.class.cast(any);\n+                Membership<?> membership = groupable.getMembership(group.getKey()).orElse(null);\n+                schemas.forEach(schema -> {\n+                    checkMandatory(schema, groupable.getPlainAttr(schema.getKey(), membership).orElse(null),\n+                            any, reqValMissing);\n                 });\n+            });\n+        }\n \n         return reqValMissing;\n     }\n@@ -623,19 +622,19 @@ protected MembershipTO getMembershipTO(\n                     build());\n         });\n \n-        derAttrs.entrySet().forEach(entry -> {\n+        derAttrs.forEach((schema, value) -> {\n             membershipTO.getDerAttrs().add(new AttrTO.Builder().\n-                    schema(entry.getKey().getKey()).\n-                    value(entry.getValue()).\n-                    schemaInfo(schemaDataBinder.getDerSchemaTO(entry.getKey())).\n+                    schema(schema.getKey()).\n+                    value(value).\n+                    schemaInfo(schemaDataBinder.getDerSchemaTO(schema)).\n                     build());\n         });\n \n-        virAttrs.entrySet().forEach(entry -> {\n+        virAttrs.forEach((schema, values) -> {\n             membershipTO.getVirAttrs().add(new AttrTO.Builder().\n-                    schema(entry.getKey().getKey()).\n-                    values(entry.getValue()).\n-                    schemaInfo(schemaDataBinder.getVirSchemaTO(entry.getKey())).\n+                    schema(schema.getKey()).\n+                    values(values).\n+                    schemaInfo(schemaDataBinder.getVirSchemaTO(schema)).\n                     build());\n         });\n "},{"sha":"7801b46024001c741595900bc67f1475d30ba491","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/DynRealmDataBinderImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -87,12 +87,12 @@ public DynRealm update(final DynRealm toBeUpdated, final DynRealmTO dynRealmTO)\n         }\n         dynRealmDAO.clearDynMembers(dynRealm);\n \n-        dynRealmTO.getDynMembershipConds().entrySet().forEach(entry -> {\n-            AnyType anyType = anyTypeDAO.find(entry.getKey());\n+        dynRealmTO.getDynMembershipConds().forEach((type, fiql) -> {\n+            AnyType anyType = anyTypeDAO.find(type);\n             if (anyType == null) {\n-                LOG.warn(\"Ignoring invalid {}: {}\", AnyType.class.getSimpleName(), entry.getKey());\n+                LOG.warn(\"Ignoring invalid {}: {}\", AnyType.class.getSimpleName(), type);\n             } else {\n-                setDynMembership(dynRealm, anyType, entry.getValue());\n+                setDynMembership(dynRealm, anyType, fiql);\n             }\n         });\n "},{"sha":"ce8df6621be56d10d2cf6c0c5b0b4dd56f61c5eb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":8,"deletions":16,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -142,12 +142,12 @@ public void create(final Group group, final GroupTO groupTO) {\n         if (groupTO.getUDynMembershipCond() != null) {\n             setDynMembership(group, anyTypeDAO.findUser(), groupTO.getUDynMembershipCond());\n         }\n-        groupTO.getADynMembershipConds().entrySet().forEach(entry -> {\n-            AnyType anyType = anyTypeDAO.find(entry.getKey());\n+        groupTO.getADynMembershipConds().forEach((type, fiql) -> {\n+            AnyType anyType = anyTypeDAO.find(type);\n             if (anyType == null) {\n-                LOG.warn(\"Ignoring invalid {}: {}\", AnyType.class.getSimpleName(), entry.getKey());\n+                LOG.warn(\"Ignoring invalid {}: {}\", AnyType.class.getSimpleName(), type);\n             } else {\n-                setDynMembership(group, anyType, entry.getValue());\n+                setDynMembership(group, anyType, fiql);\n             }\n         });\n \n@@ -284,12 +284,8 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n                     }\n                 }\n                 // remove all classes not contained in the TO\n-                for (Iterator<? extends AnyTypeClass> itor = typeExt.getAuxClasses().iterator(); itor.hasNext();) {\n-                    AnyTypeClass anyTypeClass = itor.next();\n-                    if (!typeExtTO.getAuxClasses().contains(anyTypeClass.getKey())) {\n-                        itor.remove();\n-                    }\n-                }\n+                typeExt.getAuxClasses().\n+                        removeIf(anyTypeClass -> !typeExtTO.getAuxClasses().contains(anyTypeClass.getKey()));\n \n                 // only consider non-empty type extensions\n                 if (typeExt.getAuxClasses().isEmpty()) {\n@@ -299,12 +295,8 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n             }\n         }\n         // remove all type extensions not contained in the TO\n-        for (Iterator<? extends TypeExtension> itor = group.getTypeExtensions().iterator(); itor.hasNext();) {\n-            TypeExtension typeExt = itor.next();\n-            if (!groupPatch.getTypeExtension(typeExt.getAnyType().getKey()).isPresent()) {\n-                itor.remove();\n-            }\n-        }\n+        group.getTypeExtensions().\n+                removeIf(typeExt -> !groupPatch.getTypeExtension(typeExt.getAnyType().getKey()).isPresent());\n \n         // Throw composite exception if there is at least one element set in the composing exceptions\n         if (scce.hasExceptions()) {"},{"sha":"b4131ac998d985689cb7533628aebe723bc08cbb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/NotificationDataBinderImpl.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -20,7 +20,6 @@\n \n import java.text.ParseException;\n import java.util.regex.Matcher;\n-import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -144,9 +143,8 @@ public void update(final Notification notification, final NotificationTO notific\n                 });\n \n         // 2. remove all abouts not contained in the TO\n-        notification.getAbouts().removeAll(notification.getAbouts().stream().\n-                filter(anyAbout -> !notificationTO.getAbouts().containsKey(anyAbout.getAnyType().getKey())).\n-                collect(Collectors.toList()));\n+        notification.getAbouts().\n+                removeIf(anyAbout -> !notificationTO.getAbouts().containsKey(anyAbout.getAnyType().getKey()));\n \n         // 3. verify recipientAttrName\n         try {"},{"sha":"a1a400c6b6568c12cb58587d532fb3bbf967c995","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":13,"deletions":17,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -89,9 +89,8 @@ private <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO)\n                 }\n             });\n             // remove all implementations not contained in the TO\n-            passwordPolicy.getRules().removeAll(passwordPolicy.getRules().stream().\n-                    filter(implementation -> !passwordPolicyTO.getRules().contains(implementation.getKey())).\n-                    collect(Collectors.toList()));\n+            passwordPolicy.getRules().\n+                    removeIf(implementation -> !passwordPolicyTO.getRules().contains(implementation.getKey()));\n         } else if (policyTO instanceof AccountPolicyTO) {\n             if (result == null) {\n                 result = (T) entityFactory.newEntity(AccountPolicy.class);\n@@ -112,9 +111,8 @@ private <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO)\n                 }\n             });\n             // remove all implementations not contained in the TO\n-            accountPolicy.getRules().removeAll(accountPolicy.getRules().stream().\n-                    filter(implementation -> !accountPolicyTO.getRules().contains(implementation.getKey())).\n-                    collect(Collectors.toList()));\n+            accountPolicy.getRules().\n+                    removeIf(implementation -> !accountPolicyTO.getRules().contains(implementation.getKey()));\n \n             accountPolicy.getResources().clear();\n             accountPolicyTO.getPassthroughResources().forEach(resourceName -> {\n@@ -135,10 +133,10 @@ private <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO)\n \n             pullPolicy.setConflictResolutionAction(pullPolicyTO.getConflictResolutionAction());\n \n-            pullPolicyTO.getCorrelationRules().entrySet().forEach(entry -> {\n-                AnyType anyType = anyTypeDAO.find(entry.getKey());\n+            pullPolicyTO.getCorrelationRules().forEach((type, impl) -> {\n+                AnyType anyType = anyTypeDAO.find(type);\n                 if (anyType == null) {\n-                    LOG.debug(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());\n+                    LOG.debug(\"Invalid AnyType {} specified, ignoring...\", type);\n                 } else {\n                     CorrelationRule correlationRule = pullPolicy.getCorrelationRule(anyType).orElse(null);\n                     if (correlationRule == null) {\n@@ -148,18 +146,16 @@ private <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO)\n                         pullPolicy.add(correlationRule);\n                     }\n \n-                    Implementation implementation = implementationDAO.find(entry.getValue());\n-                    if (implementation == null) {\n-                        throw new NotFoundException(\"Implementation \" + entry.getValue());\n+                    Implementation rule = implementationDAO.find(impl);\n+                    if (rule == null) {\n+                        throw new NotFoundException(\"Implementation \" + type);\n                     }\n-                    correlationRule.setImplementation(implementation);\n+                    correlationRule.setImplementation(rule);\n                 }\n             });\n             // remove all rules not contained in the TO\n-            pullPolicy.getCorrelationRules().removeAll(\n-                    pullPolicy.getCorrelationRules().stream().filter(anyFilter\n-                            -> !pullPolicyTO.getCorrelationRules().containsKey(anyFilter.getAnyType().getKey())).\n-                            collect(Collectors.toList()));\n+            pullPolicy.getCorrelationRules().removeIf(anyFilter\n+                    -> !pullPolicyTO.getCorrelationRules().containsKey(anyFilter.getAnyType().getKey()));\n         }\n \n         if (result != null) {"},{"sha":"2122154d905ce65afb760455c8ae988a787504cd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java","status":"modified","additions":15,"deletions":20,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -74,10 +73,10 @@ public class RealmDataBinderImpl implements RealmDataBinder {\n     private void setTemplates(final RealmTO realmTO, final Realm realm) {\n         // validate JEXL expressions from templates and proceed if fine\n         templateUtils.check(realmTO.getTemplates(), ClientExceptionType.InvalidRealm);\n-        realmTO.getTemplates().entrySet().forEach(entry -> {\n-            AnyType type = anyTypeDAO.find(entry.getKey());\n+        realmTO.getTemplates().forEach((key, template) -> {\n+            AnyType type = anyTypeDAO.find(key);\n             if (type == null) {\n-                LOG.debug(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());\n+                LOG.debug(\"Invalid AnyType {} specified, ignoring...\", key);\n             } else {\n                 AnyTemplateRealm anyTemplate = realm.getTemplate(type).orElse(null);\n                 if (anyTemplate == null) {\n@@ -87,14 +86,12 @@ private void setTemplates(final RealmTO realmTO, final Realm realm) {\n \n                     realm.add(anyTemplate);\n                 }\n-                anyTemplate.set(entry.getValue());\n+                anyTemplate.set(template);\n             }\n         });\n         // remove all templates not contained in the TO\n-        realm.getTemplates().removeAll(\n-                realm.getTemplates().stream().\n-                        filter(anyTemplate -> !realmTO.getTemplates().containsKey(anyTemplate.getAnyType().getKey())).\n-                        collect(Collectors.toList()));\n+        realm.getTemplates().\n+                removeIf(template -> !realmTO.getTemplates().containsKey(template.getAnyType().getKey()));\n     }\n \n     @Override\n@@ -192,9 +189,8 @@ public PropagationByResource update(final Realm realm, final RealmTO realmTO) {\n             }\n         });\n         // remove all implementations not contained in the TO\n-        realm.getActions().removeAll(realm.getActions().stream().\n-                filter(implementation -> !realmTO.getActions().contains(implementation.getKey())).\n-                collect(Collectors.toList()));\n+        realm.getActions().\n+                removeIf(implementation -> !realmTO.getActions().contains(implementation.getKey()));\n \n         setTemplates(realmTO, realm);\n \n@@ -209,14 +205,13 @@ public PropagationByResource update(final Realm realm, final RealmTO realmTO) {\n             }\n         });\n         // remove all resources not contained in the TO\n-        realm.getResources().removeAll(\n-                realm.getResources().stream().filter(resource -> {\n-                    boolean contained = realmTO.getResources().contains(resource.getKey());\n-                    if (!contained) {\n-                        propByRes.add(ResourceOperation.DELETE, resource.getKey());\n-                    }\n-                    return !contained;\n-                }).collect(Collectors.toList()));\n+        realm.getResources().removeIf(resource -> {\n+            boolean contained = realmTO.getResources().contains(resource.getKey());\n+            if (!contained) {\n+                propByRes.add(ResourceOperation.DELETE, resource.getKey());\n+            }\n+            return !contained;\n+        });\n \n         return propByRes;\n     }"},{"sha":"ed1b3a20b075bbc987f1be25d7760b844c37fe24","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -88,9 +88,7 @@ public void getReport(final Report report, final ReportTO reportTO) {\n             }\n         });\n         // remove all implementations not contained in the TO\n-        report.getReportlets().removeAll(report.getReportlets().stream().\n-                filter(reportlet -> !reportTO.getReportlets().contains(reportlet.getKey())).\n-                collect(Collectors.toList()));\n+        report.getReportlets().removeIf(reportlet -> !reportTO.getReportlets().contains(reportlet.getKey()));\n     }\n \n     @Override"},{"sha":"7e5cea6a1e34b9524ee0755e1a564673e833ba1d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":8,"deletions":15,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -193,12 +193,8 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                     }\n                 }\n                 // remove all classes not contained in the TO\n-                for (Iterator<? extends AnyTypeClass> itor = provision.getAuxClasses().iterator(); itor.hasNext();) {\n-                    AnyTypeClass anyTypeClass = itor.next();\n-                    if (!provisionTO.getAuxClasses().contains(anyTypeClass.getKey())) {\n-                        itor.remove();\n-                    }\n-                }\n+                provision.getAuxClasses().\n+                        removeIf(anyTypeClass -> !provisionTO.getAuxClasses().contains(anyTypeClass.getKey()));\n \n                 if (provisionTO.getMapping() == null) {\n                     provision.setMapping(null);\n@@ -338,9 +334,8 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                             }\n                         });\n                         // remove all implementations not contained in the TO\n-                        item.getTransformers().removeAll(item.getTransformers().stream().\n-                                filter(implementation -> !itemTO.getTransformers().contains(implementation.getKey())).\n-                                collect(Collectors.toList()));\n+                        item.getTransformers().\n+                                removeIf(implementation -> !itemTO.getTransformers().contains(implementation.getKey()));\n                     }\n                 }\n             }\n@@ -381,9 +376,8 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n             }\n         });\n         // remove all implementations not contained in the TO\n-        resource.getPropagationActions().removeAll(resource.getPropagationActions().stream().\n-                filter(implementation -> !resourceTO.getPropagationActions().contains(implementation.getKey())).\n-                collect(Collectors.toList()));\n+        resource.getPropagationActions().\n+                removeIf(implementation -> !resourceTO.getPropagationActions().contains(implementation.getKey()));\n \n         return resource;\n     }\n@@ -481,9 +475,8 @@ private void populateMapping(\n                             }\n                         });\n                         // remove all implementations not contained in the TO\n-                        item.getTransformers().removeAll(item.getTransformers().stream().\n-                                filter(implementation -> !itemTO.getTransformers().contains(implementation.getKey())).\n-                                collect(Collectors.toList()));\n+                        item.getTransformers().\n+                                removeIf(implementation -> !itemTO.getTransformers().contains(implementation.getKey()));\n \n                         if (intAttrName.getEnclosingGroup() != null\n                                 && item.getPurpose() != MappingPurpose.PROPAGATION) {"},{"sha":"1b30e59aecf37295c412fc9b4af4185799f7c32d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":16,"deletions":22,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -140,10 +140,10 @@ private void fill(final ProvisioningTask task, final ProvisioningTaskTO taskTO)\n             pushTask.setUnmatchingRule(pushTaskTO.getUnmatchingRule() == null\n                     ? UnmatchingRule.ASSIGN : pushTaskTO.getUnmatchingRule());\n \n-            pushTaskTO.getFilters().entrySet().forEach(entry -> {\n-                AnyType anyType = anyTypeDAO.find(entry.getKey());\n+            pushTaskTO.getFilters().forEach((type, fiql) -> {\n+                AnyType anyType = anyTypeDAO.find(type);\n                 if (anyType == null) {\n-                    LOG.debug(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());\n+                    LOG.debug(\"Invalid AnyType {} specified, ignoring...\", type);\n                 } else {\n                     PushTaskAnyFilter filter = pushTask.getFilter(anyType).orElse(null);\n                     if (filter == null) {\n@@ -152,14 +152,12 @@ private void fill(final ProvisioningTask task, final ProvisioningTaskTO taskTO)\n                         filter.setPushTask(pushTask);\n                         pushTask.add(filter);\n                     }\n-                    filter.setFIQLCond(entry.getValue());\n+                    filter.setFIQLCond(fiql);\n                 }\n             });\n             // remove all filters not contained in the TO\n-            pushTask.getFilters().removeAll(\n-                    pushTask.getFilters().stream().filter(anyFilter\n-                            -> !pushTaskTO.getFilters().containsKey(anyFilter.getAnyType().getKey())).\n-                            collect(Collectors.toList()));\n+            pushTask.getFilters().\n+                    removeIf(anyFilter -> !pushTaskTO.getFilters().containsKey(anyFilter.getAnyType().getKey()));\n         } else if (task instanceof PullTask && taskTO instanceof PullTaskTO) {\n             PullTask pullTask = (PullTask) task;\n             PullTaskTO pullTaskTO = (PullTaskTO) taskTO;\n@@ -202,27 +200,25 @@ private void fill(final ProvisioningTask task, final ProvisioningTaskTO taskTO)\n \n             // validate JEXL expressions from templates and proceed if fine\n             templateUtils.check(pullTaskTO.getTemplates(), ClientExceptionType.InvalidPullTask);\n-            pullTaskTO.getTemplates().entrySet().forEach(entry -> {\n-                AnyType type = anyTypeDAO.find(entry.getKey());\n-                if (type == null) {\n-                    LOG.debug(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());\n+            pullTaskTO.getTemplates().forEach((type, template) -> {\n+                AnyType anyType = anyTypeDAO.find(type);\n+                if (anyType == null) {\n+                    LOG.debug(\"Invalid AnyType {} specified, ignoring...\", type);\n                 } else {\n-                    AnyTemplatePullTask anyTemplate = pullTask.getTemplate(type).orElse(null);\n+                    AnyTemplatePullTask anyTemplate = pullTask.getTemplate(anyType).orElse(null);\n                     if (anyTemplate == null) {\n                         anyTemplate = entityFactory.newEntity(AnyTemplatePullTask.class);\n-                        anyTemplate.setAnyType(type);\n+                        anyTemplate.setAnyType(anyType);\n                         anyTemplate.setPullTask(pullTask);\n \n                         pullTask.add(anyTemplate);\n                     }\n-                    anyTemplate.set(entry.getValue());\n+                    anyTemplate.set(template);\n                 }\n             });\n             // remove all templates not contained in the TO\n-            pullTask.getTemplates().removeAll(\n-                    pullTask.getTemplates().stream().filter(anyTemplate\n-                            -> !pullTaskTO.getTemplates().containsKey(anyTemplate.getAnyType().getKey())).\n-                            collect(Collectors.toList()));\n+            pullTask.getTemplates().\n+                    removeIf(anyTemplate -> !pullTaskTO.getTemplates().containsKey(anyTemplate.getAnyType().getKey()));\n         }\n \n         // 3. fill the remaining fields\n@@ -240,9 +236,7 @@ private void fill(final ProvisioningTask task, final ProvisioningTaskTO taskTO)\n             }\n         });\n         // remove all implementations not contained in the TO\n-        task.getActions().removeAll(task.getActions().stream().\n-                filter(implementation -> !taskTO.getActions().contains(implementation.getKey())).\n-                collect(Collectors.toList()));\n+        task.getActions().removeIf(implementation -> !taskTO.getActions().contains(implementation.getKey()));\n     }\n \n     @Override"},{"sha":"b2eaebba3a83553ab5294cd91ac755775513d612","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/JexlUtils.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FJexlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FJexlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FJexlUtils.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -213,8 +213,8 @@ public static void addDerAttrsToContext(final Any<?> any, final JexlContext jexl\n         Map<DerSchema, String> derAttrs =\n                 ApplicationContextProvider.getBeanFactory().getBean(DerAttrHandler.class).getValues(any);\n \n-        derAttrs.entrySet().forEach(entry -> {\n-            jexlContext.set(entry.getKey().getKey(), entry.getValue());\n+        derAttrs.forEach((schema, value) -> {\n+            jexlContext.set(schema.getKey(), value);\n         });\n     }\n "},{"sha":"25da1f4df4a5ab5e2d784e4f0852af01c3256ec1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReconciliationReportlet.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -337,23 +337,23 @@ private void doExtract(final ContentHandler handler, final List<? extends Any<?>\n                                             Collections.emptySet()));\n                                 });\n \n-                        resourceAttrs.entrySet().forEach(entry -> {\n-                            if (syncopeAttrs.containsKey(entry.getKey())) {\n-                                if (!Objects.equals(syncopeAttrs.get(entry.getKey()), entry.getValue())) {\n+                        resourceAttrs.forEach((key, values) -> {\n+                            if (syncopeAttrs.containsKey(key)) {\n+                                if (!Objects.equals(syncopeAttrs.get(key), values)) {\n                                     misaligned.add(new Misaligned(\n                                             resource.getKey(),\n                                             connObjectKeyValue,\n-                                            entry.getKey(),\n-                                            syncopeAttrs.get(entry.getKey()),\n-                                            entry.getValue()));\n+                                            key,\n+                                            syncopeAttrs.get(key),\n+                                            values));\n                                 }\n                             } else {\n                                 misaligned.add(new Misaligned(\n                                         resource.getKey(),\n                                         connObjectKeyValue,\n-                                        entry.getKey(),\n+                                        key,\n                                         Collections.emptySet(),\n-                                        entry.getValue()));\n+                                        values));\n                             }\n                         });\n                     }"},{"sha":"be97bb53beed4db51383db33c388cc5bf16494bc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -113,7 +113,7 @@ protected void doExecute(\n         });\n \n         // then process non-priority resources concurrently...\n-        final CompletionService<TaskExec> completionService = new ExecutorCompletionService<>(executor);\n+        CompletionService<TaskExec> completionService = new ExecutorCompletionService<>(executor);\n         Map<PropagationTaskTO, Future<TaskExec>> nullPriority = new HashMap<>(concurrentTasks.size());\n         concurrentTasks.forEach(task -> {\n             try {\n@@ -127,9 +127,9 @@ protected void doExecute(\n         // ...waiting for all callables to complete, if async processing was not required\n         if (!nullPriority.isEmpty()) {\n             if (nullPriorityAsync) {\n-                nullPriority.entrySet().forEach(entry -> {\n+                nullPriority.forEach((task, exec) -> {\n                     reporter.onSuccessOrNonPriorityResourceFailures(\n-                            entry.getKey(), PropagationTaskExecStatus.CREATED, null, null, null);\n+                            task, PropagationTaskExecStatus.CREATED, null, null, null);\n                 });\n             } else {\n                 final Set<Future<TaskExec>> nullPriorityFutures = new HashSet<>(nullPriority.values());"},{"sha":"2b8f314967524db9c07c595e54c58df67f2c281b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -361,15 +361,15 @@ protected List<PropagationTaskTO> createTasks(final Any<?> any,\n \n         List<PropagationTaskTO> tasks = new ArrayList<>();\n \n-        propByRes.asMap().entrySet().forEach(entry -> {\n-            ExternalResource resource = resourceDAO.find(entry.getKey());\n+        propByRes.asMap().forEach((resourceKey, operation) -> {\n+            ExternalResource resource = resourceDAO.find(resourceKey);\n             Provision provision = resource == null ? null : resource.getProvision(any.getType()).orElse(null);\n             List<? extends Item> mappingItems = provision == null\n                     ? Collections.<Item>emptyList()\n                     : MappingUtils.getPropagationItems(provision.getMapping().getItems());\n \n             if (resource == null) {\n-                LOG.error(\"Invalid resource name specified: {}, ignoring...\", entry.getKey());\n+                LOG.error(\"Invalid resource name specified: {}, ignoring...\", resourceKey);\n             } else if (provision == null) {\n                 LOG.error(\"No provision specified on resource {} for type {}, ignoring...\",\n                         resource, any.getType());\n@@ -385,7 +385,7 @@ protected List<PropagationTaskTO> createTasks(final Any<?> any,\n                 if (!deleteOnResource) {\n                     task.setEntityKey(any.getKey());\n                 }\n-                task.setOperation(entry.getValue());\n+                task.setOperation(operation);\n                 task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resource.getKey()));\n \n                 Pair<String, Set<Attribute>> preparedAttrs =\n@@ -448,12 +448,12 @@ public List<PropagationTaskTO> createTasks(\n \n         List<PropagationTaskTO> tasks = new ArrayList<>();\n \n-        propByRes.asMap().entrySet().forEach(entry -> {\n-            ExternalResource resource = resourceDAO.find(entry.getKey());\n+        propByRes.asMap().forEach((resourceKey, operation) -> {\n+            ExternalResource resource = resourceDAO.find(resourceKey);\n             OrgUnit orgUnit = resource == null ? null : resource.getOrgUnit();\n \n             if (resource == null) {\n-                LOG.error(\"Invalid resource name specified: {}, ignoring...\", entry.getKey());\n+                LOG.error(\"Invalid resource name specified: {}, ignoring...\", resourceKey);\n             } else if (orgUnit == null) {\n                 LOG.error(\"No orgUnit specified on resource {}, ignoring...\", resource);\n             } else if (StringUtils.isBlank(orgUnit.getConnObjectLink())) {\n@@ -464,7 +464,7 @@ public List<PropagationTaskTO> createTasks(\n                 task.setResource(resource.getKey());\n                 task.setObjectClassName(orgUnit.getObjectClass().getObjectClassValue());\n                 task.setEntityKey(realm.getKey());\n-                task.setOperation(entry.getValue());\n+                task.setOperation(operation);\n                 task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resource.getKey()));\n \n                 Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrs(realm, orgUnit);"},{"sha":"6418f9ced6f495fb317396ed9aac9e0bcaae50b9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/GoogleAppsPullActions.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FGoogleAppsPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FGoogleAppsPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FGoogleAppsPullActions.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -128,10 +128,10 @@ public void after(\n     @Transactional\n     @Override\n     public void afterAll(final ProvisioningProfile<?, ?> profile) throws JobExecutionException {\n-        googleAppsIds.entrySet().forEach((entry) -> {\n-            User user = userDAO.find(entry.getKey());\n+        googleAppsIds.forEach((key, value) -> {\n+            User user = userDAO.find(key);\n             if (user == null) {\n-                LOG.error(\"Could not find user {}, skipping\", entry.getKey());\n+                LOG.error(\"Could not find user {}, skipping\", key);\n             } else {\n                 AnyUtils anyUtils = anyUtilsFactory.getInstance(user);\n \n@@ -148,11 +148,10 @@ public void afterAll(final ProvisioningProfile<?, ?> profile) throws JobExecutio\n                         user.add(attr);\n \n                         try {\n-                            attr.add(entry.getValue(), anyUtils);\n+                            attr.add(value, anyUtils);\n                             userDAO.save(user);\n                         } catch (InvalidPlainAttrValueException e) {\n-                            LOG.error(\"Invalid value for attribute {}: {}\",\n-                                    googleAppsId.getKey(), entry.getValue(), e);\n+                            LOG.error(\"Invalid value for attribute {}: {}\", googleAppsId.getKey(), value, e);\n                         }\n                     } else {\n                         LOG.debug(\"User {} has already a googleAppsId assigned: {}\", user, attr.getValuesAsStrings());"},{"sha":"55f72f5736c0ec910176aafaac93997aeb996156","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -172,16 +172,16 @@ public void after(\n     @Override\n     public void afterAll(final ProvisioningProfile<?, ?> profile) throws JobExecutionException {\n         Map<String, Set<String>> resolvedMemberships = new HashMap<>();\n-        this.memberships.entrySet().forEach(entry -> {\n+        this.memberships.forEach((name, memb) -> {\n             Optional<String> userKey = pullUtils.findMatchingAnyKey(\n                     anyTypeDAO.findUser(),\n-                    entry.getKey(),\n+                    name,\n                     profile.getTask().getResource(),\n                     profile.getConnector());\n             if (userKey.isPresent()) {\n-                resolvedMemberships.put(userKey.get(), entry.getValue());\n+                resolvedMemberships.put(userKey.get(), memb);\n             } else {\n-                LOG.warn(\"Could not find matching user for {}\", entry.getKey());\n+                LOG.warn(\"Could not find matching user for {}\", name);\n             }\n         });\n "},{"sha":"49667db3bd209af9cea1cb68413a1ddea2174923","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -110,9 +109,6 @@ public class PullUtils {\n     @Autowired\n     private RealmDAO realmDAO;\n \n-    @Autowired\n-    private ImplementationDAO implementationDAO;\n-\n     @Autowired\n     private AnyUtilsFactory anyUtilsFactory;\n "},{"sha":"5d090b265dcc9a1aecbddaa3f8fca07ac7905763","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -200,23 +200,23 @@ public <T extends AnyTO> void apply(final T anyTO, final AnyTO template) {\n     public void check(final Map<String, AnyTO> templates, final ClientExceptionType clientExceptionType) {\n         SyncopeClientException sce = SyncopeClientException.build(clientExceptionType);\n \n-        templates.entrySet().forEach(entry -> {\n-            entry.getValue().getPlainAttrs().stream().\n+        templates.values().forEach(value -> {\n+            value.getPlainAttrs().stream().\n                     filter(attrTO -> !attrTO.getValues().isEmpty()\n                     && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))).\n                     forEachOrdered(attrTO -> {\n                         sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n                     });\n \n-            entry.getValue().getVirAttrs().stream().\n+            value.getVirAttrs().stream().\n                     filter(attrTO -> !attrTO.getValues().isEmpty()\n                     && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))).\n                     forEachOrdered((attrTO) -> {\n                         sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n                     });\n \n-            if (entry.getValue() instanceof UserTO) {\n-                UserTO template = (UserTO) entry.getValue();\n+            if (value instanceof UserTO) {\n+                UserTO template = (UserTO) value;\n                 if (StringUtils.isNotBlank(template.getUsername())\n                         && !JexlUtils.isExpressionValid(template.getUsername())) {\n \n@@ -227,8 +227,8 @@ public void check(final Map<String, AnyTO> templates, final ClientExceptionType\n \n                     sce.getElements().add(\"Invalid JEXL: \" + template.getPassword());\n                 }\n-            } else if (entry.getValue() instanceof GroupTO) {\n-                GroupTO template = (GroupTO) entry.getValue();\n+            } else if (value instanceof GroupTO) {\n+                GroupTO template = (GroupTO) value;\n                 if (StringUtils.isNotBlank(template.getName())\n                         && !JexlUtils.isExpressionValid(template.getName())) {\n "},{"sha":"83be1d326026e8d5a68f592980f19633035a5bd6","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchClientFactoryBean.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4b12bd45f2e07651be683e17fa95fd51c21f855/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4b12bd45f2e07651be683e17fa95fd51c21f855/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientFactoryBean.java?ref=b4b12bd45f2e07651be683e17fa95fd51c21f855","patch":"@@ -51,8 +51,8 @@ public Client getObject() throws Exception {\n         synchronized (this) {\n             if (client == null) {\n                 Settings.Builder builder = Settings.builder();\n-                settings.entrySet().forEach(entry -> {\n-                    builder.put(entry.getKey(), entry.getValue());\n+                settings.forEach((key, value) -> {\n+                    builder.put(key, value);\n                 });\n \n                 PreBuiltTransportClient tClient = new PreBuiltTransportClient(builder.build());"}]}