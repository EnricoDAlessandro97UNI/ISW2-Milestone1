{"sha":"7309dd303f2fe9238df4b69776f6284a87549599","node_id":"C_kwDOJfYA1toAKDczMDlkZDMwM2YyZmU5MjM4ZGY0YjY5Nzc2ZjYyODRhODc1NDk1OTk","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-03-10T15:32:22Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-03-10T15:32:22Z"},"message":"[SYNCOPE-1332] Moving to Java 8 DateTime APIs (#324)","tree":{"sha":"e51bddade723f4636171f0e3ed492addad8f4586","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e51bddade723f4636171f0e3ed492addad8f4586"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7309dd303f2fe9238df4b69776f6284a87549599","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiKhoGCRBK7hj4Ov3rIwAACAUIAElXHloe7bGpOxn/DtEeh7og\nKeG29Tb0wvCr7oi3GAaholWSsaZ3xY3Ym1SeVTNLYP6VrqbbabwXzBLIWLpagFBa\nvojdOSrle4kkwxIk/JzTUFl9hocoMQJw3odiTFjJAdQnIdKViAFKyEu1iORsFU+r\nfkPrH2A1Tn46/taZEI5tp74w/8VnaFR06+xGteooDhKgYIk6khUfJLl+12ixT2om\nWMPbKYGmyvSIMH7OpWz/Kty57TesGhs1EG2GyVoUEDzlH95mdch3iTfx/c5nJSO4\nLi5UrvyB0tbQj6E5XuQZeLeLfmr4iAC4SAlJ9vXtZxTmlkxKkE/dJbImKVotMos=\n=WA3I\n-----END PGP SIGNATURE-----\n","payload":"tree e51bddade723f4636171f0e3ed492addad8f4586\nparent f8a6b6c972b5b60584475437c10df1e699b1bcee\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1646926342 +0100\ncommitter GitHub <noreply@github.com> 1646926342 +0100\n\n[SYNCOPE-1332] Moving to Java 8 DateTime APIs (#324)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7309dd303f2fe9238df4b69776f6284a87549599","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7309dd303f2fe9238df4b69776f6284a87549599","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7309dd303f2fe9238df4b69776f6284a87549599/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"f8a6b6c972b5b60584475437c10df1e699b1bcee","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f8a6b6c972b5b60584475437c10df1e699b1bcee","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f8a6b6c972b5b60584475437c10df1e699b1bcee"}],"stats":{"total":3886,"additions":1927,"deletions":1959},"files":[{"sha":"520aa0a1dfaeba6532099d1998b94010081c2811","filename":"archetype/src/main/resources/archetype-resources/fit/pom.xml","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Ffit%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Ffit%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Ffit%2Fpom.xml?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -219,6 +219,13 @@ under the License.\n                 <artifactId>h2</artifactId>\n               </dependency>\n             </dependencies>\n+\n+            <systemProperties>\n+              <java.security.egd>file:/dev/./urandom</java.security.egd>\n+              <java.util.secureRandomSeed>true</java.util.secureRandomSeed>\n+\n+              <h2.returnOffsetDateTime>true</h2.returnOffsetDateTime>\n+            </systemProperties>\n           </container>\n           <configuration>\n             <properties>"},{"sha":"d0e1c2a0a7aa6df0123384a40ce8d50010fbd1ff","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/pages/WA.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.client.console.pages;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;\n import java.io.InputStream;\n import java.util.ArrayList;\n@@ -62,7 +62,7 @@ public class WA extends BasePage {\n \n     private static final long serialVersionUID = 9200112197134882164L;\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     @SpringBean\n     private ServiceOps serviceOps;"},{"sha":"85e6e64bef732c4c0187675969e87cd65ca8a642","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/OIDC.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDC.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDC.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDC.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import java.io.IOException;\n import java.util.concurrent.atomic.AtomicReference;\n@@ -44,11 +44,11 @@\n \n public class OIDC extends Panel {\n \n-    private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = 12898029694947L;\n \n     private static final Logger LOG = LoggerFactory.getLogger(OIDC.class);\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     private final BaseModal<String> viewModal = new BaseModal<>(\"viewModal\") {\n "},{"sha":"4eec9ef7d12e4e403a41289aef3f4f2d3264e00d","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/rest/AMSessionDeserializer.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAMSessionDeserializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAMSessionDeserializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAMSessionDeserializer.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -27,8 +27,9 @@\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n import java.io.IOException;\n import java.io.StringWriter;\n-import java.text.ParseException;\n-import org.apache.commons.lang3.time.DateFormatUtils;\n+import java.time.OffsetDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n import org.apache.syncope.common.lib.AMSession;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -59,8 +60,8 @@ public AMSession deserialize(final JsonParser jp, final DeserializationContext c\n             String authenticationDate = node.get(\"authentication_date_formatted\").textValue();\n             try {\n                 waSession.setAuthenticationDate(\n-                        DateFormatUtils.ISO_8601_EXTENDED_DATETIME_FORMAT.parse(authenticationDate));\n-            } catch (ParseException e) {\n+                        OffsetDateTime.parse(authenticationDate, DateTimeFormatter.ISO_OFFSET_DATE_TIME));\n+            } catch (DateTimeParseException e) {\n                 LOG.error(\"Unparsable date: {}\", authenticationDate, e);\n             }\n         }"},{"sha":"996171947685eef6597b32368e727f9363ee7b30","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/rest/AMSessionRestClient.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAMSessionRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAMSessionRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAMSessionRestClient.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n import java.util.List;\n import javax.ws.rs.core.MediaType;\n@@ -38,7 +39,8 @@ public abstract class AMSessionRestClient implements RestClient {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AMSessionRestClient.class);\n \n-    protected static final List<?> JAX_RS_PROVIDERS = List.of(new JacksonJsonProvider());\n+    protected static final List<?> JAX_RS_PROVIDERS =\n+            List.of(new JacksonJsonProvider(JsonMapper.builder().findAndAddModules().build()));\n \n     protected final List<NetworkService> instances;\n "},{"sha":"a16b6fd5f06a7cff4645cc9ca2c7d420e9ee506e","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/rest/SRAStatisticsRestClient.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSRAStatisticsRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSRAStatisticsRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSRAStatisticsRestClient.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n import java.util.List;\n import javax.ws.rs.core.MediaType;\n@@ -33,7 +34,8 @@ public final class SRAStatisticsRestClient {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SRAStatisticsRestClient.class);\n \n-    private static final List<?> JAX_RS_PROVIDERS = List.of(new JacksonJsonProvider());\n+    private static final List<?> JAX_RS_PROVIDERS =\n+            List.of(new JacksonJsonProvider(JsonMapper.builder().findAndAddModules().build()));\n \n     private static String getActuatorEndpoint(final List<NetworkService> instances) {\n         return instances.get(0).getAddress() + \"actuator/metrics/spring.cloud.gateway.requests\";"},{"sha":"48f80e912a12a062fe3d95070c882202db3deb99","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/rest/WASessionRestClient.java","status":"modified","additions":5,"deletions":13,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FWASessionRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FWASessionRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FWASessionRestClient.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,7 +20,7 @@\n \n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n import java.io.InputStream;\n import java.util.List;\n@@ -35,15 +35,8 @@ public final class WASessionRestClient extends AMSessionRestClient {\n \n     private static final long serialVersionUID = 22118820292494L;\n \n-    private static final ObjectMapper MAPPER;\n-\n-    static {\n-        MAPPER = new ObjectMapper();\n-\n-        SimpleModule module = new SimpleModule();\n-        module.addDeserializer(AMSession.class, new AMSessionDeserializer());\n-        MAPPER.registerModule(module);\n-    }\n+    private static final JsonMapper MAPPER = JsonMapper.builder().\n+            addModule(new SimpleModule().addDeserializer(AMSession.class, new AMSessionDeserializer())).build();\n \n     public WASessionRestClient(final List<NetworkService> instances) {\n         super(instances);\n@@ -66,9 +59,8 @@ public List<AMSession> list() {\n             if (response.getStatus() == Response.Status.OK.getStatusCode()) {\n                 JsonNode node = MAPPER.readTree((InputStream) response.getEntity());\n                 if (node.has(\"activeSsoSessions\")) {\n-                    return MAPPER.readValue(MAPPER.treeAsTokens(node.get(\"activeSsoSessions\")),\n-                        new TypeReference<>() {\n-                        });\n+                    return MAPPER.readValue(MAPPER.treeAsTokens(node.get(\"activeSsoSessions\")), new TypeReference<>() {\n+                    });\n                 }\n             } else {\n                 LOG.error(\"Unexpected response for SSO Sessions from {}: {}\","},{"sha":"2cfed81a5d79b85e1e5b9e11b29f6d1f6cd3457d","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/VirSchemaDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -56,7 +56,7 @@ public VirSchemaDetails(final String id, final VirSchemaTO schemaTO) {\n                 new PropertyModel<>(schemaTO, \"readonly\"));\n         add(readonly);\n \n-        final AjaxDropDownChoicePanel<String> resource = new AjaxDropDownChoicePanel<>(\n+        AjaxDropDownChoicePanel<String> resource = new AjaxDropDownChoicePanel<>(\n                 \"resource\", getString(\"resource\"), new PropertyModel<String>(schemaTO, \"resource\"), false).\n                 setNullValid(false);\n         resource.setChoices(ResourceRestClient.list().stream().map(EntityTO::getKey).collect(Collectors.toList()));\n@@ -79,7 +79,7 @@ public VirSchemaDetails(final String id, final VirSchemaTO schemaTO) {\n         }\n         add(anyType);\n \n-        final AjaxTextFieldPanel extAttrName = new AjaxTextFieldPanel(\n+        AjaxTextFieldPanel extAttrName = new AjaxTextFieldPanel(\n                 \"extAttrName\", getString(\"extAttrName\"), new PropertyModel<>(schemaTO, \"extAttrName\"));\n         extAttrName.setOutputMarkupId(true);\n         extAttrName.addRequiredLabel();"},{"sha":"f5db9e55ccd3ffb42dff97078b11dd929b0df924","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.client.console.policies;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collections;\n@@ -68,7 +68,7 @@ public class ProvisioningPolicyModalPanel extends AbstractModalPanel<Provisionin\n \n     private static final long serialVersionUID = 2988891313881271124L;\n \n-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     private final IModel<Map<String, ImplementationTO>> implementations;\n \n@@ -90,9 +90,9 @@ public ProvisioningPolicyModalPanel(\n             @Override\n             protected Map<String, ImplementationTO> load() {\n                 return ImplementationRestClient.list(policyTO instanceof PullPolicyTO\n-                    ? IdMImplementationType.PULL_CORRELATION_RULE\n-                    : IdMImplementationType.PUSH_CORRELATION_RULE).stream().\n-                    collect(Collectors.toMap(EntityTO::getKey, Function.identity()));\n+                        ? IdMImplementationType.PULL_CORRELATION_RULE\n+                        : IdMImplementationType.PUSH_CORRELATION_RULE).stream().\n+                        collect(Collectors.toMap(EntityTO::getKey, Function.identity()));\n             }\n         };\n \n@@ -101,13 +101,13 @@ protected Map<String, ImplementationTO> load() {\n             private static final long serialVersionUID = -8168676563540297301L;\n \n             private final List<CorrelationRule> rules = policyTO.getCorrelationRules().keySet().stream().\n-                map(anyType -> new CorrelationRule(\n+                    map(anyType -> new CorrelationRule(\n                     policyTO instanceof PullPolicyTO\n-                        ? DefaultPullCorrelationRuleConf.class\n-                        : DefaultPushCorrelationRuleConf.class,\n+                            ? DefaultPullCorrelationRuleConf.class\n+                            : DefaultPushCorrelationRuleConf.class,\n                     anyType,\n                     implementations.getObject().get(policyTO.getCorrelationRules().get(anyType)))).\n-                collect(Collectors.toList());\n+                    collect(Collectors.toList());\n \n             @Override\n             public List<CorrelationRule> getObject() {\n@@ -128,8 +128,8 @@ public void setObject(final List<CorrelationRule> object) {\n             @Override\n             protected CorrelationRule newModelObject() {\n                 return new CorrelationRule(policyTO instanceof PullPolicyTO\n-                    ? DefaultPullCorrelationRuleConf.class\n-                    : DefaultPushCorrelationRuleConf.class);\n+                        ? DefaultPullCorrelationRuleConf.class\n+                        : DefaultPushCorrelationRuleConf.class);\n             }\n \n             @Override\n@@ -196,76 +196,76 @@ protected class CorrelationRulePanel extends Panel {\n             add(rule);\n \n             PropertyModel<Boolean> orSchemasModel =\n-                new PropertyModel<>(correlationRule.getObject().getDefaultRuleConf(), \"orSchemas\") {\n+                    new PropertyModel<>(correlationRule.getObject().getDefaultRuleConf(), \"orSchemas\") {\n \n-                    private static final long serialVersionUID = 807008909842554829L;\n+                private static final long serialVersionUID = 807008909842554829L;\n \n-                    @Override\n-                    public Boolean getObject() {\n-                        AbstractCorrelationRuleConf conf = correlationRule.getObject().getDefaultRuleConf();\n-                        return conf instanceof DefaultPullCorrelationRuleConf\n+                @Override\n+                public Boolean getObject() {\n+                    AbstractCorrelationRuleConf conf = correlationRule.getObject().getDefaultRuleConf();\n+                    return conf instanceof DefaultPullCorrelationRuleConf\n                             ? DefaultPullCorrelationRuleConf.class.cast(conf).isOrSchemas()\n                             : conf instanceof DefaultPushCorrelationRuleConf\n-                            ? DefaultPushCorrelationRuleConf.class.cast(conf).isOrSchemas()\n-                            : false;\n-                    }\n+                                    ? DefaultPushCorrelationRuleConf.class.cast(conf).isOrSchemas()\n+                                    : false;\n+                }\n \n-                    @Override\n-                    public void setObject(final Boolean object) {\n-                        AbstractCorrelationRuleConf conf = correlationRule.getObject().getDefaultRuleConf();\n-                        if (conf instanceof DefaultPullCorrelationRuleConf) {\n-                            DefaultPullCorrelationRuleConf.class.cast(conf).setOrSchemas(object);\n-                        } else if (conf instanceof DefaultPushCorrelationRuleConf) {\n-                            DefaultPushCorrelationRuleConf.class.cast(conf).setOrSchemas(object);\n-                        }\n+                @Override\n+                public void setObject(final Boolean object) {\n+                    AbstractCorrelationRuleConf conf = correlationRule.getObject().getDefaultRuleConf();\n+                    if (conf instanceof DefaultPullCorrelationRuleConf) {\n+                        DefaultPullCorrelationRuleConf.class.cast(conf).setOrSchemas(object);\n+                    } else if (conf instanceof DefaultPushCorrelationRuleConf) {\n+                        DefaultPushCorrelationRuleConf.class.cast(conf).setOrSchemas(object);\n                     }\n-                };\n+                }\n+            };\n             AjaxCheckBoxPanel orSchemas = new AjaxCheckBoxPanel(\"orSchemas\", \"orSchemas\", orSchemasModel, false);\n             orSchemas.setOutputMarkupPlaceholderTag(true);\n             add(orSchemas.setVisible(correlationRule.getObject().getDefaultRuleConf() != null));\n \n             PropertyModel<List<String>> defaultRuleConfModel =\n-                new PropertyModel<>(correlationRule.getObject().getDefaultRuleConf(), \"schemas\") {\n+                    new PropertyModel<>(correlationRule.getObject().getDefaultRuleConf(), \"schemas\") {\n \n-                    private static final long serialVersionUID = 3799387950428254072L;\n+                private static final long serialVersionUID = 3799387950428254072L;\n \n-                    private List<String> schemas() {\n-                        AbstractCorrelationRuleConf conf = correlationRule.getObject().getDefaultRuleConf();\n-                        return conf instanceof DefaultPullCorrelationRuleConf\n+                private List<String> schemas() {\n+                    AbstractCorrelationRuleConf conf = correlationRule.getObject().getDefaultRuleConf();\n+                    return conf instanceof DefaultPullCorrelationRuleConf\n                             ? DefaultPullCorrelationRuleConf.class.cast(conf).getSchemas()\n                             : conf instanceof DefaultPushCorrelationRuleConf\n-                            ? DefaultPushCorrelationRuleConf.class.cast(conf).getSchemas()\n-                            : List.of();\n-                    }\n+                                    ? DefaultPushCorrelationRuleConf.class.cast(conf).getSchemas()\n+                                    : List.of();\n+                }\n \n-                    @Override\n-                    public List<String> getObject() {\n-                        List<String> schemas = new ArrayList<>();\n-                        if (correlationRule.getObject().getDefaultRuleConf() != null) {\n-                            schemas.addAll(schemas());\n-                        }\n-                        return schemas;\n+                @Override\n+                public List<String> getObject() {\n+                    List<String> schemas = new ArrayList<>();\n+                    if (correlationRule.getObject().getDefaultRuleConf() != null) {\n+                        schemas.addAll(schemas());\n                     }\n+                    return schemas;\n+                }\n \n-                    @Override\n-                    public void setObject(final List<String> object) {\n-                        if (correlationRule.getObject().getDefaultRuleConf() != null) {\n-                            schemas().clear();\n-                            schemas().addAll(object);\n-                        }\n+                @Override\n+                public void setObject(final List<String> object) {\n+                    if (correlationRule.getObject().getDefaultRuleConf() != null) {\n+                        schemas().clear();\n+                        schemas().addAll(object);\n                     }\n-                };\n+                }\n+            };\n             AjaxPalettePanel<String> defaultRuleConf = new AjaxPalettePanel.Builder<String>().\n                     setName(\"defaultRuleConf\").build(\"defaultRuleConf\",\n                     defaultRuleConfModel, new AjaxPalettePanel.Builder.Query<>() {\n \n-                    private static final long serialVersionUID = -7223078772249308813L;\n+                private static final long serialVersionUID = -7223078772249308813L;\n \n-                    @Override\n-                    public List<String> execute(final String filter) {\n-                        return getSchemas(correlationRule.getObject());\n-                    }\n-                });\n+                @Override\n+                public List<String> execute(final String filter) {\n+                    return getSchemas(correlationRule.getObject());\n+                }\n+            });\n             defaultRuleConf.hideLabel().setOutputMarkupPlaceholderTag(true);\n             add(defaultRuleConf.setVisible(correlationRule.getObject().getDefaultRuleConf() != null));\n \n@@ -371,7 +371,7 @@ public final void setImpl(final ImplementationTO impl) {\n             if (impl != null) {\n                 this.defaultRuleConf = null;\n                 try {\n-                    this.defaultRuleConf = OBJECT_MAPPER.readValue(impl.getBody(), ruleConfClass);\n+                    this.defaultRuleConf = MAPPER.readValue(impl.getBody(), ruleConfClass);\n                 } catch (Exception e) {\n                     LOG.debug(\"Could not deserialize {} as {}\", impl.getBody(), ruleConfClass.getName());\n                 }\n@@ -381,7 +381,7 @@ public final void setImpl(final ImplementationTO impl) {\n         public ImplementationTO getImpl() {\n             if (defaultRuleConf != null) {\n                 try {\n-                    this.impl.setBody(OBJECT_MAPPER.writeValueAsString(defaultRuleConf));\n+                    this.impl.setBody(MAPPER.writeValueAsString(defaultRuleConf));\n                 } catch (Exception e) {\n                     LOG.error(\"Could not serialize {}\", defaultRuleConf);\n                 }"},{"sha":"a50537ab43137a16246bc891fe2b0abd78804533","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.client.console.topology;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import java.io.Serializable;\n import java.text.MessageFormat;\n@@ -71,7 +71,7 @@ public class TopologyTogglePanel extends TogglePanel<Serializable> {\n \n     private static final long serialVersionUID = -2025535531121434056L;\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     private final WebMarkupContainer container;\n \n@@ -230,7 +230,7 @@ public void onClick(final AjaxRequestTarget target) {\n                 modal.setFormModel(model);\n \n                 target.add(modal.setContent(new ConnectorWizardBuilder(modelObject, pageRef).\n-                    build(BaseModal.CONTENT_ID, AjaxWizard.Mode.CREATE)));\n+                        build(BaseModal.CONTENT_ID, AjaxWizard.Mode.CREATE)));\n \n                 modal.header(new Model<>(MessageFormat.format(getString(\"connector.new\"), node.getKey())));\n                 modal.show(true);\n@@ -285,7 +285,7 @@ public void onClick(final AjaxRequestTarget target) {\n                 modal.setFormModel(model);\n \n                 target.add(modal.setContent(new ResourceWizardBuilder(modelObject, pageRef).\n-                    build(BaseModal.CONTENT_ID, AjaxWizard.Mode.CREATE)));\n+                        build(BaseModal.CONTENT_ID, AjaxWizard.Mode.CREATE)));\n \n                 modal.header(new Model<>(MessageFormat.format(getString(\"resource.new\"), node.getKey())));\n                 modal.show(true);\n@@ -312,14 +312,14 @@ public void onClick(final AjaxRequestTarget target) {\n                 modal.setFormModel(model);\n \n                 target.add(modal.setContent(new ConnectorWizardBuilder(connInstance, pageRef).\n-                    build(BaseModal.CONTENT_ID,\n-                        SyncopeConsoleSession.get().\n-                            owns(IdMEntitlement.CONNECTOR_UPDATE, connInstance.getAdminRealm())\n-                            ? AjaxWizard.Mode.EDIT\n-                            : AjaxWizard.Mode.READONLY)));\n+                        build(BaseModal.CONTENT_ID,\n+                                SyncopeConsoleSession.get().\n+                                        owns(IdMEntitlement.CONNECTOR_UPDATE, connInstance.getAdminRealm())\n+                                ? AjaxWizard.Mode.EDIT\n+                                : AjaxWizard.Mode.READONLY)));\n \n                 modal.header(\n-                    new Model<>(MessageFormat.format(getString(\"connector.edit\"), connInstance.getDisplayName())));\n+                        new Model<>(MessageFormat.format(getString(\"connector.edit\"), connInstance.getDisplayName())));\n                 modal.show(true);\n             }\n \n@@ -340,12 +340,12 @@ public void onClick(final AjaxRequestTarget target) {\n                 ConnInstanceTO modelObject = ConnectorRestClient.read(node.getKey());\n \n                 target.add(historyModal.setContent(new AuditHistoryModal<>(\n-                    historyModal,\n-                    AuditElements.EventCategoryType.LOGIC,\n-                    \"ConnectorLogic\",\n-                    modelObject,\n-                    IdMEntitlement.CONNECTOR_UPDATE,\n-                    pageRef) {\n+                        historyModal,\n+                        AuditElements.EventCategoryType.LOGIC,\n+                        \"ConnectorLogic\",\n+                        modelObject,\n+                        IdMEntitlement.CONNECTOR_UPDATE,\n+                        pageRef) {\n \n                     private static final long serialVersionUID = -3225348282675513648L;\n \n@@ -366,7 +366,7 @@ protected void restore(final String json, final AjaxRequestTarget target) {\n                 }));\n \n                 historyModal.header(\n-                    new Model<>(MessageFormat.format(getString(\"connector.menu.history\"), node.getDisplayName())));\n+                        new Model<>(MessageFormat.format(getString(\"connector.menu.history\"), node.getDisplayName())));\n \n                 historyModal.show(true);\n             }\n@@ -420,11 +420,11 @@ public void onClick(final AjaxRequestTarget target) {\n                 modal.setFormModel(model);\n \n                 target.add(modal.setContent(new ResourceWizardBuilder(resource, pageRef).\n-                    build(BaseModal.CONTENT_ID,\n-                        SyncopeConsoleSession.get().\n-                            owns(IdMEntitlement.RESOURCE_UPDATE, connInstance.getAdminRealm())\n-                            ? AjaxWizard.Mode.EDIT\n-                            : AjaxWizard.Mode.READONLY)));\n+                        build(BaseModal.CONTENT_ID,\n+                                SyncopeConsoleSession.get().\n+                                        owns(IdMEntitlement.RESOURCE_UPDATE, connInstance.getAdminRealm())\n+                                ? AjaxWizard.Mode.EDIT\n+                                : AjaxWizard.Mode.READONLY)));\n \n                 modal.header(new Model<>(MessageFormat.format(getString(\"resource.edit\"), node.getKey())));\n                 modal.show(true);\n@@ -446,9 +446,9 @@ public String getAjaxIndicatorMarkupId() {\n             public void onClick(final AjaxRequestTarget target) {\n                 ResourceTO modelObject = ResourceRestClient.read(node.getKey());\n                 target.add(propTaskModal.setContent(\n-                    new ResourceStatusModal(propTaskModal, pageRef, modelObject)));\n+                        new ResourceStatusModal(propTaskModal, pageRef, modelObject)));\n                 propTaskModal.header(\n-                    new Model<>(MessageFormat.format(getString(\"resource.reconciliation\"), node.getKey())));\n+                        new Model<>(MessageFormat.format(getString(\"resource.reconciliation\"), node.getKey())));\n                 propTaskModal.show(true);\n             }\n \n@@ -470,7 +470,7 @@ public void onClick(final AjaxRequestTarget target) {\n                 ConnInstanceTO connInstance = ConnectorRestClient.read(resource.getConnector());\n \n                 if (SyncopeConsoleSession.get().\n-                    owns(IdMEntitlement.RESOURCE_UPDATE, connInstance.getAdminRealm())) {\n+                        owns(IdMEntitlement.RESOURCE_UPDATE, connInstance.getAdminRealm())) {\n \n                     provisionModal.addSubmitButton();\n                 } else {\n@@ -481,7 +481,7 @@ public void onClick(final AjaxRequestTarget target) {\n                 provisionModal.setFormModel(model);\n \n                 target.add(provisionModal.setContent(\n-                    new ResourceProvisionPanel(provisionModal, resource, connInstance.getAdminRealm(), pageRef)));\n+                        new ResourceProvisionPanel(provisionModal, resource, connInstance.getAdminRealm(), pageRef)));\n \n                 provisionModal.header(new Model<>(MessageFormat.format(getString(\"resource.edit\"), node.getKey())));\n                 provisionModal.show(true);\n@@ -524,9 +524,9 @@ public String getAjaxIndicatorMarkupId() {\n             @SuppressWarnings(\"unchecked\")\n             public void onClick(final AjaxRequestTarget target) {\n                 target.add(propTaskModal.setContent(\n-                    new PropagationTasks(propTaskModal, node.getKey(), pageRef)));\n+                        new PropagationTasks(propTaskModal, node.getKey(), pageRef)));\n                 propTaskModal.header(\n-                    new Model<>(MessageFormat.format(getString(\"task.propagation.list\"), node.getKey())));\n+                        new Model<>(MessageFormat.format(getString(\"task.propagation.list\"), node.getKey())));\n                 propTaskModal.show(true);\n             }\n \n@@ -585,12 +585,12 @@ public void onClick(final AjaxRequestTarget target) {\n                 ResourceTO modelObject = ResourceRestClient.read(node.getKey());\n \n                 target.add(historyModal.setContent(new AuditHistoryModal<>(\n-                    historyModal,\n-                    AuditElements.EventCategoryType.LOGIC,\n-                    \"ResourceLogic\",\n-                    modelObject,\n-                    IdMEntitlement.RESOURCE_UPDATE,\n-                    pageRef) {\n+                        historyModal,\n+                        AuditElements.EventCategoryType.LOGIC,\n+                        \"ResourceLogic\",\n+                        modelObject,\n+                        IdMEntitlement.RESOURCE_UPDATE,\n+                        pageRef) {\n \n                     private static final long serialVersionUID = -3712506022627033811L;\n \n@@ -611,7 +611,7 @@ protected void restore(final String json, final AjaxRequestTarget target) {\n                 }));\n \n                 historyModal.header(\n-                    new Model<>(MessageFormat.format(getString(\"resource.menu.history\"), node.getDisplayName())));\n+                        new Model<>(MessageFormat.format(getString(\"resource.menu.history\"), node.getDisplayName())));\n \n                 historyModal.show(true);\n             }"},{"sha":"64c9637777c686721aa1b1ca0381c0e544ae773d","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.client.console.topology;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.IOException;\n import java.util.Collection;\n import java.util.Collections;\n@@ -49,7 +49,7 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {\n \n     private static final Logger LOG = LoggerFactory.getLogger(TopologyWebSocketBehavior.class);\n \n-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     private static final String CONNECTOR_TEST_TIMEOUT_PARAMETER = \"connector.test.timeout\";\n \n@@ -129,7 +129,7 @@ public TopologyWebSocketBehavior() {\n     @Override\n     protected void onMessage(final WebSocketRequestHandler handler, final TextMessage message) {\n         try {\n-            JsonNode obj = OBJECT_MAPPER.readTree(message.getText());\n+            JsonNode obj = MAPPER.readTree(message.getText());\n             switch (Topology.SupportedOperation.valueOf(obj.get(\"kind\").asText())) {\n                 case CHECK_CONNECTOR:\n                     String ckey = obj.get(\"target\").asText();"},{"sha":"7f3e4a76876011e7b4b50af05a8d29795ebd2f3e","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/any/MergeLinkedAccountsWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FMergeLinkedAccountsWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FMergeLinkedAccountsWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FMergeLinkedAccountsWizardBuilder.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.client.console.wizards.any;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.util.List;\n import java.util.HashMap;\n import java.util.Map;\n@@ -55,7 +55,7 @@ public class MergeLinkedAccountsWizardBuilder extends BaseAjaxWizardBuilder<User\n \n     private static final long serialVersionUID = -9142332740863374891L;\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     private final UserDirectoryPanel parentPanel;\n "},{"sha":"acd67b4b66cc8fe3d7da1f0faf0ef716b6f80371","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/BaseSession.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FBaseSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FBaseSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FBaseSession.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,7 +20,6 @@\n \n import java.util.concurrent.Callable;\n import java.util.concurrent.Future;\n-import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.syncope.client.lib.SyncopeClient;\n \n public interface BaseSession {\n@@ -64,7 +63,7 @@ public String fallback() {\n \n     <T> void resetClient(Class<T> service);\n \n-    FastDateFormat getDateFormat();\n+    DateOps.Format getDateFormat();\n \n     /**\n      * Extract and localize (if translation available) the actual message from the given exception; then, report it"},{"sha":"f68187b4cb7ae776ea3d66224d552111c35ebce6","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/DateOps.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FDateOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FDateOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FDateOps.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.ui.commons;\n+\n+import java.io.Serializable;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Date;\n+import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.time.FastDateFormat;\n+import org.apache.wicket.model.IModel;\n+\n+public final class DateOps {\n+\n+    public static class Format implements Serializable {\n+\n+        private static final long serialVersionUID = 27103019852866L;\n+\n+        private final FastDateFormat fdf;\n+\n+        public Format(final FastDateFormat fdf) {\n+            this.fdf = fdf;\n+        }\n+\n+        public String format(final Date date) {\n+            return Optional.ofNullable(date).map(fdf::format).orElse(StringUtils.EMPTY);\n+        }\n+\n+        public String format(final OffsetDateTime date) {\n+            return Optional.ofNullable(date).map(v -> fdf.format(convert(date))).orElse(StringUtils.EMPTY);\n+        }\n+    }\n+\n+    public static class WrappedDateModel implements IModel<Date>, Serializable {\n+\n+        private static final long serialVersionUID = 31027882183172L;\n+\n+        private final IModel<OffsetDateTime> wrapped;\n+\n+        public WrappedDateModel(final IModel<OffsetDateTime> wrapped) {\n+            this.wrapped = wrapped;\n+        }\n+\n+        @Override\n+        public Date getObject() {\n+            return convert(wrapped.getObject());\n+        }\n+\n+        @Override\n+        public void setObject(final Date object) {\n+            wrapped.setObject(convert(object));\n+        }\n+    }\n+\n+    public static final ZoneOffset DEFAULT_OFFSET = OffsetDateTime.now().getOffset();\n+\n+    public static Date convert(final OffsetDateTime date) {\n+        return Optional.ofNullable(date).map(v -> new Date(v.toInstant().toEpochMilli())).orElse(null);\n+    }\n+\n+    public static OffsetDateTime convert(final Date date) {\n+        return Optional.ofNullable(date).map(v -> v.toInstant().atOffset(DEFAULT_OFFSET)).orElse(null);\n+    }\n+\n+    private DateOps() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"fc825eec99f817bc2e228cc9604a71b4846c42f3","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/MIMETypesLoader.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FMIMETypesLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FMIMETypesLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FMIMETypesLoader.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.client.ui.commons;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -33,7 +33,7 @@ public class MIMETypesLoader {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(MIMETypesLoader.class);\n \n-    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+    protected static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     protected Map<String, String> mimeTypesMap;\n "},{"sha":"780495289dc8b897471c8fd4dfca451b2a10c385","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/AjaxDateFieldPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxDateFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxDateFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxDateFieldPanel.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -30,10 +30,11 @@ public class AjaxDateFieldPanel extends DateFieldPanel {\n     private static final long serialVersionUID = 1919852712185883648L;\n \n     public AjaxDateFieldPanel(\n-            final String id, \n-            final String name, \n+            final String id,\n+            final String name,\n             final IModel<Date> model,\n             final FastDateFormat datePattern) {\n+\n         super(id, name, model, datePattern);\n \n         field = new AjaxDatePicker(\"field\", model, getLocale(), datePattern.getPattern());"},{"sha":"73e5cd96d72e13539e535f987d34f35b304ac395","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/DateFieldPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -154,7 +154,6 @@ public void setObject(final Date object) {\n     @Override\n     public void renderHead(final IHeaderResponse response) {\n         super.renderHead(response);\n-        response.render(JavaScriptHeaderItem.forReference(\n-                new KendoCultureResourceReference(getLocale())));\n+        response.render(JavaScriptHeaderItem.forReference(new KendoCultureResourceReference(getLocale())));\n     }\n }"},{"sha":"907339d0664a8b146c0e9ff1fed51f0c365303ef","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/PreferenceManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.client.console;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.IOException;\n import java.io.Serializable;\n import java.io.StringWriter;\n@@ -46,7 +46,7 @@ public final class PreferenceManager implements Serializable {\n \n     private static final int ONE_YEAR_TIME = 60 * 60 * 24 * 365;\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     private static final TypeReference<Map<String, String>> MAP_TYPE_REF = new TypeReference<>() {\n     };"},{"sha":"35045f0d8336b466e53b2c6e0f62ef2a0d578a4b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -48,6 +48,7 @@\n import org.apache.syncope.client.lib.batch.BatchRequest;\n import org.apache.syncope.client.ui.commons.BaseSession;\n import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.DateOps;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n@@ -425,7 +426,7 @@ public <T> void resetClient(final Class<T> service) {\n     }\n \n     @Override\n-    public FastDateFormat getDateFormat() {\n-        return FastDateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, getLocale());\n+    public DateOps.Format getDateFormat() {\n+        return new DateOps.Format(FastDateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, getLocale()));\n     }\n }"},{"sha":"c550937d73e2233f8f4f69fd14e5cae7f1b1b90d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/audit/AuditHistoryDetails.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDetails.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -30,7 +30,7 @@\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n import java.io.IOException;\n import java.io.Serializable;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.Set;\n import java.util.SortedSet;\n import java.util.TreeMap;\n@@ -134,7 +134,7 @@ public AuditHistoryDetails(\n             current.setDate(((AnyTO) currentEntity).getCreationDate());\n         } else {\n             current.setWho(SyncopeConsoleSession.get().getSelfTO().getUsername());\n-            current.setDate(new Date());\n+            current.setDate(OffsetDateTime.now());\n         }\n         try {\n             current.setBefore(MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(currentEntity));\n@@ -166,8 +166,8 @@ public void onSubmit(final AjaxRequestTarget target) {\n             public void onClick(final AjaxRequestTarget target) {\n                 try {\n                     String json = selected.getBefore() == null\n-                        ? MAPPER.readTree(selected.getOutput()).get(\"entity\").toPrettyString()\n-                        : selected.getBefore();\n+                            ? MAPPER.readTree(selected.getOutput()).get(\"entity\").toPrettyString()\n+                            : selected.getBefore();\n                     restore(json, target);\n \n                     mlp.prev(target);"},{"sha":"c30b89c8e0ad9bb546c09f7690ed656bb5fbdae6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/batch/BatchContent.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -56,7 +56,7 @@\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.StatusRType;\n import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n import org.apache.syncope.common.rest.api.service.AnyObjectService;\n import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.syncope.common.rest.api.service.GroupService;\n@@ -137,7 +137,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n \n                                 try {\n                                     batchExecutor.getClass().getMethod(\"deleteExecution\", String.class).\n-                                        invoke(batchExecutor, exec.getKey());\n+                                            invoke(batchExecutor, exec.getKey());\n                                     results.put(exec.getKey(), ExecStatus.SUCCESS.name());\n                                 } catch (Exception e) {\n                                     LOG.error(\"Error deleting execution {}\", exec.getKey(), e);\n@@ -150,16 +150,16 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                             // Group bean information by anyKey\n                             Map<String, List<StatusBean>> beans = new HashMap<>();\n                             items.stream().map(StatusBean.class::cast).\n-                                forEachOrdered(sb -> {\n-                                    final List<StatusBean> sblist;\n-                                    if (beans.containsKey(sb.getKey())) {\n-                                        sblist = beans.get(sb.getKey());\n-                                    } else {\n-                                        sblist = new ArrayList<>();\n-                                        beans.put(sb.getKey(), sblist);\n-                                    }\n-                                    sblist.add(sb);\n-                                });\n+                                    forEachOrdered(sb -> {\n+                                        final List<StatusBean> sblist;\n+                                        if (beans.containsKey(sb.getKey())) {\n+                                            sblist = beans.get(sb.getKey());\n+                                        } else {\n+                                            sblist = new ArrayList<>();\n+                                            beans.put(sb.getKey(), sblist);\n+                                        }\n+                                        sblist.add(sb);\n+                                    });\n \n                             results = new HashMap<>();\n                             beans.forEach((key, value) -> {\n@@ -168,32 +168,32 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                                 switch (action) {\n                                     case DEPROVISION:\n                                         results.putAll(anyRestClient.deassociate(\n-                                            ResourceDeassociationAction.DEPROVISION, etag, key, value));\n+                                                ResourceDeassociationAction.DEPROVISION, etag, key, value));\n                                         break;\n \n                                     case UNASSIGN:\n                                         results.putAll(anyRestClient.deassociate(\n-                                            ResourceDeassociationAction.UNASSIGN, etag, key, value));\n+                                                ResourceDeassociationAction.UNASSIGN, etag, key, value));\n                                         break;\n \n                                     case UNLINK:\n                                         results.putAll(anyRestClient.deassociate(\n-                                            ResourceDeassociationAction.UNLINK, etag, key, value));\n+                                                ResourceDeassociationAction.UNLINK, etag, key, value));\n                                         break;\n \n                                     case ASSIGN:\n                                         results.putAll(anyRestClient.associate(\n-                                            ResourceAssociationAction.ASSIGN, etag, key, value));\n+                                                ResourceAssociationAction.ASSIGN, etag, key, value));\n                                         break;\n \n                                     case LINK:\n                                         results.putAll(anyRestClient.associate(\n-                                            ResourceAssociationAction.LINK, etag, key, value));\n+                                                ResourceAssociationAction.LINK, etag, key, value));\n                                         break;\n \n                                     case PROVISION:\n                                         results.putAll(anyRestClient.associate(\n-                                            ResourceAssociationAction.PROVISION, etag, key, value));\n+                                                ResourceAssociationAction.PROVISION, etag, key, value));\n                                         break;\n \n                                     case SUSPEND:\n@@ -214,10 +214,10 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                             GroupService batchGroupService = batch.getService(GroupService.class);\n                             AnyObjectService batchAnyObjectService = batch.getService(AnyObjectService.class);\n                             AnyService<?> batchAnyService = singleItem instanceof UserTO\n-                                ? batchUserService\n-                                : singleItem instanceof GroupTO\n-                                ? batchGroupService\n-                                : batchAnyObjectService;\n+                                    ? batchUserService\n+                                    : singleItem instanceof GroupTO\n+                                            ? batchGroupService\n+                                            : batchAnyObjectService;\n                             TaskService batchTaskService = batch.getService(TaskService.class);\n                             ReportService batchReportService = batch.getService(ReportService.class);\n \n@@ -231,7 +231,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                                         UserUR req = new UserUR();\n                                         req.setKey(user.getKey());\n                                         req.setMustChangePassword(new BooleanReplacePatchItem.Builder().\n-                                            value(!user.isMustChangePassword()).build());\n+                                                value(!user.isMustChangePassword()).build());\n \n                                         batchUserService.update(req);\n                                     });\n@@ -242,11 +242,11 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                                         UserTO user = (UserTO) item;\n \n                                         StatusR req = new StatusR.Builder().\n-                                            key(user.getKey()).\n-                                            type(StatusRType.SUSPEND).\n-                                            onSyncope(true).\n-                                            resources(user.getResources()).\n-                                            build();\n+                                                key(user.getKey()).\n+                                                type(StatusRType.SUSPEND).\n+                                                onSyncope(true).\n+                                                resources(user.getResources()).\n+                                                build();\n \n                                         batchUserService.status(req);\n                                     });\n@@ -257,11 +257,11 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                                         UserTO user = (UserTO) item;\n \n                                         StatusR req = new StatusR.Builder().\n-                                            key(user.getKey()).\n-                                            type(StatusRType.REACTIVATE).\n-                                            onSyncope(true).\n-                                            resources(user.getResources()).\n-                                            build();\n+                                                key(user.getKey()).\n+                                                type(StatusRType.REACTIVATE).\n+                                                onSyncope(true).\n+                                                resources(user.getResources()).\n+                                                build();\n \n                                         batchUserService.status(req);\n                                     });\n@@ -278,8 +278,8 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                                             TaskTO task = (TaskTO) item;\n \n                                             batchTaskService.delete(\n-                                                TaskType.fromTOClass(task.getClass()),\n-                                                task.getKey());\n+                                                    TaskType.fromTOClass(task.getClass()),\n+                                                    task.getKey());\n                                         } else if (singleItem instanceof ReportTO) {\n                                             ReportTO report = (ReportTO) item;\n \n@@ -296,7 +296,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                                         TaskTO task = (TaskTO) item;\n \n                                         batchTaskService.execute(\n-                                            new ExecuteQuery.Builder().dryRun(true).key(task.getKey()).build());\n+                                                new ExecSpecs.Builder().dryRun(true).key(task.getKey()).build());\n                                     });\n                                     break;\n \n@@ -305,13 +305,13 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                                         if (singleItem instanceof TaskTO) {\n                                             TaskTO task = (TaskTO) item;\n \n-                                            batchTaskService.execute(new ExecuteQuery.Builder().\n-                                                dryRun(false).key(task.getKey()).build());\n+                                            batchTaskService.execute(\n+                                                    new ExecSpecs.Builder().dryRun(false).key(task.getKey()).build());\n                                         } else if (singleItem instanceof ReportTO) {\n                                             ReportTO report = (ReportTO) item;\n \n-                                            batchReportService.execute(new ExecuteQuery.Builder().\n-                                                key(report.getKey()).build());\n+                                            batchReportService.execute(\n+                                                    new ExecSpecs.Builder().key(report.getKey()).build());\n                                         }\n                                     });\n                                     break;\n@@ -320,15 +320,15 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                             }\n \n                             results = CastUtils.cast(Map.class.cast(\n-                                batchExecutor.getClass().getMethod(\"batch\",\n-                                    BatchRequest.class).invoke(batchExecutor, batch)));\n+                                    batchExecutor.getClass().getMethod(\"batch\",\n+                                            BatchRequest.class).invoke(batchExecutor, batch)));\n \n                             if (singleItem instanceof AnyTO) {\n                                 AbstractAnyRestClient<? extends AnyTO> anyRestClient = singleItem instanceof UserTO\n-                                    ? UserRestClient.class.cast(batchExecutor)\n-                                    : singleItem instanceof GroupTO\n-                                    ? GroupRestClient.class.cast(batchExecutor)\n-                                    : AnyObjectRestClient.class.cast(batchExecutor);\n+                                        ? UserRestClient.class.cast(batchExecutor)\n+                                        : singleItem instanceof GroupTO\n+                                                ? GroupRestClient.class.cast(batchExecutor)\n+                                                : AnyObjectRestClient.class.cast(batchExecutor);\n                                 for (int i = 0; i < items.size(); i++) {\n                                     String key = ((AnyTO) items.get(i)).getKey();\n                                     if (!deletedAnys.contains(key)) {\n@@ -342,10 +342,10 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                         newColumnList.add(newColumnList.size(), new BatchResponseColumn<>(results, keyFieldName));\n \n                         container.addOrReplace(new AjaxFallbackDefaultDataTable<>(\n-                            \"selectedObjects\",\n-                            newColumnList,\n-                            dataProvider,\n-                            Integer.MAX_VALUE).setVisible(!items.isEmpty()));\n+                                \"selectedObjects\",\n+                                newColumnList,\n+                                dataProvider,\n+                                Integer.MAX_VALUE).setVisible(!items.isEmpty()));\n \n                         actionPanel.setEnabled(false);\n                         actionPanel.setVisible(false);"},{"sha":"eba2768c08ef8c6b73d44e3857caa6dd1ccc6704","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/chartjs/ChartJSPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fchartjs%2FChartJSPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fchartjs%2FChartJSPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fchartjs%2FChartJSPanel.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,7 +20,7 @@\n \n import com.fasterxml.jackson.annotation.JsonInclude.Include;\n import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n@@ -33,7 +33,8 @@ public class ChartJSPanel extends Panel {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ChartJSPanel.class);\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper().setSerializationInclusion(Include.NON_NULL);\n+    private static final JsonMapper MAPPER = JsonMapper.builder().\n+            findAndAddModules().serializationInclusion(Include.NON_NULL).build();\n \n     private final IModel<? extends Chart<?>> model;\n "},{"sha":"49d69ea3e12e15108c00385a37c5e68acd60bbad","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/AnyDataProvider.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -105,19 +105,18 @@ public Iterator<A> iterator(final long first, final long count) {\n             }\n \n             if (filtered) {\n-                result = fiql == null\n-                        ? List.of()\n-                        : restClient.search(realm, fiql, currentPage + 1, paginatorRows, getSort(), type);\n+                result = Optional.ofNullable(fiql).\n+                        map(s -> restClient.search(realm, s, currentPage + 1, paginatorRows, getSort(), type)).\n+                        orElseGet(() -> List.of());\n             } else {\n                 result = restClient.search(realm, null, currentPage + 1, paginatorRows, getSort(), type);\n             }\n         } catch (Exception e) {\n             LOG.error(\"While searching with FIQL {}\", fiql, e);\n             SyncopeConsoleSession.get().onException(e);\n \n-            Optional<AjaxRequestTarget> target = RequestCycle.get().find(AjaxRequestTarget.class);\n-            target.ifPresent(ajaxRequestTarget\n-                    -> ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(ajaxRequestTarget));\n+            RequestCycle.get().find(AjaxRequestTarget.class).\n+                    ifPresent(target -> ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target));\n         }\n \n         return result.iterator();"},{"sha":"4b3e01b76e62517723f285fcc74654cbee80610c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/layout/AnyLayoutUtils.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FAnyLayoutUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FAnyLayoutUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FAnyLayoutUtils.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.client.console.layout;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.IOException;\n import java.lang.reflect.InvocationTargetException;\n import java.util.List;\n@@ -43,7 +43,7 @@ public final class AnyLayoutUtils {\n \n     private static final RoleRestClient ROLE_REST_CLIENT = new RoleRestClient();\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     private static void setUserIfEmpty(final AnyLayout anyLayout) {\n         if (anyLayout.getUser() == null) {"},{"sha":"b0b26300a04c7f07690b5320ca865a7bf8f26d9a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AccessTokenDirectoryPanel.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -95,14 +95,15 @@ protected List<IColumn<AccessTokenTO, String>> getColumns() {\n \n             @Override\n             public void populateItem(\n-                final Item<ICellPopulator<AccessTokenTO>> cellItem,\n-                final String componentId,\n-                final IModel<AccessTokenTO> model) {\n+                    final Item<ICellPopulator<AccessTokenTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<AccessTokenTO> model) {\n \n                 try {\n                     SignedJWT jwt = SignedJWT.parse(model.getObject().getBody());\n-                    cellItem.add(new Label(componentId,\n-                        SyncopeConsoleSession.get().getDateFormat().format(jwt.getJWTClaimsSet().getIssueTime())));\n+                    cellItem.add(new Label(\n+                            componentId,\n+                            SyncopeConsoleSession.get().getDateFormat().format(jwt.getJWTClaimsSet().getIssueTime())));\n                 } catch (ParseException e) {\n                     LOG.error(\"Could not parse JWT {}\", model.getObject().getBody(), e);\n                     cellItem.add(new Label(componentId, StringUtils.EMPTY));"},{"sha":"c0f9af09e2b02a238a83e2179eb484baaa1cd14c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -21,6 +21,7 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import java.io.Serializable;\n import java.lang.reflect.Field;\n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Date;\n@@ -182,7 +183,9 @@ protected void addPropertyColumn(\n                 && (field.getType().equals(Boolean.class) || field.getType().equals(boolean.class))) {\n \n             columns.add(new BooleanPropertyColumn<>(new ResourceModel(name, name), name, name));\n-        } else if (field != null && !field.isSynthetic() && field.getType().equals(Date.class)) {\n+        } else if (field != null && !field.isSynthetic()\n+                && (field.getType().equals(Date.class) || field.getType().equals(OffsetDateTime.class))) {\n+\n             columns.add(new DatePropertyColumn<>(new ResourceModel(name, name), name, name));\n         } else {\n             columns.add(new PropertyColumn<>(new ResourceModel(name, name), name, name));"},{"sha":"7ff6dd25b03ded5f5cd21fbb495fcbe04a5a5053","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java","status":"modified","additions":30,"deletions":26,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -21,12 +21,13 @@\n import java.io.Serializable;\n import java.lang.reflect.Field;\n import java.lang.reflect.ParameterizedType;\n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n-import org.apache.commons.lang3.time.FastDateFormat;\n+import org.apache.commons.lang3.time.DateFormatUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.panels.search.AnyObjectSearchPanel;\n import org.apache.syncope.client.console.panels.search.GroupSearchPanel;\n@@ -43,8 +44,8 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.ui.commons.DateOps;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxGridFieldPanel;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.Schema;\n import org.apache.syncope.common.lib.report.SearchCondition;\n import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n@@ -106,8 +107,8 @@ protected List<String> load() {\n \n                 if (BeanPanel.this.getDefaultModelObject() != null) {\n                     ReflectionUtils.doWithFields(BeanPanel.this.getDefaultModelObject().getClass(),\n-                        field -> result.add(field.getName()),\n-                        field -> !field.isSynthetic() && !BeanPanel.this.excluded.contains(field.getName()));\n+                            field -> result.add(field.getName()),\n+                            field -> !field.isSynthetic() && !BeanPanel.this.excluded.contains(field.getName()));\n                 }\n \n                 return result;\n@@ -118,7 +119,7 @@ protected List<String> load() {\n \n             private static final long serialVersionUID = 9101744072914090143L;\n \n-            @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+            @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n             @Override\n             protected void populateItem(final ListItem<String> item) {\n                 String fieldName = item.getModelObject();\n@@ -146,20 +147,20 @@ protected void populateItem(final ListItem<String> item) {\n                     switch (scondAnnot.type()) {\n                         case \"USER\":\n                             panel = new UserSearchPanel.Builder(\n-                                new ListModel<>(clauses)).required(false).build(\"value\");\n+                                    new ListModel<>(clauses)).required(false).build(\"value\");\n                             builder = SyncopeClient.getUserSearchConditionBuilder();\n                             break;\n \n                         case \"GROUP\":\n                             panel = new GroupSearchPanel.Builder(\n-                                new ListModel<>(clauses)).required(false).build(\"value\");\n+                                    new ListModel<>(clauses)).required(false).build(\"value\");\n                             builder = SyncopeClient.getGroupSearchConditionBuilder();\n                             break;\n \n                         default:\n                             panel = new AnyObjectSearchPanel.Builder(\n-                                scondAnnot.type(),\n-                                new ListModel<>(clauses)).required(false).build(\"value\");\n+                                    scondAnnot.type(),\n+                                    new ListModel<>(clauses)).required(false).build(\"value\");\n                             builder = SyncopeClient.getAnyObjectSearchConditionBuilder(null);\n                     }\n \n@@ -170,7 +171,7 @@ protected void populateItem(final ListItem<String> item) {\n                     Class<?> listItemType = String.class;\n                     if (field.getGenericType() instanceof ParameterizedType) {\n                         listItemType = (Class<?>) ((ParameterizedType) field.getGenericType()).\n-                            getActualTypeArguments()[0];\n+                                getActualTypeArguments()[0];\n                     }\n \n                     if (listItemType.equals(String.class) && schemaAnnot != null) {\n@@ -180,43 +181,43 @@ protected void populateItem(final ListItem<String> item) {\n                             switch (type) {\n                                 case PLAIN:\n                                     choices.addAll(\n-                                        SchemaRestClient.getSchemas(SchemaType.PLAIN, schemaAnnot.anyTypeKind()));\n+                                            SchemaRestClient.getSchemas(SchemaType.PLAIN, schemaAnnot.anyTypeKind()));\n                                     break;\n \n                                 case DERIVED:\n                                     choices.addAll(\n-                                        SchemaRestClient.getSchemas(SchemaType.DERIVED, schemaAnnot.anyTypeKind()));\n+                                            SchemaRestClient.getSchemas(SchemaType.DERIVED, schemaAnnot.anyTypeKind()));\n                                     break;\n \n                                 case VIRTUAL:\n                                     choices.addAll(\n-                                        SchemaRestClient.getSchemas(SchemaType.VIRTUAL, schemaAnnot.anyTypeKind()));\n+                                            SchemaRestClient.getSchemas(SchemaType.VIRTUAL, schemaAnnot.anyTypeKind()));\n                                     break;\n \n                                 default:\n                             }\n                         }\n \n                         panel = new AjaxPalettePanel.Builder<>().setName(fieldName).build(\n-                            \"value\",\n-                            new PropertyModel<>(bean.getObject(), fieldName),\n-                            new ListModel<>(choices.stream().map(EntityTO::getKey).collect(Collectors.toList()))).\n-                            hideLabel();\n+                                \"value\",\n+                                new PropertyModel<>(bean.getObject(), fieldName),\n+                                new ListModel<>(choices.stream().map(EntityTO::getKey).collect(Collectors.toList()))).\n+                                hideLabel();\n                     } else if (listItemType.isEnum()) {\n                         panel = new AjaxPalettePanel.Builder<>().setName(fieldName).build(\n-                            \"value\",\n-                            new PropertyModel<>(bean.getObject(), fieldName),\n-                            new ListModel(List.of(listItemType.getEnumConstants()))).hideLabel();\n+                                \"value\",\n+                                new PropertyModel<>(bean.getObject(), fieldName),\n+                                new ListModel(List.of(listItemType.getEnumConstants()))).hideLabel();\n                     } else {\n                         panel = new MultiFieldPanel.Builder<>(\n-                            new PropertyModel<>(bean.getObject(), fieldName)).build(\n-                            \"value\",\n-                            fieldName,\n-                            buildSinglePanel(bean.getObject(), listItemType, fieldName, \"panel\")).hideLabel();\n+                                new PropertyModel<>(bean.getObject(), fieldName)).build(\n+                                \"value\",\n+                                fieldName,\n+                                buildSinglePanel(bean.getObject(), listItemType, fieldName, \"panel\")).hideLabel();\n                     }\n                 } else if (Map.class.equals(field.getType())) {\n                     panel = new AjaxGridFieldPanel(\n-                        \"value\", fieldName, new PropertyModel<>(bean, fieldName)).hideLabel();\n+                            \"value\", fieldName, new PropertyModel<>(bean, fieldName)).hideLabel();\n                 } else {\n                     panel = buildSinglePanel(bean.getObject(), field.getType(), fieldName, \"value\").hideLabel();\n                 }\n@@ -240,7 +241,10 @@ private static FieldPanel buildSinglePanel(\n                     id, fieldName, (Class<Number>) ClassUtils.resolvePrimitiveIfNecessary(type), model);\n         } else if (Date.class.equals(type)) {\n             result = new AjaxDateTimeFieldPanel(id, fieldName, model,\n-                    FastDateFormat.getInstance(SyncopeConstants.DEFAULT_DATE_PATTERN));\n+                    DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT);\n+        } else if (OffsetDateTime.class.equals(type)) {\n+            result = new AjaxDateTimeFieldPanel(id, fieldName, new DateOps.WrappedDateModel(model),\n+                    DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT);\n         } else if (type.isEnum()) {\n             result = new AjaxDropDownChoicePanel(id, fieldName, model).setChoices(List.of(type.getEnumConstants()));\n         } else {"},{"sha":"8ad5594a484c4d96b780efadd392d91240512f52","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DirectoryPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import java.io.Serializable;\n import java.util.Collection;\n@@ -59,7 +59,7 @@\n \n     protected static final Logger LOG = LoggerFactory.getLogger(DirectoryPanel.class);\n \n-    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+    protected static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     protected E restClient;\n \n@@ -278,7 +278,7 @@ protected void updateResultTable(final boolean create, final int rows) {\n \n         // take care of restClient handle: maybe not useful to keep into\n         AjaxDataTablePanel.Builder<T, String> resultTableBuilder = new AjaxDataTablePanel.Builder<>(\n-            dataProvider, page.getPageReference()) {\n+                dataProvider, page.getPageReference()) {\n \n             private static final long serialVersionUID = 2205322679547329123L;\n "},{"sha":"ff434d504e00615e065719244b7f1484ea1100e6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ImplementationModalPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationModalPanel.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.client.console.panels;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.IOException;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n@@ -49,7 +49,7 @@ public class ImplementationModalPanel extends AbstractModalPanel<ImplementationT\n \n     private static final long serialVersionUID = 5283548960927517342L;\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     private final ImplementationTO implementation;\n "},{"sha":"5f83d17bced91c1ee4c85c57ce296b0ee36b96b0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ParametersWizardAttrStep.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersWizardAttrStep.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersWizardAttrStep.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersWizardAttrStep.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -21,7 +21,7 @@\n import java.util.List;\n import javax.ws.rs.core.MediaType;\n import org.apache.commons.lang3.BooleanUtils;\n-import org.apache.commons.lang3.time.FastDateFormat;\n+import org.apache.commons.lang3.time.DateFormatUtils;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxSpinnerFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n@@ -30,7 +30,6 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.wicket.extensions.wizard.WizardStep;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -96,7 +95,7 @@ private Panel getFieldPanel(final String id, final ConfParam param, final PlainS\n             case Date:\n                 panel = new AjaxDateTimeFieldPanel(\n                         id, valueHeaderName, new Model<>(),\n-                        FastDateFormat.getInstance(SyncopeConstants.DEFAULT_DATE_PATTERN));\n+                        DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT);\n                 break;\n \n             case Boolean:"},{"sha":"79fdac669aee66ce08c456862a78dd55ebc07c22","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -32,6 +32,7 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.time.DateFormatUtils;\n import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.ui.commons.Constants;\n@@ -244,15 +245,15 @@ protected List<Comparator> load() {\n                     case GROUP_MEMBER:\n                     case RESOURCE:\n                         return List.of(\n-                            SearchClause.Comparator.EQUALS,\n-                            SearchClause.Comparator.NOT_EQUALS);\n+                                SearchClause.Comparator.EQUALS,\n+                                SearchClause.Comparator.NOT_EQUALS);\n \n                     case RELATIONSHIP:\n                         return List.of(\n-                            SearchClause.Comparator.IS_NOT_NULL,\n-                            SearchClause.Comparator.IS_NULL,\n-                            SearchClause.Comparator.EQUALS,\n-                            SearchClause.Comparator.NOT_EQUALS);\n+                                SearchClause.Comparator.IS_NOT_NULL,\n+                                SearchClause.Comparator.IS_NULL,\n+                                SearchClause.Comparator.EQUALS,\n+                                SearchClause.Comparator.NOT_EQUALS);\n \n                     case CUSTOM:\n                         return customizer.comparators();\n@@ -286,19 +287,19 @@ protected List<String> load() {\n \n                     case ROLE_MEMBERSHIP:\n                         return roleNames.getObject().stream().\n-                            sorted().collect(Collectors.toList());\n+                                sorted().collect(Collectors.toList());\n \n                     case PRIVILEGE:\n                         return privilegeNames.getObject().stream().\n-                            sorted().collect(Collectors.toList());\n+                                sorted().collect(Collectors.toList());\n \n                     case RESOURCE:\n                         return resourceNames.getObject().stream().\n-                            sorted().collect(Collectors.toList());\n+                                sorted().collect(Collectors.toList());\n \n                     case RELATIONSHIP:\n                         return RelationshipTypeRestClient.list().stream().\n-                            map(RelationshipTypeTO::getKey).collect(Collectors.toList());\n+                                map(RelationshipTypeTO::getKey).collect(Collectors.toList());\n \n                     case CUSTOM:\n                         return customizer.properties();\n@@ -815,7 +816,7 @@ public String getIdValue(final SearchClause.Comparator object, final int index)\n \n             @Override\n             public SearchClause.Comparator getObject(\n-                final String id, final IModel<? extends List<? extends SearchClause.Comparator>> choices) {\n+                    final String id, final IModel<? extends List<? extends SearchClause.Comparator>> choices) {\n \n                 if (id == null) {\n                     return SearchClause.Comparator.EQUALS;\n@@ -885,14 +886,14 @@ private void renderSearchValueField(\n             final SearchClause searchClause,\n             final AjaxTextFieldPanel property) {\n \n-        PlainSchemaTO plainSchemaTO = anames.getObject().get(property.getModelObject());\n-        if (plainSchemaTO == null) {\n+        PlainSchemaTO plainSchema = anames.getObject().get(property.getModelObject());\n+        if (plainSchema == null) {\n             PlainSchemaTO defaultPlainTO = new PlainSchemaTO();\n             defaultPlainTO.setType(AttrSchemaType.String);\n-            plainSchemaTO = dnames.getObject().getOrDefault(property.getModelObject(), defaultPlainTO);\n+            plainSchema = dnames.getObject().getOrDefault(property.getModelObject(), defaultPlainTO);\n         }\n \n-        switch (plainSchemaTO.getType()) {\n+        switch (plainSchema.getType()) {\n             case Boolean:\n                 value = new AjaxTextFieldPanel(\n                         \"value\",\n@@ -904,10 +905,9 @@ private void renderSearchValueField(\n                 break;\n \n             case Date:\n-                FastDateFormat fdf = FastDateFormat.getInstance(\n-                        plainSchemaTO.getConversionPattern() == null\n-                        ? SyncopeConstants.DEFAULT_DATE_PATTERN\n-                        : plainSchemaTO.getConversionPattern());\n+                FastDateFormat fdf = plainSchema.getConversionPattern() == null\n+                        ? DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT\n+                        : FastDateFormat.getInstance(plainSchema.getConversionPattern());\n \n                 value = new AjaxDateTimeFieldPanel(\n                         \"value\",\n@@ -936,7 +936,7 @@ public void setObject(final Object object) {\n                             super.setObject(object);\n                         }\n                     }\n-                }, FastDateFormat.getInstance(SyncopeConstants.DEFAULT_DATE_PATTERN));\n+                }, DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT);\n                 break;\n \n             case Enum:\n@@ -945,10 +945,10 @@ public void setObject(final Object object) {\n                         \"value\",\n                         new PropertyModel(searchClause, \"value\"),\n                         true);\n-                ((AjaxDropDownChoicePanel<String>) value).setChoices(SchemaUtils.getEnumeratedValues(plainSchemaTO));\n+                ((AjaxDropDownChoicePanel<String>) value).setChoices(SchemaUtils.getEnumeratedValues(plainSchema));\n \n-                if (StringUtils.isNotBlank(plainSchemaTO.getEnumerationKeys())) {\n-                    Map<String, String> valueMap = SchemaUtils.getEnumeratedKeyValues(plainSchemaTO);\n+                if (StringUtils.isNotBlank(plainSchema.getEnumerationKeys())) {\n+                    Map<String, String> valueMap = SchemaUtils.getEnumeratedKeyValues(plainSchema);\n                     ((AjaxDropDownChoicePanel) value).setChoiceRenderer(new IChoiceRenderer<String>() {\n \n                         private static final long serialVersionUID = -3724971416312135885L;"},{"sha":"46b96f0f6177ca42ccbfc33b3dd391fd24631a4f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.client.console.policies;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n@@ -50,7 +50,7 @@ public class PolicyRuleWizardBuilder extends BaseAjaxWizardBuilder<PolicyRuleWra\n \n     private static final long serialVersionUID = 5945391813567245081L;\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     private final String policy;\n "},{"sha":"191a5ec5fbaa82a3401112afc33191be39eb25f4","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportletWizardBuilder.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.client.console.reports;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.Serializable;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.ui.commons.Constants;\n@@ -49,14 +49,11 @@ public class ReportletWizardBuilder extends BaseAjaxWizardBuilder<ReportletWrapp\n \n     private static final long serialVersionUID = 5945391813567245081L;\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     private final String report;\n \n-    public ReportletWizardBuilder(\n-            final String report,\n-            final ReportletWrapper reportlet,\n-            final PageReference pageRef) {\n+    public ReportletWizardBuilder(final String report, final ReportletWrapper reportlet, final PageReference pageRef) {\n         super(reportlet, pageRef);\n         this.report = report;\n     }"},{"sha":"75b722463e4c6bedbaf73ffdb678fd316e9113aa","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/ExecutionRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FExecutionRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FExecutionRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FExecutionRestClient.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n-import org.apache.syncope.client.ui.commons.rest.RestClient;\n import java.util.Date;\n+import org.apache.syncope.client.ui.commons.rest.RestClient;\n import java.util.List;\n import java.util.Map;\n import org.apache.syncope.client.lib.batch.BatchRequest;\n@@ -28,7 +28,7 @@\n \n public interface ExecutionRestClient extends RestClient {\n \n-    void startExecution(String executionCollectorKey, Date start);\n+    void startExecution(String executionCollectorKey, Date startAt);\n \n     void deleteExecution(String executionKey);\n "},{"sha":"ef29eda4dc9a741c5cdbe28239742233487c99d0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/LoggerConfRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerConfRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerConfRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerConfRestClient.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.client.console.rest;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.Comparator;\n@@ -47,7 +47,7 @@ public class LoggerConfRestClient implements RestClient, LoggerConfOp {\n \n     private static final Logger LOG = LoggerFactory.getLogger(LoggerConfRestClient.class);\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     private final List<NetworkService> instances;\n "},{"sha":"a7af135ba0d79dd26ef69990a19760b122720fed","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -30,6 +30,7 @@\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.lib.batch.BatchRequest;\n+import org.apache.syncope.client.ui.commons.DateOps;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n@@ -39,8 +40,8 @@\n import org.apache.syncope.common.lib.types.ReportTemplateFormat;\n import org.apache.syncope.common.rest.api.batch.BatchRequestItem;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n-import org.apache.syncope.common.rest.api.beans.ExecQuery;\n-import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecListQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.apache.syncope.common.rest.api.service.ReportTemplateService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n@@ -88,8 +89,9 @@ public static void delete(final String reportKey) {\n     }\n \n     @Override\n-    public void startExecution(final String reportKey, final Date start) {\n-        getService(ReportService.class).execute(new ExecuteQuery.Builder().key(reportKey).startAt(start).build());\n+    public void startExecution(final String reportKey, final Date startAt) {\n+        getService(ReportService.class).execute(new ExecSpecs.Builder().key(reportKey).\n+                startAt(DateOps.convert(startAt)).build());\n     }\n \n     @Override\n@@ -110,15 +112,14 @@ public static Response exportExecutionResult(final String executionKey, final Re\n     public List<ExecTO> listExecutions(\n             final String taskKey, final int page, final int size, final SortParam<String> sort) {\n \n-        return getService(ReportService.class).\n-                listExecutions(new ExecQuery.Builder().key(taskKey).page(page).size(size).\n-                        orderBy(toOrderBy(sort)).build()).getResult();\n+        return getService(ReportService.class).listExecutions(new ExecListQuery.Builder().\n+                key(taskKey).page(page).size(size).orderBy(toOrderBy(sort)).build()).getResult();\n     }\n \n     @Override\n     public int countExecutions(final String taskKey) {\n         return getService(ReportService.class).\n-                listExecutions(new ExecQuery.Builder().key(taskKey).page(1).size(0).build()).getTotalCount();\n+                listExecutions(new ExecListQuery.Builder().key(taskKey).page(1).size(0).build()).getTotalCount();\n     }\n \n     @Override"},{"sha":"e32c100f6d154b7a65347b77dd189f54aa679982","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":16,"deletions":15,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -26,6 +26,7 @@\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.lib.batch.BatchRequest;\n+import org.apache.syncope.client.ui.commons.DateOps;\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n@@ -40,8 +41,8 @@\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.batch.BatchRequestItem;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n-import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n-import org.apache.syncope.common.rest.api.beans.ExecQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecListQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n@@ -91,7 +92,7 @@ public static int count(final AnyTypeKind anyTypeKind, final String entityKey, f\n     @Override\n     public int countExecutions(final String taskKey) {\n         return getService(TaskService.class).\n-                listExecutions(new ExecQuery.Builder().key(taskKey).page(1).size(0).build()).getTotalCount();\n+                listExecutions(new ExecListQuery.Builder().key(taskKey).page(1).size(0).build()).getTotalCount();\n     }\n \n     public static List<PropagationTaskTO> listPropagationTasks(\n@@ -145,7 +146,7 @@ public static List<NotificationTaskTO> listNotificationTasks(\n \n     @SuppressWarnings(\"unchecked\")\n     public static <T extends TaskTO> List<T> list(\n-        final Class<T> reference, final int page, final int size, final SortParam<String> sort) {\n+            final Class<T> reference, final int page, final int size, final SortParam<String> sort) {\n \n         return (List<T>) getService(TaskService.class).\n                 search(new TaskQuery.Builder(getTaskType(reference)).page(page).size(size).\n@@ -154,11 +155,11 @@ public static <T extends TaskTO> List<T> list(\n \n     @SuppressWarnings(\"unchecked\")\n     public static <T extends TaskTO> List<T> list(\n-        final String resource,\n-        final Class<T> reference,\n-        final int page,\n-        final int size,\n-        final SortParam<String> sort) {\n+            final String resource,\n+            final Class<T> reference,\n+            final int page,\n+            final int size,\n+            final SortParam<String> sort) {\n \n         return (List<T>) getService(TaskService.class).\n                 search(new TaskQuery.Builder(getTaskType(reference)).page(page).size(size).resource(resource).\n@@ -170,7 +171,7 @@ public List<ExecTO> listExecutions(\n             final String taskKey, final int page, final int size, final SortParam<String> sort) {\n \n         return getService(TaskService.class).\n-                listExecutions(new ExecQuery.Builder().key(taskKey).page(page).size(size).\n+                listExecutions(new ExecListQuery.Builder().key(taskKey).page(page).size(size).\n                         orderBy(toOrderBy(sort)).build()).getResult();\n     }\n \n@@ -207,13 +208,13 @@ public static void delete(final TaskType type, final String taskKey) {\n     }\n \n     @Override\n-    public void startExecution(final String taskKey, final Date start) {\n-        startExecution(taskKey, start, false);\n+    public void startExecution(final String taskKey, final Date startAt) {\n+        startExecution(taskKey, startAt, false);\n     }\n \n-    public static void startExecution(final String taskKey, final Date start, final boolean dryRun) {\n-        getService(TaskService.class).execute(\n-                new ExecuteQuery.Builder().key(taskKey).startAt(start).dryRun(dryRun).build());\n+    public static void startExecution(final String taskKey, final Date startAt, final boolean dryRun) {\n+        getService(TaskService.class).execute(new ExecSpecs.Builder().key(taskKey).\n+                startAt(DateOps.convert(startAt)).dryRun(dryRun).build());\n     }\n \n     @Override"},{"sha":"4d5b476c9836c6ab6c4d3b3687627b28db93f9e5","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/TaskAttributesDetailsView.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskAttributesDetailsView.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskAttributesDetailsView.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskAttributesDetailsView.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.client.console.tasks;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.IOException;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.panels.MultilevelPanel;\n@@ -39,7 +39,7 @@ public class TaskAttributesDetailsView extends MultilevelPanel.SecondLevel {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AnyPropagationTasks.class);\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     public TaskAttributesDetailsView(final PropagationTaskTO taskTO) {\n         super();"},{"sha":"83c1e68cbd2bd4cf55b3068244825abad4c9016c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/DatePropertyColumn.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FDatePropertyColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FDatePropertyColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FDatePropertyColumn.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table;\n \n+import java.time.OffsetDateTime;\n import java.util.Date;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n@@ -46,8 +47,10 @@ public void populateItem(final Item<ICellPopulator<T>> item, final String compon\n         IModel<?> date = getDataModel(rowModel);\n \n         String convertedDate = \"\";\n-        if (date.getObject() instanceof Date) {\n-            convertedDate = SyncopeConsoleSession.get().getDateFormat().format(date.getObject());\n+        if (date.getObject() instanceof OffsetDateTime) {\n+            convertedDate = SyncopeConsoleSession.get().getDateFormat().format((OffsetDateTime) date.getObject());\n+        } else if (date.getObject() instanceof Date) {\n+            convertedDate = SyncopeConsoleSession.get().getDateFormat().format((Date) date.getObject());\n         }\n         item.add(new Label(componentId, convertedDate));\n     }"},{"sha":"a049674f0ee53799756b9ce3824288a97affc0b4","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/LoadWidget.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FLoadWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FLoadWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FLoadWidget.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -54,8 +54,9 @@ private static Line build(final SystemInfo systeminfo) {\n         line.getOptions().setMultiTooltipTemplate(\"<%= datasetLabel %>\");\n \n         systeminfo.getLoad().forEach(instant -> {\n-            line.getData().getLabels().add(DateFormatUtils.ISO_8601_EXTENDED_DATETIME_FORMAT.\n-                    format(systeminfo.getStartTime() + instant.getUptime()));\n+            line.getData().getLabels().add(\n+                    DateFormatUtils.ISO_8601_EXTENDED_DATETIME_FORMAT.format(\n+                            systeminfo.getStartTime() + instant.getUptime()));\n \n             cpuValues.add(instant.getSystemLoadAverage() * 1000);\n             memValues.add(instant.getTotalMemory());"},{"sha":"d95b5935f901628edd4b7ee3fc17d6b16b93bba8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/ProgressesPanel.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FProgressesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FProgressesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FProgressesPanel.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.client.console.widgets;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.wicket.markup.html.basic.Label;\n@@ -30,7 +30,7 @@ public class ProgressesPanel extends Panel {\n \n     private static final long serialVersionUID = 7837262802315339565L;\n \n-    public ProgressesPanel(final String id, final Date lastUpdate, final List<ProgressBean> progressBeans) {\n+    public ProgressesPanel(final String id, final OffsetDateTime lastUpdate, final List<ProgressBean> progressBeans) {\n         super(id);\n \n         add(new Label(\"lastUpdate\", SyncopeConsoleSession.get().getDateFormat().format(lastUpdate)));\n@@ -47,5 +47,4 @@ protected void populateItem(final ListItem<ProgressBean> item) {\n         progresses.setOutputMarkupId(true);\n         add(progresses);\n     }\n-\n }"},{"sha":"90307ca8daa74a8c2bd82798a07915ff2fea1bc0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/ReconciliationWidget.java","status":"modified","additions":18,"deletions":17,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -21,10 +21,10 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.time.OffsetDateTime;\n import java.time.temporal.ChronoUnit;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Date;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n@@ -210,7 +210,7 @@ private Fragment buildExecFragment() {\n             execResult = parseReconciliationReportExec();\n         } catch (Exception e) {\n             LOG.error(\"Could not parse the reconciliation report result\", e);\n-            execResult = Pair.of(List.of(), new ReconciliationReport(new Date()));\n+            execResult = Pair.of(List.of(), new ReconciliationReport(OffsetDateTime.now()));\n         }\n         final List<ProgressBean> progressBeans = execResult.getLeft();\n         final ReconciliationReport report = execResult.getRight();\n@@ -311,7 +311,8 @@ private Pair<List<ProgressBean>, ReconciliationReport> parseReconciliationReport\n             }\n         }\n \n-        return Pair.of(beans, Optional.ofNullable(report).orElseGet(() -> new ReconciliationReport(new Date())));\n+        return Pair.of(beans, Optional.ofNullable(report).\n+                orElseGet(() -> new ReconciliationReport(OffsetDateTime.now())));\n     }\n \n     private class AnysReconciliationPanel extends DirectoryPanel<Any, Any, AnysReconciliationProvider, BaseRestClient> {\n@@ -361,12 +362,12 @@ protected List<IColumn<Any, String>> getColumns() {\n \n                 @Override\n                 public void populateItem(\n-                    final Item<ICellPopulator<Any>> cellItem,\n-                    final String componentId,\n-                    final IModel<Any> rowModel) {\n+                        final Item<ICellPopulator<Any>> cellItem,\n+                        final String componentId,\n+                        final IModel<Any> rowModel) {\n \n                     cellItem.add(new Label(componentId,\n-                        rowModel.getObject().getKey()\n+                            rowModel.getObject().getKey()\n                             + (StringUtils.isBlank(rowModel.getObject().getName())\n                             ? StringUtils.EMPTY\n                             : ' ' + rowModel.getObject().getName())));\n@@ -387,16 +388,16 @@ public void populateItem(\n \n                     @Override\n                     public void populateItem(\n-                        final Item<ICellPopulator<Any>> cellItem,\n-                        final String componentId,\n-                        final IModel<Any> rowModel) {\n+                            final Item<ICellPopulator<Any>> cellItem,\n+                            final String componentId,\n+                            final IModel<Any> rowModel) {\n \n                         Any any = rowModel.getObject();\n \n                         Optional<Missing> missing = any.getMissing().stream().\n-                            filter(object -> resource.equals(object.getResource())).findFirst();\n+                                filter(object -> resource.equals(object.getResource())).findFirst();\n                         List<Misaligned> misaligned = any.getMisaligned().stream().\n-                            filter(object -> resource.equals(object.getResource())).collect(Collectors.toList());\n+                                filter(object -> resource.equals(object.getResource())).collect(Collectors.toList());\n \n                         Component content;\n                         if (missing.isEmpty()) {\n@@ -410,14 +411,14 @@ public void populateItem(\n                                     @Override\n                                     public void onClick(final AjaxRequestTarget target, final Any ignore) {\n                                         modal.header(Model.of(\n-                                            rowModel.getObject().getType()\n+                                                rowModel.getObject().getType()\n                                                 + ' ' + rowModel.getObject().getKey()\n                                                 + ' ' + rowModel.getObject().getName()));\n                                         modal.setContent(new ReconDetailsModalPanel(\n-                                            modal,\n-                                            resource,\n-                                            misaligned,\n-                                            ReconciliationWidget.this.pageRef));\n+                                                modal,\n+                                                resource,\n+                                                misaligned,\n+                                                ReconciliationWidget.this.pageRef));\n                                         modal.show(true);\n                                         target.add(modal);\n                                     }"},{"sha":"6853f8d81d336d998d4d3f558e97e339ad4ef48d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/reconciliation/ReconciliationReport.java","status":"modified","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2Freconciliation%2FReconciliationReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2Freconciliation%2FReconciliationReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2Freconciliation%2FReconciliationReport.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,33 +19,28 @@\n package org.apache.syncope.client.console.widgets.reconciliation;\n \n import java.io.Serializable;\n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.List;\n-import java.util.Optional;\n \n public class ReconciliationReport implements Serializable {\n \n     private static final long serialVersionUID = 931063230006747313L;\n \n-    private final Date run;\n+    private final OffsetDateTime run;\n \n     private Anys users;\n \n     private Anys groups;\n \n     private final List<Anys> anyObjects = new ArrayList<>();\n \n-    public ReconciliationReport(final Date run) {\n-        if (run != null) {\n-            this.run = new Date(run.getTime());\n-        } else {\n-            this.run = null;\n-        }\n+    public ReconciliationReport(final OffsetDateTime run) {\n+        this.run = run;\n     }\n \n-    public Date getRun() {\n-        return Optional.ofNullable(run).map(date -> new Date(date.getTime())).orElse(null);\n+    public OffsetDateTime getRun() {\n+        return run;\n     }\n \n     public Anys getUsers() {\n@@ -67,5 +62,4 @@ public void setGroups(final Anys groups) {\n     public List<Anys> getAnyObjects() {\n         return anyObjects;\n     }\n-\n }"},{"sha":"d4300401c72647132c979fd36c688af309a46707","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/reconciliation/ReconciliationReportParser.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2Freconciliation%2FReconciliationReportParser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2Freconciliation%2FReconciliationReportParser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2Freconciliation%2FReconciliationReportParser.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.client.console.widgets.reconciliation;\n \n import java.io.InputStream;\n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n@@ -40,7 +40,7 @@ public final class ReconciliationReportParser {\n         XML_INPUT_FACTORY.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);\n     }\n \n-    public static ReconciliationReport parse(final Date run, final InputStream in)\n+    public static ReconciliationReport parse(final OffsetDateTime run, final InputStream in)\n             throws XMLStreamException, NumberFormatException {\n \n         XMLStreamReader streamReader = XML_INPUT_FACTORY.createXMLStreamReader(in);"},{"sha":"72397d50318debbe8f6ebe1385448b1b59b65757","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/DelegationWizardBuilder.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FDelegationWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FDelegationWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FDelegationWizardBuilder.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -23,15 +23,14 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.time.FastDateFormat;\n+import org.apache.commons.lang3.time.DateFormatUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.rest.DelegationRestClient;\n import org.apache.syncope.client.console.rest.UserRestClient;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDateTimeFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.DelegationTO;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n@@ -142,14 +141,14 @@ private static class StartEnd extends WizardStep {\n                     \"start\",\n                     \"start\",\n                     new PropertyModel<>(modelObject, \"start\"),\n-                    FastDateFormat.getInstance(SyncopeConstants.DEFAULT_DATE_PATTERN)).\n+                    DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT).\n                     addRequiredLabel());\n \n             add(new AjaxDateTimeFieldPanel(\n                     \"end\",\n                     \"end\",\n                     new PropertyModel<>(modelObject, \"end\"),\n-                    FastDateFormat.getInstance(SyncopeConstants.DEFAULT_DATE_PATTERN)));\n+                    DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT));\n         }\n     }\n \n@@ -172,23 +171,23 @@ private class Roles extends WizardStep implements WizardModel.ICondition {\n                     setAllowOrder(true).\n                     build(\"roles\",\n                             new PropertyModel<>(modelObject, \"roles\"),\n-                        new AjaxPalettePanel.Builder.Query<>() {\n+                            new AjaxPalettePanel.Builder.Query<>() {\n \n-                            private static final long serialVersionUID = 3900199363626636719L;\n+                        private static final long serialVersionUID = 3900199363626636719L;\n \n-                            @Override\n-                            public List<String> execute(final String filter) {\n-                                if (StringUtils.isEmpty(filter) || \"*\".equals(filter)) {\n-                                    return allRoles.size() > Constants.MAX_ROLE_LIST_SIZE\n+                        @Override\n+                        public List<String> execute(final String filter) {\n+                            if (StringUtils.isEmpty(filter) || \"*\".equals(filter)) {\n+                                return allRoles.size() > Constants.MAX_ROLE_LIST_SIZE\n                                         ? allRoles.subList(0, Constants.MAX_ROLE_LIST_SIZE)\n                                         : allRoles;\n \n-                                }\n-                                return allRoles.stream().\n+                            }\n+                            return allRoles.stream().\n                                     filter(role -> StringUtils.containsIgnoreCase(role, filter)).\n                                     collect(Collectors.toList());\n-                            }\n-                        }).\n+                        }\n+                    }).\n                     hideLabel().\n                     setOutputMarkupId(true));\n         }"},{"sha":"fd6a0617da49ac74554e1de0f3edc0a62bb8137b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrsWizardStep.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -29,6 +29,7 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.ListUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.time.DateFormatUtils;\n import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n@@ -202,10 +203,10 @@ protected FieldPanel getFieldPanel(final PlainSchemaTO plainSchema) {\n \n             case Date:\n                 String datePattern = plainSchema.getConversionPattern() == null\n-                        ? SyncopeConstants.DEFAULT_DATE_PATTERN\n+                        ? DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT.getPattern()\n                         : plainSchema.getConversionPattern();\n \n-                if (datePattern.contains(\"H\")) {\n+                if (StringUtils.containsIgnoreCase(datePattern, \"H\")) {\n                     panel = new AjaxDateTimeFieldPanel(\n                             \"panel\",\n                             plainSchema.getLabel(SyncopeConsoleSession.get().getLocale()),"},{"sha":"dbf75e3b64ae622c49e5b69827231fcc664db279","filename":"client/idrepo/console/src/test/java/org/apache/syncope/client/console/layout/AnyLayoutTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FAnyLayoutTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FAnyLayoutTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FAnyLayoutTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -22,15 +22,15 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.util.Arrays;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.junit.jupiter.api.Test;\n \n public class AnyLayoutTest {\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     @Test\n     public void issueSYNCOPE1554() throws JsonProcessingException {"},{"sha":"d65ce99c2e873c88b5a31b64e9fe29afebf302f3","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/PreferenceManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FPreferenceManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FPreferenceManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FPreferenceManager.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.client.enduser;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.IOException;\n import java.io.Serializable;\n import java.io.StringWriter;\n@@ -47,7 +47,7 @@ public final class PreferenceManager implements Serializable {\n \n     private static final int ONE_YEAR_TIME = 60 * 60 * 24 * 365;\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     private static final TypeReference<Map<String, String>> MAP_TYPE_REF = new TypeReference<>() {\n     };"},{"sha":"6faf88addc69ec7bf64864c5f839ebf85e74b09d","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,7 +20,6 @@\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n-import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n@@ -52,6 +51,8 @@\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n import java.util.stream.Collectors;\n+import org.apache.commons.lang3.time.FastDateFormat;\n+import org.apache.syncope.client.ui.commons.DateOps;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n \n public class SyncopeEnduserSession extends AuthenticatedWebSession implements BaseSession {\n@@ -344,7 +345,7 @@ public <T> void resetClient(final Class<T> service) {\n     }\n \n     @Override\n-    public FastDateFormat getDateFormat() {\n-        return FastDateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, getLocale());\n+    public DateOps.Format getDateFormat() {\n+        return new DateOps.Format(FastDateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, getLocale()));\n     }\n }"},{"sha":"7592ee8bc78c742a2fcb9705662233e7c936a784","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeWebApplication.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.client.enduser;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import com.giffing.wicket.spring.boot.starter.app.WicketBootStandardWebApplication;\n import de.agilecoders.wicket.core.Bootstrap;\n import de.agilecoders.wicket.core.settings.BootstrapSettings;\n@@ -75,7 +75,7 @@ public class SyncopeWebApplication extends WicketBootStandardWebApplication {\n     public static final List<Locale> SUPPORTED_LOCALES = List.of(\n             Locale.ENGLISH, Locale.ITALIAN, new Locale(\"pt\", \"BR\"), new Locale(\"ru\"), Locale.JAPANESE);\n \n-    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+    protected static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     public static SyncopeWebApplication get() {\n         return (SyncopeWebApplication) WebApplication.get();"},{"sha":"dd9a0755e03e4ad0e07c66903c34783f98bf3719","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/pages/SelfRegistration.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSelfRegistration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSelfRegistration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSelfRegistration.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.client.enduser.pages;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import org.apache.syncope.client.enduser.SyncopeWebApplication;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.layout.UserFormLayoutInfo;\n@@ -37,7 +37,7 @@ public class SelfRegistration extends BasePage {\n \n     public static final String NEW_USER_PARAM = \"newUser\";\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    protected static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     public SelfRegistration(final PageParameters parameters) {\n         super(parameters, SELF_REGISTRATION);"},{"sha":"f3cca34f32e905f0936a004aba9104a321538913","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/any/PlainAttrs.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FPlainAttrs.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.Attributable;\n import org.apache.syncope.common.lib.EntityTOUtils;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.AttributeModifier;\n@@ -45,6 +44,7 @@\n import org.apache.wicket.markup.html.list.ListView;\n import org.apache.wicket.model.util.ListModel;\n import java.util.stream.Collectors;\n+import org.apache.commons.lang3.time.DateFormatUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.ui.commons.markup.html.form.AbstractFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n@@ -94,29 +94,29 @@ public PlainAttrs(\n             protected void populateItem(final ListItem<MembershipTO> item) {\n                 MembershipTO membershipTO = item.getModelObject();\n                 item.add(new Accordion(\"membershipPlainSchemas\", List.of(new AbstractTab(\n-                    new StringResourceModel(\n-                        \"attributes.membership.accordion\",\n-                        PlainAttrs.this,\n-                        Model.of(membershipTO))) {\n+                        new StringResourceModel(\n+                                \"attributes.membership.accordion\",\n+                                PlainAttrs.this,\n+                                Model.of(membershipTO))) {\n \n                     private static final long serialVersionUID = 1037272333056449378L;\n \n                     @Override\n                     public WebMarkupContainer getPanel(final String panelId) {\n                         return new PlainSchemasMemberships(\n-                            panelId,\n-                            membershipTO.getGroupName(),\n-                            membershipSchemas.get(membershipTO.getGroupKey()),\n-                            new LoadableDetachableModel<>() { // SYNCOPE-1439\n+                                panelId,\n+                                membershipTO.getGroupName(),\n+                                membershipSchemas.get(membershipTO.getGroupKey()),\n+                                new LoadableDetachableModel<>() { // SYNCOPE-1439\n \n-                                private static final long serialVersionUID = 526768546610546553L;\n+                            private static final long serialVersionUID = 526768546610546553L;\n \n-                                @Override\n-                                protected Attributable load() {\n-                                    return membershipTO;\n-                                }\n+                            @Override\n+                            protected Attributable load() {\n+                                return membershipTO;\n+                            }\n \n-                            });\n+                        });\n                     }\n                 }), Model.of(-1)).setOutputMarkupId(true));\n             }\n@@ -192,38 +192,38 @@ protected FieldPanel getFieldPanel(final PlainSchemaTO schemaTO) {\n     }\n \n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-    protected FieldPanel getFieldPanel(final PlainSchemaTO schemaTO, final String groupName) {\n-        final boolean required = schemaTO.getMandatoryCondition().equalsIgnoreCase(\"true\");\n-        final boolean readOnly = schemaTO.isReadonly() || renderAsReadonly(schemaTO.getKey(), groupName);\n-        final AttrSchemaType type = schemaTO.getType();\n-        final boolean jexlHelp = false;\n+    protected FieldPanel getFieldPanel(final PlainSchemaTO plainSchema, final String groupName) {\n+        boolean required = plainSchema.getMandatoryCondition().equalsIgnoreCase(\"true\");\n+        boolean readOnly = plainSchema.isReadonly() || renderAsReadonly(plainSchema.getKey(), groupName);\n+        AttrSchemaType type = plainSchema.getType();\n+        boolean jexlHelp = false;\n \n         FieldPanel panel;\n         switch (type) {\n             case Boolean:\n                 panel = new AjaxCheckBoxPanel(\n                         \"panel\",\n-                        schemaTO.getLabel(SyncopeEnduserSession.get().getLocale()),\n+                        plainSchema.getLabel(SyncopeEnduserSession.get().getLocale()),\n                         new Model<>(),\n                         true);\n                 panel.setRequired(required);\n                 break;\n \n             case Date:\n-                String datePattern = schemaTO.getConversionPattern() == null\n-                        ? SyncopeConstants.DEFAULT_DATE_PATTERN\n-                        : schemaTO.getConversionPattern();\n+                String datePattern = plainSchema.getConversionPattern() == null\n+                        ? DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT.getPattern()\n+                        : plainSchema.getConversionPattern();\n \n-                if (datePattern.contains(\"H\")) {\n+                if (StringUtils.containsIgnoreCase(datePattern, \"H\")) {\n                     panel = new AjaxDateTimeFieldPanel(\n                             \"panel\",\n-                            schemaTO.getLabel(SyncopeEnduserSession.get().getLocale()),\n+                            plainSchema.getLabel(SyncopeEnduserSession.get().getLocale()),\n                             new Model<>(),\n                             FastDateFormat.getInstance(datePattern));\n                 } else {\n                     panel = new AjaxDateFieldPanel(\n                             \"panel\",\n-                            schemaTO.getLabel(SyncopeEnduserSession.get().getLocale()),\n+                            plainSchema.getLabel(SyncopeEnduserSession.get().getLocale()),\n                             new Model<>(),\n                             FastDateFormat.getInstance(datePattern));\n                 }\n@@ -236,15 +236,15 @@ protected FieldPanel getFieldPanel(final PlainSchemaTO schemaTO, final String gr\n \n             case Enum:\n                 panel = new AjaxDropDownChoicePanel<>(\"panel\",\n-                        schemaTO.getLabel(SyncopeEnduserSession.get().getLocale()), new Model<>(), true);\n-                ((AjaxDropDownChoicePanel<String>) panel).setChoices(SchemaUtils.getEnumeratedValues(schemaTO));\n+                        plainSchema.getLabel(SyncopeEnduserSession.get().getLocale()), new Model<>(), true);\n+                ((AjaxDropDownChoicePanel<String>) panel).setChoices(SchemaUtils.getEnumeratedValues(plainSchema));\n \n-                if (StringUtils.isNotBlank(schemaTO.getEnumerationKeys())) {\n+                if (StringUtils.isNotBlank(plainSchema.getEnumerationKeys())) {\n                     ((AjaxDropDownChoicePanel) panel).setChoiceRenderer(new IChoiceRenderer<String>() {\n \n                         private static final long serialVersionUID = -3724971416312135885L;\n \n-                        private final Map<String, String> valueMap = SchemaUtils.getEnumeratedKeyValues(schemaTO);\n+                        private final Map<String, String> valueMap = SchemaUtils.getEnumeratedKeyValues(plainSchema);\n \n                         @Override\n                         public String getDisplayValue(final String value) {\n@@ -272,7 +272,7 @@ public String getObject(\n             case Long:\n                 panel = new AjaxSpinnerFieldPanel.Builder<Long>().enableOnChange().build(\n                         \"panel\",\n-                        schemaTO.getLabel(SyncopeEnduserSession.get().getLocale()),\n+                        plainSchema.getLabel(SyncopeEnduserSession.get().getLocale()),\n                         Long.class,\n                         new Model<>());\n \n@@ -284,7 +284,7 @@ public String getObject(\n             case Double:\n                 panel = new AjaxSpinnerFieldPanel.Builder<Double>().enableOnChange().step(0.1).build(\n                         \"panel\",\n-                        schemaTO.getLabel(SyncopeEnduserSession.get().getLocale()),\n+                        plainSchema.getLabel(SyncopeEnduserSession.get().getLocale()),\n                         Double.class,\n                         new Model<>());\n \n@@ -296,9 +296,9 @@ public String getObject(\n             case Binary:\n                 panel = new BinaryFieldPanel(\n                         \"panel\",\n-                        schemaTO.getLabel(SyncopeEnduserSession.get().getLocale()),\n+                        plainSchema.getLabel(SyncopeEnduserSession.get().getLocale()),\n                         new Model<>(),\n-                        schemaTO.getMimeType(),\n+                        plainSchema.getMimeType(),\n                         fileKey);\n                 if (required) {\n                     panel.addRequiredLabel();\n@@ -307,7 +307,7 @@ public String getObject(\n \n             case Encrypted:\n                 panel = new EncryptedFieldPanel(\"panel\",\n-                        schemaTO.getLabel(SyncopeEnduserSession.get().getLocale()), new Model<>(), true);\n+                        plainSchema.getLabel(SyncopeEnduserSession.get().getLocale()), new Model<>(), true);\n \n                 if (required) {\n                     panel.addRequiredLabel();\n@@ -316,7 +316,7 @@ public String getObject(\n \n             default:\n                 panel = new AjaxTextFieldPanel(\"panel\",\n-                        schemaTO.getLabel(SyncopeEnduserSession.get().getLocale()), new Model<>(), true);\n+                        plainSchema.getLabel(SyncopeEnduserSession.get().getLocale()), new Model<>(), true);\n \n                 if (jexlHelp) {\n                     AjaxTextFieldPanel.class.cast(panel).enableJexlHelp();\n@@ -328,11 +328,12 @@ public String getObject(\n         }\n \n         panel.setReadOnly(readOnly);\n-        panel.setMarkupId(StringUtils.isBlank(groupName) ? schemaTO.getKey() : groupName + '.' + schemaTO.getKey());\n+        panel.setMarkupId(StringUtils.isBlank(groupName)\n+                ? plainSchema.getKey() : groupName + '.' + plainSchema.getKey());\n \n         Label label = (Label) panel.get(AbstractFieldPanel.LABEL);\n         label.add(new AttributeModifier(\"for\", FORM_SUFFIX\n-                + (StringUtils.isBlank(groupName) ? schemaTO.getKey() : groupName + '.' + schemaTO.getKey())));\n+                + (StringUtils.isBlank(groupName) ? plainSchema.getKey() : groupName + '.' + plainSchema.getKey())));\n \n         return panel;\n     }\n@@ -350,14 +351,14 @@ public PlainSchemasMemberships(\n             super(id);\n \n             add(new ListView<>(\"schemas\",\n-                new ListModel<>(new ArrayList<>(\n-                    attributableTO.getObject().getPlainAttrs().stream().sorted(attrComparator).\n-                        collect(Collectors.toList())))) {\n+                    new ListModel<>(new ArrayList<>(\n+                            attributableTO.getObject().getPlainAttrs().stream().sorted(attrComparator).\n+                                    collect(Collectors.toList())))) {\n \n                 private static final long serialVersionUID = 5306618783986001008L;\n \n                 @Override\n-                @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+                @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n                 protected void populateItem(final ListItem<Attr> item) {\n                     Attr attrTO = item.getModelObject();\n                     PlainSchemaTO schema = schemas.get(attrTO.getSchema());\n@@ -371,14 +372,14 @@ protected void populateItem(final ListItem<Attr> item) {\n                     AbstractFieldPanel<?> panel = getFieldPanel(schemas.get(attrTO.getSchema()));\n                     if (schemas.get(attrTO.getSchema()).isMultivalue()) {\n                         panel = new MultiFieldPanel.Builder<>(\n-                            new PropertyModel<>(\n-                                attributableTO.getObject().getPlainAttr(attrTO.getSchema()), \"values\"))\n-                            .build(\"panel\", attrTO.getSchema(), FieldPanel.class.cast(panel));\n+                                new PropertyModel<>(\n+                                        attributableTO.getObject().getPlainAttr(attrTO.getSchema()), \"values\"))\n+                                .build(\"panel\", attrTO.getSchema(), FieldPanel.class.cast(panel));\n                         // SYNCOPE-1215 the entire multifield panel must be readonly, not only its field\n                         ((MultiFieldPanel) panel).setReadOnly(schema == null ? false : schema.isReadonly());\n                     } else {\n                         FieldPanel.class.cast(panel).setNewModel(attrTO.getValues()).\n-                            setReadOnly(schema == null ? false : schema.isReadonly());\n+                                setReadOnly(schema == null ? false : schema.isReadonly());\n                     }\n \n                     item.add(panel);\n@@ -403,7 +404,7 @@ public PlainSchemasOwn(\n                 private static final long serialVersionUID = 9101744072914090143L;\n \n                 @Override\n-                @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+                @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n                 protected void populateItem(final ListItem<Attr> item) {\n                     Attr attrTO = item.getModelObject();\n                     PlainSchemaTO schema = schemas.get(attrTO.getSchema());\n@@ -417,20 +418,19 @@ protected void populateItem(final ListItem<Attr> item) {\n                     AbstractFieldPanel<?> panel = getFieldPanel(schemas.get(attrTO.getSchema()));\n                     if (schemas.get(attrTO.getSchema()).isMultivalue()) {\n                         panel = new MultiFieldPanel.Builder<>(\n-                            new PropertyModel<>(attrTO, \"values\")).build(\n-                            \"panel\",\n-                            attrTO.getSchema(),\n-                            FieldPanel.class.cast(panel));\n+                                new PropertyModel<>(attrTO, \"values\")).build(\n+                                \"panel\",\n+                                attrTO.getSchema(),\n+                                FieldPanel.class.cast(panel));\n                         // SYNCOPE-1215 the entire multifield panel must be readonly, not only its field\n                         ((MultiFieldPanel) panel).setReadOnly(schema == null ? false : schema.isReadonly());\n                     } else {\n                         FieldPanel.class.cast(panel).setNewModel(attrTO.getValues()).\n-                            setReadOnly(schema == null ? false : schema.isReadonly());\n+                                setReadOnly(schema == null ? false : schema.isReadonly());\n                     }\n                     item.add(panel);\n                 }\n             });\n         }\n     }\n-\n }"},{"sha":"148c625f1fda26970dc76608aa8c45b169c367cf","filename":"client/idrepo/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.client.lib.batch.BatchRequest;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.Base64;\n@@ -70,7 +70,7 @@ public class SyncopeClient {\n \n     protected static final String HEADER_SPLIT_PROPERTY = \"org.apache.cxf.http.header.split\";\n \n-    protected static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+    protected static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     protected final MediaType mediaType;\n \n@@ -155,7 +155,7 @@ protected JsonNode info() throws IOException {\n                 () -> webClient.header(HttpHeaders.AUTHORIZATION, \"Basic \" + Base64.getEncoder().encodeToString(\n                         (restClientFactory.getUsername() + \":\" + restClientFactory.getPassword()).getBytes())));\n \n-        return OBJECT_MAPPER.readTree((InputStream) webClient.get().getEntity());\n+        return MAPPER.readTree((InputStream) webClient.get().getEntity());\n     }\n \n     public Pair<String, String> gitAndBuildInfo() {\n@@ -170,23 +170,23 @@ public Pair<String, String> gitAndBuildInfo() {\n \n     public PlatformInfo platform() {\n         try {\n-            return OBJECT_MAPPER.treeToValue(info().get(\"platform\"), PlatformInfo.class);\n+            return MAPPER.treeToValue(info().get(\"platform\"), PlatformInfo.class);\n         } catch (IOException e) {\n             throw new RuntimeException(\"While getting Platform Info\", e);\n         }\n     }\n \n     public SystemInfo system() {\n         try {\n-            return OBJECT_MAPPER.treeToValue(info().get(\"system\"), SystemInfo.class);\n+            return MAPPER.treeToValue(info().get(\"system\"), SystemInfo.class);\n         } catch (IOException e) {\n             throw new RuntimeException(\"While getting System Info\", e);\n         }\n     }\n \n     public NumbersInfo numbers() {\n         try {\n-            return OBJECT_MAPPER.treeToValue(info().get(\"numbers\"), NumbersInfo.class);\n+            return MAPPER.treeToValue(info().get(\"numbers\"), NumbersInfo.class);\n         } catch (IOException e) {\n             throw new RuntimeException(\"While getting Numbers Info\", e);\n         }\n@@ -366,15 +366,14 @@ public Triple<Map<String, Set<String>>, List<String>, UserTO> self() {\n         }\n \n         try {\n-            return Triple.of(\n-                    OBJECT_MAPPER.readValue(\n-                            response.getHeaderString(RESTHeaders.OWNED_ENTITLEMENTS),\n-                        new TypeReference<>() {\n-                        }),\n-                    OBJECT_MAPPER.readValue(\n+            return Triple.of(MAPPER.readValue(\n+                    response.getHeaderString(RESTHeaders.OWNED_ENTITLEMENTS),\n+                    new TypeReference<>() {\n+            }),\n+                    MAPPER.readValue(\n                             response.getHeaderString(RESTHeaders.DELEGATIONS),\n-                        new TypeReference<>() {\n-                        }),\n+                            new TypeReference<>() {\n+                    }),\n                     response.readEntity(UserTO.class));\n         } catch (IOException e) {\n             throw new IllegalStateException(e);"},{"sha":"ab5abac33680ec46690db119b05e96da9f983fc9","filename":"client/idrepo/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -29,7 +29,7 @@\n import org.apache.cxf.configuration.jsse.TLSClientParameters;\n import org.apache.cxf.ext.logging.LoggingFeature;\n import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n-import org.apache.syncope.common.lib.jackson.SyncopeObjectMapper;\n+import org.apache.syncope.common.lib.jackson.SyncopeJsonMapper;\n import org.apache.syncope.common.lib.jackson.SyncopeXmlMapper;\n import org.apache.syncope.common.lib.jackson.SyncopeYAMLMapper;\n import org.apache.syncope.common.rest.api.DateParamConverterProvider;\n@@ -87,7 +87,7 @@ public static ContentType fromString(final String value) {\n     private JAXRSClientFactoryBean restClientFactoryBean;\n \n     protected static JacksonJsonProvider defaultJsonProvider() {\n-        return new JacksonJsonProvider(new SyncopeObjectMapper());\n+        return new JacksonJsonProvider(new SyncopeJsonMapper());\n     }\n \n     protected static JacksonXMLProvider defaultXmlProvider() {\n@@ -139,19 +139,15 @@ public void setJsonProvider(final JacksonJsonProvider jsonProvider) {\n     }\n \n     public JacksonXMLProvider getXmlProvider() {\n-        return xmlProvider == null\n-                ? defaultXmlProvider()\n-                : xmlProvider;\n+        return Optional.ofNullable(xmlProvider).orElseGet(SyncopeClientFactoryBean::defaultXmlProvider);\n     }\n \n     public void setXmlProvider(final JacksonXMLProvider xmlProvider) {\n         this.xmlProvider = xmlProvider;\n     }\n \n     public JacksonYAMLProvider getYamlProvider() {\n-        return yamlProvider == null\n-                ? defaultYamlProvider()\n-                : yamlProvider;\n+        return Optional.ofNullable(yamlProvider).orElseGet(SyncopeClientFactoryBean::defaultYamlProvider);\n     }\n \n     public void setYamlProvider(final JacksonYAMLProvider yamlProvider) {"},{"sha":"34ba088fe589d171f277c04bfa73a1d992b594d9","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/AMSession.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAMSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAMSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAMSession.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.common.lib;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import org.apache.syncope.common.lib.to.EntityTO;\n \n public class AMSession implements EntityTO {\n@@ -27,7 +27,7 @@ public class AMSession implements EntityTO {\n \n     private String key;\n \n-    private Date authenticationDate;\n+    private OffsetDateTime authenticationDate;\n \n     private String principal;\n \n@@ -43,11 +43,11 @@ public void setKey(final String key) {\n         this.key = key;\n     }\n \n-    public Date getAuthenticationDate() {\n+    public OffsetDateTime getAuthenticationDate() {\n         return authenticationDate;\n     }\n \n-    public void setAuthenticationDate(final Date authenticationDate) {\n+    public void setAuthenticationDate(final OffsetDateTime authenticationDate) {\n         this.authenticationDate = authenticationDate;\n     }\n "},{"sha":"fc01b3d5e4e745fade7f0a2d78b1943ddd59fc9b","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/GoogleMfaAuthAccount.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthAccount.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,10 +18,9 @@\n  */\n package org.apache.syncope.common.lib.wa;\n \n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.List;\n-import java.util.Optional;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n@@ -35,7 +34,7 @@ public static class Builder {\n \n         private final GoogleMfaAuthAccount instance = new GoogleMfaAuthAccount();\n \n-        public GoogleMfaAuthAccount.Builder registrationDate(final Date date) {\n+        public GoogleMfaAuthAccount.Builder registrationDate(final OffsetDateTime date) {\n             instance.setRegistrationDate(date);\n             return this;\n         }\n@@ -80,7 +79,7 @@ public GoogleMfaAuthAccount build() {\n \n     private List<Integer> scratchCodes = new ArrayList<>(0);\n \n-    private Date registrationDate;\n+    private OffsetDateTime registrationDate;\n \n     public String getName() {\n         return name;\n@@ -122,14 +121,12 @@ public void setScratchCodes(final List<Integer> scratchCodes) {\n         this.scratchCodes = scratchCodes;\n     }\n \n-    public Date getRegistrationDate() {\n-        return Optional.ofNullable(this.registrationDate).\n-                map(date -> new Date(date.getTime())).orElse(null);\n+    public OffsetDateTime getRegistrationDate() {\n+        return registrationDate;\n     }\n \n-    public void setRegistrationDate(final Date registrationDate) {\n-        this.registrationDate = Optional.ofNullable(registrationDate).\n-                map(date -> new Date(date.getTime())).orElse(null);\n+    public void setRegistrationDate(final OffsetDateTime registrationDate) {\n+        this.registrationDate = registrationDate;\n     }\n \n     @Override"},{"sha":"055f41b22ab9ecfe43ab93d5d57ea5d89c3be32a","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/GoogleMfaAuthToken.java","status":"modified","additions":8,"deletions":11,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthToken.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,8 +18,7 @@\n  */\n package org.apache.syncope.common.lib.wa;\n \n-import java.util.Date;\n-import java.util.Optional;\n+import java.time.OffsetDateTime;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n@@ -33,8 +32,8 @@ public static class Builder {\n \n         private final GoogleMfaAuthToken instance = new GoogleMfaAuthToken();\n \n-        public GoogleMfaAuthToken.Builder issueDate(final Date issued) {\n-            instance.setIssueDate(issued);\n+        public GoogleMfaAuthToken.Builder issueDate(final OffsetDateTime issueDate) {\n+            instance.setIssueDate(issueDate);\n             return this;\n         }\n \n@@ -50,7 +49,7 @@ public GoogleMfaAuthToken build() {\n \n     private int otp;\n \n-    private Date issueDate;\n+    private OffsetDateTime issueDate;\n \n     public int getOtp() {\n         return otp;\n@@ -60,14 +59,12 @@ public void setOtp(final int otp) {\n         this.otp = otp;\n     }\n \n-    public Date getIssueDate() {\n-        return Optional.ofNullable(this.issueDate).\n-                map(date -> new Date(date.getTime())).orElse(null);\n+    public OffsetDateTime getIssueDate() {\n+        return issueDate;\n     }\n \n-    public void setIssueDate(final Date issueDate) {\n-        this.issueDate = Optional.ofNullable(issueDate).\n-                map(date -> new Date(date.getTime())).orElse(null);\n+    public void setIssueDate(final OffsetDateTime issueDate) {\n+        this.issueDate = issueDate;\n     }\n \n     @Override"},{"sha":"54abb47058d7f8b1f75fb74d0996a5484359937d","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/U2FDevice.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FU2FDevice.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FU2FDevice.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FU2FDevice.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,8 +18,7 @@\n  */\n package org.apache.syncope.common.lib.wa;\n \n-import java.util.Date;\n-import java.util.Optional;\n+import java.time.OffsetDateTime;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n@@ -33,7 +32,7 @@ public static class Builder {\n \n         private final U2FDevice instance = new U2FDevice();\n \n-        public U2FDevice.Builder issueDate(final Date issued) {\n+        public U2FDevice.Builder issueDate(final OffsetDateTime issued) {\n             instance.setIssueDate(issued);\n             return this;\n         }\n@@ -57,7 +56,7 @@ public U2FDevice build() {\n \n     private String record;\n \n-    private Date issueDate;\n+    private OffsetDateTime issueDate;\n \n     public String getRecord() {\n         return record;\n@@ -75,14 +74,12 @@ public void setId(final long id) {\n         this.id = id;\n     }\n \n-    public Date getIssueDate() {\n-        return Optional.ofNullable(this.issueDate).\n-                map(date -> new Date(date.getTime())).orElse(null);\n+    public OffsetDateTime getIssueDate() {\n+        return issueDate;\n     }\n \n-    public void setIssueDate(final Date issueDate) {\n-        this.issueDate = Optional.ofNullable(issueDate).\n-                map(date -> new Date(date.getTime())).orElse(null);\n+    public void setIssueDate(final OffsetDateTime issueDate) {\n+        this.issueDate = issueDate;\n     }\n \n     @Override"},{"sha":"adb47a8f5d9c6d6662869cf11e4cab5840d0b420","filename":"common/am/lib/src/test/java/org/apache/syncope/common/lib/JSONTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fam%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fam%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,10 +19,11 @@\n package org.apache.syncope.common.lib;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.syncope.common.lib.jackson.SyncopeJsonMapper;\n \n public class JSONTest extends SerializationTest {\n \n-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+    private static final ObjectMapper OBJECT_MAPPER = new SyncopeJsonMapper();\n \n     @Override\n     protected ObjectMapper objectMapper() {"},{"sha":"093322a7417c1b584ba7013ad4f3d4d53779275f","filename":"common/am/lib/src/test/java/org/apache/syncope/common/lib/YAMLTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fam%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FYAMLTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fam%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FYAMLTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FYAMLTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,10 +20,11 @@\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n+import org.apache.syncope.common.lib.jackson.SyncopeYAMLMapper;\n \n public class YAMLTest extends SerializationTest {\n \n-    private static final YAMLMapper YAML_MAPPER = new YAMLMapper();\n+    private static final YAMLMapper YAML_MAPPER = new SyncopeYAMLMapper();\n \n     @Override\n     protected ObjectMapper objectMapper() {"},{"sha":"55422cc1d4d467118b8c07ced4aebae430e10b43","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/U2FDeviceQuery.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FU2FDeviceQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FU2FDeviceQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FU2FDeviceQuery.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -21,7 +21,7 @@\n import io.swagger.v3.oas.annotations.Parameter;\n import io.swagger.v3.oas.annotations.enums.ParameterIn;\n import io.swagger.v3.oas.annotations.media.Schema;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import javax.ws.rs.QueryParam;\n \n public class U2FDeviceQuery extends AbstractQuery {\n@@ -45,15 +45,15 @@ public U2FDeviceQuery.Builder id(final Long id) {\n             return this;\n         }\n \n-        public U2FDeviceQuery.Builder expirationDate(final Date date) {\n+        public U2FDeviceQuery.Builder expirationDate(final OffsetDateTime date) {\n             getInstance().setExpirationDate(date);\n             return this;\n         }\n     }\n \n     private Long id;\n \n-    private Date expirationDate;\n+    private OffsetDateTime expirationDate;\n \n     private String owner;\n \n@@ -69,13 +69,13 @@ public void setId(final Long id) {\n     }\n \n     @Parameter(name = \"expirationDate\", in = ParameterIn.QUERY, schema =\n-            @Schema(implementation = Date.class))\n-    public Date getExpirationDate() {\n+            @Schema(implementation = OffsetDateTime.class))\n+    public OffsetDateTime getExpirationDate() {\n         return expirationDate;\n     }\n \n     @QueryParam(\"expirationDate\")\n-    public void setExpirationDate(final Date expirationDate) {\n+    public void setExpirationDate(final OffsetDateTime expirationDate) {\n         this.expirationDate = expirationDate;\n     }\n "},{"sha":"40a1d9ec6fdf8e6aa69bc35813eab87d271ffede","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/GoogleMfaAuthTokenService.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,20 +18,20 @@\n  */\n package org.apache.syncope.common.rest.api.service.wa;\n \n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import java.time.OffsetDateTime;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n-import java.util.Date;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n-import javax.ws.rs.PUT;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -48,7 +48,7 @@ public interface GoogleMfaAuthTokenService extends JAXRSService {\n     @Path(\"tokens\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void delete(@QueryParam(\"expirationDate\") Date expirationDate);\n+    void delete(@QueryParam(\"expirationDate\") OffsetDateTime expirationDate);\n \n     @DELETE\n     @Path(\"tokens/{owner}/{otp}\")"},{"sha":"41441e272e82db75871c23f67e461ff2f6f56c7f","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/RemediationTO.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRemediationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRemediationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRemediationTO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,8 +19,7 @@\n package org.apache.syncope.common.lib.to;\n \n import io.swagger.v3.oas.annotations.media.Schema;\n-import java.util.Date;\n-import java.util.Optional;\n+import java.time.OffsetDateTime;\n import javax.ws.rs.PathParam;\n import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n@@ -44,7 +43,7 @@ public class RemediationTO implements EntityTO {\n \n     private String error;\n \n-    private Date instant;\n+    private OffsetDateTime instant;\n \n     private String pullTask;\n \n@@ -118,12 +117,12 @@ public void setError(final String error) {\n     }\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n-    public Date getInstant() {\n-        return Optional.ofNullable(instant).map(date -> new Date(date.getTime())).orElse(null);\n+    public OffsetDateTime getInstant() {\n+        return instant;\n     }\n \n-    public void setInstant(final Date instant) {\n-        this.instant = Optional.ofNullable(instant).map(date -> new Date(date.getTime())).orElse(null);\n+    public void setInstant(final OffsetDateTime instant) {\n+        this.instant = instant;\n     }\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)"},{"sha":"0be18e0eba536be3a7ab2eed50f0352629f7da06","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/SyncopeConstants.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -41,8 +41,6 @@ public final class SyncopeConstants {\n         \"yyyy-MM-dd HH:mm:ss.S\", // explicitly added to import date into MySql repository\n         \"yyyy-MM-dd\" };\n \n-    public static final String DEFAULT_DATE_PATTERN = \"yyyy-MM-dd'T'HH:mm:ssZ\";\n-\n     public static final String UUID_REGEX = \"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\";\n \n     public static final Pattern UUID_PATTERN = Pattern.compile(UUID_REGEX);"},{"sha":"34ef1aa47b777fac5b45a676ad3ac1ba5c2847ad","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/audit/AuditEntry.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Faudit%2FAuditEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Faudit%2FAuditEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Faudit%2FAuditEntry.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -21,8 +21,8 @@\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.List;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n@@ -35,7 +35,7 @@ public class AuditEntry implements BaseBean {\n \n     private String who;\n \n-    private Date date;\n+    private OffsetDateTime date;\n \n     private AuditLoggerName logger;\n \n@@ -57,16 +57,12 @@ public void setWho(final String who) {\n     }\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n-    public Date getDate() {\n-        return date == null\n-                ? null\n-                : new Date(date.getTime());\n+    public OffsetDateTime getDate() {\n+        return date;\n     }\n \n-    public void setDate(final Date date) {\n-        this.date = date == null\n-                ? null\n-                : new Date(date.getTime());\n+    public void setDate(final OffsetDateTime date) {\n+        this.date = date;\n     }\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)"},{"sha":"403403edbe3507a2060e5984d98a10fa5cd1adcb","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/jackson/SyncopeJsonMapper.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjackson%2FSyncopeJsonMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjackson%2FSyncopeJsonMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjackson%2FSyncopeJsonMapper.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,8 +20,8 @@\n \n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.File;\n import java.io.IOException;\n import java.io.OutputStream;\n@@ -32,11 +32,11 @@\n  * Jackson ObjectMapper that unwraps singleton map values and enable default\n  * typing for handling abstract types serialization.\n  */\n-public class SyncopeObjectMapper extends ObjectMapper {\n+public class SyncopeJsonMapper extends JsonMapper {\n \n     private static final long serialVersionUID = -317191546835195103L;\n \n-    public SyncopeObjectMapper() {\n+    public SyncopeJsonMapper() {\n         super();\n \n         findAndRegisterModules();\n@@ -51,7 +51,7 @@ public SyncopeObjectMapper() {\n      * @param value the potential Map to unwrap\n      * @return the unwrapped map or the original value\n      */\n-    private Object unwrapMap(final Object value) {\n+    protected Object unwrapMap(final Object value) {\n         if (value instanceof Map) {\n             Map<?, ?> map = (Map<?, ?>) value;\n             if (map.size() == 1) {","previous_filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/jackson/SyncopeObjectMapper.java"},{"sha":"17aacc01dc82956a76e5a409229ed6e0213e2b4c","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/report/StaticReportletConf.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FStaticReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FStaticReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FStaticReportletConf.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,10 +20,9 @@\n \n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.List;\n-import java.util.Optional;\n import org.apache.syncope.common.lib.types.TraceLevel;\n \n public class StaticReportletConf extends AbstractReportletConf {\n@@ -36,7 +35,7 @@ public class StaticReportletConf extends AbstractReportletConf {\n \n     private Double doubleField;\n \n-    private Date dateField;\n+    private OffsetDateTime dateField;\n \n     private TraceLevel traceLevel;\n \n@@ -50,12 +49,12 @@ public StaticReportletConf(final String name) {\n         super(name);\n     }\n \n-    public Date getDateField() {\n-        return Optional.ofNullable(dateField).map(field -> new Date(field.getTime())).orElse(null);\n+    public OffsetDateTime getDateField() {\n+        return dateField;\n     }\n \n-    public void setDateField(final Date dateField) {\n-        this.dateField = Optional.ofNullable(dateField).map(field -> new Date(field.getTime())).orElse(null);\n+    public void setDateField(final OffsetDateTime dateField) {\n+        this.dateField = dateField;\n     }\n \n     public Double getDoubleField() {"},{"sha":"c4cb83d6e8024849d1ad8660485a026dabe4fa78","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractStartEndBean.java","status":"modified","additions":11,"deletions":12,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractStartEndBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractStartEndBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractStartEndBean.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,8 +19,7 @@\n package org.apache.syncope.common.lib.to;\n \n import io.swagger.v3.oas.annotations.media.Schema;\n-import java.util.Date;\n-import java.util.Optional;\n+import java.time.OffsetDateTime;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n@@ -31,26 +30,26 @@ public class AbstractStartEndBean implements BaseBean {\n \n     private static final long serialVersionUID = 2399577415544539917L;\n \n-    private Date start;\n+    private OffsetDateTime start;\n \n-    private Date end;\n+    private OffsetDateTime end;\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n-    public Date getStart() {\n-        return Optional.ofNullable(start).map(date -> new Date(date.getTime())).orElse(null);\n+    public OffsetDateTime getStart() {\n+        return start;\n     }\n \n-    public void setStart(final Date start) {\n-        this.start = Optional.ofNullable(start).map(date -> new Date(date.getTime())).orElse(null);\n+    public void setStart(final OffsetDateTime start) {\n+        this.start = start;\n     }\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n-    public Date getEnd() {\n-        return Optional.ofNullable(end).map(date -> new Date(date.getTime())).orElse(null);\n+    public OffsetDateTime getEnd() {\n+        return end;\n     }\n \n-    public void setEnd(final Date end) {\n-        this.end = Optional.ofNullable(end).map(date -> new Date(date.getTime())).orElse(null);\n+    public void setEnd(final OffsetDateTime end) {\n+        this.end = end;\n     }\n \n     @Override"},{"sha":"358af835800c5fca9db124bf001bb3d18f227232","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/AccessTokenTO.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccessTokenTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccessTokenTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccessTokenTO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,8 +18,7 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n-import java.util.Date;\n-import java.util.Optional;\n+import java.time.OffsetDateTime;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n@@ -31,7 +30,7 @@ public class AccessTokenTO implements EntityTO {\n \n     private String body;\n \n-    private Date expirationTime;\n+    private OffsetDateTime expirationTime;\n \n     private String owner;\n \n@@ -53,12 +52,12 @@ public void setBody(final String body) {\n         this.body = body;\n     }\n \n-    public Date getExpirationTime() {\n-        return Optional.ofNullable(expirationTime).map(time -> new Date(time.getTime())).orElse(null);\n+    public OffsetDateTime getExpirationTime() {\n+        return expirationTime;\n     }\n \n-    public void setExpirationTime(final Date expirationTime) {\n-        this.expirationTime = Optional.ofNullable(expirationTime).map(time -> new Date(time.getTime())).orElse(null);\n+    public void setExpirationTime(final OffsetDateTime expirationTime) {\n+        this.expirationTime = expirationTime;\n     }\n \n     public String getOwner() {"},{"sha":"fbe5b14f30cd8f4443215f1d55f98a94bb510382","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/AnyTO.java","status":"modified","additions":15,"deletions":13,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -26,8 +26,8 @@\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.TreeSet;\n import java.util.List;\n import java.util.Optional;\n@@ -53,7 +53,7 @@ public abstract class AnyTO implements EntityTO, RealmMember {\n      */\n     private String creator;\n \n-    private Date creationDate;\n+    private OffsetDateTime creationDate;\n \n     /**\n      * Context information about create.\n@@ -65,7 +65,7 @@ public abstract class AnyTO implements EntityTO, RealmMember {\n      */\n     private String lastModifier;\n \n-    private Date lastChangeDate;\n+    private OffsetDateTime lastChangeDate;\n \n     /**\n      * Context information about last change.\n@@ -107,12 +107,12 @@ public void setCreator(final String creator) {\n         this.creator = creator;\n     }\n \n-    public Date getCreationDate() {\n-        return Optional.ofNullable(creationDate).map(date -> new Date(date.getTime())).orElse(null);\n+    public OffsetDateTime getCreationDate() {\n+        return creationDate;\n     }\n \n-    public void setCreationDate(final Date creationDate) {\n-        this.creationDate = Optional.ofNullable(creationDate).map(date -> new Date(date.getTime())).orElse(null);\n+    public void setCreationDate(final OffsetDateTime creationDate) {\n+        this.creationDate = creationDate;\n     }\n \n     public String getCreationContext() {\n@@ -131,12 +131,12 @@ public void setLastModifier(final String lastModifier) {\n         this.lastModifier = lastModifier;\n     }\n \n-    public Date getLastChangeDate() {\n-        return Optional.ofNullable(lastChangeDate).map(date -> new Date(date.getTime())).orElse(null);\n+    public OffsetDateTime getLastChangeDate() {\n+        return lastChangeDate;\n     }\n \n-    public void setLastChangeDate(final Date lastChangeDate) {\n-        this.lastChangeDate = Optional.ofNullable(lastChangeDate).map(date -> new Date(date.getTime())).orElse(null);\n+    public void setLastChangeDate(final OffsetDateTime lastChangeDate) {\n+        this.lastChangeDate = lastChangeDate;\n     }\n \n     public String getLastChangeContext() {\n@@ -149,9 +149,11 @@ public void setLastChangeContext(final String lastChangeContext) {\n \n     @JsonIgnore\n     public String getETagValue() {\n-        Date etagDate = getLastChangeDate() == null\n+        OffsetDateTime etagDate = getLastChangeDate() == null\n                 ? getCreationDate() : getLastChangeDate();\n-        return Optional.ofNullable(etagDate).map(date -> String.valueOf(date.getTime())).orElse(StringUtils.EMPTY);\n+        return Optional.ofNullable(etagDate).\n+                map(date -> String.valueOf(date.toInstant().toEpochMilli())).\n+                orElse(StringUtils.EMPTY);\n     }\n \n     @Override"},{"sha":"a9a74579c034ac3219e611fa3c6dcf283e09e4d1","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/DelegationTO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDelegationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDelegationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDelegationTO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -21,7 +21,7 @@\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.Set;\n import java.util.TreeSet;\n import javax.ws.rs.PathParam;\n@@ -77,13 +77,13 @@ public Set<String> getRoles() {\n \n     @Schema(accessMode = Schema.AccessMode.READ_WRITE)\n     @Override\n-    public Date getStart() {\n+    public OffsetDateTime getStart() {\n         return super.getStart();\n     }\n \n     @Schema(accessMode = Schema.AccessMode.READ_WRITE)\n     @Override\n-    public Date getEnd() {\n+    public OffsetDateTime getEnd() {\n         return super.getEnd();\n     }\n "},{"sha":"da0eceab7a0bfde4eeee44c2b960a8b9117ede44","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/JobTO.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJobTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJobTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJobTO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,8 +18,7 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n-import java.util.Date;\n-import java.util.Optional;\n+import java.time.OffsetDateTime;\n import org.apache.syncope.common.lib.BaseBean;\n import org.apache.syncope.common.lib.types.JobType;\n \n@@ -37,7 +36,7 @@ public class JobTO implements BaseBean {\n \n     private boolean scheduled;\n \n-    private Date start;\n+    private OffsetDateTime start;\n \n     private String status;\n \n@@ -81,12 +80,12 @@ public void setScheduled(final boolean scheduled) {\n         this.scheduled = scheduled;\n     }\n \n-    public Date getStart() {\n-        return Optional.ofNullable(start).map(date -> new Date(date.getTime())).orElse(null);\n+    public OffsetDateTime getStart() {\n+        return start;\n     }\n \n-    public void setStart(final Date start) {\n-        this.start = Optional.ofNullable(start).map(date -> new Date(date.getTime())).orElse(null);\n+    public void setStart(final OffsetDateTime start) {\n+        this.start = start;\n     }\n \n     public String getStatus() {"},{"sha":"0bb1055fbf077072eee567e4485ab29fadf44470","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/ReportTO.java","status":"modified","additions":11,"deletions":12,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,10 +20,9 @@\n \n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.List;\n-import java.util.Optional;\n import javax.ws.rs.PathParam;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n@@ -44,9 +43,9 @@ public class ReportTO extends AbstractStartEndBean implements NamedEntityTO {\n \n     private String latestExecStatus;\n \n-    private Date lastExec;\n+    private OffsetDateTime lastExec;\n \n-    private Date nextExec;\n+    private OffsetDateTime nextExec;\n \n     private boolean active;\n \n@@ -103,20 +102,20 @@ public void setLatestExecStatus(final String latestExecStatus) {\n         this.latestExecStatus = latestExecStatus;\n     }\n \n-    public Date getLastExec() {\n-        return Optional.ofNullable(lastExec).map(exec -> new Date(exec.getTime())).orElse(null);\n+    public OffsetDateTime getLastExec() {\n+        return lastExec;\n     }\n \n-    public void setLastExec(final Date lastExec) {\n-        this.lastExec = Optional.ofNullable(lastExec).map(exec -> new Date(exec.getTime())).orElse(null);\n+    public void setLastExec(final OffsetDateTime lastExec) {\n+        this.lastExec = lastExec;\n     }\n \n-    public Date getNextExec() {\n-        return Optional.ofNullable(nextExec).map(exec -> new Date(exec.getTime())).orElse(null);\n+    public OffsetDateTime getNextExec() {\n+        return nextExec;\n     }\n \n-    public void setNextExec(final Date nextExec) {\n-        this.nextExec = Optional.ofNullable(nextExec).map(exec -> new Date(exec.getTime())).orElse(null);\n+    public void setNextExec(final OffsetDateTime nextExec) {\n+        this.nextExec = nextExec;\n     }\n \n     public boolean isActive() {"},{"sha":"49a854955d9e8ff074f141e9cf0cb1e719197bca","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/SchedTaskTO.java","status":"modified","additions":16,"deletions":17,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -21,8 +21,7 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n-import java.util.Date;\n-import java.util.Optional;\n+import java.time.OffsetDateTime;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n@@ -31,7 +30,7 @@ public class SchedTaskTO extends TaskTO implements NamedEntityTO {\n \n     private static final long serialVersionUID = -5722284116974636425L;\n \n-    private Date startAt;\n+    private OffsetDateTime startAt;\n \n     private String cronExpression;\n \n@@ -41,9 +40,9 @@ public class SchedTaskTO extends TaskTO implements NamedEntityTO {\n \n     private String description;\n \n-    private Date lastExec;\n+    private OffsetDateTime lastExec;\n \n-    private Date nextExec;\n+    private OffsetDateTime nextExec;\n \n     private boolean active = true;\n \n@@ -55,12 +54,12 @@ public String getDiscriminator() {\n         return getClass().getName();\n     }\n \n-    public Date getStartAt() {\n-        return Optional.ofNullable(startAt).map(at -> new Date(at.getTime())).orElse(null);\n+    public OffsetDateTime getStartAt() {\n+        return startAt;\n     }\n \n-    public void setStartAt(final Date start) {\n-        this.startAt = Optional.ofNullable(start).map(date -> new Date(date.getTime())).orElse(null);\n+    public void setStartAt(final OffsetDateTime startAt) {\n+        this.startAt = startAt;\n     }\n \n     public String getCronExpression() {\n@@ -80,21 +79,21 @@ public void setJobDelegate(final String jobDelegate) {\n     }\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n-    public Date getLastExec() {\n-        return Optional.ofNullable(lastExec).map(exec -> new Date(exec.getTime())).orElse(null);\n+    public OffsetDateTime getLastExec() {\n+        return lastExec;\n     }\n \n-    public void setLastExec(final Date lastExec) {\n-        this.lastExec = Optional.ofNullable(lastExec).map(exec -> new Date(exec.getTime())).orElse(null);\n+    public void setLastExec(final OffsetDateTime lastExec) {\n+        this.lastExec = lastExec;\n     }\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n-    public Date getNextExec() {\n-        return Optional.ofNullable(nextExec).map(exec -> new Date(exec.getTime())).orElse(null);\n+    public OffsetDateTime getNextExec() {\n+        return nextExec;\n     }\n \n-    public void setNextExec(final Date nextExec) {\n-        this.nextExec = Optional.ofNullable(nextExec).map(exec -> new Date(exec.getTime())).orElse(null);\n+    public void setNextExec(final OffsetDateTime nextExec) {\n+        this.nextExec = nextExec;\n     }\n \n     public String getDescription() {"},{"sha":"4c547d744044bba05463c328b6d4a4a0e9bc9d6f","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java","status":"modified","additions":16,"deletions":37,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -23,8 +23,8 @@\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n@@ -42,13 +42,13 @@ public class UserTO extends AnyTO implements GroupableRelatableTO {\n \n     private String token;\n \n-    private Date tokenExpireTime;\n+    private OffsetDateTime tokenExpireTime;\n \n     private String username;\n \n-    private Date lastLoginDate;\n+    private OffsetDateTime lastLoginDate;\n \n-    private Date changePwdDate;\n+    private OffsetDateTime changePwdDate;\n \n     private Integer failedLogins;\n \n@@ -112,19 +112,12 @@ public void setToken(final String token) {\n         this.token = token;\n     }\n \n-    public Date getTokenExpireTime() {\n-        if (tokenExpireTime != null) {\n-            return new Date(tokenExpireTime.getTime());\n-        }\n-        return null;\n+    public OffsetDateTime getTokenExpireTime() {\n+        return tokenExpireTime;\n     }\n \n-    public void setTokenExpireTime(final Date tokenExpireTime) {\n-        if (tokenExpireTime != null) {\n-            this.tokenExpireTime = new Date(tokenExpireTime.getTime());\n-        } else {\n-            this.tokenExpireTime = null;\n-        }\n+    public void setTokenExpireTime(final OffsetDateTime tokenExpireTime) {\n+        this.tokenExpireTime = tokenExpireTime;\n     }\n \n     @JsonProperty(required = true)\n@@ -136,42 +129,28 @@ public void setUsername(final String username) {\n         this.username = username;\n     }\n \n-    public Date getChangePwdDate() {\n-        if (changePwdDate != null) {\n-            return new Date(changePwdDate.getTime());\n-        }\n-        return null;\n+    public OffsetDateTime getChangePwdDate() {\n+        return changePwdDate;\n     }\n \n     public Integer getFailedLogins() {\n         return failedLogins;\n     }\n \n-    public Date getLastLoginDate() {\n-        if (lastLoginDate != null) {\n-            return new Date(lastLoginDate.getTime());\n-        }\n-        return null;\n+    public OffsetDateTime getLastLoginDate() {\n+        return lastLoginDate;\n     }\n \n-    public void setChangePwdDate(final Date changePwdDate) {\n-        if (changePwdDate != null) {\n-            this.changePwdDate = new Date(changePwdDate.getTime());\n-        } else {\n-            this.changePwdDate = null;\n-        }\n+    public void setChangePwdDate(final OffsetDateTime changePwdDate) {\n+        this.changePwdDate = changePwdDate;\n     }\n \n     public void setFailedLogins(final Integer failedLogins) {\n         this.failedLogins = failedLogins;\n     }\n \n-    public void setLastLoginDate(final Date lastLoginDate) {\n-        if (lastLoginDate != null) {\n-            this.lastLoginDate = new Date(lastLoginDate.getTime());\n-        } else {\n-            this.lastLoginDate = null;\n-        }\n+    public void setLastLoginDate(final OffsetDateTime lastLoginDate) {\n+        this.lastLoginDate = lastLoginDate;\n     }\n \n     public String getSecurityQuestion() {"},{"sha":"283cf473d1cc774722b14b6345d78c43e928d0c3","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/AttrSchemaType.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAttrSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAttrSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAttrSchemaType.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.common.lib.types;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.ClassUtils;\n \n@@ -28,7 +28,7 @@ public enum AttrSchemaType {\n     Long(Long.class),\n     Double(Double.class),\n     Boolean(Boolean.class),\n-    Date(Date.class),\n+    Date(OffsetDateTime.class),\n     Enum(Enum.class),\n     Binary(byte[].class),\n     Encrypted(byte[].class);\n@@ -56,5 +56,4 @@ public static AttrSchemaType getAttrSchemaTypeByClass(final Class<?> type) {\n                 : ClassUtils.isAssignable(type, item.getType(), true)).\n                 findFirst().orElse(AttrSchemaType.String);\n     }\n-\n }"},{"sha":"adb47a8f5d9c6d6662869cf11e4cab5840d0b420","filename":"common/idrepo/lib/src/test/java/org/apache/syncope/common/lib/JSONTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,10 +19,11 @@\n package org.apache.syncope.common.lib;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.syncope.common.lib.jackson.SyncopeJsonMapper;\n \n public class JSONTest extends SerializationTest {\n \n-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+    private static final ObjectMapper OBJECT_MAPPER = new SyncopeJsonMapper();\n \n     @Override\n     protected ObjectMapper objectMapper() {"},{"sha":"093322a7417c1b584ba7013ad4f3d4d53779275f","filename":"common/idrepo/lib/src/test/java/org/apache/syncope/common/lib/YAMLTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FYAMLTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FYAMLTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FYAMLTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,10 +20,11 @@\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n+import org.apache.syncope.common.lib.jackson.SyncopeYAMLMapper;\n \n public class YAMLTest extends SerializationTest {\n \n-    private static final YAMLMapper YAML_MAPPER = new YAMLMapper();\n+    private static final YAMLMapper YAML_MAPPER = new SyncopeYAMLMapper();\n \n     @Override\n     protected ObjectMapper objectMapper() {"},{"sha":"71963ca320a2227086265e156451824dc08fcf1f","filename":"common/idrepo/lib/src/test/java/org/apache/syncope/common/lib/types/AttrSchemaTypeTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAttrSchemaTypeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAttrSchemaTypeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAttrSchemaTypeTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,7 +20,7 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.junit.jupiter.api.Test;\n \n@@ -46,7 +46,7 @@ void checkBoolean() {\n \n     @Test\n     void checkDate() {\n-        assertEquals(AttrSchemaType.Date, AttrSchemaType.getAttrSchemaTypeByClass(Date.class));\n+        assertEquals(AttrSchemaType.Date, AttrSchemaType.getAttrSchemaTypeByClass(OffsetDateTime.class));\n     }\n \n     @Test"},{"sha":"0d2c9437ec6203480a4c3d7a45a923a064cb1bfe","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/DateParamConverterProvider.java","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FDateParamConverterProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FDateParamConverterProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FDateParamConverterProvider.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,31 +20,28 @@\n \n import java.lang.annotation.Annotation;\n import java.lang.reflect.Type;\n-import java.text.ParseException;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n import javax.ws.rs.ext.ParamConverter;\n import javax.ws.rs.ext.ParamConverterProvider;\n-import org.apache.commons.lang3.time.FastDateFormat;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n \n public class DateParamConverterProvider implements ParamConverterProvider {\n \n-    private static final FastDateFormat DATE_FORMAT = FastDateFormat.getInstance(SyncopeConstants.DEFAULT_DATE_PATTERN);\n-\n-    private static class DateParamConverter implements ParamConverter<Date> {\n+    private static class DateParamConverter implements ParamConverter<OffsetDateTime> {\n \n         @Override\n-        public Date fromString(final String value) {\n+        public OffsetDateTime fromString(final String value) {\n             try {\n-                return DATE_FORMAT.parse(value);\n-            } catch (final ParseException e) {\n+                return OffsetDateTime.parse(value, DateTimeFormatter.ISO_OFFSET_DATE_TIME);\n+            } catch (DateTimeParseException e) {\n                 throw new IllegalArgumentException(\"Unparsable date: \" + value, e);\n             }\n         }\n \n         @Override\n-        public String toString(final Date value) {\n-            return DATE_FORMAT.format(value);\n+        public String toString(final OffsetDateTime value) {\n+            return DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(value);\n         }\n     }\n \n@@ -53,11 +50,10 @@ public String toString(final Date value) {\n     public <T> ParamConverter<T> getConverter(\n             final Class<T> rawType, final Type genericType, final Annotation[] annotations) {\n \n-        if (Date.class.equals(rawType)) {\n+        if (OffsetDateTime.class.equals(rawType)) {\n             return (ParamConverter<T>) new DateParamConverter();\n         }\n \n         return null;\n     }\n-\n }"},{"sha":"a3e6f0eef5dd139d9d96594e8f0789595221035d","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ExecDeleteQuery.java","status":"modified","additions":25,"deletions":53,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecDeleteQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecDeleteQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecDeleteQuery.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.common.rest.api.beans;\n \n import java.io.Serializable;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.QueryParam;\n@@ -37,22 +37,22 @@ public Builder key(final String key) {\n             return this;\n         }\n \n-        public Builder startedBefore(final Date date) {\n+        public Builder startedBefore(final OffsetDateTime date) {\n             instance.setStartedBefore(date);\n             return this;\n         }\n \n-        public Builder startedAfter(final Date date) {\n+        public Builder startedAfter(final OffsetDateTime date) {\n             instance.setStartedAfter(date);\n             return this;\n         }\n \n-        public Builder endedBefore(final Date date) {\n+        public Builder endedBefore(final OffsetDateTime date) {\n             instance.setEndedBefore(date);\n             return this;\n         }\n \n-        public Builder endedAfter(final Date date) {\n+        public Builder endedAfter(final OffsetDateTime date) {\n             instance.setEndedAfter(date);\n             return this;\n         }\n@@ -64,13 +64,13 @@ public ExecDeleteQuery build() {\n \n     private String key;\n \n-    private Date startedBefore;\n+    private OffsetDateTime startedBefore;\n \n-    private Date startedAfter;\n+    private OffsetDateTime startedAfter;\n \n-    private Date endedBefore;\n+    private OffsetDateTime endedBefore;\n \n-    private Date endedAfter;\n+    private OffsetDateTime endedAfter;\n \n     public String getKey() {\n         return key;\n@@ -82,67 +82,39 @@ public void setKey(final String key) {\n         this.key = key;\n     }\n \n-    public Date getStartedBefore() {\n-        if (startedBefore != null) {\n-            return new Date(startedBefore.getTime());\n-        }\n-        return null;\n+    public OffsetDateTime getStartedBefore() {\n+        return startedBefore;\n     }\n \n     @QueryParam(\"startedBefore\")\n-    public void setStartedBefore(final Date startedBefore) {\n-        if (startedBefore != null) {\n-            this.startedBefore = new Date(startedBefore.getTime());\n-        } else {\n-            this.startedBefore = null;\n-        }\n+    public void setStartedBefore(final OffsetDateTime startedBefore) {\n+        this.startedBefore = startedBefore;\n     }\n \n-    public Date getStartedAfter() {\n-        if (startedAfter != null) {\n-            return new Date(startedAfter.getTime());\n-        }\n-        return null;\n+    public OffsetDateTime getStartedAfter() {\n+        return startedAfter;\n     }\n \n     @QueryParam(\"startedAfter\")\n-    public void setStartedAfter(final Date startedAfter) {\n-        if (startedAfter != null) {\n-            this.startedAfter = new Date(startedAfter.getTime());\n-        } else {\n-            this.startedAfter = null;\n-        }\n+    public void setStartedAfter(final OffsetDateTime startedAfter) {\n+        this.startedAfter = startedAfter;\n     }\n \n-    public Date getEndedBefore() {\n-        if (endedBefore != null) {\n-            return new Date(endedBefore.getTime());\n-        }\n-        return null;\n+    public OffsetDateTime getEndedBefore() {\n+        return endedBefore;\n     }\n \n     @QueryParam(\"endedBefore\")\n-    public void setEndedBefore(final Date endedBefore) {\n-        if (endedBefore != null) {\n-            this.endedBefore = new Date(endedBefore.getTime());\n-        } else {\n-            this.endedBefore = null;\n-        }\n+    public void setEndedBefore(final OffsetDateTime endedBefore) {\n+        this.endedBefore = endedBefore;\n     }\n \n-    public Date getEndedAfter() {\n-        if (endedAfter != null) {\n-            return new Date(endedAfter.getTime());\n-        }\n-        return null;\n+    public OffsetDateTime getEndedAfter() {\n+        return endedAfter;\n     }\n \n     @QueryParam(\"endedAfter\")\n-    public void setEndedAfter(final Date endedAfter) {\n-        if (endedAfter != null) {\n-            this.endedAfter = new Date(endedAfter.getTime());\n-        } else {\n-            this.endedAfter = null;\n-        }\n+    public void setEndedAfter(final OffsetDateTime endedAfter) {\n+        this.endedAfter = endedAfter;\n     }\n }"},{"sha":"9176691eae4e6c167ff35a74104677d1bd83504d","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ExecListQuery.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecListQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecListQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecListQuery.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -23,15 +23,15 @@\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n-public class ExecQuery extends AbstractQuery {\n+public class ExecListQuery extends AbstractQuery {\n \n     private static final long serialVersionUID = -8792519310029596796L;\n \n-    public static class Builder extends AbstractQuery.Builder<ExecQuery, Builder> {\n+    public static class Builder extends AbstractQuery.Builder<ExecListQuery, Builder> {\n \n         @Override\n-        protected ExecQuery newInstance() {\n-            return new ExecQuery();\n+        protected ExecListQuery newInstance() {\n+            return new ExecListQuery();\n         }\n \n         public Builder key(final String key) {\n@@ -63,7 +63,7 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        ExecQuery other = (ExecQuery) obj;\n+        ExecListQuery other = (ExecListQuery) obj;\n         return new EqualsBuilder().\n                 appendSuper(super.equals(obj)).\n                 append(key, other.key).","previous_filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ExecQuery.java"},{"sha":"fe993d47ef5da5853e9cf982f99663a36e5c2c15","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ExecSpecs.java","status":"renamed","additions":11,"deletions":19,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecSpecs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecSpecs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecSpecs.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,29 +19,28 @@\n package org.apache.syncope.common.rest.api.beans;\n \n import java.io.Serializable;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.Optional;\n-\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.QueryParam;\n \n-public class ExecuteQuery implements Serializable {\n+public class ExecSpecs implements Serializable {\n \n     private static final long serialVersionUID = 3846547401120638351L;\n \n     public static class Builder {\n \n-        private final ExecuteQuery instance = new ExecuteQuery();\n+        private final ExecSpecs instance = new ExecSpecs();\n \n         public Builder key(final String key) {\n             instance.setKey(key);\n             return this;\n         }\n \n-        public Builder startAt(final Date date) {\n-            instance.setStartAt(date);\n+        public Builder startAt(final OffsetDateTime startAt) {\n+            instance.setStartAt(startAt);\n             return this;\n         }\n \n@@ -50,14 +49,14 @@ public Builder dryRun(final boolean dryRun) {\n             return this;\n         }\n \n-        public ExecuteQuery build() {\n+        public ExecSpecs build() {\n             return instance;\n         }\n     }\n \n     private String key;\n \n-    private Date startAt;\n+    private OffsetDateTime startAt;\n \n     private Boolean dryRun;\n \n@@ -71,20 +70,13 @@ public void setKey(final String key) {\n         this.key = key;\n     }\n \n-    public Date getStartAt() {\n-        if (startAt != null) {\n-            return new Date(startAt.getTime());\n-        }\n-        return null;\n+    public OffsetDateTime getStartAt() {\n+        return startAt;\n     }\n \n     @QueryParam(\"startAt\")\n-    public void setStartAt(final Date startAt) {\n-        if (startAt != null) {\n-            this.startAt = new Date(startAt.getTime());\n-        } else {\n-            this.startAt = null;\n-        }\n+    public void setStartAt(final OffsetDateTime startAt) {\n+        this.startAt = startAt;\n     }\n \n     public Boolean getDryRun() {","previous_filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ExecuteQuery.java"},{"sha":"f242d56e19af57546590780d5276bd9a3f0a5d10","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ExecutableService.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FExecutableService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FExecutableService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FExecutableService.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -40,8 +40,8 @@\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.ExecDeleteQuery;\n-import org.apache.syncope.common.rest.api.beans.ExecQuery;\n-import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecListQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n \n public interface ExecutableService extends JAXRSService {\n \n@@ -54,7 +54,7 @@ public interface ExecutableService extends JAXRSService {\n     @GET\n     @Path(\"{key}/executions\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    PagedResult<ExecTO> listExecutions(@BeanParam ExecQuery query);\n+    PagedResult<ExecTO> listExecutions(@BeanParam ExecListQuery query);\n \n     /**\n      * Returns the list of recently completed executions, ordered by end date descendent.\n@@ -80,7 +80,7 @@ public interface ExecutableService extends JAXRSService {\n     void deleteExecution(@NotNull @PathParam(\"executionKey\") String executionKey);\n \n     /**\n-     * Deletes the executions belonging matching the given query.\n+     * Deletes the executions matching the given query.\n      *\n      * @param query query conditions\n      * @return batch results as Response entity\n@@ -94,15 +94,15 @@ public interface ExecutableService extends JAXRSService {\n     Response deleteExecutions(@BeanParam ExecDeleteQuery query);\n \n     /**\n-     * Executes the executable matching the given query.\n+     * Executes the executable matching the given specs.\n      *\n-     * @param query query conditions\n-     * @return execution report for the executable matching the given query\n+     * @param specs conditions to exec\n+     * @return execution report for the executable matching the given specs\n      */\n     @POST\n     @Path(\"{key}/execute\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    ExecTO execute(@BeanParam ExecuteQuery query);\n+    ExecTO execute(@BeanParam ExecSpecs specs);\n \n     /**\n      * Returns job (running or scheduled) for the executable matching the given key."},{"sha":"bd8d7086cce86580bbe58b7e07200a07abc4b0c2","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -27,7 +27,7 @@\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.BeanParam;\n@@ -158,7 +158,7 @@ <T extends TaskTO> T read(\n     @Path(\"PROPAGATION/purge\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response purgePropagations(\n-            @QueryParam(\"since\") Date since, \n-            @QueryParam(\"statuses\") List<ExecStatus> statuses, \n+            @QueryParam(\"since\") OffsetDateTime since,\n+            @QueryParam(\"statuses\") List<ExecStatus> statuses,\n             @QueryParam(\"resources\") List<String> resources);\n }"},{"sha":"aca58140c3446effe358d50d733a52407e34d871","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeeper/ZookeeperConfParamOps.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperConfParamOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperConfParamOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperConfParamOps.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.common.keymaster.client.zookeeper;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.util.Map;\n import java.util.Optional;\n import java.util.TreeMap;\n@@ -34,15 +34,15 @@\n  */\n public class ZookeeperConfParamOps implements ConfParamOps {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ConfParamOps.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(ConfParamOps.class);\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    protected static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n-    private static final String CONF_PATH = \"/conf\";\n+    protected static final String CONF_PATH = \"/conf\";\n \n-    private final CuratorFramework client;\n+    protected final CuratorFramework client;\n \n-    private static String buildConfPath(final String... parts) {\n+    protected static String buildConfPath(final String... parts) {\n         return CONF_PATH + '/' + String.join(\"/\", parts);\n     }\n "},{"sha":"4d7766529a109e061d90773cbe881cf35ee0eb98","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeeper/ZookeeperDomainOps.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperDomainOps.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.common.keymaster.client.zookeeper;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n@@ -42,17 +42,17 @@\n  */\n public class ZookeeperDomainOps implements DomainOps, InitializingBean {\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    protected static final Logger LOG = LoggerFactory.getLogger(DomainOps.class);\n \n-    private static final Logger LOG = LoggerFactory.getLogger(DomainOps.class);\n+    protected static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n-    private static final String DOMAIN_PATH = \"/domains\";\n+    protected static final String DOMAIN_PATH = \"/domains\";\n \n     @Autowired\n-    private CuratorFramework client;\n+    protected CuratorFramework client;\n \n     @Autowired(required = false)\n-    private DomainWatcher watcher;\n+    protected DomainWatcher watcher;\n \n     @Override\n     public void afterPropertiesSet() throws Exception {\n@@ -93,7 +93,7 @@ public void afterPropertiesSet() throws Exception {\n         }\n     }\n \n-    private static String buildDomainPath(final String... parts) {\n+    protected static String buildDomainPath(final String... parts) {\n         String prefix = DOMAIN_PATH;\n         String suffix = StringUtils.EMPTY;\n         if (parts != null && parts.length > 0) {"},{"sha":"175e2a50ccacd2a15e4002a00c8abf1f150c7bbf","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeeper/ZookeeperServiceOps.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperServiceOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperServiceOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperServiceOps.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.common.keymaster.client.zookeeper;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.UUID;\n@@ -37,16 +37,16 @@\n  */\n public class ZookeeperServiceOps implements ServiceOps {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ServiceOps.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(ServiceOps.class);\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    protected static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n-    private static final String SERVICE_PATH = \"/services\";\n+    protected static final String SERVICE_PATH = \"/services\";\n \n     @Autowired\n-    private CuratorFramework client;\n+    protected CuratorFramework client;\n \n-    private static String buildServicePath(final NetworkService.Type serviceType, final String... parts) {\n+    protected static String buildServicePath(final NetworkService.Type serviceType, final String... parts) {\n         String prefix = SERVICE_PATH + '/' + serviceType.name();\n         String suffix = StringUtils.EMPTY;\n         if (parts != null && parts.length > 0) {"},{"sha":"307ebeb7bed50beeedf34a1dbde4ceaf846ec2d8","filename":"common/keymaster/client-zookeeper/src/test/java/org/apache/syncope/common/keymaster/client/zookeeper/ZookeeperTestContentLoader.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperTestContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperTestContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperTestContentLoader.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.common.keymaster.client.zookeeper;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.util.Iterator;\n import java.util.Map;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n@@ -28,7 +28,7 @@\n \n public class ZookeeperTestContentLoader implements InitializingBean {\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     @Autowired\n     private ConfParamOps confParamOps;"},{"sha":"29199d55900670e3e4e05ee076bfd1f0abb1f368","filename":"common/keymaster/self/client-self/src/main/java/org/apache/syncope/common/keymaster/client/self/SelfKeymasterClientContext.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fkeymaster%2Fself%2Fclient-self%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fkeymaster%2Fself%2Fclient-self%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fself%2Fclient-self%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientContext.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.keymaster.client.self;\n \n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n import java.util.List;\n import java.util.regex.Pattern;\n@@ -66,32 +67,33 @@ public JAXRSClientFactoryBean selfKeymasterRESTClientFactoryBean(final Keymaster\n         restClientFactoryBean.setThreadSafe(true);\n         restClientFactoryBean.setInheritHeaders(true);\n         restClientFactoryBean.setFeatures(List.of(new LoggingFeature()));\n-        restClientFactoryBean.setProviders(\n-                List.of(new JacksonJsonProvider(), new SelfKeymasterClientExceptionMapper()));\n+        restClientFactoryBean.setProviders(List.of(\n+                new JacksonJsonProvider(JsonMapper.builder().findAndAddModules().build()),\n+                new SelfKeymasterClientExceptionMapper()));\n         return restClientFactoryBean;\n     }\n \n     @Conditional(SelfKeymasterCondition.class)\n     @Bean\n     @ConditionalOnMissingBean(name = \"selfConfParamOps\")\n     public ConfParamOps selfConfParamOps(@Qualifier(\"selfKeymasterRESTClientFactoryBean\")\n-                                         final JAXRSClientFactoryBean selfKeymasterRESTClientFactoryBean) {\n+            final JAXRSClientFactoryBean selfKeymasterRESTClientFactoryBean) {\n         return new SelfKeymasterConfParamOps(selfKeymasterRESTClientFactoryBean);\n     }\n \n     @Conditional(SelfKeymasterCondition.class)\n     @Bean\n     @ConditionalOnMissingBean(name = \"selfServiceOps\")\n     public ServiceOps selfServiceOps(@Qualifier(\"selfKeymasterRESTClientFactoryBean\")\n-                                     final JAXRSClientFactoryBean selfKeymasterRESTClientFactoryBean) {\n+            final JAXRSClientFactoryBean selfKeymasterRESTClientFactoryBean) {\n         return new SelfKeymasterServiceOps(selfKeymasterRESTClientFactoryBean, 5);\n     }\n \n     @Conditional(SelfKeymasterCondition.class)\n     @Bean\n     @ConditionalOnMissingBean(name = \"domainOps\")\n     public DomainOps domainOps(@Qualifier(\"selfKeymasterRESTClientFactoryBean\")\n-                               final JAXRSClientFactoryBean selfKeymasterRESTClientFactoryBean) {\n+            final JAXRSClientFactoryBean selfKeymasterRESTClientFactoryBean) {\n         return new SelfKeymasterDomainOps(selfKeymasterRESTClientFactoryBean);\n     }\n }"},{"sha":"472d2a4bf66b9fd310cd3abc2c9a4a67c170d7c3","filename":"common/keymaster/self/client-self/src/main/java/org/apache/syncope/common/keymaster/client/self/SelfKeymasterConfParamOps.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fkeymaster%2Fself%2Fclient-self%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterConfParamOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/common%2Fkeymaster%2Fself%2Fclient-self%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterConfParamOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fself%2Fclient-self%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterConfParamOps.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.common.keymaster.client.self;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n@@ -37,7 +37,7 @@ public class SelfKeymasterConfParamOps extends SelfKeymasterOps implements ConfP\n \n     private static final Logger LOG = LoggerFactory.getLogger(ConfParamOps.class);\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     public SelfKeymasterConfParamOps(final JAXRSClientFactoryBean clientFactory) {\n         super(clientFactory);"},{"sha":"31a9c74a4c5840919c9c061ee39dfe8d12d8e537","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/GoogleMfaAuthTokenLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthTokenLogic.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.logic.wa;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n@@ -47,7 +47,7 @@ public GoogleMfaAuthTokenLogic(\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void delete(final Date expirationDate) {\n+    public void delete(final OffsetDateTime expirationDate) {\n         authProfileDAO.findAll(-1, -1).forEach(profile -> removeTokenAndSave(\n                 profile, token -> token.getIssueDate().compareTo(expirationDate) >= 0));\n     }"},{"sha":"cb4e376ced2965c9c633b7b23fe0dac7355dac9c","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/U2FRegistrationLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FU2FRegistrationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FU2FRegistrationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FU2FRegistrationLogic.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.logic.wa;\n \n+import java.time.OffsetDateTime;\n import java.util.Comparator;\n-import java.util.Date;\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n@@ -64,7 +64,7 @@ public void create(final String owner, final U2FDevice device) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void delete(final Long id, final Date expirationDate) {\n+    public void delete(final Long id, final OffsetDateTime expirationDate) {\n         List<AuthProfile> profiles = authProfileDAO.findAll(-1, -1);\n         profiles.forEach(profile -> {\n             List<U2FDevice> devices = profile.getU2FRegisteredDevices();\n@@ -86,7 +86,7 @@ public void delete(final Long id, final Date expirationDate) {\n     public Pair<Integer, List<U2FDevice>> search(\n             final Integer page,\n             final Integer itemsPerPage, final Long id,\n-            final Date expirationDate,\n+            final OffsetDateTime expirationDate,\n             final List<OrderByClause> orderByClauses) {\n \n         List<Comparator<U2FDevice>> comparatorList = orderByClauses."},{"sha":"6c9a3372afafe79b6fea1c2d1ea5016c00057d56","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/GoogleMfaAuthTokenServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.rest.cxf.service.wa;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n@@ -37,7 +37,7 @@ public GoogleMfaAuthTokenServiceImpl(final GoogleMfaAuthTokenLogic logic) {\n     }\n \n     @Override\n-    public void delete(final Date expirationDate) {\n+    public void delete(final OffsetDateTime expirationDate) {\n         if (expirationDate == null) {\n             logic.deleteAll();\n         } else {"},{"sha":"d2265192817bd05b903b59628f72127cc1dd9ead","filename":"core/idm/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RemediationServiceImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -101,11 +101,11 @@ private void check(final String key, final String anyKey) {\n                 anyDAO = anyObjectDAO;\n         }\n \n-        Date etagDate = anyDAO.findLastChange(anyKey);\n-        if (etagDate == null) {\n+        OffsetDateTime etag = anyDAO.findLastChange(anyKey);\n+        if (etag == null) {\n             throw new NotFoundException(remediation.getAnyType() + \" for \" + key);\n         }\n-        checkETag(String.valueOf(etagDate.getTime()));\n+        checkETag(String.valueOf(etag.toInstant().toEpochMilli()));\n     }\n \n     @Override"},{"sha":"db6447eb2a930dec986615c9fff664a09ccd41cf","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AbstractExecutableLogic.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.logic;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.EntityTO;\n@@ -36,7 +36,7 @@ public AbstractExecutableLogic(final JobManager jobManager, final SchedulerFacto\n         super(jobManager, scheduler);\n     }\n \n-    public abstract ExecTO execute(String key, Date startAt, boolean dryRun);\n+    public abstract ExecTO execute(String key, OffsetDateTime startAt, boolean dryRun);\n \n     public abstract Pair<Integer, List<ExecTO>> listExecutions(\n             String key, int page, int size, List<OrderByClause> orderByClauses);\n@@ -46,7 +46,11 @@ public abstract Pair<Integer, List<ExecTO>> listExecutions(\n     public abstract ExecTO deleteExecution(String executionKey);\n \n     public abstract List<BatchResponseItem> deleteExecutions(\n-            String key, Date startedBefore, Date startedAfter, Date endedBefore, Date endedAfter);\n+            String key,\n+            OffsetDateTime startedBefore,\n+            OffsetDateTime startedAfter,\n+            OffsetDateTime endedBefore,\n+            OffsetDateTime endedAfter);\n \n     public abstract JobTO getJob(String key);\n "},{"sha":"c88788507a1f7bd4abaaad5f33872efa3791eeb6","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AbstractJobLogic.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n+import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.apache.syncope.core.provisioning.java.job.AbstractInterruptableJob;\n import org.apache.syncope.core.provisioning.java.job.SystemLoadReporterJob;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n@@ -84,7 +85,7 @@ protected JobTO getJobTO(final JobKey jobKey, final boolean includeCustom) throw\n                     jobTO.setScheduled(false);\n                 } else {\n                     jobTO.setScheduled(true);\n-                    jobTO.setStart(jobTriggers.get(0).getStartTime());\n+                    jobTO.setStart(jobTriggers.get(0).getStartTime().toInstant().atOffset(FormatUtils.DEFAULT_OFFSET));\n                 }\n \n                 jobTO.setRunning(jobManager.isRunning(jobKey));"},{"sha":"936c13a3caad0a48fa4a25276ef6844805152ece","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n+import java.time.OffsetDateTime;\n import java.util.Collections;\n-import java.util.Date;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -74,7 +74,7 @@ public AccessTokenLogic(\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    public Pair<String, Date> login() {\n+    public Pair<String, OffsetDateTime> login() {\n         if (securityProperties.getAnonymousUser().equals(AuthContextUtils.getUsername())) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n             sce.getElements().add(securityProperties.getAnonymousUser() + \" cannot be granted an access token\");\n@@ -89,7 +89,7 @@ public Pair<String, Date> login() {\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    public Pair<String, Date> refresh() {\n+    public Pair<String, OffsetDateTime> refresh() {\n         AccessToken accessToken = accessTokenDAO.findByOwner(AuthContextUtils.getUsername());\n         if (accessToken == null) {\n             throw new NotFoundException(\"AccessToken for \" + AuthContextUtils.getUsername());\n@@ -133,5 +133,4 @@ protected AccessTokenTO resolveReference(final Method method, final Object... ar\n \n         throw new UnresolvedReferenceException();\n     }\n-\n }"},{"sha":"2e2279a6dc2b7b6d30b03a462a5109638a85590c","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n+import java.time.OffsetDateTime;\n import java.util.Collection;\n-import java.util.Date;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -445,7 +445,7 @@ public ExecTO provisionMembers(final String key, final ProvisionAction action) {\n         result.setJobType(JobType.TASK);\n         result.setRefKey(task.getKey());\n         result.setRefDesc(taskDataBinder.buildRefDesc(task));\n-        result.setStart(new Date());\n+        result.setStart(OffsetDateTime.now());\n         result.setStatus(\"JOB_FIRED\");\n         result.setMessage(\"Job fired; waiting for results...\");\n "},{"sha":"bfda1a44aa0365f5408a3eafb42b3b6f87b41f85","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -22,8 +22,8 @@\n import java.io.OutputStream;\n import java.lang.reflect.Method;\n import java.nio.charset.StandardCharsets;\n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -172,7 +172,7 @@ public ReportTO read(final String key) {\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_EXECUTE + \"')\")\n     @Override\n-    public ExecTO execute(final String key, final Date startAt, final boolean dryRun) {\n+    public ExecTO execute(final String key, final OffsetDateTime startAt, final boolean dryRun) {\n         Report report = reportDAO.find(key);\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + key);\n@@ -204,7 +204,7 @@ public ExecTO execute(final String key, final Date startAt, final boolean dryRun\n         result.setJobType(JobType.REPORT);\n         result.setRefKey(report.getKey());\n         result.setRefDesc(binder.buildRefDesc(report));\n-        result.setStart(new Date());\n+        result.setStart(OffsetDateTime.now());\n         result.setStatus(ReportExecStatus.STARTED.name());\n         result.setMessage(\"Job fired; waiting for results...\");\n         result.setExecutor(AuthContextUtils.getUsername());\n@@ -353,7 +353,10 @@ public ExecTO deleteExecution(final String executionKey) {\n     @Override\n     public List<BatchResponseItem> deleteExecutions(\n             final String key,\n-            final Date startedBefore, final Date startedAfter, final Date endedBefore, final Date endedAfter) {\n+            final OffsetDateTime startedBefore,\n+            final OffsetDateTime startedAfter,\n+            final OffsetDateTime endedBefore,\n+            final OffsetDateTime endedAfter) {\n \n         Report report = reportDAO.find(key);\n         if (report == null) {"},{"sha":"f787d40249481c8b3ea35165180a39fdde0fb57b","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":13,"deletions":11,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n@@ -240,12 +240,12 @@ public <T extends TaskTO> T read(final TaskType type, final String key, final bo\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_EXECUTE + \"')\")\n     @Override\n-    public ExecTO execute(final String key, final Date startAt, final boolean dryRun) {\n+    public ExecTO execute(final String key, final OffsetDateTime startAt, final boolean dryRun) {\n         Task task = taskDAO.find(key);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + key);\n         }\n-        if (startAt != null && startAt.before(new Date())) {\n+        if (startAt != null && startAt.isBefore(OffsetDateTime.now())) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Scheduling);\n             sce.getElements().add(\"Cannot schedule in the past\");\n             throw sce;\n@@ -311,7 +311,7 @@ public ExecTO execute(final String key, final Date startAt, final boolean dryRun\n                 result.setJobType(JobType.TASK);\n                 result.setRefKey(task.getKey());\n                 result.setRefDesc(binder.buildRefDesc(task));\n-                result.setStart(new Date());\n+                result.setStart(OffsetDateTime.now());\n                 result.setExecutor(executor);\n                 result.setStatus(\"JOB_FIRED\");\n                 result.setMessage(\"Job fired; waiting for results...\");\n@@ -392,10 +392,10 @@ public ExecTO deleteExecution(final String execKey) {\n     @Override\n     public List<BatchResponseItem> deleteExecutions(\n             final String key,\n-            final Date startedBefore,\n-            final Date startedAfter,\n-            final Date endedBefore,\n-            final Date endedAfter) {\n+            final OffsetDateTime startedBefore,\n+            final OffsetDateTime startedAfter,\n+            final OffsetDateTime endedBefore,\n+            final OffsetDateTime endedAfter) {\n \n         Task task = taskDAO.find(key);\n         if (task == null) {\n@@ -475,12 +475,14 @@ public void actionJob(final String key, final JobAction action) {\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_DELETE + \"')\")\n     public List<PropagationTaskTO> purgePropagations(\n-            final Date since,\n+            final OffsetDateTime since,\n             final List<ExecStatus> statuses,\n             final List<String> resources) {\n+\n         return taskDAO.purgePropagations(since, statuses, Optional.ofNullable(resources).\n-                map(r -> r.stream().map(resourceDAO::find).filter(Objects::nonNull).collect(Collectors.toList()))\n-                .orElse(null));\n+                map(r -> r.stream().map(resourceDAO::find).\n+                filter(Objects::nonNull).collect(Collectors.toList())).\n+                orElse(null));\n     }\n \n     @Override"},{"sha":"6d28e97d9a05f0d38baf1247bf11065066cf3061","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/IdRepoRESTCXFContext.java","status":"modified","additions":7,"deletions":13,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -40,7 +40,7 @@\n import org.apache.cxf.transport.common.gzip.GZIPInInterceptor;\n import org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;\n import org.apache.cxf.validation.BeanValidationProvider;\n-import org.apache.syncope.common.lib.jackson.SyncopeObjectMapper;\n+import org.apache.syncope.common.lib.jackson.SyncopeJsonMapper;\n import org.apache.syncope.common.lib.jackson.SyncopeXmlMapper;\n import org.apache.syncope.common.lib.jackson.SyncopeYAMLMapper;\n import org.apache.syncope.common.lib.search.SyncopeFiqlParser;\n@@ -155,25 +155,19 @@ public DateParamConverterProvider dateParamConverterProvider() {\n     @ConditionalOnMissingBean\n     @Bean\n     public JacksonJsonProvider jsonProvider() {\n-        JacksonJsonProvider jsonProvider = new JacksonJsonProvider();\n-        jsonProvider.setMapper(new SyncopeObjectMapper());\n-        return jsonProvider;\n+        return new JacksonJsonProvider(new SyncopeJsonMapper());\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n     public JacksonXMLProvider xmlProvider() {\n-        JacksonXMLProvider xmlProvider = new JacksonXMLProvider();\n-        xmlProvider.setMapper(new SyncopeXmlMapper());\n-        return xmlProvider;\n+        return new JacksonXMLProvider(new SyncopeXmlMapper());\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n     public JacksonYAMLProvider yamlProvider() {\n-        JacksonYAMLProvider yamlProvider = new JacksonYAMLProvider();\n-        yamlProvider.setMapper(new SyncopeYAMLMapper());\n-        return yamlProvider;\n+        return new JacksonYAMLProvider(new SyncopeYAMLMapper());\n     }\n \n     @ConditionalOnMissingBean\n@@ -342,7 +336,7 @@ public AccessTokenService accessTokenService(final AccessTokenLogic accessTokenL\n     @ConditionalOnMissingBean\n     @Bean\n     public AnyObjectService anyObjectService(final AnyObjectDAO anyObjectDAO, final AnyObjectLogic anyObjectLogic,\n-                                             final SearchCondVisitor searchCondVisitor) {\n+            final SearchCondVisitor searchCondVisitor) {\n         return new AnyObjectServiceImpl(searchCondVisitor, anyObjectDAO, anyObjectLogic);\n     }\n \n@@ -385,7 +379,7 @@ public DynRealmService dynRealmService(final DynRealmLogic dynRealmLogic) {\n     @ConditionalOnMissingBean\n     @Bean\n     public GroupService groupService(final GroupDAO groupDAO, final GroupLogic groupLogic,\n-                                     final SearchCondVisitor searchCondVisitor) {\n+            final SearchCondVisitor searchCondVisitor) {\n         return new GroupServiceImpl(searchCondVisitor, groupDAO, groupLogic);\n     }\n \n@@ -482,7 +476,7 @@ public UserSelfService userSelfService(final UserLogic userLogic, final SyncopeL\n     @ConditionalOnMissingBean\n     @Bean\n     public UserService userService(final UserDAO userDAO, final UserLogic userLogic,\n-                                   final SearchCondVisitor searchCondVisitor) {\n+            final SearchCondVisitor searchCondVisitor) {\n         return new UserServiceImpl(searchCondVisitor, userDAO, userLogic);\n     }\n }"},{"sha":"f821a81ce8e6a4fedaab3b7aaa94df31f42b83c4","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n@@ -155,8 +155,8 @@ public PagedResult<TO> search(final AnyQuery anyQuery) {\n         }\n     }\n \n-    protected Date findLastChange(final String key) {\n-        Date lastChange = getAnyDAO().findLastChange(key);\n+    protected OffsetDateTime findLastChange(final String key) {\n+        OffsetDateTime lastChange = getAnyDAO().findLastChange(key);\n         if (lastChange == null) {\n             throw new NotFoundException(\"User, Group or Any Object for \" + key);\n         }\n@@ -166,8 +166,8 @@ protected Date findLastChange(final String key) {\n \n     protected Response doUpdate(final UR updateReq) {\n         updateReq.setKey(getActualKey(getAnyDAO(), updateReq.getKey()));\n-        Date etagDate = findLastChange(updateReq.getKey());\n-        checkETag(String.valueOf(etagDate.getTime()));\n+        OffsetDateTime etag = findLastChange(updateReq.getKey());\n+        checkETag(String.valueOf(etag.toInstant().toEpochMilli()));\n \n         ProvisioningResult<TO> updated = getAnyLogic().update(updateReq, isNullPriorityAsync());\n         return modificationResponse(updated);\n@@ -218,17 +218,17 @@ public void delete(final String key, final SchemaType schemaType, final String s\n     public Response delete(final String key) {\n         String actualKey = getActualKey(getAnyDAO(), key);\n \n-        Date etagDate = findLastChange(actualKey);\n-        checkETag(String.valueOf(etagDate.getTime()));\n+        OffsetDateTime etag = findLastChange(actualKey);\n+        checkETag(String.valueOf(etag.toInstant().toEpochMilli()));\n \n         ProvisioningResult<TO> deleted = getAnyLogic().delete(actualKey, isNullPriorityAsync());\n         return modificationResponse(deleted);\n     }\n \n     @Override\n     public Response deassociate(final ResourceDR req) {\n-        Date etagDate = findLastChange(req.getKey());\n-        checkETag(String.valueOf(etagDate.getTime()));\n+        OffsetDateTime etag = findLastChange(req.getKey());\n+        checkETag(String.valueOf(etag.toInstant().toEpochMilli()));\n \n         ProvisioningResult<TO> updated;\n         switch (req.getAction()) {\n@@ -304,8 +304,8 @@ public Response deassociate(final ResourceDR req) {\n \n     @Override\n     public Response associate(final ResourceAR req) {\n-        Date etagDate = findLastChange(req.getKey());\n-        checkETag(String.valueOf(etagDate.getTime()));\n+        OffsetDateTime etag = findLastChange(req.getKey());\n+        checkETag(String.valueOf(etag.toInstant().toEpochMilli()));\n \n         ProvisioningResult<TO> updated;\n         switch (req.getAction()) {"},{"sha":"5a71598fade44a1102ec9d6668936786b3ea1143","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractExecutableService.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -29,8 +29,8 @@\n import org.apache.syncope.common.rest.api.batch.BatchPayloadGenerator;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.apache.syncope.common.rest.api.beans.ExecDeleteQuery;\n-import org.apache.syncope.common.rest.api.beans.ExecQuery;\n-import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecListQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n import org.apache.syncope.common.rest.api.service.ExecutableService;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n import org.apache.syncope.core.logic.AbstractExecutableLogic;\n@@ -41,7 +41,7 @@ public abstract class AbstractExecutableService extends AbstractService implemen\n     protected abstract AbstractExecutableLogic<?> getExecutableLogic();\n \n     @Override\n-    public PagedResult<ExecTO> listExecutions(final ExecQuery query) {\n+    public PagedResult<ExecTO> listExecutions(final ExecListQuery query) {\n         Pair<Integer, List<ExecTO>> result = getExecutableLogic().listExecutions(\n                 query.getKey(),\n                 query.getPage(),\n@@ -77,7 +77,7 @@ public Response deleteExecutions(final ExecDeleteQuery query) {\n     }\n \n     @Override\n-    public ExecTO execute(final ExecuteQuery query) {\n+    public ExecTO execute(final ExecSpecs query) {\n         return getExecutableLogic().execute(query.getKey(), query.getStartAt(), query.getDryRun());\n     }\n "},{"sha":"baff80d367835beaa1a234ab8ac6cc8de25373ce","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AccessTokenServiceImpl.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAccessTokenServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAccessTokenServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAccessTokenServiceImpl.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n+import java.time.format.DateTimeFormatter;\n import java.util.List;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.lang3.time.DateFormatUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -42,21 +42,19 @@ public AccessTokenServiceImpl(final AccessTokenLogic logic) {\n \n     @Override\n     public Response login() {\n-        Pair<String, Date> login = logic.login();\n+        Pair<String, OffsetDateTime> login = logic.login();\n         return Response.noContent().\n                 header(RESTHeaders.TOKEN, login.getLeft()).\n-                header(RESTHeaders.TOKEN_EXPIRE,\n-                        DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT.format(login.getRight())).\n+                header(RESTHeaders.TOKEN_EXPIRE, DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(login.getRight())).\n                 build();\n     }\n \n     @Override\n     public Response refresh() {\n-        Pair<String, Date> refresh = logic.refresh();\n+        Pair<String, OffsetDateTime> refresh = logic.refresh();\n         return Response.noContent().\n                 header(RESTHeaders.TOKEN, refresh.getLeft()).\n-                header(RESTHeaders.TOKEN_EXPIRE,\n-                        DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT.format(refresh.getRight())).\n+                header(RESTHeaders.TOKEN_EXPIRE, DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(refresh.getRight())).\n                 build();\n     }\n "},{"sha":"be2a2e73264f140599e440ac3e1f98e618f4db24","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SyncopeServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,7 +20,7 @@\n \n import java.io.IOException;\n import java.io.InputStream;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import javax.ws.rs.InternalServerErrorException;\n import javax.ws.rs.NotFoundException;\n@@ -137,7 +137,7 @@ public Response batch(final InputStream input) {\n         // prepare for batch processing\n         Batch batch = entityFactory.newEntity(Batch.class);\n         batch.setKey(boundary);\n-        batch.setExpiryTime(new Date(System.currentTimeMillis() + 5 * 60 * 1000));\n+        batch.setExpiryTime(OffsetDateTime.now().plusMinutes(5));\n         batchDAO.save(batch);\n \n         BatchProcess batchProcess = ApplicationContextProvider.getBeanFactory().createBean(BatchProcess.class);"},{"sha":"960bca9aa31ce0f1842849f5e44a985b353549d5","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.net.URI;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import javax.ws.rs.BadRequestException;\n import javax.ws.rs.core.Response;\n@@ -98,12 +98,15 @@ public void update(final TaskType type, final SchedTaskTO taskTO) {\n     }\n \n     @Override\n-    public Response purgePropagations(final Date since, final List<ExecStatus> statuses, final List<String> resources) {\n+    public Response purgePropagations(\n+            final OffsetDateTime since,\n+            final List<ExecStatus> statuses,\n+            final List<String> resources) {\n+\n         if (since == null && CollectionUtils.isEmpty(statuses) && CollectionUtils.isEmpty(resources)) {\n             return Response.status(Response.Status.PRECONDITION_FAILED).build();\n         }\n \n         return Response.ok(logic.purgePropagations(since, statuses, resources)).build();\n     }\n-\n }"},{"sha":"2b48e5b761d3cdfbc8f02966672fe5fc4b8a7696","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.request.StatusR;\n import org.apache.syncope.common.lib.request.UserCR;\n@@ -78,8 +78,8 @@ public Response update(final UserUR updateReq) {\n \n     @Override\n     public Response status(final StatusR statusR) {\n-        Date etagDate = findLastChange(statusR.getKey());\n-        checkETag(String.valueOf(etagDate.getTime()));\n+        OffsetDateTime etag = findLastChange(statusR.getKey());\n+        checkETag(String.valueOf(etag.toInstant().toEpochMilli()));\n \n         ProvisioningResult<UserTO> updated = logic.status(statusR, isNullPriorityAsync());\n         return modificationResponse(updated);"},{"sha":"e5213bd572d4e31666f0b7dfe6a8c96e1d58ee82","filename":"core/idrepo/rest-cxf/src/test/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -75,7 +75,7 @@\n import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.apache.syncope.core.rest.cxf.AddETagFilter;\n import org.apache.syncope.core.rest.cxf.RestServiceExceptionMapper;\n-import org.apache.syncope.common.lib.jackson.SyncopeObjectMapper;\n+import org.apache.syncope.common.lib.jackson.SyncopeJsonMapper;\n import org.apache.syncope.common.lib.jackson.SyncopeXmlMapper;\n import org.apache.syncope.common.lib.jackson.SyncopeYAMLMapper;\n import org.junit.jupiter.api.BeforeEach;\n@@ -234,7 +234,7 @@ private void checkList(final PagedResult<AnyObjectTO> list) {\n     public void jsonList() throws IOException {\n         InputStream in = list(MediaType.APPLICATION_JSON_TYPE);\n \n-        PagedResult<AnyObjectTO> list = new SyncopeObjectMapper().\n+        PagedResult<AnyObjectTO> list = new SyncopeJsonMapper().\n                 readValue(IOUtils.toString(in), new TypeReference<>() {\n                 });\n         checkList(list);"},{"sha":"add3f154c15a4159501a04be1c936741fa232e75","filename":"core/idrepo/rest-cxf/src/test/java/org/apache/syncope/core/rest/cxf/service/IdRepoRESTCXFTestContext.java","status":"modified","additions":5,"deletions":12,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FIdRepoRESTCXFTestContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FIdRepoRESTCXFTestContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FIdRepoRESTCXFTestContext.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.rest.api.DateParamConverterProvider;\n import org.apache.syncope.core.rest.cxf.AddETagFilter;\n import org.apache.syncope.core.rest.cxf.RestServiceExceptionMapper;\n-import org.apache.syncope.common.lib.jackson.SyncopeObjectMapper;\n+import org.apache.syncope.common.lib.jackson.SyncopeJsonMapper;\n import org.apache.syncope.common.lib.jackson.SyncopeXmlMapper;\n import org.apache.syncope.common.lib.jackson.SyncopeYAMLMapper;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -50,23 +50,17 @@ public DateParamConverterProvider dateParamConverterProvider() {\n \n     @Bean\n     public JacksonXMLProvider xmlProvider() {\n-        JacksonXMLProvider xmlProvider = new JacksonXMLProvider();\n-        xmlProvider.setMapper(new SyncopeXmlMapper());\n-        return xmlProvider;\n+        return new JacksonXMLProvider(new SyncopeXmlMapper());\n     }\n \n     @Bean\n     public JacksonJsonProvider jsonProvider() {\n-        JacksonJsonProvider jsonProvider = new JacksonJsonProvider();\n-        jsonProvider.setMapper(new SyncopeObjectMapper());\n-        return jsonProvider;\n+        return new JacksonJsonProvider(new SyncopeJsonMapper());\n     }\n \n     @Bean\n     public JacksonYAMLProvider yamlProvider() {\n-        JacksonYAMLProvider yamlProvider = new JacksonYAMLProvider();\n-        yamlProvider.setMapper(new SyncopeYAMLMapper());\n-        return yamlProvider;\n+        return new JacksonYAMLProvider(new SyncopeYAMLMapper());\n     }\n \n     @Bean\n@@ -75,8 +69,7 @@ public BeanValidationProvider validationProvider() {\n     }\n \n     @Bean\n-    public JAXRSBeanValidationInInterceptor validationInInterceptor(\n-        final BeanValidationProvider validationProvider) {\n+    public JAXRSBeanValidationInInterceptor validationInInterceptor(final BeanValidationProvider validationProvider) {\n         JAXRSBeanValidationInInterceptor validationInInterceptor = new JAXRSBeanValidationInInterceptor();\n         validationInInterceptor.setProvider(validationProvider);\n         return validationInInterceptor;"},{"sha":"63089a4291669ff681607030b8e8bb9c0b2cd137","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n+import java.time.OffsetDateTime;\n import java.util.Collection;\n-import java.util.Date;\n import java.util.List;\n import java.util.Optional;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n@@ -39,7 +39,7 @@\n \n     List<A> findByKeys(List<String> keys);\n \n-    Date findLastChange(String key);\n+    OffsetDateTime findLastChange(String key);\n \n     A authFind(String key);\n "},{"sha":"7fda0cd593497564cc4c3401c88403d0efa6c313","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ReportExecDAO.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportExecDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Report;\n@@ -38,7 +38,12 @@ public interface ReportExecDAO extends DAO<ReportExec> {\n \n     List<ReportExec> findAll(Report report, int page, int itemsPerPage, List<OrderByClause> orderByClauses);\n \n-    List<ReportExec> findAll(Report report, Date startedBefore, Date startedAfter, Date endedBefore, Date endedAfter);\n+    List<ReportExec> findAll(\n+            Report report,\n+            OffsetDateTime startedBefore,\n+            OffsetDateTime startedAfter,\n+            OffsetDateTime endedBefore,\n+            OffsetDateTime endedAfter);\n \n     ReportExec save(ReportExec execution);\n "},{"sha":"244084ba1f11c11e62eb6fe5398b790d59dece64","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -77,7 +77,7 @@ int count(\n     void deleteAll(ExternalResource resource, TaskType type);\n \n     List<PropagationTaskTO> purgePropagations(\n-            Date since, \n+            OffsetDateTime since,\n             List<ExecStatus> statuses,\n             List<ExternalResource> externalResources);\n }"},{"sha":"000fdda6f316f00b28e09fada62e5b67d2351639","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskExecDAO.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n@@ -39,7 +39,11 @@ public interface TaskExecDAO extends DAO<TaskExec> {\n     <T extends Task> List<TaskExec> findAll(T task, int page, int itemsPerPage, List<OrderByClause> orderByClauses);\n \n     <T extends Task> List<TaskExec> findAll(\n-            T task, Date startedBefore, Date startedAfter, Date endedBefore, Date endedAfter);\n+            T task,\n+            OffsetDateTime startedBefore,\n+            OffsetDateTime startedAfter,\n+            OffsetDateTime endedBefore,\n+            OffsetDateTime endedAfter);\n \n     TaskExec save(TaskExec execution);\n "},{"sha":"3db11c8462cbef5f03852967f3915f5604ade620","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AccessToken.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAccessToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAccessToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAccessToken.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,17 +18,17 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n \n public interface AccessToken extends ProvidedKeyEntity {\n \n     String getBody();\n \n     void setBody(String body);\n \n-    Date getExpirationTime();\n+    OffsetDateTime getExpirationTime();\n \n-    void setExpirationTime(Date expirationTime);\n+    void setExpirationTime(OffsetDateTime expirationTime);\n \n     String getOwner();\n "},{"sha":"ef99a6996100dea80cf34d3a788f24b40250aad5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Any.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,31 +18,31 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import java.util.List;\n \n public interface Any<P extends PlainAttr<?>> extends Attributable<P>, Entity {\n \n-    Date getCreationDate();\n+    OffsetDateTime getCreationDate();\n \n     String getCreator();\n \n     String getCreationContext();\n \n-    Date getLastChangeDate();\n+    OffsetDateTime getLastChangeDate();\n \n     String getLastModifier();\n \n     String getLastChangeContext();\n \n-    void setCreationDate(Date creationDate);\n+    void setCreationDate(OffsetDateTime creationDate);\n \n     void setCreator(String creator);\n \n     void setCreationContext(String context);\n \n-    void setLastChangeDate(Date lastChangeDate);\n+    void setLastChangeDate(OffsetDateTime lastChangeDate);\n \n     void setLastModifier(String lastModifier);\n "},{"sha":"2269b5ae4e0b3dac573857866a9ea0d06d568c0d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Batch.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FBatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FBatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FBatch.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,13 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n \n public interface Batch extends ProvidedKeyEntity {\n \n-    Date getExpiryTime();\n+    OffsetDateTime getExpiryTime();\n \n-    void setExpiryTime(Date expiryTime);\n+    void setExpiryTime(OffsetDateTime expiryTime);\n \n     String getResults();\n "},{"sha":"9c3886880c22676f91a6e92d139187b691e1fbae","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Delegation.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDelegation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDelegation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDelegation.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.Set;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n \n@@ -32,13 +32,13 @@ public interface Delegation extends Entity {\n \n     void setDelegated(User delegated);\n \n-    void setStart(Date start);\n+    void setStart(OffsetDateTime start);\n \n-    Date getStart();\n+    OffsetDateTime getStart();\n \n-    void setEnd(Date end);\n+    void setEnd(OffsetDateTime end);\n \n-    Date getEnd();\n+    OffsetDateTime getEnd();\n \n     boolean add(Role role);\n "},{"sha":"e18dd8181b00248e40c5e613f79abf54141d383c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Exec.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FExec.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n \n public interface Exec extends Entity {\n \n@@ -35,13 +35,13 @@ public interface Exec extends Entity {\n \n     String getStatus();\n \n-    void setStart(Date start);\n+    void setStart(OffsetDateTime start);\n \n-    Date getStart();\n+    OffsetDateTime getStart();\n \n-    void setEnd(Date end);\n+    void setEnd(OffsetDateTime end);\n \n-    Date getEnd();\n+    OffsetDateTime getEnd();\n \n     String getExecutor();\n "},{"sha":"5e101e8f547cfc2a2d517147c77e815ccdf05445","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PlainAttrValue.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttrValue.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n \n public interface PlainAttrValue extends Entity {\n@@ -29,7 +29,7 @@ public interface PlainAttrValue extends Entity {\n \n     Boolean getBooleanValue();\n \n-    Date getDateValue();\n+    OffsetDateTime getDateValue();\n \n     Double getDoubleValue();\n \n@@ -53,7 +53,7 @@ public interface PlainAttrValue extends Entity {\n \n     void setBooleanValue(Boolean booleanValue);\n \n-    void setDateValue(Date dateValue);\n+    void setDateValue(OffsetDateTime dateValue);\n \n     void setDoubleValue(Double doubleValue);\n "},{"sha":"599805d52d2d8dddab5cd90a15842489744ba998","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Remediation.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRemediation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRemediation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRemediation.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -50,9 +50,9 @@ public interface Remediation extends Entity {\n \n     void setError(String error);\n \n-    Date getInstant();\n+    OffsetDateTime getInstant();\n \n-    void setInstant(Date instant);\n+    void setInstant(OffsetDateTime instant);\n \n     PullTask getPullTask();\n "},{"sha":"4174b253172efbee2041f76611949ee5dde52842","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/SchedTask.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSchedTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSchedTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSchedTask.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.task;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n \n public interface SchedTask extends Task {\n@@ -35,9 +35,9 @@ public interface SchedTask extends Task {\n \n     Implementation getJobDelegate();\n \n-    Date getStartAt();\n+    OffsetDateTime getStartAt();\n \n-    void setStartAt(Date startAt);\n+    void setStartAt(OffsetDateTime startAt);\n \n     void setCronExpression(String cronExpression);\n "},{"sha":"584b9f9ce99de31b86fd8a3a0f762d5c80be48f0","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/User.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.user;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import java.util.Optional;\n import org.apache.syncope.core.persistence.api.entity.Role;\n@@ -29,7 +29,7 @@ public interface User extends Account, GroupableRelatable<User, UMembership, UPl\n \n     String getToken();\n \n-    Date getTokenExpireTime();\n+    OffsetDateTime getTokenExpireTime();\n \n     void generateToken(int tokenLength, int tokenExpireTime);\n \n@@ -43,9 +43,9 @@ public interface User extends Account, GroupableRelatable<User, UMembership, UPl\n \n     void removeClearPassword();\n \n-    Date getChangePwdDate();\n+    OffsetDateTime getChangePwdDate();\n \n-    void setChangePwdDate(Date changePwdDate);\n+    void setChangePwdDate(OffsetDateTime changePwdDate);\n \n     List<String> getPasswordHistory();\n \n@@ -65,9 +65,9 @@ public interface User extends Account, GroupableRelatable<User, UMembership, UPl\n \n     void setFailedLogins(Integer failedLogins);\n \n-    Date getLastLoginDate();\n+    OffsetDateTime getLastLoginDate();\n \n-    void setLastLoginDate(Date lastLoginDate);\n+    void setLastLoginDate(OffsetDateTime lastLoginDate);\n \n     boolean isMustChangePassword();\n "},{"sha":"a5c9e9f8601f889cec301f196aa433056bb6d16a","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractJPAJSONAnyDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.HashSet;\n import java.util.LinkedHashMap;\n import java.util.List;\n@@ -336,7 +336,7 @@ public <A extends Any<?>> void checkBeforeSave(final String table, final AnyUtil\n         }\n \n         // update sysInfo - as org.apache.syncope.core.persistence.jpa.entity.PlainAttrListener is not invoked\n-        Date now = new Date();\n+        OffsetDateTime now = OffsetDateTime.now();\n         String username = AuthContextUtils.getUsername();\n         LOG.debug(\"Set last change date '{}' and modifier '{}' for '{}'\", now, username, any);\n         any.setLastModifier(username);"},{"sha":"6bbb32d721edc9d9a91f62dbe23260dcae767f2c","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractJPAJSONLoggerDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONLoggerDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONLoggerDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONLoggerDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import java.util.ArrayList;\n import java.util.List;\n@@ -29,7 +29,7 @@\n \n public abstract class AbstractJPAJSONLoggerDAO extends JPAAuditConfDAO {\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     protected abstract static class JSONMessageCriteriaBuilder extends MessageCriteriaBuilder {\n "},{"sha":"d2ebd899087fb6b8b7ba07df5877293ed1fadd21","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAnySearchDAO.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.time.format.DateTimeFormatter;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n@@ -171,13 +172,13 @@ protected void fillAttrQuery(\n                 String key = key(schema.getType());\n \n                 String value = Optional.ofNullable(attrValue.getDateValue()).\n-                        map(v -> String.valueOf(v.getTime())).\n+                        map(DateTimeFormatter.ISO_OFFSET_DATE_TIME::format).\n                         orElse(cond.getExpression());\n \n                 boolean lower = (schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum)\n                         && (cond.getType() == AttrCond.Type.IEQ || cond.getType() == AttrCond.Type.ILIKE);\n \n-                query.append(\"plainSchema = ?\").append(setParameter(parameters, cond.getSchema())).\n+                query.append(\"plainSchema=?\").append(setParameter(parameters, cond.getSchema())).\n                         append(\" AND \").\n                         append(lower ? \"LOWER(\" : \"\").\n                         append(schema.isUniqueConstraint()"},{"sha":"eb8d631152c9b2b0fd062adac3bbf8899df06b51","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":19,"deletions":12,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.time.format.DateTimeFormatter;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n@@ -74,6 +75,12 @@ protected static String escapeForLikeRegex(final String input) {\n         return output;\n     }\n \n+    protected static String escapeIfString(final String value, final boolean isStr) {\n+        return isStr\n+                ? new StringBuilder().append('\"').append(value.replace(\"'\", \"''\")).append('\"').toString()\n+                : value;\n+    }\n+\n     public PGJPAJSONAnySearchDAO(\n             final RealmDAO realmDAO,\n             final DynRealmDAO dynRealmDAO,\n@@ -139,35 +146,37 @@ protected void fillAttrQuery(\n             String key = key(schema.getType());\n \n             String value = Optional.ofNullable(attrValue.getDateValue()).\n-                    map(v -> String.valueOf(v.getTime())).\n+                    map(DateTimeFormatter.ISO_OFFSET_DATE_TIME::format).\n                     orElse(cond.getExpression());\n \n             boolean isStr = true;\n-            boolean lower;\n+            boolean lower = false;\n             if (schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum) {\n                 lower = (cond.getType() == AttrCond.Type.IEQ || cond.getType() == AttrCond.Type.ILIKE);\n-            } else {\n+            } else if (schema.getType() != AttrSchemaType.Date) {\n                 lower = false;\n                 try {\n                     switch (schema.getType()) {\n-                        case Date:\n                         case Long:\n                             Long.parseLong(value);\n                             break;\n+\n                         case Double:\n                             Double.parseDouble(value);\n                             break;\n+\n                         case Boolean:\n                             if (!(\"true\".equalsIgnoreCase(value) || \"false\".equalsIgnoreCase(value))) {\n                                 throw new IllegalArgumentException();\n                             }\n                             break;\n+\n                         default:\n                     }\n \n                     isStr = false;\n                 } catch (Exception nfe) {\n-                    // ignore}\n+                    // ignore\n                 }\n             }\n \n@@ -202,10 +211,8 @@ protected void fillAttrQuery(\n                             append(\"(@.\").append(key);\n                     if (StringUtils.containsAny(value, POSTGRESQL_REGEX_CHARS) || lower) {\n                         query.append(\" like_regex \\\"\").append(escapeForLikeRegex(value).replace(\"'\", \"''\")).append('\"');\n-                    } else if (isStr) {\n-                        query.append(\" == \\\"\").append(value.replace(\"'\", \"''\")).append('\"');\n                     } else {\n-                        query.append(\" == \").append(value);\n+                        query.append(\" == \").append(escapeIfString(value, isStr));\n                     }\n \n                     query.append(lower ? \" flag \\\"i\\\"\" : \"\").append(\")')\");\n@@ -214,25 +221,25 @@ protected void fillAttrQuery(\n                 case GE:\n                     query.append(\"jsonb_path_exists(\").append(schema.getKey()).append(\", '$[*] ? \").\n                             append(\"(@.\").append(key).append(\" >= \").\n-                            append(value).append(\")')\");\n+                            append(escapeIfString(value, isStr)).append(\")')\");\n                     break;\n \n                 case GT:\n                     query.append(\"jsonb_path_exists(\").append(schema.getKey()).append(\", '$[*] ? \").\n                             append(\"(@.\").append(key).append(\" > \").\n-                            append(value).append(\")')\");\n+                            append(escapeIfString(value, isStr)).append(\")')\");\n                     break;\n \n                 case LE:\n                     query.append(\"jsonb_path_exists(\").append(schema.getKey()).append(\", '$[*] ? \").\n                             append(\"(@.\").append(key).append(\" <= \").\n-                            append(value).append(\")')\");\n+                            append(escapeIfString(value, isStr)).append(\")')\");\n                     break;\n \n                 case LT:\n                     query.append(\"jsonb_path_exists(\").append(schema.getKey()).append(\", '$[*] ? \").\n                             append(\"(@.\").append(key).append(\" < \").\n-                            append(value).append(\")')\");\n+                            append(escapeIfString(value, isStr)).append(\")')\");\n                     break;\n \n                 default:"},{"sha":"8e7da4d7eab65937a729412b968124da94060acb","filename":"core/persistence-jpa-json/src/main/resources/myjson/views.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fviews.xml?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -56,7 +56,7 @@ under the License.\n     NESTED PATH '$.values[*]' COLUMNS (\n     binaryValue LONGBLOB PATH '$.binaryValue',\n     booleanValue INT PATH '$.booleanValue',\n-    dateValue BIGINT(20) PATH '$.dateValue',\n+    dateValue VARCHAR(32) PATH '$.dateValue',\n     doubleValue DOUBLE PATH '$.doubleValue',\n     longValue BIGINT(20) PATH '$.longValue',\n     stringValue VARCHAR(255) PATH '$.stringValue'),\n@@ -120,7 +120,7 @@ under the License.\n     NESTED PATH '$.values[*]' COLUMNS (\n     binaryValue LONGBLOB PATH '$.binaryValue',\n     booleanValue INT PATH '$.booleanValue',\n-    dateValue BIGINT(20) PATH '$.dateValue',\n+    dateValue VARCHAR(32) PATH '$.dateValue',\n     doubleValue DOUBLE PATH '$.doubleValue',\n     longValue BIGINT(20) PATH '$.longValue',\n     stringValue VARCHAR(255) PATH '$.stringValue'),\n@@ -164,7 +164,7 @@ under the License.\n     NESTED PATH '$.values[*]' COLUMNS (\n     binaryValue LONGBLOB PATH '$.binaryValue',\n     booleanValue INT PATH '$.booleanValue',\n-    dateValue BIGINT(20) PATH '$.dateValue',\n+    dateValue VARCHAR(32) PATH '$.dateValue',\n     doubleValue DOUBLE PATH '$.doubleValue',\n     longValue BIGINT(20) PATH '$.longValue',\n     stringValue VARCHAR(255) PATH '$.stringValue'),"},{"sha":"54ecf9624ade691523608f8171f556f37bd56567","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -346,34 +346,34 @@ under the License.\n                realm_id=\"c5b75db1-fce7-470f-b780-3b9934d82a9d\"\n                username=\"rossini\" creator=\"admin\" lastModifier=\"admin\"\n                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\" suspended=\"0\"\n-               plainAttrs=\"[{&quot;values&quot;:[{&quot;stringValue&quot;:&quot;G&quot;}],&quot;schema&quot;:&quot;ctype&quot;},{&quot;values&quot;:[{&quot;stringValue&quot;:&quot;Gioacchino&quot;}],&quot;schema&quot;:&quot;firstname&quot;},{&quot;values&quot;:[{&quot;stringValue&quot;:&quot;Rossini&quot;}],&quot;schema&quot;:&quot;surname&quot;},{&quot;values&quot;:[{&quot;dateValue&quot;:1243288800000},{&quot;dateValue&quot;:1274824800000}],&quot;schema&quot;:&quot;loginDate&quot;},{&quot;uniqueValue&quot;:{&quot;stringValue&quot;:&quot;Gioacchino Rossini&quot;},&quot;schema&quot;:&quot;fullname&quot;},{&quot;uniqueValue&quot;:{&quot;stringValue&quot;:&quot;rossini@apache.org&quot;},&quot;schema&quot;:&quot;userId&quot;}]\"/>\n+               plainAttrs='[{\"values\":[{\"stringValue\":\"G\"}],\"schema\":\"ctype\"},{\"values\":[{\"stringValue\":\"Gioacchino\"}],\"schema\":\"firstname\"},{\"values\":[{\"stringValue\":\"Rossini\"}],\"schema\":\"surname\"},{\"values\":[{\"dateValue\":\"2009-05-26T00:00:00+02:00\"},{\"dateValue\":\"2010-05-26T00:00:00+02:00\"}],\"schema\":\"loginDate\"},{\"uniqueValue\":{\"stringValue\":\"Gioacchino Rossini\"},\"schema\":\"fullname\"},{\"uniqueValue\":{\"stringValue\":\"rossini@apache.org\"},\"schema\":\"userId\"}]'/>\n   <SyncopeUser_SyncopeRole user_id=\"1417acbe-cbf6-4277-9372-e75e04f97000\" role_id=\"Other\"/>\n   <SyncopeUser mustChangePassword=\"0\" id=\"74cd8ece-715a-44a4-a736-e17b46c4e7e6\" status=\"active\"\n                password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                realm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n                username=\"verdi\" creator=\"admin\" lastModifier=\"admin\"\n                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\" suspended=\"0\"\n-               plainAttrs=\"[{&quot;values&quot;:[{&quot;stringValue&quot;:&quot;Giuseppe&quot;}],&quot;schema&quot;:&quot;firstname&quot;},{&quot;values&quot;:[{&quot;stringValue&quot;:&quot;Verdi&quot;}],&quot;schema&quot;:&quot;surname&quot;},{&quot;values&quot;:[{&quot;stringValue&quot;:&quot;verdi@syncope.org&quot;}],&quot;schema&quot;:&quot;email&quot;},{&quot;uniqueValue&quot;:{&quot;stringValue&quot;:&quot;Giuseppe Verdi&quot;},&quot;schema&quot;:&quot;fullname&quot;},{&quot;uniqueValue&quot;:{&quot;stringValue&quot;:&quot;verdi@apache.org&quot;},&quot;schema&quot;:&quot;userId&quot;}]\"/>\n+               plainAttrs='[{\"values\":[{\"stringValue\":\"Giuseppe\"}],\"schema\":\"firstname\"},{\"values\":[{\"stringValue\":\"Verdi\"}],\"schema\":\"surname\"},{\"values\":[{\"stringValue\":\"verdi@syncope.org\"}],\"schema\":\"email\"},{\"uniqueValue\":{\"stringValue\":\"Giuseppe Verdi\"},\"schema\":\"fullname\"},{\"uniqueValue\":{\"stringValue\":\"verdi@apache.org\"},\"schema\":\"userId\"}]'/>\n   <SyncopeUser mustChangePassword=\"0\" id=\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\" status=\"active\"\n                password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                realm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n                username=\"vivaldi\" creator=\"admin\" lastModifier=\"admin\"\n                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\" suspended=\"0\"\n-               plainAttrs=\"[{&quot;values&quot;:[{&quot;stringValue&quot;:&quot;Antonio&quot;}],&quot;schema&quot;:&quot;firstname&quot;},{&quot;values&quot;:[{&quot;stringValue&quot;:&quot;Vivaldi&quot;}],&quot;schema&quot;:&quot;surname&quot;},{&quot;values&quot;:[{&quot;stringValue&quot;:&quot;vivaldi@syncope.org&quot;}],&quot;schema&quot;:&quot;email&quot;},{&quot;values&quot;:[{&quot;stringValue&quot;:&quot;F&quot;}],&quot;schema&quot;:&quot;ctype&quot;},{&quot;uniqueValue&quot;:{&quot;stringValue&quot;:&quot;Antonio Vivaldi&quot;},&quot;schema&quot;:&quot;fullname&quot;},{&quot;uniqueValue&quot;:{&quot;stringValue&quot;:&quot;vivaldi@apache.org&quot;},&quot;schema&quot;:&quot;userId&quot;}]\"/>\n+               plainAttrs='[{\"values\":[{\"stringValue\":\"Antonio\"}],\"schema\":\"firstname\"},{\"values\":[{\"stringValue\":\"Vivaldi\"}],\"schema\":\"surname\"},{\"values\":[{\"stringValue\":\"vivaldi@syncope.org\"}],\"schema\":\"email\"},{\"values\":[{\"stringValue\":\"F\"}],\"schema\":\"ctype\"},{\"uniqueValue\":{\"stringValue\":\"Antonio Vivaldi\"},\"schema\":\"fullname\"},{\"uniqueValue\":{\"stringValue\":\"vivaldi@apache.org\"},\"schema\":\"userId\"}]'/>\n   <SyncopeUser mustChangePassword=\"0\" id=\"c9b2dec2-00a7-4855-97c0-d854842b4b24\" status=\"active\"\n                password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                realm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n                username=\"bellini\" creator=\"admin\" lastModifier=\"admin\"\n                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\" suspended=\"0\"\n-               plainAttrs=\"[{&quot;values&quot;:[{&quot;stringValue&quot;:&quot;Vincenzo&quot;}],&quot;schema&quot;:&quot;firstname&quot;},{&quot;values&quot;:[{&quot;stringValue&quot;:&quot;Bellini&quot;}],&quot;schema&quot;:&quot;surname&quot;},{&quot;values&quot;:[{&quot;dateValue&quot;:1245794400000}],&quot;schema&quot;:&quot;loginDate&quot;},{&quot;values&quot;:[{&quot;booleanValue&quot;:true}],&quot;schema&quot;:&quot;cool&quot;},{&quot;values&quot;:[{&quot;stringValue&quot;:&quot;M&quot;}],&quot;schema&quot;:&quot;gender&quot;},{&quot;uniqueValue&quot;:{&quot;stringValue&quot;:&quot;Vincenzo Bellini&quot;},&quot;schema&quot;:&quot;fullname&quot;},{&quot;uniqueValue&quot;:{&quot;stringValue&quot;:&quot;bellini@apache.org&quot;},&quot;schema&quot;:&quot;userId&quot;}]\"/>\n+               plainAttrs='[{\"values\":[{\"stringValue\":\"Vincenzo\"}],\"schema\":\"firstname\"},{\"values\":[{\"stringValue\":\"Bellini\"}],\"schema\":\"surname\"},{\"values\":[{\"dateValue\":\"2009-06-24T00:00:00+02:00\"}],\"schema\":\"loginDate\"},{\"values\":[{\"booleanValue\":true}],\"schema\":\"cool\"},{\"values\":[{\"stringValue\":\"M\"}],\"schema\":\"gender\"},{\"uniqueValue\":{\"stringValue\":\"Vincenzo Bellini\"},\"schema\":\"fullname\"},{\"uniqueValue\":{\"stringValue\":\"bellini@apache.org\"},\"schema\":\"userId\"}]'/>\n   <SyncopeUser_SyncopeRole user_id=\"c9b2dec2-00a7-4855-97c0-d854842b4b24\" role_id=\"User reviewer\"/>\n   <SyncopeUser_SyncopeRole user_id=\"c9b2dec2-00a7-4855-97c0-d854842b4b24\" role_id=\"User manager\"/>\n   <SyncopeUser mustChangePassword=\"0\" id=\"823074dc-d280-436d-a7dd-07399fae48ec\" status=\"active\"\n                password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                realm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n                username=\"puccini\" creator=\"admin\" lastModifier=\"admin\" \n                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\" suspended=\"0\"\n-               plainAttrs=\"[{&quot;values&quot;:[{&quot;stringValue&quot;:&quot;Giacomo&quot;}],&quot;schema&quot;:&quot;firstname&quot;},{&quot;values&quot;:[{&quot;stringValue&quot;:&quot;Puccini&quot;}],&quot;schema&quot;:&quot;surname&quot;},{&quot;uniqueValue&quot;:{&quot;stringValue&quot;:&quot;Giacomo Puccini&quot;},&quot;schema&quot;:&quot;fullname&quot;},{&quot;uniqueValue&quot;:{&quot;stringValue&quot;:&quot;puccini@apache.org&quot;},&quot;schema&quot;:&quot;userId&quot;}]\"/>\n+               plainAttrs='[{\"values\":[{\"stringValue\":\"Giacomo\"}],\"schema\":\"firstname\"},{\"values\":[{\"stringValue\":\"Puccini\"}],\"schema\":\"surname\"},{\"uniqueValue\":{\"stringValue\":\"Giacomo Puccini\"},\"schema\":\"fullname\"},{\"uniqueValue\":{\"stringValue\":\"puccini@apache.org\"},\"schema\":\"userId\"}]'/>\n   <SyncopeUser_SyncopeRole user_id=\"823074dc-d280-436d-a7dd-07399fae48ec\" role_id=\"Search for realm evenTwo\"/>\n   <SyncopeUser_SyncopeRole user_id=\"823074dc-d280-436d-a7dd-07399fae48ec\" role_id=\"Connector and Resource for realm evenTwo\"/>\n   \n@@ -1031,7 +1031,7 @@ under the License.\n   <Task DTYPE=\"PropagationTask\" id=\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-2\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n-  <TaskExec id=\"e58ca1c7-178a-4012-8a71-8aa14eaf0655\" task_id=\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\" startDate=\"2015-12-17 09:40:00.506\" endDate=\"2015-12-17 09:42:00.506\" status=\"SUCCESS\"/>\n+  <TaskExec id=\"e58ca1c7-178a-4012-8a71-8aa14eaf0655\" task_id=\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\" startDate=\"2015-12-17 09:40:00\" endDate=\"2015-12-17 09:42:00\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"b8870cfb-3c1e-4fc4-abcb-2559826232e6\" operation=\"CREATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-2\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n@@ -1042,7 +1042,7 @@ under the License.\n   <Task DTYPE=\"PropagationTask\" id=\"025c956d-ea88-4bd7-9e44-2f35e0aa7055\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-1\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n-  <TaskExec id=\"c3290f8b-caf9-4a85-84fb-fb619b65cd49\" task_id=\"025c956d-ea88-4bd7-9e44-2f35e0aa7055\" startDate=\"2015-12-17 09:40:00.506\" endDate=\"2015-12-17 09:42:00.506\" status=\"SUCCESS\"/>\n+  <TaskExec id=\"c3290f8b-caf9-4a85-84fb-fb619b65cd49\" task_id=\"025c956d-ea88-4bd7-9e44-2f35e0aa7055\" startDate=\"2015-12-17 09:40:00\" endDate=\"2015-12-17 09:42:00\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PullTask\" remediation=\"0\" id=\"c41b9b71-9bfa-4f90-89f2-84787def4c5c\" name=\"CSV (update matching; assign unmatching)\" resource_id=\"resource-csv\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n         pullMode=\"INCREMENTAL\" unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\" active=\"1\"\n@@ -1064,7 +1064,7 @@ under the License.\n   <Task DTYPE=\"PropagationTask\" id=\"d6c2d6d3-6329-44c1-9187-f1469ead1cfa\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-nopropagation\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n-  <TaskExec id=\"d789462f-e395-424f-bd8e-0db44a93222f\" task_id=\"d6c2d6d3-6329-44c1-9187-f1469ead1cfa\" startDate=\"2015-12-17 09:40:00.506\" endDate=\"2015-12-17 09:42:00.506\" status=\"SUCCESS\"/>\n+  <TaskExec id=\"d789462f-e395-424f-bd8e-0db44a93222f\" task_id=\"d6c2d6d3-6329-44c1-9187-f1469ead1cfa\" startDate=\"2015-12-17 09:40:00\" endDate=\"2015-12-17 09:42:00\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PullTask\" remediation=\"0\" id=\"83f7e85d-9774-43fe-adba-ccd856312994\" name=\"TestDB Task\" resource_id=\"resource-testdb\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" pullMode=\"FULL_RECONCILIATION\"\n         unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\" jobDelegate_id=\"PullJobDelegate\"/>"},{"sha":"aa85f7617f6b5c29e16b059f063db73cebf61ff5","filename":"core/persistence-jpa/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fpom.xml?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -179,6 +179,7 @@ under the License.\n         <artifactId>maven-surefire-plugin</artifactId>\n         <configuration>\n           <systemProperties>\n+            <h2.returnOffsetDateTime>true</h2.returnOffsetDateTime>\n             <CORE_PROPERTIES>classpath:core-test.properties</CORE_PROPERTIES>\n           </systemProperties>\n         </configuration>"},{"sha":"0df8bb2bf34eed7bf8204444c72ef56ee5fce7df","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/attrvalue/validation/BinaryValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBinaryValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBinaryValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBinaryValidator.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.attrvalue.validation;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.IOException;\n import javax.ws.rs.core.MediaType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n@@ -29,7 +29,7 @@ public class BinaryValidator extends AbstractValidator {\n \n     private static final long serialVersionUID = 1344152444666540361L;\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     private static final Tika TIKA = new Tika();\n "},{"sha":"f07957abef84f51f232377f264d3e4a0d94ee30a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/ContentLoaderHandler.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,11 +19,10 @@\n package org.apache.syncope.core.persistence.jpa.content;\n \n import java.sql.Types;\n-import java.text.ParseException;\n+import java.time.format.DateTimeParseException;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Objects;\n-\n import javax.sql.DataSource;\n import javax.xml.bind.DatatypeConverter;\n import org.apache.commons.lang3.StringUtils;\n@@ -139,9 +138,11 @@ private Object[] getParameters(final String tableName, final Attributes attrs) {\n                 case Types.DATE:\n                 case Types.TIME:\n                 case Types.TIMESTAMP:\n+                case Types.TIMESTAMP_WITH_TIMEZONE:\n+                case -101:\n                     try {\n                     parameters[i] = FormatUtils.parseDate(value);\n-                } catch (ParseException e) {\n+                } catch (DateTimeParseException e) {\n                     LOG.error(\"Unparsable Date '{}'\", value);\n                     parameters[i] = value;\n                 }"},{"sha":"0ee598824e1b76b68a09280380ea910ffefdf090","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/KeymasterConfParamLoader.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FKeymasterConfParamLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FKeymasterConfParamLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FKeymasterConfParamLoader.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.content;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.Iterator;\n@@ -38,7 +38,7 @@ public class KeymasterConfParamLoader implements ConfParamLoader {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(KeymasterConfParamLoader.class);\n \n-    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+    protected static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     protected final ConfParamOps confParamOps;\n "},{"sha":"7958e17e7dc605fe5dfb0f04660dbb7b9044b327","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -32,9 +32,11 @@\n import java.sql.SQLException;\n import java.sql.Timestamp;\n import java.sql.Types;\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -228,7 +230,8 @@ protected static String getValues(final ResultSet rs, final String columnName, f\n                 case Types.TIMESTAMP:\n                     Timestamp timestamp = rs.getTimestamp(columnName);\n                     if (timestamp != null) {\n-                        res = FormatUtils.format(new Date(timestamp.getTime()));\n+                        res = FormatUtils.format(OffsetDateTime.ofInstant(\n+                                Instant.ofEpochMilli(timestamp.getTime()), ZoneId.systemDefault()));\n                     }\n                     break;\n "},{"sha":"e706221ec36e438cc58766ab88ba63e4bc47891e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":23,"deletions":21,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,10 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.time.LocalDateTime;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -30,13 +33,12 @@\n import java.util.Set;\n import java.util.regex.Pattern;\n import javax.persistence.Query;\n-import javax.persistence.TemporalType;\n import javax.persistence.TypedQuery;\n-\n import org.apache.commons.jexl3.parser.Parser;\n import org.apache.commons.jexl3.parser.ParserConstants;\n import org.apache.commons.jexl3.parser.Token;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n@@ -136,23 +138,23 @@ protected List<String> findAllKeys(final String table, final int page, final int\n         return result;\n     }\n \n-    protected Date findLastChange(final String key, final String table) {\n-        Query query = entityManager().createNativeQuery(\n-                \"SELECT creationDate, lastChangeDate FROM \" + table + \" WHERE id=?\");\n-        query.setParameter(1, key);\n+    protected OffsetDateTime findLastChange(final String key, final String table) {\n+        OffsetDateTime creationDate = null;\n+        OffsetDateTime lastChangeDate = null;\n \n-        @SuppressWarnings(\"unchecked\")\n-        List<Object[]> result = query.getResultList();\n-\n-        Date creationDate = null;\n-        Date lastChangeDate = null;\n-        if (!result.isEmpty()) {\n-            creationDate = result.get(0)[0] instanceof LocalDateTime\n-                    ? convert((LocalDateTime) result.get(0)[0])\n-                    : (Date) result.get(0)[0];\n-            lastChangeDate = result.get(0)[1] instanceof LocalDateTime\n-                    ? convert((LocalDateTime) result.get(0)[1])\n-                    : (Date) result.get(0)[1];\n+        try (Connection conn = (Connection) OpenJPAPersistence.cast(entityManager()).getConnection()) {\n+            try (PreparedStatement stmt =\n+                    conn.prepareStatement(\"SELECT creationDate, lastChangeDate FROM \" + table + \" WHERE id=?\")) {\n+                stmt.setString(1, key);\n+\n+                ResultSet rs = stmt.executeQuery();\n+                if (rs.next()) {\n+                    creationDate = rs.getObject(1, OffsetDateTime.class);\n+                    lastChangeDate = rs.getObject(2, OffsetDateTime.class);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            LOG.error(\"While reading {} from {}\", key, table, e);\n         }\n \n         return Optional.ofNullable(lastChangeDate).orElse(creationDate);\n@@ -231,7 +233,7 @@ public List<A> findByPlainAttrValue(\n         if (attrValue.getDateValue() == null) {\n             query.setParameter(\"dateValue\", null);\n         } else {\n-            query.setParameter(\"dateValue\", attrValue.getDateValue(), TemporalType.TIMESTAMP);\n+            query.setParameter(\"dateValue\", attrValue.getDateValue().toInstant());\n         }\n         query.setParameter(\"longValue\", attrValue.getLongValue());\n         query.setParameter(\"doubleValue\", attrValue.getDoubleValue());"},{"sha":"4ad4d9c0dd9f4faa24665557bff502bb0b172f71","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractDAO.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,9 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.time.LocalDateTime;\n-import java.time.ZoneId;\n-import java.util.Date;\n import javax.persistence.EntityManager;\n import org.apache.syncope.core.persistence.api.dao.DAO;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n@@ -34,10 +31,6 @@\n \n     protected static final Logger LOG = LoggerFactory.getLogger(DAO.class);\n \n-    protected Date convert(final LocalDateTime localDateTime) {\n-        return Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());\n-    }\n-\n     protected EntityManager entityManager() {\n         EntityManager entityManager = EntityManagerFactoryUtils.getTransactionalEntityManager(\n                 EntityManagerFactoryUtils.findEntityManagerFactory("},{"sha":"be62292441384e0e2f55abba031974168ea62f0c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAccessTokenDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAccessTokenDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAccessTokenDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAccessTokenDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n@@ -134,7 +134,7 @@ public int deleteExpired() {\n         Query query = entityManager().createQuery(\n                 \"DELETE FROM \" + JPAAccessToken.class.getSimpleName() + \" e \"\n                 + \"WHERE e.expirationTime < :now\");\n-        query.setParameter(\"now\", new Date());\n+        query.setParameter(\"now\", OffsetDateTime.now());\n         return query.executeUpdate();\n     }\n }"},{"sha":"a0dc2fa0842c5798499c92371031642f8d427d52","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyMatchDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -21,8 +21,8 @@\n import java.beans.PropertyDescriptor;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.List;\n import java.util.Optional;\n import java.util.regex.Pattern;\n@@ -483,8 +483,8 @@ protected boolean matches(final Any<?> any, final AnyCond cond, final boolean no\n                     anyAttrValues.get(0).setDoubleValue((Double) anyAttrValue);\n                 } else if (anyAttrValue instanceof Boolean) {\n                     anyAttrValues.get(0).setBooleanValue((Boolean) anyAttrValue);\n-                } else if (anyAttrValue instanceof Date) {\n-                    anyAttrValues.get(0).setDateValue((Date) anyAttrValue);\n+                } else if (anyAttrValue instanceof OffsetDateTime) {\n+                    anyAttrValues.get(0).setDateValue((OffsetDateTime) anyAttrValue);\n                 } else if (anyAttrValue instanceof byte[]) {\n                     anyAttrValues.get(0).setBinaryValue((byte[]) anyAttrValue);\n                 }"},{"sha":"04c2a49db077ca8edce85c24f54a6beb4adfeca8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.Date;\n import java.util.HashSet;\n import java.util.LinkedHashMap;\n import java.util.List;\n@@ -100,7 +100,7 @@ public String findKey(final String name) {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public Date findLastChange(final String key) {\n+    public OffsetDateTime findLastChange(final String key) {\n         return findLastChange(key, JPAAnyObject.TABLE);\n     }\n "},{"sha":"4e2ed07453c58a7e775cb104f2035dfe012c170f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,14 +19,12 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.persistence.Query;\n-import javax.persistence.TemporalType;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -243,9 +241,7 @@ protected int setParameter(final List<Object> parameters, final Object parameter\n \n     protected void fillWithParameters(final Query query, final List<Object> parameters) {\n         for (int i = 0; i < parameters.size(); i++) {\n-            if (parameters.get(i) instanceof Date) {\n-                query.setParameter(i + 1, (Date) parameters.get(i), TemporalType.TIMESTAMP);\n-            } else if (parameters.get(i) instanceof Boolean) {\n+            if (parameters.get(i) instanceof Boolean) {\n                 query.setParameter(i + 1, ((Boolean) parameters.get(i)) ? 1 : 0);\n             } else {\n                 query.setParameter(i + 1, parameters.get(i));"},{"sha":"5d785ec97557f9f38c4dc80499c68a175f7f8a76","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPABatchDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPABatchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPABatchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPABatchDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import javax.persistence.Query;\n import org.apache.syncope.core.persistence.api.dao.BatchDAO;\n import org.apache.syncope.core.persistence.api.entity.Batch;\n@@ -53,7 +53,7 @@ public void delete(final String key) {\n     public int deleteExpired() {\n         Query query = entityManager().createQuery(\n                 \"DELETE FROM \" + JPABatch.class.getSimpleName() + \" e WHERE e.expiryTime < :now\");\n-        query.setParameter(\"now\", new Date());\n+        query.setParameter(\"now\", OffsetDateTime.now());\n         return query.executeUpdate();\n     }\n }"},{"sha":"7a241532cebe16e8e4b6d6b7393011bfa9527e23","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADelegationDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADelegationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADelegationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADelegationDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n@@ -44,7 +44,7 @@ public Optional<String> findValidFor(final String delegating, final String deleg\n                 + \"AND e.start <= :now AND (e.end IS NULL OR e.end >= :now)\", Delegation.class);\n         query.setParameter(\"delegating\", delegating);\n         query.setParameter(\"delegated\", delegated);\n-        query.setParameter(\"now\", new Date());\n+        query.setParameter(\"now\", OffsetDateTime.now());\n         query.setMaxResults(1);\n \n         List<Delegation> raw = query.getResultList();\n@@ -58,7 +58,7 @@ public List<String> findValidDelegating(final String delegated) {\n                 + \"WHERE e.delegated.id=:delegated \"\n                 + \"AND e.start <= :now AND (e.end IS NULL OR e.end >= :now)\", Delegation.class);\n         query.setParameter(\"delegated\", delegated);\n-        query.setParameter(\"now\", new Date());\n+        query.setParameter(\"now\", OffsetDateTime.now());\n \n         return query.getResultList().stream().\n                 map(delegation -> delegation.getDelegating().getUsername())."},{"sha":"b55ba20d81f6adc90193f3ce926cc8527ae4c773","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -127,7 +127,7 @@ public String findKey(final String name) {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public Date findLastChange(final String key) {\n+    public OffsetDateTime findLastChange(final String key) {\n         return findLastChange(key, JPAGroup.TABLE);\n     }\n "},{"sha":"4d49c67eef1c347d255d4276c51b925c46878495","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportExecDAO.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n@@ -121,7 +121,10 @@ public List<ReportExec> findAll(final Report report,\n     @Override\n     public List<ReportExec> findAll(\n             final Report report,\n-            final Date startedBefore, final Date startedAfter, final Date endedBefore, final Date endedAfter) {\n+            final OffsetDateTime startedBefore,\n+            final OffsetDateTime startedAfter,\n+            final OffsetDateTime endedBefore,\n+            final OffsetDateTime endedAfter) {\n \n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(JPAReportExec.class.getSimpleName()).\n                 append(\" e WHERE e.report=:report \");"},{"sha":"5701468447d55bb9cf41a6fddf9981dce685d457","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.lang.reflect.Field;\n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.List;\n import java.util.stream.Collectors;\n import javax.persistence.DiscriminatorValue;\n@@ -488,9 +488,10 @@ public void deleteAll(final ExternalResource resource, final TaskType type) {\n \n     @Override\n     public List<PropagationTaskTO> purgePropagations(\n-            final Date since, \n-            final List<ExecStatus> statuses, \n+            final OffsetDateTime since,\n+            final List<ExecStatus> statuses,\n             final List<ExternalResource> externalResources) {\n+\n         StringBuilder queryString = new StringBuilder(\"SELECT t.task_id \"\n                 + \"FROM TaskExec t INNER JOIN Task z ON t.task_id=z.id AND z.dtype='PropagationTask' \"\n                 + \"WHERE t.enddate=(SELECT MAX(e.enddate) FROM TaskExec e WHERE e.task_id=t.task_id) \");"},{"sha":"6728acce54efc071676b237d26aaee83b06260d7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskExecDAO.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n@@ -80,7 +80,10 @@ public <T extends Task> TaskExec findLatestEnded(final T task) {\n     @Override\n     public <T extends Task> List<TaskExec> findAll(\n             final T task,\n-            final Date startedBefore, final Date startedAfter, final Date endedBefore, final Date endedAfter) {\n+            final OffsetDateTime startedBefore,\n+            final OffsetDateTime startedAfter,\n+            final OffsetDateTime endedBefore,\n+            final OffsetDateTime endedAfter) {\n \n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(JPATaskExec.class.getSimpleName()).\n                 append(\" e WHERE e.task=:task \");"},{"sha":"7ecb27af1e43a08b6f3c8465a35ca7793dfa0568","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -130,7 +130,7 @@ public String findKey(final String username) {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public Date findLastChange(final String key) {\n+    public OffsetDateTime findLastChange(final String key) {\n         return findLastChange(key, JPAUser.TABLE);\n     }\n "},{"sha":"c0ddc0d91e30fbb16fa39b38530cb31e2ce26e82","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAny.java","status":"modified","additions":12,"deletions":17,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,14 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import java.util.Date;\n-import java.util.Optional;\n+import java.time.OffsetDateTime;\n import javax.persistence.Column;\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n import javax.persistence.MappedSuperclass;\n-import javax.persistence.Temporal;\n-import javax.persistence.TemporalType;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -45,8 +42,7 @@\n     /**\n      * Creation date.\n      */\n-    @Temporal(TemporalType.TIMESTAMP)\n-    private Date creationDate;\n+    private OffsetDateTime creationDate;\n \n     /**\n      * Context information about create.\n@@ -58,8 +54,7 @@\n      */\n     private String lastModifier;\n \n-    @Temporal(TemporalType.TIMESTAMP)\n-    private Date lastChangeDate;\n+    private OffsetDateTime lastChangeDate;\n \n     /**\n      * Context information about last update.\n@@ -83,13 +78,13 @@ public void setCreator(final String creator) {\n     }\n \n     @Override\n-    public Date getCreationDate() {\n-        return Optional.ofNullable(creationDate).map(date -> new Date(date.getTime())).orElse(null);\n+    public OffsetDateTime getCreationDate() {\n+        return creationDate;\n     }\n \n     @Override\n-    public void setCreationDate(final Date creationDate) {\n-        this.creationDate = Optional.ofNullable(creationDate).map(date -> new Date(date.getTime())).orElse(null);\n+    public void setCreationDate(final OffsetDateTime creationDate) {\n+        this.creationDate = creationDate;\n     }\n \n     @Override\n@@ -113,19 +108,19 @@ public void setLastModifier(final String lastModifier) {\n     }\n \n     @Override\n-    public Date getLastChangeDate() {\n+    public OffsetDateTime getLastChangeDate() {\n         if (lastChangeDate != null) {\n-            return new Date(lastChangeDate.getTime());\n+            return lastChangeDate;\n         } else if (creationDate != null) {\n-            return new Date(creationDate.getTime());\n+            return creationDate;\n         }\n \n         return null;\n     }\n \n     @Override\n-    public void setLastChangeDate(final Date lastChangeDate) {\n-        this.lastChangeDate = Optional.ofNullable(lastChangeDate).map(date -> new Date(date.getTime())).orElse(null);\n+    public void setLastChangeDate(final OffsetDateTime lastChangeDate) {\n+        this.lastChangeDate = lastChangeDate;\n     }\n \n     @Override"},{"sha":"f334a5a938a1a34dd88d58e63db950aef9223c46","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractExec.java","status":"modified","additions":12,"deletions":18,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,15 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.Optional;\n-\n import javax.persistence.Column;\n-\n import javax.persistence.Lob;\n import javax.persistence.MappedSuperclass;\n-import javax.persistence.Temporal;\n-import javax.persistence.TemporalType;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.core.persistence.api.entity.Exec;\n \n@@ -51,16 +47,14 @@ public abstract class AbstractExec extends AbstractGeneratedKeyEntity implements\n      * Start instant of this execution.\n      */\n     @NotNull\n-    @Temporal(TemporalType.TIMESTAMP)\n-    @Column(name = \"startDate\")\n-    protected Date start;\n+    @Column(name = \"startDate\", nullable = false)\n+    protected OffsetDateTime start;\n \n     /**\n      * End instant of this execution.\n      */\n-    @Temporal(TemporalType.TIMESTAMP)\n     @Column(name = \"endDate\")\n-    protected Date end;\n+    protected OffsetDateTime end;\n \n     @Override\n     public String getStatus() {\n@@ -93,22 +87,22 @@ public void setMessage(final String message) {\n     }\n \n     @Override\n-    public Date getStart() {\n-        return Optional.ofNullable(start).map(date -> new Date(date.getTime())).orElse(null);\n+    public OffsetDateTime getStart() {\n+        return start;\n     }\n \n     @Override\n-    public void setStart(final Date start) {\n-        this.start = Optional.ofNullable(start).map(date -> new Date(date.getTime())).orElse(null);\n+    public void setStart(final OffsetDateTime start) {\n+        this.start = start;\n     }\n \n     @Override\n-    public Date getEnd() {\n-        return Optional.ofNullable(end).map(date -> new Date(date.getTime())).orElse(null);\n+    public OffsetDateTime getEnd() {\n+        return end;\n     }\n \n     @Override\n-    public void setEnd(final Date end) {\n-        this.end = Optional.ofNullable(end).map(date -> new Date(date.getTime())).orElse(null);\n+    public void setEnd(final OffsetDateTime end) {\n+        this.end = end;\n     }\n }"},{"sha":"d535dbac1d1b8e84da8f48de716a742ce73bd864","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttrValue.java","status":"modified","additions":8,"deletions":11,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,14 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import java.time.OffsetDateTime;\n import java.util.Base64;\n-import java.util.Date;\n import java.util.Optional;\n import java.util.regex.Pattern;\n import javax.persistence.Lob;\n import javax.persistence.MappedSuperclass;\n-import javax.persistence.Temporal;\n-import javax.persistence.TemporalType;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n@@ -49,8 +47,7 @@ public abstract class AbstractPlainAttrValue extends AbstractGeneratedKeyEntity\n \n     private String stringValue;\n \n-    @Temporal(TemporalType.TIMESTAMP)\n-    private Date dateValue;\n+    private OffsetDateTime dateValue;\n \n     private Boolean booleanValue;\n \n@@ -72,13 +69,13 @@ public void setBooleanValue(final Boolean booleanValue) {\n     }\n \n     @Override\n-    public Date getDateValue() {\n-        return Optional.ofNullable(dateValue).map(value -> new Date(value.getTime())).orElse(null);\n+    public OffsetDateTime getDateValue() {\n+        return dateValue;\n     }\n \n     @Override\n-    public void setDateValue(final Date dateValue) {\n-        this.dateValue = Optional.ofNullable(dateValue).map(value -> new Date(value.getTime())).orElse(null);\n+    public void setDateValue(final OffsetDateTime dateValue) {\n+        this.dateValue = dateValue;\n     }\n \n     @Override\n@@ -170,7 +167,7 @@ public void parseValue(final PlainSchema schema, final String value) {\n                 try {\n                 this.setDateValue(schema.getConversionPattern() == null\n                         ? FormatUtils.parseDate(value)\n-                        : new Date(FormatUtils.parseDate(value, schema.getConversionPattern()).getTime()));\n+                        : FormatUtils.parseDate(value, schema.getConversionPattern()));\n             } catch (Exception pe) {\n                 exception = pe;\n             }\n@@ -284,7 +281,7 @@ private String getValueAsString(final AttrSchemaType type, final PlainSchema sch\n             case Date:\n                 result = schema == null || schema.getConversionPattern() == null\n                         ? FormatUtils.format(getDateValue())\n-                        : FormatUtils.format(getDateValue(), false, schema.getConversionPattern());\n+                        : FormatUtils.format(getDateValue(), schema.getConversionPattern());\n                 break;\n \n             case Binary:"},{"sha":"42f4887af1965eabe4bc80ce677e72a4d5af328d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAccessToken.java","status":"modified","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccessToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccessToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccessToken.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,16 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import java.util.Date;\n-import java.util.Optional;\n-\n+import java.time.OffsetDateTime;\n import javax.persistence.Cacheable;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Lob;\n import javax.persistence.Table;\n-import javax.persistence.Temporal;\n-import javax.persistence.TemporalType;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n \n@@ -43,8 +39,7 @@ public class JPAAccessToken extends AbstractProvidedKeyEntity implements AccessT\n     @Lob\n     private String body;\n \n-    @Temporal(TemporalType.TIMESTAMP)\n-    private Date expirationTime;\n+    private OffsetDateTime expirationTime;\n \n     @Column(unique = true)\n     private String owner;\n@@ -63,13 +58,13 @@ public void setBody(final String body) {\n     }\n \n     @Override\n-    public Date getExpirationTime() {\n-        return Optional.ofNullable(expirationTime).map(time -> new Date(time.getTime())).orElse(null);\n+    public OffsetDateTime getExpirationTime() {\n+        return expirationTime;\n     }\n \n     @Override\n-    public void setExpirationTime(final Date expirationTime) {\n-        this.expirationTime = Optional.ofNullable(expirationTime).map(time -> new Date(time.getTime())).orElse(null);\n+    public void setExpirationTime(final OffsetDateTime expirationTime) {\n+        this.expirationTime = expirationTime;\n     }\n \n     @Override\n@@ -91,5 +86,4 @@ public byte[] getAuthorities() {\n     public void setAuthorities(final byte[] authorities) {\n         this.authorities = ArrayUtils.clone(authorities);\n     }\n-\n }"},{"sha":"859b76bd7c85ab156f22df3409f87b58f4033744","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPABatch.java","status":"modified","additions":6,"deletions":15,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPABatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPABatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPABatch.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,14 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import java.util.Date;\n-import java.util.Optional;\n-\n+import java.time.OffsetDateTime;\n import javax.persistence.Entity;\n import javax.persistence.Lob;\n import javax.persistence.Table;\n-import javax.persistence.Temporal;\n-import javax.persistence.TemporalType;\n import org.apache.syncope.core.persistence.api.entity.Batch;\n \n @Entity\n@@ -36,24 +32,19 @@ public class JPABatch extends AbstractProvidedKeyEntity implements Batch {\n \n     public static final String TABLE = \"SyncopeBatch\";\n \n-    @Temporal(TemporalType.TIMESTAMP)\n-    private Date expiryTime;\n+    private OffsetDateTime expiryTime;\n \n     @Lob\n     private String results;\n \n     @Override\n-    public Date getExpiryTime() {\n-        return Optional.ofNullable(expiryTime).map(time -> new Date(time.getTime())).orElse(null);\n+    public OffsetDateTime getExpiryTime() {\n+        return expiryTime;\n     }\n \n     @Override\n-    public void setExpiryTime(final Date expiryTime) {\n-        if (expiryTime == null) {\n-            this.expiryTime = null;\n-        } else {\n-            this.expiryTime = new Date(expiryTime.getTime());\n-        }\n+    public void setExpiryTime(final OffsetDateTime expiryTime) {\n+        this.expiryTime = expiryTime;\n     }\n \n     @Override"},{"sha":"4a14b334aed8a627de6ee700d2ffdfbf570f3639","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPADelegation.java","status":"modified","additions":12,"deletions":24,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADelegation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADelegation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADelegation.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.HashSet;\n import java.util.Set;\n import javax.persistence.Cacheable;\n@@ -27,8 +27,6 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n-import javax.persistence.Temporal;\n-import javax.persistence.TemporalType;\n import javax.persistence.UniqueConstraint;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.core.persistence.api.entity.Delegation;\n@@ -55,13 +53,11 @@ public class JPADelegation extends AbstractGeneratedKeyEntity implements Delegat\n     private JPAUser delegated;\n \n     @NotNull\n-    @Temporal(TemporalType.TIMESTAMP)\n-    @Column(name = \"startDate\")\n-    private Date start;\n+    @Column(name = \"startDate\", nullable = false)\n+    private OffsetDateTime start;\n \n-    @Temporal(TemporalType.TIMESTAMP)\n     @Column(name = \"endDate\")\n-    private Date end;\n+    private OffsetDateTime end;\n \n     @OneToMany\n     private Set<JPARole> roles = new HashSet<>();\n@@ -89,31 +85,23 @@ public void setDelegated(final User delegated) {\n     }\n \n     @Override\n-    public Date getStart() {\n-        return start == null\n-                ? null\n-                : new Date(start.getTime());\n+    public OffsetDateTime getStart() {\n+        return start;\n     }\n \n     @Override\n-    public void setStart(final Date start) {\n-        this.start = start == null\n-                ? null\n-                : new Date(start.getTime());\n+    public void setStart(final OffsetDateTime start) {\n+        this.start = start;\n     }\n \n     @Override\n-    public Date getEnd() {\n-        return end == null\n-                ? null\n-                : new Date(end.getTime());\n+    public OffsetDateTime getEnd() {\n+        return end;\n     }\n \n     @Override\n-    public void setEnd(final Date end) {\n-        this.end = end == null\n-                ? null\n-                : new Date(end.getTime());\n+    public void setEnd(final OffsetDateTime end) {\n+        this.end = end;\n     }\n \n     @Override"},{"sha":"538c43c75131c776d8331562a3b01bd94120ceb0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARemediation.java","status":"modified","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARemediation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARemediation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARemediation.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,17 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import java.util.Date;\n-import java.util.Optional;\n-\n+import java.time.OffsetDateTime;\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n import javax.persistence.Lob;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n-import javax.persistence.Temporal;\n-import javax.persistence.TemporalType;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n@@ -65,8 +61,7 @@ public class JPARemediation extends AbstractGeneratedKeyEntity implements Remedi\n     private String error;\n \n     @NotNull\n-    @Temporal(TemporalType.TIMESTAMP)\n-    private Date instant;\n+    private OffsetDateTime instant;\n \n     @ManyToOne\n     private JPAPullTask pullTask;\n@@ -136,13 +131,13 @@ public void setError(final String error) {\n     }\n \n     @Override\n-    public Date getInstant() {\n-        return Optional.ofNullable(instant).map(date -> new Date(date.getTime())).orElse(null);\n+    public OffsetDateTime getInstant() {\n+        return instant;\n     }\n \n     @Override\n-    public void setInstant(final Date instant) {\n-        this.instant = Optional.ofNullable(instant).map(date -> new Date(date.getTime())).orElse(null);\n+    public void setInstant(final OffsetDateTime instant) {\n+        this.instant = instant;\n     }\n \n     @Override\n@@ -165,5 +160,4 @@ public String getRemoteName() {\n     public void setRemoteName(final String remoteName) {\n         this.remoteName = remoteName;\n     }\n-\n }"},{"sha":"e1e4d030ed9c9a0e0c0a06498f19b785a9a9ab9c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAAuthProfile.java","status":"modified","additions":22,"deletions":27,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -21,6 +21,7 @@\n import com.fasterxml.jackson.core.type.TypeReference;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Lob;\n@@ -48,7 +49,7 @@ public class JPAAuthProfile extends AbstractGeneratedKeyEntity implements AuthPr\n     private String owner;\n \n     @Lob\n-    private String impersonatedAccounts;\n+    private String impersonationAccounts;\n \n     @Lob\n     private String googleMfaAuthAccounts;\n@@ -74,67 +75,61 @@ public void setOwner(final String owner) {\n \n     @Override\n     public List<GoogleMfaAuthToken> getGoogleMfaAuthTokens() {\n-        return googleMfaAuthTokens == null\n-                ? new ArrayList<>(0)\n-                : POJOHelper.deserialize(googleMfaAuthTokens, new TypeReference<>() {\n-        });\n+        return Optional.ofNullable(googleMfaAuthTokens).\n+                map(v -> POJOHelper.deserialize(v, new TypeReference<List<GoogleMfaAuthToken>>() {\n+        })).orElseGet(() -> new ArrayList<>(0));\n     }\n \n     @Override\n     public void setGoogleMfaAuthTokens(final List<GoogleMfaAuthToken> tokens) {\n-        this.googleMfaAuthTokens = POJOHelper.serialize(tokens);\n+        googleMfaAuthTokens = POJOHelper.serialize(tokens);\n     }\n \n     @Override\n     public List<GoogleMfaAuthAccount> getGoogleMfaAuthAccounts() {\n-        return googleMfaAuthAccounts == null\n-                ? new ArrayList<>(0)\n-                : POJOHelper.deserialize(googleMfaAuthAccounts, new TypeReference<>() {\n-        });\n+        return Optional.ofNullable(googleMfaAuthAccounts).\n+                map(v -> POJOHelper.deserialize(v, new TypeReference<List<GoogleMfaAuthAccount>>() {\n+        })).orElseGet(() -> new ArrayList<>(0));\n     }\n \n     @Override\n     public void setGoogleMfaAuthAccounts(final List<GoogleMfaAuthAccount> accounts) {\n-        this.googleMfaAuthAccounts = POJOHelper.serialize(accounts);\n+        googleMfaAuthAccounts = POJOHelper.serialize(accounts);\n     }\n \n     @Override\n     public List<U2FDevice> getU2FRegisteredDevices() {\n-        return u2fRegisteredDevices == null\n-                ? new ArrayList<>(0)\n-                : POJOHelper.deserialize(u2fRegisteredDevices, new TypeReference<>() {\n-        });\n+        return Optional.ofNullable(u2fRegisteredDevices).\n+                map(v -> POJOHelper.deserialize(v, new TypeReference<List<U2FDevice>>() {\n+        })).orElseGet(() -> new ArrayList<>(0));\n     }\n \n     @Override\n     public void setU2FRegisteredDevices(final List<U2FDevice> records) {\n-        this.u2fRegisteredDevices = POJOHelper.serialize(records);\n+        u2fRegisteredDevices = POJOHelper.serialize(records);\n     }\n \n     @Override\n     public List<ImpersonationAccount> getImpersonationAccounts() {\n-        return impersonatedAccounts == null\n-                ? new ArrayList<>(0)\n-                : POJOHelper.deserialize(impersonatedAccounts, new TypeReference<>() {\n-        });\n+        return Optional.ofNullable(impersonationAccounts).\n+                map(v -> POJOHelper.deserialize(v, new TypeReference<List<ImpersonationAccount>>() {\n+        })).orElseGet(() -> new ArrayList<>(0));\n     }\n \n     @Override\n     public void setImpersonationAccounts(final List<ImpersonationAccount> accounts) {\n-        this.impersonatedAccounts = POJOHelper.serialize(accounts);\n+        impersonationAccounts = POJOHelper.serialize(accounts);\n     }\n \n     @Override\n     public List<WebAuthnDeviceCredential> getWebAuthnDeviceCredentials() {\n-        return webAuthnDeviceCredentials == null\n-                ? new ArrayList<>(0)\n-                : POJOHelper.deserialize(webAuthnDeviceCredentials,\n-            new TypeReference<>() {\n-            });\n+        return Optional.ofNullable(webAuthnDeviceCredentials).\n+                map(v -> POJOHelper.deserialize(v, new TypeReference<List<WebAuthnDeviceCredential>>() {\n+        })).orElseGet(() -> new ArrayList<>(0));\n     }\n \n     @Override\n     public void setWebAuthnDeviceCredentials(final List<WebAuthnDeviceCredential> credentials) {\n-        this.webAuthnDeviceCredentials = POJOHelper.serialize(credentials);\n+        webAuthnDeviceCredentials = POJOHelper.serialize(credentials);\n     }\n }"},{"sha":"89dbdb0fbcd56449420be542305e41b9d957ac7b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPASchedTask.java","status":"modified","additions":6,"deletions":16,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,12 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.task;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import javax.persistence.DiscriminatorValue;\n import javax.persistence.Entity;\n import javax.persistence.OneToOne;\n-import javax.persistence.Temporal;\n-import javax.persistence.TemporalType;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n@@ -38,8 +36,7 @@ public class JPASchedTask extends AbstractTask implements SchedTask {\n \n     private static final long serialVersionUID = 7596236684832602180L;\n \n-    @Temporal(TemporalType.TIMESTAMP)\n-    private Date startAt;\n+    private OffsetDateTime startAt;\n \n     private String cronExpression;\n \n@@ -55,20 +52,13 @@ public class JPASchedTask extends AbstractTask implements SchedTask {\n     private Boolean active = true;\n \n     @Override\n-    public Date getStartAt() {\n-        if (startAt != null) {\n-            return new Date(startAt.getTime());\n-        }\n-        return null;\n+    public OffsetDateTime getStartAt() {\n+        return startAt;\n     }\n \n     @Override\n-    public void setStartAt(final Date start) {\n-        if (start != null) {\n-            this.startAt = new Date(start.getTime());\n-        } else {\n-            this.startAt = null;\n-        }\n+    public void setStartAt(final OffsetDateTime startAt) {\n+        this.startAt = startAt;\n     }\n \n     @Override"},{"sha":"3ac88b20f70e2fdcb61307de4d989793bc272092","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":27,"deletions":37,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,9 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.user;\n \n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n-import java.util.Calendar;\n-import java.util.Date;\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n@@ -40,8 +39,6 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n-import javax.persistence.Temporal;\n-import javax.persistence.TemporalType;\n import javax.persistence.Transient;\n import javax.persistence.UniqueConstraint;\n import javax.validation.Valid;\n@@ -108,8 +105,7 @@\n     @Lob\n     private String token;\n \n-    @Temporal(TemporalType.TIMESTAMP)\n-    private Date tokenExpireTime;\n+    private OffsetDateTime tokenExpireTime;\n \n     @Column(nullable = true)\n     @Enumerated(EnumType.STRING)\n@@ -137,16 +133,12 @@\n     /**\n      * Last successful login date.\n      */\n-    @Column(nullable = true)\n-    @Temporal(TemporalType.TIMESTAMP)\n-    private Date lastLoginDate;\n+    private OffsetDateTime lastLoginDate;\n \n     /**\n      * Change password date.\n      */\n-    @Column(nullable = true)\n-    @Temporal(TemporalType.TIMESTAMP)\n-    private Date changePwdDate;\n+    private OffsetDateTime changePwdDate;\n \n     private Boolean suspended = false;\n \n@@ -189,7 +181,7 @@\n \n     @Transient\n     private String clearSecurityAnswer;\n-    \n+\n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"owner\")\n     @Valid\n     private List<JPALinkedAccount> linkedAccounts = new ArrayList<>();\n@@ -261,8 +253,8 @@ public void setPassword(final String password) {\n         try {\n             this.password = ENCRYPTOR.encode(password, cipherAlgorithm == null\n                     ? CipherAlgorithm.valueOf(ApplicationContextProvider.getBeanFactory().getBean(ConfParamOps.class).\n-                    get(AuthContextUtils.getDomain(), \"password.cipher.algorithm\", CipherAlgorithm.AES.name(),\n-                            String.class))\n+                            get(AuthContextUtils.getDomain(), \"password.cipher.algorithm\", CipherAlgorithm.AES.name(),\n+                                    String.class))\n                     : cipherAlgorithm);\n             setMustChangePassword(false);\n         } catch (Exception e) {\n@@ -284,7 +276,7 @@ public void setCipherAlgorithm(final CipherAlgorithm cipherAlgorithm) {\n             throw new IllegalArgumentException(\"Cannot override existing cipher algorithm\");\n         }\n     }\n-    \n+\n     @Override\n     public boolean canDecodeSecrets() {\n         return this.cipherAlgorithm != null && this.cipherAlgorithm.isInvertible();\n@@ -314,10 +306,7 @@ public void setStatus(final String status) {\n     @Override\n     public void generateToken(final int tokenLength, final int tokenExpireTime) {\n         this.token = SecureRandomUtils.generateRandomPassword(tokenLength);\n-\n-        Calendar calendar = Calendar.getInstance();\n-        calendar.add(Calendar.MINUTE, tokenExpireTime);\n-        this.tokenExpireTime = calendar.getTime();\n+        this.tokenExpireTime = OffsetDateTime.now().plusMinutes(tokenExpireTime);\n     }\n \n     @Override\n@@ -332,19 +321,22 @@ public String getToken() {\n     }\n \n     @Override\n-    public Date getTokenExpireTime() {\n-        return Optional.ofNullable(tokenExpireTime).map(expireTime -> new Date(expireTime.getTime())).orElse(null);\n+    public OffsetDateTime getTokenExpireTime() {\n+        return tokenExpireTime;\n     }\n \n     @Override\n     public boolean checkToken(final String token) {\n-        return Optional.ofNullable(this.token)\n-            .map(s -> s.equals(token) && !hasTokenExpired()).orElseGet(() -> token == null);\n+        return Optional.ofNullable(this.token).\n+                map(s -> s.equals(token) && !hasTokenExpired()).\n+                orElseGet(() -> token == null);\n     }\n \n     @Override\n     public boolean hasTokenExpired() {\n-        return Optional.ofNullable(tokenExpireTime).filter(expireTime -> expireTime.before(new Date())).isPresent();\n+        return Optional.ofNullable(tokenExpireTime).\n+                filter(expireTime -> expireTime.isBefore(OffsetDateTime.now())).\n+                isPresent();\n     }\n \n     @Override\n@@ -353,14 +345,13 @@ public List<String> getPasswordHistory() {\n     }\n \n     @Override\n-    public Date getChangePwdDate() {\n-        return Optional.ofNullable(changePwdDate).map(pwdDate -> new Date(pwdDate.getTime())).orElse(null);\n+    public OffsetDateTime getChangePwdDate() {\n+        return changePwdDate;\n     }\n \n     @Override\n-    public void setChangePwdDate(final Date changePwdDate) {\n-        this.changePwdDate = Optional.ofNullable(changePwdDate)\n-            .map(pwdDate -> new Date(pwdDate.getTime())).orElse(null);\n+    public void setChangePwdDate(final OffsetDateTime changePwdDate) {\n+        this.changePwdDate = changePwdDate;\n     }\n \n     @Override\n@@ -374,14 +365,13 @@ public void setFailedLogins(final Integer failedLogins) {\n     }\n \n     @Override\n-    public Date getLastLoginDate() {\n-        return Optional.ofNullable(lastLoginDate).map(loginDate -> new Date(loginDate.getTime())).orElse(null);\n+    public OffsetDateTime getLastLoginDate() {\n+        return lastLoginDate;\n     }\n \n     @Override\n-    public void setLastLoginDate(final Date lastLoginDate) {\n-        this.lastLoginDate = Optional.ofNullable(lastLoginDate)\n-            .map(loginDate -> new Date(loginDate.getTime())).orElse(null);\n+    public void setLastLoginDate(final OffsetDateTime lastLoginDate) {\n+        this.lastLoginDate = lastLoginDate;\n     }\n \n     @Override\n@@ -449,8 +439,8 @@ public void setSecurityAnswer(final String securityAnswer) {\n         try {\n             this.securityAnswer = ENCRYPTOR.encode(securityAnswer, cipherAlgorithm == null\n                     ? CipherAlgorithm.valueOf(ApplicationContextProvider.getBeanFactory().getBean(ConfParamOps.class).\n-                    get(AuthContextUtils.getDomain(), \"password.cipher.algorithm\", CipherAlgorithm.AES.name(),\n-                            String.class))\n+                            get(AuthContextUtils.getDomain(), \"password.cipher.algorithm\", CipherAlgorithm.AES.name(),\n+                                    String.class))\n                     : cipherAlgorithm);\n         } catch (Exception e) {\n             LOG.error(\"Could not encode security answer\", e);"},{"sha":"b22c3ae8b2b831abd97d089d37f239f0f132bb1e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/DelegationValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDelegationValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDelegationValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDelegationValidator.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -38,7 +38,7 @@ public boolean isValid(final Delegation delegation, final ConstraintValidatorCon\n             isValid = false;\n         }\n \n-        if (isValid && delegation.getEnd() != null && !delegation.getEnd().after(delegation.getStart())) {\n+        if (isValid && delegation.getEnd() != null && !delegation.getEnd().isAfter(delegation.getStart())) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.Standard, \"when end is provided it must to be after start\")).\n                     addPropertyNode(\"end\").addConstraintViolation();"},{"sha":"e1778dc3086ef3249ab3b969bdf879c5b39976fd","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml","status":"modified","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -98,41 +98,4 @@ under the License.\n       </many-to-one>\n     </attributes>\n   </entity>\n-  \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue\">\n-    <table>\n-      <unique-constraint>\n-        <column-name>booleanValue</column-name>\n-        <column-name>dateValue</column-name>\n-        <column-name>stringValue</column-name>\n-        <column-name>doubleValue</column-name>\n-        <column-name>longValue</column-name>\n-        <column-name>schema_id</column-name>\n-      </unique-constraint>\n-    </table>\n-  </entity>    \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue\">\n-    <table>\n-      <unique-constraint>\n-        <column-name>booleanValue</column-name>\n-        <column-name>dateValue</column-name>\n-        <column-name>stringValue</column-name>\n-        <column-name>doubleValue</column-name>\n-        <column-name>longValue</column-name>\n-        <column-name>schema_id</column-name>\n-      </unique-constraint>\n-    </table>\n-  </entity>\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrUniqueValue\">\n-    <table>\n-      <unique-constraint>\n-        <column-name>booleanValue</column-name>\n-        <column-name>dateValue</column-name>\n-        <column-name>stringValue</column-name>\n-        <column-name>doubleValue</column-name>\n-        <column-name>longValue</column-name>\n-        <column-name>schema_id</column-name>\n-      </unique-constraint>\n-    </table>\n-  </entity>\n </entity-mappings>"},{"sha":"6c96039aaf8daf1a4779d33fb6ebccf7b9f2a307","filename":"core/persistence-jpa/src/main/resources/oracle_indexes.xml","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Foracle_indexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Foracle_indexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Foracle_indexes.xml?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -0,0 +1,91 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n+<properties>\n+  <comment>Additional indexes (in respect to JPA's)</comment>\n+\n+  <entry key=\"APlainAttrUniqueValue_U\">CREATE UNIQUE INDEX APlainAttrUniqueValue_U on APlainAttrUniqueValue(booleanValue, dateValue, stringValue, doubleValue, longValue, schema_id)</entry>\n+  <entry key=\"UPlainAttrUniqueValue_U\">CREATE UNIQUE INDEX UPlainAttrUniqueValue_U on UPlainAttrUniqueValue(booleanValue, dateValue, stringValue, doubleValue, longValue, schema_id)</entry>\n+  <entry key=\"GPlainAttrUniqueValue_U\">CREATE UNIQUE INDEX GPlainAttrUniqueValue_U on GPlainAttrUniqueValue(booleanValue, dateValue, stringValue, doubleValue, longValue, schema_id)</entry>\n+\n+  <entry key=\"UDynGroupMembers_any_id\">CREATE INDEX UDynGroupMembers_any_id ON UDynGroupMembers(any_id)</entry>\n+  <entry key=\"UDynGroupMembers_group_id\">CREATE INDEX UDynGroupMembers_group_id ON UDynGroupMembers(group_id)</entry>\n+  <entry key=\"ADynGroupMembers_any_id\">CREATE INDEX ADynGroupMembers_any_id ON ADynGroupMembers(any_id)</entry>\n+  <entry key=\"ADynGroupMembers_group_id\">CREATE INDEX ADynGroupMembers_group_id ON ADynGroupMembers(group_id)</entry>\n+\n+  <entry key=\"DynRoleMembers_any_id\">CREATE INDEX DynRoleMembers_any_id ON DynRoleMembers(any_id)</entry>\n+  <entry key=\"DynRoleMembers_role_id\">CREATE INDEX DynRoleMembers_role_id ON DynRoleMembers(role_id)</entry>\n+\n+  <entry key=\"DynRealmMembers_any_id\">CREATE INDEX DynRealmMembers_any_id ON DynRealmMembers(any_id)</entry>\n+  <entry key=\"DynRealmMembers_realm_id\">CREATE INDEX DynRealmMembers_dynRealm_id ON DynRealmMembers(dynRealm_id)</entry>\n+\n+  <entry key=\"UPlainAttrValue_stringvalueIndex\">CREATE INDEX UAttrValue_stringvalueIndex ON UPlainAttrValue(stringvalue)</entry>\n+  <entry key=\"UPlainAttrValue_datevalueIndex\">CREATE INDEX UAttrValue_datevalueIndex ON UPlainAttrValue(datevalue)</entry>\n+  <entry key=\"UPlainAttrValue_longvalueIndex\">CREATE INDEX UAttrValue_longvalueIndex ON UPlainAttrValue(longvalue)</entry>\n+  <entry key=\"UPlainAttrValue_doublevalueIndex\">CREATE INDEX UAttrValue_doublevalueIndex ON UPlainAttrValue(doublevalue)</entry>\n+  <entry key=\"UPlainAttrValue_booleanvalueIndex\">CREATE INDEX UAttrValue_booleanvalueIndex ON UPlainAttrValue(booleanvalue)</entry>\n+\n+  <entry key=\"APlainAttrValue_stringvalueIndex\">CREATE INDEX AAttrValue_stringvalueIndex ON APlainAttrValue(stringvalue)</entry>\n+  <entry key=\"APlainAttrValue_datevalueIndex\">CREATE INDEX AAttrValue_datevalueIndex ON APlainAttrValue(datevalue)</entry>\n+  <entry key=\"APlainAttrValue_longvalueIndex\">CREATE INDEX AAttrValue_longvalueIndex ON APlainAttrValue(longvalue)</entry>\n+  <entry key=\"APlainAttrValue_doublevalueIndex\">CREATE INDEX AAttrValue_doublevalueIndex ON APlainAttrValue(doublevalue)</entry>\n+  <entry key=\"APlainAttrValue_booleanvalueIndex\">CREATE INDEX AAttrValue_booleanvalueIndex ON APlainAttrValue(booleanvalue)</entry>\n+\n+  <entry key=\"GPlainAttrValue_stringvalueIndex\">CREATE INDEX GAttrValue_stringvalueIndex ON GPlainAttrValue(stringvalue)</entry>\n+  <entry key=\"GPlainAttrValue_datevalueIndex\">CREATE INDEX GAttrValue_datevalueIndex ON GPlainAttrValue(datevalue)</entry>\n+  <entry key=\"GPlainAttrValue_longvalueIndex\">CREATE INDEX GAttrValue_longvalueIndex ON GPlainAttrValue(longvalue)</entry>\n+  <entry key=\"GPlainAttrValue_doublevalueIndex\">CREATE INDEX GAttrValue_doublevalueIndex ON GPlainAttrValue(doublevalue)</entry>\n+  <entry key=\"GPlainAttrValue_booleanvalueIndex\">CREATE INDEX GAttrValue_booleanvalueIndex ON GPlainAttrValue(booleanvalue)</entry>\n+\n+  <entry key=\"UMembership_GroupIndex\">CREATE INDEX UMembership_GroupIndex ON UMembership(group_id)</entry>\n+  <entry key=\"UMembership_UserIndex\">CREATE INDEX UMembership_UserIndex ON UMembership(user_id)</entry>\n+  <entry key=\"AMembership_GroupIndex\">CREATE INDEX AMembership_GroupIndex ON AMembership(group_id)</entry>\n+  <entry key=\"AMembership_AnyObjectIndex\">CREATE INDEX AMembership_AnyObjectIndex ON AMembership(anyObject_id)</entry>\n+\n+  <entry key=\"URelationship_RightIndex\">CREATE INDEX URelationship_RightIndex ON URelationship(anyObject_id)</entry>\n+  <entry key=\"URelationship_LeftIndex\">CREATE INDEX URelationship_LeftIndex ON URelationship(user_id)</entry>\n+  <entry key=\"ARelationship_RightIndex\">CREATE INDEX ARelationship_RightIndex ON ARelationship(right_anyObject_id)</entry>\n+  <entry key=\"ARelationship_AnyObjectIndex\">CREATE INDEX ARelationship_AnyObjectIndex ON ARelationship(left_anyObject_id)</entry>\n+\n+  <entry key=\"UPlainAttrValue_attrIndex\">CREATE INDEX UPlainAttrValue_attrIndex on UPlainAttrValue(attribute_id)</entry>\n+  <entry key=\"UPAttrUniqueValue_attrIndex\">CREATE INDEX UPAttrUniqueValue_attrIndex on UPlainAttrUniqueValue(attribute_id)</entry>\n+\n+  <entry key=\"GPlainAttrValue_attrIndex\">CREATE INDEX GPlainAttrValue_attrIndex on GPlainAttrValue(attribute_id)</entry>\n+  <entry key=\"GPAttrUniquesValue_attrIndex\">CREATE INDEX GPAttrUniqueValue_attrIndex on GPlainAttrUniqueValue(attribute_id)</entry>\n+\n+  <entry key=\"APlainAttrValue_attrIndex\">CREATE INDEX APlainAttrValue_attrIndex on APlainAttrValue(attribute_id)</entry>\n+  <entry key=\"APAttrUniqueValue_attrIndex\">CREATE INDEX APAttrUniqueValue_attrIndex on APlainAttrUniqueValue(attribute_id)</entry>\n+\n+  <entry key=\"UPlainAttr_owner_Index\">CREATE INDEX UPlainAttr_owner_Index on UPlainAttr(owner_id)</entry>\n+  <entry key=\"UPlainAttr_schema_Index\">CREATE INDEX UPlainAttr_schema_Index on UPlainAttr(schema_id)</entry>\n+  <entry key=\"UPlainAttr_membership_Index\">CREATE INDEX UPlainAttr_membership_Index on UPlainAttr(membership_id)</entry>\n+\n+  <entry key=\"GPlainAttr_owner_Index\">CREATE INDEX GPlainAttr_owner_Index on GPlainAttr(owner_id)</entry>\n+  <entry key=\"GPlainAttr_schema_Index\">CREATE INDEX GPlainAttr_schema_Index on GPlainAttr(schema_id)</entry>\n+\n+  <entry key=\"APlainAttr_owner_Index\">CREATE INDEX APlainAttr_owner_Index on APlainAttr(owner_id)</entry>\n+  <entry key=\"APlainAttr_schema_Index\">CREATE INDEX APlainAttr_schema_Index on APlainAttr(schema_id)</entry>\n+  <entry key=\"APlainAttr_membership_Index\">CREATE INDEX APlainAttr_membership_Index on APlainAttr(membership_id)</entry>\n+\n+  <entry key=\"Task_executedIndex\">CREATE INDEX Task_executedIndex ON Task(executed)</entry>\n+  <entry key=\"TaskExec_TaskIdIndex\">CREATE INDEX TaskExec_TaskIdIndex ON TaskExec(task_id)</entry>\n+  <entry key=\"ATPullTask_PullTaskIndex\">CREATE INDEX ATPullTask_PullTaskIndex ON AnyTemplatePullTask(pullTask_id)</entry>\n+  <entry key=\"NT_recipientsIndex\">CREATE INDEX NT_recipientsIndex ON NotificationTask_recipients(notificationTask_id)</entry>\n+</properties>"},{"sha":"11df808b1e14bee9d912cf3e1a460db97888edf7","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -32,7 +32,6 @@\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n-import org.apache.commons.lang3.time.DateUtils;\n import java.util.stream.Stream;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -64,6 +63,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.junit.jupiter.api.BeforeEach;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n@@ -107,7 +107,7 @@ public void adjustLoginDateForLocalSystem() throws ParseException {\n         User rossini = userDAO.findByUsername(\"rossini\");\n \n         UPlainAttr loginDate = rossini.getPlainAttr(\"loginDate\").get();\n-        loginDate.getValues().get(0).setDateValue(DateUtils.parseDate(LOGIN_DATE_VALUE, \"yyyy-MM-dd\"));\n+        loginDate.getValues().get(0).setDateValue(FormatUtils.parseDate(LOGIN_DATE_VALUE, \"yyyy-MM-dd\"));\n \n         userDAO.save(rossini);\n     }"},{"sha":"8dd83198e79251eea3417ed852ac78966ef022ab","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthProfileTest.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -22,7 +22,7 @@\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n@@ -150,6 +150,7 @@ public void googleMfaAccount() {\n \n         String secret = SecureRandomUtils.generateRandomUUID().toString();\n         List<GoogleMfaAuthAccount> googleMfaAuthAccounts = authProfile.getGoogleMfaAuthAccounts();\n+        assertFalse(googleMfaAuthAccounts.isEmpty());\n         GoogleMfaAuthAccount googleMfaAuthAccount = googleMfaAuthAccounts.get(0);\n         googleMfaAuthAccount.setSecretKey(secret);\n \n@@ -183,18 +184,15 @@ public void impersonationAccounts() {\n     private AuthProfile createAuthProfileWithToken(final String owner, final Integer otp) {\n         AuthProfile profile = entityFactory.newEntity(AuthProfile.class);\n         profile.setOwner(owner);\n-        GoogleMfaAuthToken token = new GoogleMfaAuthToken.Builder()\n-                .issueDate(new Date())\n-                .token(otp)\n-                .build();\n+        GoogleMfaAuthToken token = new GoogleMfaAuthToken.Builder().issueDate(OffsetDateTime.now()).token(otp).build();\n         profile.setGoogleMfaAuthTokens(List.of(token));\n         return authProfileDAO.save(profile);\n     }\n \n     private AuthProfile createAuthProfileWithU2FDevice(final String owner, final String record) {\n         AuthProfile profile = entityFactory.newEntity(AuthProfile.class);\n         profile.setOwner(owner);\n-        U2FDevice device = new U2FDevice.Builder().issueDate(new Date()).record(record).build();\n+        U2FDevice device = new U2FDevice.Builder().issueDate(OffsetDateTime.now()).record(record).build();\n         profile.setU2FRegisteredDevices(List.of(device));\n         return authProfileDAO.save(profile);\n     }\n@@ -213,7 +211,7 @@ private AuthProfile createAuthProfileWithAccount(final String owner) {\n         AuthProfile profile = entityFactory.newEntity(AuthProfile.class);\n         profile.setOwner(owner);\n         GoogleMfaAuthAccount account = new GoogleMfaAuthAccount.Builder()\n-                .registrationDate(new Date())\n+                .registrationDate(OffsetDateTime.now())\n                 .scratchCodes(List.of(1, 2, 3, 4, 5))\n                 .secretKey(SecureRandomUtils.generateRandomUUID().toString())\n                 .validationCode(123456)"},{"sha":"19e290fd4079052660a1899a9d4407db3e512cd5","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RemediationTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -24,7 +24,7 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import java.util.Set;\n import java.util.UUID;\n@@ -64,7 +64,7 @@ public void createMissingPayload() {\n         remediation.setAnyType(anyTypeDAO.find(\"PRINTER\"));\n         remediation.setOperation(ResourceOperation.CREATE);\n         remediation.setError(\"Error\");\n-        remediation.setInstant(new Date());\n+        remediation.setInstant(OffsetDateTime.now());\n         remediation.setRemoteName(\"remote\");\n         remediation.setPullTask(taskDAO.find(\"38abbf9e-a1a3-40a1-a15f-7d0ac02f47f1\"));\n \n@@ -85,7 +85,7 @@ public void createWrongPayload() {\n         remediation.setAnyType(anyTypeDAO.find(\"PRINTER\"));\n         remediation.setOperation(ResourceOperation.CREATE);\n         remediation.setError(\"Error\");\n-        remediation.setInstant(new Date());\n+        remediation.setInstant(OffsetDateTime.now());\n         remediation.setRemoteName(\"remote\");\n         remediation.setPullTask(taskDAO.find(\"38abbf9e-a1a3-40a1-a15f-7d0ac02f47f1\"));\n         remediation.setPayload(UUID.randomUUID().toString());\n@@ -107,7 +107,7 @@ public void create() {\n         remediation.setAnyType(anyTypeDAO.find(\"PRINTER\"));\n         remediation.setOperation(ResourceOperation.CREATE);\n         remediation.setError(\"Error\");\n-        remediation.setInstant(new Date());\n+        remediation.setInstant(OffsetDateTime.now());\n         remediation.setRemoteName(\"remote\");\n         remediation.setPullTask(taskDAO.find(\"38abbf9e-a1a3-40a1-a15f-7d0ac02f47f1\"));\n         remediation.setPayload(UUID.randomUUID().toString());"},{"sha":"5bdbc3ba77f35099001feeed723a45582658068b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskExecTest.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -21,15 +21,15 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n-import java.util.Calendar;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -48,11 +48,9 @@ public void findAll() {\n         PropagationTask task = taskDAO.find(\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\");\n         assertNotNull(task);\n \n-        Calendar calendar = Calendar.getInstance();\n-        calendar.clear();\n-        calendar.set(2015, 11, 18, 0, 0, 0);\n+        OffsetDateTime startedBefore = OffsetDateTime.of(2015, 12, 18, 0, 0, 0, 0, FormatUtils.DEFAULT_OFFSET);\n \n-        List<TaskExec> execs = taskExecDAO.findAll(task, calendar.getTime(), null, null, null);\n+        List<TaskExec> execs = taskExecDAO.findAll(task, startedBefore, null, null, null);\n         assertNotNull(execs);\n         assertEquals(1, execs.size());\n     }\n@@ -76,8 +74,8 @@ public void issueSYNCOPE214() {\n         faultyMessage = faultyMessage.replace('a', '\\0');\n \n         TaskExec exec = entityFactory.newEntity(TaskExec.class);\n-        exec.setStart(new Date());\n-        exec.setEnd(new Date());\n+        exec.setStart(OffsetDateTime.now());\n+        exec.setEnd(OffsetDateTime.now());\n         exec.setStatus(ExecStatus.SUCCESS.name());\n         exec.setMessage(faultyMessage);\n         exec.setExecutor(\"admin\");"},{"sha":"a7f568430b04adf94eafbbf486aa1663133b5b7d","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -26,7 +26,8 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n+import java.time.temporal.ChronoUnit;\n import java.util.List;\n import java.util.Optional;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -207,7 +208,7 @@ public void saveInvalidPassword() {\n         user.setUsername(\"username\");\n         user.setRealm(realmDAO.findByFullPath(\"/even/two\"));\n         user.setCreator(\"admin\");\n-        user.setCreationDate(new Date());\n+        user.setCreationDate(OffsetDateTime.now());\n         user.setCipherAlgorithm(CipherAlgorithm.SHA256);\n         user.setPassword(\"pass\");\n \n@@ -225,7 +226,7 @@ public void saveInvalidUsername() {\n         user.setUsername(\"username!\");\n         user.setRealm(realmDAO.findByFullPath(\"/even/two\"));\n         user.setCreator(\"admin\");\n-        user.setCreationDate(new Date());\n+        user.setCreationDate(OffsetDateTime.now());\n         user.setCipherAlgorithm(CipherAlgorithm.SHA256);\n         user.setPassword(\"password123\");\n \n@@ -243,15 +244,16 @@ public void save() {\n         user.setUsername(\"username\");\n         user.setRealm(realmDAO.findByFullPath(\"/even/two\"));\n         user.setCreator(\"admin\");\n-        user.setCreationDate(new Date());\n+        user.setCreationDate(OffsetDateTime.now());\n         user.setCipherAlgorithm(CipherAlgorithm.SHA256);\n         user.setPassword(\"password123\");\n \n         User actual = userDAO.save(user);\n         assertNotNull(actual);\n         assertEquals(1, actual.getPasswordHistory().size());\n         assertNotNull(userDAO.findLastChange(actual.getKey()));\n-        assertEquals(actual.getLastChangeDate(), userDAO.findLastChange(actual.getKey()));\n+        assertTrue(actual.getLastChangeDate().truncatedTo(ChronoUnit.SECONDS).\n+                isEqual(userDAO.findLastChange(actual.getKey()).truncatedTo(ChronoUnit.SECONDS)));\n     }\n \n     @Test\n@@ -270,7 +272,7 @@ public void issue237() {\n         user.setUsername(\"username\");\n         user.setRealm(realmDAO.findByFullPath(\"/even/two\"));\n         user.setCreator(\"admin\");\n-        user.setCreationDate(new Date());\n+        user.setCreationDate(OffsetDateTime.now());\n \n         user.setCipherAlgorithm(CipherAlgorithm.AES);\n         user.setPassword(\"password123\");\n@@ -332,7 +334,7 @@ public void issueSYNCOPE1666() {\n         user.setUsername(\"username\");\n         user.setRealm(realmDAO.findByFullPath(\"/even/two\"));\n         user.setCreator(\"admin\");\n-        user.setCreationDate(new Date());\n+        user.setCreationDate(OffsetDateTime.now());\n         user.setCipherAlgorithm(CipherAlgorithm.SSHA256);\n         user.setPassword(\"password123\");\n         user.setSecurityQuestion(securityQuestionDAO.find(\"887028ea-66fc-41e7-b397-620d7ea6dfbb\"));"},{"sha":"5277409a882f064aa1fd9d063db1f6fb0058fad0","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AccessTokenTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAccessTokenTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAccessTokenTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAccessTokenTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -22,7 +22,7 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.UUID;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n@@ -42,7 +42,7 @@ public void crud() {\n         AccessToken accessToken = entityFactory.newEntity(AccessToken.class);\n         accessToken.setKey(UUID.randomUUID().toString());\n         accessToken.setBody(\"pointless body\");\n-        accessToken.setExpirationTime(new Date());\n+        accessToken.setExpirationTime(OffsetDateTime.now());\n         accessToken.setOwner(\"bellini\");\n \n         accessToken = accessTokenDAO.save(accessToken);"},{"sha":"972ae5b2d4ea4b5d226271c69412d3372adb8d9c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ReportTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -24,7 +24,7 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import javax.persistence.EntityExistsException;\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n@@ -85,8 +85,8 @@ public void save() {\n \n         ReportExec reportExec = entityFactory.newEntity(ReportExec.class);\n         reportExec.setReport(report);\n-        reportExec.setStart(new Date());\n-        reportExec.setEnd(new Date());\n+        reportExec.setStart(OffsetDateTime.now());\n+        reportExec.setEnd(OffsetDateTime.now());\n         reportExec.setStatus(ReportExecStatus.SUCCESS);\n         reportExec.setExecutor(\"admin\");\n "},{"sha":"7825c19f8cbd1c7fee65b366b57e557437000c4a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/RoleTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -23,10 +23,10 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -220,7 +220,7 @@ public void deleteCascadeOnDelegations() {\n         Delegation delegation = entityFactory.newEntity(Delegation.class);\n         delegation.setDelegating(bellini);\n         delegation.setDelegated(rossini);\n-        delegation.setStart(new Date());\n+        delegation.setStart(OffsetDateTime.now());\n         delegation.add(reviewer);\n         delegation = delegationDAO.save(delegation);\n "},{"sha":"b908a839551bc8ce9b7e4037a8c8dcf44a87e3af","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -24,8 +24,8 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -150,7 +150,7 @@ public void addPropagationTaskExecution() {\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setTask(task);\n         execution.setStatus(ExecStatus.CREATED.name());\n-        execution.setStart(new Date());\n+        execution.setStart(OffsetDateTime.now());\n         execution.setExecutor(\"admin\");\n         task.add(execution);\n \n@@ -173,7 +173,7 @@ public void addPullTaskExecution() {\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setStatus(\"Text-free status\");\n         execution.setTask(task);\n-        execution.setStart(new Date());\n+        execution.setStart(OffsetDateTime.now());\n         execution.setMessage(\"A message\");\n         execution.setExecutor(\"admin\");\n         task.add(execution);\n@@ -197,7 +197,7 @@ public void addPushTaskExecution() {\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setStatus(\"Text-free status\");\n         execution.setTask(task);\n-        execution.setStart(new Date());\n+        execution.setStart(OffsetDateTime.now());\n         execution.setMessage(\"A message\");\n         execution.setExecutor(\"admin\");\n         task.add(execution);"},{"sha":"2e9762e3269fc0b1272444dc032b0808d15e18e4","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/UserTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -25,7 +25,7 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import java.util.Objects;\n import java.util.UUID;\n@@ -340,7 +340,7 @@ public void deleteCascadeOnDelegations() {\n         Delegation delegation = entityFactory.newEntity(Delegation.class);\n         delegation.setDelegating(bellini);\n         delegation.setDelegated(rossini);\n-        delegation.setStart(new Date());\n+        delegation.setStart(OffsetDateTime.now());\n         delegation.add(reviewer);\n         delegation = delegationDAO.save(delegation);\n "},{"sha":"d4684d33b6e244982eef851d30dfa04879cc690d","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -1118,7 +1118,7 @@ under the License.\n   <Task DTYPE=\"PropagationTask\" id=\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-2\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n-  <TaskExec id=\"e58ca1c7-178a-4012-8a71-8aa14eaf0655\" task_id=\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\" startDate=\"2015-12-17 09:40:00.506\" endDate=\"2015-12-17 09:42:00.506\" status=\"SUCCESS\"/>\n+  <TaskExec id=\"e58ca1c7-178a-4012-8a71-8aa14eaf0655\" task_id=\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\" startDate=\"2015-12-17 09:40:00\" endDate=\"2015-12-17 09:42:00\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"b8870cfb-3c1e-4fc4-abcb-2559826232e6\" operation=\"CREATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-2\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n@@ -1129,7 +1129,7 @@ under the License.\n   <Task DTYPE=\"PropagationTask\" id=\"025c956d-ea88-4bd7-9e44-2f35e0aa7055\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-1\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n-  <TaskExec id=\"c3290f8b-caf9-4a85-84fb-fb619b65cd49\" task_id=\"025c956d-ea88-4bd7-9e44-2f35e0aa7055\" startDate=\"2015-12-17 09:40:00.506\" endDate=\"2015-12-17 09:42:00.506\" status=\"SUCCESS\"/>\n+  <TaskExec id=\"c3290f8b-caf9-4a85-84fb-fb619b65cd49\" task_id=\"025c956d-ea88-4bd7-9e44-2f35e0aa7055\" startDate=\"2015-12-17 09:40:00\" endDate=\"2015-12-17 09:42:00\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PullTask\" remediation=\"0\" id=\"c41b9b71-9bfa-4f90-89f2-84787def4c5c\" name=\"CSV (update matching; assign unmatching)\" resource_id=\"resource-csv\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n         pullMode=\"INCREMENTAL\" unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\" active=\"1\"\n@@ -1151,7 +1151,7 @@ under the License.\n   <Task DTYPE=\"PropagationTask\" id=\"d6c2d6d3-6329-44c1-9187-f1469ead1cfa\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-nopropagation\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n-  <TaskExec id=\"d789462f-e395-424f-bd8e-0db44a93222f\" task_id=\"d6c2d6d3-6329-44c1-9187-f1469ead1cfa\" startDate=\"2015-12-17 09:40:00.506\" endDate=\"2015-12-17 09:42:00.506\" status=\"SUCCESS\"/>\n+  <TaskExec id=\"d789462f-e395-424f-bd8e-0db44a93222f\" task_id=\"d6c2d6d3-6329-44c1-9187-f1469ead1cfa\" startDate=\"2015-12-17 09:40:00\" endDate=\"2015-12-17 09:42:00\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PullTask\" remediation=\"0\" id=\"83f7e85d-9774-43fe-adba-ccd856312994\" name=\"TestDB Task\" resource_id=\"resource-testdb\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" pullMode=\"FULL_RECONCILIATION\"\n         unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\" jobDelegate_id=\"PullJobDelegate\"/>"},{"sha":"a4870857736bdaef281064b7e5c2c78f6ed70b5d","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AccessTokenDataBinder.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,20 +18,21 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.Map;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n \n public interface AccessTokenDataBinder {\n \n-    Pair<String, Date> generateJWT(String tokenId, String subject, long duration, Map<String, Object> claims);\n+    Pair<String, OffsetDateTime> generateJWT(\n+            String tokenId, String subject, long duration, Map<String, Object> claims);\n \n-    Pair<String, Date> create(String subject, Map<String, Object> claims, byte[] authorities, boolean replace);\n+    Pair<String, OffsetDateTime> create(\n+            String subject, Map<String, Object> claims, byte[] authorities, boolean replace);\n \n-    Pair<String, Date> update(AccessToken accessToken, byte[] authorities);\n+    Pair<String, OffsetDateTime> update(AccessToken accessToken, byte[] authorities);\n \n     AccessTokenTO getAccessTokenTO(AccessToken accessToken);\n-\n }"},{"sha":"1945dd8a22db360205ee024dbe7b45ea6aea804e","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/jexl/JexlUtils.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FJexlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FJexlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FJexlUtils.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -22,9 +22,9 @@\n import java.beans.Introspector;\n import java.beans.PropertyDescriptor;\n import java.lang.reflect.Field;\n+import java.time.temporal.TemporalAccessor;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -174,8 +174,8 @@ public static void addFieldsToContext(final Object object, final JexlContext jex\n                 if (fieldValue == null) {\n                     fieldValue = StringUtils.EMPTY;\n                 } else {\n-                    fieldValue = fieldType.equals(Date.class)\n-                            ? FormatUtils.format((Date) fieldValue, false)\n+                    fieldValue = TemporalAccessor.class.isAssignableFrom(fieldType)\n+                            ? FormatUtils.format((TemporalAccessor) fieldValue)\n                             : fieldValue;\n                 }\n "},{"sha":"26490fa60447f695d16ad513857ce6c30907d74b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/jexl/SandboxUberspect.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FSandboxUberspect.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FSandboxUberspect.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FSandboxUberspect.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.provisioning.api.jexl;\n \n import java.time.Instant;\n+import java.time.temporal.TemporalAccessor;\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n@@ -76,7 +77,7 @@ public JexlMethod getMethod(final Object obj, final String method, final Object.\n             return super.getMethod(obj, method, args);\n         } else if (obj instanceof String) {\n             return super.getMethod(obj, method, args);\n-        } else if (obj instanceof Date || obj instanceof Instant) {\n+        } else if (obj instanceof Date || obj instanceof Instant || obj instanceof TemporalAccessor) {\n             return super.getMethod(obj, method, args);\n         } else if (obj instanceof Map && MAP_METHODS.contains(method)) {\n             return super.getMethod(obj, method, args);"},{"sha":"e0182a447af05b75e6c033c3e7e25f7f4e823165","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/JobManager.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobManager.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.job;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.Map;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n@@ -35,16 +35,17 @@ public interface JobManager {\n     String REPORT_KEY = \"report\";\n \n     String DOMAIN_KEY = \"domain\";\n+\n     String EXECUTOR_KEY = \"executor\";\n \n     JobKey NOTIFICATION_JOB = new JobKey(\"notificationJob\", Scheduler.DEFAULT_GROUP);\n \n     boolean isRunning(JobKey jobKey) throws SchedulerException;\n \n-    Map<String, Object> register(SchedTask task, Date startAt, long interruptMaxRetries, String executor)\n+    Map<String, Object> register(SchedTask task, OffsetDateTime startAt, long interruptMaxRetries, String executor)\n             throws SchedulerException;\n \n-    void register(Report report, Date startAt, long interruptMaxRetries, String executor)\n+    void register(Report report, OffsetDateTime startAt, long interruptMaxRetries, String executor)\n             throws SchedulerException;\n \n     void unregister(Task task);"},{"sha":"532797cc8dff3b946e128f6519928ce74742ed6f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/POJOHelper.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelper.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,8 +20,10 @@\n \n import com.fasterxml.jackson.core.Version;\n import com.fasterxml.jackson.core.type.TypeReference;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n import com.fasterxml.jackson.module.afterburner.AfterburnerModule;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -36,7 +38,7 @@ public final class POJOHelper {\n \n     private static final Logger LOG = LoggerFactory.getLogger(POJOHelper.class);\n \n-    private static final ObjectMapper MAPPER;\n+    private static final JsonMapper MAPPER;\n \n     static {\n         SimpleModule pojoModule = new SimpleModule(\"POJOModule\", new Version(1, 0, 0, null, null, null));\n@@ -47,9 +49,12 @@ public final class POJOHelper {\n         pojoModule.addDeserializer(Attribute.class, new AttributeDeserializer());\n         pojoModule.addDeserializer(SyncToken.class, new SyncTokenDeserializer());\n \n-        MAPPER = new ObjectMapper();\n-        MAPPER.registerModule(pojoModule);\n-        MAPPER.registerModule(new AfterburnerModule());\n+        MAPPER = JsonMapper.builder().\n+                addModule(pojoModule).\n+                addModule(new JavaTimeModule()).\n+                addModule(new AfterburnerModule()).\n+                disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS).\n+                build();\n     }\n \n     public static String serialize(final Object object) {"},{"sha":"ffb14a998caa1d09ae4907df3ae86562cba50bbb","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/utils/FormatUtils.java","status":"modified","additions":65,"deletions":37,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FFormatUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FFormatUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FFormatUtils.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -21,94 +21,123 @@\n import java.text.DecimalFormat;\n import java.text.DecimalFormatSymbols;\n import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.ChronoUnit;\n+import java.time.temporal.TemporalAccessor;\n+import java.util.Arrays;\n import java.util.Locale;\n-import org.apache.commons.lang3.time.DateUtils;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n \n /**\n- * Utility class for parsing / formatting date and numbers.\n+ * Utility class for parsing / formatting dates and numbers.\n  */\n public final class FormatUtils {\n \n-    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = ThreadLocal.withInitial(SimpleDateFormat::new);\n+    private static final String NO_CONVERSION_PATTERN = \"#,##0.###\";\n \n     private static final ThreadLocal<DecimalFormat> DECIMAL_FORMAT = ThreadLocal.withInitial(() -> {\n-        DecimalFormat df = new DecimalFormat();\n+        DecimalFormat df = new DecimalFormat(NO_CONVERSION_PATTERN);\n         df.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ENGLISH));\n         return df;\n     });\n \n-    public static String format(final Date date) {\n-        return format(date, true);\n-    }\n+    public static final ZoneOffset DEFAULT_OFFSET = OffsetDateTime.now().getOffset();\n \n-    public static String format(final Date date, final boolean lenient) {\n-        return format(date, lenient, null);\n+    public static String format(final TemporalAccessor temporal) {\n+        return OffsetDateTime.from(temporal).\n+                truncatedTo(ChronoUnit.SECONDS).\n+                format(DateTimeFormatter.ISO_OFFSET_DATE_TIME);\n     }\n \n-    public static String format(final Date date, final boolean lenient, final String conversionPattern) {\n-        SimpleDateFormat sdf = DATE_FORMAT.get();\n-\n-        if (conversionPattern == null) {\n-            sdf.applyPattern(SyncopeConstants.DEFAULT_DATE_PATTERN);\n-        } else {\n-            sdf.applyPattern(conversionPattern);\n-        }\n-\n-        sdf.setLenient(lenient);\n-\n-        return sdf.format(date);\n+    public static String format(final TemporalAccessor temporal, final String conversionPattern) {\n+        return OffsetDateTime.from(temporal).format(DateTimeFormatter.ofPattern(conversionPattern));\n     }\n \n     public static String format(final long number) {\n-        return format(number, null);\n+        return format(number, NO_CONVERSION_PATTERN);\n     }\n \n     public static String format(final long number, final String conversionPattern) {\n         DecimalFormat df = DECIMAL_FORMAT.get();\n \n         String previous = df.toPattern();\n-        if (conversionPattern != null) {\n+        if (!previous.equals(conversionPattern)) {\n             df.applyPattern(conversionPattern);\n         }\n \n         String formatted = df.format(number);\n \n-        df.applyPattern(previous);\n+        if (!previous.equals(conversionPattern)) {\n+            df.applyPattern(previous);\n+        }\n \n         return formatted;\n     }\n \n     public static String format(final double number) {\n-        return format(number, null);\n+        return format(number, NO_CONVERSION_PATTERN);\n     }\n \n     public static String format(final double number, final String conversionPattern) {\n         DecimalFormat df = DECIMAL_FORMAT.get();\n \n         String previous = df.toPattern();\n-        if (conversionPattern != null) {\n+        if (!previous.equals(conversionPattern)) {\n             df.applyPattern(conversionPattern);\n         }\n \n         String formatted = df.format(number);\n \n-        df.applyPattern(previous);\n+        if (!previous.equals(conversionPattern)) {\n+            df.applyPattern(previous);\n+        }\n \n         return formatted;\n     }\n \n-    public static Date parseDate(final String source) throws ParseException {\n-        return DateUtils.parseDate(source, SyncopeConstants.DATE_PATTERNS);\n+    public static OffsetDateTime parseDate(final String source)\n+            throws DateTimeParseException {\n+\n+        for (String pattern : SyncopeConstants.DATE_PATTERNS) {\n+            try {\n+                return parseDate(source, pattern);\n+            } catch (DateTimeParseException e) {\n+                // ignore\n+            }\n+        }\n+\n+        throw new DateTimeParseException(\n+                \"Could not parse with any of \" + Arrays.asList(SyncopeConstants.DATE_PATTERNS), source, 0);\n     }\n \n-    public static Date parseDate(final String source, final String conversionPattern) throws ParseException {\n-        SimpleDateFormat sdf = DATE_FORMAT.get();\n-        sdf.applyPattern(conversionPattern);\n-        sdf.setLenient(false);\n-        return sdf.parse(source);\n+    public static OffsetDateTime parseDate(final String source, final String conversionPattern)\n+            throws DateTimeParseException {\n+\n+        DateTimeParseException dtpe;\n+\n+        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(conversionPattern);\n+        try {\n+            if (StringUtils.containsIgnoreCase(conversionPattern, \"Z\")) {\n+                return OffsetDateTime.parse(source, dtf);\n+            } else {\n+                return LocalDateTime.parse(source, dtf).atZone(DEFAULT_OFFSET).toOffsetDateTime();\n+            }\n+        } catch (DateTimeParseException e) {\n+            dtpe = e;\n+        }\n+        try {\n+            return LocalDate.parse(source, dtf).atStartOfDay(DEFAULT_OFFSET).toOffsetDateTime();\n+        } catch (DateTimeParseException e) {\n+            dtpe = e;\n+        }\n+\n+        throw dtpe;\n     }\n \n     public static Number parseNumber(final String source, final String conversionPattern) throws ParseException {\n@@ -118,7 +147,6 @@ public static Number parseNumber(final String source, final String conversionPat\n     }\n \n     public static void clear() {\n-        DATE_FORMAT.remove();\n         DECIMAL_FORMAT.remove();\n     }\n "},{"sha":"d869d3f5d72de8ce3ab7a1477bb92b49bb069f09","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/utils/FormatUtilsTest.java","status":"modified","additions":28,"deletions":25,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FFormatUtilsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FFormatUtilsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FFormatUtilsTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,78 +20,81 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n+import java.security.SecureRandom;\n import java.text.DecimalFormat;\n import java.text.DecimalFormatSymbols;\n import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n-import java.util.Calendar;\n-import java.util.Date;\n+import java.time.LocalDate;\n+import java.time.OffsetDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.temporal.ChronoUnit;\n import java.util.Locale;\n-import org.apache.commons.lang3.time.DateUtils;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.provisioning.api.AbstractTest;\n import org.junit.jupiter.api.Test;\n \n public class FormatUtilsTest extends AbstractTest {\n \n-    private final Calendar calendar = Calendar.getInstance();\n+    private static final SecureRandom RANDOM = new SecureRandom();\n \n-    private final Date date = calendar.getTime();\n-\n-    private String conversionPattern;\n+    private static final OffsetDateTime DATE = OffsetDateTime.now();\n \n     @Test\n     public void formatDate() {\n-        assertEquals(new SimpleDateFormat(SyncopeConstants.DEFAULT_DATE_PATTERN).format(date),\n-                FormatUtils.format(date));\n+        assertEquals(\n+                DATE.truncatedTo(ChronoUnit.SECONDS).format(DateTimeFormatter.ISO_OFFSET_DATE_TIME),\n+                FormatUtils.format(DATE));\n \n-        conversionPattern = \"dd/MM/yyyy\";\n-        assertEquals(new SimpleDateFormat(conversionPattern).format(date),\n-                FormatUtils.format(date, false, conversionPattern));\n+        String conversionPattern = \"dd/MM/yyyy\";\n+        assertEquals(\n+                DATE.format(DateTimeFormatter.ofPattern(conversionPattern)),\n+                FormatUtils.format(DATE, conversionPattern));\n     }\n \n     @Test\n     public void formatLongNumber() {\n-        long number = date.getTime();\n+        long number = RANDOM.nextLong();\n         DecimalFormat df = new DecimalFormat();\n         df.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ENGLISH));\n         assertEquals(df.format(number), FormatUtils.format(number));\n \n-        conversionPattern = \"###,###\";\n+        String conversionPattern = \"###,###\";\n         df = new DecimalFormat(conversionPattern);\n         df.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ENGLISH));\n         assertEquals(df.format(number), FormatUtils.format(number, conversionPattern));\n     }\n \n     @Test\n     public void formatDoubleNumber() {\n-        double number = date.getTime();\n+        double number = RANDOM.nextDouble();\n         DecimalFormat df = new DecimalFormat();\n         df.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ENGLISH));\n         assertEquals(df.format(number), FormatUtils.format(number));\n \n-        conversionPattern = \"###,###\";\n+        String conversionPattern = \"###,###\";\n         df = new DecimalFormat(conversionPattern);\n         df.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ENGLISH));\n         assertEquals(df.format(number), FormatUtils.format(number, conversionPattern));\n     }\n \n     @Test\n     public void parseDate() throws ParseException {\n-        String source = new SimpleDateFormat(SyncopeConstants.DEFAULT_DATE_PATTERN).format(date);\n-        assertEquals(DateUtils.parseDate(source, SyncopeConstants.DATE_PATTERNS),\n+        String source = DATE.truncatedTo(ChronoUnit.SECONDS).format(DateTimeFormatter.ISO_OFFSET_DATE_TIME);\n+        assertEquals(\n+                OffsetDateTime.parse(source, DateTimeFormatter.ISO_OFFSET_DATE_TIME),\n                 FormatUtils.parseDate(source));\n \n-        conversionPattern = \"dd-MM-yyyy\";\n-        source = new SimpleDateFormat(conversionPattern).format(date);\n-        assertEquals(DateUtils.parseDate(source, conversionPattern),\n+        String conversionPattern = \"dd-MM-yyyy\";\n+        source = DATE.format(DateTimeFormatter.ofPattern(conversionPattern));\n+        assertEquals(\n+                LocalDate.parse(source, DateTimeFormatter.ofPattern(conversionPattern)).\n+                        atStartOfDay(FormatUtils.DEFAULT_OFFSET).toOffsetDateTime(),\n                 FormatUtils.parseDate(source, conversionPattern));\n     }\n \n     @Test\n     public void parseNumber() throws ParseException {\n-        String source = String.valueOf(date.getTime());\n-        conversionPattern = \"###,###\";\n+        String source = String.valueOf(RANDOM.nextLong());\n+        String conversionPattern = \"###,###\";\n         assertEquals(Long.valueOf(source), FormatUtils.parseNumber(source, conversionPattern));\n     }\n }"},{"sha":"5c219769e7b3cbee5f82f7ee0699829592341c7f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAuditManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n+import java.time.OffsetDateTime;\n import java.util.Arrays;\n-import java.util.Date;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.audit.AuditEntry;\n@@ -92,7 +92,7 @@ public boolean auditRequested(\n         AuditEntry auditEntry = new AuditEntry();\n         auditEntry.setWho(who);\n         auditEntry.setLogger(new AuditLoggerName(type, category, subcategory, event, Result.SUCCESS));\n-        auditEntry.setDate(new Date());\n+        auditEntry.setDate(OffsetDateTime.now());\n \n         AuditConf auditConf = auditConfDAO.find(auditEntry.getLogger().toAuditKey());\n         boolean auditRequested = auditConf != null && auditConf.isActive();\n@@ -149,7 +149,7 @@ public void audit(\n             AuditEntry auditEntry = new AuditEntry();\n             auditEntry.setWho(who);\n             auditEntry.setLogger(auditLoggerName);\n-            auditEntry.setDate(new Date());\n+            auditEntry.setDate(OffsetDateTime.now());\n             auditEntry.setBefore(POJOHelper.serialize((maskSensitive(before))));\n             if (throwable == null) {\n                 auditEntry.setOutput(POJOHelper.serialize((maskSensitive(output))));"},{"sha":"a4c90bd90fda42cbf0d55485662721e22910f728","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultMappingManager.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,9 +20,9 @@\n \n import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n import java.text.ParseException;\n+import java.time.temporal.TemporalAccessor;\n import java.util.ArrayList;\n import java.util.Base64;\n-import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Objects;\n@@ -34,7 +34,6 @@\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.reflect.FieldUtils;\n-import org.apache.commons.lang3.time.DateFormatUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -104,6 +103,7 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n+import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.Uid;\n \n@@ -763,10 +763,9 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n                     default:\n                         try {\n                         Object fieldValue = FieldUtils.readField(ref, intAttrName.getField(), true);\n-                        if (fieldValue instanceof Date) {\n+                        if (fieldValue instanceof TemporalAccessor) {\n                             // needed because ConnId does not natively supports the Date type\n-                            attrValue.setStringValue(DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT.\n-                                    format((Date) fieldValue));\n+                            attrValue.setStringValue(FormatUtils.format((TemporalAccessor) fieldValue));\n                         } else if (Boolean.TYPE.isInstance(fieldValue)) {\n                             attrValue.setBooleanValue((Boolean) fieldValue);\n                         } else if (Double.TYPE.isInstance(fieldValue) || Float.TYPE.isInstance(fieldValue)) {"},{"sha":"ab939e745a64691322f85f0461367df4d7a1dcbd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractExecutableDatabinder.java","status":"renamed","additions":9,"deletions":26,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractExecutableDatabinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractExecutableDatabinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractExecutableDatabinder.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -16,35 +16,18 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.commons;\n+package org.apache.syncope.core.provisioning.java.data;\n \n+import java.time.OffsetDateTime;\n import java.util.Date;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.PropertyModel;\n+import java.util.Optional;\n+import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n \n-public class DateFormatROModel implements IModel<String> {\n+public abstract class AbstractExecutableDatabinder {\n \n-    private static final long serialVersionUID = 6677274580927636121L;\n-\n-    private final PropertyModel model;\n-\n-    public DateFormatROModel(final PropertyModel model) {\n-        this.model = model;\n-    }\n-\n-    @Override\n-    public String getObject() {\n-        return model.getObject() == null\n-                ? \"\"\n-                : SyncopeConsoleSession.get().getDateFormat().format((Date) model.getObject());\n-    }\n-\n-    @Override\n-    public void setObject(final String object) {\n-    }\n-\n-    @Override\n-    public void detach() {\n+    protected OffsetDateTime toOffsetDateTime(final Date date) {\n+        return Optional.ofNullable(date).\n+                map(d -> d.toInstant().atOffset(FormatUtils.DEFAULT_OFFSET)).\n+                orElse(null);\n     }\n }","previous_filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/DateFormatROModel.java"},{"sha":"053b4ffb0fa2b5bcf4c49eb85125a22867627119","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java","status":"modified","additions":22,"deletions":24,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -23,7 +23,7 @@\n import com.nimbusds.jwt.JWTClaimsSet;\n import com.nimbusds.jwt.SignedJWT;\n import java.text.ParseException;\n-import java.util.Calendar;\n+import java.time.OffsetDateTime;\n import java.util.Date;\n import java.util.Map;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -72,27 +72,26 @@ public AccessTokenDataBinderImpl(\n     }\n \n     @Override\n-    public Pair<String, Date> generateJWT(\n+    public Pair<String, OffsetDateTime> generateJWT(\n             final String tokenId,\n             final String subject,\n             final long duration,\n             final Map<String, Object> claims) {\n \n         credentialChecker.checkIsDefaultJWSKeyInUse();\n \n-        Date currentTime = new Date();\n+        OffsetDateTime currentTime = OffsetDateTime.now();\n+        Date issueTime = new Date(currentTime.toInstant().toEpochMilli());\n \n-        Calendar expiration = Calendar.getInstance();\n-        expiration.setTime(currentTime);\n-        expiration.add(Calendar.MINUTE, (int) duration);\n+        OffsetDateTime expiration = currentTime.plusMinutes(duration);\n \n         JWTClaimsSet.Builder claimsSet = new JWTClaimsSet.Builder().\n                 jwtID(tokenId).\n                 subject(subject).\n-                issueTime(currentTime).\n                 issuer(securityProperties.getJwtIssuer()).\n-                expirationTime(expiration.getTime()).\n-                notBeforeTime(currentTime);\n+                issueTime(issueTime).\n+                expirationTime(new Date(expiration.toInstant().toEpochMilli())).\n+                notBeforeTime(issueTime);\n         claims.forEach(claimsSet::claim);\n \n         SignedJWT jwt = new SignedJWT(new JWSHeader(jwsSigner.getJwsAlgorithm()), claimsSet.build());\n@@ -103,7 +102,7 @@ public Pair<String, Date> generateJWT(\n             sce.getElements().add(e.getMessage());\n             throw sce;\n         }\n-        return Pair.of(jwt.serialize(), expiration.getTime());\n+        return Pair.of(jwt.serialize(), expiration);\n     }\n \n     private AccessToken replace(\n@@ -112,7 +111,7 @@ private AccessToken replace(\n             final byte[] authorities,\n             final AccessToken accessToken) {\n \n-        Pair<String, Date> generated = generateJWT(\n+        Pair<String, OffsetDateTime> generated = generateJWT(\n                 accessToken.getKey(),\n                 subject,\n                 confParamOps.get(AuthContextUtils.getDomain(), \"jwt.lifetime.minutes\", 120L, Long.class),\n@@ -130,7 +129,7 @@ private AccessToken replace(\n     }\n \n     @Override\n-    public Pair<String, Date> create(\n+    public Pair<String, OffsetDateTime> create(\n             final String subject,\n             final Map<String, Object> claims,\n             final byte[] authorities,\n@@ -143,8 +142,9 @@ public Pair<String, Date> create(\n             accessToken.setKey(SecureRandomUtils.generateRandomUUID().toString());\n \n             accessToken = replace(subject, claims, authorities, accessToken);\n-        } else if (replace || accessToken.getExpirationTime() == null\n-                || accessToken.getExpirationTime().before(new Date())) {\n+        } else if (replace\n+                || accessToken.getExpirationTime() == null\n+                || accessToken.getExpirationTime().isBefore(OffsetDateTime.now())) {\n \n             // AccessToken found, but either replace was requested or it is expired: update existing\n             accessToken = replace(subject, claims, authorities, accessToken);\n@@ -154,22 +154,20 @@ public Pair<String, Date> create(\n     }\n \n     @Override\n-    public Pair<String, Date> update(final AccessToken accessToken, final byte[] authorities) {\n+    public Pair<String, OffsetDateTime> update(final AccessToken accessToken, final byte[] authorities) {\n         credentialChecker.checkIsDefaultJWSKeyInUse();\n \n         long duration = confParamOps.get(AuthContextUtils.getDomain(), \"jwt.lifetime.minutes\", 120L, Long.class);\n \n-        Date currentTime = new Date();\n+        OffsetDateTime currentTime = OffsetDateTime.now();\n \n-        Calendar expiration = Calendar.getInstance();\n-        expiration.setTime(currentTime);\n-        expiration.add(Calendar.MINUTE, (int) duration);\n+        OffsetDateTime expiration = currentTime.plusMinutes(duration);\n \n         SignedJWT jwt;\n         try {\n-            JWTClaimsSet.Builder claimsSet =\n-                    new JWTClaimsSet.Builder(SignedJWT.parse(accessToken.getBody()).getJWTClaimsSet()).\n-                            expirationTime(expiration.getTime());\n+            JWTClaimsSet.Builder claimsSet = new JWTClaimsSet.Builder(\n+                    SignedJWT.parse(accessToken.getBody()).getJWTClaimsSet()).\n+                    expirationTime(new Date(expiration.toInstant().toEpochMilli()));\n \n             jwt = new SignedJWT(new JWSHeader(jwsSigner.getJwsAlgorithm()), claimsSet.build());\n             jwt.sign(jwsSigner);\n@@ -181,15 +179,15 @@ public Pair<String, Date> update(final AccessToken accessToken, final byte[] aut\n         String body = jwt.serialize();\n \n         accessToken.setBody(body);\n-        accessToken.setExpirationTime(expiration.getTime());\n+        accessToken.setExpirationTime(expiration);\n \n         if (!securityProperties.getAdminUser().equals(accessToken.getOwner())) {\n             accessToken.setAuthorities(authorities);\n         }\n \n         accessTokenDAO.save(accessToken);\n \n-        return Pair.of(body, expiration.getTime());\n+        return Pair.of(body, expiration);\n     }\n \n     @Override"},{"sha":"f266f25768bf3e43d2319aa57e0d83cd9e788fe4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -43,7 +43,7 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n \n-public class ReportDataBinderImpl implements ReportDataBinder {\n+public class ReportDataBinderImpl extends AbstractExecutableDatabinder implements ReportDataBinder {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(ReportDataBinder.class);\n \n@@ -123,10 +123,9 @@ public ReportTO getReportTO(final Report report) {\n         String triggerName = JobNamer.getTriggerName(JobNamer.getJobKey(report).getName());\n         try {\n             Trigger trigger = scheduler.getScheduler().getTrigger(new TriggerKey(triggerName, Scheduler.DEFAULT_GROUP));\n-\n             if (trigger != null) {\n-                reportTO.setLastExec(trigger.getPreviousFireTime());\n-                reportTO.setNextExec(trigger.getNextFireTime());\n+                reportTO.setLastExec(toOffsetDateTime(trigger.getPreviousFireTime()));\n+                reportTO.setNextExec(toOffsetDateTime(trigger.getNextFireTime()));\n             }\n         } catch (SchedulerException e) {\n             LOG.warn(\"While trying to get to \" + triggerName, e);"},{"sha":"424e081bbd55f29b73fa04f3aa63113afe34d8d7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -73,7 +73,7 @@\n import org.apache.syncope.core.persistence.api.entity.task.PushTaskAnyFilter;\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n \n-public class TaskDataBinderImpl implements TaskDataBinder {\n+public class TaskDataBinderImpl extends AbstractExecutableDatabinder implements TaskDataBinder {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(TaskDataBinder.class);\n \n@@ -340,10 +340,9 @@ protected void fill(final SchedTaskTO schedTaskTO, final SchedTask schedTask) {\n         String triggerName = JobNamer.getTriggerName(JobNamer.getJobKey(schedTask).getName());\n         try {\n             Trigger trigger = scheduler.getScheduler().getTrigger(new TriggerKey(triggerName, Scheduler.DEFAULT_GROUP));\n-\n             if (trigger != null) {\n-                schedTaskTO.setLastExec(trigger.getPreviousFireTime());\n-                schedTaskTO.setNextExec(trigger.getNextFireTime());\n+                schedTaskTO.setLastExec(toOffsetDateTime(trigger.getPreviousFireTime()));\n+                schedTaskTO.setNextExec(toOffsetDateTime(trigger.getNextFireTime()));\n             }\n         } catch (SchedulerException e) {\n             LOG.warn(\"While trying to get to \" + triggerName, e);"},{"sha":"0d4a34505f5c3abd71e3d055c3588e3182dda601","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Optional;\n@@ -327,7 +327,7 @@ public void create(final User user, final UserCR userCR) {\n             LOG.debug(\"Password was not provided or not required to be stored\");\n         } else {\n             setPassword(user, userCR.getPassword(), scce);\n-            user.setChangePwdDate(new Date());\n+            user.setChangePwdDate(OffsetDateTime.now());\n         }\n \n         user.setMustChangePassword(userCR.isMustChangePassword());\n@@ -485,7 +485,7 @@ public Pair<PropagationByResource<String>, PropagationByResource<Pair<String, St\n             } else if (StringUtils.isNotBlank(userUR.getPassword().getValue())) {\n                 if (userUR.getPassword().isOnSyncope()) {\n                     setPassword(user, userUR.getPassword().getValue(), scce);\n-                    user.setChangePwdDate(new Date());\n+                    user.setChangePwdDate(OffsetDateTime.now());\n                 }\n \n                 password = userUR.getPassword().getValue();"},{"sha":"41c7899b3e8c3b911f7c5bf76a09f45b106f6cb1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractSchedTaskJobDelegate.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.job;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.Optional;\n import java.util.concurrent.atomic.AtomicReference;\n import org.apache.syncope.common.lib.types.AuditElements;\n@@ -119,7 +119,7 @@ public void execute(final String taskKey, final boolean dryRun, final JobExecuti\n         String executor = Optional.ofNullable(context.getMergedJobDataMap().getString(JobManager.EXECUTOR_KEY)).\n                 orElse(securityProperties.getAdminUser());\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n-        execution.setStart(new Date());\n+        execution.setStart(OffsetDateTime.now());\n         execution.setTask(task);\n         execution.setExecutor(executor);\n \n@@ -138,7 +138,7 @@ public void execute(final String taskKey, final boolean dryRun, final JobExecuti\n             execution.setMessage(ExceptionUtils2.getFullStackTrace(e));\n             execution.setStatus(TaskJob.Status.FAILURE.name());\n         }\n-        execution.setEnd(new Date());\n+        execution.setEnd(OffsetDateTime.now());\n \n         if (hasToBeRegistered(execution)) {\n             register(execution);"},{"sha":"ab3c1ce97aa2801c39841f01f3595c052051de8a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/DefaultJobManager.java","status":"modified","additions":36,"deletions":22,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FDefaultJobManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FDefaultJobManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FDefaultJobManager.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -22,13 +22,14 @@\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.time.OffsetDateTime;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n-\n import javax.sql.DataSource;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -37,42 +38,42 @@\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Report;\n+import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n+import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n+import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n+import org.apache.syncope.core.provisioning.java.job.notification.NotificationJob;\n+import org.apache.syncope.core.provisioning.java.job.report.ReportJob;\n+import org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate;\n+import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n-import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.spring.security.SecurityProperties;\n+import org.identityconnectors.common.IOUtil;\n import org.quartz.CronScheduleBuilder;\n import org.quartz.Job;\n import org.quartz.JobBuilder;\n import org.quartz.JobDataMap;\n import org.quartz.JobKey;\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n+import org.quartz.Trigger;\n import org.quartz.TriggerBuilder;\n import org.quartz.TriggerKey;\n+import org.quartz.impl.jdbcjobstore.Constants;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.jdbc.datasource.DataSourceUtils;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.core.provisioning.api.job.JobManager;\n-import org.identityconnectors.common.IOUtil;\n-import org.quartz.impl.jdbcjobstore.Constants;\n-import org.springframework.jdbc.datasource.DataSourceUtils;\n-import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n-import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n-import org.apache.syncope.core.provisioning.java.job.notification.NotificationJob;\n-import org.apache.syncope.core.provisioning.java.job.report.ReportJob;\n-import org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate;\n-import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n-import org.apache.syncope.core.spring.security.SecurityProperties;\n-import org.quartz.Trigger;\n \n public class DefaultJobManager implements JobManager, SyncopeCoreLoader {\n \n@@ -154,8 +155,10 @@ public boolean isRunning(final JobKey jobKey) throws SchedulerException {\n     }\n \n     protected void registerJob(\n-            final String jobName, final Class<? extends Job> jobClass,\n-            final String cronExpression, final Date startAt,\n+            final String jobName,\n+            final Class<? extends Job> jobClass,\n+            final String cronExpression,\n+            final Date startAt,\n             final Map<String, Object> jobMap)\n             throws SchedulerException {\n \n@@ -197,7 +200,10 @@ protected void registerJob(\n     }\n \n     @Override\n-    public Map<String, Object> register(final SchedTask task, final Date startAt, final long interruptMaxRetries,\n+    public Map<String, Object> register(\n+            final SchedTask task,\n+            final OffsetDateTime startAt,\n+            final long interruptMaxRetries,\n             final String executor)\n             throws SchedulerException {\n \n@@ -225,19 +231,27 @@ public Map<String, Object> register(final SchedTask task, final Date startAt, fi\n                 JobNamer.getJobKey(task).getName(),\n                 TaskJob.class,\n                 task.getCronExpression(),\n-                startAt,\n+                Optional.ofNullable(startAt).map(s -> new Date(s.toInstant().toEpochMilli())).orElse(null),\n                 jobMap);\n         return jobMap;\n     }\n \n     @Override\n-    public void register(final Report report, final Date startAt, final long interruptMaxRetries,\n+    public void register(\n+            final Report report,\n+            final OffsetDateTime startAt,\n+            final long interruptMaxRetries,\n             final String executor) throws SchedulerException {\n \n         Map<String, Object> jobMap = createJobMapForExecutionContext(executor);\n         jobMap.put(JobManager.REPORT_KEY, report.getKey());\n \n-        registerJob(JobNamer.getJobKey(report).getName(), ReportJob.class, report.getCronExpression(), startAt, jobMap);\n+        registerJob(\n+                JobNamer.getJobKey(report).getName(),\n+                ReportJob.class,\n+                report.getCronExpression(),\n+                Optional.ofNullable(startAt).map(s -> new Date(s.toInstant().toEpochMilli())).orElse(null),\n+                jobMap);\n     }\n \n     protected static Map<String, Object> createJobMapForExecutionContext(final String executor) {"},{"sha":"f7f3b4f5f39f7ff17d4d59635f92f7e0d12f99bc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/DefaultNotificationJobDelegate.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.job.notification;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import java.util.concurrent.atomic.AtomicReference;\n import javax.mail.internet.MimeMessage;\n@@ -96,7 +96,7 @@ public boolean isInterrupted() {\n     public TaskExec executeSingle(final NotificationTask task, final String executor) {\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setTask(task);\n-        execution.setStart(new Date());\n+        execution.setStart(OffsetDateTime.now());\n         execution.setExecutor(executor);\n         boolean retryPossible = true;\n \n@@ -196,7 +196,7 @@ public TaskExec executeSingle(final NotificationTask task, final String executor\n                             \"Could not send notification to \" + to, e);\n                 }\n \n-                execution.setEnd(new Date());\n+                execution.setEnd(OffsetDateTime.now());\n             }\n         }\n "},{"sha":"8daf068afdaca234e5ea73b94c8f50f323e2defe","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/DefaultReportJobDelegate.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -21,7 +21,7 @@\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.Optional;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.zip.Deflater;\n@@ -35,17 +35,16 @@\n import javax.xml.transform.sax.SAXTransformerFactory;\n import javax.xml.transform.sax.TransformerHandler;\n import javax.xml.transform.stream.StreamResult;\n-\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n-import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n import org.apache.syncope.core.persistence.api.dao.Reportlet;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n-import org.apache.syncope.core.spring.ImplementationManager;\n import org.apache.syncope.core.provisioning.api.job.report.ReportJobDelegate;\n+import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n+import org.apache.syncope.core.spring.ImplementationManager;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -121,7 +120,7 @@ public void execute(final String reportKey, final String executor) throws JobExe\n         // 1. create execution\n         ReportExec execution = entityFactory.newEntity(ReportExec.class);\n         execution.setStatus(ReportExecStatus.STARTED);\n-        execution.setStart(new Date());\n+        execution.setStart(OffsetDateTime.now());\n         execution.setReport(report);\n \n         execution.setExecutor(executor);\n@@ -220,7 +219,7 @@ public void execute(final String reportKey, final String executor) throws JobExe\n \n             execution.setExecResult(baos.toByteArray());\n             execution.setMessage(reportExecutionMessage.toString());\n-            execution.setEnd(new Date());\n+            execution.setEnd(OffsetDateTime.now());\n             reportExecDAO.save(execution);\n         }\n     }"},{"sha":"682070dfda66c37144bdf58b1ad9c9c12aaa2a93","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.provisioning.java.propagation;\n \n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -312,7 +312,7 @@ public TaskExec execute(\n \n         List<PropagationActions> actions = getPropagationActions(task.getResource());\n \n-        Date start = new Date();\n+        OffsetDateTime start = OffsetDateTime.now();\n \n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setStatus(ExecStatus.CREATED.name());\n@@ -426,7 +426,7 @@ public TaskExec execute(\n \n             execution.setStart(start);\n             execution.setMessage(taskExecutionMessage);\n-            execution.setEnd(new Date());\n+            execution.setEnd(OffsetDateTime.now());\n \n             LOG.debug(\"Execution finished: {}\", execution);\n \n@@ -512,7 +512,7 @@ protected TaskExec rejected(\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setStatus(ExecStatus.NOT_ATTEMPTED.name());\n         execution.setExecutor(executor);\n-        execution.setStart(new Date());\n+        execution.setStart(OffsetDateTime.now());\n         execution.setMessage(rejectReason);\n         execution.setEnd(execution.getStart());\n "},{"sha":"02c12df78692baf0c3d83c54ec2d4e70f6bcbd19","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -973,6 +973,7 @@ protected Remediation createRemediation(\n             final PullTask pullTask,\n             final ProvisioningReport result,\n             final SyncDelta delta) {\n+\n         Remediation entity = entityFactory.newEntity(Remediation.class);\n \n         entity.setAnyType(anyType);\n@@ -985,11 +986,10 @@ protected Remediation createRemediation(\n             entity.setPayload(anyUR);\n         }\n         entity.setError(result.getMessage());\n-        entity.setInstant(new Date());\n+        entity.setInstant(OffsetDateTime.now());\n         entity.setRemoteName(delta.getObject().getName().getNameValue());\n         entity.setPullTask(pullTask);\n \n         return remediationDAO.save(entity);\n     }\n-\n }"},{"sha":"7f0b5e210e10634f359dd97a1263d075ed219ffb","filename":"core/self-keymaster-starter/src/main/java/org/apache/syncope/core/keymaster/internal/SelfKeymasterInternalConfParamOps.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fself-keymaster-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fkeymaster%2Finternal%2FSelfKeymasterInternalConfParamOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fself-keymaster-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fkeymaster%2Finternal%2FSelfKeymasterInternalConfParamOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fself-keymaster-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fkeymaster%2Finternal%2FSelfKeymasterInternalConfParamOps.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.keymaster.internal;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.IOException;\n import java.util.List;\n import java.util.Map;\n@@ -34,7 +34,7 @@ public class SelfKeymasterInternalConfParamOps implements ConfParamOps {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(ConfParamOps.class);\n \n-    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     protected final ConfParamLogic logic;\n "},{"sha":"b393686885eab41275c79a0f85ed064e1741ad46","filename":"core/self-keymaster-starter/src/main/java/org/apache/syncope/core/keymaster/rest/cxf/service/ConfParamServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fself-keymaster-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fkeymaster%2Frest%2Fcxf%2Fservice%2FConfParamServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fself-keymaster-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fkeymaster%2Frest%2Fcxf%2Fservice%2FConfParamServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fself-keymaster-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fkeymaster%2Frest%2Fcxf%2Fservice%2FConfParamServiceImpl.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.keymaster.rest.cxf.service;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.Map;\n@@ -37,7 +37,7 @@ public class ConfParamServiceImpl implements ConfParamService {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(ConfParamService.class);\n \n-    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     protected final ConfParamLogic logic;\n "},{"sha":"5ff8f346e5cc81fbcfad1241fc295867add6ba57","filename":"core/self-keymaster-starter/src/main/java/org/apache/syncope/core/logic/ConfParamLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fself-keymaster-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfParamLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fself-keymaster-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfParamLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fself-keymaster-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfParamLogic.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,7 +20,7 @@\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.lang.reflect.Method;\n import java.util.Map;\n import java.util.Optional;\n@@ -35,7 +35,7 @@\n \n public class ConfParamLogic extends AbstractTransactionalLogic<EntityTO> {\n \n-    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     protected final ConfParamDAO confParamDAO;\n "},{"sha":"408bd2fef0a64c3a57e3e5c64a73e7f250f57f1f","filename":"core/self-keymaster-starter/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConfParam.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fself-keymaster-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConfParam.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fself-keymaster-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConfParam.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fself-keymaster-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConfParam.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,7 +20,7 @@\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.IOException;\n import javax.persistence.Entity;\n import javax.persistence.Lob;\n@@ -33,7 +33,7 @@ public class JPAConfParam extends AbstractProvidedKeyEntity implements ConfParam\n \n     private static final long serialVersionUID = 8742750097008236475L;\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     public static final String TABLE = \"ConfParam\";\n "},{"sha":"484da7ada91af0c3a7d2cf4776e160bdf6a3a6c8","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n@@ -258,7 +258,7 @@ public Triple<User, Boolean, String> authenticate(final String domain, final Aut\n                         SyncopeAuthenticationDetails.class.cast(authentication.getDetails()), user.getKey());\n \n                 if (confParamOps.get(domain, \"log.lastlogindate\", true, Boolean.class)) {\n-                    user.setLastLoginDate(new Date());\n+                    user.setLastLoginDate(OffsetDateTime.now());\n                     userModified = true;\n                 }\n "},{"sha":"5dbd33e135fb11f489f4a792d33d228d490a54ec","filename":"core/starter/src/main/resources/core.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -42,7 +42,7 @@ persistence.remoteCommitProvider=sjvm\n \n persistence.domain[0].key=Master\n persistence.domain[0].jdbcDriver=org.postgresql.Driver\n-persistence.domain[0].jdbcURL=jdbc:postgresql://localhost:5432/syncope\n+persistence.domain[0].jdbcURL=jdbc:postgresql://localhost:5432/syncope?stringtype=unspecified\n persistence.domain[0].dbUsername=syncope\n persistence.domain[0].dbPassword=syncope\n persistence.domain[0].databasePlatform=org.apache.openjpa.jdbc.sql.PostgresDictionary"},{"sha":"9c2c60b1981287e7fac1c45bfa0daae0dad89a1a","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractWorkflowAdapter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractWorkflowAdapter.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.workflow.java;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n@@ -28,7 +28,7 @@ public abstract class AbstractWorkflowAdapter {\n     protected void metadata(final Any<?> any, final String username, final String context) {\n         String who = username\n                 + AuthContextUtils.getDelegatedBy().map(d -> \" [delegated by \" + d + \"]\").orElse(StringUtils.EMPTY);\n-        Date now = new Date();\n+        OffsetDateTime now = OffsetDateTime.now();\n \n         if (any.getCreationDate() == null) {\n             any.setCreationDate(now);"},{"sha":"041a4746c088ce69038d0aff73ba953c25dbc718","filename":"docker/core/src/main/resources/core-oracle.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fcore-oracle.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fcore-oracle.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fcore-oracle.properties?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -27,5 +27,7 @@ persistence.domain[0].auditSql=audit_oracle.sql\n persistence.domain[0].poolMaxActive=${DB_POOL_MAX}\n persistence.domain[0].poolMinIdle=${DB_POOL_MIN}\n \n+persistence.indexesXML=classpath:oracle_indexes.xml\n+\n provisioning.quartz.delegate=org.quartz.impl.jdbcjobstore.oracle.OracleDelegate\n provisioning.quartz.sql=tables_oracle.sql"},{"sha":"e924b700cd5a68a554d0ac93c158d750c8c362b6","filename":"docker/src/main/resources/docker-compose/docker-compose-all.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-all.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-all.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-all.yml?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -45,7 +45,7 @@ services:\n      restart: always\n      environment:\n        SPRING_PROFILES_ACTIVE: docker,postgresql\n-       DB_URL: jdbc:postgresql://db:5432/syncope\n+       DB_URL: jdbc:postgresql://db:5432/syncope?stringtype=unspecified\n        DB_USER: syncope\n        DB_PASSWORD: syncope\n        DB_POOL_MAX: 10"},{"sha":"474933dcff203856fd11003144c45e1f7ab3e096","filename":"docker/src/main/resources/docker-compose/docker-compose-ha.yml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-ha.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-ha.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-ha.yml?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -38,7 +38,7 @@ services:\n      restart: always\n      environment:\n        SPRING_PROFILES_ACTIVE: docker,postgresql\n-       DB_URL: jdbc:postgresql://db:5432/syncope\n+       DB_URL: jdbc:postgresql://db:5432/syncope?stringtype=unspecified\n        DB_USER: syncope\n        DB_PASSWORD: syncope\n        DB_POOL_MAX: 10\n@@ -60,7 +60,7 @@ services:\n      restart: always\n      environment:\n        SPRING_PROFILES_ACTIVE: docker,postgresql\n-       DB_URL: jdbc:postgresql://db:5432/syncope\n+       DB_URL: jdbc:postgresql://db:5432/syncope?stringtype=unspecified\n        DB_USER: syncope\n        DB_PASSWORD: syncope\n        DB_POOL_MAX: 10"},{"sha":"c3ba54ba3408b6fbf120d590817a62b0c40bc814","filename":"docker/src/main/resources/docker-compose/docker-compose-postgresql.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-postgresql.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-postgresql.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-postgresql.yml?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -37,7 +37,7 @@ services:\n      restart: always\n      environment:\n        SPRING_PROFILES_ACTIVE: docker,postgresql\n-       DB_URL: jdbc:postgresql://db:5432/syncope\n+       DB_URL: jdbc:postgresql://db:5432/syncope?stringtype=unspecified\n        DB_USER: syncope\n        DB_PASSWORD: syncope\n        DB_POOL_MAX: 10"},{"sha":"e30364faece6941275d6da6d4908c3a3b9a69fb2","filename":"docker/src/main/resources/kubernetes/syncope/values.yaml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/docker%2Fsrc%2Fmain%2Fresources%2Fkubernetes%2Fsyncope%2Fvalues.yaml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/docker%2Fsrc%2Fmain%2Fresources%2Fkubernetes%2Fsyncope%2Fvalues.yaml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsrc%2Fmain%2Fresources%2Fkubernetes%2Fsyncope%2Fvalues.yaml?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -16,7 +16,7 @@\n # under the License.\n ### Environment Variables that will be set on all 3 syncope docker containers (core, console, enduser)\n syncopeEnvironment:\n-  dbUrl: jdbc:postgresql://postgres:5432/syncope\n+  dbUrl: jdbc:postgresql://postgres:5432/syncope?stringtype=unspecified\n   dbUser: syncope\n   dbPoolMax: 10\n   dbPoolMin: 2"},{"sha":"192ed817e43dc908ae0dc7a86d1bcef2d417194a","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchClientFactoryBean.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientFactoryBean.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -21,6 +21,8 @@\n import co.elastic.clients.elasticsearch.ElasticsearchClient;\n import co.elastic.clients.json.jackson.JacksonJsonpMapper;\n import co.elastic.clients.transport.rest_client.RestClientTransport;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.nio.charset.StandardCharsets;\n import java.util.Base64;\n import java.util.List;\n@@ -115,7 +117,10 @@ public ElasticsearchClient getObject() throws Exception {\n                 }\n \n                 restClient = builder.build();\n-                client = new ElasticsearchClient(new RestClientTransport(restClient, new JacksonJsonpMapper()));\n+                client = new ElasticsearchClient(new RestClientTransport(\n+                        restClient,\n+                        new JacksonJsonpMapper(JsonMapper.builder().\n+                                findAndAddModules().disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS).build())));\n             }\n         }\n         return client;"},{"sha":"56d180abaddf837b0755b5803b36f0221e87c71d","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -76,6 +76,7 @@\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils;\n@@ -482,7 +483,7 @@ protected Query fillAttrQuery(\n             final AttrCond cond) {\n \n         Object value = schema.getType() == AttrSchemaType.Date && attrValue.getDateValue() != null\n-                ? attrValue.getDateValue().getTime()\n+                ? FormatUtils.format(attrValue.getDateValue())\n                 : attrValue.getValue();\n \n         Query query = null;"},{"sha":"4627643ce2ab71d4f27495b08fe70db0539eb808","filename":"ext/elasticsearch/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ElasticsearchReindex.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -115,7 +115,7 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                             IndexResponse response = client.index(request);\n                             LOG.debug(\"Index successfully created for {}: {}\", user, response);\n                         } catch (Exception e) {\n-                            LOG.error(\"Could not create index for {} {}\", AnyTypeKind.USER, user);\n+                            LOG.error(\"Could not create index for {} {}\", AnyTypeKind.USER, user, e);\n                         }\n                     }\n                 }\n@@ -133,7 +133,7 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                             IndexResponse response = client.index(request);\n                             LOG.debug(\"Index successfully created for {}: {}\", group, response);\n                         } catch (Exception e) {\n-                            LOG.error(\"Could not create index for {} {}\", AnyTypeKind.GROUP, group);\n+                            LOG.error(\"Could not create index for {} {}\", AnyTypeKind.GROUP, group, e);\n                         }\n                     }\n                 }\n@@ -151,7 +151,7 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                             IndexResponse response = client.index(request);\n                             LOG.debug(\"Index successfully created for {}: {}\", anyObject, response);\n                         } catch (Exception e) {\n-                            LOG.error(\"Could not create index for {} {}\", AnyTypeKind.ANY_OBJECT, anyObject);\n+                            LOG.error(\"Could not create index for {} {}\", AnyTypeKind.ANY_OBJECT, anyObject, e);\n                         }\n                     }\n                 }"},{"sha":"6a5a16948e58f417a1df331e55c725df9132e64e","filename":"ext/flowable/client-common-ui/src/main/java/org/apache/syncope/ext/client/common/ui/panels/UserRequestFormPanel.java","status":"modified","additions":33,"deletions":34,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fflowable%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fclient%2Fcommon%2Fui%2Fpanels%2FUserRequestFormPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fflowable%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fclient%2Fcommon%2Fui%2Fpanels%2FUserRequestFormPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fclient%2Fcommon%2Fui%2Fpanels%2FUserRequestFormPanel.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -76,7 +76,7 @@ protected List<UserRequestFormProperty> load() {\n             private static final long serialVersionUID = 9101744072914090143L;\n \n             @Override\n-            @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+            @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n             protected void populateItem(final ListItem<UserRequestFormProperty> item) {\n                 final UserRequestFormProperty prop = item.getModelObject();\n \n@@ -92,8 +92,8 @@ protected void populateItem(final ListItem<UserRequestFormProperty> item) {\n                             @Override\n                             public String getObject() {\n                                 return StringUtils.isBlank(prop.getValue())\n-                                    ? null\n-                                    : prop.getValue().equals(\"true\") ? \"Yes\" : \"No\";\n+                                        ? null\n+                                        : prop.getValue().equals(\"true\") ? \"Yes\" : \"No\";\n                             }\n \n                             @Override\n@@ -114,8 +114,8 @@ public void setObject(final String object) {\n                             public Date getObject() {\n                                 try {\n                                     return StringUtils.isBlank(prop.getValue())\n-                                        ? null\n-                                        : formatter.parse(prop.getValue());\n+                                            ? null\n+                                            : formatter.parse(prop.getValue());\n                                 } catch (ParseException e) {\n                                     LOG.error(\"Unparsable date: {}\", prop.getValue(), e);\n                                     return null;\n@@ -126,53 +126,52 @@ public Date getObject() {\n                             public void setObject(final Date object) {\n                                 prop.setValue(formatter.format(object));\n                             }\n-\n                         }, formatter);\n                         break;\n \n                     case Enum:\n                         field = new AjaxDropDownChoicePanel(\n-                            \"value\", label, new PropertyModel<String>(prop, \"value\"), false).\n-                            setChoiceRenderer(new MapChoiceRenderer(prop.getEnumValues().stream().\n-                                collect(Collectors.toMap(\n-                                    UserRequestFormPropertyValue::getKey,\n-                                    UserRequestFormPropertyValue::getValue)))).\n-                            setChoices(prop.getEnumValues().stream().\n-                                map(UserRequestFormPropertyValue::getKey).collect(Collectors.toList()));\n+                                \"value\", label, new PropertyModel<String>(prop, \"value\"), false).\n+                                setChoiceRenderer(new MapChoiceRenderer(prop.getEnumValues().stream().\n+                                        collect(Collectors.toMap(\n+                                                UserRequestFormPropertyValue::getKey,\n+                                                UserRequestFormPropertyValue::getValue)))).\n+                                setChoices(prop.getEnumValues().stream().\n+                                        map(UserRequestFormPropertyValue::getKey).collect(Collectors.toList()));\n                         break;\n \n                     case Dropdown:\n                         field = new AjaxDropDownChoicePanel(\n-                            \"value\", label, new PropertyModel<String>(prop, \"value\"), false).\n-                            setChoiceRenderer(new MapChoiceRenderer(prop.getDropdownValues().stream().\n-                                collect(Collectors.toMap(\n-                                    UserRequestFormPropertyValue::getKey,\n-                                    UserRequestFormPropertyValue::getValue)))).\n-                            setChoices(prop.getDropdownValues().stream().\n-                                map(UserRequestFormPropertyValue::getKey).collect(Collectors.toList()));\n+                                \"value\", label, new PropertyModel<String>(prop, \"value\"), false).\n+                                setChoiceRenderer(new MapChoiceRenderer(prop.getDropdownValues().stream().\n+                                        collect(Collectors.toMap(\n+                                                UserRequestFormPropertyValue::getKey,\n+                                                UserRequestFormPropertyValue::getValue)))).\n+                                setChoices(prop.getDropdownValues().stream().\n+                                        map(UserRequestFormPropertyValue::getKey).collect(Collectors.toList()));\n                         break;\n \n                     case Long:\n                         field = new AjaxSpinnerFieldPanel.Builder<Long>().build(\n-                            \"value\",\n-                            label,\n-                            Long.class,\n-                            new PropertyModel<>(prop, \"value\") {\n+                                \"value\",\n+                                label,\n+                                Long.class,\n+                                new PropertyModel<>(prop, \"value\") {\n \n-                                private static final long serialVersionUID = -7688359318035249200L;\n+                            private static final long serialVersionUID = -7688359318035249200L;\n \n-                                @Override\n-                                public Long getObject() {\n-                                    return StringUtils.isBlank(prop.getValue())\n+                            @Override\n+                            public Long getObject() {\n+                                return StringUtils.isBlank(prop.getValue())\n                                         ? null\n                                         : NumberUtils.toLong(prop.getValue());\n-                                }\n+                            }\n \n-                                @Override\n-                                public void setObject(final Long object) {\n-                                    prop.setValue(String.valueOf(object));\n-                                }\n-                            });\n+                            @Override\n+                            public void setObject(final Long object) {\n+                                prop.setValue(String.valueOf(object));\n+                            }\n+                        });\n                         break;\n \n                     case Password:"},{"sha":"bd8a292a99920243219b88448bab0beeae4fbe40","filename":"ext/flowable/common-lib/src/test/java/org/apache/syncope/common/lib/to/JSONTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJSONTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,10 +19,11 @@\n package org.apache.syncope.common.lib.to;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.syncope.common.lib.jackson.SyncopeJsonMapper;\n \n public class JSONTest extends SerializationTest {\n \n-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+    private static final ObjectMapper OBJECT_MAPPER = new SyncopeJsonMapper();\n \n     @Override\n     protected ObjectMapper objectMapper() {"},{"sha":"8e97b42cd1fbf51a66275e72adb598cc1f8ad00f","filename":"ext/flowable/common-lib/src/test/java/org/apache/syncope/common/lib/to/YAMLTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FYAMLTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FYAMLTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FYAMLTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,10 +20,11 @@\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n+import org.apache.syncope.common.lib.jackson.SyncopeYAMLMapper;\n \n public class YAMLTest extends SerializationTest {\n \n-    private static final YAMLMapper YAML_MAPPER = new YAMLMapper();\n+    private static final YAMLMapper YAML_MAPPER = new SyncopeYAMLMapper();\n \n     @Override\n     protected ObjectMapper objectMapper() {"},{"sha":"43d40be19454629cbbc0903a8f373b01c834ae94","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableBpmnProcessManager.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableBpmnProcessManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableBpmnProcessManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableBpmnProcessManager.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.syncope.core.flowable.api.BpmnProcessManager;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -52,7 +52,7 @@ public class FlowableBpmnProcessManager implements BpmnProcessManager {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(BpmnProcessManager.class);\n \n-    protected static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+    protected static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     protected static final String MODEL_DATA_JSON_MODEL = \"model\";\n \n@@ -103,10 +103,10 @@ protected void exportProcessModel(final String key, final OutputStream os) {\n         Model model = getModel(FlowableRuntimeUtils.getLatestProcDefByKey(engine, key));\n \n         try {\n-            ObjectNode modelNode = (ObjectNode) OBJECT_MAPPER.readTree(model.getMetaInfo());\n+            ObjectNode modelNode = (ObjectNode) MAPPER.readTree(model.getMetaInfo());\n             modelNode.put(ModelDataJsonConstants.MODEL_ID, model.getId());\n             modelNode.replace(MODEL_DATA_JSON_MODEL,\n-                    OBJECT_MAPPER.readTree(engine.getRepositoryService().getModelEditorSource(model.getId())));\n+                    MAPPER.readTree(engine.getRepositoryService().getModelEditorSource(model.getId())));\n \n             os.write(modelNode.toString().getBytes());\n         } catch (IOException e) {\n@@ -157,7 +157,7 @@ public void importProcess(final String key, final BpmnProcessFormat format, fina\n             case JSON:\n                 JsonNode definitionNode;\n                 try {\n-                    definitionNode = OBJECT_MAPPER.readTree(definition);\n+                    definitionNode = MAPPER.readTree(definition);\n                     if (definitionNode.has(MODEL_DATA_JSON_MODEL)) {\n                         definitionNode = definitionNode.get(MODEL_DATA_JSON_MODEL);\n                     }"},{"sha":"8447c2335099368212d40dcb6c17a14f111a9316","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableDeployUtils.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableDeployUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableDeployUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableDeployUtils.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.flowable.impl;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import java.io.ByteArrayInputStream;\n import java.io.InputStream;\n@@ -39,7 +39,7 @@\n \n public final class FlowableDeployUtils {\n \n-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     private static final XMLInputFactory XML_INPUT_FACTORY = XMLInputFactory.newInstance();\n \n@@ -62,14 +62,14 @@ public static Deployment deployDefinition(\n     public static void deployModel(final ProcessEngine engine, final ProcessDefinition procDef) {\n         XMLStreamReader xtr = null;\n         try (InputStream bpmnStream = engine.getRepositoryService().\n-                getResourceAsStream(procDef.getDeploymentId(), procDef.getResourceName());\n-                InputStreamReader isr = new InputStreamReader(bpmnStream)) {\n+                getResourceAsStream(procDef.getDeploymentId(), procDef.getResourceName());  InputStreamReader isr =\n+                new InputStreamReader(bpmnStream)) {\n \n             xtr = XML_INPUT_FACTORY.createXMLStreamReader(isr);\n             BpmnModel bpmnModel = new BpmnXMLConverter().convertToBpmnModel(xtr);\n \n             Model model = engine.getRepositoryService().newModel();\n-            ObjectNode modelObjectNode = OBJECT_MAPPER.createObjectNode();\n+            ObjectNode modelObjectNode = MAPPER.createObjectNode();\n             modelObjectNode.put(ModelDataJsonConstants.MODEL_NAME, procDef.getName());\n             model.setMetaInfo(modelObjectNode.toString());\n             model.setName(procDef.getName());"},{"sha":"e86a4f0783b2ee8592715c041be81dbb9ec318aa","filename":"ext/oidcc4ui/client-common-ui/src/main/java/org/apache/syncope/client/ui/commons/resources/oidcc4ui/CodeConsumerResource.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Foidcc4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Foidcc4ui%2FCodeConsumerResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Foidcc4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Foidcc4ui%2FCodeConsumerResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Foidcc4ui%2FCodeConsumerResource.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,7 +20,7 @@\n \n import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import javax.servlet.http.HttpServletRequest;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.ui.commons.BaseSession;\n@@ -44,8 +44,8 @@ public abstract class CodeConsumerResource extends AbstractResource {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(CodeConsumerResource.class);\n \n-    protected static final ObjectMapper MAPPER =\n-            new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n+    protected static final JsonMapper MAPPER =\n+            JsonMapper.builder().findAndAddModules().serializationInclusion(JsonInclude.Include.NON_EMPTY).build();\n \n     protected abstract Class<? extends WebPage> getLoginPageClass();\n "},{"sha":"4ba78e064e7a478ecb770f57d33f53ac8a6bbd75","filename":"ext/oidcc4ui/common-lib/src/main/java/org/apache/syncope/common/lib/oidc/OIDCLoginResponse.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Foidcc4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Foidc%2FOIDCLoginResponse.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Foidcc4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Foidc%2FOIDCLoginResponse.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Foidc%2FOIDCLoginResponse.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -22,7 +22,7 @@\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import java.io.Serializable;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.HashSet;\n import java.util.Optional;\n import java.util.Set;\n@@ -40,7 +40,7 @@ public class OIDCLoginResponse implements Serializable {\n \n     private String accessToken;\n \n-    private Date accessTokenExpiryTime;\n+    private OffsetDateTime accessTokenExpiryTime;\n \n     private final Set<Attr> attrs = new HashSet<>();\n \n@@ -76,11 +76,11 @@ public void setAccessToken(final String accessToken) {\n         this.accessToken = accessToken;\n     }\n \n-    public Date getAccessTokenExpiryTime() {\n+    public OffsetDateTime getAccessTokenExpiryTime() {\n         return accessTokenExpiryTime;\n     }\n \n-    public void setAccessTokenExpiryTime(final Date accessTokenExpiryTime) {\n+    public void setAccessTokenExpiryTime(final OffsetDateTime accessTokenExpiryTime) {\n         this.accessTokenExpiryTime = accessTokenExpiryTime;\n     }\n "},{"sha":"893496bf1f9f9bf9b3c982c64432584657b7ec49","filename":"ext/oidcc4ui/logic/src/main/java/org/apache/syncope/core/logic/OIDCC4UILogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogic.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -23,7 +23,7 @@\n import com.nimbusds.oauth2.sdk.AuthorizationCode;\n import java.lang.reflect.Method;\n import java.text.ParseException;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -241,7 +241,7 @@ public OIDCLoginResponse login(final String redirectURI, final String authorizat\n             LOG.error(\"Could not fetch authorities\", e);\n         }\n \n-        Pair<String, Date> accessTokenInfo =\n+        Pair<String, OffsetDateTime> accessTokenInfo =\n                 accessTokenDataBinder.create(loginResponse.getUsername(), claims, authorities, true);\n         loginResponse.setAccessToken(accessTokenInfo.getLeft());\n         loginResponse.setAccessTokenExpiryTime(accessTokenInfo.getRight());"},{"sha":"dcce21d9bc3643e5a118aa7d75e82dff2516ba3c","filename":"ext/saml2sp4ui/client-common-ui/src/main/java/org/apache/syncope/client/ui/commons/resources/saml2sp4ui/AssertionConsumerResource.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FAssertionConsumerResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FAssertionConsumerResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FAssertionConsumerResource.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,7 +20,7 @@\n \n import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.ui.commons.BaseSession;\n import org.apache.syncope.client.ui.commons.SAML2SP4UIConstants;\n@@ -37,8 +37,8 @@ public abstract class AssertionConsumerResource extends AbstractSAML2SP4UIResour\n \n     private static final long serialVersionUID = 3858609271031003370L;\n \n-    protected static final ObjectMapper MAPPER =\n-            new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n+    protected static final JsonMapper MAPPER =\n+            JsonMapper.builder().findAndAddModules().serializationInclusion(JsonInclude.Include.NON_EMPTY).build();\n \n     protected abstract Class<? extends WebPage> getLoginPageClass();\n "},{"sha":"7585214329456c92d5c82881914d8895b40350e3","filename":"ext/saml2sp4ui/common-lib/src/main/java/org/apache/syncope/common/lib/saml2/SAML2LoginResponse.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsaml2%2FSAML2LoginResponse.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsaml2%2FSAML2LoginResponse.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsaml2%2FSAML2LoginResponse.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -22,6 +22,7 @@\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import java.io.Serializable;\n+import java.time.OffsetDateTime;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Optional;\n@@ -40,7 +41,7 @@ public class SAML2LoginResponse implements Serializable {\n \n     private String accessToken;\n \n-    private Date accessTokenExpiryTime;\n+    private OffsetDateTime accessTokenExpiryTime;\n \n     private String username;\n \n@@ -85,13 +86,12 @@ public void setAccessToken(final String accessToken) {\n         this.accessToken = accessToken;\n     }\n \n-    public Date getAccessTokenExpiryTime() {\n-        return Optional.ofNullable(accessTokenExpiryTime).map(date -> new Date(date.getTime())).orElse(null);\n+    public OffsetDateTime getAccessTokenExpiryTime() {\n+        return accessTokenExpiryTime;\n     }\n \n-    public void setAccessTokenExpiryTime(final Date accessTokenExpiryTime) {\n-        this.accessTokenExpiryTime = Optional.ofNullable(accessTokenExpiryTime).\n-                map(date -> new Date(date.getTime())).orElse(null);\n+    public void setAccessTokenExpiryTime(final OffsetDateTime accessTokenExpiryTime) {\n+        this.accessTokenExpiryTime = accessTokenExpiryTime;\n     }\n \n     public String getUsername() {"},{"sha":"49b13699d60f5b6b984568df59b147b9af5ae67d","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/SAML2SP4UILogic.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogic.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -24,6 +24,7 @@\n import java.io.OutputStreamWriter;\n import java.lang.reflect.Method;\n import java.text.ParseException;\n+import java.time.OffsetDateTime;\n import java.util.Base64;\n import java.util.Date;\n import java.util.HashMap;\n@@ -419,7 +420,7 @@ public SAML2LoginResponse validateLoginResponse(final SAML2Response saml2Respons\n             LOG.error(\"Could not fetch authorities\", e);\n         }\n \n-        Pair<String, Date> accessTokenInfo =\n+        Pair<String, OffsetDateTime> accessTokenInfo =\n                 accessTokenDataBinder.create(loginResp.getUsername(), claims, authorities, true);\n         loginResp.setAccessToken(accessTokenInfo.getLeft());\n         loginResp.setAccessTokenExpiryTime(accessTokenInfo.getRight());"},{"sha":"19ae25950099a0a6cb060955a2b208809aa9f074","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/pages/SCIMConfPage.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.client.console.pages;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.Serializable;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n@@ -33,17 +33,13 @@\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n @ExtPage(label = \"SCIM 2.0\", icon = \"fa fa-cloud\", listEntitlement = SCIMEntitlement.SCIM_CONF_GET, priority = 500)\n public class SCIMConfPage extends BaseExtPage {\n \n-    protected static final Logger LOG = LoggerFactory.getLogger(SCIMConfPage.class);\n-\n     private static final long serialVersionUID = -8156063343062111770L;\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     private final WebMarkupContainer content;\n "},{"sha":"34e9f1bf9cabbff9b6d3820dabd1ea093877c6ac","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/panels/SCIMConfGeneralPanel.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGeneralPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGeneralPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGeneralPanel.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,10 +19,10 @@\n package org.apache.syncope.client.console.panels;\n \n import java.util.Date;\n-import org.apache.commons.lang3.time.FastDateFormat;\n+import org.apache.commons.lang3.time.DateFormatUtils;\n+import org.apache.syncope.client.ui.commons.DateOps;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDateTimeFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.scim.SCIMConf;\n import org.apache.syncope.common.lib.scim.SCIMGeneralConf;\n import org.apache.wicket.model.Model;\n@@ -48,14 +48,14 @@ public SCIMConfGeneralPanel(final String id, final SCIMConf scimConf) {\n \n                     @Override\n                     public Date getObject() {\n-                        return scimGeneralConf.getCreationDate();\n+                        return DateOps.convert(scimGeneralConf.getCreationDate());\n                     }\n \n                     @Override\n                     public void setObject(final Date object) {\n-                        scimGeneralConf.setCreationDate(object);\n+                        scimGeneralConf.setCreationDate(DateOps.convert(object));\n                     }\n-                }, FastDateFormat.getInstance(SyncopeConstants.DEFAULT_DATE_PATTERN));\n+                }, DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT);\n         creationDatePanel.setEnabled(false);\n \n         AjaxDateTimeFieldPanel lastChangeDatePanel =\n@@ -65,97 +65,97 @@ public void setObject(final Date object) {\n \n                     @Override\n                     public Date getObject() {\n-                        return scimGeneralConf.getLastChangeDate();\n+                        return DateOps.convert(scimGeneralConf.getLastChangeDate());\n                     }\n \n                     @Override\n                     public void setObject(final Date object) {\n-                        scimGeneralConf.setLastChangeDate(object);\n+                        scimGeneralConf.setLastChangeDate(DateOps.convert(object));\n                     }\n-                }, FastDateFormat.getInstance(SyncopeConstants.DEFAULT_DATE_PATTERN));\n+                }, DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT);\n         lastChangeDatePanel.setEnabled(false);\n \n         AjaxTextFieldPanel bulkMaxOperationsPanel =\n                 new AjaxTextFieldPanel(\"bulkMaxOperations\", \"bulkMaxOperations\",\n-                    new PropertyModel<>(\"bulkMaxOperations\", \"bulkMaxOperations\") {\n+                        new PropertyModel<>(\"bulkMaxOperations\", \"bulkMaxOperations\") {\n \n-                        private static final long serialVersionUID = -6427731218492117883L;\n+                    private static final long serialVersionUID = -6427731218492117883L;\n \n-                        @Override\n-                        public String getObject() {\n-                            return String.valueOf(scimGeneralConf.getBulkMaxOperations());\n-                        }\n+                    @Override\n+                    public String getObject() {\n+                        return String.valueOf(scimGeneralConf.getBulkMaxOperations());\n+                    }\n \n-                        @Override\n-                        public void setObject(final String object) {\n-                            try {\n-                                scimGeneralConf.setBulkMaxOperations(Integer.parseInt(object));\n-                            } catch (NumberFormatException e) {\n-                                LOG.error(\"Invalid value provided for 'bulkMaxOperations': {}\", object, e);\n-                            }\n+                    @Override\n+                    public void setObject(final String object) {\n+                        try {\n+                            scimGeneralConf.setBulkMaxOperations(Integer.parseInt(object));\n+                        } catch (NumberFormatException e) {\n+                            LOG.error(\"Invalid value provided for 'bulkMaxOperations': {}\", object, e);\n                         }\n-                    });\n+                    }\n+                });\n         bulkMaxOperationsPanel.setChoices(plainSchemaNames);\n \n         AjaxTextFieldPanel bulkMaxMaxPayloadSizePanel =\n                 new AjaxTextFieldPanel(\"bulkMaxMaxPayloadSize\", \"bulkMaxMaxPayloadSize\",\n-                    new PropertyModel<>(\"bulkMaxMaxPayloadSize\", \"bulkMaxMaxPayloadSize\") {\n+                        new PropertyModel<>(\"bulkMaxMaxPayloadSize\", \"bulkMaxMaxPayloadSize\") {\n \n-                        private static final long serialVersionUID = -6427731218492117883L;\n+                    private static final long serialVersionUID = -6427731218492117883L;\n \n-                        @Override\n-                        public String getObject() {\n-                            return String.valueOf(scimGeneralConf.getBulkMaxPayloadSize());\n-                        }\n+                    @Override\n+                    public String getObject() {\n+                        return String.valueOf(scimGeneralConf.getBulkMaxPayloadSize());\n+                    }\n \n-                        @Override\n-                        public void setObject(final String object) {\n-                            try {\n-                                scimGeneralConf.setBulkMaxPayloadSize(Integer.parseInt(object));\n-                            } catch (NumberFormatException e) {\n-                                LOG.error(\"Invalid value provided for 'bulkMaxPayloadSize': {}\", object, e);\n-                            }\n+                    @Override\n+                    public void setObject(final String object) {\n+                        try {\n+                            scimGeneralConf.setBulkMaxPayloadSize(Integer.parseInt(object));\n+                        } catch (NumberFormatException e) {\n+                            LOG.error(\"Invalid value provided for 'bulkMaxPayloadSize': {}\", object, e);\n                         }\n-                    });\n+                    }\n+                });\n         bulkMaxMaxPayloadSizePanel.setChoices(plainSchemaNames);\n \n         AjaxTextFieldPanel filterMaxResultsPanel =\n                 new AjaxTextFieldPanel(\"filterMaxResults\", \"filterMaxResults\",\n-                    new PropertyModel<>(\"filterMaxResults\", \"filterMaxResults\") {\n+                        new PropertyModel<>(\"filterMaxResults\", \"filterMaxResults\") {\n \n-                        private static final long serialVersionUID = -6427731218492117883L;\n+                    private static final long serialVersionUID = -6427731218492117883L;\n \n-                        @Override\n-                        public String getObject() {\n-                            return String.valueOf(scimGeneralConf.getFilterMaxResults());\n-                        }\n+                    @Override\n+                    public String getObject() {\n+                        return String.valueOf(scimGeneralConf.getFilterMaxResults());\n+                    }\n \n-                        @Override\n-                        public void setObject(final String object) {\n-                            try {\n-                                scimGeneralConf.setFilterMaxResults(Integer.parseInt(object));\n-                            } catch (NumberFormatException e) {\n-                                LOG.error(\"Invalid value provided for 'filterMaxResults': {}\", object, e);\n-                            }\n+                    @Override\n+                    public void setObject(final String object) {\n+                        try {\n+                            scimGeneralConf.setFilterMaxResults(Integer.parseInt(object));\n+                        } catch (NumberFormatException e) {\n+                            LOG.error(\"Invalid value provided for 'filterMaxResults': {}\", object, e);\n                         }\n-                    });\n+                    }\n+                });\n         filterMaxResultsPanel.setChoices(plainSchemaNames);\n \n         AjaxTextFieldPanel eTagValuePanel = new AjaxTextFieldPanel(\"eTagValue\", \"eTagValue\",\n-            new PropertyModel<>(\"eTagValue\", \"eTagValue\") {\n+                new PropertyModel<>(\"eTagValue\", \"eTagValue\") {\n \n-                private static final long serialVersionUID = -6427731218492117883L;\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public String getObject() {\n-                    return scimGeneralConf.getETagValue();\n-                }\n+            @Override\n+            public String getObject() {\n+                return scimGeneralConf.getETagValue();\n+            }\n \n-                @Override\n-                public void setObject(final String object) {\n-                    // nothing to do\n-                }\n-            });\n+            @Override\n+            public void setObject(final String object) {\n+                // nothing to do\n+            }\n+        });\n         eTagValuePanel.setEnabled(false);\n \n         add(creationDatePanel);"},{"sha":"47131e0621d729568806559d4979c0d3f8aa3a17","filename":"ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMGeneralConf.java","status":"modified","additions":15,"deletions":27,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMGeneralConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMGeneralConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMGeneralConf.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -20,7 +20,7 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import java.io.Serializable;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.Optional;\n \n import org.apache.commons.lang3.StringUtils;\n@@ -29,51 +29,39 @@ public class SCIMGeneralConf implements Serializable {\n \n     private static final long serialVersionUID = 3228349133950736647L;\n \n-    private Date creationDate = new Date();\n+    private OffsetDateTime creationDate = OffsetDateTime.now();\n \n-    private Date lastChangeDate = new Date();\n+    private OffsetDateTime lastChangeDate = OffsetDateTime.now();\n \n     private int bulkMaxOperations = 1000;\n \n     private int bulkMaxPayloadSize = 1048576;\n \n     private int filterMaxResults = 200;\n \n-    public Date getCreationDate() {\n-        if (creationDate != null) {\n-            return new Date(creationDate.getTime());\n-        }\n-        return null;\n+    public OffsetDateTime getCreationDate() {\n+        return creationDate;\n     }\n \n-    public void setCreationDate(final Date creationDate) {\n-        if (creationDate != null) {\n-            this.creationDate = new Date(creationDate.getTime());\n-        } else {\n-            this.creationDate = null;\n-        }\n+    public void setCreationDate(final OffsetDateTime creationDate) {\n+        this.creationDate = creationDate;\n     }\n \n-    public Date getLastChangeDate() {\n-        if (lastChangeDate != null) {\n-            return new Date(lastChangeDate.getTime());\n-        }\n-        return null;\n+    public OffsetDateTime getLastChangeDate() {\n+        return lastChangeDate;\n     }\n \n-    public void setLastChangeDate(final Date lastChangeDate) {\n-        if (lastChangeDate != null) {\n-            this.lastChangeDate = new Date(lastChangeDate.getTime());\n-        } else {\n-            this.lastChangeDate = null;\n-        }\n+    public void setLastChangeDate(final OffsetDateTime lastChangeDate) {\n+        this.lastChangeDate = lastChangeDate;\n     }\n \n     @JsonIgnore\n     public String getETagValue() {\n-        Date etagDate = getLastChangeDate() == null\n+        OffsetDateTime etagDate = getLastChangeDate() == null\n                 ? getCreationDate() : getLastChangeDate();\n-        return Optional.ofNullable(etagDate).map(date -> String.valueOf(date.getTime())).orElse(StringUtils.EMPTY);\n+        return Optional.ofNullable(etagDate).\n+                map(date -> String.valueOf(date.toInstant().toEpochMilli())).\n+                orElse(StringUtils.EMPTY);\n \n     }\n "},{"sha":"f300f6f92a3e6c25cc9bc540d79cede921d059f6","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMLogic.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.logic;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import com.fasterxml.jackson.databind.node.ArrayNode;\n import java.io.IOException;\n import java.lang.reflect.Method;\n@@ -67,7 +67,7 @@ public SCIMLogic(final SCIMConfManager confManager) {\n \n     protected void init() {\n         try {\n-            ObjectMapper mapper = new ObjectMapper();\n+            JsonMapper mapper = JsonMapper.builder().findAndAddModules().build();\n             JsonNode tree = mapper.readTree(SCIMLogic.class.getResourceAsStream('/' + SCHEMAS_JSON));\n             if (!tree.isArray()) {\n                 throw new IOException(\"JSON node is not a tree\");"},{"sha":"11b06833333d18b7e7c36a49908510d1c46c620c","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SCIMConfManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMConfManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMConfManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMConfManager.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.logic.scim;\n \n+import java.time.OffsetDateTime;\n import java.util.Base64;\n-import java.util.Date;\n import javax.ws.rs.core.MediaType;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.lib.scim.SCIMConf;\n@@ -80,7 +80,7 @@ public void set(final SCIMConf conf) {\n             schemaLogic.create(SchemaType.PLAIN, scimConf);\n         }\n         conf.setGeneralConf(new SCIMGeneralConf());\n-        conf.getGeneralConf().setLastChangeDate(new Date());\n+        conf.getGeneralConf().setLastChangeDate(OffsetDateTime.now());\n \n         confParamOps.set(AuthContextUtils.getDomain(),\n                 SCIMConf.KEY, Base64.getEncoder().encodeToString(POJOHelper.serialize(conf).getBytes()));"},{"sha":"2e7c2bbcf8f399f08f87a3d216b4e37ca88f5fb0","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Meta.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FMeta.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FMeta.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FMeta.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -21,7 +21,7 @@\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.Optional;\n \n import javax.ws.rs.core.EntityTag;\n@@ -33,9 +33,9 @@ public class Meta extends SCIMBean {\n \n     private final Resource resourceType;\n \n-    private final Date created;\n+    private final OffsetDateTime created;\n \n-    private final Date lastModified;\n+    private final OffsetDateTime lastModified;\n \n     @JsonIgnore\n     private final EntityTag version;\n@@ -45,8 +45,8 @@ public class Meta extends SCIMBean {\n     @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n     public Meta(\n             @JsonProperty(\"resourceType\") final Resource resourceType,\n-            @JsonProperty(\"created\") final Date created,\n-            @JsonProperty(\"lastModified\") final Date lastModified,\n+            @JsonProperty(\"created\") final OffsetDateTime created,\n+            @JsonProperty(\"lastModified\") final OffsetDateTime lastModified,\n             @JsonProperty(\"version\") final String version,\n             @JsonProperty(\"location\") final String location) {\n \n@@ -61,11 +61,11 @@ public Resource getResourceType() {\n         return resourceType;\n     }\n \n-    public Date getCreated() {\n+    public OffsetDateTime getCreated() {\n         return created;\n     }\n \n-    public Date getLastModified() {\n+    public OffsetDateTime getLastModified() {\n         return lastModified;\n     }\n \n@@ -77,5 +77,4 @@ public String getVersion() {\n     public String getLocation() {\n         return location;\n     }\n-\n }"},{"sha":"970c2fa200679fcbf400a962944b9ad1f9c51b76","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/AddETagFilter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FAddETagFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FAddETagFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FAddETagFilter.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.ext.scimv2.cxf;\n \n import java.io.IOException;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import javax.ws.rs.container.ContainerRequestContext;\n import javax.ws.rs.container.ContainerResponseContext;\n import javax.ws.rs.container.ContainerResponseFilter;\n@@ -36,15 +36,15 @@ public class AddETagFilter implements ContainerResponseFilter {\n     @Override\n     public void filter(final ContainerRequestContext reqCtx, final ContainerResponseContext resCtx) throws IOException {\n         if (resCtx.getEntityTag() == null) {\n-            Date lastModified;\n+            OffsetDateTime lastModified;\n             if (resCtx.getEntity() instanceof SCIMUser) {\n                 lastModified = ((SCIMUser) resCtx.getEntity()).getMeta().getLastModified();\n                 if (resCtx.getEntity() instanceof SCIMGroup) {\n                     lastModified = ((SCIMGroup) resCtx.getEntity()).getMeta().getLastModified();\n                 }\n \n                 if (lastModified != null) {\n-                    String etagValue = String.valueOf(lastModified.getTime());\n+                    String etagValue = String.valueOf(lastModified.toInstant().toEpochMilli());\n                     if (StringUtils.isNotBlank(etagValue)) {\n                         resCtx.getHeaders().add(HttpHeaders.ETAG, new EntityTag(etagValue, true).toString());\n                     }"},{"sha":"f15901a580c1149a492b1e3fdfec307bdc4a297e","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMJacksonJsonProvider.java","status":"removed","additions":0,"deletions":47,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f8a6b6c972b5b60584475437c10df1e699b1bcee/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMJacksonJsonProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f8a6b6c972b5b60584475437c10df1e699b1bcee/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMJacksonJsonProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMJacksonJsonProvider.java?ref=f8a6b6c972b5b60584475437c10df1e699b1bcee","patch":"@@ -1,47 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.ext.scimv2.cxf;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n-import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n-import java.text.SimpleDateFormat;\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.ext.Provider;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.ext.scimv2.api.SCIMConstants;\n-\n-@Provider\n-@Consumes(SCIMConstants.APPLICATION_SCIM_JSON)\n-@Produces(SCIMConstants.APPLICATION_SCIM_JSON)\n-public class SCIMJacksonJsonProvider extends JacksonJsonProvider {\n-\n-    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = ThreadLocal.withInitial(() -> {\n-        SimpleDateFormat sdf = new SimpleDateFormat();\n-        sdf.applyPattern(SyncopeConstants.DEFAULT_DATE_PATTERN);\n-        return sdf;\n-    });\n-\n-    public SCIMJacksonJsonProvider() {\n-        super(new ObjectMapper(), BASIC_ANNOTATIONS);\n-        _mapperConfig.getConfiguredMapper().disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n-        _mapperConfig.getConfiguredMapper().setDateFormat(DATE_FORMAT.get());\n-    }\n-}"},{"sha":"f50dce7ae3bd2267c8a0f56da798237b863a92ab","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMv2RESTCXFContext.java","status":"modified","additions":13,"deletions":7,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMv2RESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMv2RESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMv2RESTCXFContext.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,9 +18,11 @@\n  */\n package org.apache.syncope.ext.scimv2.cxf;\n \n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n+import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n import java.util.List;\n import java.util.Map;\n-\n import org.apache.cxf.Bus;\n import org.apache.cxf.endpoint.Server;\n import org.apache.cxf.jaxrs.spring.JAXRSServerFactoryBeanDefinitionParser.SpringJAXRSServerFactoryBean;\n@@ -50,8 +52,9 @@ public class SCIMv2RESTCXFContext {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public SCIMJacksonJsonProvider scimJacksonJsonProvider() {\n-        return new SCIMJacksonJsonProvider();\n+    public JacksonJsonProvider scimJacksonJsonProvider() {\n+        return new JacksonJsonProvider(JsonMapper.builder().\n+                findAndAddModules().disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS).build());\n     }\n \n     @ConditionalOnMissingBean\n@@ -68,10 +71,13 @@ public AddETagFilter scimAddETagFilter() {\n \n     @ConditionalOnMissingBean(name = \"scimv2Container\")\n     @Bean\n-    public Server scimv2Container(final ApplicationContext ctx, final Bus bus,\n-                                  final SCIMJacksonJsonProvider scimJacksonJsonProvider,\n-                                  final SCIMExceptionMapper scimExceptionMapper,\n-                                  final AddETagFilter scimAddETagFilter) {\n+    public Server scimv2Container(\n+            final ApplicationContext ctx,\n+            final Bus bus,\n+            final JacksonJsonProvider scimJacksonJsonProvider,\n+            final SCIMExceptionMapper scimExceptionMapper,\n+            final AddETagFilter scimAddETagFilter) {\n+\n         SpringJAXRSServerFactoryBean scimv2Container = new SpringJAXRSServerFactoryBean();\n         scimv2Container.setBus(bus);\n         scimv2Container.setAddress(\"/scim\");"},{"sha":"708c08220f23322ea3db354f0ef766f62fd9f9d0","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.ext.scimv2.cxf.service;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import javax.ws.rs.core.Context;\n import javax.ws.rs.core.EntityTag;\n@@ -131,13 +131,13 @@ protected Response updateResponse(final String key, final SCIMResource resource)\n     }\n \n     protected ResponseBuilder checkETag(final Resource resource, final String key) {\n-        Date lastChange = anyDAO(resource).findLastChange(key);\n+        OffsetDateTime lastChange = anyDAO(resource).findLastChange(key);\n         if (lastChange == null) {\n             throw new NotFoundException(\"Resource\" + key + \" not found\");\n         }\n \n         return messageContext.getRequest().\n-                evaluatePreconditions(new EntityTag(String.valueOf(lastChange.getTime()), true));\n+                evaluatePreconditions(new EntityTag(String.valueOf(lastChange.toInstant().toEpochMilli()), true));\n     }\n \n     @SuppressWarnings(\"unchecked\")"},{"sha":"8bc41b889202a145660c260bb42ff86d63fa53b4","filename":"fit/console-reference/pom.xml","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fconsole-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fconsole-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fpom.xml?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -121,6 +121,13 @@ under the License.\n             <timeout>300000</timeout>\n             <log>${cargo.log}</log>\n             <output>${cargo.output}</output>\n+\n+            <systemProperties>\n+              <java.security.egd>file:/dev/./urandom</java.security.egd>\n+              <java.util.secureRandomSeed>true</java.util.secureRandomSeed>\n+\n+              <h2.returnOffsetDateTime>true</h2.returnOffsetDateTime>\n+            </systemProperties>\n           </container>\n           <configuration>\n             <properties>"},{"sha":"16c0fa37dd19abf01f7383f4694a8f9849b8bd52","filename":"fit/core-reference/pom.xml","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -298,7 +298,9 @@ under the License.\n             <systemProperties>\n               <java.security.egd>file:/dev/./urandom</java.security.egd>\n               <java.util.secureRandomSeed>true</java.util.secureRandomSeed>\n-              \n+\n+              <h2.returnOffsetDateTime>true</h2.returnOffsetDateTime>\n+\n               <obscureSecretKey>${obscureSecretKey}</obscureSecretKey>\n             </systemProperties>\n             <dependencies>"},{"sha":"686aecbffbed9b9ce69074861dce09a6f3d3cd85","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DateToDateItemTransformer.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToDateItemTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToDateItemTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToDateItemTransformer.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import java.util.Calendar;\n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n@@ -39,11 +38,7 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> beforePropagation(\n         if (values == null || values.isEmpty() || values.get(0).getDateValue() == null) {\n             return ItemTransformer.super.beforePropagation(item, entity, schemaType, values);\n         } else {\n-            Calendar cal = Calendar.getInstance();\n-            cal.setTime(values.get(0).getDateValue());\n-            cal.add(Calendar.DAY_OF_MONTH, 1);\n-            values.get(0).setDateValue(cal.getTime());\n-\n+            values.get(0).setDateValue(values.get(0).getDateValue().plusDays(1));\n             return Pair.of(schemaType, values);\n         }\n     }"},{"sha":"5324419ebe67354059ba55f8e0fcf427cb3700ee","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DateToLongItemTransformer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToLongItemTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToLongItemTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToLongItemTransformer.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -38,7 +38,7 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> beforePropagation(\n         if (values == null || values.isEmpty() || values.get(0).getDateValue() == null) {\n             return ItemTransformer.super.beforePropagation(item, entity, schemaType, values);\n         } else {\n-            values.get(0).setLongValue(values.get(0).getDateValue().getTime());\n+            values.get(0).setLongValue(values.get(0).getDateValue().toInstant().toEpochMilli());\n             values.get(0).setBinaryValue(null);\n             values.get(0).setBooleanValue(null);\n             values.get(0).setDateValue(null);"},{"sha":"f4b6b7558370a6c593b864fba3a1f655af7f6af6","filename":"fit/core-reference/src/main/resources/core-oracle.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-oracle.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-oracle.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-oracle.properties?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -27,5 +27,7 @@ persistence.domain[0].auditSql=audit_oracle.sql\n persistence.domain[0].poolMaxActive=10\n persistence.domain[0].poolMinIdle=2\n \n+persistence.indexesXML=classpath:oracle_indexes.xml\n+\n provisioning.quartz.delegate=org.quartz.impl.jdbcjobstore.oracle.OracleDelegate\n provisioning.quartz.sql=tables_oracle.sql"},{"sha":"d240ea42d93ad7e174eccacf033f68d2f45fe8b2","filename":"fit/core-reference/src/main/resources/core-postgres.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-postgres.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-postgres.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-postgres.properties?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -17,7 +17,7 @@\n \n persistence.domain[0].key=Master\n persistence.domain[0].jdbcDriver=org.postgresql.Driver\n-persistence.domain[0].jdbcURL=jdbc:postgresql://${DB_CONTAINER_IP}:5432/syncope\n+persistence.domain[0].jdbcURL=jdbc:postgresql://${DB_CONTAINER_IP}:5432/syncope?stringtype=unspecified\n persistence.domain[0].dbUsername=syncope\n persistence.domain[0].dbPassword=syncope\n persistence.domain[0].databasePlatform=org.apache.openjpa.jdbc.sql.PostgresDictionary"},{"sha":"80aba2b05847d8a9efe75d6020b2eb5c5e306fe1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -22,7 +22,7 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n import com.nimbusds.jose.JWSAlgorithm;\n@@ -197,11 +197,11 @@ public void initialize(final ConfigurableApplicationContext ctx) {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractITCase.class);\n \n-    protected static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+    protected static final JsonMapper JSON_MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n-    protected static final XmlMapper XML_MAPPER = new XmlMapper();\n+    protected static final XmlMapper XML_MAPPER = XmlMapper.builder().findAndAddModules().build();\n \n-    protected static final YAMLMapper YAML_MAPPER = new YAMLMapper();\n+    protected static final YAMLMapper YAML_MAPPER = YAMLMapper.builder().findAndAddModules().build();\n \n     protected static final String ADMIN_UNAME = \"admin\";\n \n@@ -385,7 +385,7 @@ public void initialize(final ConfigurableApplicationContext ctx) {\n \n     @BeforeAll\n     public static void securitySetup() {\n-        try (InputStream propStream = AbstractITCase.class.getResourceAsStream(\"/core.properties\")) {\n+        try ( InputStream propStream = AbstractITCase.class.getResourceAsStream(\"/core.properties\")) {\n             Properties props = new Properties();\n             props.load(propStream);\n "},{"sha":"b3d46bde4a4efab0bb16641d22665ecaf28f8d3d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AbstractTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -42,7 +42,7 @@\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n-import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.core.provisioning.java.job.notification.NotificationJob;\n@@ -99,7 +99,7 @@ protected static ExecTO execTask(\n \n         AtomicReference<TaskTO> taskTO = new AtomicReference<>(taskService.read(type, taskKey, true));\n         int preSyncSize = taskTO.get().getExecutions().size();\n-        ExecTO execution = taskService.execute(new ExecuteQuery.Builder().key(taskKey).dryRun(dryRun).build());\n+        ExecTO execution = taskService.execute(new ExecSpecs.Builder().key(taskKey).dryRun(dryRun).build());\n         assertEquals(initialStatus, execution.getStatus());\n         assertNotNull(execution.getExecutor());\n "},{"sha":"451c16f2cef6ef87e05e107469db5cad7e169a01","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuditITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -36,7 +36,7 @@\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.nio.file.StandardOpenOption;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Properties;\n@@ -239,7 +239,7 @@ public void findByConnector() throws JsonProcessingException {\n         entries = query(query, MAX_WAIT_SECONDS);\n         assertEquals(pre + 1, entries.size());\n \n-        ConnInstanceTO restore = OBJECT_MAPPER.readValue(entries.get(0).getBefore(), ConnInstanceTO.class);\n+        ConnInstanceTO restore = JSON_MAPPER.readValue(entries.get(0).getBefore(), ConnInstanceTO.class);\n         connectorService.update(restore);\n \n         ldapConn = connectorService.read(connectorKey, null);\n@@ -381,7 +381,7 @@ public void saveAuditEvent() {\n                 AuditElements.AUTHENTICATION_CATEGORY.toUpperCase(),\n                 \"validate\",\n                 AuditElements.Result.SUCCESS));\n-        auditEntry.setDate(new Date());\n+        auditEntry.setDate(OffsetDateTime.now());\n         auditEntry.setBefore(UUID.randomUUID().toString());\n         auditEntry.setOutput(UUID.randomUUID().toString());\n         assertDoesNotThrow(() -> auditService.create(auditEntry));\n@@ -408,7 +408,7 @@ public void saveAuthEvent() {\n                 \"AuthenticationEvent\",\n                 \"auth\",\n                 AuditElements.Result.SUCCESS));\n-        auditEntry.setDate(new Date());\n+        auditEntry.setDate(OffsetDateTime.now());\n         auditEntry.setBefore(UUID.randomUUID().toString());\n         auditEntry.setOutput(UUID.randomUUID().toString());\n         assertDoesNotThrow(() -> auditService.create(auditEntry));"},{"sha":"8e62b10e7758271dfd7d0a4f4231422f8b46d4a2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/BatchITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -103,7 +103,7 @@ private static String requestBody(final String boundary) throws JsonProcessingEx\n         UserUR userUR = new UserUR();\n         userUR.setKey(userCR.getUsername());\n         userUR.setRealm(new StringReplacePatchItem.Builder().value(\"/odd\").build());\n-        String updateUserPayload = OBJECT_MAPPER.writeValueAsString(userUR);\n+        String updateUserPayload = JSON_MAPPER.writeValueAsString(userUR);\n \n         BatchRequestItem updateUser = new BatchRequestItem();\n         updateUser.setMethod(HttpMethod.PATCH);\n@@ -183,7 +183,7 @@ private static void check(final List<BatchResponseItem> resItems) throws IOExcep\n         assertEquals(Response.Status.OK.getStatusCode(), resItems.get(5).getStatus());\n         assertNotNull(resItems.get(5).getHeaders().get(RESTHeaders.DOMAIN));\n         assertEquals(MediaType.APPLICATION_JSON, resItems.get(5).getHeaders().get(HttpHeaders.CONTENT_TYPE).get(0));\n-        group = OBJECT_MAPPER.readValue(\n+        group = JSON_MAPPER.readValue(\n                 resItems.get(5).getContent(), new TypeReference<>() {\n             });\n         assertNotNull(group);"},{"sha":"9cc447902acde2a232ba737793227dc7e316f62a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DelegationITCase.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDelegationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDelegationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDelegationITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -25,7 +25,7 @@\n import static org.junit.jupiter.api.Assertions.fail;\n \n import java.security.AccessControlException;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -88,8 +88,8 @@ public void crudAsAdmin() {\n             assertEquals(ClientExceptionType.InvalidEntity, e.getType());\n         }\n \n-        delegation.setStart(new Date());\n-        delegation.setEnd(new Date(System.currentTimeMillis() - 1000));\n+        delegation.setStart(OffsetDateTime.now());\n+        delegation.setEnd(OffsetDateTime.now().minusSeconds(1));\n \n         // end before start -> FAIL\n         try {\n@@ -99,7 +99,7 @@ public void crudAsAdmin() {\n             assertEquals(ClientExceptionType.InvalidEntity, e.getType());\n         }\n \n-        delegation.setEnd(new Date());\n+        delegation.setEnd(OffsetDateTime.now());\n \n         // 2. create delegation\n         delegation = create(delegationService, delegation);\n@@ -157,7 +157,7 @@ public void crudAsUser() {\n         DelegationTO delegation = new DelegationTO();\n         delegation.setDelegating(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\");\n         delegation.setDelegated(delegated.getKey());\n-        delegation.setStart(new Date());\n+        delegation.setStart(OffsetDateTime.now());\n \n         DelegationService uds = clientFactory.create(delegating.getUsername(), \"password123\").\n                 getService(DelegationService.class);\n@@ -178,7 +178,7 @@ public void crudAsUser() {\n         assertNull(delegation.getEnd());\n \n         // 3. update and read delegation\n-        delegation.setEnd(new Date());\n+        delegation.setEnd(OffsetDateTime.now());\n         uds.update(delegation);\n \n         delegation = uds.read(delegation.getKey());\n@@ -213,7 +213,7 @@ public void operations() {\n         DelegationTO delegation = new DelegationTO();\n         delegation.setDelegating(\"bellini\");\n         delegation.setDelegated(\"rossini\");\n-        delegation.setStart(new Date());\n+        delegation.setStart(OffsetDateTime.now());\n         delegation = create(delegationService, delegation);\n         assertNotNull(delegation.getKey());\n "},{"sha":"1248d6cb81410adee106b8f36272222427d01f7b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DynRealmITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -240,7 +240,7 @@ private static ArrayNode fetchDynRealmsFromElasticsearch(final String userKey) t\n                 send();\n         assertEquals(HttpStatus.OK_200, response.getStatus());\n \n-        return (ArrayNode) OBJECT_MAPPER.readTree(response.getContent()).\n+        return (ArrayNode) JSON_MAPPER.readTree(response.getContent()).\n                 get(\"hits\").get(\"hits\").get(0).get(\"_source\").get(\"dynRealms\");\n     }\n "},{"sha":"ad7e49baaab34b5d58afb36533d0cd266de89704","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -320,7 +320,7 @@ public void updateAsGroupOwner() {\n         assertNotNull(groupTO.getLastChangeDate());\n         assertEquals(\"admin\", groupTO.getCreator());\n         assertEquals(\"puccini\", groupTO.getLastModifier());\n-        assertTrue(groupTO.getCreationDate().before(groupTO.getLastChangeDate()));\n+        assertTrue(groupTO.getCreationDate().isBefore(groupTO.getLastChangeDate()));\n     }\n \n     @Test"},{"sha":"f11373e999720113246531f3133e6b736389d0e6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/JWTITCase.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -39,7 +39,8 @@\n import java.security.NoSuchAlgorithmException;\n import java.security.spec.InvalidKeySpecException;\n import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n+import java.time.OffsetDateTime;\n+import java.time.temporal.ChronoUnit;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n@@ -101,8 +102,8 @@ public void getJWTToken() throws ParseException, JOSEException {\n         Date tokenDate = jwt.getJWTClaimsSet().getExpirationTime();\n         assertNotNull(tokenDate);\n \n-        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssXXX\");\n-        Date parsedDate = dateFormat.parse(expiration);\n+        Date parsedDate = new Date(OffsetDateTime.parse(expiration).\n+                truncatedTo(ChronoUnit.SECONDS).toInstant().toEpochMilli());\n \n         assertEquals(tokenDate, parsedDate);\n         assertTrue(parsedDate.after(now));"},{"sha":"d0e9f66318db5dac5fca6479deab40db0c321e70","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LinkedAccountITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -459,7 +459,7 @@ public void pull() {\n         WebClient webClient = WebClient.create(BUILD_TOOLS_ADDRESS + \"/rest/users\").\n                 accept(MediaType.APPLICATION_JSON_TYPE).type(MediaType.APPLICATION_JSON_TYPE);\n \n-        ObjectNode user = OBJECT_MAPPER.createObjectNode();\n+        ObjectNode user = JSON_MAPPER.createObjectNode();\n         user.put(\"username\", \"linkedaccount1\");\n         user.put(\"password\", \"Password123\");\n         user.put(\"firstName\", \"Pasquale\");\n@@ -471,7 +471,7 @@ public void pull() {\n         String user1Key = StringUtils.substringAfterLast(response.getHeaderString(HttpHeaders.LOCATION), \"/\");\n         assertNotNull(user1Key);\n \n-        user = OBJECT_MAPPER.createObjectNode();\n+        user = JSON_MAPPER.createObjectNode();\n         user.put(\"username\", \"vivaldi\");\n         user.put(\"password\", \"Password123\");\n         user.put(\"firstName\", \"Giovannino\");\n@@ -483,7 +483,7 @@ public void pull() {\n         String user2Key = StringUtils.substringAfterLast(response.getHeaderString(HttpHeaders.LOCATION), \"/\");\n         assertNotNull(user2Key);\n \n-        user = OBJECT_MAPPER.createObjectNode();\n+        user = JSON_MAPPER.createObjectNode();\n         user.put(\"username\", \"not.vivaldi\");\n         user.put(\"password\", \"Password123\");\n         user.put(\"email\", \"not.vivaldi@syncope.org\");\n@@ -537,12 +537,12 @@ public void pull() {\n             response = webClient.path(user1Key).delete();\n             assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n \n-            user = OBJECT_MAPPER.createObjectNode();\n+            user = JSON_MAPPER.createObjectNode();\n             user.put(\"username\", \"linkedaccount2\");\n             response = webClient.replacePath(user2Key).put(user.toString());\n             assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n \n-            user = OBJECT_MAPPER.createObjectNode();\n+            user = JSON_MAPPER.createObjectNode();\n             user.put(\"status\", \"INACTIVE\");\n             response = webClient.replacePath(user3Key).put(user.toString());\n             assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());"},{"sha":"375088c9b4bce7642e940f4d9e7bf637ce177a30","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -42,7 +42,7 @@\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.core.provisioning.java.job.notification.NotificationJob;\n@@ -184,7 +184,7 @@ public void issueSYNCOPE192() throws Exception {\n         assertNotNull(taskTO.getNotification());\n         assertTrue(taskTO.getExecutions().isEmpty());\n \n-        taskService.execute(new ExecuteQuery.Builder().key(taskTO.getKey()).build());\n+        taskService.execute(new ExecSpecs.Builder().key(taskTO.getKey()).build());\n \n         try {\n             Thread.sleep(5);"},{"sha":"aaf1134cd0513e312ca0acc8298c01d1f342e2af","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/OpenAPIITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOpenAPIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOpenAPIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOpenAPIITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -39,7 +39,7 @@ public void openapi() throws IOException {\n         Response response = webClient.get();\n         assertEquals(200, response.getStatus());\n \n-        JsonNode tree = OBJECT_MAPPER.readTree((InputStream) response.getEntity());\n+        JsonNode tree = JSON_MAPPER.readTree((InputStream) response.getEntity());\n         assertNotNull(tree);\n \n         JsonNode info = tree.get(\"info\");"},{"sha":"3b36ed77e0ca18e065147234ade0e870501c9f4e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":19,"deletions":22,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -27,9 +27,10 @@\n \n import java.io.IOException;\n import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n+import java.time.LocalDate;\n+import java.time.OffsetDateTime;\n+import java.time.format.DateTimeFormatter;\n import java.util.ArrayList;\n-import java.util.Calendar;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n@@ -82,11 +83,12 @@\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n-import org.apache.syncope.common.rest.api.beans.ExecQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n+import org.apache.syncope.common.rest.api.beans.ExecListQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.apache.syncope.fit.core.reference.DateToDateItemTransformer;\n import org.apache.syncope.fit.core.reference.DateToLongItemTransformer;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -281,10 +283,10 @@ public void purgePropagations() {\n             assertNotNull(e);\n         }\n \n-        Calendar oneWeekAgo = Calendar.getInstance();\n-        oneWeekAgo.add(Calendar.WEEK_OF_YEAR, -1);\n+        OffsetDateTime oneWeekAgo = OffsetDateTime.now().minusWeeks(1);\n         Response response = taskService.purgePropagations(\n-                oneWeekAgo.getTime(), List.of(ExecStatus.SUCCESS),\n+                oneWeekAgo,\n+                List.of(ExecStatus.SUCCESS),\n                 List.of(RESOURCE_NAME_WS1));\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n \n@@ -300,8 +302,7 @@ public void purgePropagations() {\n                 .page(0).size(10)\n                 .build()).getResult().isEmpty());\n         // delete all remaining SUCCESS tasks\n-        response = taskService.purgePropagations(\n-                oneWeekAgo.getTime(), List.of(ExecStatus.SUCCESS), List.of());\n+        response = taskService.purgePropagations(oneWeekAgo, List.of(ExecStatus.SUCCESS), List.of());\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n \n         deleted = response.readEntity(new GenericType<List<PropagationTaskTO>>() {\n@@ -312,9 +313,9 @@ public void purgePropagations() {\n     @Test\n     public void issueSYNCOPE741() {\n         for (int i = 0; i < 3; i++) {\n-            taskService.execute(new ExecuteQuery.Builder().\n+            taskService.execute(new ExecSpecs.Builder().\n                     key(\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\").build());\n-            taskService.execute(new ExecuteQuery.Builder().\n+            taskService.execute(new ExecSpecs.Builder().\n                     key(\"316285cc-ae52-4ea2-a33b-7355e189ac3f\").build());\n         }\n         try {\n@@ -350,7 +351,7 @@ public void issueSYNCOPE741() {\n         assertFalse(task.getExecutions().isEmpty());\n \n         // check list executions\n-        PagedResult<ExecTO> execs = taskService.listExecutions(new ExecQuery.Builder().key(\n+        PagedResult<ExecTO> execs = taskService.listExecutions(new ExecListQuery.Builder().key(\n                 \"1e697572-b896-484c-ae7f-0c8f63fcbc6c\").\n                 page(1).size(2).build());\n         assertTrue(execs.getTotalCount() >= execs.getResult().size());\n@@ -436,7 +437,7 @@ public void issueSYNCOPE1430() throws ParseException {\n             loginDateForJexlAsLong.setPurpose(MappingPurpose.PROPAGATION);\n             loginDateForJexlAsLong.setIntAttrName(\"loginDate\");\n             loginDateForJexlAsLong.setExtAttrName(\"employeeNumber\");\n-            loginDateForJexlAsLong.setPropagationJEXLTransformer(\"value.getTime()\");\n+            loginDateForJexlAsLong.setPropagationJEXLTransformer(\"value.toInstant().toEpochMilli()\");\n             provision.getMapping().add(loginDateForJexlAsLong);\n \n             // Date -> string (JEXL expression)\n@@ -489,28 +490,24 @@ public void issueSYNCOPE1430() throws ParseException {\n                         POJOHelper.deserialize(tasks.getResult().get(0).getAttributes(), Attribute[].class)));\n             }\n \n-            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n-\n-            Calendar loginDate = Calendar.getInstance();\n-            loginDate.setTime(sdf.parse(user.getPlainAttr(\"loginDate\").get().getValues().get(0)));\n+            OffsetDateTime loginDate = LocalDate.parse(user.getPlainAttr(\"loginDate\").get().getValues().get(0)).\n+                    atStartOfDay(FormatUtils.DEFAULT_OFFSET).toOffsetDateTime();\n \n             Attribute employeeNumber = AttributeUtil.find(\"employeeNumber\", propagationAttrs);\n             assertNotNull(employeeNumber);\n-            assertEquals(String.valueOf(loginDate.getTimeInMillis()), employeeNumber.getValue().get(0));\n+            assertEquals(String.valueOf(loginDate.toInstant().toEpochMilli()), employeeNumber.getValue().get(0));\n \n             Attribute street = AttributeUtil.find(\"street\", propagationAttrs);\n             assertNotNull(street);\n             assertEquals(loginDate.toInstant().toString().split(\"T\")[0].replace(\"-\", \"\"), street.getValue().get(0));\n \n             Attribute st = AttributeUtil.find(\"st\", propagationAttrs);\n             assertNotNull(st);\n-            assertEquals(loginDate.getTimeInMillis(), st.getValue().get(0));\n-\n-            loginDate.add(Calendar.DAY_OF_MONTH, 1);\n+            assertEquals(loginDate.toInstant().toEpochMilli(), st.getValue().get(0));\n \n             Attribute carLicense = AttributeUtil.find(\"carLicense\", propagationAttrs);\n             assertNotNull(carLicense);\n-            assertEquals(sdf.format(loginDate.getTime()), carLicense.getValue().get(0));\n+            assertEquals(DateTimeFormatter.ISO_LOCAL_DATE.format(loginDate.plusDays(1)), carLicense.getValue().get(0));\n         } finally {\n             try {\n                 resourceService.delete(ldap.getKey());"},{"sha":"cf031a44f93f99e2a555bb7be2c163d8493f971f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -28,7 +28,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import java.util.Set;\n import java.util.concurrent.TimeUnit;\n@@ -53,7 +53,7 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.apache.syncope.common.rest.api.beans.ExecDeleteQuery;\n-import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Assertions;\n@@ -64,7 +64,7 @@ public class ReportITCase extends AbstractITCase {\n     protected static String execReport(final String reportKey) {\n         AtomicReference<ReportTO> reportTO = new AtomicReference<>(reportService.read(reportKey));\n         int preExecSize = reportTO.get().getExecutions().size();\n-        ExecTO execution = reportService.execute(new ExecuteQuery.Builder().key(reportKey).build());\n+        ExecTO execution = reportService.execute(new ExecSpecs.Builder().key(reportKey).build());\n         assertNotNull(execution.getExecutor());\n \n         await().atMost(MAX_WAIT_SECONDS, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n@@ -261,7 +261,7 @@ public void executeAndExport() throws IOException {\n \n     @Test\n     public void deleteExecutions() throws IOException {\n-        Date start = new Date();\n+        OffsetDateTime start = OffsetDateTime.now();\n         try {\n             Thread.sleep(1000);\n         } catch (InterruptedException e) {\n@@ -281,7 +281,7 @@ public void deleteExecutions() throws IOException {\n             Thread.sleep(1000);\n         } catch (InterruptedException e) {\n         }\n-        Date end = new Date();\n+        OffsetDateTime end = OffsetDateTime.now();\n \n         Response response = reportService.deleteExecutions(\n                 new ExecDeleteQuery.Builder().key(reportTO.getKey()).startedAfter(start).endedBefore(end).build());\n@@ -355,7 +355,7 @@ public void issueSYNCOPE102() throws IOException {\n \n         // Execute (multiple requests)\n         for (int i = 0; i < 10; i++) {\n-            assertNotNull(reportService.execute(new ExecuteQuery.Builder().key(reportKey).build()));\n+            assertNotNull(reportService.execute(new ExecSpecs.Builder().key(reportKey).build()));\n         }\n \n         // Wait for one execution"},{"sha":"0129ea654c38d662a7d2c9c8f01dddb892d27255","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SCIMITCase.java","status":"modified","additions":12,"deletions":13,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -26,19 +26,22 @@\n import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import com.fasterxml.jackson.databind.node.ArrayNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n import java.io.IOException;\n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.temporal.ChronoUnit;\n import java.util.List;\n import java.util.UUID;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.scim.SCIMComplexConf;\n import org.apache.syncope.common.lib.scim.SCIMConf;\n import org.apache.syncope.common.lib.scim.SCIMUserConf;\n@@ -61,7 +64,6 @@\n import org.apache.syncope.ext.scimv2.api.data.Value;\n import org.apache.syncope.ext.scimv2.api.type.ErrorType;\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n-import org.apache.syncope.ext.scimv2.cxf.SCIMJacksonJsonProvider;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n@@ -74,12 +76,6 @@ public class SCIMITCase extends AbstractITCase {\n \n     private static Boolean ENABLED;\n \n-    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = ThreadLocal.withInitial(() -> {\n-        SimpleDateFormat sdf = new SimpleDateFormat();\n-        sdf.applyPattern(SyncopeConstants.DEFAULT_DATE_PATTERN);\n-        return sdf;\n-    });\n-\n     static {\n         CONF = new SCIMConf();\n         CONF.setUserConf(new SCIMUserConf());\n@@ -117,7 +113,10 @@ public static void isSCIMAvailable() {\n     }\n \n     private static WebClient webClient() {\n-        return WebClient.create(SCIM_ADDRESS, List.of(new SCIMJacksonJsonProvider())).\n+        return WebClient.create(\n+                SCIM_ADDRESS,\n+                List.of(new JacksonJsonProvider(JsonMapper.builder().\n+                        findAndAddModules().disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS).build()))).\n                 accept(SCIMConstants.APPLICATION_SCIM_JSON_TYPE).\n                 type(SCIMConstants.APPLICATION_SCIM_JSON_TYPE).\n                 header(HttpHeaders.AUTHORIZATION, \"Bearer \" + adminClient.getJWT());\n@@ -314,9 +313,9 @@ public void search() {\n                 readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n                 }).getEntity();\n \n-        Date value = new Date(newUser.getCreationDate().getTime() - 1000);\n+        OffsetDateTime value = newUser.getCreationDate().minusSeconds(1).truncatedTo(ChronoUnit.SECONDS);\n         response = webClient().path(\"Users\").query(\"filter\", \"meta.created gt \\\"\"\n-                + DATE_FORMAT.get().format(value) + '\"').get();\n+                + DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(value) + '\"').get();\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertEquals(\n                 SCIMConstants.APPLICATION_SCIM_JSON,"},{"sha":"ba01e690e3d3a662c6985837a4b1906445c7cec2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SchedTaskITCase.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -26,14 +26,13 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import java.util.Set;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Collectors;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.lang3.time.DateUtils;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n@@ -45,8 +44,8 @@\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n-import org.apache.syncope.common.rest.api.beans.ExecQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n+import org.apache.syncope.common.rest.api.beans.ExecListQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.fit.core.reference.TestSampleJobDelegate;\n@@ -106,12 +105,12 @@ public void deferred() {\n         String taskKey = task.getKey();\n         assertNotNull(task);\n \n-        Date initial = new Date();\n-        Date later = DateUtils.addSeconds(initial, 2);\n+        OffsetDateTime initial = OffsetDateTime.now();\n+        OffsetDateTime later = initial.plusSeconds(2);\n \n         AtomicReference<TaskTO> taskTO = new AtomicReference<>(task);\n         int preSyncSize = taskTO.get().getExecutions().size();\n-        ExecTO execution = taskService.execute(new ExecuteQuery.Builder().key(task.getKey()).startAt(later).build());\n+        ExecTO execution = taskService.execute(new ExecSpecs.Builder().key(task.getKey()).startAt(later).build());\n         assertNotNull(execution.getExecutor());\n \n         await().atMost(MAX_WAIT_SECONDS, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n@@ -124,11 +123,11 @@ public void deferred() {\n         });\n \n         PagedResult<ExecTO> execs =\n-                taskService.listExecutions(new ExecQuery.Builder().key(task.getKey()).build());\n+                taskService.listExecutions(new ExecListQuery.Builder().key(task.getKey()).build());\n         assertEquals(1, execs.getTotalCount());\n-        assertTrue(execs.getResult().get(0).getStart().after(initial));\n+        assertTrue(execs.getResult().get(0).getStart().isAfter(initial));\n         // round 1 sec for safety\n-        assertTrue(DateUtils.addSeconds(execs.getResult().get(0).getStart(), 1).after(later));\n+        assertTrue(execs.getResult().get(0).getStart().plusSeconds(1).isAfter(later));\n     }\n \n     @Test"},{"sha":"6602e575236de11cd8a0e280a58737482d60a6b4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -817,18 +817,14 @@ public void issueSYNCOPE1648() {\n \n     @Test\n     public void issueSYNCOPE1663() {\n-        try {\n-            userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                    fiql(\"lastChangeDate=ge=2022-01-25T17:00:06Z\").build());\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidSearchParameters, e.getType());\n-            assertTrue(e.getElements().stream().\n-                    anyMatch(elem -> elem.contains(\"Could not validate expression 2022-01-25T17:00:06Z\")));\n-        }\n+        PagedResult<UserTO> matching1 = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(\"lastChangeDate=ge=2022-01-25T17:00:06Z\").build());\n+        assertNotNull(matching1);\n+        assertFalse(matching1.getResult().isEmpty());\n \n-        PagedResult<UserTO> matching = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matching2 = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(\"lastChangeDate=ge=2022-01-25T17:00:06+0000\").build());\n-        assertNotNull(matching);\n+        assertNotNull(matching2);\n+        assertFalse(matching2.getResult().isEmpty());\n     }\n }"},{"sha":"3d85e73cfd459d923d61e7a22383203c2131258a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -29,8 +29,10 @@\n \n import java.io.IOException;\n import java.security.AccessControlException;\n+import java.time.OffsetDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.temporal.ChronoUnit;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -40,7 +42,6 @@\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.RandomStringUtils;\n-import org.apache.commons.lang3.time.DateFormatUtils;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.lib.SyncopeClient;\n@@ -116,7 +117,7 @@ public static UserCR getSample(final String email) {\n                 plainAttr(attr(\"ctype\", \"a type\")).\n                 plainAttr(attr(\"userId\", email)).\n                 plainAttr(attr(\"email\", email)).\n-                plainAttr(attr(\"loginDate\", DateFormatUtils.ISO_8601_EXTENDED_DATETIME_FORMAT.format(new Date()))).\n+                plainAttr(attr(\"loginDate\", DateTimeFormatter.ISO_LOCAL_DATE.format(OffsetDateTime.now()))).\n                 build();\n     }\n \n@@ -309,7 +310,7 @@ public void create() {\n         assertNotNull(userTO.getCreator());\n         assertNotNull(userTO.getLastChangeDate());\n         assertNotNull(userTO.getLastModifier());\n-        assertTrue(userTO.getLastChangeDate().getTime() - userTO.getCreationDate().getTime() < 3000);\n+        assertTrue(userTO.getLastChangeDate().toEpochSecond() - userTO.getCreationDate().toEpochSecond() < 3);\n \n         assertFalse(userTO.getPlainAttrs().contains(attrWithInvalidSchemaTO));\n \n@@ -577,7 +578,7 @@ public void update() {\n         assertNotNull(userTO.getCreator());\n         assertNotNull(userTO.getLastChangeDate());\n         assertNotNull(userTO.getLastModifier());\n-        assertTrue(userTO.getCreationDate().before(userTO.getLastChangeDate()));\n+        assertTrue(userTO.getCreationDate().isBefore(userTO.getLastChangeDate()));\n \n         assertEquals(1, userTO.getMemberships().size());\n         assertFalse(userTO.getDerAttrs().isEmpty());\n@@ -879,8 +880,8 @@ public void async() {\n         userCR.getResources().add(RESOURCE_NAME_LDAP);\n \n         ProvisioningResult<UserTO> result = asyncService.create(userCR).readEntity(\n-            new GenericType<>() {\n-            });\n+                new GenericType<>() {\n+        });\n         assertNotNull(result);\n         verifyAsyncResult(result.getPropagationStatuses());\n \n@@ -891,14 +892,14 @@ public void async() {\n                 value(\"password321\").build());\n \n         result = asyncService.update(userUR).readEntity(\n-            new GenericType<>() {\n-            });\n+                new GenericType<>() {\n+        });\n         assertNotNull(result);\n         verifyAsyncResult(result.getPropagationStatuses());\n \n         result = asyncService.delete(result.getEntity().getKey()).readEntity(\n-            new GenericType<>() {\n-            });\n+                new GenericType<>() {\n+        });\n         assertNotNull(result);\n         verifyAsyncResult(result.getPropagationStatuses());\n     }"},{"sha":"7c4aa82b00931074b96217a5a5c6fad00d462ebf","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/wa/GoogleMfaAuthAccountITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthAccountITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthAccountITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthAccountITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -23,7 +23,7 @@\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n \n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import java.util.UUID;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -38,7 +38,7 @@ public class GoogleMfaAuthAccountITCase extends AbstractITCase {\n \n     private static GoogleMfaAuthAccount createGoogleMfaAuthAccount() {\n         return new GoogleMfaAuthAccount.Builder()\n-                .registrationDate(new Date())\n+                .registrationDate(OffsetDateTime.now())\n                 .scratchCodes(List.of(1, 2, 3, 4, 5))\n                 .secretKey(SecureRandomUtils.generateRandomUUID().toString())\n                 .validationCode(123456)"},{"sha":"87995c64691b4daf12bfdf8adf7573ec1ee380f7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/wa/GoogleMfaAuthTokenITCase.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthTokenITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthTokenITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthTokenITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -25,9 +25,7 @@\n import static org.junit.jupiter.api.Assertions.assertThrows;\n \n import java.security.SecureRandom;\n-import java.time.LocalDateTime;\n-import java.time.ZoneId;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.UUID;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AuthProfileTO;\n@@ -43,12 +41,12 @@ public class GoogleMfaAuthTokenITCase extends AbstractITCase {\n \n     private static GoogleMfaAuthToken createGoogleMfaAuthToken() {\n         int token = SECURE_RANDOM.ints(100_000, 999_999).findFirst().getAsInt();\n-        return new GoogleMfaAuthToken.Builder().token(token).issueDate(new Date()).build();\n+        return new GoogleMfaAuthToken.Builder().token(token).issueDate(OffsetDateTime.now()).build();\n     }\n \n     @BeforeEach\n     public void setup() {\n-        googleMfaAuthTokenService.delete((Date) null);\n+        googleMfaAuthTokenService.delete((OffsetDateTime) null);\n     }\n \n     @Test\n@@ -110,9 +108,8 @@ public void deleteByOwnerAndToken() {\n     @Test\n     public void deleteByDate() {\n         String owner = UUID.randomUUID().toString();\n-        Date dateTime = Date.from(LocalDateTime.now().minusDays(1).atZone(ZoneId.systemDefault()).toInstant());\n         createGoogleMfaAuthToken();\n-        googleMfaAuthTokenService.delete(dateTime);\n+        googleMfaAuthTokenService.delete(OffsetDateTime.now().minusDays(1));\n         assertTrue(googleMfaAuthTokenService.read(owner).getResult().isEmpty());\n         assertEquals(0, googleMfaAuthTokenService.read(owner).getTotalCount());\n     }"},{"sha":"1197e1cdbf93c54fb933bdc4d53b3d327d0d4a71","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/wa/U2FRegistrationITCase.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FU2FRegistrationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FU2FRegistrationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FU2FRegistrationITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -22,9 +22,7 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n-import java.time.LocalDate;\n-import java.time.ZoneId;\n-import java.util.Date;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import java.util.UUID;\n import org.apache.syncope.common.lib.wa.U2FDevice;\n@@ -37,7 +35,7 @@ public class U2FRegistrationITCase extends AbstractITCase {\n \n     private static U2FDevice createDeviceRegistration() {\n         return new U2FDevice.Builder()\n-                .issueDate(new Date())\n+                .issueDate(OffsetDateTime.now())\n                 .id(System.currentTimeMillis())\n                 .record(\"{\\\"keyHandle\\\":\\\"2_QYgDSPYcOgYBGBe8c9PVCunjigbD-3o5HcliXhu-Up_GKckYMxxVF6AgSPWubqfWy8WmJNDYQE\"\n                         + \"J1QKZe343Q\\\",\"\n@@ -64,10 +62,10 @@ public void count() {\n         U2FDevice device = createDeviceRegistration();\n         u2fRegistrationService.create(owner, device);\n \n-        List<U2FDevice> devices = u2fRegistrationService.search(\n-                new U2FDeviceQuery.Builder().owner(owner).expirationDate(\n-                        Date.from(LocalDate.now().minusDays(1).atStartOfDay(ZoneId.systemDefault()).toInstant())).\n-                        build()).getResult();\n+        List<U2FDevice> devices = u2fRegistrationService.search(new U2FDeviceQuery.Builder().\n+                owner(owner).\n+                expirationDate(OffsetDateTime.now().minusDays(1)).\n+                build()).getResult();\n         assertEquals(1, devices.size());\n \n         u2fRegistrationService.delete(new U2FDeviceQuery.Builder().id(device.getId()).build());\n@@ -86,8 +84,7 @@ public void delete() {\n         assertTrue(u2fRegistrationService.search(\n                 new U2FDeviceQuery.Builder().owner(owner).build()).getResult().isEmpty());\n \n-        Date date = Date.from(LocalDate.now().plusDays(1)\n-                .atStartOfDay(ZoneId.systemDefault()).toInstant());\n+        OffsetDateTime date = OffsetDateTime.now().plusDays(1);\n \n         u2fRegistrationService.delete(new U2FDeviceQuery.Builder().expirationDate(date).build());\n "},{"sha":"c59a24df8ad7b58d7d00ead37839a8d3e8e3087f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/enduser/AbstractEnduserITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAbstractEnduserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAbstractEnduserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAbstractEnduserITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -26,7 +26,8 @@\n import com.giffing.wicket.spring.boot.starter.configuration.extensions.core.settings.general.GeneralSettingsProperties;\n import com.giffing.wicket.spring.boot.starter.configuration.extensions.external.spring.boot.actuator.WicketEndpointRepositoryDefault;\n import java.io.InputStream;\n-import org.apache.commons.lang3.time.DateFormatUtils;\n+import java.time.OffsetDateTime;\n+import java.time.format.DateTimeFormatter;\n import org.apache.syncope.client.enduser.SyncopeWebApplication;\n import org.apache.syncope.client.enduser.commons.PreviewUtils;\n import org.apache.syncope.client.enduser.init.ClassPathScanImplementationLookup;\n@@ -53,7 +54,6 @@\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import java.util.Date;\n import java.util.List;\n import java.util.Locale;\n import java.util.Properties;\n@@ -144,7 +144,7 @@ public static void setUp() {\n         ctx.register(SyncopeWebApplication.class);\n \n         String springActiveProfiles = null;\n-        try (InputStream propStream = AbstractConsoleITCase.class.getResourceAsStream(\"/test.properties\")) {\n+        try ( InputStream propStream = AbstractConsoleITCase.class.getResourceAsStream(\"/test.properties\")) {\n             Properties props = new Properties();\n             props.load(propStream);\n \n@@ -194,7 +194,7 @@ public static void restSetup() {\n                 plainAttr(attr(\"ctype\", \"a type\")).\n                 plainAttr(attr(\"userId\", \"mustchangepassword@apache.org\")).\n                 plainAttr(attr(\"email\", \"mustchangepassword@apache.org\")).\n-                plainAttr(attr(\"loginDate\", DateFormatUtils.ISO_8601_EXTENDED_DATETIME_FORMAT.format(new Date()))).\n+                plainAttr(attr(\"loginDate\", DateTimeFormatter.ISO_LOCAL_DATE.format(OffsetDateTime.now()))).\n                 build());\n \n         // create test user for self password reset\n@@ -206,7 +206,7 @@ public static void restSetup() {\n                 plainAttr(attr(\"ctype\", \"a type\")).\n                 plainAttr(attr(\"userId\", \"selfpwdreset@apache.org\")).\n                 plainAttr(attr(\"email\", \"selfpwdreset@apache.org\")).\n-                plainAttr(attr(\"loginDate\", DateFormatUtils.ISO_8601_EXTENDED_DATETIME_FORMAT.format(new Date()))).\n+                plainAttr(attr(\"loginDate\", DateTimeFormatter.ISO_LOCAL_DATE.format(OffsetDateTime.now()))).\n                 build());\n \n         // create test user for self update"},{"sha":"788da51f13ee7ed9a17cbea8912c20bb0a0fbc51","filename":"fit/enduser-reference/pom.xml","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fenduser-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fenduser-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fpom.xml?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -110,6 +110,13 @@ under the License.\n             <timeout>300000</timeout>\n             <log>${cargo.log}</log>\n             <output>${cargo.output}</output>\n+\n+            <systemProperties>\n+              <java.security.egd>file:/dev/./urandom</java.security.egd>\n+              <java.util.secureRandomSeed>true</java.util.secureRandomSeed>\n+\n+              <h2.returnOffsetDateTime>true</h2.returnOffsetDateTime>\n+            </systemProperties>\n           </container>\n           <configuration>\n             <properties>"},{"sha":"a1e4ef9a9383e393abed9c30abf2a0708f8f8adf","filename":"fit/wa-reference/pom.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fwa-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fwa-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fpom.xml?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -138,6 +138,8 @@ under the License.\n               <java.security.egd>file:/dev/./urandom</java.security.egd>\n               <java.util.secureRandomSeed>true</java.util.secureRandomSeed>\n \n+              <h2.returnOffsetDateTime>true</h2.returnOffsetDateTime>\n+\n               <javax.net.ssl.trustStore>${basedir}/src/test/resources/keystore.jks</javax.net.ssl.trustStore>\n               <javax.net.ssl.trustStorePassword>password</javax.net.ssl.trustStorePassword>\n             </systemProperties>"},{"sha":"072df29f4d4bcacdc16e2a808deff096c55c0f29","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/AbstractSRAITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FAbstractSRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FAbstractSRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FAbstractSRAITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -25,7 +25,7 @@\n import static org.junit.jupiter.api.Assertions.fail;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import com.fasterxml.jackson.databind.node.ArrayNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import java.io.IOException;\n@@ -62,7 +62,7 @@\n \n public abstract class AbstractSRAITCase extends AbstractITCase {\n \n-    protected static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+    protected static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     protected static final int PORT = 8080;\n \n@@ -145,7 +145,7 @@ protected static void doStartSRA(final String activeProfile)\n             throws IOException, InterruptedException, TimeoutException {\n \n         Properties props = new Properties();\n-        try (InputStream propStream = AbstractSRAITCase.class.getResourceAsStream(\"/test.properties\")) {\n+        try ( InputStream propStream = AbstractSRAITCase.class.getResourceAsStream(\"/test.properties\")) {\n             props.load(propStream);\n         } catch (Exception e) {\n             fail(\"Could not load /test.properties\", e);\n@@ -190,7 +190,7 @@ protected static void doStartSRA(final String activeProfile)\n \n         await().atMost(120, TimeUnit.SECONDS).pollInterval(3, TimeUnit.SECONDS).until(() -> {\n             boolean connected = false;\n-            try (Socket socket = new Socket()) {\n+            try ( Socket socket = new Socket()) {\n                 socket.connect(new InetSocketAddress(\"0.0.0.0\", PORT));\n                 connected = socket.isConnected();\n             } catch (ConnectException e) {\n@@ -245,7 +245,7 @@ protected static ObjectNode checkGetResponse(\n \n         assertEquals(MediaType.APPLICATION_JSON, response.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue());\n \n-        JsonNode json = OBJECT_MAPPER.readTree(EntityUtils.toString(response.getEntity()));\n+        JsonNode json = MAPPER.readTree(EntityUtils.toString(response.getEntity()));\n \n         ObjectNode args = (ObjectNode) json.get(\"args\");\n         assertEquals(\"value1\", args.get(\"key1\").asText());"},{"sha":"bfd91d36fe76666777885b1a74509d76e8760ec7","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/OIDCSRAITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -248,7 +248,7 @@ public void rest() throws IOException, ParseException {\n         assertEquals(HttpStatus.SC_OK, response.getStatus());\n         assertTrue(response.getHeaderString(HttpHeaders.CONTENT_TYPE).startsWith(MediaType.APPLICATION_JSON));\n \n-        JsonNode json = OBJECT_MAPPER.readTree(response.readEntity(String.class));\n+        JsonNode json = MAPPER.readTree(response.readEntity(String.class));\n \n         // 1a. verify id_token\n         checkIdToken(json);\n@@ -265,7 +265,7 @@ public void rest() throws IOException, ParseException {\n \n         assertEquals(HttpStatus.SC_OK, response.getStatus());\n \n-        json = OBJECT_MAPPER.readTree(response.readEntity(String.class));\n+        json = MAPPER.readTree(response.readEntity(String.class));\n \n         ObjectNode headers = (ObjectNode) json.get(\"headers\");\n         assertEquals(MediaType.APPLICATION_JSON, headers.get(HttpHeaders.ACCEPT).asText());"},{"sha":"d1d4ec718ee04fd07178b744217ab84f162d8304","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -412,7 +412,7 @@ under the License.\n     <spring-boot.version>2.6.4</spring-boot.version>\n     <spring-cloud-gateway.version>3.1.1</spring-cloud-gateway.version>\n \n-    <openjpa.version>3.2.1</openjpa.version>\n+    <openjpa.version>3.2.2-SNAPSHOT</openjpa.version>\n     <hikaricp.version>5.0.1</hikaricp.version>\n     <bval.version>2.0.5</bval.version>\n "},{"sha":"a56e8f0b8beebb2d3e229c65c1e81b0ad52f06df","filename":"sra/src/main/java/org/apache/syncope/sra/actuate/SRASessions.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Factuate%2FSRASessions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Factuate%2FSRASessions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Factuate%2FSRASessions.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.sra.actuate;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import java.util.Date;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import java.util.Objects;\n import java.util.concurrent.ConcurrentMap;\n@@ -45,17 +45,17 @@\n @Endpoint(id = \"sraSessions\")\n public class SRASessions {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SRASessions.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(SRASessions.class);\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper().findAndRegisterModules();\n+    protected static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n-    private final CacheManager cacheManager;\n+    protected final CacheManager cacheManager;\n \n     public SRASessions(final CacheManager cacheManager) {\n         this.cacheManager = cacheManager;\n     }\n \n-    private static AMSession map(final MapSession mapSession) {\n+    protected static AMSession map(final MapSession mapSession) {\n         SecurityContext ctx = mapSession.getAttribute(\n                 WebSessionServerSecurityContextRepository.DEFAULT_SPRING_SECURITY_CONTEXT_ATTR_NAME);\n         if (ctx == null) {\n@@ -64,7 +64,7 @@ private static AMSession map(final MapSession mapSession) {\n \n         AMSession session = new AMSession();\n         session.setKey(mapSession.getId());\n-        session.setAuthenticationDate(new Date(mapSession.getCreationTime().toEpochMilli()));\n+        session.setAuthenticationDate(mapSession.getCreationTime().atOffset(OffsetDateTime.now().getOffset()));\n \n         String principal;\n         if (ctx.getAuthentication() instanceof SAML2AuthenticationToken) {"},{"sha":"2aecdbe0bfa84fc2ce64bd53be38311c2b983261","filename":"sra/src/test/java/org/apache/syncope/sra/AbstractTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FAbstractTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.sra;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n import java.io.IOException;\n import java.net.Socket;\n@@ -37,7 +37,7 @@\n @AutoConfigureWireMock(port = 0)\n public abstract class AbstractTest {\n \n-    protected static final ObjectMapper MAPPER = new ObjectMapper().registerModule(new JavaTimeModule());\n+    protected static final JsonMapper MAPPER = JsonMapper.builder().addModule(new JavaTimeModule()).build();\n \n     public static boolean available(int port) {\n         try (Socket ignored = new Socket(\"localhost\", port)) {"},{"sha":"ca99ce7f523ac9fc985d708863d48ba94c671546","filename":"sra/src/test/java/org/apache/syncope/sra/SyncopeCoreTestingServer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeCoreTestingServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeCoreTestingServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeCoreTestingServer.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.sra;\n \n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n-\n import java.util.Comparator;\n import java.util.List;\n import java.util.Map;\n@@ -62,7 +62,7 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {\n             sf.setResourceClasses(SRARouteService.class);\n             sf.setResourceProvider(SRARouteService.class,\n                     new SingletonResourceProvider(new StubSRARouteService(), true));\n-            sf.setProviders(List.of(new JacksonJsonProvider()));\n+            sf.setProviders(List.of(new JacksonJsonProvider(JsonMapper.builder().findAndAddModules().build())));\n             sf.create();\n \n             // 2. register Core in Keymaster"},{"sha":"b537b26a8a7bf4b0d888c0a3d6e29de9ffe3d085","filename":"sra/src/test/java/org/apache/syncope/sra/filters/BodyPropertyAddingGatewayFilterFactory.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FBodyPropertyAddingGatewayFilterFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FBodyPropertyAddingGatewayFilterFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FBodyPropertyAddingGatewayFilterFactory.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.sra.filters;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n@@ -51,7 +51,7 @@ public class BodyPropertyAddingGatewayFilterFactory extends CustomGatewayFilterF\n \n     private static final Logger LOG = LoggerFactory.getLogger(BodyPropertyAddingGatewayFilterFactory.class);\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    protected static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     private static boolean isCompressed(final byte[] bytes) {\n         if ((bytes == null) || (bytes.length < 2)) {\n@@ -126,8 +126,8 @@ public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {\n                         }\n \n                         if (compressed) {\n-                            try (ByteArrayOutputStream baos = new ByteArrayOutputStream(output.length);\n-                                    GZIPOutputStream gzipos = new GZIPOutputStream(baos)) {\n+                            try ( ByteArrayOutputStream baos = new ByteArrayOutputStream(output.length);  GZIPOutputStream gzipos =\n+                                    new GZIPOutputStream(baos)) {\n \n                                 gzipos.write(output);\n                                 gzipos.close();"},{"sha":"a0e6787f64f9b3ba0cd62342e43144387f0599db","filename":"src/main/asciidoc/getting-started/obtain.adoc","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/src%2Fmain%2Fasciidoc%2Fgetting-started%2Fobtain.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/src%2Fmain%2Fasciidoc%2Fgetting-started%2Fobtain.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Fgetting-started%2Fobtain.adoc?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -210,7 +210,7 @@ services:\n      restart: always\n      environment:\n        SPRING_PROFILES_ACTIVE: docker,postgresql\n-       DB_URL: jdbc:postgresql://db:5432/syncope\n+       DB_URL: jdbc:postgresql://db:5432/syncope?stringtype=unspecified\n        DB_USER: syncope\n        DB_PASSWORD: syncope\n        DB_POOL_MAX: 10\n@@ -297,7 +297,7 @@ services:\n      restart: always\n      environment:\n        SPRING_PROFILES_ACTIVE: docker,postgresql\n-       DB_URL: jdbc:postgresql://db:5432/syncope\n+       DB_URL: jdbc:postgresql://db:5432/syncope?stringtype=unspecified\n        DB_USER: syncope\n        DB_PASSWORD: syncope\n        DB_POOL_MAX: 10"},{"sha":"5638a47a6678fcb1ac9c719dac23df970e0cb0bf","filename":"src/main/asciidoc/reference-guide/configuration/dbms.adoc","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconfiguration%2Fdbms.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconfiguration%2Fdbms.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconfiguration%2Fdbms.adoc?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -29,7 +29,7 @@ Create\n ....\n persistence.domain[0].key=Master\n persistence.domain[0].jdbcDriver=org.postgresql.Driver\n-persistence.domain[0].jdbcURL=jdbc:postgresql://localhost:5432/syncope\n+persistence.domain[0].jdbcURL=jdbc:postgresql://localhost:5432/syncope?stringtype=unspecified\n persistence.domain[0].dbUsername=syncope\n persistence.domain[0].dbPassword=syncope\n persistence.domain[0].databasePlatform=org.apache.openjpa.jdbc.sql.PostgresDictionary\n@@ -258,6 +258,8 @@ persistence.domain[0].auditSql=audit_oracle.sql\n persistence.domain[0].poolMaxActive=10\n persistence.domain[0].poolMinIdle=2\n \n+persistence.indexesXML=classpath:oracle_indexes.xml\n+\n provisioning.quartz.delegate=org.quartz.impl.jdbcjobstore.oracle.OracleDelegate\n provisioning.quartz.sql=tables_oracle.sql\n ...."},{"sha":"2f42a5a3518f4fcece8634fe905c334625aa788e","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/audit/SyncopeWAAuditTrailManager.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManager.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -23,7 +23,8 @@\n import java.util.Map;\n import java.util.Set;\n import org.apereo.cas.audit.spi.AbstractAuditTrailManager;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n+import java.time.OffsetDateTime;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.audit.AuditEntry;\n@@ -35,7 +36,7 @@\n \n public class SyncopeWAAuditTrailManager extends AbstractAuditTrailManager {\n \n-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     private final WARestClient waRestClient;\n \n@@ -54,13 +55,14 @@ protected void saveAuditRecord(final AuditActionContext audit) {\n \n         LOG.info(\"Loading application definitions\");\n         try {\n-            String output = OBJECT_MAPPER.writeValueAsString(Map.of(\"resource\", audit.getResourceOperatedUpon(),\n+            String output = MAPPER.writeValueAsString(Map.of(\"resource\", audit.getResourceOperatedUpon(),\n                     \"clientIpAddress\", audit.getClientIpAddress(),\n                     \"serverIpAddress\", audit.getServerIpAddress()));\n \n             AuditEntry auditEntry = new AuditEntry();\n             auditEntry.setWho(audit.getPrincipal());\n-            auditEntry.setDate(audit.getWhenActionWasPerformed());\n+            auditEntry.setDate(\n+                    audit.getWhenActionWasPerformed().toInstant().atOffset(OffsetDateTime.now().getOffset()));\n             auditEntry.setOutput(output);\n             AuditElements.Result result = StringUtils.containsIgnoreCase(audit.getActionPerformed(), \"fail\")\n                     ? AuditElements.Result.FAILURE"},{"sha":"a56a98408e2f0adf234f4329fa6f71fc949f90b6","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWAConfiguration.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -25,14 +25,12 @@\n import io.swagger.v3.oas.models.info.Contact;\n import io.swagger.v3.oas.models.info.Info;\n import io.swagger.v3.oas.models.security.SecurityScheme;\n-import java.time.LocalDate;\n-import java.time.ZoneId;\n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStart;\n@@ -291,7 +289,7 @@ public U2FDeviceRepository u2fDeviceRepository(\n             final WARestClient restClient) {\n \n         U2FCoreMultifactorAuthenticationProperties u2f = casProperties.getAuthn().getMfa().getU2f().getCore();\n-        LocalDate expirationDate = LocalDate.now(ZoneId.systemDefault()).\n+        OffsetDateTime expirationDate = OffsetDateTime.now().\n                 minus(u2f.getExpireDevices(), DateTimeUtils.toChronoUnit(u2f.getExpireDevicesTimeUnit()));\n         LoadingCache<String, String> requestStorage = Caffeine.newBuilder().\n                 expireAfterWrite(u2f.getExpireRegistrations(), u2f.getExpireRegistrationsTimeUnit())."},{"sha":"0f614aaa64312cce747fe211105eb2d4347d2ada","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/events/SyncopeWAEventRepository.java","status":"modified","additions":11,"deletions":7,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FSyncopeWAEventRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FSyncopeWAEventRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FSyncopeWAEventRepository.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,12 +19,13 @@\n package org.apache.syncope.wa.starter.events;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import java.util.Date;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.stream.Stream;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.audit.AuditEntry;\n@@ -42,12 +43,14 @@ public class SyncopeWAEventRepository extends AbstractCasEventRepository {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAEventRepository.class);\n \n-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     private final WARestClient waRestClient;\n \n-    public SyncopeWAEventRepository(final CasEventRepositoryFilter eventRepositoryFilter,\n+    public SyncopeWAEventRepository(\n+            final CasEventRepositoryFilter eventRepositoryFilter,\n             final WARestClient restClient) {\n+\n         super(eventRepositoryFilter);\n         this.waRestClient = restClient;\n     }\n@@ -78,12 +81,13 @@ public CasEvent saveInternal(final CasEvent event) {\n             put(properties, \"clientIpAddress\", event.getClientIpAddress());\n             put(properties, \"serverIpAddress\", event.getServerIpAddress());\n \n-            String output = OBJECT_MAPPER.writeValueAsString(properties);\n+            String output = MAPPER.writeValueAsString(properties);\n \n             AuditEntry auditEntry = new AuditEntry();\n             auditEntry.setWho(event.getPrincipalId());\n             if (event.getTimestamp() != null) {\n-                auditEntry.setDate(new Date(event.getTimestamp()));\n+                auditEntry.setDate(OffsetDateTime.ofInstant(\n+                        Instant.ofEpochMilli(event.getTimestamp()), ZoneId.systemDefault()));\n             }\n             auditEntry.setOutput(output);\n             AuditLoggerName auditLogger = new AuditLoggerName("},{"sha":"144eb87e0dc217faf66c2eaa153d8de23d35e313","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/gauth/SyncopeWAGoogleMfaAuthCredentialRepository.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FSyncopeWAGoogleMfaAuthCredentialRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FSyncopeWAGoogleMfaAuthCredentialRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FSyncopeWAGoogleMfaAuthCredentialRepository.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.wa.starter.gauth;\n \n import com.warrenstrange.googleauth.IGoogleAuthenticator;\n+import java.time.OffsetDateTime;\n import java.util.Collection;\n-import java.util.Date;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -50,7 +50,7 @@ public SyncopeWAGoogleMfaAuthCredentialRepository(\n \n     private static GoogleMfaAuthAccount mapGoogleMfaAuthAccount(final OneTimeTokenAccount account) {\n         return new GoogleMfaAuthAccount.Builder()\n-                .registrationDate(new Date())\n+                .registrationDate(OffsetDateTime.now())\n                 .scratchCodes(account.getScratchCodes())\n                 .validationCode(account.getValidationCode())\n                 .secretKey(account.getSecretKey())\n@@ -132,7 +132,7 @@ public Collection<? extends OneTimeTokenAccount> load() {\n     @Override\n     public OneTimeTokenAccount save(final OneTimeTokenAccount tokenAccount) {\n         GoogleMfaAuthAccount account = new GoogleMfaAuthAccount.Builder()\n-                .registrationDate(new Date())\n+                .registrationDate(OffsetDateTime.now())\n                 .scratchCodes(tokenAccount.getScratchCodes())\n                 .validationCode(tokenAccount.getValidationCode())\n                 .secretKey(tokenAccount.getSecretKey())"},{"sha":"1a36073a3a97f121c57ae44da87c09be9972a6b1","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/gauth/SyncopeWAGoogleMfaAuthTokenRepository.java","status":"modified","additions":15,"deletions":33,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FSyncopeWAGoogleMfaAuthTokenRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FSyncopeWAGoogleMfaAuthTokenRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FSyncopeWAGoogleMfaAuthTokenRepository.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.wa.starter.gauth;\n \n import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n import java.time.ZoneOffset;\n-import java.util.Date;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthTokenService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n@@ -43,34 +43,28 @@ public SyncopeWAGoogleMfaAuthTokenRepository(final WARestClient waRestClient, fi\n         this.expireTokensInSeconds = expireTokensInSeconds;\n     }\n \n+    protected GoogleMfaAuthTokenService service() {\n+        return waRestClient.getSyncopeClient().getService(GoogleMfaAuthTokenService.class);\n+    }\n+\n     @Override\n     protected void cleanInternal() {\n-        Date expirationDate = Date.from(LocalDateTime.\n-                now(ZoneOffset.UTC).\n-                minusSeconds(this.expireTokensInSeconds).\n-                toInstant(ZoneOffset.UTC));\n-        GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n-                getService(GoogleMfaAuthTokenService.class);\n-        tokenService.delete(expirationDate);\n+        service().delete(OffsetDateTime.now().minusSeconds(expireTokensInSeconds));\n     }\n \n     @Override\n     public void store(final OneTimeToken token) {\n-        GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n-                getService(GoogleMfaAuthTokenService.class);\n         GoogleMfaAuthToken tokenTO = new GoogleMfaAuthToken.Builder()\n                 .token(token.getToken())\n-                .issueDate(Date.from(token.getIssuedDateTime().toInstant(ZoneOffset.UTC)))\n+                .issueDate(OffsetDateTime.of(token.getIssuedDateTime(), OffsetDateTime.now().getOffset()))\n                 .build();\n-        tokenService.store(token.getUserId(), tokenTO);\n+        service().store(token.getUserId(), tokenTO);\n     }\n \n     @Override\n     public OneTimeToken get(final String username, final Integer otp) {\n         try {\n-            GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n-                    getService(GoogleMfaAuthTokenService.class);\n-            GoogleMfaAuthToken tokenTO = tokenService.read(username, otp);\n+            GoogleMfaAuthToken tokenTO = service().read(username, otp);\n             GoogleAuthenticatorToken token = new GoogleAuthenticatorToken(tokenTO.getOtp(), username);\n             LocalDateTime dateTime = tokenTO.getIssueDate().toInstant().atZone(ZoneOffset.UTC).toLocalDateTime();\n             token.setIssuedDateTime(dateTime);\n@@ -83,43 +77,31 @@ public OneTimeToken get(final String username, final Integer otp) {\n \n     @Override\n     public void remove(final String username, final Integer otp) {\n-        GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n-                getService(GoogleMfaAuthTokenService.class);\n-        tokenService.delete(username, otp);\n+        service().delete(username, otp);\n     }\n \n     @Override\n     public void remove(final String username) {\n-        GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n-                getService(GoogleMfaAuthTokenService.class);\n-        tokenService.delete(username);\n+        service().delete(username);\n     }\n \n     @Override\n     public void remove(final Integer otp) {\n-        GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n-                getService(GoogleMfaAuthTokenService.class);\n-        tokenService.delete(otp);\n+        service().delete(otp);\n     }\n \n     @Override\n     public void removeAll() {\n-        GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n-                getService(GoogleMfaAuthTokenService.class);\n-        tokenService.delete((Date) null);\n+        service().delete((OffsetDateTime) null);\n     }\n \n     @Override\n     public long count(final String username) {\n-        GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n-                getService(GoogleMfaAuthTokenService.class);\n-        return tokenService.read(username).getTotalCount();\n+        return service().read(username).getTotalCount();\n     }\n \n     @Override\n     public long count() {\n-        GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n-                getService(GoogleMfaAuthTokenService.class);\n-        return tokenService.list().getTotalCount();\n+        return service().list().getTotalCount();\n     }\n }"},{"sha":"72a354535831863840f526cd6a1e9fa3c00f0ced","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/u2f/SyncopeWAU2FDeviceRepository.java","status":"modified","additions":9,"deletions":23,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fu2f%2FSyncopeWAU2FDeviceRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fu2f%2FSyncopeWAU2FDeviceRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fu2f%2FSyncopeWAU2FDeviceRepository.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -19,11 +19,9 @@\n package org.apache.syncope.wa.starter.u2f;\n \n import com.github.benmanes.caffeine.cache.LoadingCache;\n-import java.time.Instant;\n-import java.time.LocalDate;\n+import java.time.OffsetDateTime;\n import java.time.ZoneId;\n import java.util.Collection;\n-import java.util.Date;\n import java.util.Objects;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -46,13 +44,13 @@ public class SyncopeWAU2FDeviceRepository extends BaseU2FDeviceRepository {\n \n     private final WARestClient waRestClient;\n \n-    private final LocalDate expirationDate;\n+    private final OffsetDateTime expirationDate;\n \n     public SyncopeWAU2FDeviceRepository(\n             final CasConfigurationProperties casProperties,\n             final LoadingCache<String, String> requestStorage,\n             final WARestClient waRestClient,\n-            final LocalDate expirationDate) {\n+            final OffsetDateTime expirationDate) {\n \n         super(casProperties, requestStorage, CipherExecutor.noOpOfSerializableToString());\n         this.waRestClient = waRestClient;\n@@ -75,11 +73,8 @@ private static U2FDeviceRegistration parseRegistrationRecord(final String owner,\n \n     @Override\n     public Collection<? extends U2FDeviceRegistration> getRegisteredDevices(final String owner) {\n-        U2FDeviceQuery query = new U2FDeviceQuery.Builder()\n-                .owner(owner)\n-                .expirationDate(Date.from(Instant.from(expirationDate)))\n-                .build();\n-        return getU2FService().search(query).getResult().\n+        return getU2FService().\n+                search(new U2FDeviceQuery.Builder().owner(owner).expirationDate(expirationDate).build()).getResult().\n                 stream().\n                 map(device -> parseRegistrationRecord(owner, device)).\n                 filter(Objects::nonNull).\n@@ -88,10 +83,7 @@ public Collection<? extends U2FDeviceRegistration> getRegisteredDevices(final St\n \n     @Override\n     public Collection<? extends U2FDeviceRegistration> getRegisteredDevices() {\n-        U2FDeviceQuery query = new U2FDeviceQuery.Builder()\n-                .expirationDate(Date.from(Instant.from(expirationDate)))\n-                .build();\n-        return getU2FService().search(query).getResult().\n+        return getU2FService().search(new U2FDeviceQuery.Builder().expirationDate(expirationDate).build()).getResult().\n                 stream().\n                 map(device -> parseRegistrationRecord(\"\", device)).\n                 filter(Objects::nonNull).\n@@ -101,8 +93,8 @@ public Collection<? extends U2FDeviceRegistration> getRegisteredDevices() {\n     @Override\n     public U2FDeviceRegistration registerDevice(final U2FDeviceRegistration registration) {\n         U2FDevice record = new U2FDevice.Builder().\n-                issueDate(Date.from(registration.getCreatedDate().atStartOfDay()\n-                        .atZone(ZoneId.systemDefault()).toInstant())).\n+                issueDate(OffsetDateTime.of(\n+                        registration.getCreatedDate().atStartOfDay(), OffsetDateTime.now().getOffset())).\n                 record(registration.getRecord()).\n                 id(registration.getId()).\n                 build();\n@@ -132,13 +124,7 @@ public boolean isDeviceRegisteredFor(final String owner) {\n \n     @Override\n     public void clean() {\n-        Date date = Date.from(expirationDate.atStartOfDay()\n-                .atZone(ZoneId.systemDefault())\n-                .toInstant());\n-        U2FDeviceQuery query = new U2FDeviceQuery.Builder()\n-                .expirationDate(date)\n-                .build();\n-        getU2FService().delete(query);\n+        getU2FService().delete(new U2FDeviceQuery.Builder().expirationDate(expirationDate).build());\n     }\n \n     @Override"},{"sha":"5fd9098feb00512e9a6bc76ef709ae3a1a23f0df","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeCoreTestingServer.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -18,9 +18,10 @@\n  */\n package org.apache.syncope.wa.starter;\n \n+import com.fasterxml.jackson.databind.json.JsonMapper;\n import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -72,7 +73,7 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {\n                 sf.setResourceProvider(\n                         ImpersonationService.class,\n                         new SingletonResourceProvider(new StubImpersonationService(), true));\n-                sf.setProviders(List.of(new JacksonJsonProvider()));\n+                sf.setProviders(List.of(new JacksonJsonProvider(JsonMapper.builder().findAndAddModules().build())));\n                 sf.create();\n \n                 // 2. register Core in Keymaster\n@@ -123,7 +124,7 @@ public static class StubGoogleMfaAuthTokenService implements GoogleMfaAuthTokenS\n         private final Map<String, GoogleMfaAuthToken> tokens = new HashMap<>();\n \n         @Override\n-        public void delete(final Date expirationDate) {\n+        public void delete(final OffsetDateTime expirationDate) {\n             if (expirationDate == null) {\n                 tokens.clear();\n             } else {"},{"sha":"e30c2de289dec7adb08a55add966b14d9866c330","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/gauth/token/SyncopeWAGoogleMfaAuthTokenRepositoryTest.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7309dd303f2fe9238df4b69776f6284a87549599/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Ftoken%2FSyncopeWAGoogleMfaAuthTokenRepositoryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7309dd303f2fe9238df4b69776f6284a87549599/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Ftoken%2FSyncopeWAGoogleMfaAuthTokenRepositoryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Ftoken%2FSyncopeWAGoogleMfaAuthTokenRepositoryTest.java?ref=7309dd303f2fe9238df4b69776f6284a87549599","patch":"@@ -16,19 +16,18 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.wa.starter.gauth.token;\n \n-import org.apereo.cas.gauth.token.GoogleAuthenticatorToken;\n-import org.apereo.cas.otp.repository.token.OneTimeTokenRepository;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n \n import org.apache.syncope.wa.starter.AbstractTest;\n+import org.apereo.cas.gauth.token.GoogleAuthenticatorToken;\n+import org.apereo.cas.otp.repository.token.OneTimeTokenRepository;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-\n public class SyncopeWAGoogleMfaAuthTokenRepositoryTest extends AbstractTest {\n+\n     @Autowired\n     private OneTimeTokenRepository tokenRepository;\n "}]}