{"sha":"509d30edad9365fe0d97d6c3d5d2288c92d5c69b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUwOWQzMGVkYWQ5MzY1ZmUwZDk3ZDZjM2Q1ZDIyODhjOTJkNWM2OWI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-26T10:56:36Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-26T10:56:36Z"},"message":"[SYNCOPE-714] Add specific test + introducing PropagationTaskExecStatus.NOT_ATTEMPTED","tree":{"sha":"da58854d374431f6530983ca1402441305bcbacd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/da58854d374431f6530983ca1402441305bcbacd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/509d30edad9365fe0d97d6c3d5d2288c92d5c69b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/509d30edad9365fe0d97d6c3d5d2288c92d5c69b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/509d30edad9365fe0d97d6c3d5d2288c92d5c69b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/509d30edad9365fe0d97d6c3d5d2288c92d5c69b/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3"}],"stats":{"total":167,"additions":128,"deletions":39},"files":[{"sha":"6ae4a36fecb6b9e3a013aa3eb0bdf1415d9468d9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/PropagationTaskExecStatus.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/509d30edad9365fe0d97d6c3d5d2288c92d5c69b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationTaskExecStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/509d30edad9365fe0d97d6c3d5d2288c92d5c69b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationTaskExecStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationTaskExecStatus.java?ref=509d30edad9365fe0d97d6c3d5d2288c92d5c69b","patch":"@@ -28,6 +28,7 @@ public enum PropagationTaskExecStatus {\n \n     CREATED,\n     SUCCESS,\n-    FAILURE;\n+    FAILURE,\n+    NOT_ATTEMPTED;\n \n }"},{"sha":"8640c50ce8f87ed6146ba6261374262a2606f91a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/509d30edad9365fe0d97d6c3d5d2288c92d5c69b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/509d30edad9365fe0d97d6c3d5d2288c92d5c69b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java?ref=509d30edad9365fe0d97d6c3d5d2288c92d5c69b","patch":"@@ -226,8 +226,8 @@ public Uid update(\n             }\n         } else {\n             LOG.info(\"Update for {} was attempted, although the \"\n-                    + \"connector only has these capabilities: {}. No action.\", uid.getUidValue(), connInstance.\n-                    getCapabilities());\n+                    + \"connector only has these capabilities: {}. No action.\",\n+                    uid.getUidValue(), connInstance.getCapabilities());\n         }\n \n         return result;"},{"sha":"e87cd0055a1de6848db08029155e2f7f53d538b9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":8,"deletions":11,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/509d30edad9365fe0d97d6c3d5d2288c92d5c69b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/509d30edad9365fe0d97d6c3d5d2288c92d5c69b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=509d30edad9365fe0d97d6c3d5d2288c92d5c69b","patch":"@@ -387,7 +387,9 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n                 default:\n             }\n \n-            execution.setStatus(PropagationTaskExecStatus.SUCCESS.name());\n+            execution.setStatus(propagationAttempted[0]\n+                    ? PropagationTaskExecStatus.SUCCESS.name()\n+                    : PropagationTaskExecStatus.NOT_ATTEMPTED.name());\n \n             for (PropagationActions action : actions) {\n                 action.after(task, execution, afterObj);\n@@ -437,24 +439,19 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n                 }\n             }\n \n-            LOG.debug(\"Update execution for {}\", task);\n-\n             execution.setStartDate(startDate);\n             execution.setMessage(taskExecutionMessage);\n             execution.setEndDate(new Date());\n \n+            LOG.debug(\"Execution finished: {}\", execution);\n+\n             if (hasToBeregistered(task, execution)) {\n-                if (!propagationAttempted[0]) {\n-                    LOG.debug(\"No propagation attempted for {}\", execution);\n-                } else {\n-                    execution.setTask(task);\n-                    task.addExec(execution);\n+                LOG.debug(\"Execution to be stored: {}\", execution);\n \n-                    LOG.debug(\"Execution finished: {}\", execution);\n-                }\n+                execution.setTask(task);\n+                task.addExec(execution);\n \n                 taskDAO.save(task);\n-\n                 // this flush call is needed to generate a value for the execution id\n                 taskDAO.flush();\n             }"},{"sha":"3e4381d53ec6c964297a25982b316b928db32294","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/509d30edad9365fe0d97d6c3d5d2288c92d5c69b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/509d30edad9365fe0d97d6c3d5d2288c92d5c69b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java?ref=509d30edad9365fe0d97d6c3d5d2288c92d5c69b","patch":"@@ -341,7 +341,7 @@ protected AnyObjectTO createAnyObject(final AnyObjectTO anyObjectTO) {\n                 throw (RuntimeException) ex;\n             }\n         }\n-        return getObject(response.getLocation(), AnyObjectService.class, AnyObjectTO.class);\n+        return response.readEntity(AnyObjectTO.class);\n     }\n \n     protected AnyObjectTO updateAnyObject(final AnyObjectPatch anyObjectPatch) {\n@@ -360,7 +360,7 @@ protected GroupTO createGroup(final GroupTO groupTO) {\n                 throw (RuntimeException) ex;\n             }\n         }\n-        return getObject(response.getLocation(), GroupService.class, GroupTO.class);\n+        return response.readEntity(GroupTO.class);\n     }\n \n     protected GroupTO updateGroup(final GroupPatch groupPatch) {"},{"sha":"db12a2b468c2a6b8347d53a2edd1906940f4b676","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":108,"deletions":18,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/509d30edad9365fe0d97d6c3d5d2288c92d5c69b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/509d30edad9365fe0d97d6c3d5d2288c92d5c69b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=509d30edad9365fe0d97d6c3d5d2288c92d5c69b","patch":"@@ -52,6 +52,7 @@\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -63,9 +64,11 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.SchemaType;\n@@ -609,6 +612,111 @@ public void noContent() throws IOException {\n         assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n     }\n \n+    @Test\n+    public void dynMembership() {\n+        assertTrue(userService.read(4L).getDynGroups().isEmpty());\n+\n+        GroupTO group = getBasicSampleTO(\"dynMembership\");\n+        group.setUDynMembershipCond(\"cool==true\");\n+        group = createGroup(group);\n+        assertNotNull(group);\n+\n+        assertTrue(userService.read(4L).getDynGroups().contains(group.getKey()));\n+\n+        GroupPatch mod = new GroupPatch();\n+        mod.setKey(group.getKey());\n+        mod.setUDynMembershipCond(new StringReplacePatchItem.Builder().value(\"cool==false\").build());\n+        groupService.update(mod);\n+\n+        assertTrue(userService.read(4L).getDynGroups().isEmpty());\n+    }\n+\n+    @Test\n+    public void capabilitiesOverride() {\n+        // resource with no capability override\n+        ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n+        assertNotNull(ldap);\n+        assertFalse(ldap.isOverrideCapabilities());\n+        assertTrue(ldap.getCapabilitiesOverride().isEmpty());\n+\n+        // connector with all required for create and update\n+        ConnInstanceTO conn = connectorService.read(ldap.getConnector(), null);\n+        assertNotNull(conn);\n+        assertTrue(conn.getCapabilities().contains(ConnectorCapability.CREATE));\n+        assertTrue(conn.getCapabilities().contains(ConnectorCapability.UPDATE));\n+\n+        try {\n+            // 1. create succeeds\n+            GroupTO group = getSampleTO(\"syncope714\");\n+            group.getPlainAttrs().add(attrTO(\"title\", \"first\"));\n+            group.getResources().add(RESOURCE_NAME_LDAP);\n+\n+            group = createGroup(group);\n+            assertNotNull(group);\n+            assertEquals(1, group.getPropagationStatusTOs().size());\n+            assertEquals(RESOURCE_NAME_LDAP, group.getPropagationStatusTOs().get(0).getResource());\n+            assertEquals(PropagationTaskExecStatus.SUCCESS, group.getPropagationStatusTOs().get(0).getStatus());\n+\n+            // 2. update succeeds\n+            GroupPatch patch = new GroupPatch();\n+            patch.setKey(group.getKey());\n+            patch.getPlainAttrs().add(new AttrPatch.Builder().\n+                    operation(PatchOperation.ADD_REPLACE).attrTO(attrTO(\"title\", \"second\")).build());\n+\n+            group = groupService.update(patch).readEntity(GroupTO.class);\n+            assertNotNull(group);\n+            assertEquals(1, group.getPropagationStatusTOs().size());\n+            assertEquals(RESOURCE_NAME_LDAP, group.getPropagationStatusTOs().get(0).getResource());\n+            assertEquals(PropagationTaskExecStatus.SUCCESS, group.getPropagationStatusTOs().get(0).getStatus());\n+\n+            // 3. set capability override with only search allowed, but not enable\n+            ldap.getCapabilitiesOverride().add(ConnectorCapability.SEARCH);\n+            resourceService.update(ldap);\n+            ldap = resourceService.read(RESOURCE_NAME_LDAP);\n+            assertNotNull(ldap);\n+            assertFalse(ldap.isOverrideCapabilities());\n+            assertEquals(1, ldap.getCapabilitiesOverride().size());\n+            assertTrue(ldap.getCapabilitiesOverride().contains(ConnectorCapability.SEARCH));\n+\n+            // 4. update succeeds again\n+            patch = new GroupPatch();\n+            patch.setKey(group.getKey());\n+            patch.getPlainAttrs().add(new AttrPatch.Builder().\n+                    operation(PatchOperation.ADD_REPLACE).attrTO(attrTO(\"title\", \"third\")).build());\n+\n+            group = groupService.update(patch).readEntity(GroupTO.class);\n+            assertNotNull(group);\n+            assertEquals(1, group.getPropagationStatusTOs().size());\n+            assertEquals(RESOURCE_NAME_LDAP, group.getPropagationStatusTOs().get(0).getResource());\n+            assertEquals(PropagationTaskExecStatus.SUCCESS, group.getPropagationStatusTOs().get(0).getStatus());\n+\n+            // 5. enable capability override\n+            ldap.setOverrideCapabilities(true);\n+            resourceService.update(ldap);\n+            ldap = resourceService.read(RESOURCE_NAME_LDAP);\n+            assertNotNull(ldap);\n+            assertTrue(ldap.isOverrideCapabilities());\n+            assertEquals(1, ldap.getCapabilitiesOverride().size());\n+            assertTrue(ldap.getCapabilitiesOverride().contains(ConnectorCapability.SEARCH));\n+\n+            // 6. update now fails\n+            patch = new GroupPatch();\n+            patch.setKey(group.getKey());\n+            patch.getPlainAttrs().add(new AttrPatch.Builder().\n+                    operation(PatchOperation.ADD_REPLACE).attrTO(attrTO(\"title\", \"fourth\")).build());\n+\n+            group = groupService.update(patch).readEntity(GroupTO.class);\n+            assertNotNull(group);\n+            assertEquals(1, group.getPropagationStatusTOs().size());\n+            assertEquals(RESOURCE_NAME_LDAP, group.getPropagationStatusTOs().get(0).getResource());\n+            assertEquals(PropagationTaskExecStatus.NOT_ATTEMPTED, group.getPropagationStatusTOs().get(0).getStatus());\n+        } finally {\n+            ldap.getCapabilitiesOverride().clear();\n+            ldap.setOverrideCapabilities(false);\n+            resourceService.update(ldap);\n+        }\n+    }\n+\n     @Test\n     public void issueSYNCOPE632() {\n         GroupTO groupTO = null;\n@@ -695,22 +803,4 @@ public void issueSYNCOPE632() {\n         }\n     }\n \n-    @Test\n-    public void dynMembership() {\n-        assertTrue(userService.read(4L).getDynGroups().isEmpty());\n-\n-        GroupTO group = getBasicSampleTO(\"dynMembership\");\n-        group.setUDynMembershipCond(\"cool==true\");\n-        group = createGroup(group);\n-        assertNotNull(group);\n-\n-        assertTrue(userService.read(4L).getDynGroups().contains(group.getKey()));\n-\n-        GroupPatch mod = new GroupPatch();\n-        mod.setKey(group.getKey());\n-        mod.setUDynMembershipCond(new StringReplacePatchItem.Builder().value(\"cool==false\").build());\n-        groupService.update(mod);\n-\n-        assertTrue(userService.read(4L).getDynGroups().isEmpty());\n-    }\n }"},{"sha":"9aa64ce47ebeaf1d2fbef0d0a82cc1c3773b7244","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ResourceITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/509d30edad9365fe0d97d6c3d5d2288c92d5c69b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/509d30edad9365fe0d97d6c3d5d2288c92d5c69b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java?ref=509d30edad9365fe0d97d6c3d5d2288c92d5c69b","patch":"@@ -161,15 +161,15 @@ public void createOverridingProps() {\n         resourceTO.setKey(resourceName);\n         resourceTO.setConnector(102L);\n \n-        ConnConfProperty p = new ConnConfProperty();\n+        ConnConfProperty prop = new ConnConfProperty();\n         ConnConfPropSchema schema = new ConnConfPropSchema();\n         schema.setType(\"java.lang.String\");\n         schema.setName(\"endpoint\");\n         schema.setRequired(true);\n-        p.setSchema(schema);\n-        p.getValues().add(\"http://invalidurl/\");\n+        prop.setSchema(schema);\n+        prop.getValues().add(\"http://invalidurl/\");\n \n-        Set<ConnConfProperty> connectorConfigurationProperties = new HashSet<>(Arrays.asList(p));\n+        Set<ConnConfProperty> connectorConfigurationProperties = new HashSet<>(Arrays.asList(prop));\n         resourceTO.getConfOverride().addAll(connectorConfigurationProperties);\n \n         Response response = resourceService.create(resourceTO);"},{"sha":"1811805568583d9ff169a45e5646bc87a8be04ea","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/509d30edad9365fe0d97d6c3d5d2288c92d5c69b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/509d30edad9365fe0d97d6c3d5d2288c92d5c69b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=509d30edad9365fe0d97d6c3d5d2288c92d5c69b","patch":"@@ -171,7 +171,8 @@ public void createUserWithNoPropagation() {\n         // get last task\n         PropagationTaskTO taskTO = taskService.read(newMaxId);\n         assertNotNull(taskTO);\n-        assertTrue(taskTO.getExecutions().isEmpty());\n+        assertFalse(taskTO.getExecutions().isEmpty());\n+        assertEquals(PropagationTaskExecStatus.NOT_ATTEMPTED.name(), taskTO.getExecutions().get(0).getStatus());\n     }\n \n     @Test"}]}