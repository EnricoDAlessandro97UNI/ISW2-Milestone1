{"sha":"692e1f91c67d8eeaa731392d42daa03b1df07248","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY5MmUxZjkxYzY3ZDhlZWFhNzMxMzkyZDQyZGFhMDNiMWRmMDcyNDg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-04-05T13:46:37Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-04-05T13:46:37Z"},"message":"[SYNCOPE-806] Resource provisioning validated, and management of aux classes in Provision instances added","tree":{"sha":"0e3025a1cfa088f25879f1e553d780c02ef7ce38","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0e3025a1cfa088f25879f1e553d780c02ef7ce38"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/692e1f91c67d8eeaa731392d42daa03b1df07248","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/692e1f91c67d8eeaa731392d42daa03b1df07248","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/692e1f91c67d8eeaa731392d42daa03b1df07248","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/692e1f91c67d8eeaa731392d42daa03b1df07248/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"756e5c5e2434d85ba207e0296f90c223a0b96f5b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/756e5c5e2434d85ba207e0296f90c223a0b96f5b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/756e5c5e2434d85ba207e0296f90c223a0b96f5b"}],"stats":{"total":659,"additions":473,"deletions":186},"files":[{"sha":"7c954fd1b30208bc7323d13112bdfb8951c8c483","filename":"client/console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDetails.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDetails.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -38,7 +38,7 @@ public ApprovalDetails(final PageReference pageRef, final WorkflowFormTO formTO)\n         super(MultilevelPanel.SECOND_LEVEL_ID);\n \n         final UserTO userTO = new UserRestClient().read(formTO.getUserKey());\n-        final List<String> anyTypeClasses = new AnyTypeRestClient().get(AnyTypeKind.USER.name()).getClasses();\n+        final List<String> anyTypeClasses = new AnyTypeRestClient().read(AnyTypeKind.USER.name()).getClasses();\n \n         final AjaxWizard<AnyHandler<UserTO>> wizard\n                 = new UserWizardBuilder(\"wizard\", userTO, anyTypeClasses, pageRef).build(AjaxWizard.Mode.READONLY);"},{"sha":"3e7116cb81d0538981cde87ab3e0a7ed5c430490","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ProvisionAuxClassesPanel.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n+import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.util.ListModel;\n+\n+public class ProvisionAuxClassesPanel extends Panel {\n+\n+    private static final long serialVersionUID = -3962956154520358784L;\n+\n+    private final ProvisionTO provisionTO;\n+\n+    public ProvisionAuxClassesPanel(final String id, final ProvisionTO provisionTO) {\n+        super(id);\n+        setOutputMarkupId(true);\n+\n+        this.provisionTO = provisionTO;\n+    }\n+\n+    @Override\n+    protected void onBeforeRender() {\n+        super.onBeforeRender();\n+\n+        AnyTypeTO anyType = new AnyTypeRestClient().read(provisionTO.getAnyType());\n+        List<String> choices = new ArrayList<>();\n+        for (AnyTypeClassTO aux : new AnyTypeClassRestClient().list()) {\n+            if (!anyType.getClasses().contains(aux.getKey())) {\n+                choices.add(aux.getKey());\n+            }\n+        }\n+        addOrReplace(new AjaxPalettePanel.Builder<String>().build(\"auxClasses\",\n+                new PropertyModel<List<String>>(provisionTO, \"auxClasses\"),\n+                new ListModel<>(choices)).hideLabel().setOutputMarkupId(true));\n+    }\n+\n+}"},{"sha":"30188f914c32f4bf6a229c0f9011dbb2c817181c","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceMappingPanel.java","status":"modified","additions":9,"deletions":21,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -22,13 +22,11 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.client.console.commons.ConnIdSpecialAttributeName;\n@@ -531,32 +529,22 @@ private void setEnabled() {\n      * @param toBeUpdated drop down choice to be updated.\n      */\n     private void setAttrNames(final IntMappingType type, final AjaxDropDownChoicePanel<String> toBeUpdated) {\n-\n         toBeUpdated.setRequired(true);\n         toBeUpdated.setEnabled(true);\n \n         if (type == null || type.getAnyTypeKind() == null) {\n             toBeUpdated.setChoices(Collections.<String>emptyList());\n         } else {\n-            Collection<AnyTypeTO> anyTypeTOs = type.getAnyTypeKind() == AnyTypeKind.ANY_OBJECT\n-                    ? CollectionUtils.select(anyTypeRestClient.list(), new Predicate<AnyTypeTO>() {\n-\n-                        @Override\n-                        public boolean evaluate(final AnyTypeTO object) {\n-                            return object.getKind() == AnyTypeKind.ANY_OBJECT;\n-                        }\n-                    })\n-                    : Collections.singletonList(anyTypeRestClient.get(type.getAnyTypeKind().name()));\n+            AnyTypeTO anyTypeTO = anyTypeRestClient.read(provisionTO.getAnyType());\n \n-            final List<AnyTypeClassTO> anyTypeClassTOs = new ArrayList<>();\n-            for (AnyTypeTO anyTypeTO : anyTypeTOs) {\n-                anyTypeClassTOs.addAll(anyTypeClassRestClient.list(anyTypeTO.getClasses()));\n+            List<AnyTypeClassTO> anyTypeClassTOs = new ArrayList<>();\n+            anyTypeClassTOs.addAll(anyTypeClassRestClient.list(anyTypeTO.getClasses()));\n+            for (String auxClass : provisionTO.getAuxClasses()) {\n+                anyTypeClassTOs.add(anyTypeClassRestClient.read(auxClass));\n             }\n \n             List<String> choices;\n-\n             switch (type) {\n-                // user attribute names\n                 case UserPlainSchema:\n                 case GroupPlainSchema:\n                 case AnyObjectPlainSchema:\n@@ -639,14 +627,14 @@ private void setConnObjectKey(\n     /**\n      * Get all attribute types from a selected attribute type.\n      *\n-     * @param entity entity.\n+     * @param kind entity.\n      * @return all attribute types.\n      */\n-    private List<IntMappingType> getAttributeTypes(final AnyTypeKind entity) {\n+    private List<IntMappingType> getAttributeTypes(final AnyTypeKind kind) {\n         final List<IntMappingType> res = new ArrayList<>();\n \n-        if (entity != null) {\n-            res.addAll(IntMappingType.getAttributeTypes(entity));\n+        if (kind != null) {\n+            res.addAll(IntMappingType.getAttributeTypes(kind));\n         }\n \n         return res;"},{"sha":"ba29fb9649cfdcc5f3151af982169bf1eeb92c0d","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceModal.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -116,7 +116,7 @@ public boolean evaluate(final ProvisionTO in) {\n         };\n \n         builder.setItems(model.getObject().getProvisions());\n-        builder.includes(\"anyType\", \"objectClass\");\n+        builder.includes(\"anyType\", \"objectClass\", \"auxClasses\");\n         builder.setReuseItem(false);\n \n         builder.\n@@ -130,16 +130,6 @@ public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionT\n                                 new AjaxWizard.NewItemActionEvent<>(provisionTO, 2, target));\n                     }\n                 }, ActionLink.ActionType.MAPPING, StandardEntitlement.RESOURCE_UPDATE).\n-                addAction(new ActionLink<ProvisionTO>() {\n-\n-                    private static final long serialVersionUID = -3722207913631435514L;\n-\n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n-                        send(pageRef.getPage(), Broadcast.DEPTH,\n-                                new AjaxWizard.NewItemActionEvent<>(provisionTO, 3, target));\n-                    }\n-                }, ActionLink.ActionType.ACCOUNT_LINK, StandardEntitlement.RESOURCE_UPDATE).\n                 addAction(new ActionLink<ProvisionTO>() {\n \n                     private static final long serialVersionUID = -3722207913631435524L;"},{"sha":"3d05eeea45397d43fd85b12573423ac3629d2275","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -166,7 +166,7 @@ protected List<String> load() {\n             @Override\n             protected List<String> load() {\n                 return CollectionUtils.collect(\n-                        schemaRestClient.getSchemas(SchemaType.PLAIN, anyTypeRestClient.get(type).getClasses().\n+                        schemaRestClient.getSchemas(SchemaType.PLAIN, anyTypeRestClient.read(type).getClasses().\n                                 toArray(new String[] {})),\n                         EntityTOUtils.<String, AbstractSchemaTO>keyTransformer(),\n                         new ArrayList<String>());"},{"sha":"26b8601a763d608237376438752480d3a4ef57f9","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AnyTypeClassRestClient.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeClassRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeClassRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeClassRestClient.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -30,6 +30,10 @@ public class AnyTypeClassRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -2211371717449597247L;\n \n+    public AnyTypeClassTO read(final String key) {\n+        return getService(AnyTypeClassService.class).read(key);\n+    }\n+\n     public List<AnyTypeClassTO> list() {\n         List<AnyTypeClassTO> types = Collections.emptyList();\n "},{"sha":"06b45df70588d8f853feae89add5d0195cc6b6dc","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AnyTypeRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -28,11 +28,11 @@ public class AnyTypeRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -2211371717449597247L;\n \n-    public AnyTypeTO get(final String kind) {\n+    public AnyTypeTO read(final String key) {\n         AnyTypeTO type = null;\n \n         try {\n-            type = getService(AnyTypeService.class).read(kind);\n+            type = getService(AnyTypeService.class).read(key);\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While reading all any types\", e);\n         }"},{"sha":"ed30b691a417264060e037709f5bb9a62ea925ae","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLink.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLink.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLink.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLink.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -41,7 +41,6 @@ public ActionLink(final T modelObject) {\n     public enum ActionType {\n \n         MAPPING(\"update\"),\n-        ACCOUNT_LINK(\"update\"),\n         MUSTCHANGEPASSWORD(\"update\"),\n         RESET_TIME(\"update\"),\n         CLONE(\"create\"),"},{"sha":"4040bf64157a369d7551d257c40e10efdb8624db","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksPanel.java","status":"modified","additions":0,"deletions":24,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -56,7 +56,6 @@ private ActionLinksPanel(final String componentId, final IModel<T> model) {\n         super.add(new Fragment(\"panelManageUsers\", \"emptyFragment\", this));\n         super.add(new Fragment(\"panelManageGroups\", \"emptyFragment\", this));\n         super.add(new Fragment(\"panelMapping\", \"emptyFragment\", this));\n-        super.add(new Fragment(\"panelAccountLink\", \"emptyFragment\", this));\n         super.add(new Fragment(\"panelMustChangePassword\", \"emptyFragment\", this));\n         super.add(new Fragment(\"panelResetTime\", \"emptyFragment\", this));\n         super.add(new Fragment(\"panelClone\", \"emptyFragment\", this));\n@@ -194,25 +193,6 @@ public String getAjaxIndicatorMarkupId() {\n                 }.setVisible(link.isEnabled(model.getObject())));\n                 break;\n \n-            case ACCOUNT_LINK:\n-                fragment = new Fragment(\"panelAccountLink\", \"fragmentAccountLink\", this);\n-\n-                fragment.addOrReplace(new IndicatingAjaxLink<Void>(\"accountLinkLink\") {\n-\n-                    private static final long serialVersionUID = -7978723352517770644L;\n-\n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target) {\n-                        link.onClick(target, model.getObject());\n-                    }\n-\n-                    @Override\n-                    public String getAjaxIndicatorMarkupId() {\n-                        return disableIndicator ? StringUtils.EMPTY : super.getAjaxIndicatorMarkupId();\n-                    }\n-                }.setVisible(link.isEnabled(model.getObject())));\n-                break;\n-\n             case MUSTCHANGEPASSWORD:\n                 fragment = new Fragment(\"panelMustChangePassword\", \"fragmentMustChangePassword\", this);\n \n@@ -808,10 +788,6 @@ public void remove(final ActionLink.ActionType type) {\n                 super.addOrReplace(new Fragment(\"panelMapping\", \"emptyFragment\", this));\n                 break;\n \n-            case ACCOUNT_LINK:\n-                super.addOrReplace(new Fragment(\"panelAccountLink\", \"emptyFragment\", this));\n-                break;\n-\n             case MUSTCHANGEPASSWORD:\n                 super.addOrReplace(new Fragment(\"panelMustChangePassword\", \"emptyFragment\", this));\n                 break;"},{"sha":"0af6e6165f611616864936113c382c1df315c721","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxPalettePanel.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -78,7 +78,7 @@ public AjaxPalettePanel(\n \n         choicesModel = new PaletteLoadableDetachableModel(builder) {\n \n-            private static final long serialVersionUID = 1L;\n+            private static final long serialVersionUID = -108100712154481840L;\n \n             @Override\n             protected List<T> getChoices() {\n@@ -174,7 +174,7 @@ public List<T> getSelectedList() {\n \n         form.add(new AjaxSubmitLink(\"search\") {\n \n-            private static final long serialVersionUID = 1L;\n+            private static final long serialVersionUID = -1765773642975892072L;\n \n             @Override\n             protected void onAfterSubmit(final AjaxRequestTarget target, final Form<?> form) {\n@@ -184,6 +184,10 @@ protected void onAfterSubmit(final AjaxRequestTarget target, final Form<?> form)\n         });\n     }\n \n+    public LoadableDetachableModel<List<T>> getChoicesModel() {\n+        return choicesModel;\n+    }\n+\n     @Override\n     public AjaxPalettePanel<T> setModelObject(final List<T> object) {\n         palette.setDefaultModelObject(object);\n@@ -196,7 +200,7 @@ public Collection<T> getModelCollection() {\n \n     public static class Builder<T extends Serializable> implements Serializable {\n \n-        private static final long serialVersionUID = 1L;\n+        private static final long serialVersionUID = 991248996001040352L;\n \n         private IChoiceRenderer<T> renderer;\n \n@@ -275,7 +279,7 @@ public AjaxPalettePanel<T> build(final String id, final IModel<List<T>> model, f\n \n     private abstract class PaletteLoadableDetachableModel extends LoadableDetachableModel<List<T>> {\n \n-        private static final long serialVersionUID = 1L;\n+        private static final long serialVersionUID = -7745220313769774616L;\n \n         private final Builder<T> builder;\n "},{"sha":"69df4ba488de70f1aed253f68a37db6701b60680","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Ownership.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -157,7 +157,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 new ListModel<>(new ArrayList<SearchClause>())).required(false).enableSearch().build(\"groupsearch\");\n         groupSearchFragment.add(groupSearchPanel.setRenderBodyOnly(true));\n \n-        AnyTypeTO anyTypeTO = anyTypeRestClient.get(AnyTypeKind.GROUP.name());\n+        AnyTypeTO anyTypeTO = anyTypeRestClient.read(AnyTypeKind.GROUP.name());\n \n         groupDirectoryPanel = GroupSelectionDirectoryPanel.class.cast(new GroupSelectionDirectoryPanel.Builder(\n                 anyTypeClassRestClient.list(anyTypeTO.getClasses()),\n@@ -171,7 +171,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 new ListModel<>(new ArrayList<SearchClause>())).required(false).enableSearch().build(\"usersearch\"));\n         userSearchFragment.add(userSearchPanel.setRenderBodyOnly(true));\n \n-        anyTypeTO = anyTypeRestClient.get(AnyTypeKind.USER.name());\n+        anyTypeTO = anyTypeRestClient.read(AnyTypeKind.USER.name());\n \n         userDirectoryPanel = UserSelectionDirectoryPanel.class.cast(new UserSelectionDirectoryPanel.Builder(\n                 anyTypeClassRestClient.list(anyTypeTO.getClasses()),"},{"sha":"73d6bfbaaae54f424f858359233f13f0e59f4641","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/provision/ProvisionWizardBuilder.java","status":"modified","additions":18,"deletions":1,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -26,6 +26,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.ProvisionAuxClassesPanel;\n import org.apache.syncope.client.console.panels.ResourceMappingPanel;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.wicket.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n@@ -138,6 +139,21 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         }\n     }\n \n+    /**\n+     * AuxClasses definition step.\n+     */\n+    private final class AuxClasses extends WizardStep {\n+\n+        private static final long serialVersionUID = 5315236191866427500L;\n+\n+        AuxClasses(final ProvisionTO item) {\n+            setTitleModel(new ResourceModel(\"auxClasses.title\"));\n+            setSummaryModel(new StringResourceModel(\"auxClasses.summary\", this, new Model<>(item)));\n+\n+            add(new ProvisionAuxClassesPanel(\"auxClasses\", item));\n+        }\n+    }\n+\n     /**\n      * Mapping definition step.\n      */\n@@ -146,7 +162,7 @@ private final class Mapping extends WizardStep {\n         private static final long serialVersionUID = 3454904947720856253L;\n \n         Mapping(final ProvisionTO item) {\n-            setTitleModel(new ResourceModel(\"mapping.title\", \"Mapping\"));\n+            setTitleModel(new ResourceModel(\"mapping.title\"));\n             setSummaryModel(new StringResourceModel(\"mapping.summary\", this, new Model<>(item)));\n \n             add(new ResourceMappingPanel(\"mapping\", resourceTO, item));\n@@ -225,6 +241,7 @@ public ProvisionWizardBuilder(final String id, final ResourceTO resurceTO, final\n     @Override\n     protected WizardModel buildModelSteps(final ProvisionTO modelObject, final WizardModel wizardModel) {\n         wizardModel.add(new ObjectType(modelObject));\n+        wizardModel.add(new AuxClasses(modelObject));\n         wizardModel.add(new Mapping(modelObject));\n         wizardModel.add(new ConnObjectLink(modelObject));\n         return wizardModel;"},{"sha":"3be0e4353e19428a6f8ac9ba80b1586b22b1c61a","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/ProvisionAuxClassesPanel.html","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.html?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -0,0 +1,23 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <span wicket:id=\"auxClasses\"/>\n+  </wicket:panel>\n+</html>"},{"sha":"5b21e1f19207bb0e7e876b87e0a223da5920b690","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/ResourceModal.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.properties?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -64,5 +64,5 @@ anyType=Object Type\n objectClass= Object Class\n __ACCOUNT__=ACCOUNT\n __GROUP__=GROUP\n-listview.caption=Provisioning configuration instances\n connectorCapabilities=Connector Capabilities\n+auxClasses=Auxiliary Classes"},{"sha":"1f7d76a32845996be1910c50c671b508c91c08ad","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/ResourceModal_it.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal_it.properties?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -63,5 +63,5 @@ anyType=Oggetto\n objectClass=Classe\n __ACCOUNT__=ACCOUNT\n __GROUP__=GROUP\n-listview.caption=Istanze di configurazione del provisioning\n connectorCapabilities=Capabilitiey Connettore\n+auxClasses=Classi Ausiliarie"},{"sha":"db984d993fc4cad6941eb1bf2fdcd3c2ee241dfe","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/ResourceModal_pt_BR.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal_pt_BR.properties?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -63,5 +63,5 @@ anyType=Objeto\n objectClass=Classe\n __ACCOUNT__=ACCOUNT\n __GROUP__=GROUP\n-listview.caption=Inst\\u00e2ncias de provisionamento de recursos\n connectorCapabilities=Capacidades do Conector\n+auxClasses=Classes Auxiliares"},{"sha":"50d3c6c2df9237dc7b39753c56da99f908443d00","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksPanel.html","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.html?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -38,7 +38,6 @@\n     <span wicket:id=\"panelNotFound\">[plus]</span>\n     <span wicket:id=\"panelView\">[plus]</span>\n     <span wicket:id=\"panelMapping\">[plus]</span>\n-    <span wicket:id=\"panelAccountLink\">[plus]</span>\n     <span wicket:id=\"panelResetTime\">[plus]</span>\n     <span wicket:id=\"panelClone\">[plus]</span>\n     <span wicket:id=\"panelCreate\">[plus]</span>\n@@ -87,10 +86,6 @@\n       <a href=\"#\" wicket:id=\"mappingLink\" class=\"btn\"><i class=\"fa fa-exchange\" alt=\"mapping icon\" title=\"Mapping\"></i></a>\n     </wicket:fragment>\n \n-    <wicket:fragment wicket:id=\"fragmentAccountLink\">\n-      <a href=\"#\" wicket:id=\"accountLinkLink\" class=\"btn\"><i class=\"fa fa-external-link\" alt=\"account link icon\" title=\"Account Link\"></i></a>\n-    </wicket:fragment>\n-\n     <wicket:fragment wicket:id=\"fragmentResetTime\">\n       <a href=\"#\" wicket:id=\"resetTimeLink\" class=\"btn\"><i class=\"fa fa-hourglass-start\" alt=\"reset time icon\" title=\"Reset Time\"></i></a>\n     </wicket:fragment>"},{"sha":"9b03dd72aa912b70ca1f786bba3878ce117136e9","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/provision/ProvisionWizardBuilder$AuxClasses.html","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24AuxClasses.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24AuxClasses.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24AuxClasses.html?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -0,0 +1,23 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <span wicket:id=\"auxClasses\"/>\n+  </wicket:panel>\n+</html>\n\\ No newline at end of file"},{"sha":"82233607c30bfd53a357924621b235bef74a30a3","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/provision/ProvisionWizardBuilder$AuxClasses.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24AuxClasses.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24AuxClasses.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24AuxClasses.properties?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+auxClasses.title=Auxiliary Classes\n+auxClasses.summary=\n+"},{"sha":"372ef2df7077c7e7c3a21802ab6feb8d1887dce2","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/provision/ProvisionWizardBuilder$AuxClasses_it.properties","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24AuxClasses_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24AuxClasses_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24AuxClasses_it.properties?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+auxClasses.title=Classi Ausiliarie\n+auxClasses.summary="},{"sha":"0946b9d60c81f26df9772996b7bb07e11f417e19","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/provision/ProvisionWizardBuilder$AuxClasses_pt_BR.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24AuxClasses_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24AuxClasses_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24AuxClasses_pt_BR.properties?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+auxClasses.title=Classes Auxiliares\n+auxClasses.summary=\n+"},{"sha":"dad26b4aa61cc2c005f0dae8d0336514c9ccf589","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/provision/ProvisionWizardBuilder$ConnObjectLink.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24ConnObjectLink.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24ConnObjectLink.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24ConnObjectLink.properties?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -15,6 +15,6 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-link.title=Specify the connector object link (if required)\n+link.title=Connector object link (if required)\n link.summary=\n-\n+connObjectLinkCheckbox=Use ConnObjectLink"},{"sha":"cf74d19a5b128461fe7ed1e867541cbf2cbf4232","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/provision/ProvisionWizardBuilder$ConnObjectLink_it.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24ConnObjectLink_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24ConnObjectLink_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24ConnObjectLink_it.properties?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -15,6 +15,6 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-link.title=Specify the connector object link (if required)\n+link.title=Connector object link (se necessario)\n link.summary=\n-\n+connObjectLinkCheckbox=Usa ConnObjectLink"},{"sha":"305b0b778a9fc1845f9e3036e8c346cc7620f72a","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/provision/ProvisionWizardBuilder$ConnObjectLink_pt_BR.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24ConnObjectLink_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24ConnObjectLink_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24ConnObjectLink_pt_BR.properties?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -15,6 +15,6 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-link.title=Specify the connector object link (if required)\n+link.title=Connector object link (se necess\\u00e1rio)\n link.summary=\n-\n+connObjectLinkCheckbox=Usar ConnObjectLink"},{"sha":"99d1add47687294bfa2ca0fb2742a3ae2bccf476","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/provision/ProvisionWizardBuilder$Mapping.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24Mapping.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24Mapping.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24Mapping.properties?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -15,6 +15,6 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-mapping.title=Specify the mapping for this provisioning object\n+mapping.title=Mapping\n mapping.summary=\n "},{"sha":"fde5de068609ab4194cbc4ae459bc7a54b0d4dfe","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/provision/ProvisionWizardBuilder$Mapping_it.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24Mapping_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24Mapping_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24Mapping_it.properties?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -15,5 +15,5 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-mapping.title=Specify the mapping for this provisioning object\n+mapping.title=Mapping\n mapping.summary="},{"sha":"99d1add47687294bfa2ca0fb2742a3ae2bccf476","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/provision/ProvisionWizardBuilder$Mapping_pt_BR.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24Mapping_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24Mapping_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24Mapping_pt_BR.properties?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -15,6 +15,6 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-mapping.title=Specify the mapping for this provisioning object\n+mapping.title=Mapping\n mapping.summary=\n "},{"sha":"1b951d341f0253bcd42154a44d2edb0fa6223d6c","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/provision/ProvisionWizardBuilder$ObjectType.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24ObjectType.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24ObjectType.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24ObjectType.html?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -20,7 +20,6 @@\n   <wicket:panel>\n     <div wicket:id=\"container\">\n       <div class=\"form-group\">\n-        <label>Object Type</label>\n         <span wicket:id=\"type\"/>\n       </div>\n       <div class=\"form-group\">"},{"sha":"7a683d52c54d3d2059eb94af734f4c857799e13c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisionTO.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -39,6 +39,8 @@ public class ProvisionTO extends AbstractBaseBean implements EntityTO<Long> {\n \n     private String objectClass;\n \n+    private final List<String> auxClasses = new ArrayList<>();\n+\n     private String syncToken;\n \n     private MappingTO mapping;\n@@ -71,6 +73,13 @@ public void setObjectClass(final String objectClass) {\n         this.objectClass = objectClass;\n     }\n \n+    @XmlElementWrapper(name = \"auxClasses\")\n+    @XmlElement(name = \"class\")\n+    @JsonProperty(\"auxClasses\")\n+    public List<String> getAuxClasses() {\n+        return auxClasses;\n+    }\n+\n     public String getSyncToken() {\n         return syncToken;\n     }"},{"sha":"b92e9f2f812f5d6b27fe07e7dec3197dbea54672","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ExternalResourceDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -32,6 +33,8 @@ public interface ExternalResourceDAO extends DAO<ExternalResource, String> {\n \n     Provision findProvision(Long key);\n \n+    List<Provision> findProvisionsByAuxClass(AnyTypeClass anyTypeClass);\n+\n     List<ExternalResource> findByPolicy(Policy policy);\n \n     List<ExternalResource> findWithoutPolicy(Class<? extends Policy> policyClass);"},{"sha":"1de4ba2d25d7e07b0a8d1f1f1f3304b65c3d6c75","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -63,7 +63,7 @@ public interface GroupDAO extends AnyDAO<Group> {\n      */\n     Map<Long, PropagationByResource> findUsersWithTransitiveResources(Long groupKey);\n \n-    List<TypeExtension> findTypeExtensionByAnyTypeClass(AnyTypeClass anyTypeClass);\n+    List<TypeExtension> findTypeExtensions(AnyTypeClass anyTypeClass);\n \n     void refreshDynMemberships(AnyObject anyObject);\n "},{"sha":"30cd970f493403b82305fb9cc8b2d90190cfd72b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/Provision.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FProvision.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FProvision.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FProvision.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -18,7 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.resource;\n \n+import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.SyncToken;\n@@ -37,6 +39,10 @@ public interface Provision extends Entity<Long> {\n \n     void setObjectClass(ObjectClass objectClass);\n \n+    boolean add(AnyTypeClass anyTypeClass);\n+\n+    List<? extends AnyTypeClass> getAuxClasses();\n+\n     SyncToken getSyncToken();\n \n     String getSerializedSyncToken();"},{"sha":"ee301f569e9b7736a450ab72314fbc769f20c12d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeClassDAO.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n@@ -33,6 +34,7 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n@@ -55,6 +57,9 @@ public class JPAAnyTypeClassDAO extends AbstractDAO<AnyTypeClass, String> implem\n     @Autowired\n     private GroupDAO groupDAO;\n \n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n     @Override\n     public AnyTypeClass find(final String key) {\n         return entityManager().find(JPAAnyTypeClass.class, key);\n@@ -105,7 +110,7 @@ public void delete(final String key) {\n             type.getClasses().remove(anyTypeClass);\n         }\n \n-        for (TypeExtension typeExt : groupDAO.findTypeExtensionByAnyTypeClass(anyTypeClass)) {\n+        for (TypeExtension typeExt : groupDAO.findTypeExtensions(anyTypeClass)) {\n             typeExt.getAuxClasses().remove(anyTypeClass);\n \n             if (typeExt.getAuxClasses().isEmpty()) {\n@@ -114,6 +119,10 @@ public void delete(final String key) {\n             }\n         }\n \n+        for (Provision provision : resourceDAO.findProvisionsByAuxClass(anyTypeClass)) {\n+            provision.getAuxClasses().remove(anyTypeClass);\n+        }\n+\n         entityManager().remove(anyTypeClass);\n     }\n "},{"sha":"1f089381822426dc752088d6fb612c62045ca7da","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n@@ -94,6 +95,16 @@ public Provision findProvision(final Long key) {\n         return entityManager().find(JPAProvision.class, key);\n     }\n \n+    @Override\n+    public List<Provision> findProvisionsByAuxClass(final AnyTypeClass anyTypeClass) {\n+        TypedQuery<Provision> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAProvision.class.getSimpleName()\n+                + \" e WHERE :anyTypeClass MEMBER OF e.auxClasses\", Provision.class);\n+        query.setParameter(\"anyTypeClass\", anyTypeClass);\n+\n+        return query.getResultList();\n+    }\n+\n     private StringBuilder getByPolicyQuery(final Class<? extends Policy> policyClass) {\n         StringBuilder query = new StringBuilder(\"SELECT e FROM \").\n                 append(JPAExternalResource.class.getSimpleName())."},{"sha":"990962a2ff7241a355f03ab6dd36ccfe64146fbe","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -284,7 +284,7 @@ public Map<Long, PropagationByResource> findUsersWithTransitiveResources(final L\n     }\n \n     @Override\n-    public List<TypeExtension> findTypeExtensionByAnyTypeClass(final AnyTypeClass anyTypeClass) {\n+    public List<TypeExtension> findTypeExtensions(final AnyTypeClass anyTypeClass) {\n         TypedQuery<TypeExtension> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPATypeExtension.class.getSimpleName()\n                 + \" e WHERE :anyTypeClass MEMBER OF e.auxClasses\", TypeExtension.class);"},{"sha":"4ae1043107dad30887efee8d4fedf1b39cf2e785","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAProvision.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -18,23 +18,30 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.resource;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n import javax.persistence.Lob;\n+import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.SyncToken;\n \n@@ -59,6 +66,13 @@ public class JPAProvision extends AbstractEntity<Long> implements Provision {\n     @NotNull\n     private String objectClass;\n \n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"provision_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"anyTypeClass_name\"))\n+    private List<JPAAnyTypeClass> auxClasses = new ArrayList<>();\n+\n     @Lob\n     private String serializedSyncToken;\n \n@@ -104,6 +118,17 @@ public void setObjectClass(final ObjectClass objectClass) {\n         this.objectClass = objectClass == null ? null : objectClass.getObjectClassValue();\n     }\n \n+    @Override\n+    public boolean add(final AnyTypeClass auxClass) {\n+        checkType(auxClass, JPAAnyTypeClass.class);\n+        return auxClasses.contains((JPAAnyTypeClass) auxClass) || auxClasses.add((JPAAnyTypeClass) auxClass);\n+    }\n+\n+    @Override\n+    public List<? extends AnyTypeClass> getAuxClasses() {\n+        return auxClasses;\n+    }\n+\n     @Override\n     public SyncToken getSyncToken() {\n         return serializedSyncToken == null"},{"sha":"9873f32cedc9722b55dad62e906474c0fc2b000b","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -819,6 +819,9 @@ under the License.\n                connObjectKey=\"0\" password=\"1\" purpose=\"PROPAGATION\"/>\n                          \n   <Provision id=\"9\" resource_name=\"resource-csv\" anyType_name=\"USER\" objectClass=\"__ACCOUNT__\"/>\n+  <Provision_AnyTypeClass provision_id=\"9\" anyTypeClass_name=\"csv\"/>\n+  <Provision_AnyTypeClass provision_id=\"9\" anyTypeClass_name=\"generic membership\"/>\n+  <Provision_AnyTypeClass provision_id=\"9\" anyTypeClass_name=\"minimal group\"/>\n   <Mapping id=\"9\" provision_id=\"9\"/>\n   <MappingItem id=\"200\" extAttrName=\"id\" mapping_id=\"9\"\n                intMappingType=\"Username\" mandatoryCondition=\"true\"\n@@ -862,6 +865,8 @@ under the License.\n                connObjectKey=\"0\" password=\"1\" purpose=\"BOTH\"/>\n \n   <Provision id=\"11\" resource_name=\"resource-ldap\" anyType_name=\"USER\" objectClass=\"__ACCOUNT__\"/>\n+  <Provision_AnyTypeClass provision_id=\"11\" anyTypeClass_name=\"generic membership\"/>\n+  <Provision_AnyTypeClass provision_id=\"11\" anyTypeClass_name=\"minimal group\"/>\n   <Mapping id=\"11\" provision_id=\"11\"\n            connObjectLink=\"&apos;uid=&apos; + username + &apos;,ou=people,o=isp&apos;\"/>\n   <MappingItem id=\"311\" connObjectKey=\"1\" password=\"0\" mapping_id=\"11\""},{"sha":"51ebfa54b82a0d93f2b847eacc0363008c931159","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":129,"deletions":57,"changes":186,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -18,20 +18,21 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n-import java.util.Collection;\n import java.util.HashSet;\n import java.util.Iterator;\n-import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n@@ -42,18 +43,23 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n+import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n-import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n \n @Component\n public class ResourceDataBinderImpl implements ResourceDataBinder {\n@@ -74,6 +80,9 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {\n     @Autowired\n     private VirSchemaDAO virSchemaDAO;\n \n+    @Autowired\n+    private AnyTypeClassDAO anyTypeClassDAO;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -127,6 +136,23 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                 }\n                 provision.setObjectClass(new ObjectClass(provisionTO.getObjectClass()));\n \n+                // add all classes contained in the TO\n+                for (String name : provisionTO.getAuxClasses()) {\n+                    AnyTypeClass anyTypeClass = anyTypeClassDAO.find(name);\n+                    if (anyTypeClass == null) {\n+                        LOG.warn(\"Ignoring invalid {}: {}\", AnyTypeClass.class.getSimpleName(), name);\n+                    } else {\n+                        provision.add(anyTypeClass);\n+                    }\n+                }\n+                // remove all classes not contained in the TO\n+                for (Iterator<? extends AnyTypeClass> itor = provision.getAuxClasses().iterator(); itor.hasNext();) {\n+                    AnyTypeClass anyTypeClass = itor.next();\n+                    if (!provisionTO.getAuxClasses().contains(anyTypeClass.getKey())) {\n+                        itor.remove();\n+                    }\n+                }\n+\n                 if (provisionTO.getSyncToken() == null) {\n                     provision.setSyncToken(null);\n                 }\n@@ -142,7 +168,29 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                     } else {\n                         mapping.getItems().clear();\n                     }\n-                    populateMapping(provisionTO.getMapping(), mapping, entityFactory.newEntity(MappingItem.class));\n+\n+                    AnyTypeClassTO allowedSchemas = new AnyTypeClassTO();\n+                    for (Iterator<AnyTypeClass> itor = IteratorUtils.chainedIterator(\n+                            provision.getAnyType().getClasses().iterator(),\n+                            provision.getAuxClasses().iterator()); itor.hasNext();) {\n+\n+                        AnyTypeClass anyTypeClass = itor.next();\n+                        allowedSchemas.getPlainSchemas().addAll(\n+                                CollectionUtils.collect(anyTypeClass.getPlainSchemas(),\n+                                        EntityUtils.<String, PlainSchema>keyTransformer()));\n+                        allowedSchemas.getDerSchemas().addAll(\n+                                CollectionUtils.collect(anyTypeClass.getDerSchemas(),\n+                                        EntityUtils.<String, DerSchema>keyTransformer()));\n+                        allowedSchemas.getVirSchemas().addAll(\n+                                CollectionUtils.collect(anyTypeClass.getVirSchemas(),\n+                                        EntityUtils.<String, VirSchema>keyTransformer()));\n+                    }\n+\n+                    populateMapping(\n+                            provisionTO.getMapping(),\n+                            mapping,\n+                            entityFactory.newEntity(MappingItem.class),\n+                            allowedSchemas);\n                 }\n \n                 if (provisionTO.getVirSchemas().isEmpty()) {\n@@ -201,70 +249,92 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n         return resource;\n     }\n \n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    private void populateMapping(final MappingTO mappingTO, final Mapping mapping, final MappingItem prototype) {\n+    private void populateMapping(\n+            final MappingTO mappingTO,\n+            final Mapping mapping,\n+            final MappingItem prototype,\n+            final AnyTypeClassTO allowedSchemas) {\n+\n         mapping.setConnObjectLink(mappingTO.getConnObjectLink());\n \n-        for (MappingItem item : getMappingItems(mappingTO.getItems(), prototype)) {\n-            item.setMapping(mapping);\n-            if (item.isConnObjectKey()) {\n-                mapping.setConnObjectKeyItem(item);\n+        SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n+        SyncopeClientException invalidMapping = SyncopeClientException.build(ClientExceptionType.InvalidMapping);\n+        SyncopeClientException requiredValuesMissing =\n+                SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n+\n+        for (MappingItemTO itemTO : mappingTO.getItems()) {\n+            if (itemTO == null || itemTO.getIntMappingType() == null) {\n+                LOG.error(\"Null {} or missing {}\",\n+                        MappingItemTO.class.getSimpleName(), IntMappingType.class.getSimpleName());\n+                invalidMapping.getElements().add(\n+                        \"Null \" + MappingItemTO.class.getSimpleName()\n+                        + \" or missing \" + IntMappingType.class.getSimpleName());\n             } else {\n-                mapping.add(item);\n-            }\n-        }\n-    }\n-\n-    private Set<MappingItem> getMappingItems(final Collection<MappingItemTO> itemTOs, final MappingItem prototype) {\n-        Set<MappingItem> items = new HashSet<>(itemTOs.size());\n-        for (MappingItemTO itemTO : itemTOs) {\n-            items.add(getMappingItem(itemTO, prototype));\n-        }\n-\n-        return items;\n-    }\n+                if (itemTO.getIntAttrName() == null) {\n+                    if (IntMappingType.getEmbedded().contains(itemTO.getIntMappingType())) {\n+                        itemTO.setIntAttrName(itemTO.getIntMappingType().toString());\n+                    } else {\n+                        requiredValuesMissing.getElements().add(\"intAttrName\");\n+                        scce.addException(requiredValuesMissing);\n+                    }\n+                }\n \n-    private MappingItem getMappingItem(final MappingItemTO itemTO, final MappingItem prototype) {\n-        if (itemTO == null || itemTO.getIntMappingType() == null) {\n-            LOG.error(\"Null mappingTO provided\");\n-            return null;\n-        }\n+                boolean allowed;\n+                switch (itemTO.getIntMappingType()) {\n+                    case UserPlainSchema:\n+                    case GroupPlainSchema:\n+                    case AnyObjectPlainSchema:\n+                        allowed = allowedSchemas.getPlainSchemas().contains(itemTO.getIntAttrName());\n+                        break;\n+\n+                    case UserDerivedSchema:\n+                    case GroupDerivedSchema:\n+                    case AnyObjectDerivedSchema:\n+                        allowed = allowedSchemas.getDerSchemas().contains(itemTO.getIntAttrName());\n+                        break;\n+\n+                    case UserVirtualSchema:\n+                    case GroupVirtualSchema:\n+                    case AnyObjectVirtualSchema:\n+                        allowed = allowedSchemas.getVirSchemas().contains(itemTO.getIntAttrName());\n+                        break;\n+\n+                    default:\n+                        allowed = true;\n+                }\n \n-        SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n+                if (allowed) {\n+                    // no mandatory condition implies mandatory condition false\n+                    if (!JexlUtils.isExpressionValid(itemTO.getMandatoryCondition() == null\n+                            ? \"false\" : itemTO.getMandatoryCondition())) {\n \n-        SyncopeClientException requiredValuesMissing = SyncopeClientException.build(\n-                ClientExceptionType.RequiredValuesMissing);\n+                        SyncopeClientException invalidMandatoryCondition =\n+                                SyncopeClientException.build(ClientExceptionType.InvalidValues);\n+                        invalidMandatoryCondition.getElements().add(itemTO.getMandatoryCondition());\n+                        scce.addException(invalidMandatoryCondition);\n+                    }\n \n-        if (itemTO.getIntAttrName() == null) {\n-            if (IntMappingType.getEmbedded().contains(itemTO.getIntMappingType())) {\n-                itemTO.setIntAttrName(itemTO.getIntMappingType().toString());\n-            } else {\n-                requiredValuesMissing.getElements().add(\"intAttrName\");\n+                    MappingItem item = SerializationUtils.clone(prototype);\n+                    BeanUtils.copyProperties(itemTO, item, MAPPINGITEM_IGNORE_PROPERTIES);\n+                    item.setMapping(mapping);\n+                    if (item.isConnObjectKey()) {\n+                        mapping.setConnObjectKeyItem(item);\n+                    } else {\n+                        mapping.add(item);\n+                    }\n+                } else {\n+                    LOG.error(\"{} not allowed\", itemTO.getIntAttrName());\n+                    invalidMapping.getElements().add(itemTO.getIntAttrName() + \" not allowed\");\n+                }\n             }\n         }\n \n-        // Throw composite exception if there is at least one element set in the composing exceptions\n-        if (!requiredValuesMissing.isEmpty()) {\n-            scce.addException(requiredValuesMissing);\n+        if (!invalidMapping.getElements().isEmpty()) {\n+            scce.addException(invalidMapping);\n         }\n-\n-        // no mandatory condition implies mandatory condition false\n-        if (!JexlUtils.isExpressionValid(itemTO.getMandatoryCondition() == null\n-                ? \"false\" : itemTO.getMandatoryCondition())) {\n-\n-            SyncopeClientException invalidMandatoryCondition = SyncopeClientException.build(\n-                    ClientExceptionType.InvalidValues);\n-            invalidMandatoryCondition.getElements().add(itemTO.getMandatoryCondition());\n-            scce.addException(invalidMandatoryCondition);\n-        }\n-\n         if (scce.hasExceptions()) {\n             throw scce;\n         }\n-\n-        MappingItem item = SerializationUtils.clone(prototype);\n-        BeanUtils.copyProperties(itemTO, item, MAPPINGITEM_IGNORE_PROPERTIES);\n-        return item;\n     }\n \n     private void populateMappingTO(final Mapping mapping, final MappingTO mappingTO) {\n@@ -308,6 +378,8 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n             provisionTO.setKey(provision.getKey());\n             provisionTO.setAnyType(provision.getAnyType().getKey());\n             provisionTO.setObjectClass(provision.getObjectClass().getObjectClassValue());\n+            provisionTO.getAuxClasses().addAll(CollectionUtils.collect(\n+                    provision.getAuxClasses(), EntityUtils.<String, AnyTypeClass>keyTransformer()));\n             provisionTO.setSyncToken(provision.getSerializedSyncToken());\n \n             if (provision.getMapping() != null) {"},{"sha":"edfcf049e38fbcf9ddc9504440424818026933f2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/TopologyITCase.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -65,7 +65,7 @@ public void showTopologyToggleMenu() {\n     @Test\n     public void editProvisioning() {\n         wicketTester.clickLink(\"body:topologyLI:topology\");\n-        \n+\n         Component component = findComponentByProp(\"key\", \"body:resources\", \"ws-target-resource-1\");\n         assertNotNull(component);\n         wicketTester.executeAjaxEvent(component.getPageRelativePath() + \":res\", Constants.ON_CLICK);\n@@ -77,6 +77,11 @@ public void editProvisioning() {\n         wicketTester.clickLink(\"body:toggle:outerObjectsRepeater:0:outer:form:content:tabbedPanel:panel:container:\"\n                 + \"content:group:beans:0:actions:panelMapping:mappingLink\");\n \n+        FormTester formTester = wicketTester.newFormTester(\n+                \"body:toggle:outerObjectsRepeater:0:outer:form:content:tabbedPanel:panel:container:\"\n+                + \"content:wizard:form\");\n+        formTester.submit(\"buttons:next\");\n+\n         wicketTester.assertComponent(\"body:toggle:outerObjectsRepeater:0:outer:form:content:tabbedPanel:panel:\"\n                 + \"container:content:wizard:form:view:mapping:mappingContainer:mappings:1\", WebMarkupContainer.class);\n     }\n@@ -101,7 +106,7 @@ public void executePullTask() {\n     @Test\n     public void editPushTask() {\n         wicketTester.clickLink(\"body:topologyLI:topology\");\n-        \n+\n         Component component = findComponentByProp(\"key\", \"body:resources\", \"resource-ldap\");\n         assertNotNull(component);\n         wicketTester.executeAjaxEvent(component.getPageRelativePath() + \":res\", Constants.ON_CLICK);\n@@ -110,10 +115,9 @@ public void editPushTask() {\n                 + \"first:container:content:searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable:\"\n                 + \"body:rows:1:cells:9:cell:panelEdit:editLink\");\n \n-        final FormTester formTester = wicketTester.newFormTester(\n+        FormTester formTester = wicketTester.newFormTester(\n                 \"body:toggle:outerObjectsRepeater:1:outer:form:content:\"\n                 + \"tasks:firstLevelContainer:first:container:content:wizard:form\");\n-\n         formTester.setValue(\"view:description:textField\", \"test\");\n         formTester.submit(\"buttons:finish\");\n "},{"sha":"0c7f38060cb84155d236ec8ddadf4cc7bac29261","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -261,7 +261,7 @@ public void issueSYNCOPE598() {\n         assertNotNull(schemaTO);\n \n         AnyTypeClassTO typeClass = new AnyTypeClassTO();\n-        typeClass.setKey(\"SYNCOPE-598\");\n+        typeClass.setKey(\"SYNCOPE-598\" + getUUIDString());\n         typeClass.getPlainSchemas().add(schemaTO.getKey());\n         anyTypeClassService.create(typeClass);\n \n@@ -288,6 +288,7 @@ public void issueSYNCOPE598() {\n             ProvisionTO provisionTO = new ProvisionTO();\n             provisionTO.setAnyType(AnyTypeKind.GROUP.name());\n             provisionTO.setObjectClass(ObjectClass.GROUP_NAME);\n+            provisionTO.getAuxClasses().add(typeClass.getKey());\n             resourceTO.getProvisions().add(provisionTO);\n \n             MappingTO mapping = new MappingTO();"},{"sha":"e9923ef455b42bd3c7f27810f8076ebd32709964","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ResourceITCase.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -93,9 +93,9 @@ private ResourceTO buildResourceTO(final String resourceName) {\n         item = new MappingItemTO();\n         item.setExtAttrName(\"fullname\");\n         item.setIntAttrName(\"cn\");\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n+        item.setIntMappingType(IntMappingType.UserDerivedSchema);\n         item.setConnObjectKey(false);\n-        item.setPurpose(MappingPurpose.BOTH);\n+        item.setPurpose(MappingPurpose.PROPAGATION);\n         mapping.add(item);\n \n         return resourceTO;\n@@ -153,9 +153,9 @@ public void createOverridingProps() {\n         item = new MappingItemTO();\n         item.setExtAttrName(\"fullname\");\n         item.setIntAttrName(\"cn\");\n-        item.setIntMappingType(IntMappingType.UserPlainSchema);\n+        item.setIntMappingType(IntMappingType.UserDerivedSchema);\n         item.setConnObjectKey(false);\n-        item.setPurpose(MappingPurpose.BOTH);\n+        item.setPurpose(MappingPurpose.PROPAGATION);\n         mapping.add(item);\n \n         resourceTO.setKey(resourceName);\n@@ -262,8 +262,10 @@ public void createWithInvalidMapping() {\n             createResource(resourceTO);\n             fail(\"Create should not have worked\");\n         } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n-            assertEquals(\"intAttrName\", e.getElements().iterator().next());\n+            assertEquals(ClientExceptionType.Composite, e.getType());\n+            SyncopeClientException rvm = e.asComposite().getException(ClientExceptionType.RequiredValuesMissing);\n+            assertNotNull(rvm);\n+            assertEquals(\"intAttrName\", rvm.getElements().iterator().next());\n         }\n     }\n \n@@ -644,7 +646,6 @@ public void issueSYNCOPE418() {\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidExternalResource, e.getType());\n-\n             assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n         }\n     }"},{"sha":"b51670bd64fa1482f78d9d7cecd7cf3f619c25fa","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/VirAttrITCase.java","status":"modified","additions":30,"deletions":28,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/692e1f91c67d8eeaa731392d42daa03b1df07248/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/692e1f91c67d8eeaa731392d42daa03b1df07248/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java?ref=692e1f91c67d8eeaa731392d42daa03b1df07248","patch":"@@ -454,6 +454,35 @@ public void issueSYNCOPE453() {\n         String groupName = \"issueSYNCOPE453-Group-\" + getUUIDString();\n \n         try {\n+            // -------------------------------------------\n+            // Create a VirAttrITCase ad-hoc\n+            // -------------------------------------------\n+            VirSchemaTO rvirtualdata;\n+            try {\n+                rvirtualdata = schemaService.read(SchemaType.VIRTUAL, \"rvirtualdata\");\n+            } catch (SyncopeClientException e) {\n+                LOG.warn(\"rvirtualdata not found, re-creating\", e);\n+\n+                rvirtualdata = new VirSchemaTO();\n+                rvirtualdata.setKey(\"rvirtualdata\");\n+                rvirtualdata.setExtAttrName(\"businessCategory\");\n+                rvirtualdata.setProvision(20);\n+\n+                rvirtualdata = createSchema(SchemaType.VIRTUAL, rvirtualdata);\n+            }\n+            assertNotNull(rvirtualdata);\n+\n+            if (!\"minimal group\".equals(rvirtualdata.getAnyTypeClass())) {\n+                LOG.warn(\"rvirtualdata not in minimal group, restoring\");\n+\n+                AnyTypeClassTO minimalGroup = anyTypeClassService.read(\"minimal group\");\n+                minimalGroup.getVirSchemas().add(rvirtualdata.getKey());\n+                anyTypeClassService.update(minimalGroup);\n+\n+                rvirtualdata = schemaService.read(SchemaType.VIRTUAL, rvirtualdata.getKey());\n+                assertEquals(\"minimal group\", rvirtualdata.getAnyTypeClass());\n+            }\n+\n             // -------------------------------------------\n             // Create a resource ad-hoc\n             // -------------------------------------------\n@@ -465,6 +494,7 @@ public void issueSYNCOPE453() {\n             ProvisionTO provisionTO = new ProvisionTO();\n             provisionTO.setAnyType(AnyTypeKind.USER.name());\n             provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n+            provisionTO.getAuxClasses().add(\"minimal group\");\n             resourceTO.getProvisions().add(provisionTO);\n \n             MappingTO mapping = new MappingTO();\n@@ -495,34 +525,6 @@ public void issueSYNCOPE453() {\n             assertNotNull(getObject(\n                     resourceService.create(resourceTO).getLocation(), ResourceService.class, ResourceTO.class));\n             // -------------------------------------------\n-            // -------------------------------------------\n-            // Create a VirAttrITCase ad-hoc\n-            // -------------------------------------------\n-            VirSchemaTO rvirtualdata;\n-            try {\n-                rvirtualdata = schemaService.read(SchemaType.VIRTUAL, \"rvirtualdata\");\n-            } catch (SyncopeClientException e) {\n-                LOG.warn(\"rvirtualdata not found, re-creating\", e);\n-\n-                rvirtualdata = new VirSchemaTO();\n-                rvirtualdata.setKey(\"rvirtualdata\");\n-                rvirtualdata.setExtAttrName(\"businessCategory\");\n-                rvirtualdata.setProvision(20);\n-\n-                rvirtualdata = createSchema(SchemaType.VIRTUAL, rvirtualdata);\n-            }\n-            assertNotNull(rvirtualdata);\n-\n-            if (!\"minimal group\".equals(rvirtualdata.getAnyTypeClass())) {\n-                LOG.warn(\"rvirtualdata not in minimal group, restoring\");\n-\n-                AnyTypeClassTO minimalGroup = anyTypeClassService.read(\"minimal group\");\n-                minimalGroup.getVirSchemas().add(rvirtualdata.getKey());\n-                anyTypeClassService.update(minimalGroup);\n-\n-                rvirtualdata = schemaService.read(SchemaType.VIRTUAL, rvirtualdata.getKey());\n-                assertEquals(\"minimal group\", rvirtualdata.getAnyTypeClass());\n-            }\n \n             GroupTO groupTO = new GroupTO();\n             groupTO.setName(groupName);"}]}