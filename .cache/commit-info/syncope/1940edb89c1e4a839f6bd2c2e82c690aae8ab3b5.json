{"sha":"1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE5NDBlZGI4OWMxZTRhODM5ZjZiZDJjMmU4MmM2OTBhYWU4YWIzYjU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-05-07T07:55:12Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-05-07T07:55:12Z"},"message":"[SYNCOPE-1459] Service Discovery enabled among Core / Console / Enduser","tree":{"sha":"31b9ed631e46de669ef84253791eb38b9d5436d3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/31b9ed631e46de669ef84253791eb38b9d5436d3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4889da6f8fe620665720b23ce0148f0d7179e521","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4889da6f8fe620665720b23ce0148f0d7179e521","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4889da6f8fe620665720b23ce0148f0d7179e521"}],"stats":{"total":2887,"additions":2004,"deletions":883},"files":[{"sha":"1004ea76a32dc7eadd32b79912aaab81a4827a64","filename":"archetype/src/main/resources/archetype-resources/enduser/pom.xml","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fenduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fenduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fenduser%2Fpom.xml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -181,12 +181,13 @@ under the License.\n \n                     <copy file=\"${project.build.directory}/test-classes/enduser.properties\" \n                           todir=\"${project.build.directory}/${project.build.finalName}/WEB-INF/classes\" \n-                          overwrite=\"true\"/>\n-                    \n+                          overwrite=\"true\"/>                    \n+                    <copy file=\"${project.build.directory}/test-classes/keymaster.properties\" \n+                          todir=\"${project.build.directory}/${project.build.finalName}/WEB-INF/classes\" \n+                          overwrite=\"true\"/>                    \n                     <copy file=\"${project.build.directory}/test-classes/customFormAttributes.json\" \n                           todir=\"${project.build.directory}/${project.build.finalName}/WEB-INF/classes\" \n                           overwrite=\"true\"/>\n-                    \n                     <copy file=\"${project.build.directory}/test-classes/customTemplate.json\" \n                           todir=\"${project.build.directory}/${project.build.finalName}/WEB-INF/classes\" \n                           overwrite=\"true\"/>"},{"sha":"6c3e80915b099991ba9ac9fb9071b51e07ccf91d","filename":"client/enduser/src/main/resources/enduser.properties","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fenduser.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fenduser.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fenduser.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -24,10 +24,5 @@ adminUser=${adminUser}\n useGZIPCompression=true\n maxUploadFileSizeMB=5\n \n-scheme=http\n-host=localhost\n-port=8080\n-rootPath=/syncope/rest/\n-\n captcha=true\n xsrf=true"},{"sha":"f45383ef7b57517df56b45cef797cb8767b6f4df","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeWebApplication.java","status":"modified","additions":18,"deletions":20,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -75,10 +75,13 @@\n import org.apache.syncope.client.console.pages.MustChangePassword;\n import org.apache.syncope.client.ui.commons.SyncopeUIRequestCycleListener;\n import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.wicket.request.component.IRequestablePage;\n import org.apache.wicket.request.cycle.IRequestCycleListener;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -100,6 +103,12 @@ public static SyncopeWebApplication get() {\n     @Autowired\n     private ClassPathScanImplementationLookup lookup;\n \n+    @Autowired\n+    private ServiceOps serviceOps;\n+\n+    @Value(\"${service.discovery.address}\")\n+    private String address;\n+\n     private String site;\n \n     private String anonymousUser;\n@@ -108,15 +117,7 @@ public static SyncopeWebApplication get() {\n \n     private String reconciliationReportKey;\n \n-    private String scheme;\n-\n-    private String host;\n-\n-    private String port;\n-\n-    private String rootPath;\n-\n-    private String useGZIPCompression;\n+    private boolean useGZIPCompression;\n \n     private Integer maxUploadFileSizeMB;\n \n@@ -181,15 +182,7 @@ protected void init() {\n         anonymousKey = props.getProperty(\"anonymousKey\");\n         Args.notNull(anonymousKey, \"<anonymousKey>\");\n \n-        scheme = props.getProperty(\"scheme\");\n-        Args.notNull(scheme, \"<scheme>\");\n-        host = props.getProperty(\"host\");\n-        Args.notNull(host, \"<host>\");\n-        port = props.getProperty(\"port\");\n-        Args.notNull(port, \"<port>\");\n-        rootPath = props.getProperty(\"rootPath\");\n-        Args.notNull(rootPath, \"<rootPath>\");\n-        useGZIPCompression = props.getProperty(\"useGZIPCompression\");\n+        useGZIPCompression = BooleanUtils.toBoolean(props.getProperty(\"useGZIPCompression\"));\n         Args.notNull(useGZIPCompression, \"<useGZIPCompression>\");\n         maxUploadFileSizeMB = props.getProperty(\"maxUploadFileSizeMB\") == null\n                 ? null\n@@ -307,6 +300,11 @@ public IResource getResource() {\n         if (getDebugSettings().isAjaxDebugModeEnabled()) {\n             getDebugSettings().setComponentPathAttributeName(\"syncope-path\");\n         }\n+\n+        NetworkService ns = new NetworkService();\n+        ns.setType(NetworkService.Type.CONSOLE);\n+        ns.setAddress(address);\n+        serviceOps.register(ns);\n     }\n \n     @Override\n@@ -369,8 +367,8 @@ public Integer getQueueCapacity() {\n \n     public SyncopeClientFactoryBean newClientFactory() {\n         return new SyncopeClientFactoryBean().\n-                setAddress(scheme + \"://\" + host + \":\" + port + StringUtils.prependIfMissing(rootPath, \"/\")).\n-                setUseCompression(BooleanUtils.toBoolean(useGZIPCompression));\n+                setAddress(serviceOps.get(NetworkService.Type.CORE).getAddress()).\n+                setUseCompression(useGZIPCompression);\n     }\n \n     public List<String> getDomains() {"},{"sha":"0da92bedecd7d532ddf1a90d5d4c02dc7be1e30e","filename":"client/idrepo/console/src/main/resources/application.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -23,3 +23,5 @@ spring.http.encoding.enabled=true\n spring.http.encoding.force=true\n \n server.servlet.contextPath=/syncope-console\n+\n+service.discovery.address=http://localhost:8080/syncope/rest/"},{"sha":"f6995aa5d08af2f4829bb0463c0c6c4922294d21","filename":"client/idrepo/console/src/main/resources/console.properties","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -21,10 +21,6 @@ site=${project.parent.url}\n anonymousUser=${anonymousUser}\n anonymousKey=${anonymousKey}\n \n-scheme=http\n-host=localhost\n-port=8080\n-rootPath=/syncope/rest/\n useGZIPCompression=true\n maxUploadFileSizeMB=5\n "},{"sha":"db04abc6add3b035b3c3cb350a6948a7cc524a0f","filename":"client/idrepo/enduser/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/client%2Fidrepo%2Fenduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/client%2Fidrepo%2Fenduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fpom.xml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -86,6 +86,12 @@ under the License.\n       <artifactId>wicket-bootstrap-extensions</artifactId>\n     </dependency>\n     \n+    <dependency>\n+      <groupId>org.apache.syncope.common.keymaster</groupId>\n+      <artifactId>syncope-common-keymaster-client-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.apache.syncope.client.idrepo</groupId>\n       <artifactId>syncope-client-idrepo-lib</artifactId>"},{"sha":"ff697b3e5567b9864cf12a08601109fb0f023058","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -76,7 +76,7 @@ public SyncopeEnduserSession(final Request request) {\n         super(request);\n \n         clientFactory = SyncopeWebApplication.get().newClientFactory();\n-        anonymousClient = SyncopeWebApplication.get().getClientFactory().\n+        anonymousClient = clientFactory.\n                 create(new AnonymousAuthenticationHandler(\n                         SyncopeWebApplication.get().getAnonymousUser(),\n                         SyncopeWebApplication.get().getAnonymousKey()));\n@@ -97,7 +97,7 @@ public void cleanup() {\n     }\n \n     public MediaType getMediaType() {\n-        return SyncopeWebApplication.get().getClientFactory().getContentType().getMediaType();\n+        return clientFactory.getContentType().getMediaType();\n     }\n \n     public String getJWT() {\n@@ -124,9 +124,7 @@ public boolean authenticate(final String username, final String password) {\n         boolean authenticated = false;\n \n         try {\n-            client = SyncopeWebApplication.get().getClientFactory().\n-                    setDomain(SyncopeWebApplication.get().getDomain()).\n-                    create(username, password);\n+            client = clientFactory.setDomain(SyncopeWebApplication.get().getDomain()).create(username, password);\n \n             afterAuthentication(username);\n \n@@ -142,8 +140,7 @@ public boolean authenticate(final String jwt) {\n         boolean authenticated = false;\n \n         try {\n-            client = SyncopeWebApplication.get().getClientFactory().\n-                    setDomain(SyncopeWebApplication.get().getDomain()).create(jwt);\n+            client = clientFactory.setDomain(SyncopeWebApplication.get().getDomain()).create(jwt);\n \n             afterAuthentication(null);\n "},{"sha":"42f4bf7276949090a44f1c0c8a0a9eb19bced6d8","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeWebApplication.java","status":"modified","additions":17,"deletions":33,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -50,6 +50,8 @@\n import org.apache.syncope.client.enduser.pages.SelfConfirmPasswordReset;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.client.ui.commons.SyncopeUIRequestCycleListener;\n+import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.lib.PropertyUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.wicket.Page;\n@@ -70,13 +72,12 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n @Component\n public class SyncopeWebApplication extends WicketBootStandardWebApplication {\n \n-    private static final long serialVersionUID = -6445919351044845120L;\n-\n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeWebApplication.class);\n \n     private static final String ENDUSER_PROPERTIES = \"enduser.properties\";\n@@ -95,15 +96,13 @@ public static SyncopeWebApplication get() {\n     @Autowired\n     private ClassPathScanImplementationLookup lookup;\n \n-    private String scheme;\n-\n-    private String host;\n-\n-    private String port;\n+    @Autowired\n+    private ServiceOps serviceOps;\n \n-    private String rootPath;\n+    @Value(\"${service.discovery.address}\")\n+    private String address;\n \n-    private String useGZIPCompression;\n+    private boolean useGZIPCompression;\n \n     private String domain;\n \n@@ -127,8 +126,6 @@ public static SyncopeWebApplication get() {\n \n     private Integer maxUploadFileSizeMB;\n \n-    private SyncopeClientFactoryBean clientFactory;\n-\n     private Map<String, CustomAttributesInfo> customFormAttributes;\n \n     private static final ObjectMapper MAPPER = new ObjectMapper();\n@@ -140,17 +137,6 @@ protected void init() {\n         // read enduser.properties\n         Properties props = PropertyUtils.read(getClass(), ENDUSER_PROPERTIES, \"enduser.directory\");\n \n-        scheme = props.getProperty(\"scheme\");\n-        Args.notNull(scheme, \"<scheme>\");\n-        host = props.getProperty(\"host\");\n-        Args.notNull(host, \"<host>\");\n-        port = props.getProperty(\"port\");\n-        Args.notNull(port, \"<port>\");\n-        rootPath = props.getProperty(\"rootPath\");\n-        Args.notNull(rootPath, \"<rootPath>\");\n-        useGZIPCompression = props.getProperty(\"useGZIPCompression\");\n-        Args.notNull(useGZIPCompression, \"<useGZIPCompression>\");\n-\n         domain = props.getProperty(\"domain\", SyncopeConstants.MASTER_DOMAIN);\n         adminUser = props.getProperty(\"adminUser\");\n         Args.notNull(adminUser, \"<adminUser>\");\n@@ -165,6 +151,8 @@ protected void init() {\n         xsrfEnabled = Boolean.parseBoolean(props.getProperty(\"xsrf\"));\n         Args.notNull(xsrfEnabled, \"<xsrf>\");\n \n+        useGZIPCompression = BooleanUtils.toBoolean(props.getProperty(\"useGZIPCompression\"));\n+        Args.notNull(useGZIPCompression, \"<useGZIPCompression>\");\n         maxUploadFileSizeMB = props.getProperty(\"maxUploadFileSizeMB\") == null\n                 ? null\n                 : Integer.valueOf(props.getProperty(\"maxUploadFileSizeMB\"));\n@@ -176,11 +164,6 @@ protected void init() {\n         maxPoolSize = Integer.valueOf(props.getProperty(\"executor.maxPoolSize\", \"10\"));\n         queueCapacity = Integer.valueOf(props.getProperty(\"executor.queueCapacity\", \"50\"));\n \n-        clientFactory = new SyncopeClientFactoryBean().\n-                setAddress(scheme + \"://\" + host + \":\" + port + StringUtils.prependIfMissing(rootPath, \"/\")).\n-                setContentType(SyncopeClientFactoryBean.ContentType.JSON).\n-                setUseCompression(BooleanUtils.toBoolean(useGZIPCompression));\n-\n         // read customFormAttributes.json\n         File enduserDir;\n         try (InputStream is = getClass().getResourceAsStream(\"/\" + CUSTOM_FORM_ATTRIBUTES_FILE)) {\n@@ -321,6 +304,11 @@ public IResource getResource() {\n         if (getDebugSettings().isAjaxDebugModeEnabled()) {\n             getDebugSettings().setComponentPathAttributeName(\"syncope-path\");\n         }\n+\n+        NetworkService ns = new NetworkService();\n+        ns.setType(NetworkService.Type.ENDUSER);\n+        ns.setAddress(address);\n+        serviceOps.register(ns);\n     }\n \n     @Override\n@@ -340,8 +328,8 @@ public Session newSession(final Request request, final Response response) {\n \n     public SyncopeClientFactoryBean newClientFactory() {\n         return new SyncopeClientFactoryBean().\n-                setAddress(scheme + \"://\" + host + \":\" + port + StringUtils.prependIfMissing(rootPath, \"/\")).\n-                setUseCompression(BooleanUtils.toBoolean(useGZIPCompression));\n+                setAddress(serviceOps.get(NetworkService.Type.CORE).getAddress()).\n+                setUseCompression(useGZIPCompression);\n     }\n \n     protected Class<? extends WebPage> getSignInPageClass() {\n@@ -364,10 +352,6 @@ public String getAnonymousKey() {\n         return anonymousKey;\n     }\n \n-    public SyncopeClientFactoryBean getClientFactory() {\n-        return clientFactory;\n-    }\n-\n     public boolean isCaptchaEnabled() {\n         return captchaEnabled;\n     }"},{"sha":"405c292849900e504117883cd48cb0dfd26adf3c","filename":"client/idrepo/enduser/src/main/resources/application.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -23,3 +23,5 @@ spring.http.encoding.enabled=true\n spring.http.encoding.force=true\n \n server.servlet.contextPath=/syncope-enduser\n+\n+service.discovery.address=http://localhost:8080/syncope-enduser/"},{"sha":"6c3e80915b099991ba9ac9fb9071b51e07ccf91d","filename":"client/idrepo/enduser/src/main/resources/enduser.properties","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fenduser.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fenduser.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fenduser.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -24,10 +24,5 @@ adminUser=${adminUser}\n useGZIPCompression=true\n maxUploadFileSizeMB=5\n \n-scheme=http\n-host=localhost\n-port=8080\n-rootPath=/syncope/rest/\n-\n captcha=true\n xsrf=true"},{"sha":"91fc420e665bbe359a626b46933702111aecfe36","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/info/PlatformInfo.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -244,6 +244,8 @@ public void setAnyObjectDAO(final String anyObjectDAO) {\n \n     private String keymasterConfParamOps;\n \n+    private String keymasterServiceOps;\n+\n     private final ProvisioningInfo provisioningInfo = new ProvisioningInfo();\n \n     private final WorkflowInfo workflowInfo = new WorkflowInfo();\n@@ -286,6 +288,10 @@ public String getKeymasterConfParamOps() {\n         return keymasterConfParamOps;\n     }\n \n+    public String getKeymasterServiceOps() {\n+        return keymasterServiceOps;\n+    }\n+\n     public ProvisioningInfo getProvisioningInfo() {\n         return provisioningInfo;\n     }\n@@ -391,6 +397,10 @@ public void setKeymasterConfParamOps(final String keymasterConfParamOps) {\n         this.keymasterConfParamOps = keymasterConfParamOps;\n     }\n \n+    public void setKeymasterServiceOps(final String keymasterServiceOps) {\n+        this.keymasterServiceOps = keymasterServiceOps;\n+    }\n+\n     public void setSelfRegAllowed(final boolean selfRegAllowed) {\n         this.selfRegAllowed = selfRegAllowed;\n     }"},{"sha":"3a0bc6833ed2e3aa7fbade0403fae2ff5ccd3741","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchItem.java","status":"modified","additions":34,"deletions":3,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchItem.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -22,8 +22,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.TreeMap;\n-import org.apache.commons.lang3.builder.ToStringBuilder;\n-import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n public abstract class BatchItem implements Serializable {\n \n@@ -50,8 +50,39 @@ public void setContent(final String content) {\n         this.content = content;\n     }\n \n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                appendSuper(super.hashCode()).\n+                append(headers).\n+                append(content).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final BatchItem other = (BatchItem) obj;\n+        return new EqualsBuilder().\n+                appendSuper(super.equals(obj)).\n+                append(headers, other.headers).\n+                append(content, other.content).\n+                build();\n+    }\n+\n     @Override\n     public String toString() {\n-        return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n+        return \"BatchItem{\"\n+                + \"headers=\" + headers + \", \"\n+                + \"content=\" + content\n+                + '}';\n     }\n }"},{"sha":"f8a445b2b336a4a6e89ad6624f859e70a9d0c912","filename":"common/keymaster/client-api/src/main/java/org/apache/syncope/common/keymaster/client/api/ConfParamOps.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FConfParamOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FConfParamOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FConfParamOps.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -21,7 +21,7 @@\n import java.util.Map;\n \n /**\n- * Operations available for configuration parameters, managed by the configured Keymaster(s).\n+ * Operations available for configuration parameters.\n  */\n public interface ConfParamOps {\n "},{"sha":"c08b8894f3c2d706e644040451d65877e4fd5999","filename":"common/keymaster/client-api/src/main/java/org/apache/syncope/common/keymaster/client/api/KeymasterException.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FKeymasterException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FKeymasterException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FKeymasterException.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -22,7 +22,15 @@ public class KeymasterException extends RuntimeException {\n \n     private static final long serialVersionUID = 3007656743901867906L;\n \n+    public KeymasterException(final String message) {\n+        super(message);\n+    }\n+\n     public KeymasterException(final Throwable cause) {\n         super(cause);\n     }\n+\n+    public KeymasterException(final String message, final Throwable cause) {\n+        super(message, cause);\n+    }\n }"},{"sha":"f26700f9bae854bcadb98f5e0b482fa0d627657b","filename":"common/keymaster/client-api/src/main/java/org/apache/syncope/common/keymaster/client/api/NetworkService.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FNetworkService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FNetworkService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FNetworkService.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.keymaster.client.api;\n+\n+import java.io.Serializable;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+public class NetworkService implements Serializable {\n+\n+    private static final long serialVersionUID = 7144725980960412224L;\n+\n+    public enum Type {\n+        CORE,\n+        CONSOLE,\n+        ENDUSER,\n+        SRA,\n+        WA\n+\n+    }\n+\n+    private Type type;\n+\n+    private String address;\n+\n+    public Type getType() {\n+        return type;\n+    }\n+\n+    public void setType(final Type type) {\n+        this.type = type;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(final String address) {\n+        this.address = address;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(type).\n+                append(address).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final NetworkService other = (NetworkService) obj;\n+        return new EqualsBuilder().\n+                append(type, other.type).\n+                append(address, other.address).\n+                build();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"NetworkService{\"\n+                + \"type=\" + type\n+                + \", address=\" + address\n+                + '}';\n+    }\n+}"},{"sha":"1bb5f8a280cb61df1cf9228180b08633c498b2e7","filename":"common/keymaster/client-api/src/main/java/org/apache/syncope/common/keymaster/client/api/ServiceOps.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FServiceOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FServiceOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FServiceOps.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.keymaster.client.api;\n+\n+import java.util.List;\n+\n+/**\n+ * Operations available for services.\n+ */\n+public interface ServiceOps {\n+\n+    void register(NetworkService service);\n+\n+    void unregister(NetworkService service);\n+\n+    List<NetworkService> list(NetworkService.Type serviceType);\n+\n+    /**\n+     * Returns the service instance to invoke, for the given type.\n+     *\n+     * @param serviceType service type\n+     * @return service instance to invoke, for the given type\n+     */\n+    NetworkService get(NetworkService.Type serviceType);\n+}"},{"sha":"d4a0903570d13df96678127dda359eaaddd264f9","filename":"common/keymaster/client-zookeeper/pom.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fpom.xml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -48,6 +48,10 @@ under the License.\n       <groupId>org.apache.curator</groupId>\n       <artifactId>curator-framework</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.curator</groupId>\n+      <artifactId>curator-x-discovery</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.apache.zookeeper</groupId>\n       <artifactId>zookeeper</artifactId>"},{"sha":"87904a729b70c96db74af6210469de6b55ba98c8","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperConfParamOps.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOps.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.common.keymaster.client.zookeper;\n \n-import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.util.Map;\n import java.util.TreeMap;\n@@ -57,8 +56,7 @@ public Map<String, Object> list(final String domain) {\n \n             Map<String, Object> list = new TreeMap<>();\n             for (String child : client.getChildren().forPath(buildConfPath(domain))) {\n-                JsonNode node = MAPPER.readTree(client.getData().forPath(buildConfPath(domain, child)));\n-                list.put(child, MAPPER.treeToValue(node, Object.class));\n+                list.put(child, MAPPER.readValue(client.getData().forPath(buildConfPath(domain, child)), Object.class));\n             }\n \n             return list;\n@@ -71,8 +69,7 @@ public Map<String, Object> list(final String domain) {\n     public <T> T get(final String domain, final String key, final T defaultValue, final Class<T> reference) {\n         T value = null;\n         try {\n-            JsonNode node = MAPPER.readTree(client.getData().forPath(buildConfPath(domain, key)));\n-            value = MAPPER.treeToValue(node, reference);\n+            value = MAPPER.readValue(client.getData().forPath(buildConfPath(domain, key)), reference);\n         } catch (KeeperException.NoNodeException e) {\n             LOG.debug(\"Node {} was not found\", buildConfPath(domain, key));\n         } catch (Exception e) {\n@@ -93,8 +90,6 @@ public <T> void set(final String domain, final String key, final T value) {\n                     client.create().creatingParentContainersIfNeeded().forPath(buildConfPath(domain, key));\n                 }\n \n-                MAPPER.writeValueAsBytes(value);\n-\n                 client.setData().forPath(buildConfPath(domain, key), MAPPER.writeValueAsBytes(value));\n             } catch (Exception e) {\n                 LOG.error(\"While writing {}\", buildConfPath(domain, key), e);"},{"sha":"85d795cf4121cde0018122381410c8f80b080369","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperKeymasterClientContext.java","status":"modified","additions":25,"deletions":21,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperKeymasterClientContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperKeymasterClientContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperKeymasterClientContext.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -28,6 +28,7 @@\n import org.apache.curator.framework.api.ACLProvider;\n import org.apache.curator.retry.ExponentialBackoffRetry;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.zookeeper.ZooDefs;\n import org.apache.zookeeper.data.ACL;\n import org.apache.zookeeper.server.auth.DigestLoginModule;\n@@ -57,31 +58,27 @@ public class ZookeeperKeymasterClientContext {\n     @Value(\"${keymaster.maxRetries:3}\")\n     private Integer maxRetries;\n \n-    private javax.security.auth.login.Configuration createJaasConfig() {\n-        return new javax.security.auth.login.Configuration() {\n-\n-            private final AppConfigurationEntry[] entries = {\n-                new AppConfigurationEntry(\n-                DigestLoginModule.class.getName(),\n-                AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,\n-                Map.of(\n-                \"username\", username,\n-                \"password\", password\n-                ))\n-            };\n-\n-            @Override\n-            public AppConfigurationEntry[] getAppConfigurationEntry(final String name) {\n-                return entries;\n-            }\n-        };\n-    }\n-\n     @ConditionalOnExpression(\"#{'${keymaster.address}' matches '^(?!http).+'}\")\n     @Bean\n     public CuratorFramework curatorFramework() throws InterruptedException {\n         if (StringUtils.isNotBlank(username) && StringUtils.isNotBlank(password)) {\n-            javax.security.auth.login.Configuration.setConfiguration(createJaasConfig());\n+            javax.security.auth.login.Configuration.setConfiguration(new javax.security.auth.login.Configuration() {\n+\n+                private final AppConfigurationEntry[] entries = {\n+                    new AppConfigurationEntry(\n+                    DigestLoginModule.class.getName(),\n+                    AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,\n+                    Map.of(\n+                    \"username\", username,\n+                    \"password\", password\n+                    ))\n+                };\n+\n+                @Override\n+                public AppConfigurationEntry[] getAppConfigurationEntry(final String name) {\n+                    return entries;\n+                }\n+            });\n         }\n \n         CuratorFrameworkFactory.Builder clientBuilder = CuratorFrameworkFactory.builder().\n@@ -115,4 +112,11 @@ public List<ACL> getAclForPath(final String path) {\n     public ConfParamOps selfConfParamOps() {\n         return new ZookeeperConfParamOps();\n     }\n+\n+    @ConditionalOnExpression(\"#{'${keymaster.address}' matches '^(?!http).+'}\")\n+    @Bean\n+    public ServiceOps serviceOps() {\n+        return new ZookeeperServiceDiscoveryOps();\n+        //return new ZookeeperServiceOps();\n+    }\n }"},{"sha":"5451a29dbf99cdf36b2a4b4595b0a0392ce6a231","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperServiceDiscoveryOps.java","status":"added","additions":160,"deletions":0,"changes":160,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceDiscoveryOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceDiscoveryOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceDiscoveryOps.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.keymaster.client.zookeper;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.x.discovery.ServiceDiscovery;\n+import org.apache.curator.x.discovery.ServiceDiscoveryBuilder;\n+import org.apache.curator.x.discovery.ServiceInstance;\n+import org.apache.curator.x.discovery.ServiceProvider;\n+import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n+import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * Implements {@link ServiceOps} via Apache Curator / Zookeeper via Curator's {@link ServiceDiscovery}.\n+ */\n+public class ZookeeperServiceDiscoveryOps implements ServiceOps, InitializingBean {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ServiceOps.class);\n+\n+    private static final String SERVICE_PATH = \"/services\";\n+\n+    private final Map<NetworkService.Type, ServiceProvider<Void>> providers = new ConcurrentHashMap<>();\n+\n+    @Autowired\n+    private CuratorFramework client;\n+\n+    private ServiceDiscovery<Void> discovery;\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        discovery = ServiceDiscoveryBuilder.builder(Void.class).\n+                client(client).\n+                basePath(SERVICE_PATH).\n+                build();\n+        discovery.start();\n+    }\n+\n+    private ServiceProvider<Void> getProvider(final NetworkService.Type type) {\n+        return providers.computeIfAbsent(type, t -> {\n+            try {\n+                ServiceProvider<Void> provider = discovery.\n+                        serviceProviderBuilder().\n+                        serviceName(t.name()).build();\n+                provider.start();\n+                return provider;\n+            } catch (KeymasterException e) {\n+                throw e;\n+            } catch (Exception e) {\n+                throw new KeymasterException(\"While preparing ServiceProvider for \" + type, e);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void register(final NetworkService service) {\n+        try {\n+            unregister(service);\n+\n+            ServiceInstance<Void> instance = ServiceInstance.<Void>builder().\n+                    name(service.getType().name()).\n+                    address(service.getAddress()).\n+                    build();\n+            discovery.registerService(instance);\n+        } catch (KeymasterException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            LOG.error(\"While registering {}\", service, e);\n+            throw new KeymasterException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void unregister(final NetworkService service) {\n+        try {\n+            discovery.queryForInstances(service.getType().name()).stream().\n+                    filter(instance -> instance.getName().equals(service.getType().name())\n+                    && instance.getAddress().equals(service.getAddress())).findFirst().\n+                    ifPresent(instance -> {\n+                        try {\n+                            discovery.unregisterService(instance);\n+                        } catch (Exception e) {\n+                            LOG.error(\"While deregistering {}\", service, e);\n+                            throw new KeymasterException(e);\n+                        }\n+                    });\n+        } catch (KeymasterException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            LOG.error(\"While registering {}\", service, e);\n+            throw new KeymasterException(e);\n+        }\n+    }\n+\n+    private NetworkService toNetworkService(\n+            final NetworkService.Type serviceType,\n+            final ServiceInstance<Void> serviceInstance) {\n+\n+        NetworkService ns = new NetworkService();\n+        ns.setType(serviceType);\n+        ns.setAddress(serviceInstance.getAddress());\n+        return ns;\n+    }\n+\n+    @Override\n+    public List<NetworkService> list(final NetworkService.Type serviceType) {\n+        try {\n+            return discovery.queryForInstances(serviceType.name()).stream().\n+                    map(serviceInstance -> toNetworkService(serviceType, serviceInstance)).\n+                    collect(Collectors.toList());\n+        } catch (KeymasterException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new KeymasterException(e);\n+        }\n+    }\n+\n+    @Override\n+    public NetworkService get(final NetworkService.Type serviceType) {\n+        ServiceInstance<Void> serviceInstance = null;\n+        try {\n+            if (!discovery.queryForInstances(serviceType.name()).isEmpty()) {\n+                serviceInstance = getProvider(serviceType).getInstance();\n+            }\n+        } catch (KeymasterException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new KeymasterException(e);\n+        }\n+\n+        if (serviceInstance == null) {\n+            throw new KeymasterException(\"No services found for \" + serviceType);\n+        }\n+        return toNetworkService(serviceType, serviceInstance);\n+    }\n+}"},{"sha":"1fbf58bcd54e680ae4f904b09136babceb3845a3","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperServiceOps.java","status":"added","additions":137,"deletions":0,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceOps.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.keymaster.client.zookeper;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n+import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.zookeeper.CreateMode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * Implements {@link ServiceOps} via Apache Curator / Zookeeper.\n+ */\n+public class ZookeeperServiceOps implements ServiceOps {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ServiceOps.class);\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private static final String SERVICE_PATH = \"/services\";\n+\n+    @Autowired\n+    private CuratorFramework client;\n+\n+    private String buildServicePath(final NetworkService.Type serviceType, final String... parts) {\n+        String prefix = SERVICE_PATH + \"/\" + serviceType.name();\n+        String suffix = StringUtils.EMPTY;\n+        if (parts != null && parts.length > 0) {\n+            suffix = \"/\" + String.join(\"/\", parts);\n+        }\n+        return prefix + suffix;\n+    }\n+\n+    @Override\n+    public void register(final NetworkService service) {\n+        String id = UUID.randomUUID().toString();\n+        try {\n+            unregister(service);\n+\n+            if (client.checkExists().forPath(buildServicePath(service.getType(), id)) == null) {\n+                client.create().creatingParentContainersIfNeeded().withMode(CreateMode.EPHEMERAL).\n+                        forPath(buildServicePath(service.getType(), id));\n+            }\n+\n+            client.setData().forPath(\n+                    buildServicePath(service.getType(), id), MAPPER.writeValueAsBytes(service));\n+        } catch (Exception e) {\n+            LOG.error(\"While writing {}\", buildServicePath(service.getType(), id), e);\n+            throw new KeymasterException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void unregister(final NetworkService service) {\n+        try {\n+            if (client.checkExists().forPath(buildServicePath(service.getType())) != null) {\n+                client.getChildren().forPath(buildServicePath(service.getType())).stream().\n+                        filter(child -> {\n+                            try {\n+                                return MAPPER.readValue(client.getData().forPath(\n+                                        buildServicePath(service.getType(), child)), NetworkService.class).\n+                                        equals(service);\n+                            } catch (Exception e) {\n+                                LOG.error(\"While deregistering {}\", service, e);\n+                                throw new KeymasterException(e);\n+                            }\n+                        }).\n+                        findFirst().ifPresent(child -> {\n+                            try {\n+                                client.delete().forPath(buildServicePath(service.getType(), child));\n+                            } catch (Exception e) {\n+                                LOG.error(\"While deregistering {}\", service, e);\n+                                throw new KeymasterException(e);\n+                            }\n+                        });\n+            }\n+        } catch (KeymasterException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new KeymasterException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<NetworkService> list(final NetworkService.Type serviceType) {\n+        try {\n+            if (client.checkExists().forPath(buildServicePath(serviceType)) == null) {\n+                client.create().creatingParentContainersIfNeeded().forPath(buildServicePath(serviceType));\n+            }\n+\n+            List<NetworkService> list = new ArrayList<>();\n+            for (String child : client.getChildren().forPath(buildServicePath(serviceType))) {\n+                list.add(MAPPER.readValue(client.getData().forPath(buildServicePath(serviceType, child)),\n+                        NetworkService.class));\n+            }\n+\n+            return list;\n+        } catch (Exception e) {\n+            throw new KeymasterException(e);\n+        }\n+    }\n+\n+    @Override\n+    public NetworkService get(final NetworkService.Type serviceType) {\n+        List<NetworkService> list = list(serviceType);\n+        if (list.isEmpty()) {\n+            throw new KeymasterException(\"No registered services for type \" + serviceType);\n+        }\n+\n+        // always returns first instance, can be improved\n+        return list.get(0);\n+    }\n+}"},{"sha":"697173fe83687108c16eb9ea2c2b8f72891fdbfe","filename":"common/keymaster/client-zookeeper/src/test/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperConfParamOpsITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOpsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOpsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOpsITCase.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -74,7 +74,7 @@ public void get() {\n         List<String> stringValues =\n                 Arrays.asList(confParamOps.get(DOMAIN, \"authentication.attributes\", null, String[].class));\n         assertNotNull(stringValues);\n-        ArrayList<String> actualStringValues = new ArrayList<>();\n+        List<String> actualStringValues = new ArrayList<>();\n         actualStringValues.add(\"created\");\n         actualStringValues.add(\"active\");\n         assertEquals(actualStringValues, stringValues);\n@@ -109,7 +109,7 @@ public void setGetRemove() {\n         Boolean actualBooleanValue = confParamOps.get(DOMAIN, key, null, Boolean.class);\n         assertEquals(booleanValue, actualBooleanValue);\n \n-        ArrayList<String> stringValues = new ArrayList<>();\n+        List<String> stringValues = new ArrayList<>();\n         stringValues.add(\"stringValue1\");\n         stringValues.add(\"stringValue2\");\n         confParamOps.set(DOMAIN, key, stringValues);"},{"sha":"330f14b81e6c792a1b550c35eea0255bbe96677a","filename":"common/keymaster/client-zookeeper/src/test/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperConfParamOpsTest.java","status":"modified","additions":1,"deletions":52,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOpsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOpsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOpsTest.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -18,63 +18,12 @@\n  */\n package org.apache.syncope.common.keymaster.client.zookeper;\n \n-import static org.junit.jupiter.api.Assertions.fail;\n-\n-import java.io.InputStream;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Properties;\n-import java.util.concurrent.atomic.AtomicReference;\n-import javax.security.auth.login.AppConfigurationEntry;\n-import javax.security.auth.login.Configuration;\n-import org.apache.curator.test.InstanceSpec;\n-import org.apache.curator.test.TestingServer;\n-import org.junit.jupiter.api.AfterAll;\n import org.junit.jupiter.api.BeforeAll;\n \n public class ZookeeperConfParamOpsTest extends ZookeeperConfParamOpsITCase {\n \n-    private static TestingServer ZK_SERVER;\n-\n     @BeforeAll\n     public static void setUp() throws Exception {\n-        AtomicReference<String> username = new AtomicReference<>();\n-        AtomicReference<String> password = new AtomicReference<>();\n-        try (InputStream propStream = ZookeeperConfParamOpsTest.class.getResourceAsStream(\"/keymaster.properties\")) {\n-            Properties props = new Properties();\n-            props.load(propStream);\n-\n-            username.set(props.getProperty(\"keymaster.username\"));\n-            password.set(props.getProperty(\"keymaster.password\"));\n-        } catch (Exception e) {\n-            fail(\"Could not load /keymaster.properties\", e);\n-        }\n-\n-        Configuration.setConfiguration(new Configuration() {\n-\n-            private final AppConfigurationEntry[] entries = {\n-                new AppConfigurationEntry(\n-                \"org.apache.zookeeper.server.auth.DigestLoginModule\",\n-                AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,\n-                Map.of(\n-                \"user_\" + username.get(), password.get()\n-                ))\n-            };\n-\n-            @Override\n-            public AppConfigurationEntry[] getAppConfigurationEntry(final String name) {\n-                return entries;\n-            }\n-        });\n-\n-        Map<String, Object> customProperties = new HashMap<>();\n-        customProperties.put(\"authProvider.1\", \"org.apache.zookeeper.server.auth.SASLAuthenticationProvider\");\n-        InstanceSpec spec = new InstanceSpec(null, 2181, -1, -1, true, 1, -1, -1, customProperties);\n-        ZK_SERVER = new TestingServer(spec, true);\n-    }\n-\n-    @AfterAll\n-    public static void tearDown() throws Exception {\n-        ZK_SERVER.stop();\n+        ZookeeperTestServer.start();\n     }\n }"},{"sha":"091a3dc1a1056c8cf4a6376960f989373b9e5d9f","filename":"common/keymaster/client-zookeeper/src/test/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperServiceOpsITCase.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceOpsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceOpsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceOpsITCase.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.keymaster.client.zookeper;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.List;\n+import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+@SpringJUnitConfig(classes = { ZookeeperKeymasterClientContext.class, ZookeeperTestContext.class })\n+public class ZookeeperServiceOpsITCase {\n+\n+    @Autowired\n+    private ServiceOps serviceOps;\n+\n+    @Test\n+    public void run() {\n+        List<NetworkService> list = serviceOps.list(NetworkService.Type.CORE);\n+        assertTrue(list.isEmpty());\n+\n+        NetworkService core1 = new NetworkService();\n+        core1.setType(NetworkService.Type.CORE);\n+        core1.setAddress(\"http://localhost:9080/syncope/rest\");\n+        serviceOps.register(core1);\n+\n+        list = serviceOps.list(NetworkService.Type.CORE);\n+        assertFalse(list.isEmpty());\n+        assertEquals(1, list.size());\n+        assertEquals(core1, list.get(0));\n+\n+        assertEquals(core1, serviceOps.get(NetworkService.Type.CORE));\n+\n+        NetworkService core2 = new NetworkService();\n+        core2.setType(NetworkService.Type.CORE);\n+        core2.setAddress(\"http://localhost:9080/syncope/rest\");\n+        assertEquals(core1, core2);\n+        serviceOps.register(core2);\n+\n+        list = serviceOps.list(NetworkService.Type.CORE);\n+        assertFalse(list.isEmpty());\n+        assertEquals(1, list.size());\n+        assertEquals(core1, list.get(0));\n+\n+        assertEquals(core1, serviceOps.get(NetworkService.Type.CORE));\n+\n+        serviceOps.unregister(core1);\n+        list = serviceOps.list(NetworkService.Type.CORE);\n+        assertTrue(list.isEmpty());\n+\n+        try {\n+            serviceOps.get(NetworkService.Type.CORE);\n+            fail();\n+        } catch (KeymasterException e) {\n+            assertNotNull(e);\n+        }\n+    }\n+}"},{"sha":"10d29ce70ba378d61b8ddc7eaf9bc543dfa543ac","filename":"common/keymaster/client-zookeeper/src/test/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperServiceOpsTest.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceOpsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceOpsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceOpsTest.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.keymaster.client.zookeper;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+\n+public class ZookeeperServiceOpsTest extends ZookeeperServiceOpsITCase {\n+\n+    @BeforeAll\n+    public static void setUp() throws Exception {\n+        ZookeeperTestServer.start();\n+    }\n+}"},{"sha":"5c963408f0d2d36e2aaba447f97d60f8be895c9c","filename":"common/keymaster/client-zookeeper/src/test/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperTestServer.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperTestServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperTestServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperTestServer.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.keymaster.client.zookeper;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.security.auth.login.AppConfigurationEntry;\n+import javax.security.auth.login.Configuration;\n+import org.apache.curator.test.InstanceSpec;\n+import org.apache.curator.test.TestingServer;\n+\n+public class ZookeeperTestServer {\n+\n+    private static TestingServer ZK_SERVER;\n+\n+    public static void start() throws Exception {\n+        if (ZK_SERVER == null) {\n+            AtomicReference<String> username = new AtomicReference<>();\n+            AtomicReference<String> password = new AtomicReference<>();\n+            try (InputStream propStream = ZookeeperServiceOpsTest.class.getResourceAsStream(\"/keymaster.properties\")) {\n+                Properties props = new Properties();\n+                props.load(propStream);\n+\n+                username.set(props.getProperty(\"keymaster.username\"));\n+                password.set(props.getProperty(\"keymaster.password\"));\n+            } catch (Exception e) {\n+                fail(\"Could not load /keymaster.properties\", e);\n+            }\n+\n+            Configuration.setConfiguration(new Configuration() {\n+\n+                private final AppConfigurationEntry[] entries = {\n+                    new AppConfigurationEntry(\n+                    \"org.apache.zookeeper.server.auth.DigestLoginModule\",\n+                    AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,\n+                    Map.of(\n+                    \"user_\" + username.get(), password.get()\n+                    ))\n+                };\n+\n+                @Override\n+                public AppConfigurationEntry[] getAppConfigurationEntry(final String name) {\n+                    return entries;\n+                }\n+            });\n+\n+            Map<String, Object> customProperties = new HashMap<>();\n+            customProperties.put(\"authProvider.1\", \"org.apache.zookeeper.server.auth.SASLAuthenticationProvider\");\n+            InstanceSpec spec = new InstanceSpec(null, 2181, -1, -1, true, 1, -1, -1, customProperties);\n+            ZK_SERVER = new TestingServer(spec, true);\n+        }\n+    }\n+}"},{"sha":"338671aaf14806df71b7c6da30a15cd7354254c4","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -37,6 +37,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.info.JavaImplInfo;\n import org.apache.syncope.common.lib.info.NumbersInfo;\n@@ -158,6 +159,9 @@ public class SyncopeLogic extends AbstractLogic<EntityTO> {\n     @Autowired\n     private ConfParamOps confParamOps;\n \n+    @Autowired\n+    private ServiceOps serviceOps;\n+\n     @Resource(name = \"version\")\n     private String version;\n \n@@ -241,6 +245,7 @@ public PlatformInfo platform() {\n                 PLATFORM_INFO.setVersion(version);\n                 PLATFORM_INFO.setBuildNumber(buildNumber);\n                 PLATFORM_INFO.setKeymasterConfParamOps(AopUtils.getTargetClass(confParamOps).getName());\n+                PLATFORM_INFO.setKeymasterServiceOps(AopUtils.getTargetClass(serviceOps).getName());\n \n                 if (bundleManager.getLocations() != null) {\n                     PLATFORM_INFO.getConnIdLocations().addAll(bundleManager.getLocations().stream()."},{"sha":"2e197eab0486a3fc0c15152b6510d87850c7c71f","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/DefaultRolesPrefixPostProcessor.java","status":"removed","additions":0,"deletions":65,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4889da6f8fe620665720b23ce0148f0d7179e521/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FDefaultRolesPrefixPostProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4889da6f8fe620665720b23ce0148f0d7179e521/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FDefaultRolesPrefixPostProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FDefaultRolesPrefixPostProcessor.java?ref=4889da6f8fe620665720b23ce0148f0d7179e521","patch":"@@ -1,65 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.spring;\n-\n-import javax.servlet.ServletException;\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.beans.FatalBeanException;\n-import org.springframework.beans.factory.config.BeanPostProcessor;\n-import org.springframework.core.PriorityOrdered;\n-import org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler;\n-import org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler;\n-import org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter;\n-\n-/**\n- * Removes the limitation of having Spring security roles to be prefixed with 'ROLE_'.\n- */\n-public class DefaultRolesPrefixPostProcessor implements BeanPostProcessor, PriorityOrdered {\n-\n-    @Override\n-    public Object postProcessAfterInitialization(final Object bean, final String beanName) {\n-        if (bean instanceof DefaultMethodSecurityExpressionHandler) {\n-            ((DefaultMethodSecurityExpressionHandler) bean).setDefaultRolePrefix(null);\n-        }\n-        if (bean instanceof DefaultWebSecurityExpressionHandler) {\n-            ((DefaultWebSecurityExpressionHandler) bean).setDefaultRolePrefix(null);\n-        }\n-        if (bean instanceof SecurityContextHolderAwareRequestFilter) {\n-            SecurityContextHolderAwareRequestFilter filter = (SecurityContextHolderAwareRequestFilter) bean;\n-            filter.setRolePrefix(StringUtils.EMPTY);\n-            try {\n-                filter.afterPropertiesSet();\n-            } catch (ServletException e) {\n-                throw new FatalBeanException(e.getMessage(), e);\n-            }\n-        }\n-\n-        return bean;\n-    }\n-\n-    @Override\n-    public Object postProcessBeforeInitialization(final Object bean, final String beanName) {\n-        return bean;\n-    }\n-\n-    @Override\n-    public int getOrder() {\n-        return PriorityOrdered.HIGHEST_PRECEDENCE;\n-    }\n-}"},{"sha":"e8c577958d72d783a27e0d2925685eb1a2fd9cc7","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SecurityContext.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecurityContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecurityContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecurityContext.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -20,7 +20,6 @@\n \n import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.spring.DefaultRolesPrefixPostProcessor;\n import org.apache.syncope.core.spring.security.jws.AccessTokenJwsSignatureProvider;\n import org.apache.syncope.core.spring.security.jws.AccessTokenJwsSignatureVerifier;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n@@ -29,6 +28,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.PropertySource;\n import org.springframework.core.env.Environment;\n+import org.springframework.security.config.core.GrantedAuthorityDefaults;\n \n @PropertySource(\"classpath:security.properties\")\n @PropertySource(value = \"file:${conf.directory}/security.properties\", ignoreResourceNotFound = true)\n@@ -108,8 +108,8 @@ public PasswordGenerator passwordGenerator() {\n     }\n \n     @Bean\n-    public DefaultRolesPrefixPostProcessor rolesPrefixPostProcessor() {\n-        return new DefaultRolesPrefixPostProcessor();\n+    public GrantedAuthorityDefaults grantedAuthorityDefaults() {\n+        return new GrantedAuthorityDefaults(\"\"); // Remove the ROLE_ prefix\n     }\n \n     @Bean"},{"sha":"752776c36d1effa5b5f08ef5ff0c0f6a49c03df9","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/WebSecurityContext.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FWebSecurityContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FWebSecurityContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FWebSecurityContext.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -28,6 +28,7 @@\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n import org.springframework.security.config.http.SessionCreationPolicy;\n+import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.web.AuthenticationEntryPoint;\n import org.springframework.security.web.access.AccessDeniedHandler;\n import org.springframework.security.web.access.intercept.FilterSecurityInterceptor;\n@@ -47,6 +48,7 @@ public class WebSecurityContext extends WebSecurityConfigurerAdapter {\n \n     public WebSecurityContext() {\n         super(true);\n+        SecurityContextHolder.setStrategyName(SecurityContextHolder.MODE_INHERITABLETHREADLOCAL);\n     }\n \n     @Bean"},{"sha":"b6bcc42d5d690c94583e00372b8e5894cad7fd57","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/SyncopeCoreInitializer.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreInitializer.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -19,12 +19,15 @@\n package org.apache.syncope.core.starter;\n \n import java.util.Comparator;\n+import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.aop.support.AopUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.ApplicationListener;\n import org.springframework.context.event.ContextRefreshedEvent;\n import org.springframework.core.Ordered;\n@@ -41,6 +44,12 @@ public class SyncopeCoreInitializer implements ApplicationListener<ContextRefres\n     @Autowired\n     private DomainsHolder domainsHolder;\n \n+    @Autowired\n+    private ServiceOps serviceOps;\n+\n+    @Value(\"${service.discovery.address}\")\n+    private String address;\n+\n     @Override\n     public int getOrder() {\n         return 0;\n@@ -65,5 +74,10 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {\n \n                     LOG.debug(\"[{}] Initialization completed\", loaderName);\n                 });\n+\n+        NetworkService ns = new NetworkService();\n+        ns.setType(NetworkService.Type.CORE);\n+        ns.setAddress(address);\n+        serviceOps.register(ns);\n     }\n }"},{"sha":"72056ccc045d342ef194a9774836339273ce6fdc","filename":"core/starter/src/main/resources/application.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -26,3 +26,5 @@ conf.directory=${conf.directory}\n \n server.servlet.contextPath=/syncope\n cxf.path=/rest\n+\n+service.discovery.address=http://localhost:8080/syncope/rest/"},{"sha":"e81f8f195d37f41626260ee8db72344b6315eeaa","filename":"docker/console/pom.xml","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fconsole%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fconsole%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fconsole%2Fpom.xml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -170,14 +170,6 @@ under the License.\n         <directory>src/main/resources</directory>\n         <filtering>true</filtering>\n       </resource>\n-      \n-      <resource>\n-        <directory>${project.basedir}/../../client/idrepo/console/src/main/resources</directory>\n-        <includes>\n-          <include>application.properties</include>\n-        </includes>\n-        <filtering>true</filtering>\n-      </resource>\n     </resources>\n   </build>\n "},{"sha":"7a7fb23002ea9e976001545392b6391816de6c4c","filename":"docker/console/src/main/resources/Dockerfile","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2FDockerfile","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2FDockerfile","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2FDockerfile?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -26,8 +26,7 @@ RUN mkdir /opt/syncope/conf\n RUN mkdir /opt/syncope/lib\n RUN mkdir /opt/syncope/log\n \n-COPY application.properties /opt/syncope/conf/\n-COPY *.properties.template /opt/syncope/conf/\n+COPY *.properties /opt/syncope/conf/\n COPY log4j2.xml /opt/syncope/conf/\n \n COPY syncope-docker-console-*war /opt/syncope/lib/syncope-console.war"},{"sha":"164e06094eaa2d7edb4d6dcafa7bb45f4d9808f6","filename":"docker/console/src/main/resources/application.properties","status":"renamed","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -23,3 +23,5 @@ spring.http.encoding.enabled=true\n spring.http.encoding.force=true\n \n server.servlet.contextPath=/syncope-console\n+\n+service.discovery.address=${SERVICE_DISCOVERY_ADDRESS}","previous_filename":"fit/console-reference/src/main/resources/application.properties"},{"sha":"256e90753c7c3096ff2952b4ff55f7471b05613f","filename":"docker/console/src/main/resources/console.properties.template","status":"removed","additions":0,"deletions":52,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4889da6f8fe620665720b23ce0148f0d7179e521/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties.template","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4889da6f8fe620665720b23ce0148f0d7179e521/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties.template","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties.template?ref=4889da6f8fe620665720b23ce0148f0d7179e521","patch":"@@ -1,52 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-console.directory=${conf.directory}\n-\n-site=http://syncope.apache.org\n-\n-anonymousUser=${anonymousUser}\n-anonymousKey=${anonymousKey}\n-\n-scheme=${CORE_SCHEME}\n-host=${CORE_HOST}\n-port=${CORE_PORT}\n-rootPath=/syncope/rest/\n-useGZIPCompression=true\n-maxUploadFileSizeMB=5\n-\n-# Max wait time on apply changes from modals/wizards (given in seconds)\n-maxWaitTimeOnApplyChanges=30\n-\n-csrf=true\n-\n-reconciliationReportKey=c3520ad9-179f-49e7-b315-d684d216dd97\n-\n-page.dashboard=org.apache.syncope.client.console.pages.Dashboard\n-page.realms=org.apache.syncope.client.console.pages.Realms\n-page.reports=org.apache.syncope.client.console.pages.Reports\n-page.audit=org.apache.syncope.client.console.pages.Audit\n-page.implementations=org.apache.syncope.client.console.pages.Implementations\n-page.logs=org.apache.syncope.client.console.pages.Logs\n-page.security=org.apache.syncope.client.console.pages.Security\n-page.types=org.apache.syncope.client.console.pages.Types\n-page.policies=org.apache.syncope.client.console.pages.Policies\n-page.notifications=org.apache.syncope.client.console.pages.Notifications\n-page.parameters=org.apache.syncope.client.console.pages.Parameters\n-\n-executor.corePoolSize=10\n-executor.maxPoolSize=20\n-executor.queueCapacity=50"},{"sha":"8f88f645b36898541720d9be3871bc53c11795fd","filename":"docker/console/src/main/resources/oidcclient-agent.properties.template","status":"removed","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4889da6f8fe620665720b23ce0148f0d7179e521/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties.template","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4889da6f8fe620665720b23ce0148f0d7179e521/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties.template","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties.template?ref=4889da6f8fe620665720b23ce0148f0d7179e521","patch":"@@ -1,26 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-conf.directory=${conf.directory}\n-\n-anonymousUser=${anonymousUser}\n-anonymousKey=${anonymousKey}\n-\n-scheme=${CORE_SCHEME}\n-host=${CORE_HOST}\n-port=${CORE_PORT}\n-rootPath=/syncope/rest/\n-useGZIPCompression=true"},{"sha":"8f88f645b36898541720d9be3871bc53c11795fd","filename":"docker/console/src/main/resources/saml2sp-agent.properties.template","status":"removed","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4889da6f8fe620665720b23ce0148f0d7179e521/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties.template","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4889da6f8fe620665720b23ce0148f0d7179e521/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties.template","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties.template?ref=4889da6f8fe620665720b23ce0148f0d7179e521","patch":"@@ -1,26 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-conf.directory=${conf.directory}\n-\n-anonymousUser=${anonymousUser}\n-anonymousKey=${anonymousKey}\n-\n-scheme=${CORE_SCHEME}\n-host=${CORE_HOST}\n-port=${CORE_PORT}\n-rootPath=/syncope/rest/\n-useGZIPCompression=true"},{"sha":"22d2163097a206fb280764d2be3ea3c1bee194cd","filename":"docker/console/src/main/resources/startup.sh","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fstartup.sh","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fstartup.sh","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fstartup.sh?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -17,17 +17,6 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-cd /opt/syncope/conf\n-\n-sed \"s/\\${CORE_SCHEME}/$CORE_SCHEME/\" console.properties.template | \n-sed \"s/\\${CORE_HOST}/$CORE_HOST/\" | sed \"s/\\${CORE_PORT}/$CORE_PORT/\" > console.properties\n-\n-sed \"s/\\${CORE_SCHEME}/$CORE_SCHEME/\" oidcclient-agent.properties.template | \n-sed \"s/\\${CORE_HOST}/$CORE_HOST/\" | sed \"s/\\${CORE_PORT}/$CORE_PORT/\" > oidcclient-agent.properties\n-\n-sed \"s/\\${CORE_SCHEME}/$CORE_SCHEME/\" saml2sp-agent.properties.template | \n-sed \"s/\\${CORE_HOST}/$CORE_HOST/\" | sed \"s/\\${CORE_PORT}/$CORE_PORT/\" > saml2sp-agent.properties\n-\n export LOADER_PATH=\"/opt/syncope/conf,/opt/syncope/lib\"\n java -Dfile.encoding=UTF-8 -server -Xms1536m -Xmx1536m -XX:NewSize=256m -XX:MaxNewSize=256m \\\n  -XX:+DisableExplicitGC -Djava.security.egd=file:/dev/./urandom -jar /opt/syncope/lib/syncope-console.war"},{"sha":"a5f1a420ac16512d9ff1b8175f5d040145ab559a","filename":"docker/core/pom.xml","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fcore%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fcore%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fpom.xml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -292,13 +292,6 @@ under the License.\n         <filtering>true</filtering>\n       </resource>\n \n-      <resource>\n-        <directory>${basedir}/../../core/starter/src/main/resources</directory>\n-        <includes>\n-          <include>application.properties</include>\n-        </includes>\n-        <filtering>true</filtering>\n-      </resource>\n       <resource>\n         <directory>${basedir}/../../core/spring/src/main/resources</directory>\n         <includes>"},{"sha":"9a1814410bb38b4018a4488529b14e52f4a297bf","filename":"docker/core/src/main/resources/application.properties","status":"renamed","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -26,3 +26,5 @@ conf.directory=${conf.directory}\n \n server.servlet.contextPath=/syncope\n cxf.path=/rest\n+\n+service.discovery.address=${SERVICE_DISCOVERY_ADDRESS}","previous_filename":"fit/core-reference/src/main/resources/application.properties"},{"sha":"0d0002b6c617a34b9274dafa9891144c80293cc1","filename":"docker/core/src/main/resources/provisioning.properties.myjson","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties.myjson","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties.myjson","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties.myjson?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -16,8 +16,8 @@\n # under the License.\n asyncConnectorFacadeExecutor.poolSize=10\n \n-# see http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-task-namespace-executor\n-propagationTaskExecutorAsyncExecutor.poolSize=5-25\n+propagationTaskExecutorAsyncExecutor.corePoolSize=5\n+propagationTaskExecutorAsyncExecutor.maxPoolSize=25\n propagationTaskExecutorAsyncExecutor.queueCapacity=100\n propagationTaskExecutor=org.apache.syncope.core.provisioning.java.propagation.PriorityPropagationTaskExecutor\n "},{"sha":"4ac0bcd13473f287987100005fdcc270c21e2188","filename":"docker/enduser/pom.xml","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fenduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fenduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fenduser%2Fpom.xml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -160,10 +160,8 @@ under the License.\n       </resource>\n       \n       <resource>\n-        <directory>${project.basedir}/../../client/enduser/src/main/resources</directory>\n+        <directory>${project.basedir}/../../client/idrepo/enduser/src/main/resources</directory>\n         <includes>\n-          <include>application.properties</include>\n-          <include>enduser.properties</include>\n           <include>customFormAttributes.json</include>\n           <include>customTemplate.json</include>\n         </includes>"},{"sha":"be2ccea51c77a5df4848c37d5f59f3c86c41ac55","filename":"docker/enduser/src/main/resources/Dockerfile","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2FDockerfile","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2FDockerfile","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2FDockerfile?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -29,7 +29,6 @@ RUN mkdir /opt/syncope/log\n \n COPY *.properties /opt/syncope/conf/\n COPY *.json /opt/syncope/conf/\n-COPY *.properties.template /opt/syncope/conf/\n COPY log4j2.xml /opt/syncope/conf/\n \n COPY syncope-docker-enduser-*war /opt/syncope/lib/syncope-enduser.war"},{"sha":"2fcf9051eb56c42bdbb97232801188570aba2d9e","filename":"docker/enduser/src/main/resources/application.properties","status":"renamed","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -23,3 +23,5 @@ spring.http.encoding.enabled=true\n spring.http.encoding.force=true\n \n server.servlet.contextPath=/syncope-enduser\n+\n+service.discovery.address=${SERVICE_DISCOVERY_ADDRESS}","previous_filename":"client/enduser/src/main/resources/application.properties"},{"sha":"f966472c7ca30645ca21795006ce3a9c86232106","filename":"docker/enduser/src/main/resources/enduser.properties","status":"renamed","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fenduser.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fenduser.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fenduser.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -24,10 +24,5 @@ adminUser=${adminUser}\n useGZIPCompression=true\n maxUploadFileSizeMB=5\n \n-scheme=${CORE_SCHEME}\n-host=${CORE_HOST}\n-port=${CORE_PORT}\n-rootPath=/syncope/rest/\n-\n captcha=true\n xsrf=true","previous_filename":"docker/enduser/src/main/resources/enduser.properties.template"},{"sha":"8f88f645b36898541720d9be3871bc53c11795fd","filename":"docker/enduser/src/main/resources/oidcclient-agent.properties.template","status":"removed","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4889da6f8fe620665720b23ce0148f0d7179e521/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties.template","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4889da6f8fe620665720b23ce0148f0d7179e521/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties.template","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties.template?ref=4889da6f8fe620665720b23ce0148f0d7179e521","patch":"@@ -1,26 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-conf.directory=${conf.directory}\n-\n-anonymousUser=${anonymousUser}\n-anonymousKey=${anonymousKey}\n-\n-scheme=${CORE_SCHEME}\n-host=${CORE_HOST}\n-port=${CORE_PORT}\n-rootPath=/syncope/rest/\n-useGZIPCompression=true"},{"sha":"8f88f645b36898541720d9be3871bc53c11795fd","filename":"docker/enduser/src/main/resources/saml2sp-agent.properties.template","status":"removed","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4889da6f8fe620665720b23ce0148f0d7179e521/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties.template","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4889da6f8fe620665720b23ce0148f0d7179e521/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties.template","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties.template?ref=4889da6f8fe620665720b23ce0148f0d7179e521","patch":"@@ -1,26 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-conf.directory=${conf.directory}\n-\n-anonymousUser=${anonymousUser}\n-anonymousKey=${anonymousKey}\n-\n-scheme=${CORE_SCHEME}\n-host=${CORE_HOST}\n-port=${CORE_PORT}\n-rootPath=/syncope/rest/\n-useGZIPCompression=true"},{"sha":"2fd53ff796ccbfd2862bd5fb355d5ba89b751c20","filename":"docker/enduser/src/main/resources/startup.sh","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fstartup.sh","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fstartup.sh","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fstartup.sh?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -17,17 +17,6 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-cd /opt/syncope/conf\n-\n-sed \"s/\\${CORE_SCHEME}/$CORE_SCHEME/\" enduser.properties.template | \n-sed \"s/\\${DOMAIN}/$DOMAIN/\" | sed \"s/\\${CORE_HOST}/$CORE_HOST/\" | sed \"s/\\${CORE_PORT}/$CORE_PORT/\" > enduser.properties\n-\n-sed \"s/\\${CORE_SCHEME}/$CORE_SCHEME/\" oidcclient-agent.properties.template | \n-sed \"s/\\${CORE_HOST}/$CORE_HOST/\" | sed \"s/\\${CORE_PORT}/$CORE_PORT/\" > oidcclient-agent.properties\n-\n-sed \"s/\\${CORE_SCHEME}/$CORE_SCHEME/\" saml2sp-agent.properties.template | \n-sed \"s/\\${CORE_HOST}/$CORE_HOST/\" | sed \"s/\\${CORE_PORT}/$CORE_PORT/\" > saml2sp-agent.properties\n-\n export LOADER_PATH=\"/opt/syncope/conf,/opt/syncope/lib\"\n java -Dfile.encoding=UTF-8 -server -Xms1536m -Xmx1536m -XX:NewSize=256m -XX:MaxNewSize=256m \\\n  -XX:+DisableExplicitGC -Djava.security.egd=file:/dev/./urandom -jar /opt/syncope/lib/syncope-enduser.war"},{"sha":"2154623cb638be749c04751bb78c646cf869b18b","filename":"docker/sra/src/main/resources/sra.properties.template","status":"removed","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4889da6f8fe620665720b23ce0148f0d7179e521/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fsra.properties.template","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4889da6f8fe620665720b23ce0148f0d7179e521/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fsra.properties.template","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fsra.properties.template?ref=4889da6f8fe620665720b23ce0148f0d7179e521","patch":"@@ -1,26 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-sra.directory=${conf.directory}\n-\n-anonymousUser=${anonymousUser}\n-anonymousKey=${anonymousKey}\n-\n-scheme=${CORE_SCHEME}\n-host=${CORE_HOST}\n-port=${CORE_PORT}\n-rootPath=/syncope/rest/\n-useGZIPCompression=true"},{"sha":"69093c3dc83c0c2a8ff0f3fc2ae5357386832377","filename":"docker/sra/src/main/resources/startup.sh","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fstartup.sh","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fstartup.sh","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fstartup.sh?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -17,11 +17,6 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-cd /opt/syncope/conf\n-\n-sed \"s/\\${CORE_SCHEME}/$CORE_SCHEME/\" sra.properties.template | \n-sed \"s/\\${CORE_HOST}/$CORE_HOST/\" | sed \"s/\\${CORE_PORT}/$CORE_PORT/\" > sra.properties\n-\n export LOADER_PATH=\"/opt/syncope/conf,/opt/syncope/lib\"\n java -Dfile.encoding=UTF-8 -server -Xms1536m -Xmx1536m -XX:NewSize=256m -XX:MaxNewSize=256m \\\n  -XX:+DisableExplicitGC -Djava.security.egd=file:/dev/./urandom -jar /opt/syncope/lib/syncope-sra.jar"},{"sha":"483828ce25920a731b6c62a535246fdcc4b29fdc","filename":"docker/src/main/resources/docker-compose/docker-compose-ha.yml","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-ha.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-ha.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-ha.yml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -47,6 +47,7 @@ services:\n        KEYMASTER_ADDRESS: http://localhost:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope1:8080/syncope/rest/\n \n    syncope2:\n      depends_on:\n@@ -66,6 +67,7 @@ services:\n        KEYMASTER_ADDRESS: http://localhost:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope2:8080/syncope/rest/\n \n    syncope-console:\n      depends_on:\n@@ -75,12 +77,10 @@ services:\n        - \"28080:8080\"\n      restart: always\n      environment:\n-       CORE_SCHEME: http\n-       CORE_HOST: syncope1\n-       CORE_PORT: 8080\n        KEYMASTER_ADDRESS: http://syncope1:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope-console:8080/syncope-console/\n \n    syncope-enduser:\n      depends_on:\n@@ -90,10 +90,8 @@ services:\n        - \"38080:8080\"\n      restart: always\n      environment:\n-       CORE_SCHEME: http\n-       CORE_HOST: syncope1\n-       CORE_PORT: 8080\n        DOMAIN: Master\n        KEYMASTER_ADDRESS: http://syncope1:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope-enduser:8080/syncope-enduser/"},{"sha":"e7283bb62056275453d6b68486eca5939707f479","filename":"docker/src/main/resources/docker-compose/docker-compose-mariadb.yml","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-mariadb.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-mariadb.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-mariadb.yml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -47,6 +47,7 @@ services:\n        KEYMASTER_ADDRESS: http://localhost:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope:8080/syncope/rest/\n \n    syncope-console:\n      depends_on:\n@@ -56,12 +57,10 @@ services:\n        - \"28080:8080\"\n      restart: always\n      environment:\n-       CORE_SCHEME: http\n-       CORE_HOST: syncope\n-       CORE_PORT: 8080\n        KEYMASTER_ADDRESS: http://syncope:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope-console:8080/syncope-console/\n \n    syncope-enduser:\n      depends_on:\n@@ -71,10 +70,8 @@ services:\n        - \"38080:8080\"\n      restart: always\n      environment:\n-       CORE_SCHEME: http\n-       CORE_HOST: syncope\n-       CORE_PORT: 8080\n        DOMAIN: Master\n        KEYMASTER_ADDRESS: http://syncope:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope-enduser:8080/syncope-enduser/"},{"sha":"3f52c00308e0eef1f4d197d0819db20e4dcc3fa2","filename":"docker/src/main/resources/docker-compose/docker-compose-mssql.yml","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-mssql.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-mssql.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-mssql.yml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -49,6 +49,7 @@ services:\n        KEYMASTER_ADDRESS: http://localhost:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope:8080/syncope/rest/\n \n    syncope-console:\n      depends_on:\n@@ -58,12 +59,10 @@ services:\n        - \"28080:8080\"\n      restart: always\n      environment:\n-       CORE_SCHEME: http\n-       CORE_HOST: syncope\n-       CORE_PORT: 8080\n        KEYMASTER_ADDRESS: http://syncope:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope-console:8080/syncope-console/\n \n    syncope-enduser:\n      depends_on:\n@@ -73,10 +72,8 @@ services:\n        - \"38080:8080\"\n      restart: always\n      environment:\n-       CORE_SCHEME: http\n-       CORE_HOST: syncope\n-       CORE_PORT: 8080\n        DOMAIN: Master\n        KEYMASTER_ADDRESS: http://syncope:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope-enduser:8080/syncope-enduser/"},{"sha":"b0ed5d7a74ce7437da8f8d8d473a22162794c094","filename":"docker/src/main/resources/docker-compose/docker-compose-myjson.yml","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-myjson.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-myjson.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-myjson.yml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -47,6 +47,7 @@ services:\n        KEYMASTER_ADDRESS: http://localhost:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope:8080/syncope/rest/\n \n    syncope-console:\n      depends_on:\n@@ -56,12 +57,10 @@ services:\n        - \"28080:8080\"\n      restart: always\n      environment:\n-       CORE_SCHEME: http\n-       CORE_HOST: syncope\n-       CORE_PORT: 8080\n        KEYMASTER_ADDRESS: http://syncope:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope-console:8080/syncope-console/\n \n    syncope-enduser:\n      depends_on:\n@@ -71,10 +70,8 @@ services:\n        - \"38080:8080\"\n      restart: always\n      environment:\n-       CORE_SCHEME: http\n-       CORE_HOST: syncope\n-       CORE_PORT: 8080\n        DOMAIN: Master\n        KEYMASTER_ADDRESS: http://syncope:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope-enduser:8080/syncope-enduser/"},{"sha":"5e355097930c0050ebb615ae28dd28b0b88e6771","filename":"docker/src/main/resources/docker-compose/docker-compose-mysql.yml","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-mysql.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-mysql.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-mysql.yml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -47,6 +47,7 @@ services:\n        KEYMASTER_ADDRESS: http://localhost:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope:8080/syncope/rest/\n \n    syncope-console:\n      depends_on:\n@@ -56,12 +57,10 @@ services:\n        - \"28080:8080\"\n      restart: always\n      environment:\n-       CORE_SCHEME: http\n-       CORE_HOST: syncope\n-       CORE_PORT: 8080\n        KEYMASTER_ADDRESS: http://syncope:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope-console:8080/syncope-console/\n \n    syncope-enduser:\n      depends_on:\n@@ -71,10 +70,8 @@ services:\n        - \"38080:8080\"\n      restart: always\n      environment:\n-       CORE_SCHEME: http\n-       CORE_HOST: syncope\n-       CORE_PORT: 8080\n        DOMAIN: Master\n        KEYMASTER_ADDRESS: http://syncope:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope-enduser:8080/syncope-enduser/"},{"sha":"252f282a0a6e3f80c2dcc357b9e77859b562d6b0","filename":"docker/src/main/resources/docker-compose/docker-compose-pgjsonb.yml","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-pgjsonb.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-pgjsonb.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-pgjsonb.yml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -46,6 +46,7 @@ services:\n        KEYMASTER_ADDRESS: http://localhost:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope:8080/syncope/rest/\n \n    syncope-console:\n      depends_on:\n@@ -55,12 +56,10 @@ services:\n        - \"28080:8080\"\n      restart: always\n      environment:\n-       CORE_SCHEME: http\n-       CORE_HOST: syncope\n-       CORE_PORT: 8080\n        KEYMASTER_ADDRESS: http://syncope:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope-console:8080/syncope-console/\n \n    syncope-enduser:\n      depends_on:\n@@ -70,10 +69,8 @@ services:\n        - \"38080:8080\"\n      restart: always\n      environment:\n-       CORE_SCHEME: http\n-       CORE_HOST: syncope\n-       CORE_PORT: 8080\n        DOMAIN: Master\n        KEYMASTER_ADDRESS: http://syncope:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope-enduser:8080/syncope-enduser/"},{"sha":"f79abdbeb6d4fdd254e9afa1a2da43e5a870de89","filename":"docker/src/main/resources/docker-compose/docker-compose-postgresql.yml","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-postgresql.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-postgresql.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-postgresql.yml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -46,6 +46,7 @@ services:\n        KEYMASTER_ADDRESS: http://localhost:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope:8080/syncope/rest/\n \n    syncope-console:\n      depends_on:\n@@ -55,12 +56,10 @@ services:\n        - \"28080:8080\"\n      restart: always\n      environment:\n-       CORE_SCHEME: http\n-       CORE_HOST: syncope\n-       CORE_PORT: 8080\n        KEYMASTER_ADDRESS: http://syncope:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope-console:8080/syncope-console/\n \n    syncope-enduser:\n      depends_on:\n@@ -70,10 +69,8 @@ services:\n        - \"38080:8080\"\n      restart: always\n      environment:\n-       CORE_SCHEME: http\n-       CORE_HOST: syncope\n-       CORE_PORT: 8080\n        DOMAIN: Master\n        KEYMASTER_ADDRESS: http://syncope:8080/syncope/rest/keymaster\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope-enduser:8080/syncope-enduser/"},{"sha":"bd0ad7c64995c9207f03ac710b8d4d6063925a95","filename":"docker/src/main/resources/docker-compose/docker-compose-zookeeper.yml","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-zookeeper.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-zookeeper.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-zookeeper.yml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -53,6 +53,7 @@ services:\n        KEYMASTER_ADDRESS: keymaster:2181\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME:-}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD:-}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope:8080/syncope/rest/\n \n    syncope-console:\n      depends_on:\n@@ -62,12 +63,10 @@ services:\n        - \"28080:8080\"\n      restart: always\n      environment:\n-       CORE_SCHEME: http\n-       CORE_HOST: syncope\n-       CORE_PORT: 8080\n        KEYMASTER_ADDRESS: keymaster:2181\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME:-}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD:-}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope-console:8080/syncope-console/\n \n    syncope-enduser:\n      depends_on:\n@@ -77,10 +76,8 @@ services:\n        - \"38080:8080\"\n      restart: always\n      environment:\n-       CORE_SCHEME: http\n-       CORE_HOST: syncope\n-       CORE_PORT: 8080\n        DOMAIN: Master\n        KEYMASTER_ADDRESS: keymaster:2181\n        KEYMASTER_USERNAME: ${KEYMASTER_USERNAME:-}\n        KEYMASTER_PASSWORD: ${KEYMASTER_PASSWORD:-}\n+       SERVICE_DISCOVERY_ADDRESS: http://syncope-enduser:8080/syncope-enduser/"},{"sha":"fd71f6d6c640b053f2ff03e74c5e0e5a9ba3eeb9","filename":"docker/src/main/resources/kubernetes/syncope/templates/syncope-deployment.yaml","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsrc%2Fmain%2Fresources%2Fkubernetes%2Fsyncope%2Ftemplates%2Fsyncope-deployment.yaml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/docker%2Fsrc%2Fmain%2Fresources%2Fkubernetes%2Fsyncope%2Ftemplates%2Fsyncope-deployment.yaml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsrc%2Fmain%2Fresources%2Fkubernetes%2Fsyncope%2Ftemplates%2Fsyncope-deployment.yaml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -26,9 +26,6 @@ data:\n  DB_POOL_MAX: \"{{.Values.syncopeEnvironment.dbPoolMax}}\"\n  DB_POOL_MIN: \"{{.Values.syncopeEnvironment.dbPoolMin}}\"\n  OPENJPA_REMOTE_COMMIT: sjvm\n- CORE_SCHEME: \"{{.Values.syncopeEnvironment.coreScheme}}\"\n- CORE_HOST: \"{{.Values.syncopeEnvironment.coreHost}}\"\n- CORE_PORT: \"{{.Values.syncopeEnvironment.corePort}}\"\n ---\n apiVersion: extensions/v1beta1\n kind: Deployment"},{"sha":"c52b4dc2aebfa862f94fefd88c31c8fa5605b434","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DomainProcessEngineFactoryBean.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngineFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngineFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngineFactoryBean.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -70,7 +70,7 @@ private ProcessEngine build(final String domain, final DataSource datasource) {\n                 domain + \"TransactionManager\", PlatformTransactionManager.class);\n         Object entityManagerFactory = ctx.getBean(domain + \"EntityManagerFactory\");\n \n-        SpringProcessEngineConfiguration conf = ctx.getBean(SpringProcessEngineConfiguration.class);\n+        DomainProcessEngineConfiguration conf = ctx.getBean(DomainProcessEngineConfiguration.class);\n         conf.setDataSource(datasource);\n         conf.setTransactionManager(transactionManager);\n         conf.setTransactionsExternallyManaged(true);"},{"sha":"878aeb9c1262989a437602ccc36dce83a5908eb8","filename":"ext/oidcclient/agent/pom.xml","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Foidcclient%2Fagent%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Foidcclient%2Fagent%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fpom.xml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -63,8 +63,13 @@ under the License.\n     </dependency>\n \n     <dependency>\n-      <groupId>org.apache.syncope.client.idm</groupId>\n-      <artifactId>syncope-client-idm-lib</artifactId>\n+      <groupId>org.apache.syncope.common.keymaster</groupId>\n+      <artifactId>syncope-common-keymaster-client-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.client.idrepo</groupId>\n+      <artifactId>syncope-client-idrepo-lib</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n     <dependency>"},{"sha":"06580420a2503d8f8deef02d8585a967f9bb6fd6","filename":"ext/oidcclient/agent/src/main/java/org/apache/syncope/ext/oidcclient/agent/AbstractOIDCClientServlet.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FAbstractOIDCClientServlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FAbstractOIDCClientServlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FAbstractOIDCClientServlet.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.oidcclient.agent;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.http.HttpServlet;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+\n+class AbstractOIDCClientServlet extends HttpServlet {\n+\n+    private static final long serialVersionUID = 4738590657326972169L;\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractOIDCClientServlet.class);\n+\n+    private static final String SYNCOPE_CLIENT_FACTORY = \"SyncopeClientFactory\";\n+\n+    private static final String SYNCOPE_ANONYMOUS_CLIENT = \"SyncopeAnonymousClient\";\n+\n+    private final ApplicationContext ctx;\n+\n+    protected AbstractOIDCClientServlet(final ApplicationContext ctx) {\n+        super();\n+        this.ctx = ctx;\n+    }\n+\n+    protected SyncopeClientFactoryBean getClientFactory(\n+            final ServletContext servletContext,\n+            final boolean useGZIPCompression) {\n+\n+        SyncopeClientFactoryBean clientFactory =\n+                (SyncopeClientFactoryBean) servletContext.getAttribute(SYNCOPE_CLIENT_FACTORY);\n+        if (clientFactory == null) {\n+            ServiceOps serviceOps = ctx.getBean(ServiceOps.class);\n+            clientFactory = new SyncopeClientFactoryBean().\n+                    setAddress(serviceOps.get(NetworkService.Type.CORE).getAddress()).\n+                    setUseCompression(useGZIPCompression);\n+\n+            servletContext.setAttribute(SYNCOPE_CLIENT_FACTORY, clientFactory);\n+        }\n+\n+        return clientFactory;\n+    }\n+\n+    protected SyncopeClient getAnonymousClient(\n+            final ServletContext servletContext,\n+            final String anonymousUser,\n+            final String anonymousKey,\n+            final boolean useGZIPCompression) {\n+\n+        SyncopeClient anonymousClient = (SyncopeClient) servletContext.getAttribute(SYNCOPE_ANONYMOUS_CLIENT);\n+        if (anonymousClient == null) {\n+            SyncopeClientFactoryBean clientFactory = getClientFactory(servletContext, useGZIPCompression);\n+            anonymousClient = clientFactory.create(new AnonymousAuthenticationHandler(anonymousUser, anonymousKey));\n+\n+            servletContext.setAttribute(SYNCOPE_ANONYMOUS_CLIENT, anonymousClient);\n+        }\n+\n+        return anonymousClient;\n+    }\n+}"},{"sha":"948865bebaf0eecbae8e5c555573404333b94fc4","filename":"ext/oidcclient/agent/src/main/java/org/apache/syncope/ext/oidcclient/agent/BeforeLogout.java","status":"modified","additions":15,"deletions":7,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FBeforeLogout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FBeforeLogout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FBeforeLogout.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -20,22 +20,31 @@\n \n import java.io.IOException;\n import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.UriBuilder;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.OIDCConstants;\n import org.apache.syncope.common.lib.to.OIDCLogoutRequestTO;\n import org.apache.syncope.common.rest.api.service.OIDCClientService;\n+import org.springframework.context.ApplicationContext;\n \n-public class BeforeLogout extends HttpServlet {\n+public class BeforeLogout extends AbstractOIDCClientServlet {\n \n     private static final long serialVersionUID = -5920740403138557179L;\n \n+    private final boolean useGZIPCompression;\n+\n+    public BeforeLogout(\n+            final ApplicationContext ctx,\n+            final boolean useGZIPCompression) {\n+\n+        super(ctx);\n+        this.useGZIPCompression = useGZIPCompression;\n+    }\n+\n     @Override\n     protected void doGet(final HttpServletRequest request, final HttpServletResponse response)\n             throws ServletException, IOException {\n@@ -44,14 +53,13 @@ protected void doGet(final HttpServletRequest request, final HttpServletResponse\n         response.setHeader(\"Pragma\", \"no-cache\");\n         response.setStatus(HttpServletResponse.SC_SEE_OTHER);\n \n-        SyncopeClientFactoryBean clientFactory = (SyncopeClientFactoryBean) request.getServletContext().\n-                getAttribute(Constants.SYNCOPE_CLIENT_FACTORY);\n         String accessToken = (String) request.getSession().getAttribute(Constants.OIDCCLIENTJWT);\n         if (StringUtils.isBlank(accessToken)) {\n             throw new IllegalArgumentException(\"No access token found \");\n         }\n-        SyncopeClient client = clientFactory.create(accessToken);\n-        OIDCLogoutRequestTO requestTO = client.getService(OIDCClientService.class).\n+\n+        SyncopeClientFactoryBean clientFactory = getClientFactory(request.getServletContext(), useGZIPCompression);\n+        OIDCLogoutRequestTO requestTO = clientFactory.create(accessToken).getService(OIDCClientService.class).\n                 createLogoutRequest(request.getSession().getAttribute(OIDCConstants.OP).toString());\n \n         String postLogoutRedirectURI = StringUtils.substringBefore(request.getRequestURL().toString(), \"/beforelogout\")"},{"sha":"6dd9f693fb9a06c04e9b5e08fdaf3c3ea5fdcf0e","filename":"ext/oidcclient/agent/src/main/java/org/apache/syncope/ext/oidcclient/agent/CodeConsumer.java","status":"modified","additions":22,"deletions":8,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FCodeConsumer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FCodeConsumer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FCodeConsumer.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -24,7 +24,6 @@\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import org.apache.commons.lang3.StringUtils;\n@@ -33,18 +32,33 @@\n import org.apache.syncope.common.lib.OIDCConstants;\n import org.apache.syncope.common.lib.to.OIDCLoginResponseTO;\n import org.apache.syncope.common.rest.api.service.OIDCClientService;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n \n-public class CodeConsumer extends HttpServlet {\n+public class CodeConsumer extends AbstractOIDCClientServlet {\n \n     private static final long serialVersionUID = 968480296813639041L;\n \n-    protected static final Logger LOG = LoggerFactory.getLogger(CodeConsumer.class);\n-\n     private static final ObjectMapper MAPPER =\n             new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n \n+    private final String anonymousUser;\n+\n+    private final String anonymousKey;\n+\n+    private final boolean useGZIPCompression;\n+\n+    public CodeConsumer(\n+            final ApplicationContext ctx,\n+            final String anonymousUser,\n+            final String anonymousKey,\n+            final boolean useGZIPCompression) {\n+\n+        super(ctx);\n+        this.anonymousUser = anonymousUser;\n+        this.anonymousKey = anonymousKey;\n+        this.useGZIPCompression = useGZIPCompression;\n+    }\n+\n     @Override\n     protected void doGet(final HttpServletRequest request, final HttpServletResponse response)\n             throws ServletException, IOException {\n@@ -56,8 +70,8 @@ protected void doGet(final HttpServletRequest request, final HttpServletResponse\n                 throw new IllegalArgumentException(\"Empty \" + OIDCConstants.CODE + \" or \" + OIDCConstants.STATE);\n             }\n             if (state.equals(request.getSession().getAttribute(OIDCConstants.STATE).toString())) {\n-                SyncopeClient anonymous = (SyncopeClient) request.getServletContext().\n-                        getAttribute(Constants.SYNCOPE_ANONYMOUS_CLIENT);\n+                SyncopeClient anonymous = getAnonymousClient(\n+                        request.getServletContext(), anonymousUser, anonymousKey, useGZIPCompression);\n \n                 OIDCLoginResponseTO responseTO = anonymous.getService(OIDCClientService.class).login(\n                         request.getRequestURL().toString(),"},{"sha":"e2bac7ff511dddd41268d94427366108ddcc24b1","filename":"ext/oidcclient/agent/src/main/java/org/apache/syncope/ext/oidcclient/agent/Constants.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FConstants.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -20,10 +20,6 @@\n \n public final class Constants {\n \n-    public static final String SYNCOPE_ANONYMOUS_CLIENT = \"SyncopeAnonymousClient\";\n-\n-    public static final String SYNCOPE_CLIENT_FACTORY = \"SyncopeClientFactory\";\n-\n     public static final String PARAM_OP = \"op\";\n \n     public static final String CONTEXT_PARAM_LOGIN_SUCCESS_URL = \"oidcclient.login.success.url\";"},{"sha":"7a637b9b12248cc82cdc31ecb722741cddfa44b9","filename":"ext/oidcclient/agent/src/main/java/org/apache/syncope/ext/oidcclient/agent/Login.java","status":"modified","additions":20,"deletions":7,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FLogin.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -22,7 +22,6 @@\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.ws.rs.core.HttpHeaders;\n@@ -32,23 +31,37 @@\n import org.apache.syncope.common.lib.OIDCConstants;\n import org.apache.syncope.common.lib.to.OIDCLoginRequestTO;\n import org.apache.syncope.common.rest.api.service.OIDCClientService;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n \n-public class Login extends HttpServlet {\n+public class Login extends AbstractOIDCClientServlet {\n \n     private static final long serialVersionUID = 968480296813639041L;\n \n-    protected static final Logger LOG = LoggerFactory.getLogger(Login.class);\n+    private final String anonymousUser;\n+\n+    private final String anonymousKey;\n+\n+    private final boolean useGZIPCompression;\n+\n+    public Login(final ApplicationContext ctx,\n+            final String anonymousUser,\n+            final String anonymousKey,\n+            final boolean useGZIPCompression) {\n+\n+        super(ctx);\n+        this.anonymousUser = anonymousUser;\n+        this.anonymousKey = anonymousKey;\n+        this.useGZIPCompression = useGZIPCompression;\n+    }\n \n     @Override\n     protected void doGet(final HttpServletRequest request, final HttpServletResponse response)\n             throws ServletException, IOException {\n \n         String op = request.getParameter(Constants.PARAM_OP);\n \n-        SyncopeClient anonymous = (SyncopeClient) request.getServletContext().\n-                getAttribute(Constants.SYNCOPE_ANONYMOUS_CLIENT);\n+        SyncopeClient anonymous =\n+                getAnonymousClient(request.getServletContext(), anonymousUser, anonymousKey, useGZIPCompression);\n         try {\n             String redirectURI = StringUtils.substringBefore(request.getRequestURL().toString(), \"/login\")\n                     + \"/code-consumer\";"},{"sha":"6a81b4daf8ae24fc24a53d7326a89e421b714b3b","filename":"ext/oidcclient/agent/src/main/java/org/apache/syncope/ext/oidcclient/agent/OIDCClientAgentContext.java","status":"modified","additions":22,"deletions":8,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FOIDCClientAgentContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FOIDCClientAgentContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FOIDCClientAgentContext.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -18,32 +18,46 @@\n  */\n package org.apache.syncope.ext.oidcclient.agent;\n \n-import org.springframework.boot.web.servlet.ServletListenerRegistrationBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.web.servlet.ServletRegistrationBean;\n+import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n \n+@PropertySource(\"classpath:oidcclient-agent.properties\")\n+@PropertySource(value = \"file:${conf.directory}/oidcclient-agent.properties\", ignoreResourceNotFound = true)\n @Configuration\n public class OIDCClientAgentContext {\n \n-    @Bean\n-    public ServletListenerRegistrationBean<OIDCClientAgentSetup> oidcClientAgentSetup() {\n-        return new ServletListenerRegistrationBean<>(new OIDCClientAgentSetup());\n-    }\n+    @Value(\"${anonymousUser}\")\n+    private String anonymousUser;\n+\n+    @Value(\"${anonymousKey}\")\n+    private String anonymousKey;\n+\n+    @Value(\"${useGZIPCompression}\")\n+    private boolean useGZIPCompression;\n+\n+    @Autowired\n+    private ApplicationContext ctx;\n \n     @Bean\n     public ServletRegistrationBean<Login> oidcClientLogin() {\n-        return new ServletRegistrationBean<>(new Login(), \"/oidcclient/login\");\n+        return new ServletRegistrationBean<>(\n+                new Login(ctx, anonymousUser, anonymousKey, useGZIPCompression), \"/oidcclient/login\");\n     }\n \n     @Bean\n     public ServletRegistrationBean<CodeConsumer> oidcClientCodeConsumer() {\n-        return new ServletRegistrationBean<>(new CodeConsumer(), \"/oidcclient/code-consumer\");\n+        return new ServletRegistrationBean<>(\n+                new CodeConsumer(ctx, anonymousUser, anonymousKey, useGZIPCompression), \"/oidcclient/code-consumer\");\n     }\n \n     @Bean\n     public ServletRegistrationBean<BeforeLogout> oidcClientBeforeLogout() {\n-        return new ServletRegistrationBean<>(new BeforeLogout(), \"/oidcclient/beforelogout\");\n+        return new ServletRegistrationBean<>(new BeforeLogout(ctx, useGZIPCompression), \"/oidcclient/beforelogout\");\n     }\n \n     @Bean"},{"sha":"666d2cb58e8527738f53548ec0f1e05d943a1ed0","filename":"ext/oidcclient/agent/src/main/java/org/apache/syncope/ext/oidcclient/agent/OIDCClientAgentSetup.java","status":"removed","additions":0,"deletions":74,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4889da6f8fe620665720b23ce0148f0d7179e521/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FOIDCClientAgentSetup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4889da6f8fe620665720b23ce0148f0d7179e521/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FOIDCClientAgentSetup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FOIDCClientAgentSetup.java?ref=4889da6f8fe620665720b23ce0148f0d7179e521","patch":"@@ -1,74 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.ext.oidcclient.agent;\n-\n-import java.util.Properties;\n-import javax.servlet.ServletContextEvent;\n-import javax.servlet.ServletContextListener;\n-import org.apache.commons.lang3.BooleanUtils;\n-import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n-import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.lib.PropertyUtils;\n-\n-public class OIDCClientAgentSetup implements ServletContextListener {\n-\n-    private static final String OIDCCLIENT_AGENT_PROPERTIES = \"oidcclient-agent.properties\";\n-\n-    private static <T> T assertNotNull(final T argument, final String name) {\n-        if (argument == null) {\n-            throw new IllegalArgumentException(\"Argument '\" + name + \"' may not be null.\");\n-        }\n-        return argument;\n-    }\n-\n-    @Override\n-    public void contextInitialized(final ServletContextEvent sce) {\n-        // read oidcclientagent.properties\n-        Properties props = PropertyUtils.read(getClass(), OIDCCLIENT_AGENT_PROPERTIES, \"conf.directory\");\n-\n-        String anonymousUser = props.getProperty(\"anonymousUser\");\n-        assertNotNull(anonymousUser, \"<anonymousUser>\");\n-        String anonymousKey = props.getProperty(\"anonymousKey\");\n-        assertNotNull(anonymousKey, \"<anonymousKey>\");\n-\n-        String scheme = props.getProperty(\"scheme\");\n-        assertNotNull(scheme, \"<scheme>\");\n-        String host = props.getProperty(\"host\");\n-        assertNotNull(host, \"<host>\");\n-        String port = props.getProperty(\"port\");\n-        assertNotNull(port, \"<port>\");\n-        String rootPath = props.getProperty(\"rootPath\");\n-        assertNotNull(rootPath, \"<rootPath>\");\n-        String useGZIPCompression = props.getProperty(\"useGZIPCompression\");\n-        assertNotNull(useGZIPCompression, \"<useGZIPCompression>\");\n-\n-        SyncopeClientFactoryBean clientFactory = new SyncopeClientFactoryBean().\n-                setAddress(scheme + \"://\" + host + \":\" + port + \"/\" + rootPath).\n-                setUseCompression(BooleanUtils.toBoolean(useGZIPCompression));\n-\n-        sce.getServletContext().setAttribute(Constants.SYNCOPE_CLIENT_FACTORY, clientFactory);\n-        sce.getServletContext().setAttribute(\n-                Constants.SYNCOPE_ANONYMOUS_CLIENT,\n-                clientFactory.create(new AnonymousAuthenticationHandler(anonymousUser, anonymousKey)));\n-    }\n-\n-    @Override\n-    public void contextDestroyed(final ServletContextEvent sce) {\n-    }\n-}"},{"sha":"7e5b0d5f84a633ea236140ee503baaa1bd9d8dcf","filename":"ext/oidcclient/agent/src/main/resources/oidcclient-agent.properties","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -19,8 +19,4 @@ conf.directory=${conf.directory}\n anonymousUser=${anonymousUser}\n anonymousKey=${anonymousKey}\n \n-scheme=http\n-host=localhost\n-port=8080\n-rootPath=/syncope/rest/\n useGZIPCompression=true"},{"sha":"808c76dab5db2edccd81e8b0ef78f4f6acf60999","filename":"ext/saml2sp/agent/pom.xml","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fsaml2sp%2Fagent%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fsaml2sp%2Fagent%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fpom.xml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -63,8 +63,13 @@ under the License.\n     </dependency>\n \n     <dependency>\n-      <groupId>org.apache.syncope.client.idm</groupId>\n-      <artifactId>syncope-client-idm-lib</artifactId>\n+      <groupId>org.apache.syncope.common.keymaster</groupId>\n+      <artifactId>syncope-common-keymaster-client-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.client.idrepo</groupId>\n+      <artifactId>syncope-client-idrepo-lib</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n     <dependency>"},{"sha":"e778f83d0fa273ca831093361a0a739022c1af20","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/AbstractSAML2SPServlet.java","status":"modified","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAbstractSAML2SPServlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAbstractSAML2SPServlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAbstractSAML2SPServlet.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -22,6 +22,7 @@\n import java.io.InputStream;\n import java.net.URLDecoder;\n import java.nio.charset.StandardCharsets;\n+import javax.servlet.ServletContext;\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletResponse;\n import javax.ws.rs.core.HttpHeaders;\n@@ -31,18 +32,70 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.helpers.IOUtils;\n import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.lib.SSOConstants;\n import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n import org.apache.syncope.common.lib.to.SAML2RequestTO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n \n public abstract class AbstractSAML2SPServlet extends HttpServlet {\n \n     private static final long serialVersionUID = 7969539245875799817L;\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractSAML2SPServlet.class);\n \n+    private static final String SYNCOPE_CLIENT_FACTORY = \"SyncopeClientFactory\";\n+\n+    private static final String SYNCOPE_ANONYMOUS_CLIENT = \"SyncopeAnonymousClient\";\n+\n+    private final ApplicationContext ctx;\n+\n+    public AbstractSAML2SPServlet(final ApplicationContext ctx) {\n+        super();\n+        this.ctx = ctx;\n+    }\n+\n+    protected SyncopeClientFactoryBean getClientFactory(\n+            final ServletContext servletContext,\n+            final boolean useGZIPCompression) {\n+\n+        SyncopeClientFactoryBean clientFactory =\n+                (SyncopeClientFactoryBean) servletContext.getAttribute(SYNCOPE_CLIENT_FACTORY);\n+        if (clientFactory == null) {\n+            ServiceOps serviceOps = ctx.getBean(ServiceOps.class);\n+            clientFactory = new SyncopeClientFactoryBean().\n+                    setAddress(serviceOps.get(NetworkService.Type.CORE).getAddress()).\n+                    setUseCompression(useGZIPCompression);\n+\n+            servletContext.setAttribute(SYNCOPE_CLIENT_FACTORY, clientFactory);\n+        }\n+\n+        return clientFactory;\n+    }\n+\n+    protected SyncopeClient getAnonymousClient(\n+            final ServletContext servletContext,\n+            final String anonymousUser,\n+            final String anonymousKey,\n+            final boolean useGZIPCompression) {\n+\n+        SyncopeClient anonymousClient = (SyncopeClient) servletContext.getAttribute(SYNCOPE_ANONYMOUS_CLIENT);\n+        if (anonymousClient == null) {\n+            SyncopeClientFactoryBean clientFactory = getClientFactory(servletContext, useGZIPCompression);\n+            anonymousClient = clientFactory.create(new AnonymousAuthenticationHandler(anonymousUser, anonymousKey));\n+\n+            servletContext.setAttribute(SYNCOPE_ANONYMOUS_CLIENT, anonymousClient);\n+        }\n+\n+        return anonymousClient;\n+    }\n+\n     protected void prepare(final HttpServletResponse response, final SAML2RequestTO requestTO) throws IOException {\n         response.setHeader(HttpHeaders.CACHE_CONTROL, \"no-cache, no-store\");\n         response.setHeader(\"Pragma\", \"no-cache\");"},{"sha":"a32aa59efaac451863b8695884c0b7241e7d9598","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/AssertionConsumer.java","status":"modified","additions":21,"deletions":2,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n import org.apache.syncope.common.rest.api.service.SAML2SPService;\n+import org.springframework.context.ApplicationContext;\n \n public class AssertionConsumer extends AbstractSAML2SPServlet {\n \n@@ -39,12 +40,30 @@ public class AssertionConsumer extends AbstractSAML2SPServlet {\n     private static final ObjectMapper MAPPER =\n             new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n \n+    private final String anonymousUser;\n+\n+    private final String anonymousKey;\n+\n+    private final boolean useGZIPCompression;\n+\n+    public AssertionConsumer(\n+            final ApplicationContext ctx,\n+            final String anonymousUser,\n+            final String anonymousKey,\n+            final boolean useGZIPCompression) {\n+\n+        super(ctx);\n+        this.anonymousUser = anonymousUser;\n+        this.anonymousKey = anonymousKey;\n+        this.useGZIPCompression = useGZIPCompression;\n+    }\n+\n     @Override\n     protected void doPost(final HttpServletRequest request, final HttpServletResponse response)\n             throws ServletException, IOException {\n \n-        SyncopeClient anonymous = (SyncopeClient) request.getServletContext().\n-                getAttribute(Constants.SYNCOPE_ANONYMOUS_CLIENT);\n+        SyncopeClient anonymous =\n+                getAnonymousClient(request.getServletContext(), anonymousUser, anonymousKey, useGZIPCompression);\n         try {\n             SAML2LoginResponseTO responseTO = anonymous.getService(SAML2SPService.class).\n                     validateLoginResponse(extract("},{"sha":"0efbf095b7c7e2f4c9dafbaf43ea477ec1a3cc34","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/Constants.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FConstants.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -20,10 +20,6 @@\n \n public final class Constants {\n \n-    public static final String SYNCOPE_CLIENT_FACTORY = \"SyncopeClientFactory\";\n-\n-    public static final String SYNCOPE_ANONYMOUS_CLIENT = \"SyncopeAnonymousClient\";\n-\n     public static final String PARAM_IDP = \"idp\";\n \n     public static final String CONTEXT_PARAM_LOGIN_SUCCESS_URL = \"saml2sp.login.success.url\";"},{"sha":"537c48e6ede189f29a77f3833d44e341d3b6ee2e","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/Login.java","status":"modified","additions":21,"deletions":2,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogin.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -28,19 +28,38 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.SAML2RequestTO;\n import org.apache.syncope.common.rest.api.service.SAML2SPService;\n+import org.springframework.context.ApplicationContext;\n \n public class Login extends AbstractSAML2SPServlet {\n \n     private static final long serialVersionUID = 968480296813639041L;\n \n+    private final String anonymousUser;\n+\n+    private final String anonymousKey;\n+\n+    private final boolean useGZIPCompression;\n+\n+    public Login(\n+            final ApplicationContext ctx,\n+            final String anonymousUser,\n+            final String anonymousKey,\n+            final boolean useGZIPCompression) {\n+\n+        super(ctx);\n+        this.anonymousUser = anonymousUser;\n+        this.anonymousKey = anonymousKey;\n+        this.useGZIPCompression = useGZIPCompression;\n+    }\n+\n     @Override\n     protected void doGet(final HttpServletRequest request, final HttpServletResponse response)\n             throws ServletException, IOException {\n \n         String idp = request.getParameter(Constants.PARAM_IDP);\n \n-        SyncopeClient anonymous = (SyncopeClient) request.getServletContext().\n-                getAttribute(Constants.SYNCOPE_ANONYMOUS_CLIENT);\n+        SyncopeClient anonymous =\n+                getAnonymousClient(request.getServletContext(), anonymousUser, anonymousKey, useGZIPCompression);\n         try {\n             SAML2RequestTO requestTO = anonymous.getService(SAML2SPService.class).createLoginRequest(\n                     StringUtils.substringBefore(request.getRequestURL().toString(), \"/saml2sp\"), idp);"},{"sha":"e381c358e786bcab4cd3b118663194d9cee28d63","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/Logout.java","status":"modified","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogout.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -31,18 +31,28 @@\n import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n import org.apache.syncope.common.lib.to.SAML2RequestTO;\n import org.apache.syncope.common.rest.api.service.SAML2SPService;\n+import org.springframework.context.ApplicationContext;\n \n public class Logout extends AbstractSAML2SPServlet {\n \n     private static final long serialVersionUID = 3010286040376932117L;\n \n+    private final boolean useGZIPCompression;\n+\n+    public Logout(\n+            final ApplicationContext ctx,\n+            final boolean useGZIPCompression) {\n+\n+        super(ctx);\n+        this.useGZIPCompression = useGZIPCompression;\n+    }\n+\n     private void doLogout(\n             final SAML2ReceivedResponseTO receivedResponse,\n             final HttpServletRequest request,\n             final HttpServletResponse response) throws ServletException, IOException {\n \n-        SyncopeClientFactoryBean clientFactory = (SyncopeClientFactoryBean) request.getServletContext().\n-                getAttribute(Constants.SYNCOPE_CLIENT_FACTORY);\n+        SyncopeClientFactoryBean clientFactory = getClientFactory(request.getServletContext(), useGZIPCompression);\n         try {\n             String accessToken = (String) request.getSession().getAttribute(Constants.SAML2SPJWT);\n             if (StringUtils.isBlank(accessToken)) {\n@@ -82,8 +92,7 @@ protected void doGet(final HttpServletRequest request, final HttpServletResponse\n         String samlResponse = request.getParameter(SSOConstants.SAML_RESPONSE);\n         String relayState = request.getParameter(SSOConstants.RELAY_STATE);\n         if (samlResponse == null) { // prepare logout response\n-            SyncopeClientFactoryBean clientFactory = (SyncopeClientFactoryBean) request.getServletContext().\n-                    getAttribute(Constants.SYNCOPE_CLIENT_FACTORY);\n+            SyncopeClientFactoryBean clientFactory = getClientFactory(request.getServletContext(), useGZIPCompression);\n             try {\n                 String accessToken = (String) request.getSession().getAttribute(Constants.SAML2SPJWT);\n                 if (StringUtils.isBlank(accessToken)) {"},{"sha":"5648ba2b6f90179ae4245c48ea214c2800c008b7","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/Metadata.java","status":"modified","additions":22,"deletions":4,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FMetadata.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -21,7 +21,6 @@\n import java.io.IOException;\n import java.io.InputStream;\n import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.ws.rs.core.MediaType;\n@@ -31,17 +30,36 @@\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.rest.api.service.SAML2SPService;\n+import org.springframework.context.ApplicationContext;\n \n-public class Metadata extends HttpServlet {\n+public class Metadata extends AbstractSAML2SPServlet {\n \n     private static final long serialVersionUID = 694030186105137875L;\n \n+    private final String anonymousUser;\n+\n+    private final String anonymousKey;\n+\n+    private final boolean useGZIPCompression;\n+\n+    public Metadata(\n+            final ApplicationContext ctx,\n+            final String anonymousUser,\n+            final String anonymousKey,\n+            final boolean useGZIPCompression) {\n+\n+        super(ctx);\n+        this.anonymousUser = anonymousUser;\n+        this.anonymousKey = anonymousKey;\n+        this.useGZIPCompression = useGZIPCompression;\n+    }\n+\n     @Override\n     protected void doGet(final HttpServletRequest request, final HttpServletResponse response)\n             throws ServletException, IOException {\n \n-        SyncopeClient anonymous = (SyncopeClient) request.getServletContext().\n-                getAttribute(Constants.SYNCOPE_ANONYMOUS_CLIENT);\n+        SyncopeClient anonymous =\n+                getAnonymousClient(request.getServletContext(), anonymousUser, anonymousKey, useGZIPCompression);\n         SAML2SPService service = anonymous.getService(SAML2SPService.class);\n         WebClient.client(service).accept(MediaType.APPLICATION_XML_TYPE).type(MediaType.APPLICATION_XML_TYPE);\n         try {"},{"sha":"5d6f20b6713358927b8d02c5715d99bbecb0d75f","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/SAML2SPAgentContext.java","status":"modified","additions":25,"deletions":9,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2SPAgentContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2SPAgentContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2SPAgentContext.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -18,36 +18,52 @@\n  */\n package org.apache.syncope.ext.saml2lsp.agent;\n \n-import org.springframework.boot.web.servlet.ServletListenerRegistrationBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.web.servlet.ServletRegistrationBean;\n+import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n \n+@PropertySource(\"classpath:saml2sp-agent.properties\")\n+@PropertySource(value = \"file:${conf.directory}/saml2sp-agent.properties\", ignoreResourceNotFound = true)\n @Configuration\n public class SAML2SPAgentContext {\n \n-    @Bean\n-    public ServletListenerRegistrationBean<SAML2SPAgentSetup> saml2SPAgentSetup() {\n-        return new ServletListenerRegistrationBean<>(new SAML2SPAgentSetup());\n-    }\n+    @Value(\"${anonymousUser}\")\n+    private String anonymousUser;\n+\n+    @Value(\"${anonymousKey}\")\n+    private String anonymousKey;\n+\n+    @Value(\"${useGZIPCompression}\")\n+    private boolean useGZIPCompression;\n+\n+    @Autowired\n+    private ApplicationContext ctx;\n \n     @Bean\n     public ServletRegistrationBean<Metadata> saml2SPMetadata() {\n-        return new ServletRegistrationBean<>(new Metadata(), \"/saml2sp/metadata\");\n+        return new ServletRegistrationBean<>(\n+                new Metadata(ctx, anonymousUser, anonymousKey, useGZIPCompression), \"/saml2sp/metadata\");\n     }\n \n     @Bean\n     public ServletRegistrationBean<Login> saml2SPLogin() {\n-        return new ServletRegistrationBean<>(new Login(), \"/saml2sp/login\");\n+        return new ServletRegistrationBean<>(\n+                new Login(ctx, anonymousUser, anonymousKey, useGZIPCompression), \"/saml2sp/login\");\n     }\n \n     @Bean\n     public ServletRegistrationBean<AssertionConsumer> saml2SPAssertionConsumer() {\n-        return new ServletRegistrationBean<>(new AssertionConsumer(), \"/saml2sp/assertion-consumer\");\n+        return new ServletRegistrationBean<>(\n+                new AssertionConsumer(ctx, anonymousUser, anonymousKey, useGZIPCompression),\n+                \"/saml2sp/assertion-consumer\");\n     }\n \n     @Bean\n     public ServletRegistrationBean<Logout> saml2SPLogout() {\n-        return new ServletRegistrationBean<>(new Logout(), \"/saml2sp/logout\");\n+        return new ServletRegistrationBean<>(new Logout(ctx, useGZIPCompression), \"/saml2sp/logout\");\n     }\n }"},{"sha":"9dc8abd64e27e22beb4b1878e32bea4b344e1426","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/SAML2SPAgentSetup.java","status":"removed","additions":0,"deletions":74,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4889da6f8fe620665720b23ce0148f0d7179e521/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2SPAgentSetup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4889da6f8fe620665720b23ce0148f0d7179e521/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2SPAgentSetup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2SPAgentSetup.java?ref=4889da6f8fe620665720b23ce0148f0d7179e521","patch":"@@ -1,74 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.ext.saml2lsp.agent;\n-\n-import java.util.Properties;\n-import javax.servlet.ServletContextEvent;\n-import javax.servlet.ServletContextListener;\n-import org.apache.commons.lang3.BooleanUtils;\n-import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n-import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.lib.PropertyUtils;\n-\n-public class SAML2SPAgentSetup implements ServletContextListener {\n-\n-    private static final String SAML2SP_AGENT_PROPERTIES = \"saml2sp-agent.properties\";\n-\n-    private static <T> T assertNotNull(final T argument, final String name) {\n-        if (argument == null) {\n-            throw new IllegalArgumentException(\"Argument '\" + name + \"' may not be null.\");\n-        }\n-        return argument;\n-    }\n-\n-    @Override\n-    public void contextInitialized(final ServletContextEvent sce) {\n-        // read saml2spagent.properties\n-        Properties props = PropertyUtils.read(getClass(), SAML2SP_AGENT_PROPERTIES, \"conf.directory\");\n-\n-        String anonymousUser = props.getProperty(\"anonymousUser\");\n-        assertNotNull(anonymousUser, \"<anonymousUser>\");\n-        String anonymousKey = props.getProperty(\"anonymousKey\");\n-        assertNotNull(anonymousKey, \"<anonymousKey>\");\n-\n-        String scheme = props.getProperty(\"scheme\");\n-        assertNotNull(scheme, \"<scheme>\");\n-        String host = props.getProperty(\"host\");\n-        assertNotNull(host, \"<host>\");\n-        String port = props.getProperty(\"port\");\n-        assertNotNull(port, \"<port>\");\n-        String rootPath = props.getProperty(\"rootPath\");\n-        assertNotNull(rootPath, \"<rootPath>\");\n-        String useGZIPCompression = props.getProperty(\"useGZIPCompression\");\n-        assertNotNull(useGZIPCompression, \"<useGZIPCompression>\");\n-\n-        SyncopeClientFactoryBean clientFactory = new SyncopeClientFactoryBean().\n-                setAddress(scheme + \"://\" + host + \":\" + port + \"/\" + rootPath).\n-                setUseCompression(BooleanUtils.toBoolean(useGZIPCompression));\n-\n-        sce.getServletContext().setAttribute(Constants.SYNCOPE_CLIENT_FACTORY, clientFactory);\n-        sce.getServletContext().setAttribute(\n-                Constants.SYNCOPE_ANONYMOUS_CLIENT,\n-                clientFactory.create(new AnonymousAuthenticationHandler(anonymousUser, anonymousKey)));\n-    }\n-\n-    @Override\n-    public void contextDestroyed(final ServletContextEvent sce) {\n-    }\n-}"},{"sha":"7e5b0d5f84a633ea236140ee503baaa1bd9d8dcf","filename":"ext/saml2sp/agent/src/main/resources/saml2sp-agent.properties","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -19,8 +19,4 @@ conf.directory=${conf.directory}\n anonymousUser=${anonymousUser}\n anonymousKey=${anonymousKey}\n \n-scheme=http\n-host=localhost\n-port=8080\n-rootPath=/syncope/rest/\n useGZIPCompression=true"},{"sha":"a3eedb5d57f149797aead8d6a71ab97da3ac5919","filename":"ext/scimv2/scim-rest-cxf/pom.xml","status":"modified","additions":1,"deletions":22,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fscimv2%2Fscim-rest-cxf%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fscimv2%2Fscim-rest-cxf%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fpom.xml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -48,24 +48,7 @@ under the License.\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>\n     </dependency>\n-    \n-    <dependency>\n-      <groupId>org.springframework</groupId>\n-      <artifactId>spring-context</artifactId>\n-    </dependency>    \n-    <dependency>\n-      <groupId>org.springframework</groupId>\n-      <artifactId>spring-web</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.springframework.security</groupId>\n-      <artifactId>spring-security-web</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.springframework.security</groupId>\n-      <artifactId>spring-security-config</artifactId>\n-    </dependency>\n-    \n+\n     <dependency>\n       <groupId>com.fasterxml.jackson.datatype</groupId>\n       <artifactId>jackson-datatype-joda</artifactId>\n@@ -92,10 +75,6 @@ under the License.\n       <groupId>org.apache.cxf</groupId>\n       <artifactId>cxf-rt-rs-service-description</artifactId>\n     </dependency>\n-    <dependency>\n-      <groupId>org.apache.cxf</groupId>\n-      <artifactId>cxf-rt-rs-client</artifactId>\n-    </dependency>\n \n     <dependency>\n       <groupId>org.apache.syncope.ext.scimv2</groupId>"},{"sha":"170cadcaad0a099e509a05c76ca6b3ef9e6fb4ef","filename":"ext/self-keymaster/client/src/main/java/org/apache/syncope/common/keymaster/client/self/SelfKeymasterClientContext.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientContext.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -23,6 +23,7 @@\n import org.apache.cxf.ext.logging.LoggingFeature;\n import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n import org.springframework.context.annotation.Bean;\n@@ -45,7 +46,7 @@ public class SelfKeymasterClientContext {\n \n     @ConditionalOnExpression(\"#{'${keymaster.address}' matches '^http.+'}\")\n     @Bean\n-    public ConfParamOps selfConfParamOps() {\n+    public JAXRSClientFactoryBean selfKeymasterRESTClientFactoryBean() {\n         JAXRSClientFactoryBean restClientFactoryBean = new JAXRSClientFactoryBean();\n         restClientFactoryBean.setAddress(address);\n         restClientFactoryBean.setUsername(username);\n@@ -54,7 +55,18 @@ public ConfParamOps selfConfParamOps() {\n         restClientFactoryBean.setInheritHeaders(true);\n         restClientFactoryBean.setFeatures(Arrays.asList(new LoggingFeature()));\n         restClientFactoryBean.setProviders(Arrays.asList(new JacksonJsonProvider()));\n+        return restClientFactoryBean;\n+    }\n \n-        return new SelfKeymasterConfParamOps(restClientFactoryBean);\n+    @ConditionalOnExpression(\"#{'${keymaster.address}' matches '^http.+'}\")\n+    @Bean\n+    public ConfParamOps selfConfParamOps() {\n+        return new SelfKeymasterConfParamOps(selfKeymasterRESTClientFactoryBean());\n+    }\n+\n+    @ConditionalOnExpression(\"#{'${keymaster.address}' matches '^http.+'}\")\n+    @Bean\n+    public ServiceOps selfServiceOps() {\n+        return new SelfKeymasterServiceOps(selfKeymasterRESTClientFactoryBean(), 5);\n     }\n }"},{"sha":"aa3b676e3deb64b192cf9f1edf602c7ca9d37f6a","filename":"ext/self-keymaster/client/src/main/java/org/apache/syncope/common/keymaster/client/self/SelfKeymasterConfParamOps.java","status":"modified","additions":9,"deletions":33,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterConfParamOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterConfParamOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterConfParamOps.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -24,58 +24,33 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.Map;\n-import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.cxf.jaxrs.client.Client;\n-import org.apache.cxf.jaxrs.client.ClientConfiguration;\n import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n-import org.apache.cxf.jaxrs.client.WebClient;\n-import org.apache.cxf.transport.common.gzip.GZIPInInterceptor;\n-import org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.ext.self.keymaster.api.service.ConfParamService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class SelfKeymasterConfParamOps implements ConfParamOps {\n+public class SelfKeymasterConfParamOps extends SelfKeymasterOps implements ConfParamOps {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ConfParamOps.class);\n \n     private static final ObjectMapper MAPPER = new ObjectMapper();\n \n-    private final JAXRSClientFactoryBean clientFactory;\n-\n     public SelfKeymasterConfParamOps(final JAXRSClientFactoryBean clientFactory) {\n-        this.clientFactory = clientFactory;\n-    }\n-\n-    private ConfParamService client(final String domain) {\n-        ConfParamService service;\n-        synchronized (clientFactory) {\n-            clientFactory.setServiceClass(ConfParamService.class);\n-            clientFactory.setHeaders(Map.of(RESTHeaders.DOMAIN, domain));\n-            service = clientFactory.create(ConfParamService.class);\n-        }\n-\n-        Client client = WebClient.client(service);\n-        client.type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON);\n-\n-        ClientConfiguration config = WebClient.getConfig(client);\n-        config.getInInterceptors().add(new GZIPInInterceptor());\n-        config.getOutInterceptors().add(new GZIPOutInterceptor());\n-\n-        return service;\n+        super(clientFactory);\n     }\n \n     @Override\n     public Map<String, Object> list(final String domain) {\n-        return client(domain).list();\n+        return client(ConfParamService.class, Map.of(RESTHeaders.DOMAIN, domain)).list();\n     }\n \n     @Override\n     public <T> T get(final String domain, final String key, final T defaultValue, final Class<T> reference) {\n-        Response response = client(domain).get(key);\n+        Response response = client(ConfParamService.class, Map.of(RESTHeaders.DOMAIN, domain)).get(key);\n         if (response.getStatus() != Response.Status.OK.getStatusCode()) {\n             return defaultValue;\n         }\n@@ -96,15 +71,16 @@ public <T> void set(final String domain, final String key, final T value) {\n                 ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                 MAPPER.writeValue(baos, value);\n \n-                client(domain).set(key, new ByteArrayInputStream(baos.toByteArray()));\n+                client(ConfParamService.class, Map.of(RESTHeaders.DOMAIN, domain)).\n+                        set(key, new ByteArrayInputStream(baos.toByteArray()));\n             } catch (IOException e) {\n-                throw new IllegalArgumentException(\"Could not serialize \" + value, e);\n+                throw new KeymasterException(\"Could not serialize \" + value, e);\n             }\n         }\n     }\n \n     @Override\n     public void remove(final String domain, final String key) {\n-        client(domain).remove(key);\n+        client(ConfParamService.class, Map.of(RESTHeaders.DOMAIN, domain)).remove(key);\n     }\n }"},{"sha":"2b9f6e32dfd3c97b35092944851af84fc378771e","filename":"ext/self-keymaster/client/src/main/java/org/apache/syncope/common/keymaster/client/self/SelfKeymasterOps.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterOps.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.keymaster.client.self;\n+\n+import java.util.Map;\n+import javax.ws.rs.client.CompletionStageRxInvoker;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.jaxrs.client.Client;\n+import org.apache.cxf.jaxrs.client.ClientConfiguration;\n+import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.cxf.transport.common.gzip.GZIPInInterceptor;\n+import org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;\n+\n+abstract class SelfKeymasterOps {\n+\n+    private final JAXRSClientFactoryBean clientFactory;\n+\n+    protected SelfKeymasterOps(final JAXRSClientFactoryBean clientFactory) {\n+        this.clientFactory = clientFactory;\n+    }\n+\n+    protected <T> T client(final Class<T> serviceClass, final Map<String, String> headers) {\n+        T service;\n+        synchronized (clientFactory) {\n+            clientFactory.setServiceClass(serviceClass);\n+            clientFactory.setHeaders(headers);\n+            service = clientFactory.create(serviceClass);\n+        }\n+\n+        Client client = WebClient.client(service);\n+        client.type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON);\n+\n+        ClientConfiguration config = WebClient.getConfig(client);\n+        config.getInInterceptors().add(new GZIPInInterceptor());\n+        config.getOutInterceptors().add(new GZIPOutInterceptor());\n+\n+        return service;\n+    }\n+\n+    protected CompletionStageRxInvoker rx(final String path) {\n+        synchronized (clientFactory) {\n+            String original = clientFactory.getAddress();\n+            clientFactory.setAddress(StringUtils.removeEnd(original, \"/\") + StringUtils.prependIfMissing(path, \"/\"));\n+\n+            try {\n+                WebClient client = clientFactory.createWebClient().\n+                        type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON);\n+                return client.rx();\n+            } finally {\n+                clientFactory.setAddress(original);\n+            }\n+        }\n+    }\n+}"},{"sha":"06ec41fb12154b11f84b6a6187951c6eed6d0c32","filename":"ext/self-keymaster/client/src/main/java/org/apache/syncope/common/keymaster/client/self/SelfKeymasterServiceOps.java","status":"added","additions":157,"deletions":0,"changes":157,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterServiceOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterServiceOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterServiceOps.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.keymaster.client.self;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletionStage;\n+import javax.ws.rs.HttpMethod;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n+import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n+import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.ext.self.keymaster.api.service.NetworkServiceService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.backoff.BackOffExecution;\n+import org.springframework.util.backoff.ExponentialBackOff;\n+\n+public class SelfKeymasterServiceOps extends SelfKeymasterOps implements ServiceOps {\n+\n+    private enum Action {\n+        register,\n+        unregister\n+\n+    }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ServiceOps.class);\n+\n+    private final int maxRetries;\n+\n+    private final String path;\n+\n+    public SelfKeymasterServiceOps(final JAXRSClientFactoryBean clientFactory, final int maxRetries) {\n+        super(clientFactory);\n+        this.maxRetries = maxRetries;\n+        this.path = NetworkServiceService.class.getAnnotation(Path.class).value();\n+    }\n+\n+    @Override\n+    public List<NetworkService> list(final NetworkService.Type serviceType) {\n+        try {\n+            return client(NetworkServiceService.class, Collections.emptyMap()).list(serviceType);\n+        } catch (Exception e) {\n+            throw new KeymasterException(e);\n+        }\n+    }\n+\n+    @Override\n+    public NetworkService get(final NetworkService.Type serviceType) {\n+        try {\n+            return client(NetworkServiceService.class, Collections.emptyMap()).get(serviceType);\n+        } catch (Exception e) {\n+            throw new KeymasterException(e);\n+        }\n+    }\n+\n+    private void handleRetry(\n+            final NetworkService service,\n+            final Action action,\n+            final int retries,\n+            final BackOffExecution backOffExecution) {\n+\n+        try {\n+            if (retries > 0) {\n+                long nextBackoff = backOffExecution.nextBackOff();\n+\n+                LOG.debug(\"Still {} retries available for {}; waiting for {} ms\", retries, service, nextBackoff);\n+                try {\n+                    Thread.sleep(nextBackoff);\n+                } catch (InterruptedException e) {\n+                    // ignore\n+                }\n+\n+                retry(completionStage(action, service), service, action, retries - 1, backOffExecution);\n+            } else {\n+                LOG.debug(\"No more retries for {}\", service);\n+            }\n+        } catch (Throwable t) {\n+            LOG.error(\"Could not continue {} for {}, aborting\", action, service, t);\n+        }\n+    }\n+\n+    private void retry(\n+            final CompletionStage<Response> completionStage,\n+            final NetworkService service,\n+            final Action action,\n+            final int retries,\n+            final BackOffExecution backOffExecution) {\n+\n+        completionStage.whenComplete((response, throwable) -> {\n+            if (throwable == null) {\n+                LOG.info(\"{} successfully \" + action + \"ed\", service);\n+            } else {\n+                LOG.error(\"Could not \" + action + \" {}\", service, throwable);\n+\n+                handleRetry(service, action, retries, backOffExecution);\n+            }\n+        }).exceptionally(throwable -> {\n+            LOG.error(\"Could not \" + action + \" {}\", service, throwable);\n+\n+            handleRetry(service, action, retries, backOffExecution);\n+\n+            return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();\n+        });\n+    }\n+\n+    private CompletionStage<Response> completionStage(final Action action, final NetworkService service) {\n+        CompletionStage<Response> completionStage = null;\n+        switch (action) {\n+            case register:\n+                completionStage = rx(path).\n+                        post(Entity.entity(service, MediaType.APPLICATION_JSON));\n+                break;\n+\n+            case unregister:\n+                completionStage = rx(path).\n+                        method(HttpMethod.DELETE, Entity.entity(service, MediaType.APPLICATION_JSON));\n+                break;\n+\n+            default:\n+        }\n+\n+        return completionStage;\n+    }\n+\n+    @Override\n+    public void register(final NetworkService service) {\n+        retry(completionStage(Action.register, service),\n+                service, Action.register, maxRetries, new ExponentialBackOff(5000L, 1.5).start());\n+    }\n+\n+    @Override\n+    public void unregister(final NetworkService service) {\n+        retry(completionStage(Action.unregister, service),\n+                service, Action.unregister, maxRetries, new ExponentialBackOff(5000L, 1.5).start());\n+    }\n+}"},{"sha":"f88281c8a19eac8f01ca9b37014deb1fa41f7c8c","filename":"ext/self-keymaster/logic/src/main/java/org/apache/syncope/core/logic/NetworkServiceLogic.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNetworkServiceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNetworkServiceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNetworkServiceLogic.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.RandomUtils;\n+import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.ServiceDAO;\n+import org.apache.syncope.core.persistence.api.entity.SelfKeymasterEntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Service;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class NetworkServiceLogic extends AbstractTransactionalLogic<EntityTO> {\n+\n+    @Autowired\n+    private ServiceDAO serviceDAO;\n+\n+    @Autowired\n+    private SelfKeymasterEntityFactory entityFactory;\n+\n+    private NetworkService toNetworkService(\n+            final NetworkService.Type serviceType,\n+            final Service service) {\n+\n+        NetworkService ns = new NetworkService();\n+        ns.setType(serviceType);\n+        ns.setAddress(service.getAddress());\n+        return ns;\n+    }\n+\n+    @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n+    @Transactional(readOnly = true)\n+    public List<NetworkService> list(final NetworkService.Type serviceType) {\n+        return serviceDAO.findAll(serviceType).stream().\n+                map(service -> toNetworkService(serviceType, service)).collect(Collectors.toList());\n+    }\n+\n+    @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n+    @Transactional(readOnly = true)\n+    public NetworkService get(final NetworkService.Type serviceType) {\n+        List<NetworkService> list = list(serviceType);\n+        if (list.isEmpty()) {\n+            throw new NotFoundException(\"No registered services for type \" + serviceType);\n+        }\n+\n+        return list.size() == 1\n+                ? list.get(0)\n+                : list.get(RandomUtils.nextInt(0, list.size()));\n+    }\n+\n+    @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n+    public void register(final NetworkService networkService) {\n+        unregister(networkService);\n+\n+        Service service = entityFactory.newService();\n+        service.setType(networkService.getType());\n+        service.setAddress(networkService.getAddress());\n+        serviceDAO.save(service);\n+    }\n+\n+    @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n+    public void unregister(final NetworkService networkService) {\n+        serviceDAO.findAll(networkService.getType()).stream().\n+                filter(service -> service.getAddress().equals(networkService.getAddress())).\n+                findFirst().ifPresent(service -> serviceDAO.delete(service));\n+    }\n+\n+    @Override\n+    protected EntityTO resolveReference(final Method method, final Object... args) throws UnresolvedReferenceException {\n+        throw new UnsupportedOperationException();\n+    }\n+}"},{"sha":"554da0c508fe6f726980171fde43df20d7df6e8a","filename":"ext/self-keymaster/persistence-api/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fpersistence-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fpersistence-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fpersistence-api%2Fpom.xml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -43,6 +43,11 @@ under the License.\n       <artifactId>syncope-core-persistence-api</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.common.keymaster</groupId>\n+      <artifactId>syncope-common-keymaster-client-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n \n     <dependency>\n       <groupId>com.fasterxml.jackson.core</groupId>"},{"sha":"871ae7788109ac188609a5bc07343a8f81d722d1","filename":"ext/self-keymaster/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ServiceDAO.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FServiceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FServiceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FServiceDAO.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.core.persistence.api.entity.Service;\n+\n+public interface ServiceDAO extends DAO<Service> {\n+\n+    List<Service> findAll(NetworkService.Type serviceType);\n+\n+    Service save(Service service);\n+\n+    void delete(Service service);\n+}"},{"sha":"bd6c917103b2e63d8b1f1ca3a00606ba94d60f20","filename":"ext/self-keymaster/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SelfKeymasterEntityFactory.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSelfKeymasterEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSelfKeymasterEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSelfKeymasterEntityFactory.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -21,4 +21,6 @@\n public interface SelfKeymasterEntityFactory {\n \n     ConfParam newConfParam();\n+\n+    Service newService();\n }"},{"sha":"88c0f67cf8fc093ee3202cdf863b9916b69c7b3b","filename":"ext/self-keymaster/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Service.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FService.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+\n+public interface Service extends Entity {\n+\n+    NetworkService.Type getType();\n+\n+    void setType(NetworkService.Type type);\n+\n+    String getAddress();\n+\n+    void setAddress(String address);\n+}"},{"sha":"8d16f8b4d8bee3fd91b4ab67d2ffd198f040e8bb","filename":"ext/self-keymaster/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAServiceDAO.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAServiceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAServiceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAServiceDAO.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.core.persistence.api.dao.ServiceDAO;\n+import org.apache.syncope.core.persistence.api.entity.Service;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAService;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Repository\n+public class JPAServiceDAO extends AbstractDAO<Service> implements ServiceDAO {\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<Service> findAll(final NetworkService.Type serviceType) {\n+        TypedQuery<Service> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAService.class.getSimpleName() + \" e WHERE e.type=:serviceType\", Service.class);\n+        query.setParameter(\"serviceType\", serviceType);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public Service save(final Service service) {\n+        return entityManager().merge(service);\n+    }\n+\n+    @Override\n+    public void delete(final Service service) {\n+        entityManager().remove(service);\n+    }\n+}"},{"sha":"17206db6457019bfa31e239b667ca6b19a857c34","filename":"ext/self-keymaster/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASelfKeymasterEntityFactory.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASelfKeymasterEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASelfKeymasterEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASelfKeymasterEntityFactory.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -20,6 +20,8 @@\n \n import org.apache.syncope.core.persistence.api.entity.ConfParam;\n import org.apache.syncope.core.persistence.api.entity.SelfKeymasterEntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Service;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -29,4 +31,11 @@ public class JPASelfKeymasterEntityFactory implements SelfKeymasterEntityFactory\n     public ConfParam newConfParam() {\n         return new JPAConfParam();\n     }\n+\n+    @Override\n+    public Service newService() {\n+        JPAService service = new JPAService();\n+        service.setKey(SecureRandomUtils.generateRandomUUID().toString());\n+        return service;\n+    }\n }"},{"sha":"0b1c2d0cdc92f3d9d1b213e8347a88f204073ca4","filename":"ext/self-keymaster/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAService.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAService.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.core.persistence.api.entity.Service;\n+\n+@Entity\n+@Table(name = JPAService.TABLE)\n+public class JPAService extends AbstractGeneratedKeyEntity implements Service {\n+\n+    private static final long serialVersionUID = 8742750097008236475L;\n+\n+    public static final String TABLE = \"Service\";\n+\n+    @NotNull\n+    @Enumerated(EnumType.STRING)\n+    private NetworkService.Type type;\n+\n+    @NotNull\n+    private String address;\n+\n+    @Override\n+    public NetworkService.Type getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public void setType(final NetworkService.Type type) {\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    @Override\n+    public void setAddress(final String address) {\n+        this.address = address;\n+    }\n+}"},{"sha":"036787314d9aff44ea056f3006631203e55aae51","filename":"ext/self-keymaster/rest-api/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Frest-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Frest-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-api%2Fpom.xml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -43,6 +43,11 @@ under the License.\n       <artifactId>syncope-common-idrepo-rest-api</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.common.keymaster</groupId>\n+      <artifactId>syncope-common-keymaster-client-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n   </dependencies>\n \n   <build>"},{"sha":"66cf3785da561b8696ed4270cbf449912504187c","filename":"ext/self-keymaster/rest-api/src/main/java/org/apache/syncope/ext/self/keymaster/api/service/NetworkServiceService.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fapi%2Fservice%2FNetworkServiceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fapi%2Fservice%2FNetworkServiceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fapi%2Fservice%2FNetworkServiceService.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.self.keymaster.api.service;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+\n+/**\n+ * REST operations for Self Keymaster's service discovery.\n+ */\n+@Path(\"networkServices\")\n+public interface NetworkServiceService extends Serializable {\n+\n+    @GET\n+    @Path(\"{serviceType}\")\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    List<NetworkService> list(@NotNull @PathParam(\"serviceType\") NetworkService.Type serviceType);\n+\n+    @GET\n+    @Path(\"{serviceType}/get\")\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    NetworkService get(@NotNull @PathParam(\"serviceType\") NetworkService.Type serviceType);\n+\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_JSON })\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    CompletableFuture<Response> register(@NotNull NetworkService networkService);\n+\n+    @DELETE\n+    @Consumes({ MediaType.APPLICATION_JSON })\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    CompletableFuture<Response> unregister(@NotNull NetworkService networkService);\n+}"},{"sha":"0066010a8b42247543adddb72ec196b581558894","filename":"ext/self-keymaster/rest-cxf/pom.xml","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Frest-cxf%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Frest-cxf%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fpom.xml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -52,10 +52,6 @@ under the License.\n       <groupId>org.apache.cxf</groupId>\n       <artifactId>cxf-rt-rs-service-description</artifactId>\n     </dependency>\n-    <dependency>\n-      <groupId>org.apache.cxf</groupId>\n-      <artifactId>cxf-rt-rs-client</artifactId>\n-    </dependency>\n \n     <dependency>\n       <groupId>com.fasterxml.jackson.jaxrs</groupId>"},{"sha":"ca8709c3757d558d270743aa5ab4d4a754848bd2","filename":"ext/self-keymaster/rest-cxf/src/main/java/org/apache/syncope/ext/self/keymaster/cxf/SelfKeymasterContext.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2FSelfKeymasterContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2FSelfKeymasterContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2FSelfKeymasterContext.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -31,9 +31,11 @@\n import org.apache.cxf.transport.common.gzip.GZIPInInterceptor;\n import org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.core.spring.security.UsernamePasswordAuthenticationProvider;\n import org.apache.syncope.core.spring.security.WebSecurityContext;\n import org.apache.syncope.ext.self.keymaster.cxf.client.SelfKeymasterInternalConfParamOps;\n+import org.apache.syncope.ext.self.keymaster.cxf.client.SelfKeymasterInternalServiceOps;\n import org.apache.syncope.ext.self.keymaster.cxf.security.SelfKeymasterUsernamePasswordAuthenticationProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n@@ -122,4 +124,9 @@ public UsernamePasswordAuthenticationProvider usernamePasswordAuthenticationProv\n     public ConfParamOps internalConfParamOps() {\n         return new SelfKeymasterInternalConfParamOps();\n     }\n+\n+    @Bean\n+    public ServiceOps internalServiceOps() {\n+        return new SelfKeymasterInternalServiceOps();\n+    }\n }"},{"sha":"815b315452b4ab68a7145f9b395f683186feb43e","filename":"ext/self-keymaster/rest-cxf/src/main/java/org/apache/syncope/ext/self/keymaster/cxf/client/SelfKeymasterInternalServiceOps.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalServiceOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalServiceOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalServiceOps.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.self.keymaster.cxf.client;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n+import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.core.logic.NetworkServiceLogic;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+\n+public class SelfKeymasterInternalServiceOps implements ServiceOps {\n+\n+    @Autowired\n+    private NetworkServiceLogic logic;\n+\n+    @Value(\"${keymaster.username}\")\n+    private String keymasterUser;\n+\n+    @Override\n+    public List<NetworkService> list(final NetworkService.Type serviceType) {\n+        return AuthContextUtils.callAs(\n+                SyncopeConstants.MASTER_DOMAIN,\n+                keymasterUser,\n+                Collections.emptyList(),\n+                () -> logic.list(serviceType));\n+    }\n+\n+    @Override\n+    public NetworkService get(final NetworkService.Type serviceType) {\n+        try {\n+            return AuthContextUtils.callAs(\n+                    SyncopeConstants.MASTER_DOMAIN,\n+                    keymasterUser,\n+                    Collections.emptyList(),\n+                    () -> logic.get(serviceType));\n+        } catch (Exception e) {\n+            throw new KeymasterException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void register(final NetworkService service) {\n+        AuthContextUtils.callAs(\n+                SyncopeConstants.MASTER_DOMAIN,\n+                keymasterUser,\n+                Collections.emptyList(),\n+                () -> {\n+                    logic.register(service);\n+                    return null;\n+                });\n+    }\n+\n+    @Override\n+    public void unregister(final NetworkService service) {\n+        AuthContextUtils.callAs(\n+                SyncopeConstants.MASTER_DOMAIN,\n+                keymasterUser,\n+                Collections.emptyList(),\n+                () -> {\n+                    logic.unregister(service);\n+                    return null;\n+                });\n+    }\n+}"},{"sha":"ded5f9de8498d74cf709a10b12c16e8681c91419","filename":"ext/self-keymaster/rest-cxf/src/main/java/org/apache/syncope/ext/self/keymaster/cxf/service/NetworkServiceServiceImpl.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fservice%2FNetworkServiceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fservice%2FNetworkServiceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fservice%2FNetworkServiceServiceImpl.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.self.keymaster.cxf.service;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.core.logic.NetworkServiceLogic;\n+import org.apache.syncope.ext.self.keymaster.api.service.NetworkServiceService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class NetworkServiceServiceImpl implements NetworkServiceService {\n+\n+    private static final long serialVersionUID = 4160287655489345100L;\n+\n+    @Autowired\n+    private NetworkServiceLogic logic;\n+\n+    @Override\n+    public List<NetworkService> list(final NetworkService.Type serviceType) {\n+        return logic.list(serviceType);\n+    }\n+\n+    @Override\n+    public NetworkService get(final NetworkService.Type serviceType) {\n+        return logic.get(serviceType);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Response> register(final NetworkService networkService) {\n+        return CompletableFuture.supplyAsync(() -> {\n+            logic.register(networkService);\n+            return Response.noContent().build();\n+        });\n+    }\n+\n+    @Override\n+    public CompletableFuture<Response> unregister(final NetworkService networkService) {\n+        return CompletableFuture.supplyAsync(() -> {\n+            logic.unregister(networkService);\n+            return Response.noContent().build();\n+        });\n+    }\n+}"},{"sha":"398cc60efa3b57618201c2777c0a4d86ef6c7efb","filename":"fit/console-reference/pom.xml","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fconsole-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fconsole-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fpom.xml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -61,12 +61,6 @@ under the License.\n       <version>${project.version}</version>\n     </dependency>\n \n-    <dependency>\n-      <groupId>org.apache.syncope.ext.flowable</groupId>\n-      <artifactId>syncope-ext-flowable-client-enduser</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-\n     <dependency>\n       <groupId>org.apache.syncope.ext.camel</groupId>\n       <artifactId>syncope-ext-camel-client-console</artifactId>"},{"sha":"07f1ea4b789596394837ad30fd99eb2ae9e1c55e","filename":"fit/console-reference/src/main/resources/application-embedded.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fapplication-embedded.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fapplication-embedded.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fapplication-embedded.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -14,5 +14,7 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n+service.discovery.address=http://localhost:9080/syncope-console/\n+\n spring.devtools.livereload.enabled=false\n spring.devtools.restart.enabled=false"},{"sha":"a8c7e89c6faebc4d009da956a46e3ebe9f19e68d","filename":"fit/console-reference/src/main/resources/console.properties","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fconsole.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -21,10 +21,6 @@ site=${project.parent.url}\n anonymousUser=${anonymousUser}\n anonymousKey=${anonymousKey}\n \n-scheme=http\n-host=localhost\n-port=9080\n-rootPath=/syncope/rest/\n useGZIPCompression=true\n maxUploadFileSizeMB=5\n "},{"sha":"7e5b0d5f84a633ea236140ee503baaa1bd9d8dcf","filename":"fit/console-reference/src/main/resources/oidcclient-agent.properties","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -19,8 +19,4 @@ conf.directory=${conf.directory}\n anonymousUser=${anonymousUser}\n anonymousKey=${anonymousKey}\n \n-scheme=http\n-host=localhost\n-port=9080\n-rootPath=/syncope/rest/\n useGZIPCompression=true"},{"sha":"7e5b0d5f84a633ea236140ee503baaa1bd9d8dcf","filename":"fit/console-reference/src/main/resources/saml2sp-agent.properties","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -19,8 +19,4 @@ conf.directory=${conf.directory}\n anonymousUser=${anonymousUser}\n anonymousKey=${anonymousKey}\n \n-scheme=http\n-host=localhost\n-port=9080\n-rootPath=/syncope/rest/\n useGZIPCompression=true"},{"sha":"574e51b5fc7d3a68abbb4c52a48a9fa21c83b36b","filename":"fit/core-reference/pom.xml","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -373,6 +373,13 @@ under the License.\n         <directory>src/main/resources</directory>\n         <filtering>true</filtering>\n       </resource>\n+      <resource>\n+        <directory>${basedir}/../../core/starter/src/main/resources</directory>\n+        <includes>\n+          <include>application.properties</include>\n+        </includes>\n+        <filtering>true</filtering>\n+      </resource>\n       <resource>\n         <directory>${basedir}/../../core/persistence-jpa/src/main/resources</directory>\n         <includes>"},{"sha":"f3779425a374c39339e52702ccece73f2630869a","filename":"fit/core-reference/src/main/resources/application-embedded.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fapplication-embedded.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fapplication-embedded.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fapplication-embedded.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -14,6 +14,8 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n+service.discovery.address=http://localhost:9080/syncope/rest/\n+\n spring.devtools.livereload.enabled=false\n spring.devtools.restart.enabled=false\n "},{"sha":"ca4f6495880f4545338dba25c43a782179883ca8","filename":"fit/core-reference/src/main/resources/application-wildfly.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fapplication-wildfly.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fapplication-wildfly.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fapplication-wildfly.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -14,6 +14,8 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n+service.discovery.address=http://localhost:9080/syncope/rest/\n+\n openjpaMetaDataFactory=jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly15x/deployments/syncope.war/WEB-INF/lib/syncope-core-persistence-jpa-${syncope.version}.jar, Resources=##orm##)\n javadocPaths=/WEB-INF/lib/syncope-common-idrepo-rest-api-${syncope.version}-javadoc.jar,\\\n /WEB-INF/lib/syncope-common-idm-rest-api-${syncope.version}-javadoc.jar"},{"sha":"0d0002b6c617a34b9274dafa9891144c80293cc1","filename":"fit/core-reference/src/main/resources/myjson/provisioning.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fprovisioning.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -16,8 +16,8 @@\n # under the License.\n asyncConnectorFacadeExecutor.poolSize=10\n \n-# see http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-task-namespace-executor\n-propagationTaskExecutorAsyncExecutor.poolSize=5-25\n+propagationTaskExecutorAsyncExecutor.corePoolSize=5\n+propagationTaskExecutorAsyncExecutor.maxPoolSize=25\n propagationTaskExecutorAsyncExecutor.queueCapacity=100\n propagationTaskExecutor=org.apache.syncope.core.provisioning.java.propagation.PriorityPropagationTaskExecutor\n "},{"sha":"51385e0e3923d0dfb55a89d678c5f654a199cfdb","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -49,6 +49,7 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.keymaster.client.self.SelfKeymasterClientContext;\n import org.apache.syncope.common.keymaster.client.zookeper.ZookeeperKeymasterClientContext;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n@@ -362,6 +363,9 @@ public static void restSetup() {\n     @Autowired\n     protected ConfParamOps confParamOps;\n \n+    @Autowired\n+    protected ServiceOps serviceOps;\n+\n     @Autowired\n     protected DataSource testDataSource;\n "},{"sha":"735a46694adfe26cb90098d36cb4d9109d8f6be7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/KeymasterITCase.java","status":"modified","additions":70,"deletions":5,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -22,28 +22,32 @@\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n import java.util.UUID;\n+import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n+import org.apache.syncope.common.keymaster.client.api.NetworkService;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n \n public class KeymasterITCase extends AbstractITCase {\n \n     @Test\n-    public void list() {\n+    public void confParamList() {\n         Map<String, Object> confParams = confParamOps.list(SyncopeConstants.MASTER_DOMAIN);\n         assertNotNull(confParams);\n         assertFalse(confParams.isEmpty());\n     }\n \n     @Test\n-    public void get() {\n+    public void confParamGet() {\n         String stringValue = confParamOps.get(\n                 SyncopeConstants.MASTER_DOMAIN, \"password.cipher.algorithm\", null, String.class);\n         assertNotNull(stringValue);\n@@ -63,14 +67,14 @@ public void get() {\n                 Arrays.asList(confParamOps.get(\n                         SyncopeConstants.MASTER_DOMAIN, \"authentication.attributes\", null, String[].class));\n         assertNotNull(stringValues);\n-        ArrayList<String> actualStringValues = new ArrayList<>();\n+        List<String> actualStringValues = new ArrayList<>();\n         actualStringValues.add(\"username\");\n         actualStringValues.add(\"userId\");\n         assertEquals(actualStringValues, stringValues);\n     }\n \n     @Test\n-    public void setGetRemove() {\n+    public void confParamSetGetRemove() {\n         String key = UUID.randomUUID().toString();\n \n         String stringValue = \"stringValue\";\n@@ -98,7 +102,7 @@ public void setGetRemove() {\n         Boolean actualBooleanValue = confParamOps.get(SyncopeConstants.MASTER_DOMAIN, key, null, Boolean.class);\n         assertEquals(booleanValue, actualBooleanValue);\n \n-        ArrayList<String> stringValues = new ArrayList<>();\n+        List<String> stringValues = new ArrayList<>();\n         stringValues.add(\"stringValue1\");\n         stringValues.add(\"stringValue2\");\n         confParamOps.set(SyncopeConstants.MASTER_DOMAIN, key, stringValues);\n@@ -112,4 +116,65 @@ public void setGetRemove() {\n                 \"defaultValue\",\n                 confParamOps.get(SyncopeConstants.MASTER_DOMAIN, key, \"defaultValue\", String.class));\n     }\n+\n+    @Test\n+    public void serviceList() {\n+        List<NetworkService> services = serviceOps.list(NetworkService.Type.CORE);\n+        assertFalse(services.isEmpty());\n+        assertEquals(1, services.size());\n+\n+        services = serviceOps.list(NetworkService.Type.SRA);\n+        assertTrue(services.isEmpty());\n+\n+        services = serviceOps.list(NetworkService.Type.WA);\n+        assertTrue(services.isEmpty());\n+    }\n+\n+    @Test\n+    public void serviceRun() {\n+        List<NetworkService> list = serviceOps.list(NetworkService.Type.SRA);\n+        assertTrue(list.isEmpty());\n+\n+        NetworkService sra1 = new NetworkService();\n+        sra1.setType(NetworkService.Type.SRA);\n+        sra1.setAddress(\"http://localhost:9080/syncope-sra\");\n+        serviceOps.register(sra1);\n+\n+        try {\n+            Thread.sleep(3000);\n+        } catch (InterruptedException e) {\n+            // ignore\n+        }\n+\n+        list = serviceOps.list(NetworkService.Type.SRA);\n+        assertFalse(list.isEmpty());\n+        assertEquals(1, list.size());\n+        assertEquals(sra1, list.get(0));\n+\n+        assertEquals(sra1, serviceOps.get(NetworkService.Type.SRA));\n+\n+        NetworkService sra2 = new NetworkService();\n+        sra2.setType(NetworkService.Type.SRA);\n+        sra2.setAddress(\"http://localhost:9080/syncope-sra\");\n+        assertEquals(sra1, sra2);\n+        serviceOps.register(sra2);\n+\n+        list = serviceOps.list(NetworkService.Type.SRA);\n+        assertFalse(list.isEmpty());\n+        assertEquals(1, list.size());\n+        assertEquals(sra1, list.get(0));\n+\n+        assertEquals(sra1, serviceOps.get(NetworkService.Type.SRA));\n+\n+        serviceOps.unregister(sra1);\n+        list = serviceOps.list(NetworkService.Type.SRA);\n+        assertTrue(list.isEmpty());\n+\n+        try {\n+            serviceOps.get(NetworkService.Type.SRA);\n+            fail();\n+        } catch (KeymasterException e) {\n+            assertNotNull(e);\n+        }\n+    }\n }"},{"sha":"6cd6c3579a3f2bbebb65634b2de68d7e5623ef42","filename":"fit/core-reference/src/test/resources/console.properties","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fconsole.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fconsole.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fconsole.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -21,10 +21,6 @@ site=${project.parent.url}\n anonymousUser=${anonymousUser}\n anonymousKey=${anonymousKey}\n \n-scheme=http\n-host=localhost\n-port=9080\n-rootPath=/syncope/rest/\n useGZIPCompression=true\n maxUploadFileSizeMB=5\n "},{"sha":"ff9f416c6ec0d34fad9917b78776008638ea1002","filename":"fit/core-reference/src/test/resources/enduser.properties","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fenduser.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fenduser.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fenduser.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -23,10 +23,5 @@ anonymousKey=${anonymousKey}\n adminUser=${adminUser}\n useGZIPCompression=true\n \n-scheme=http\n-host=localhost\n-port=9080\n-rootPath=/syncope/rest/\n-\n captcha=false\n xsrf=false"},{"sha":"e420cad85e69de6561501f1799f89b450079e618","filename":"fit/enduser-reference/src/main/resources/application-embedded.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Fapplication-embedded.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Fapplication-embedded.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Fapplication-embedded.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -14,5 +14,7 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n+service.discovery.address=http://localhost:9080/syncope-enduser/\n+\n spring.devtools.livereload.enabled=false\n spring.devtools.restart.enabled=false"},{"sha":"dfd8b8dbde6dbe26297ea1605a40516b05e0f4ea","filename":"fit/enduser-reference/src/main/resources/application.properties","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4889da6f8fe620665720b23ce0148f0d7179e521/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4889da6f8fe620665720b23ce0148f0d7179e521/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=4889da6f8fe620665720b23ce0148f0d7179e521","patch":"@@ -1,25 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-spring.application.name=Apache Syncope ${syncope.version} Enduser\n-spring.groovy.template.check-template-location=false\n-spring.main.banner-mode=log\n-\n-spring.http.encoding.charset=UTF-8\n-spring.http.encoding.enabled=true\n-spring.http.encoding.force=true\n-\n-server.servlet.contextPath=/syncope-enduser"},{"sha":"6c3e80915b099991ba9ac9fb9071b51e07ccf91d","filename":"fit/enduser-reference/src/main/resources/enduser.properties","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Fenduser.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Fenduser.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Fenduser.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -24,10 +24,5 @@ adminUser=${adminUser}\n useGZIPCompression=true\n maxUploadFileSizeMB=5\n \n-scheme=http\n-host=localhost\n-port=9080\n-rootPath=/syncope/rest/\n-\n captcha=true\n xsrf=true"},{"sha":"7e5b0d5f84a633ea236140ee503baaa1bd9d8dcf","filename":"fit/enduser-reference/src/main/resources/oidcclient-agent.properties","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -19,8 +19,4 @@ conf.directory=${conf.directory}\n anonymousUser=${anonymousUser}\n anonymousKey=${anonymousKey}\n \n-scheme=http\n-host=localhost\n-port=9080\n-rootPath=/syncope/rest/\n useGZIPCompression=true"},{"sha":"7e5b0d5f84a633ea236140ee503baaa1bd9d8dcf","filename":"fit/enduser-reference/src/main/resources/saml2sp-agent.properties","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -19,8 +19,4 @@ conf.directory=${conf.directory}\n anonymousUser=${anonymousUser}\n anonymousKey=${anonymousKey}\n \n-scheme=http\n-host=localhost\n-port=9080\n-rootPath=/syncope/rest/\n useGZIPCompression=true"},{"sha":"926f5880a37d7edfe139370ba95413ed59c72227","filename":"fit/enduser-reference/src/test/resources/enduser.properties","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fenduser.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fenduser.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fenduser.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -23,10 +23,5 @@ anonymousKey=${anonymousKey}\n adminUser=${adminUser}\n useGZIPCompression=true\n \n-scheme=http\n-host=localhost\n-port=9080\n-rootPath=/syncope/rest/\n-\n captcha=true\n xsrf=false"},{"sha":"9a59100ff848a17f896798dc697abb221981b02e","filename":"pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -522,9 +522,9 @@ under the License.\n     <docker.mariadb.version>10.4</docker.mariadb.version>\n \n     <jdbc.postgresql.version>42.2.5</jdbc.postgresql.version>\n-    <jdbc.mysql.version>8.0.15</jdbc.mysql.version>\n+    <jdbc.mysql.version>8.0.16</jdbc.mysql.version>\n     <jdbc.mariadb.version>2.4.1</jdbc.mariadb.version>\n-    <jdbc.mssql.version>7.2.1.jre</jdbc.mssql.version>\n+    <jdbc.mssql.version>7.2.2.jre</jdbc.mssql.version>\n \n     <adminUser>admin</adminUser>\n     <anonymousUser>anonymous</anonymousUser>"},{"sha":"6789cfd686bd3c7954233c58f2e75fff1b85f01d","filename":"sra/src/main/resources/sra.properties","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/sra%2Fsrc%2Fmain%2Fresources%2Fsra.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5/sra%2Fsrc%2Fmain%2Fresources%2Fsra.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fresources%2Fsra.properties?ref=1940edb89c1e4a839f6bd2c2e82c690aae8ab3b5","patch":"@@ -19,8 +19,4 @@ sra.directory=${conf.directory}\n anonymousUser=${anonymousUser}\n anonymousKey=${anonymousKey}\n \n-scheme=http\n-host=localhost\n-port=8080\n-rootPath=/syncope/rest/\n useGZIPCompression=true"}]}