{"sha":"00988759750f53f6737ef7d50e7faf63192257fa","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjAwOTg4NzU5NzUwZjUzZjY3MzdlZjdkNTBlN2ZhZjYzMTkyMjU3ZmE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-09-08T12:12:34Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-09-08T12:12:34Z"},"message":"[SYNCOPE-665] Implementation completed","tree":{"sha":"bac7d08dab5508262c3a085d97d63b8e2c681679","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/bac7d08dab5508262c3a085d97d63b8e2c681679"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/00988759750f53f6737ef7d50e7faf63192257fa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/00988759750f53f6737ef7d50e7faf63192257fa","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/00988759750f53f6737ef7d50e7faf63192257fa","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/00988759750f53f6737ef7d50e7faf63192257fa/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9ab997b3950629d449f2ed20805ffce3c9ce972a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9ab997b3950629d449f2ed20805ffce3c9ce972a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9ab997b3950629d449f2ed20805ffce3c9ce972a"}],"stats":{"total":1810,"additions":1185,"deletions":625},"files":[{"sha":"4f5e8eba051f9f27c8db2ec11e561b3d81663a67","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ConnectorModal.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import static org.apache.wicket.Component.ENABLE;\n-\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n@@ -317,8 +315,8 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n         connectorPropForm.add(check);\n \n         // form - third tab (capabilities)\n-        final IModel<List<ConnectorCapability>> capabilities\n-                = new LoadableDetachableModel<List<ConnectorCapability>>() {\n+        final IModel<List<ConnectorCapability>> capabilities =\n+                 new LoadableDetachableModel<List<ConnectorCapability>>() {\n \n                     private static final long serialVersionUID = 5275935387613157437L;\n \n@@ -327,8 +325,8 @@ protected List<ConnectorCapability> load() {\n                         return Arrays.asList(ConnectorCapability.values());\n                     }\n                 };\n-        CheckBoxMultipleChoiceFieldPanel<ConnectorCapability> capabilitiesPalette\n-                = new CheckBoxMultipleChoiceFieldPanel<>(\n+        CheckBoxMultipleChoiceFieldPanel<ConnectorCapability> capabilitiesPalette =\n+                 new CheckBoxMultipleChoiceFieldPanel<>(\n                         \"capabilitiesPalette\",\n                         new PropertyModel<List<ConnectorCapability>>(this, \"selectedCapabilities\"), capabilities);\n "},{"sha":"54b22b8230c6c0ebf862f81503b3fc5262629ed6","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceModal.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import static org.apache.wicket.Component.ENABLE;\n-\n import java.util.ArrayList;\n import java.util.Collection;\n import org.apache.commons.collections4.CollectionUtils;"},{"sha":"1b847f983812a84463034f757cb00adc11cdf60b","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/WebSocketBehavior.java","status":"modified","additions":14,"deletions":15,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FWebSocketBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FWebSocketBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FWebSocketBehavior.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -18,11 +18,6 @@\n  */\n package org.apache.syncope.client.console.topology;\n \n-import static org.apache.syncope.client.console.topology.TopologyNode.Status.FAILURE;\n-import static org.apache.syncope.client.console.topology.TopologyNode.Status.REACHABLE;\n-import static org.apache.syncope.client.console.topology.TopologyNode.Status.UNKNOWN;\n-import static org.apache.syncope.client.console.topology.TopologyNode.Status.UNREACHABLE;\n-\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.IOException;\n@@ -46,15 +41,15 @@\n \n public class WebSocketBehavior extends org.apache.wicket.protocol.ws.api.WebSocketBehavior {\n \n-    private static final long serialVersionUID = 1L;\n-\n     protected static final Logger LOG = LoggerFactory.getLogger(WebSocketBehavior.class);\n \n-    private final Map<String, String> resources = new HashMap<String, String>();\n+    private static final long serialVersionUID = -1653665542635275551L;\n+\n+    private final Map<String, String> resources = new HashMap<>();\n \n     private final Set<String> runningResCheck = new HashSet<>();\n \n-    private final Map<Long, String> connectors = new HashMap<Long, String>();\n+    private final Map<Long, String> connectors = new HashMap<>();\n \n     private final Set<Long> runningConnCheck = new HashSet<>();\n \n@@ -77,7 +72,8 @@ protected void onMessage(final WebSocketRequestHandler handler, final TextMessag\n                     if (connectors.containsKey(ckey)) {\n                         handler.push(connectors.get(ckey));\n                     } else {\n-                        handler.push(String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", UNKNOWN, ckey));\n+                        handler.push(String.format(\n+                                \"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", TopologyNode.Status.UNKNOWN, ckey));\n                     }\n \n                     synchronized (runningConnCheck) {\n@@ -97,7 +93,8 @@ protected void onMessage(final WebSocketRequestHandler handler, final TextMessag\n                     if (resources.containsKey(rkey)) {\n                         handler.push(resources.get(rkey));\n                     } else {\n-                        handler.push(String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", UNKNOWN, rkey));\n+                        handler.push(String.format(\n+                                \"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", TopologyNode.Status.UNKNOWN, rkey));\n                     }\n \n                     synchronized (runningResCheck) {\n@@ -151,10 +148,11 @@ public void run() {\n                 try {\n                     final ConnInstanceTO connector = connectorRestClient.read(key);\n                     res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n-                            connectorRestClient.check(connector) ? REACHABLE : UNREACHABLE, key);\n+                            connectorRestClient.check(connector)\n+                                    ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);\n                 } catch (Exception e) {\n                     LOG.warn(\"Error checking connection for {}\", key, e);\n-                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", FAILURE, key);\n+                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", TopologyNode.Status.FAILURE, key);\n                 }\n \n                 synchronized (runningConnCheck) {\n@@ -191,10 +189,11 @@ public void run() {\n                 try {\n                     final ResourceTO resource = resourceRestClient.read(key);\n                     res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n-                            connectorRestClient.check(resource) ? REACHABLE : UNREACHABLE, key);\n+                            connectorRestClient.check(resource)\n+                                    ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);\n                 } catch (Exception e) {\n                     LOG.warn(\"Error checking connection for {}\", key, e);\n-                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", FAILURE, key);\n+                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", TopologyNode.Status.FAILURE, key);\n                 }\n \n                 synchronized (runningResCheck) {"},{"sha":"0c037984a6789b3f125f6df9447a003c68444580","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RealmTO.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -18,10 +18,20 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n import javax.ws.rs.PathParam;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n \n @XmlRootElement(name = \"realm\")\n @XmlType\n@@ -41,6 +51,12 @@ public class RealmTO extends AbstractBaseBean {\n \n     private Long passwordPolicy;\n \n+    private final Set<String> actionsClassNames = new HashSet<>();\n+\n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    @JsonIgnore\n+    private final Map<String, AnyTO> templates = new HashMap<>();\n+\n     public long getKey() {\n         return key;\n     }\n@@ -90,4 +106,16 @@ public void setPasswordPolicy(final Long passwordPolicy) {\n         this.passwordPolicy = passwordPolicy;\n     }\n \n+    @XmlElementWrapper(name = \"actionsClassNames\")\n+    @XmlElement(name = \"actionsClassName\")\n+    @JsonProperty(\"actionsClassNames\")\n+    public Set<String> getActionsClassNames() {\n+        return actionsClassNames;\n+    }\n+\n+    @JsonProperty\n+    public Map<String, AnyTO> getTemplates() {\n+        return templates;\n+    }\n+\n }"},{"sha":"638f32f17cb4b042744e65344a822050d3d2519b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SyncopeTO.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -43,8 +43,6 @@ public class SyncopeTO extends AbstractBaseBean {\n \n     private final List<String> connIdLocations = new ArrayList<>();\n \n-    private String anyTransformer;\n-\n     private String anyObjectWorkflowAdapter;\n \n     private String userWorkflowAdapter;\n@@ -69,6 +67,8 @@ public class SyncopeTO extends AbstractBaseBean {\n \n     private final List<String> taskJobs = new ArrayList<>();\n \n+    private final List<String> logicActions = new ArrayList<>();\n+\n     private final List<String> propagationActions = new ArrayList<>();\n \n     private final List<String> syncActions = new ArrayList<>();\n@@ -106,10 +106,6 @@ public List<String> getConnIdLocations() {\n         return connIdLocations;\n     }\n \n-    public String getAnyTransformer() {\n-        return anyTransformer;\n-    }\n-\n     public String getAnyObjectWorkflowAdapter() {\n         return anyObjectWorkflowAdapter;\n     }\n@@ -174,6 +170,13 @@ public List<String> getTaskJobs() {\n         return taskJobs;\n     }\n \n+    @XmlElementWrapper(name = \"logicActions\")\n+    @XmlElement(name = \"logicAction\")\n+    @JsonProperty(\"logicActions\")\n+    public List<String> getLogicActions() {\n+        return logicActions;\n+    }\n+\n     @XmlElementWrapper(name = \"propagationActions\")\n     @XmlElement(name = \"propagationAction\")\n     @JsonProperty(\"propagationActions\")\n@@ -239,10 +242,6 @@ public void setPwdResetRequiringSecurityQuestions(final boolean pwdResetRequirin\n         this.pwdResetRequiringSecurityQuestions = pwdResetRequiringSecurityQuestions;\n     }\n \n-    public void setAnyTransformer(final String anyTransformer) {\n-        this.anyTransformer = anyTransformer;\n-    }\n-\n     public void setAnyObjectWorkflowAdapter(final String anyObjectWorkflowAdapter) {\n         this.anyObjectWorkflowAdapter = anyObjectWorkflowAdapter;\n     }"},{"sha":"83245254a56e7cefdfc95e7773c088aca0ecaca9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/EntityViolationType.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -41,7 +41,7 @@ public enum EntityViolationType {\n     InvalidSchemaEnum(\"org.apache.syncope.core.persistence.validation.schema.enum\"),\n     InvalidSchemaMultivalueUnique(\"org.apache.syncope.core.persistence.validation.schema.multivalueUnique\"),\n     InvalidSchedTask(\"org.apache.syncope.core.persistence.validation.schedtask\"),\n-    InvalidSyncTask(\"org.apache.syncope.core.persistence.validation.synctask\"),\n+    InvalidProvisioningTask(\"org.apache.syncope.core.persistence.validation.synctask\"),\n     InvalidPlainSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.plainSchema\"),\n     InvalidDerSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.derSchema\"),\n     InvalidVirSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.virSchema\"),"},{"sha":"cd40a6b24f81da437154cb8e600873c2874f9d3b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":150,"deletions":0,"changes":150,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -18,23 +18,173 @@\n  */\n package org.apache.syncope.core.logic;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.mod.AnyMod;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.misc.RealmUtils;\n+import org.apache.syncope.core.misc.TemplateUtils;\n import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.provisioning.api.LogicActions;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n \n public abstract class AbstractAnyLogic<TO extends AnyTO, MOD extends AnyMod>\n         extends AbstractResourceAssociator<TO> {\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    private TemplateUtils templateUtils;\n+\n+    private List<LogicActions> getActions(final Realm realm) {\n+        List<LogicActions> actions = new ArrayList<>();\n+\n+        for (String className : realm.getActionsClassNames()) {\n+            try {\n+                Class<?> actionsClass = Class.forName(className);\n+                LogicActions logicActions = (LogicActions) ApplicationContextProvider.getBeanFactory().\n+                        createBean(actionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n+\n+                actions.add(logicActions);\n+            } catch (Exception e) {\n+                LOG.warn(\"Class '{}' not found\", className, e);\n+            }\n+        }\n+\n+        return actions;\n+    }\n+\n+    protected Pair<TO, List<LogicActions>> beforeCreate(final TO input) {\n+        Realm realm = realmDAO.find(input.getRealm());\n+        if (realm == null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n+            sce.getElements().add(input.getRealm());\n+            throw sce;\n+        }\n+\n+        AnyType anyType = input instanceof UserTO\n+                ? anyTypeDAO.findUser()\n+                : input instanceof GroupTO\n+                        ? anyTypeDAO.findGroup()\n+                        : anyTypeDAO.find(input.getType());\n+        if (anyType == null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidAnyType);\n+            sce.getElements().add(input.getType());\n+            throw sce;\n+        }\n+\n+        TO any = input;\n+\n+        templateUtils.apply(any, realm.getTemplate(anyType));\n+\n+        List<LogicActions> actions = getActions(realm);\n+        for (LogicActions action : actions) {\n+            any = action.beforeCreate(any);\n+        }\n+\n+        LOG.debug(\"Input: {}\\nOutput: {}\\n\", input, any);\n+\n+        return ImmutablePair.of(any, actions);\n+    }\n+\n+    protected TO afterCreate(final TO input, final List<LogicActions> actions) {\n+        TO any = input;\n+\n+        for (LogicActions action : actions) {\n+            any = action.afterCreate(any);\n+        }\n+\n+        return any;\n+    }\n+\n+    protected Pair<MOD, List<LogicActions>> beforeUpdate(final MOD input, final String realmPath) {\n+        if (StringUtils.isBlank(input.getRealm())) {\n+            input.setRealm(realmPath);\n+        }\n+        Realm realm = realmDAO.find(input.getRealm());\n+        if (realm == null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n+            sce.getElements().add(input.getRealm());\n+            throw sce;\n+        }\n+\n+        MOD mod = input;\n+\n+        List<LogicActions> actions = getActions(realm);\n+        for (LogicActions action : actions) {\n+            mod = action.beforeUpdate(mod);\n+        }\n+\n+        LOG.debug(\"Input: {}\\nOutput: {}\\n\", input, mod);\n+\n+        return ImmutablePair.of(mod, actions);\n+    }\n+\n+    protected TO afterUpdate(final TO input, final List<LogicActions> actions) {\n+        TO any = input;\n+\n+        for (LogicActions action : actions) {\n+            any = action.afterUpdate(any);\n+        }\n+\n+        return any;\n+    }\n+\n+    protected Pair<TO, List<LogicActions>> beforeDelete(final TO input) {\n+        Realm realm = realmDAO.find(input.getRealm());\n+        if (realm == null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n+            sce.getElements().add(input.getRealm());\n+            throw sce;\n+        }\n+\n+        TO any = input;\n+\n+        List<LogicActions> actions = getActions(realm);\n+        for (LogicActions action : actions) {\n+            any = action.beforeDelete(any);\n+        }\n+\n+        LOG.debug(\"Input: {}\\nOutput: {}\\n\", input, any);\n+\n+        return ImmutablePair.of(any, actions);\n+    }\n+\n+    protected TO afterDelete(final TO input, final List<LogicActions> actions) {\n+        TO any = input;\n+\n+        for (LogicActions action : actions) {\n+            any = action.afterDelete(any);\n+        }\n+\n+        return any;\n+    }\n+\n     private static class StartsWithPredicate implements Predicate<String> {\n \n         private final Collection<String> targets;"},{"sha":"5e52b9ee7c1deae2610fc31f0a2eee9024467897","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":30,"deletions":38,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -31,6 +31,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.mod.AnyObjectMod;\n@@ -49,7 +50,7 @@\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.provisioning.api.AnyTransformer;\n+import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -77,9 +78,6 @@ public class AnyObjectLogic extends AbstractAnyLogic<AnyObjectTO, AnyObjectMod>\n     @Autowired\n     protected PropagationTaskExecutor taskExecutor;\n \n-    @Autowired\n-    protected AnyTransformer attrTransformer;\n-\n     @Resource(name = \"anonymousUser\")\n     protected String anonymousUser;\n \n@@ -160,79 +158,73 @@ public AnyObjectTO transform(final AnyObject input) {\n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_CREATE + \"')\")\n     @Override\n     public AnyObjectTO create(final AnyObjectTO anyObjectTO) {\n-        if (anyObjectTO.getRealm() == null) {\n+        Pair<AnyObjectTO, List<LogicActions>> before = beforeCreate(anyObjectTO);\n+\n+        if (before.getLeft().getRealm() == null) {\n             throw SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n         }\n-        // security checks\n+\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_CREATE),\n-                Collections.singleton(anyObjectTO.getRealm()));\n-        securityChecks(effectiveRealms, anyObjectTO.getRealm(), null);\n-\n-        // Any transformation (if configured)\n-        AnyObjectTO actual = attrTransformer.transform(anyObjectTO);\n-        LOG.debug(\"Transformed: {}\", actual);\n+                Collections.singleton(before.getLeft().getRealm()));\n+        securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n \n-        if (anyObjectTO.getType() == null) {\n+        if (before.getLeft().getType() == null) {\n             throw SyncopeClientException.build(ClientExceptionType.InvalidAnyType);\n         }\n \n-        /*\n-         * Actual operations: workflow, propagation\n-         */\n-        Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(anyObjectTO);\n+        Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(before.getLeft());\n         AnyObjectTO savedTO = binder.getAnyObjectTO(created.getKey());\n         savedTO.getPropagationStatusTOs().addAll(created.getValue());\n-        return savedTO;\n+\n+        return afterCreate(savedTO, before.getValue());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n     @Override\n     public AnyObjectTO update(final AnyObjectMod anyObjectMod) {\n-        // Any transformation (if configured)\n-        AnyObjectMod actual = attrTransformer.transform(anyObjectMod);\n-        LOG.debug(\"Transformed: {}\", actual);\n+        AnyObjectTO anyObjectTO = binder.getAnyObjectTO(anyObjectMod.getKey());\n+        Pair<AnyObjectMod, List<LogicActions>> before = beforeUpdate(anyObjectMod, anyObjectTO.getRealm());\n \n-        // security checks\n-        AnyObjectTO toUpdate = binder.getAnyObjectTO(anyObjectMod.getKey());\n         Set<String> requestedRealms = new HashSet<>();\n-        requestedRealms.add(toUpdate.getRealm());\n-        if (StringUtils.isNotBlank(actual.getRealm())) {\n-            requestedRealms.add(actual.getRealm());\n+        requestedRealms.add(before.getLeft().getRealm());\n+        if (StringUtils.isNotBlank(before.getLeft().getRealm())) {\n+            requestedRealms.add(before.getLeft().getRealm());\n         }\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_UPDATE),\n                 requestedRealms);\n-        securityChecks(effectiveRealms, toUpdate.getRealm(), toUpdate.getKey());\n-        if (StringUtils.isNotBlank(actual.getRealm())) {\n-            securityChecks(effectiveRealms, actual.getRealm(), toUpdate.getKey());\n+        securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n+        if (StringUtils.isNotBlank(before.getLeft().getRealm())) {\n+            securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n         }\n \n         Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(anyObjectMod);\n \n         AnyObjectTO updatedTO = binder.getAnyObjectTO(updated.getKey());\n         updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n-        return updatedTO;\n+\n+        return afterUpdate(updatedTO, before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_DELETE + \"')\")\n     @Override\n     public AnyObjectTO delete(final Long key) {\n-        // security checks\n-        AnyObjectTO toDelete = binder.getAnyObjectTO(key);\n+        AnyObjectTO anyObject = binder.getAnyObjectTO(key);\n+        Pair<AnyObjectTO, List<LogicActions>> before = beforeDelete(anyObject);\n+\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_DELETE),\n-                Collections.singleton(toDelete.getRealm()));\n-        securityChecks(effectiveRealms, toDelete.getRealm(), toDelete.getKey());\n+                Collections.singleton(before.getLeft().getRealm()));\n+        securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n \n-        List<PropagationStatus> statuses = provisioningManager.delete(key);\n+        List<PropagationStatus> statuses = provisioningManager.delete(before.getLeft().getKey());\n \n         AnyObjectTO anyObjectTO = new AnyObjectTO();\n-        anyObjectTO.setKey(key);\n-\n+        anyObjectTO.setKey(before.getLeft().getKey());\n         anyObjectTO.getPropagationStatusTOs().addAll(statuses);\n \n-        return anyObjectTO;\n+        return afterDelete(anyObjectTO, before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")"},{"sha":"a8af2b9436236bd9705c3feba29f327df7d5ac7a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":30,"deletions":38,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -32,6 +32,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.mod.GroupMod;\n@@ -53,7 +54,7 @@\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.provisioning.api.AnyTransformer;\n+import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -84,9 +85,6 @@ public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupMod> {\n     @Autowired\n     protected PropagationTaskExecutor taskExecutor;\n \n-    @Autowired\n-    protected AnyTransformer attrTransformer;\n-\n     @Resource(name = \"anonymousUser\")\n     protected String anonymousUser;\n \n@@ -184,68 +182,63 @@ public GroupTO transform(final Group input) {\n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_CREATE + \"')\")\n     @Override\n     public GroupTO create(final GroupTO groupTO) {\n-        if (groupTO.getRealm() == null) {\n+        Pair<GroupTO, List<LogicActions>> before = beforeCreate(groupTO);\n+\n+        if (before.getLeft().getRealm() == null) {\n             throw SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n         }\n-        // security checks\n+\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_CREATE),\n-                Collections.singleton(groupTO.getRealm()));\n-        securityChecks(effectiveRealms, groupTO.getRealm(), null);\n-\n-        // Any transformation (if configured)\n-        GroupTO actual = attrTransformer.transform(groupTO);\n-        LOG.debug(\"Transformed: {}\", actual);\n+                Collections.singleton(before.getLeft().getRealm()));\n+        securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n \n-        /*\n-         * Actual operations: workflow, propagation\n-         */\n-        Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(groupTO);\n+        Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(before.getLeft());\n         GroupTO savedTO = binder.getGroupTO(created.getKey());\n         savedTO.getPropagationStatusTOs().addAll(created.getValue());\n-        return savedTO;\n+\n+        return afterCreate(savedTO, before.getValue());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public GroupTO update(final GroupMod groupMod) {\n-        // Any transformation (if configured)\n-        GroupMod actual = attrTransformer.transform(groupMod);\n-        LOG.debug(\"Transformed: {}\", actual);\n+        GroupTO groupTO = binder.getGroupTO(groupMod.getKey());\n+        Pair<GroupMod, List<LogicActions>> before = beforeUpdate(groupMod, groupTO.getRealm());\n \n-        // security checks\n-        GroupTO toUpdate = binder.getGroupTO(groupMod.getKey());\n         Set<String> requestedRealms = new HashSet<>();\n-        requestedRealms.add(toUpdate.getRealm());\n-        if (StringUtils.isNotBlank(actual.getRealm())) {\n-            requestedRealms.add(actual.getRealm());\n+        requestedRealms.add(before.getLeft().getRealm());\n+        if (StringUtils.isNotBlank(before.getLeft().getRealm())) {\n+            requestedRealms.add(before.getLeft().getRealm());\n         }\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_UPDATE),\n                 requestedRealms);\n-        securityChecks(effectiveRealms, toUpdate.getRealm(), toUpdate.getKey());\n-        if (StringUtils.isNotBlank(actual.getRealm())) {\n-            securityChecks(effectiveRealms, actual.getRealm(), toUpdate.getKey());\n+        securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n+        if (StringUtils.isNotBlank(before.getLeft().getRealm())) {\n+            securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n         }\n \n         Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(groupMod);\n \n         GroupTO updatedTO = binder.getGroupTO(updated.getKey());\n         updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n-        return updatedTO;\n+\n+        return afterUpdate(updatedTO, before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_DELETE + \"')\")\n     @Override\n     public GroupTO delete(final Long key) {\n-        // security checks\n-        GroupTO toDelete = binder.getGroupTO(key);\n+        GroupTO group = binder.getGroupTO(key);\n+        Pair<GroupTO, List<LogicActions>> before = beforeDelete(group);\n+\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_DELETE),\n-                Collections.singleton(toDelete.getRealm()));\n-        securityChecks(effectiveRealms, toDelete.getRealm(), toDelete.getKey());\n+                Collections.singleton(before.getLeft().getRealm()));\n+        securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n \n-        List<Group> ownedGroups = groupDAO.findOwnedByGroup(key);\n+        List<Group> ownedGroups = groupDAO.findOwnedByGroup(before.getLeft().getKey());\n         if (!ownedGroups.isEmpty()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.GroupOwnership);\n             sce.getElements().addAll(CollectionUtils.collect(ownedGroups, new Transformer<Group, String>() {\n@@ -258,14 +251,13 @@ public String transform(final Group group) {\n             throw sce;\n         }\n \n-        List<PropagationStatus> statuses = provisioningManager.delete(key);\n+        List<PropagationStatus> statuses = provisioningManager.delete(before.getLeft().getKey());\n \n         GroupTO groupTO = new GroupTO();\n-        groupTO.setKey(key);\n-\n+        groupTO.setKey(before.getLeft().getKey());\n         groupTO.getPropagationStatusTOs().addAll(statuses);\n \n-        return groupTO;\n+        return afterDelete(groupTO, before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")"},{"sha":"7f9b7c918bebcefb939e86811f728eaf8752e1c5","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.core.persistence.api.ImplementationLookup.Type;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.AnyTransformer;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n@@ -58,9 +57,6 @@ public class SyncopeLogic extends AbstractLogic<SyncopeTO> {\n     @Autowired\n     private ConnIdBundleManager bundleManager;\n \n-    @Autowired\n-    private AnyTransformer anyTransformer;\n-\n     @Autowired\n     private AnyObjectWorkflowAdapter awfAdapter;\n \n@@ -122,8 +118,6 @@ public SyncopeTO info() {\n             }\n         }\n \n-        syncopeTO.setAnyTransformer(anyTransformer.getClass().getName());\n-\n         syncopeTO.setAnyObjectWorkflowAdapter(AopUtils.getTargetClass(awfAdapter).getName());\n         syncopeTO.setUserWorkflowAdapter(AopUtils.getTargetClass(uwfAdapter).getName());\n         syncopeTO.setGroupWorkflowAdapter(AopUtils.getTargetClass(gwfAdapter).getName());\n@@ -138,6 +132,7 @@ public SyncopeTO info() {\n         syncopeTO.getAccountRules().addAll(implementationLookup.getClassNames(Type.ACCOUNT_RULE));\n         syncopeTO.getPasswordRules().addAll(implementationLookup.getClassNames(Type.PASSWORD_RULE));\n         syncopeTO.getTaskJobs().addAll(implementationLookup.getClassNames(Type.TASKJOBDELEGATE));\n+        syncopeTO.getLogicActions().addAll(implementationLookup.getClassNames(Type.LOGIC_ACTIONS));\n         syncopeTO.getPropagationActions().addAll(implementationLookup.getClassNames(Type.PROPAGATION_ACTIONS));\n         syncopeTO.getSyncActions().addAll(implementationLookup.getClassNames(Type.SYNC_ACTIONS));\n         syncopeTO.getPushActions().addAll(implementationLookup.getClassNames(Type.PUSH_ACTIONS));"},{"sha":"f508b4769c625a5cbad43e9c904a29fe8376981e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -54,7 +54,7 @@\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.provisioning.api.AnyTransformer;\n+import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -89,9 +89,6 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserMod> {\n     @Autowired\n     protected PropagationTaskExecutor taskExecutor;\n \n-    @Autowired\n-    protected AnyTransformer anyTransformer;\n-\n     @Autowired\n     protected UserProvisioningManager provisioningManager;\n \n@@ -181,7 +178,7 @@ public UserTO transform(final User input) {\n \n     @PreAuthorize(\"isAnonymous() or hasRole('\" + Entitlement.ANONYMOUS + \"')\")\n     public UserTO selfCreate(final UserTO userTO, final boolean storePassword) {\n-        return doCreate(userTO, storePassword);\n+        return doCreate(userTO, storePassword, true);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_CREATE + \"')\")\n@@ -192,68 +189,69 @@ public UserTO create(final UserTO userTO) {\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_CREATE + \"')\")\n     public UserTO create(final UserTO userTO, final boolean storePassword) {\n-        if (userTO.getRealm() == null) {\n+        return doCreate(userTO, storePassword, false);\n+    }\n+\n+    protected UserTO doCreate(final UserTO userTO, final boolean storePassword, final boolean self) {\n+        Pair<UserTO, List<LogicActions>> before = beforeCreate(userTO);\n+\n+        if (before.getLeft().getRealm() == null) {\n             throw SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n         }\n-        // security checks\n-        Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.USER_CREATE),\n-                Collections.singleton(userTO.getRealm()));\n-        securityChecks(effectiveRealms, userTO.getRealm(), null);\n-\n-        return doCreate(userTO, storePassword);\n-    }\n \n-    protected UserTO doCreate(final UserTO userTO, final boolean storePassword) {\n-        // Any transformation (if configured)\n-        UserTO actual = anyTransformer.transform(userTO);\n-        LOG.debug(\"Transformed: {}\", actual);\n+        if (!self) {\n+            Set<String> effectiveRealms = getEffectiveRealms(\n+                    AuthContextUtils.getAuthorizations().get(Entitlement.USER_CREATE),\n+                    Collections.singleton(before.getLeft().getRealm()));\n+            securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n+        }\n \n-        Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(actual, storePassword);\n+        Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(before.getLeft(), storePassword);\n \n         UserTO savedTO = binder.getUserTO(created.getKey());\n         savedTO.getPropagationStatusTOs().addAll(created.getValue());\n-        return savedTO;\n+\n+        return afterCreate(savedTO, before.getValue());\n     }\n \n     @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + Entitlement.ANONYMOUS + \"'))\")\n     public UserTO selfUpdate(final UserMod userMod) {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n         userMod.setKey(userTO.getKey());\n-        return doUpdate(userMod);\n+        return doUpdate(userMod, true);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n     @Override\n     public UserTO update(final UserMod userMod) {\n-        // Any transformation (if configured)\n-        UserMod actual = anyTransformer.transform(userMod);\n-        LOG.debug(\"Transformed: {}\", actual);\n+        return doUpdate(userMod, false);\n+    }\n \n-        // security checks\n-        UserTO toUpdate = binder.getUserTO(userMod.getKey());\n-        Set<String> requestedRealms = new HashSet<>();\n-        requestedRealms.add(toUpdate.getRealm());\n-        if (StringUtils.isNotBlank(actual.getRealm())) {\n-            requestedRealms.add(actual.getRealm());\n-        }\n-        Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n-                requestedRealms);\n-        securityChecks(effectiveRealms, toUpdate.getRealm(), toUpdate.getKey());\n-        if (StringUtils.isNotBlank(actual.getRealm())) {\n-            securityChecks(effectiveRealms, actual.getRealm(), toUpdate.getKey());\n-        }\n+    protected UserTO doUpdate(final UserMod userMod, final boolean self) {\n+        UserTO userTO = binder.getUserTO(userMod.getKey());\n+        Pair<UserMod, List<LogicActions>> before = beforeUpdate(userMod, userTO.getRealm());\n \n-        return doUpdate(actual);\n-    }\n+        if (!self) {\n+            Set<String> requestedRealms = new HashSet<>();\n+            requestedRealms.add(before.getLeft().getRealm());\n+            if (StringUtils.isNotBlank(before.getLeft().getRealm())) {\n+                requestedRealms.add(before.getLeft().getRealm());\n+            }\n+            Set<String> effectiveRealms = getEffectiveRealms(\n+                    AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n+                    requestedRealms);\n+            securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n+            if (StringUtils.isNotBlank(before.getLeft().getRealm())) {\n+                securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n+            }\n+        }\n \n-    protected UserTO doUpdate(final UserMod userMod) {\n-        Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(userMod);\n+        Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(before.getLeft());\n \n         UserTO updatedTO = binder.getUserTO(updated.getKey());\n         updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n-        return updatedTO;\n+\n+        return afterUpdate(updatedTO, before.getRight());\n     }\n \n     protected Map.Entry<Long, List<PropagationStatus>> setStatusOnWfAdapter(final StatusMod statusMod) {\n@@ -334,25 +332,27 @@ public void confirmPasswordReset(final String token, final String password) {\n     @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + Entitlement.ANONYMOUS + \"'))\")\n     public UserTO selfDelete() {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n-\n-        return doDelete(userTO.getKey());\n+        return doDelete(userTO, true);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_DELETE + \"')\")\n     @Override\n     public UserTO delete(final Long key) {\n-        // security checks\n-        UserTO toDelete = binder.getUserTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.USER_DELETE),\n-                Collections.singleton(toDelete.getRealm()));\n-        securityChecks(effectiveRealms, toDelete.getRealm(), toDelete.getKey());\n-\n-        return doDelete(key);\n+        UserTO userTO = binder.getUserTO(key);\n+        return doDelete(userTO, false);\n     }\n \n-    protected UserTO doDelete(final Long key) {\n-        List<Group> ownedGroups = groupDAO.findOwnedByUser(key);\n+    protected UserTO doDelete(final UserTO userTO, final boolean self) {\n+        Pair<UserTO, List<LogicActions>> before = beforeDelete(userTO);\n+\n+        if (!self) {\n+            Set<String> effectiveRealms = getEffectiveRealms(\n+                    AuthContextUtils.getAuthorizations().get(Entitlement.USER_DELETE),\n+                    Collections.singleton(before.getLeft().getRealm()));\n+            securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n+        }\n+\n+        List<Group> ownedGroups = groupDAO.findOwnedByUser(before.getLeft().getKey());\n         if (!ownedGroups.isEmpty()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.GroupOwnership);\n             sce.getElements().addAll(CollectionUtils.collect(ownedGroups, new Transformer<Group, String>() {\n@@ -365,18 +365,18 @@ public String transform(final Group group) {\n             throw sce;\n         }\n \n-        List<PropagationStatus> statuses = provisioningManager.delete(key);\n+        List<PropagationStatus> statuses = provisioningManager.delete(before.getLeft().getKey());\n \n         UserTO deletedTO;\n-        if (userDAO.find(key) == null) {\n+        if (userDAO.find(before.getLeft().getKey()) == null) {\n             deletedTO = new UserTO();\n-            deletedTO.setKey(key);\n+            deletedTO.setKey(before.getLeft().getKey());\n         } else {\n-            deletedTO = binder.getUserTO(key);\n+            deletedTO = binder.getUserTO(before.getLeft().getKey());\n         }\n         deletedTO.getPropagationStatusTOs().addAll(statuses);\n \n-        return deletedTO;\n+        return afterDelete(deletedTO, before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")"},{"sha":"d68df96ccfff1f5d8d1c99634006c567887c88e5","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.core.persistence.api.dao.AccountRuleConfClass;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRuleConfClass;\n+import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.apache.syncope.core.provisioning.api.sync.PushActions;\n@@ -90,12 +91,13 @@ public void load() {\n         scanner.addIncludeFilter(new AssignableTypeFilter(AccountRule.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(PasswordRule.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(SchedTaskJobDelegate.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(LogicActions.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(PropagationActions.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(SyncActions.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(PushActions.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(SyncCorrelationRule.class));\n         // Remove once SYNCOPE-470 is done\n         //scanner.addIncludeFilter(new AssignableTypeFilter(PushCorrelationRule.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(PropagationActions.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(Validator.class));\n \n         for (BeanDefinition bd : scanner.findCandidateComponents(StringUtils.EMPTY)) {\n@@ -136,6 +138,14 @@ public void load() {\n                     classNames.get(Type.TASKJOBDELEGATE).add(bd.getBeanClassName());\n                 }\n \n+                if (LogicActions.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                    classNames.get(Type.LOGIC_ACTIONS).add(bd.getBeanClassName());\n+                }\n+\n+                if (PropagationActions.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                    classNames.get(Type.PROPAGATION_ACTIONS).add(bd.getBeanClassName());\n+                }\n+\n                 if (SyncActions.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n                     classNames.get(Type.SYNC_ACTIONS).add(bd.getBeanClassName());\n                 }\n@@ -152,10 +162,6 @@ public void load() {\n                 /* if (PushCorrelationRule.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n                  * classNames.get(Type.PUSH_CORRELATION_RULES).add(metadata.getClassName());\n                  * } */\n-                if (PropagationActions.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n-                    classNames.get(Type.PROPAGATION_ACTIONS).add(bd.getBeanClassName());\n-                }\n-\n                 if (Validator.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n                     classNames.get(Type.VALIDATOR).add(bd.getBeanClassName());\n                 }"},{"sha":"4af398a1f0f4e13239122397f30eb3530df92a61","filename":"core/logic/src/main/resources/logic.properties","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Flogic.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Flogic.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Flogic.properties?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -14,5 +14,4 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-anyTransformer=org.apache.syncope.core.provisioning.java.DefaultAnyTransformer\n logicInvocationHandler=org.apache.syncope.core.logic.LogicInvocationHandler"},{"sha":"5bec085185cff9e06a295fb51f8c4eced21e7a6a","filename":"core/logic/src/main/resources/logicContext.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Flogic%2Fsrc%2Fmain%2Fresources%2FlogicContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Flogic%2Fsrc%2Fmain%2Fresources%2FlogicContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fresources%2FlogicContext.xml?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -37,6 +37,5 @@ under the License.\n   <context:component-scan base-package=\"org.apache.syncope.core.logic\"/>\n \n   <bean class=\"${logicInvocationHandler}\"/>\n-  <bean class=\"${anyTransformer}\"/>\n \n </beans>"},{"sha":"02c6e62373c58f36ab7427a2724ad55fd6f160e3","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/ConnObjectUtils.java","status":"modified","additions":4,"deletions":135,"changes":139,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -35,32 +35,26 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.MembershipTO;\n-import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.misc.security.Encryptor;\n-import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.apache.syncope.core.misc.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.persistence.api.entity.task.AnyTemplate;\n import org.identityconnectors.common.Base64;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n@@ -78,13 +72,13 @@ public class ConnObjectUtils {\n     private static final Logger LOG = LoggerFactory.getLogger(ConnObjectUtils.class);\n \n     @Autowired\n-    private RealmDAO realmDAO;\n+    private TemplateUtils templateUtils;\n \n     @Autowired\n-    private UserDAO userDAO;\n+    private RealmDAO realmDAO;\n \n     @Autowired\n-    private GroupDAO groupDAO;\n+    private UserDAO userDAO;\n \n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n@@ -320,57 +314,7 @@ private <T extends AnyTO> T getAnyTOFromConnObject(final ConnectorObject obj,\n         }\n \n         // 2. add data from defined template (if any)\n-        AnyTemplate anyTypeTemplate = syncTask.getTemplate(provision.getAnyType());\n-        if (anyTypeTemplate != null) {\n-            AnyTO template = anyTypeTemplate.get();\n-            fillFromTemplate(anyTO, template);\n-\n-            if (template instanceof AnyObjectTO) {\n-                fillRelationshipsFromTemplate(((AnyObjectTO) anyTO).getRelationshipMap(),\n-                        ((AnyObjectTO) anyTO).getRelationships(), ((AnyObjectTO) template).getRelationships());\n-                fillMembershipsFromTemplate(((AnyObjectTO) anyTO).getMembershipMap(),\n-                        ((AnyObjectTO) anyTO).getMemberships(), ((AnyObjectTO) template).getMemberships());\n-            } else if (template instanceof UserTO) {\n-                if (StringUtils.isNotBlank(((UserTO) template).getUsername())) {\n-                    String evaluated = JexlUtils.evaluate(((UserTO) template).getUsername(), anyTO);\n-                    if (StringUtils.isNotBlank(evaluated)) {\n-                        ((UserTO) anyTO).setUsername(evaluated);\n-                    }\n-                }\n-\n-                if (StringUtils.isNotBlank(((UserTO) template).getPassword())) {\n-                    String evaluated = JexlUtils.evaluate(((UserTO) template).getPassword(), anyTO);\n-                    if (StringUtils.isNotBlank(evaluated)) {\n-                        ((UserTO) anyTO).setPassword(evaluated);\n-                    }\n-                }\n-\n-                fillRelationshipsFromTemplate(((UserTO) anyTO).getRelationshipMap(),\n-                        ((UserTO) anyTO).getRelationships(), ((UserTO) template).getRelationships());\n-                fillMembershipsFromTemplate(((UserTO) anyTO).getMembershipMap(),\n-                        ((UserTO) anyTO).getMemberships(), ((UserTO) template).getMemberships());\n-            } else if (template instanceof GroupTO) {\n-                if (StringUtils.isNotBlank(((GroupTO) template).getName())) {\n-                    String evaluated = JexlUtils.evaluate(((GroupTO) template).getName(), anyTO);\n-                    if (StringUtils.isNotBlank(evaluated)) {\n-                        ((GroupTO) anyTO).setName(evaluated);\n-                    }\n-                }\n-\n-                if (((GroupTO) template).getUserOwner() != null) {\n-                    final User userOwner = userDAO.find(((GroupTO) template).getUserOwner());\n-                    if (userOwner != null) {\n-                        ((GroupTO) anyTO).setUserOwner(userOwner.getKey());\n-                    }\n-                }\n-                if (((GroupTO) template).getGroupOwner() != null) {\n-                    final Group groupOwner = groupDAO.find(((GroupTO) template).getGroupOwner());\n-                    if (groupOwner != null) {\n-                        ((GroupTO) anyTO).setGroupOwner(groupOwner.getKey());\n-                    }\n-                }\n-            }\n-        }\n+        templateUtils.apply(anyTO, syncTask.getTemplate(provision.getAnyType()));\n \n         return anyTO;\n     }\n@@ -442,81 +386,6 @@ public ConnObjectTO getConnObjectTO(final ConnectorObject connObject) {\n         return connObjectTO;\n     }\n \n-    private AttrTO evaluateAttrFromTemplate(final AnyTO anyTO, final AttrTO template) {\n-        AttrTO result = new AttrTO();\n-        result.setSchema(template.getSchema());\n-\n-        if (template.getValues() != null && !template.getValues().isEmpty()) {\n-            for (String value : template.getValues()) {\n-                String evaluated = JexlUtils.evaluate(value, anyTO);\n-                if (StringUtils.isNotBlank(evaluated)) {\n-                    result.getValues().add(evaluated);\n-                }\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n-    private void fillFromTemplate(final AnyTO anyTO, final AnyTO template) {\n-        if (template.getRealm() != null) {\n-            anyTO.setRealm(template.getRealm());\n-        }\n-\n-        Map<String, AttrTO> currentAttrMap = anyTO.getPlainAttrMap();\n-        for (AttrTO templatePlainAttr : template.getPlainAttrs()) {\n-            if (!templatePlainAttr.getValues().isEmpty()\n-                    && (!currentAttrMap.containsKey(templatePlainAttr.getSchema())\n-                    || currentAttrMap.get(templatePlainAttr.getSchema()).getValues().isEmpty())) {\n-\n-                anyTO.getPlainAttrs().add(evaluateAttrFromTemplate(anyTO, templatePlainAttr));\n-            }\n-        }\n-\n-        currentAttrMap = anyTO.getDerAttrMap();\n-        for (AttrTO templateDerAttr : template.getDerAttrs()) {\n-            if (!currentAttrMap.containsKey(templateDerAttr.getSchema())) {\n-                anyTO.getDerAttrs().add(templateDerAttr);\n-            }\n-        }\n-\n-        currentAttrMap = anyTO.getVirAttrMap();\n-        for (AttrTO templateVirAttr : template.getVirAttrs()) {\n-            if (!templateVirAttr.getValues().isEmpty()\n-                    && (!currentAttrMap.containsKey(templateVirAttr.getSchema())\n-                    || currentAttrMap.get(templateVirAttr.getSchema()).getValues().isEmpty())) {\n-\n-                anyTO.getVirAttrs().add(evaluateAttrFromTemplate(anyTO, templateVirAttr));\n-            }\n-        }\n-\n-        for (String resource : template.getResources()) {\n-            anyTO.getResources().add(resource);\n-        }\n-\n-        anyTO.getAuxClasses().addAll(template.getAuxClasses());\n-    }\n-\n-    private void fillRelationshipsFromTemplate(final Map<Long, RelationshipTO> anyRelMap,\n-            final List<RelationshipTO> anyRels, final List<RelationshipTO> templateRels) {\n-\n-        for (RelationshipTO memb : templateRels) {\n-            if (!anyRelMap.containsKey(memb.getRightKey())) {\n-                anyRels.add(memb);\n-            }\n-        }\n-    }\n-\n-    private void fillMembershipsFromTemplate(final Map<Long, MembershipTO> anyMembMap,\n-            final List<MembershipTO> anyMembs, final List<MembershipTO> templateMembs) {\n-\n-        for (MembershipTO memb : templateMembs) {\n-            if (!anyMembMap.containsKey(memb.getRightKey())) {\n-                anyMembs.add(memb);\n-            }\n-        }\n-    }\n-\n     /**\n      * Transform a\n      * <code>Collection</code> of {@link Attribute} instances into a {@link Map}. The key to each element in the map is"},{"sha":"d990cdb725267a23a2e3502656b60f18695f1746","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/TemplateUtils.java","status":"added","additions":223,"deletions":0,"changes":223,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FTemplateUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FTemplateUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FTemplateUtils.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -0,0 +1,223 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.RelationshipTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.misc.jexl.JexlUtils;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class TemplateUtils {\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private GroupDAO groupDAO;\n+\n+    private AttrTO evaluateAttr(final AnyTO anyTO, final AttrTO template) {\n+        AttrTO result = new AttrTO();\n+        result.setSchema(template.getSchema());\n+\n+        if (template.getValues() != null && !template.getValues().isEmpty()) {\n+            for (String value : template.getValues()) {\n+                String evaluated = JexlUtils.evaluate(value, anyTO);\n+                if (StringUtils.isNotBlank(evaluated)) {\n+                    result.getValues().add(evaluated);\n+                }\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    private void fill(final AnyTO anyTO, final AnyTO template) {\n+        if (template.getRealm() != null) {\n+            anyTO.setRealm(template.getRealm());\n+        }\n+\n+        Map<String, AttrTO> currentAttrMap = anyTO.getPlainAttrMap();\n+        for (AttrTO templatePlainAttr : template.getPlainAttrs()) {\n+            if (!templatePlainAttr.getValues().isEmpty()\n+                    && (!currentAttrMap.containsKey(templatePlainAttr.getSchema())\n+                    || currentAttrMap.get(templatePlainAttr.getSchema()).getValues().isEmpty())) {\n+\n+                anyTO.getPlainAttrs().add(evaluateAttr(anyTO, templatePlainAttr));\n+            }\n+        }\n+\n+        currentAttrMap = anyTO.getDerAttrMap();\n+        for (AttrTO templateDerAttr : template.getDerAttrs()) {\n+            if (!currentAttrMap.containsKey(templateDerAttr.getSchema())) {\n+                anyTO.getDerAttrs().add(templateDerAttr);\n+            }\n+        }\n+\n+        currentAttrMap = anyTO.getVirAttrMap();\n+        for (AttrTO templateVirAttr : template.getVirAttrs()) {\n+            if (!templateVirAttr.getValues().isEmpty()\n+                    && (!currentAttrMap.containsKey(templateVirAttr.getSchema())\n+                    || currentAttrMap.get(templateVirAttr.getSchema()).getValues().isEmpty())) {\n+\n+                anyTO.getVirAttrs().add(evaluateAttr(anyTO, templateVirAttr));\n+            }\n+        }\n+\n+        for (String resource : template.getResources()) {\n+            anyTO.getResources().add(resource);\n+        }\n+\n+        anyTO.getAuxClasses().addAll(template.getAuxClasses());\n+    }\n+\n+    private void fillRelationships(final Map<Long, RelationshipTO> anyRelMap,\n+            final List<RelationshipTO> anyRels, final List<RelationshipTO> templateRels) {\n+\n+        for (RelationshipTO memb : templateRels) {\n+            if (!anyRelMap.containsKey(memb.getRightKey())) {\n+                anyRels.add(memb);\n+            }\n+        }\n+    }\n+\n+    private void fillMemberships(final Map<Long, MembershipTO> anyMembMap,\n+            final List<MembershipTO> anyMembs, final List<MembershipTO> templateMembs) {\n+\n+        for (MembershipTO memb : templateMembs) {\n+            if (!anyMembMap.containsKey(memb.getRightKey())) {\n+                anyMembs.add(memb);\n+            }\n+        }\n+    }\n+\n+    @Transactional(readOnly = true)\n+    public <T extends AnyTO> void apply(final T anyTO, final AnyTemplate anyTemplate) {\n+        if (anyTemplate != null) {\n+            AnyTO template = anyTemplate.get();\n+            fill(anyTO, template);\n+\n+            if (template instanceof AnyObjectTO) {\n+                fillRelationships(((AnyObjectTO) anyTO).getRelationshipMap(),\n+                        ((AnyObjectTO) anyTO).getRelationships(), ((AnyObjectTO) template).getRelationships());\n+                fillMemberships(((AnyObjectTO) anyTO).getMembershipMap(),\n+                        ((AnyObjectTO) anyTO).getMemberships(), ((AnyObjectTO) template).getMemberships());\n+            } else if (template instanceof UserTO) {\n+                if (StringUtils.isNotBlank(((UserTO) template).getUsername())) {\n+                    String evaluated = JexlUtils.evaluate(((UserTO) template).getUsername(), anyTO);\n+                    if (StringUtils.isNotBlank(evaluated)) {\n+                        ((UserTO) anyTO).setUsername(evaluated);\n+                    }\n+                }\n+\n+                if (StringUtils.isNotBlank(((UserTO) template).getPassword())) {\n+                    String evaluated = JexlUtils.evaluate(((UserTO) template).getPassword(), anyTO);\n+                    if (StringUtils.isNotBlank(evaluated)) {\n+                        ((UserTO) anyTO).setPassword(evaluated);\n+                    }\n+                }\n+\n+                fillRelationships(((UserTO) anyTO).getRelationshipMap(),\n+                        ((UserTO) anyTO).getRelationships(), ((UserTO) template).getRelationships());\n+                fillMemberships(((UserTO) anyTO).getMembershipMap(),\n+                        ((UserTO) anyTO).getMemberships(), ((UserTO) template).getMemberships());\n+            } else if (template instanceof GroupTO) {\n+                if (StringUtils.isNotBlank(((GroupTO) template).getName())) {\n+                    String evaluated = JexlUtils.evaluate(((GroupTO) template).getName(), anyTO);\n+                    if (StringUtils.isNotBlank(evaluated)) {\n+                        ((GroupTO) anyTO).setName(evaluated);\n+                    }\n+                }\n+\n+                if (((GroupTO) template).getUserOwner() != null) {\n+                    final User userOwner = userDAO.find(((GroupTO) template).getUserOwner());\n+                    if (userOwner != null) {\n+                        ((GroupTO) anyTO).setUserOwner(userOwner.getKey());\n+                    }\n+                }\n+                if (((GroupTO) template).getGroupOwner() != null) {\n+                    final Group groupOwner = groupDAO.find(((GroupTO) template).getGroupOwner());\n+                    if (groupOwner != null) {\n+                        ((GroupTO) anyTO).setGroupOwner(groupOwner.getKey());\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void check(final Map<String, AnyTO> templates, final ClientExceptionType clientExceptionType) {\n+        SyncopeClientException sce = SyncopeClientException.build(clientExceptionType);\n+\n+        for (Map.Entry<String, AnyTO> entry : templates.entrySet()) {\n+            for (AttrTO attrTO : entry.getValue().getPlainAttrs()) {\n+                if (!attrTO.getValues().isEmpty() && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))) {\n+                    sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n+                }\n+            }\n+\n+            for (AttrTO attrTO : entry.getValue().getVirAttrs()) {\n+                if (!attrTO.getValues().isEmpty() && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))) {\n+                    sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n+                }\n+            }\n+\n+            if (entry.getValue() instanceof UserTO) {\n+                UserTO template = (UserTO) entry.getValue();\n+                if (StringUtils.isNotBlank(template.getUsername())\n+                        && !JexlUtils.isExpressionValid(template.getUsername())) {\n+\n+                    sce.getElements().add(\"Invalid JEXL: \" + template.getUsername());\n+                }\n+                if (StringUtils.isNotBlank(template.getPassword())\n+                        && !JexlUtils.isExpressionValid(template.getPassword())) {\n+\n+                    sce.getElements().add(\"Invalid JEXL: \" + template.getPassword());\n+                }\n+            } else if (entry.getValue() instanceof GroupTO) {\n+                GroupTO template = (GroupTO) entry.getValue();\n+                if (StringUtils.isNotBlank(template.getName())\n+                        && !JexlUtils.isExpressionValid(template.getName())) {\n+\n+                    sce.getElements().add(\"Invalid JEXL: \" + template.getName());\n+                }\n+            }\n+        }\n+\n+        if (!sce.isEmpty()) {\n+            throw sce;\n+        }\n+    }\n+}"},{"sha":"530b4061b83414ca3edd958e0a4f18584bc6cdaa","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/ImplementationLookup.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -34,6 +34,7 @@ public enum Type {\n         ACCOUNT_RULE,\n         PASSWORD_RULE,\n         TASKJOBDELEGATE,\n+        LOGIC_ACTIONS,\n         PROPAGATION_ACTIONS,\n         SYNC_ACTIONS,\n         PUSH_ACTIONS,"},{"sha":"c00d3a4d903c96495d28ad3c8c53be2c764fdfd2","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyTemplate.java","status":"renamed","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTemplate.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -16,18 +16,12 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.task;\n+package org.apache.syncope.core.persistence.api.entity;\n \n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n \n public interface AnyTemplate extends Entity<Long> {\n \n-    SyncTask getSyncTask();\n-\n-    void setSyncTask(SyncTask syncTask);\n-\n     AnyType getAnyType();\n \n     void setAnyType(AnyType anyType);","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/AnyTemplate.java"},{"sha":"9caa4ad02ce4169b1dcd40a24476d3cc0e659aeb","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyTemplateRealm.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTemplateRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTemplateRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTemplateRealm.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+public interface AnyTemplateRealm extends AnyTemplate {\n+\n+    Realm getRealm();\n+\n+    void setRealm(Realm realm);\n+}"},{"sha":"f973138084c5490fe80daf9131ba25b26e3e8d42","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Realm.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n+import java.util.List;\n+import java.util.Set;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n \n@@ -28,7 +30,7 @@ public interface Realm extends Entity<Long> {\n     Realm getParent();\n \n     String getFullPath();\n-    \n+\n     AccountPolicy getAccountPolicy();\n \n     PasswordPolicy getPasswordPolicy();\n@@ -41,4 +43,13 @@ public interface Realm extends Entity<Long> {\n \n     void setPasswordPolicy(PasswordPolicy passwordPolicy);\n \n+    Set<String> getActionsClassNames();\n+\n+    boolean add(AnyTemplateRealm template);\n+\n+    boolean remove(AnyTemplateRealm template);\n+\n+    AnyTemplateRealm getTemplate(AnyType anyType);\n+\n+    List<? extends AnyTemplateRealm> getTemplates();\n }"},{"sha":"82d7e2ee3a3e9f1404b66e7bb3f1c724ff1f1342","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/AnyTemplateSyncTask.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FAnyTemplateSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FAnyTemplateSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FAnyTemplateSyncTask.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.task;\n+\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n+\n+public interface AnyTemplateSyncTask extends AnyTemplate {\n+\n+    SyncTask getSyncTask();\n+\n+    void setSyncTask(SyncTask syncTask);\n+}"},{"sha":"bc0c2b2f51b37046557e5c924b2d49ff9eacf9e1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/SyncTask.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSyncTask.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -32,11 +32,11 @@ public interface SyncTask extends ProvisioningTask {\n \n     void setFullReconciliation(boolean condition);\n \n-    boolean add(AnyTemplate template);\n+    boolean add(AnyTemplateSyncTask template);\n \n-    boolean remove(AnyTemplate template);\n+    boolean remove(AnyTemplateSyncTask template);\n \n-    AnyTemplate getTemplate(AnyType anyType);\n+    AnyTemplateSyncTask getTemplate(AnyType anyType);\n \n-    List<? extends AnyTemplate> getTemplates();\n+    List<? extends AnyTemplateSyncTask> getTemplates();\n }"},{"sha":"c4837aec2e00e980b1cdfb9223396f344bc468b5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeDAO.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -26,20 +26,24 @@\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n public class JPAAnyTypeDAO extends AbstractDAO<AnyType, String> implements AnyTypeDAO {\n \n+    @Transactional(readOnly = true)\n     @Override\n     public AnyType find(final String key) {\n         return entityManager().find(JPAAnyType.class, key);\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n     public AnyType findUser() {\n         return find(AnyTypeKind.USER.name());\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n     public AnyType findGroup() {\n         return find(AnyTypeKind.GROUP.name());"},{"sha":"2733388358c1bb49778bd54621f936c073fbaa50","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -39,6 +39,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n public class JPARealmDAO extends AbstractDAO<Realm, Long> implements RealmDAO {\n@@ -68,6 +69,7 @@ public Realm find(final Long key) {\n         return entityManager().find(JPARealm.class, key);\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n     public Realm find(final String fullPath) {\n         if (SyncopeConstants.ROOT_REALM.equals(fullPath)) {"},{"sha":"cdb4b5e3d7c0df022747647ef38fe201e69ed227","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyTemplateRealm.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTemplateRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTemplateRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTemplateRealm.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplateRealm;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractAnyTemplate;\n+\n+@Entity\n+@Table(name = JPAAnyTemplateRealm.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"realm_id\", \"anyType_name\" }))\n+public class JPAAnyTemplateRealm extends AbstractAnyTemplate implements AnyTemplateRealm {\n+\n+    public static final String TABLE = \"AnyTemplateRealm\";\n+\n+    private static final long serialVersionUID = 1863029633568957907L;\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne\n+    private JPARealm realm;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public Realm getRealm() {\n+        return realm;\n+    }\n+\n+    @Override\n+    public void setRealm(final Realm realm) {\n+        checkType(realm, JPARealm.class);\n+        this.realm = (JPARealm) realm;\n+    }\n+\n+}"},{"sha":"4c3b8168f8db0a3c67f53d7642666717a3d6ddc3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplateRealm;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n@@ -69,7 +70,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.AnyFilter;\n-import org.apache.syncope.core.persistence.api.entity.task.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.task.AnyTemplateSyncTask;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n@@ -107,7 +108,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyFilter;\n-import org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplate;\n+import org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplateSyncTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPANotificationTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPropagationTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPushTask;\n@@ -137,6 +138,8 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n             result = (T) new JPADomain();\n         } else if (reference.equals(Realm.class)) {\n             result = (T) new JPARealm();\n+        } else if (reference.equals(AnyTemplateRealm.class)) {\n+            result = (T) new JPAAnyTemplateRealm();\n         } else if (reference.equals(AccountPolicy.class)) {\n             result = (T) new JPAAccountPolicy();\n         } else if (reference.equals(PasswordPolicy.class)) {\n@@ -239,8 +242,8 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n             result = (T) new JPATaskExec();\n         } else if (reference.equals(AnyFilter.class)) {\n             result = (T) new JPAAnyFilter();\n-        } else if (reference.equals(AnyTemplate.class)) {\n-            result = (T) new JPAAnyTemplate();\n+        } else if (reference.equals(AnyTemplateSyncTask.class)) {\n+            result = (T) new JPAAnyTemplateSyncTask();\n         } else if (reference.equals(SecurityQuestion.class)) {\n             result = (T) new JPASecurityQuestion();\n         } else if (reference.equals(Logger.class)) {"},{"sha":"8186edee6db0a8e8741900aba332b38890171bcf","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARealm.java","status":"modified","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -18,18 +18,33 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n import javax.persistence.Cacheable;\n+import javax.persistence.CascadeType;\n+import javax.persistence.CollectionTable;\n+import javax.persistence.Column;\n+import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n import javax.validation.constraints.Size;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplateRealm;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -61,6 +76,16 @@ public class JPARealm extends AbstractEntity<Long> implements Realm {\n     @ManyToOne(fetch = FetchType.EAGER)\n     private JPAAccountPolicy accountPolicy;\n \n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column(name = \"actionClassName\")\n+    @CollectionTable(name = \"Realm_actionsClassNames\",\n+            joinColumns =\n+            @JoinColumn(name = \"realm_id\", referencedColumnName = \"id\"))\n+    private Set<String> actionsClassNames = new HashSet<>();\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"realm\")\n+    private List<JPAAnyTemplateRealm> templates = new ArrayList<>();\n+\n     @Override\n     public Long getKey() {\n         return id;\n@@ -116,4 +141,36 @@ public void setPasswordPolicy(final PasswordPolicy passwordPolicy) {\n         this.passwordPolicy = (JPAPasswordPolicy) passwordPolicy;\n     }\n \n+    @Override\n+    public Set<String> getActionsClassNames() {\n+        return actionsClassNames;\n+    }\n+\n+    @Override\n+    public boolean add(final AnyTemplateRealm template) {\n+        checkType(template, JPAAnyTemplateRealm.class);\n+        return this.templates.add((JPAAnyTemplateRealm) template);\n+    }\n+\n+    @Override\n+    public boolean remove(final AnyTemplateRealm template) {\n+        checkType(template, JPAAnyTemplateRealm.class);\n+        return this.templates.remove((JPAAnyTemplateRealm) template);\n+    }\n+\n+    @Override\n+    public AnyTemplateRealm getTemplate(final AnyType anyType) {\n+        return CollectionUtils.find(templates, new Predicate<AnyTemplate>() {\n+\n+            @Override\n+            public boolean evaluate(final AnyTemplate template) {\n+                return anyType != null && anyType.equals(template.getAnyType());\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public List<? extends AnyTemplateRealm> getTemplates() {\n+        return templates;\n+    }\n }"},{"sha":"28febeac0d4ae79ad1e83fee71ec5fbd9444b9df","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/AbstractAnyTemplate.java","status":"renamed","additions":6,"deletions":36,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FAbstractAnyTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FAbstractAnyTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FAbstractAnyTemplate.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -16,60 +16,30 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.task;\n+package org.apache.syncope.core.persistence.jpa.entity.resource;\n \n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n import javax.persistence.Lob;\n import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import javax.persistence.UniqueConstraint;\n+import javax.persistence.MappedSuperclass;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n-import org.apache.syncope.core.persistence.api.entity.task.AnyTemplate;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n \n-@Entity\n-@Table(name = JPAAnyTemplate.TABLE, uniqueConstraints =\n-        @UniqueConstraint(columnNames = { \"syncTask_id\", \"anyType_name\" }))\n-public class JPAAnyTemplate extends AbstractEntity<Long> implements AnyTemplate {\n+@MappedSuperclass\n+public abstract class AbstractAnyTemplate extends AbstractEntity<Long> implements AnyTemplate {\n \n-    private static final long serialVersionUID = 3517381731849788407L;\n-\n-    public static final String TABLE = \"AnyTemplate\";\n-\n-    @Id\n-    private Long id;\n-\n-    @ManyToOne\n-    private JPASyncTask syncTask;\n+    private static final long serialVersionUID = -5280310945358790780L;\n \n     @ManyToOne\n     private JPAAnyType anyType;\n \n     @Lob\n     private String template;\n \n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n-    @Override\n-    public SyncTask getSyncTask() {\n-        return syncTask;\n-    }\n-\n-    @Override\n-    public void setSyncTask(final SyncTask syncTask) {\n-        checkType(syncTask, JPASyncTask.class);\n-        this.syncTask = (JPASyncTask) syncTask;\n-    }\n-\n     @Override\n     public AnyType getAnyType() {\n         return anyType;","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAAnyTemplate.java"},{"sha":"3b2334235054ff35d99e697ace175c421fb02496","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAAnyTemplateSyncTask.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAAnyTemplateSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAAnyTemplateSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAAnyTemplateSyncTask.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.task;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n+import org.apache.syncope.core.persistence.api.entity.task.AnyTemplateSyncTask;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractAnyTemplate;\n+\n+@Entity\n+@Table(name = JPAAnyTemplateSyncTask.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"syncTask_id\", \"anyType_name\" }))\n+public class JPAAnyTemplateSyncTask extends AbstractAnyTemplate implements AnyTemplateSyncTask {\n+\n+    private static final long serialVersionUID = 3517381731849788407L;\n+\n+    public static final String TABLE = \"AnyTemplateSyncTask\";\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne\n+    private JPASyncTask syncTask;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public SyncTask getSyncTask() {\n+        return syncTask;\n+    }\n+\n+    @Override\n+    public void setSyncTask(final SyncTask syncTask) {\n+        checkType(syncTask, JPASyncTask.class);\n+        this.syncTask = (JPASyncTask) syncTask;\n+    }\n+\n+}"},{"sha":"8cc8b05ccfbb40532dcc4bbc8331f13c6113498d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPASyncTask.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -41,7 +41,8 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.task.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.task.AnyTemplateSyncTask;\n import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n \n @Entity\n@@ -61,7 +62,7 @@ public class JPASyncTask extends AbstractProvisioningTask implements SyncTask {\n     private Set<String> actionsClassNames = new HashSet<>();\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"syncTask\")\n-    private List<JPAAnyTemplate> templates = new ArrayList<>();\n+    private List<JPAAnyTemplateSyncTask> templates = new ArrayList<>();\n \n     @Basic\n     @Min(0)\n@@ -102,19 +103,19 @@ public void setFullReconciliation(final boolean fullReconciliation) {\n     }\n \n     @Override\n-    public boolean add(final AnyTemplate template) {\n-        checkType(template, JPAAnyTemplate.class);\n-        return this.templates.add((JPAAnyTemplate) template);\n+    public boolean add(final AnyTemplateSyncTask template) {\n+        checkType(template, JPAAnyTemplateSyncTask.class);\n+        return this.templates.add((JPAAnyTemplateSyncTask) template);\n     }\n \n     @Override\n-    public boolean remove(final AnyTemplate template) {\n-        checkType(template, JPAAnyTemplate.class);\n-        return this.templates.remove((JPAAnyTemplate) template);\n+    public boolean remove(final AnyTemplateSyncTask template) {\n+        checkType(template, JPAAnyTemplateSyncTask.class);\n+        return this.templates.remove((JPAAnyTemplateSyncTask) template);\n     }\n \n     @Override\n-    public AnyTemplate getTemplate(final AnyType anyType) {\n+    public AnyTemplateSyncTask getTemplate(final AnyType anyType) {\n         return CollectionUtils.find(templates, new Predicate<AnyTemplate>() {\n \n             @Override\n@@ -125,7 +126,7 @@ public boolean evaluate(final AnyTemplate template) {\n     }\n \n     @Override\n-    public List<? extends AnyTemplate> getTemplates() {\n+    public List<? extends AnyTemplateSyncTask> getTemplates() {\n         return templates;\n     }\n "},{"sha":"e397bce4f775cac99cdee98fd694e433e974593d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ProvisioningTaskValidator.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FProvisioningTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FProvisioningTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FProvisioningTaskValidator.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -47,7 +47,7 @@ public boolean isValid(final ProvisioningTask task, final ConstraintValidatorCon\n \n                 context.disableDefaultConstraintViolation();\n                 context.buildConstraintViolationWithTemplate(\n-                        getTemplate(EntityViolationType.InvalidSyncTask, \"Resource cannot be null\")).\n+                        getTemplate(EntityViolationType.InvalidProvisioningTask, \"Resource cannot be null\")).\n                         addPropertyNode(\"resource\").addConstraintViolation();\n             }\n \n@@ -63,7 +63,8 @@ public boolean isValid(final ProvisioningTask task, final ConstraintValidatorCon\n                                         ? PushActions.class.isAssignableFrom(actionsClass)\n                                         : false;\n                     } catch (Exception e) {\n-                        LOG.error(\"Invalid SyncActions specified\", e);\n+                        LOG.error(\"Invalid {} / {} specified\",\n+                                PushActions.class.getName(), SyncActions.class.getName(), e);\n                         isValid = false;\n                     }\n \n@@ -72,7 +73,7 @@ public boolean isValid(final ProvisioningTask task, final ConstraintValidatorCon\n \n                         context.disableDefaultConstraintViolation();\n                         context.buildConstraintViolationWithTemplate(\n-                                getTemplate(EntityViolationType.InvalidSyncTask, \"Invalid class name\")).\n+                                getTemplate(EntityViolationType.InvalidProvisioningTask, \"Invalid class name\")).\n                                 addPropertyNode(\"actionsClassName\").addConstraintViolation();\n                     }\n                 }"},{"sha":"1f27cd8aed5062fd97fc5ac859a5339522185cf3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RealmValidator.java","status":"modified","additions":30,"deletions":6,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmValidator.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -23,19 +23,20 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.provisioning.api.LogicActions;\n \n public class RealmValidator extends AbstractValidator<RealmCheck, Realm> {\n \n-    private static final Pattern NAME_PATTERN = Pattern.compile(\"^[A-Za-z0-9]+\");\n+    private static final Pattern REALM_NAME_PATTERN = Pattern.compile(\"^[A-Za-z0-9]+\");\n \n     @Override\n-    public boolean isValid(final Realm object, final ConstraintValidatorContext context) {\n+    public boolean isValid(final Realm realm, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n         boolean isValid = true;\n \n-        if (SyncopeConstants.ROOT_REALM.equals(object.getName())) {\n-            if (object.getParent() != null) {\n+        if (SyncopeConstants.ROOT_REALM.equals(realm.getName())) {\n+            if (realm.getParent() != null) {\n                 isValid = false;\n \n                 context.buildConstraintViolationWithTemplate(\n@@ -44,7 +45,7 @@ public boolean isValid(final Realm object, final ConstraintValidatorContext cont\n                         addPropertyNode(\"parent\").addConstraintViolation();\n             }\n         } else {\n-            if (object.getParent() == null) {\n+            if (realm.getParent() == null) {\n                 isValid = false;\n \n                 context.buildConstraintViolationWithTemplate(\n@@ -53,7 +54,7 @@ public boolean isValid(final Realm object, final ConstraintValidatorContext cont\n                         addPropertyNode(\"parent\").addConstraintViolation();\n             }\n \n-            if (!NAME_PATTERN.matcher(object.getName()).matches()) {\n+            if (!REALM_NAME_PATTERN.matcher(realm.getName()).matches()) {\n                 isValid = false;\n \n                 context.buildConstraintViolationWithTemplate(\n@@ -63,6 +64,29 @@ public boolean isValid(final Realm object, final ConstraintValidatorContext cont\n             }\n         }\n \n+        if (!realm.getActionsClassNames().isEmpty()) {\n+            for (String className : realm.getActionsClassNames()) {\n+                Class<?> actionsClass = null;\n+                boolean isAssignable = false;\n+                try {\n+                    actionsClass = Class.forName(className);\n+                    isAssignable = LogicActions.class.isAssignableFrom(actionsClass);\n+                } catch (Exception e) {\n+                    LOG.error(\"Invalid {} specified\", LogicActions.class.getName(), e);\n+                    isValid = false;\n+                }\n+\n+                if (actionsClass == null || !isAssignable) {\n+                    isValid = false;\n+\n+                    context.disableDefaultConstraintViolation();\n+                    context.buildConstraintViolationWithTemplate(\n+                            getTemplate(EntityViolationType.InvalidRealm, \"Invalid class name\")).\n+                            addPropertyNode(\"actionsClassName\").addConstraintViolation();\n+                }\n+            }\n+        }\n+\n         return isValid;\n     }\n }"},{"sha":"02c8c8b86c8e0157b46c65a8f4e7f55cc5f75c51","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -362,11 +362,20 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplate\">\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAAnyTemplateRealm\">\n     <attributes>\n       <id name=\"id\">\n-        <generated-value generator=\"SEQ_AnyTemplate\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_AnyTemplate\" pk-column-value=\"SEQ_AnyTemplate\" initial-value=\"1000\"/>\n+        <generated-value generator=\"SEQ_AnyTemplateRealm\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AnyTemplateRealm\" pk-column-value=\"SEQ_AnyTemplateRealm\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplateSyncTask\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_AnyTemplateSyncTask\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AnyTemplateSyncTask\" pk-column-value=\"SEQ_AnyTemplateSyncTask\" initial-value=\"1000\"/>\n       </id>\n     </attributes>\n   </entity>"},{"sha":"02c8c8b86c8e0157b46c65a8f4e7f55cc5f75c51","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -362,11 +362,20 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplate\">\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAAnyTemplateRealm\">\n     <attributes>\n       <id name=\"id\">\n-        <generated-value generator=\"SEQ_AnyTemplate\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_AnyTemplate\" pk-column-value=\"SEQ_AnyTemplate\" initial-value=\"1000\"/>\n+        <generated-value generator=\"SEQ_AnyTemplateRealm\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AnyTemplateRealm\" pk-column-value=\"SEQ_AnyTemplateRealm\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplateSyncTask\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_AnyTemplateSyncTask\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AnyTemplateSyncTask\" pk-column-value=\"SEQ_AnyTemplateSyncTask\" initial-value=\"1000\"/>\n       </id>\n     </attributes>\n   </entity>"},{"sha":"b5c54b64d7390bce9503135b5c376a1085601503","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -410,11 +410,20 @@ under the License.\n     </attributes>\n   </entity>\n   \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplate\">\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAAnyTemplateRealm\">\n     <attributes>\n       <id name=\"id\">\n-        <generated-value generator=\"SEQ_AnyTemplate\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_AnyTemplate\" pk-column-value=\"SEQ_AnyTemplate\" initial-value=\"1000\"/>\n+        <generated-value generator=\"SEQ_AnyTemplateRealm\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AnyTemplateRealm\" pk-column-value=\"SEQ_AnyTemplateRealm\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplateSyncTask\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_AnyTemplateSyncTask\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AnyTemplateSyncTask\" pk-column-value=\"SEQ_AnyTemplateSyncTask\" initial-value=\"1000\"/>\n       </id>\n     </attributes>\n   </entity>"},{"sha":"e2b1c9e7dae588884cf4a015bf546473ea7002b3","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -45,7 +45,8 @@\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n-import org.apache.syncope.core.persistence.api.entity.task.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.task.AnyTemplateSyncTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.apache.syncope.core.provisioning.api.sync.SyncActions;\n@@ -208,7 +209,7 @@ public void saveSyncTask() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n         assertNotNull(resource);\n \n-        AnyTemplate template = entityFactory.newEntity(AnyTemplate.class);\n+        AnyTemplateSyncTask template = entityFactory.newEntity(AnyTemplateSyncTask.class);\n         template.set(new UserTO());\n \n         SyncTask task = entityFactory.newEntity(SyncTask.class);"},{"sha":"a17002bc7274252b98782b5d908ab1e76f56833b","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -997,10 +997,10 @@ under the License.\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"4\" name=\"CSV (update matching; assign unmatching)\" resource_name=\"resource-csv\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\"/>\n-  <AnyTemplate id=\"41\" syncTask_id=\"4\" anyType_name=\"USER\"\n-               template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[\"csv\"],\"derAttrs\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[\"\"]}],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"relationships\":[],\"memberships\":[{\"leftType\":null,\"leftKey\":0,\"rightType\":\"GROUP\",\"rightKey\":8,\"groupName\":null}],\"dynGroups\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}]}'/>\n-  <AnyTemplate id=\"42\" syncTask_id=\"4\" anyType_name=\"GROUP\"\n-               template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n+  <AnyTemplateSyncTask id=\"41\" syncTask_id=\"4\" anyType_name=\"USER\"\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[\"csv\"],\"derAttrs\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[\"\"]}],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"relationships\":[],\"memberships\":[{\"leftType\":null,\"leftKey\":0,\"rightType\":\"GROUP\",\"rightKey\":8,\"groupName\":null}],\"dynGroups\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}]}'/>\n+  <AnyTemplateSyncTask id=\"42\" syncTask_id=\"4\" anyType_name=\"GROUP\"\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n   <Task DTYPE=\"SchedTask\" type=\"SCHEDULED\" id=\"5\" name=\"SampleJob Task\" \n         jobDelegateClassName=\"org.apache.syncope.fit.core.reference.TestSampleJobDelegate\" cronExpression=\"0 0 0 1 * ?\"/>\n   <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"6\" propagationMode=\"TWO_PHASES\" propagationOperation=\"UPDATE\"\n@@ -1010,10 +1010,10 @@ under the License.\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"7\" name=\"TestDB Task\" resource_name=\"resource-testdb\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\"\n         unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n-  <AnyTemplate id=\"71\" syncTask_id=\"7\" anyType_name=\"USER\"\n-               template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"&apos;type a&apos;\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;reconciled@syncope.apache.org&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;reconciled fullname&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;surname&apos;\"]}]}'/>\n-  <AnyTemplate id=\"72\" syncTask_id=\"7\" anyType_name=\"GROUP\"\n-               template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n+  <AnyTemplateSyncTask id=\"71\" syncTask_id=\"7\" anyType_name=\"USER\"\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"&apos;type a&apos;\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;reconciled@syncope.apache.org&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;reconciled fullname&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;surname&apos;\"]}]}'/>\n+  <AnyTemplateSyncTask id=\"72\" syncTask_id=\"7\" anyType_name=\"GROUP\"\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n   <Task DTYPE=\"NotificationTask\" type=\"NOTIFICATION\" id=\"8\" sender=\"admin@prova.org\" subject=\"Notification for SYNCOPE-81\" \n         textBody=\"NOTIFICATION-81\" htmlBody=\"NOTIFICATION-81\" traceLevel=\"ALL\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"9\" name=\"TestDB2 Task\" resource_name=\"resource-testdb2\"\n@@ -1025,10 +1025,10 @@ under the License.\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"11\" name=\"LDAP Sync Task\" resource_name=\"resource-ldap\"\n         destinationRealm_id=\"1\" fullReconciliation=\"1\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n         unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n-  <AnyTemplate id=\"1\" syncTask_id=\"11\" anyType_name=\"USER\"\n-               template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[{\"schema\":\"virtualReadOnly\",\"readonly\":true,\"values\":[\"\"]}],\"resources\":[\"resource-ldap\"],\"propagationStatuses\":[],\"roles\":[],\"dynRoles\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"plainAttrs\":[]}'/>\n-  <AnyTemplate id=\"2\" syncTask_id=\"11\" anyType_name=\"GROUP\"\n-               template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[{\"schema\":\"show\",\"readonly\":false,\"values\":[\"true\"]}]}'/>\n+  <AnyTemplateSyncTask id=\"1\" syncTask_id=\"11\" anyType_name=\"USER\"\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[{\"schema\":\"virtualReadOnly\",\"readonly\":true,\"values\":[\"\"]}],\"resources\":[\"resource-ldap\"],\"propagationStatuses\":[],\"roles\":[],\"dynRoles\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"plainAttrs\":[]}'/>\n+  <AnyTemplateSyncTask id=\"2\" syncTask_id=\"11\" anyType_name=\"GROUP\"\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[{\"schema\":\"show\",\"readonly\":false,\"values\":[\"true\"]}]}'/>\n   <SyncTask_actionsClassNames SyncTask_id=\"11\" actionClassName=\"org.apache.syncope.core.provisioning.java.sync.LDAPMembershipSyncActions\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"12\" name=\"VirAttrCache test\" resource_name=\"resource-csv\"\n         destinationRealm_id=\"1\" performCreate=\"0\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"0\" fullReconciliation=\"1\"\n@@ -1092,10 +1092,10 @@ under the License.\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"24\" name=\"CSV Task (update matching; provision unmatching)\" resource_name=\"resource-csv\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n-  <AnyTemplate id=\"3\" syncTask_id=\"24\" anyType_name=\"USER\"\n-               template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"roles\":[],\"dynRoles\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"plainAttrs\":[{\"schema\":\"firstname\",\"readonly\":false,\"values\":[\"\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]}]}'/>\n-  <AnyTemplate id=\"4\" syncTask_id=\"24\" anyType_name=\"GROUP\"\n-               template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n+  <AnyTemplateSyncTask id=\"3\" syncTask_id=\"24\" anyType_name=\"USER\"\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"roles\":[],\"dynRoles\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"plainAttrs\":[{\"schema\":\"firstname\",\"readonly\":false,\"values\":[\"\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]}]}'/>\n+  <AnyTemplateSyncTask id=\"4\" syncTask_id=\"24\" anyType_name=\"GROUP\"\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"25\" name=\"CSV (unlink matching; ignore unmatching)\" resource_name=\"resource-csv\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         unmatchingRule=\"IGNORE\" matchingRule=\"UNLINK\"/>"},{"sha":"01464a74e71ea0b489b59777396a6a53f0532516","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/LogicActions.java","status":"renamed","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FLogicActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FLogicActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FLogicActions.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -22,12 +22,19 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n \n /**\n- * Provides logic for transforming any object, received as input by RESTful methods, before any internal\n- * processing logic takes place.\n+ * Interface for actions to be performed during business logic execution.\n  */\n-public interface AnyTransformer {\n+public interface LogicActions {\n \n-    <T extends AnyTO> T transform(T input);\n+    <A extends AnyTO> A beforeCreate(A input);\n \n-    <T extends AnyMod> T transform(T input);\n+    <A extends AnyTO> A afterCreate(A input);\n+\n+    <M extends AnyMod> M beforeUpdate(M input);\n+\n+    <A extends AnyTO> A afterUpdate(A input);\n+\n+    <A extends AnyTO> A beforeDelete(A input);\n+\n+    <A extends AnyTO> A afterDelete(A input);\n }","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AnyTransformer.java"},{"sha":"8f34331a1d97a1db80086378bd073407b1e7d970","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/sync/PushActions.java","status":"modified","additions":31,"deletions":21,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FPushActions.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -22,7 +22,7 @@\n import org.quartz.JobExecutionException;\n \n /**\n- * Interface for actions to be performed during PushJob execution.\n+ * Interface for actions to be performed during push.\n  * <br/>\n  * All methods can throw {@link IgnoreProvisionException} to make the current any ignored by the push process.\n  */\n@@ -31,124 +31,134 @@ public interface PushActions extends ProvisioningActions {\n     /**\n      * Action to be executed before to assign (link & provision) a synchronized any object to the resource.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any any object to be created.\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> T beforeAssign(\n+    <A extends Any<?, ?, ?>> A beforeAssign(\n             ProvisioningProfile<?, ?> profile,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before to provision a synchronized any object to the resource.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any any object to be created.\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> T beforeProvision(\n+    <A extends Any<?, ?, ?>> A beforeProvision(\n             ProvisioningProfile<?, ?> profile,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before to update a synchronized any object on the resource.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any any object to be updated.\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> T beforeUpdate(\n+    <A extends Any<?, ?, ?>> A beforeUpdate(\n             ProvisioningProfile<?, ?> profile,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before to link a synchronized any object to the resource.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any any object to be created.\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> T beforeLink(\n+    <A extends Any<?, ?, ?>> A beforeLink(\n             ProvisioningProfile<?, ?> profile,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before to unlink a synchronized any object from the resource.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any any object to be created.\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> T beforeUnlink(\n+    <A extends Any<?, ?, ?>> A beforeUnlink(\n             ProvisioningProfile<?, ?> profile,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before to unassign a synchronized any object from the resource.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any any object to be created.\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> T beforeUnassign(\n+    <A extends Any<?, ?, ?>> A beforeUnassign(\n             ProvisioningProfile<?, ?> profile,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before to unassign a synchronized any object from the resource.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any any object to be created.\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> T beforeDeprovision(\n+    <A extends Any<?, ?, ?>> A beforeDeprovision(\n             ProvisioningProfile<?, ?> profile,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before delete a synchronized any object locally and from the resource.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any any object to be created.\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> T beforeDelete(\n+    <A extends Any<?, ?, ?>> A beforeDelete(\n             ProvisioningProfile<?, ?> profile,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed after any object push goes on error.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any synchronized any object.\n      * @param result operation result.\n      * @param error error being reported\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> void onError(\n+    <A extends Any<?, ?, ?>> void onError(\n             ProvisioningProfile<?, ?> profile,\n-            T any,\n+            A any,\n             ProvisioningResult result,\n             Exception error) throws JobExecutionException;\n \n     /**\n      * Action to be executed after each local any object push.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any synchronized any object.\n      * @param result operation result.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> void after(\n+    <A extends Any<?, ?, ?>> void after(\n             ProvisioningProfile<?, ?> profile,\n-            T any,\n+            A any,\n             ProvisioningResult result) throws JobExecutionException;\n }"},{"sha":"6638c427e0a1877b0a43ca2bb7751ce75f8c665b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/sync/SyncActions.java","status":"modified","additions":32,"deletions":22,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FSyncActions.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -24,7 +24,7 @@\n import org.quartz.JobExecutionException;\n \n /**\n- * Interface for actions to be performed during SyncJob execution.\n+ * Interface for actions to be performed during synchronization.\n  * <br/>\n  * All methods can throw {@link IgnoreProvisionException} to make the current any object ignored by the synchronization\n  * process.\n@@ -36,129 +36,138 @@ public interface SyncActions extends ProvisioningActions {\n      * User/group is created locally upon synchronization in case of the un-matching rule\n      * {@link org.apache.syncope.common.types.UnmatchingRule#PROVISION} (default un-matching rule) is applied.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the synchronization being executed.\n      * @param delta retrieved synchronization information\n      * @param any any object\n      * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AnyTO> SyncDelta beforeProvision(\n+    <A extends AnyTO> SyncDelta beforeProvision(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before creating (and linking to the resource) a synchronized user / group locally.\n      * User/group is created locally and linked to the synchronized resource upon synchronization in case of the\n      * un-matching rule {@link org.apache.syncope.common.types.UnmatchingRule#ASSIGN} is applied.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the synchronization being executed.\n      * @param delta retrieved synchronization information\n      * @param any any object\n      * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AnyTO> SyncDelta beforeAssign(\n+    <A extends AnyTO> SyncDelta beforeAssign(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before unlinking resource from the synchronized user / group and de-provisioning.\n      * User/group is unlinked and de-provisioned from the synchronized resource upon synchronization in case of the\n      * matching rule {@link org.apache.syncope.common.types.MatchingRule#UNASSIGN} is applied.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the synchronization being executed.\n      * @param delta retrieved synchronization information\n      * @param any any object\n      * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AnyTO> SyncDelta beforeUnassign(\n+    <A extends AnyTO> SyncDelta beforeUnassign(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before de-provisioning action only.\n      * User/group is de-provisioned (without unlinking) from the synchronized resource upon synchronization in case of\n      * the matching rule {@link org.apache.syncope.common.types.MatchingRule#DEPROVISION} is applied.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the synchronization being executed.\n      * @param delta retrieved synchronization information\n      * @param any any object\n      * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AnyTO> SyncDelta beforeDeprovision(\n+    <A extends AnyTO> SyncDelta beforeDeprovision(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before unlinking resource from the synchronized user / group.\n      * User/group is unlinked (without de-provisioning) from the synchronized resource upon synchronization in case of\n      * the matching rule {@link org.apache.syncope.common.types.MatchingRule#UNLINK} is applied.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the synchronization being executed.\n      * @param delta retrieved synchronization information\n      * @param any any object\n      * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AnyTO> SyncDelta beforeUnlink(\n+    <A extends AnyTO> SyncDelta beforeUnlink(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before linking resource to the synchronized user / group.\n      * User/group is linked (without updating) to the synchronized resource upon synchronization in case of\n      * the matching rule {@link org.apache.syncope.common.types.MatchingRule#LINK} is applied.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the synchronization being executed.\n      * @param delta retrieved synchronization information\n      * @param any any object\n      * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AnyTO> SyncDelta beforeLink(\n+    <A extends AnyTO> SyncDelta beforeLink(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before to update a synchronized user / group locally.\n      * User/group is updated upon synchronization in case of the matching rule\n      * {@link org.apache.syncope.common.types.MatchingRule#UPDATE} (default matching rule) is applied.\n      *\n+     * @param <M> concrete any object\n+     * @param <A> any object modifications\n      * @param profile profile of the synchronization being executed.\n      * @param delta retrieved synchronization information\n      * @param any any object\n      * @param anyMod modification\n      * @return synchronization information used for logging and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure.\n      */\n-    <T extends AnyTO, K extends AnyMod> SyncDelta beforeUpdate(\n+    <M extends AnyTO, A extends AnyMod> SyncDelta beforeUpdate(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            T any,\n-            K anyMod)\n+            M any,\n+            A anyMod)\n             throws JobExecutionException;\n \n     /**\n      * Action to be executed before to delete a synchronized user / group locally.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the synchronization being executed.\n      * @param delta retrieved synchronization information\n      * @param any any object to be deleted\n      * @return synchronization information used for logging and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AnyTO> SyncDelta beforeDelete(\n+    <A extends AnyTO> SyncDelta beforeDelete(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed when user / group synchronization goes on error.\n@@ -179,16 +188,17 @@ void onError(\n     /**\n      * Action to be executed after each local user / group synchronization.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the synchronization being executed.\n-     * @param delta retrieved synchronization information (may be modified by\n-     * 'beforeProvision/beforeUpdate/beforeDelete')\n+     * @param delta retrieved synchronization information (may be modified by beforeProvision / beforeUpdate /\n+     * beforeDelete)\n      * @param any any object\n      * @param result global synchronization results at the current synchronization step\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AnyTO> void after(\n+    <A extends AnyTO> void after(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            T any,\n+            A any,\n             ProvisioningResult result) throws JobExecutionException;\n }"},{"sha":"a7ddf71fbcf9834e9c00e48d2180f7bf7fb47fc2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultLogicActions.java","status":"renamed","additions":24,"deletions":7,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultLogicActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultLogicActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultLogicActions.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -20,20 +20,37 @@\n \n import org.apache.syncope.common.lib.mod.AnyMod;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.core.provisioning.api.AnyTransformer;\n+import org.apache.syncope.core.provisioning.api.LogicActions;\n \n-/**\n- * Default empty implementation returning received input as result.\n- */\n-public class DefaultAnyTransformer implements AnyTransformer {\n+public class DefaultLogicActions implements LogicActions {\n+\n+    @Override\n+    public <A extends AnyTO> A beforeCreate(final A input) {\n+        return input;\n+    }\n+\n+    @Override\n+    public <A extends AnyTO> A afterCreate(final A input) {\n+        return input;\n+    }\n+\n+    @Override\n+    public <M extends AnyMod> M beforeUpdate(final M input) {\n+        return input;\n+    }\n+\n+    @Override\n+    public <A extends AnyTO> A afterUpdate(final A input) {\n+        return input;\n+    }\n \n     @Override\n-    public <T extends AnyTO> T transform(final T input) {\n+    public <A extends AnyTO> A beforeDelete(final A input) {\n         return input;\n     }\n \n     @Override\n-    public <T extends AnyMod> T transform(final T input) {\n+    public <A extends AnyTO> A afterDelete(final A input) {\n         return input;\n     }\n ","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyTransformer.java"},{"sha":"433b909fc14a52dd94e46837dfa906e6f12c949a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -129,9 +129,7 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n             AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getRightKey());\n \n             if (otherEnd == null) {\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n-                }\n+                LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n             } else {\n                 ARelationship relationship = null;\n                 if (anyObject.getKey() != null) {\n@@ -152,9 +150,7 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n             Group group = groupDAO.find(membershipTO.getRightKey());\n \n             if (group == null) {\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Ignoring invalid group \" + membershipTO.getGroupName());\n-                }\n+                LOG.debug(\"Ignoring invalid group \" + membershipTO.getGroupName());\n             } else {\n                 AMembership membership = null;\n                 if (anyObject.getKey() != null) {"},{"sha":"909b05d67282362f291e26161261ac58c579b4ab","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -81,7 +81,7 @@ public Group create(final Group group, final GroupTO groupTO) {\n             group.setName(groupTO.getName());\n         }\n \n-        // attributes, derived attributes, virtual attributes and resources\n+        // realm, attributes, derived attributes, virtual attributes and resources\n         fill(group, groupTO, anyUtilsFactory.getInstance(AnyTypeKind.GROUP), scce);\n \n         // owner"},{"sha":"af7f0a023937ac48623f7073d6cef77247a6a180","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java","status":"modified","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -18,20 +18,37 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import java.util.Map;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.misc.TemplateUtils;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplateRealm;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.provisioning.api.data.RealmDataBinder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class RealmDataBinderImpl implements RealmDataBinder {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(RealmDataBinder.class);\n+\n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n     @Autowired\n     private RealmDAO realmDAO;\n \n@@ -41,6 +58,38 @@ public class RealmDataBinderImpl implements RealmDataBinder {\n     @Autowired\n     private EntityFactory entityFactory;\n \n+    @Autowired\n+    private TemplateUtils templateUtils;\n+\n+    private void setTemplates(final RealmTO realmTO, final Realm realm) {\n+        // validate JEXL expressions from templates and proceed if fine\n+        templateUtils.check(realmTO.getTemplates(), ClientExceptionType.InvalidSyncTask);\n+        for (Map.Entry<String, AnyTO> entry : realmTO.getTemplates().entrySet()) {\n+            AnyType type = anyTypeDAO.find(entry.getKey());\n+            if (type == null) {\n+                LOG.debug(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());\n+            } else {\n+                AnyTemplateRealm anyTemplate = realm.getTemplate(type);\n+                if (anyTemplate == null) {\n+                    anyTemplate = entityFactory.newEntity(AnyTemplateRealm.class);\n+                    anyTemplate.setAnyType(type);\n+                    anyTemplate.setRealm(realm);\n+\n+                    realm.add(anyTemplate);\n+                }\n+                anyTemplate.set(entry.getValue());\n+            }\n+        }\n+        // remove all templates not contained in the TO\n+        CollectionUtils.filter(realm.getTemplates(), new Predicate<AnyTemplate>() {\n+\n+            @Override\n+            public boolean evaluate(final AnyTemplate anyTemplate) {\n+                return realmTO.getTemplates().containsKey(anyTemplate.getAnyType().getKey());\n+            }\n+        });\n+    }\n+\n     @Override\n     public Realm create(final String parentPath, final RealmTO realmTO) {\n         Realm realm = entityFactory.newEntity(Realm.class);\n@@ -55,6 +104,10 @@ public Realm create(final String parentPath, final RealmTO realmTO) {\n             realm.setAccountPolicy((AccountPolicy) policyDAO.find(realmTO.getAccountPolicy()));\n         }\n \n+        realm.getActionsClassNames().addAll(realmTO.getActionsClassNames());\n+\n+        setTemplates(realmTO, realm);\n+\n         return realm;\n     }\n \n@@ -69,6 +122,11 @@ public void update(final Realm realm, final RealmTO realmTO) {\n         if (realmTO.getAccountPolicy() != null) {\n             realm.setAccountPolicy((AccountPolicy) policyDAO.find(realmTO.getAccountPolicy()));\n         }\n+\n+        realm.getActionsClassNames().clear();\n+        realm.getActionsClassNames().addAll(realmTO.getActionsClassNames());\n+\n+        setTemplates(realmTO, realm);\n     }\n \n     @Override\n@@ -81,6 +139,11 @@ public RealmTO getRealmTO(final Realm realm) {\n         realmTO.setFullPath(realm.getFullPath());\n         realmTO.setAccountPolicy(realm.getAccountPolicy() == null ? null : realm.getAccountPolicy().getKey());\n         realmTO.setPasswordPolicy(realm.getPasswordPolicy() == null ? null : realm.getPasswordPolicy().getKey());\n+        realmTO.getActionsClassNames().addAll(realm.getActionsClassNames());\n+\n+        for (AnyTemplate template : realm.getTemplates()) {\n+            realmTO.getTemplates().put(template.getAnyType().getKey(), template.get());\n+        }\n \n         return realmTO;\n     }"},{"sha":"32a095b353110cb601eb6b08d6c37fc10ee3e614","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":9,"deletions":52,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -23,22 +23,19 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AbstractProvisioningTaskTO;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.core.misc.TemplateUtils;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n@@ -53,14 +50,14 @@\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtils;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n import org.apache.syncope.core.misc.spring.BeanUtils;\n-import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.AnyFilter;\n-import org.apache.syncope.core.persistence.api.entity.task.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.task.AnyTemplateSyncTask;\n import org.apache.syncope.core.provisioning.java.sync.PushJobDelegate;\n import org.apache.syncope.core.provisioning.java.sync.SyncJobDelegate;\n import org.quartz.Scheduler;\n@@ -99,50 +96,10 @@ public class TaskDataBinderImpl implements TaskDataBinder {\n     private EntityFactory entityFactory;\n \n     @Autowired\n-    private SchedulerFactoryBean scheduler;\n-\n-    private void checkTemplateJEXL(final SyncTaskTO syncTaskTO) {\n-        SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSyncTask);\n-\n-        for (Map.Entry<String, AnyTO> entry : syncTaskTO.getTemplates().entrySet()) {\n-            for (AttrTO attrTO : entry.getValue().getPlainAttrs()) {\n-                if (!attrTO.getValues().isEmpty() && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))) {\n-                    sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n-                }\n-            }\n-\n-            for (AttrTO attrTO : entry.getValue().getVirAttrs()) {\n-                if (!attrTO.getValues().isEmpty() && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))) {\n-                    sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n-                }\n-            }\n-\n-            if (entry.getValue() instanceof UserTO) {\n-                UserTO template = (UserTO) entry.getValue();\n-                if (StringUtils.isNotBlank(template.getUsername())\n-                        && !JexlUtils.isExpressionValid(template.getUsername())) {\n-\n-                    sce.getElements().add(\"Invalid JEXL: \" + template.getUsername());\n-                }\n-                if (StringUtils.isNotBlank(template.getPassword())\n-                        && !JexlUtils.isExpressionValid(template.getPassword())) {\n+    private TemplateUtils templateUtils;\n \n-                    sce.getElements().add(\"Invalid JEXL: \" + template.getPassword());\n-                }\n-            } else if (entry.getValue() instanceof GroupTO) {\n-                GroupTO template = (GroupTO) entry.getValue();\n-                if (StringUtils.isNotBlank(template.getName())\n-                        && !JexlUtils.isExpressionValid(template.getName())) {\n-\n-                    sce.getElements().add(\"Invalid JEXL: \" + template.getName());\n-                }\n-            }\n-        }\n-\n-        if (!sce.isEmpty()) {\n-            throw sce;\n-        }\n-    }\n+    @Autowired\n+    private SchedulerFactoryBean scheduler;\n \n     private void fill(final ProvisioningTask task, final AbstractProvisioningTaskTO taskTO) {\n         if (task instanceof PushTask && taskTO instanceof PushTaskTO) {\n@@ -193,15 +150,15 @@ public boolean evaluate(final AnyFilter anyFilter) {\n                     ? UnmatchingRule.PROVISION : syncTaskTO.getUnmatchingRule());\n \n             // validate JEXL expressions from templates and proceed if fine\n-            checkTemplateJEXL(syncTaskTO);\n+            templateUtils.check(syncTaskTO.getTemplates(), ClientExceptionType.InvalidSyncTask);\n             for (Map.Entry<String, AnyTO> entry : syncTaskTO.getTemplates().entrySet()) {\n                 AnyType type = anyTypeDAO.find(entry.getKey());\n                 if (type == null) {\n                     LOG.debug(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());\n                 } else {\n-                    AnyTemplate anyTemplate = syncTask.getTemplate(type);\n+                    AnyTemplateSyncTask anyTemplate = syncTask.getTemplate(type);\n                     if (anyTemplate == null) {\n-                        anyTemplate = entityFactory.newEntity(AnyTemplate.class);\n+                        anyTemplate = entityFactory.newEntity(AnyTemplateSyncTask.class);\n                         anyTemplate.setAnyType(type);\n                         anyTemplate.setSyncTask(syncTask);\n "},{"sha":"ca801f0727972271ec45622154036f982d9e66a2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -161,9 +161,7 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n             AnyObject anyObject = anyObjectDAO.find(relationshipTO.getRightKey());\n \n             if (anyObject == null) {\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n-                }\n+                LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n             } else {\n                 URelationship relationship = null;\n                 if (user.getKey() != null) {\n@@ -184,9 +182,7 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n             Group group = groupDAO.find(membershipTO.getRightKey());\n \n             if (group == null) {\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Ignoring invalid group \" + membershipTO.getGroupName());\n-                }\n+                LOG.debug(\"Ignoring invalid group \" + membershipTO.getGroupName());\n             } else {\n                 UMembership membership = null;\n                 if (user.getKey() != null) {"},{"sha":"a97a3ca669251c326986a2613bc7e56be8208499","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncResultHandler.java","status":"modified","additions":6,"deletions":24,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -36,7 +36,6 @@\n import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.provisioning.api.AnyTransformer;\n import org.apache.syncope.core.provisioning.api.sync.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.provisioning.api.sync.SyncopeSyncResultHandler;\n@@ -53,9 +52,6 @@ public abstract class AbstractSyncResultHandler extends AbstractSyncopeResultHan\n     @Autowired\n     protected SyncUtils syncUtilities;\n \n-    @Autowired\n-    protected AnyTransformer anyTransformer;\n-\n     protected abstract String getName(AnyTO anyTO);\n \n     protected abstract AnyTO doCreate(AnyTO anyTO, SyncDelta delta, ProvisioningResult result);\n@@ -115,22 +111,17 @@ protected List<ProvisioningResult> assign(\n         result.setOperation(ResourceOperation.CREATE);\n         result.setAnyType(provision.getAnyType().getKey());\n         result.setStatus(ProvisioningResult.Status.SUCCESS);\n-\n-        // Any transformation (if configured)\n-        AnyTO transformed = anyTransformer.transform(anyTO);\n-        LOG.debug(\"Transformed: {}\", transformed);\n-\n-        result.setName(getName(transformed));\n+        result.setName(getName(anyTO));\n \n         if (profile.isDryRun()) {\n             result.setKey(0L);\n         } else {\n             SyncDelta actionedDelta = delta;\n             for (SyncActions action : profile.getActions()) {\n-                actionedDelta = action.beforeAssign(this.getProfile(), actionedDelta, transformed);\n+                actionedDelta = action.beforeAssign(this.getProfile(), actionedDelta, anyTO);\n             }\n \n-            create(transformed, actionedDelta, UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), result);\n+            create(anyTO, actionedDelta, UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), result);\n         }\n \n         return Collections.singletonList(result);\n@@ -147,26 +138,21 @@ protected List<ProvisioningResult> provision(\n \n         AnyTO anyTO = connObjectUtils.getAnyTO(delta.getObject(), profile.getTask(), provision, anyUtils);\n \n-        // Any transformation (if configured)\n-        AnyTO transformed = anyTransformer.transform(anyTO);\n-        LOG.debug(\"Transformed: {}\", transformed);\n-\n         ProvisioningResult result = new ProvisioningResult();\n         result.setOperation(ResourceOperation.CREATE);\n         result.setAnyType(provision.getAnyType().getKey());\n         result.setStatus(ProvisioningResult.Status.SUCCESS);\n-\n-        result.setName(getName(transformed));\n+        result.setName(getName(anyTO));\n \n         if (profile.isDryRun()) {\n             result.setKey(0L);\n         } else {\n             SyncDelta actionedDelta = delta;\n             for (SyncActions action : profile.getActions()) {\n-                actionedDelta = action.beforeProvision(this.getProfile(), actionedDelta, transformed);\n+                actionedDelta = action.beforeProvision(this.getProfile(), actionedDelta, anyTO);\n             }\n \n-            create(transformed, actionedDelta, UnmatchingRule.toEventName(UnmatchingRule.PROVISION), result);\n+            create(anyTO, actionedDelta, UnmatchingRule.toEventName(UnmatchingRule.PROVISION), result);\n         }\n \n         return Collections.<ProvisioningResult>singletonList(result);\n@@ -264,10 +250,6 @@ protected List<ProvisioningResult> update(final SyncDelta delta, final List<Long\n                                 provision,\n                                 getAnyUtils());\n \n-                        // Attribute value transformation (if configured)\n-                        AnyMod actual = anyTransformer.transform(anyMod);\n-                        LOG.debug(\"Transformed: {}\", actual);\n-\n                         for (SyncActions action : profile.getActions()) {\n                             workingDelta = action.beforeUpdate(this.getProfile(), workingDelta, before, anyMod);\n                         }"},{"sha":"ad08a92e1364808e9af0f7426917c7f62c21b078","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/DBPasswordSyncActions.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -59,10 +59,10 @@ public class DBPasswordSyncActions extends DefaultSyncActions {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <T extends AnyTO> SyncDelta beforeProvision(\n+    public <A extends AnyTO> SyncDelta beforeProvision(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final T any) throws JobExecutionException {\n+            final A any) throws JobExecutionException {\n \n         if (any instanceof UserTO) {\n             String password = ((UserTO) any).getPassword();\n@@ -74,11 +74,11 @@ public <T extends AnyTO> SyncDelta beforeProvision(\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <T extends AnyTO, K extends AnyMod> SyncDelta beforeUpdate(\n+    public <A extends AnyTO, M extends AnyMod> SyncDelta beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final T any,\n-            final K anyMod) throws JobExecutionException {\n+            final A any,\n+            final M anyMod) throws JobExecutionException {\n \n         if (anyMod instanceof UserMod) {\n             String modPassword = ((UserMod) anyMod).getPassword();\n@@ -123,10 +123,10 @@ public boolean evaluate(final ConnConfProperty property) {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <T extends AnyTO> void after(\n+    public <A extends AnyTO> void after(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final T any,\n+            final A any,\n             final ProvisioningResult result) throws JobExecutionException {\n \n         if (any instanceof UserTO && encodedPassword != null && cipher != null) {"},{"sha":"a99b3e5417fa9c9791df732d0a4a963c1aaa4956","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/DefaultPushActions.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -34,58 +34,58 @@ public void beforeAll(final ProvisioningProfile<?, ?> profile) throws JobExecuti\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> T beforeAssign(final ProvisioningProfile<?, ?> profile, final T any)\n+    public <A extends Any<?, ?, ?>> A beforeAssign(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> T beforeProvision(final ProvisioningProfile<?, ?> profile, final T any)\n+    public <A extends Any<?, ?, ?>> A beforeProvision(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> T beforeLink(final ProvisioningProfile<?, ?> profile, final T any)\n+    public <A extends Any<?, ?, ?>> A beforeLink(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> T beforeUnassign(final ProvisioningProfile<?, ?> profile, final T any)\n+    public <A extends Any<?, ?, ?>> A beforeUnassign(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> T beforeDeprovision(final ProvisioningProfile<?, ?> profile, final T any)\n+    public <A extends Any<?, ?, ?>> A beforeDeprovision(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> T beforeUnlink(final ProvisioningProfile<?, ?> profile, final T any)\n+    public <A extends Any<?, ?, ?>> A beforeUnlink(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> void onError(\n-            final ProvisioningProfile<?, ?> profile, final T any, final ProvisioningResult result,\n+    public <A extends Any<?, ?, ?>> void onError(\n+            final ProvisioningProfile<?, ?> profile, final A any, final ProvisioningResult result,\n             final Exception error) throws JobExecutionException {\n \n         // do nothing\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> void after(\n-            final ProvisioningProfile<?, ?> profile, final T any, final ProvisioningResult result)\n+    public <A extends Any<?, ?, ?>> void after(\n+            final ProvisioningProfile<?, ?> profile, final A any, final ProvisioningResult result)\n             throws JobExecutionException {\n \n         // do nothing"},{"sha":"668584b43793c998afdc376b88ab6d05b547dc29","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/DefaultSyncActions.java","status":"modified","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultSyncActions.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -36,66 +36,66 @@ public void beforeAll(final ProvisioningProfile<?, ?> profile) throws JobExecuti\n     }\n \n     @Override\n-    public <T extends AnyTO, K extends AnyMod> SyncDelta beforeUpdate(\n+    public <A extends AnyTO, M extends AnyMod> SyncDelta beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final T any,\n-            final K anyMod) throws JobExecutionException {\n+            final A any,\n+            final M anyMod) throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <T extends AnyTO> SyncDelta beforeDelete(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any)\n+    public <A extends AnyTO> SyncDelta beforeDelete(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <T extends AnyTO> SyncDelta beforeAssign(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any)\n+    public <A extends AnyTO> SyncDelta beforeAssign(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <T extends AnyTO> SyncDelta beforeProvision(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any)\n+    public <A extends AnyTO> SyncDelta beforeProvision(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <T extends AnyTO> SyncDelta beforeLink(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any)\n+    public <A extends AnyTO> SyncDelta beforeLink(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <T extends AnyTO> SyncDelta beforeUnassign(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any)\n+    public <A extends AnyTO> SyncDelta beforeUnassign(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <T extends AnyTO> SyncDelta beforeDeprovision(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any)\n+    public <A extends AnyTO> SyncDelta beforeDeprovision(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <T extends AnyTO> SyncDelta beforeUnlink(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any)\n+    public <A extends AnyTO> SyncDelta beforeUnlink(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n             throws JobExecutionException {\n \n         return delta;\n@@ -108,8 +108,8 @@ public void onError(\n     }\n \n     @Override\n-    public <T extends AnyTO> void after(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any,\n+    public <A extends AnyTO> void after(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any,\n             final ProvisioningResult result)\n             throws JobExecutionException {\n     }"},{"sha":"cf4fb172b4e8a0c8d4b50a2e24501d3aec172f63","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/LDAPMembershipSyncActions.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -129,9 +129,9 @@ public boolean evaluate(final ConnConfProperty property) {\n      * {@inheritDoc}\n      */\n     @Override\n-    public <T extends AnyTO, K extends AnyMod> SyncDelta beforeUpdate(\n+    public <A extends AnyTO, M extends AnyMod> SyncDelta beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n-            final SyncDelta delta, final T any, final K anyMod) throws JobExecutionException {\n+            final SyncDelta delta, final A any, final M anyMod) throws JobExecutionException {\n \n         if (any instanceof GroupTO) {\n             // search for all users assigned to given group\n@@ -293,10 +293,10 @@ protected void synchronizeMemberships(\n      * {@inheritDoc}\n      */\n     @Override\n-    public <T extends AnyTO> void after(\n+    public <A extends AnyTO> void after(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final T any,\n+            final A any,\n             final ProvisioningResult result) throws JobExecutionException {\n \n         if (!(profile.getTask() instanceof SyncTask)) {"},{"sha":"b35e42fe86e9aa94fbabfa34974f5f717e8c9d26","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/LDAPPasswordSyncActions.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPPasswordSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPPasswordSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPPasswordSyncActions.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -53,10 +53,10 @@ public class LDAPPasswordSyncActions extends DefaultSyncActions {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <T extends AnyTO> SyncDelta beforeProvision(\n+    public <A extends AnyTO> SyncDelta beforeProvision(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final T any) throws JobExecutionException {\n+            final A any) throws JobExecutionException {\n \n         if (any instanceof UserTO) {\n             String password = ((UserTO) any).getPassword();\n@@ -68,11 +68,11 @@ public <T extends AnyTO> SyncDelta beforeProvision(\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <T extends AnyTO, K extends AnyMod> SyncDelta beforeUpdate(\n+    public <A extends AnyTO, M extends AnyMod> SyncDelta beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final T any,\n-            final K anyMod) throws JobExecutionException {\n+            final A any,\n+            final M anyMod) throws JobExecutionException {\n \n         if (anyMod instanceof UserMod) {\n             String modPassword = ((UserMod) anyMod).getPassword();\n@@ -101,10 +101,10 @@ private void parseEncodedPassword(final String password) {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <T extends AnyTO> void after(\n+    public <A extends AnyTO> void after(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final T any,\n+            final A any,\n             final ProvisioningResult result) throws JobExecutionException {\n \n         if (any instanceof UserTO && encodedPassword != null && cipher != null) {"},{"sha":"3f19afc76263bccb208d4e46c8d7e3ed48095d92","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncJobDelegate.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -107,7 +107,7 @@ protected String doExecuteProvisioning(\n \n                 actions.add(syncActions);\n             } catch (Exception e) {\n-                LOG.info(\"Class '{}' not found\", className, e);\n+                LOG.warn(\"Class '{}' not found\", className, e);\n             }\n         }\n "},{"sha":"1544969b3822cce6b17c93eaeb9146fbcafdf7a7","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DoubleValueLogicActions.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDoubleValueLogicActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDoubleValueLogicActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDoubleValueLogicActions.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -24,17 +24,17 @@\n import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.core.provisioning.api.AnyTransformer;\n+import org.apache.syncope.core.provisioning.java.DefaultLogicActions;\n \n /**\n  * Class for integration tests: transform (by making it double) any attribute value for defined schema.\n  */\n-public class DoubleValueAnyTransformer implements AnyTransformer {\n+public class DoubleValueLogicActions extends DefaultLogicActions {\n \n     private static final String NAME = \"makeItDouble\";\n \n     @Override\n-    public <T extends AnyTO> T transform(final T input) {\n+    public <A extends AnyTO> A beforeCreate(final A input) {\n         for (AttrTO attr : input.getPlainAttrs()) {\n             if (NAME.equals(attr.getSchema())) {\n                 List<String> values = new ArrayList<>(attr.getValues().size());\n@@ -54,7 +54,7 @@ public <T extends AnyTO> T transform(final T input) {\n     }\n \n     @Override\n-    public <T extends AnyMod> T transform(final T input) {\n+    public <M extends AnyMod> M beforeUpdate(final M input) {\n         for (AttrMod attr : input.getPlainAttrsToUpdate()) {\n             if (NAME.equals(attr.getSchema())) {\n                 List<String> values = new ArrayList<>(attr.getValuesToBeAdded().size());","previous_filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DoubleValueAnyTransformer.java"},{"sha":"9852612f3ed6c58908c59c334e1564441b0d4174","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestSyncActions.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSyncActions.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -38,8 +38,8 @@ public class TestSyncActions extends DefaultSyncActions {\n     private int counter = 0;\n \n     @Override\n-    public <T extends AnyTO> SyncDelta beforeProvision(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any)\n+    public <A extends AnyTO> SyncDelta beforeProvision(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n             throws JobExecutionException {\n \n         AttrTO attrTO = null;\n@@ -61,8 +61,8 @@ public <T extends AnyTO> SyncDelta beforeProvision(\n     }\n \n     @Override\n-    public <T extends AnyTO> SyncDelta beforeAssign(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any)\n+    public <A extends AnyTO> SyncDelta beforeAssign(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n             throws JobExecutionException {\n \n         if (any instanceof UserTO && \"test2\".equals(UserTO.class.cast(any).getUsername())) {\n@@ -73,11 +73,11 @@ public <T extends AnyTO> SyncDelta beforeAssign(\n     }\n \n     @Override\n-    public <T extends AnyTO, K extends AnyMod> SyncDelta beforeUpdate(\n+    public <A extends AnyTO, M extends AnyMod> SyncDelta beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final T any,\n-            final K anyMod) throws JobExecutionException {\n+            final A any,\n+            final M anyMod) throws JobExecutionException {\n \n         anyMod.getPlainAttrsToRemove().add(\"fullname\");\n "},{"sha":"4af398a1f0f4e13239122397f30eb3530df92a61","filename":"fit/core-reference/src/main/resources/logic.properties","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flogic.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flogic.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flogic.properties?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -14,5 +14,4 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-anyTransformer=org.apache.syncope.fit.core.reference.DoubleValueAnyTransformer\n logicInvocationHandler=org.apache.syncope.core.logic.LogicInvocationHandler"},{"sha":"ccb24ab36e732d23c1a0b3b5c50dec20f47d8172","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -491,12 +491,12 @@ public void delete() {\n \n         userTO = createUser(userTO);\n \n-        long id = userTO.getKey();\n+        long key = userTO.getKey();\n \n-        userTO = deleteUser(id);\n+        userTO = deleteUser(key);\n \n         assertNotNull(userTO);\n-        assertEquals(id, userTO.getKey());\n+        assertEquals(key, userTO.getKey());\n         assertTrue(userTO.getPlainAttrs().isEmpty());\n \n         // check for propagation result\n@@ -2070,7 +2070,13 @@ public void deprovisionUnlinked() {\n \n     @Test\n     public void issueSYNCOPE420() {\n+        RealmTO realm = realmService.list(\"/even/two\").iterator().next();\n+        assertNotNull(realm);\n+        realm.getActionsClassNames().add(DoubleValueLogicActions.class.getName());\n+        realmService.update(realm);\n+\n         UserTO userTO = getUniqueSampleTO(\"syncope420@syncope.apache.org\");\n+        userTO.setRealm(realm.getFullPath());\n         userTO.getPlainAttrs().add(attrTO(\"makeItDouble\", \"3\"));\n \n         userTO = createUser(userTO);"},{"sha":"6c691ccab62fae8ddf74262990bf4ee1cd1eb2d4","filename":"installer/src/main/java/org/apache/syncope/installer/processes/BaseProcess.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00988759750f53f6737ef7d50e7faf63192257fa/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FBaseProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00988759750f53f6737ef7d50e7faf63192257fa/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FBaseProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FBaseProcess.java?ref=00988759750f53f6737ef7d50e7faf63192257fa","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.installer.processes;\n \n-import static org.apache.syncope.installer.processes.ArchetypeProcess.PROPERTIES;\n-\n import com.izforge.izpack.panels.process.AbstractUIProcessHandler;\n import java.io.IOException;\n import java.io.InputStream;"}]}