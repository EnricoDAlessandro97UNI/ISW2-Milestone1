{"sha":"5c6c6d22847ec2c95169632ff8138f5749cdf34a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjVjNmM2ZDIyODQ3ZWMyYzk1MTY5NjMyZmY4MTM4ZjU3NDljZGYzNGE=","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2019-11-29T18:09:15Z"},"committer":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2019-11-29T18:09:15Z"},"message":"now transformed connObjectKey is taken into account while pulling","tree":{"sha":"ee3e0abaa394f942110839bd783dd036099cd339","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ee3e0abaa394f942110839bd783dd036099cd339"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5c6c6d22847ec2c95169632ff8138f5749cdf34a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5c6c6d22847ec2c95169632ff8138f5749cdf34a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5c6c6d22847ec2c95169632ff8138f5749cdf34a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5c6c6d22847ec2c95169632ff8138f5749cdf34a/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"c1502d5db7c8d3d4bca05380627108986738dc32","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c1502d5db7c8d3d4bca05380627108986738dc32","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c1502d5db7c8d3d4bca05380627108986738dc32"}],"stats":{"total":21,"additions":11,"deletions":10},"files":[{"sha":"bb7c880a541522c29dba0a730482e9ccaf547e9d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/InboundMatcher.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c6c6d22847ec2c95169632ff8138f5749cdf34a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c6c6d22847ec2c95169632ff8138f5749cdf34a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java?ref=5c6c6d22847ec2c95169632ff8138f5749cdf34a","patch":"@@ -235,37 +235,37 @@ public List<PullMatch> matchByConnObjectKeyValue(\n         if (intAttrName.getField() != null) {\n             switch (intAttrName.getField()) {\n                 case \"key\":\n-                    Optional.ofNullable(anyUtils.dao().find(connObjectKeyValue)).ifPresent(anys::add);\n+                    Optional.ofNullable(anyUtils.dao().find(finalConnObjectKeyValue)).ifPresent(anys::add);\n                     break;\n \n                 case \"username\":\n                     if (anyTypeKind == AnyTypeKind.USER && ignoreCaseMatch) {\n                         AnyCond cond = new AnyCond(AttributeCond.Type.IEQ);\n                         cond.setSchema(\"username\");\n-                        cond.setExpression(connObjectKeyValue);\n+                        cond.setExpression(finalConnObjectKeyValue);\n                         anys.addAll(searchDAO.search(SearchCond.getLeafCond(cond), AnyTypeKind.USER));\n                     } else {\n-                        Optional.ofNullable(userDAO.findByUsername(connObjectKeyValue)).ifPresent(anys::add);\n+                        Optional.ofNullable(userDAO.findByUsername(finalConnObjectKeyValue)).ifPresent(anys::add);\n                     }\n                     break;\n \n                 case \"name\":\n                     if (anyTypeKind == AnyTypeKind.GROUP && ignoreCaseMatch) {\n                         AnyCond cond = new AnyCond(AttributeCond.Type.IEQ);\n                         cond.setSchema(\"name\");\n-                        cond.setExpression(connObjectKeyValue);\n+                        cond.setExpression(finalConnObjectKeyValue);\n                         anys.addAll(searchDAO.search(SearchCond.getLeafCond(cond), AnyTypeKind.GROUP));\n                     } else {\n-                        Optional.ofNullable(groupDAO.findByName(connObjectKeyValue)).ifPresent(anys::add);\n+                        Optional.ofNullable(groupDAO.findByName(finalConnObjectKeyValue)).ifPresent(anys::add);\n                     }\n \n                     if (anyTypeKind == AnyTypeKind.ANY_OBJECT && ignoreCaseMatch) {\n                         AnyCond cond = new AnyCond(AttributeCond.Type.IEQ);\n                         cond.setSchema(\"name\");\n-                        cond.setExpression(connObjectKeyValue);\n+                        cond.setExpression(finalConnObjectKeyValue);\n                         anys.addAll(searchDAO.search(SearchCond.getLeafCond(cond), AnyTypeKind.ANY_OBJECT));\n                     } else {\n-                        Optional.ofNullable(anyObjectDAO.findByName(connObjectKeyValue)).ifPresent(anys::add);\n+                        Optional.ofNullable(anyObjectDAO.findByName(finalConnObjectKeyValue)).ifPresent(anys::add);\n                     }\n                     break;\n \n@@ -278,10 +278,10 @@ public List<PullMatch> matchByConnObjectKeyValue(\n                             ? anyUtils.newPlainAttrUniqueValue()\n                             : anyUtils.newPlainAttrValue();\n                     try {\n-                        value.parseValue((PlainSchema) intAttrName.getSchema(), connObjectKeyValue);\n+                        value.parseValue((PlainSchema) intAttrName.getSchema(), finalConnObjectKeyValue);\n                     } catch (ParsingValidationException e) {\n                         LOG.error(\"While parsing provided {} {}\", Uid.NAME, value, e);\n-                        value.setStringValue(connObjectKeyValue);\n+                        value.setStringValue(finalConnObjectKeyValue);\n                     }\n \n                     if (intAttrName.getSchema().isUniqueConstraint()) {\n@@ -296,7 +296,7 @@ public List<PullMatch> matchByConnObjectKeyValue(\n \n                 case DERIVED:\n                     anys.addAll(anyUtils.dao().findByDerAttrValue((DerSchema) intAttrName.getSchema(),\n-                            connObjectKeyValue, ignoreCaseMatch));\n+                            finalConnObjectKeyValue, ignoreCaseMatch));\n                     break;\n \n                 default:\n@@ -459,3 +459,4 @@ public List<Realm> match(final SyncDelta syncDelta, final OrgUnit orgUnit) {\n         return result;\n     }\n }\n+"}]}