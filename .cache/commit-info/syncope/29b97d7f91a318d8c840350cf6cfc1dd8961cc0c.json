{"sha":"29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI5Yjk3ZDdmOTFhMzE4ZDhjODQwMzUwY2Y2Y2ZjMWRkODk2MWNjMGM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-17T12:15:51Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-17T12:16:09Z"},"message":"[SYNCOPE-1077] Applying some ES best practices","tree":{"sha":"e7186e3cad6245fca4a4943f6afa411698b4b4e8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e7186e3cad6245fca4a4943f6afa411698b4b4e8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"cbd10830915ce423dfce7ce4b555d01f00e51300","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cbd10830915ce423dfce7ce4b555d01f00e51300","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cbd10830915ce423dfce7ce4b555d01f00e51300"}],"stats":{"total":239,"additions":162,"deletions":77},"files":[{"sha":"4e39205122bab94324dbd4a39b134ffe6e96bbf1","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionPanel.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.wicket.markup.html.form;\n \n-import static org.apache.wicket.Component.RENDER;\n-\n import java.io.Serializable;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;"},{"sha":"c7839ca239a2d11982e6c840d7de1cfe839ef061","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.widgets;\n \n-import static org.apache.wicket.Component.ENABLE;\n-\n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;\n import java.io.Serializable;"},{"sha":"448aca616c18ea7350b5ba3ea02db4d24d9c87e0","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -45,7 +45,7 @@ public interface AnyObjectDAO extends AnyDAO<AnyObject> {\n \n     List<Group> findDynGroups(AnyObject anyObject);\n \n-    List<ARelationship> findAllARelationships(AnyObject anyObject);\n+    List<ARelationship> findAllRelationships(AnyObject anyObject);\n \n     Collection<Group> findAllGroups(AnyObject anyObject);\n "},{"sha":"c22112f3a4ad03ddf6cdaf2a190bf6b28e21626f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import static org.apache.syncope.core.persistence.jpa.dao.AbstractDAO.LOG;\n-\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -179,7 +177,7 @@ public AnyObject authFindByName(final String name) {\n     }\n \n     @Override\n-    public List<ARelationship> findAllARelationships(final AnyObject anyObject) {\n+    public List<ARelationship> findAllRelationships(final AnyObject anyObject) {\n         TypedQuery<ARelationship> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAARelationship.class.getSimpleName()\n                 + \" e WHERE e.rightEnd=:anyObject OR e.leftEnd=:anyObject\", ARelationship.class);"},{"sha":"f7da11781c3e289353d892ccfaa0a0d8445b80ab","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import static org.apache.syncope.core.persistence.jpa.dao.AbstractDAO.LOG;\n-\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;"},{"sha":"bea305aed20447aa3db5107b60b8a1b33753ea5b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import static org.apache.syncope.core.persistence.jpa.dao.AbstractDAO.LOG;\n-\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;"},{"sha":"f71e59c59b42ee332d88eba2303562f2a8476a80","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/event/AnyCreatedUpdatedEvent.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fevent%2FAnyCreatedUpdatedEvent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fevent%2FAnyCreatedUpdatedEvent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fevent%2FAnyCreatedUpdatedEvent.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.spring.event;\n \n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.springframework.context.ApplicationEvent;\n \n public class AnyCreatedUpdatedEvent<A extends Any<?>> extends ApplicationEvent {\n@@ -27,13 +28,20 @@\n \n     private final A any;\n \n+    private final String domain;\n+\n     public AnyCreatedUpdatedEvent(final Object source, final A any) {\n         super(source);\n         this.any = any;\n+        this.domain = AuthContextUtils.getDomain();\n     }\n \n     public A getAny() {\n         return any;\n     }\n \n+    public String getDomain() {\n+        return domain;\n+    }\n+\n }"},{"sha":"8d33609924914a03b1f5379b079c1b4b5f6b0717","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/event/AnyDeletedEvent.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fevent%2FAnyDeletedEvent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fevent%2FAnyDeletedEvent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fevent%2FAnyDeletedEvent.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -19,18 +19,24 @@\n package org.apache.syncope.core.spring.event;\n \n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.springframework.context.ApplicationEvent;\n \n public class AnyDeletedEvent extends ApplicationEvent {\n \n+    private static final long serialVersionUID = 6389886937942135639L;\n+\n     private final AnyTypeKind anyTypeKind;\n \n     private final String anyKey;\n \n+    private final String domain;\n+\n     public AnyDeletedEvent(final Object source, final AnyTypeKind anyTypeKind, final String anyKey) {\n         super(source);\n         this.anyTypeKind = anyTypeKind;\n         this.anyKey = anyKey;\n+        this.domain = AuthContextUtils.getDomain();\n     }\n \n     public AnyTypeKind getAnyTypeKind() {\n@@ -41,4 +47,7 @@ public String getAnyKey() {\n         return anyKey;\n     }\n \n+    public String getDomain() {\n+        return domain;\n+    }\n }"},{"sha":"92d6118c4bdb4f279020a03cc94ab8b3e3cd75ff","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/rest/CamelRoutesRestClient.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FCamelRoutesRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FCamelRoutesRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FCamelRoutesRestClient.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n-import static org.apache.syncope.client.console.rest.BaseRestClient.getService;\n-\n import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.client.console.SyncopeConsoleSession;"},{"sha":"1352f9ef9d288f6aec24be1434a594fd57c156ef","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchIndexManager.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -26,7 +26,6 @@\n import org.elasticsearch.action.delete.DeleteResponse;\n import org.elasticsearch.action.get.GetResponse;\n import org.elasticsearch.action.index.IndexResponse;\n-import org.elasticsearch.action.support.WriteRequest;\n import org.elasticsearch.action.update.UpdateResponse;\n import org.elasticsearch.client.Client;\n import org.slf4j.Logger;\n@@ -35,7 +34,7 @@\n import org.springframework.transaction.event.TransactionalEventListener;\n \n /**\n- * Listen to any create / update and delete in order to keep the Elastsicsearch indexes consistent.\n+ * Listen to any create / update and delete in order to keep the Elasticsearch indexes consistent.\n  */\n public class ElasticsearchIndexManager {\n \n@@ -60,8 +59,8 @@ public void after(final AnyCreatedUpdatedEvent<Any<?>> event) throws IOException\n                     AuthContextUtils.getDomain().toLowerCase(),\n                     event.getAny().getType().getKind().name(),\n                     event.getAny().getKey()).\n+                    setRetryOnConflict(elasticsearchUtils.getRetryOnConflict()).\n                     setDoc(elasticsearchUtils.builder(event.getAny())).\n-                    setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).\n                     get();\n             LOG.debug(\"Index successfully updated for {}: {}\", event.getAny(), response);\n         } else {\n@@ -72,7 +71,6 @@ public void after(final AnyCreatedUpdatedEvent<Any<?>> event) throws IOException\n                     event.getAny().getType().getKind().name(),\n                     event.getAny().getKey()).\n                     setSource(elasticsearchUtils.builder(event.getAny())).\n-                    setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).\n                     get();\n \n             LOG.debug(\"Index successfully created for {}: {}\", event.getAny(), response);\n@@ -87,9 +85,9 @@ public void after(final AnyDeletedEvent event) {\n                 AuthContextUtils.getDomain().toLowerCase(),\n                 event.getAnyTypeKind().name(),\n                 event.getAnyKey()).\n-                setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).\n                 get();\n \n-        LOG.debug(\"Index successfully deleted for {}[{}]: {}\", event.getAnyTypeKind(), event.getAnyKey(), response);\n+        LOG.debug(\"Index successfully deleted for {}[{}]: {}\",\n+                event.getAnyTypeKind(), event.getAnyKey(), response);\n     }\n }"},{"sha":"1ff146ecb2a900348e4950a7a81eccf875c17c3a","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java","status":"modified","additions":25,"deletions":13,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -61,6 +61,8 @@ public class ElasticsearchUtils {\n \n     private int indexMaxResultWindow = 10000;\n \n+    private int retryOnConflict = 5;\n+\n     public void setIndexMaxResultWindow(final int indexMaxResultWindow) {\n         this.indexMaxResultWindow = indexMaxResultWindow;\n     }\n@@ -69,6 +71,14 @@ public int getIndexMaxResultWindow() {\n         return indexMaxResultWindow;\n     }\n \n+    public void setRetryOnConflict(final int retryOnConflict) {\n+        this.retryOnConflict = retryOnConflict;\n+    }\n+\n+    public int getRetryOnConflict() {\n+        return retryOnConflict;\n+    }\n+\n     /**\n      * Returns the builder specialized with content from the provided any.\n      *\n@@ -104,7 +114,7 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n \n             List<Object> relationships = new ArrayList<>();\n             List<Object> relationshipTypes = new ArrayList<>();\n-            for (ARelationship relationship : anyObjectDAO.findAllARelationships(anyObject)) {\n+            for (ARelationship relationship : anyObjectDAO.findAllRelationships(anyObject)) {\n                 relationships.add(relationship.getRightEnd().getKey());\n                 relationshipTypes.add(relationship.getType().getKey());\n             }\n@@ -164,20 +174,22 @@ public Object transform(final AMembership input) {\n             builder = builder.field(\"relationshipTypes\", relationshipTypes);\n         }\n \n-        for (PlainAttr<?> plainAttr : any.getPlainAttrs()) {\n-            List<Object> values = CollectionUtils.collect(plainAttr.getValues(),\n-                    new Transformer<PlainAttrValue, Object>() {\n-\n-                @Override\n-                public Object transform(final PlainAttrValue input) {\n-                    return input.getValue();\n+        if (any.getPlainAttrs() != null) {\n+            for (PlainAttr<?> plainAttr : any.getPlainAttrs()) {\n+                List<Object> values = CollectionUtils.collect(plainAttr.getValues(),\n+                        new Transformer<PlainAttrValue, Object>() {\n+\n+                    @Override\n+                    public Object transform(final PlainAttrValue input) {\n+                        return input.getValue();\n+                    }\n+                }, new ArrayList<>(plainAttr.getValues().size()));\n+                if (plainAttr.getUniqueValue() != null) {\n+                    values.add(plainAttr.getUniqueValue().getValue());\n                 }\n-            }, new ArrayList<>(plainAttr.getValues().size()));\n-            if (plainAttr.getUniqueValue() != null) {\n-                values.add(plainAttr.getUniqueValue().getValue());\n-            }\n \n-            builder = builder.field(plainAttr.getSchema().getKey(), values);\n+                builder = builder.field(plainAttr.getSchema().getKey(), values);\n+            }\n         }\n \n         builder = builder.endObject();"},{"sha":"347e48df23f5b4a62e35c253364982516410385b","filename":"ext/elasticsearch/client-elasticsearch/src/main/resources/elasticsearchClientContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fresources%2FelasticsearchClientContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fresources%2FelasticsearchClientContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fresources%2FelasticsearchClientContext.xml?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -44,6 +44,7 @@ under the License.\n   \n   <bean class=\"org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils\">\n     <property name=\"indexMaxResultWindow\" value=\"10000\"/>\n+    <property name=\"retryOnConflict\" value=\"5\"/>\n   </bean>\n   <bean class=\"org.apache.syncope.ext.elasticsearch.client.ElasticsearchIndexManager\"/>\n   "},{"sha":"0318bc5f307154f3c70420cda6b6c0322eb84f88","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":23,"deletions":34,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import static org.apache.syncope.core.persistence.jpa.dao.AbstractDAO.LOG;\n-\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -86,7 +84,7 @@ private DisMaxQueryBuilder adminRealmsFilter(final Set<String> adminRealms) {\n                 LOG.warn(\"Ignoring invalid realm {}\", realmPath);\n             } else {\n                 for (Realm descendant : realmDAO.findDescendants(realm)) {\n-                    builder.add(QueryBuilders.termQuery(\"realm.keyword\", descendant.getFullPath()));\n+                    builder.add(QueryBuilders.termQuery(\"realm\", descendant.getFullPath()));\n                 }\n             }\n         }\n@@ -134,15 +132,10 @@ private void addSort(\n             if (anyField == null) {\n                 PlainSchema schema = schemaDAO.find(fieldName);\n                 if (schema != null) {\n-                    sortName = schema.getType() == AttrSchemaType.String\n-                            || schema.getType() == AttrSchemaType.Enum\n-                            ? fieldName + \".keyword\"\n-                            : fieldName;\n+                    sortName = fieldName;\n                 }\n             } else {\n-                sortName = anyField.getType().equals(String.class)\n-                        ? fieldName + \".keyword\"\n-                        : fieldName;\n+                sortName = fieldName;\n             }\n \n             if (sortName == null) {\n@@ -240,11 +233,11 @@ private QueryBuilder checkNot(final QueryBuilder builder, final boolean not) {\n     }\n \n     private QueryBuilder getQueryBuilder(final AnyTypeCond cond) {\n-        return QueryBuilders.termQuery(\"anyType.keyword\", cond.getAnyTypeKey());\n+        return QueryBuilders.termQuery(\"anyType\", cond.getAnyTypeKey());\n     }\n \n     private QueryBuilder getQueryBuilder(final RelationshipTypeCond cond) {\n-        return QueryBuilders.termQuery(\"relationshipTypes.keyword\", cond.getRelationshipTypeKey());\n+        return QueryBuilders.termQuery(\"relationshipTypes\", cond.getRelationshipTypeKey());\n     }\n \n     private QueryBuilder getQueryBuilder(final RelationshipCond cond) {\n@@ -255,7 +248,7 @@ private QueryBuilder getQueryBuilder(final RelationshipCond cond) {\n             return EMPTY_QUERY_BUILDER;\n         }\n \n-        return QueryBuilders.termQuery(\"relationships.keyword\", rightAnyObjectKey);\n+        return QueryBuilders.termQuery(\"relationships\", rightAnyObjectKey);\n     }\n \n     private QueryBuilder getQueryBuilder(final MembershipCond cond) {\n@@ -266,7 +259,7 @@ private QueryBuilder getQueryBuilder(final MembershipCond cond) {\n             return EMPTY_QUERY_BUILDER;\n         }\n \n-        return QueryBuilders.termQuery(\"memberships.keyword\", groupKey);\n+        return QueryBuilders.termQuery(\"memberships\", groupKey);\n     }\n \n     private QueryBuilder getQueryBuilder(final AssignableCond cond) {\n@@ -280,20 +273,20 @@ private QueryBuilder getQueryBuilder(final AssignableCond cond) {\n         DisMaxQueryBuilder builder = QueryBuilders.disMaxQuery();\n         if (cond.isFromGroup()) {\n             for (Realm current = realm; current.getParent() != null; current = current.getParent()) {\n-                builder.add(QueryBuilders.termQuery(\"realm.keyword\", current.getFullPath()));\n+                builder.add(QueryBuilders.termQuery(\"realm\", current.getFullPath()));\n             }\n-            builder.add(QueryBuilders.termQuery(\"realm.keyword\", realmDAO.getRoot().getFullPath()));\n+            builder.add(QueryBuilders.termQuery(\"realm\", realmDAO.getRoot().getFullPath()));\n         } else {\n             for (Realm current : realmDAO.findDescendants(realm)) {\n-                builder.add(QueryBuilders.termQuery(\"realm.keyword\", current.getFullPath()));\n+                builder.add(QueryBuilders.termQuery(\"realm\", current.getFullPath()));\n             }\n         }\n \n         return builder;\n     }\n \n     private QueryBuilder getQueryBuilder(final RoleCond cond) {\n-        return QueryBuilders.termQuery(\"roles.keyword\", cond.getRoleKey());\n+        return QueryBuilders.termQuery(\"roles\", cond.getRoleKey());\n     }\n \n     private QueryBuilder getQueryBuilder(final MemberCond cond) {\n@@ -304,22 +297,18 @@ private QueryBuilder getQueryBuilder(final MemberCond cond) {\n             return EMPTY_QUERY_BUILDER;\n         }\n \n-        return QueryBuilders.termQuery(\"members.keyword\", memberKey);\n+        return QueryBuilders.termQuery(\"members\", memberKey);\n     }\n \n     private QueryBuilder getQueryBuilder(final ResourceCond cond) {\n-        return QueryBuilders.termQuery(\"resources.keyword\", cond.getResourceKey());\n+        return QueryBuilders.termQuery(\"resources\", cond.getResourceKey());\n     }\n \n     private QueryBuilder fillAttrQuery(\n             final PlainSchema schema,\n             final PlainAttrValue attrValue,\n             final AttributeCond cond) {\n \n-        String name = schema.getType() == AttrSchemaType.String\n-                || schema.getType() == AttrSchemaType.Enum\n-                ? schema.getKey() + \".keyword\"\n-                : schema.getKey();\n         Object value = schema.getType() == AttrSchemaType.Date && attrValue.getDateValue() != null\n                 ? attrValue.getDateValue().getTime()\n                 : attrValue.getValue();\n@@ -328,44 +317,44 @@ private QueryBuilder fillAttrQuery(\n \n         switch (cond.getType()) {\n             case ISNOTNULL:\n-                builder = QueryBuilders.existsQuery(name);\n+                builder = QueryBuilders.existsQuery(schema.getKey());\n                 break;\n \n             case ISNULL:\n-                builder = QueryBuilders.boolQuery().mustNot(QueryBuilders.existsQuery(name));\n+                builder = QueryBuilders.boolQuery().mustNot(QueryBuilders.existsQuery(schema.getKey()));\n                 break;\n \n             case ILIKE:\n                 builder = QueryBuilders.queryStringQuery(\n-                        schema.getKey() + \":\" + cond.getExpression().replace('%', '*'));\n+                        schema.getKey() + \":\" + cond.getExpression().replace('%', '*').toLowerCase());\n                 break;\n \n             case LIKE:\n-                builder = QueryBuilders.wildcardQuery(name, cond.getExpression().replace('%', '*'));\n+                builder = QueryBuilders.wildcardQuery(schema.getKey(), cond.getExpression().replace('%', '*'));\n                 break;\n \n             case IEQ:\n-                builder = QueryBuilders.matchQuery(schema.getKey(), value);\n+                builder = QueryBuilders.matchQuery(schema.getKey(), cond.getExpression().toLowerCase());\n                 break;\n \n             case EQ:\n-                builder = QueryBuilders.termQuery(name, value);\n+                builder = QueryBuilders.termQuery(schema.getKey(), value);\n                 break;\n \n             case GE:\n-                builder = QueryBuilders.rangeQuery(name).gte(value);\n+                builder = QueryBuilders.rangeQuery(schema.getKey()).gte(value);\n                 break;\n \n             case GT:\n-                builder = QueryBuilders.rangeQuery(name).gt(value);\n+                builder = QueryBuilders.rangeQuery(schema.getKey()).gt(value);\n                 break;\n \n             case LE:\n-                builder = QueryBuilders.rangeQuery(name).lte(value);\n+                builder = QueryBuilders.rangeQuery(schema.getKey()).lte(value);\n                 break;\n \n             case LT:\n-                builder = QueryBuilders.rangeQuery(name).lt(value);\n+                builder = QueryBuilders.rangeQuery(schema.getKey()).lt(value);\n                 break;\n \n             default:"},{"sha":"d098a99ae7ff67be16ad1b1c3a3fddd6892914f7","filename":"ext/elasticsearch/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ElasticsearchReindex.java","status":"modified","additions":36,"deletions":1,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -37,6 +37,8 @@\n import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsResponse;\n import org.elasticsearch.action.index.IndexResponse;\n import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n \n@@ -77,8 +79,41 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n                             AuthContextUtils.getDomain().toLowerCase(), deleteIndexResponse);\n                 }\n \n+                XContentBuilder settings = XContentFactory.jsonBuilder().\n+                        startObject().\n+                        startObject(\"analysis\").\n+                        startObject(\"analyzer\").\n+                        startObject(\"string_lowercase\").\n+                        field(\"type\", \"custom\").\n+                        field(\"tokenizer\", \"standard\").\n+                        field(\"filter\").\n+                        startArray().\n+                        value(\"lowercase\").\n+                        endArray().\n+                        endObject().\n+                        endObject().\n+                        endObject().\n+                        endObject();\n+                XContentBuilder mapping = XContentFactory.jsonBuilder().\n+                        startObject().\n+                        startArray(\"dynamic_templates\").\n+                        startObject().\n+                        startObject(\"strings\").\n+                        field(\"match_mapping_type\", \"string\").\n+                        startObject(\"mapping\").\n+                        field(\"type\", \"keyword\").\n+                        field(\"analyzer\", \"string_lowercase\").\n+                        endObject().\n+                        endObject().\n+                        endObject().\n+                        endArray().\n+                        endObject();\n                 CreateIndexResponse createIndexResponse = client.admin().indices().\n-                        create(new CreateIndexRequest(AuthContextUtils.getDomain().toLowerCase())).\n+                        create(new CreateIndexRequest(AuthContextUtils.getDomain().toLowerCase()).\n+                                settings(settings).\n+                                mapping(AnyTypeKind.USER.name(), mapping).\n+                                mapping(AnyTypeKind.GROUP.name(), mapping).\n+                                mapping(AnyTypeKind.ANY_OBJECT.name(), mapping)).\n                         get();\n                 LOG.debug(\"Successfully created {}: {}\",\n                         AuthContextUtils.getDomain().toLowerCase(), createIndexResponse);"},{"sha":"61bd660d8b860e63b29abe3015320383ffe12faf","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/panels/ImportMetadata.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImportMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImportMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImportMetadata.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import static org.apache.syncope.client.console.panels.TogglePanel.LOG;\n-\n import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.fileinput.BootstrapFileInputField;\n import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.fileinput.FileInputConfig;\n import java.io.ByteArrayInputStream;"},{"sha":"9869500ee5743c4a312184792258f3ba554f9179","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SAML2IdPValidator.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.validation.entity;\n \n-import static org.apache.syncope.core.persistence.jpa.validation.entity.AbstractValidator.LOG;\n-\n import javax.validation.ConstraintValidatorContext;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;"},{"sha":"5faa4249a54917296e01b0902311002714c4dc79","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/ElasticsearchDetector.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FElasticsearchDetector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FElasticsearchDetector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FElasticsearchDetector.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit;\n+\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n+\n+public class ElasticsearchDetector {\n+\n+    public static boolean isElasticSearchEnabled(final SyncopeService syncopeService) {\n+        return syncopeService.platform().getAnySearchDAO().contains(\"Elasticsearch\");\n+    }\n+\n+}"},{"sha":"1945320cfbe4fc2131e0a3668c0e277ecdb9aa39","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/BulkActionITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FBulkActionITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FBulkActionITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FBulkActionITCase.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.apache.syncope.fit.console.AbstractConsoleITCase.TESTER;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n "},{"sha":"3f6996641c5811953724265da5a5e4a7b685249c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/GroupsITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FGroupsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FGroupsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FGroupsITCase.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.apache.syncope.fit.console.AbstractConsoleITCase.TESTER;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n "},{"sha":"0db5e9597f758de3466b8d5376e02dbd6c6259e1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/PoliciesITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FPoliciesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FPoliciesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FPoliciesITCase.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.apache.syncope.fit.console.AbstractConsoleITCase.TESTER;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n "},{"sha":"0809a48ee8a7013c21da2e05339ae3f68ada36d8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/RealmsITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRealmsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRealmsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRealmsITCase.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.apache.syncope.fit.console.AbstractConsoleITCase.TESTER;\n import static org.junit.Assert.assertNotNull;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;"},{"sha":"7efdd4507e380b052bf6fbe1fd0e5988bebc27e9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/SecurityQuestionsITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FSecurityQuestionsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FSecurityQuestionsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FSecurityQuestionsITCase.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.apache.syncope.fit.console.AbstractConsoleITCase.TESTER;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;"},{"sha":"a0a37b2e0e2fa6558c546e28c0e7bd8ea9d9f921","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29b97d7f91a318d8c840350cf6cfc1dd8961cc0c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=29b97d7f91a318d8c840350cf6cfc1dd8961cc0c","patch":"@@ -44,6 +44,7 @@\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.RoleService;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.apache.syncope.fit.ElasticsearchDetector;\n import org.junit.Test;\n \n public class SearchITCase extends AbstractITCase {\n@@ -148,6 +149,14 @@ public void searchByDynGroup() {\n         group = createGroup(group).getEntity();\n         assertNotNull(group);\n \n+        if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+            try {\n+                Thread.sleep(2000);\n+            } catch (InterruptedException ex) {\n+                // ignore\n+            }\n+        }\n+\n         PagedResult<UserTO> matchingUsers = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                         fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(group.getKey()).query()).\n@@ -190,6 +199,14 @@ public void searchByDynRole() {\n         role = getObject(response.getLocation(), RoleService.class, RoleTO.class);\n         assertNotNull(role);\n \n+        if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+            try {\n+                Thread.sleep(2000);\n+            } catch (InterruptedException ex) {\n+                // ignore\n+            }\n+        }\n+\n         PagedResult<UserTO> matchingUsers = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                         fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(role.getKey()).query()).\n@@ -260,6 +277,14 @@ public void searchByBooleanAnyCond() {\n     public void searchByDate() {\n         clientFactory.create(\"bellini\", \"password\").self();\n \n+        if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+            try {\n+                Thread.sleep(2000);\n+            } catch (InterruptedException ex) {\n+                // ignore\n+            }\n+        }\n+\n         PagedResult<UserTO> users = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().\n                         is(\"lastLoginDate\").lexicalNotBefore(\"2016-03-02 15:21:22\")."}]}