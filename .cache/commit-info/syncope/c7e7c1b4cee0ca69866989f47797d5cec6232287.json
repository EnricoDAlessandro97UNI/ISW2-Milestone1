{"sha":"c7e7c1b4cee0ca69866989f47797d5cec6232287","node_id":"C_kwDOJfYA1toAKGM3ZTdjMWI0Y2VlMGNhNjk4NjY5ODlmNDc3OTdkNWNlYzYyMzIyODc","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-06-24T15:41:25Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-06-24T15:41:25Z"},"message":"[SYNCOPE-1682] Introducing AttrRepo entity for AttrReleasePolicy (#355)","tree":{"sha":"47c5bf6461a2cf9c6d17d0d19156cb0e73d37ea4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/47c5bf6461a2cf9c6d17d0d19156cb0e73d37ea4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c7e7c1b4cee0ca69866989f47797d5cec6232287","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJitdslCRBK7hj4Ov3rIwAA62kIAJN6PeWfoW8iUK0o9+xrU0VO\nEvgqhblGqOhGfrCQJS9awbZRUWCWAkbiluhJ+Z0+s5lMEYuzJLFHVEWAI7+DUjW0\nIQH7c0UDOfO5YofYeN7vK/rk/x8WAqIDqF/DGzqsFq60e6FGbG7XBr54YR+8rf6s\ngzOd95r7ER/YUC436p2FWpNLn3zSKfCeDzQCaKm1RbLtdq6JzzoaiRhrNuRjXVS0\nIopyxr+VZj2BkfFqp+d31FGFoSQJ4b/gkS0kzFq+Z/nF6u39LwOQGu4tTaM7cihh\nNQbhSnEDiIo+l9/Zoz92Ky6BE5lvQHQOdPZ7lU1L/CWSQrzKAnHSVp4oP/D22fU=\n=RNMD\n-----END PGP SIGNATURE-----\n","payload":"tree 47c5bf6461a2cf9c6d17d0d19156cb0e73d37ea4\nparent d4d63645ccd284bb2da63089f305d7db88629b62\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1656085285 +0200\ncommitter GitHub <noreply@github.com> 1656085285 +0200\n\n[SYNCOPE-1682] Introducing AttrRepo entity for AttrReleasePolicy (#355)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c7e7c1b4cee0ca69866989f47797d5cec6232287","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c7e7c1b4cee0ca69866989f47797d5cec6232287","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c7e7c1b4cee0ca69866989f47797d5cec6232287/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"d4d63645ccd284bb2da63089f305d7db88629b62","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d4d63645ccd284bb2da63089f305d7db88629b62","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d4d63645ccd284bb2da63089f305d7db88629b62"}],"stats":{"total":6521,"additions":5361,"deletions":1160},"files":[{"sha":"e7ca032553c18e659e3934acb5d4197235c43f73","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/init/AMClassPathScanImplementationContributor.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FAMClassPathScanImplementationContributor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FAMClassPathScanImplementationContributor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FAMClassPathScanImplementationContributor.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.client.console.init;\n \n import java.util.Optional;\n+import org.apache.syncope.common.lib.attr.AttrRepoConf;\n import org.apache.syncope.common.lib.auth.AuthModuleConf;\n import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n import org.springframework.core.type.filter.AssignableTypeFilter;\n@@ -28,13 +29,17 @@ public class AMClassPathScanImplementationContributor implements ClassPathScanIm\n     @Override\n     public void extend(final ClassPathScanningCandidateComponentProvider scanner) {\n         scanner.addIncludeFilter(new AssignableTypeFilter(AuthModuleConf.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(AttrRepoConf.class));\n     }\n \n     @Override\n     public Optional<String> getLabel(final Class<?> clazz) {\n         if (AuthModuleConf.class.isAssignableFrom(clazz)) {\n             return Optional.of(AuthModuleConf.class.getName());\n         }\n+        if (AttrRepoConf.class.isAssignableFrom(clazz)) {\n+            return Optional.of(AttrRepoConf.class.getName());\n+        }\n         return Optional.empty();\n     }\n }"},{"sha":"f46871dd49f75e04d4e13064a65be42faea67b5b","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/pages/WA.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.client.console.authprofiles.AuthProfileDirectoryPanel;\n import org.apache.syncope.client.console.clientapps.ClientApps;\n import org.apache.syncope.client.console.panels.AMSessionPanel;\n+import org.apache.syncope.client.console.panels.AttrRepoDirectoryPanel;\n import org.apache.syncope.client.console.panels.AuthModuleDirectoryPanel;\n import org.apache.syncope.client.console.panels.OIDC;\n import org.apache.syncope.client.console.panels.SAML2;\n@@ -154,6 +155,18 @@ public Panel getPanel(final String panelId) {\n             });\n         }\n \n+        if (SyncopeConsoleSession.get().owns(AMEntitlement.ATTR_REPO_LIST)) {\n+            tabs.add(new AbstractTab(new ResourceModel(\"attrRepos\")) {\n+\n+                private static final long serialVersionUID = 5211692813425391144L;\n+\n+                @Override\n+                public Panel getPanel(final String panelId) {\n+                    return new AttrRepoDirectoryPanel(panelId, getPageReference());\n+                }\n+            });\n+        }\n+\n         if (SyncopeConsoleSession.get().owns(AMEntitlement.CLIENTAPP_LIST)) {\n             tabs.add(new AbstractTab(new ResourceModel(\"clientApps\")) {\n "},{"sha":"b8bd852c07d0aad473be4a2f540a1ee1df2798a7","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/AttrRepoDirectoryPanel.java","status":"added","additions":184,"deletions":0,"changes":184,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.AMConstants;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.client.console.panels.AttrRepoDirectoryPanel.AttrRepoProvider;\n+import org.apache.syncope.client.console.rest.AttrRepoRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n+import org.apache.syncope.client.console.wizards.AttrRepoWizardBuilder;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n+import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n+import org.apache.syncope.common.lib.to.AttrRepoTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.StringResourceModel;\n+\n+public class AttrRepoDirectoryPanel\n+        extends DirectoryPanel<AttrRepoTO, AttrRepoTO, AttrRepoProvider, AttrRepoRestClient> {\n+\n+    private static final long serialVersionUID = 1005345990563741296L;\n+\n+    public AttrRepoDirectoryPanel(final String id, final PageReference pageRef) {\n+        super(id, pageRef);\n+\n+        disableCheckBoxes();\n+\n+        this.addNewItemPanelBuilder(new AttrRepoWizardBuilder(new AttrRepoTO(), pageRef), true);\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, AMEntitlement.ATTR_REPO_CREATE);\n+\n+        modal.size(Modal.Size.Extra_large);\n+        initResultTable();\n+    }\n+\n+    @Override\n+    protected AttrRepoProvider dataProvider() {\n+        return new AttrRepoProvider(rows);\n+    }\n+\n+    @Override\n+    protected String paginatorRowsKey() {\n+        return AMConstants.PREF_AUTHMODULE_PAGINATOR_ROWS;\n+    }\n+\n+    @Override\n+    protected Collection<ActionLink.ActionType> getBatches() {\n+        return List.of();\n+    }\n+\n+    @Override\n+    protected List<IColumn<AttrRepoTO, String>> getColumns() {\n+        List<IColumn<AttrRepoTO, String>> columns = new ArrayList<>();\n+        columns.add(new PropertyColumn<>(\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this),\n+                Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME));\n+        columns.add(new PropertyColumn<>(new ResourceModel(Constants.DESCRIPTION_FIELD_NAME),\n+                Constants.DESCRIPTION_FIELD_NAME, Constants.DESCRIPTION_FIELD_NAME));\n+        columns.add(new PropertyColumn<>(new ResourceModel(\"type\"), \"conf\") {\n+\n+            private static final long serialVersionUID = -1822504503325964706L;\n+\n+            @Override\n+            public void populateItem(\n+                    final Item<ICellPopulator<AttrRepoTO>> item,\n+                    final String componentId,\n+                    final IModel<AttrRepoTO> rowModel) {\n+\n+                item.add(new Label(componentId, rowModel.getObject().getConf() == null\n+                        ? StringUtils.EMPTY\n+                        : StringUtils.substringBefore(\n+                                rowModel.getObject().getConf().getClass().getSimpleName(), \"AttrRepoConf\")));\n+            }\n+        });\n+        columns.add(new PropertyColumn<>(new ResourceModel(\"state\"), \"state\", \"state\"));\n+        columns.add(new PropertyColumn<>(new ResourceModel(\"order\"), \"order\", \"order\"));\n+        return columns;\n+    }\n+\n+    @Override\n+    public ActionsPanel<AttrRepoTO> getActions(final IModel<AttrRepoTO> model) {\n+        ActionsPanel<AttrRepoTO> panel = super.getActions(model);\n+\n+        panel.add(new ActionLink<>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final AttrRepoTO ignore) {\n+                send(AttrRepoDirectoryPanel.this, Broadcast.EXACT, new AjaxWizard.EditItemActionEvent<>(\n+                        AttrRepoRestClient.read(model.getObject().getKey()), target));\n+            }\n+        }, ActionLink.ActionType.EDIT, AMEntitlement.ATTR_REPO_UPDATE);\n+\n+        panel.add(new ActionLink<>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final AttrRepoTO ignore) {\n+                try {\n+                    AttrRepoRestClient.delete(model.getObject().getKey());\n+\n+                    SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n+                    target.add(container);\n+                } catch (Exception e) {\n+                    LOG.error(\"While deleting {}\", model.getObject().getKey(), e);\n+                    SyncopeConsoleSession.get().onException(e);\n+                }\n+                ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+            }\n+        }, ActionLink.ActionType.DELETE, AMEntitlement.ATTR_REPO_DELETE, true);\n+\n+        return panel;\n+    }\n+\n+    protected static final class AttrRepoProvider extends DirectoryDataProvider<AttrRepoTO> {\n+\n+        private static final long serialVersionUID = -185944053385660794L;\n+\n+        private final SortableDataProviderComparator<AttrRepoTO> comparator;\n+\n+        private AttrRepoProvider(final int paginatorRows) {\n+            super(paginatorRows);\n+            setSort(Constants.KEY_FIELD_NAME, SortOrder.ASCENDING);\n+            comparator = new SortableDataProviderComparator<>(this);\n+        }\n+\n+        @Override\n+        public Iterator<AttrRepoTO> iterator(final long first, final long count) {\n+            List<AttrRepoTO> result = AttrRepoRestClient.list();\n+            result.sort(comparator);\n+            return result.subList((int) first, (int) first + (int) count).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return AttrRepoRestClient.list().size();\n+        }\n+\n+        @Override\n+        public IModel<AttrRepoTO> model(final AttrRepoTO object) {\n+            return new CompoundPropertyModel<>(object);\n+        }\n+    }\n+}"},{"sha":"a196cbc317995e90927fb1bd5b656009148148e6","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/AuthModuleDirectoryPanel.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -110,6 +110,8 @@ public void populateItem(\n                                 rowModel.getObject().getConf().getClass().getSimpleName(), \"AuthModuleConf\")));\n             }\n         });\n+        columns.add(new PropertyColumn<>(new ResourceModel(\"state\"), \"state\", \"state\"));\n+        columns.add(new PropertyColumn<>(new ResourceModel(\"order\"), \"order\", \"order\"));\n         return columns;\n     }\n "},{"sha":"fcc98316b40da3071a9c1448ed05bd966e5fd359","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/policies/AttrReleasePolicyModalPanel.java","status":"modified","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAttrReleasePolicyModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAttrReleasePolicyModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAttrReleasePolicyModalPanel.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -18,26 +18,47 @@\n  */\n package org.apache.syncope.client.console.policies;\n \n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.panels.AbstractModalPanel;\n+import org.apache.syncope.client.console.rest.AttrRepoRestClient;\n import org.apache.syncope.client.console.rest.PolicyRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxSpinnerFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n+import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf.PrincipalAttrRepoMergingStrategy;\n+import org.apache.syncope.common.lib.to.AttrRepoTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n \n public class AttrReleasePolicyModalPanel extends AbstractModalPanel<AttrReleasePolicyTO> {\n \n     private static final long serialVersionUID = 1L;\n \n+    private final IModel<List<String>> allAttrRepos = new LoadableDetachableModel<>() {\n+\n+        private static final long serialVersionUID = -2012833443695917883L;\n+\n+        @Override\n+        protected List<String> load() {\n+            return AttrRepoRestClient.list().stream().map(AttrRepoTO::getKey).sorted().collect(Collectors.toList());\n+        }\n+    };\n+\n     private final IModel<AttrReleasePolicyTO> model;\n \n     public AttrReleasePolicyModalPanel(\n@@ -68,6 +89,43 @@ public AttrReleasePolicyModalPanel(\n                 \"includeOnlyAttrs\",\n                 \"includeOnlyAttrs\",\n                 includeOnlyAttr));\n+\n+        add(new AjaxTextFieldPanel(\n+                \"principalIdAttr\", \"principalIdAttr\",\n+                new PropertyModel<>(model.getObject().getConf(), \"principalIdAttr\")));\n+\n+        AjaxDropDownChoicePanel<PrincipalAttrRepoMergingStrategy> mergingStrategy = new AjaxDropDownChoicePanel<>(\n+                \"mergingStrategy\", \"mergingStrategy\",\n+                new PropertyModel<>(model.getObject().getConf(), \"principalAttrRepoConf.mergingStrategy\"));\n+        mergingStrategy.setChoices(List.of(PrincipalAttrRepoMergingStrategy.values()));\n+        mergingStrategy.addRequiredLabel();\n+        mergingStrategy.setNullValid(false);\n+        add(mergingStrategy);\n+\n+        add(new AjaxCheckBoxPanel(\n+                \"ignoreResolvedAttributes\",\n+                \"ignoreResolvedAttributes\",\n+                new PropertyModel<>(model.getObject().getConf(), \"principalAttrRepoConf.ignoreResolvedAttributes\"),\n+                false));\n+\n+        add(new AjaxSpinnerFieldPanel.Builder<Long>().build(\n+                \"expiration\",\n+                \"expiration\",\n+                Long.class,\n+                new PropertyModel<>(model.getObject().getConf(), \"principalAttrRepoConf.expiration\")));\n+\n+        AjaxDropDownChoicePanel<TimeUnit> timeUnit = new AjaxDropDownChoicePanel<>(\n+                \"timeUnit\", \"timeUnit\",\n+                new PropertyModel<>(model.getObject().getConf(), \"principalAttrRepoConf.timeUnit\"));\n+        timeUnit.setChoices(List.of(TimeUnit.values()));\n+        timeUnit.addRequiredLabel();\n+        timeUnit.setNullValid(false);\n+        add(timeUnit);\n+\n+        add(new AjaxPalettePanel.Builder<String>().setName(\"attrRepos\").build(\n+                \"attrRepos\",\n+                new PropertyModel<>(model.getObject().getConf(), \"principalAttrRepoConf.attrRepos\"),\n+                allAttrRepos));\n     }\n \n     @Override"},{"sha":"3f70f0836370313680aef75a071236c8e081c1ac","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/policies/AuthPolicyModalPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAuthPolicyModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAuthPolicyModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAuthPolicyModalPanel.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -40,7 +40,7 @@\n \n public class AuthPolicyModalPanel extends AbstractModalPanel<AuthPolicyTO> {\n \n-    private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = -7210166323800567306L;\n \n     private final IModel<List<String>> allAuthModules = new LoadableDetachableModel<>() {\n "},{"sha":"318c1e38ea811f1c680b1e27ad7b372ef4ccd5e1","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/rest/AttrRepoRestClient.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAttrRepoRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAttrRepoRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAttrRepoRestClient.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.rest;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.AttrRepoTO;\n+import org.apache.syncope.common.rest.api.service.AttrRepoService;\n+\n+public class AttrRepoRestClient extends BaseRestClient {\n+\n+    private static final long serialVersionUID = -7379778542101161274L;\n+\n+    public static List<AttrRepoTO> list() {\n+        return getService(AttrRepoService.class).list();\n+    }\n+\n+    public static void create(final AttrRepoTO attrRepoTO) {\n+        getService(AttrRepoService.class).create(attrRepoTO);\n+    }\n+\n+    public static AttrRepoTO read(final String key) {\n+        return getService(AttrRepoService.class).read(key);\n+    }\n+\n+    public static void update(final AttrRepoTO attrRepoTO) {\n+        getService(AttrRepoService.class).update(attrRepoTO);\n+    }\n+\n+    public static void delete(final String key) {\n+        getService(AttrRepoService.class).delete(key);\n+    }\n+}"},{"sha":"6bc14cb22273c596058e7d169cd9061a2ead4486","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/wizards/AttrRepoWizardBuilder.java","status":"added","additions":177,"deletions":0,"changes":177,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wizards;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.SyncopeWebApplication;\n+import org.apache.syncope.client.console.panels.BeanPanel;\n+import org.apache.syncope.client.console.rest.AttrRepoRestClient;\n+import org.apache.syncope.client.console.wizards.mapping.AttrRepoMappingPanel;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxSpinnerFieldPanel;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n+import org.apache.syncope.common.lib.attr.AttrRepoConf;\n+import org.apache.syncope.common.lib.to.AttrRepoTO;\n+import org.apache.syncope.common.lib.types.AttrRepoState;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxEventBehavior;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.wizard.WizardModel;\n+import org.apache.wicket.extensions.wizard.WizardStep;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.springframework.util.ClassUtils;\n+\n+public class AttrRepoWizardBuilder extends BaseAjaxWizardBuilder<AttrRepoTO> {\n+\n+    private static final long serialVersionUID = -6163230263062920394L;\n+\n+    protected final LoadableDetachableModel<List<String>> attrRepoConfs;\n+\n+    protected Model<Class<? extends AttrRepoConf>> attrRepoConfClass = Model.of();\n+\n+    public AttrRepoWizardBuilder(final AttrRepoTO defaultItem, final PageReference pageRef) {\n+\n+        super(defaultItem, pageRef);\n+\n+        attrRepoConfs = new LoadableDetachableModel<>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return SyncopeWebApplication.get().getLookup().getClasses(AttrRepoConf.class).stream().\n+                        map(Class::getName).sorted().collect(Collectors.toList());\n+            }\n+        };\n+    }\n+\n+    @Override\n+    protected Serializable onApplyInternal(final AttrRepoTO modelObject) {\n+        if (mode == AjaxWizard.Mode.CREATE) {\n+            AttrRepoRestClient.create(modelObject);\n+        } else {\n+            AttrRepoRestClient.update(modelObject);\n+        }\n+        return modelObject;\n+    }\n+\n+    @Override\n+    protected WizardModel buildModelSteps(final AttrRepoTO modelObject, final WizardModel wizardModel) {\n+        wizardModel.add(new Profile(modelObject, attrRepoConfs, attrRepoConfClass));\n+        wizardModel.add(new Configuration(modelObject));\n+        wizardModel.add(new Mapping(modelObject));\n+        return wizardModel;\n+    }\n+\n+    protected static class Profile extends WizardStep {\n+\n+        private static final long serialVersionUID = -3043839139187792810L;\n+\n+        Profile(\n+                final AttrRepoTO attrRepo,\n+                final LoadableDetachableModel<List<String>> attrRepoConfs,\n+                final Model<Class<? extends AttrRepoConf>> attrRepoConfClass) {\n+\n+            boolean isNew = attrRepo.getConf() == null;\n+            if (!isNew) {\n+                attrRepoConfClass.setObject(attrRepo.getConf().getClass());\n+            }\n+\n+            AjaxTextFieldPanel key = new AjaxTextFieldPanel(\n+                    Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME,\n+                    new PropertyModel<>(attrRepo, Constants.KEY_FIELD_NAME));\n+            key.addRequiredLabel();\n+            key.setEnabled(isNew);\n+            add(key);\n+\n+            AjaxTextFieldPanel description = new AjaxTextFieldPanel(\n+                    Constants.DESCRIPTION_FIELD_NAME, getString(Constants.DESCRIPTION_FIELD_NAME),\n+                    new PropertyModel<>(attrRepo, Constants.DESCRIPTION_FIELD_NAME));\n+            add(description);\n+\n+            AjaxDropDownChoicePanel<AttrRepoState> state = new AjaxDropDownChoicePanel<>(\n+                    \"state\", getString(\"state\"), new PropertyModel<>(attrRepo, \"state\"));\n+            state.setChoices(List.of(AttrRepoState.values()));\n+            state.addRequiredLabel();\n+            state.setNullValid(false);\n+            add(state);\n+\n+            add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(\n+                    \"order\",\n+                    \"order\",\n+                    Integer.class,\n+                    new PropertyModel<>(attrRepo, \"order\")).addRequiredLabel());\n+\n+            AjaxDropDownChoicePanel<String> conf = new AjaxDropDownChoicePanel<>(\"conf\", getString(\"type\"), isNew\n+                    ? Model.of()\n+                    : Model.of(attrRepo.getConf().getClass().getName()));\n+            conf.setChoices(attrRepoConfs.getObject());\n+            conf.addRequiredLabel();\n+            conf.setNullValid(false);\n+            conf.setEnabled(isNew);\n+            conf.add(new AjaxEventBehavior(Constants.ON_CHANGE) {\n+\n+                private static final long serialVersionUID = -7133385027739964990L;\n+\n+                @SuppressWarnings(\"unchecked\")\n+                @Override\n+                protected void onEvent(final AjaxRequestTarget target) {\n+                    try {\n+                        Class<? extends AttrRepoConf> clazz =\n+                                (Class<? extends AttrRepoConf>) ClassUtils.resolveClassName(\n+                                        conf.getModelObject(), ClassUtils.getDefaultClassLoader());\n+\n+                        attrRepo.setConf(clazz.getConstructor().newInstance());\n+                        attrRepoConfClass.setObject(clazz);\n+                    } catch (Exception e) {\n+                        LOG.error(\"During deserialization\", e);\n+                    }\n+                }\n+            });\n+            add(conf);\n+        }\n+    }\n+\n+    protected static class Configuration extends WizardStep {\n+\n+        private static final long serialVersionUID = -785981096328637758L;\n+\n+        Configuration(final AttrRepoTO attrRepo) {\n+            add(new BeanPanel<>(\"bean\", new PropertyModel<>(attrRepo, \"conf\")).setRenderBodyOnly(true));\n+        }\n+    }\n+\n+    protected static final class Mapping extends WizardStep {\n+\n+        private static final long serialVersionUID = 3454904947720856253L;\n+\n+        Mapping(final AttrRepoTO attrRepo) {\n+            setTitleModel(Model.of(\"Mapping\"));\n+            setSummaryModel(Model.of(StringUtils.EMPTY));\n+            add(new AttrRepoMappingPanel(\"mapping\", attrRepo));\n+        }\n+    }\n+}"},{"sha":"da50eda9a0382429be3c1bb866e567ef26b5a16f","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -30,11 +30,13 @@\n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxSpinnerFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.auth.AuthModuleConf;\n import org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n+import org.apache.syncope.common.lib.types.AuthModuleState;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxEventBehavior;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -115,6 +117,19 @@ Constants.DESCRIPTION_FIELD_NAME, getString(Constants.DESCRIPTION_FIELD_NAME),\n                     new PropertyModel<>(authModule, Constants.DESCRIPTION_FIELD_NAME));\n             add(description);\n \n+            AjaxDropDownChoicePanel<AuthModuleState> state = new AjaxDropDownChoicePanel<>(\n+                    \"state\", getString(\"state\"), new PropertyModel<>(authModule, \"state\"));\n+            state.setChoices(List.of(AuthModuleState.values()));\n+            state.addRequiredLabel();\n+            state.setNullValid(false);\n+            add(state);\n+\n+            add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(\n+                    \"order\",\n+                    \"order\",\n+                    Integer.class,\n+                    new PropertyModel<>(authModule, \"order\")).addRequiredLabel());\n+\n             AjaxDropDownChoicePanel<String> conf = new AjaxDropDownChoicePanel<>(\"conf\", getString(\"type\"), isNew\n                     ? Model.of()\n                     : Model.of(authModule.getConf().getClass().getName()));"},{"sha":"3d4ba91e69789d69d8f7f88f6b0e33fe6caab286","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/wizards/mapping/AttrRepoMappingPanel.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FAttrRepoMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FAttrRepoMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FAttrRepoMappingPanel.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wizards.mapping;\n+\n+import java.util.List;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.to.AttrRepoTO;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.util.ListModel;\n+\n+public class AttrRepoMappingPanel extends AbstractMappingPanel {\n+\n+    private static final long serialVersionUID = -8940651851569691064L;\n+\n+    public AttrRepoMappingPanel(final String id, final AttrRepoTO attrRepo) {\n+        super(id,\n+                null,\n+                null,\n+                new ListModel<>(attrRepo.getItems()),\n+                true,\n+                MappingPurpose.NONE);\n+\n+        setOutputMarkupId(true);\n+    }\n+\n+    @Override\n+    protected void onBeforeRender() {\n+        super.onBeforeRender();\n+        intAttrNameInfo.setVisible(false);\n+    }\n+\n+    @Override\n+    protected boolean hidePurpose() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean hideMandatory() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean hideConnObjectKey() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected IModel<List<String>> getExtAttrNames() {\n+        return Model.ofList(List.of());\n+    }\n+\n+    @Override\n+    protected void setAttrNames(final AjaxTextFieldPanel toBeUpdated) {\n+        // nothing to do\n+    }\n+}"},{"sha":"b565c67d6e0bbf8c7bf7d4d0acb2842a5ffe7ecc","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/wizards/mapping/AuthModuleMappingPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FAuthModuleMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FAuthModuleMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FAuthModuleMappingPanel.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -28,7 +28,7 @@\n \n public class AuthModuleMappingPanel extends AbstractMappingPanel {\n \n-    private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = -8940651851569691064L;\n \n     public AuthModuleMappingPanel(final String id, final AuthModuleTO authModule) {\n         super(id,"},{"sha":"10acef86896583a69fc5c4350210e97e77640fa5","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/WA.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -21,3 +21,4 @@ config=Parameters\n sessions=Sessions\n authProfiles=Profiles\n push=Push\n+attrRepos=Attribute Repositories"},{"sha":"10acef86896583a69fc5c4350210e97e77640fa5","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/WA_fr_CA.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA_fr_CA.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -21,3 +21,4 @@ config=Parameters\n sessions=Sessions\n authProfiles=Profiles\n push=Push\n+attrRepos=Attribute Repositories"},{"sha":"7cb10b56f3303350ad18d418719baa4a0eabe8bd","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/WA_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA_it.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -21,3 +21,4 @@ config=Parametri\n sessions=Sessioni\n authProfiles=Profili\n push=Applica\n+attrRepos=Depositi di Attributi"},{"sha":"10acef86896583a69fc5c4350210e97e77640fa5","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/WA_ja.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA_ja.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -21,3 +21,4 @@ config=Parameters\n sessions=Sessions\n authProfiles=Profiles\n push=Push\n+attrRepos=Attribute Repositories"},{"sha":"10acef86896583a69fc5c4350210e97e77640fa5","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/WA_pt_BR.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA_pt_BR.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -21,3 +21,4 @@ config=Parameters\n sessions=Sessions\n authProfiles=Profiles\n push=Push\n+attrRepos=Attribute Repositories"},{"sha":"10acef86896583a69fc5c4350210e97e77640fa5","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/WA_ru.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA_ru.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -21,3 +21,4 @@ config=Parameters\n sessions=Sessions\n authProfiles=Profiles\n push=Push\n+attrRepos=Attribute Repositories"},{"sha":"e819d53fc0ba752607459e9c5112e0fa89a48f93","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/AttrRepoDirectoryPanel.properties","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,23 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+any.edit=Edit Parameter ${key}\n+any.new=New Attr Repo\n+any.edit=Edit Attr Repo\n+description=Description\n+type=Type\n+state=State\n+order=Order"},{"sha":"e0e06db5c0a4ab9ca2a23f76b06569c2e16c2eb2","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/AttrRepoDirectoryPanel_fr_CA.properties","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel_fr_CA.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,23 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+any.edit=Modifier param\\u00e8tre ${key}\n+any.new=New Attr Repo\n+any.edit=Edit Attr Repo\n+description=Description\n+type=Type\n+state=State\n+order=Order"},{"sha":"26c3438fd6dfe5da640766c4b518d1c5dfdb44e4","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/AttrRepoDirectoryPanel_it.properties","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel_it.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,23 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+any.edit=Modifica parametro ${key}\n+any.new=Nuovo Deposito di Attributi\n+any.edit=Aggiorna Deposito di Attributi\n+description=Descrizione\n+type=Tipo\n+state=Stato\n+order=Ordinamento"},{"sha":"3fe7748112f8a28317744c4c21d79b8427aaa2a0","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/AttrRepoDirectoryPanel_ja.properties","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel_ja.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,23 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+any.edit=\\u30d1\\u30e9\\u30e1\\u30fc\\u30bf\\u30fc ${key} \\u3092\\u7de8\\u96c6\n+any.new=New Attr Repo\n+any.edit=Edit Attr Repo\n+description=Description\n+type=Type\n+state=State\n+order=Order"},{"sha":"ad1a3f9640a8a97772d21bb4ef4b2773b96a717a","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/AttrRepoDirectoryPanel_pt_BR.properties","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel_pt_BR.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,23 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+any.edit=Editar par\\u00e2metro\n+any.new=New Attr Repo\n+any.edit=Edit Attr Repo\n+description=Description\n+type=Type\n+state=State\n+order=Order"},{"sha":"63cbbc9cfc5643a0dff314f08669bd7f5a0e1aca","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/AttrRepoDirectoryPanel_ru.properties","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrRepoDirectoryPanel_ru.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,24 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+any.edit=\\u0418\\u0437\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c \\u043f\\u0430\\u0440\\u0430\\u043c\\u0435\\u0442\\u0440 ${key}\n+any.new=New Attr Repo\n+any.edit=Edit Attr Repo\n+description=Description\n+type=Type\n+state=State\n+order=Order"},{"sha":"b687db478f407ae1174565caa4e407eb93edd154","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/AuthModuleDirectoryPanel.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -19,3 +19,5 @@ any.new=New Auth Module\n any.edit=Edit Auth Module\n description=Description\n type=Type\n+state=State\n+order=Order"},{"sha":"8d286a176da81a84158228b5e0b15d65905d953a","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/AuthModuleDirectoryPanel_fr_CA.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel_fr_CA.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -19,3 +19,5 @@ any.new=New Auth Module\n any.edit=Edit Auth Module\n description=Description\n type=Type\n+state=State\n+order=Order"},{"sha":"c122cc5d98f8dc62034c85b1039b8349ee1e02ed","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/AuthModuleDirectoryPanel_it.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel_it.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -19,3 +19,5 @@ any.new=Nuovo Modulo di Autenticazione\n any.edit=Aggiorna Modulo di Autenticazione\n description=Descrizione\n type=Tipo\n+state=Stato\n+order=Ordinamento"},{"sha":"60da8670c22c9efe3115cc486fce14fd2c9359f7","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/AuthModuleDirectoryPanel_ja.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel_ja.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -19,3 +19,5 @@ any.new=New Auth Module\n any.edit=Edit Auth Module\n description=Description\n type=Type\n+state=State\n+order=Order"},{"sha":"0f1790ab08fd92a42ff13a23fdcb682dfd83cb71","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/AuthModuleDirectoryPanel_pt_BR.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel_pt_BR.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -19,3 +19,5 @@ any.new=New Auth Module\n any.edit=Edit Auth Module\n description=Description\n type=Type\n+state=State\n+order=Order"},{"sha":"f87847bcab625c6d73f8206339d8f3309a18674e","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/AuthModuleDirectoryPanel_ru.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel_ru.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -20,3 +20,5 @@ any.new=New Auth Module\n any.edit=Edit Auth Module\n description=Description\n type=Type\n+state=State\n+order=Order"},{"sha":"aa0da3f6f61f76aa667bb7a3456e7eb466d2efc4","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/policies/AttrReleasePolicyModalPanel.html","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAttrReleasePolicyModalPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAttrReleasePolicyModalPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAttrReleasePolicyModalPanel.html?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -27,5 +27,23 @@\n     <div class=\"form-group\">\n       <span wicket:id=\"includeOnlyAttrs\"/>\n     </div>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"principalIdAttr\"/>\n+    </div>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"mergingStrategy\"/>\n+    </div>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"ignoreResolvedAttributes\"/>\n+    </div>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"expiration\"/>\n+    </div>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"timeUnit\"/>\n+    </div>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"attrRepos\"/>\n+    </div>\n   </wicket:extend>\n </html>"},{"sha":"7772c93b7b0f9ede0879d65b1ee4014cc4497248","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AttrRepoWizardBuilder$Configuration.html","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration.html?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,23 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <span wicket:id=\"bean\"/>\n+  </wicket:panel>\n+</html>"},{"sha":"8d2c500e11a13f53b300065f3db11c8571704970","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AttrRepoWizardBuilder$Configuration.properties","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,24 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+plainAttrs=Plain Attributes\n+derAttrs=Derived Attributes\n+virAttrs=Virtual Attributes\n+features=Features\n+matchingCond=Matching Condition\n+userMatchingCond=User Matching Condition\n+groupMatchingCond=Group Matching Condition\n+anyObjectMatchingCond=AnyObject Matching Condition"},{"sha":"e791574a14ebec8502e9420193bd93c4fd5522f6","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AttrRepoWizardBuilder$Configuration_fr_CA.properties","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration_fr_CA.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,24 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+plainAttrs=Attributs simples\n+derAttrs=Attributs d�riv�s\n+virAttrs=Attributs virtuels\n+features=Caract�ristiques\n+matchingCond=Condition d'appariement\n+userMatchingCond=Condition d'appariement des utilisateurs\n+groupMatchingCond=Condition d'appariement de groupe\n+anyObjectMatchingCond=Condition d'appariement de n'importe quel objet"},{"sha":"6688f852c27c506f95f30149b2a587ea9ffbeb9c","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AttrRepoWizardBuilder$Configuration_it.properties","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration_it.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,24 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+plainAttrs=Attributi\n+derAttrs=Attributi Derivati\n+virAttrs=Attributi Virtuali\n+features=Features\n+matchingCond=Condizione di matching\n+userMatchingCond=Condizione di matching utente\n+groupMatchingCond=Condizione di matching gruppo\n+anyObjectMatchingCond=Condizione di matching any"},{"sha":"ba85e50448b85bfccb4416344e187140bc748c09","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AttrRepoWizardBuilder$Configuration_ja.properties","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration_ja.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,24 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+plainAttrs=\\u30d7\\u30ec\\u30fc\\u30f3\\u5c5e\\u6027\n+derAttrs=\\u6d3e\\u751f\\u5c5e\\u6027\n+virAttrs=\\u4eee\\u60f3\\u5c5e\\u6027\n+features=\\u6a5f\\u80fd\n+matchingCond=\\u4e00\\u81f4\\u6761\\u4ef6\n+userMatchingCond=\\u30e6\\u30fc\\u30b6\\u2015\\u4e00\\u81f4\\u6761\\u4ef6\n+groupMatchingCond=\\u30b0\\u30eb\\u30fc\\u30d7\\u4e00\\u81f4\\u6761\\u4ef6\n+anyObjectMatchingCond=\\u4efb\\u610f\\u30aa\\u30d6\\u30b8\\u30a7\\u30af\\u30c8\\u4e00\\u81f4\\u6761\\u4ef6"},{"sha":"8d2c500e11a13f53b300065f3db11c8571704970","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AttrRepoWizardBuilder$Configuration_pt_BR.properties","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration_pt_BR.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,24 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+plainAttrs=Plain Attributes\n+derAttrs=Derived Attributes\n+virAttrs=Virtual Attributes\n+features=Features\n+matchingCond=Matching Condition\n+userMatchingCond=User Matching Condition\n+groupMatchingCond=Group Matching Condition\n+anyObjectMatchingCond=AnyObject Matching Condition"},{"sha":"721b3e531a1f1e7ce8644b54a57743af67fb9260","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AttrRepoWizardBuilder$Configuration_ru.properties","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Configuration_ru.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,25 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+plainAttrs=\\u041f\\u0440\\u043e\\u0441\\u0442\\u044b\\u0435 \\u0430\\u0442\\u0440\\u0438\\u0431\\u0443\\u0442\\u044b\n+derAttrs=\\u041f\\u0440\\u043e\\u0438\\u0437\\u0432\\u043e\\u0434\\u043d\\u044b\\u0435 \\u0430\\u0442\\u0440\\u0438\\u0431\\u0443\\u0442\\u044b\n+virAttrs=\\u0412\\u0438\\u0440\\u0442\\u0443\\u0430\\u043b\\u044c\\u043d\\u044b\\u0435 \\u0430\\u0442\\u0440\\u0438\\u0431\\u0443\\u0442\\u044b\n+features=\\u0421\\u0432\\u043e\\u0439\\u0441\\u0442\\u0432\\u0430\n+matchingCond=\\u041a\\u0440\\u0438\\u0442\\u0435\\u0440\\u0438\\u0439 \\u0441\\u043e\\u043e\\u0442\\u0432\\u0435\\u0442\\u0441\\u0442\\u0432\\u0438\\u044f\n+userMatchingCond=\\u041a\\u0440\\u0438\\u0442\\u0435\\u0440\\u0438\\u0439 \\u0441\\u043e\\u043e\\u0442\\u0432\\u0435\\u0442\\u0441\\u0442\\u0432\\u0438\\u044f \\u041f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u0435\\u0439\n+groupMatchingCond=\\u041a\\u0440\\u0438\\u0442\\u0435\\u0440\\u0438\\u0439 \\u0441\\u043e\\u043e\\u0442\\u0432\\u0435\\u0442\\u0441\\u0442\\u0432\\u0438\\u044f \\u0413\\u0440\\u0443\\u043f\\u043f\n+anyObjectMatchingCond=\\u041a\\u0440\\u0438\\u0442\\u0435\\u0440\\u0438\\u0439 \\u0441\\u043e\\u043e\\u0442\\u0432\\u0435\\u0442\\u0441\\u0442\\u0432\\u0438\\u044f \\u041e\\u0431\\u044a\\u0435\\u043a\\u0442\\u043e\\u0432"},{"sha":"272967359aa94f8a421f0a17eae93a9a382cad6c","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AttrRepoWizardBuilder$Mapping.html","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Mapping.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Mapping.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Mapping.html?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,23 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <span wicket:id=\"mapping\"/>\n+  </wicket:panel>\n+</html>"},{"sha":"ec6f0108f63dd5ffd2c3ddf4ff6e9a3459918600","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AttrRepoWizardBuilder$Profile.html","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile.html?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,27 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div class=\"form-group\"><span wicket:id=\"key\">[key]</span></div>\n+    <div class=\"form-group\"><span wicket:id=\"description\">[description]</span></div>\n+    <div class=\"form-group\"><span wicket:id=\"state\">[state]</span></div>\n+    <div class=\"form-group\"><span wicket:id=\"order\">[order]</span></div>\n+    <div class=\"form-group\"><span wicket:id=\"conf\">[conf]</span></div>\n+  </wicket:panel>\n+</html>"},{"sha":"daa0fa0db7973baa41d14a62d1b465b0895177a6","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AttrRepoWizardBuilder$Profile.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+description=Description\n+configuration=Configuration\n+type=Type\n+state=State\n+order=Order"},{"sha":"daa0fa0db7973baa41d14a62d1b465b0895177a6","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AttrRepoWizardBuilder$Profile_fr_CA.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile_fr_CA.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+description=Description\n+configuration=Configuration\n+type=Type\n+state=State\n+order=Order"},{"sha":"cd2b9511c3893b68c2862c430cf7bfcd4fea4e97","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AttrRepoWizardBuilder$Profile_it.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile_it.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+description=Descrizione\n+configuration=Configurazione\n+type=Tipo\n+state=Stato\n+order=Ordinamento"},{"sha":"fc9ca8bc2e47f81cf63b102697a3f84b846b1028","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AttrRepoWizardBuilder$Profile_ja.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile_ja.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+description=Description\n+configuration=\\u8a2d\\u5b9a\n+type=Type\n+state=State\n+order=Order"},{"sha":"daa0fa0db7973baa41d14a62d1b465b0895177a6","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AttrRepoWizardBuilder$Profile_pt_BR.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile_pt_BR.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+description=Description\n+configuration=Configuration\n+type=Type\n+state=State\n+order=Order"},{"sha":"d5039c717049286bf8496ffaa868ff415270e2fd","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AttrRepoWizardBuilder$Profile_ru.properties","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder%24Profile_ru.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,22 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+description=Description\n+configuration=\\u041a\\u043e\\u043d\\u0444\\u0438\\u0433\\u0443\\u0440\\u0430\\u0446\\u0438\\u044f\n+type=Type\n+state=State\n+order=Order"},{"sha":"ec6f0108f63dd5ffd2c3ddf4ff6e9a3459918600","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder$Profile.html","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile.html?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -20,6 +20,8 @@\n   <wicket:panel>\n     <div class=\"form-group\"><span wicket:id=\"key\">[key]</span></div>\n     <div class=\"form-group\"><span wicket:id=\"description\">[description]</span></div>\n+    <div class=\"form-group\"><span wicket:id=\"state\">[state]</span></div>\n+    <div class=\"form-group\"><span wicket:id=\"order\">[order]</span></div>\n     <div class=\"form-group\"><span wicket:id=\"conf\">[conf]</span></div>\n   </wicket:panel>\n </html>"},{"sha":"84ccc058a95f24e5a7a4a0dc19f6d14e75c1d8a4","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder$Profile.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -17,3 +17,4 @@\n description=Description\n configuration=Configuration\n type=Type\n+state=State"},{"sha":"84ccc058a95f24e5a7a4a0dc19f6d14e75c1d8a4","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder$Profile_fr_CA.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile_fr_CA.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -17,3 +17,4 @@\n description=Description\n configuration=Configuration\n type=Type\n+state=State"},{"sha":"ba404e074d9855c2f6bb2a8edf70ef52dddd335a","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder$Profile_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile_it.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -17,3 +17,4 @@\n description=Descrizione\n configuration=Configurazione\n type=Tipo\n+state=Stato"},{"sha":"768e1a5cc404b14d974ac66973c8004f4564e011","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder$Profile_ja.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile_ja.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -17,3 +17,4 @@\n description=Description\n configuration=\\u8a2d\\u5b9a\n type=Type\n+state=State"},{"sha":"84ccc058a95f24e5a7a4a0dc19f6d14e75c1d8a4","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder$Profile_pt_BR.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile_pt_BR.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -17,3 +17,4 @@\n description=Description\n configuration=Configuration\n type=Type\n+state=State"},{"sha":"783c5e67a9fba4f7ecff275d76d437de170cfbdc","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder$Profile_ru.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24Profile_ru.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -18,3 +18,4 @@\n description=Description\n configuration=\\u041a\\u043e\\u043d\\u0444\\u0438\\u0433\\u0443\\u0440\\u0430\\u0446\\u0438\\u044f\n type=Type\n+state=State"},{"sha":"70f5fb94d3a4c014a11061176e865b7938bb796c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -21,14 +21,18 @@\n import java.io.Serializable;\n import java.lang.reflect.Field;\n import java.lang.reflect.ParameterizedType;\n+import java.time.Duration;\n import java.time.OffsetDateTime;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.time.DateFormatUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.panels.search.AnyObjectSearchPanel;\n import org.apache.syncope.client.console.panels.search.GroupSearchPanel;\n import org.apache.syncope.client.console.panels.search.SearchClause;\n@@ -52,6 +56,8 @@\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.wicket.core.util.lang.PropertyResolver;\n+import org.apache.wicket.core.util.lang.PropertyResolverConverter;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n@@ -247,6 +253,25 @@ private static FieldPanel buildSinglePanel(\n                     DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT);\n         } else if (type.isEnum()) {\n             result = new AjaxDropDownChoicePanel(id, fieldName, model).setChoices(List.of(type.getEnumConstants()));\n+        } else if (Duration.class.equals(type)) {\n+            result = new AjaxTextFieldPanel(id, fieldName, new IModel<>() {\n+\n+                private static final long serialVersionUID = 807008909842554829L;\n+\n+                @Override\n+                public String getObject() {\n+                    return Optional.ofNullable(PropertyResolver.getValue(fieldName, bean)).\n+                            map(Object::toString).orElse(null);\n+                }\n+\n+                @Override\n+                public void setObject(final String object) {\n+                    PropertyResolverConverter prc = new PropertyResolverConverter(\n+                            SyncopeWebApplication.get().getConverterLocator(),\n+                            SyncopeConsoleSession.get().getLocale());\n+                    PropertyResolver.setValue(fieldName, bean, Duration.parse(object), prc);\n+                }\n+            });\n         } else {\n             // treat as String if nothing matched above\n             result = new AjaxTextFieldPanel(id, fieldName, model);"},{"sha":"f26dcfd437f37179f01100e35a7d81954cb519a3","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/AbstractJDBCConf.java","status":"added","additions":264,"deletions":0,"changes":264,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAbstractJDBCConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAbstractJDBCConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAbstractJDBCConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,264 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import org.apache.commons.lang3.StringUtils;\n+\n+public abstract class AbstractJDBCConf implements Serializable {\n+\n+    private static final long serialVersionUID = 2675132530878660196L;\n+\n+    /**\n+     * SQL query to execute. Example: {@code SELECT * FROM table WHERE name=?}.\n+     */\n+    private String sql;\n+\n+    /**\n+     * The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc)\n+     * which allows such software to translate its generic SQL statements into vendor specific DDL, DML.\n+     */\n+    private String dialect = \"org.hibernate.dialect.H2Dialect\";\n+\n+    /**\n+     * The JDBC driver used to connect to the database.\n+     */\n+    private String driverClass = \"org.h2.Driver\";\n+\n+    /**\n+     * The database connection URL.\n+     */\n+    private String url = \"jdbc:h2:tcp://localhost:9092/mem:authdb;DB_CLOSE_DELAY=-1\";\n+\n+    /**\n+     * The database user.\n+     * <p>\n+     * The database user must have sufficient permissions to be able to handle\n+     * schema changes and updates, when needed.\n+     */\n+    private String user = \"sa\";\n+\n+    /**\n+     * The database connection password.\n+     */\n+    private String password = \"sa\";\n+\n+    /**\n+     * Qualifies unqualified table names with the given catalog in generated SQL.\n+     */\n+    private String defaultCatalog;\n+\n+    /**\n+     * Qualify unqualified table names with the given schema/tablespace in generated SQL.\n+     */\n+    private String defaultSchema;\n+\n+    /**\n+     * The SQL query to be executed to test the validity of connections.\n+     * This is for \"legacy\" databases that do not support the JDBC4 {@code Connection.isValid()} API.\n+     */\n+    private String healthQuery = StringUtils.EMPTY;\n+\n+    /**\n+     * Controls the maximum amount of time that a connection is allowed to sit idle in the pool.\n+     */\n+    private Duration idleTimeout = Duration.parse(\"PT10M\");\n+\n+    /**\n+     * Attempts to do a JNDI data source look up for the data source name specified.\n+     * Will attempt to locate the data source object as is.\n+     */\n+    private String dataSourceName;\n+\n+    /**\n+     * Controls the minimum size that the pool is allowed\n+     * to reach, including both idle and in-use connections.\n+     */\n+    private int minPoolSize = 6;\n+\n+    /**\n+     * Controls the maximum number of connections to keep\n+     * in the pool, including both idle and in-use connections.\n+     */\n+    private int maxPoolSize = 18;\n+\n+    /**\n+     * Sets the maximum time in seconds that this data source will wait\n+     * while attempting to connect to a database.\n+     * A value of zero specifies that the timeout is the default system timeout\n+     * if there is one; otherwise, it specifies that there is no timeout.\n+     */\n+    private Duration maxPoolWait = Duration.parse(\"PT2S\");\n+\n+    /**\n+     * Whether or not pool suspension is allowed.\n+     * There is a performance impact when pool suspension is enabled.\n+     * Unless you need it (for a redundancy system for example) do not enable it.\n+     */\n+    private boolean poolSuspension;\n+\n+    /**\n+     * The maximum number of milliseconds that the\n+     * pool will wait for a connection to be validated as alive.\n+     */\n+    private long poolTimeoutMillis = 1_000;\n+\n+    /**\n+     * Controls the amount of time that a connection can be out of the pool before a message\n+     * is logged indicating a possible connection leak.\n+     */\n+    private int poolLeakThreshold = 3_000;\n+\n+    public String getSql() {\n+        return sql;\n+    }\n+\n+    public void setSql(final String sql) {\n+        this.sql = sql;\n+    }\n+\n+    public String getDialect() {\n+        return dialect;\n+    }\n+\n+    public void setDialect(final String dialect) {\n+        this.dialect = dialect;\n+    }\n+\n+    public String getDriverClass() {\n+        return driverClass;\n+    }\n+\n+    public void setDriverClass(final String driverClass) {\n+        this.driverClass = driverClass;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(final String url) {\n+        this.url = url;\n+    }\n+\n+    public String getUser() {\n+        return user;\n+    }\n+\n+    public void setUser(final String user) {\n+        this.user = user;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(final String password) {\n+        this.password = password;\n+    }\n+\n+    public String getDefaultCatalog() {\n+        return defaultCatalog;\n+    }\n+\n+    public void setDefaultCatalog(final String defaultCatalog) {\n+        this.defaultCatalog = defaultCatalog;\n+    }\n+\n+    public String getDefaultSchema() {\n+        return defaultSchema;\n+    }\n+\n+    public void setDefaultSchema(final String defaultSchema) {\n+        this.defaultSchema = defaultSchema;\n+    }\n+\n+    public String getHealthQuery() {\n+        return healthQuery;\n+    }\n+\n+    public void setHealthQuery(final String healthQuery) {\n+        this.healthQuery = healthQuery;\n+    }\n+\n+    public Duration getIdleTimeout() {\n+        return idleTimeout;\n+    }\n+\n+    public void setIdleTimeout(final Duration idleTimeout) {\n+        this.idleTimeout = idleTimeout;\n+    }\n+\n+    public String getDataSourceName() {\n+        return dataSourceName;\n+    }\n+\n+    public void setDataSourceName(final String dataSourceName) {\n+        this.dataSourceName = dataSourceName;\n+    }\n+\n+    public int getMinPoolSize() {\n+        return minPoolSize;\n+    }\n+\n+    public void setMinPoolSize(final int minPoolSize) {\n+        this.minPoolSize = minPoolSize;\n+    }\n+\n+    public int getMaxPoolSize() {\n+        return maxPoolSize;\n+    }\n+\n+    public void setMaxPoolSize(final int maxPoolSize) {\n+        this.maxPoolSize = maxPoolSize;\n+    }\n+\n+    public Duration getMaxPoolWait() {\n+        return maxPoolWait;\n+    }\n+\n+    public void setMaxPoolWait(final Duration maxPoolWait) {\n+        this.maxPoolWait = maxPoolWait;\n+    }\n+\n+    public boolean isPoolSuspension() {\n+        return poolSuspension;\n+    }\n+\n+    public void setPoolSuspension(final boolean poolSuspension) {\n+        this.poolSuspension = poolSuspension;\n+    }\n+\n+    public long getPoolTimeoutMillis() {\n+        return poolTimeoutMillis;\n+    }\n+\n+    public void setPoolTimeoutMillis(final long poolTimeoutMillis) {\n+        this.poolTimeoutMillis = poolTimeoutMillis;\n+    }\n+\n+    public int getPoolLeakThreshold() {\n+        return poolLeakThreshold;\n+    }\n+\n+    public void setPoolLeakThreshold(final int poolLeakThreshold) {\n+        this.poolLeakThreshold = poolLeakThreshold;\n+    }\n+}"},{"sha":"c40154654adb393017d3fb02242dc71c4b9f36ba","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/AbstractLDAPConf.java","status":"added","additions":453,"deletions":0,"changes":453,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAbstractLDAPConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAbstractLDAPConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAbstractLDAPConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,453 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public abstract class AbstractLDAPConf implements Serializable {\n+\n+    private static final long serialVersionUID = 3705514707899419599L;\n+\n+    /**\n+     * The ldap connection pool passivator.\n+     */\n+    public enum LdapConnectionPoolPassivator {\n+\n+        /**\n+         * No passivator.\n+         */\n+        NONE,\n+        /**\n+         * Bind passivator.\n+         */\n+        BIND\n+\n+    }\n+\n+    public enum LdapConnectionStrategy {\n+\n+        /**\n+         * First ldap used until it fails.\n+         */\n+        ACTIVE_PASSIVE,\n+        /**\n+         * Navigate the ldap url list for new connections and circle back.\n+         */\n+        ROUND_ROBIN,\n+        /**\n+         * Randomly pick a url.\n+         */\n+        RANDOM,\n+        /**\n+         * ldap urls based on DNS SRV records.\n+         */\n+        DNS_SRV\n+\n+    }\n+\n+    private String searchFilter;\n+\n+    /**\n+     * Whether subtree searching is allowed.\n+     */\n+    private boolean subtreeSearch = true;\n+\n+    private String ldapUrl;\n+\n+    /**\n+     * The bind DN to use when connecting to LDAP.\n+     * LDAP connection configuration injected into the LDAP connection pool\n+     * can be initialized with the following parameters:\n+     * <ul>\n+     * <li>{@code bindDn/bindCredential} provided - Use the provided credentials\n+     * to bind when initializing connections.</li>\n+     * <li>{@code bindDn/bindCredential} set to {@code *} - Use a fast-bind\n+     * strategy to initialize the pool.</li>\n+     * <li>{@code bindDn/bindCredential} set to blank - Skip connection\n+     * initializing; perform operations anonymously.</li>\n+     * <li>SASL mechanism provided - Use the given SASL mechanism\n+     * to bind when initializing connections. </li>\n+     * </ul>\n+     */\n+    private String bindDn;\n+\n+    /**\n+     * The bind credential to use when connecting to LDAP.\n+     */\n+    private String bindCredential;\n+\n+    private String baseDn;\n+\n+    /**\n+     * Whether to use a pooled connection factory in components.\n+     */\n+    private boolean disablePooling;\n+\n+    /**\n+     * Minimum LDAP connection pool size.\n+     * Size the pool should be initialized to and pruned to\n+     */\n+    private int minPoolSize = 3;\n+\n+    /**\n+     * Maximum LDAP connection pool size which the pool can use to grow.\n+     */\n+    private int maxPoolSize = 10;\n+\n+    /**\n+     * You may receive unexpected LDAP failures, when CAS is configured to authenticate\n+     * using {@code DIRECT} or {@code AUTHENTICATED} types and LDAP is locked down to not allow anonymous\n+     * binds/searches.\n+     * Every second attempt with a given LDAP connection from the pool would fail if it was on\n+     * the same connection as a failed login attempt, and the regular connection validator would\n+     * similarly fail. When a connection is returned back to a pool,\n+     * it still may contain the principal and credentials from the previous attempt.\n+     * Before the next bind attempt using that connection, the validator tries to\n+     * validate the connection again but fails because it’s no longer trying with the\n+     * configured bind credentials but with whatever user DN was used in the previous step.\n+     * Given the validation failure, the connection is closed and CAS would deny\n+     * access by default. Passivators attempt to reconnect\n+     * to LDAP with the configured bind credentials, effectively resetting the connection\n+     * to what it should be after each bind request.\n+     * Furthermore if you are seeing errors in the logs that resemble\n+     * a 'Operation exception encountered, reopening connection' type of message, this\n+     * usually is an indication that the connection pool’s validation timeout\n+     * established and created by CAS is greater than the timeout configured\n+     * in the LDAP server, or more likely, in the load balancer in front of\n+     * the LDAP servers. You can adjust the LDAP server session’s timeout\n+     * for connections, or you can teach CAS to use a validity period that\n+     * is equal or less than the LDAP server session’s timeout.\n+     * Accepted values are:\n+     * <ul>\n+     * <li>{@code NONE}: No passivation takes place.</li>\n+     * <li>{@code BIND}: The default behavior which passivates a connection by performing a\n+     * bind operation on it. This option requires the availability of bind credentials when establishing connections to\n+     * LDAP.</li>\n+     * </ul>\n+     */\n+    private LdapConnectionPoolPassivator poolPassivator = LdapConnectionPoolPassivator.BIND;\n+\n+    /**\n+     * Whether connections should be validated when loaned out from the pool.\n+     */\n+    private boolean validateOnCheckout = true;\n+\n+    /**\n+     * Whether connections should be validated periodically when the pool is idle.\n+     */\n+    private boolean validatePeriodically = true;\n+\n+    /**\n+     * Period at which validation operations may time out.\n+     */\n+    private Duration validateTimeout = Duration.parse(\"PT5S\");\n+\n+    /**\n+     * Period at which pool should be validated.\n+     */\n+    private Duration validatePeriod = Duration.parse(\"PT5M\");\n+\n+    /**\n+     * Attempt to populate the connection pool early on startup\n+     * and fail quickly if something goes wrong.\n+     */\n+    private boolean failFast = true;\n+\n+    /**\n+     * Removes connections from the pool based on how long they have been idle in the available queue.\n+     * Prunes connections that have been idle for more than the indicated amount.\n+     */\n+    private Duration idleTime = Duration.parse(\"PT10M\");\n+\n+    /**\n+     * Removes connections from the pool based on how long they have been idle in the available queue.\n+     * Run the pruning process at the indicated interval.\n+     */\n+    private Duration prunePeriod = Duration.parse(\"PT2H\");\n+\n+    /**\n+     * The length of time the pool will block.\n+     * By default the pool will block indefinitely and there is no guarantee that\n+     * waiting threads will be serviced in the order in which they made their request.\n+     * This option should be used with a blocking connection pool when you need to control the exact\n+     * number of connections that can be created\n+     */\n+    private Duration blockWaitTime = Duration.parse(\"PT3S\");\n+\n+    /**\n+     * If multiple URLs are provided as the ldapURL this describes how each URL will be processed.\n+     * <ul>\n+     * <li>{@code ACTIVE_PASSIVE} First LDAP will be used for every request unless it fails and then the next shall be\n+     * used.</li>\n+     * <li>{@code ROUND_ROBIN} For each new connection the next url in the list will be used.</li>\n+     * <li>{@code RANDOM} For each new connection a random LDAP url will be selected.</li>\n+     * <li>{@code DNS_SRV} LDAP urls based on DNS SRV records of the configured/given LDAP url will be used. </li>\n+     * </ul>\n+     */\n+    private LdapConnectionStrategy connectionStrategy;\n+\n+    /**\n+     * Whether TLS should be used and enabled when establishing the connection.\n+     */\n+    private boolean useStartTls;\n+\n+    /**\n+     * Sets the maximum amount of time that connects will block.\n+     */\n+    private Duration connectTimeout = Duration.parse(\"PT5S\");\n+\n+    /**\n+     * Duration of time to wait for responses.\n+     */\n+    private Duration responseTimeout = Duration.parse(\"PT5S\");\n+\n+    /**\n+     * Whether search/query results are allowed to match on multiple DNs,\n+     * or whether a single unique DN is expected for the result.\n+     */\n+    private boolean allowMultipleDns;\n+\n+    /**\n+     * Set if multiple Entries are allowed.\n+     */\n+    private boolean allowMultipleEntries;\n+\n+    /**\n+     * Set if search referrals should be followed.\n+     */\n+    private boolean followReferrals = true;\n+\n+    /**\n+     * Indicate the collection of attributes that are to be tagged and processed as binary\n+     * attributes by the underlying search resolver.\n+     */\n+    private List<String> binaryAttributes = Stream.of(\"objectGUID\", \"objectSid\").collect(Collectors.toList());\n+\n+    public String getSearchFilter() {\n+        return searchFilter;\n+    }\n+\n+    public void setSearchFilter(final String searchFilter) {\n+        this.searchFilter = searchFilter;\n+    }\n+\n+    public boolean isSubtreeSearch() {\n+        return subtreeSearch;\n+    }\n+\n+    public void setSubtreeSearch(final boolean subtreeSearch) {\n+        this.subtreeSearch = subtreeSearch;\n+    }\n+\n+    public String getLdapUrl() {\n+        return ldapUrl;\n+    }\n+\n+    public void setLdapUrl(final String ldapUrl) {\n+        this.ldapUrl = ldapUrl;\n+    }\n+\n+    public String getBindDn() {\n+        return bindDn;\n+    }\n+\n+    public void setBindDn(final String bindDn) {\n+        this.bindDn = bindDn;\n+    }\n+\n+    public String getBindCredential() {\n+        return bindCredential;\n+    }\n+\n+    public void setBindCredential(final String bindCredential) {\n+        this.bindCredential = bindCredential;\n+    }\n+\n+    public String getBaseDn() {\n+        return baseDn;\n+    }\n+\n+    public void setBaseDn(final String baseDn) {\n+        this.baseDn = baseDn;\n+    }\n+\n+    public boolean isDisablePooling() {\n+        return disablePooling;\n+    }\n+\n+    public void setDisablePooling(final boolean disablePooling) {\n+        this.disablePooling = disablePooling;\n+    }\n+\n+    public int getMinPoolSize() {\n+        return minPoolSize;\n+    }\n+\n+    public void setMinPoolSize(final int minPoolSize) {\n+        this.minPoolSize = minPoolSize;\n+    }\n+\n+    public int getMaxPoolSize() {\n+        return maxPoolSize;\n+    }\n+\n+    public void setMaxPoolSize(final int maxPoolSize) {\n+        this.maxPoolSize = maxPoolSize;\n+    }\n+\n+    public LdapConnectionPoolPassivator getPoolPassivator() {\n+        return poolPassivator;\n+    }\n+\n+    public void setPoolPassivator(final LdapConnectionPoolPassivator poolPassivator) {\n+        this.poolPassivator = poolPassivator;\n+    }\n+\n+    public boolean isValidateOnCheckout() {\n+        return validateOnCheckout;\n+    }\n+\n+    public void setValidateOnCheckout(final boolean validateOnCheckout) {\n+        this.validateOnCheckout = validateOnCheckout;\n+    }\n+\n+    public boolean isValidatePeriodically() {\n+        return validatePeriodically;\n+    }\n+\n+    public void setValidatePeriodically(final boolean validatePeriodically) {\n+        this.validatePeriodically = validatePeriodically;\n+    }\n+\n+    public Duration getValidateTimeout() {\n+        return validateTimeout;\n+    }\n+\n+    public void setValidateTimeout(final Duration validateTimeout) {\n+        this.validateTimeout = validateTimeout;\n+    }\n+\n+    public Duration getValidatePeriod() {\n+        return validatePeriod;\n+    }\n+\n+    public void setValidatePeriod(final Duration validatePeriod) {\n+        this.validatePeriod = validatePeriod;\n+    }\n+\n+    public boolean isFailFast() {\n+        return failFast;\n+    }\n+\n+    public void setFailFast(final boolean failFast) {\n+        this.failFast = failFast;\n+    }\n+\n+    public Duration getIdleTime() {\n+        return idleTime;\n+    }\n+\n+    public void setIdleTime(final Duration idleTime) {\n+        this.idleTime = idleTime;\n+    }\n+\n+    public Duration getPrunePeriod() {\n+        return prunePeriod;\n+    }\n+\n+    public void setPrunePeriod(final Duration prunePeriod) {\n+        this.prunePeriod = prunePeriod;\n+    }\n+\n+    public Duration getBlockWaitTime() {\n+        return blockWaitTime;\n+    }\n+\n+    public void setBlockWaitTime(final Duration blockWaitTime) {\n+        this.blockWaitTime = blockWaitTime;\n+    }\n+\n+    public LdapConnectionStrategy getConnectionStrategy() {\n+        return connectionStrategy;\n+    }\n+\n+    public void setConnectionStrategy(final LdapConnectionStrategy connectionStrategy) {\n+        this.connectionStrategy = connectionStrategy;\n+    }\n+\n+    public boolean isUseStartTls() {\n+        return useStartTls;\n+    }\n+\n+    public void setUseStartTls(final boolean useStartTls) {\n+        this.useStartTls = useStartTls;\n+    }\n+\n+    public Duration getConnectTimeout() {\n+        return connectTimeout;\n+    }\n+\n+    public void setConnectTimeout(final Duration connectTimeout) {\n+        this.connectTimeout = connectTimeout;\n+    }\n+\n+    public Duration getResponseTimeout() {\n+        return responseTimeout;\n+    }\n+\n+    public void setResponseTimeout(final Duration responseTimeout) {\n+        this.responseTimeout = responseTimeout;\n+    }\n+\n+    public boolean isAllowMultipleDns() {\n+        return allowMultipleDns;\n+    }\n+\n+    public void setAllowMultipleDns(final boolean allowMultipleDns) {\n+        this.allowMultipleDns = allowMultipleDns;\n+    }\n+\n+    public boolean isAllowMultipleEntries() {\n+        return allowMultipleEntries;\n+    }\n+\n+    public void setAllowMultipleEntries(final boolean allowMultipleEntries) {\n+        this.allowMultipleEntries = allowMultipleEntries;\n+    }\n+\n+    public boolean isFollowReferrals() {\n+        return followReferrals;\n+    }\n+\n+    public void setFollowReferrals(final boolean followReferrals) {\n+        this.followReferrals = followReferrals;\n+    }\n+\n+    public List<String> getBinaryAttributes() {\n+        return binaryAttributes;\n+    }\n+\n+    public void setBinaryAttributes(final List<String> binaryAttributes) {\n+        this.binaryAttributes = binaryAttributes;\n+    }\n+}"},{"sha":"9180728ccc3c852c9c589e7ef8b6df4aa3f37380","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/attr/AttrRepoConf.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fattr%2FAttrRepoConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fattr%2FAttrRepoConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fattr%2FAttrRepoConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.attr;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import java.util.Map;\n+import org.apache.syncope.common.lib.BaseBean;\n+\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"_class\")\n+public interface AttrRepoConf extends BaseBean {\n+\n+    interface Mapper {\n+\n+        Map<String, Object> map(StubAttrRepoConf conf);\n+\n+        Map<String, Object> map(LDAPAttrRepoConf conf);\n+\n+        Map<String, Object> map(JDBCAttrRepoConf conf);\n+\n+        Map<String, Object> map(SyncopeAttrRepoConf conf);\n+    }\n+\n+    Map<String, Object> map(Mapper mapper);\n+}"},{"sha":"71a2ef7151965b750358b104c640d75bfba1516e","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/attr/JDBCAttrRepoConf.java","status":"added","additions":157,"deletions":0,"changes":157,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fattr%2FJDBCAttrRepoConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fattr%2FJDBCAttrRepoConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fattr%2FJDBCAttrRepoConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.attr;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.syncope.common.lib.AbstractJDBCConf;\n+\n+public class JDBCAttrRepoConf extends AbstractJDBCConf implements AttrRepoConf {\n+\n+    private static final long serialVersionUID = -4474060002361453868L;\n+\n+    public enum CaseCanonicalizationMode {\n+\n+        LOWER,\n+        UPPER,\n+        NONE;\n+\n+    }\n+\n+    public enum QueryType {\n+        AND,\n+        OR\n+\n+    }\n+\n+    /**\n+     * Designed to work against a table where there is a mapping of one row to one user.\n+     */\n+    private boolean singleRow = true;\n+\n+    /**\n+     * If the SQL should only be run if all attributes listed in the mappings exist in the query.\n+     */\n+    private boolean requireAllAttributes = true;\n+\n+    /**\n+     * When constructing the final person object from the attribute repository,\n+     * indicate how the username should be canonicalized.\n+     */\n+    private CaseCanonicalizationMode caseCanonicalization = CaseCanonicalizationMode.NONE;\n+\n+    /**\n+     * Indicates how multiple attributes in a query should be concatenated together.\n+     */\n+    private QueryType queryType = QueryType.AND;\n+\n+    /**\n+     * Used only when there is a mapping of many rows to one user.\n+     * This is done using a key-value structure where the key is the\n+     * name of the \"attribute name\" column the value is the name of the \"attribute value\" column.\n+     */\n+    private final Map<String, String> columnMappings = new HashMap<>(0);\n+\n+    /**\n+     * Username attribute(s) to use when running the SQL query.\n+     */\n+    private final List<String> username = new ArrayList<>(0);\n+\n+    /**\n+     * Map of attributes to fetch from the database.\n+     * Attributes are defined using a key-value structure\n+     * where CAS allows the attribute name/key to be renamed virtually\n+     * to a different attribute. The key is the attribute fetched\n+     * from the data source and the value is the attribute name CAS should\n+     * use for virtual renames.\n+     */\n+    private final Map<String, String> attributes = new HashMap<>(0);\n+\n+    /**\n+     * Collection of attributes, used to build the SQL query, that should go through\n+     * a case canonicalization process defined as {@code key->value}.\n+     */\n+    private final List<String> caseInsensitiveQueryAttributes = new ArrayList<>(0);\n+\n+    /**\n+     * Define a {@code Map} of query attribute names to data-layer attribute names to use when building the query.\n+     * The key is always the name of the query attribute that is defined by CAS and passed internally,\n+     * and the value is the database column that should map.\n+     */\n+    private final Map<String, String> queryAttributes = new HashMap<>(0);\n+\n+    public boolean isSingleRow() {\n+        return singleRow;\n+    }\n+\n+    public void setSingleRow(final boolean singleRow) {\n+        this.singleRow = singleRow;\n+    }\n+\n+    public boolean isRequireAllAttributes() {\n+        return requireAllAttributes;\n+    }\n+\n+    public void setRequireAllAttributes(final boolean requireAllAttributes) {\n+        this.requireAllAttributes = requireAllAttributes;\n+    }\n+\n+    public CaseCanonicalizationMode getCaseCanonicalization() {\n+        return caseCanonicalization;\n+    }\n+\n+    public void setCaseCanonicalization(final CaseCanonicalizationMode caseCanonicalization) {\n+        this.caseCanonicalization = caseCanonicalization;\n+    }\n+\n+    public QueryType getQueryType() {\n+        return queryType;\n+    }\n+\n+    public void setQueryType(final QueryType queryType) {\n+        this.queryType = queryType;\n+    }\n+\n+    public Map<String, String> getColumnMappings() {\n+        return columnMappings;\n+    }\n+\n+    public List<String> getUsername() {\n+        return username;\n+    }\n+\n+    public Map<String, String> getAttributes() {\n+        return attributes;\n+    }\n+\n+    public List<String> getCaseInsensitiveQueryAttributes() {\n+        return caseInsensitiveQueryAttributes;\n+    }\n+\n+    public Map<String, String> getQueryAttributes() {\n+        return queryAttributes;\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final Mapper mapper) {\n+        return mapper.map(this);\n+    }\n+}"},{"sha":"26de86db1b395eedcc8b1ccf532f295cc9f34f0d","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/attr/LDAPAttrRepoConf.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fattr%2FLDAPAttrRepoConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fattr%2FLDAPAttrRepoConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fattr%2FLDAPAttrRepoConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.attr;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.syncope.common.lib.AbstractLDAPConf;\n+\n+public class LDAPAttrRepoConf extends AbstractLDAPConf implements AttrRepoConf {\n+\n+    private static final long serialVersionUID = -471527731042579422L;\n+\n+    /**\n+     * Map of attributes to fetch from the database.\n+     * Attributes are defined using a key-value structure\n+     * where CAS allows the attribute name/key to be renamed virtually\n+     * to a different attribute. The key is the attribute fetched\n+     * from the data source and the value is the attribute name CAS should\n+     * use for virtual renames.\n+     */\n+    private final Map<String, String> attributes = new HashMap<>(0);\n+\n+    /**\n+     * Whether all existing attributes should be passed\n+     * down to the query builder map and be used in the construction\n+     * of the filter.\n+     */\n+    private boolean useAllQueryAttributes = true;\n+\n+    /**\n+     * Define a {@code Map} of query attribute names to data-layer attribute names to use when building the query.\n+     * The key is always the name of the query attribute that is defined by CAS and passed internally,\n+     * and the value is the column/field that should map.\n+     */\n+    private final Map<String, String> queryAttributes = new HashMap<>(0);\n+\n+    public boolean isUseAllQueryAttributes() {\n+        return useAllQueryAttributes;\n+    }\n+\n+    public void setUseAllQueryAttributes(final boolean useAllQueryAttributes) {\n+        this.useAllQueryAttributes = useAllQueryAttributes;\n+    }\n+\n+    public Map<String, String> getAttributes() {\n+        return attributes;\n+    }\n+\n+    public Map<String, String> getQueryAttributes() {\n+        return queryAttributes;\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final Mapper mapper) {\n+        return mapper.map(this);\n+    }\n+}"},{"sha":"6736a00d0044c9425f5ea47cd298fe154cd7883b","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/attr/StubAttrRepoConf.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fattr%2FStubAttrRepoConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fattr%2FStubAttrRepoConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fattr%2FStubAttrRepoConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.attr;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class StubAttrRepoConf implements AttrRepoConf {\n+\n+    private static final long serialVersionUID = 835890230066546723L;\n+\n+    /**\n+     * Static attributes that need to be mapped to a hardcoded value belong here.\n+     * The structure follows a key-value pair where key is the attribute name\n+     * and value is the attribute value.\n+     */\n+    private final Map<String, String> attributes = new HashMap<>(0);\n+\n+    public Map<String, String> getAttributes() {\n+        return attributes;\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final Mapper mapper) {\n+        return mapper.map(this);\n+    }\n+}"},{"sha":"6d2d9fe56585697c5b23bed9a5d040be2334f9c2","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/attr/SyncopeAttrRepoConf.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fattr%2FSyncopeAttrRepoConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fattr%2FSyncopeAttrRepoConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fattr%2FSyncopeAttrRepoConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.attr;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+\n+public class SyncopeAttrRepoConf implements AttrRepoConf {\n+\n+    private static final long serialVersionUID = -3334329948161152222L;\n+\n+    private String domain = SyncopeConstants.MASTER_DOMAIN;\n+\n+    /**\n+     * User FIQL filter to use for searching.\n+     */\n+    protected String searchFilter;\n+\n+    /**\n+     * Specify the username for REST authentication.\n+     */\n+    private String basicAuthUsername;\n+\n+    /**\n+     * Specify the password for REST authentication.\n+     */\n+    private String basicAuthPassword;\n+\n+    /**\n+     * Headers, defined as a Map, to include in the request when making the REST call.\n+     * Will overwrite any header that CAS is pre-defined to\n+     * send and include in the request. Key in the map should be the header name\n+     * and the value in the map should be the header value.\n+     */\n+    private final Map<String, String> headers = new HashMap<>();\n+\n+    public String getDomain() {\n+        return domain;\n+    }\n+\n+    public void setDomain(final String domain) {\n+        this.domain = domain;\n+    }\n+\n+    public String getSearchFilter() {\n+        return searchFilter;\n+    }\n+\n+    public void setSearchFilter(final String searchFilter) {\n+        this.searchFilter = searchFilter;\n+    }\n+\n+    public String getBasicAuthUsername() {\n+        return basicAuthUsername;\n+    }\n+\n+    public void setBasicAuthUsername(final String basicAuthUsername) {\n+        this.basicAuthUsername = basicAuthUsername;\n+    }\n+\n+    public String getBasicAuthPassword() {\n+        return basicAuthPassword;\n+    }\n+\n+    public void setBasicAuthPassword(final String basicAuthPassword) {\n+        this.basicAuthPassword = basicAuthPassword;\n+    }\n+\n+    public Map<String, String> getHeaders() {\n+        return headers;\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final Mapper mapper) {\n+        return mapper.map(this);\n+    }\n+}"},{"sha":"8ba5d2cc39c91a6126863dd29fddf58e911de1c7","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/AuthModuleConf.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAuthModuleConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -19,8 +19,36 @@\n package org.apache.syncope.common.lib.auth;\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import java.util.Map;\n import org.apache.syncope.common.lib.BaseBean;\n \n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"_class\")\n public interface AuthModuleConf extends BaseBean {\n+\n+    interface Mapper {\n+\n+        Map<String, Object> map(StaticAuthModuleConf conf);\n+\n+        Map<String, Object> map(LDAPAuthModuleConf conf);\n+\n+        Map<String, Object> map(JDBCAuthModuleConf conf);\n+\n+        Map<String, Object> map(JaasAuthModuleConf conf);\n+\n+        Map<String, Object> map(OIDCAuthModuleConf conf);\n+\n+        Map<String, Object> map(SAML2IdPAuthModuleConf conf);\n+\n+        Map<String, Object> map(SyncopeAuthModuleConf conf);\n+\n+        Map<String, Object> map(GoogleMfaAuthModuleConf conf);\n+\n+        Map<String, Object> map(DuoMfaAuthModuleConf conf);\n+\n+        Map<String, Object> map(U2FAuthModuleConf conf);\n+\n+        Map<String, Object> map(SimpleMfaAuthModuleConf conf);\n+    }\n+\n+    Map<String, Object> map(Mapper mapper);\n }"},{"sha":"ac29429f31d9d1a4783a00f526f3c184f7c1223a","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/DuoMfaAuthModuleConf.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FDuoMfaAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FDuoMfaAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FDuoMfaAuthModuleConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.common.lib.auth;\n \n+import java.util.Map;\n+\n public class DuoMfaAuthModuleConf implements MFAAuthModuleConf {\n \n     private static final long serialVersionUID = -2883257599439312426L;\n@@ -66,4 +68,9 @@ public String getApiHost() {\n     public void setApiHost(final String apiHost) {\n         this.apiHost = apiHost;\n     }\n+\n+    @Override\n+    public Map<String, Object> map(final Mapper mapper) {\n+        return mapper.map(this);\n+    }\n }"},{"sha":"0caa62bb233c71b964d2dff0f04569cfab4c511a","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/GoogleMfaAuthModuleConf.java","status":"modified","additions":8,"deletions":81,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FGoogleMfaAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FGoogleMfaAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FGoogleMfaAuthModuleConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -19,12 +19,14 @@\n package org.apache.syncope.common.lib.auth;\n \n import java.io.Serializable;\n+import java.util.Map;\n+import org.apache.syncope.common.lib.AbstractLDAPConf;\n \n public class GoogleMfaAuthModuleConf implements MFAAuthModuleConf {\n \n     private static final long serialVersionUID = -7883257599139312426L;\n \n-    public static class LDAP implements Serializable {\n+    public static class LDAP extends AbstractLDAPConf implements Serializable {\n \n         private static final long serialVersionUID = -7274446267090678730L;\n \n@@ -33,93 +35,13 @@ public static class LDAP implements Serializable {\n          */\n         private String accountAttributeName = \"casGAuthRecord\";\n \n-        /**\n-         * Base DN to use. There may be scenarios where different parts of a single LDAP tree\n-         * could be considered as base-dns. Each entry can be specified\n-         * and joined together using a special delimiter character.\n-         */\n-        private String baseDn;\n-\n-        /**\n-         * The bind credential to use when connecting to LDAP.\n-         */\n-        private String bindCredential;\n-\n-        /**\n-         * The bind DN to use when connecting to LDAP.\n-         */\n-        private String bindDn;\n-\n-        /**\n-         * The LDAP url to the server. More than one may be specified, separated by space and/or comma.\n-         */\n-        private String url;\n-\n-        /**\n-         * User filter to use for searching. Syntax is i.e. cn={user} or cn={0}.\n-         */\n-        private String searchFilter;\n-\n-        /**\n-         * Whether subtree searching is allowed.\n-         */\n-        private boolean subtreeSearch = true;\n-\n         public String getAccountAttributeName() {\n             return accountAttributeName;\n         }\n \n         public void setAccountAttributeName(final String accountAttributeName) {\n             this.accountAttributeName = accountAttributeName;\n         }\n-\n-        public String getBaseDn() {\n-            return baseDn;\n-        }\n-\n-        public void setBaseDn(final String baseDn) {\n-            this.baseDn = baseDn;\n-        }\n-\n-        public String getBindCredential() {\n-            return bindCredential;\n-        }\n-\n-        public void setBindCredential(final String bindCredential) {\n-            this.bindCredential = bindCredential;\n-        }\n-\n-        public String getBindDn() {\n-            return bindDn;\n-        }\n-\n-        public void setBindDn(final String bindDn) {\n-            this.bindDn = bindDn;\n-        }\n-\n-        public String getUrl() {\n-            return url;\n-        }\n-\n-        public void setUrl(final String url) {\n-            this.url = url;\n-        }\n-\n-        public String getSearchFilter() {\n-            return searchFilter;\n-        }\n-\n-        public void setSearchFilter(final String searchFilter) {\n-            this.searchFilter = searchFilter;\n-        }\n-\n-        public boolean isSubtreeSearch() {\n-            return subtreeSearch;\n-        }\n-\n-        public void setSubtreeSearch(final boolean subtreeSearch) {\n-            this.subtreeSearch = subtreeSearch;\n-        }\n     }\n \n     /**\n@@ -206,4 +128,9 @@ public LDAP getLdap() {\n     public void setLdap(final LDAP ldap) {\n         this.ldap = ldap;\n     }\n+\n+    @Override\n+    public Map<String, Object> map(final Mapper mapper) {\n+        return mapper.map(this);\n+    }\n }"},{"sha":"b1037451f8f29af34c8e1ba2c8aae561e3ac544c","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/JDBCAuthModuleConf.java","status":"modified","additions":6,"deletions":81,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FJDBCAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FJDBCAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FJDBCAuthModuleConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -20,16 +20,13 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n+import org.apache.syncope.common.lib.AbstractJDBCConf;\n \n-public class JDBCAuthModuleConf implements AuthModuleConf {\n+public class JDBCAuthModuleConf extends AbstractJDBCConf implements AuthModuleConf {\n \n     private static final long serialVersionUID = 8383233437907219385L;\n \n-    /**\n-     * SQL query to execute. Example: {@code SELECT * FROM table WHERE name=?}.\n-     */\n-    private String sql;\n-\n     /**\n      * Password field/column name to retrieve.\n      */\n@@ -45,48 +42,11 @@ public class JDBCAuthModuleConf implements AuthModuleConf {\n      */\n     private String fieldDisabled;\n \n-    /**\n-     * The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc)\n-     * which allows such software to translate its generic SQL statements into vendor specific DDL, DML.\n-     */\n-    private String dialect = \"org.hibernate.dialect.H2Dialect\";\n-\n-    /**\n-     * The JDBC driver used to connect to the database.\n-     */\n-    private String driverClass = \"org.h2.Driver\";\n-\n-    /**\n-     * The database connection URL.\n-     */\n-    private String url = \"jdbc:h2:tcp://localhost:9092/mem:authdb;DB_CLOSE_DELAY=-1\";\n-\n-    /**\n-     * The database user.\n-     * <p>\n-     * The database user must have sufficient permissions to be able to handle\n-     * schema changes and updates, when needed.\n-     */\n-    private String user = \"sa\";\n-\n-    /**\n-     * The database connection password.\n-     */\n-    private String password = \"sa\";\n-\n     /**\n      * List of column names to fetch as user attributes.\n      */\n     private final List<String> principalAttributeList = new ArrayList<>();\n \n-    public String getSql() {\n-        return sql;\n-    }\n-\n-    public void setSql(final String sql) {\n-        this.sql = sql;\n-    }\n-\n     public String getFieldPassword() {\n         return fieldPassword;\n     }\n@@ -115,43 +75,8 @@ public List<String> getPrincipalAttributeList() {\n         return principalAttributeList;\n     }\n \n-    public String getDialect() {\n-        return dialect;\n-    }\n-\n-    public void setDialect(final String dialect) {\n-        this.dialect = dialect;\n-    }\n-\n-    public String getDriverClass() {\n-        return driverClass;\n-    }\n-\n-    public void setDriverClass(final String driverClass) {\n-        this.driverClass = driverClass;\n-    }\n-\n-    public String getUrl() {\n-        return url;\n-    }\n-\n-    public void setUrl(final String url) {\n-        this.url = url;\n-    }\n-\n-    public String getUser() {\n-        return user;\n-    }\n-\n-    public void setUser(final String user) {\n-        this.user = user;\n-    }\n-\n-    public String getPassword() {\n-        return password;\n-    }\n-\n-    public void setPassword(final String password) {\n-        this.password = password;\n+    @Override\n+    public Map<String, Object> map(final Mapper mapper) {\n+        return mapper.map(this);\n     }\n }"},{"sha":"1b4f5ef9082f57929c14223237a29e7953bf29fd","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/JaasAuthModuleConf.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FJaasAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FJaasAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FJaasAuthModuleConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.common.lib.auth;\n \n+import java.util.Map;\n+\n public class JaasAuthModuleConf implements AuthModuleConf {\n \n     private static final long serialVersionUID = -7775771400318503131L;\n@@ -80,4 +82,9 @@ public String getLoginConfigurationFile() {\n     public void setLoginConfigurationFile(final String loginConfigurationFile) {\n         this.loginConfigurationFile = loginConfigurationFile;\n     }\n+\n+    @Override\n+    public Map<String, Object> map(final Mapper mapper) {\n+        return mapper.map(this);\n+    }\n }"},{"sha":"9c3c97746b1744d80bbd594466cbc081726e7426","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/LDAPAuthModuleConf.java","status":"modified","additions":8,"deletions":82,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FLDAPAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FLDAPAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FLDAPAuthModuleConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -20,64 +20,25 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n+import org.apache.syncope.common.lib.AbstractLDAPConf;\n \n-public class LDAPAuthModuleConf implements AuthModuleConf {\n+public class LDAPAuthModuleConf extends AbstractLDAPConf implements AuthModuleConf {\n \n     private static final long serialVersionUID = -471527731042579422L;\n \n-    protected String searchFilter;\n-\n     /**\n      * The attribute value that should be used\n      * for the authenticated username, upon a successful authentication\n      * attempt.\n      */\n     private String userIdAttribute;\n \n-    /**\n-     * Whether subtree searching is allowed.\n-     */\n-    private boolean subtreeSearch = true;\n-\n-    private String ldapUrl;\n-\n-    /**\n-     * The bind DN to use when connecting to LDAP.\n-     * LDAP connection configuration injected into the LDAP connection pool\n-     * can be initialized with the following parameters:\n-     * <ul>\n-     * <li>{@code bindDn/bindCredential} provided - Use the provided credentials\n-     * to bind when initializing connections.</li>\n-     * <li>{@code bindDn/bindCredential} set to {@code *} - Use a fast-bind\n-     * strategy to initialize the pool.</li>\n-     * <li>{@code bindDn/bindCredential} set to blank - Skip connection\n-     * initializing; perform operations anonymously.</li>\n-     * <li>SASL mechanism provided - Use the given SASL mechanism\n-     * to bind when initializing connections. </li>\n-     * </ul>\n-     */\n-    private String bindDn;\n-\n-    /**\n-     * The bind credential to use when connecting to LDAP.\n-     */\n-    private String bindCredential;\n-\n-    private String baseDn;\n-\n     /**\n      * List of attribute names to fetch as user attributes.\n      */\n     private final List<String> principalAttributeList = new ArrayList<>();\n \n-    public String getSearchFilter() {\n-        return searchFilter;\n-    }\n-\n-    public void setSearchFilter(final String searchFilter) {\n-        this.searchFilter = searchFilter;\n-    }\n-\n     public String getUserIdAttribute() {\n         return userIdAttribute;\n     }\n@@ -86,47 +47,12 @@ public void setUserIdAttribute(final String userIdAttribute) {\n         this.userIdAttribute = userIdAttribute;\n     }\n \n-    public boolean isSubtreeSearch() {\n-        return subtreeSearch;\n-    }\n-\n-    public void setSubtreeSearch(final boolean subtreeSearch) {\n-        this.subtreeSearch = subtreeSearch;\n-    }\n-\n-    public String getLdapUrl() {\n-        return ldapUrl;\n-    }\n-\n-    public void setLdapUrl(final String ldapUrl) {\n-        this.ldapUrl = ldapUrl;\n-    }\n-\n-    public String getBindDn() {\n-        return bindDn;\n-    }\n-\n-    public void setBindDn(final String bindDn) {\n-        this.bindDn = bindDn;\n-    }\n-\n-    public String getBindCredential() {\n-        return bindCredential;\n-    }\n-\n-    public void setBindCredential(final String bindCredential) {\n-        this.bindCredential = bindCredential;\n-    }\n-\n-    public String getBaseDn() {\n-        return baseDn;\n-    }\n-\n-    public void setBaseDn(final String baseDn) {\n-        this.baseDn = baseDn;\n-    }\n-\n     public List<String> getPrincipalAttributeList() {\n         return principalAttributeList;\n     }\n+\n+    @Override\n+    public Map<String, Object> map(final Mapper mapper) {\n+        return mapper.map(this);\n+    }\n }"},{"sha":"09141a74fecdcd4ad8a9b767242dfcd8146a1da6","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/OIDCAuthModuleConf.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOIDCAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOIDCAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOIDCAuthModuleConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -166,4 +166,9 @@ public String getResponseType() {\n     public void setResponseType(final String responseType) {\n         this.responseType = responseType;\n     }\n+\n+    @Override\n+    public Map<String, Object> map(final Mapper mapper) {\n+        return mapper.map(this);\n+    }\n }"},{"sha":"bdf1ffe07f64395c26d2066c4024b36ce84f9272","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/SAML2IdPAuthModuleConf.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n \n public class SAML2IdPAuthModuleConf implements AuthModuleConf {\n@@ -383,4 +384,9 @@ public String getProviderName() {\n     public void setProviderName(final String providerName) {\n         this.providerName = providerName;\n     }\n+\n+    @Override\n+    public Map<String, Object> map(final Mapper mapper) {\n+        return mapper.map(this);\n+    }\n }"},{"sha":"a102533fb256293afff346c21d9e67ebfe80403c","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/SimpleMfaAuthModuleConf.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSimpleMfaAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSimpleMfaAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSimpleMfaAuthModuleConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.common.lib.auth;\n \n+import java.util.Map;\n+\n public class SimpleMfaAuthModuleConf implements MFAAuthModuleConf {\n \n     private static final long serialVersionUID = -7663257599139312426L;\n@@ -96,4 +98,9 @@ public int getTokenLength() {\n     public void setTokenLength(final int tokenLength) {\n         this.tokenLength = tokenLength;\n     }\n+\n+    @Override\n+    public Map<String, Object> map(final Mapper mapper) {\n+        return mapper.map(this);\n+    }\n }"},{"sha":"b7b82ee9b12b11a2fba6da7a7d1c676d927cbf2a","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/StaticAuthModuleConf.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FStaticAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FStaticAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FStaticAuthModuleConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -30,4 +30,9 @@ public class StaticAuthModuleConf implements AuthModuleConf {\n     public Map<String, String> getUsers() {\n         return users;\n     }\n+\n+    @Override\n+    public Map<String, Object> map(final Mapper mapper) {\n+        return mapper.map(this);\n+    }\n }"},{"sha":"e706b73e70267f8a1175d2d271c71cfc99316816","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/SyncopeAuthModuleConf.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSyncopeAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSyncopeAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSyncopeAuthModuleConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.lib.auth;\n \n+import java.util.Map;\n import org.apache.syncope.common.lib.SyncopeConstants;\n \n public class SyncopeAuthModuleConf implements AuthModuleConf {\n@@ -33,4 +34,9 @@ public String getDomain() {\n     public void setDomain(final String domain) {\n         this.domain = domain;\n     }\n+\n+    @Override\n+    public Map<String, Object> map(final Mapper mapper) {\n+        return mapper.map(this);\n+    }\n }"},{"sha":"617eec67d3c0e655f3a8d83c99adc473a2598b89","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/U2FAuthModuleConf.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FU2FAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FU2FAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FU2FAuthModuleConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.common.lib.auth;\n \n+import java.util.Map;\n+\n public class U2FAuthModuleConf implements MFAAuthModuleConf {\n \n     private static final long serialVersionUID = -1235771400318503131L;\n@@ -66,4 +68,9 @@ public String getExpireDevicesTimeUnit() {\n     public void setExpireDevicesTimeUnit(final String expireDevicesTimeUnit) {\n         this.expireDevicesTimeUnit = expireDevicesTimeUnit;\n     }\n+\n+    @Override\n+    public Map<String, Object> map(final Mapper mapper) {\n+        return mapper.map(this);\n+    }\n }"},{"sha":"0c65f46dbf75e765bb541f004014c28859bcc4bb","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAttrReleasePolicyConf.java","status":"modified","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAttrReleasePolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAttrReleasePolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAttrReleasePolicyConf.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -20,13 +20,91 @@\n \n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.concurrent.TimeUnit;\n \n public class DefaultAttrReleasePolicyConf implements AttrReleasePolicyConf {\n \n     private static final long serialVersionUID = -1969836661359025380L;\n \n+    public enum PrincipalAttrRepoMergingStrategy {\n+        /**\n+         * Replace attributes. Overwrites existing attribute values, if any.\n+         */\n+        REPLACE,\n+        /**\n+         * Add attributes.\n+         * Retains existing attribute values if any, and ignores values from subsequent sources in the resolution chain.\n+         */\n+        ADD,\n+        /**\n+         * No merging.\n+         * Doesn't merge attributes, ignores attributes from non-authentication attribute repositories.\n+         */\n+        NONE,\n+        /**\n+         * Multivalued attributes.\n+         * Combines all values into a single attribute, essentially creating a multi-valued attribute.\n+         */\n+        MULTIVALUED;\n+\n+    }\n+\n+    public static class PrincipalAttrRepoConf implements Serializable {\n+\n+        private static final long serialVersionUID = 6369987956789092057L;\n+\n+        private PrincipalAttrRepoMergingStrategy mergingStrategy = PrincipalAttrRepoMergingStrategy.MULTIVALUED;\n+\n+        private boolean ignoreResolvedAttributes;\n+\n+        private long expiration;\n+\n+        private TimeUnit timeUnit = TimeUnit.HOURS;\n+\n+        private final List<String> attrRepos = new ArrayList<>();\n+\n+        public PrincipalAttrRepoMergingStrategy getMergingStrategy() {\n+            return mergingStrategy;\n+        }\n+\n+        public void setMergingStrategy(final PrincipalAttrRepoMergingStrategy mergingStrategy) {\n+            this.mergingStrategy = mergingStrategy;\n+        }\n+\n+        public boolean isIgnoreResolvedAttributes() {\n+            return ignoreResolvedAttributes;\n+        }\n+\n+        public void setIgnoreResolvedAttributes(final boolean ignoreResolvedAttributes) {\n+            this.ignoreResolvedAttributes = ignoreResolvedAttributes;\n+        }\n+\n+        public long getExpiration() {\n+            return expiration;\n+        }\n+\n+        public void setExpiration(final long expiration) {\n+            this.expiration = expiration;\n+        }\n+\n+        public TimeUnit getTimeUnit() {\n+            return timeUnit;\n+        }\n+\n+        public void setTimeUnit(final TimeUnit timeUnit) {\n+            this.timeUnit = timeUnit;\n+        }\n+\n+        @JacksonXmlElementWrapper(localName = \"attrRepos\")\n+        @JacksonXmlProperty(localName = \"attrRepo\")\n+        public List<String> getAttrRepos() {\n+            return attrRepos;\n+        }\n+    }\n+\n     /**\n      * Specify the list of allowed attribute to release.\n      * Use the special {@code *} to release everything.\n@@ -37,6 +115,10 @@ public class DefaultAttrReleasePolicyConf implements AttrReleasePolicyConf {\n \n     private final List<String> includeOnlyAttrs = new ArrayList<>();\n \n+    private String principalIdAttr;\n+\n+    private final PrincipalAttrRepoConf principalAttrRepoConf = new PrincipalAttrRepoConf();\n+\n     @JacksonXmlElementWrapper(localName = \"allowedAttrs\")\n     @JacksonXmlProperty(localName = \"allowedAttr\")\n     public List<String> getAllowedAttrs() {\n@@ -54,4 +136,16 @@ public List<String> getExcludedAttrs() {\n     public List<String> getIncludeOnlyAttrs() {\n         return includeOnlyAttrs;\n     }\n+\n+    public String getPrincipalIdAttr() {\n+        return principalIdAttr;\n+    }\n+\n+    public void setPrincipalIdAttr(final String principalIdAttr) {\n+        this.principalIdAttr = principalIdAttr;\n+    }\n+\n+    public PrincipalAttrRepoConf getPrincipalAttrRepoConf() {\n+        return principalAttrRepoConf;\n+    }\n }"},{"sha":"a10712a0268592942044b27fd76063955fbc45b8","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/AttrRepoTO.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrRepoTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrRepoTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrRepoTO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.ws.rs.PathParam;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.attr.AttrRepoConf;\n+import org.apache.syncope.common.lib.types.AttrRepoState;\n+\n+public class AttrRepoTO implements EntityTO {\n+\n+    private static final long serialVersionUID = -7490425997956703057L;\n+\n+    private String key;\n+\n+    private String description;\n+\n+    private AttrRepoState state = AttrRepoState.ACTIVE;\n+\n+    private int order = 0;\n+\n+    private final List<ItemTO> items = new ArrayList<>();\n+\n+    private AttrRepoConf conf;\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(final String description) {\n+        this.description = description;\n+    }\n+\n+    public AttrRepoState getState() {\n+        return state;\n+    }\n+\n+    public void setState(final AttrRepoState state) {\n+        this.state = state;\n+    }\n+\n+    public int getOrder() {\n+        return order;\n+    }\n+\n+    public void setOrder(final int order) {\n+        this.order = order;\n+    }\n+\n+    public List<ItemTO> getItems() {\n+        return items;\n+    }\n+\n+    public AttrRepoConf getConf() {\n+        return conf;\n+    }\n+\n+    public void setConf(final AttrRepoConf conf) {\n+        this.conf = conf;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        AttrRepoTO other = (AttrRepoTO) obj;\n+        return new EqualsBuilder().\n+                append(key, other.key).\n+                append(description, other.description).\n+                append(state, other.state).\n+                append(order, other.order).\n+                append(items, other.items).\n+                append(conf, other.conf).\n+                build();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(key).\n+                append(description).\n+                append(state).\n+                append(order).\n+                append(items).\n+                append(conf).\n+                build();\n+    }\n+}"},{"sha":"fa7239f406137cb830fda9681e8de54b32290f33","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/AuthModuleTO.java","status":"modified","additions":24,"deletions":10,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthModuleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthModuleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthModuleTO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -20,11 +20,11 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n import javax.ws.rs.PathParam;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.auth.AuthModuleConf;\n+import org.apache.syncope.common.lib.types.AuthModuleState;\n \n public class AuthModuleTO implements EntityTO {\n \n@@ -34,10 +34,14 @@ public class AuthModuleTO implements EntityTO {\n \n     private String description;\n \n-    private AuthModuleConf conf;\n+    private AuthModuleState state = AuthModuleState.ACTIVE;\n+\n+    private int order = 0;\n \n     private final List<ItemTO> items = new ArrayList<>();\n \n+    private AuthModuleConf conf;\n+\n     @Override\n     public String getKey() {\n         return key;\n@@ -57,24 +61,32 @@ public void setDescription(final String description) {\n         this.description = description;\n     }\n \n-    public AuthModuleConf getConf() {\n-        return conf;\n+    public AuthModuleState getState() {\n+        return state;\n     }\n \n-    public void setConf(final AuthModuleConf conf) {\n-        this.conf = conf;\n+    public void setState(final AuthModuleState state) {\n+        this.state = state;\n+    }\n+\n+    public int getOrder() {\n+        return order;\n+    }\n+\n+    public void setOrder(final int order) {\n+        this.order = order;\n     }\n \n     public List<ItemTO> getItems() {\n         return items;\n     }\n \n-    public boolean add(final ItemTO item) {\n-        return Optional.ofNullable(item).filter(itemTO -> items.contains(itemTO) || items.add(itemTO)).isPresent();\n+    public AuthModuleConf getConf() {\n+        return conf;\n     }\n \n-    public boolean remove(final ItemTO item) {\n-        return this.items.remove(item);\n+    public void setConf(final AuthModuleConf conf) {\n+        this.conf = conf;\n     }\n \n     @Override\n@@ -92,6 +104,8 @@ public boolean equals(final Object obj) {\n         return new EqualsBuilder().\n                 append(key, other.key).\n                 append(description, other.description).\n+                append(state, other.state).\n+                append(order, other.order).\n                 append(items, other.items).\n                 append(conf, other.conf).\n                 build();"},{"sha":"a80ecbe5c4d7834f38e3670fd421f37b95b04133","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMEntitlement.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -60,6 +60,16 @@ public final class AMEntitlement {\n \n     public static final String AUTH_MODULE_DELETE = \"AUTH_MODULE_DELETE\";\n \n+    public static final String ATTR_REPO_LIST = \"ATTR_REPO_LIST\";\n+\n+    public static final String ATTR_REPO_CREATE = \"ATTR_REPO_CREATE\";\n+\n+    public static final String ATTR_REPO_READ = \"ATTR_REPO_READ\";\n+\n+    public static final String ATTR_REPO_UPDATE = \"ATTR_REPO_UPDATE\";\n+\n+    public static final String ATTR_REPO_DELETE = \"ATTR_REPO_DELETE\";\n+\n     public static final String SAML2_IDP_ENTITY_SET = \"SAML2_IDP_ENTITY_SET\";\n \n     public static final String SAML2_IDP_ENTITY_LIST = \"SAML2_IDP_ENTITY_LIST\";"},{"sha":"fa38485333bfff44c70cdf610a655b66e61c4916","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AttrRepoState.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAttrRepoState.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAttrRepoState.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAttrRepoState.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+public enum AttrRepoState {\n+    /**\n+     * Active and enabled repository,\n+     * and is invoked by default automatically.\n+     */\n+    ACTIVE,\n+    /**\n+     * Attribute repository is disabled and will not be used\n+     * to resolve people and attributes.\n+     */\n+    DISABLED,\n+    /**\n+     * Repository is in a semi-enabled state,\n+     * waiting to be called only on-demand when explicitly\n+     * asked for and will not be registered into the resolution plan.\n+     */\n+    STANDBY\n+\n+}"},{"sha":"37581eeb58d8975c01e52dc9b8fea1d208392297","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AuthModuleState.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuthModuleState.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuthModuleState.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuthModuleState.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+public enum AuthModuleState {\n+    /**\n+     * Active authentication handler,\n+     * and is invoked by default automatically to verify credentials globally.\n+     */\n+    ACTIVE,\n+    /**\n+     * Authentication handler is in a semi-enabled state,\n+     * waiting to be called only on-demand when explicitly\n+     * asked for.\n+     */\n+    STANDBY\n+\n+}"},{"sha":"3a0f50addc328b49954510c5f638b704adc70225","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AttrRepoService.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAttrRepoService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAttrRepoService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAttrRepoService.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.AttrRepoTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+\n+/**\n+ * REST operations for attribute repositories.\n+ */\n+@Tag(name = \"AttrRepos\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\") })\n+@Path(\"attrRepos\")\n+public interface AttrRepoService extends JAXRSService {\n+\n+    /**\n+     * Returns the attribute repository matching the given key.\n+     *\n+     * @param key key of requested attribute repository\n+     * @return attribute repository with matching id\n+     */\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    AttrRepoTO read(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Returns a list of attribute repositories.\n+     *\n+     * @return list of attribute repositories\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    List<AttrRepoTO> list();\n+\n+    /**\n+     * Create a new attribute repository.\n+     *\n+     * @param attrRepoTO AttrRepo to be created.\n+     * @return Response object featuring Location header of created attribute repository\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"AttrRepo successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"UUID generated for the entity created\"),\n+                @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    Response create(@NotNull AttrRepoTO attrRepoTO);\n+\n+    /**\n+     * Updates attribute repository matching the given key.\n+     *\n+     * @param attrRepoTO AttrRepo to replace existing attribute repository\n+     */\n+    @Parameter(name = \"key\", description = \"AttrRepo's key\", in = ParameterIn.PATH, schema =\n+            @Schema(type = \"string\"))\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @PUT\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void update(@NotNull AttrRepoTO attrRepoTO);\n+\n+    /**\n+     * Delete attribute repository matching the given key.\n+     *\n+     * @param key key of attribute repository to be deleted\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @DELETE\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void delete(@NotNull @PathParam(\"key\") String key);\n+}"},{"sha":"48c26a4c56214f160a581d05b5b4e4badb902969","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/jackson/SyncopeXmlMapper.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjackson%2FSyncopeXmlMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjackson%2FSyncopeXmlMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjackson%2FSyncopeXmlMapper.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -51,6 +51,7 @@ protected void _initFactories(final XMLInputFactory xmlIn, final XMLOutputFactor\n         findAndRegisterModules();\n \n         configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\n+        configure(SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS, false);\n \n         configOverride(List.class).setSetterInfo(JsonSetter.Value.forValueNulls(Nulls.AS_EMPTY));\n         configOverride(Set.class).setSetterInfo(JsonSetter.Value.forValueNulls(Nulls.AS_EMPTY));"},{"sha":"c3677119a2d4b9e5917820307415ec2663b48628","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/AMLogicContext.java","status":"modified","additions":56,"deletions":31,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAMLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAMLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAMLogicContext.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -27,18 +27,20 @@\n import org.apache.syncope.core.logic.wa.WAClientAppLogic;\n import org.apache.syncope.core.logic.wa.WAConfigLogic;\n import org.apache.syncope.core.logic.wa.WebAuthnRegistrationLogic;\n+import org.apache.syncope.core.persistence.api.dao.AttrRepoDAO;\n+import org.apache.syncope.core.persistence.api.dao.AuthModuleDAO;\n+import org.apache.syncope.core.persistence.api.dao.AuthProfileDAO;\n+import org.apache.syncope.core.persistence.api.dao.CASSPDAO;\n+import org.apache.syncope.core.persistence.api.dao.OIDCJWKSDAO;\n+import org.apache.syncope.core.persistence.api.dao.OIDCRPDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2IdPEntityDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPEntityDAO;\n import org.apache.syncope.core.persistence.api.dao.SRARouteDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthModuleDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.CASSPDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.OIDCJWKSDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPEntityDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPEntityDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.WAConfigDAO;\n+import org.apache.syncope.core.persistence.api.dao.WAConfigDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.am.ClientAppUtilsFactory;\n+import org.apache.syncope.core.provisioning.api.data.AttrRepoDataBinder;\n import org.apache.syncope.core.provisioning.api.data.AuthModuleDataBinder;\n import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n@@ -73,8 +75,19 @@ public AuthModuleLogic authModuleLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public AuthProfileLogic authProfileLogic(final AuthProfileDAO authProfileDAO,\n-                                             final AuthProfileDataBinder authProfileDataBinder) {\n+    public AttrRepoLogic attrRepoLogic(\n+            final AttrRepoDataBinder binder,\n+            final AttrRepoDAO attrRepoDAO) {\n+\n+        return new AttrRepoLogic(binder, attrRepoDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public AuthProfileLogic authProfileLogic(\n+            final AuthProfileDAO authProfileDAO,\n+            final AuthProfileDataBinder authProfileDataBinder) {\n+\n         return new AuthProfileLogic(authProfileDAO, authProfileDataBinder);\n     }\n \n@@ -140,42 +153,52 @@ public SRARouteLogic sraRouteLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public GoogleMfaAuthAccountLogic googleMfaAuthAccountLogic(final AuthProfileDAO authProfileDAO,\n-                                                               final AuthProfileDataBinder authProfileDataBinder,\n-                                                               final EntityFactory entityFactory) {\n+    public GoogleMfaAuthAccountLogic googleMfaAuthAccountLogic(\n+            final AuthProfileDAO authProfileDAO,\n+            final AuthProfileDataBinder authProfileDataBinder,\n+            final EntityFactory entityFactory) {\n+\n         return new GoogleMfaAuthAccountLogic(entityFactory, authProfileDAO, authProfileDataBinder);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public GoogleMfaAuthTokenLogic googleMfaAuthTokenLogic(final AuthProfileDAO authProfileDAO,\n-                                                           final AuthProfileDataBinder authProfileDataBinder,\n-                                                           final EntityFactory entityFactory) {\n+    public GoogleMfaAuthTokenLogic googleMfaAuthTokenLogic(\n+            final AuthProfileDAO authProfileDAO,\n+            final AuthProfileDataBinder authProfileDataBinder,\n+            final EntityFactory entityFactory) {\n+\n         return new GoogleMfaAuthTokenLogic(entityFactory, authProfileDAO, authProfileDataBinder);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public ImpersonationLogic impersonationLogic(final AuthProfileDAO authProfileDAO,\n-                                                 final AuthProfileDataBinder authProfileDataBinder,\n-                                                 final EntityFactory entityFactory) {\n+    public ImpersonationLogic impersonationLogic(\n+            final AuthProfileDAO authProfileDAO,\n+            final AuthProfileDataBinder authProfileDataBinder,\n+            final EntityFactory entityFactory) {\n+\n         return new ImpersonationLogic(entityFactory, authProfileDAO, authProfileDataBinder);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public U2FRegistrationLogic u2fRegistrationLogic(final AuthProfileDAO authProfileDAO,\n-                                                     final AuthProfileDataBinder authProfileDataBinder,\n-                                                     final EntityFactory entityFactory) {\n+    public U2FRegistrationLogic u2fRegistrationLogic(\n+            final AuthProfileDAO authProfileDAO,\n+            final AuthProfileDataBinder authProfileDataBinder,\n+            final EntityFactory entityFactory) {\n+\n         return new U2FRegistrationLogic(entityFactory, authProfileDAO, authProfileDataBinder);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public WAClientAppLogic waClientAppLogic(final WAClientAppDataBinder binder,\n-                                             final SAML2SPDAO saml2spDAO,\n-                                             final OIDCRPDAO oidcrpDAO,\n-                                             final CASSPDAO casspDAO) {\n+    public WAClientAppLogic waClientAppLogic(\n+            final WAClientAppDataBinder binder,\n+            final SAML2SPDAO saml2spDAO,\n+            final OIDCRPDAO oidcrpDAO,\n+            final CASSPDAO casspDAO) {\n+\n         return new WAClientAppLogic(binder, saml2spDAO, oidcrpDAO, casspDAO);\n     }\n \n@@ -192,9 +215,11 @@ public WAConfigLogic waConfigLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public WebAuthnRegistrationLogic webAuthnRegistrationLogic(final AuthProfileDAO authProfileDAO,\n-                                                               final AuthProfileDataBinder authProfileDataBinder,\n-                                                               final EntityFactory entityFactory) {\n+    public WebAuthnRegistrationLogic webAuthnRegistrationLogic(\n+            final AuthProfileDAO authProfileDAO,\n+            final AuthProfileDataBinder authProfileDataBinder,\n+            final EntityFactory entityFactory) {\n+\n         return new WebAuthnRegistrationLogic(entityFactory, authProfileDAO, authProfileDataBinder);\n     }\n }"},{"sha":"4118869baef6ae1bdc91d3900244c292f2fc0e70","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/AbstractAuthProfileLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAuthProfileLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAuthProfileLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAuthProfileLogic.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -21,7 +21,7 @@\n import java.lang.reflect.Method;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.AuthProfileTO;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n+import org.apache.syncope.core.persistence.api.dao.AuthProfileDAO;\n import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n \n public abstract class AbstractAuthProfileLogic extends AbstractTransactionalLogic<AuthProfileTO> {"},{"sha":"530df926fce875c1ff4eb9eeed165cd31dc053f7","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/AttrRepoLogic.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAttrRepoLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAttrRepoLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAttrRepoLogic.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.to.AttrRepoTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.AttrRepoDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.entity.am.AttrRepo;\n+import org.apache.syncope.core.provisioning.api.data.AttrRepoDataBinder;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class AttrRepoLogic extends AbstractTransactionalLogic<AttrRepoTO> {\n+\n+    protected final AttrRepoDataBinder binder;\n+\n+    protected final AttrRepoDAO attrRepoDAO;\n+\n+    public AttrRepoLogic(final AttrRepoDataBinder binder, final AttrRepoDAO attrRepoDAO) {\n+        this.binder = binder;\n+        this.attrRepoDAO = attrRepoDAO;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.ATTR_REPO_CREATE + \"')\")\n+    public AttrRepoTO create(final AttrRepoTO attrRepoTO) {\n+        return binder.getAttrRepoTO(attrRepoDAO.save(binder.create(attrRepoTO)));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.ATTR_REPO_UPDATE + \"')\")\n+    public AttrRepoTO update(final AttrRepoTO attrRepoTO) {\n+        AttrRepo attrRepo = attrRepoDAO.find(attrRepoTO.getKey());\n+        if (attrRepo == null) {\n+            throw new NotFoundException(\"AttrRepo \" + attrRepoTO.getKey() + \" not found\");\n+        }\n+\n+        return binder.getAttrRepoTO(attrRepoDAO.save(binder.update(attrRepo, attrRepoTO)));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.ATTR_REPO_LIST + \"') or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public List<AttrRepoTO> list() {\n+        return attrRepoDAO.findAll().stream().map(binder::getAttrRepoTO).collect(Collectors.toList());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.ATTR_REPO_READ + \"')\")\n+    @Transactional(readOnly = true)\n+    public AttrRepoTO read(final String key) {\n+        AttrRepo attrRepo = attrRepoDAO.find(key);\n+        if (attrRepo == null) {\n+            throw new NotFoundException(\"AttrRepo \" + key + \" not found\");\n+        }\n+\n+        return binder.getAttrRepoTO(attrRepo);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.ATTR_REPO_DELETE + \"')\")\n+    public AttrRepoTO delete(final String key) {\n+        AttrRepo attrRepo = attrRepoDAO.find(key);\n+        if (attrRepo == null) {\n+            throw new NotFoundException(\"AttrRepo \" + key + \" not found\");\n+        }\n+\n+        AttrRepoTO deleted = binder.getAttrRepoTO(attrRepo);\n+        attrRepoDAO.delete(attrRepo);\n+\n+        return deleted;\n+    }\n+\n+    @Override\n+    protected AttrRepoTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        String key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof AttrRepoTO) {\n+                    key = ((AttrRepoTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                return binder.getAttrRepoTO(attrRepoDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+}"},{"sha":"f10251bbbdae52c2352456eecf1cfecaa08de3f7","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/AuthModuleLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthModuleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthModuleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthModuleLogic.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -25,9 +25,9 @@\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.AuthModuleDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthModuleDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthModule;\n import org.apache.syncope.core.provisioning.api.data.AuthModuleDataBinder;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.transaction.annotation.Transactional;"},{"sha":"31b1d174304097d5a3db3d1ab96900131f3b75b9","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/AuthProfileLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthProfileLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthProfileLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthProfileLogic.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -24,9 +24,9 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AuthProfileTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthProfile;\n import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.transaction.annotation.Transactional;"},{"sha":"11cc2863197099619c447c958337da30c7783e81","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/ClientAppLogic.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -41,16 +41,16 @@\n import org.apache.syncope.common.lib.types.AMEntitlement;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.dao.CASSPDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.auth.CASSPDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtils;\n-import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n+import org.apache.syncope.core.persistence.api.dao.OIDCRPDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.CASSPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.ClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.ClientAppUtils;\n+import org.apache.syncope.core.persistence.api.entity.am.ClientAppUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.am.OIDCRPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2SPClientApp;\n import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -264,15 +264,15 @@ public void pushToWA() {\n         try {\n             NetworkService wa = serviceOps.get(NetworkService.Type.WA);\n             String basicAuthHeader = DefaultBasicAuthSupplier.getBasicAuthHeader(\n-                securityProperties.getAnonymousUser(), securityProperties.getAnonymousKey());\n+                    securityProperties.getAnonymousUser(), securityProperties.getAnonymousKey());\n             URI endpoint = URI.create(StringUtils.appendIfMissing(wa.getAddress(), \"/\")\n-                                      + \"actuator/registeredServices\");\n+                    + \"actuator/registeredServices\");\n             HttpClient.newBuilder().build().send(\n-                HttpRequest.newBuilder(endpoint).\n-                    header(HttpHeaders.AUTHORIZATION, basicAuthHeader).\n-                    header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).\n-                    GET().build(),\n-                HttpResponse.BodyHandlers.discarding());\n+                    HttpRequest.newBuilder(endpoint).\n+                            header(HttpHeaders.AUTHORIZATION, basicAuthHeader).\n+                            header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).\n+                            GET().build(),\n+                    HttpResponse.BodyHandlers.discarding());\n         } catch (KeymasterException e) {\n             throw new NotFoundException(\"Could not find any WA instance\", e);\n         } catch (IOException | InterruptedException e) {"},{"sha":"59cb1b6b980ed310e3968861fa05d8152f2c1ee5","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/OIDCJWKSLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCJWKSLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCJWKSLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCJWKSLogic.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -26,8 +26,8 @@\n import org.apache.syncope.common.lib.types.JWSAlgorithm;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.auth.OIDCJWKSDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n+import org.apache.syncope.core.persistence.api.dao.OIDCJWKSDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.OIDCJWKS;\n import org.apache.syncope.core.provisioning.api.data.OIDCJWKSDataBinder;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.transaction.annotation.Transactional;"},{"sha":"1c8bba3eac00a1185a4c108ac72ac12c24324a21","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPEntityLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPEntityLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPEntityLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPEntityLogic.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -27,8 +27,8 @@\n import org.apache.syncope.common.lib.types.AMEntitlement;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPEntityDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n+import org.apache.syncope.core.persistence.api.dao.SAML2IdPEntityDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2IdPEntity;\n import org.apache.syncope.core.provisioning.api.data.SAML2IdPEntityDataBinder;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.transaction.annotation.Transactional;"},{"sha":"3d3fcb0b3bb1ecf7656fc636fc9b23352a738919","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPEntityLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPEntityLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPEntityLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPEntityLogic.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -27,8 +27,8 @@\n import org.apache.syncope.common.lib.types.AMEntitlement;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPEntityDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPEntityDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2SPEntity;\n import org.apache.syncope.core.provisioning.api.data.SAML2SPEntityDataBinder;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.transaction.annotation.Transactional;"},{"sha":"70e05bf4388669935ea6ad12e3d99d56cb93d872","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SRARouteLogic.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSRARouteLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSRARouteLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSRARouteLogic.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -18,15 +18,13 @@\n  */\n package org.apache.syncope.core.logic;\n \n-import java.io.IOException;\n import java.lang.reflect.Method;\n import java.net.URI;\n import java.net.http.HttpClient;\n import java.net.http.HttpRequest;\n import java.net.http.HttpResponse;\n import java.util.List;\n import java.util.stream.Collectors;\n-import javax.ws.rs.InternalServerErrorException;\n import javax.ws.rs.core.HttpHeaders;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -118,19 +116,19 @@ public SRARouteTO delete(final String key) {\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.SRA_ROUTE_PUSH + \"')\")\n     public void pushToSRA() {\n+        HttpClient client = HttpClient.newHttpClient();\n         try {\n-            NetworkService sra = serviceOps.get(NetworkService.Type.SRA);\n-            HttpClient.newBuilder().build().send(\n+            serviceOps.list(NetworkService.Type.SRA).forEach(sra -> client.sendAsync(\n                     HttpRequest.newBuilder(URI.create(\n                             StringUtils.appendIfMissing(sra.getAddress(), \"/\") + \"actuator/gateway/refresh\")).\n                             header(HttpHeaders.AUTHORIZATION, DefaultBasicAuthSupplier.getBasicAuthHeader(\n                                     securityProperties.getAnonymousUser(), securityProperties.getAnonymousKey())).\n                             POST(HttpRequest.BodyPublishers.noBody()).build(),\n-                    HttpResponse.BodyHandlers.discarding());\n+                    HttpResponse.BodyHandlers.discarding()).\n+                    thenAcceptAsync(response -> LOG.info(\n+                    \"Pushed to SRA instance {} with HTTP status: {}\", sra.getAddress(), response.statusCode())));\n         } catch (KeymasterException e) {\n-            throw new NotFoundException(\"Could not find any SRA instance\", e);\n-        } catch (IOException | InterruptedException e) {\n-            throw new InternalServerErrorException(\"Errors while communicating with SRA instance\", e);\n+            throw new NotFoundException(\"Could not find any WA instance\", e);\n         }\n     }\n "},{"sha":"e0de66a05482f32ee58b8dafd94aaa874348ffd2","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/GoogleMfaAuthAccountLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthAccountLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthAccountLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthAccountLogic.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -24,10 +24,10 @@\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthAccount;\n import org.apache.syncope.core.logic.AbstractAuthProfileLogic;\n+import org.apache.syncope.core.persistence.api.dao.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthProfile;\n import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.transaction.annotation.Transactional;"},{"sha":"fffd51e9a3ae25ba5e52e71049070ab51d33c83d","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/GoogleMfaAuthTokenLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthTokenLogic.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -25,10 +25,10 @@\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n import org.apache.syncope.core.logic.AbstractAuthProfileLogic;\n+import org.apache.syncope.core.persistence.api.dao.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthProfile;\n import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.transaction.annotation.Transactional;"},{"sha":"7d2640609fe649a43c5405a5f3585aaa62f581db","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/ImpersonationLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FImpersonationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FImpersonationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FImpersonationLogic.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -23,9 +23,9 @@\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n import org.apache.syncope.core.logic.AbstractAuthProfileLogic;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n+import org.apache.syncope.core.persistence.api.dao.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthProfile;\n import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.transaction.annotation.Transactional;"},{"sha":"c12d81b8bae8033b9695bde63976fd9fa6dc5cb7","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/U2FRegistrationLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FU2FRegistrationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FU2FRegistrationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FU2FRegistrationLogic.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -29,10 +29,10 @@\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.wa.U2FDevice;\n import org.apache.syncope.core.logic.AbstractAuthProfileLogic;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n+import org.apache.syncope.core.persistence.api.dao.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthProfile;\n import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n import org.springframework.security.access.prepost.PreAuthorize;\n "},{"sha":"08e838258c294fdd8369dea96049bdee564b75cd","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/WAClientAppLogic.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -25,13 +25,13 @@\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n+import org.apache.syncope.core.persistence.api.dao.CASSPDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.auth.CASSPDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n+import org.apache.syncope.core.persistence.api.dao.OIDCRPDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.CASSPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.OIDCRPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2SPClientApp;\n import org.apache.syncope.core.provisioning.api.data.wa.WAClientAppDataBinder;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.transaction.annotation.Transactional;"},{"sha":"547880ad407f4046ca0e567435fa1c7376feace0","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/WAConfigLogic.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAConfigLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAConfigLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAConfigLogic.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.logic.wa;\n \n-import java.io.IOException;\n import java.lang.reflect.Method;\n import java.net.URI;\n import java.net.http.HttpClient;\n@@ -27,7 +26,6 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n-import javax.ws.rs.InternalServerErrorException;\n import javax.ws.rs.core.HttpHeaders;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.transport.http.auth.DefaultBasicAuthSupplier;\n@@ -41,7 +39,7 @@\n import org.apache.syncope.core.logic.AbstractTransactionalLogic;\n import org.apache.syncope.core.logic.UnresolvedReferenceException;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.auth.WAConfigDAO;\n+import org.apache.syncope.core.persistence.api.dao.WAConfigDAO;\n import org.apache.syncope.core.provisioning.api.data.WAConfigDataBinder;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -95,20 +93,19 @@ public void delete(final String key) {\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.WA_CONFIG_PUSH + \"')\")\n     public void pushToWA() {\n+        HttpClient client = HttpClient.newHttpClient();\n         try {\n-            NetworkService wa = serviceOps.get(NetworkService.Type.WA);\n-            HttpResponse response = HttpClient.newBuilder().build().send(\n+            serviceOps.list(NetworkService.Type.WA).forEach(wa -> client.sendAsync(\n                     HttpRequest.newBuilder(URI.create(\n                             StringUtils.appendIfMissing(wa.getAddress(), \"/\") + \"actuator/refresh\")).\n                             header(HttpHeaders.AUTHORIZATION, DefaultBasicAuthSupplier.getBasicAuthHeader(\n                                     securityProperties.getAnonymousUser(), securityProperties.getAnonymousKey())).\n                             POST(HttpRequest.BodyPublishers.noBody()).build(),\n-                    HttpResponse.BodyHandlers.discarding());\n-            LOG.info(\"Pushed changes to WA with status: {}\", response.statusCode());\n+                    HttpResponse.BodyHandlers.discarding()).\n+                    thenAcceptAsync(response -> LOG.info(\n+                    \"Pushed to WA instance {} with HTTP status: {}\", wa.getAddress(), response.statusCode())));\n         } catch (KeymasterException e) {\n             throw new NotFoundException(\"Could not find any WA instance\", e);\n-        } catch (IOException | InterruptedException e) {\n-            throw new InternalServerErrorException(\"Errors while communicating with WA instance\", e);\n         }\n     }\n "},{"sha":"d03b7673504eda89ea336635e8c5c2441fabbfd5","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/WebAuthnRegistrationLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWebAuthnRegistrationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWebAuthnRegistrationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWebAuthnRegistrationLogic.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -24,10 +24,10 @@\n import org.apache.syncope.common.lib.wa.WebAuthnAccount;\n import org.apache.syncope.common.lib.wa.WebAuthnDeviceCredential;\n import org.apache.syncope.core.logic.AbstractAuthProfileLogic;\n+import org.apache.syncope.core.persistence.api.dao.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthProfile;\n import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.transaction.annotation.Transactional;"},{"sha":"06fd5faadfeafcf815a770253545af332e3afe88","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/AMRESTCXFContext.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAMRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAMRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAMRESTCXFContext.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.rest.cxf;\n \n+import org.apache.syncope.common.rest.api.service.AttrRepoService;\n import org.apache.syncope.common.rest.api.service.AuthModuleService;\n import org.apache.syncope.common.rest.api.service.AuthProfileService;\n import org.apache.syncope.common.rest.api.service.ClientAppService;\n@@ -32,6 +33,7 @@\n import org.apache.syncope.common.rest.api.service.wa.WAClientAppService;\n import org.apache.syncope.common.rest.api.service.wa.WAConfigService;\n import org.apache.syncope.common.rest.api.service.wa.WebAuthnRegistrationService;\n+import org.apache.syncope.core.logic.AttrRepoLogic;\n import org.apache.syncope.core.logic.AuthModuleLogic;\n import org.apache.syncope.core.logic.AuthProfileLogic;\n import org.apache.syncope.core.logic.ClientAppLogic;\n@@ -46,6 +48,7 @@\n import org.apache.syncope.core.logic.wa.WAClientAppLogic;\n import org.apache.syncope.core.logic.wa.WAConfigLogic;\n import org.apache.syncope.core.logic.wa.WebAuthnRegistrationLogic;\n+import org.apache.syncope.core.rest.cxf.service.AttrRepoServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.AuthModuleServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.AuthProfileServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.ClientAppServiceImpl;\n@@ -73,6 +76,12 @@ public AuthModuleService authModuleService(final AuthModuleLogic authModuleLogic\n         return new AuthModuleServiceImpl(authModuleLogic);\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    public AttrRepoService attrRepoService(final AttrRepoLogic attrRepoLogic) {\n+        return new AttrRepoServiceImpl(attrRepoLogic);\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     public AuthProfileService authProfileService(final AuthProfileLogic authProfileLogic) {"},{"sha":"7fee652d0f53548a346850943a8419d5342b2abd","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AttrRepoServiceImpl.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAttrRepoServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAttrRepoServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAttrRepoServiceImpl.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.AttrRepoTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.AttrRepoService;\n+import org.apache.syncope.core.logic.AttrRepoLogic;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class AttrRepoServiceImpl extends AbstractService implements AttrRepoService {\n+\n+    protected final AttrRepoLogic logic;\n+\n+    public AttrRepoServiceImpl(final AttrRepoLogic logic) {\n+        this.logic = logic;\n+    }\n+\n+    @Override\n+    public Response create(final AttrRepoTO attrRepoTO) {\n+        AttrRepoTO attrRepo = logic.create(attrRepoTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(attrRepo.getKey()).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_KEY, attrRepo.getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        logic.delete(key);\n+    }\n+\n+    @Override\n+    public List<AttrRepoTO> list() {\n+        return logic.list();\n+    }\n+\n+    @Override\n+    public AttrRepoTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public void update(final AttrRepoTO attrRepoTO) {\n+        logic.update(attrRepoTO);\n+    }\n+}"},{"sha":"b47f7a1f6df3ce7aab14bee33b1e40e11ddff728","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -188,11 +188,11 @@ protected void customizeResponses(final Operation operation, final OperationReso\n \n         Schema<ErrorTO> errorSchema = new Schema<>();\n         errorSchema.example(sampleError).\n-                addProperties(\"status\", new IntegerSchema().description(\"HTTP status code\")).\n-                addProperties(\"type\", new StringSchema().\n+                addProperty(\"status\", new IntegerSchema().description(\"HTTP status code\")).\n+                addProperty(\"type\", new StringSchema().\n                         _enum(Stream.of(ClientExceptionType.values()).map(Enum::name).collect(Collectors.toList())).\n                         description(\"Error code\")).\n-                addProperties(\"elements\", new ArraySchema().type(\"string\").description(\"Error message(s)\"));\n+                addProperty(\"elements\", new ArraySchema().type(\"string\").description(\"Error message(s)\"));\n \n         Content content = new Content();\n         content.addMediaType("},{"sha":"b352151fb76ad878252bcb726a7fc98e641a49b8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AttrRepoDAO.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAttrRepoDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAttrRepoDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAttrRepoDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.am.AttrRepo;\n+\n+public interface AttrRepoDAO extends DAO<AttrRepo> {\n+\n+    AttrRepo find(String key);\n+\n+    List<AttrRepo> findAll();\n+\n+    AttrRepo save(AttrRepo attrRepo);\n+\n+    void delete(String key);\n+\n+    void delete(AttrRepo attrRepo);\n+}"},{"sha":"d33796fbfbffc21726bd8aae5526ec630fd04039","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AuthModuleDAO.java","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuthModuleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuthModuleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuthModuleDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,11 +16,10 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.dao.auth;\n+package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.dao.DAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthModule;\n \n public interface AuthModuleDAO extends DAO<AuthModule> {\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/AuthModuleDAO.java"},{"sha":"f38f3381a3d0b5b3a5759d2e17e45cbcbc6dec28","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AuthProfileDAO.java","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuthProfileDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuthProfileDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuthProfileDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,12 +16,11 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.dao.auth;\n+package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n import java.util.Optional;\n-import org.apache.syncope.core.persistence.api.dao.DAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthProfile;\n \n public interface AuthProfileDAO extends DAO<AuthProfile> {\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/AuthProfileDAO.java"},{"sha":"2222701aa789a07f4b049168724adf587582de70","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/CASSPDAO.java","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FCASSPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FCASSPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FCASSPDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,11 +16,10 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.dao.auth;\n+package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.dao.DAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.CASSPClientApp;\n \n public interface CASSPDAO extends DAO<CASSPClientApp> {\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/CASSPDAO.java"},{"sha":"1dc32a69892ab6560346049b25a0ed90d6aab41b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/OIDCJWKSDAO.java","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FOIDCJWKSDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FOIDCJWKSDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FOIDCJWKSDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,10 +16,9 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.dao.auth;\n+package org.apache.syncope.core.persistence.api.dao;\n \n-import org.apache.syncope.core.persistence.api.dao.DAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n+import org.apache.syncope.core.persistence.api.entity.am.OIDCJWKS;\n \n public interface OIDCJWKSDAO extends DAO<OIDCJWKS> {\n     OIDCJWKS get();","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/OIDCJWKSDAO.java"},{"sha":"6b6b42ddddf7c692b12805ee6328fd45c6c22072","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/OIDCRPDAO.java","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FOIDCRPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FOIDCRPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FOIDCRPDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,11 +16,10 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.dao.auth;\n+package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.dao.DAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.OIDCRPClientApp;\n \n public interface OIDCRPDAO extends DAO<OIDCRPClientApp> {\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/OIDCRPDAO.java"},{"sha":"2f4b9823a99bcf4a449557b3b466f9838362ddbf","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SAML2IdPEntityDAO.java","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSAML2IdPEntityDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSAML2IdPEntityDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSAML2IdPEntityDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,11 +16,10 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.dao.auth;\n+package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.dao.DAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2IdPEntity;\n \n public interface SAML2IdPEntityDAO extends DAO<SAML2IdPEntity> {\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/SAML2IdPEntityDAO.java"},{"sha":"63ac6050f0918dccd4706903f3cf5cec1d4e3747","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SAML2SPDAO.java","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSAML2SPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSAML2SPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSAML2SPDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,11 +16,10 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.dao.auth;\n+package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.dao.DAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2SPClientApp;\n \n public interface SAML2SPDAO extends DAO<SAML2SPClientApp> {\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/SAML2SPDAO.java"},{"sha":"471b309042fe2006bed1304e68465f5e82bd6db0","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SAML2SPEntityDAO.java","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSAML2SPEntityDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSAML2SPEntityDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSAML2SPEntityDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,11 +16,10 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.dao.auth;\n+package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.dao.DAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2SPEntity;\n \n public interface SAML2SPEntityDAO extends DAO<SAML2SPEntity> {\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/SAML2SPEntityDAO.java"},{"sha":"3b11eb8da2a7577ec8d9891183041d858abacc85","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/WAConfigDAO.java","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FWAConfigDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FWAConfigDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FWAConfigDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,11 +16,10 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.dao.auth;\n+package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.dao.DAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n+import org.apache.syncope.core.persistence.api.entity.am.WAConfigEntry;\n \n public interface WAConfigDAO extends DAO<WAConfigEntry> {\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/WAConfigDAO.java"},{"sha":"fdab6475eb20a742daacb8898414630e68cf5099","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/AttrRepo.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAttrRepo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAttrRepo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAttrRepo.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.am;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.attr.AttrRepoConf;\n+import org.apache.syncope.common.lib.types.AttrRepoState;\n+import org.apache.syncope.core.persistence.api.entity.ProvidedKeyEntity;\n+\n+public interface AttrRepo extends ProvidedKeyEntity {\n+\n+    String getDescription();\n+\n+    void setDescription(String description);\n+\n+    AttrRepoState getState();\n+\n+    void setState(AttrRepoState state);\n+\n+    int getOrder();\n+\n+    void setOrder(int order);\n+\n+    AttrRepoConf getConf();\n+\n+    void setConf(AttrRepoConf conf);\n+\n+    List<? extends AttrRepoItem> getItems();\n+\n+    boolean add(AttrRepoItem item);\n+}"},{"sha":"43213ef44939e53456b331d92df062d2a2d6fa2c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/AttrRepoItem.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAttrRepoItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAttrRepoItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAttrRepoItem.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.am;\n+\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n+\n+public interface AttrRepoItem extends Item {\n+\n+    AttrRepo getAttrRepo();\n+\n+    void setAttrRepo(AttrRepo attrRepo);\n+}"},{"sha":"5edc23e488d9b013a73def50f6b8a17cceb35134","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/AuthModule.java","status":"renamed","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAuthModule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAuthModule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAuthModule.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,10 +16,11 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.auth;\n+package org.apache.syncope.core.persistence.api.entity.am;\n \n import java.util.List;\n import org.apache.syncope.common.lib.auth.AuthModuleConf;\n+import org.apache.syncope.common.lib.types.AuthModuleState;\n import org.apache.syncope.core.persistence.api.entity.ProvidedKeyEntity;\n \n public interface AuthModule extends ProvidedKeyEntity {\n@@ -28,9 +29,17 @@ public interface AuthModule extends ProvidedKeyEntity {\n \n     void setDescription(String description);\n \n+    AuthModuleState getState();\n+\n+    void setState(AuthModuleState state);\n+\n+    int getOrder();\n+\n+    void setOrder(int order);\n+\n     AuthModuleConf getConf();\n \n-    void setConf(AuthModuleConf description);\n+    void setConf(AuthModuleConf conf);\n \n     List<? extends AuthModuleItem> getItems();\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/AuthModule.java"},{"sha":"d7168abd250eac5454b296fc353ba46b6ad75ad7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/AuthModuleItem.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAuthModuleItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAuthModuleItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAuthModuleItem.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.auth;\n+package org.apache.syncope.core.persistence.api.entity.am;\n \n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/AuthModuleItem.java"},{"sha":"8abfefc15d76a7f4e8549769aed994554cd8c2e3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/AuthProfile.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAuthProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAuthProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FAuthProfile.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.auth;\n+package org.apache.syncope.core.persistence.api.entity.am;\n \n import java.util.List;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthAccount;","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/AuthProfile.java"},{"sha":"1156f67075b00633301f05a768c6092bd8ed84b3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/CASSPClientApp.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FCASSPClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FCASSPClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FCASSPClientApp.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.auth;\n+package org.apache.syncope.core.persistence.api.entity.am;\n \n public interface CASSPClientApp extends ClientApp {\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/CASSPClientApp.java"},{"sha":"222c4ebf4be937abfc5bca5bb79c39fa108afa74","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/ClientApp.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FClientApp.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.auth;\n+package org.apache.syncope.core.persistence.api.entity.am;\n \n import java.util.List;\n import org.apache.syncope.common.lib.Attr;","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/ClientApp.java"},{"sha":"dd77ca3a2a2e8f93cca2726f217c173f6baf6cc6","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/ClientAppUtils.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FClientAppUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FClientAppUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FClientAppUtils.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.auth;\n+package org.apache.syncope.core.persistence.api.entity.am;\n \n import org.apache.syncope.common.lib.types.ClientAppType;\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/ClientAppUtils.java"},{"sha":"c5480d7e2e62bf3b6af0083e5c12f477f0b5e716","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/ClientAppUtilsFactory.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FClientAppUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FClientAppUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FClientAppUtilsFactory.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.auth;\n+package org.apache.syncope.core.persistence.api.entity.am;\n \n import org.apache.syncope.common.lib.to.ClientAppTO;\n import org.apache.syncope.common.lib.types.ClientAppType;","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/ClientAppUtilsFactory.java"},{"sha":"b111c971b1d450e17884284acaaa9f0de5d8bba7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/OIDCJWKS.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FOIDCJWKS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FOIDCJWKS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FOIDCJWKS.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.auth;\n+package org.apache.syncope.core.persistence.api.entity.am;\n \n import org.apache.syncope.core.persistence.api.entity.Entity;\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/OIDCJWKS.java"},{"sha":"df4f27e415b2b8d7a4a2482ad29a391df07e8bc1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/OIDCRPClientApp.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FOIDCRPClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FOIDCRPClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FOIDCRPClientApp.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.auth;\n+package org.apache.syncope.core.persistence.api.entity.am;\n \n import java.util.Set;\n import org.apache.syncope.common.lib.types.OIDCGrantType;","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/OIDCRPClientApp.java"},{"sha":"1f7159c4f12ecd293d98dede0b06f1d8eaab5df4","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/SAML2IdPEntity.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FSAML2IdPEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FSAML2IdPEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FSAML2IdPEntity.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.auth;\n+package org.apache.syncope.core.persistence.api.entity.am;\n \n import org.apache.syncope.core.persistence.api.entity.ProvidedKeyEntity;\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/SAML2IdPEntity.java"},{"sha":"608b0c27629d545d23ac7d10c730aa71e666690d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/SAML2SPClientApp.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FSAML2SPClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FSAML2SPClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FSAML2SPClientApp.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.auth;\n+package org.apache.syncope.core.persistence.api.entity.am;\n \n import java.util.List;\n import java.util.Set;","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/SAML2SPClientApp.java"},{"sha":"469e68d24b94d3bc9dfc5d724f76d77a439d1760","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/SAML2SPEntity.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FSAML2SPEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FSAML2SPEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FSAML2SPEntity.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.auth;\n+package org.apache.syncope.core.persistence.api.entity.am;\n \n import org.apache.syncope.core.persistence.api.entity.ProvidedKeyEntity;\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/SAML2SPEntity.java"},{"sha":"e94b71f80be3f9c456d805ce4c5dc448d85e9bf7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/WAConfigEntry.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FWAConfigEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FWAConfigEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FWAConfigEntry.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.auth;\n+package org.apache.syncope.core.persistence.api.entity.am;\n \n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.ProvidedKeyEntity;","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/WAConfigEntry.java"},{"sha":"d508cad45e55ada339f73fdb37da13e76d8014a7","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":24,"deletions":12,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -61,29 +61,29 @@ under the License.\n                      jsonConf='{\"_class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"AllowedAttrReleasePolicy\",\"allowedAttributes\":[\"cn\",\"givenName\",\"uid\"]}'/>\n   <AttrReleasePolicy id=\"219935c7-deb3-40b3-8a9a-683037e523a2\" name=\"DenyAttrReleasePolicy\"\n                      jsonConf='{\"_class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"DenyAttrReleasePolicyConf\"}'/>\n-  \n+      \n   <!-- Authentication modules -->\n-  <AuthModule id=\"DefaultLDAPAuthModule\"\n+  <AuthModule id=\"DefaultLDAPAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"LDAP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.LDAPAuthModuleConf\",\"userIdAttribute\":\"cn\",\"bindDn\": \"uid=admin,ou=system\", \"bindCredential\":\"secret\",\"ldapUrl\":\"ldap://localhost:1389\",\"searchFilter\":\"cn={user}\",\"baseDn\":\"ou=People,o=isp\",\"subtreeSearch\":true,\"principalAttributeList\":[\"sn\",\"givenName\",\"mail\",\"cn\"]}'/>\n-  <AuthModule id=\"DefaultJDBCAuthModule\"\n+  <AuthModule id=\"DefaultJDBCAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"JDBC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JDBCAuthModuleConf\",\"sql\":\"SELECT * FROM users_table WHERE name=?\", \"fieldPassword\": \"password\"}'/>\n-  <AuthModule id=\"DefaultGoogleMfaAuthModule\"\n+  <AuthModule id=\"DefaultGoogleMfaAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"Google Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf\",\"codeDigits\":6,\"issuer\":\"SyncopeTest\", \"label\":\"SyncopeTest\", \"timeStepSize\":30, \"windowSize\":3}'/>\n-  <AuthModule id=\"DefaultSimpleMfaAuthModule\"\n+  <AuthModule id=\"DefaultSimpleMfaAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"Simple Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SimpleMfaAuthModuleConf\",\"tokenLength\":6, \"timeToKillInSeconds\":30}'/>\n-  <AuthModule id=\"DefaultDuoMfaAuthModule\"\n+  <AuthModule id=\"DefaultDuoMfaAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"Duo Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.DuoMfaAuthModuleConf\",\"integrationKey\":\"DIOXVRZD2UMZ8XXMNFQ5\",\"secretKey\":\"Q2IU2i8BFNd6VYflZT8Evl6lF7oPlj3PM15BmRU7\", \"applicationKey\":\"u1IHBaREMB7Cb5S4QMISAgHycpj8lPBkDGfWt23I\", \"apiHost\":\"theapi.duosecurity.com\"}'/>\n-  <AuthModule id=\"DefaultOIDCAuthModule\"\n+  <AuthModule id=\"DefaultOIDCAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"OIDC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"discoveryUri\":\"https://localhost:9443/syncope-wa/oidc/.well-known/openid-configuration\", \"id\":\"client-id\", \"secret\": \"client-secret\" }'/>\n-  <AuthModule id=\"DefaultSAML2IdPAuthModule\"\n+  <AuthModule id=\"DefaultSAML2IdPAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"SAML2 IdP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf\",\"keystorePassword\":\"p@$$word\",\"privateKeyPassword\":\"p@$$word\",\"identityProviderMetadataPath\":\"https://localhost:9443/syncope-wa/idp/metadata\", \"serviceProviderEntityId\":\"syncope:apache:org\"}'/>\n-  <AuthModule id=\"DefaultJaasAuthModule\"\n+  <AuthModule id=\"DefaultJaasAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"Jaas auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JaasAuthModuleConf\",\"realm\":\"SYNCOPE\",\"kerberosRealmSystemProperty\":\"sample-value\", \"loginConfigType\": \"JavaLoginConfig\", \"loginConfigurationFile\": \"file:/etc/jaas/login.conf\"}'/>\n-  <AuthModule id=\"DefaultStaticAuthModule\"\n+  <AuthModule id=\"DefaultStaticAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"Static auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.StaticAuthModuleConf\",\"users\":{\"syncope1\": \"$cynop3\"}}'/>\n-  <AuthModule id=\"DefaultSyncopeAuthModule\"\n+  <AuthModule id=\"DefaultSyncopeAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"Syncope auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf\",\"domain\":\"Master\"}'/>\n-  <AuthModule id=\"DefaultU2FAuthModule\"\n+  <AuthModule id=\"DefaultU2FAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"U2F auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.U2FAuthModuleConf\",\"expireDevices\":40}'/>\n \n   <AuthModuleItem id=\"26678936-af09-48b8-a789-36af0918b87d\" extAttrName=\"family_name\" intAttrName=\"syncopeUserAttr_surname\"\n@@ -106,6 +106,18 @@ under the License.\n   <AuthModuleItem id=\"a1933059-e64f-409f-a86c-5b54da21787e\" extAttrName=\"cn\" intAttrName=\"cn\"\n                   password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultLDAPAuthModule\"/>\n \n+  <!-- Attribute repositories -->\n+  <AttrRepo id=\"DefaultLDAPAttrRepo\" attrRepoState=\"ACTIVE\"\n+            description=\"LDAP attr repo\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.attr.LDAPAttrRepoConf\",\"searchFilter\":\"cn={user}\",\"subtreeSearch\":true,\"ldapUrl\":\"ldap://localhost:1389\",\"bindDn\":\"uid=admin,ou=system\",\"bindCredential\":\"secret\",\"baseDn\":\"ou=People,o=isp\",\"attributes\":{},\"useAllQueryAttributes\":true,\"queryAttributes\":{}}'/>\n+  <AttrRepo id=\"DefaultJDBCAttrRepo\" attrRepoState=\"ACTIVE\"\n+            description=\"JDBC attr repo\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.attr.JDBCAttrRepoConf\",\"sql\":\"SELECT * FROM table WHERE name=?\",\"dialect\":\"org.hibernate.dialect.H2Dialect\",\"driverClass\":\"org.h2.Driver\",\"url\":\"jdbc:h2:mem:syncopedb;DB_CLOSE_DELAY=-1\",\"user\":\"username\",\"password\":\"password\",\"singleRow\":true,\"requireAllAttributes\":true,\"caseCanonicalization\":\"NONE\",\"queryType\":\"AND\",\"columnMappings\":{},\"username\":[],\"attributes\":{},\"caseInsensitiveQueryAttributes\":[],\"queryAttributes\":{}}'/>\n+  <AttrRepo id=\"DefaultStubAttrRepo\" attrRepoState=\"ACTIVE\"\n+            description=\"Stub attr repo\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.attr.StubAttrRepoConf\",\"attributes\":{\"attr1\":\"value1\"}}'/>\n+  <AttrRepo id=\"DefaultSyncopeAttrRepo\" attrRepoState=\"ACTIVE\"\n+            description=\"Syncope attr repo\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.attr.SyncopeAttrRepoConf\",\"domain\":\"Master\",\"searchFilter\":\"username=={user}\",\"basicAuthUsername\":\"admin\",\"basicAuthPassword\":\"password\",\"headers\":{}}'/>\n+\n+  <AttrRepoItem id=\"d2d9e7be-d82b-4698-b0fb-67d480413049\" extAttrName=\"identifier\" intAttrName=\"attr1\"\n+                password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" attrRepo_id=\"DefaultStubAttrRepo\"/>\n   <RelationshipType id=\"inclusion\" description=\"Models the act that an object is included in another\"/>\n   <RelationshipType id=\"neighborhood\" description=\"Models the act that an object is near another\"/>\n   "},{"sha":"07960734f09ab863d5446985db9787db42aea18c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceContext.java","status":"modified","additions":28,"deletions":20,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -33,8 +33,12 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n+import org.apache.syncope.core.persistence.api.dao.AttrRepoDAO;\n import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.AuthModuleDAO;\n+import org.apache.syncope.core.persistence.api.dao.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.dao.BatchDAO;\n+import org.apache.syncope.core.persistence.api.dao.CASSPDAO;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n@@ -45,6 +49,8 @@\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n+import org.apache.syncope.core.persistence.api.dao.OIDCJWKSDAO;\n+import org.apache.syncope.core.persistence.api.dao.OIDCRPDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -56,24 +62,19 @@\n import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportTemplateDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2IdPEntityDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPEntityDAO;\n import org.apache.syncope.core.persistence.api.dao.SRARouteDAO;\n import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthModuleDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.CASSPDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.OIDCJWKSDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPEntityDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPEntityDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.WAConfigDAO;\n+import org.apache.syncope.core.persistence.api.dao.WAConfigDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.am.ClientAppUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.policy.PolicyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n@@ -87,8 +88,12 @@\n import org.apache.syncope.core.persistence.jpa.dao.JPAAnyTypeClassDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAAnyTypeDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAApplicationDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAAttrRepoDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAAuditConfDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAAuthModuleDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAAuthProfileDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPABatchDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPACASSPDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAConnInstanceDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPADelegationDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPADerSchemaDAO;\n@@ -99,6 +104,8 @@\n import org.apache.syncope.core.persistence.jpa.dao.JPAImplementationDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAMailTemplateDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPANotificationDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAOIDCJWKSDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAOIDCRPDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAPlainSchemaDAO;\n@@ -110,24 +117,19 @@\n import org.apache.syncope.core.persistence.jpa.dao.JPAReportExecDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAReportTemplateDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPARoleDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPASAML2IdPEntityDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPASAML2SPDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPASAML2SPEntityDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPASRARouteDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPASecurityQuestionDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPATaskDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPATaskExecDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAVirSchemaDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.auth.JPAAuthModuleDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.auth.JPAAuthProfileDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.auth.JPACASSPDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.auth.JPAOIDCJWKSDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.auth.JPAOIDCRPDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.auth.JPASAML2IdPEntityDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.auth.JPASAML2SPDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.auth.JPASAML2SPEntityDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.auth.JPAWAConfigDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAWAConfigDAO;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.JPAEntityFactory;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPAClientAppUtilsFactory;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPAClientAppUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPolicyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPATaskUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.spring.CommonEntityManagerFactoryConf;\n@@ -395,6 +397,12 @@ public AuthModuleDAO authModuleDAO(final PolicyDAO policyDAO) {\n         return new JPAAuthModuleDAO(policyDAO);\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    public AttrRepoDAO attrRepoDAO() {\n+        return new JPAAttrRepoDAO();\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     public AuthProfileDAO authProfileDAO() {"},{"sha":"099497732ba8401242818d47b725339ea1f95710","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAttrRepoDAO.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAttrRepoDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAttrRepoDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAttrRepoDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.core.persistence.api.dao.AttrRepoDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.AttrRepo;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPAAttrRepo;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class JPAAttrRepoDAO extends AbstractDAO<AttrRepo> implements AttrRepoDAO {\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public AttrRepo find(final String key) {\n+        return entityManager().find(JPAAttrRepo.class, key);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<AttrRepo> findAll() {\n+        TypedQuery<AttrRepo> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAAttrRepo.class.getSimpleName() + \" e\", AttrRepo.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public AttrRepo save(final AttrRepo attrRepo) {\n+        return entityManager().merge(attrRepo);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        AttrRepo attrRepo = find(key);\n+        if (attrRepo == null) {\n+            return;\n+        }\n+\n+        delete(attrRepo);\n+    }\n+\n+    @Override\n+    public void delete(final AttrRepo attrRepo) {\n+        entityManager().remove(attrRepo);\n+    }\n+}"},{"sha":"df8e88a6f979e3f4d34df252bc634b3c5877f71f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAuthModuleDAO.java","status":"renamed","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuthModuleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuthModuleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuthModuleDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,17 +16,16 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.dao.auth;\n+package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n+import org.apache.syncope.core.persistence.api.dao.AuthModuleDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthModuleDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthModule;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n-import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthModule;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPAAuthModule;\n import org.springframework.transaction.annotation.Transactional;\n \n public class JPAAuthModuleDAO extends AbstractDAO<AuthModule> implements AuthModuleDAO {","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAAuthModuleDAO.java"},{"sha":"acd862defd4f334c777c0c77c9c88dca649e5901","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAuthProfileDAO.java","status":"renamed","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuthProfileDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuthProfileDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuthProfileDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,16 +16,15 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.dao.auth;\n+package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n import java.util.Optional;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n-import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthProfile;\n+import org.apache.syncope.core.persistence.api.dao.AuthProfileDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthProfile;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPAAuthProfile;\n \n public class JPAAuthProfileDAO extends AbstractDAO<AuthProfile> implements AuthProfileDAO {\n ","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAAuthProfileDAO.java"},{"sha":"90d632f7b60ffbf02546b724be46406e35ebdd37","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPACASSPDAO.java","status":"renamed","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPACASSPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPACASSPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPACASSPDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,15 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.dao.auth;\n+package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.core.persistence.api.dao.auth.CASSPDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n-import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPACASSPClientApp;\n+import org.apache.syncope.core.persistence.api.dao.CASSPDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.CASSPClientApp;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPACASSPClientApp;\n import org.springframework.transaction.annotation.Transactional;\n \n public class JPACASSPDAO extends AbstractDAO<CASSPClientApp> implements CASSPDAO {","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPACASSPDAO.java"},{"sha":"3e1cd75ee5ac4fb1a27b28f9895463f8d05c1c43","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAOIDCJWKSDAO.java","status":"renamed","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAOIDCJWKSDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAOIDCJWKSDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAOIDCJWKSDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,14 +16,13 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.dao.auth;\n+package org.apache.syncope.core.persistence.jpa.dao;\n \n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.core.persistence.api.dao.auth.OIDCJWKSDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n-import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCJWKS;\n+import org.apache.syncope.core.persistence.api.dao.OIDCJWKSDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.OIDCJWKS;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPAOIDCJWKS;\n import org.springframework.transaction.annotation.Transactional;\n \n public class JPAOIDCJWKSDAO extends AbstractDAO<OIDCJWKS> implements OIDCJWKSDAO {","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAOIDCJWKSDAO.java"},{"sha":"91f506b47c142f8440e5950e1dbbf61f809831f7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAOIDCRPDAO.java","status":"renamed","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAOIDCRPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAOIDCRPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAOIDCRPDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,15 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.dao.auth;\n+package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n-import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCRPClientApp;\n+import org.apache.syncope.core.persistence.api.dao.OIDCRPDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.OIDCRPClientApp;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPAOIDCRPClientApp;\n import org.springframework.transaction.annotation.Transactional;\n \n public class JPAOIDCRPDAO extends AbstractDAO<OIDCRPClientApp> implements OIDCRPDAO {","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAOIDCRPDAO.java"},{"sha":"27a7d1ff64af5fbb6026b5e2b39cbdd1da3c6683","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPASAML2IdPEntityDAO.java","status":"renamed","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2IdPEntityDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2IdPEntityDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2IdPEntityDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,14 +16,13 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.dao.auth;\n+package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPEntityDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n-import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2IdPEntity;\n+import org.apache.syncope.core.persistence.api.dao.SAML2IdPEntityDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2IdPEntity;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPASAML2IdPEntity;\n import org.springframework.transaction.annotation.Transactional;\n \n public class JPASAML2IdPEntityDAO extends AbstractDAO<SAML2IdPEntity> implements SAML2IdPEntityDAO {","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPASAML2IdPEntityDAO.java"},{"sha":"c79ca175239042fc0c0cc456622af0ddc232a7ba","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPASAML2SPDAO.java","status":"renamed","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2SPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2SPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2SPDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,15 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.dao.auth;\n+package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n-import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPClientApp;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2SPClientApp;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPASAML2SPClientApp;\n import org.springframework.transaction.annotation.Transactional;\n \n public class JPASAML2SPDAO extends AbstractDAO<SAML2SPClientApp> implements SAML2SPDAO {","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPASAML2SPDAO.java"},{"sha":"a1680029ca1ff5fc55ee615c7b505288e40dc0bc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPASAML2SPEntityDAO.java","status":"renamed","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2SPEntityDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2SPEntityDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2SPEntityDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,14 +16,13 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.dao.auth;\n+package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPEntityDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n-import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPEntity;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPEntityDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2SPEntity;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPASAML2SPEntity;\n import org.springframework.transaction.annotation.Transactional;\n \n public class JPASAML2SPEntityDAO extends AbstractDAO<SAML2SPEntity> implements SAML2SPEntityDAO {","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPASAML2SPEntityDAO.java"},{"sha":"f966af2cd142554a53d687c6c028da38b6fa49f8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAWAConfigDAO.java","status":"renamed","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAWAConfigDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAWAConfigDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAWAConfigDAO.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,14 +16,13 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.dao.auth;\n+package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.core.persistence.api.dao.auth.WAConfigDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n-import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPAWAConfigEntry;\n+import org.apache.syncope.core.persistence.api.dao.WAConfigDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.WAConfigEntry;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPAWAConfigEntry;\n import org.springframework.transaction.annotation.Transactional;\n \n public class JPAWAConfigDAO extends AbstractDAO<WAConfigEntry> implements WAConfigDAO {","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAWAConfigDAO.java"},{"sha":"374602ede8a367c4ad855d59798f83e380201ad9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":28,"deletions":20,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -50,23 +50,25 @@\n import org.apache.syncope.core.persistence.api.entity.SRARoute;\n import org.apache.syncope.core.persistence.api.entity.SchemaLabel;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.am.AttrRepo;\n+import org.apache.syncope.core.persistence.api.entity.am.AttrRepoItem;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthModule;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthModuleItem;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthProfile;\n+import org.apache.syncope.core.persistence.api.entity.am.CASSPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.OIDCJWKS;\n+import org.apache.syncope.core.persistence.api.entity.am.OIDCRPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2IdPEntity;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2SPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2SPEntity;\n+import org.apache.syncope.core.persistence.api.entity.am.WAConfigEntry;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthModuleItem;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n-import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n@@ -110,23 +112,25 @@\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPAAttrRepo;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPAAttrRepoItem;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPAAuthModule;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPAAuthModuleItem;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPAAuthProfile;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPACASSPClientApp;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPAOIDCJWKS;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPAOIDCRPClientApp;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPASAML2IdPEntity;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPASAML2SPClientApp;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPASAML2SPEntity;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPAWAConfigEntry;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthModule;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthModuleItem;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthProfile;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPACASSPClientApp;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCJWKS;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCRPClientApp;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2IdPEntity;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPClientApp;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPEntity;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPAWAConfigEntry;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrValue;\n@@ -330,6 +334,10 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAAuthModule();\n         } else if (reference.equals(AuthModuleItem.class)) {\n             result = (E) new JPAAuthModuleItem();\n+        } else if (reference.equals(AttrRepo.class)) {\n+            result = (E) new JPAAttrRepo();\n+        } else if (reference.equals(AttrRepoItem.class)) {\n+            result = (E) new JPAAttrRepoItem();\n         } else if (reference.equals(AuthPolicy.class)) {\n             result = (E) new JPAAuthPolicy();\n         } else if (reference.equals(AccessPolicy.class)) {"},{"sha":"60301830ab415a231a95b4e1458d0cdadbf1e458","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/AbstractClientApp.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FAbstractClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FAbstractClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FAbstractClientApp.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.auth;\n+package org.apache.syncope.core.persistence.jpa.entity.am;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n import java.util.ArrayList;\n@@ -28,7 +28,7 @@\n import javax.persistence.MappedSuperclass;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.ClientApp;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n@@ -160,7 +160,7 @@ public List<Attr> getProperties() {\n         return properties == null\n                 ? new ArrayList<>(0)\n                 : POJOHelper.deserialize(properties, new TypeReference<>() {\n-        });\n+                });\n     }\n \n     @Override","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/AbstractClientApp.java"},{"sha":"23d8502cb710809bb3901820dc879dbe6aca1430","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPAAttrRepo.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAttrRepo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAttrRepo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAttrRepo.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.am;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n+import javax.persistence.Lob;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.attr.AttrRepoConf;\n+import org.apache.syncope.common.lib.types.AttrRepoState;\n+import org.apache.syncope.core.persistence.api.entity.am.AttrRepo;\n+import org.apache.syncope.core.persistence.api.entity.am.AttrRepoItem;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractProvidedKeyEntity;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+@Entity\n+@Table(name = JPAAttrRepo.TABLE)\n+public class JPAAttrRepo extends AbstractProvidedKeyEntity implements AttrRepo {\n+\n+    public static final String TABLE = \"AttrRepo\";\n+\n+    private static final long serialVersionUID = 7337970107878689617L;\n+\n+    private String description;\n+\n+    @Enumerated(EnumType.STRING)\n+    @NotNull\n+    private AttrRepoState attrRepoState;\n+\n+    @NotNull\n+    private Integer attrRepoOrder = 0;\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"attrRepo\")\n+    private List<JPAAttrRepoItem> items = new ArrayList<>();\n+\n+    @Lob\n+    private String jsonConf;\n+\n+    @Override\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    @Override\n+    public void setDescription(final String description) {\n+        this.description = description;\n+    }\n+\n+    @Override\n+    public AttrRepoState getState() {\n+        return attrRepoState;\n+    }\n+\n+    @Override\n+    public void setState(final AttrRepoState state) {\n+        this.attrRepoState = state;\n+    }\n+\n+    @Override\n+    public int getOrder() {\n+        return Optional.ofNullable(attrRepoOrder).orElse(0);\n+    }\n+\n+    @Override\n+    public void setOrder(final int order) {\n+        this.attrRepoOrder = order;\n+    }\n+\n+    @Override\n+    public List<? extends AttrRepoItem> getItems() {\n+        return items;\n+    }\n+\n+    @Override\n+    public boolean add(final AttrRepoItem item) {\n+        checkType(item, JPAAttrRepoItem.class);\n+        return items.contains((JPAAttrRepoItem) item) || items.add((JPAAttrRepoItem) item);\n+    }\n+\n+    @Override\n+    public AttrRepoConf getConf() {\n+        AttrRepoConf conf = null;\n+        if (!StringUtils.isBlank(jsonConf)) {\n+            conf = POJOHelper.deserialize(jsonConf, AttrRepoConf.class);\n+        }\n+\n+        return conf;\n+    }\n+\n+    @Override\n+    public void setConf(final AttrRepoConf conf) {\n+        jsonConf = POJOHelper.serialize(conf);\n+    }\n+}"},{"sha":"c6d9afa2ebdcdaf89ec8e6a290ac967b7a744673","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPAAttrRepoItem.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAttrRepoItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAttrRepoItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAttrRepoItem.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.am;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.am.AttrRepo;\n+import org.apache.syncope.core.persistence.api.entity.am.AttrRepoItem;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractItem;\n+\n+@Entity\n+@Table(name = JPAAttrRepoItem.TABLE)\n+@Cacheable\n+public class JPAAttrRepoItem extends AbstractItem implements AttrRepoItem {\n+\n+    public static final String TABLE = \"AttrRepoItem\";\n+\n+    private static final long serialVersionUID = 3165440920144995781L;\n+\n+    @ManyToOne\n+    private JPAAttrRepo attrRepo;\n+\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(name = TABLE + \"Transformer\",\n+            joinColumns =\n+            @JoinColumn(name = \"item_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"implementation_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"item_id\", \"implementation_id\" }))\n+    private final List<JPAImplementation> transformers = new ArrayList<>();\n+\n+    public JPAAttrRepoItem() {\n+        super.setPurpose(MappingPurpose.NONE);\n+    }\n+\n+    @Override\n+    public void setPurpose(final MappingPurpose purpose) {\n+        // cannot be changed\n+    }\n+\n+    @Override\n+    public AttrRepo getAttrRepo() {\n+        return attrRepo;\n+    }\n+\n+    @Override\n+    public void setAttrRepo(final AttrRepo attrRepo) {\n+        checkType(attrRepo, JPAAttrRepo.class);\n+        this.attrRepo = (JPAAttrRepo) attrRepo;\n+    }\n+\n+    @Override\n+    public boolean add(final Implementation transformer) {\n+        checkType(transformer, JPAImplementation.class);\n+        checkImplementationType(transformer, IdRepoImplementationType.ITEM_TRANSFORMER);\n+        return transformers.contains((JPAImplementation) transformer)\n+                || this.transformers.add((JPAImplementation) transformer);\n+    }\n+\n+    @Override\n+    public List<? extends Implementation> getTransformers() {\n+        return transformers;\n+    }\n+}"},{"sha":"69f19ac1cabc85bf1f7a013e0764c080e233a70f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPAAuthModule.java","status":"renamed","additions":35,"deletions":3,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthModule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthModule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthModule.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,20 +16,25 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.auth;\n+package org.apache.syncope.core.persistence.jpa.entity.am;\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n import javax.persistence.FetchType;\n import javax.persistence.Lob;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.auth.AuthModuleConf;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthModuleItem;\n+import org.apache.syncope.common.lib.types.AuthModuleState;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthModule;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthModuleItem;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractProvidedKeyEntity;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n \n@@ -43,6 +48,13 @@ public class JPAAuthModule extends AbstractProvidedKeyEntity implements AuthModu\n \n     private String description;\n \n+    @Enumerated(EnumType.STRING)\n+    @NotNull\n+    private AuthModuleState authModuleState;\n+\n+    @NotNull\n+    private Integer authModuleOrder = 0;\n+\n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"authModule\")\n     private List<JPAAuthModuleItem> items = new ArrayList<>();\n \n@@ -59,6 +71,26 @@ public void setDescription(final String description) {\n         this.description = description;\n     }\n \n+    @Override\n+    public AuthModuleState getState() {\n+        return authModuleState;\n+    }\n+\n+    @Override\n+    public void setState(final AuthModuleState state) {\n+        this.authModuleState = state;\n+    }\n+\n+    @Override\n+    public int getOrder() {\n+        return Optional.ofNullable(authModuleOrder).orElse(0);\n+    }\n+\n+    @Override\n+    public void setOrder(final int order) {\n+        this.authModuleOrder = order;\n+    }\n+\n     @Override\n     public List<? extends AuthModuleItem> getItems() {\n         return items;","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAAuthModule.java"},{"sha":"c2c6ba76d780addb107b8530ee7ef2f30244faa8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPAAuthModuleItem.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthModuleItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthModuleItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthModuleItem.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.auth;\n+package org.apache.syncope.core.persistence.jpa.entity.am;\n \n import java.util.ArrayList;\n import java.util.List;\n@@ -32,8 +32,8 @@\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthModuleItem;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthModule;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthModuleItem;\n import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractItem;\n ","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAAuthModuleItem.java"},{"sha":"7ac8baa57a51a452d5d68efa16093971ab4c9827","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPAAuthProfile.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthProfile.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.auth;\n+package org.apache.syncope.core.persistence.jpa.entity.am;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n import java.util.ArrayList;\n@@ -32,7 +32,7 @@\n import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n import org.apache.syncope.common.lib.wa.U2FDevice;\n import org.apache.syncope.common.lib.wa.WebAuthnDeviceCredential;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthProfile;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n ","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAAuthProfile.java"},{"sha":"4fb1b551749868bb3e0f7132b75ae50f7a1743f9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPACASSPClientApp.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPACASSPClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPACASSPClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPACASSPClientApp.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,12 +16,12 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.auth;\n+package org.apache.syncope.core.persistence.jpa.entity.am;\n \n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.CASSPClientApp;\n \n @Entity\n @Table(name = JPACASSPClientApp.TABLE)","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPACASSPClientApp.java"},{"sha":"f1f453f2e0e5a649c641c5a4224aed01970906c1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPAClientAppUtils.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAClientAppUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAClientAppUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAClientAppUtils.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,14 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.auth;\n+package org.apache.syncope.core.persistence.jpa.entity.am;\n \n import org.apache.syncope.common.lib.types.ClientAppType;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtils;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.CASSPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.ClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.ClientAppUtils;\n+import org.apache.syncope.core.persistence.api.entity.am.OIDCRPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2SPClientApp;\n \n public class JPAClientAppUtils implements ClientAppUtils {\n ","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAClientAppUtils.java"},{"sha":"ccf5d1a785a8142e73c68aa53df529cb5d5cad6a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPAClientAppUtilsFactory.java","status":"renamed","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAClientAppUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAClientAppUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAClientAppUtilsFactory.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,19 +16,19 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.auth;\n+package org.apache.syncope.core.persistence.jpa.entity.am;\n \n import org.apache.syncope.common.lib.to.CASSPClientAppTO;\n import org.apache.syncope.common.lib.to.ClientAppTO;\n import org.apache.syncope.common.lib.to.OIDCRPClientAppTO;\n import org.apache.syncope.common.lib.to.SAML2SPClientAppTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtils;\n-import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.CASSPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.ClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.ClientAppUtils;\n+import org.apache.syncope.core.persistence.api.entity.am.ClientAppUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.am.OIDCRPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2SPClientApp;\n \n public class JPAClientAppUtilsFactory implements ClientAppUtilsFactory {\n ","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAClientAppUtilsFactory.java"},{"sha":"4745a30568749bb097ec079c888ce9807147b466","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPAOIDCJWKS.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAOIDCJWKS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAOIDCJWKS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAOIDCJWKS.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,13 +16,13 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.auth;\n+package org.apache.syncope.core.persistence.jpa.entity.am;\n \n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Lob;\n import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n+import org.apache.syncope.core.persistence.api.entity.am.OIDCJWKS;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n \n @Entity","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAOIDCJWKS.java"},{"sha":"8578df72239bd0ac044b84132cb3a23b8eacfa08","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPAOIDCRPClientApp.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAOIDCRPClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAOIDCRPClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAOIDCRPClientApp.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.auth;\n+package org.apache.syncope.core.persistence.jpa.entity.am;\n \n import java.util.HashSet;\n import java.util.Set;\n@@ -32,7 +32,7 @@\n import org.apache.syncope.common.lib.types.OIDCGrantType;\n import org.apache.syncope.common.lib.types.OIDCResponseType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.OIDCRPClientApp;\n \n @Entity\n @Table(name = JPAOIDCRPClientApp.TABLE)","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAOIDCRPClientApp.java"},{"sha":"efa807297d3efe7ae332b47c13dc165714ee5ddf","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPASAML2IdPEntity.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPASAML2IdPEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPASAML2IdPEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPASAML2IdPEntity.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,14 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.auth;\n+package org.apache.syncope.core.persistence.jpa.entity.am;\n \n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Lob;\n import javax.persistence.Table;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2IdPEntity;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractProvidedKeyEntity;\n \n @Entity","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2IdPEntity.java"},{"sha":"65b9ad1c3bcef2711b07c6701e5b7ad3cf436806","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPASAML2SPClientApp.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPASAML2SPClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPASAML2SPClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPASAML2SPClientApp.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.auth;\n+package org.apache.syncope.core.persistence.jpa.entity.am;\n \n import java.util.ArrayList;\n import java.util.HashSet;\n@@ -31,7 +31,7 @@\n import javax.persistence.Table;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n import org.apache.syncope.common.lib.types.XmlSecAlgorithm;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2SPClientApp;\n \n @Entity\n @Table(name = JPASAML2SPClientApp.TABLE)","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2SPClientApp.java"},{"sha":"85ffa9620c1794cc749044a6b8a6cd45f4853b4d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPASAML2SPEntity.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPASAML2SPEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPASAML2SPEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPASAML2SPEntity.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,14 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.auth;\n+package org.apache.syncope.core.persistence.jpa.entity.am;\n \n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Lob;\n import javax.persistence.Table;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2SPEntity;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractProvidedKeyEntity;\n \n @Entity","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2SPEntity.java"},{"sha":"4b5c4cd6fc19847a19196c734d951684b78e5c47","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPAWAConfigEntry.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAWAConfigEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAWAConfigEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAWAConfigEntry.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,14 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.auth;\n+package org.apache.syncope.core.persistence.jpa.entity.am;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n import java.util.List;\n import javax.persistence.Entity;\n import javax.persistence.Lob;\n import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n+import org.apache.syncope.core.persistence.api.entity.am.WAConfigEntry;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractProvidedKeyEntity;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n ","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAWAConfigEntry.java"},{"sha":"195dd6792783ef53e0080244fee7854136759c4c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AttrRepoTest.java","status":"added","additions":244,"deletions":0,"changes":244,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAttrRepoTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAttrRepoTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAttrRepoTest.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,244 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.inner;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.List;\n+import java.util.UUID;\n+import org.apache.commons.lang3.ClassUtils;\n+import org.apache.syncope.common.lib.attr.AttrRepoConf;\n+import org.apache.syncope.common.lib.attr.JDBCAttrRepoConf;\n+import org.apache.syncope.common.lib.attr.LDAPAttrRepoConf;\n+import org.apache.syncope.common.lib.attr.StubAttrRepoConf;\n+import org.apache.syncope.common.lib.attr.SyncopeAttrRepoConf;\n+import org.apache.syncope.common.lib.types.AttrRepoState;\n+import org.apache.syncope.core.persistence.api.dao.AttrRepoDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.AttrRepo;\n+import org.apache.syncope.core.persistence.api.entity.am.AttrRepoItem;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class AttrRepoTest extends AbstractTest {\n+\n+    @Autowired\n+    private AttrRepoDAO attrRepoDAO;\n+\n+    @Test\n+    public void findAll() {\n+        List<AttrRepo> modules = attrRepoDAO.findAll();\n+        assertNotNull(modules);\n+        assertFalse(modules.isEmpty());\n+        assertTrue(modules.size() >= 4);\n+    }\n+\n+    @Test\n+    public void find() {\n+        AttrRepo attrRepo = attrRepoDAO.find(\"DefaultLDAPAttrRepo\");\n+        assertNotNull(attrRepo);\n+        assertTrue(attrRepo.getConf() instanceof LDAPAttrRepoConf);\n+\n+        attrRepo = attrRepoDAO.find(\"DefaultJDBCAttrRepo\");\n+        assertNotNull(attrRepo);\n+        assertTrue(attrRepo.getConf() instanceof JDBCAttrRepoConf);\n+\n+        attrRepo = attrRepoDAO.find(\"DefaultStubAttrRepo\");\n+        assertNotNull(attrRepo);\n+        assertTrue(attrRepo.getConf() instanceof StubAttrRepoConf);\n+        assertEquals(1, attrRepo.getItems().size());\n+\n+        attrRepo = attrRepoDAO.find(\"DefaultSyncopeAttrRepo\");\n+        assertNotNull(attrRepo);\n+        assertTrue(attrRepo.getConf() instanceof SyncopeAttrRepoConf);\n+    }\n+\n+    @Test\n+    public void findByType() {\n+        List<AttrRepo> attrRepos = attrRepoDAO.findAll();\n+        assertTrue(attrRepos.stream().anyMatch(\n+                attrRepo -> isSpecificConf(attrRepo.getConf(), LDAPAttrRepoConf.class)\n+                && attrRepo.getKey().equals(\"DefaultLDAPAttrRepo\")));\n+        assertTrue(attrRepos.stream().anyMatch(\n+                attrRepo -> isSpecificConf(attrRepo.getConf(), JDBCAttrRepoConf.class)\n+                && attrRepo.getKey().equals(\"DefaultJDBCAttrRepo\")));\n+        assertTrue(attrRepos.stream().anyMatch(\n+                attrRepo -> isSpecificConf(attrRepo.getConf(), SyncopeAttrRepoConf.class)\n+                && attrRepo.getKey().equals(\"DefaultSyncopeAttrRepo\")));\n+        assertTrue(attrRepos.stream().anyMatch(\n+                attrRepo -> isSpecificConf(attrRepo.getConf(), StubAttrRepoConf.class)\n+                && attrRepo.getKey().equals(\"DefaultStubAttrRepo\")));\n+    }\n+\n+    @Test\n+    public void saveWithStubRepo() {\n+        StubAttrRepoConf conf = new StubAttrRepoConf();\n+        conf.getAttributes().put(\"attr1\", UUID.randomUUID().toString());\n+        conf.getAttributes().put(\"attr2\", UUID.randomUUID().toString());\n+\n+        saveAttrRepo(\"StaticAttrRepoTest\", conf);\n+    }\n+\n+    @Test\n+    public void saveWithLdapRepo() {\n+        LDAPAttrRepoConf conf = new LDAPAttrRepoConf();\n+        conf.setBaseDn(\"dc=example,dc=org\");\n+        conf.setSearchFilter(\"cn={user}\");\n+        conf.setSubtreeSearch(true);\n+        conf.setLdapUrl(\"ldap://localhost:1389\");\n+        conf.setBindCredential(\"Password\");\n+\n+        saveAttrRepo(\"LDAPAttrRepoTest\", conf);\n+    }\n+\n+    @Test\n+    public void saveWithJDBCRepo() {\n+        JDBCAttrRepoConf conf = new JDBCAttrRepoConf();\n+        conf.setSql(\"SELECT * FROM table WHERE name=?\");\n+        conf.setUrl(\"jdbc:h2:mem:syncopedb;DB_CLOSE_DELAY=-1\");\n+        conf.setUser(\"username\");\n+        conf.setPassword(\"password\");\n+\n+        saveAttrRepo(\"JDBCAttrRepoTest\", conf);\n+    }\n+\n+    @Test\n+    public void saveWithSyncopeRepo() {\n+        SyncopeAttrRepoConf conf = new SyncopeAttrRepoConf();\n+        conf.setDomain(\"Master\");\n+\n+        saveAttrRepo(\"SyncopeAttrRepoTest\", conf);\n+    }\n+\n+    @Test\n+    public void updateWithLDAPRepo() {\n+        AttrRepo module = attrRepoDAO.find(\"DefaultLDAPAttrRepo\");\n+        assertNotNull(module);\n+        AttrRepoConf conf = module.getConf();\n+        LDAPAttrRepoConf.class.cast(conf).setBaseDn(\"dc=example2,dc=org\");\n+        LDAPAttrRepoConf.class.cast(conf).setSearchFilter(\"cn={user2}\");\n+        module.setConf(conf);\n+\n+        module = attrRepoDAO.save(module);\n+        assertNotNull(module);\n+        assertNotNull(module.getKey());\n+\n+        AttrRepo found = attrRepoDAO.find(module.getKey());\n+        assertNotNull(found);\n+        assertEquals(\"dc=example2,dc=org\", LDAPAttrRepoConf.class.cast(found.getConf()).getBaseDn());\n+        assertEquals(\"cn={user2}\", LDAPAttrRepoConf.class.cast(found.getConf()).getSearchFilter());\n+    }\n+\n+    @Test\n+    public void updateWithJDBCRepo() {\n+        AttrRepo module = attrRepoDAO.find(\"DefaultJDBCAttrRepo\");\n+        assertNotNull(module);\n+        AttrRepoConf conf = module.getConf();\n+        JDBCAttrRepoConf.class.cast(conf).setSql(\"SELECT * FROM otherTable WHERE name=?\");\n+        module.setConf(conf);\n+\n+        module = attrRepoDAO.save(module);\n+        assertNotNull(module);\n+        assertNotNull(module.getKey());\n+        AttrRepo found = attrRepoDAO.find(module.getKey());\n+        assertNotNull(found);\n+        assertEquals(\"SELECT * FROM otherTable WHERE name=?\", JDBCAttrRepoConf.class.cast(found.getConf()).getSql());\n+    }\n+\n+    @Test\n+    public void updateWithStubRepo() {\n+        AttrRepo module = attrRepoDAO.find(\"DefaultStubAttrRepo\");\n+        assertNotNull(module);\n+        assertEquals(1, StubAttrRepoConf.class.cast(module.getConf()).getAttributes().size());\n+        AttrRepoConf conf = module.getConf();\n+        StubAttrRepoConf.class.cast(conf).getAttributes().put(\"attr3\", UUID.randomUUID().toString());\n+        module.setConf(conf);\n+\n+        module = attrRepoDAO.save(module);\n+        assertNotNull(module);\n+        assertNotNull(module.getKey());\n+        AttrRepo found = attrRepoDAO.find(module.getKey());\n+        assertNotNull(found);\n+        assertEquals(2, StubAttrRepoConf.class.cast(found.getConf()).getAttributes().size());\n+    }\n+\n+    @Test\n+    public void updateWithSyncopeRepo() {\n+        AttrRepo module = attrRepoDAO.find(\"DefaultSyncopeAttrRepo\");\n+        assertNotNull(module);\n+\n+        AttrRepoConf conf = module.getConf();\n+        SyncopeAttrRepoConf.class.cast(conf).setDomain(\"Two\");\n+        module.setConf(conf);\n+\n+        module = attrRepoDAO.save(module);\n+        assertNotNull(module);\n+        assertNotNull(module.getKey());\n+        AttrRepo found = attrRepoDAO.find(module.getKey());\n+        assertNotNull(found);\n+        assertEquals(\"Two\", SyncopeAttrRepoConf.class.cast(found.getConf()).getDomain());\n+    }\n+\n+    @Test\n+    public void delete() {\n+        AttrRepo attrRepo = attrRepoDAO.find(\"DefaultSyncopeAttrRepo\");\n+        assertNotNull(attrRepo);\n+\n+        attrRepoDAO.delete(\"DefaultSyncopeAttrRepo\");\n+\n+        attrRepo = attrRepoDAO.find(\"DefaultSyncopeAttrRepo\");\n+        assertNull(attrRepo);\n+    }\n+\n+    private void saveAttrRepo(final String key, final AttrRepoConf conf) {\n+        AttrRepo attrRepo = entityFactory.newEntity(AttrRepo.class);\n+        attrRepo.setKey(key);\n+        attrRepo.setDescription(\"An attr repo\");\n+        attrRepo.setState(AttrRepoState.ACTIVE);\n+        attrRepo.setConf(conf);\n+\n+        AttrRepoItem keyMapping = entityFactory.newEntity(AttrRepoItem.class);\n+        keyMapping.setIntAttrName(\"uid\");\n+        keyMapping.setExtAttrName(\"username\");\n+        keyMapping.setAttrRepo(attrRepo);\n+        attrRepo.add(keyMapping);\n+\n+        AttrRepoItem fullnameMapping = entityFactory.newEntity(AttrRepoItem.class);\n+        fullnameMapping.setIntAttrName(\"cn\");\n+        fullnameMapping.setExtAttrName(\"fullname\");\n+        fullnameMapping.setAttrRepo(attrRepo);\n+        attrRepo.add(fullnameMapping);\n+\n+        attrRepo = attrRepoDAO.save(attrRepo);\n+        assertNotNull(attrRepo);\n+        assertNotNull(attrRepo.getKey());\n+        assertEquals(attrRepo, attrRepoDAO.find(attrRepo.getKey()));\n+        assertEquals(2, attrRepo.getItems().size());\n+    }\n+\n+    private static boolean isSpecificConf(final AttrRepoConf conf, final Class<? extends AttrRepoConf> clazz) {\n+        return ClassUtils.isAssignable(clazz, conf.getClass());\n+    }\n+}"},{"sha":"e00ab6c18bf9e24341638ef34f6ac8c6c3d5fbc2","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthModuleTest.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -39,9 +39,10 @@\n import org.apache.syncope.common.lib.auth.StaticAuthModuleConf;\n import org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf;\n import org.apache.syncope.common.lib.auth.U2FAuthModuleConf;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthModuleDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthModuleItem;\n+import org.apache.syncope.common.lib.types.AuthModuleState;\n+import org.apache.syncope.core.persistence.api.dao.AuthModuleDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthModule;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthModuleItem;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -434,6 +435,7 @@ private void saveAuthModule(final String key, final AuthModuleConf conf) {\n         AuthModule module = entityFactory.newEntity(AuthModule.class);\n         module.setKey(key);\n         module.setDescription(\"An authentication module\");\n+        module.setState(AuthModuleState.ACTIVE);\n         module.setConf(conf);\n \n         AuthModuleItem keyMapping = entityFactory.newEntity(AuthModuleItem.class);"},{"sha":"bc54c790bd4d19a6694a2f7ce19475e96e0d8f94","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthProfileTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -33,10 +33,10 @@\n import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n import org.apache.syncope.common.lib.wa.U2FDevice;\n import org.apache.syncope.common.lib.wa.WebAuthnDeviceCredential;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.persistence.api.dao.AuthProfileDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthProfile;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthProfile;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPAAuthProfile;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;"},{"sha":"d5be6b77b18514725c9d46fa99bd1d7938136cd3","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/CASSPTest.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FCASSPTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FCASSPTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FCASSPTest.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -23,8 +23,8 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n \n import java.util.UUID;\n-import org.apache.syncope.core.persistence.api.dao.auth.CASSPDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n+import org.apache.syncope.core.persistence.api.dao.CASSPDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.CASSPClientApp;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.junit.jupiter.api.Test;\n@@ -61,10 +61,9 @@ public void find() {\n         int afterCount = casspDAO.findAll().size();\n         assertEquals(afterCount, beforeCount + 1);\n \n-\n         rp = casspDAO.findByName(\"CAS\");\n         assertNotNull(rp);\n-        \n+\n         rp = casspDAO.findByClientAppId(rp.getClientAppId());\n         assertNotNull(rp);\n "},{"sha":"e01e07aa347aa8cb84ffa9c6fa6a11fcc4e1f454","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/OIDCJWKSTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCJWKSTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCJWKSTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCJWKSTest.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -25,8 +25,8 @@\n import com.nimbusds.jose.jwk.RSAKey;\n import com.nimbusds.jose.jwk.gen.RSAKeyGenerator;\n import java.util.UUID;\n-import org.apache.syncope.core.persistence.api.dao.auth.OIDCJWKSDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n+import org.apache.syncope.core.persistence.api.dao.OIDCJWKSDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.OIDCJWKS;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -43,9 +43,9 @@ public void save() throws Exception {\n         OIDCJWKS jwks = entityFactory.newEntity(OIDCJWKS.class);\n \n         RSAKey jwk = new RSAKeyGenerator(2048)\n-            .keyUse(KeyUse.SIGNATURE)\n-            .keyID(UUID.randomUUID().toString())\n-            .generate();\n+                .keyUse(KeyUse.SIGNATURE)\n+                .keyID(UUID.randomUUID().toString())\n+                .generate();\n \n         String json = new JWKSet(jwk).toString();\n         jwks.setJson(json);"},{"sha":"8b535f9950706acc5729f1521ec8af76081ca477","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/OIDCRPTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCRPTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCRPTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCRPTest.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -26,8 +26,8 @@\n import org.apache.syncope.common.lib.types.OIDCGrantType;\n import org.apache.syncope.common.lib.types.OIDCResponseType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n-import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n+import org.apache.syncope.core.persistence.api.dao.OIDCRPDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.OIDCRPClientApp;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.junit.jupiter.api.Test;"},{"sha":"57f2928ee9aa9100d98f3b9364b41861b5e82917","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SAML2IdPEntityTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2IdPEntityTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2IdPEntityTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2IdPEntityTest.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -24,8 +24,8 @@\n \n import java.nio.charset.StandardCharsets;\n import java.util.UUID;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPEntityDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n+import org.apache.syncope.core.persistence.api.dao.SAML2IdPEntityDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2IdPEntity;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;"},{"sha":"371c064ef9773e12ed51b58b2eb634cc1dfcd173","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SAML2SPEntityTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPEntityTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPEntityTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPEntityTest.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -35,8 +35,8 @@\n import java.util.Date;\n import java.util.UUID;\n import org.apache.commons.io.IOUtils;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPEntityDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPEntityDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2SPEntity;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.bouncycastle.asn1.ASN1EncodableVector;\n import org.bouncycastle.asn1.ASN1Encoding;"},{"sha":"7410d6ee67bfa5921da52ab49766bbdf9e8beeea","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SAML2SPTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -26,8 +26,8 @@\n import java.util.UUID;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n import org.apache.syncope.common.lib.types.XmlSecAlgorithm;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2SPClientApp;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.junit.jupiter.api.Test;"},{"sha":"4089c30ab7eaee8212c2b012e2d62d1a3b4f4d24","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/WAConfigTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FWAConfigTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FWAConfigTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FWAConfigTest.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -25,10 +25,10 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n-import org.apache.syncope.core.persistence.api.dao.auth.WAConfigDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n+import org.apache.syncope.core.persistence.api.dao.WAConfigDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.WAConfigEntry;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPAWAConfigEntry;\n+import org.apache.syncope.core.persistence.jpa.entity.am.JPAWAConfigEntry;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;"},{"sha":"a404aa400b2f4410342240a7f934d19a4d8d7c7b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PolicyTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPolicyTest.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -26,10 +26,10 @@\n import java.util.UUID;\n import javax.persistence.PersistenceException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.core.persistence.api.dao.OIDCRPDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.OIDCRPClientApp;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;"},{"sha":"7a90deec3fd5e2552316cc1b7bce23f87f82e95c","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":24,"deletions":11,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -63,27 +63,27 @@ under the License.\n                      jsonConf='{\"_class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"DenyAttrReleasePolicyConf\"}'/>\n \n   <!-- Authentication modules -->\n-  <AuthModule id=\"DefaultLDAPAuthModule\"\n+  <AuthModule id=\"DefaultLDAPAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"LDAP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.LDAPAuthModuleConf\",\"userIdAttribute\":\"cn\",\"bindDn\": \"uid=admin,ou=system\", \"bindCredential\":\"secret\",\"ldapUrl\":\"ldap://localhost:1389\",\"searchFilter\":\"cn={user}\",\"baseDn\":\"ou=People,o=isp\",\"subtreeSearch\":true,\"principalAttributeList\":[\"sn\",\"givenName\",\"mail\",\"cn\"]}'/>\n-  <AuthModule id=\"DefaultJDBCAuthModule\"\n+  <AuthModule id=\"DefaultJDBCAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"JDBC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JDBCAuthModuleConf\",\"sql\":\"SELECT * FROM users_table WHERE name=?\", \"fieldPassword\": \"password\"}'/>\n-  <AuthModule id=\"DefaultGoogleMfaAuthModule\"\n+  <AuthModule id=\"DefaultGoogleMfaAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"Google Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf\",\"codeDigits\":6,\"issuer\":\"SyncopeTest\", \"label\":\"SyncopeTest\", \"timeStepSize\":30, \"windowSize\":3}'/>\n-  <AuthModule id=\"DefaultSimpleMfaAuthModule\"\n+  <AuthModule id=\"DefaultSimpleMfaAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"Simple Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SimpleMfaAuthModuleConf\",\"tokenLength\":6, \"timeToKillInSeconds\":30}'/>\n-  <AuthModule id=\"DefaultDuoMfaAuthModule\"\n+  <AuthModule id=\"DefaultDuoMfaAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"Duo Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.DuoMfaAuthModuleConf\",\"integrationKey\":\"DIOXVRZD2UMZ8XXMNFQ5\",\"secretKey\":\"Q2IU2i8BFNd6VYflZT8Evl6lF7oPlj3PM15BmRU7\", \"applicationKey\":\"u1IHBaREMB7Cb5S4QMISAgHycpj8lPBkDGfWt23I\", \"apiHost\":\"theapi.duosecurity.com\"}'/>\n-  <AuthModule id=\"DefaultOIDCAuthModule\"\n+  <AuthModule id=\"DefaultOIDCAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"OIDC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"discoveryUri\":\"https://localhost:9443/syncope-wa/oidc/.well-known/openid-configuration\", \"id\":\"client-id\", \"secret\": \"client-secret\" }'/>\n-  <AuthModule id=\"DefaultSAML2IdPAuthModule\"\n+  <AuthModule id=\"DefaultSAML2IdPAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"SAML2 IdP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf\",\"keystorePassword\":\"p@$$word\",\"privateKeyPassword\":\"p@$$word\",\"identityProviderMetadataPath\":\"https://localhost:9443/syncope-wa/idp/metadata\", \"serviceProviderEntityId\":\"syncope:apache:org\"}'/>\n-  <AuthModule id=\"DefaultJaasAuthModule\"\n+  <AuthModule id=\"DefaultJaasAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"Jaas auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JaasAuthModuleConf\",\"realm\":\"SYNCOPE\",\"kerberosRealmSystemProperty\":\"sample-value\", \"loginConfigType\": \"JavaLoginConfig\", \"loginConfigurationFile\": \"file:/etc/jaas/login.conf\"}'/>\n-  <AuthModule id=\"DefaultStaticAuthModule\"\n+  <AuthModule id=\"DefaultStaticAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"Static auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.StaticAuthModuleConf\",\"users\":{\"syncope1\": \"$cynop3\"}}'/>\n-  <AuthModule id=\"DefaultSyncopeAuthModule\"\n+  <AuthModule id=\"DefaultSyncopeAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"Syncope auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf\",\"domain\":\"Master\"}'/>\n-  <AuthModule id=\"DefaultU2FAuthModule\"\n+  <AuthModule id=\"DefaultU2FAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"U2F auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.U2FAuthModuleConf\",\"expireDevices\":40}'/>\n \n   <AuthModuleItem id=\"26678936-af09-48b8-a789-36af0918b87d\" extAttrName=\"family_name\" intAttrName=\"syncopeUserAttr_surname\"\n@@ -106,6 +106,19 @@ under the License.\n   <AuthModuleItem id=\"a1933059-e64f-409f-a86c-5b54da21787e\" extAttrName=\"cn\" intAttrName=\"cn\"\n                   password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultLDAPAuthModule\"/>\n \n+  <!-- Attribute repositories -->\n+  <AttrRepo id=\"DefaultLDAPAttrRepo\" attrRepoState=\"ACTIVE\"\n+            description=\"LDAP attr repo\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.attr.LDAPAttrRepoConf\",\"searchFilter\":\"cn={user}\",\"subtreeSearch\":true,\"ldapUrl\":\"ldap://localhost:1389\",\"bindDn\":\"uid=admin,ou=system\",\"bindCredential\":\"secret\",\"baseDn\":\"ou=People,o=isp\",\"attributes\":{},\"useAllQueryAttributes\":true,\"queryAttributes\":{}}'/>\n+  <AttrRepo id=\"DefaultJDBCAttrRepo\" attrRepoState=\"ACTIVE\"\n+            description=\"JDBC attr repo\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.attr.JDBCAttrRepoConf\",\"sql\":\"SELECT * FROM table WHERE name=?\",\"dialect\":\"org.hibernate.dialect.H2Dialect\",\"driverClass\":\"org.h2.Driver\",\"url\":\"jdbc:h2:mem:syncopedb;DB_CLOSE_DELAY=-1\",\"user\":\"username\",\"password\":\"password\",\"singleRow\":true,\"requireAllAttributes\":true,\"caseCanonicalization\":\"NONE\",\"queryType\":\"AND\",\"columnMappings\":{},\"username\":[],\"attributes\":{},\"caseInsensitiveQueryAttributes\":[],\"queryAttributes\":{}}'/>\n+  <AttrRepo id=\"DefaultStubAttrRepo\" attrRepoState=\"ACTIVE\"\n+            description=\"Stub attr repo\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.attr.StubAttrRepoConf\",\"attributes\":{\"attr1\":\"value1\"}}'/>\n+  <AttrRepo id=\"DefaultSyncopeAttrRepo\" attrRepoState=\"ACTIVE\"\n+            description=\"Syncope attr repo\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.attr.SyncopeAttrRepoConf\",\"domain\":\"Master\",\"searchFilter\":\"username=={user}\",\"basicAuthUsername\":\"admin\",\"basicAuthPassword\":\"password\",\"headers\":{}}'/>\n+\n+  <AttrRepoItem id=\"d2d9e7be-d82b-4698-b0fb-67d480413049\" extAttrName=\"identifier\" intAttrName=\"attr1\"\n+                password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" attrRepo_id=\"DefaultStubAttrRepo\"/>\n+\n   <RelationshipType id=\"inclusion\" description=\"Models the act that an object is included in another\"/>\n   <RelationshipType id=\"neighborhood\" description=\"Models the act that an object is near another\"/>\n   "},{"sha":"33ac88e0f1cbf94725e66bca95d8576a02ac51bf","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AttrRepoDataBinder.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAttrRepoDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAttrRepoDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAttrRepoDataBinder.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.AttrRepoTO;\n+import org.apache.syncope.core.persistence.api.entity.am.AttrRepo;\n+\n+public interface AttrRepoDataBinder {\n+\n+    AttrRepo create(AttrRepoTO attrRepoTO);\n+\n+    AttrRepo update(AttrRepo attrRepo, AttrRepoTO attrRepoTO);\n+\n+    AttrRepoTO getAttrRepoTO(AttrRepo attrRepo);\n+}"},{"sha":"c42c0da80b2b6d55b0cae697f251c39e273bdc8f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AuthModuleDataBinder.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuthModuleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuthModuleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuthModuleDataBinder.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.provisioning.api.data;\n \n import org.apache.syncope.common.lib.to.AuthModuleTO;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthModule;\n \n public interface AuthModuleDataBinder {\n \n@@ -28,5 +28,4 @@ public interface AuthModuleDataBinder {\n     AuthModule update(AuthModule authModule, AuthModuleTO authModuleTO);\n \n     AuthModuleTO getAuthModuleTO(AuthModule authModule);\n-\n }"},{"sha":"787800d18a61ddbbc6068064b43ea26930237eb6","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AuthProfileDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuthProfileDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuthProfileDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuthProfileDataBinder.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.provisioning.api.data;\n \n import org.apache.syncope.common.lib.to.AuthProfileTO;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthProfile;\n \n public interface AuthProfileDataBinder {\n "},{"sha":"bda214e1a021207da08f9f8eff067c0ba41a6839","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ClientAppDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FClientAppDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FClientAppDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FClientAppDataBinder.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.provisioning.api.data;\n \n import org.apache.syncope.common.lib.to.ClientAppTO;\n-import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.ClientApp;\n \n public interface ClientAppDataBinder {\n "},{"sha":"bfd8303c328846da6dc0200bcccfe8873928c3df","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/OIDCJWKSDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FOIDCJWKSDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FOIDCJWKSDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FOIDCJWKSDataBinder.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n import org.apache.syncope.common.lib.types.JWSAlgorithm;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n+import org.apache.syncope.core.persistence.api.entity.am.OIDCJWKS;\n \n public interface OIDCJWKSDataBinder {\n "},{"sha":"5f38b0e157c95ecb4897efd20f79bedf0062df08","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/SAML2IdPEntityDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2IdPEntityDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2IdPEntityDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2IdPEntityDataBinder.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.provisioning.api.data;\n \n import org.apache.syncope.common.lib.to.SAML2IdPEntityTO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2IdPEntity;\n \n public interface SAML2IdPEntityDataBinder {\n "},{"sha":"f21ae3586dbf16b56ffeb1f667e295ff3a6c8141","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/SAML2SPEntityDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2SPEntityDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2SPEntityDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2SPEntityDataBinder.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.provisioning.api.data;\n \n import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2SPEntity;\n \n public interface SAML2SPEntityDataBinder {\n "},{"sha":"0114aaf82ea6b138feb0e98a1cebb92a7e97659e","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/WAConfigDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FWAConfigDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FWAConfigDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FWAConfigDataBinder.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.provisioning.api.data;\n \n import org.apache.syncope.common.lib.Attr;\n-import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n+import org.apache.syncope.core.persistence.api.entity.am.WAConfigEntry;\n \n public interface WAConfigDataBinder {\n "},{"sha":"28e058c132eca453ede87c35e7c54ca18b4f7780","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/wa/WAClientAppDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2Fwa%2FWAClientAppDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2Fwa%2FWAClientAppDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2Fwa%2FWAClientAppDataBinder.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.provisioning.api.data.wa;\n \n import org.apache.syncope.common.lib.wa.WAClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.ClientApp;\n \n @FunctionalInterface\n public interface WAClientAppDataBinder {"},{"sha":"28bbdd62edec6ce9e62ebc78bc33c01e9ca34b73","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningContext.java","status":"modified","additions":14,"deletions":4,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -41,7 +41,9 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n+import org.apache.syncope.core.persistence.api.dao.AttrRepoDAO;\n import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.AuthModuleDAO;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n@@ -66,8 +68,7 @@\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthModuleDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.WAConfigDAO;\n+import org.apache.syncope.core.persistence.api.dao.WAConfigDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n@@ -88,6 +89,7 @@\n import org.apache.syncope.core.provisioning.api.data.AnyTypeClassDataBinder;\n import org.apache.syncope.core.provisioning.api.data.AnyTypeDataBinder;\n import org.apache.syncope.core.provisioning.api.data.ApplicationDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.AttrRepoDataBinder;\n import org.apache.syncope.core.provisioning.api.data.AuditDataBinder;\n import org.apache.syncope.core.provisioning.api.data.AuthModuleDataBinder;\n import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n@@ -127,6 +129,7 @@\n import org.apache.syncope.core.provisioning.java.data.AnyTypeClassDataBinderImpl;\n import org.apache.syncope.core.provisioning.java.data.AnyTypeDataBinderImpl;\n import org.apache.syncope.core.provisioning.java.data.ApplicationDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.AttrRepoDataBinderImpl;\n import org.apache.syncope.core.provisioning.java.data.AuditDataBinderImpl;\n import org.apache.syncope.core.provisioning.java.data.AuthModuleDataBinderImpl;\n import org.apache.syncope.core.provisioning.java.data.AuthProfileDataBinderImpl;\n@@ -899,6 +902,12 @@ public AuthModuleDataBinder authModuleDataBinder(final EntityFactory entityFacto\n         return new AuthModuleDataBinderImpl(entityFactory);\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    public AttrRepoDataBinder attrRepoDataBinder(final EntityFactory entityFactory) {\n+        return new AttrRepoDataBinderImpl(entityFactory);\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     public AuthProfileDataBinder authProfileDataBinder(final EntityFactory entityFactory) {\n@@ -1259,9 +1268,10 @@ public WAClientAppDataBinder waClientAppDataBinder(\n             final ClientAppDataBinder clientAppDataBinder,\n             final PolicyDataBinder policyDataBinder,\n             final AuthModuleDataBinder authModuleDataBinder,\n-            final AuthModuleDAO authModuleDAO) {\n+            final AuthModuleDAO authModuleDAO,\n+            final AttrRepoDAO attrRepoDAO) {\n \n         return new WAClientAppDataBinderImpl(\n-                clientAppDataBinder, policyDataBinder, authModuleDataBinder, authModuleDAO);\n+                clientAppDataBinder, policyDataBinder, authModuleDataBinder, authModuleDAO, attrRepoDAO);\n     }\n }"},{"sha":"82da7138a33c4e7b555c111090330cab8b62dece","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AttrRepoDataBinderImpl.java","status":"added","additions":142,"deletions":0,"changes":142,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAttrRepoDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAttrRepoDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAttrRepoDataBinderImpl.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AttrRepoTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.am.AttrRepo;\n+import org.apache.syncope.core.persistence.api.entity.am.AttrRepoItem;\n+import org.apache.syncope.core.provisioning.api.data.AttrRepoDataBinder;\n+import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class AttrRepoDataBinderImpl implements AttrRepoDataBinder {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(AttrRepoDataBinder.class);\n+\n+    protected final EntityFactory entityFactory;\n+\n+    public AttrRepoDataBinderImpl(final EntityFactory entityFactory) {\n+        this.entityFactory = entityFactory;\n+    }\n+\n+    protected void populateItems(final AttrRepoTO attrRepoTO, final AttrRepo attrRepo) {\n+        SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n+        SyncopeClientException invalidMapping =\n+                SyncopeClientException.build(ClientExceptionType.InvalidMapping);\n+        SyncopeClientException requiredValuesMissing =\n+                SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n+\n+        attrRepoTO.getItems().forEach(itemTO -> {\n+            if (itemTO == null) {\n+                LOG.error(\"Null {}\", ItemTO.class.getSimpleName());\n+                invalidMapping.getElements().add(\"Null \" + ItemTO.class.getSimpleName());\n+            } else if (itemTO.getIntAttrName() == null) {\n+                requiredValuesMissing.getElements().add(\"intAttrName\");\n+                scce.addException(requiredValuesMissing);\n+            } else {\n+                // no mandatory condition implies mandatory condition false\n+                if (!JexlUtils.isExpressionValid(itemTO.getMandatoryCondition() == null\n+                        ? \"false\" : itemTO.getMandatoryCondition())) {\n+\n+                    SyncopeClientException invalidMandatoryCondition =\n+                            SyncopeClientException.build(ClientExceptionType.InvalidValues);\n+                    invalidMandatoryCondition.getElements().add(itemTO.getMandatoryCondition());\n+                    scce.addException(invalidMandatoryCondition);\n+                }\n+\n+                AttrRepoItem item = entityFactory.newEntity(AttrRepoItem.class);\n+                item.setIntAttrName(itemTO.getIntAttrName());\n+                item.setExtAttrName(itemTO.getExtAttrName());\n+                item.setMandatoryCondition(itemTO.getMandatoryCondition());\n+                item.setConnObjectKey(itemTO.isConnObjectKey());\n+                item.setPassword(itemTO.isPassword());\n+                item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());\n+                item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());\n+                item.setAttrRepo(attrRepo);\n+                attrRepo.add(item);\n+            }\n+        });\n+\n+        if (!invalidMapping.getElements().isEmpty()) {\n+            scce.addException(invalidMapping);\n+        }\n+        if (scce.hasExceptions()) {\n+            throw scce;\n+        }\n+    }\n+\n+    @Override\n+    public AttrRepo create(final AttrRepoTO attrRepoTO) {\n+        AttrRepo attrRepo = entityFactory.newEntity(AttrRepo.class);\n+        attrRepo.setKey(attrRepoTO.getKey());\n+        return update(attrRepo, attrRepoTO);\n+    }\n+\n+    @Override\n+    public AttrRepo update(final AttrRepo attrRepo, final AttrRepoTO attrRepoTO) {\n+        attrRepo.setDescription(attrRepoTO.getDescription());\n+        attrRepo.setState(attrRepoTO.getState());\n+        attrRepo.setOrder(attrRepoTO.getOrder());\n+        attrRepo.setConf(attrRepoTO.getConf());\n+\n+        attrRepo.getItems().clear();\n+        populateItems(attrRepoTO, attrRepo);\n+\n+        return attrRepo;\n+    }\n+\n+    protected void populateItems(final AttrRepo attrRepo, final AttrRepoTO attrRepoTO) {\n+        attrRepo.getItems().forEach(item -> {\n+            ItemTO itemTO = new ItemTO();\n+            itemTO.setKey(item.getKey());\n+            itemTO.setIntAttrName(item.getIntAttrName());\n+            itemTO.setExtAttrName(item.getExtAttrName());\n+            itemTO.setMandatoryCondition(item.getMandatoryCondition());\n+            itemTO.setConnObjectKey(item.isConnObjectKey());\n+            itemTO.setPassword(item.isPassword());\n+            itemTO.setPropagationJEXLTransformer(item.getPropagationJEXLTransformer());\n+            itemTO.setPullJEXLTransformer(item.getPullJEXLTransformer());\n+            itemTO.setPurpose(MappingPurpose.NONE);\n+\n+            attrRepoTO.getItems().add(itemTO);\n+        });\n+    }\n+\n+    @Override\n+    public AttrRepoTO getAttrRepoTO(final AttrRepo attrRepo) {\n+        AttrRepoTO attrRepoTO = new AttrRepoTO();\n+\n+        attrRepoTO.setKey(attrRepo.getKey());\n+        attrRepoTO.setDescription(attrRepo.getDescription());\n+        attrRepoTO.setState(attrRepo.getState());\n+        attrRepoTO.setOrder(attrRepo.getOrder());\n+        attrRepoTO.setConf(attrRepo.getConf());\n+\n+        populateItems(attrRepo, attrRepoTO);\n+\n+        return attrRepoTO;\n+    }\n+}"},{"sha":"cfed222b25c3261f361c66a51ba47ad9f3349654","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AuthModuleDataBinderImpl.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthModuleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthModuleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthModuleDataBinderImpl.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -25,8 +25,8 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthModuleItem;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthModule;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthModuleItem;\n import org.apache.syncope.core.provisioning.api.data.AuthModuleDataBinder;\n import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.slf4j.Logger;\n@@ -98,6 +98,8 @@ public AuthModule create(final AuthModuleTO authModuleTO) {\n     @Override\n     public AuthModule update(final AuthModule authModule, final AuthModuleTO authModuleTO) {\n         authModule.setDescription(authModuleTO.getDescription());\n+        authModule.setState(authModuleTO.getState());\n+        authModule.setOrder(authModuleTO.getOrder());\n         authModule.setConf(authModuleTO.getConf());\n \n         authModule.getItems().clear();\n@@ -106,7 +108,7 @@ public AuthModule update(final AuthModule authModule, final AuthModuleTO authMod\n         return authModule;\n     }\n \n-    protected static void populateItems(final AuthModule authModule, final AuthModuleTO authModuleTO) {\n+    protected void populateItems(final AuthModule authModule, final AuthModuleTO authModuleTO) {\n         authModule.getItems().forEach(item -> {\n             ItemTO itemTO = new ItemTO();\n             itemTO.setKey(item.getKey());\n@@ -119,7 +121,7 @@ protected static void populateItems(final AuthModule authModule, final AuthModul\n             itemTO.setPullJEXLTransformer(item.getPullJEXLTransformer());\n             itemTO.setPurpose(MappingPurpose.NONE);\n \n-            authModuleTO.add(itemTO);\n+            authModuleTO.getItems().add(itemTO);\n         });\n     }\n \n@@ -129,6 +131,8 @@ public AuthModuleTO getAuthModuleTO(final AuthModule authModule) {\n \n         authModuleTO.setKey(authModule.getKey());\n         authModuleTO.setDescription(authModule.getDescription());\n+        authModuleTO.setState(authModule.getState());\n+        authModuleTO.setOrder(authModule.getOrder());\n         authModuleTO.setConf(authModule.getConf());\n \n         populateItems(authModule, authModuleTO);"},{"sha":"79722e4ebecc1f7fdc7b8497b37e47613533c241","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AuthProfileDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthProfileDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthProfileDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthProfileDataBinderImpl.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.syncope.common.lib.to.AuthProfileTO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthProfile;\n import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n \n public class AuthProfileDataBinderImpl implements AuthProfileDataBinder {"},{"sha":"ee3ec97164bf34fb26ca49f94eaac5accdf7e0e0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ClientAppDataBinderImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -26,10 +26,10 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.CASSPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.ClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.OIDCRPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2SPClientApp;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;"},{"sha":"88f28c922273fa717b36225ddee2e2f62eaf4177","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/OIDCJWKSDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCJWKSDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCJWKSDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCJWKSDataBinderImpl.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.JWSAlgorithm;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n+import org.apache.syncope.core.persistence.api.entity.am.OIDCJWKS;\n import org.apache.syncope.core.provisioning.api.data.OIDCJWKSDataBinder;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.slf4j.Logger;"},{"sha":"af43b597fb5d8bf95eb02992ae91f3325821beaa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPEntityDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPEntityDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPEntityDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPEntityDataBinderImpl.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -21,7 +21,7 @@\n import java.util.Base64;\n import org.apache.syncope.common.lib.to.SAML2IdPEntityTO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2IdPEntity;\n import org.apache.syncope.core.provisioning.api.data.SAML2IdPEntityDataBinder;\n \n public class SAML2IdPEntityDataBinderImpl implements SAML2IdPEntityDataBinder {"},{"sha":"2ea41ee719edb758b893219740d5f7e84782ba8b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2SPEntityDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPEntityDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPEntityDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPEntityDataBinderImpl.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -21,7 +21,7 @@\n import java.util.Base64;\n import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n+import org.apache.syncope.core.persistence.api.entity.am.SAML2SPEntity;\n import org.apache.syncope.core.provisioning.api.data.SAML2SPEntityDataBinder;\n \n public class SAML2SPEntityDataBinderImpl implements SAML2SPEntityDataBinder {"},{"sha":"fed6a334ab3b277987f021596a7b442e6d80636b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/WAConfigDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FWAConfigDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FWAConfigDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FWAConfigDataBinderImpl.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -20,9 +20,9 @@\n \n import java.util.Optional;\n import org.apache.syncope.common.lib.Attr;\n-import org.apache.syncope.core.persistence.api.dao.auth.WAConfigDAO;\n+import org.apache.syncope.core.persistence.api.dao.WAConfigDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n+import org.apache.syncope.core.persistence.api.entity.am.WAConfigEntry;\n import org.apache.syncope.core.provisioning.api.data.WAConfigDataBinder;\n \n public class WAConfigDataBinderImpl implements WAConfigDataBinder {"},{"sha":"7012ab1a914eb55ca27b2410f5ab81f3c7749c2b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/wa/WAClientAppDataBinderImpl.java","status":"modified","additions":29,"deletions":13,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppDataBinderImpl.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -18,12 +18,16 @@\n  */\n package org.apache.syncope.core.provisioning.java.data.wa;\n \n+import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthModuleDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n-import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n+import org.apache.syncope.core.persistence.api.dao.AttrRepoDAO;\n+import org.apache.syncope.core.persistence.api.dao.AuthModuleDAO;\n+import org.apache.syncope.core.persistence.api.entity.am.AttrRepo;\n+import org.apache.syncope.core.persistence.api.entity.am.AuthModule;\n+import org.apache.syncope.core.persistence.api.entity.am.ClientApp;\n import org.apache.syncope.core.provisioning.api.data.AuthModuleDataBinder;\n import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n@@ -43,16 +47,20 @@ public class WAClientAppDataBinderImpl implements WAClientAppDataBinder {\n \n     protected final AuthModuleDAO authModuleDAO;\n \n+    protected final AttrRepoDAO attrRepoDAO;\n+\n     public WAClientAppDataBinderImpl(\n             final ClientAppDataBinder clientAppDataBinder,\n             final PolicyDataBinder policyDataBinder,\n             final AuthModuleDataBinder authModuleDataBinder,\n-            final AuthModuleDAO authModuleDAO) {\n+            final AuthModuleDAO authModuleDAO,\n+            final AttrRepoDAO attrRepoDAO) {\n \n         this.clientAppDataBinder = clientAppDataBinder;\n         this.policyDataBinder = policyDataBinder;\n         this.authModuleDataBinder = authModuleDataBinder;\n         this.authModuleDAO = authModuleDAO;\n+        this.attrRepoDAO = attrRepoDAO;\n     }\n \n     @Override\n@@ -90,22 +98,30 @@ public WAClientApp getWAClientApp(final ClientApp clientApp) {\n                 waClientApp.setAccessPolicy(policyDataBinder.getPolicyTO(clientApp.getRealm().getAccessPolicy()));\n             }\n \n+            AttrReleasePolicyConf attrReleasePolicyConf = null;\n             if (clientApp.getAttrReleasePolicy() != null) {\n+                attrReleasePolicyConf = clientApp.getAttrReleasePolicy().getConf();\n                 waClientApp.setAttrReleasePolicy(\n                         policyDataBinder.getPolicyTO(clientApp.getAttrReleasePolicy()));\n             } else if (clientApp.getRealm() != null && clientApp.getRealm().getAttrReleasePolicy() != null) {\n+                attrReleasePolicyConf = clientApp.getRealm().getAttrReleasePolicy().getConf();\n                 waClientApp.setAttrReleasePolicy(\n                         policyDataBinder.getPolicyTO(clientApp.getRealm().getAttrReleasePolicy()));\n             }\n-\n-            if (waClientApp.getReleaseAttrs().isEmpty()) {\n-                if (clientApp.getAttrReleasePolicy() != null) {\n-                    waClientApp.setAttrReleasePolicy(\n-                            policyDataBinder.getPolicyTO(clientApp.getAttrReleasePolicy()));\n-                } else if (clientApp.getRealm() != null && clientApp.getRealm().getAttrReleasePolicy() != null) {\n-                    waClientApp.setAttrReleasePolicy(\n-                            policyDataBinder.getPolicyTO(clientApp.getRealm().getAttrReleasePolicy()));\n-                }\n+            if (attrReleasePolicyConf instanceof DefaultAttrReleasePolicyConf\n+                    && ((DefaultAttrReleasePolicyConf) attrReleasePolicyConf).getPrincipalAttrRepoConf() != null) {\n+\n+                (((DefaultAttrReleasePolicyConf) attrReleasePolicyConf).getPrincipalAttrRepoConf()).\n+                        getAttrRepos().forEach(key -> {\n+                            AttrRepo attrRepo = attrRepoDAO.find(key);\n+                            if (attrRepo == null) {\n+                                LOG.warn(\"AttrRepo \" + attrRepo + \" not found\");\n+                            } else {\n+                                attrRepo.getItems().\n+                                        forEach(item -> waClientApp.getReleaseAttrs().put(\n+                                        item.getIntAttrName(), item.getExtAttrName()));\n+                            }\n+                        });\n             }\n         } catch (Exception e) {\n             LOG.error(\"While building the configuration from an application's policy \", e);"},{"sha":"7c1faf047428d75dbaa70af920ccf37a0b9c2ed8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":46,"deletions":55,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -79,7 +79,6 @@\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n-import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.syncope.common.lib.to.ClientAppTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -111,6 +110,7 @@\n import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n import org.apache.syncope.common.rest.api.service.AnyTypeService;\n import org.apache.syncope.common.rest.api.service.ApplicationService;\n+import org.apache.syncope.common.rest.api.service.AttrRepoService;\n import org.apache.syncope.common.rest.api.service.AuditService;\n import org.apache.syncope.common.rest.api.service.AuthModuleService;\n import org.apache.syncope.common.rest.api.service.AuthProfileService;\n@@ -339,6 +339,8 @@ public void initialize(final ConfigurableApplicationContext ctx) {\n \n     protected static AuthModuleService AUTH_MODULE_SERVICE;\n \n+    protected static AttrRepoService ATTR_REPO_SERVICE;\n+\n     protected static SecurityQuestionService SECURITY_QUESTION_SERVICE;\n \n     protected static ImplementationService IMPLEMENTATION_SERVICE;\n@@ -463,6 +465,7 @@ public static void restSetup() {\n         SCIM_CONF_SERVICE = ADMIN_CLIENT.getService(SCIMConfService.class);\n         CLIENT_APP_SERVICE = ADMIN_CLIENT.getService(ClientAppService.class);\n         AUTH_MODULE_SERVICE = ADMIN_CLIENT.getService(AuthModuleService.class);\n+        ATTR_REPO_SERVICE = ADMIN_CLIENT.getService(AttrRepoService.class);\n         SAML2SP_ENTITY_SERVICE = ADMIN_CLIENT.getService(SAML2SPEntityService.class);\n         SAML2IDP_ENTITY_SERVICE = ADMIN_CLIENT.getService(SAML2IdPEntityService.class);\n         AUTH_PROFILE_SERVICE = ADMIN_CLIENT.getService(AuthProfileService.class);\n@@ -492,20 +495,8 @@ protected static <T> T getObject(final URI location, final Class<?> serviceClass\n                 get(resultClass);\n     }\n \n-    @Autowired\n-    protected ConfParamOps confParamOps;\n-\n-    @Autowired\n-    protected ServiceOps serviceOps;\n-\n-    @Autowired\n-    protected DomainOps domainOps;\n-\n-    @Autowired\n-    protected DataSource testDataSource;\n-\n     @SuppressWarnings(\"unchecked\")\n-    protected <T extends SchemaTO> T createSchema(final SchemaType type, final T schemaTO) {\n+    protected static <T extends SchemaTO> T createSchema(final SchemaType type, final T schemaTO) {\n         Response response = SCHEMA_SERVICE.create(type, schemaTO);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = CLIENT_FACTORY.getExceptionMapper().fromResponse(response);\n@@ -517,7 +508,7 @@ protected <T extends SchemaTO> T createSchema(final SchemaType type, final T sch\n         return (T) getObject(response.getLocation(), SchemaService.class, schemaTO.getClass());\n     }\n \n-    protected RoleTO createRole(final RoleTO roleTO) {\n+    protected static RoleTO createRole(final RoleTO roleTO) {\n         Response response = ROLE_SERVICE.create(roleTO);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = CLIENT_FACTORY.getExceptionMapper().fromResponse(response);\n@@ -528,13 +519,13 @@ protected RoleTO createRole(final RoleTO roleTO) {\n         return getObject(response.getLocation(), RoleService.class, RoleTO.class);\n     }\n \n-    protected ReportTO createReport(final ReportTO report) {\n+    protected static ReportTO createReport(final ReportTO report) {\n         Response response = REPORT_SERVICE.create(report);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatusInfo().getStatusCode());\n         return getObject(response.getLocation(), ReportService.class, ReportTO.class);\n     }\n \n-    protected Pair<String, String> createNotificationTask(\n+    protected static Pair<String, String> createNotificationTask(\n             final boolean active,\n             final boolean includeAbout,\n             final TraceLevel traceLevel,\n@@ -579,7 +570,7 @@ protected Pair<String, String> createNotificationTask(\n         return Pair.of(notification.getKey(), req.getUsername());\n     }\n \n-    protected ProvisioningResult<UserTO> createUser(final UserCR req) {\n+    protected static ProvisioningResult<UserTO> createUser(final UserCR req) {\n         Response response = USER_SERVICE.create(req);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = CLIENT_FACTORY.getExceptionMapper().fromResponse(response);\n@@ -591,26 +582,26 @@ protected ProvisioningResult<UserTO> createUser(final UserCR req) {\n         });\n     }\n \n-    protected ProvisioningResult<UserTO> updateUser(final UserUR req) {\n+    protected static ProvisioningResult<UserTO> updateUser(final UserUR req) {\n         return USER_SERVICE.update(req).\n                 readEntity(new GenericType<>() {\n                 });\n     }\n \n-    protected ProvisioningResult<UserTO> updateUser(final UserTO userTO) {\n+    protected static ProvisioningResult<UserTO> updateUser(final UserTO userTO) {\n         UserTO before = USER_SERVICE.read(userTO.getKey());\n         return USER_SERVICE.update(AnyOperations.diff(userTO, before, false)).\n                 readEntity(new GenericType<>() {\n                 });\n     }\n \n-    protected ProvisioningResult<UserTO> deleteUser(final String key) {\n+    protected static ProvisioningResult<UserTO> deleteUser(final String key) {\n         return USER_SERVICE.delete(key).\n                 readEntity(new GenericType<>() {\n                 });\n     }\n \n-    protected ProvisioningResult<AnyObjectTO> createAnyObject(final AnyObjectCR req) {\n+    protected static ProvisioningResult<AnyObjectTO> createAnyObject(final AnyObjectCR req) {\n         Response response = ANY_OBJECT_SERVICE.create(req);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = CLIENT_FACTORY.getExceptionMapper().fromResponse(response);\n@@ -622,19 +613,19 @@ protected ProvisioningResult<AnyObjectTO> createAnyObject(final AnyObjectCR req)\n         });\n     }\n \n-    protected ProvisioningResult<AnyObjectTO> updateAnyObject(final AnyObjectUR req) {\n+    protected static ProvisioningResult<AnyObjectTO> updateAnyObject(final AnyObjectUR req) {\n         return ANY_OBJECT_SERVICE.update(req).\n                 readEntity(new GenericType<>() {\n                 });\n     }\n \n-    protected ProvisioningResult<AnyObjectTO> deleteAnyObject(final String key) {\n+    protected static ProvisioningResult<AnyObjectTO> deleteAnyObject(final String key) {\n         return ANY_OBJECT_SERVICE.delete(key).\n                 readEntity(new GenericType<>() {\n                 });\n     }\n \n-    protected ProvisioningResult<GroupTO> createGroup(final GroupCR req) {\n+    protected static ProvisioningResult<GroupTO> createGroup(final GroupCR req) {\n         Response response = GROUP_SERVICE.create(req);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = CLIENT_FACTORY.getExceptionMapper().fromResponse(response);\n@@ -646,20 +637,20 @@ protected ProvisioningResult<GroupTO> createGroup(final GroupCR req) {\n         });\n     }\n \n-    protected ProvisioningResult<GroupTO> updateGroup(final GroupUR req) {\n+    protected static ProvisioningResult<GroupTO> updateGroup(final GroupUR req) {\n         return GROUP_SERVICE.update(req).\n                 readEntity(new GenericType<>() {\n                 });\n     }\n \n-    protected ProvisioningResult<GroupTO> deleteGroup(final String key) {\n+    protected static ProvisioningResult<GroupTO> deleteGroup(final String key) {\n         return GROUP_SERVICE.delete(key).\n                 readEntity(new GenericType<>() {\n                 });\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected <T extends PolicyTO> T createPolicy(final PolicyType type, final T policy) {\n+    protected static <T extends PolicyTO> T createPolicy(final PolicyType type, final T policy) {\n         Response response = POLICY_SERVICE.create(type, policy);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = CLIENT_FACTORY.getExceptionMapper().fromResponse(response);\n@@ -670,19 +661,7 @@ protected <T extends PolicyTO> T createPolicy(final PolicyType type, final T pol\n         return (T) getObject(response.getLocation(), PolicyService.class, policy.getClass());\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    protected AuthModuleTO createAuthModule(final AuthModuleTO authModule) {\n-        Response response = AUTH_MODULE_SERVICE.create(authModule);\n-        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n-            Exception ex = CLIENT_FACTORY.getExceptionMapper().fromResponse(response);\n-            if (ex != null) {\n-                throw (RuntimeException) ex;\n-            }\n-        }\n-        return getObject(response.getLocation(), AuthModuleService.class, authModule.getClass());\n-    }\n-\n-    protected ResourceTO createResource(final ResourceTO resourceTO) {\n+    protected static ResourceTO createResource(final ResourceTO resourceTO) {\n         Response response = RESOURCE_SERVICE.create(resourceTO);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = CLIENT_FACTORY.getExceptionMapper().fromResponse(response);\n@@ -693,14 +672,14 @@ protected ResourceTO createResource(final ResourceTO resourceTO) {\n         return getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n     }\n \n-    protected List<BatchResponseItem> parseBatchResponse(final Response response) throws IOException {\n+    protected static List<BatchResponseItem> parseBatchResponse(final Response response) throws IOException {\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         return BatchPayloadParser.parse(\n                 (InputStream) response.getEntity(), response.getMediaType(), new BatchResponseItem());\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\", \"UseOfObsoleteCollectionType\" })\n-    protected InitialDirContext getLdapResourceDirContext(final String bindDn, final String bindPwd)\n+    protected static InitialDirContext getLdapResourceDirContext(final String bindDn, final String bindPwd)\n             throws NamingException {\n         ResourceTO ldapRes = RESOURCE_SERVICE.read(RESOURCE_NAME_LDAP);\n         ConnInstanceTO ldapConn = CONNECTOR_SERVICE.read(ldapRes.getConnector(), Locale.ENGLISH.getLanguage());\n@@ -718,7 +697,7 @@ protected InitialDirContext getLdapResourceDirContext(final String bindDn, final\n         return new InitialDirContext(env);\n     }\n \n-    protected Object getLdapRemoteObject(final String bindDn, final String bindPwd, final String objectDn) {\n+    protected static Object getLdapRemoteObject(final String bindDn, final String bindPwd, final String objectDn) {\n         InitialDirContext ctx = null;\n         try {\n             ctx = getLdapResourceDirContext(bindDn, bindPwd);\n@@ -737,7 +716,7 @@ protected Object getLdapRemoteObject(final String bindDn, final String bindPwd,\n         }\n     }\n \n-    protected void createLdapRemoteObject(\n+    protected static void createLdapRemoteObject(\n             final String bindDn,\n             final String bindPwd,\n             final Pair<String, Set<Attribute>> entryAttrs) throws NamingException {\n@@ -765,7 +744,7 @@ protected void createLdapRemoteObject(\n         }\n     }\n \n-    protected void updateLdapRemoteObject(\n+    protected static void updateLdapRemoteObject(\n             final String bindDn,\n             final String bindPwd,\n             final String objectDn,\n@@ -793,7 +772,7 @@ protected void updateLdapRemoteObject(\n         }\n     }\n \n-    protected void removeLdapRemoteObject(\n+    protected static void removeLdapRemoteObject(\n             final String bindDn,\n             final String bindPwd,\n             final String objectDn) {\n@@ -816,7 +795,7 @@ protected void removeLdapRemoteObject(\n         }\n     }\n \n-    protected <T> T queryForObject(\n+    protected static <T> T queryForObject(\n             final JdbcTemplate jdbcTemplate,\n             final int maxWaitSeconds,\n             final String sql, final Class<T> requiredType, final Object... args) {\n@@ -834,7 +813,7 @@ protected <T> T queryForObject(\n         return object.get();\n     }\n \n-    protected OIDCRPClientAppTO buildOIDCRP() {\n+    protected static OIDCRPClientAppTO buildOIDCRP() {\n         AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n         authPolicyTO.setKey(\"AuthPolicyTest_\" + getUUIDString());\n         authPolicyTO.setName(\"Authentication Policy\");\n@@ -863,7 +842,7 @@ protected OIDCRPClientAppTO buildOIDCRP() {\n         return oidcrpTO;\n     }\n \n-    protected SAML2SPClientAppTO buildSAML2SP() {\n+    protected static SAML2SPClientAppTO buildSAML2SP() {\n         AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n         authPolicyTO.setKey(\"AuthPolicyTest_\" + getUUIDString());\n         authPolicyTO.setName(\"Authentication Policy\");\n@@ -893,7 +872,7 @@ protected SAML2SPClientAppTO buildSAML2SP() {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected <T extends ClientAppTO> T createClientApp(final ClientAppType type, final T clientAppTO) {\n+    protected static <T extends ClientAppTO> T createClientApp(final ClientAppType type, final T clientAppTO) {\n         Response response = CLIENT_APP_SERVICE.create(type, clientAppTO);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = CLIENT_FACTORY.getExceptionMapper().fromResponse(response);\n@@ -904,7 +883,7 @@ protected <T extends ClientAppTO> T createClientApp(final ClientAppType type, fi\n         return (T) getObject(response.getLocation(), ClientAppService.class, clientAppTO.getClass());\n     }\n \n-    protected AuthPolicyTO buildAuthPolicyTO(final String authModuleKey) {\n+    protected static AuthPolicyTO buildAuthPolicyTO(final String authModuleKey) {\n         AuthPolicyTO policy = new AuthPolicyTO();\n         policy.setName(\"Test Authentication policy\");\n \n@@ -915,7 +894,7 @@ protected AuthPolicyTO buildAuthPolicyTO(final String authModuleKey) {\n         return policy;\n     }\n \n-    protected AttrReleasePolicyTO buildAttrReleasePolicyTO() {\n+    protected static AttrReleasePolicyTO buildAttrReleasePolicyTO() {\n         AttrReleasePolicyTO policy = new AttrReleasePolicyTO();\n         policy.setName(\"Test Attribute Release policy\");\n         policy.setStatus(Boolean.TRUE);\n@@ -929,7 +908,7 @@ protected AttrReleasePolicyTO buildAttrReleasePolicyTO() {\n         return policy;\n     }\n \n-    protected AccessPolicyTO buildAccessPolicyTO() {\n+    protected static AccessPolicyTO buildAccessPolicyTO() {\n         AccessPolicyTO policy = new AccessPolicyTO();\n         policy.setName(\"Test Access policy\");\n         policy.setEnabled(true);\n@@ -941,7 +920,7 @@ protected AccessPolicyTO buildAccessPolicyTO() {\n         return policy;\n     }\n \n-    protected List<AuditEntry> query(final AuditQuery query, final int maxWaitSeconds) {\n+    protected static List<AuditEntry> query(final AuditQuery query, final int maxWaitSeconds) {\n         int i = 0;\n         List<AuditEntry> results = List.of();\n         do {\n@@ -955,4 +934,16 @@ protected List<AuditEntry> query(final AuditQuery query, final int maxWaitSecond\n         return results;\n     }\n \n+    @Autowired\n+    protected ConfParamOps confParamOps;\n+\n+    @Autowired\n+    protected ServiceOps serviceOps;\n+\n+    @Autowired\n+    protected DomainOps domainOps;\n+\n+    @Autowired\n+    protected DataSource testDataSource;\n+\n }"},{"sha":"946e3cc77ebd83a05d0d4d2dce91d79031084e93","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AttrRepoITCase.java","status":"added","additions":306,"deletions":0,"changes":306,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAttrRepoITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAttrRepoITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAttrRepoITCase.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,306 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.IOException;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.UUID;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.ClassUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.attr.AttrRepoConf;\n+import org.apache.syncope.common.lib.attr.JDBCAttrRepoConf;\n+import org.apache.syncope.common.lib.attr.LDAPAttrRepoConf;\n+import org.apache.syncope.common.lib.attr.StubAttrRepoConf;\n+import org.apache.syncope.common.lib.attr.SyncopeAttrRepoConf;\n+import org.apache.syncope.common.lib.to.AttrRepoTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.types.AttrRepoState;\n+import org.apache.syncope.common.rest.api.service.AttrRepoService;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n+\n+public class AttrRepoITCase extends AbstractITCase {\n+\n+    private enum AttrRepoSupportedType {\n+        STUB,\n+        SYNCOPE,\n+        LDAP,\n+        JDBC;\n+\n+    };\n+\n+    private static AttrRepoTO createAttrRepo(final AttrRepoTO attrRepo) {\n+        Response response = ATTR_REPO_SERVICE.create(attrRepo);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            Exception ex = CLIENT_FACTORY.getExceptionMapper().fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+        return getObject(response.getLocation(), AttrRepoService.class, attrRepo.getClass());\n+    }\n+\n+    private static AttrRepoTO buildAttrRepoTO(final AttrRepoSupportedType type) {\n+        AttrRepoTO attrRepoTO = new AttrRepoTO();\n+        attrRepoTO.setKey(\"Test\" + type + \"AttrRepo\" + getUUIDString());\n+        attrRepoTO.setDescription(\"A test \" + type + \" attr repo\");\n+        attrRepoTO.setState(AttrRepoState.ACTIVE);\n+\n+        AttrRepoConf conf;\n+        switch (type) {\n+            case LDAP:\n+                conf = new LDAPAttrRepoConf();\n+                LDAPAttrRepoConf.class.cast(conf).setBaseDn(\"dc=example,dc=org\");\n+                LDAPAttrRepoConf.class.cast(conf).setSearchFilter(\"cn={user}\");\n+                LDAPAttrRepoConf.class.cast(conf).setSubtreeSearch(true);\n+                LDAPAttrRepoConf.class.cast(conf).setLdapUrl(\"ldap://localhost:1389\");\n+                LDAPAttrRepoConf.class.cast(conf).setBaseDn(\"cn=Directory Manager,dc=example,dc=org\");\n+                LDAPAttrRepoConf.class.cast(conf).setBindCredential(\"Password\");\n+                break;\n+\n+            case JDBC:\n+                conf = new JDBCAttrRepoConf();\n+                JDBCAttrRepoConf.class.cast(conf).setSql(\"SELECT * FROM table WHERE name=?\");\n+                JDBCAttrRepoConf.class.cast(conf).getUsername().add(\"name\");\n+                JDBCAttrRepoConf.class.cast(conf).getQueryAttributes().put(\"key1\", \"value1\");\n+                break;\n+\n+            case SYNCOPE:\n+                conf = new SyncopeAttrRepoConf();\n+                SyncopeAttrRepoConf.class.cast(conf).setDomain(SyncopeConstants.MASTER_DOMAIN);\n+                break;\n+\n+            case STUB:\n+            default:\n+                conf = new StubAttrRepoConf();\n+                StubAttrRepoConf.class.cast(conf).getAttributes().put(\"attr9\", UUID.randomUUID().toString());\n+                StubAttrRepoConf.class.cast(conf).getAttributes().put(\"attr8\", UUID.randomUUID().toString());\n+                break;\n+        }\n+        attrRepoTO.setConf(conf);\n+\n+        ItemTO keyMapping = new ItemTO();\n+        keyMapping.setIntAttrName(\"uid\");\n+        keyMapping.setExtAttrName(\"username\");\n+        attrRepoTO.getItems().add(keyMapping);\n+\n+        ItemTO fullnameMapping = new ItemTO();\n+        fullnameMapping.setIntAttrName(\"cn\");\n+        fullnameMapping.setExtAttrName(\"fullname\");\n+        attrRepoTO.getItems().add(fullnameMapping);\n+\n+        return attrRepoTO;\n+    }\n+\n+    private static boolean isSpecificConf(final AttrRepoConf conf, final Class<? extends AttrRepoConf> clazz) {\n+        return ClassUtils.isAssignable(clazz, conf.getClass());\n+    }\n+\n+    @Test\n+    public void list() {\n+        List<AttrRepoTO> attrRepoTOs = ATTR_REPO_SERVICE.list();\n+        assertNotNull(attrRepoTOs);\n+        assertFalse(attrRepoTOs.isEmpty());\n+\n+        assertTrue(attrRepoTOs.stream().anyMatch(\n+                attrRepo -> isSpecificConf(attrRepo.getConf(), LDAPAttrRepoConf.class)\n+                && attrRepo.getKey().equals(\"DefaultLDAPAttrRepo\")));\n+        assertTrue(attrRepoTOs.stream().anyMatch(\n+                attrRepo -> isSpecificConf(attrRepo.getConf(), JDBCAttrRepoConf.class)\n+                && attrRepo.getKey().equals(\"DefaultJDBCAttrRepo\")));\n+        assertTrue(attrRepoTOs.stream().anyMatch(\n+                attrRepo -> isSpecificConf(attrRepo.getConf(), StubAttrRepoConf.class)\n+                && attrRepo.getKey().equals(\"DefaultStubAttrRepo\")));\n+        assertTrue(attrRepoTOs.stream().anyMatch(\n+                attrRepo -> isSpecificConf(attrRepo.getConf(), SyncopeAttrRepoConf.class)\n+                && attrRepo.getKey().equals(\"DefaultSyncopeAttrRepo\")));\n+    }\n+\n+    @Test\n+    public void getLDAPAttrRepo() {\n+        AttrRepoTO attrRepoTO = ATTR_REPO_SERVICE.read(\"DefaultLDAPAttrRepo\");\n+\n+        assertNotNull(attrRepoTO);\n+        assertTrue(StringUtils.isNotBlank(attrRepoTO.getDescription()));\n+        assertTrue(isSpecificConf(attrRepoTO.getConf(), LDAPAttrRepoConf.class));\n+        assertFalse(isSpecificConf(attrRepoTO.getConf(), JDBCAttrRepoConf.class));\n+    }\n+\n+    @Test\n+    public void getJDBCAttrRepo() {\n+        AttrRepoTO attrRepoTO = ATTR_REPO_SERVICE.read(\"DefaultJDBCAttrRepo\");\n+\n+        assertNotNull(attrRepoTO);\n+        assertTrue(StringUtils.isNotBlank(attrRepoTO.getDescription()));\n+        assertTrue(isSpecificConf(attrRepoTO.getConf(), JDBCAttrRepoConf.class));\n+        assertFalse(isSpecificConf(attrRepoTO.getConf(), LDAPAttrRepoConf.class));\n+    }\n+\n+    @Test\n+    public void getStubAttrRepo() {\n+        AttrRepoTO attrRepoTO = ATTR_REPO_SERVICE.read(\"DefaultStubAttrRepo\");\n+\n+        assertNotNull(attrRepoTO);\n+        assertTrue(StringUtils.isNotBlank(attrRepoTO.getDescription()));\n+        assertTrue(isSpecificConf(attrRepoTO.getConf(), StubAttrRepoConf.class));\n+        assertFalse(isSpecificConf(attrRepoTO.getConf(), SyncopeAttrRepoConf.class));\n+    }\n+\n+    @Test\n+    public void getSyncopeAttrRepo() {\n+        AttrRepoTO attrRepoTO = ATTR_REPO_SERVICE.read(\"DefaultSyncopeAttrRepo\");\n+\n+        assertNotNull(attrRepoTO);\n+        assertTrue(StringUtils.isNotBlank(attrRepoTO.getDescription()));\n+        assertTrue(isSpecificConf(attrRepoTO.getConf(), SyncopeAttrRepoConf.class));\n+        assertFalse(isSpecificConf(attrRepoTO.getConf(), StubAttrRepoConf.class));\n+    }\n+\n+    @Test\n+    public void create() {\n+        EnumSet.allOf(AttrRepoSupportedType.class).forEach(type -> {\n+            AttrRepoTO attrRepoTO = createAttrRepo(buildAttrRepoTO(type));\n+            assertNotNull(attrRepoTO);\n+            assertTrue(attrRepoTO.getDescription().contains(\"A test \" + type + \" attr repo\"));\n+            assertEquals(2, attrRepoTO.getItems().size());\n+        });\n+    }\n+\n+    @Test\n+    public void updateLDAPAttrRepo() {\n+        AttrRepoTO ldapAttrRepoTO = ATTR_REPO_SERVICE.read(\"DefaultLDAPAttrRepo\");\n+        assertNotNull(ldapAttrRepoTO);\n+\n+        AttrRepoTO newLdapAttrRepoTO = buildAttrRepoTO(AttrRepoSupportedType.LDAP);\n+        newLdapAttrRepoTO = createAttrRepo(newLdapAttrRepoTO);\n+        assertNotNull(newLdapAttrRepoTO);\n+\n+        AttrRepoConf conf = ldapAttrRepoTO.getConf();\n+        assertNotNull(conf);\n+        LDAPAttrRepoConf.class.cast(conf).setSubtreeSearch(false);\n+        newLdapAttrRepoTO.setConf(conf);\n+\n+        // update new attr repo\n+        ATTR_REPO_SERVICE.update(newLdapAttrRepoTO);\n+        newLdapAttrRepoTO = ATTR_REPO_SERVICE.read(newLdapAttrRepoTO.getKey());\n+        assertNotNull(newLdapAttrRepoTO);\n+\n+        conf = newLdapAttrRepoTO.getConf();\n+        assertFalse(LDAPAttrRepoConf.class.cast(conf).isSubtreeSearch());\n+    }\n+\n+    @Test\n+    public void updateJDBCAttrRepo() {\n+        AttrRepoTO jdbcAttrRepoTO = ATTR_REPO_SERVICE.read(\"DefaultJDBCAttrRepo\");\n+        assertNotNull(jdbcAttrRepoTO);\n+\n+        AttrRepoTO newJDBCAttrRepoTO = buildAttrRepoTO(AttrRepoSupportedType.JDBC);\n+        newJDBCAttrRepoTO = createAttrRepo(newJDBCAttrRepoTO);\n+        assertNotNull(newJDBCAttrRepoTO);\n+\n+        AttrRepoConf conf = jdbcAttrRepoTO.getConf();\n+        assertNotNull(conf);\n+        JDBCAttrRepoConf.class.cast(conf).setCaseCanonicalization(JDBCAttrRepoConf.CaseCanonicalizationMode.UPPER);\n+        newJDBCAttrRepoTO.setConf(conf);\n+\n+        // update new attr repo\n+        ATTR_REPO_SERVICE.update(newJDBCAttrRepoTO);\n+        newJDBCAttrRepoTO = ATTR_REPO_SERVICE.read(newJDBCAttrRepoTO.getKey());\n+        assertNotNull(newJDBCAttrRepoTO);\n+\n+        conf = newJDBCAttrRepoTO.getConf();\n+        assertEquals(\n+                JDBCAttrRepoConf.CaseCanonicalizationMode.UPPER,\n+                JDBCAttrRepoConf.class.cast(conf).getCaseCanonicalization());\n+    }\n+\n+    @Test\n+    public void updateStubAttrRepo() {\n+        AttrRepoTO staticAttrRepoTO = ATTR_REPO_SERVICE.read(\"DefaultStubAttrRepo\");\n+        assertNotNull(staticAttrRepoTO);\n+\n+        AttrRepoTO newStubAttrRepoTO = buildAttrRepoTO(AttrRepoSupportedType.STUB);\n+        newStubAttrRepoTO = createAttrRepo(newStubAttrRepoTO);\n+        assertNotNull(newStubAttrRepoTO);\n+\n+        AttrRepoConf conf = staticAttrRepoTO.getConf();\n+        assertNotNull(conf);\n+        assertEquals(1, StubAttrRepoConf.class.cast(conf).getAttributes().size());\n+        StubAttrRepoConf.class.cast(conf).getAttributes().put(\"attr3\", \"value3\");\n+        newStubAttrRepoTO.setConf(conf);\n+\n+        // update new attr repo\n+        ATTR_REPO_SERVICE.update(newStubAttrRepoTO);\n+        newStubAttrRepoTO = ATTR_REPO_SERVICE.read(newStubAttrRepoTO.getKey());\n+        assertNotNull(newStubAttrRepoTO);\n+\n+        conf = newStubAttrRepoTO.getConf();\n+        assertEquals(2, StubAttrRepoConf.class.cast(conf).getAttributes().size());\n+    }\n+\n+    @Test\n+    public void updateSyncopeAttrRepo() {\n+        AttrRepoTO syncopeAttrRepoTO = ATTR_REPO_SERVICE.read(\"DefaultSyncopeAttrRepo\");\n+        assertNotNull(syncopeAttrRepoTO);\n+\n+        AttrRepoTO newSyncopeAttrRepoTO = buildAttrRepoTO(AttrRepoSupportedType.SYNCOPE);\n+        newSyncopeAttrRepoTO = createAttrRepo(newSyncopeAttrRepoTO);\n+        assertNotNull(newSyncopeAttrRepoTO);\n+\n+        AttrRepoConf conf = syncopeAttrRepoTO.getConf();\n+        assertNotNull(conf);\n+        SyncopeAttrRepoConf.class.cast(conf).setDomain(\"Two\");\n+        newSyncopeAttrRepoTO.setConf(conf);\n+\n+        // update new attr repo\n+        ATTR_REPO_SERVICE.update(newSyncopeAttrRepoTO);\n+        newSyncopeAttrRepoTO = ATTR_REPO_SERVICE.read(newSyncopeAttrRepoTO.getKey());\n+        assertNotNull(newSyncopeAttrRepoTO);\n+\n+        conf = newSyncopeAttrRepoTO.getConf();\n+        assertEquals(\"Two\", SyncopeAttrRepoConf.class.cast(conf).getDomain());\n+    }\n+\n+    @Test\n+    public void delete() throws IOException {\n+        EnumSet.allOf(AttrRepoSupportedType.class).forEach(type -> {\n+            AttrRepoTO read = createAttrRepo(buildAttrRepoTO(type));\n+            assertNotNull(read);\n+\n+            ATTR_REPO_SERVICE.delete(read.getKey());\n+\n+            try {\n+                ATTR_REPO_SERVICE.read(read.getKey());\n+                fail(\"This should not happen\");\n+            } catch (SyncopeClientException e) {\n+                assertNotNull(e);\n+            }\n+        });\n+    }\n+}"},{"sha":"807be22a4861ef3b52a2fba623e9f7e386caf105","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthModuleITCase.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -28,6 +28,7 @@\n import java.util.EnumSet;\n import java.util.List;\n import java.util.UUID;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -45,6 +46,7 @@\n import org.apache.syncope.common.lib.auth.U2FAuthModuleConf;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.rest.api.service.AuthModuleService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n \n@@ -64,6 +66,17 @@ private enum AuthModuleSupportedType {\n \n     };\n \n+    private static AuthModuleTO createAuthModule(final AuthModuleTO authModule) {\n+        Response response = AUTH_MODULE_SERVICE.create(authModule);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            Exception ex = CLIENT_FACTORY.getExceptionMapper().fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+        return getObject(response.getLocation(), AuthModuleService.class, authModule.getClass());\n+    }\n+\n     private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type) {\n         AuthModuleTO authModuleTO = new AuthModuleTO();\n         authModuleTO.setKey(\"Test\" + type + \"AuthenticationModule\" + getUUIDString());\n@@ -153,12 +166,12 @@ private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type\n         ItemTO keyMapping = new ItemTO();\n         keyMapping.setIntAttrName(\"uid\");\n         keyMapping.setExtAttrName(\"username\");\n-        authModuleTO.add(keyMapping);\n+        authModuleTO.getItems().add(keyMapping);\n \n         ItemTO fullnameMapping = new ItemTO();\n         fullnameMapping.setIntAttrName(\"cn\");\n         fullnameMapping.setExtAttrName(\"fullname\");\n-        authModuleTO.add(fullnameMapping);\n+        authModuleTO.getItems().add(fullnameMapping);\n \n         return authModuleTO;\n     }"},{"sha":"11d282050132c2dcb9e4914a3b3b87cec0b10a46","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/wa/WAClientAppITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWAClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWAClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWAClientAppITCase.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -134,12 +134,12 @@ private void addItems() {\n         ItemTO keyMapping = new ItemTO();\n         keyMapping.setIntAttrName(\"uid\");\n         keyMapping.setExtAttrName(\"username\");\n-        authModuleTO.add(keyMapping);\n+        authModuleTO.getItems().add(keyMapping);\n \n         ItemTO fullnameMapping = new ItemTO();\n         fullnameMapping.setIntAttrName(\"cn\");\n         fullnameMapping.setExtAttrName(\"fullname\");\n-        authModuleTO.add(fullnameMapping);\n+        authModuleTO.getItems().add(fullnameMapping);\n \n         AUTH_MODULE_SERVICE.update(authModuleTO);\n "},{"sha":"50eedfe73b952453c0a06bfa1eb4fae0be270d78","filename":"fit/wa-reference/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/fit%2Fwa-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/fit%2Fwa-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fpom.xml?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -52,6 +52,12 @@ under the License.\n       <version>${project.version}</version>\n     </dependency>\n \n+    <!-- required by JDBC attribute repository -->\n+    <dependency>\n+      <groupId>com.h2database</groupId>\n+      <artifactId>h2</artifactId>\n+    </dependency>\n+\n     <!-- TEST -->\n     <dependency>\n       <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>"},{"sha":"aa772a5a7ab6194aa36a19a67e37caa16d04521a","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/SAML2SRAITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -60,7 +60,6 @@ public static void startSRA() throws IOException, InterruptedException, TimeoutE\n         assumeTrue(SAML2SRAITCase.class.equals(MethodHandles.lookup().lookupClass()));\n \n         doStartSRA(\"saml2\");\n-//        sraRouteService.pushToSRA();\n     }\n \n     @BeforeAll"},{"sha":"4d1db40deaaac69604011d5478c11eed77478d9a","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/ui/AbstractUIITCase.java","status":"modified","additions":35,"deletions":1,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FAbstractUIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FAbstractUIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FAbstractUIITCase.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -25,7 +25,9 @@\n import java.io.IOException;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n+import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PolicyType;\n@@ -61,7 +63,39 @@ protected static AuthPolicyTO getAuthPolicy() {\n                         fail(\"Could not create Test Auth Policy\");\n                     }\n \n-                    return POLICY_SERVICE.read(PolicyType.AUTH, response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+                    return POLICY_SERVICE.read(\n+                            PolicyType.AUTH,\n+                            response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+                });\n+    }\n+\n+    protected static AttrReleasePolicyTO getAttrReleasePolicy() {\n+        String stubAttrRepo = \"DefaultStubAttrRepo\";\n+        String description = \"UI attr release policy\";\n+\n+        return POLICY_SERVICE.list(PolicyType.ATTR_RELEASE).stream().\n+                map(AttrReleasePolicyTO.class::cast).\n+                filter(policy -> description.equals(policy.getName())\n+                && policy.getConf() instanceof DefaultAttrReleasePolicyConf\n+                && ((DefaultAttrReleasePolicyConf) policy.getConf()).getPrincipalAttrRepoConf().\n+                        getAttrRepos().contains(stubAttrRepo)).\n+                findFirst().\n+                orElseGet(() -> {\n+                    DefaultAttrReleasePolicyConf policyConf = new DefaultAttrReleasePolicyConf();\n+                    policyConf.getPrincipalAttrRepoConf().getAttrRepos().add(stubAttrRepo);\n+\n+                    AttrReleasePolicyTO policy = new AttrReleasePolicyTO();\n+                    policy.setName(description);\n+                    policy.setConf(policyConf);\n+\n+                    Response response = POLICY_SERVICE.create(PolicyType.ATTR_RELEASE, policy);\n+                    if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+                        fail(\"Could not create Test Attr Release Policy\");\n+                    }\n+\n+                    return POLICY_SERVICE.read(\n+                            PolicyType.ATTR_RELEASE,\n+                            response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n                 });\n     }\n "},{"sha":"883916940285738a44b7d2f7f1a27955eb81eb9a","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/ui/OIDC4UIITCase.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FOIDC4UIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FOIDC4UIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FOIDC4UIITCase.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -81,10 +81,11 @@ private static void clientAppSetup(final String appName, final String baseAddres\n         clientApp.setSubjectType(OIDCSubjectType.PUBLIC);\n         clientApp.getRedirectUris().clear();\n         clientApp.getRedirectUris().add(baseAddress + OIDCC4UIConstants.URL_CONTEXT + \"/code-consumer\");\n-        clientApp.setAuthPolicy(getAuthPolicy().getKey());\n         clientApp.setSignIdToken(true);\n         clientApp.setJwtAccessToken(true);\n         clientApp.setLogoutUri(baseAddress + OIDCC4UIConstants.URL_CONTEXT + \"/logout\");\n+        clientApp.setAuthPolicy(getAuthPolicy().getKey());\n+        clientApp.setAttrReleasePolicy(getAttrReleasePolicy().getKey());\n \n         CLIENT_APP_SERVICE.update(ClientAppType.OIDCRP, clientApp);\n         CLIENT_APP_SERVICE.pushToWA();\n@@ -200,6 +201,11 @@ protected void sso(final String baseURL, final String username, final String pas\n         // 2b. WA attribute consent screen\n         if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n             responseBody = EntityUtils.toString(response.getEntity());\n+\n+            // check attribute repository\n+            assertTrue(responseBody.contains(\"identifier\"));\n+            assertTrue(responseBody.contains(\"[value1]\"));\n+\n             String execution = extractWAExecution(responseBody);\n \n             List<NameValuePair> form = new ArrayList<>();"},{"sha":"1334835d7788f9d64bf77c76d5b9f0e9d5a9fe47","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/ui/SAML2SP4UIITCase.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -84,6 +84,7 @@ private static void clientAppSetup(final String appName, final String entityId,\n         clientApp.setSignResponses(true);\n         clientApp.setRequiredNameIdFormat(SAML2SPNameId.PERSISTENT);\n         clientApp.setAuthPolicy(getAuthPolicy().getKey());\n+        clientApp.setAttrReleasePolicy(getAttrReleasePolicy().getKey());\n \n         CLIENT_APP_SERVICE.update(ClientAppType.SAML2SP, clientApp);\n         CLIENT_APP_SERVICE.pushToWA();\n@@ -237,6 +238,10 @@ protected void sso(final String baseURL, final String username, final String pas\n \n         // 2c. WA attribute consent screen\n         if (isOk) {\n+            // check attribute repository\n+            assertTrue(responseBody.contains(\"identifier\"));\n+            assertTrue(responseBody.contains(\"[value1]\"));\n+\n             String execution = extractWAExecution(responseBody);\n \n             List<NameValuePair> form = new ArrayList<>();\n@@ -252,7 +257,8 @@ protected void sso(final String baseURL, final String username, final String pas\n             post.setEntity(new UrlEncodedFormEntity(form, Consts.UTF_8));\n             try (CloseableHttpResponse response = httpclient.execute(post, context)) {\n                 assertEquals(HttpStatus.SC_MOVED_TEMPORARILY, response.getStatusLine().getStatusCode());\n-                location = response.getFirstHeader(HttpHeaders.LOCATION).getValue();\n+                location = response.getFirstHeader(HttpHeaders.LOCATION).getValue().\n+                        replace(\"http://\", \"https://\").replace(\":8080\", \":9443\");\n             }\n         }\n "},{"sha":"736dd914a4570853ae0c9e21b7a9caec391551a2","filename":"pom.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -448,7 +448,7 @@ under the License.\n \n     <pac4j.version>5.3.1</pac4j.version>\n \n-    <cas.version>6.5.5</cas.version>\n+    <cas.version>6.5.6-SNAPSHOT</cas.version>\n     <cas-client.version>3.6.4</cas-client.version>\n \n     <h2.version>2.1.214</h2.version>\n@@ -1382,6 +1382,11 @@ under the License.\n         <artifactId>cas-server-support-actions</artifactId>\n         <version>${cas.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-support-jpa-util</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.apereo.cas</groupId>\n         <artifactId>cas-server-support-ldap</artifactId>"},{"sha":"27f39ff891e75f42f3363071837478744374d79c","filename":"src/main/asciidoc/reference-guide/concepts/attributerepositories.adoc","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fattributerepositories.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fattributerepositories.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fattributerepositories.adoc?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,52 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+=== Attribute Repositories\n+\n+Attribute Repositories allow to enrich the profile of an user authenticated by <<web-access,WA>>, in the context of a\n+certain <<policies-attribute-release,Attribute Release Policy>>.\n+\n+Some attribute repositories are provided:\n+\n+* https://apereo.github.io/cas/6.5.x/integration/Attribute-Resolution-JDBC.html[Database^]\n+* https://apereo.github.io/cas/6.5.x/integration/Attribute-Resolution-LDAP.html[LDAP^]\n+* https://apereo.github.io/cas/6.5.x/integration/Attribute-Resolution-Stub.html[Stub^]\n+* https://apereo.github.io/cas/6.5.x/integration/Attribute-Resolution-Syncope.html[Syncope^]\n+\n+[TIP]\n+====\n+Custom authentication modules can be provided by implementing the\n+ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/common/am/lib/src/main/java/org/apache/syncope/common/lib/attr/AttrRepoConf.java[AttrRepoConf^]\n+endif::[]\n+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n+https://github.com/apache/syncope/blob/master/common/am/lib/src/main/java/org/apache/syncope/common/lib/attr/AttrRepoConf.java[AttrRepoConf^]\n+endif::[]\n+interface and extending appropriately the\n+ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/WAPropertySourceLocator.java[WAPropertySourceLocator^]\n+endif::[]\n+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n+https://github.com/apache/syncope/blob/master/wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/WAPropertySourceLocator.java[WAPropertySourceLocator^]\n+endif::[]\n+class.\n+====\n+\n+[NOTE]\n+Attribute Repositories are dynamically translated into \n+https://apereo.github.io/cas/6.5.x/integration/Attribute-Resolution.html[CAS Attribute Resolution^] configuration."},{"sha":"328e5dcf1639c7269e545a6a69ad03627f25c138","filename":"src/main/asciidoc/reference-guide/concepts/concepts.adoc","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fconcepts.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fconcepts.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fconcepts.adoc?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -50,6 +50,8 @@ include::routes.adoc[]\n \n include::authenticationmodules.adoc[]\n \n+include::attributerepositories.adoc[]\n+\n include::clientapplications.adoc[]\n \n include::domains.adoc[]"},{"sha":"14768a0f0c8ab1cc08a2105f4287b8e5443bb62d","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/AttrRepoPropertySourceMapper.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAttrRepoPropertySourceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAttrRepoPropertySourceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAttrRepoPropertySourceMapper.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.bootstrap;\n+\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.attr.AttrRepoConf;\n+import org.apache.syncope.common.lib.attr.JDBCAttrRepoConf;\n+import org.apache.syncope.common.lib.attr.LDAPAttrRepoConf;\n+import org.apache.syncope.common.lib.attr.StubAttrRepoConf;\n+import org.apache.syncope.common.lib.attr.SyncopeAttrRepoConf;\n+import org.apache.syncope.common.lib.to.AttrRepoTO;\n+import org.apereo.cas.configuration.CasCoreConfigurationUtils;\n+import org.apereo.cas.configuration.model.core.authentication.AttributeRepositoryStates;\n+import org.apereo.cas.configuration.model.core.authentication.StubPrincipalAttributesProperties;\n+import org.apereo.cas.configuration.model.support.jdbc.JdbcPrincipalAttributesProperties;\n+import org.apereo.cas.configuration.model.support.ldap.LdapPrincipalAttributesProperties;\n+import org.apereo.cas.configuration.model.support.syncope.SyncopePrincipalAttributesProperties;\n+\n+public class AttrRepoPropertySourceMapper extends PropertySourceMapper implements AttrRepoConf.Mapper {\n+\n+    protected final String syncopeClientAddress;\n+\n+    protected final AttrRepoTO attrRepoTO;\n+\n+    public AttrRepoPropertySourceMapper(final String syncopeClientAddress, final AttrRepoTO attrRepoTO) {\n+        this.syncopeClientAddress = syncopeClientAddress;\n+        this.attrRepoTO = attrRepoTO;\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final StubAttrRepoConf conf) {\n+        StubPrincipalAttributesProperties props = new StubPrincipalAttributesProperties();\n+        props.setId(attrRepoTO.getKey());\n+        props.setState(AttributeRepositoryStates.valueOf(attrRepoTO.getState().name()));\n+        props.setOrder(attrRepoTO.getOrder());\n+        props.setAttributes(conf.getAttributes());\n+\n+        return prefix(\"cas.authn.attribute-repository.stub.\", CasCoreConfigurationUtils.asMap(props));\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final LDAPAttrRepoConf conf) {\n+        LdapPrincipalAttributesProperties props = new LdapPrincipalAttributesProperties();\n+        props.setId(attrRepoTO.getKey());\n+        props.setState(AttributeRepositoryStates.valueOf(attrRepoTO.getState().name()));\n+        props.setOrder(attrRepoTO.getOrder());\n+        props.setAttributes(conf.getAttributes());\n+        props.setUseAllQueryAttributes(conf.isUseAllQueryAttributes());\n+        props.setQueryAttributes(conf.getQueryAttributes());\n+        fill(props, conf);\n+\n+        return prefix(\"cas.authn.attribute-repository.ldap[].\", CasCoreConfigurationUtils.asMap(props));\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final JDBCAttrRepoConf conf) {\n+        JdbcPrincipalAttributesProperties props = new JdbcPrincipalAttributesProperties();\n+        props.setId(attrRepoTO.getKey());\n+        props.setState(AttributeRepositoryStates.valueOf(attrRepoTO.getState().name()));\n+        props.setOrder(attrRepoTO.getOrder());\n+        props.setSql(conf.getSql());\n+        props.setSingleRow(conf.isSingleRow());\n+        props.setRequireAllAttributes(conf.isRequireAllAttributes());\n+        props.setCaseCanonicalization(conf.getCaseCanonicalization().name());\n+        props.setQueryType(conf.getQueryType().name());\n+        props.setColumnMappings(conf.getColumnMappings());\n+        props.setUsername(conf.getUsername());\n+        props.setAttributes(conf.getAttributes());\n+        props.setCaseInsensitiveQueryAttributes(conf.getCaseInsensitiveQueryAttributes());\n+        props.setQueryAttributes(conf.getQueryAttributes());\n+        fill(props, conf);\n+\n+        return prefix(\"cas.authn.attribute-repository.jdbc[].\", CasCoreConfigurationUtils.asMap(props));\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final SyncopeAttrRepoConf conf) {\n+        SyncopePrincipalAttributesProperties props = new SyncopePrincipalAttributesProperties();\n+        props.setId(attrRepoTO.getKey());\n+        props.setState(AttributeRepositoryStates.valueOf(attrRepoTO.getState().name()));\n+        props.setOrder(attrRepoTO.getOrder());\n+        props.setDomain(conf.getDomain());\n+        props.setUrl(StringUtils.substringBefore(syncopeClientAddress, \"/rest\"));\n+        props.setSearchFilter(conf.getSearchFilter());\n+        props.setBasicAuthUsername(conf.getBasicAuthUsername());\n+        props.setBasicAuthPassword(conf.getBasicAuthPassword());\n+        props.setHeaders(props.getHeaders());\n+\n+        return prefix(\"cas.authn.attribute-repository.syncope.\", CasCoreConfigurationUtils.asMap(props));\n+    }\n+}"},{"sha":"61966d9a937cd3ab01f5aabb4a7c3b36a24aeb73","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/AuthModulePropertySourceMapper.java","status":"added","additions":264,"deletions":0,"changes":264,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapper.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,264 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.bootstrap;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.auth.AuthModuleConf;\n+import org.apache.syncope.common.lib.auth.DuoMfaAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.JDBCAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.JaasAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.LDAPAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.OIDCAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.SimpleMfaAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.StaticAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.U2FAuthModuleConf;\n+import org.apache.syncope.common.lib.to.AuthModuleTO;\n+import org.apache.syncope.common.lib.types.AuthModuleState;\n+import org.apereo.cas.configuration.CasCoreConfigurationUtils;\n+import org.apereo.cas.configuration.model.core.authentication.AuthenticationHandlerStates;\n+import org.apereo.cas.configuration.model.support.generic.AcceptAuthenticationProperties;\n+import org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties;\n+import org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties;\n+import org.apereo.cas.configuration.model.support.ldap.AbstractLdapAuthenticationProperties;\n+import org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties;\n+import org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties;\n+import org.apereo.cas.configuration.model.support.mfa.gauth.GoogleAuthenticatorMultifactorProperties;\n+import org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties;\n+import org.apereo.cas.configuration.model.support.mfa.simple.CasSimpleMultifactorAuthenticationProperties;\n+import org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorAuthenticationProperties;\n+import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jGenericOidcClientProperties;\n+import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jOidcClientProperties;\n+import org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties;\n+import org.apereo.cas.configuration.model.support.syncope.SyncopeAuthenticationProperties;\n+import org.apereo.cas.util.ResourceUtils;\n+import org.apereo.cas.util.model.TriStateBoolean;\n+\n+public class AuthModulePropertySourceMapper extends PropertySourceMapper implements AuthModuleConf.Mapper {\n+\n+    protected final String syncopeClientAddress;\n+\n+    protected final AuthModuleTO authModuleTO;\n+\n+    public AuthModulePropertySourceMapper(final String syncopeClientAddress, final AuthModuleTO attrRepoTO) {\n+        this.syncopeClientAddress = syncopeClientAddress;\n+        this.authModuleTO = attrRepoTO;\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final StaticAuthModuleConf conf) {\n+        AcceptAuthenticationProperties props = new AcceptAuthenticationProperties();\n+        props.setName(authModuleTO.getKey());\n+        props.setState(AuthenticationHandlerStates.valueOf(authModuleTO.getState().name()));\n+        props.setOrder(authModuleTO.getOrder());\n+        String users = conf.getUsers().entrySet().stream().\n+                map(entry -> entry.getKey() + \"::\" + entry.getValue()).\n+                collect(Collectors.joining(\",\"));\n+        props.setUsers(users);\n+\n+        return prefix(\"cas.authn.accept.\", CasCoreConfigurationUtils.asMap(props));\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final LDAPAuthModuleConf conf) {\n+        LdapAuthenticationProperties props = new LdapAuthenticationProperties();\n+        props.setName(authModuleTO.getKey());\n+        props.setState(AuthenticationHandlerStates.valueOf(authModuleTO.getState().name()));\n+        props.setOrder(authModuleTO.getOrder());\n+        if (StringUtils.isNotBlank(conf.getBindDn()) && StringUtils.isNotBlank(conf.getBindCredential())) {\n+            props.setType(AbstractLdapAuthenticationProperties.AuthenticationTypes.AUTHENTICATED);\n+        }\n+        props.setPrincipalAttributeId(conf.getUserIdAttribute());\n+        props.setPrincipalAttributeList(conf.getPrincipalAttributeList());\n+        fill(props, conf);\n+\n+        return prefix(\"cas.authn.ldap[].\", CasCoreConfigurationUtils.asMap(props));\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final JDBCAuthModuleConf conf) {\n+        QueryJdbcAuthenticationProperties props = new QueryJdbcAuthenticationProperties();\n+        props.setName(authModuleTO.getKey());\n+        props.setState(AuthenticationHandlerStates.valueOf(authModuleTO.getState().name()));\n+        props.setOrder(authModuleTO.getOrder());\n+        props.setSql(conf.getSql());\n+        props.setFieldDisabled(conf.getFieldDisabled());\n+        props.setFieldExpired(conf.getFieldExpired());\n+        props.setFieldPassword(conf.getFieldPassword());\n+        props.setPrincipalAttributeList(conf.getPrincipalAttributeList());\n+        fill(props, conf);\n+\n+        return prefix(\"cas.authn.jdbc.query[].\", CasCoreConfigurationUtils.asMap(props));\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final JaasAuthModuleConf conf) {\n+        JaasAuthenticationProperties props = new JaasAuthenticationProperties();\n+        props.setName(authModuleTO.getKey());\n+        props.setState(AuthenticationHandlerStates.valueOf(authModuleTO.getState().name()));\n+        props.setOrder(authModuleTO.getOrder());\n+        props.setLoginConfigType(conf.getLoginConfigType());\n+        props.setKerberosKdcSystemProperty(conf.getKerberosKdcSystemProperty());\n+        props.setKerberosRealmSystemProperty(conf.getKerberosRealmSystemProperty());\n+        props.setLoginConfigType(conf.getLoginConfigurationFile());\n+        props.setRealm(conf.getRealm());\n+\n+        return prefix(\"cas.authn.jaas[].\", CasCoreConfigurationUtils.asMap(props));\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final OIDCAuthModuleConf conf) {\n+        Pac4jGenericOidcClientProperties props = new Pac4jGenericOidcClientProperties();\n+        props.setId(conf.getId());\n+        props.setEnabled(authModuleTO.getState() == AuthModuleState.ACTIVE);\n+        props.setCustomParams(conf.getCustomParams());\n+        props.setDiscoveryUri(conf.getDiscoveryUri());\n+        props.setMaxClockSkew(conf.getMaxClockSkew());\n+        props.setClientName(authModuleTO.getKey());\n+        props.setPreferredJwsAlgorithm(conf.getPreferredJwsAlgorithm());\n+        props.setResponseMode(conf.getResponseMode());\n+        props.setResponseType(conf.getResponseType());\n+        props.setScope(conf.getScope());\n+        props.setSecret(conf.getSecret());\n+        props.setPrincipalAttributeId(conf.getUserIdAttribute());\n+        Pac4jOidcClientProperties client = new Pac4jOidcClientProperties();\n+        client.setGeneric(props);\n+\n+        return prefix(\"cas.authn.pac4j.oidc[].generic.\", CasCoreConfigurationUtils.asMap(props));\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final SAML2IdPAuthModuleConf conf) {\n+        Pac4jSamlClientProperties props = new Pac4jSamlClientProperties();\n+        props.setClientName(authModuleTO.getKey());\n+        props.setEnabled(authModuleTO.getState() == AuthModuleState.ACTIVE);\n+        props.setAcceptedSkew(conf.getAcceptedSkew());\n+        props.setAssertionConsumerServiceIndex(conf.getAssertionConsumerServiceIndex());\n+        props.setAttributeConsumingServiceIndex(conf.getAttributeConsumingServiceIndex());\n+        props.setAuthnContextClassRef(conf.getAuthnContextClassRefs());\n+        props.setAuthnContextComparisonType(conf.getAuthnContextComparisonType());\n+        props.setBlockedSignatureSigningAlgorithms(conf.getBlockedSignatureSigningAlgorithms());\n+        props.setDestinationBinding(conf.getDestinationBinding().getUri());\n+        props.setIdentityProviderMetadataPath(conf.getIdentityProviderMetadataPath());\n+        props.setKeystoreAlias(conf.getKeystoreAlias());\n+        props.setKeystorePassword(conf.getKeystorePassword());\n+        props.setMaximumAuthenticationLifetime(conf.getMaximumAuthenticationLifetime());\n+        props.setNameIdPolicyFormat(conf.getNameIdPolicyFormat());\n+        props.setPrivateKeyPassword(conf.getPrivateKeyPassword());\n+        props.setProviderName(conf.getProviderName());\n+        props.setServiceProviderEntityId(conf.getServiceProviderEntityId());\n+        props.setSignatureAlgorithms(conf.getSignatureAlgorithms());\n+        props.setSignatureCanonicalizationAlgorithm(conf.getSignatureCanonicalizationAlgorithm());\n+        props.setSignatureReferenceDigestMethods(conf.getSignatureReferenceDigestMethods());\n+        props.setPrincipalAttributeId(conf.getUserIdAttribute());\n+        props.setNameIdPolicyAllowCreate(StringUtils.isBlank(conf.getNameIdPolicyAllowCreate())\n+                ? TriStateBoolean.UNDEFINED\n+                : TriStateBoolean.valueOf(conf.getNameIdPolicyAllowCreate().toUpperCase()));\n+\n+        return prefix(\"cas.authn.pac4j.saml[].\", CasCoreConfigurationUtils.asMap(props));\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final SyncopeAuthModuleConf conf) {\n+        SyncopeAuthenticationProperties props = new SyncopeAuthenticationProperties();\n+        props.setName(authModuleTO.getKey());\n+        props.setState(AuthenticationHandlerStates.valueOf(authModuleTO.getState().name()));\n+        props.setDomain(conf.getDomain());\n+        props.setUrl(StringUtils.substringBefore(syncopeClientAddress, \"/rest\"));\n+\n+        return prefix(\"cas.authn.syncope.\", CasCoreConfigurationUtils.asMap(props));\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final GoogleMfaAuthModuleConf conf) {\n+        GoogleAuthenticatorMultifactorProperties props = new GoogleAuthenticatorMultifactorProperties();\n+        props.setName(authModuleTO.getKey());\n+        props.setOrder(authModuleTO.getOrder());\n+        props.getCore().setIssuer(conf.getIssuer());\n+        props.getCore().setCodeDigits(conf.getCodeDigits());\n+        props.getCore().setLabel(conf.getLabel());\n+        props.getCore().setTimeStepSize(conf.getTimeStepSize());\n+        props.getCore().setWindowSize(conf.getWindowSize());\n+\n+        if (conf.getLdap() != null) {\n+            LdapGoogleAuthenticatorMultifactorProperties ldapProps = new LdapGoogleAuthenticatorMultifactorProperties();\n+            ldapProps.setAccountAttributeName(conf.getLdap().getAccountAttributeName());\n+            fill(ldapProps, conf.getLdap());\n+            props.setLdap(ldapProps);\n+        }\n+\n+        return prefix(\"cas.authn.mfa.gauth.\", CasCoreConfigurationUtils.asMap(props));\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    @Override\n+    public Map<String, Object> map(final DuoMfaAuthModuleConf conf) {\n+        DuoSecurityMultifactorAuthenticationProperties props = new DuoSecurityMultifactorAuthenticationProperties();\n+        props.setName(authModuleTO.getKey());\n+        props.setOrder(authModuleTO.getOrder());\n+        props.setDuoApiHost(conf.getApiHost());\n+        props.setDuoApplicationKey(conf.getApplicationKey());\n+        props.setDuoIntegrationKey(conf.getIntegrationKey());\n+        props.setDuoSecretKey(conf.getSecretKey());\n+\n+        return prefix(\"cas.authn.mfa.duo.\", CasCoreConfigurationUtils.asMap(props));\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final U2FAuthModuleConf conf) {\n+        U2FMultifactorAuthenticationProperties props = new U2FMultifactorAuthenticationProperties();\n+        props.setName(authModuleTO.getKey());\n+        props.setOrder(authModuleTO.getOrder());\n+        props.getCore().setExpireDevices(conf.getExpireDevices());\n+        props.getCore().setExpireDevicesTimeUnit(TimeUnit.valueOf(conf.getExpireDevicesTimeUnit()));\n+        props.getCore().setExpireRegistrations(conf.getExpireRegistrations());\n+        props.getCore().setExpireRegistrationsTimeUnit(TimeUnit.valueOf(conf.getExpireRegistrationsTimeUnit()));\n+\n+        return prefix(\"cas.authn.mfa.u2f.\", CasCoreConfigurationUtils.asMap(props));\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final SimpleMfaAuthModuleConf conf) {\n+        CasSimpleMultifactorAuthenticationProperties props = new CasSimpleMultifactorAuthenticationProperties();\n+        props.setName(authModuleTO.getKey());\n+        props.setOrder(authModuleTO.getOrder());\n+        props.setTokenLength(conf.getTokenLength());\n+        props.setTimeToKillInSeconds(conf.getTimeToKillInSeconds());\n+        props.getMail().setAttributeName(conf.getEmailAttribute());\n+        props.getMail().setFrom(conf.getEmailFrom());\n+        props.getMail().setSubject(conf.getEmailSubject());\n+        props.getMail().setText(conf.getEmailText());\n+\n+        if (StringUtils.isNotBlank(conf.getBypassGroovyScript())) {\n+            try {\n+                props.getBypass().getGroovy().setLocation(ResourceUtils.getResourceFrom(conf.getBypassGroovyScript()));\n+            } catch (Exception e) {\n+                LOG.error(\"Unable to load groovy script for bypass\", e);\n+                throw new IllegalArgumentException(e);\n+            }\n+        }\n+\n+        return prefix(\"cas.authn.mfa.simple.\", CasCoreConfigurationUtils.asMap(props));\n+    }\n+}"},{"sha":"548cc965d9a68d407ee5c8b85d944ba62e68e3ff","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/PropertySourceMapper.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FPropertySourceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FPropertySourceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FPropertySourceMapper.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.bootstrap;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.AbstractJDBCConf;\n+import org.apache.syncope.common.lib.AbstractLDAPConf;\n+import org.apereo.cas.configuration.model.support.ConnectionPoolingProperties;\n+import org.apereo.cas.configuration.model.support.jpa.AbstractJpaProperties;\n+import org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties.LdapConnectionPoolPassivator;\n+import org.apereo.cas.configuration.model.support.ldap.AbstractLdapSearchProperties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class PropertySourceMapper {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(PropertySourceMapper.class);\n+\n+    protected static Map<String, Object> prefix(final String prefix, final Map<String, Object> map) {\n+        return map.entrySet().stream().\n+                map(e -> Pair.of(prefix + e.getKey(), e.getValue())).\n+                collect(Collectors.toMap(Pair::getKey, Pair::getValue));\n+    }\n+\n+    protected void fill(final AbstractLdapSearchProperties props, final AbstractLDAPConf conf) {\n+        props.setLdapUrl(conf.getLdapUrl());\n+        props.setBaseDn(conf.getBaseDn());\n+        props.setSearchFilter(conf.getSearchFilter());\n+        props.setSubtreeSearch(conf.isSubtreeSearch());\n+        props.setBindDn(conf.getBindDn());\n+        props.setBindCredential(conf.getBindCredential());\n+        props.setDisablePooling(conf.isDisablePooling());\n+        props.setMinPoolSize(conf.getMinPoolSize());\n+        props.setMaxPoolSize(conf.getMaxPoolSize());\n+        props.setPoolPassivator(LdapConnectionPoolPassivator.valueOf(conf.getPoolPassivator().name()).name());\n+        props.setValidateOnCheckout(conf.isValidateOnCheckout());\n+        props.setValidatePeriodically(conf.isValidatePeriodically());\n+        props.setValidateTimeout(conf.getValidateTimeout().toString());\n+        props.setValidatePeriod(conf.getValidatePeriod().toString());\n+        props.setFailFast(conf.isFailFast());\n+        props.setIdleTime(conf.getIdleTime().toString());\n+        props.setPrunePeriod(conf.getPrunePeriod().toString());\n+        props.setBlockWaitTime(conf.getBlockWaitTime().toString());\n+        props.setUseStartTls(conf.isUseStartTls());\n+        props.setConnectTimeout(conf.getConnectTimeout().toString());\n+        props.setResponseTimeout(conf.getResponseTimeout().toString());\n+        props.setAllowMultipleDns(conf.isAllowMultipleDns());\n+        props.setAllowMultipleEntries(conf.isAllowMultipleEntries());\n+        props.setFollowReferrals(conf.isFollowReferrals());\n+        props.setBinaryAttributes(conf.getBinaryAttributes());\n+    }\n+\n+    protected void fill(final AbstractJpaProperties props, final AbstractJDBCConf conf) {\n+        props.setDialect(conf.getDialect());\n+        props.setDriverClass(conf.getDriverClass());\n+        props.setUrl(conf.getUrl());\n+        props.setUser(conf.getUser());\n+        props.setPassword(conf.getPassword());\n+        props.setDefaultCatalog(conf.getDefaultCatalog());\n+        props.setDefaultSchema(conf.getDefaultSchema());\n+        props.setHealthQuery(conf.getHealthQuery());\n+        props.setIdleTimeout(conf.getIdleTimeout().toString());\n+        props.setDataSourceName(conf.getDataSourceName());\n+        props.setLeakThreshold(conf.getPoolLeakThreshold());\n+\n+        ConnectionPoolingProperties connProps = new ConnectionPoolingProperties();\n+        connProps.setMinSize(conf.getMinPoolSize());\n+        connProps.setMaxSize(conf.getMaxPoolSize());\n+        connProps.setMaxWait(conf.getMaxPoolWait().toString());\n+        connProps.setSuspension(conf.isPoolSuspension());\n+        connProps.setTimeoutMillis(conf.getPoolTimeoutMillis());\n+        props.setPool(connProps);\n+    }\n+}"},{"sha":"79d2dd60da10a58529b851754e48dd77613ff160","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/WABootstrapConfiguration.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWABootstrapConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWABootstrapConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWABootstrapConfiguration.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -31,6 +31,7 @@ public class WABootstrapConfiguration {\n \n     @Configuration(proxyBeanMethods = false)\n     public static class WAClientConfiguration {\n+\n         @Value(\"${wa.anonymousUser}\")\n         private String anonymousUser;\n \n@@ -48,6 +49,7 @@ public WARestClient waRestClient() {\n \n     @Configuration(proxyBeanMethods = false)\n     public static class PropertySourceConfiguration {\n+\n         @Bean\n         public PropertySourceLocator configPropertySourceLocator(final WARestClient waRestClient) {\n             return new WAPropertySourceLocator(waRestClient);"},{"sha":"3f289ea50cabf0128a9e2d6cb5d7a080aea97cfc","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/WAPropertySourceLocator.java","status":"modified","additions":28,"deletions":432,"changes":460,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWAPropertySourceLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWAPropertySourceLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWAPropertySourceLocator.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -18,51 +18,16 @@\n  */\n package org.apache.syncope.wa.bootstrap;\n \n-import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;\n-import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;\n-import java.util.List;\n+import java.util.HashMap;\n import java.util.Map;\n import java.util.TreeMap;\n-import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.auth.AuthModuleConf;\n-import org.apache.syncope.common.lib.auth.DuoMfaAuthModuleConf;\n-import org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf;\n-import org.apache.syncope.common.lib.auth.JDBCAuthModuleConf;\n-import org.apache.syncope.common.lib.auth.JaasAuthModuleConf;\n-import org.apache.syncope.common.lib.auth.LDAPAuthModuleConf;\n-import org.apache.syncope.common.lib.auth.OIDCAuthModuleConf;\n-import org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf;\n-import org.apache.syncope.common.lib.auth.SimpleMfaAuthModuleConf;\n-import org.apache.syncope.common.lib.auth.StaticAuthModuleConf;\n-import org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf;\n-import org.apache.syncope.common.lib.auth.U2FAuthModuleConf;\n+import org.apache.syncope.common.rest.api.service.AttrRepoService;\n import org.apache.syncope.common.rest.api.service.AuthModuleService;\n import org.apache.syncope.common.rest.api.service.wa.WAConfigService;\n-import org.apereo.cas.configuration.CasConfigurationProperties;\n-import org.apereo.cas.configuration.CasCoreConfigurationUtils;\n-import org.apereo.cas.configuration.model.core.authentication.AuthenticationProperties;\n-import org.apereo.cas.configuration.model.support.generic.AcceptAuthenticationProperties;\n-import org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties;\n-import org.apereo.cas.configuration.model.support.jdbc.JdbcAuthenticationProperties;\n-import org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties;\n-import org.apereo.cas.configuration.model.support.ldap.AbstractLdapAuthenticationProperties;\n-import org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties;\n-import org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties;\n-import org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties;\n-import org.apereo.cas.configuration.model.support.mfa.gauth.GoogleAuthenticatorMultifactorProperties;\n-import org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties;\n-import org.apereo.cas.configuration.model.support.mfa.simple.CasSimpleMultifactorAuthenticationProperties;\n-import org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorAuthenticationProperties;\n-import org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationProperties;\n-import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jGenericOidcClientProperties;\n-import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jOidcClientProperties;\n-import org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties;\n-import org.apereo.cas.configuration.model.support.syncope.SyncopeAuthenticationProperties;\n-import org.apereo.cas.util.ResourceUtils;\n-import org.apereo.cas.util.model.TriStateBoolean;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n@@ -82,381 +47,24 @@ public WAPropertySourceLocator(final WARestClient waRestClient) {\n         this.waRestClient = waRestClient;\n     }\n \n-    protected SimpleFilterProvider getParentCasFilterProvider() {\n-        return new SimpleFilterProvider().\n-                setFailOnUnknownId(false).\n-                addFilter(CasConfigurationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        CasConfigurationProperties.class,\n-                                        CasConfigurationProperties::getAuthn)));\n-    }\n-\n-    protected Map<String, Object> filterCasProperties(\n-            final CasConfigurationProperties casProperties,\n-            final SimpleFilterProvider filters) {\n-\n-        return CasCoreConfigurationUtils.asMap(casProperties.withHolder(), filters);\n-    }\n-\n-    protected Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final SyncopeAuthModuleConf conf,\n-            final String address) {\n-\n-        SyncopeAuthenticationProperties props = new SyncopeAuthenticationProperties();\n-        props.setName(authModule);\n-        props.setDomain(conf.getDomain());\n-        props.setUrl(StringUtils.substringBefore(address, \"/rest\"));\n-\n-        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n-        casProperties.getAuthn().setSyncope(props);\n-\n-        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n-        filterProvider.addFilter(AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                        CasCoreConfigurationUtils.getPropertyName(\n-                                AuthenticationProperties.class,\n-                                AuthenticationProperties::getSyncope)));\n-        return filterCasProperties(casProperties, filterProvider);\n-    }\n-\n-    protected Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final StaticAuthModuleConf conf) {\n-\n-        AcceptAuthenticationProperties props = new AcceptAuthenticationProperties();\n-        props.setName(authModule);\n-        String users = conf.getUsers().entrySet().stream().\n-                map(entry -> entry.getKey() + \"::\" + entry.getValue()).\n-                collect(Collectors.joining(\",\"));\n-        props.setUsers(users);\n-\n-        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n-        casProperties.getAuthn().setAccept(props);\n-\n-        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n-        filterProvider.addFilter(AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                        CasCoreConfigurationUtils.getPropertyName(\n-                                AuthenticationProperties.class,\n-                                AuthenticationProperties::getAccept)));\n-        return filterCasProperties(casProperties, filterProvider);\n-    }\n-\n-    protected Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final LDAPAuthModuleConf conf) {\n-\n-        LdapAuthenticationProperties props = new LdapAuthenticationProperties();\n-        props.setName(authModule);\n-        props.setLdapUrl(conf.getLdapUrl());\n-        props.setBaseDn(conf.getBaseDn());\n-        props.setSearchFilter(conf.getSearchFilter());\n-        props.setBindDn(conf.getBindDn());\n-        props.setBindCredential(conf.getBindCredential());\n-        if (StringUtils.isNotBlank(conf.getBindDn()) && StringUtils.isNotBlank(conf.getBindCredential())) {\n-            props.setType(AbstractLdapAuthenticationProperties.AuthenticationTypes.AUTHENTICATED);\n-        }\n-        props.setPrincipalAttributeId(conf.getUserIdAttribute());\n-        props.setSubtreeSearch(conf.isSubtreeSearch());\n-        props.setPrincipalAttributeList(conf.getPrincipalAttributeList());\n-\n-        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n-        casProperties.getAuthn().getLdap().add(props);\n-\n-        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n-        filterProvider.addFilter(\n-                AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                        CasCoreConfigurationUtils.getPropertyName(\n-                                AuthenticationProperties.class,\n-                                AuthenticationProperties::getLdap)));\n-        return filterCasProperties(casProperties, filterProvider);\n-    }\n-\n-    @SuppressWarnings(\"deprecation\")\n-    protected Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final DuoMfaAuthModuleConf conf) {\n-\n-        DuoSecurityMultifactorAuthenticationProperties props = new DuoSecurityMultifactorAuthenticationProperties();\n-        props.setName(authModule);\n-        props.setDuoApiHost(conf.getApiHost());\n-        props.setDuoApplicationKey(conf.getApplicationKey());\n-        props.setDuoIntegrationKey(conf.getIntegrationKey());\n-        props.setDuoSecretKey(conf.getSecretKey());\n-\n-        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n-        casProperties.getAuthn().getMfa().setDuo(List.of(props));\n-\n-        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n-        filterProvider.\n-                addFilter(AuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        AuthenticationProperties.class,\n-                                        AuthenticationProperties::getMfa))).\n-                addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        MultifactorAuthenticationProperties.class,\n-                                        MultifactorAuthenticationProperties::getDuo)));\n-        return filterCasProperties(casProperties, filterProvider);\n-    }\n-\n-    protected Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final SimpleMfaAuthModuleConf conf) {\n+    protected Map<String, Object> index(final Map<String, Object> map, final Map<String, Integer> prefixes) {\n+        Map<String, Object> indexed = map;\n \n-        CasSimpleMultifactorAuthenticationProperties props =\n-                new CasSimpleMultifactorAuthenticationProperties();\n+        if (!map.isEmpty()) {\n+            String prefix = map.keySet().iterator().next();\n+            if (prefix.contains(\"[]\")) {\n+                prefix = StringUtils.substringBefore(prefix, \"[]\");\n+                Integer index = prefixes.getOrDefault(prefix, 0);\n \n-        props.setName(authModule);\n-        props.setTokenLength(conf.getTokenLength());\n-        props.setTimeToKillInSeconds(conf.getTimeToKillInSeconds());\n-        props.getMail().setAttributeName(conf.getEmailAttribute());\n-        props.getMail().setFrom(conf.getEmailFrom());\n-        props.getMail().setSubject(conf.getEmailSubject());\n-        props.getMail().setText(conf.getEmailText());\n+                indexed = map.entrySet().stream().\n+                        map(e -> Pair.of(e.getKey().replace(\"[]\", \"[\" + index + \"]\"), e.getValue())).\n+                        collect(Collectors.toMap(Pair::getKey, Pair::getValue));\n \n-        if (StringUtils.isNotBlank(conf.getBypassGroovyScript())) {\n-            try {\n-                props.getBypass().getGroovy().setLocation(ResourceUtils.getResourceFrom(conf.getBypassGroovyScript()));\n-            } catch (Exception e) {\n-                LOG.error(\"Unable to load groovy script for bypass\", e);\n-                throw new IllegalArgumentException(e);\n+                prefixes.put(prefix, index + 1);\n             }\n         }\n-        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n-        casProperties.getAuthn().getMfa().setSimple(props);\n \n-        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n-        filterProvider.\n-                addFilter(AuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        AuthenticationProperties.class,\n-                                        AuthenticationProperties::getMfa))).\n-                addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        MultifactorAuthenticationProperties.class,\n-                                        MultifactorAuthenticationProperties::getSimple)));\n-        return filterCasProperties(casProperties, filterProvider);\n-    }\n-\n-    protected Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final GoogleMfaAuthModuleConf conf) {\n-\n-        GoogleAuthenticatorMultifactorProperties props = new GoogleAuthenticatorMultifactorProperties();\n-        props.setName(authModule);\n-        props.getCore().setIssuer(conf.getIssuer());\n-        props.getCore().setCodeDigits(conf.getCodeDigits());\n-        props.getCore().setLabel(conf.getLabel());\n-        props.getCore().setTimeStepSize(conf.getTimeStepSize());\n-        props.getCore().setWindowSize(conf.getWindowSize());\n-\n-        if (conf.getLdap() != null) {\n-            LdapGoogleAuthenticatorMultifactorProperties ldapProps = new LdapGoogleAuthenticatorMultifactorProperties();\n-            ldapProps.setAccountAttributeName(conf.getLdap().getAccountAttributeName());\n-            ldapProps.setBaseDn(conf.getLdap().getBaseDn());\n-            ldapProps.setBindCredential(conf.getLdap().getBindCredential());\n-            ldapProps.setBindDn(conf.getLdap().getBindDn());\n-            ldapProps.setSearchFilter(conf.getLdap().getSearchFilter());\n-            ldapProps.setLdapUrl(conf.getLdap().getUrl());\n-            props.setLdap(ldapProps);\n-        }\n-\n-        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n-        casProperties.getAuthn().getMfa().setGauth(props);\n-\n-        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n-        filterProvider.addFilter(\n-                AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                        CasCoreConfigurationUtils.getPropertyName(\n-                                AuthenticationProperties.class,\n-                                AuthenticationProperties::getMfa))).\n-                addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        MultifactorAuthenticationProperties.class,\n-                                        MultifactorAuthenticationProperties::getGauth)));\n-        return filterCasProperties(casProperties, filterProvider);\n-    }\n-\n-    protected Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final U2FAuthModuleConf conf) {\n-\n-        U2FMultifactorAuthenticationProperties props = new U2FMultifactorAuthenticationProperties();\n-        props.setName(authModule);\n-        props.getCore().setExpireDevices(conf.getExpireDevices());\n-        props.getCore().setExpireDevicesTimeUnit(TimeUnit.valueOf(conf.getExpireDevicesTimeUnit()));\n-        props.getCore().setExpireRegistrations(conf.getExpireRegistrations());\n-        props.getCore().setExpireRegistrationsTimeUnit(TimeUnit.valueOf(conf.getExpireRegistrationsTimeUnit()));\n-\n-        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n-        casProperties.getAuthn().getMfa().setU2f(props);\n-\n-        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n-        filterProvider.\n-                addFilter(AuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        AuthenticationProperties.class,\n-                                        AuthenticationProperties::getMfa))).\n-                addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        MultifactorAuthenticationProperties.class,\n-                                        MultifactorAuthenticationProperties::getU2f)));\n-        return filterCasProperties(casProperties, filterProvider);\n-    }\n-\n-    protected Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final JaasAuthModuleConf conf) {\n-\n-        JaasAuthenticationProperties props = new JaasAuthenticationProperties();\n-        props.setName(authModule);\n-        props.setLoginConfigType(conf.getLoginConfigType());\n-        props.setKerberosKdcSystemProperty(conf.getKerberosKdcSystemProperty());\n-        props.setKerberosRealmSystemProperty(conf.getKerberosRealmSystemProperty());\n-        props.setLoginConfigType(conf.getLoginConfigurationFile());\n-        props.setRealm(conf.getRealm());\n-\n-        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n-        casProperties.getAuthn().getJaas().add(props);\n-\n-        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n-        filterProvider.addFilter(AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                        CasCoreConfigurationUtils.getPropertyName(\n-                                AuthenticationProperties.class,\n-                                AuthenticationProperties::getJaas)));\n-        return filterCasProperties(casProperties, filterProvider);\n-    }\n-\n-    protected Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final JDBCAuthModuleConf conf) {\n-\n-        QueryJdbcAuthenticationProperties props = new QueryJdbcAuthenticationProperties();\n-        props.setName(authModule);\n-        props.setSql(conf.getSql());\n-        props.setFieldDisabled(conf.getFieldDisabled());\n-        props.setFieldExpired(conf.getFieldExpired());\n-        props.setFieldPassword(conf.getFieldPassword());\n-        props.setDialect(conf.getDialect());\n-        props.setDriverClass(conf.getDriverClass());\n-        props.setPassword(conf.getPassword());\n-        props.setUrl(conf.getUrl());\n-        props.setUser(conf.getUser());\n-        props.setPrincipalAttributeList(conf.getPrincipalAttributeList());\n-\n-        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n-        casProperties.getAuthn().getJdbc().getQuery().add(props);\n-\n-        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n-        filterProvider.\n-                addFilter(AuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        AuthenticationProperties.class,\n-                                        AuthenticationProperties::getJdbc))).\n-                addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        JdbcAuthenticationProperties.class,\n-                                        JdbcAuthenticationProperties::getQuery)));\n-        return filterCasProperties(casProperties, filterProvider);\n-    }\n-\n-    protected Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final OIDCAuthModuleConf conf) {\n-\n-        Pac4jGenericOidcClientProperties props = new Pac4jGenericOidcClientProperties();\n-        props.setId(conf.getId());\n-        props.setCustomParams(conf.getCustomParams());\n-        props.setDiscoveryUri(conf.getDiscoveryUri());\n-        props.setMaxClockSkew(conf.getMaxClockSkew());\n-        props.setClientName(authModule);\n-        props.setPreferredJwsAlgorithm(conf.getPreferredJwsAlgorithm());\n-        props.setResponseMode(conf.getResponseMode());\n-        props.setResponseType(conf.getResponseType());\n-        props.setScope(conf.getScope());\n-        props.setSecret(conf.getSecret());\n-        props.setPrincipalAttributeId(conf.getUserIdAttribute());\n-        Pac4jOidcClientProperties client = new Pac4jOidcClientProperties();\n-        client.setGeneric(props);\n-\n-        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n-        casProperties.getAuthn().getPac4j().getOidc().add(client);\n-\n-        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n-        filterProvider.\n-                addFilter(AuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        AuthenticationProperties.class,\n-                                        AuthenticationProperties::getPac4j))).\n-                addFilter(Pac4jDelegatedAuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        Pac4jDelegatedAuthenticationProperties.class,\n-                                        Pac4jDelegatedAuthenticationProperties::getOidc)));\n-        return filterCasProperties(casProperties, filterProvider);\n-    }\n-\n-    protected Map<String, Object> mapAuthModule(\n-            final String authModule,\n-            final SAML2IdPAuthModuleConf conf) {\n-\n-        Pac4jSamlClientProperties props = new Pac4jSamlClientProperties();\n-        props.setClientName(authModule);\n-        props.setAcceptedSkew(conf.getAcceptedSkew());\n-        props.setAssertionConsumerServiceIndex(conf.getAssertionConsumerServiceIndex());\n-        props.setAttributeConsumingServiceIndex(conf.getAttributeConsumingServiceIndex());\n-        props.setAuthnContextClassRef(conf.getAuthnContextClassRefs());\n-        props.setAuthnContextComparisonType(conf.getAuthnContextComparisonType());\n-        props.setBlockedSignatureSigningAlgorithms(conf.getBlockedSignatureSigningAlgorithms());\n-        props.setDestinationBinding(conf.getDestinationBinding().getUri());\n-        props.setIdentityProviderMetadataPath(conf.getIdentityProviderMetadataPath());\n-        props.setKeystoreAlias(conf.getKeystoreAlias());\n-        props.setKeystorePassword(conf.getKeystorePassword());\n-        props.setMaximumAuthenticationLifetime(conf.getMaximumAuthenticationLifetime());\n-        props.setNameIdPolicyFormat(conf.getNameIdPolicyFormat());\n-        props.setPrivateKeyPassword(conf.getPrivateKeyPassword());\n-        props.setProviderName(conf.getProviderName());\n-        props.setServiceProviderEntityId(conf.getServiceProviderEntityId());\n-        props.setSignatureAlgorithms(conf.getSignatureAlgorithms());\n-        props.setSignatureCanonicalizationAlgorithm(conf.getSignatureCanonicalizationAlgorithm());\n-        props.setSignatureReferenceDigestMethods(conf.getSignatureReferenceDigestMethods());\n-        props.setPrincipalAttributeId(conf.getUserIdAttribute());\n-        props.setNameIdPolicyAllowCreate(StringUtils.isBlank(conf.getNameIdPolicyAllowCreate())\n-                ? TriStateBoolean.UNDEFINED\n-                : TriStateBoolean.valueOf(conf.getNameIdPolicyAllowCreate().toUpperCase()));\n-\n-        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n-        casProperties.getAuthn().getPac4j().getSaml().add(props);\n-\n-        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n-        filterProvider.\n-                addFilter(AuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        AuthenticationProperties.class,\n-                                        AuthenticationProperties::getPac4j))).\n-                addFilter(Pac4jDelegatedAuthenticationProperties.class.getSimpleName(),\n-                        SimpleBeanPropertyFilter.filterOutAllExcept(\n-                                CasCoreConfigurationUtils.getPropertyName(\n-                                        Pac4jDelegatedAuthenticationProperties.class,\n-                                        Pac4jDelegatedAuthenticationProperties::getSaml)));\n-        return filterCasProperties(casProperties, filterProvider);\n+        return indexed;\n     }\n \n     @Override\n@@ -469,39 +77,27 @@ public PropertySource<?> locate(final Environment environment) {\n \n         LOG.info(\"Bootstrapping WA configuration\");\n         Map<String, Object> properties = new TreeMap<>();\n+        Map<String, Integer> prefixes = new HashMap<>();\n \n         syncopeClient.getService(AuthModuleService.class).list().forEach(authModuleTO -> {\n-            AuthModuleConf authConf = authModuleTO.getConf();\n             LOG.debug(\"Mapping auth module {} \", authModuleTO.getKey());\n \n-            if (authConf instanceof LDAPAuthModuleConf) {\n-                properties.putAll(mapAuthModule(authModuleTO.getKey(), (LDAPAuthModuleConf) authConf));\n-            } else if (authConf instanceof StaticAuthModuleConf) {\n-                properties.putAll(mapAuthModule(authModuleTO.getKey(), (StaticAuthModuleConf) authConf));\n-            } else if (authConf instanceof SyncopeAuthModuleConf) {\n-                properties.putAll(mapAuthModule(authModuleTO.getKey(),\n-                        (SyncopeAuthModuleConf) authConf, syncopeClient.getAddress()));\n-            } else if (authConf instanceof GoogleMfaAuthModuleConf) {\n-                properties.putAll(mapAuthModule(authModuleTO.getKey(), (GoogleMfaAuthModuleConf) authConf));\n-            } else if (authConf instanceof SimpleMfaAuthModuleConf) {\n-                properties.putAll(mapAuthModule(authModuleTO.getKey(), (SimpleMfaAuthModuleConf) authConf));\n-            } else if (authConf instanceof DuoMfaAuthModuleConf) {\n-                properties.putAll(mapAuthModule(authModuleTO.getKey(), (DuoMfaAuthModuleConf) authConf));\n-            } else if (authConf instanceof JaasAuthModuleConf) {\n-                properties.putAll(mapAuthModule(authModuleTO.getKey(), (JaasAuthModuleConf) authConf));\n-            } else if (authConf instanceof JDBCAuthModuleConf) {\n-                properties.putAll(mapAuthModule(authModuleTO.getKey(), (JDBCAuthModuleConf) authConf));\n-            } else if (authConf instanceof OIDCAuthModuleConf) {\n-                properties.putAll(mapAuthModule(authModuleTO.getKey(), (OIDCAuthModuleConf) authConf));\n-            } else if (authConf instanceof SAML2IdPAuthModuleConf) {\n-                properties.putAll(mapAuthModule(authModuleTO.getKey(), (SAML2IdPAuthModuleConf) authConf));\n-            } else if (authConf instanceof U2FAuthModuleConf) {\n-                properties.putAll(mapAuthModule(authModuleTO.getKey(), (U2FAuthModuleConf) authConf));\n-            }\n+            Map<String, Object> map = authModuleTO.getConf().map(\n+                    new AuthModulePropertySourceMapper(syncopeClient.getAddress(), authModuleTO));\n+            properties.putAll(index(map, prefixes));\n+        });\n+\n+        syncopeClient.getService(AttrRepoService.class).list().forEach(attrRepoTO -> {\n+            LOG.debug(\"Mapping attr repo {} \", attrRepoTO.getKey());\n+\n+            Map<String, Object> map = attrRepoTO.getConf().map(\n+                    new AttrRepoPropertySourceMapper(syncopeClient.getAddress(), attrRepoTO));\n+            properties.putAll(index(map, prefixes));\n         });\n \n         syncopeClient.getService(WAConfigService.class).list().forEach(attr -> properties.put(\n                 attr.getSchema(), attr.getValues().stream().collect(Collectors.joining(\",\"))));\n+\n         LOG.debug(\"Collected WA properties: {}\", properties);\n         return new MapPropertySource(getClass().getName(), properties);\n     }"},{"sha":"43862b245d0f470c72db5de84c0569866ead77fc","filename":"wa/starter/pom.xml","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fpom.xml?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -138,6 +138,10 @@ under the License.\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-support-actions</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-support-jpa-util</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-support-ldap</artifactId>\n@@ -428,6 +432,11 @@ under the License.\n           <artifactId>syncope-common-keymaster-client-self</artifactId>\n           <version>${project.version}</version>\n         </dependency>\n+\n+        <dependency>\n+          <groupId>com.h2database</groupId>\n+          <artifactId>h2</artifactId>\n+        </dependency>        \n       </dependencies>\n \n       <build>\n@@ -439,6 +448,7 @@ under the License.\n             <artifactId>spring-boot-maven-plugin</artifactId>\n             <configuration>\n               <jvmArguments>\n+                -Djavax.net.ssl.trustStore=${basedir}/../../fit/wa-reference/src/test/resources/keystore.jks -Djavax.net.ssl.trustStorePassword=password\n                 -Xdebug -Xrunjdwp:transport=dt_socket,address=8001,server=y,suspend=n\n               </jvmArguments>\n               <profiles>"},{"sha":"8517c46c5e933b2e418e016cc43e775658061228","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AttrReleaseMapper.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapper.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -18,11 +18,12 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n+import java.util.Map;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n \n @FunctionalInterface\n public interface AttrReleaseMapper {\n \n-    RegisteredServiceAttributeReleasePolicy build(AttrReleasePolicyTO policy);\n+    RegisteredServiceAttributeReleasePolicy build(AttrReleasePolicyTO policy, Map<String, Object> releaseAttrs);\n }"},{"sha":"e1146ef929fdafd03ab6cb71cecb7340aa1320e5","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/CASSPClientAppTOMapper.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPClientAppTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPClientAppTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPClientAppTOMapper.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -26,12 +26,14 @@\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n import org.apereo.cas.services.RegisteredServiceMultifactorPolicy;\n+import org.springframework.context.ConfigurableApplicationContext;\n \n @ClientAppMapFor(clientAppClass = CASSPClientAppTO.class)\n public class CASSPClientAppTOMapper extends AbstractClientAppMapper {\n \n     @Override\n     public RegisteredService map(\n+            final ConfigurableApplicationContext ctx,\n             final WAClientApp clientApp,\n             final RegisteredServiceAuthenticationPolicy authPolicy,\n             final RegisteredServiceMultifactorPolicy mfaPolicy,"},{"sha":"dfd9c798d45c9024eca6d5da12cb931e84790a72","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/ClientAppMapper.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -24,11 +24,13 @@\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n import org.apereo.cas.services.RegisteredServiceMultifactorPolicy;\n+import org.springframework.context.ConfigurableApplicationContext;\n \n @FunctionalInterface\n public interface ClientAppMapper {\n \n     RegisteredService map(\n+            ConfigurableApplicationContext ctx,\n             WAClientApp clientApp,\n             RegisteredServiceAuthenticationPolicy authPolicy,\n             RegisteredServiceMultifactorPolicy mfaPolicy,"},{"sha":"ae508d6e96de6246d5259215d3dd880704423f94","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultAttrReleaseMapper.java","status":"modified","additions":57,"deletions":10,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAttrReleaseMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAttrReleaseMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAttrReleaseMapper.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -19,35 +19,82 @@\n package org.apache.syncope.wa.starter.mapping;\n \n import java.util.HashSet;\n+import java.util.Map;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf;\n+import org.apereo.cas.authentication.principal.DefaultPrincipalAttributesRepository;\n+import org.apereo.cas.authentication.principal.cache.AbstractPrincipalAttributesRepository;\n+import org.apereo.cas.authentication.principal.cache.CachingPrincipalAttributesRepository;\n+import org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesCoreProperties;\n+import org.apereo.cas.services.AbstractRegisteredServiceAttributeReleasePolicy;\n+import org.apereo.cas.services.ChainingAttributeReleasePolicy;\n import org.apereo.cas.services.DenyAllAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy;\n+import org.apereo.cas.services.ReturnMappedAttributeReleasePolicy;\n import org.apereo.cas.services.consent.DefaultRegisteredServiceConsentPolicy;\n import org.apereo.cas.util.model.TriStateBoolean;\n \n @AttrReleaseMapFor(attrReleasePolicyConfClass = DefaultAttrReleasePolicyConf.class)\n public class DefaultAttrReleaseMapper implements AttrReleaseMapper {\n \n     @Override\n-    public RegisteredServiceAttributeReleasePolicy build(final AttrReleasePolicyTO policy) {\n-        DefaultAttrReleasePolicyConf aarpc = (DefaultAttrReleasePolicyConf) policy.getConf();\n+    public RegisteredServiceAttributeReleasePolicy build(\n+            final AttrReleasePolicyTO policy, final Map<String, Object> releaseAttrs) {\n \n-        if (aarpc.getAllowedAttrs().isEmpty()) {\n-            return new DenyAllAttributeReleasePolicy();\n+        DefaultAttrReleasePolicyConf conf = (DefaultAttrReleasePolicyConf) policy.getConf();\n+\n+        ReturnMappedAttributeReleasePolicy returnMapped = null;\n+        if (!releaseAttrs.isEmpty()) {\n+            returnMapped = new ReturnMappedAttributeReleasePolicy(releaseAttrs);\n+        }\n+\n+        ReturnAllowedAttributeReleasePolicy returnAllowed = null;\n+        if (!conf.getAllowedAttrs().isEmpty()) {\n+            returnAllowed = new ReturnAllowedAttributeReleasePolicy();\n+        }\n+\n+        AbstractRegisteredServiceAttributeReleasePolicy attributeReleasePolicy;\n+        if (returnMapped == null && returnAllowed == null) {\n+            attributeReleasePolicy = new DenyAllAttributeReleasePolicy();\n+        } else if (returnMapped != null) {\n+            attributeReleasePolicy = returnMapped;\n+        } else {\n+            attributeReleasePolicy = returnAllowed;\n         }\n \n         DefaultRegisteredServiceConsentPolicy consentPolicy = new DefaultRegisteredServiceConsentPolicy(\n-                new HashSet<>(aarpc.getExcludedAttrs()), new HashSet<>(aarpc.getIncludeOnlyAttrs()));\n+                new HashSet<>(conf.getExcludedAttrs()), new HashSet<>(conf.getIncludeOnlyAttrs()));\n         consentPolicy.setOrder(policy.getOrder());\n-        consentPolicy.setStatus(\n-                policy.getStatus() == null ? TriStateBoolean.UNDEFINED\n+        consentPolicy.setStatus(policy.getStatus() == null\n+                ? TriStateBoolean.UNDEFINED\n                 : TriStateBoolean.fromBoolean(policy.getStatus()));\n-\n-        ReturnAllowedAttributeReleasePolicy attributeReleasePolicy = new ReturnAllowedAttributeReleasePolicy();\n-        attributeReleasePolicy.setAllowedAttributes((aarpc.getAllowedAttrs()));\n         attributeReleasePolicy.setConsentPolicy(consentPolicy);\n+\n+        if (conf.getPrincipalIdAttr() != null) {\n+            attributeReleasePolicy.setPrincipalIdAttribute(conf.getPrincipalIdAttr());\n+        }\n+\n+        if (conf.getPrincipalAttrRepoConf() != null && !conf.getPrincipalAttrRepoConf().getAttrRepos().isEmpty()) {\n+            DefaultAttrReleasePolicyConf.PrincipalAttrRepoConf parc = conf.getPrincipalAttrRepoConf();\n+\n+            AbstractPrincipalAttributesRepository par = parc.getExpiration() > 0\n+                    ? new CachingPrincipalAttributesRepository(parc.getTimeUnit().name(), parc.getExpiration())\n+                    : new DefaultPrincipalAttributesRepository();\n+\n+            par.setMergingStrategy(\n+                    PrincipalAttributesCoreProperties.MergingStrategyTypes.valueOf(parc.getMergingStrategy().name()));\n+            par.setIgnoreResolvedAttributes(par.isIgnoreResolvedAttributes());\n+            par.setAttributeRepositoryIds(new HashSet<>(parc.getAttrRepos()));\n+            attributeReleasePolicy.setPrincipalAttributesRepository(par);\n+        }\n+\n+        if (returnMapped != null && returnAllowed != null) {\n+            ChainingAttributeReleasePolicy chain = new ChainingAttributeReleasePolicy();\n+            chain.addPolicies(returnMapped, returnAllowed);\n+            return chain;\n+        }\n+\n         return attributeReleasePolicy;\n     }\n }"},{"sha":"8a03a25ba63a728f21d8410cbf6c1e1853d21010","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/OIDCRPClientAppTOMapper.java","status":"modified","additions":19,"deletions":30,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPClientAppTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPClientAppTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPClientAppTOMapper.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -41,21 +41,16 @@\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n import org.apereo.cas.services.RegisteredServiceMultifactorPolicy;\n-import org.apereo.cas.services.ReturnMappedAttributeReleasePolicy;\n-import org.apereo.cas.util.spring.ApplicationContextProvider;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ConfigurableApplicationContext;\n \n @ClientAppMapFor(clientAppClass = OIDCRPClientAppTO.class)\n public class OIDCRPClientAppTOMapper extends AbstractClientAppMapper {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(OIDCRPClientAppTOMapper.class);\n-\n     private static final String CUSTOM_SCOPE = \"syncope\";\n \n     @Override\n     public RegisteredService map(\n+            final ConfigurableApplicationContext ctx,\n             final WAClientApp clientApp,\n             final RegisteredServiceAuthenticationPolicy authPolicy,\n             final RegisteredServiceMultifactorPolicy mfaPolicy,\n@@ -85,13 +80,12 @@ public RegisteredService map(\n         }\n         service.setLogoutUrl(rp.getLogoutUri());\n \n-        setPolicies(service, authPolicy, mfaPolicy, accessStrategy, attributeReleasePolicy);\n-        if (attributeReleasePolicy != null) {\n-            ChainingAttributeReleasePolicy chain = new ChainingAttributeReleasePolicy();\n-            if (attributeReleasePolicy instanceof ReturnMappedAttributeReleasePolicy) {\n-                chain.addPolicy(attributeReleasePolicy);\n-            } else {\n-                chain.addPolicy(new ReturnMappedAttributeReleasePolicy(clientApp.getReleaseAttrs()));\n+        ChainingAttributeReleasePolicy chain;\n+        if (attributeReleasePolicy instanceof ChainingAttributeReleasePolicy) {\n+            chain = (ChainingAttributeReleasePolicy) attributeReleasePolicy;\n+        } else {\n+            chain = new ChainingAttributeReleasePolicy();\n+            if (attributeReleasePolicy != null) {\n                 chain.addPolicy(attributeReleasePolicy);\n             }\n \n@@ -107,26 +101,21 @@ public RegisteredService map(\n             customClaims.removeAll(OidcAddressScopeAttributeReleasePolicy.ALLOWED_CLAIMS);\n             customClaims.removeAll(OidcPhoneScopeAttributeReleasePolicy.ALLOWED_CLAIMS);\n             if (!customClaims.isEmpty()) {\n-                ApplicationContext ctx = ApplicationContextProvider.getApplicationContext();\n-                if (ctx == null) {\n-                    LOG.warn(\"Could not locate the application context to add custom claims {}\", customClaims);\n-                } else {\n-                    CasConfigurationProperties properties = ctx.getBean(CasConfigurationProperties.class);\n-                    List<String> supportedClaims = properties.getAuthn().getOidc().getDiscovery().getClaims();\n-                    if (!supportedClaims.containsAll(customClaims)) {\n-                        properties.getAuthn().getOidc().getDiscovery().setClaims(\n-                                Stream.concat(supportedClaims.stream(), customClaims.stream()).\n-                                        distinct().collect(Collectors.toList()));\n-                    }\n-\n-                    chain.addPolicy(new OidcCustomScopeAttributeReleasePolicy(\n-                            CUSTOM_SCOPE, customClaims.stream().collect(Collectors.toList())));\n+                CasConfigurationProperties properties = ctx.getBean(CasConfigurationProperties.class);\n+                List<String> supportedClaims = properties.getAuthn().getOidc().getDiscovery().getClaims();\n+                if (!supportedClaims.containsAll(customClaims)) {\n+                    properties.getAuthn().getOidc().getDiscovery().setClaims(\n+                            Stream.concat(supportedClaims.stream(), customClaims.stream()).\n+                                    distinct().collect(Collectors.toList()));\n                 }\n-            }\n \n-            service.setAttributeReleasePolicy(chain);\n+                chain.addPolicy(new OidcCustomScopeAttributeReleasePolicy(\n+                        CUSTOM_SCOPE, customClaims.stream().collect(Collectors.toList())));\n+            }\n         }\n \n+        setPolicies(service, authPolicy, mfaPolicy, accessStrategy, chain);\n+\n         return service;\n     }\n }"},{"sha":"ef550ad3774dc302c31248c9bb007cf7ea837a41","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/RegisteredServiceMapper.java","status":"modified","additions":18,"deletions":15,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -21,14 +21,15 @@\n import java.util.Map;\n import java.util.Optional;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n+import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apereo.cas.authentication.AuthenticationEventExecutionPlan;\n import org.apereo.cas.services.RegisteredService;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n import org.apereo.cas.services.RegisteredServiceMultifactorPolicy;\n-import org.apereo.cas.services.ReturnMappedAttributeReleasePolicy;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.ObjectProvider;\n@@ -96,21 +97,23 @@ public RegisteredService toRegisteredService(final WAClientApp clientApp) {\n             AccessMapper accessPolicyConfMapper = accessPolicyConfMappers.get(\n                     clientApp.getAccessPolicy().getConf().getClass().getName());\n             accessStrategy = Optional.ofNullable(accessPolicyConfMapper).\n-                    map(mapper -> mapper.build(clientApp.getAccessPolicy())).orElse(null);\n+                    map(mapper -> mapper.build(clientApp.getAccessPolicy())).\n+                    orElse(null);\n         }\n \n-        RegisteredServiceAttributeReleasePolicy attributeReleasePolicy = null;\n-        if (!clientApp.getReleaseAttrs().isEmpty()) {\n-            if (clientApp.getAttrReleasePolicy() == null) {\n-                attributeReleasePolicy = new ReturnMappedAttributeReleasePolicy(clientApp.getReleaseAttrs());\n-            } else {\n-                AttrReleaseMapper attrReleasePolicyConfMapper = attrReleasePolicyConfMappers.get(\n-                        clientApp.getAttrReleasePolicy().getConf().getClass().getName());\n-                attributeReleasePolicy = Optional.ofNullable(attrReleasePolicyConfMapper).\n-                        map(mapper -> mapper.build(clientApp.getAttrReleasePolicy())).orElse(null);\n-            }\n-        }\n-\n-        return clientAppMapper.map(clientApp, authPolicy, mfaPolicy, accessStrategy, attributeReleasePolicy);\n+        AttrReleasePolicyTO attrReleasePolicyTO = Optional.ofNullable(clientApp.getAttrReleasePolicy()).\n+                orElseGet(() -> {\n+                    AttrReleasePolicyTO arpTO = new AttrReleasePolicyTO();\n+                    arpTO.setConf(new DefaultAttrReleasePolicyConf());\n+                    return arpTO;\n+                });\n+        AttrReleaseMapper attrReleasePolicyConfMapper = attrReleasePolicyConfMappers.get(\n+                attrReleasePolicyTO.getConf().getClass().getName());\n+        RegisteredServiceAttributeReleasePolicy attributeReleasePolicy =\n+                Optional.ofNullable(attrReleasePolicyConfMapper).\n+                        map(mapper -> mapper.build(attrReleasePolicyTO, clientApp.getReleaseAttrs())).\n+                        orElse(null);\n+\n+        return clientAppMapper.map(ctx, clientApp, authPolicy, mfaPolicy, accessStrategy, attributeReleasePolicy);\n     }\n }"},{"sha":"d90dd0d51047465957596d111e6a7f7b004a1b75","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/SAML2SPClientAppTOMapper.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPClientAppTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPClientAppTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPClientAppTOMapper.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -29,12 +29,14 @@\n import org.apereo.cas.services.RegisteredServiceMultifactorPolicy;\n import org.apereo.cas.support.saml.services.SamlRegisteredService;\n import org.apereo.cas.util.model.TriStateBoolean;\n+import org.springframework.context.ConfigurableApplicationContext;\n \n @ClientAppMapFor(clientAppClass = SAML2SPClientAppTO.class)\n public class SAML2SPClientAppTOMapper extends AbstractClientAppMapper {\n \n     @Override\n     public RegisteredService map(\n+            final ConfigurableApplicationContext ctx,\n             final WAClientApp clientApp,\n             final RegisteredServiceAuthenticationPolicy authPolicy,\n             final RegisteredServiceMultifactorPolicy mfaPolicy,"},{"sha":"f994a60f5ec37646d8bd215440bf53bb15f3e96a","filename":"wa/starter/src/main/resources/wa.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -37,7 +37,7 @@ spring.web.resources.static-locations=classpath:/thymeleaf/static,classpath:/syn\n \n cas.monitor.endpoints.endpoint.defaults.access=AUTHENTICATED\n management.endpoints.enabled-by-default=true\n-management.endpoints.web.exposure.include=info,health,env,loggers,ssoSessions,registeredServices,refresh,authenticationHandlers,authenticationPolicies\n+management.endpoints.web.exposure.include=info,health,env,loggers,ssoSessions,registeredServices,refresh,authenticationHandlers,authenticationPolicies,resolveAttributes\n management.endpoint.health.show-details=ALWAYS\n spring.cloud.discovery.client.health-indicator.enabled=false\n "},{"sha":"5bc78c0f74ba272dec9701738eef9f70116b3445","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/WAServiceRegistryTest.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FWAServiceRegistryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FWAServiceRegistryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FWAServiceRegistryTest.java?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -44,6 +44,7 @@\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.cas.services.AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria;\n import org.apereo.cas.services.ChainingAttributeReleasePolicy;\n+import org.apereo.cas.services.DenyAllAttributeReleasePolicy;\n import org.apereo.cas.services.OidcRegisteredService;\n import org.apereo.cas.services.RegisteredService;\n import org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy;\n@@ -117,6 +118,8 @@ private static void addAttributes(\n         if (withAttrReleasePolicy) {\n             DefaultAttrReleasePolicyConf attrReleasePolicyConf = new DefaultAttrReleasePolicyConf();\n             attrReleasePolicyConf.getAllowedAttrs().add(\"cn\");\n+            attrReleasePolicyConf.getPrincipalAttrRepoConf().getAttrRepos().add(\"TestAttrRepo\");\n+\n             AttrReleasePolicyTO attrReleasePolicy = new AttrReleasePolicyTO();\n             attrReleasePolicy.setConf(attrReleasePolicyConf);\n             waClientApp.setAttrReleasePolicy(attrReleasePolicy);\n@@ -200,6 +203,6 @@ public void addClientApp() {\n         assertEquals(5, load.size());\n \n         found = servicesManager.findServiceBy(clientAppId);\n-        assertTrue(found.getAttributeReleasePolicy() instanceof ReturnAllowedAttributeReleasePolicy);\n+        assertTrue(found.getAttributeReleasePolicy() instanceof DenyAllAttributeReleasePolicy);\n     }\n }"},{"sha":"bad535ac691413a6bb673e40ace8a991c5fc725f","filename":"wa/starter/src/test/resources/debug/wa-debug.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fwa-debug.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7e7c1b4cee0ca69866989f47797d5cec6232287/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fwa-debug.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fwa-debug.properties?ref=c7e7c1b4cee0ca69866989f47797d5cec6232287","patch":"@@ -16,7 +16,8 @@\n # under the License.\n spring.main.allow-circular-references=true\n \n-keymaster.address=http://localhost:9080/syncope/rest/keymaster\n+#keymaster.address=http://localhost:9080/syncope/rest/keymaster\n+keymaster.address=https://localhost:9443/syncope/rest/keymaster\n keymaster.username=${anonymousUser}\n keymaster.password=${anonymousKey}\n "}]}