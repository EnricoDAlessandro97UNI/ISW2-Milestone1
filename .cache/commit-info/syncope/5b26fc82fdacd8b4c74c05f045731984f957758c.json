{"sha":"5b26fc82fdacd8b4c74c05f045731984f957758c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjViMjZmYzgyZmRhY2Q4YjRjNzRjMDVmMDQ1NzMxOTg0Zjk1Nzc1OGM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-01-16T07:11:23Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-01-16T07:12:55Z"},"message":"Small cleanup after Flowable upgrade","tree":{"sha":"ed639c40322b78e6ad72db5e9373e32d04547f0e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ed639c40322b78e6ad72db5e9373e32d04547f0e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5b26fc82fdacd8b4c74c05f045731984f957758c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5b26fc82fdacd8b4c74c05f045731984f957758c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5b26fc82fdacd8b4c74c05f045731984f957758c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5b26fc82fdacd8b4c74c05f045731984f957758c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0ecf9b0a253c154b693c7a8a17dce5de78e4de71","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0ecf9b0a253c154b693c7a8a17dce5de78e4de71","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0ecf9b0a253c154b693c7a8a17dce5de78e4de71"}],"stats":{"total":33,"additions":12,"deletions":21},"files":[{"sha":"b945463ac636e46dc147adfa59f884123a0791b8","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b26fc82fdacd8b4c74c05f045731984f957758c/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b26fc82fdacd8b4c74c05f045731984f957758c/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java?ref=5b26fc82fdacd8b4c74c05f045731984f957758c","patch":"@@ -36,7 +36,6 @@\n import org.flowable.engine.repository.ProcessDefinition;\n import org.flowable.engine.runtime.ProcessInstance;\n import org.flowable.task.api.Task;\n-import org.flowable.task.api.TaskQuery;\n import org.identityconnectors.common.security.EncryptorFactory;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -129,26 +128,19 @@ public static Set<String> getPerformedTasks(\n     }\n \n     public static void updateStatus(final DomainProcessEngine engine, final String procInstId, final User user) {\n-        List<Task> tasks = createTaskQuery(engine, false).processInstanceId(procInstId).list();\n+        List<Task> tasks = engine.getTaskService().createTaskQuery().processInstanceId(procInstId).list();\n         if (tasks.isEmpty() || tasks.size() > 1) {\n             LOG.warn(\"While setting user status: unexpected task number ({})\", tasks.size());\n         } else {\n             user.setStatus(tasks.get(0).getTaskDefinitionKey());\n         }\n     }\n \n-    public static TaskQuery createTaskQuery(final DomainProcessEngine engine, final boolean onlyFormTasks) {\n-        TaskQuery taskQuery = engine.getTaskService().createTaskQuery();\n-        if (onlyFormTasks) {\n-            taskQuery.taskWithFormKey();\n-        }\n-        return taskQuery;\n-    }\n-\n     public static String getFormTask(final DomainProcessEngine engine, final String procInstId) {\n         String result = null;\n \n-        List<Task> tasks = createTaskQuery(engine, true).processInstanceId(procInstId).list();\n+        List<Task> tasks = engine.getTaskService().createTaskQuery().\n+                taskWithFormKey().processInstanceId(procInstId).list();\n         if (tasks.isEmpty() || tasks.size() > 1) {\n             LOG.debug(\"While checking if form task: unexpected task number ({})\", tasks.size());\n         } else {"},{"sha":"228bc5edc26896f3e847384933c6657a2d4c5c44","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b26fc82fdacd8b4c74c05f045731984f957758c/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b26fc82fdacd8b4c74c05f045731984f957758c/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java?ref=5b26fc82fdacd8b4c74c05f045731984f957758c","patch":"@@ -128,7 +128,7 @@ protected UserRequest getUserRequest(final ProcessInstance procInst) {\n         userRequest.setStartTime(procInst.getStartTime());\n         userRequest.setUsername(userDAO.find(split.getRight()).getUsername());\n         userRequest.setExecutionId(procInst.getId());\n-        userRequest.setActivityId(FlowableRuntimeUtils.createTaskQuery(engine, false).\n+        userRequest.setActivityId(engine.getTaskService().createTaskQuery().\n                 processInstanceId(procInst.getProcessInstanceId()).singleResult().getTaskDefinitionKey());\n         return userRequest;\n     }\n@@ -461,7 +461,7 @@ public Pair<Integer, List<UserRequestForm>> getForms(\n \n         Pair<Integer, List<UserRequestForm>> forms;\n \n-        TaskQuery query = FlowableRuntimeUtils.createTaskQuery(engine, true);\n+        TaskQuery query = engine.getTaskService().createTaskQuery().taskWithFormKey();\n         if (userKey != null) {\n             query.processInstanceBusinessKeyLike(FlowableRuntimeUtils.getProcBusinessKey(\"%\", userKey));\n         }\n@@ -539,7 +539,7 @@ protected Pair<Integer, List<UserRequestForm>> getForms(\n     protected Pair<Task, TaskFormData> parseTask(final String taskId) {\n         Task task;\n         try {\n-            task = FlowableRuntimeUtils.createTaskQuery(engine, true).taskId(taskId).singleResult();\n+            task = engine.getTaskService().createTaskQuery().taskWithFormKey().taskId(taskId).singleResult();\n             if (task == null) {\n                 throw new FlowableException(\"NULL result\");\n             }\n@@ -563,8 +563,8 @@ public UserRequestForm claimForm(final String taskId) {\n \n         String authUser = AuthContextUtils.getUsername();\n         if (!adminUser.equals(authUser)) {\n-            List<Task> tasksForUser = FlowableRuntimeUtils.createTaskQuery(engine, true).\n-                    taskId(taskId).taskCandidateOrAssigned(authUser).list();\n+            List<Task> tasksForUser = engine.getTaskService().createTaskQuery().\n+                    taskWithFormKey().taskId(taskId).taskCandidateOrAssigned(authUser).list();\n             if (tasksForUser.isEmpty()) {\n                 throw new WorkflowException(\n                         new IllegalArgumentException(authUser + \" is not candidate nor assignee of task \" + taskId));\n@@ -586,7 +586,7 @@ public UserRequestForm claimForm(final String taskId) {\n         Task task;\n         try {\n             engine.getTaskService().claim(taskId, authUser);\n-            task = FlowableRuntimeUtils.createTaskQuery(engine, true).taskId(taskId).singleResult();\n+            task = engine.getTaskService().createTaskQuery().taskWithFormKey().taskId(taskId).singleResult();\n         } catch (FlowableException e) {\n             throw new WorkflowException(\"While reading task \" + taskId, e);\n         }\n@@ -601,7 +601,7 @@ public UserRequestForm unclaimForm(final String taskId) {\n         Task task;\n         try {\n             engine.getTaskService().unclaim(taskId);\n-            task = FlowableRuntimeUtils.createTaskQuery(engine, true).taskId(taskId).singleResult();\n+            task = engine.getTaskService().createTaskQuery().taskWithFormKey().taskId(taskId).singleResult();\n         } catch (FlowableException e) {\n             throw new WorkflowException(\"While unclaiming task \" + taskId, e);\n         }"},{"sha":"02d0138329108a9e801c4bbab21bdd07a41602af","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserWorkflowAdapter.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b26fc82fdacd8b4c74c05f045731984f957758c/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b26fc82fdacd8b4c74c05f045731984f957758c/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java?ref=5b26fc82fdacd8b4c74c05f045731984f957758c","patch":"@@ -171,7 +171,7 @@ protected Set<String> doExecuteNextTask(\n             variables.putAll(moreVariables);\n         }\n \n-        List<Task> tasks = FlowableRuntimeUtils.createTaskQuery(engine, false).processInstanceId(procInstID).list();\n+        List<Task> tasks = engine.getTaskService().createTaskQuery().processInstanceId(procInstID).list();\n         String task = null;\n         if (tasks.size() == 1) {\n             try {\n@@ -459,8 +459,7 @@ public List<WorkflowTask> getAvailableTasks(final String userKey) {\n \n         List<String> availableTasks = new ArrayList<>();\n         try {\n-            Task currentTask = FlowableRuntimeUtils.createTaskQuery(engine, false).\n-                    processInstanceId(procInstID).singleResult();\n+            Task currentTask = engine.getTaskService().createTaskQuery().processInstanceId(procInstID).singleResult();\n \n             Process process = engine.getRepositoryService().\n                     getBpmnModel(FlowableRuntimeUtils.getLatestProcDefByKey("}]}