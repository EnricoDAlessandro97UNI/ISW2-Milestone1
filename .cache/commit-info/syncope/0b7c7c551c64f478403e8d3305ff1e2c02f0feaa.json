{"sha":"0b7c7c551c64f478403e8d3305ff1e2c02f0feaa","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjBiN2M3YzU1MWM2NGY0Nzg0MDNlOGQzMzA1ZmYxZTJjMDJmMGZlYWE=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-02-27T13:22:05Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-02-27T13:22:05Z"},"message":"[SYNCOPE-324] remove UserService.verifyPassword(...) and use BasicAuthentication with UserService.readSelf() instead\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1450771 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d7c5ee2ce59296d344d41eb4b1276fa2dbc1f445","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d7c5ee2ce59296d344d41eb4b1276fa2dbc1f445"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0b7c7c551c64f478403e8d3305ff1e2c02f0feaa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0b7c7c551c64f478403e8d3305ff1e2c02f0feaa","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0b7c7c551c64f478403e8d3305ff1e2c02f0feaa","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0b7c7c551c64f478403e8d3305ff1e2c02f0feaa/comments","author":null,"committer":null,"parents":[{"sha":"cbd91fec550eb8bd2809cd91d8672dec83caafac","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cbd91fec550eb8bd2809cd91d8672dec83caafac","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cbd91fec550eb8bd2809cd91d8672dec83caafac"}],"stats":{"total":81,"additions":50,"deletions":31},"files":[{"sha":"bdc75718d05e540deca0c7c4bca3ae4e669123d5","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/UserServiceProxy.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b7c7c551c64f478403e8d3305ff1e2c02f0feaa/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b7c7c551c64f478403e8d3305ff1e2c02f0feaa/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserServiceProxy.java?ref=0b7c7c551c64f478403e8d3305ff1e2c02f0feaa","patch":"@@ -38,13 +38,6 @@ public UserServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\n         super(baseUrl, restTemplate);\n     }\n \n-    @Override\n-    public Boolean verifyPassword(final String username, final String password) {\n-        return getRestTemplate().getForObject(\n-                baseUrl + \"user/verifyPassword/{username}.json?password={password}\", Boolean.class,\n-                username, password);\n-    }\n-\n     @Override\n     public int count() {\n         return getRestTemplate().getForObject(baseUrl + \"user/count.json\", Integer.class);"},{"sha":"c29c5fcdee28dc8bb5641ad9d7c641979ba27f0b","filename":"common/src/main/java/org/apache/syncope/common/services/UserService.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b7c7c551c64f478403e8d3305ff1e2c02f0feaa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b7c7c551c64f478403e8d3305ff1e2c02f0feaa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java?ref=0b7c7c551c64f478403e8d3305ff1e2c02f0feaa","patch":"@@ -132,7 +132,4 @@ List<UserTO> search(NodeCond searchCondition, @QueryParam(\"page\") int page,\n     @Path(\"{userId}\")\n     UserTO update(@PathParam(\"userId\") Long userId, UserMod userMod);\n \n-    @GET\n-    Boolean verifyPassword(@QueryParam(\"username\") String username, @QueryParam(\"pwd\") String password);\n-\n- }\n+}"},{"sha":"71e2624a7d37578e00f30849f877c9823ee92e4e","filename":"common/src/main/java/org/apache/syncope/common/validation/SyncopeClientErrorHandler.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b7c7c551c64f478403e8d3305ff1e2c02f0feaa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientErrorHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b7c7c551c64f478403e8d3305ff1e2c02f0feaa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientErrorHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientErrorHandler.java?ref=0b7c7c551c64f478403e8d3305ff1e2c02f0feaa","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.common.validation;\r\n \r\n import java.io.IOException;\r\n+import java.security.AccessControlException;\r\n import java.util.HashSet;\r\n import java.util.List;\r\n import java.util.Set;\r\n@@ -40,7 +41,7 @@ public class SyncopeClientErrorHandler extends DefaultResponseErrorHandler {\n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeClientErrorHandler.class);\r\n \r\n     private static final HttpStatus[] MANAGED_STATUSES = {\r\n-        HttpStatus.BAD_REQUEST, HttpStatus.NOT_FOUND, HttpStatus.CONFLICT\r\n+        HttpStatus.BAD_REQUEST, HttpStatus.NOT_FOUND, HttpStatus.CONFLICT, HttpStatus.UNAUTHORIZED\r\n     };\r\n \r\n     @Override\r\n@@ -49,6 +50,11 @@ public void handleError(final ClientHttpResponse response) throws IOException {\n             super.handleError(response);\r\n         }\r\n \r\n+        // Mapped 401 Unauthorized Exception\r\n+        if (response.getStatusCode().equals(HttpStatus.UNAUTHORIZED)) {\r\n+            throw new AccessControlException(\"Remote unauthorized exception\");\r\n+        }\r\n+\r\n         List<String> exceptionTypesInHeaders = response.getHeaders().get(EXCEPTION_TYPE_HEADER);\r\n         if (exceptionTypesInHeaders == null) {\r\n             LOG.debug(\"No \" + EXCEPTION_TYPE_HEADER + \" provided\");\r"},{"sha":"fa600ad6cb2ad961108bc23f34527e63d455b59c","filename":"core/src/main/java/org/apache/syncope/core/services/UserServiceImpl.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b7c7c551c64f478403e8d3305ff1e2c02f0feaa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b7c7c551c64f478403e8d3305ff1e2c02f0feaa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java?ref=0b7c7c551c64f478403e8d3305ff1e2c02f0feaa","patch":"@@ -71,9 +71,7 @@ public int count() {\n     public Response create(final UserTO userTO) {\n         UserTO created = userController.createInternal(userTO);\n         URI location = uriInfo.getAbsolutePathBuilder().path(created.getId() + \"\").build();\n-        return Response.created(location)\n-                .header(SyncopeConstants.REST_HEADER_ID, created.getId())\n-                .entity(created)\n+        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, created.getId()).entity(created)\n                 .build();\n     }\n \n@@ -133,7 +131,8 @@ public List<UserTO> search(final NodeCond searchCondition) throws InvalidSearchC\n     }\n \n     @Override\n-    public List<UserTO> search(final NodeCond searchCondition, final int page, final int size) throws InvalidSearchConditionException {\n+    public List<UserTO> search(final NodeCond searchCondition, final int page, final int size)\n+            throws InvalidSearchConditionException {\n         return userController.search(searchCondition, page, size);\n     }\n \n@@ -167,11 +166,6 @@ public UserTO update(final Long userId, final UserMod userMod) {\n         return userController.update(userMod);\n     }\n \n-    @Override\n-    public Boolean verifyPassword(final String username, final String password) {\n-        return userController.verifyPasswordInternal(username, password);\n-    }\n-\n     @Override\n     public void setUriInfo(final UriInfo uriInfo) {\n         this.uriInfo = uriInfo;"},{"sha":"99562b4dc7fb14af7458b867f9beca9bdbf418d6","filename":"core/src/test/java/org/apache/syncope/core/rest/UserRequestTestITCase.java","status":"modified","additions":19,"deletions":5,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b7c7c551c64f478403e8d3305ff1e2c02f0feaa/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b7c7c551c64f478403e8d3305ff1e2c02f0feaa/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java?ref=0b7c7c551c64f478403e8d3305ff1e2c02f0feaa","patch":"@@ -19,11 +19,11 @@\n package org.apache.syncope.core.rest;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.security.AccessControlException;\n import java.util.List;\n \n import javax.ws.rs.core.Response;\n@@ -33,6 +33,7 @@\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.services.InvalidSearchConditionException;\n import org.apache.syncope.common.services.UserRequestService;\n+import org.apache.syncope.common.services.UserService;\n import org.apache.syncope.common.to.ConfigurationTO;\n import org.apache.syncope.common.to.UserRequestTO;\n import org.apache.syncope.common.to.UserTO;\n@@ -140,16 +141,29 @@ public void update() {\n         super.resetRestTemplate();\n \n         // 7. user password has not changed yet\n-        Boolean verify = userService.verifyPassword(userTO.getUsername(), userMod.getPassword());\n-        assertFalse(verify);\n+        UserService userService1 = super.setupCredentials(userService, UserService.class, userTO.getUsername(),\n+                userMod.getPassword());\n+        try {\n+            userService1.readSelf();\n+            fail(\"Credentials are not updated yet, thus request should raise AccessControlException\");\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+        resetRestTemplate();\n \n         // 8. actually update user\n         userTO = userService.update(userMod.getId(), userMod);\n         assertNotNull(userTO);\n \n         // 9. user password has now changed\n-        verify = userService.verifyPassword(userTO.getUsername(), userMod.getPassword());\n-        assertTrue(verify);\n+        UserService userService2 = super.setupCredentials(userService, UserService.class, userTO.getUsername(),\n+                userMod.getPassword());\n+        try {\n+            UserTO user = userService2.readSelf();\n+            assertNotNull(user);\n+        } catch (AccessControlException e) {\n+            fail(\"Credentials should be valid and not cause AccessControlException\");\n+        }\n     }\n \n     @Test"},{"sha":"fd783f7d11ba98ec62109cd235273bc7017c8d99","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":20,"deletions":5,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b7c7c551c64f478403e8d3305ff1e2c02f0feaa/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b7c7c551c64f478403e8d3305ff1e2c02f0feaa/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=0b7c7c551c64f478403e8d3305ff1e2c02f0feaa","patch":"@@ -33,7 +33,9 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n+\n import javax.ws.rs.core.Response;\n+\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.mod.MembershipMod;\n import org.apache.syncope.common.mod.UserMod;\n@@ -470,11 +472,24 @@ public void create() {\n         assertEquals(maxTaskExecutions, taskTO.getExecutions().size());\n \n         // 3. verify password\n-        Boolean verify = userService.verifyPassword(newUserTO.getUsername(), \"password123\");\n-        assertTrue(verify);\n+        UserService userService1 = super.setupCredentials(userService, UserService.class, newUserTO.getUsername(),\n+                \"password123\");\n+        try {\n+            UserTO user = userService1.readSelf();\n+            assertNotNull(user);\n+        } catch (AccessControlException e) {\n+            fail(\"Credentials should be valid and not cause AccessControlException\");\n+        }\n \n-        verify = userService.verifyPassword(newUserTO.getUsername(), \"passwordXX\");\n-        assertFalse(verify);\n+        UserService userService2 = super.setupCredentials(userService, UserService.class, newUserTO.getUsername(),\n+                \"passwordXX\");\n+        try {\n+            userService2.readSelf();\n+            fail(\"Credentials are invalid, thus request should raise AccessControlException\");\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+        resetRestTemplate();\n \n         // 4. try (and fail) to create another user with same (unique) values\n         userTO = getSampleTO(userTO.getUsername());\n@@ -1136,7 +1151,7 @@ public void suspendReactivateOnResource() {\n         String userName = userTO.getUsername();\n         long userId = userTO.getId();\n \n-        // Suspend with effect on syncope, ldap and db => user should be suspended in syncope and all resources \n+        // Suspend with effect on syncope, ldap and db => user should be suspended in syncope and all resources\n         PropagationRequestTO propagationRequestTO = new PropagationRequestTO();\n         propagationRequestTO.setOnSyncope(true);\n         propagationRequestTO.addResource(RESOURCE_NAME_TESTDB);"}]}