{"sha":"828e72a056e849882b090352c77b6c1797d76a60","node_id":"C_kwDOJfYA1toAKDgyOGU3MmEwNTZlODQ5ODgyYjA5MDM1MmM3N2I2YzE3OTdkNzZhNjA","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-07-27T15:35:26Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-07-27T15:35:26Z"},"message":"[SYNCOPE-1545] Properly setting Pac4j's client name (#364)","tree":{"sha":"ac67b7fc11a713ba4582b257c76779ab48d70165","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ac67b7fc11a713ba4582b257c76779ab48d70165"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/828e72a056e849882b090352c77b6c1797d76a60","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi4Vs+CRBK7hj4Ov3rIwAAmOYIAEg8ZNWaBfa7g4a4aLVHBPxz\n4nndOZ9wT4K+EroMaPK9GwcpLXNarjsPqfpWoHlz9Lsitru5nvgzEMJNh4ef1Qjo\n9pwHY5feznhxmFRzWK4uXxQcGMlpDkBe4voJKNPmKAOdcwJ+lcXKw3AdT8uYN5LX\nDAPGEpZTt1eyqDSsyS2W9rHMBkrRkoLOMRSxOZRcvuIZNJCTGBS+2EybdACi6y/D\nA9As1xnS9ZGoKihHflyj2Chd4EUjHEo2Q0a+llJuxtVvG/Mfl1OAtEEX8dX8aTdY\nVwfHEFmka2Gi97UDHfgCAtyR1UW7yC3TqHZFhVwjUPJKq8F/sYPOF2RMf0t0d/Y=\n=kqig\n-----END PGP SIGNATURE-----\n","payload":"tree ac67b7fc11a713ba4582b257c76779ab48d70165\nparent e32abd3f0797dd23ecd868327c3cdb3afed24ab4\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1658936126 +0200\ncommitter GitHub <noreply@github.com> 1658936126 +0200\n\n[SYNCOPE-1545] Properly setting Pac4j's client name (#364)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/828e72a056e849882b090352c77b6c1797d76a60","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/828e72a056e849882b090352c77b6c1797d76a60","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/828e72a056e849882b090352c77b6c1797d76a60/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"e32abd3f0797dd23ecd868327c3cdb3afed24ab4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e32abd3f0797dd23ecd868327c3cdb3afed24ab4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e32abd3f0797dd23ecd868327c3cdb3afed24ab4"}],"stats":{"total":162,"additions":100,"deletions":62},"files":[{"sha":"b4899dec51e1d856e594038f615be8b23921e8b3","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/OIDCAuthModuleConf.java","status":"modified","additions":21,"deletions":23,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/828e72a056e849882b090352c77b6c1797d76a60/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOIDCAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/828e72a056e849882b090352c77b6c1797d76a60/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOIDCAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOIDCAuthModuleConf.java?ref=828e72a056e849882b090352c77b6c1797d76a60","patch":"@@ -22,82 +22,80 @@\n import java.util.Map;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n \n-public class OIDCAuthModuleConf implements AuthModuleConf {\n+public class OIDCAuthModuleConf extends Pac4jAuthModuleConf implements AuthModuleConf {\n \n     private static final long serialVersionUID = -471527731042579422L;\n \n     /**\n      * The client id.\n      */\n-    private String id;\n+    protected String clientId;\n \n     /**\n      * The client secret.\n      */\n-    private String secret;\n+    protected String clientSecret;\n \n     /**\n-     * The attribute value that should be used\n-     * for the authenticated username, upon a successful authentication\n-     * attempt.\n+     * The attribute value that should be used for the authenticated username, upon a successful authentication attempt.\n      */\n-    private String userIdAttribute;\n+    protected String userIdAttribute;\n \n-    private String discoveryUri;\n+    protected String discoveryUri;\n \n     /**\n      * Whether an initial nonce should be to used\n      * initially for replay attack mitigation.\n      */\n-    private boolean useNonce;\n+    protected boolean useNonce;\n \n     /**\n      * Requested scope(s).\n      */\n-    private String scope;\n+    protected String scope;\n \n     /**\n      * The JWS algorithm to use forcefully when validating ID tokens.\n      * If none is defined, the first algorithm from metadata will be used.\n      */\n-    private String preferredJwsAlgorithm;\n+    protected String preferredJwsAlgorithm;\n \n     /**\n      * Clock skew in order to account for drift, when validating id tokens.\n      */\n-    private String maxClockSkew;\n+    protected String maxClockSkew;\n \n     /**\n      * Custom parameters to send along in authZ requests, etc.\n      */\n-    private final Map<String, String> customParams = new HashMap<>(0);\n+    protected final Map<String, String> customParams = new HashMap<>(0);\n \n     /**\n      * The response mode specifies how the result of the authorization request is formatted.\n      * Possible values includes \"query\", \"fragment\", \"form_post\", or \"web_message\"\n      */\n-    private String responseMode;\n+    protected String responseMode;\n \n     /**\n      * The response type tells the authorization server which grant to execute.\n      * Possibles values includes \"code\", \"token\" or \"id_token\".\n      */\n-    private String responseType;\n+    protected String responseType;\n \n-    public String getId() {\n-        return id;\n+    public String getClientId() {\n+        return clientId;\n     }\n \n-    public void setId(final String id) {\n-        this.id = id;\n+    public void setClientId(final String clientId) {\n+        this.clientId = clientId;\n     }\n \n-    public String getSecret() {\n-        return secret;\n+    public String getClientSecret() {\n+        return clientSecret;\n     }\n \n-    public void setSecret(final String secret) {\n-        this.secret = secret;\n+    public void setClientSecret(final String clientSecret) {\n+        this.clientSecret = clientSecret;\n     }\n \n     public String getUserIdAttribute() {"},{"sha":"d7dd88df34fc4558ec05287cf7975f86d9ce8690","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/Pac4jAuthModuleConf.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/828e72a056e849882b090352c77b6c1797d76a60/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FPac4jAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/828e72a056e849882b090352c77b6c1797d76a60/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FPac4jAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FPac4jAuthModuleConf.java?ref=828e72a056e849882b090352c77b6c1797d76a60","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+import java.io.Serializable;\n+\n+public abstract class Pac4jAuthModuleConf implements Serializable {\n+\n+    private static final long serialVersionUID = -1354167135907851872L;\n+\n+    /**\n+     * Pac4j client name.\n+     */\n+    private String clientName;\n+\n+    public String getClientName() {\n+        return clientName;\n+    }\n+\n+    public void setClientName(final String clientName) {\n+        this.clientName = clientName;\n+    }\n+}"},{"sha":"be328542219d5298db29626b8d80c2b0b72cee64","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/SAML2IdPAuthModuleConf.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/828e72a056e849882b090352c77b6c1797d76a60/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/828e72a056e849882b090352c77b6c1797d76a60/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java?ref=828e72a056e849882b090352c77b6c1797d76a60","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n \n-public class SAML2IdPAuthModuleConf implements AuthModuleConf {\n+public class SAML2IdPAuthModuleConf extends Pac4jAuthModuleConf implements AuthModuleConf {\n \n     private static final long serialVersionUID = -471527731042579422L;\n \n@@ -33,70 +33,70 @@ public class SAML2IdPAuthModuleConf implements AuthModuleConf {\n      * for the authenticated username, upon a successful authentication\n      * attempt.\n      */\n-    private String userIdAttribute;\n+    protected String userIdAttribute;\n \n     /**\n      * The destination binding to use\n      * when creating authentication requests.\n      */\n-    private SAML2BindingType destinationBinding = SAML2BindingType.REDIRECT;\n+    protected SAML2BindingType destinationBinding = SAML2BindingType.REDIRECT;\n \n     /**\n      * The password to use when generating the SP keystore.\n      */\n-    private String keystorePassword;\n+    protected String keystorePassword;\n \n     /**\n      * The password to use when generating the private key for the SP keystore.\n      */\n-    private String privateKeyPassword;\n+    protected String protectedKeyPassword;\n \n     /**\n      * The metadata location of the identity provider that is to handle authentications.\n      */\n-    private String identityProviderMetadataPath;\n+    protected String identityProviderMetadataPath;\n \n     /**\n      * Flag to indicate whether the allow-create flags\n      * for nameid policies should be set to true, false or ignored/defined.\n      * Accepted values are true, false or undefined.\n      */\n-    private String nameIdPolicyAllowCreate = \"undefined\";\n+    protected String nameIdPolicyAllowCreate = \"undefined\";\n \n     /**\n      * Once you have an authenticated session on the identity provider, usually it won't prompt you again to enter your\n      * credentials and it will automatically generate a new assertion for you. By default, the SAML client\n      * will accept assertions based on a previous authentication for one hour.\n      * You can adjust this behavior by modifying this setting. The unit of time here is seconds.\n      */\n-    private String maximumAuthenticationLifetime = \"PT3600S\";\n+    protected String maximumAuthenticationLifetime = \"PT3600S\";\n \n     /**\n      * Maximum skew in seconds between SP and IDP clocks.\n      * This skew is added onto the {@code NotOnOrAfter} field in seconds\n      * for the SAML response validation.\n      */\n-    private String acceptedSkew = \"PT300S\";\n+    protected String acceptedSkew = \"PT300S\";\n \n     /**\n      * The entity id of the SP that is used in the SP metadata generation process.\n      */\n-    private String serviceProviderEntityId;\n+    protected String serviceProviderEntityId;\n \n     /**\n      * Whether authentication requests should be tagged as forced auth.\n      */\n-    private boolean forceAuth;\n+    protected boolean forceAuth;\n \n     /**\n      * Whether authentication requests should be tagged as passive.\n      */\n-    private boolean passive;\n+    protected boolean passive;\n \n     /**\n      * Requested authentication context class in authn requests.\n      */\n-    private final List<String> authnContextClassRefs = new ArrayList<>(0);\n+    protected final List<String> authnContextClassRefs = new ArrayList<>(0);\n \n     /**\n      * Specifies the comparison rule that should be used to evaluate the specified authentication methods.\n@@ -106,22 +106,22 @@ public class SAML2IdPAuthModuleConf implements AuthModuleConf {\n      * authentication methods. If not explicitly specified \"exact\" rule will be used by default.\n      * Other acceptable values are minimum, maximum, better.\n      */\n-    private String authnContextComparisonType = \"exact\";\n+    protected String authnContextComparisonType = \"exact\";\n \n     /**\n      * The key alias used in the keystore.\n      */\n-    private String keystoreAlias;\n+    protected String keystoreAlias;\n \n     /**\n      * NameID policy to request in the authentication requests.\n      */\n-    private String nameIdPolicyFormat;\n+    protected String nameIdPolicyFormat;\n \n     /**\n      * Whether metadata should be marked to request sign assertions.\n      */\n-    private boolean wantsAssertionsSigned;\n+    protected boolean wantsAssertionsSigned;\n \n     /**\n      * AttributeConsumingServiceIndex attribute of AuthnRequest element.\n@@ -130,61 +130,61 @@ public class SAML2IdPAuthModuleConf implements AuthModuleConf {\n      * is asking to be released within the authentication assertion returned by the Identity Provider (IdP).\n      * This attribute won't be sent with the request unless a positive value (including 0) is defined.\n      */\n-    private int attributeConsumingServiceIndex;\n+    protected int attributeConsumingServiceIndex;\n \n     /**\n      * Allows the SAML client to select a specific ACS url from the metadata, if defined.\n      * A negative value de-activates the selection process and is the default.\n      */\n-    private int assertionConsumerServiceIndex = -1;\n+    protected int assertionConsumerServiceIndex = -1;\n \n     /**\n      * Whether name qualifiers should be produced\n      * in the final saml response.\n      */\n-    private boolean useNameQualifier = true;\n+    protected boolean useNameQualifier = true;\n \n     /**\n      * Whether or not SAML SP metadata should be signed when generated.\n      */\n-    private boolean signServiceProviderMetadata;\n+    protected boolean signServiceProviderMetadata;\n \n     /**\n      * Whether or not the authnRequest should be signed.\n      */\n-    private boolean signAuthnRequest;\n+    protected boolean signAuthnRequest;\n \n     /**\n      * Whether or not the Logout Request sent from the SP should be signed.\n      */\n-    private boolean signServiceProviderLogoutRequest;\n+    protected boolean signServiceProviderLogoutRequest;\n \n     /**\n      * Collection of signing signature blacklisted algorithms, if any, to override the global defaults.\n      */\n-    private final List<String> blockedSignatureSigningAlgorithms = new ArrayList<>(0);\n+    protected final List<String> blockedSignatureSigningAlgorithms = new ArrayList<>(0);\n \n     /**\n      * Collection of signing signature algorithms, if any, to override the global defaults.\n      */\n-    private final List<String> signatureAlgorithms = new ArrayList<>(0);\n+    protected final List<String> signatureAlgorithms = new ArrayList<>(0);\n \n     /**\n      * Collection of signing signature reference digest methods, if any, to override the global defaults.\n      */\n-    private final List<String> signatureReferenceDigestMethods = new ArrayList<>(0);\n+    protected final List<String> signatureReferenceDigestMethods = new ArrayList<>(0);\n \n     /**\n      * The signing signature canonicalization algorithm, if any, to override the global defaults.\n      */\n-    private String signatureCanonicalizationAlgorithm;\n+    protected String signatureCanonicalizationAlgorithm;\n \n     /**\n      * Provider name set for the saml authentication request.\n      * Sets the human-readable name of the requester for use by\n      * the presenter's user agent or the identity provider.\n      */\n-    private String providerName;\n+    protected String providerName;\n \n     public String getUserIdAttribute() {\n         return userIdAttribute;\n@@ -211,11 +211,11 @@ public void setKeystorePassword(final String keystorePassword) {\n     }\n \n     public String getPrivateKeyPassword() {\n-        return privateKeyPassword;\n+        return protectedKeyPassword;\n     }\n \n-    public void setPrivateKeyPassword(final String privateKeyPassword) {\n-        this.privateKeyPassword = privateKeyPassword;\n+    public void setPrivateKeyPassword(final String protectedKeyPassword) {\n+        this.protectedKeyPassword = protectedKeyPassword;\n     }\n \n     public String getIdentityProviderMetadataPath() {"},{"sha":"13ff90ade0279cd80fb4c1cfcbc040833f157bf4","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/828e72a056e849882b090352c77b6c1797d76a60/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/828e72a056e849882b090352c77b6c1797d76a60/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=828e72a056e849882b090352c77b6c1797d76a60","patch":"@@ -74,7 +74,7 @@ under the License.\n   <AuthModule id=\"DefaultDuoMfaAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"Duo Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.DuoMfaAuthModuleConf\",\"integrationKey\":\"DIOXVRZD2UMZ8XXMNFQ5\",\"secretKey\":\"Q2IU2i8BFNd6VYflZT8Evl6lF7oPlj3PM15BmRU7\", \"applicationKey\":\"u1IHBaREMB7Cb5S4QMISAgHycpj8lPBkDGfWt23I\", \"apiHost\":\"theapi.duosecurity.com\"}'/>\n   <AuthModule id=\"DefaultOIDCAuthModule\" authModuleState=\"ACTIVE\"\n-              description=\"OIDC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"discoveryUri\":\"https://localhost:9443/syncope-wa/oidc/.well-known/openid-configuration\", \"id\":\"client-id\", \"secret\": \"client-secret\" }'/>\n+              description=\"OIDC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"discoveryUri\":\"https://localhost:9443/syncope-wa/oidc/.well-known/openid-configuration\", \"clientId\":\"client-id\", \"clientSecret\": \"client-secret\" }'/>\n   <AuthModule id=\"DefaultSAML2IdPAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"SAML2 IdP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf\",\"keystorePassword\":\"p@$$word\",\"privateKeyPassword\":\"p@$$word\",\"identityProviderMetadataPath\":\"https://localhost:9443/syncope-wa/idp/metadata\", \"serviceProviderEntityId\":\"syncope:apache:org\"}'/>\n   <AuthModule id=\"DefaultJaasAuthModule\" authModuleState=\"ACTIVE\""},{"sha":"0670556a2604f212828cee6ac1384d647418f93c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthModuleTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/828e72a056e849882b090352c77b6c1797d76a60/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/828e72a056e849882b090352c77b6c1797d76a60/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java?ref=828e72a056e849882b090352c77b6c1797d76a60","patch":"@@ -203,7 +203,7 @@ public void saveWithDuoAuthenticatorModule() {\n     @Test\n     public void saveWithOIDCAuthModule() {\n         OIDCAuthModuleConf conf = new OIDCAuthModuleConf();\n-        conf.setId(\"OIDCTestId\");\n+        conf.setClientId(\"OIDCTestId\");\n         conf.setDiscoveryUri(\"www.testurl.com\");\n         conf.setUserIdAttribute(\"username\");\n         conf.setResponseType(\"code\");"},{"sha":"50039c249129191a7a11d9cd2eadd266378c032e","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/828e72a056e849882b090352c77b6c1797d76a60/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/828e72a056e849882b090352c77b6c1797d76a60/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=828e72a056e849882b090352c77b6c1797d76a60","patch":"@@ -74,7 +74,7 @@ under the License.\n   <AuthModule id=\"DefaultDuoMfaAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"Duo Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.DuoMfaAuthModuleConf\",\"integrationKey\":\"DIOXVRZD2UMZ8XXMNFQ5\",\"secretKey\":\"Q2IU2i8BFNd6VYflZT8Evl6lF7oPlj3PM15BmRU7\", \"applicationKey\":\"u1IHBaREMB7Cb5S4QMISAgHycpj8lPBkDGfWt23I\", \"apiHost\":\"theapi.duosecurity.com\"}'/>\n   <AuthModule id=\"DefaultOIDCAuthModule\" authModuleState=\"ACTIVE\"\n-              description=\"OIDC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"discoveryUri\":\"https://localhost:9443/syncope-wa/oidc/.well-known/openid-configuration\", \"id\":\"client-id\", \"secret\": \"client-secret\" }'/>\n+              description=\"OIDC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"discoveryUri\":\"https://localhost:9443/syncope-wa/oidc/.well-known/openid-configuration\", \"clientId\":\"client-id\", \"clientSecret\": \"client-secret\" }'/>\n   <AuthModule id=\"DefaultSAML2IdPAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"SAML2 IdP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf\",\"keystorePassword\":\"p@$$word\",\"privateKeyPassword\":\"p@$$word\",\"identityProviderMetadataPath\":\"https://localhost:9443/syncope-wa/idp/metadata\", \"serviceProviderEntityId\":\"syncope:apache:org\"}'/>\n   <AuthModule id=\"DefaultJaasAuthModule\" authModuleState=\"ACTIVE\""},{"sha":"feac556db6dc6fab77cc7165fc35a96cc8eacca3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthModuleITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/828e72a056e849882b090352c77b6c1797d76a60/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/828e72a056e849882b090352c77b6c1797d76a60/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java?ref=828e72a056e849882b090352c77b6c1797d76a60","patch":"@@ -131,7 +131,7 @@ private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type\n \n             case OIDC:\n                 conf = new OIDCAuthModuleConf();\n-                OIDCAuthModuleConf.class.cast(conf).setId(\"OIDCTestId\");\n+                OIDCAuthModuleConf.class.cast(conf).setClientId(\"OIDCTestId\");\n                 OIDCAuthModuleConf.class.cast(conf).setDiscoveryUri(\"www.testurl.com\");\n                 OIDCAuthModuleConf.class.cast(conf).setUserIdAttribute(\"username\");\n                 OIDCAuthModuleConf.class.cast(conf).setResponseType(\"code\");"},{"sha":"da16ba0fd70fe3086d390e5434b4d67198d0d8a9","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/AuthModulePropertySourceMapper.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/828e72a056e849882b090352c77b6c1797d76a60/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/828e72a056e849882b090352c77b6c1797d76a60/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapper.java?ref=828e72a056e849882b090352c77b6c1797d76a60","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.wa.bootstrap;\n \n import java.util.Map;\n+import java.util.Optional;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n@@ -128,17 +129,17 @@ public Map<String, Object> map(final AuthModuleTO authModuleTO, final JaasAuthMo\n     @Override\n     public Map<String, Object> map(final AuthModuleTO authModuleTO, final OIDCAuthModuleConf conf) {\n         Pac4jGenericOidcClientProperties props = new Pac4jGenericOidcClientProperties();\n-        props.setId(conf.getId());\n+        props.setId(conf.getClientId());\n+        props.setSecret(conf.getClientSecret());\n+        props.setClientName(Optional.ofNullable(conf.getClientName()).orElse(authModuleTO.getKey()));\n         props.setEnabled(authModuleTO.getState() == AuthModuleState.ACTIVE);\n         props.setCustomParams(conf.getCustomParams());\n         props.setDiscoveryUri(conf.getDiscoveryUri());\n         props.setMaxClockSkew(conf.getMaxClockSkew());\n-        props.setClientName(authModuleTO.getKey());\n         props.setPreferredJwsAlgorithm(conf.getPreferredJwsAlgorithm());\n         props.setResponseMode(conf.getResponseMode());\n         props.setResponseType(conf.getResponseType());\n         props.setScope(conf.getScope());\n-        props.setSecret(conf.getSecret());\n         props.setPrincipalAttributeId(conf.getUserIdAttribute());\n         Pac4jOidcClientProperties client = new Pac4jOidcClientProperties();\n         client.setGeneric(props);\n@@ -149,7 +150,7 @@ public Map<String, Object> map(final AuthModuleTO authModuleTO, final OIDCAuthMo\n     @Override\n     public Map<String, Object> map(final AuthModuleTO authModuleTO, final SAML2IdPAuthModuleConf conf) {\n         Pac4jSamlClientProperties props = new Pac4jSamlClientProperties();\n-        props.setClientName(authModuleTO.getKey());\n+        props.setClientName(Optional.ofNullable(conf.getClientName()).orElse(authModuleTO.getKey()));\n         props.setEnabled(authModuleTO.getState() == AuthModuleState.ACTIVE);\n         props.setAcceptedSkew(conf.getAcceptedSkew());\n         props.setAssertionConsumerServiceIndex(conf.getAssertionConsumerServiceIndex());"}]}