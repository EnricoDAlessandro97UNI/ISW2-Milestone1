{"sha":"14ab83a7571931f0aa00ceb21eae4e0dccf8baa8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE0YWI4M2E3NTcxOTMxZjBhYTAwY2ViMjFlYWU0ZTBkY2NmOGJhYTg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-20T12:52:49Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-20T12:52:49Z"},"message":"[SYNCOPE_464] Added ErrorTO that will display error details (as XML or JSON)\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1552631 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"848447085ea8c6b90d84ceb70aef0a39635d210a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/848447085ea8c6b90d84ceb70aef0a39635d210a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/14ab83a7571931f0aa00ceb21eae4e0dccf8baa8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/14ab83a7571931f0aa00ceb21eae4e0dccf8baa8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/14ab83a7571931f0aa00ceb21eae4e0dccf8baa8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/14ab83a7571931f0aa00ceb21eae4e0dccf8baa8/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b41540a30aef6db0dfec2dbb36fc77b1f50ab73d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b41540a30aef6db0dfec2dbb36fc77b1f50ab73d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b41540a30aef6db0dfec2dbb36fc77b1f50ab73d"}],"stats":{"total":250,"additions":170,"deletions":80},"files":[{"sha":"166c9861990ea6ea1297b46723f90aa26fb4a562","filename":"common/src/main/java/org/apache/syncope/common/reqres/ErrorTO.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/14ab83a7571931f0aa00ceb21eae4e0dccf8baa8/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freqres%2FErrorTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/14ab83a7571931f0aa00ceb21eae4e0dccf8baa8/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freqres%2FErrorTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freqres%2FErrorTO.java?ref=14ab83a7571931f0aa00ceb21eae4e0dccf8baa8","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.reqres;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.types.ClientExceptionType;\n+\n+@XmlRootElement(name = \"error\")\n+@XmlType\n+public class ErrorTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 2435764161719225927L;\n+\n+    private int status;\n+\n+    private ClientExceptionType type;\n+\n+    private final List<Object> elements = new ArrayList<Object>();\n+\n+    public int getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(final int status) {\n+        this.status = status;\n+    }\n+\n+    public ClientExceptionType getType() {\n+        return type;\n+    }\n+\n+    public void setType(final ClientExceptionType type) {\n+        this.type = type;\n+    }\n+\n+    @XmlElementWrapper(name = \"elements\")\n+    @XmlElement(name = \"element\")\n+    @JsonProperty(\"elements\")\n+    public List<Object> getElements() {\n+        return elements;\n+    }\n+\n+}"},{"sha":"efe4d6694ea52225f66ca8bdf66c4c46a1a35e62","filename":"core/src/main/java/org/apache/syncope/core/rest/utils/RestServiceExceptionMapper.java","status":"modified","additions":104,"deletions":80,"changes":184,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/14ab83a7571931f0aa00ceb21eae4e0dccf8baa8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/14ab83a7571931f0aa00ceb21eae4e0dccf8baa8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java?ref=14ab83a7571931f0aa00ceb21eae4e0dccf8baa8","patch":"@@ -18,23 +18,28 @@\n  */\r\n package org.apache.syncope.core.rest.utils;\r\n \r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n import java.util.Map;\r\n import java.util.Set;\r\n import javax.persistence.EntityExistsException;\r\n import javax.persistence.PersistenceException;\r\n import javax.persistence.RollbackException;\r\n import javax.ws.rs.BadRequestException;\r\n+import javax.ws.rs.WebApplicationException;\r\n import javax.ws.rs.core.HttpHeaders;\r\n import javax.ws.rs.core.Response;\r\n import javax.ws.rs.core.Response.ResponseBuilder;\r\n import javax.ws.rs.ext.ExceptionMapper;\r\n import javax.ws.rs.ext.Provider;\r\n import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\r\n+import org.apache.cxf.jaxrs.utils.JAXRSUtils;\r\n import org.apache.syncope.common.types.EntityViolationType;\r\n import org.apache.syncope.common.types.ClientExceptionType;\r\n import org.apache.syncope.common.types.RESTHeaders;\r\n import org.apache.syncope.common.SyncopeClientCompositeException;\r\n import org.apache.syncope.common.SyncopeClientException;\r\n+import org.apache.syncope.common.reqres.ErrorTO;\r\n import org.apache.syncope.core.persistence.dao.MissingConfKeyException;\r\n import org.apache.syncope.core.persistence.dao.NotFoundException;\r\n import org.apache.syncope.core.persistence.validation.attrvalue.ParsingValidationException;\r\n@@ -60,56 +65,53 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception>, R\n     public Response toResponse(final Exception ex) {\r\n         LOG.error(\"Exception thrown by REST method: \" + ex.getMessage(), ex);\r\n \r\n+        ResponseBuilder builder;\r\n+\r\n         if (ex instanceof SyncopeClientException) {\r\n             SyncopeClientException sce = (SyncopeClientException) ex;\r\n-            return (sce.isComposite()\r\n+            builder = sce.isComposite()\r\n                     ? getSyncopeClientCompositeExceptionResponse(sce.asComposite())\r\n-                    : getSyncopeClientExceptionResponse(sce));\r\n-        }\r\n-\r\n-        if (ex instanceof AccessDeniedException) {\r\n-            return Response.status(Response.Status.UNAUTHORIZED).\r\n-                    header(HttpHeaders.WWW_AUTHENTICATE, BASIC_REALM_UNAUTHORIZED).\r\n-                    build();\r\n-        }\r\n-\r\n-        if (ex instanceof UnauthorizedRoleException) {\r\n-            return buildResponse(Response.status(Response.Status.UNAUTHORIZED),\r\n-                    ClientExceptionType.UnauthorizedRole,\r\n-                    getExMessage(ex));\r\n-        }\r\n-\r\n-        if (ex instanceof EntityExistsException) {\r\n-            return buildResponse(Response.status(Response.Status.CONFLICT),\r\n-                    ClientExceptionType.EntityExists,\r\n-                    getExMessage(ex));\r\n-        }\r\n-\r\n-        if (ex instanceof DataIntegrityViolationException) {\r\n-            return buildResponse(Response.status(Response.Status.CONFLICT),\r\n-                    ClientExceptionType.DataIntegrityViolation,\r\n-                    getExMessage(ex));\r\n-        }\r\n-\r\n-        Response response = processNotFoundExceptions(ex);\r\n-        if (response != null) {\r\n-            return response;\r\n-        }\r\n-\r\n-        response = processInvalidEntityExceptions(ex);\r\n-        if (response != null) {\r\n-            return response;\r\n-        }\r\n-\r\n-        response = processBadRequestExceptions(ex);\r\n-        if (response != null) {\r\n-            return response;\r\n+                    : getSyncopeClientExceptionResponse(sce);\r\n+        } else if (ex instanceof WebApplicationException) {\r\n+            Response response = ((WebApplicationException) ex).getResponse();\r\n+\r\n+            ErrorTO error = new ErrorTO();\r\n+            error.setStatus(response.getStatus());\r\n+            error.setType(ClientExceptionType.Unknown);\r\n+            error.getElements().add(getExMessage(ex));\r\n+\r\n+            builder = JAXRSUtils.fromResponse(response).entity(error);\r\n+        } else if (ex instanceof AccessDeniedException) {\r\n+            builder = Response.status(Response.Status.UNAUTHORIZED).\r\n+                    header(HttpHeaders.WWW_AUTHENTICATE, BASIC_REALM_UNAUTHORIZED);\r\n+        } else if (ex instanceof UnauthorizedRoleException) {\r\n+            builder = builder(Response.Status.UNAUTHORIZED, ClientExceptionType.UnauthorizedRole, getExMessage(ex));\r\n+        } else if (ex instanceof EntityExistsException) {\r\n+            builder = builder(Response.Status.CONFLICT, ClientExceptionType.EntityExists, getExMessage(ex));\r\n+        } else if (ex instanceof DataIntegrityViolationException) {\r\n+            builder = builder(Response.Status.CONFLICT, ClientExceptionType.DataIntegrityViolation, getExMessage(ex));\r\n+        } else {\r\n+            builder = processNotFoundExceptions(ex);\r\n+            if (builder == null) {\r\n+                builder = processInvalidEntityExceptions(ex);\r\n+                if (builder == null) {\r\n+                    builder = processBadRequestExceptions(ex);\r\n+                }\r\n+                // ...or just report as InternalServerError\r\n+                if (builder == null) {\r\n+                    builder = Response.status(Response.Status.INTERNAL_SERVER_ERROR).\r\n+                            header(ClientExceptionType.Unknown.getElementHeaderName(), getExMessage(ex));\r\n+\r\n+                    ErrorTO error = new ErrorTO();\r\n+                    error.setStatus(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode());\r\n+                    error.setType(ClientExceptionType.Unknown);\r\n+                    error.getElements().add(getExMessage(ex));\r\n+                    builder.entity(error);\r\n+                }\r\n+            }\r\n         }\r\n \r\n-        // Rest is interpreted as InternalServerError\r\n-        return Response.status(Response.Status.INTERNAL_SERVER_ERROR).\r\n-                header(ClientExceptionType.Unknown.getElementHeaderName(), getExMessage(ex)).\r\n-                build();\r\n+        return builder.build();\r\n     }\r\n \r\n     @Override\r\n@@ -118,47 +120,60 @@ public Exception fromResponse(final Response r) {\n                 \"Call of fromResponse() method is not expected in RestServiceExceptionMapper\");\r\n     }\r\n \r\n-    private Response getSyncopeClientExceptionResponse(final SyncopeClientException ex) {\r\n-        ResponseBuilder responseBuilder = Response.status(ex.getType().getResponseStatus());\r\n-        responseBuilder.header(RESTHeaders.EXCEPTION_TYPE, ex.getType().getHeaderValue());\r\n+    private ResponseBuilder getSyncopeClientExceptionResponse(final SyncopeClientException ex) {\r\n+        ResponseBuilder builder = Response.status(ex.getType().getResponseStatus());\r\n+        builder.header(RESTHeaders.EXCEPTION_TYPE, ex.getType().getHeaderValue());\r\n+\r\n+        ErrorTO error = new ErrorTO();\r\n+        error.setStatus(ex.getType().getResponseStatus().getStatusCode());\r\n+        error.setType(ex.getType());\r\n \r\n         for (Object element : ex.getElements()) {\r\n-            responseBuilder.header(ex.getType().getElementHeaderName(), element);\r\n+            builder.header(ex.getType().getElementHeaderName(), element);\r\n+            error.getElements().add(element);\r\n         }\r\n \r\n-        return responseBuilder.build();\r\n+        return builder.entity(error);\r\n     }\r\n \r\n-    private Response getSyncopeClientCompositeExceptionResponse(final SyncopeClientCompositeException ex) {\r\n+    private ResponseBuilder getSyncopeClientCompositeExceptionResponse(final SyncopeClientCompositeException ex) {\r\n         if (ex.getExceptions().size() == 1) {\r\n             return getSyncopeClientExceptionResponse(ex.getExceptions().iterator().next());\r\n         }\r\n \r\n-        ResponseBuilder responseBuilder = Response.status(Response.Status.BAD_REQUEST);\r\n+        ResponseBuilder builder = Response.status(Response.Status.BAD_REQUEST);\r\n+\r\n+        List<ErrorTO> errors = new ArrayList<ErrorTO>();\r\n         for (SyncopeClientException sce : ex.getExceptions()) {\r\n-            responseBuilder.header(RESTHeaders.EXCEPTION_TYPE, sce.getType().getHeaderValue());\r\n+            builder.header(RESTHeaders.EXCEPTION_TYPE, sce.getType().getHeaderValue());\r\n+\r\n+            ErrorTO error = new ErrorTO();\r\n+            error.setStatus(sce.getType().getResponseStatus().getStatusCode());\r\n+            error.setType(sce.getType());\r\n \r\n             for (Object element : sce.getElements()) {\r\n-                responseBuilder.header(sce.getType().getElementHeaderName(), element);\r\n+                builder.header(sce.getType().getElementHeaderName(), element);\r\n+                error.getElements().add(element);\r\n             }\r\n+\r\n+            errors.add(error);\r\n         }\r\n-        return responseBuilder.build();\r\n-    }\r\n \r\n-    private Response processNotFoundExceptions(final Exception ex) {\r\n-        ResponseBuilder responseBuilder = Response.status(Response.Status.NOT_FOUND);\r\n+        return builder.entity(errors);\r\n+    }\r\n \r\n+    private ResponseBuilder processNotFoundExceptions(final Exception ex) {\r\n         if (ex instanceof javax.ws.rs.NotFoundException || ex instanceof NotFoundException) {\r\n-            return buildResponse(responseBuilder, ClientExceptionType.NotFound, getExMessage(ex));\r\n+            return builder(Response.Status.NOT_FOUND, ClientExceptionType.NotFound, getExMessage(ex));\r\n         } else if (ex instanceof MissingConfKeyException) {\r\n-            return buildResponse(responseBuilder, ClientExceptionType.NotFound,\r\n+            return builder(Response.Status.NOT_FOUND, ClientExceptionType.NotFound,\r\n                     getMessage(ex, ((MissingConfKeyException) ex).getConfKey()));\r\n         }\r\n \r\n         return null;\r\n     }\r\n \r\n-    private Response processInvalidEntityExceptions(final Exception ex) {\r\n+    private ResponseBuilder processInvalidEntityExceptions(final Exception ex) {\r\n         InvalidEntityException iee = null;\r\n \r\n         if (ex instanceof InvalidEntityException) {\r\n@@ -171,58 +186,67 @@ private Response processInvalidEntityExceptions(final Exception ex) {\n         }\r\n \r\n         if (iee != null) {\r\n-            ResponseBuilder builder = Response.status(Response.Status.BAD_REQUEST);\r\n-\r\n             ClientExceptionType exType = ClientExceptionType.valueOf(\"Invalid\" + iee.getEntityClassSimpleName());\r\n \r\n+            ResponseBuilder builder = Response.status(Response.Status.BAD_REQUEST);\r\n             builder.header(RESTHeaders.EXCEPTION_TYPE, exType.getHeaderValue());\r\n \r\n+            ErrorTO error = new ErrorTO();\r\n+            error.setStatus(exType.getResponseStatus().getStatusCode());\r\n+            error.setType(exType);\r\n+\r\n             for (Map.Entry<Class<?>, Set<EntityViolationType>> violation : iee.getViolations().entrySet()) {\r\n                 for (EntityViolationType violationType : violation.getValue()) {\r\n                     builder.header(exType.getElementHeaderName(),\r\n                             violationType.name() + \": \" + violationType.getMessage());\r\n+                    error.getElements().add(violationType.name() + \": \" + violationType.getMessage());\r\n                 }\r\n             }\r\n \r\n-            return builder.build();\r\n+            return builder;\r\n         }\r\n \r\n         return null;\r\n     }\r\n \r\n-    private Response processBadRequestExceptions(final Exception ex) {\r\n-        ResponseBuilder responseBuilder = Response.status(Response.Status.BAD_REQUEST);\r\n+    private ResponseBuilder processBadRequestExceptions(final Exception ex) {\r\n+        ResponseBuilder builder = Response.status(Response.Status.BAD_REQUEST);\r\n \r\n         if (ex instanceof BadRequestException) {\r\n             if (((BadRequestException) ex).getResponse() == null) {\r\n-                return responseBuilder.build();\r\n+                return builder;\r\n             } else {\r\n-                return ((BadRequestException) ex).getResponse();\r\n+                return JAXRSUtils.fromResponse(((BadRequestException) ex).getResponse());\r\n             }\r\n         } else if (ex instanceof WorkflowException) {\r\n-            return buildResponse(responseBuilder, ClientExceptionType.Workflow, getExMessage(ex));\r\n+            return builder(Response.Status.BAD_REQUEST, ClientExceptionType.Workflow, getExMessage(ex));\r\n         } else if (ex instanceof PersistenceException) {\r\n-            return buildResponse(responseBuilder, ClientExceptionType.GenericPersistence, getExMessage(ex));\r\n+            return builder(Response.Status.BAD_REQUEST, ClientExceptionType.GenericPersistence, getExMessage(ex));\r\n         } else if (ex instanceof org.apache.ibatis.exceptions.PersistenceException) {\r\n-            return buildResponse(responseBuilder, ClientExceptionType.Workflow, getMessage(ex,\r\n-                    \"Currently unavailable. Please try later.\"));\r\n+            return builder(Response.Status.BAD_REQUEST, ClientExceptionType.Workflow,\r\n+                    getMessage(ex, \"Currently unavailable. Please try later.\"));\r\n         } else if (ex instanceof JpaSystemException) {\r\n-            return buildResponse(responseBuilder, ClientExceptionType.DataIntegrityViolation, getExMessage(ex));\r\n+            return builder(Response.Status.BAD_REQUEST, ClientExceptionType.DataIntegrityViolation, getExMessage(ex));\r\n         } else if (ex instanceof ConfigurationException) {\r\n-            return buildResponse(responseBuilder, ClientExceptionType.InvalidConnIdConf, getExMessage(ex));\r\n+            return builder(Response.Status.BAD_REQUEST, ClientExceptionType.InvalidConnIdConf, getExMessage(ex));\r\n         } else if (ex instanceof ParsingValidationException) {\r\n-            return buildResponse(responseBuilder, ClientExceptionType.InvalidValues, getExMessage(ex));\r\n+            return builder(Response.Status.BAD_REQUEST, ClientExceptionType.InvalidValues, getExMessage(ex));\r\n         }\r\n \r\n         return null;\r\n     }\r\n \r\n-    private Response buildResponse(final ResponseBuilder responseBuilder, final ClientExceptionType hType,\r\n-            final String msg) {\r\n+    private ResponseBuilder builder(final Response.Status status, final ClientExceptionType hType, final String msg) {\r\n+        ResponseBuilder builder = Response.status(status).\r\n+                header(RESTHeaders.EXCEPTION_TYPE, hType.getHeaderValue()).\r\n+                header(hType.getElementHeaderName(), msg);\r\n+\r\n+        ErrorTO error = new ErrorTO();\r\n+        error.setStatus(status.getStatusCode());\r\n+        error.setType(hType);\r\n+        error.getElements().add(msg);\r\n \r\n-        return responseBuilder.header(RESTHeaders.EXCEPTION_TYPE, hType.getHeaderValue()).\r\n-                header(hType.getElementHeaderName(), msg).\r\n-                build();\r\n+        return builder.entity(error);\r\n     }\r\n \r\n     private String getMessage(final Throwable ex, final String msg) {\r"}]}