{"sha":"74ee038a4b52bb58954900c3ad6692eb1d6176c1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc0ZWUwMzhhNGI1MmJiNTg5NTQ5MDBjM2FkNjY5MmViMWQ2MTc2YzE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-22T15:05:28Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-22T15:05:28Z"},"message":"[SYNCOPE-938] Switching from commons-collections to Java 8 features","tree":{"sha":"70ed54f21c7fbff913973a7fc22e0d7d69297fbf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/70ed54f21c7fbff913973a7fc22e0d7d69297fbf"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/74ee038a4b52bb58954900c3ad6692eb1d6176c1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/74ee038a4b52bb58954900c3ad6692eb1d6176c1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/74ee038a4b52bb58954900c3ad6692eb1d6176c1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/74ee038a4b52bb58954900c3ad6692eb1d6176c1/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"fa093b39c7539f5b74a4a3c0a9e31fa4cd475ecc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fa093b39c7539f5b74a4a3c0a9e31fa4cd475ecc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fa093b39c7539f5b74a4a3c0a9e31fa4cd475ecc"}],"stats":{"total":10893,"additions":4587,"deletions":6306},"files":[{"sha":"ac3072cb01b0165de8bc83e6307652571425b3c6","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/connector/ConnectorDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconnector%2FConnectorDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconnector%2FConnectorDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconnector%2FConnectorDetails.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands.connector;\n \n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.map.LinkedMap;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n@@ -43,7 +43,7 @@ public ConnectorDetails(final Input input) {\n     public void details() {\n         if (input.parameterNumber() == 0) {\n             try {\n-                final Map<String, String> details = new LinkedMap<>();\n+                final Map<String, String> details = new LinkedHashMap<>();\n                 final List<ConnInstanceTO> connInstanceTOs = connectorSyncopeOperations.list();\n                 int withCreateCapability = 0;\n                 int withDeleteCapability = 0;"},{"sha":"061b8f3c1089b31efc941a8d78ac6a24f9abea99","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/domain/DomainDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainDetails.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.client.cli.commands.domain;\n \n+import java.util.LinkedHashMap;\n import java.util.Map;\n-import org.apache.commons.collections4.map.LinkedMap;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.slf4j.Logger;\n@@ -40,7 +40,7 @@ public DomainDetails(final Input input) {\n     public void details() {\n         if (input.parameterNumber() == 0) {\n             try {\n-                final Map<String, String> details = new LinkedMap<>();\n+                final Map<String, String> details = new LinkedHashMap<>();\n                 details.put(\"Total number\", String.valueOf(domainSyncopeOperations.list().size()));\n                 domainResultManager.printDetails(details);\n             } catch (final SyncopeClientException ex) {"},{"sha":"26da0e9a231bf001ebe14e464f97508194501c43","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/group/GroupDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fgroup%2FGroupDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fgroup%2FGroupDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fgroup%2FGroupDetails.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands.group;\n \n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.map.LinkedMap;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -43,7 +43,7 @@ public GroupDetails(final Input input) {\n     public void details() {\n         if (input.parameterNumber() == 0) {\n             try {\n-                final Map<String, String> details = new LinkedMap<>();\n+                final Map<String, String> details = new LinkedHashMap<>();\n                 final List<GroupTO> groupTOs = groupSyncopeOperations.list();\n                 int withoudResources = 0;\n                 int withoudAttributes = 0;"},{"sha":"3a2006c65ceb68167ce3f4ec3b9e949f993e74f9","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerDetails.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands.logger;\n \n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.map.LinkedMap;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.log.LoggerTO;\n@@ -42,7 +42,7 @@ public LoggerDetails(final Input input) {\n     public void details() {\n         if (input.parameterNumber() == 0) {\n             try {\n-                final Map<String, String> details = new LinkedMap<>();\n+                final Map<String, String> details = new LinkedHashMap<>();\n                 final List<LoggerTO> loggerTOs = loggerSyncopeOperations.list();\n                 int debugLevel = 0;\n                 int errorLevel = 0;"},{"sha":"b1d52bfb23fae866ec8cc0b969904c47300b59b3","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerSyncopeOperations.java","status":"modified","additions":2,"deletions":10,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerSyncopeOperations.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,10 +18,8 @@\n  */\n package org.apache.syncope.client.cli.commands.logger;\n \n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.common.lib.log.LogAppender;\n import org.apache.syncope.common.lib.log.LogStatementTO;\n@@ -34,13 +32,7 @@ public class LoggerSyncopeOperations {\n     private final LoggerService loggerService = SyncopeServices.get(LoggerService.class);\n \n     public List<String> listMemoryAppenders() {\n-        return CollectionUtils.collect(loggerService.memoryAppenders(), new Transformer<LogAppender, String>() {\n-\n-            @Override\n-            public String transform(final LogAppender input) {\n-                return input.getName();\n-            }\n-        }, new ArrayList<String>());\n+        return loggerService.memoryAppenders().stream().map(LogAppender::getName).collect(Collectors.toList());\n     }\n \n     public List<LogStatementTO> getLastLogStatements(final String appender) {"},{"sha":"bc4b5cf1b2d41931936ec5f6a4cb623d4ac2340e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyDetails.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.client.cli.commands.policy;\n \n+import java.util.LinkedHashMap;\n import java.util.Map;\n-import org.apache.commons.collections4.map.LinkedMap;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.slf4j.Logger;\n@@ -40,7 +40,7 @@ public PolicyDetails(final Input input) {\n     public void details() {\n         if (input.parameterNumber() == 0) {\n             try {\n-                final Map<String, String> details = new LinkedMap<>();\n+                final Map<String, String> details = new LinkedHashMap<>();\n                 final int accountPolicySize = policySyncopeOperations.list(PolicyType.ACCOUNT.name()).size();\n                 final int passwordPolicySize = policySyncopeOperations.list(PolicyType.PASSWORD.name()).size();\n                 final int pullPolicySize = policySyncopeOperations.list(PolicyType.PULL.name()).size();"},{"sha":"1468aa3acbef07aaeecd0954942acb76d7be74f6","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/realm/RealmDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frealm%2FRealmDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frealm%2FRealmDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frealm%2FRealmDetails.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.client.cli.commands.realm;\n \n+import java.util.LinkedHashMap;\n import java.util.Map;\n-import org.apache.commons.collections4.map.LinkedMap;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.slf4j.Logger;\n@@ -40,7 +40,7 @@ public RealmDetails(final Input input) {\n     public void details() {\n         if (input.parameterNumber() == 0) {\n             try {\n-                final Map<String, String> details = new LinkedMap<>();\n+                final Map<String, String> details = new LinkedHashMap<>();\n                 details.put(\"Total number\", String.valueOf(realmSyncopeOperations.list().size()));\n                 realmResultManager.printDetails(details);\n             } catch (final SyncopeClientException ex) {"},{"sha":"a0ed5c2a901a6857f8291878becc361eeb179527","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportDetails.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands.report;\n \n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.map.LinkedMap;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ReportTO;\n@@ -42,7 +42,7 @@ public ReportDetails(final Input input) {\n     public void details() {\n         if (input.parameterNumber() == 0) {\n             try {\n-                final Map<String, String> details = new LinkedMap<>();\n+                final Map<String, String> details = new LinkedHashMap<>();\n                 final List<ReportTO> reportTOs = reportSyncopeOperations.list();\n                 int withoutExecutions = 0;\n                 for (final ReportTO reportTO : reportTOs) {"},{"sha":"af58864606ae3fd92f65865ecb3d9cd50d8cf81a","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/resource/ResourceDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceDetails.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands.resource;\n \n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.map.LinkedMap;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ResourceTO;\n@@ -42,7 +42,7 @@ public ResourceDetails(final Input input) {\n     public void details() {\n         if (input.parameterNumber() == 0) {\n             try {\n-                final Map<String, String> details = new LinkedMap<>();\n+                final Map<String, String> details = new LinkedHashMap<>();\n                 final List<ResourceTO> resourceTOs = resourceSyncopeOperations.list();\n                 details.put(\"Total number\", String.valueOf(resourceTOs.size()));\n                 resourceResultManager.printDetails(details);"},{"sha":"76bef86c17392450fd15eda84703164494e9b945","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/role/RoleDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frole%2FRoleDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frole%2FRoleDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frole%2FRoleDetails.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands.role;\n \n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.map.LinkedMap;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.RoleTO;\n@@ -42,7 +42,7 @@ public RoleDetails(final Input input) {\n     public void details() {\n         if (input.parameterNumber() == 0) {\n             try {\n-                final Map<String, String> details = new LinkedMap<>();\n+                final Map<String, String> details = new LinkedHashMap<>();\n                 final List<RoleTO> roleTOs = roleSyncopeOperations.list();\n                 int withoutEntitlements = 0;\n                 for (final RoleTO roleTO : roleTOs) {"},{"sha":"7f58fc3cce279bcde1befcf80d8a8eca0ba58777","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaDetails.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands.schema;\n \n+import java.util.LinkedHashMap;\n import java.util.Map;\n import javax.xml.ws.WebServiceException;\n-import org.apache.commons.collections4.map.LinkedMap;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.slf4j.Logger;\n@@ -41,7 +41,7 @@ public SchemaDetails(final Input input) {\n     public void details() {\n         if (input.parameterNumber() == 0) {\n             try {\n-                final Map<String, String> details = new LinkedMap<>();\n+                final Map<String, String> details = new LinkedHashMap<>();\n                 final int plainSchemaSize = schemaSyncopeOperations.listPlain().size();\n                 final int derivedSchemaSize = schemaSyncopeOperations.listDerived().size();\n                 final int virtualSchemaSize = schemaSyncopeOperations.listVirtual().size();"},{"sha":"8e5d3879b6cdbb17fe0a32c5259f4aecf85962b4","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskDetails.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands.task;\n \n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.map.LinkedMap;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -51,7 +51,7 @@ public TaskDetails(final Input input) {\n     public void details() {\n         if (input.parameterNumber() == 0) {\n             try {\n-                final Map<String, String> details = new LinkedMap<>();\n+                final Map<String, String> details = new LinkedHashMap<>();\n                 final List<AbstractTaskTO> notificationTaskTOs =\n                         taskSyncopeOperations.list(TaskType.NOTIFICATION.name());\n                 final List<AbstractTaskTO> propagationTaskTOs = taskSyncopeOperations.list(TaskType.PROPAGATION.name());"},{"sha":"59bbf3a8216caa32338b8839dbeac3aff6e54c8d","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserDetails.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands.user;\n \n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.map.LinkedMap;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -42,7 +42,7 @@ public UserDetails(final Input input) {\n     public void details() {\n         if (input.parameterNumber() == 0) {\n             try {\n-                final Map<String, String> details = new LinkedMap<>();\n+                final Map<String, String> details = new LinkedHashMap<>();\n                 final List<UserTO> usersTOs = userSyncopeOperations.list().getResult();\n                 int withoutResource = 0;\n                 int withoutRole = 0;"},{"sha":"6c6b6e45bdc01b047d4b59e90667c7dbb2e0cf4b","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java","status":"modified","additions":8,"deletions":12,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,7 +22,6 @@\n import de.agilecoders.wicket.core.settings.BootstrapSettings;\n import de.agilecoders.wicket.core.settings.IBootstrapSettings;\n import de.agilecoders.wicket.core.settings.SingleThemeProvider;\n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.Enumeration;\n@@ -31,7 +30,7 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Properties;\n-import org.apache.commons.collections4.CollectionUtils;\n+import java.util.stream.Collectors;\n import org.apache.commons.collections4.ListUtils;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.ClassUtils;\n@@ -48,10 +47,9 @@\n import org.apache.syncope.client.console.themes.AdminLTE;\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.PropertyUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.DomainTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.rest.api.service.DomainService;\n import org.apache.wicket.Page;\n@@ -182,9 +180,8 @@ protected void init() {\n \n         ClassPathScanImplementationLookup lookup = (ClassPathScanImplementationLookup) getServletContext().\n                 getAttribute(ConsoleInitializer.CLASSPATH_LOOKUP);\n-        for (Class<? extends BasePage> clazz : lookup.getPageClasses()) {\n-            MetaDataRoleAuthorizationStrategy.authorize(clazz, SyncopeConsoleSession.AUTHENTICATED);\n-        }\n+        lookup.getPageClasses().\n+                forEach(cls -> MetaDataRoleAuthorizationStrategy.authorize(cls, SyncopeConsoleSession.AUTHENTICATED));\n \n         getMarkupSettings().setStripWicketTags(true);\n         getMarkupSettings().setCompressWhitespace(true);\n@@ -292,12 +289,11 @@ public SyncopeClientFactoryBean newClientFactory() {\n     public List<String> getDomains() {\n         synchronized (LOG) {\n             if (domains == null) {\n-                domains = new ArrayList<>();\n-                domains.add(SyncopeConstants.MASTER_DOMAIN);\n-                CollectionUtils.collect(newClientFactory().create(\n+                domains = newClientFactory().create(\n                         new AnonymousAuthenticationHandler(anonymousUser, anonymousKey)).\n-                        getService(DomainService.class).list(),\n-                        EntityTOUtils.<DomainTO>keyTransformer(), domains);\n+                        getService(DomainService.class).list().stream().map(EntityTO::getKey).\n+                        collect(Collectors.toList());\n+                domains.add(0, SyncopeConstants.MASTER_DOMAIN);\n                 domains = ListUtils.unmodifiableList(domains);\n             }\n         }"},{"sha":"9bba50c70d4f29de6e9180cb1a0626afc50af9d1","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":5,"deletions":13,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -30,8 +30,6 @@\n import java.util.concurrent.ScheduledExecutorService;\n import javax.ws.rs.core.EntityTag;\n import javax.ws.rs.core.MediaType;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.list.SetUniqueList;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.time.FastDateFormat;\n@@ -81,7 +79,7 @@ public class SyncopeConsoleSession extends AuthenticatedWebSession {\n \n     private String domain;\n \n-    private final Map<Class<?>, Object> services = Collections.synchronizedMap(new HashMap<Class<?>, Object>());\n+    private final Map<Class<?>, Object> services = Collections.synchronizedMap(new HashMap<>());\n \n     private final ScheduledExecutorService executorService = Executors.newScheduledThreadPool(5, THREAD_POOL_FACTORY);\n \n@@ -221,9 +219,9 @@ public UserTO getSelfTO() {\n     public List<String> getAuthRealms() {\n         List<String> sortable = new ArrayList<>();\n         List<String> available = SetUniqueList.setUniqueList(sortable);\n-        for (Map.Entry<String, Set<String>> entitlement : auth.entrySet()) {\n+        auth.entrySet().forEach(entitlement -> {\n             available.addAll(entitlement.getValue());\n-        }\n+        });\n         Collections.sort(sortable);\n         return sortable;\n     }\n@@ -238,14 +236,8 @@ public boolean owns(final String entitlements, final String realm) {\n         }\n \n         for (String entitlement : entitlements.split(\",\")) {\n-            if (auth != null && auth.containsKey(entitlement)\n-                    && (realm == null || IterableUtils.matchesAny(auth.get(entitlement), new Predicate<String>() {\n-\n-                        @Override\n-                        public boolean evaluate(final String ownedRealm) {\n-                            return realm.startsWith(ownedRealm);\n-                        }\n-                    }))) {\n+            if (auth != null && auth.containsKey(entitlement) && (realm == null\n+                    || auth.get(entitlement).stream().anyMatch(ownedRealm -> realm.startsWith(ownedRealm)))) {\n                 return true;\n             }\n         }"},{"sha":"7d52f16c6d8a9221d0435b7601db74eb9192d0bd","filename":"client/console/src/main/java/org/apache/syncope/client/console/bulk/BulkContent.java","status":"modified","additions":17,"deletions":18,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbulk%2FBulkContent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbulk%2FBulkContent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbulk%2FBulkContent.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -26,7 +26,6 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.status.StatusBean;\n@@ -124,13 +123,13 @@ public IModel<T> model(final T object) {\n \n                 @Override\n                 protected boolean statusCondition(final Serializable modelObject) {\n-                    return CollectionUtils.isNotEmpty(items);\n+                    return items != null && !items.isEmpty();\n                 }\n \n                 @Override\n                 public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                     try {\n-                        if (CollectionUtils.isEmpty(items)) {\n+                        if (items == null || items.isEmpty()) {\n                             throw new IllegalArgumentException(\"Invalid items\");\n                         }\n \n@@ -144,16 +143,16 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n \n                             final BulkAction bulkAction = new BulkAction();\n                             bulkAction.setType(BulkAction.Type.valueOf(actionToBeAddresed.name()));\n-                            for (T item : items) {\n+                            items.forEach(item -> {\n                                 try {\n                                     bulkAction.getTargets().add(getTargetId(item, keyFieldName).toString());\n                                 } catch (IllegalAccessException | InvocationTargetException e) {\n                                     LOG.error(\"Error retrieving item id {}\", keyFieldName, e);\n                                 }\n-                            }\n+                            });\n                             res = BulkActionResult.class.cast(\n                                     bulkActionExecutor.getClass().getMethod(\"bulkAction\", BulkAction.class).invoke(\n-                                    bulkActionExecutor, bulkAction));\n+                                            bulkActionExecutor, bulkAction));\n                         } catch (IllegalArgumentException biae) {\n                             if (!(items.iterator().next() instanceof StatusBean)) {\n                                 throw new IllegalArgumentException(\"Invalid items\");\n@@ -168,17 +167,17 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n \n                             // Group bean information by anyKey\n                             final Map<String, List<StatusBean>> beans = new HashMap<>();\n-                            for (T bean : items) {\n-                                final StatusBean sb = StatusBean.class.cast(bean);\n-                                final List<StatusBean> sblist;\n-                                if (beans.containsKey(sb.getKey())) {\n-                                    sblist = beans.get(sb.getKey());\n-                                } else {\n-                                    sblist = new ArrayList<>();\n-                                    beans.put(sb.getKey(), sblist);\n-                                }\n-                                sblist.add(sb);\n-                            }\n+                            items.stream().map(bean -> StatusBean.class.cast(bean)).\n+                                    forEachOrdered(sb -> {\n+                                        final List<StatusBean> sblist;\n+                                        if (beans.containsKey(sb.getKey())) {\n+                                            sblist = beans.get(sb.getKey());\n+                                        } else {\n+                                            sblist = new ArrayList<>();\n+                                            beans.put(sb.getKey(), sblist);\n+                                        }\n+                                        sblist.add(sb);\n+                                    });\n \n                             for (Map.Entry<String, List<StatusBean>> entry : beans.entrySet()) {\n                                 final String etag = anyRestClient.read(entry.getKey()).getETagValue();\n@@ -222,7 +221,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                         }\n \n                         final List<IColumn<T, S>> newColumnList = new ArrayList<>(columns);\n-                        newColumnList.add(newColumnList.size(), new BulkActionResultColumn<T, S>(res, fieldName));\n+                        newColumnList.add(newColumnList.size(), new BulkActionResultColumn<>(res, fieldName));\n \n                         container.addOrReplace(new AjaxFallbackDefaultDataTable<>(\n                                 \"selectedObjects\","},{"sha":"f925271e145f0d456f97836be02420e3b3082af7","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/ResourceStatusDataProvider.java","status":"modified","additions":12,"deletions":18,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FResourceStatusDataProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FResourceStatusDataProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FResourceStatusDataProvider.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,12 +18,10 @@\n  */\n package org.apache.syncope.client.console.commons;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.commons.status.ConnObjectWrapper;\n import org.apache.syncope.client.console.commons.status.StatusBean;\n@@ -109,23 +107,19 @@ public Iterator<StatusBean> iterator(final long first, final long count) {\n         List<? extends AnyTO> result =\n                 restClient.search(realm, fiql, (page < 0 ? 0 : page) + 1, paginatorRows, getSort(), type);\n \n-        List<StatusBean> res = CollectionUtils.collect(result, new Transformer<AnyTO, StatusBean>() {\n+        List<StatusBean> statuses = result.stream().map(any -> {\n+            List<ConnObjectWrapper> connObjects =\n+                    statusUtils.getConnectorObjects(any, Collections.singletonList(resource));\n \n-            @Override\n-            public StatusBean transform(final AnyTO input) {\n-                final List<ConnObjectWrapper> connObjects =\n-                        statusUtils.getConnectorObjects(input, Collections.singletonList(resource));\n+            return statusUtils.getStatusBean(\n+                    any,\n+                    resource,\n+                    connObjects.isEmpty() ? null : connObjects.iterator().next().getConnObjectTO(),\n+                    any instanceof GroupTO);\n+        }).collect(Collectors.toList());\n \n-                return statusUtils.getStatusBean(\n-                        input,\n-                        resource,\n-                        connObjects.isEmpty() ? null : connObjects.iterator().next().getConnObjectTO(),\n-                        input instanceof GroupTO);\n-            }\n-        }, new ArrayList<StatusBean>());\n-\n-        Collections.sort(res, comparator);\n-        return res.iterator();\n+        Collections.sort(statuses, comparator);\n+        return statuses.iterator();\n     }\n \n     @Override"},{"sha":"d8be863c8ec98246a8f4057af97fa98e7bbc634d","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/SerializableTransformer.java","status":"removed","additions":0,"deletions":33,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa093b39c7539f5b74a4a3c0a9e31fa4cd475ecc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSerializableTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa093b39c7539f5b74a4a3c0a9e31fa4cd475ecc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSerializableTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSerializableTransformer.java?ref=fa093b39c7539f5b74a4a3c0a9e31fa4cd475ecc","patch":"@@ -1,33 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.commons;\n-\n-import java.io.Serializable;\n-import org.apache.commons.collections4.Transformer;\n-\n-/**\n- * Serializable transformer.\n- *\n- * @param <I> input type.\n- * @param <O> output type.\n- */\n-public interface SerializableTransformer<I extends Serializable, O extends Serializable>\n-        extends Transformer<I, O>, Serializable {\n-\n-}"},{"sha":"e4059216a9a4cbd22f6ff9d32956a8efc6985097","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/SortableAnyProviderComparator.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -83,20 +83,20 @@ public Comparable getObject() {\n \n             final AttrTO attr;\n             if (schemaType == null) {\n-                attr = this.anyTO.getPlainAttr(schema);\n+                attr = this.anyTO.getPlainAttr(schema).get();\n             } else {\n                 switch (schemaType) {\n                     case PLAIN:\n                     default:\n-                        attr = this.anyTO.getPlainAttr(schema);\n+                        attr = this.anyTO.getPlainAttr(schema).get();\n                         break;\n \n                     case DERIVED:\n-                        attr = this.anyTO.getDerAttr(schema);\n+                        attr = this.anyTO.getDerAttr(schema).get();\n                         break;\n \n                     case VIRTUAL:\n-                        attr = this.anyTO.getVirAttr(schema);\n+                        attr = this.anyTO.getVirAttr(schema).get();\n                         break;\n                 }\n             }"},{"sha":"38fbb6e7d8532117a1ba5ba1412cc084667e826d","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/status/StatusUtils.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,6 +22,7 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n+import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -137,16 +138,16 @@ public StatusBean getStatusBean(\n     }\n \n     private Boolean isEnabled(final ConnObjectTO objectTO) {\n-        final AttrTO status = objectTO.getAttr(ConnIdSpecialName.ENABLE);\n-        return status != null && status.getValues() != null && !status.getValues().isEmpty()\n-                ? Boolean.valueOf(status.getValues().get(0))\n+        Optional<AttrTO> status = objectTO.getAttr(ConnIdSpecialName.ENABLE);\n+        return status.isPresent() && status.get().getValues() != null && !status.get().getValues().isEmpty()\n+                ? Boolean.valueOf(status.get().getValues().get(0))\n                 : Boolean.FALSE;\n     }\n \n     private String getConnObjectLink(final ConnObjectTO objectTO) {\n-        final AttrTO name = objectTO == null ? null : objectTO.getAttr(ConnIdSpecialName.NAME);\n-        return name != null && name.getValues() != null && !name.getValues().isEmpty()\n-                ? name.getValues().get(0)\n+        Optional<AttrTO> name = objectTO == null ? null : objectTO.getAttr(ConnIdSpecialName.NAME);\n+        return name.isPresent() && name.get().getValues() != null && !name.get().getValues().isEmpty()\n+                ? name.get().getValues().get(0)\n                 : null;\n     }\n "},{"sha":"e31ffdc010711d4fd2b17be0995a197ef018aea5","filename":"client/console/src/main/java/org/apache/syncope/client/console/events/EventCategoryPanel.java","status":"modified","additions":24,"deletions":32,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -26,8 +26,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -108,7 +106,7 @@ public EventCategoryPanel(\n         type = new AjaxDropDownChoicePanel<>(\n                 \"type\",\n                 \"type\",\n-                new PropertyModel<EventCategoryType>(eventCategoryTO, \"type\"),\n+                new PropertyModel<>(eventCategoryTO, \"type\"),\n                 false);\n         type.setChoices(Arrays.asList(EventCategoryType.values()));\n         type.setStyleSheet(\"ui-widget-content ui-corner-all\");\n@@ -129,13 +127,7 @@ public String getIdValue(final EventCategoryType eventCategoryType, final int i)\n             @Override\n             public EventCategoryType getObject(\n                     final String id, final IModel<? extends List<? extends EventCategoryType>> choices) {\n-                return IterableUtils.find(choices.getObject(), new Predicate<EventCategoryType>() {\n-\n-                    @Override\n-                    public boolean evaluate(final EventCategoryType object) {\n-                        return object.name().equals(id);\n-                    }\n-                });\n+                return choices.getObject().stream().filter(object -> object.name().equals(id)).findAny().orElse(null);\n             }\n         });\n         categoryContainer.add(type);\n@@ -153,7 +145,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         category = new AjaxDropDownChoicePanel<>(\n                 \"category\",\n                 \"category\",\n-                new PropertyModel<String>(eventCategoryTO, \"category\"),\n+                new PropertyModel<>(eventCategoryTO, \"category\"),\n                 false);\n         category.setChoices(filter(eventCategoryTOs, type.getModelObject()));\n         categoryContainer.add(category);\n@@ -171,7 +163,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         subcategory = new AjaxDropDownChoicePanel<>(\n                 \"subcategory\",\n                 \"subcategory\",\n-                new PropertyModel<String>(eventCategoryTO, \"subcategory\"),\n+                new PropertyModel<>(eventCategoryTO, \"subcategory\"),\n                 false);\n         subcategory.setChoices(filter(eventCategoryTOs, type.getModelObject(), category.getModelObject()));\n         categoryContainer.add(subcategory);\n@@ -188,13 +180,13 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n         categoryContainer.add(new Label(\"customLabel\", new ResourceModel(\"custom\", \"custom\")).setVisible(false));\n \n-        custom = new AjaxTextFieldPanel(\"custom\", \"custom\", new Model<String>(null));\n+        custom = new AjaxTextFieldPanel(\"custom\", \"custom\", new Model<>(null));\n         custom.setVisible(false);\n         custom.setEnabled(false);\n \n         categoryContainer.add(custom.hideLabel());\n \n-        actionsPanel = new ActionsPanel<EventCategoryTO>(\"customActions\", null);\n+        actionsPanel = new ActionsPanel<>(\"customActions\", null);\n         actionsPanel.add(new ActionLink<EventCategoryTO>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n@@ -210,7 +202,7 @@ public void onClick(final AjaxRequestTarget target, final EventCategoryTO ignore\n                             null,\n                             null,\n                             parsed.getKey().getEvents().isEmpty()\n-                                    ? StringUtils.EMPTY : parsed.getKey().getEvents().iterator().next(),\n+                            ? StringUtils.EMPTY : parsed.getKey().getEvents().iterator().next(),\n                             parsed.getValue());\n \n                     custom.setModelObject(StringUtils.EMPTY);\n@@ -237,7 +229,7 @@ public void onClick(final AjaxRequestTarget target, final EventCategoryTO ignore\n                             null,\n                             null,\n                             parsed.getKey().getEvents().isEmpty()\n-                                    ? StringUtils.EMPTY : parsed.getKey().getEvents().iterator().next(),\n+                            ? StringUtils.EMPTY : parsed.getKey().getEvents().iterator().next(),\n                             parsed.getValue());\n \n                     custom.setModelObject(StringUtils.EMPTY);\n@@ -270,11 +262,11 @@ protected void onEventAction(final IEvent<?> event) {\n     private List<String> filter(final List<EventCategoryTO> eventCategoryTOs, final EventCategoryType type) {\n         Set<String> res = new HashSet<>();\n \n-        for (EventCategoryTO eventCategory : eventCategoryTOs) {\n-            if (type == eventCategory.getType() && StringUtils.isNotEmpty(eventCategory.getCategory())) {\n-                res.add(eventCategory.getCategory());\n-            }\n-        }\n+        eventCategoryTOs.stream().filter(eventCategory\n+                -> type == eventCategory.getType() && StringUtils.isNotEmpty(eventCategory.getCategory())).\n+                forEachOrdered(eventCategory -> {\n+                    res.add(eventCategory.getCategory());\n+                });\n \n         List<String> filtered = new ArrayList<>(res);\n         Collections.sort(filtered);\n@@ -286,12 +278,12 @@ private List<String> filter(\n \n         Set<String> res = new HashSet<>();\n \n-        for (EventCategoryTO eventCategory : eventCategoryTOs) {\n-            if (type == eventCategory.getType() && StringUtils.equals(category, eventCategory.getCategory())\n-                    && StringUtils.isNotEmpty(eventCategory.getSubcategory())) {\n-                res.add(eventCategory.getSubcategory());\n-            }\n-        }\n+        eventCategoryTOs.stream().filter(eventCategory\n+                -> type == eventCategory.getType() && StringUtils.equals(category, eventCategory.getCategory())\n+                && StringUtils.isNotEmpty(eventCategory.getSubcategory())).\n+                forEachOrdered(eventCategory -> {\n+                    res.add(eventCategory.getSubcategory());\n+                });\n \n         List<String> filtered = new ArrayList<>(res);\n         Collections.sort(filtered);\n@@ -373,7 +365,7 @@ public void onEvent(final IEvent<?> event) {\n                         categoryEvent.getKey().getCategory(),\n                         categoryEvent.getKey().getSubcategory(),\n                         categoryEvent.getKey().getEvents().isEmpty()\n-                                ? StringUtils.EMPTY : categoryEvent.getKey().getEvents().iterator().next(),\n+                        ? StringUtils.EMPTY : categoryEvent.getKey().getEvents().iterator().next(),\n                         categoryEvent.getValue()));\n \n                 category.setEnabled(false);\n@@ -439,16 +431,16 @@ protected void onEventAction(final IEvent<?> event) {\n     }\n \n     private void authorizeList() {\n-        for (String role : getListAuthRoles()) {\n+        getListAuthRoles().forEach(role -> {\n             MetaDataRoleAuthorizationStrategy.authorize(selectedEventsPanel, RENDER, role);\n-        }\n+        });\n     }\n \n     private void authorizeChanges() {\n-        for (String role : getChangeAuthRoles()) {\n+        getChangeAuthRoles().forEach(role -> {\n             MetaDataRoleAuthorizationStrategy.authorize(categoryContainer, RENDER, role);\n             MetaDataRoleAuthorizationStrategy.authorize(eventsContainer, RENDER, role);\n-        }\n+        });\n     }\n \n     private void updateEventsContainer(final AjaxRequestTarget target) {"},{"sha":"7a39743cf0ac37b91bb2ef1cf3c3c58564e6bd3c","filename":"client/console/src/main/java/org/apache/syncope/client/console/init/ClassPathScanImplementationLookup.java","status":"modified","additions":9,"deletions":27,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,10 +21,9 @@\n import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.List;\n-import org.apache.commons.collections4.ComparatorUtils;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.ObjectUtils;\n import org.apache.syncope.client.console.pages.BaseExtPage;\n import org.apache.syncope.client.console.annotations.BinaryPreview;\n import org.apache.syncope.client.console.annotations.ExtPage;\n@@ -35,7 +34,6 @@\n import org.apache.syncope.client.console.widgets.BaseExtWidget;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n import org.springframework.core.type.filter.AssignableTypeFilter;\n import org.springframework.util.ClassUtils;\n@@ -80,7 +78,7 @@ public void load() {\n         scanner.addIncludeFilter(new AssignableTypeFilter(BaseExtWidget.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(SSOLoginFormPanel.class));\n \n-        for (BeanDefinition bd : scanner.findCandidateComponents(getBasePackage())) {\n+        scanner.findCandidateComponents(getBasePackage()).forEach(bd -> {\n             try {\n                 Class<?> clazz = ClassUtils.resolveClassName(\n                         bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n@@ -112,36 +110,20 @@ public void load() {\n             } catch (Throwable t) {\n                 LOG.warn(\"Could not inspect class {}\", bd.getBeanClassName(), t);\n             }\n-        }\n+        });\n         pages = Collections.unmodifiableList(pages);\n         previewers = Collections.unmodifiableList(previewers);\n \n-        Collections.sort(extPages, new Comparator<Class<? extends BaseExtPage>>() {\n-\n-            @Override\n-            public int compare(\n-                    final Class<? extends BaseExtPage> o1,\n-                    final Class<? extends BaseExtPage> o2) {\n-\n-                return ComparatorUtils.<Integer>naturalComparator().compare(\n+        Collections.sort(extPages, (o1, o2)\n+                -> ObjectUtils.compare(\n                         o1.getAnnotation(ExtPage.class).priority(),\n-                        o2.getAnnotation(ExtPage.class).priority());\n-            }\n-        });\n+                        o2.getAnnotation(ExtPage.class).priority()));\n         extPages = Collections.unmodifiableList(extPages);\n \n-        Collections.sort(extWidgets, new Comparator<Class<? extends BaseExtWidget>>() {\n-\n-            @Override\n-            public int compare(\n-                    final Class<? extends BaseExtWidget> o1,\n-                    final Class<? extends BaseExtWidget> o2) {\n-\n-                return ComparatorUtils.<Integer>naturalComparator().compare(\n+        Collections.sort(extWidgets, (o1, o2)\n+                -> ObjectUtils.compare(\n                         o1.getAnnotation(ExtWidget.class).priority(),\n-                        o2.getAnnotation(ExtWidget.class).priority());\n-            }\n-        });\n+                        o2.getAnnotation(ExtWidget.class).priority()));\n         extWidgets = Collections.unmodifiableList(extWidgets);\n \n         ssoLoginFormPanels = Collections.unmodifiableList(ssoLoginFormPanels);"},{"sha":"d3063d4195440a7dd2fa2a34b0d278555ea51c43","filename":"client/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationWizardBuilder.java","status":"modified","additions":21,"deletions":32,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -24,8 +24,7 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -44,9 +43,8 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n-import org.apache.syncope.common.lib.to.MailTemplateTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n@@ -122,40 +120,34 @@ public Details(final NotificationWrapper modelObject) {\n             boolean createFlag = notificationTO.getKey() == null;\n \n             AjaxTextFieldPanel sender = new AjaxTextFieldPanel(\"sender\", getString(\"sender\"),\n-                    new PropertyModel<String>(notificationTO, \"sender\"));\n+                    new PropertyModel<>(notificationTO, \"sender\"));\n             sender.addRequiredLabel();\n             sender.addValidator(EmailAddressValidator.getInstance());\n             add(sender);\n \n             AjaxTextFieldPanel subject = new AjaxTextFieldPanel(\"subject\", getString(\"subject\"),\n-                    new PropertyModel<String>(notificationTO, \"subject\"));\n+                    new PropertyModel<>(notificationTO, \"subject\"));\n             subject.addRequiredLabel();\n             add(subject);\n \n             AjaxDropDownChoicePanel<String> template = new AjaxDropDownChoicePanel<>(\n                     \"template\", getString(\"template\"),\n-                    new PropertyModel<String>(notificationTO, \"template\"));\n-            template.setChoices(CollectionUtils.collect(\n-                    restClient.listTemplates(), new Transformer<MailTemplateTO, String>() {\n-\n-                @Override\n-                public String transform(final MailTemplateTO input) {\n-                    return input.getKey();\n-                }\n-            }, new ArrayList<String>()));\n+                    new PropertyModel<>(notificationTO, \"template\"));\n+            template.setChoices(restClient.listTemplates().stream().\n+                    map(EntityTO::getKey).collect(Collectors.toList()));\n \n             template.addRequiredLabel();\n             add(template);\n \n             AjaxDropDownChoicePanel<TraceLevel> traceLevel = new AjaxDropDownChoicePanel<>(\n                     \"traceLevel\", getString(\"traceLevel\"),\n-                    new PropertyModel<TraceLevel>(notificationTO, \"traceLevel\"));\n+                    new PropertyModel<>(notificationTO, \"traceLevel\"));\n             traceLevel.setChoices(Arrays.asList(TraceLevel.values()));\n             traceLevel.addRequiredLabel();\n             add(traceLevel);\n \n             final AjaxCheckBoxPanel isActive = new AjaxCheckBoxPanel(\"isActive\",\n-                    getString(\"isActive\"), new PropertyModel<Boolean>(notificationTO, \"active\"));\n+                    getString(\"isActive\"), new PropertyModel<>(notificationTO, \"active\"));\n             if (createFlag) {\n                 isActive.getField().setDefaultModelObject(Boolean.TRUE);\n             }\n@@ -297,7 +289,7 @@ public Abouts(final NotificationWrapper modelObject) {\n \n                 @Override\n                 protected Pair<String, List<SearchClause>> newModelObject() {\n-                    return Pair.<String, List<SearchClause>>of(AnyTypeKind.USER.name(), new ArrayList<SearchClause>());\n+                    return Pair.<String, List<SearchClause>>of(AnyTypeKind.USER.name(), new ArrayList<>());\n                 }\n \n                 @Override\n@@ -349,7 +341,7 @@ public Recipients(final NotificationWrapper modelObject) {\n \n             AjaxTextFieldPanel recipientAttrName = new AjaxTextFieldPanel(\n                     \"recipientAttrName\", new ResourceModel(\"recipientAttrName\", \"recipientAttrName\").getObject(),\n-                    new PropertyModel<String>(notificationTO, \"recipientAttrName\"));\n+                    new PropertyModel<>(notificationTO, \"recipientAttrName\"));\n             recipientAttrName.setChoices(getSchemaNames());\n             recipientAttrName.addRequiredLabel();\n             recipientAttrName.setTitle(getString(\"intAttrNameInfo.help\")\n@@ -361,24 +353,24 @@ public Recipients(final NotificationWrapper modelObject) {\n             add(recipientAttrName);\n \n             AjaxTextFieldPanel staticRecipientsFieldPanel =\n-                    new AjaxTextFieldPanel(\"panel\", \"staticRecipients\", new Model<String>());\n+                    new AjaxTextFieldPanel(\"panel\", \"staticRecipients\", new Model<>());\n             staticRecipientsFieldPanel.addValidator(EmailAddressValidator.getInstance());\n             add(new MultiFieldPanel.Builder<>(\n                     new PropertyModel<List<String>>(notificationTO, \"staticRecipients\")).\n                     build(\"staticRecipients\", \"staticRecipients\", staticRecipientsFieldPanel).hideLabel());\n \n             add(new UserSearchPanel.Builder(\n-                    new PropertyModel<List<SearchClause>>(modelObject, \"recipientClauses\")).\n+                    new PropertyModel<>(modelObject, \"recipientClauses\")).\n                     required(false).build(\"recipients\"));\n \n             AjaxDropDownChoicePanel<String> recipientsProviderClassName = new AjaxDropDownChoicePanel<>(\n                     \"recipientsProviderClassName\", \"recipientsProviderClassName\",\n-                    new PropertyModel<String>(notificationTO, \"recipientsProviderClassName\"), false);\n+                    new PropertyModel<>(notificationTO, \"recipientsProviderClassName\"), false);\n             recipientsProviderClassName.setChoices(recipientProviders.getObject());\n             add(recipientsProviderClassName);\n \n             AjaxCheckBoxPanel selfAsRecipient = new AjaxCheckBoxPanel(\"selfAsRecipient\",\n-                    getString(\"selfAsRecipient\"), new PropertyModel<Boolean>(notificationTO, \"selfAsRecipient\"));\n+                    getString(\"selfAsRecipient\"), new PropertyModel<>(notificationTO, \"selfAsRecipient\"));\n             if (notificationTO.getKey() == null) {\n                 selfAsRecipient.getField().setDefaultModelObject(Boolean.FALSE);\n             }\n@@ -390,15 +382,12 @@ private List<String> getSchemaNames() {\n         List<String> result = new ArrayList<>();\n         result.add(\"username\");\n \n-        CollectionUtils.collect(\n-                schemaRestClient.<PlainSchemaTO>getSchemas(SchemaType.PLAIN, AnyTypeKind.USER.name()),\n-                EntityTOUtils.<PlainSchemaTO>keyTransformer(), result);\n-        CollectionUtils.collect(\n-                schemaRestClient.<DerSchemaTO>getSchemas(SchemaType.DERIVED, AnyTypeKind.USER.name()),\n-                EntityTOUtils.<DerSchemaTO>keyTransformer(), result);\n-        CollectionUtils.collect(\n-                schemaRestClient.<VirSchemaTO>getSchemas(SchemaType.VIRTUAL, AnyTypeKind.USER.name()),\n-                EntityTOUtils.<VirSchemaTO>keyTransformer(), result);\n+        result.addAll(schemaRestClient.<PlainSchemaTO>getSchemas(SchemaType.PLAIN, AnyTypeKind.USER.name()).\n+                stream().map(EntityTO::getKey).collect(Collectors.toList()));\n+        result.addAll(schemaRestClient.<DerSchemaTO>getSchemas(SchemaType.DERIVED, AnyTypeKind.USER.name()).\n+                stream().map(EntityTO::getKey).collect(Collectors.toList()));\n+        result.addAll(schemaRestClient.<VirSchemaTO>getSchemas(SchemaType.VIRTUAL, AnyTypeKind.USER.name()).\n+                stream().map(EntityTO::getKey).collect(Collectors.toList()));\n \n         Collections.sort(result);\n         return result;"},{"sha":"cc3e74e184306b860aa92b91d9ca19bd04d2fa8f","filename":"client/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationWrapper.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWrapper.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -52,10 +52,10 @@ public final String getKey() {\n     public List<Pair<String, List<SearchClause>>> getAboutClauses() {\n         if (this.aboutClauses == null) {\n             this.aboutClauses = new ArrayList<>();\n-            for (Map.Entry<String, List<SearchClause>> entry\n-                    : SearchUtils.getSearchClauses(this.notificationTO.getAbouts()).entrySet()) {\n-                this.aboutClauses.add(Pair.of(entry.getKey(), (entry.getValue())));\n-            }\n+            SearchUtils.getSearchClauses(this.notificationTO.getAbouts()).entrySet().\n+                    forEach(entry -> {\n+                        this.aboutClauses.add(Pair.of(entry.getKey(), (entry.getValue())));\n+                    });\n         }\n \n         return this.aboutClauses;"},{"sha":"ed08b11ee35d97b79fbc5adbb7c1c28f0348fe62","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/LogViewer.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -39,13 +39,9 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.util.ListModel;\n import org.apache.wicket.util.time.Duration;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n public class LogViewer extends WebPage {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(LogViewer.class);\n-\n     private static final int MAX_STATEMENTS_PER_APPENDER = 50;\n \n     private static final long serialVersionUID = -7578329899052708105L;\n@@ -58,7 +54,7 @@ public LogViewer() {\n         add(viewer);\n \n         final AjaxDropDownChoicePanel<String> appenders = new AjaxDropDownChoicePanel<>(\n-                \"appenders\", \"Appender\", new Model<String>(), false);\n+                \"appenders\", \"Appender\", new Model<>(), false);\n         MetaDataRoleAuthorizationStrategy.authorize(appenders, ENABLE, StandardEntitlement.LOG_READ);\n         appenders.setChoices(restClient.listMemoryAppenders());\n         viewer.add(appenders);\n@@ -68,7 +64,7 @@ public LogViewer() {\n         viewer.add(stContainer);\n \n         final Model<Long> lastTimeInMillis = Model.of(0L);\n-        final IModel<List<LogStatementTO>> statementViewModel = new ListModel<>(new ArrayList<LogStatementTO>());\n+        final IModel<List<LogStatementTO>> statementViewModel = new ListModel<>(new ArrayList<>());\n         final ListView<LogStatementTO> statementView = new ListView<LogStatementTO>(\"statements\", statementViewModel) {\n \n             private static final long serialVersionUID = -9180479401817023838L;\n@@ -93,7 +89,7 @@ protected void onPostProcessTarget(final AjaxRequestTarget target) {\n                         String.format(\"window.scrollTop = $('#%s').scrollTop();\", stContainer.getMarkupId()));\n \n                 List<LogStatementTO> recentLogStatements = appenders.getModelObject() == null\n-                        ? new ArrayList<LogStatementTO>()\n+                        ? new ArrayList<>()\n                         : restClient.getLastLogStatements(appenders.getModelObject(), lastTimeInMillis.getObject());\n                 if (!recentLogStatements.isEmpty()) {\n                     lastTimeInMillis.setObject(recentLogStatements.get(recentLogStatements.size() - 1).getTimeMillis());\n@@ -102,7 +98,7 @@ protected void onPostProcessTarget(final AjaxRequestTarget target) {\n                     int recentSize = recentLogStatements.size();\n \n                     List<LogStatementTO> newModelObject = SetUniqueList.<LogStatementTO>setUniqueList(\n-                            new ArrayList<LogStatementTO>(MAX_STATEMENTS_PER_APPENDER));\n+                            new ArrayList<>(MAX_STATEMENTS_PER_APPENDER));\n                     if (currentSize <= MAX_STATEMENTS_PER_APPENDER - recentSize) {\n                         newModelObject.addAll(statementView.getModelObject());\n                     } else {\n@@ -129,7 +125,7 @@ protected void onPostProcessTarget(final AjaxRequestTarget target) {\n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n                 List<LogStatementTO> lastStatements = appenders.getModelObject() == null\n-                        ? new ArrayList<LogStatementTO>()\n+                        ? new ArrayList<>()\n                         : restClient.getLastLogStatements(appenders.getModelObject(), 0);\n                 statementViewModel.setObject(lastStatements);\n                 target.add(stContainer);"},{"sha":"828a69877e541f233c9d5968e6e99d6fde985e47","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java","status":"modified","additions":42,"deletions":56,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -26,14 +26,12 @@\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.AnyDataProvider;\n import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.syncope.client.console.commons.SerializableTransformer;\n import org.apache.syncope.client.console.commons.status.ConnObjectWrapper;\n-import org.apache.syncope.client.console.commons.status.StatusBean;\n import org.apache.syncope.client.console.rest.AbstractAnyRestClient;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.AttrColumn;\n@@ -50,7 +48,6 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n-import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.PageReference;\n@@ -118,16 +115,16 @@ protected AnyDirectoryPanel(final String id, final Builder<A, E> builder, final\n         altDefaultModal.size(Modal.Size.Large);\n \n         this.pSchemaNames = new ArrayList<>();\n-        for (AnyTypeClassTO anyTypeClassTO : AnyDirectoryPanelBuilder.class.cast(builder).getAnyTypeClassTOs()) {\n+        AnyDirectoryPanelBuilder.class.cast(builder).getAnyTypeClassTOs().forEach(anyTypeClassTO -> {\n             this.pSchemaNames.addAll(anyTypeClassTO.getPlainSchemas());\n-        }\n+        });\n         this.dSchemaNames = new ArrayList<>();\n-        for (AnyTypeClassTO anyTypeClassTO : AnyDirectoryPanelBuilder.class.cast(builder).getAnyTypeClassTOs()) {\n+        AnyDirectoryPanelBuilder.class.cast(builder).getAnyTypeClassTOs().forEach(anyTypeClassTO -> {\n             this.dSchemaNames.addAll(anyTypeClassTO.getDerSchemas());\n-        }\n+        });\n \n         initResultTable();\n-        \n+\n         // cahnge close callback in order to update header after model update\n         modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n \n@@ -149,32 +146,29 @@ protected List<IColumn<A, String>> getColumns() {\n         final List<IColumn<A, String>> columns = new ArrayList<>();\n         final List<IColumn<A, String>> prefcolumns = new ArrayList<>();\n \n-        columns.add(new KeyPropertyColumn<A>(\n+        columns.add(new KeyPropertyColumn<>(\n                 new ResourceModel(Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME), Constants.KEY_FIELD_NAME));\n \n-        for (String name : prefMan.getList(\n-                getRequest(), DisplayAttributesModalPanel.getPrefDetailView(type))) {\n-            if (!Constants.KEY_FIELD_NAME.equalsIgnoreCase(name)) {\n-                addPropertyColumn(\n-                        name,\n-                        ReflectionUtils.findField(DisplayAttributesModalPanel.getTOClass(type), name),\n-                        prefcolumns);\n-            }\n-        }\n-\n-        for (String name : prefMan.getList(\n-                getRequest(), DisplayAttributesModalPanel.getPrefPlainAttributeView(type))) {\n-            if (pSchemaNames.contains(name)) {\n-                prefcolumns.add(new AttrColumn<A>(name, SchemaType.PLAIN));\n-            }\n-        }\n-\n-        for (String name : prefMan.getList(\n-                getRequest(), DisplayAttributesModalPanel.getPrefDerivedAttributeView(type))) {\n-            if (dSchemaNames.contains(name)) {\n-                prefcolumns.add(new AttrColumn<A>(name, SchemaType.DERIVED));\n-            }\n-        }\n+        prefMan.getList(getRequest(), DisplayAttributesModalPanel.getPrefDetailView(type)).stream().\n+                filter(name -> !Constants.KEY_FIELD_NAME.equalsIgnoreCase(name)).\n+                forEachOrdered(name -> {\n+                    addPropertyColumn(\n+                            name,\n+                            ReflectionUtils.findField(DisplayAttributesModalPanel.getTOClass(type), name),\n+                            prefcolumns);\n+                });\n+\n+        prefMan.getList(getRequest(), DisplayAttributesModalPanel.getPrefPlainAttributeView(type)).stream().\n+                filter(name -> pSchemaNames.contains(name)).\n+                forEachOrdered(name -> {\n+                    prefcolumns.add(new AttrColumn<>(name, SchemaType.PLAIN));\n+                });\n+\n+        prefMan.getList(getRequest(), DisplayAttributesModalPanel.getPrefDerivedAttributeView(type)).stream().\n+                filter(name -> (dSchemaNames.contains(name))).\n+                forEachOrdered(name -> {\n+                    prefcolumns.add(new AttrColumn<>(name, SchemaType.DERIVED));\n+                });\n \n         // Add defaults in case of no selection\n         if (prefcolumns.isEmpty()) {\n@@ -201,17 +195,17 @@ protected void addPropertyColumn(\n             final List<IColumn<A, String>> columns) {\n \n         if (Constants.KEY_FIELD_NAME.equalsIgnoreCase(name)) {\n-            columns.add(new KeyPropertyColumn<A>(new ResourceModel(name, name), name, name));\n+            columns.add(new KeyPropertyColumn<>(new ResourceModel(name, name), name, name));\n         } else if (Constants.DEFAULT_TOKEN_FIELD_NAME.equalsIgnoreCase(name)) {\n-            columns.add(new TokenColumn<A>(new ResourceModel(name, name), name));\n+            columns.add(new TokenColumn<>(new ResourceModel(name, name), name));\n         } else if (field != null\n                 && (field.getType().equals(Boolean.class) || field.getType().equals(boolean.class))) {\n \n-            columns.add(new BooleanPropertyColumn<A>(new ResourceModel(name, name), name, name));\n+            columns.add(new BooleanPropertyColumn<>(new ResourceModel(name, name), name, name));\n         } else if (field != null && field.getType().equals(Date.class)) {\n-            columns.add(new DatePropertyColumn<A>(new ResourceModel(name, name), name, name));\n+            columns.add(new DatePropertyColumn<>(new ResourceModel(name, name), name, name));\n         } else {\n-            columns.add(new PropertyColumn<A, String>(new ResourceModel(name, name), name, name));\n+            columns.add(new PropertyColumn<>(new ResourceModel(name, name), name, name));\n         }\n     }\n \n@@ -291,24 +285,16 @@ protected Panel customResultBody(final String panelId, final AnyWrapper<A> item,\n         return new StatusPanel(\n                 panelId,\n                 ((ProvisioningResult<A>) result).getEntity(),\n-                new ListModel<>(new ArrayList<StatusBean>()),\n-                CollectionUtils.collect(\n-                        ((ProvisioningResult<A>) result).getPropagationStatuses(),\n-                        new SerializableTransformer<PropagationStatus, Pair<ConnObjectTO, ConnObjectWrapper>>() {\n-\n-                    private static final long serialVersionUID = -4931455531906427515L;\n-\n-                    @Override\n-                    public Pair<ConnObjectTO, ConnObjectWrapper> transform(final PropagationStatus input) {\n-                        ConnObjectTO before = input.getBeforeObj();\n-                        ConnObjectWrapper afterObjWrapper = new ConnObjectWrapper(\n-                                ((ProvisioningResult<A>) result).getEntity(),\n-                                input.getResource(),\n-                                input.getAfterObj());\n-                        return Pair.of(before, afterObjWrapper);\n-                    }\n-\n-                }, new ArrayList<Pair<ConnObjectTO, ConnObjectWrapper>>()),\n+                new ListModel<>(new ArrayList<>()),\n+                ((ProvisioningResult<A>) result).getPropagationStatuses().stream().\n+                        map(input -> {\n+                            ConnObjectTO before = input.getBeforeObj();\n+                            ConnObjectWrapper afterObjWrapper = new ConnObjectWrapper(\n+                                    ((ProvisioningResult<A>) result).getEntity(),\n+                                    input.getResource(),\n+                                    input.getAfterObj());\n+                            return Pair.of(before, afterObjWrapper);\n+                        }).collect(Collectors.toList()),\n                 pageRef);\n     }\n }"},{"sha":"bb809beb514baf76e8fd094af23f5fcfd79193c6","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeClassDetailsPanel.java","status":"modified","additions":12,"deletions":20,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassDetailsPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,11 +18,9 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.console.rest.ConfRestClient;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n@@ -66,7 +64,7 @@ public AnyTypeClassDetailsPanel(final String id, final AnyTypeClassTO anyTypeCla\n         antTypeClassForm.setOutputMarkupId(true);\n         add(antTypeClassForm);\n \n-        final AjaxTextFieldPanel key = new AjaxTextFieldPanel(\"key\", getString(\"key\"), new PropertyModel<String>(\n+        final AjaxTextFieldPanel key = new AjaxTextFieldPanel(\"key\", getString(\"key\"), new PropertyModel<>(\n                 this.anyTypeClassTO, \"key\"));\n         key.addRequiredLabel();\n         key.setEnabled(anyTypeClassTO.getKey() == null || this.anyTypeClassTO.getKey().isEmpty());\n@@ -109,22 +107,16 @@ public AnyTypeClassDetailsPanel(final String id, final AnyTypeClassTO anyTypeCla\n \n     private void buildAvailableSchemas(final String key) {\n \n-        List<String> configurationSchemas = new ArrayList<>();\n-        CollectionUtils.collect(new ConfRestClient().list(), new Transformer<AttrTO, String>() {\n-\n-            @Override\n-            public String transform(final AttrTO attrTO) {\n-                return attrTO.getSchema();\n-            }\n-        }, configurationSchemas);\n-\n-        for (AnyTypeClassTO item : new AnyTypeClassRestClient().list()) {\n-            if (key == null || !item.getKey().equals(key)) {\n-                availablePlainSchemas.removeAll(item.getPlainSchemas());\n-                availableDerSchemas.removeAll(item.getDerSchemas());\n-                availableVirSchemas.removeAll(item.getVirSchemas());\n-            }\n-        }\n+        List<String> configurationSchemas = new ConfRestClient().list().stream().\n+                map(AttrTO::getSchema).collect(Collectors.toList());\n+\n+        new AnyTypeClassRestClient().list().stream().\n+                filter(item -> key == null || !item.getKey().equals(key)).\n+                forEach(item -> {\n+                    availablePlainSchemas.removeAll(item.getPlainSchemas());\n+                    availableDerSchemas.removeAll(item.getDerSchemas());\n+                    availableVirSchemas.removeAll(item.getVirSchemas());\n+                });\n \n         availablePlainSchemas.removeAll(configurationSchemas);\n         availablePlainSchemas.removeAll(LAYOUT_PARAMETERS);"},{"sha":"582dc9f1cba5d6f3e300512477f51f738f4e8974","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeDetailsPanel.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,17 +18,15 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n-import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.form.Form;\n@@ -74,7 +72,6 @@ public AnyTypeDetailsPanel(final String id, final AnyTypeTO anyTypeTO) {\n     }\n \n     private List<String> getAvailableAnyTypeClasses() {\n-        return CollectionUtils.collect(new AnyTypeClassRestClient().list(),\n-                EntityTOUtils.<AnyTypeClassTO>keyTransformer(), new ArrayList<String>());\n+        return new AnyTypeClassRestClient().list().stream().map(EntityTO::getKey).collect(Collectors.toList());\n     }\n }"},{"sha":"d30bdbee9e4a038dfd4c8e78fce58ae9feec1cfe","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java","status":"modified","additions":9,"deletions":16,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -26,8 +26,7 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.panels.search.AnyObjectSearchPanel;\n@@ -50,6 +49,7 @@\n import org.apache.syncope.common.lib.report.SearchCondition;\n import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.list.ListItem;\n@@ -209,26 +209,19 @@ protected void populateItem(final ListItem<String> item) {\n                             }\n                         }\n \n-                        panel = new AjaxPalettePanel.Builder<String>().setName(fieldName).build(\n+                        panel = new AjaxPalettePanel.Builder<>().setName(fieldName).build(\n                                 \"value\",\n-                                new PropertyModel<List<String>>(bean.getObject(), fieldName),\n-                                new ListModel<>(\n-                                        CollectionUtils.collect(\n-                                                choices, new Transformer<AbstractSchemaTO, String>() {\n-\n-                                            @Override\n-                                            public String transform(final AbstractSchemaTO input) {\n-                                                return input.getKey();\n-                                            }\n-                                        }, new ArrayList<String>()))).hideLabel();\n+                                new PropertyModel<>(bean.getObject(), fieldName),\n+                                new ListModel<>(choices.stream().map(EntityTO::getKey).collect(Collectors.toList()))).\n+                                hideLabel();\n                     } else if (listItemType.isEnum()) {\n-                        panel = new AjaxPalettePanel.Builder<String>().setName(fieldName).build(\n+                        panel = new AjaxPalettePanel.Builder<>().setName(fieldName).build(\n                                 \"value\",\n-                                new PropertyModel<List<String>>(bean.getObject(), fieldName),\n+                                new PropertyModel<>(bean.getObject(), fieldName),\n                                 new ListModel(Arrays.asList(listItemType.getEnumConstants()))).hideLabel();\n                     } else {\n                         panel = new MultiFieldPanel.Builder<>(\n-                                new PropertyModel<List<String>>(bean.getObject(), fieldName)).build(\n+                                new PropertyModel<>(bean.getObject(), fieldName)).build(\n                                 \"value\",\n                                 fieldName,\n                                 buildSinglePanel(bean.getObject(), field.getType(), fieldName, \"panel\")).hideLabel();"},{"sha":"1f01e596666eb5775d25d86a2d0f1dae135f85db","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ConnObjectListViewPanel.java","status":"modified","additions":5,"deletions":12,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,9 +20,7 @@\n \n import java.io.Serializable;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n@@ -68,17 +66,12 @@ protected ConnObjectListViewPanel(\n \n             @Override\n             protected Component getValueComponent(final String key, final ConnObjectTO bean) {\n-                final AttrTO attrTO = IterableUtils.find(bean.getAttrs(), new Predicate<AttrTO>() {\n+                Optional<AttrTO> attrTO =\n+                        bean.getAttrs().stream().filter(object -> object.getSchema().equals(key)).findAny();\n \n-                    @Override\n-                    public boolean evaluate(final AttrTO object) {\n-                        return object.getSchema().equals(key);\n-                    }\n-                });\n-\n-                return attrTO == null || CollectionUtils.isEmpty(attrTO.getValues())\n+                return !attrTO.isPresent() || attrTO.get().getValues().isEmpty()\n                         ? new Label(\"field\", StringUtils.EMPTY)\n-                        : new CollectionPanel(\"field\", attrTO.getValues());\n+                        : new CollectionPanel(\"field\", attrTO.get().getValues());\n             }\n \n         };"},{"sha":"fc8318dc366319b035e4fb44e4b71589dae029db","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ConnObjects.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjects.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjects.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjects.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,11 +18,9 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n@@ -50,20 +48,14 @@ public class ConnObjects extends Panel implements ModalPanel {\n     public ConnObjects(final ResourceTO resource, final PageReference pageRef) {\n         super(BaseModal.CONTENT_ID);\n \n-        List<String> availableAnyTypes = CollectionUtils.collect(\n-                resource.getProvisions(), new Transformer<ProvisionTO, String>() {\n-\n-            @Override\n-            public String transform(final ProvisionTO provision) {\n-                return provision.getAnyType();\n-            }\n-        }, new ArrayList<String>());\n+        List<String> availableAnyTypes = resource.getProvisions().stream().\n+                map(ProvisionTO::getAnyType).collect(Collectors.toList());\n         Collections.sort(availableAnyTypes, new AnyTypeRestClient.AnyTypeKeyComparator());\n         if (resource.getOrgUnit() != null) {\n             availableAnyTypes.add(0, SyncopeConstants.REALM_ANYTYPE);\n         }\n \n-        anyTypes = new AjaxDropDownChoicePanel<>(\"anyTypes\", \"anyTypes\", new Model<String>());\n+        anyTypes = new AjaxDropDownChoicePanel<>(\"anyTypes\", \"anyTypes\", new Model<>());\n         anyTypes.setChoices(availableAnyTypes);\n         anyTypes.hideLabel();\n         anyTypes.setNullValid(false);"},{"sha":"f1e9dc2f87cba5295d7cad99bd79b29990668205","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ConsoleLogPanel.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,8 +22,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.collections4.ComparatorUtils;\n-import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.ObjectUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.core.LoggerContext;\n import org.apache.logging.log4j.core.config.LoggerConfig;\n@@ -55,7 +54,7 @@ public List<LoggerTO> getLoggers() {\n             LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n \n             List<LoggerTO> result = new ArrayList<>();\n-            for (final LoggerConfig logger : ctx.getConfiguration().getLoggers().values()) {\n+            ctx.getConfiguration().getLoggers().values().forEach(logger -> {\n                 String loggerName = LogManager.ROOT_LOGGER_NAME.equals(logger.getName())\n                         ? SyncopeConstants.ROOT_LOGGER : logger.getName();\n                 if (logger.getLevel() != null) {\n@@ -64,15 +63,8 @@ public List<LoggerTO> getLoggers() {\n                     loggerTO.setLevel(LoggerLevel.fromLevel(logger.getLevel()));\n                     result.add(loggerTO);\n                 }\n-            }\n-            Collections.sort(result, ComparatorUtils.transformedComparator(\n-                    ComparatorUtils.<String>naturalComparator(), new Transformer<LoggerTO, String>() {\n-\n-                @Override\n-                public String transform(final LoggerTO input) {\n-                    return input.getKey();\n-                }\n-            }));\n+            });\n+            Collections.sort(result, (o1, o2) -> ObjectUtils.compare(o1.getKey(), o2.getKey()));\n \n             return result;\n         }"},{"sha":"563641c986feaa06466364fb70d763ef35c7982d","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/HistoryConfDetails.java","status":"modified","additions":10,"deletions":27,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FHistoryConfDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FHistoryConfDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FHistoryConfDetails.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -24,9 +24,7 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n@@ -66,26 +64,16 @@ public HistoryConfDetails(final BaseModal<?> baseModal, final T selectedHistoryC\n         super();\n \n         // remove selected conf from list\n-        CollectionUtils.filter(availableHistoryConfTOs, new Predicate<T>() {\n-\n-            @Override\n-            public boolean evaluate(final T object) {\n-                return !object.getKey().equals(selectedHistoryConfTO.getKey());\n-            }\n-        });\n-        this.availableHistoryConfTOs = availableHistoryConfTOs;\n+        this.availableHistoryConfTOs = availableHistoryConfTOs.stream().\n+                filter(object -> object.getKey().equals(selectedHistoryConfTO.getKey())).collect(Collectors.toList());\n         this.selectedHistoryConfTO = selectedHistoryConfTO;\n \n         // add current conf to list\n         addCurrentInstanceConf();\n \n         Form<?> form = initDropdownDiffConfForm();\n         add(form);\n-        if (availableHistoryConfTOs.isEmpty()) {\n-            form.setVisible(false);\n-        } else {\n-            form.setVisible(true);\n-        }\n+        form.setVisible(!availableHistoryConfTOs.isEmpty());\n \n         showConfigurationSinglePanel();\n     }\n@@ -109,9 +97,9 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n \n     private void showConfigurationDiffPanel(final List<T> historyConfTOs) {\n         List<Pair<String, String>> infos = new ArrayList<>();\n-        for (T historyConfTO : historyConfTOs) {\n+        historyConfTOs.forEach(historyConfTO -> {\n             infos.add(getJSONInfo(historyConfTO));\n-        }\n+        });\n \n         jsonPanel = new JsonDiffPanel(null, new PropertyModel<String>(infos.get(0), \"value\"),\n                 new PropertyModel<String>(infos.get(1), \"value\"), null) {\n@@ -170,7 +158,7 @@ private <T extends AbstractHistoryConf> Map<String, String> getDropdownNamesMap(\n         return historyConfMap;\n     }\n \n-    private Form initDropdownDiffConfForm() {\n+    private Form<?> initDropdownDiffConfForm() {\n         final Form<T> form = new Form<>(\"form\");\n         form.setModel(new CompoundPropertyModel<>(selectedHistoryConfTO));\n         form.setOutputMarkupId(true);\n@@ -181,7 +169,7 @@ private Form initDropdownDiffConfForm() {\n         final AjaxDropDownChoicePanel<String> dropdownElem = new AjaxDropDownChoicePanel<>(\n                 \"compareDropdown\",\n                 getString(\"compare\"),\n-                new PropertyModel<String>(selectedHistoryConfTO, \"key\"),\n+                new PropertyModel<>(selectedHistoryConfTO, \"key\"),\n                 false);\n         dropdownElem.setChoices(keys);\n         dropdownElem.setChoiceRenderer(new IChoiceRenderer<String>() {\n@@ -217,13 +205,8 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 final String selectedKey = dropdownElem.getModelObject();\n                 if (selectedKey != null) {\n                     if (!selectedKey.isEmpty()) {\n-                        T confToCompare = IterableUtils.find(availableHistoryConfTOs, new Predicate<T>() {\n-\n-                            @Override\n-                            public boolean evaluate(final T object) {\n-                                return object.getKey().equals(selectedKey);\n-                            }\n-                        });\n+                        T confToCompare = availableHistoryConfTOs.stream().\n+                                filter(object -> object.getKey().equals(selectedKey)).findAny().orElse(null);\n                         elemsToCompare.add(confToCompare);\n                         showConfigurationDiffPanel(elemsToCompare);\n                     } else {"},{"sha":"06729c99979ef3ce2018f3f0ce42e1036dee4624","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ListViewPanel.java","status":"modified","additions":4,"deletions":13,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,12 +22,9 @@\n import java.lang.reflect.Field;\n import java.lang.reflect.InvocationTargetException;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.collections4.IteratorUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.wicket.ajax.form.IndicatorAjaxFormChoiceComponentUpdatingBehavior;\n@@ -139,7 +136,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         final List<String> toBeIncluded;\n         if (includes == null || includes.isEmpty()) {\n             toBeIncluded = new ArrayList<>();\n-            for (Field field : Arrays.asList(reference.getDeclaredFields())) {\n+            for (Field field : reference.getDeclaredFields()) {\n                 toBeIncluded.add(field.getName());\n             }\n         } else {\n@@ -155,9 +152,9 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         } else {\n             listOfItems = list;\n             if (LOG.isDebugEnabled()) {\n-                for (String field : toBeIncluded) {\n+                toBeIncluded.forEach(field -> {\n                     LOG.debug(\"Show field {}\", field);\n-                }\n+                });\n             }\n         }\n \n@@ -396,13 +393,7 @@ protected Component getValueComponent(final String key, final T bean) {\n         protected T getActualItem(final T item, final List<T> list) {\n             return item == null\n                     ? null\n-                    : IteratorUtils.find(list.iterator(), new Predicate<T>() {\n-\n-                        @Override\n-                        public boolean evaluate(final T object) {\n-                            return item.equals(object);\n-                        }\n-                    });\n+                    : list.stream().filter(object -> item.equals(object)).findAny().orElse(null);\n         }\n \n         @Override"},{"sha":"81167d8629e6aec08dab814433a48d61660962ea","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/MembersTogglePanel.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FMembersTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FMembersTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FMembersTogglePanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,8 +20,7 @@\n \n import java.io.Serializable;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.pages.BasePage;\n@@ -54,15 +53,8 @@ public abstract class MembersTogglePanel extends TogglePanel<Serializable> {\n \n         @Override\n         protected List<String> load() {\n-            List<String> result = new AnyTypeRestClient().list();\n-            CollectionUtils.filter(result, new Predicate<String>() {\n-\n-                @Override\n-                public boolean evaluate(final String anyType) {\n-                    return !AnyTypeKind.GROUP.name().equals(anyType);\n-                }\n-            });\n-            return result;\n+            return new AnyTypeRestClient().list().stream().\n+                    filter(anyType -> !AnyTypeKind.GROUP.name().equals(anyType)).collect(Collectors.toList());\n         }\n     };\n "},{"sha":"f8ea7bc1cbfc83fec83ad36436e1bfc609b9781e","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/Realm.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -24,7 +24,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n@@ -42,10 +42,10 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.client.console.wizards.any.ConnObjectPanel;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n@@ -167,7 +167,7 @@ public boolean isVisible() {\n         });\n \n         final Triple<UserFormLayoutInfo, GroupFormLayoutInfo, Map<String, AnyObjectFormLayoutInfo>> formLayoutInfo =\n-                FormLayoutInfoUtils.fetch(CollectionUtils.collect(anyTypes, EntityTOUtils.keyTransformer()));\n+                FormLayoutInfoUtils.fetch(anyTypes.stream().map(EntityTO::getKey).collect(Collectors.toList()));\n \n         for (final AnyTypeTO anyType : anyTypes) {\n             tabs.add(new ITabComponent(\n@@ -221,11 +221,11 @@ protected Component getValueComponent(final String key, final PropagationStatus\n                     ConnObjectTO afterObj = bean.getAfterObj();\n                     String remoteId = afterObj == null\n                             || afterObj.getAttrs().isEmpty()\n-                            || afterObj.getAttr(ConnIdSpecialName.NAME) == null\n-                            || afterObj.getAttr(ConnIdSpecialName.NAME).getValues() == null\n-                            || afterObj.getAttr(ConnIdSpecialName.NAME).getValues().isEmpty()\n+                            || !afterObj.getAttr(ConnIdSpecialName.NAME).isPresent()\n+                            || afterObj.getAttr(ConnIdSpecialName.NAME).get().getValues() == null\n+                            || afterObj.getAttr(ConnIdSpecialName.NAME).get().getValues().isEmpty()\n                             ? StringUtils.EMPTY\n-                            : afterObj.getAttr(ConnIdSpecialName.NAME).getValues().get(0);\n+                            : afterObj.getAttr(ConnIdSpecialName.NAME).get().getValues().get(0);\n \n                     return new Label(\"field\", remoteId);\n                 } else if (\"status\".equalsIgnoreCase(key)) {"},{"sha":"7e742411d6db2a1626c53587ef5afcfe7ace0bfe","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RealmChoicePanel.java","status":"modified","additions":19,"deletions":33,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -33,8 +33,6 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n@@ -100,10 +98,10 @@ private void getChildren(\n \n                 if (tree.containsKey(key)) {\n                     Pair<RealmTO, List<RealmTO>> subtree = tree.get(key);\n-                    for (RealmTO child : subtree.getValue()) {\n+                    subtree.getValue().forEach(child -> {\n                         full.add(Pair.of(indent + child.getName(), child));\n                         getChildren(full, child.getKey(), tree, \"     \" + indent + (indent.isEmpty() ? \"|--- \" : \"\"));\n-                    }\n+                    });\n                 }\n             }\n \n@@ -124,20 +122,17 @@ protected List<Pair<String, RealmTO>> load() {\n \n             @Override\n             protected List<DynRealmTO> load() {\n-                final List<DynRealmTO> dynRealms = realmRestClient.listDynReams();\n-                dynRealms.sort(new Comparator<DynRealmTO>() {\n-\n-                    @Override\n-                    public int compare(final DynRealmTO left, final DynRealmTO right) {\n-                        if (left == null) {\n-                            return -1;\n-                        } else if (right == null) {\n-                            return 1;\n-                        } else {\n-                            return left.getKey().compareTo(right.getKey());\n-                        }\n+                List<DynRealmTO> dynRealms = realmRestClient.listDynReams();\n+                dynRealms.sort((left, right) -> {\n+                    if (left == null) {\n+                        return -1;\n+                    } else if (right == null) {\n+                        return 1;\n+                    } else {\n+                        return left.getKey().compareTo(right.getKey());\n                     }\n                 });\n+\n                 return dynRealms;\n             }\n         };\n@@ -221,13 +216,8 @@ public void onClick(final AjaxRequestTarget target) {\n \n                         @Override\n                         public boolean isEnabled() {\n-                            return IterableUtils.matchesAny(availableRealms, new Predicate<String>() {\n-\n-                                @Override\n-                                public boolean evaluate(final String availableRealm) {\n-                                    return realmTO.getFullPath().startsWith(availableRealm);\n-                                }\n-                            });\n+                            return availableRealms.stream().\n+                                    anyMatch(availableRealm -> realmTO.getFullPath().startsWith(availableRealm));\n                         }\n                     });\n                 }\n@@ -283,13 +273,9 @@ public void onClick(final AjaxRequestTarget target) {\n \n                             @Override\n                             public boolean isEnabled() {\n-                                return IterableUtils.matchesAny(availableRealms, new Predicate<String>() {\n-\n-                                    @Override\n-                                    public boolean evaluate(final String availableRealm) {\n-                                        return SyncopeConstants.ROOT_REALM.equals(availableRealm)\n-                                                || realmTO.getKey().equals(availableRealm);\n-                                    }\n+                                return availableRealms.stream().anyMatch(availableRealm -> {\n+                                    return SyncopeConstants.ROOT_REALM.equals(availableRealm)\n+                                            || realmTO.getKey().equals(availableRealm);\n                                 });\n                             }\n                         });\n@@ -328,11 +314,11 @@ private Map<String, Pair<RealmTO, List<RealmTO>>> reloadRealmParentMap() {\n \n     private Map<String, Pair<RealmTO, List<RealmTO>>> reloadRealmParentMap(final List<RealmTO> realms) {\n         tree.clear();\n-        tree.put(null, Pair.<RealmTO, List<RealmTO>>of(realms.get(0), new ArrayList<RealmTO>()));\n+        tree.put(null, Pair.<RealmTO, List<RealmTO>>of(realms.get(0), new ArrayList<>()));\n \n         final Map<String, List<RealmTO>> cache = new HashMap<>();\n \n-        for (RealmTO realm : realms) {\n+        realms.forEach(realm -> {\n             final List<RealmTO> children = new ArrayList<>();\n             tree.put(realm.getKey(), Pair.<RealmTO, List<RealmTO>>of(realm, children));\n \n@@ -348,7 +334,7 @@ private Map<String, Pair<RealmTO, List<RealmTO>>> reloadRealmParentMap(final Lis\n             } else {\n                 cache.put(realm.getParent(), new ArrayList<>(Collections.singleton(realm)));\n             }\n-        }\n+        });\n \n         return tree;\n     }"},{"sha":"ddd903afc7d872c693273cbc8462285c6ba93435","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RealmDetails.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,7 +22,7 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.rest.PolicyRestClient;\n import org.apache.syncope.client.console.rest.ResourceRestClient;\n@@ -32,11 +32,10 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.PolicyRenderer;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n-import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n@@ -119,19 +118,19 @@ public RealmDetails(\n         container.add(generics.setVisible(unwrapped));\n \n         FieldPanel<String> name = new AjaxTextFieldPanel(\n-                \"name\", \"name\", new PropertyModel<String>(realmTO, \"name\"), false);\n+                \"name\", \"name\", new PropertyModel<>(realmTO, \"name\"), false);\n         name.addRequiredLabel();\n         generics.add(name);\n \n         FieldPanel<String> fullPath = new AjaxTextFieldPanel(\n-                \"fullPath\", \"fullPath\", new PropertyModel<String>(realmTO, \"fullPath\"), false);\n+                \"fullPath\", \"fullPath\", new PropertyModel<>(realmTO, \"fullPath\"), false);\n         fullPath.setEnabled(false);\n         generics.add(fullPath);\n \n         AjaxDropDownChoicePanel<String> accountPolicy = new AjaxDropDownChoicePanel<>(\n                 \"accountPolicy\",\n                 new ResourceModel(\"accountPolicy\", \"accountPolicy\").getObject(),\n-                new PropertyModel<String>(realmTO, \"accountPolicy\"),\n+                new PropertyModel<>(realmTO, \"accountPolicy\"),\n                 false);\n         accountPolicy.setChoiceRenderer(new PolicyRenderer(accountPolicies));\n         accountPolicy.setChoices(new ArrayList<>(accountPolicies.getObject().keySet()));\n@@ -141,7 +140,7 @@ public RealmDetails(\n         AjaxDropDownChoicePanel<String> passwordPolicy = new AjaxDropDownChoicePanel<>(\n                 \"passwordPolicy\",\n                 new ResourceModel(\"passwordPolicy\", \"passwordPolicy\").getObject(),\n-                new PropertyModel<String>(realmTO, \"passwordPolicy\"),\n+                new PropertyModel<>(realmTO, \"passwordPolicy\"),\n                 false);\n         passwordPolicy.setChoiceRenderer(new PolicyRenderer(passwordPolicies));\n         passwordPolicy.setChoices(new ArrayList<>(passwordPolicies.getObject().keySet()));\n@@ -156,10 +155,10 @@ public RealmDetails(\n         actionsClassNames.setOutputMarkupId(true);\n         container.add(actionsClassNames);\n \n-        container.add(new AjaxPalettePanel.Builder<String>().build(\"resources\",\n-                new PropertyModel<List<String>>(realmTO, \"resources\"),\n-                new ListModel<>(CollectionUtils.collect(new ResourceRestClient().list(),\n-                        EntityTOUtils.<ResourceTO>keyTransformer(), new ArrayList<String>()))).\n+        container.add(new AjaxPalettePanel.Builder<>().build(\"resources\",\n+                new PropertyModel<>(realmTO, \"resources\"),\n+                new ListModel<>(new ResourceRestClient().list().stream().\n+                        map(EntityTO::getKey).collect(Collectors.toList()))).\n                 setOutputMarkupId(true).\n                 setEnabled(!SyncopeConstants.ROOT_REALM.equals(realmTO.getName())).\n                 setVisible(!SyncopeConstants.ROOT_REALM.equals(realmTO.getName())));"},{"sha":"c4596e6404bf6cd6ef524c3677f97910d1cf4d7c","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypePanel.java","status":"modified","additions":9,"deletions":17,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -27,8 +27,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -156,7 +155,7 @@ protected List<IColumn<AbstractSchemaTO, String>> getColumns() {\n \n             if (clazzField != null) {\n                 if (clazzField.getType().equals(Boolean.class) || clazzField.getType().equals(boolean.class)) {\n-                    columns.add(new BooleanPropertyColumn<AbstractSchemaTO>(new ResourceModel(field), field, field));\n+                    columns.add(new BooleanPropertyColumn<>(new ResourceModel(field), field, field));\n                 } else {\n                     final IColumn<AbstractSchemaTO, String> column = new PropertyColumn<AbstractSchemaTO, String>(\n                             new ResourceModel(field), field, field) {\n@@ -254,22 +253,15 @@ public Iterator<AbstractSchemaTO> iterator(final long first, final long count) {\n             Collections.sort(list, comparator);\n \n             if (SchemaType.PLAIN == this.schemaType) {\n-                final List<String> configurations = new ArrayList<>();\n-\n-                CollectionUtils.collect(confRestClient.list(), new Transformer<AttrTO, String>() {\n-\n-                    @Override\n-                    public String transform(final AttrTO attrTO) {\n-                        return attrTO.getSchema();\n-                    }\n-                }, configurations);\n+                final List<String> configurations = confRestClient.list().stream().\n+                        map(AttrTO::getSchema).collect(Collectors.toList());\n \n                 final List<AbstractSchemaTO> res = new ArrayList<>();\n-                for (AbstractSchemaTO item : list) {\n-                    if (!configurations.contains(item.getKey())) {\n-                        res.add(item);\n-                    }\n-                }\n+                list.stream().\n+                        filter(item -> !configurations.contains(item.getKey())).\n+                        forEachOrdered(item -> {\n+                            res.add(item);\n+                        });\n                 return res.subList((int) first, (int) first + (int) count).iterator();\n             } else {\n                 return list.subList((int) first, (int) first + (int) count).iterator();"},{"sha":"e5d72ea9586f1ec56d6a34fd21d59cb332c2a2af","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/VirSchemaDetails.java","status":"modified","additions":14,"deletions":22,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,9 +23,8 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n@@ -34,11 +33,10 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n-import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.PageReference;\n@@ -66,14 +64,13 @@ public VirSchemaDetails(final String id,\n         super(id, pageReference, schemaTO);\n \n         AjaxCheckBoxPanel readonly = new AjaxCheckBoxPanel(\"readonly\", getString(\"readonly\"),\n-                new PropertyModel<Boolean>(schemaTO, \"readonly\"));\n+                new PropertyModel<>(schemaTO, \"readonly\"));\n         schemaForm.add(readonly);\n \n         final AjaxDropDownChoicePanel<String> resource = new AjaxDropDownChoicePanel<>(\n                 \"resource\", getString(\"resource\"), new PropertyModel<String>(schemaTO, \"resource\"), false).\n                 setNullValid(false);\n-        resource.setChoices(CollectionUtils.collect(resourceRestClient.list(),\n-                EntityTOUtils.<ResourceTO>keyTransformer(), new ArrayList<String>()));\n+        resource.setChoices(resourceRestClient.list().stream().map(EntityTO::getKey).collect(Collectors.toList()));\n         resource.setOutputMarkupId(true);\n         resource.addRequiredLabel();\n         if (resource.getModelObject() != null) {\n@@ -94,7 +91,7 @@ public VirSchemaDetails(final String id,\n         schemaForm.add(anyType);\n \n         final AjaxTextFieldPanel extAttrName = new AjaxTextFieldPanel(\n-                \"extAttrName\", getString(\"extAttrName\"), new PropertyModel<String>(schemaTO, \"extAttrName\"));\n+                \"extAttrName\", getString(\"extAttrName\"), new PropertyModel<>(schemaTO, \"extAttrName\"));\n         extAttrName.setOutputMarkupId(true);\n         extAttrName.addRequiredLabel();\n         if (selectedResource != null) {\n@@ -158,9 +155,9 @@ private void populateAnyTypes(final String resourceKey) {\n \n             if (SyncopeConsoleSession.get().owns(StandardEntitlement.RESOURCE_READ, adminRealm)) {\n                 selectedResource = resource;\n-                for (ProvisionTO provisionTO : selectedResource.getProvisions()) {\n+                selectedResource.getProvisions().forEach(provisionTO -> {\n                     anyTypes.put(provisionTO.getAnyType(), provisionTO.getObjectClass());\n-                }\n+                });\n             }\n         }\n     }\n@@ -170,17 +167,12 @@ private List<String> getExtAttrNames() {\n         connInstanceTO.setKey(selectedResource.getConnector());\n         connInstanceTO.getConf().addAll(selectedResource.getConfOverride());\n \n-        ConnIdObjectClassTO connIdObjectClass = IterableUtils.find(\n-                connRestClient.buildObjectClassInfo(connInstanceTO, false), new Predicate<ConnIdObjectClassTO>() {\n-\n-            @Override\n-            public boolean evaluate(final ConnIdObjectClassTO object) {\n-                return object.getType().equals(anyTypes.get(anyType.getModelObject()));\n-            }\n-        });\n+        Optional<ConnIdObjectClassTO> connIdObjectClass = connRestClient.buildObjectClassInfo(connInstanceTO, false).\n+                stream().filter(object -> object.getType().equals(anyTypes.get(anyType.getModelObject()))).\n+                findAny();\n \n-        return connIdObjectClass == null\n-                ? Collections.<String>emptyList()\n-                : connIdObjectClass.getAttributes();\n+        return connIdObjectClass.isPresent()\n+                ? connIdObjectClass.get().getAttributes()\n+                : Collections.<String>emptyList();\n     }\n }"},{"sha":"f96da972ad9befea3b097a86289fd8e689d0ed2e","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,19 +19,17 @@\n package org.apache.syncope.client.console.panels.search;\n \n import java.io.Serializable;\n-import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.rest.ResourceRestClient;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.search.SearchableFields;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n-import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.event.IEventSink;\n@@ -192,8 +190,7 @@ protected Map<String, PlainSchemaTO> load() {\n \n             @Override\n             protected List<String> load() {\n-                return CollectionUtils.collect(resourceRestClient.list(),\n-                        EntityTOUtils.<ResourceTO>keyTransformer(), new ArrayList<String>());\n+                return resourceRestClient.list().stream().map(EntityTO::getKey).collect(Collectors.toList());\n             }\n         };\n     }"},{"sha":"cc66d40304d248d5fd8759399f4888258570f098","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java","status":"modified","additions":10,"deletions":19,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -26,9 +26,7 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n-import org.apache.commons.collections4.functors.StringValueTransformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.panels.search.SearchClause.Comparator;\n@@ -110,7 +108,7 @@ public SearchClausePanel(\n \n         super(id, name, clause);\n \n-        this.clause = clause == null ? new Model<SearchClause>(null) : clause;\n+        this.clause = clause == null ? new Model<>(null) : clause;\n \n         this.required = required;\n         this.types = types;\n@@ -201,9 +199,8 @@ protected List<String> load() {\n                         return names;\n \n                     case GROUP_MEMBERSHIP:\n-                        final List<String> groups = CollectionUtils.collect(groupNames.getObject().keySet(),\n-                                StringValueTransformer.<String>stringValueTransformer(), new ArrayList<String>());\n-\n+                        final List<String> groups = groupNames.getObject().keySet().\n+                                stream().collect(Collectors.toList());\n                         Collections.sort(groups);\n                         return groups;\n \n@@ -218,14 +215,8 @@ protected List<String> load() {\n                         return resources;\n \n                     case RELATIONSHIP:\n-                        final List<String> relations = CollectionUtils.collect(\n-                                new RelationshipTypeRestClient().list(), new Transformer<RelationshipTypeTO, String>() {\n-\n-                            @Override\n-                            public String transform(final RelationshipTypeTO input) {\n-                                return input.getKey();\n-                            }\n-                        }, new ArrayList<String>());\n+                        final List<String> relations = new RelationshipTypeRestClient().list().stream().\n+                                map(RelationshipTypeTO::getKey).collect(Collectors.toList());\n                         return relations;\n \n                     default:\n@@ -364,7 +355,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         }\n \n         final AjaxDropDownChoicePanel<String> property = new AjaxDropDownChoicePanel<>(\n-                \"property\", \"property\", new PropertyModel<String>(searchClause, \"property\"));\n+                \"property\", \"property\", new PropertyModel<>(searchClause, \"property\"));\n         property.hideLabel().setRequired(required).setOutputMarkupId(true);\n         property.setChoices(properties);\n         property.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n@@ -378,15 +369,15 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         field.add(property);\n \n         final AjaxDropDownChoicePanel<SearchClause.Comparator> comparator = new AjaxDropDownChoicePanel<>(\n-                \"comparator\", \"comparator\", new PropertyModel<SearchClause.Comparator>(searchClause, \"comparator\"));\n+                \"comparator\", \"comparator\", new PropertyModel<>(searchClause, \"comparator\"));\n         comparator.setChoices(comparators);\n         comparator.setNullValid(false).hideLabel().setOutputMarkupId(true);\n         comparator.setRequired(required);\n         comparator.setChoiceRenderer(getComparatorRender(field.getModel()));\n         field.add(comparator);\n \n         final AjaxTextFieldPanel value = new AjaxTextFieldPanel(\n-                \"value\", \"value\", new PropertyModel<String>(searchClause, \"value\"), false);\n+                \"value\", \"value\", new PropertyModel<>(searchClause, \"value\"), false);\n         value.hideLabel().setOutputMarkupId(true);\n         field.add(value);\n \n@@ -426,7 +417,7 @@ public CharSequence getPrecondition(final Component component) {\n         });\n \n         final AjaxDropDownChoicePanel<SearchClause.Type> type = new AjaxDropDownChoicePanel<>(\n-                \"type\", \"type\", new PropertyModel<SearchClause.Type>(searchClause, \"type\"));\n+                \"type\", \"type\", new PropertyModel<>(searchClause, \"type\"));\n         type.setChoices(types).hideLabel().setRequired(required).setOutputMarkupId(true);\n         type.setNullValid(false);\n         type.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {"},{"sha":"efc9de810db57e20894544473c6ab53a5571b983","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/UserSearchPanel.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,10 +20,9 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.rest.RoleRestClient;\n-import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n@@ -62,13 +61,7 @@ protected void populate() {\n \n             @Override\n             protected List<String> load() {\n-                return CollectionUtils.collect(roleRestClient.list(), new Transformer<RoleTO, String>() {\n-\n-                    @Override\n-                    public String transform(final RoleTO input) {\n-                        return input.getKey();\n-                    }\n-                }, new ArrayList<String>());\n+                return roleRestClient.list().stream().map(EntityTO::getKey).collect(Collectors.toList());\n             }\n         };\n     }"},{"sha":"91b24d01e3b0bdeb2e4c2f1ec5ac670d43c1a445","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyModalPanelBuilder.java","status":"modified","additions":6,"deletions":15,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,8 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -41,7 +40,7 @@\n import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n-import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -82,15 +81,7 @@ public class Profile extends AbstractModalPanel<T> {\n \n             @Override\n             protected List<String> load() {\n-                return CollectionUtils.collect(\n-                        new ResourceRestClient().list(),\n-                        new Transformer<ResourceTO, String>() {\n-\n-                    @Override\n-                    public String transform(final ResourceTO input) {\n-                        return input.getKey();\n-                    }\n-                }, new ArrayList<String>());\n+                return new ResourceRestClient().list().stream().map(EntityTO::getKey).collect(Collectors.toList());\n             }\n         };\n \n@@ -103,7 +94,7 @@ public Profile(final T policyTO, final BaseModal<T> modal, final PageReference p\n             final List<Component> fields = new ArrayList<>();\n \n             FieldPanel<String> description = new AjaxTextFieldPanel(\"field\", \"description\",\n-                    new PropertyModel<String>(policyTO, \"description\"), false);\n+                    new PropertyModel<>(policyTO, \"description\"), false);\n             description.setRequired(true);\n             fields.add(description);\n \n@@ -117,7 +108,7 @@ public Profile(final T policyTO, final BaseModal<T> modal, final PageReference p\n                 fields.add(new AjaxCheckBoxPanel(\n                         \"field\",\n                         \"propagateSuspension\",\n-                        new PropertyModel<Boolean>(policyTO, \"propagateSuspension\"),\n+                        new PropertyModel<>(policyTO, \"propagateSuspension\"),\n                         false));\n \n                 fields.add(new AjaxPalettePanel.Builder<String>().setName(\"passthroughResources\").build(\n@@ -136,7 +127,7 @@ public Profile(final T policyTO, final BaseModal<T> modal, final PageReference p\n                 fields.add(new AjaxCheckBoxPanel(\n                         \"field\",\n                         \"allowNullPassword\",\n-                        new PropertyModel<Boolean>(policyTO, \"allowNullPassword\"),\n+                        new PropertyModel<>(policyTO, \"allowNullPassword\"),\n                         false));\n             }\n "},{"sha":"6375bac380d8d440db95fbb09a1e2e1d92e5837a","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java","status":"modified","additions":8,"deletions":19,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -24,9 +24,7 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n@@ -102,7 +100,7 @@ protected PolicyRuleDirectoryPanel(\n     protected List<IColumn<PolicyRuleWrapper, String>> getColumns() {\n         final List<IColumn<PolicyRuleWrapper, String>> columns = new ArrayList<>();\n \n-        columns.add(new PropertyColumn<PolicyRuleWrapper, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"ruleConf\", this), \"name\", \"name\"));\n \n         columns.add(new AbstractColumn<PolicyRuleWrapper, String>(\n@@ -160,13 +158,9 @@ public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper igno\n                 final RuleConf rule = model.getObject().getConf();\n                 try {\n                     final T actual = restClient.getPolicy(policy);\n-                    CollectionUtils.filter(getRuleConf(actual), new Predicate<RuleConf>() {\n-\n-                        @Override\n-                        public boolean evaluate(final RuleConf object) {\n-                            return !object.getName().equals(rule.getName());\n-                        }\n-                    });\n+                    List<RuleConf> conf = getRuleConf(actual);\n+                    conf.removeAll(conf.stream().\n+                            filter(object -> object.getName().equals(rule.getName())).collect(Collectors.toList()));\n                     restClient.updatePolicy(actual);\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     customActionOnFinishCallback(target);\n@@ -235,14 +229,9 @@ public PolicyRuleDataProvider(final int paginatorRows) {\n         public Iterator<PolicyRuleWrapper> iterator(final long first, final long count) {\n             final T actual = restClient.getPolicy(policy);\n \n-            final ArrayList<PolicyRuleWrapper> rules = CollectionUtils.collect(getRuleConf(actual),\n-                    new Transformer<RuleConf, PolicyRuleWrapper>() {\n-\n-                @Override\n-                public PolicyRuleWrapper transform(final RuleConf input) {\n-                    return new PolicyRuleWrapper(input.getName()).setName(input.getName()).setConf(input);\n-                }\n-            }, new ArrayList<PolicyRuleWrapper>());\n+            final List<PolicyRuleWrapper> rules = getRuleConf(actual).stream().map(input\n+                    -> new PolicyRuleWrapper(input.getName()).setName(input.getName()).setConf(input)).\n+                    collect(Collectors.toList());\n \n             Collections.sort(rules, comparator);\n             return rules.subList((int) first, (int) (first + count)).iterator();"},{"sha":"b9a36a99fefb39629e8a676752159713d70050e8","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleWizardBuilder.java","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,8 +22,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.panels.BeanPanel;\n import org.apache.syncope.client.console.rest.PolicyRestClient;\n@@ -80,13 +79,8 @@ protected Serializable onApplyInternal(final PolicyRuleDirectoryPanel.PolicyRule\n         if (modelObject.isNew()) {\n             composable.getRuleConfs().add(modelObject.getConf());\n         } else {\n-            CollectionUtils.filter(composable.getRuleConfs(), new Predicate<RuleConf>() {\n-\n-                @Override\n-                public boolean evaluate(final RuleConf object) {\n-                    return !object.getName().equals(modelObject.getOldName());\n-                }\n-            });\n+            composable.getRuleConfs().removeAll(composable.getRuleConfs().stream().\n+                    filter(conf -> conf.getName().equals(modelObject.getOldName())).collect(Collectors.toList()));\n             composable.getRuleConfs().add(modelObject.getConf());\n         }\n \n@@ -109,7 +103,7 @@ public class Profile extends WizardStep {\n         public Profile(final PolicyRuleDirectoryPanel.PolicyRuleWrapper rule) {\n \n             final AjaxTextFieldPanel name = new AjaxTextFieldPanel(\n-                    \"name\", \"rule\", new PropertyModel<String>(rule, \"name\"), false);\n+                    \"name\", \"rule\", new PropertyModel<>(rule, \"name\"), false);\n             name.addRequiredLabel();\n             add(name);\n "},{"sha":"19dd7baeca73412489e095449448fa646dedbbac","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicySpecModalPanel.java","status":"modified","additions":21,"deletions":33,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -26,8 +26,7 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -42,7 +41,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiPanel;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.SchemaType;\n@@ -74,25 +73,20 @@ public PolicySpecModalPanel(\n         add(new AjaxDropDownChoicePanel<>(\n                 \"conflictResolutionAction\",\n                 \"conflictResolutionAction\",\n-                new PropertyModel<ConflictResolutionAction>(policyTO.getSpecification(), \"conflictResolutionAction\")).\n-                setChoices(Arrays.asList(ConflictResolutionAction.values())));\n+                new PropertyModel<>(policyTO.getSpecification(), \"conflictResolutionAction\")).\n+                setChoices(Arrays.asList((Serializable[]) ConflictResolutionAction.values())));\n \n         model = new PropertyModel<List<CorrelationRule>>(policyTO.getSpecification(), \"correlationRules\") {\n \n             private static final long serialVersionUID = -8168676563540297301L;\n \n-            private List<CorrelationRule> rules = CollectionUtils.collect(\n-                    policyTO.getSpecification().getCorrelationRules() == null\n-                    ? Collections.<String>emptySet()\n-                    : policyTO.getSpecification().getCorrelationRules().keySet(),\n-                    new Transformer<String, CorrelationRule>() {\n-\n-                @Override\n-                public CorrelationRule transform(final String input) {\n-                    return new CorrelationRule(\n-                            input, policyTO.getSpecification().getCorrelationRules().get(input));\n-                }\n-            }, new ArrayList<CorrelationRule>());\n+            private List<CorrelationRule> rules =\n+                    (policyTO.getSpecification().getCorrelationRules() == null\n+                            ? Collections.<String>emptySet()\n+                            : policyTO.getSpecification().getCorrelationRules().keySet()).stream().\n+                            map(rule -> new CorrelationRule(\n+                            rule, policyTO.getSpecification().getCorrelationRules().get(rule))).\n+                            collect(Collectors.toList());\n \n             @Override\n             public List<CorrelationRule> getObject() {\n@@ -129,9 +123,9 @@ protected CorrelationRulePanel getItemPanel(final ListItem<CorrelationRule> item\n     public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n         try {\n             getItem().getSpecification().getCorrelationRules().clear();\n-            for (CorrelationRule rule : model.getObject()) {\n+            model.getObject().forEach(rule -> {\n                 getItem().getSpecification().getCorrelationRules().put(rule.getAny(), rule.getRule());\n-            }\n+            });\n             restClient.updatePolicy(getItem());\n             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n             this.modal.close(target);\n@@ -276,20 +270,14 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n         private static List<String> getPlainSchemas(final CorrelationRule rule) {\n             final List<String> choices = StringUtils.isEmpty(rule.getAny())\n-                    ? new ArrayList<String>()\n-                    : CollectionUtils.collect(\n-                            new SchemaRestClient().getSchemas(SchemaType.PLAIN,\n-                                    rule.getAny().equals(AnyTypeKind.USER.name())\n-                                    ? AnyTypeKind.USER\n-                                    : rule.getAny().equals(AnyTypeKind.GROUP.name())\n-                                    ? AnyTypeKind.GROUP\n-                                    : AnyTypeKind.ANY_OBJECT), new Transformer<AbstractSchemaTO, String>() {\n-\n-                        @Override\n-                        public String transform(final AbstractSchemaTO input) {\n-                            return input.getKey();\n-                        }\n-                    }, new ArrayList<String>());\n+                    ? new ArrayList<>()\n+                    : new SchemaRestClient().getSchemas(SchemaType.PLAIN,\n+                            rule.getAny().equals(AnyTypeKind.USER.name())\n+                            ? AnyTypeKind.USER\n+                            : rule.getAny().equals(AnyTypeKind.GROUP.name())\n+                            ? AnyTypeKind.GROUP\n+                            : AnyTypeKind.ANY_OBJECT).stream().map(EntityTO::getKey).\n+                            collect(Collectors.toList());\n \n             Collections.sort(choices);\n             return choices;"},{"sha":"ffb24e26ad57144a46e3524744039526bfd4b15e","filename":"client/console/src/main/java/org/apache/syncope/client/console/reports/ReportWizardBuilder.java","status":"modified","additions":8,"deletions":16,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportWizardBuilder.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,17 +19,15 @@\n package org.apache.syncope.client.console.reports;\n \n import java.io.Serializable;\n-import java.util.ArrayList;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.rest.ReportRestClient;\n import org.apache.syncope.client.console.tasks.CrontabPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n-import org.apache.syncope.common.lib.to.ReportTemplateTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.wizard.WizardModel;\n import org.apache.wicket.extensions.wizard.WizardStep;\n@@ -72,28 +70,22 @@ public class Profile extends WizardStep {\n         public Profile(final ReportTO reportTO) {\n \n             AjaxTextFieldPanel name = new AjaxTextFieldPanel(\n-                    \"name\", \"name\", new PropertyModel<String>(reportTO, \"name\"), false);\n+                    \"name\", \"name\", new PropertyModel<>(reportTO, \"name\"), false);\n             name.addRequiredLabel();\n             name.setEnabled(true);\n             add(name);\n \n             final AjaxDropDownChoicePanel<String> template = new AjaxDropDownChoicePanel<>(\n                     \"template\", getString(\"template\"),\n-                    new PropertyModel<String>(reportTO, \"template\"));\n-            template.setChoices(CollectionUtils.collect(\n-                    restClient.listTemplates(), new Transformer<ReportTemplateTO, String>() {\n-\n-                @Override\n-                public String transform(final ReportTemplateTO input) {\n-                    return input.getKey();\n-                }\n-            }, new ArrayList<String>()));\n+                    new PropertyModel<>(reportTO, \"template\"));\n+            template.setChoices(restClient.listTemplates().stream().\n+                    map(EntityTO::getKey).collect(Collectors.toList()));\n \n             template.addRequiredLabel();\n             add(template);\n \n             AjaxCheckBoxPanel active = new AjaxCheckBoxPanel(\n-                    \"active\", \"active\", new PropertyModel<Boolean>(reportTO, \"active\"), false);\n+                    \"active\", \"active\", new PropertyModel<>(reportTO, \"active\"), false);\n             add(active);\n         }\n     }\n@@ -104,7 +96,7 @@ public class Schedule extends WizardStep {\n \n         public Schedule(final ReportTO reportTO) {\n             crontabPanel = new CrontabPanel(\n-                    \"schedule\", new PropertyModel<String>(reportTO, \"cronExpression\"), reportTO.getCronExpression());\n+                    \"schedule\", new PropertyModel<>(reportTO, \"cronExpression\"), reportTO.getCronExpression());\n             add(crontabPanel);\n         }\n "},{"sha":"7a2b4edf17ce468cd6e541c3da97bb715de70fbf","filename":"client/console/src/main/java/org/apache/syncope/client/console/reports/ReportletDirectoryPanel.java","status":"modified","additions":8,"deletions":20,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -26,9 +26,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -104,7 +102,7 @@ public ReportletDirectoryPanel(\n     protected List<IColumn<ReportletWrapper, String>> getColumns() {\n         final List<IColumn<ReportletWrapper, String>> columns = new ArrayList<>();\n \n-        columns.add(new PropertyColumn<ReportletWrapper, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"reportlet\", this), \"name\", \"name\"));\n \n         columns.add(new AbstractColumn<ReportletWrapper, String>(\n@@ -117,6 +115,7 @@ public void populateItem(\n                     final Item<ICellPopulator<ReportletWrapper>> cellItem,\n                     final String componentId,\n                     final IModel<ReportletWrapper> rowModel) {\n+\n                 cellItem.add(new Label(componentId, rowModel.getObject().getConf().getClass().getName()));\n             }\n         });\n@@ -164,13 +163,8 @@ public void onClick(final AjaxRequestTarget target, final ReportletWrapper ignor\n                 final ReportletConf reportlet = model.getObject().getConf();\n                 try {\n                     final ReportTO actual = restClient.read(report);\n-                    CollectionUtils.filter(actual.getReportletConfs(), new Predicate<ReportletConf>() {\n-\n-                        @Override\n-                        public boolean evaluate(final ReportletConf object) {\n-                            return !object.getName().equals(reportlet.getName());\n-                        }\n-                    });\n+                    actual.getReportletConfs().removeAll(actual.getReportletConfs().stream().\n+                            filter(conf -> conf.getName().equals(reportlet.getName())).collect(Collectors.toList()));\n                     restClient.update(actual);\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     customActionOnFinishCallback(target);\n@@ -239,15 +233,9 @@ public ReportDataProvider(final int paginatorRows) {\n         public Iterator<ReportletWrapper> iterator(final long first, final long count) {\n             final ReportTO actual = restClient.read(report);\n \n-            final ArrayList<ReportletWrapper> reportlets = CollectionUtils.collect(\n-                    actual.getReportletConfs(),\n-                    new Transformer<AbstractReportletConf, ReportletWrapper>() {\n-\n-                @Override\n-                public ReportletWrapper transform(final AbstractReportletConf input) {\n-                    return new ReportletWrapper(input.getName()).setName(input.getName()).setConf(input);\n-                }\n-            }, new ArrayList<ReportletWrapper>());\n+            final List<ReportletWrapper> reportlets = actual.getReportletConfs().stream().\n+                    map(conf -> new ReportletWrapper(conf.getName()).setName(conf.getName()).setConf(conf)).\n+                    collect(Collectors.toList());\n \n             Collections.sort(reportlets, comparator);\n             return reportlets.subList((int) first, (int) (first + count)).iterator();"},{"sha":"cf69215dab2ec874c734f4acb508c305af43b58a","filename":"client/console/src/main/java/org/apache/syncope/client/console/reports/ReportletWizardBuilder.java","status":"modified","additions":8,"deletions":19,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,14 +20,9 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.lang3.tuple.Pair;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.panels.BeanPanel;\n-import org.apache.syncope.client.console.panels.search.SearchClause;\n import org.apache.syncope.client.console.panels.search.SearchUtils;\n import org.apache.syncope.client.console.rest.ReportRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n@@ -41,7 +36,6 @@\n import org.apache.wicket.model.PropertyModel;\n import org.springframework.beans.BeanWrapper;\n import org.springframework.beans.PropertyAccessorFactory;\n-import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n import org.apache.wicket.model.LoadableDetachableModel;\n \n public class ReportletWizardBuilder extends AjaxWizardBuilder<ReportletDirectoryPanel.ReportletWrapper> {\n@@ -69,23 +63,18 @@ protected Serializable onApplyInternal(final ReportletDirectoryPanel.ReportletWr\n         if (modelObject.isNew()) {\n             reportTO.getReportletConfs().add(modelObject.getConf());\n         } else {\n-            CollectionUtils.filter(\n-                    reportTO.getReportletConfs(), new Predicate<AbstractReportletConf>() {\n-\n-                @Override\n-                public boolean evaluate(final AbstractReportletConf object) {\n-                    return !object.getName().equals(modelObject.getOldName());\n-                }\n-            });\n+            reportTO.getReportletConfs().removeAll(\n+                    reportTO.getReportletConfs().stream().\n+                            filter(object -> object.getName().equals(modelObject.getOldName())).\n+                            collect(Collectors.toList()));\n             reportTO.getReportletConfs().add(modelObject.getConf());\n         }\n \n         BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(modelObject.getConf());\n-        for (Map.Entry<String, Pair<AbstractFiqlSearchConditionBuilder, List<SearchClause>>> entry\n-                : modelObject.getSCondWrapper().entrySet()) {\n+        modelObject.getSCondWrapper().entrySet().forEach(entry -> {\n             wrapper.setPropertyValue(entry.getKey(),\n                     SearchUtils.buildFIQL(entry.getValue().getRight(), entry.getValue().getLeft()));\n-        }\n+        });\n \n         restClient.update(reportTO);\n         return modelObject;\n@@ -106,7 +95,7 @@ public class Profile extends WizardStep {\n         public Profile(final ReportletDirectoryPanel.ReportletWrapper reportlet) {\n \n             final AjaxTextFieldPanel name = new AjaxTextFieldPanel(\n-                    \"name\", \"reportlet\", new PropertyModel<String>(reportlet, \"name\"), false);\n+                    \"name\", \"reportlet\", new PropertyModel<>(reportlet, \"name\"), false);\n             name.addRequiredLabel();\n             name.setEnabled(true);\n             add(name);"},{"sha":"b76bd9e161b9df32001683cc512946546145b90e","filename":"client/console/src/main/java/org/apache/syncope/client/console/resources/AbstractWorkflowResource.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FAbstractWorkflowResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FAbstractWorkflowResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FAbstractWorkflowResource.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.client.console.resources;\n \n import javax.ws.rs.NotFoundException;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.rest.WorkflowRestClient;\n import org.apache.syncope.common.lib.to.WorkflowDefinitionTO;\n@@ -42,13 +40,8 @@ protected WorkflowDefinitionTO getWorkflowDefinition(final Attributes attributes\n                 attributes.getRequest().getQueryParameters().getParameterValue(Constants.MODEL_ID_PARAM);\n \n         WorkflowDefinitionTO workflowDefinition = modelId == null || modelId.isNull() ? null\n-                : IterableUtils.find(restClient.getDefinitions(), new Predicate<WorkflowDefinitionTO>() {\n-\n-                    @Override\n-                    public boolean evaluate(final WorkflowDefinitionTO object) {\n-                        return modelId.toString().equals(object.getModelId());\n-                    }\n-                });\n+                : restClient.getDefinitions().stream().\n+                        filter(object -> modelId.toString().equals(object.getModelId())).findAny().orElse(null);\n         if (workflowDefinition == null) {\n             throw new NotFoundException(\"Workflow definition with modelId \" + modelId);\n         }"},{"sha":"5db9f07445e55c0c5b6b83bf054cbd12a54bfe6c","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AnyTypeRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,7 +22,7 @@\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n-import org.apache.commons.collections4.ComparatorUtils;\n+import org.apache.commons.lang3.ObjectUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n@@ -94,7 +94,7 @@ public int compare(final AnyTypeTO o1, final AnyTypeTO o2) {\n             if (o2.getKind() == AnyTypeKind.GROUP) {\n                 return 1;\n             }\n-            return ComparatorUtils.<String>naturalComparator().compare(o1.getKey(), o2.getKey());\n+            return ObjectUtils.compare(o1.getKey(), o2.getKey());\n         }\n     }\n \n@@ -122,7 +122,7 @@ public int compare(final String o1, final String o2) {\n             if (AnyTypeKind.GROUP.name().equals(2)) {\n                 return 1;\n             }\n-            return ComparatorUtils.<String>naturalComparator().compare(o1, o2);\n+            return ObjectUtils.compare(o1, o2);\n         }\n     }\n }"},{"sha":"729ea538e43e6280a0530f77d7d381fb35bbb4cf","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorRestClient.java","status":"modified","additions":17,"deletions":29,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,11 +22,9 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -71,14 +69,8 @@ public List<String> getObjectClasses(final String connectorKey) {\n         ConnectorService service = getService(ConnectorService.class);\n         ConnInstanceTO connInstance = service.read(connectorKey, SyncopeConsoleSession.get().getLocale().getLanguage());\n         if (connInstance != null) {\n-            CollectionUtils.collect(service.buildObjectClassInfo(connInstance, true),\n-                    new Transformer<ConnIdObjectClassTO, String>() {\n-\n-                @Override\n-                public String transform(final ConnIdObjectClassTO input) {\n-                    return input.getType();\n-                }\n-            }, result);\n+            result.addAll(service.buildObjectClassInfo(connInstance, true).stream().\n+                    map(input -> input.getType()).collect(Collectors.toList()));\n         }\n \n         return result;\n@@ -92,16 +84,11 @@ public List<String> getExtAttrNames(\n         connInstanceTO.getConf().addAll(conf);\n \n         // SYNCOPE-156: use provided info to give schema names (and type!) by ObjectClass\n-        ConnIdObjectClassTO connIdObjectClass = IterableUtils.find(\n-                buildObjectClassInfo(connInstanceTO, false), new Predicate<ConnIdObjectClassTO>() {\n+        Optional<ConnIdObjectClassTO> connIdObjectClass = buildObjectClassInfo(connInstanceTO, false).stream().\n+                filter(object -> object.getType().equalsIgnoreCase(objectClass)).\n+                findAny();\n \n-            @Override\n-            public boolean evaluate(final ConnIdObjectClassTO object) {\n-                return object.getType().equalsIgnoreCase(objectClass);\n-            }\n-        });\n-\n-        return connIdObjectClass == null ? new ArrayList<String>() : connIdObjectClass.getAttributes();\n+        return connIdObjectClass.isPresent() ? connIdObjectClass.get().getAttributes() : new ArrayList<>();\n     }\n \n     /**\n@@ -152,22 +139,23 @@ public List<ConnBundleTO> getAllBundles() {\n     private List<ConnConfProperty> filterProperties(final Collection<ConnConfProperty> properties) {\n         List<ConnConfProperty> newProperties = new ArrayList<>();\n \n-        for (ConnConfProperty property : properties) {\n+        properties.stream().map(property -> {\n             ConnConfProperty prop = new ConnConfProperty();\n             prop.setSchema(property.getSchema());\n             prop.setOverridable(property.isOverridable());\n-\n             final List<Object> parsed = new ArrayList<>();\n             if (property.getValues() != null) {\n-                for (Object obj : property.getValues()) {\n-                    if (obj != null && !obj.toString().isEmpty()) {\n-                        parsed.add(obj);\n-                    }\n-                }\n+                property.getValues().stream().\n+                        filter(obj -> (obj != null && !obj.toString().isEmpty())).\n+                        forEachOrdered((obj) -> {\n+                            parsed.add(obj);\n+                        });\n             }\n             prop.getValues().addAll(parsed);\n+            return prop;\n+        }).forEachOrdered(prop -> {\n             newProperties.add(prop);\n-        }\n+        });\n         return newProperties;\n     }\n "},{"sha":"a4c7825af94a702cee020164363e4e8868704987","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/LoggerRestClient.java","status":"modified","additions":13,"deletions":26,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -25,9 +25,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.ComparatorUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.ObjectUtils;\n import org.apache.syncope.common.lib.log.EventCategoryTO;\n import org.apache.syncope.common.lib.log.LogAppender;\n import org.apache.syncope.common.lib.log.LogStatementTO;\n@@ -43,37 +42,25 @@ public class LoggerRestClient extends BaseRestClient {\n     private static final long serialVersionUID = 4579786978763032240L;\n \n     public List<String> listMemoryAppenders() {\n-        return CollectionUtils.collect(getService(LoggerService.class).memoryAppenders(),\n-                new Transformer<LogAppender, String>() {\n-\n-            @Override\n-            public String transform(final LogAppender input) {\n-                return input.getName();\n-            }\n-        }, new ArrayList<String>());\n+        return getService(LoggerService.class).memoryAppenders().stream().\n+                map(LogAppender::getName).collect(Collectors.toList());\n     }\n \n     public List<LogStatementTO> getLastLogStatements(final String appender, final long lastStatementTime) {\n         List<LogStatementTO> result = new ArrayList<>();\n-        for (LogStatementTO statement : getService(LoggerService.class).getLastLogStatements(appender)) {\n-            if (statement.getTimeMillis() > lastStatementTime) {\n-                result.add(statement);\n-            }\n-        }\n+        getService(LoggerService.class).getLastLogStatements(appender).stream().\n+                filter(statement -> statement.getTimeMillis() > lastStatementTime).\n+                forEachOrdered(statement -> {\n+                    result.add(statement);\n+                });\n \n         return result;\n     }\n \n     public List<LoggerTO> listLogs() {\n         List<LoggerTO> logs = getService(LoggerService.class).list(LoggerType.LOG);\n-        Collections.sort(logs, ComparatorUtils.transformedComparator(\n-                ComparatorUtils.<String>naturalComparator(), new Transformer<LoggerTO, String>() {\n+        Collections.sort(logs, (o1, o2) -> ObjectUtils.compare(o1.getKey(), o2.getKey()));\n \n-            @Override\n-            public String transform(final LoggerTO input) {\n-                return input.getKey();\n-            }\n-        }));\n         return logs;\n     }\n \n@@ -83,13 +70,13 @@ public List<AuditLoggerName> listAudits() {\n \n     public Map<String, Set<AuditLoggerName>> listAuditsByCategory() {\n         Map<String, Set<AuditLoggerName>> result = new HashMap<>();\n-        for (AuditLoggerName audit : listAudits()) {\n+        listAudits().forEach(audit -> {\n             if (!result.containsKey(audit.getCategory())) {\n-                result.put(audit.getCategory(), new HashSet<AuditLoggerName>());\n+                result.put(audit.getCategory(), new HashSet<>());\n             }\n \n             result.get(audit.getCategory()).add(audit);\n-        }\n+        });\n \n         return result;\n     }"},{"sha":"e1f8f787cef242b2965a5b6f4899eb1bc2ab4c06","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ResourceRestClient.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,10 +20,9 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.List;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.collections4.ComparatorUtils;\n+import org.apache.commons.lang3.ObjectUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.ResourceDeassociationPatch;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n@@ -95,13 +94,7 @@ public List<ResourceTO> list() {\n         List<ResourceTO> resources = Collections.emptyList();\n         try {\n             resources = getService(ResourceService.class).list();\n-            Collections.sort(resources, new Comparator<ResourceTO>() {\n-\n-                @Override\n-                public int compare(final ResourceTO o1, final ResourceTO o2) {\n-                    return ComparatorUtils.<String>naturalComparator().compare(o1.getKey(), o2.getKey());\n-                }\n-            });\n+            Collections.sort(resources, (o1, o2) -> ObjectUtils.compare(o1.getKey(), o2.getKey()));\n         } catch (Exception e) {\n             LOG.error(\"Could not fetch the Resource list\", e);\n         }"},{"sha":"c64846d603ec0ac7bac40dfd846f2225ae7a37b0","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/SchemaRestClient.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,13 +19,14 @@\n package org.apache.syncope.client.console.rest;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -99,11 +100,10 @@ public <T extends AbstractSchemaTO> List<T> getSchemas(final SchemaType schemaTy\n     }\n \n     public List<String> getSchemaNames(final SchemaType schemaType) {\n-        List<String> schemaNames = new ArrayList<>();\n+        List<String> schemaNames = Collections.emptyList();\n \n         try {\n-            CollectionUtils.collect(getSchemas(schemaType),\n-                    EntityTOUtils.<AbstractSchemaTO>keyTransformer(), schemaNames);\n+            schemaNames = getSchemas(schemaType).stream().map(EntityTO::getKey).collect(Collectors.toList());\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While getting all user schema names\", e);\n         }"},{"sha":"0596ea303fe782b41ae2e82fd5b2ae80c5701939","filename":"client/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusModal.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusModal.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,13 +18,11 @@\n  */\n package org.apache.syncope.client.console.status;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.DirectoryDataProvider;\n-import org.apache.syncope.client.console.commons.SerializableTransformer;\n import org.apache.syncope.client.console.commons.status.StatusBean;\n import org.apache.syncope.client.console.panels.DirectoryPanel;\n import org.apache.syncope.client.console.panels.MultilevelPanel;\n@@ -52,14 +50,8 @@ public ResourceStatusModal(\n \n         super(baseModal, pageReference, resource, null, false);\n \n-        List<String> availableAnyTypes = CollectionUtils.collect(\n-                resource.getProvisions(), new SerializableTransformer<ProvisionTO, String>() {\n-\n-            @Override\n-            public String transform(final ProvisionTO provision) {\n-                return provision.getAnyType();\n-            }\n-        }, new ArrayList<String>());\n+        List<String> availableAnyTypes = resource.getProvisions().stream().\n+                map(ProvisionTO::getAnyType).collect(Collectors.toList());\n         Collections.sort(availableAnyTypes, new AnyTypeRestClient.AnyTypeKeyComparator());\n \n         AjaxDropDownChoicePanel<String> anyTypes ="},{"sha":"0bded4b27221dc119c9b4ed13db553850b30dc1a","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/PushTaskWrapper.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskWrapper.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,7 +22,6 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.client.console.panels.search.SearchClause;\n import org.apache.syncope.client.console.panels.search.SearchUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n@@ -57,7 +56,7 @@ public Map<String, String> getFilters() {\n         Map<String, String> filters = new HashMap<>();\n \n         for (Map.Entry<String, List<SearchClause>> entry : getFilterClauses().entrySet()) {\n-            if (CollectionUtils.isNotEmpty(entry.getValue())) {\n+            if (!entry.getValue().isEmpty()) {\n                 AbstractFiqlSearchConditionBuilder bld;\n                 switch (entry.getKey()) {\n                     case \"USER\":"},{"sha":"368b419680fea6bd1eac1e303f78213c0203a267","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder.java","status":"modified","additions":17,"deletions":25,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,8 +23,7 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.rest.RealmRestClient;\n@@ -69,15 +68,8 @@\n \n         @Override\n         protected List<String> load() {\n-            List<String> result = CollectionUtils.collect(\n-                    new RealmRestClient().list(), new Transformer<RealmTO, String>() {\n-\n-                @Override\n-                public String transform(final RealmTO realm) {\n-                    return realm.getFullPath();\n-                }\n-            }, new ArrayList<String>());\n-\n+            List<String> result = new RealmRestClient().list().stream().\n+                    map(RealmTO::getFullPath).collect(Collectors.toList());\n             Collections.sort(result);\n \n             return result;\n@@ -160,24 +152,24 @@ protected List<String> load() {\n         };\n \n         public Profile(final SchedTaskTO taskTO) {\n-            AjaxTextFieldPanel name = new AjaxTextFieldPanel(\"name\", \"name\", new PropertyModel<String>(taskTO, \"name\"),\n+            AjaxTextFieldPanel name = new AjaxTextFieldPanel(\"name\", \"name\", new PropertyModel<>(taskTO, \"name\"),\n                     false);\n             name.addRequiredLabel();\n             name.setEnabled(true);\n             add(name);\n \n             AjaxTextFieldPanel description = new AjaxTextFieldPanel(\n-                    \"description\", \"description\", new PropertyModel<String>(taskTO, \"description\"), false);\n+                    \"description\", \"description\", new PropertyModel<>(taskTO, \"description\"), false);\n             description.setEnabled(true);\n             add(description);\n \n-            AjaxCheckBoxPanel active = new AjaxCheckBoxPanel(\"active\", \"active\", new PropertyModel<Boolean>(taskTO,\n-                    \"active\"), false);\n+            AjaxCheckBoxPanel active = new AjaxCheckBoxPanel(\"active\", \"active\", new PropertyModel<>(taskTO, \"active\"),\n+                    false);\n             add(active);\n \n             AjaxDropDownChoicePanel<String> jobDelegateClassName = new AjaxDropDownChoicePanel<>(\n                     \"jobDelegateClassName\", \"jobDelegateClassName\",\n-                    new PropertyModel<String>(taskTO, \"jobDelegateClassName\"), false);\n+                    new PropertyModel<>(taskTO, \"jobDelegateClassName\"), false);\n             jobDelegateClassName.setChoices(taskJobClasses.getObject());\n             jobDelegateClassName.addRequiredLabel();\n             jobDelegateClassName.setEnabled(taskTO.getKey() == null);\n@@ -198,7 +190,7 @@ public Profile(final SchedTaskTO taskTO) {\n             }\n \n             final AjaxDropDownChoicePanel<PullMode> pullMode = new AjaxDropDownChoicePanel<>(\n-                    \"pullMode\", \"pullMode\", new PropertyModel<PullMode>(taskTO, \"pullMode\"), false);\n+                    \"pullMode\", \"pullMode\", new PropertyModel<>(taskTO, \"pullMode\"), false);\n             pullMode.setChoices(Arrays.asList(PullMode.values()));\n             if (taskTO instanceof PullTaskTO) {\n                 pullMode.addRequiredLabel();\n@@ -208,7 +200,7 @@ public Profile(final SchedTaskTO taskTO) {\n \n             final AjaxDropDownChoicePanel<String> reconciliationFilterBuilderClassName = new AjaxDropDownChoicePanel<>(\n                     \"reconciliationFilterBuilderClassName\", \"reconciliationFilterBuilderClassName\",\n-                    new PropertyModel<String>(taskTO, \"reconciliationFilterBuilderClassName\"), false);\n+                    new PropertyModel<>(taskTO, \"reconciliationFilterBuilderClassName\"), false);\n             reconciliationFilterBuilderClassName.setChoices(reconciliationFilterBuilderClasses.getObject());\n             reconciliationFilterBuilderClassName.setStyleSheet(\"ui-widget-content ui-corner-all long_dynamicsize\");\n             reconciliationFilterBuilderClassName.setEnabled(isFiltered);\n@@ -281,30 +273,30 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             provisioningTaskSpecifics.add(actionsClassNames);\n \n             AjaxDropDownChoicePanel<MatchingRule> matchingRule = new AjaxDropDownChoicePanel<>(\n-                    \"matchingRule\", \"matchingRule\", new PropertyModel<MatchingRule>(taskTO, \"matchingRule\"), false);\n+                    \"matchingRule\", \"matchingRule\", new PropertyModel<>(taskTO, \"matchingRule\"), false);\n             matchingRule.setChoices(Arrays.asList(MatchingRule.values()));\n             provisioningTaskSpecifics.add(matchingRule);\n \n             AjaxDropDownChoicePanel<UnmatchingRule> unmatchingRule = new AjaxDropDownChoicePanel<>(\n-                    \"unmatchingRule\", \"unmatchingRule\", new PropertyModel<UnmatchingRule>(taskTO, \"unmatchingRule\"),\n+                    \"unmatchingRule\", \"unmatchingRule\", new PropertyModel<>(taskTO, \"unmatchingRule\"),\n                     false);\n             unmatchingRule.setChoices(Arrays.asList(UnmatchingRule.values()));\n             provisioningTaskSpecifics.add(unmatchingRule);\n \n             AjaxCheckBoxPanel performCreate = new AjaxCheckBoxPanel(\n-                    \"performCreate\", \"performCreate\", new PropertyModel<Boolean>(taskTO, \"performCreate\"), false);\n+                    \"performCreate\", \"performCreate\", new PropertyModel<>(taskTO, \"performCreate\"), false);\n             provisioningTaskSpecifics.add(performCreate);\n \n             AjaxCheckBoxPanel performUpdate = new AjaxCheckBoxPanel(\n-                    \"performUpdate\", \"performUpdate\", new PropertyModel<Boolean>(taskTO, \"performUpdate\"), false);\n+                    \"performUpdate\", \"performUpdate\", new PropertyModel<>(taskTO, \"performUpdate\"), false);\n             provisioningTaskSpecifics.add(performUpdate);\n \n             AjaxCheckBoxPanel performDelete = new AjaxCheckBoxPanel(\n-                    \"performDelete\", \"performDelete\", new PropertyModel<Boolean>(taskTO, \"performDelete\"), false);\n+                    \"performDelete\", \"performDelete\", new PropertyModel<>(taskTO, \"performDelete\"), false);\n             provisioningTaskSpecifics.add(performDelete);\n \n             AjaxCheckBoxPanel syncStatus = new AjaxCheckBoxPanel(\n-                    \"syncStatus\", \"syncStatus\", new PropertyModel<Boolean>(taskTO, \"syncStatus\"), false);\n+                    \"syncStatus\", \"syncStatus\", new PropertyModel<>(taskTO, \"syncStatus\"), false);\n             provisioningTaskSpecifics.add(syncStatus);\n         }\n     }\n@@ -315,7 +307,7 @@ public class Schedule extends WizardStep {\n \n         public Schedule(final SchedTaskTO taskTO) {\n             crontabPanel = new CrontabPanel(\n-                    \"schedule\", new PropertyModel<String>(taskTO, \"cronExpression\"), taskTO.getCronExpression());\n+                    \"schedule\", new PropertyModel<>(taskTO, \"cronExpression\"), taskTO.getCronExpression());\n             add(crontabPanel);\n         }\n     }"},{"sha":"c92f0ea795c44fba3c482e3fefac934d894c1ecb","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -28,7 +28,7 @@\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n@@ -42,8 +42,8 @@\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.Component;\n@@ -372,7 +372,7 @@ protected void populateItem(final ListItem<ConnInstanceTO> item) {\n         // -----------------------------------------\n         final Collection<String> administrableConns = new HashSet<>();\n         for (List<ConnInstanceTO> connInstances : connModel.getObject().values()) {\n-            administrableConns.addAll(CollectionUtils.collect(connInstances, EntityTOUtils.keyTransformer()));\n+            administrableConns.addAll(connInstances.stream().map(EntityTO::getKey).collect(Collectors.toList()));\n         }\n \n         final List<String> connToBeProcessed = new ArrayList<>();"},{"sha":"d562805ad0078f6e24db90e35baccd97bb62e246","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/AttrColumn.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -54,15 +54,15 @@ public void populateItem(\n         AttrTO attr = null;\n         switch (schemaType) {\n             case PLAIN:\n-                attr = rowModel.getObject().getPlainAttr(name);\n+                attr = rowModel.getObject().getPlainAttr(name).get();\n                 break;\n \n             case DERIVED:\n-                attr = rowModel.getObject().getDerAttr(name);\n+                attr = rowModel.getObject().getDerAttr(name).get();\n                 break;\n \n             case VIRTUAL:\n-                attr = rowModel.getObject().getVirAttr(name);\n+                attr = rowModel.getObject().getVirAttr(name).get();\n                 break;\n \n             default:"},{"sha":"c0373b0dd7cf3b414bd365401e990871a81abd94","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/ConnObjectAttrColumn.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FConnObjectAttrColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FConnObjectAttrColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FConnObjectAttrColumn.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table;\n \n import java.util.List;\n+import java.util.Optional;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n@@ -48,8 +49,8 @@ public void populateItem(\n             final String componentId,\n             final IModel<ConnObjectTO> rowModel) {\n \n-        AttrTO attr = rowModel.getObject().getAttr(name);\n-        List<String> values = attr == null ? null : attr.getValues();\n+        Optional<AttrTO> attr = rowModel.getObject().getAttr(name);\n+        List<String> values = attr.isPresent() ? attr.get().getValues() : null;\n \n         if (values == null || values.isEmpty()) {\n             cellItem.add(new Label(componentId, \"\"));"},{"sha":"b9eb922c46569eda98ebd741bbd5fb539ec7acd6","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/bootstrap/dialog/BaseModal.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Fdialog%2FBaseModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Fdialog%2FBaseModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Fdialog%2FBaseModal.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -24,8 +24,7 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.Optional;\n import org.apache.syncope.client.console.panels.AbstractModalPanel;\n import org.apache.syncope.client.console.panels.ModalPanel;\n import org.apache.syncope.client.console.panels.NotificationPanel;\n@@ -230,13 +229,11 @@ public void removeSubmitButton() {\n             throw new IllegalStateException();\n         }\n \n-        CollectionUtils.filterInverse(this.components, new Predicate<Component>() {\n-\n-            @Override\n-            public boolean evaluate(final Component component) {\n-                return SUBMIT.equals(component.getId());\n-            }\n-        });\n+        Optional<Component> button =\n+                this.components.stream().filter(component -> SUBMIT.equals(component.getId())).findAny();\n+        if (button.isPresent()) {\n+            this.components.remove(button.get());\n+        }\n \n         submitButton = null;\n     }"},{"sha":"e5fafb0eacb8b522d2a72456b3464c14bed51a94","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxPalettePanel.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -120,13 +120,12 @@ public List<T> getUnselectedList() {\n                         final List<T> unselected = new ArrayList<>(choices.size());\n                         final List<String> ids = Arrays.asList(getValue().split(\",\"));\n \n-                        for (final T choice : choices) {\n+                        choices.forEach(choice -> {\n                             final String choiceId = renderer.getIdValue(choice, 0);\n-\n                             if (!ids.contains(choiceId)) {\n                                 unselected.add(choice);\n                             }\n-                        }\n+                        });\n \n                         return unselected;\n                     }\n@@ -139,9 +138,9 @@ public List<T> getSelectedList() {\n \n                         // reduce number of method calls by building a lookup table\n                         final Map<T, String> idForChoice = new HashMap<>(choices.size());\n-                        for (final T choice : choices) {\n+                        choices.forEach(choice -> {\n                             idForChoice.put(choice, renderer.getIdValue(choice, 0));\n-                        }\n+                        });\n \n                         final String value = getValue();\n                         int start = value.indexOf(';') + 1;\n@@ -320,9 +319,9 @@ private List<T> getSelectedList(final Collection<T> choices, final String select\n             final List<T> selected = new ArrayList<>();\n \n             final Map<T, String> idForChoice = new HashMap<>();\n-            for (final T choice : choices) {\n+            choices.forEach(choice -> {\n                 idForChoice.put(choice, renderer.getIdValue(choice, 0));\n-            }\n+            });\n \n             for (final String id : Strings.split(selection, ',')) {\n                 final Iterator<T> iter = choices.iterator();\n@@ -345,18 +344,18 @@ protected List<T> getFilteredList(final Collection<T> choices, final String filt\n             final List<T> selected = new ArrayList<>(choices.size());\n \n             final Map<T, String> idForChoice = new HashMap<>();\n-            for (final T choice : choices) {\n+            choices.forEach(choice -> {\n                 idForChoice.put(choice, renderer.getIdValue(choice, 0));\n-            }\n+            });\n \n             final Pattern pattern = Pattern.compile(filter, Pattern.CASE_INSENSITIVE);\n \n-            for (T choice : choices) {\n+            choices.forEach(choice -> {\n                 final String idValue = idForChoice.get(choice);\n                 if (pattern.matcher(idValue).matches()) {\n                     selected.add(choice);\n                 }\n-            }\n+            });\n \n             return selected;\n         }"},{"sha":"1621c9e9e8b0a6448dad8a6497bf4cc444426c32","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxSpinnerFieldPanel.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxSpinnerFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxSpinnerFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxSpinnerFieldPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -25,7 +25,6 @@\n import com.googlecode.wicket.jquery.ui.form.spinner.SpinnerBehavior;\n import java.io.Serializable;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -98,8 +97,9 @@ public AjaxSpinnerFieldPanel<T> setNewModel(final List<Serializable> list) {\n             public T getObject() {\n                 T value = null;\n \n-                if (CollectionUtils.isNotEmpty(list)\n+                if (list != null && !list.isEmpty()\n                         && list.get(0) != null && StringUtils.isNotBlank(list.get(0).toString())) {\n+\n                     value = reference.equals(Integer.class)\n                             ? reference.cast(NumberUtils.toInt(list.get(0).toString()))\n                             : reference.equals(Long.class)\n@@ -175,8 +175,7 @@ public void setObject(final T object) {\n \n     @Override\n     public AjaxSpinnerFieldPanel<T> clone() {\n-        final AjaxSpinnerFieldPanel<T> panel\n-                = new AjaxSpinnerFieldPanel<>(getId(), name, reference, model, options, false);\n+        AjaxSpinnerFieldPanel<T> panel = new AjaxSpinnerFieldPanel<>(getId(), name, reference, model, options, false);\n \n         panel.setRequired(isRequired());\n         panel.setReadOnly(isReadOnly());"},{"sha":"ddd40fb12618d951c40e1db7cf98a0caff821c7e","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/SelectChoiceRenderer.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSelectChoiceRenderer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSelectChoiceRenderer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSelectChoiceRenderer.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.client.console.wicket.markup.html.form;\n \n import java.util.List;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n import org.apache.wicket.model.IModel;\n \n@@ -44,12 +42,8 @@ public String getIdValue(final T obj, final int i) {\n \n     @Override\n     public T getObject(final String id, final IModel<? extends List<? extends T>> choices) {\n-        return IterableUtils.find(choices.getObject(), new Predicate<T>() {\n-\n-            @Override\n-            public boolean evaluate(final T object) {\n-                return id != null && id.equals(getIdValue(object, 0));\n-            }\n-        });\n+        return choices.getObject().stream().\n+                filter(object -> id != null && id.equals(getIdValue(object, 0))).\n+                findAny().orElse(null);\n     }\n }"},{"sha":"86aefed7fbe6ad18d17cc5545020eb89ac400ae5","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/ReconciliationWidget.java","status":"modified","additions":25,"deletions":56,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -28,11 +28,9 @@\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeConsoleApplication;\n@@ -124,15 +122,10 @@ public ReconciliationWidget(final String id, final PageReference pageRef) {\n             protected void onTimer(final AjaxRequestTarget target) {\n                 if (isCheckReconciliationJob()) {\n                     try {\n-                        JobTO reportJobTO = IterableUtils.find(restClient.listJobs(), new Predicate<JobTO>() {\n-\n-                            @Override\n-                            public boolean evaluate(final JobTO jobTO) {\n-                                return SyncopeConsoleApplication.get().\n-                                        getReconciliationReportKey().equals(jobTO.getRefKey());\n-                            }\n-                        });\n-                        if (reportJobTO != null && !reportJobTO.isRunning()) {\n+                        Optional<JobTO> reportJobTO = restClient.listJobs().stream().\n+                                filter(jobTO -> SyncopeConsoleApplication.get().\n+                                getReconciliationReportKey().equals(jobTO.getRefKey())).findAny();\n+                        if (reportJobTO.isPresent() && !reportJobTO.get().isRunning()) {\n                             LOG.debug(\"Report {} is not running\",\n                                     SyncopeConsoleApplication.get().getReconciliationReportKey());\n \n@@ -271,23 +264,19 @@ private Pair<List<ProgressBean>, ReconciliationReport> parseReconciliationReport\n         List<ProgressBean> beans = Collections.emptyList();\n         ReconciliationReport report = null;\n \n-        ExecTO exec = null;\n+        Optional<ExecTO> exec = Optional.empty();\n         if (SyncopeConsoleSession.get().owns(StandardEntitlement.REPORT_LIST)) {\n-            exec = IterableUtils.find(restClient.listRecentExecutions(ROWS), new Predicate<ExecTO>() {\n-\n-                @Override\n-                public boolean evaluate(final ExecTO exec) {\n-                    return reconciliationReportKey.equals(exec.getRefKey());\n-                }\n-            });\n+            exec = restClient.listRecentExecutions(ROWS).stream().\n+                    filter(e -> reconciliationReportKey.equals(e.getRefKey())).findAny();\n         }\n-        if (exec == null) {\n+        if (!exec.isPresent()) {\n             LOG.error(\"Could not find the last execution of reconciliation report\");\n         } else {\n-            Object entity = restClient.exportExecutionResult(exec.getKey(), ReportExecExportFormat.XML).getEntity();\n+            Object entity = restClient.exportExecutionResult(\n+                    exec.get().getKey(), ReportExecExportFormat.XML).getEntity();\n             if (entity instanceof InputStream) {\n                 try {\n-                    report = ReconciliationReportParser.parse(exec.getEnd(), (InputStream) entity);\n+                    report = ReconciliationReportParser.parse(exec.get().getEnd(), (InputStream) entity);\n \n                     beans = new ArrayList<>();\n \n@@ -385,22 +374,12 @@ public void populateItem(\n             });\n \n             final Set<String> resources = new HashSet<>();\n-            for (Any any : anys.getAnys()) {\n-                resources.addAll(CollectionUtils.collect(any.getMissing(), new Transformer<Missing, String>() {\n-\n-                    @Override\n-                    public String transform(final Missing input) {\n-                        return input.getResource();\n-                    }\n-                }));\n-                resources.addAll(CollectionUtils.collect(any.getMisaligned(), new Transformer<Misaligned, String>() {\n-\n-                    @Override\n-                    public String transform(final Misaligned input) {\n-                        return input.getResource();\n-                    }\n-                }));\n-            }\n+            anys.getAnys().forEach(any -> {\n+                resources.addAll(any.getMissing().stream().\n+                        map(Missing::getResource).collect(Collectors.toList()));\n+                resources.addAll(any.getMisaligned().stream().\n+                        map(Misaligned::getResource).collect(Collectors.toList()));\n+            });\n             for (final String resource : resources) {\n                 columns.add(new AbstractColumn<Any, String>(Model.of(resource)) {\n \n@@ -414,24 +393,14 @@ public void populateItem(\n \n                         final Any any = rowModel.getObject();\n \n-                        Missing missing = IterableUtils.find(any.getMissing(), new Predicate<Missing>() {\n+                        Optional<Missing> missing =\n+                                any.getMissing().stream().\n+                                        filter(object -> resource.equals(object.getResource())).findAny();\n+                        List<Misaligned> misaligned = any.getMisaligned().stream().\n+                                filter(object -> resource.equals(object.getResource())).collect(Collectors.toList());\n \n-                            @Override\n-                            public boolean evaluate(final Missing object) {\n-                                return resource.equals(object.getResource());\n-                            }\n-                        });\n-                        final List<Misaligned> misaligned = CollectionUtils.select(\n-                                any.getMisaligned(), new Predicate<Misaligned>() {\n-\n-                            @Override\n-                            public boolean evaluate(final Misaligned object) {\n-                                return resource.equals(object.getResource());\n-                            }\n-                        }, new ArrayList<Misaligned>());\n                         Component content;\n-\n-                        if (missing == null) {\n+                        if (!missing.isPresent()) {\n                             if (misaligned == null || misaligned.isEmpty()) {\n                                 content = new Label(componentId, StringUtils.EMPTY);\n                             } else {"},{"sha":"da5e76dff6036332fb03e0e26f672718dd4dce26","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/reconciliation/ReconciliationReportParser.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2Freconciliation%2FReconciliationReportParser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2Freconciliation%2FReconciliationReportParser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2Freconciliation%2FReconciliationReportParser.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,12 +23,11 @@\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import javax.xml.stream.XMLInputFactory;\n import javax.xml.stream.XMLStreamException;\n import javax.xml.stream.XMLStreamReader;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n public final class ReconciliationReportParser {\n@@ -96,13 +95,12 @@ public static ReconciliationReport parse(final Date run, final InputStream in) t\n                         anyObject.setType(lastAnyType);\n                         anyObject.setKey(streamReader.getAttributeValue(\"\", \"key\"));\n                         final String anyType = lastAnyType;\n-                        IterableUtils.find(report.getAnyObjects(), new Predicate<Anys>() {\n-\n-                            @Override\n-                            public boolean evaluate(final Anys anys) {\n-                                return anyType.equals(anys.getAnyType());\n-                            }\n-                        }).getAnys().add(anyObject);\n+                        Optional<Anys> anyReport = report.getAnyObjects().stream().\n+                                filter(anys -> anyType.equals(anys.getAnyType())).\n+                                findFirst();\n+                        if (anyReport.isPresent()) {\n+                            anyReport.get().getAnys().add(anyObject);\n+                        }\n                         break;\n \n                     case \"missing\":"},{"sha":"2d9ec687e796967e9849e2250e6fc05a25d4b3c8","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java","status":"modified","additions":23,"deletions":36,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -26,17 +26,15 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.stream.Collectors;\n import org.apache.cxf.common.util.StringUtils;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.console.rest.GroupRestClient;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n@@ -90,8 +88,10 @@ public AbstractAttrs(\n     }\n \n     private List<AttrTO> loadAttrTOs() {\n-        setSchemas(CollectionUtils.collect(anyTypeClassRestClient.list(anyTO.getAuxClasses()),\n-                EntityTOUtils.<AnyTypeClassTO>keyTransformer(), new ArrayList<>(anyTypeClasses)));\n+        List<String> classes = new ArrayList<>(anyTypeClasses);\n+        classes.addAll(anyTypeClassRestClient.list(anyTO.getAuxClasses()).stream().\n+                map(EntityTO::getKey).collect(Collectors.toList()));\n+        setSchemas(classes);\n         setAttrs();\n         return AbstractAttrs.this.getAttrsFromTO();\n     }\n@@ -104,10 +104,9 @@ private List<MembershipTO> loadMembershipAttrTOs() {\n \n             for (MembershipTO membership : (List<MembershipTO>) PropertyResolver.getPropertyField(\n                     \"memberships\", anyTO).get(anyTO)) {\n-                setSchemas(membership.getGroupKey(), CollectionUtils.collect(\n-                        anyTypeClassRestClient.list(getMembershipAuxClasses(membership, anyTO.getType())),\n-                        EntityTOUtils.<AnyTypeClassTO>keyTransformer(),\n-                        new ArrayList<String>()));\n+                setSchemas(membership.getGroupKey(),\n+                        anyTypeClassRestClient.list(getMembershipAuxClasses(membership, anyTO.getType())).\n+                                stream().map(EntityTO::getKey).collect(Collectors.toList()));\n                 setAttrs(membership);\n \n                 if (AbstractAttrs.this instanceof PlainAttrs && !membership.getPlainAttrs().isEmpty()) {\n@@ -159,38 +158,29 @@ private void setSchemas(final List<String> anyTypeClasses, final Map<String, S>\n \n         if (reoderSchemas()) {\n             // 1. remove attributes not selected for display\n-            CollectionUtils.filter(allSchemas, new Predicate<S>() {\n-\n-                @Override\n-                public boolean evaluate(final S schemaTO) {\n-                    return whichAttrs.contains(schemaTO.getKey());\n-                }\n-            });\n+            allSchemas.removeAll(allSchemas.stream().\n+                    filter(schemaTO -> !whichAttrs.contains(schemaTO.getKey())).collect(Collectors.toSet()));\n \n             // 2. sort remainig attributes according to configuration, e.g. attrLayout\n             final Map<String, Integer> attrLayoutMap = new HashMap<>(whichAttrs.size());\n             for (int i = 0; i < whichAttrs.size(); i++) {\n                 attrLayoutMap.put(whichAttrs.get(i), i);\n             }\n-            Collections.sort(allSchemas, new Comparator<S>() {\n-\n-                @Override\n-                public int compare(final S schema1, final S schema2) {\n-                    int value = 0;\n+            Collections.sort(allSchemas, (schema1, schema2) -> {\n+                int value = 0;\n \n-                    if (attrLayoutMap.get(schema1.getKey()) > attrLayoutMap.get(schema2.getKey())) {\n-                        value = 1;\n-                    } else if (attrLayoutMap.get(schema1.getKey()) < attrLayoutMap.get(schema2.getKey())) {\n-                        value = -1;\n-                    }\n-\n-                    return value;\n+                if (attrLayoutMap.get(schema1.getKey()) > attrLayoutMap.get(schema2.getKey())) {\n+                    value = 1;\n+                } else if (attrLayoutMap.get(schema1.getKey()) < attrLayoutMap.get(schema2.getKey())) {\n+                    value = -1;\n                 }\n+\n+                return value;\n             });\n         }\n-        for (S schemaTO : allSchemas) {\n+        allSchemas.forEach(schemaTO -> {\n             scs.put(schemaTO.getKey(), schemaTO);\n-        }\n+        });\n     }\n \n     @Override\n@@ -215,7 +205,7 @@ public void renderHead(final IHeaderResponse response) {\n     protected List<String> getMembershipAuxClasses(final MembershipTO membershipTO, final String anyType) {\n         try {\n             final GroupTO groupTO = groupRestClient.read(membershipTO.getRightKey());\n-            return groupTO.getTypeExtension(anyType).getAuxClasses();\n+            return groupTO.getTypeExtension(anyType).get().getAuxClasses();\n         } catch (Exception e) {\n             return Collections.emptyList();\n         }\n@@ -225,14 +215,11 @@ protected List<String> getMembershipAuxClasses(final MembershipTO membershipTO,\n     public boolean evaluate() {\n         this.attrTOs.setObject(loadAttrTOs());\n         this.membershipTOs.setObject(loadMembershipAttrTOs());\n-        return CollectionUtils.isNotEmpty(attrTOs.getObject()) || CollectionUtils.isNotEmpty(membershipTOs.getObject());\n+        return !attrTOs.getObject().isEmpty() || !membershipTOs.getObject().isEmpty();\n     }\n \n     protected static class AttrComparator implements Comparator<AttrTO>, Serializable {\n \n-        /**\n-         *\n-         */\n         private static final long serialVersionUID = -5105030477767941060L;\n \n         @Override"},{"sha":"4ebd39311694d939d74213fc341ee5a59e7cc8bc","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/ConnObjectPanel.java","status":"modified","additions":7,"deletions":18,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,9 +22,9 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.ListUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -66,20 +66,8 @@ protected List<String> load() {\n                         : connObjectTOs.getLeft().getAttrs());\n \n                 final List<String> schemas = ListUtils.sum(\n-                        CollectionUtils.collect(right, new Transformer<AttrTO, String>() {\n-\n-                            @Override\n-                            public String transform(final AttrTO input) {\n-                                return input.getSchema();\n-                            }\n-                        }, new ArrayList<String>()),\n-                        CollectionUtils.collect(left, new Transformer<AttrTO, String>() {\n-\n-                            @Override\n-                            public String transform(final AttrTO input) {\n-                                return input.getSchema();\n-                            }\n-                        }, new ArrayList<String>()));\n+                        right.stream().map(AttrTO::getSchema).collect(Collectors.toList()),\n+                        left.stream().map(AttrTO::getSchema).collect(Collectors.toList()));\n \n                 Collections.sort(schemas);\n \n@@ -126,6 +114,7 @@ protected void populateItem(final ListItem<String> item) {\n                         || (CollectionUtils.isNotEmpty(after.getValues())\n                         && CollectionUtils.isNotEmpty(before.getValues())\n                         && !after.getValues().equals(before.getValues()))) {\n+\n                     valueFragment.add(new Behavior() {\n \n                         private static final long serialVersionUID = 3109256773218160485L;\n@@ -152,9 +141,9 @@ public void onComponentTag(final Component component, final ComponentTag tag) {\n     private Panel getValuePanel(final String id, final String schemaName, final AttrTO attrTO) {\n         Panel field;\n         if (attrTO == null) {\n-            field = new AjaxTextFieldPanel(id, schemaName, new Model<String>());\n+            field = new AjaxTextFieldPanel(id, schemaName, new Model<>());\n         } else if (CollectionUtils.isEmpty(attrTO.getValues())) {\n-            field = new AjaxTextFieldPanel(id, schemaName, new Model<String>());\n+            field = new AjaxTextFieldPanel(id, schemaName, new Model<>());\n         } else if (ConnIdSpecialName.PASSWORD.equals(schemaName)) {\n             field = new AjaxTextFieldPanel(id, schemaName, new Model<>(\"********\"));\n         } else if (attrTO.getValues().size() == 1) {\n@@ -163,7 +152,7 @@ private Panel getValuePanel(final String id, final String schemaName, final Attr\n             field = new MultiFieldPanel.Builder<>(new ListModel<>(attrTO.getValues())).build(\n                     id,\n                     schemaName,\n-                    new AjaxTextFieldPanel(\"panel\", schemaName, new Model<String>()));\n+                    new AjaxTextFieldPanel(\"panel\", schemaName, new Model<>()));\n         }\n \n         field.setEnabled(false);"},{"sha":"65de432ae2ce23eddb99924bf15eee7505441261","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Details.java","status":"modified","additions":11,"deletions":18,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,8 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.pages.Realms;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n@@ -57,29 +56,23 @@ public Details(\n \n         if (templateMode) {\n             realm = new AjaxTextFieldPanel(\n-                    \"destinationRealm\", \"destinationRealm\", new PropertyModel<String>(inner, \"realm\"), false);\n+                    \"destinationRealm\", \"destinationRealm\", new PropertyModel<>(inner, \"realm\"), false);\n             AjaxTextFieldPanel.class.cast(realm).enableJexlHelp();\n         } else {\n             final List<AbstractLink> realmLinks = Realms.class.cast(pageRef.getPage()).getRealmChoicePanel().getLinks();\n             final List<RealmTO> realms = new ArrayList<>();\n-            for (AbstractLink link : realmLinks) {\n-                Object obj = link.getDefaultModelObject();\n-                if (obj instanceof RealmTO) {\n-                    realms.add((RealmTO) obj);\n-                }\n-            }\n+            realmLinks.stream().\n+                    map(link -> link.getDefaultModelObject()).\n+                    filter(obj -> (obj instanceof RealmTO)).\n+                    forEachOrdered(obj -> {\n+                        realms.add((RealmTO) obj);\n+                    });\n \n             realm = new AjaxDropDownChoicePanel<>(\n-                    \"destinationRealm\", \"destinationRealm\", new PropertyModel<String>(inner, \"realm\"), false);\n+                    \"destinationRealm\", \"destinationRealm\", new PropertyModel<>(inner, \"realm\"), false);\n \n-            ((AjaxDropDownChoicePanel<String>) realm).setChoices(CollectionUtils.collect(\n-                    realms, new Transformer<RealmTO, String>() {\n-\n-                @Override\n-                public String transform(final RealmTO input) {\n-                    return input.getFullPath();\n-                }\n-            }, new ArrayList<String>()));\n+            ((AjaxDropDownChoicePanel<String>) realm).setChoices(\n+                    realms.stream().map(RealmTO::getFullPath).collect(Collectors.toList()));\n         }\n         add(realm);\n         add(getGeneralStatusInformation(\"generalStatusInformation\", inner)."},{"sha":"da95dacded8bd3e28cf1f9d6edf18ef89200d504","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/DynamicMemberships.java","status":"modified","additions":6,"deletions":13,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDynamicMemberships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDynamicMemberships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDynamicMemberships.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,15 +18,12 @@\n  */\n package org.apache.syncope.client.console.wizards.any;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.panels.search.AnyObjectSearchPanel;\n import org.apache.syncope.client.console.panels.search.MapOfListModel;\n-import org.apache.syncope.client.console.panels.search.SearchClause;\n import org.apache.syncope.client.console.panels.search.UserSearchPanel;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.tabs.Accordion;\n@@ -59,13 +56,9 @@ public DynamicMemberships(final GroupWrapper groupWrapper) {\n \n             @Override\n             protected List<AnyTypeTO> load() {\n-                return CollectionUtils.select(anyTypeRestClient.listAnyTypes(), new Predicate<AnyTypeTO>() {\n-\n-                    @Override\n-                    public boolean evaluate(final AnyTypeTO t) {\n-                        return AnyTypeKind.USER != t.getKind() && AnyTypeKind.GROUP != t.getKind();\n-                    }\n-                }, new ArrayList<AnyTypeTO>());\n+                return anyTypeRestClient.listAnyTypes().stream().\n+                        filter(type -> AnyTypeKind.USER != type.getKind() && AnyTypeKind.GROUP != type.getKind()).\n+                        collect(Collectors.toList());\n             }\n         };\n \n@@ -79,7 +72,7 @@ public boolean evaluate(final AnyTypeTO t) {\n \n             @Override\n             public Panel getPanel(final String panelId) {\n-                return new UserSearchPanel.Builder(new PropertyModel<List<SearchClause>>(groupWrapper, \"uDynClauses\")).\n+                return new UserSearchPanel.Builder(new PropertyModel<>(groupWrapper, \"uDynClauses\")).\n                         required(true).build(panelId);\n             }\n         }), Model.of(StringUtils.isBlank(groupWrapper.getUDynMembershipCond()) ? -1 : 0)).setOutputMarkupId(true));\n@@ -104,7 +97,7 @@ protected void populateItem(final ListItem<AnyTypeTO> item) {\n                     @Override\n                     public Panel getPanel(final String panelId) {\n                         return new AnyObjectSearchPanel.Builder(\n-                                key, new MapOfListModel<SearchClause>(groupWrapper, \"aDynClauses\", key)).\n+                                key, new MapOfListModel<>(groupWrapper, \"aDynClauses\", key)).\n                                 required(false).build(panelId);\n                     }\n                 }), Model.of(StringUtils.isBlank(groupWrapper.getADynMembershipConds().get(key)) ? -1 : 0))"},{"sha":"fe9e2261111d952cb0e2e5fbff7a31c91b0c69d6","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java","status":"modified","additions":36,"deletions":63,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,11 +22,8 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n+import java.util.stream.Collectors;\n import org.apache.commons.collections4.ListUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n import org.apache.syncope.client.console.SyncopeConsoleApplication;\n@@ -35,10 +32,10 @@\n import org.apache.syncope.client.console.wicket.ajax.markup.html.LabelInfo;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.DynRealmTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n@@ -123,13 +120,8 @@ public String getIdValue(final MembershipTO object, final int index) {\n                         public MembershipTO getObject(\n                                 final String id, final IModel<? extends List<? extends MembershipTO>> choices) {\n \n-                            return IterableUtils.find(choices.getObject(), new Predicate<MembershipTO>() {\n-\n-                                @Override\n-                                public boolean evaluate(final MembershipTO object) {\n-                                    return id.equalsIgnoreCase(object.getGroupName());\n-                                }\n-                            });\n+                            return choices.getObject().stream().\n+                                    filter(object -> id.equalsIgnoreCase(object.getGroupName())).findAny().orElse(null);\n                         }\n                     });\n \n@@ -149,25 +141,20 @@ public List<MembershipTO> getObject() {\n \n                 @Override\n                 public List<MembershipTO> execute(final String filter) {\n-                    return CollectionUtils.collect(\n-                            StringUtils.isEmpty(filter) || \"*\".equals(filter)\n+                    return (StringUtils.isEmpty(filter) || \"*\".equals(filter)\n                             ? groupsModel.getObject()\n                             : groupRestClient.search(\n                                     anyTO.getRealm(),\n                                     SyncopeClient.getGroupSearchConditionBuilder().\n-                                    isAssignable().and().is(\"name\").equalTo(filter).query(),\n+                                            isAssignable().and().is(\"name\").equalTo(filter).query(),\n                                     1, MAX_GROUP_LIST_CARDINALITY,\n                                     new SortParam<>(\"name\", true),\n-                                    null),\n-                            new Transformer<GroupTO, MembershipTO>() {\n+                                    null)).stream().map(input -> {\n \n-                        @Override\n-                        public MembershipTO transform(final GroupTO input) {\n-                            return new MembershipTO.Builder().\n-                                    group(input.getKey(), input.getName()).\n-                                    build();\n-                        }\n-                    }, new ArrayList<MembershipTO>());\n+                                return new MembershipTO.Builder().\n+                                        group(input.getKey(), input.getName()).\n+                                        build();\n+                            }).collect(Collectors.toList());\n                 }\n             }).hideLabel().setOutputMarkupId(true));\n \n@@ -181,25 +168,15 @@ public List<String> getObject() {\n                     return Groups.this.groupsModel.getDynMemberships();\n                 }\n \n-            }, new ListModel<>(CollectionUtils.collect(groupsModel.getObject(),\n-                            new Transformer<GroupTO, String>() {\n-\n-                        @Override\n-                        public String transform(final GroupTO input) {\n-                            return input.getName();\n-                        }\n-                    }, new ArrayList<String>()))).\n+            }, new ListModel<>(groupsModel.getObject().stream().map(GroupTO::getName).collect(Collectors.toList()))).\n                     hideLabel().setEnabled(false).setOutputMarkupId(true));\n \n             // ---------------------------------\n         }\n \n-        add(new AjaxPalettePanel.Builder<String>().build(\"dynrealms\",\n-                new PropertyModel<List<String>>(anyTO, \"dynRealms\"),\n-                new ListModel<>(\n-                        CollectionUtils.collect(allDynRealms,\n-                                EntityTOUtils.keyTransformer(),\n-                                new ArrayList<String>()))).\n+        add(new AjaxPalettePanel.Builder<>().build(\"dynrealms\",\n+                new PropertyModel<>(anyTO, \"dynRealms\"),\n+                new ListModel<>(allDynRealms.stream().map(EntityTO::getKey).collect(Collectors.toList()))).\n                 hideLabel().setEnabled(false).setOutputMarkupId(true));\n \n         // ------------------\n@@ -219,11 +196,11 @@ public String transform(final GroupTO input) {\n \n     @Override\n     public boolean evaluate() {\n-        return ((anyTO instanceof GroupTO)\n-                ? CollectionUtils.isNotEmpty(allDynRealms)\n-                : CollectionUtils.isNotEmpty(allDynRealms) || CollectionUtils.isNotEmpty(groupsModel.getObject()))\n+        return (anyTO instanceof GroupTO\n+                ? !allDynRealms.isEmpty()\n+                : !allDynRealms.isEmpty() || !groupsModel.getObject().isEmpty())\n                 && SyncopeConsoleApplication.get().getSecuritySettings().getAuthorizationStrategy().\n-                isActionAuthorized(this, RENDER);\n+                        isActionAuthorized(this, RENDER);\n     }\n \n     private class GroupsModel extends ListModel<GroupTO> {\n@@ -270,32 +247,33 @@ private void reloadMemberships() {\n             GroupFiqlSearchConditionBuilder searchConditionBuilder = SyncopeClient.getGroupSearchConditionBuilder();\n \n             List<CompleteCondition> conditions = new ArrayList<>();\n-            for (MembershipTO membershipTO : GroupableRelatableTO.class.cast(anyTO).getMemberships()) {\n+            GroupableRelatableTO.class.cast(anyTO).getMemberships().forEach(membershipTO -> {\n                 conditions.add(searchConditionBuilder.is(\"key\").equalTo(membershipTO.getGroupKey()).wrap());\n-            }\n+            });\n \n             Map<String, GroupTO> assignedGroups = new HashMap<>();\n             if (!conditions.isEmpty()) {\n-                for (GroupTO group : groupRestClient.search(\n+                groupRestClient.search(\n                         realm,\n                         searchConditionBuilder.isAssignable().and().or(conditions).query(),\n                         -1,\n                         -1,\n                         new SortParam<>(\"name\", true),\n-                        null)) {\n-                    assignedGroups.put(group.getKey(), group);\n-                }\n+                        null).\n+                        forEach(group -> {\n+                            assignedGroups.put(group.getKey(), group);\n+                        });\n             }\n \n             // set group names in membership TOs and remove membership not assignable\n             List<MembershipTO> toBeRemoved = new ArrayList<>();\n-            for (MembershipTO membership : GroupableRelatableTO.class.cast(anyTO).getMemberships()) {\n+            GroupableRelatableTO.class.cast(anyTO).getMemberships().forEach(membership -> {\n                 if (assignedGroups.containsKey(membership.getRightKey())) {\n                     membership.setGroupName(assignedGroups.get(membership.getRightKey()).getName());\n                 } else {\n                     toBeRemoved.add(membership);\n                 }\n-            }\n+            });\n             GroupableRelatableTO.class.cast(anyTO).getMemberships().removeAll(toBeRemoved);\n \n             memberships = GroupableRelatableTO.class.cast(anyTO).getMemberships();\n@@ -313,30 +291,25 @@ private void reloadDynMemberships() {\n             GroupFiqlSearchConditionBuilder searchConditionBuilder = SyncopeClient.getGroupSearchConditionBuilder();\n \n             ArrayList<CompleteCondition> conditions = new ArrayList<>();\n-            for (MembershipTO membership : GroupableRelatableTO.class.cast(anyTO).getDynMemberships()) {\n+            GroupableRelatableTO.class.cast(anyTO).getDynMemberships().forEach(membership -> {\n                 conditions.add(searchConditionBuilder.is(\"key\").equalTo(membership.getGroupKey()).wrap());\n-            }\n+            });\n \n             Map<String, GroupTO> assignedGroups = new HashMap<>();\n             if (!conditions.isEmpty()) {\n-                for (GroupTO group : groupRestClient.search(\n+                groupRestClient.search(\n                         \"/\",\n                         searchConditionBuilder.or(conditions).query(),\n                         -1,\n                         -1,\n                         new SortParam<>(\"name\", true),\n-                        null)) {\n-                    assignedGroups.put(group.getKey(), group);\n-                }\n+                        null).\n+                        forEach(group -> {\n+                            assignedGroups.put(group.getKey(), group);\n+                        });\n             }\n \n-            dynMemberships = CollectionUtils.collect(assignedGroups.values(), new Transformer<GroupTO, String>() {\n-\n-                @Override\n-                public String transform(final GroupTO input) {\n-                    return input.getName();\n-                }\n-            }, new ArrayList<String>());\n+            dynMemberships = assignedGroups.values().stream().map(GroupTO::getName).collect(Collectors.toList());\n         }\n \n         /**"},{"sha":"d776b65bd9b37643e9b7a9e93bd6238d64b4260e","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java","status":"modified","additions":30,"deletions":40,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,11 +20,9 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Date;\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.collections4.ListUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.commons.SchemaUtils;\n import org.apache.syncope.client.console.wicket.ajax.markup.html.LabelInfo;\n@@ -170,10 +168,9 @@ protected void setAttrs() {\n \n         Map<String, AttrTO> attrMap = EntityTOUtils.buildAttrMap(anyTO.getPlainAttrs());\n \n-        for (PlainSchemaTO schema : schemas.values()) {\n+        schemas.values().stream().map(schema -> {\n             AttrTO attrTO = new AttrTO();\n             attrTO.setSchema(schema.getKey());\n-\n             if (attrMap.get(schema.getKey()) == null || attrMap.get(schema.getKey()).getValues().isEmpty()) {\n                 attrTO.getValues().add(\"\");\n \n@@ -182,8 +179,10 @@ protected void setAttrs() {\n             } else {\n                 attrTO.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n             }\n+            return attrTO;\n+        }).forEachOrdered(attrTO -> {\n             attrs.add(attrTO);\n-        }\n+        });\n \n         anyTO.getPlainAttrs().clear();\n         anyTO.getPlainAttrs().addAll(attrs);\n@@ -195,20 +194,22 @@ protected void setAttrs(final MembershipTO membershipTO) {\n \n         Map<String, AttrTO> attrMap = EntityTOUtils.buildAttrMap(membershipTO.getPlainAttrs());\n \n-        for (PlainSchemaTO schema : membershipSchemas.get(membershipTO.getGroupKey()).values()) {\n-            AttrTO attrTO = new AttrTO();\n-            attrTO.setSchema(schema.getKey());\n+        membershipSchemas.get(membershipTO.getGroupKey()).values().stream().\n+                map(schema -> {\n+                    AttrTO attrTO = new AttrTO();\n+                    attrTO.setSchema(schema.getKey());\n+                    if (attrMap.get(schema.getKey()) == null || attrMap.get(schema.getKey()).getValues().isEmpty()) {\n+                        attrTO.getValues().add(\"\");\n \n-            if (attrMap.get(schema.getKey()) == null || attrMap.get(schema.getKey()).getValues().isEmpty()) {\n-                attrTO.getValues().add(\"\");\n-\n-                // is important to set the schema info only after values setting\n-                attrTO.setSchemaInfo(schema);\n-            } else {\n-                attrTO.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n-            }\n+                        // is important to set the schema info only after values setting\n+                        attrTO.setSchemaInfo(schema);\n+                    } else {\n+                        attrTO.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n+                    }\n+                    return attrTO;\n+                }).forEachOrdered(attrTO -> {\n             attrs.add(attrTO);\n-        }\n+        });\n \n         membershipTO.getPlainAttrs().clear();\n         membershipTO.getPlainAttrs().addAll(attrs);\n@@ -237,7 +238,7 @@ protected FieldPanel getFieldPanel(final PlainSchemaTO schemaTO) {\n         FieldPanel panel;\n         switch (type) {\n             case Boolean:\n-                panel = new AjaxCheckBoxPanel(\"panel\", schemaTO.getKey(), new Model<Boolean>(), true);\n+                panel = new AjaxCheckBoxPanel(\"panel\", schemaTO.getKey(), new Model<>(), true);\n                 panel.setRequired(required);\n                 break;\n \n@@ -247,9 +248,9 @@ protected FieldPanel getFieldPanel(final PlainSchemaTO schemaTO) {\n                         : schemaTO.getConversionPattern();\n \n                 if (dataPattern.contains(\"H\")) {\n-                    panel = new AjaxDateTimeFieldPanel(\"panel\", schemaTO.getKey(), new Model<Date>(), dataPattern);\n+                    panel = new AjaxDateTimeFieldPanel(\"panel\", schemaTO.getKey(), new Model<>(), dataPattern);\n                 } else {\n-                    panel = new AjaxDateFieldPanel(\"panel\", schemaTO.getKey(), new Model<Date>(), dataPattern);\n+                    panel = new AjaxDateFieldPanel(\"panel\", schemaTO.getKey(), new Model<>(), dataPattern);\n                 }\n \n                 if (required) {\n@@ -311,7 +312,7 @@ public String getObject(\n                 break;\n \n             case Binary:\n-                panel = new BinaryFieldPanel(\"panel\", schemaTO.getKey(), new Model<String>(), schemaTO.getMimeType(),\n+                panel = new BinaryFieldPanel(\"panel\", schemaTO.getKey(), new Model<>(), schemaTO.getMimeType(),\n                         fileKey);\n \n                 if (required) {\n@@ -320,15 +321,15 @@ public String getObject(\n                 break;\n \n             case Encrypted:\n-                panel = new EncryptedFieldPanel(\"panel\", schemaTO.getKey(), new Model<String>(), true);\n+                panel = new EncryptedFieldPanel(\"panel\", schemaTO.getKey(), new Model<>(), true);\n \n                 if (required) {\n                     panel.addRequiredLabel();\n                 }\n                 break;\n \n             default:\n-                panel = new AjaxTextFieldPanel(\"panel\", schemaTO.getKey(), new Model<String>(), true);\n+                panel = new AjaxTextFieldPanel(\"panel\", schemaTO.getKey(), new Model<>(), true);\n \n                 if (jexlHelp) {\n                     AjaxTextFieldPanel.class.cast(panel).enableJexlHelp();\n@@ -369,7 +370,7 @@ protected void populateItem(final ListItem<AttrTO> item) {\n                         FieldPanel.class.cast(panel).setNewModel(attrTO.getValues());\n                     } else {\n                         panel = new MultiFieldPanel.Builder<>(\n-                                new PropertyModel<List<String>>(attrTO, \"values\")).build(\n+                                new PropertyModel<>(attrTO, \"values\")).build(\n                                 \"panel\",\n                                 attrTO.getSchema(),\n                                 FieldPanel.class.cast(panel));\n@@ -379,24 +380,13 @@ protected void populateItem(final ListItem<AttrTO> item) {\n                     if (previousObject != null\n                             && (previousObject.getPlainAttr(attrTO.getSchema()) == null\n                             || !ListUtils.isEqualList(\n-                                    ListUtils.select(previousObject.getPlainAttr(attrTO.getSchema()).getValues(),\n-                                            new Predicate<String>() {\n-\n-                                        @Override\n-                                        public boolean evaluate(final String object) {\n-                                            return StringUtils.isNotEmpty(object);\n-                                        }\n-                                    }), ListUtils.select(attrTO.getValues(),\n-                                            new Predicate<String>() {\n-\n-                                        @Override\n-                                        public boolean evaluate(final String object) {\n-                                            return StringUtils.isNotEmpty(object);\n-                                        }\n-                                    })))) {\n+                                    ListUtils.select(previousObject.getPlainAttr(attrTO.getSchema()).get().getValues(),\n+                                            object -> StringUtils.isNotEmpty(object)),\n+                                    ListUtils.select(attrTO.getValues(), object -> StringUtils.isNotEmpty(object))))) {\n+\n                         List<String> oldValues = previousObject.getPlainAttr(attrTO.getSchema()) == null\n                                 ? Collections.<String>emptyList()\n-                                : previousObject.getPlainAttr(attrTO.getSchema()).getValues();\n+                                : previousObject.getPlainAttr(attrTO.getSchema()).get().getValues();\n                         panel.showExternAction(new LabelInfo(\"externalAction\", oldValues));\n                     }\n                 }"},{"sha":"9da914beb4eaa10abfbf80227f18ced4caf4bde6","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java","status":"modified","additions":35,"deletions":60,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,27 +18,22 @@\n  */\n package org.apache.syncope.client.console.wizards.any;\n \n-\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n+import java.util.stream.Collectors;\n import org.apache.commons.collections4.ListUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.syncope.client.console.commons.SerializableTransformer;\n import org.apache.syncope.client.console.panels.AnyDirectoryPanel;\n import org.apache.syncope.client.console.panels.ListViewPanel;\n import org.apache.syncope.client.console.panels.ListViewPanel.ListViewReload;\n import org.apache.syncope.client.console.panels.search.AnyObjectSearchPanel;\n import org.apache.syncope.client.console.panels.search.AnyObjectSelectionDirectoryPanel;\n import org.apache.syncope.client.console.panels.search.AnySelectionDirectoryPanel;\n-import org.apache.syncope.client.console.panels.search.SearchClause;\n import org.apache.syncope.client.console.panels.search.SearchClausePanel;\n import org.apache.syncope.client.console.panels.search.SearchUtils;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n@@ -53,13 +48,12 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupableRelatableTO;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n-import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n import org.apache.syncope.common.lib.types.AnyEntitlement;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.wicket.Component;\n@@ -68,7 +62,6 @@\n import org.apache.wicket.event.Broadcast;\n import org.apache.wicket.event.IEvent;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n-import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.extensions.wizard.IWizard;\n import org.apache.wicket.extensions.wizard.WizardModel;\n import org.apache.wicket.extensions.wizard.WizardStep;\n@@ -95,7 +88,7 @@ public class Relationships extends WizardStep implements WizardModel.ICondition\n     private final AnyTypeClassRestClient anyTypeClassRestClient = new AnyTypeClassRestClient();\n \n     private final AnyTO anyTO;\n-    \n+\n     private final RelationshipTypeRestClient relationshipTypeRestClient = new RelationshipTypeRestClient();\n \n     public Relationships(final AnyWrapper<?> modelObject, final PageReference pageRef) {\n@@ -134,38 +127,31 @@ private Fragment getViewFragment() {\n         final Fragment viewFragment = new Fragment(\"relationships\", \"viewFragment\", this);\n         viewFragment.setOutputMarkupId(true);\n \n-        viewFragment.add(new Accordion(\"relationships\",\n-                CollectionUtils.collect(relationships.keySet(), new SerializableTransformer<String, ITab>() {\n-\n-                    private static final long serialVersionUID = 3514912643300593122L;\n-\n-                    @Override\n-                    public ITab transform(final String input) {\n-                        return new AbstractTab(new ResourceModel(\"relationship\", input)) {\n+        viewFragment.add(new Accordion(\"relationships\", relationships.keySet().stream().map(relationship -> {\n+            return new AbstractTab(new ResourceModel(\"relationship\", relationship)) {\n \n-                            private static final long serialVersionUID = 1037272333056449378L;\n+                private static final long serialVersionUID = 1037272333056449378L;\n \n-                            @Override\n-                            public Panel getPanel(final String panelId) {\n-                                return new ListViewPanel.Builder<>(RelationshipTO.class, pageRef).\n-                                        setItems(relationships.get(input)).\n-                                        includes(\"rightType\", \"rightKey\").\n-                                        addAction(new ActionLink<RelationshipTO>() {\n-\n-                                            private static final long serialVersionUID = -6847033126124401556L;\n-\n-                                            @Override\n-                                            public void onClick(\n-                                                    final AjaxRequestTarget target, final RelationshipTO modelObject) {\n-                                                removeRelationships(relationships, modelObject);\n-                                                send(Relationships.this, Broadcast.DEPTH, new ListViewReload<>(target));\n-                                            }\n-                                        }, ActionType.DELETE, AnyEntitlement.UPDATE.getFor(anyTO.getType()), true).\n-                                        build(panelId);\n-                            }\n-                        };\n-                    }\n-                }, new ArrayList<ITab>())) {\n+                @Override\n+                public Panel getPanel(final String panelId) {\n+                    return new ListViewPanel.Builder<>(RelationshipTO.class, pageRef).\n+                            setItems(relationships.get(relationship)).\n+                            includes(\"rightType\", \"rightKey\").\n+                            addAction(new ActionLink<RelationshipTO>() {\n+\n+                                private static final long serialVersionUID = -6847033126124401556L;\n+\n+                                @Override\n+                                public void onClick(\n+                                        final AjaxRequestTarget target, final RelationshipTO modelObject) {\n+                                    removeRelationships(relationships, modelObject);\n+                                    send(Relationships.this, Broadcast.DEPTH, new ListViewReload<>(target));\n+                                }\n+                            }, ActionType.DELETE, AnyEntitlement.UPDATE.getFor(anyTO.getType()), true).\n+                            build(panelId);\n+                }\n+            };\n+        }).collect(Collectors.toList())) {\n \n             private static final long serialVersionUID = 1037272333056449379L;\n \n@@ -257,23 +243,17 @@ public Specification() {\n             super(\"specification\");\n             rel = new RelationshipTO();\n \n-            final ArrayList<String> availableRels = CollectionUtils.collect(\n-                    relationshipTypeRestClient.list(),\n-                    EntityTOUtils.<RelationshipTypeTO>keyTransformer(), new ArrayList<String>());\n+            final List<String> availableRels = relationshipTypeRestClient.list().stream().\n+                    map(EntityTO::getKey).collect(Collectors.toList());\n \n             final AjaxDropDownChoicePanel<String> type = new AjaxDropDownChoicePanel<>(\n-                    \"type\", \"type\", new PropertyModel<String>(rel, \"type\"));\n+                    \"type\", \"type\", new PropertyModel<>(rel, \"type\"));\n             type.setChoices(availableRels);\n             add(type.setRenderBodyOnly(true));\n \n-            final List<AnyTypeTO> availableTypes = ListUtils.select(anyTypeRestClient.listAnyTypes(),\n-                    new Predicate<AnyTypeTO>() {\n-\n-                @Override\n-                public boolean evaluate(final AnyTypeTO object) {\n-                    return object.getKind() != AnyTypeKind.GROUP && object.getKind() != AnyTypeKind.USER;\n-                }\n-            });\n+            final List<AnyTypeTO> availableTypes = anyTypeRestClient.listAnyTypes().stream().\n+                    filter(anyType -> anyType.getKind() != AnyTypeKind.GROUP\n+                    && anyType.getKind() != AnyTypeKind.USER).collect(Collectors.toList());\n \n             final AjaxDropDownChoicePanel<AnyTypeTO> rightType = new AjaxDropDownChoicePanel<>(\n                     \"rightType\", \"rightType\", new PropertyModel<AnyTypeTO>(rel, \"rightType\") {\n@@ -312,13 +292,8 @@ public String getIdValue(final AnyTypeTO object, final int index) {\n \n                 @Override\n                 public AnyTypeTO getObject(final String id, final IModel<? extends List<? extends AnyTypeTO>> choices) {\n-                    return IterableUtils.find(choices.getObject(), new Predicate<AnyTypeTO>() {\n-\n-                        @Override\n-                        public boolean evaluate(final AnyTypeTO object) {\n-                            return id.equals(object.getKey());\n-                        }\n-                    });\n+                    return choices.getObject().stream().\n+                            filter(anyTypeTO -> id.equals(anyTypeTO.getKey())).findAny().orElse(null);\n                 }\n             });\n             // enable \"rightType\" dropdown only if \"type\" option is selected - SYNCOPE-1140\n@@ -364,7 +339,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n                         anyObjectSearchPanel = new AnyObjectSearchPanel.Builder(\n                                 anyType.getKey(),\n-                                new ListModel<>(new ArrayList<SearchClause>())).\n+                                new ListModel<>(new ArrayList<>())).\n                                 enableSearch(Specification.this).\n                                 build(\"searchPanel\");\n                         fragment.add(anyObjectSearchPanel.setRenderBodyOnly(true));"},{"sha":"806b87c00a1218a8a4f0a1aeb0fd393c365be57b","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Resources.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,16 +21,14 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.ListUtils;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleApplication;\n import org.apache.syncope.client.console.rest.ResourceRestClient;\n import org.apache.syncope.client.console.wicket.ajax.markup.html.LabelInfo;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.ActionPermissions;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -51,9 +49,9 @@ public <T extends AnyTO> Resources(final AnyWrapper<T> modelObject) {\n \n         if (modelObject instanceof UserWrapper\n                 && UserWrapper.class.cast(modelObject).getPreviousUserTO() != null\n-                && !ListUtils.isEqualList(\n-                        modelObject.getInnerObject().getResources(),\n+                && !modelObject.getInnerObject().getResources().equals(\n                         UserWrapper.class.cast(modelObject).getPreviousUserTO().getResources())) {\n+\n             add(new LabelInfo(\"changed\", StringUtils.EMPTY));\n         } else {\n             add(new Label(\"changed\", StringUtils.EMPTY));\n@@ -93,9 +91,9 @@ public void setObject(final List<String> object) {\n     public boolean evaluate() {\n         if (SyncopeConsoleApplication.get().getSecuritySettings().getAuthorizationStrategy().\n                 isActionAuthorized(this, RENDER)) {\n-            available.setObject(CollectionUtils.collect(new ResourceRestClient().list(),\n-                    EntityTOUtils.<ResourceTO>keyTransformer(), new ArrayList<String>()));\n-            return CollectionUtils.isNotEmpty(available.getObject());\n+            available.setObject(new ResourceRestClient().list().stream().\n+                    map(EntityTO::getKey).collect(Collectors.toList()));\n+            return !available.getObject().isEmpty();\n         } else {\n             return false;\n         }"},{"sha":"974d7e9ed77154b144c39b033e61729a6c08e8f4","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Roles.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,19 +18,18 @@\n  */\n package org.apache.syncope.client.console.wizards.any;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.stream.Collectors;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.ListUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleApplication;\n import org.apache.syncope.client.console.rest.RoleRestClient;\n import org.apache.syncope.client.console.wicket.ajax.markup.html.LabelInfo;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.ActionPermissions;\n@@ -75,8 +74,9 @@ public <T extends AnyTO> Roles(final AnyWrapper<?> modelObject) {\n         this.setOutputMarkupId(true);\n \n         allRoles = SyncopeConsoleApplication.get().getSecuritySettings().getAuthorizationStrategy().\n-                isActionAuthorized(this, RENDER) ? CollectionUtils.collect(new RoleRestClient().list(),\n-                EntityTOUtils.<RoleTO>keyTransformer(), new ArrayList<String>()) : Collections.<String>emptyList();\n+                isActionAuthorized(this, RENDER)\n+                ? new RoleRestClient().list().stream().map(EntityTO::getKey).collect(Collectors.toList())\n+                : Collections.<String>emptyList();\n         Collections.sort(allRoles);\n \n         add(new AjaxPalettePanel.Builder<String>().build(\"roles\",\n@@ -92,6 +92,6 @@ public <T extends AnyTO> Roles(final AnyWrapper<?> modelObject) {\n     public final boolean evaluate() {\n         return CollectionUtils.isNotEmpty(allRoles)\n                 && SyncopeConsoleApplication.get().getSecuritySettings().getAuthorizationStrategy().\n-                isActionAuthorized(this, RENDER);\n+                        isActionAuthorized(this, RENDER);\n     }\n }"},{"sha":"cac7b38628b576c36efdbf741ec9cbfe1a9d6896","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/StatusPanel.java","status":"modified","additions":10,"deletions":18,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FStatusPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FStatusPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FStatusPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,10 +22,10 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.syncope.client.console.commons.SerializableTransformer;\n import org.apache.syncope.client.console.commons.status.ConnObjectWrapper;\n import org.apache.syncope.client.console.commons.status.Status;\n import org.apache.syncope.client.console.commons.status.StatusBean;\n@@ -64,20 +64,12 @@ public <T extends AnyTO> StatusPanel(\n             final T any,\n             final IModel<List<StatusBean>> model,\n             final PageReference pageRef) {\n+\n         super(id);\n         statusUtils = new StatusUtils();\n-        init(any, model,\n-                CollectionUtils.collect(statusUtils.getConnectorObjects(any),\n-                        new SerializableTransformer<ConnObjectWrapper, Pair<ConnObjectTO, ConnObjectWrapper>>() {\n-\n-                    private static final long serialVersionUID = 2658691884036294287L;\n-\n-                    @Override\n-                    public Pair<ConnObjectTO, ConnObjectWrapper> transform(final ConnObjectWrapper input) {\n-                        return Pair.of(null, input);\n-                    }\n-\n-                }, new ArrayList<Pair<ConnObjectTO, ConnObjectWrapper>>()), pageRef, false);\n+        init(any, model, statusUtils.getConnectorObjects(any).stream().\n+                map(input -> new ImmutablePair<ConnObjectTO, ConnObjectWrapper>(null, input)).\n+                collect(Collectors.toList()), pageRef, false);\n     }\n \n     public <T extends AnyTO> StatusPanel(\n@@ -123,7 +115,7 @@ private void init(\n         statusBeans.add(syncope);\n         initialStatusBeanMap.put(syncope.getResource(), syncope);\n \n-        for (Pair<ConnObjectTO, ConnObjectWrapper> pair : connObjects) {\n+        connObjects.forEach(pair -> {\n             ConnObjectWrapper entry = pair.getRight();\n             final StatusBean statusBean = statusUtils.getStatusBean(entry.getAny(),\n                     entry.getResourceName(),\n@@ -132,7 +124,7 @@ private void init(\n \n             initialStatusBeanMap.put(entry.getResourceName(), statusBean);\n             statusBeans.add(statusBean);\n-        }\n+        });\n \n         final MultilevelPanel mlp = new MultilevelPanel(\"resources\");\n         add(mlp);\n@@ -163,8 +155,8 @@ protected Component getValueComponent(final String key, final StatusBean bean) {\n \n             @Override\n             protected boolean statusCondition(final StatusBean bean) {\n-                final Pair<ConnObjectTO, ConnObjectTO> pair\n-                        = getConnObjectTO(bean.getKey(), bean.getResource(), connObjects);\n+                final Pair<ConnObjectTO, ConnObjectTO> pair =\n+                        getConnObjectTO(bean.getKey(), bean.getResource(), connObjects);\n \n                 return pair != null && pair.getRight() != null;\n             }"},{"sha":"2e5f72568991c853fc874a28d04698c9636fa295","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/TypeExtensionWizardBuilder.java","status":"modified","additions":10,"deletions":24,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FTypeExtensionWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FTypeExtensionWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FTypeExtensionWizardBuilder.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,18 +19,15 @@\n package org.apache.syncope.client.console.wizards.any;\n \n import java.io.Serializable;\n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.ListUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -73,14 +70,8 @@ protected WizardModel buildModelSteps(final TypeExtensionTO modelObject, final W\n \n     @Override\n     protected Serializable onApplyInternal(final TypeExtensionTO modelObject) {\n-        final List<TypeExtensionTO> typeExtensions =\n-                ListUtils.select(groupTO.getTypeExtensions(), new Predicate<TypeExtensionTO>() {\n-\n-                    @Override\n-                    public boolean evaluate(final TypeExtensionTO object) {\n-                        return !object.getAnyType().equals(modelObject.getAnyType());\n-                    }\n-                });\n+        List<TypeExtensionTO> typeExtensions = groupTO.getTypeExtensions().stream().\n+                filter(typeExt -> !typeExt.getAnyType().equals(modelObject.getAnyType())).collect(Collectors.toList());\n         typeExtensions.add(modelObject);\n         groupTO.getTypeExtensions().clear();\n         groupTO.getTypeExtensions().addAll(typeExtensions);\n@@ -100,30 +91,25 @@ public Details(final TypeExtensionTO typeExtensionTO) {\n             if (typeExtensionTO.getAnyType() == null) {\n                 List<String> anyTypes = new AnyTypeRestClient().list();\n                 anyTypes.remove(AnyTypeKind.GROUP.name());\n-                CollectionUtils.filter(anyTypes, new Predicate<String>() {\n-\n-                    @Override\n-                    public boolean evaluate(final String anyType) {\n-                        return groupTO.getTypeExtension(anyType) == null;\n-                    }\n-                });\n+                anyTypes.removeAll(anyTypes.stream().\n+                        filter(anyType -> groupTO.getTypeExtension(anyType).isPresent()).collect(Collectors.toList()));\n \n                 AjaxDropDownChoicePanel<String> anyTypeComponent = new AjaxDropDownChoicePanel<>(\n-                        \"anyType.component\", \"anyType\", new PropertyModel<String>(typeExtensionTO, \"anyType\"));\n+                        \"anyType.component\", \"anyType\", new PropertyModel<>(typeExtensionTO, \"anyType\"));\n                 anyTypeComponent.setChoices(anyTypes);\n                 anyTypeComponent.addRequiredLabel();\n                 add(anyTypeComponent.hideLabel().setOutputMarkupId(true));\n             } else {\n                 AjaxTextFieldPanel anyTypeComponent = new AjaxTextFieldPanel(\n-                        \"anyType.component\", \"anyType\", new PropertyModel<String>(typeExtensionTO, \"anyType\"));\n+                        \"anyType.component\", \"anyType\", new PropertyModel<>(typeExtensionTO, \"anyType\"));\n                 anyTypeComponent.setEnabled(false);\n                 add(anyTypeComponent.hideLabel());\n             }\n \n             add(new Label(\"auxClasses.label\", auxClassesLabel));\n \n-            List<String> anyTypeClasses = CollectionUtils.collect(new AnyTypeClassRestClient().list(),\n-                    EntityTOUtils.keyTransformer(), new ArrayList<String>());\n+            List<String> anyTypeClasses = new AnyTypeClassRestClient().list().stream().\n+                    map(EntityTO::getKey).collect(Collectors.toList());\n             AjaxPalettePanel<String> auxClassesPalette = new AjaxPalettePanel.Builder<String>().build(\n                     \"auxClasses.palette\",\n                     new PropertyModel<List<String>>(typeExtensionTO, \"auxClasses\"),"},{"sha":"3746443e4dccff99f897b853ebeb460ca06b45e4","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/AbstractConnConfPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FAbstractConnConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FAbstractConnConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FAbstractConnConfPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.wizards.resources;\n \n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -90,6 +89,6 @@ protected void setConfPropertyListView(final IModel<List<ConnConfProperty>> mode\n \n     @Override\n     public boolean evaluate() {\n-        return model != null && CollectionUtils.isNotEmpty(model.getObject());\n+        return model != null && model.getObject() != null && !model.getObject().isEmpty();\n     }\n }"},{"sha":"f2a3a1ecff54370f29d53d0a36e0829e496fc427","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ConnectorConfPanel.java","status":"modified","additions":22,"deletions":33,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorConfPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,15 +18,12 @@\n  */\n package org.apache.syncope.client.console.wizards.resources;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n-import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.wicket.model.LoadableDetachableModel;\n \n@@ -50,15 +47,11 @@ protected List<ConnConfProperty> load() {\n                 ConnectorConfPanel.this.modelObject.getConf().clear();\n \n                 // re-order properties\n-                Collections.sort(properties, new Comparator<ConnConfProperty>() {\n-\n-                    @Override\n-                    public int compare(final ConnConfProperty left, final ConnConfProperty right) {\n-                        if (left == null) {\n-                            return -1;\n-                        } else {\n-                            return left.compareTo(right);\n-                        }\n+                Collections.sort(properties, (o1, o2) -> {\n+                    if (o1 == null) {\n+                        return -1;\n+                    } else {\n+                        return o1.compareTo(o2);\n                     }\n                 });\n \n@@ -78,25 +71,21 @@ public int compare(final ConnConfProperty left, final ConnConfProperty right) {\n      */\n     @Override\n     protected final List<ConnConfProperty> getConnProperties(final ConnInstanceTO instance) {\n-        return CollectionUtils.collect(\n-                ConnectorWizardBuilder.getBundle(instance, bundles).getProperties(),\n-                new Transformer<ConnConfPropSchema, ConnConfProperty>() {\n-\n-            @Override\n-            public ConnConfProperty transform(final ConnConfPropSchema key) {\n-                final ConnConfProperty property = new ConnConfProperty();\n-                property.setSchema(key);\n-\n-                if (instance.getConf(key.getName()) != null && instance.getConf(key.getName()).getValues() != null) {\n-                    property.getValues().addAll(instance.getConf(key.getName()).getValues());\n-                    property.setOverridable(instance.getConf(key.getName()).isOverridable());\n-                }\n+        return ConnectorWizardBuilder.getBundle(instance, bundles).getProperties().stream().\n+                map(key -> {\n+                    ConnConfProperty property = new ConnConfProperty();\n+                    property.setSchema(key);\n+\n+                    Optional<ConnConfProperty> conf = instance.getConf(key.getName());\n+                    if (conf.isPresent() && conf.get().getValues() != null) {\n+                        property.getValues().addAll(conf.get().getValues());\n+                        property.setOverridable(conf.get().isOverridable());\n+                    }\n \n-                if (property.getValues().isEmpty() && !key.getDefaultValues().isEmpty()) {\n-                    property.getValues().addAll(key.getDefaultValues());\n-                }\n-                return property;\n-            }\n-        }, new ArrayList<ConnConfProperty>());\n+                    if (property.getValues().isEmpty() && !key.getDefaultValues().isEmpty()) {\n+                        property.getValues().addAll(key.getDefaultValues());\n+                    }\n+                    return property;\n+                }).collect(Collectors.toList());\n     }\n }"},{"sha":"1a5f9a7ec8396e76d065ca62fcded3165e954ef7","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ConnectorDetailsPanel.java","status":"modified","additions":19,"deletions":50,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,12 +20,8 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.rest.RealmRestClient;\n@@ -61,47 +57,31 @@ public ConnectorDetailsPanel(final ConnInstanceTO connInstanceTO, final List<Con\n             @Override\n             protected List<String> load() {\n                 List<RealmTO> allRealms = new RealmRestClient().list();\n-                CollectionUtils.filter(allRealms, new Predicate<RealmTO>() {\n-\n-                    @Override\n-                    public boolean evaluate(final RealmTO realm) {\n-                        return IterableUtils.matchesAny(authRealms, new Predicate<String>() {\n-\n-                            @Override\n-                            public boolean evaluate(final String fullpath) {\n-                                return realm.getFullPath().startsWith(fullpath);\n-                            }\n-                        });\n-                    }\n-                });\n-\n-                List<String> result = CollectionUtils.collect(allRealms, new Transformer<RealmTO, String>() {\n+                allRealms.removeAll(allRealms.stream().filter(realm\n+                        -> authRealms.stream().anyMatch(fullpath -> realm.getFullPath().startsWith(fullpath))).\n+                        collect(Collectors.toList()));\n \n-                    @Override\n-                    public String transform(final RealmTO realm) {\n-                        return realm.getFullPath();\n-                    }\n-                }, new ArrayList<String>());\n+                List<String> result = allRealms.stream().map(RealmTO::getFullPath).collect(Collectors.toList());\n                 Collections.sort(result);\n                 return result;\n             }\n         };\n \n         AjaxDropDownChoicePanel<String> realm = new AjaxDropDownChoicePanel<>(\n-                \"adminRealm\", \"adminRealm\", new PropertyModel<String>(connInstanceTO, \"adminRealm\"), false);\n+                \"adminRealm\", \"adminRealm\", new PropertyModel<>(connInstanceTO, \"adminRealm\"), false);\n         realm.setChoices(realms);\n         realm.setOutputMarkupId(true);\n         realm.addRequiredLabel();\n         add(realm);\n \n         AjaxTextFieldPanel displayName = new AjaxTextFieldPanel(\n-                \"displayName\", \"displayName\", new PropertyModel<String>(connInstanceTO, \"displayName\"), false);\n+                \"displayName\", \"displayName\", new PropertyModel<>(connInstanceTO, \"displayName\"), false);\n         displayName.setOutputMarkupId(true);\n         displayName.addRequiredLabel();\n         add(displayName);\n \n         AjaxTextFieldPanel location = new AjaxTextFieldPanel(\n-                \"location\", \"location\", new PropertyModel<String>(connInstanceTO, \"location\"), false);\n+                \"location\", \"location\", new PropertyModel<>(connInstanceTO, \"location\"), false);\n         location.addRequiredLabel();\n         location.setOutputMarkupId(true);\n         location.setEnabled(false);\n@@ -110,15 +90,15 @@ public String transform(final RealmTO realm) {\n         final AjaxDropDownChoicePanel<String> bundleName = new AjaxDropDownChoicePanel<>(\n                 \"bundleName\",\n                 \"bundleName\",\n-                new PropertyModel<String>(connInstanceTO, \"bundleName\"), false);\n+                new PropertyModel<>(connInstanceTO, \"bundleName\"), false);\n         ((DropDownChoice<String>) bundleName.getField()).setNullValid(true);\n \n         List<String> bundleNames = new ArrayList<>();\n-        for (ConnBundleTO bundle : bundles) {\n-            if (!bundleNames.contains(bundle.getBundleName())) {\n-                bundleNames.add(bundle.getBundleName());\n-            }\n-        }\n+        bundles.stream().\n+                filter(bundle -> (!bundleNames.contains(bundle.getBundleName()))).\n+                forEachOrdered(bundle -> {\n+                    bundleNames.add(bundle.getBundleName());\n+                });\n \n         bundleName.setChoices(bundleNames);\n         bundleName.addRequiredLabel();\n@@ -128,7 +108,7 @@ public String transform(final RealmTO realm) {\n         add(bundleName);\n \n         final AjaxDropDownChoicePanel<String> version = new AjaxDropDownChoicePanel<>(\n-                \"version\", \"version\", new PropertyModel<String>(connInstanceTO, \"version\"), false);\n+                \"version\", \"version\", new PropertyModel<>(connInstanceTO, \"version\"), false);\n         version.setChoices(getVersions(connInstanceTO, bundles));\n         version.addRequiredLabel();\n         version.setEnabled(connInstanceTO.getBundleName() != null);\n@@ -186,20 +166,9 @@ protected void onUpdate(final AjaxRequestTarget target) {\n     }\n \n     private List<String> getVersions(final ConnInstanceTO connInstanceTO, final List<ConnBundleTO> bundles) {\n-        return new ArrayList<>(CollectionUtils.collect(\n-                CollectionUtils.select(bundles, new Predicate<ConnBundleTO>() {\n-\n-                    @Override\n-                    public boolean evaluate(final ConnBundleTO object) {\n-                        return object.getLocation().equals(connInstanceTO.getLocation())\n-                                && object.getBundleName().equals(connInstanceTO.getBundleName());\n-                    }\n-                }), new Transformer<ConnBundleTO, String>() {\n-\n-            @Override\n-            public String transform(final ConnBundleTO input) {\n-                return input.getVersion();\n-            }\n-        }, new HashSet<String>()));\n+        return bundles.stream().filter(object\n+                -> object.getLocation().equals(connInstanceTO.getLocation())\n+                && object.getBundleName().equals(connInstanceTO.getBundleName())).\n+                map(ConnBundleTO::getVersion).collect(Collectors.toList());\n     }\n }"},{"sha":"7fcd82c45a1b38b198e61183075780ed445eeaff","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ConnectorWizardBuilder.java","status":"modified","additions":8,"deletions":22,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorWizardBuilder.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,18 +20,14 @@\n \n import java.io.Serializable;\n import java.net.URI;\n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n import org.apache.syncope.client.console.topology.TopologyNode;\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n-import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.wizard.WizardModel;\n@@ -51,13 +47,8 @@ public class ConnectorWizardBuilder extends AbstractResourceWizardBuilder<ConnIn\n \n     public ConnectorWizardBuilder(final ConnInstanceTO defaultItem, final PageReference pageRef) {\n         super(defaultItem, pageRef);\n-        this.bundles = CollectionUtils.select(connectorRestClient.getAllBundles(), new Predicate<ConnBundleTO>() {\n-\n-            @Override\n-            public boolean evaluate(final ConnBundleTO object) {\n-                return object.getLocation().equals(defaultItem.getLocation());\n-            }\n-        }, new ArrayList<ConnBundleTO>());\n+        this.bundles = connectorRestClient.getAllBundles().stream().\n+                filter(object -> object.getLocation().equals(defaultItem.getLocation())).collect(Collectors.toList());\n     }\n \n     @Override\n@@ -86,8 +77,7 @@ protected void onComponentTag(final ComponentTag tag) {\n             }\n \n         });\n-        wizardModel.add(new ConnCapabilitiesPanel(\n-                new PropertyModel<List<ConnectorCapability>>(connInstanceTO, \"capabilities\")));\n+        wizardModel.add(new ConnCapabilitiesPanel(new PropertyModel<>(connInstanceTO, \"capabilities\")));\n         return wizardModel;\n     }\n \n@@ -134,13 +124,9 @@ protected Serializable getCreateCustomPayloadEvent(final Serializable afterObjec\n     }\n \n     protected static ConnBundleTO getBundle(final ConnInstanceTO connInstanceTO, final List<ConnBundleTO> bundles) {\n-        return IterableUtils.find(bundles, new Predicate<ConnBundleTO>() {\n-\n-            @Override\n-            public boolean evaluate(final ConnBundleTO bundle) {\n-                return bundle.getBundleName().equals(connInstanceTO.getBundleName())\n-                        && bundle.getVersion().equals(connInstanceTO.getVersion());\n-            }\n-        });\n+        return bundles.stream().filter(bundle\n+                -> bundle.getBundleName().equals(connInstanceTO.getBundleName())\n+                && bundle.getVersion().equals(connInstanceTO.getVersion())).\n+                findFirst().orElse(null);\n     }\n }"},{"sha":"4ebbfb310930e284faad1cc5a4c16aadba02e923","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ProvisionWizardBuilder.java","status":"modified","additions":9,"deletions":18,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,8 +20,7 @@\n \n import java.io.Serializable;\n import java.util.List;\n-import org.apache.commons.collections4.ListUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -71,7 +70,7 @@ private final class ObjectType extends WizardStep {\n             add(container);\n \n             clazz = new AjaxTextFieldPanel(\n-                    \"clazz\", \"clazz\", new PropertyModel<String>(item, \"objectClass\"));\n+                    \"clazz\", \"clazz\", new PropertyModel<>(item, \"objectClass\"));\n             clazz.setRequired(true);\n             clazz.setChoices(connectorRestClient.getObjectClasses(resourceTO.getConnector()));\n             container.add(clazz);\n@@ -158,7 +157,7 @@ private final class ConnObjectLink extends WizardStep {\n             final AjaxTextFieldPanel connObjectLink = new AjaxTextFieldPanel(\n                     \"connObjectLink\",\n                     new ResourceModel(\"connObjectLink\", \"connObjectLink\").getObject(),\n-                    new PropertyModel<String>(item, \"connObjectLink\"),\n+                    new PropertyModel<>(item, \"connObjectLink\"),\n                     false);\n             connObjectLink.enableJexlHelp();\n             connObjectLink.setEnabled(connObjectLinkEnabled);\n@@ -224,21 +223,13 @@ protected Serializable onApplyInternal(final ResourceProvision modelObject) {\n         } else if (modelObject.getProvisionTO() != null) {\n             final List<ProvisionTO> provisions;\n             if (modelObject.getKey() == null) {\n-                provisions = ListUtils.select(this.resourceTO.getProvisions(), new Predicate<ProvisionTO>() {\n-\n-                    @Override\n-                    public boolean evaluate(final ProvisionTO object) {\n-                        return !modelObject.getAnyType().equals(object.getAnyType());\n-                    }\n-                });\n+                provisions = this.resourceTO.getProvisions().stream().\n+                        filter(object -> !modelObject.getAnyType().equals(object.getAnyType())).\n+                        collect(Collectors.toList());\n             } else {\n-                provisions = ListUtils.select(this.resourceTO.getProvisions(), new Predicate<ProvisionTO>() {\n-\n-                    @Override\n-                    public boolean evaluate(final ProvisionTO object) {\n-                        return !modelObject.getKey().equals(object.getKey());\n-                    }\n-                });\n+                provisions = this.resourceTO.getProvisions().stream().\n+                        filter(object -> !modelObject.getKey().equals(object.getKey())).\n+                        collect(Collectors.toList());\n             }\n \n             ProvisionTO provisionTO = modelObject.getProvisionTO();"},{"sha":"ac7ccc37f5d155e43f4726cf9570cf9617a92e20","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel.java","status":"modified","additions":24,"deletions":56,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,14 +21,8 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.IteratorUtils;\n-import org.apache.commons.collections4.ListUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -105,16 +99,11 @@ protected ResourceProvision getActualItem(\n \n                 return item == null\n                         ? null\n-                        : IteratorUtils.find(list.iterator(), new Predicate<ResourceProvision>() {\n-\n-                            @Override\n-                            public boolean evaluate(final ResourceProvision in) {\n-                                return ((item.getKey() == null && in.getKey() == null)\n-                                        || (in.getKey() != null && in.getKey().equals(item.getKey())))\n-                                        && ((item.getAnyType() == null && in.getAnyType() == null)\n-                                        || (in.getAnyType() != null && in.getAnyType().equals(item.getAnyType())));\n-                            }\n-                        });\n+                        : list.stream().filter(in -> ((item.getKey() == null && in.getKey() == null)\n+                        || (in.getKey() != null && in.getKey().equals(item.getKey())))\n+                        && ((item.getAnyType() == null && in.getAnyType() == null)\n+                        || (in.getAnyType() != null && in.getAnyType().equals(item.getAnyType())))).\n+                                findAny().orElse(null);\n             }\n \n             @Override\n@@ -150,9 +139,9 @@ protected ActionLinksTogglePanel<ResourceProvision> getTogglePanel() {\n         if (resourceTO.getOrgUnit() != null) {\n             provisions.add(new ResourceProvision(resourceTO.getOrgUnit()));\n         }\n-        for (ProvisionTO provision : resourceTO.getProvisions()) {\n+        resourceTO.getProvisions().forEach(provision -> {\n             provisions.add(new ResourceProvision(provision));\n-        }\n+        });\n         // keep list ordered - SYNCOPE-1154\n         sortProvisions();\n \n@@ -279,13 +268,7 @@ protected void onSubmit(final String type, final AjaxRequestTarget target) {\n     }\n \n     private void checkConnObjectKeyCount(final String anyType, final List<ItemTO> items) {\n-        long connObjectKeyCount = IterableUtils.countMatches(items, new Predicate<ItemTO>() {\n-\n-            @Override\n-            public boolean evaluate(final ItemTO item) {\n-                return item.isConnObjectKey();\n-            }\n-        });\n+        long connObjectKeyCount = items.stream().filter(ItemTO::isConnObjectKey).count();\n \n         if (connObjectKeyCount != 1) {\n             throw new IllegalArgumentException(anyType + \": \"\n@@ -300,15 +283,15 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                 checkConnObjectKeyCount(SyncopeConstants.REALM_ANYTYPE, resourceTO.getOrgUnit().getItems());\n             }\n \n-            for (ProvisionTO provision : new ArrayList<>(resourceTO.getProvisions())) {\n-                if (provision != null) {\n-                    if (provision.getMapping() == null || provision.getMapping().getItems().isEmpty()) {\n-                        resourceTO.getProvisions().remove(provision);\n-                    } else {\n-                        checkConnObjectKeyCount(provision.getAnyType(), provision.getMapping().getItems());\n-                    }\n-                }\n-            }\n+            new ArrayList<>(resourceTO.getProvisions()).stream().\n+                    filter(provision -> provision != null).\n+                    forEachOrdered(provision -> {\n+                        if (provision.getMapping() == null || provision.getMapping().getItems().isEmpty()) {\n+                            resourceTO.getProvisions().remove(provision);\n+                        } else {\n+                            checkConnObjectKeyCount(provision.getAnyType(), provision.getMapping().getItems());\n+                        }\n+                    });\n \n             resourceRestClient.update(resourceTO);\n             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n@@ -322,13 +305,8 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n     }\n \n     private void sortProvisions() {\n-        Collections.sort(provisions, new Comparator<ResourceProvision>() {\n-\n-            @Override\n-            public int compare(final ResourceProvision o1, final ResourceProvision o2) {\n-                return new AnyTypeRestClient.AnyTypeKeyComparator().compare(o1.getAnyType(), o2.getAnyType());\n-            }\n-        });\n+        Collections.sort(provisions, (o1, o2)\n+                -> new AnyTypeRestClient.AnyTypeKeyComparator().compare(o1.getAnyType(), o2.getAnyType()));\n     }\n \n     private LoadableDetachableModel<List<String>> getAnyTypes() {\n@@ -340,21 +318,11 @@ private LoadableDetachableModel<List<String>> getAnyTypes() {\n             protected List<String> load() {\n                 final List<String> currentlyAdded = new ArrayList<>();\n \n-                CollectionUtils.collect(resourceTO.getProvisions(), new Transformer<ProvisionTO, String>() {\n-\n-                    @Override\n-                    public String transform(final ProvisionTO provisionTO) {\n-                        return provisionTO.getAnyType();\n-                    }\n-                }, currentlyAdded);\n-\n-                return ListUtils.select(new AnyTypeRestClient().list(), new Predicate<String>() {\n+                currentlyAdded.addAll(resourceTO.getProvisions().stream().\n+                        map(ProvisionTO::getAnyType).collect(Collectors.toList()));\n \n-                    @Override\n-                    public boolean evaluate(final String key) {\n-                        return !currentlyAdded.contains(key);\n-                    }\n-                });\n+                return new AnyTypeRestClient().list().stream().\n+                        filter(anyType -> !currentlyAdded.contains(anyType)).collect(Collectors.toList());\n             }\n         };\n     }"},{"sha":"8ea6aa25219feecc60d7927c9657c3eb2a10335f","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/role/RoleWizardBuilder.java","status":"modified","additions":14,"deletions":22,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Frole%2FRoleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Frole%2FRoleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Frole%2FRoleWizardBuilder.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,10 +22,8 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.console.panels.search.SearchClause;\n import org.apache.syncope.client.console.panels.search.UserSearchPanel;\n import org.apache.syncope.client.console.rest.DynRealmRestClient;\n import org.apache.syncope.client.console.rest.RealmRestClient;\n@@ -34,7 +32,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.wicket.PageReference;\n@@ -105,7 +103,7 @@ public static class Details extends WizardStep {\n \n         public Details(final RoleWrapper modelObject) {\n             add(new AjaxTextFieldPanel(\n-                    \"key\", \"key\", new PropertyModel<String>(modelObject.getInnerObject(), \"key\"), false).\n+                    \"key\", \"key\", new PropertyModel<>(modelObject.getInnerObject(), \"key\"), false).\n                     setEnabled(StringUtils.isEmpty(modelObject.getInnerObject().getKey())));\n \n             // ------------------------\n@@ -119,7 +117,7 @@ public Details(final RoleWrapper modelObject) {\n                 @Override\n                 public Panel getPanel(final String panelId) {\n                     return new UserSearchPanel.Builder(\n-                            new PropertyModel<List<SearchClause>>(modelObject, \"dynClauses\")).\n+                            new PropertyModel<>(modelObject, \"dynClauses\")).\n                             required(true).build(panelId);\n                 }\n             }), Model.of(StringUtils.isBlank(modelObject.getDynMembershipCond()) ? -1 : 0)).setOutputMarkupId(true));\n@@ -159,16 +157,11 @@ public static class Realms extends WizardStep {\n \n         public Realms(final RoleTO modelObject) {\n             setTitleModel(new ResourceModel(\"realms\"));\n-            add(new AjaxPalettePanel.Builder<String>().build(\"realms\",\n-                    new PropertyModel<List<String>>(modelObject, \"realms\"),\n-                    new ListModel<>(\n-                            CollectionUtils.collect(new RealmRestClient().list(), new Transformer<RealmTO, String>() {\n-\n-                                @Override\n-                                public String transform(final RealmTO input) {\n-                                    return input.getFullPath();\n-                                }\n-                            }, new ArrayList<String>()))).hideLabel().setOutputMarkupId(true));\n+            add(new AjaxPalettePanel.Builder<>().build(\"realms\",\n+                    new PropertyModel<>(modelObject, \"realms\"),\n+                    new ListModel<>(new RealmRestClient().list().stream().\n+                            map(RealmTO::getFullPath).collect(Collectors.toList()))).\n+                    hideLabel().setOutputMarkupId(true));\n         }\n     }\n \n@@ -178,12 +171,11 @@ public static class DynRealms extends WizardStep {\n \n         public DynRealms(final RoleTO modelObject) {\n             setTitleModel(new ResourceModel(\"dynRealms\"));\n-            add(new AjaxPalettePanel.Builder<String>().build(\"dynRealms\",\n-                    new PropertyModel<List<String>>(modelObject, \"dynRealms\"),\n-                    new ListModel<>(\n-                            CollectionUtils.collect(new DynRealmRestClient().list(),\n-                                    EntityTOUtils.keyTransformer(),\n-                                    new ArrayList<String>()))).hideLabel().setOutputMarkupId(true));\n+            add(new AjaxPalettePanel.Builder<>().build(\"dynRealms\",\n+                    new PropertyModel<>(modelObject, \"dynRealms\"),\n+                    new ListModel<>(new DynRealmRestClient().list().stream().\n+                            map(EntityTO::getKey).collect(Collectors.toList()))).\n+                    hideLabel().setOutputMarkupId(true));\n         }\n     }\n "},{"sha":"21c8218759eb09935b1c98aaba6bfe36a051c1ec","filename":"client/enduser/src/test/java/org/apache/syncope/client/enduser/util/UserRequestValidatorTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidatorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidatorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidatorTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -61,11 +61,11 @@ public void testCompliant() throws IOException {\n         assertTrue(UserRequestValidator.compliant(userTO, customForm, true));\n \n         // firstname must have only one defaultValue\n-        userTO.getPlainAttr(\"firstname\").getValues().add(\"notAllowedFirstnameValue\");\n+        userTO.getPlainAttr(\"firstname\").get().getValues().add(\"notAllowedFirstnameValue\");\n         assertFalse(UserRequestValidator.compliant(userTO, customForm, true));\n         assertTrue(UserRequestValidator.compliant(userTO, customForm, false));\n         // clean\n-        userTO.getPlainAttr(\"firstname\").getValues().remove(\"notAllowedFirstnameValue\");\n+        userTO.getPlainAttr(\"firstname\").get().getValues().remove(\"notAllowedFirstnameValue\");\n \n         // derived must not be present\n         AttrTO derivedNotAllowed = attrTO(\"derivedNotAllowed\");\n@@ -80,7 +80,7 @@ public void testCompliant() throws IOException {\n         assertTrue(UserRequestValidator.compliant(userTO, customForm, true));\n \n         // with empty form is compliant by definition\n-        assertTrue(UserRequestValidator.compliant(userTO, new HashMap<String, CustomAttributesInfo>(), true));\n+        assertTrue(UserRequestValidator.compliant(userTO, new HashMap<>(), true));\n     }\n \n }"},{"sha":"29fae0953f2d991378f26906cde4bd33faf229f7","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/RestClientExceptionMapper.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -112,7 +112,7 @@ private SyncopeClientCompositeException checkSyncopeClientCompositeException(fin\n             List<String> exInfos = response.getStringHeaders().get(RESTHeaders.ERROR_INFO);\n \n             Set<String> handledExceptions = new HashSet<>();\n-            for (String exTypeAsString : exTypesInHeaders) {\n+            exTypesInHeaders.forEach(exTypeAsString -> {\n                 ClientExceptionType exceptionType = null;\n                 try {\n                     exceptionType = ClientExceptionType.fromHeaderValue(exTypeAsString);\n@@ -132,7 +132,7 @@ private SyncopeClientCompositeException checkSyncopeClientCompositeException(fin\n                     }\n                     compException.addException(clientException);\n                 }\n-            }\n+            });\n \n             exTypesInHeaders.removeAll(handledExceptions);\n             if (!exTypesInHeaders.isEmpty()) {"},{"sha":"a3f959d6a3f645ef961943fee21d59863eb29cd1","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -76,7 +76,7 @@ public SyncopeClient(\n         this.mediaType = mediaType;\n         this.restClientFactory = restClientFactory;\n         if (this.restClientFactory.getHeaders() == null) {\n-            this.restClientFactory.setHeaders(new HashMap<String, String>());\n+            this.restClientFactory.setHeaders(new HashMap<>());\n         }\n         this.exceptionMapper = exceptionMapper;\n         init(handler);"},{"sha":"c4105e8666ec4fa5015c07418c1cb55443af2f4e","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -114,7 +114,7 @@ protected RestClientExceptionMapper defaultExceptionMapper() {\n \n     protected JAXRSClientFactoryBean defaultRestClientFactoryBean() {\n         JAXRSClientFactoryBean defaultRestClientFactoryBean = new JAXRSClientFactoryBean();\n-        defaultRestClientFactoryBean.setHeaders(new HashMap<String, String>());\n+        defaultRestClientFactoryBean.setHeaders(new HashMap<>());\n \n         if (StringUtils.isBlank(address)) {\n             throw new IllegalArgumentException(\"Property 'address' is missing\");\n@@ -263,7 +263,7 @@ public SyncopeClient create(final String username, final String password) {\n      *\n      * @param jwt value received after login, in the {@link RESTHeaders#TOKEN} response header\n      * @return client instance which will be passing the provided value in the\n-     *         {@link javax.ws.rs.core.HttpHeaders#AUTHORIZATION}\n+     * {@link javax.ws.rs.core.HttpHeaders#AUTHORIZATION}\n      * request header\n      */\n     public SyncopeClient create(final String jwt) {"},{"sha":"18cd8b824362876f7d848629d770baadf8817837","filename":"common/lib/pom.xml","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fpom.xml?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -61,10 +61,6 @@ under the License.\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-text</artifactId>\n     </dependency>\n-    <dependency>\n-      <groupId>org.apache.commons</groupId>\n-      <artifactId>commons-collections4</artifactId>\n-    </dependency>\n       \n     <dependency>\n       <groupId>org.slf4j</groupId>"},{"sha":"f180ed0bac400c1dbf5dfd9ab2e33400e047b4c2","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":171,"deletions":169,"changes":340,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,11 +21,8 @@\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n-import org.apache.commons.collections4.Closure;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -115,16 +112,18 @@ private static void diff(\n         result.getAuxClasses().clear();\n \n         if (!incremental) {\n-            for (String auxClass : CollectionUtils.subtract(original.getAuxClasses(), updated.getAuxClasses())) {\n-                result.getAuxClasses().add(\n-                        new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(auxClass).build());\n-            }\n+            original.getAuxClasses().stream().filter(auxClass -> !updated.getAuxClasses().contains(auxClass)).\n+                    forEach(auxClass -> {\n+                        result.getAuxClasses().add(new StringPatchItem.Builder().\n+                                operation(PatchOperation.DELETE).value(auxClass).build());\n+                    });\n         }\n \n-        for (String auxClass : CollectionUtils.subtract(updated.getAuxClasses(), original.getAuxClasses())) {\n-            result.getAuxClasses().add(\n-                    new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(auxClass).build());\n-        }\n+        updated.getAuxClasses().stream().filter(auxClass -> !original.getAuxClasses().contains(auxClass)).\n+                forEach(auxClass -> {\n+                    result.getAuxClasses().add(new StringPatchItem.Builder().\n+                            operation(PatchOperation.ADD_REPLACE).value(auxClass).build());\n+                });\n \n         // 3. plain attributes\n         Map<String, AttrTO> updatedAttrs = EntityTOUtils.buildAttrMap(updated.getPlainAttrs());\n@@ -133,20 +132,16 @@ private static void diff(\n         result.getPlainAttrs().clear();\n \n         if (!incremental) {\n-            IterableUtils.forEach(CollectionUtils.subtract(originalAttrs.keySet(), updatedAttrs.keySet()),\n-                    new Closure<String>() {\n-\n-                @Override\n-                public void execute(final String schema) {\n-                    result.getPlainAttrs().add(new AttrPatch.Builder().\n-                            operation(PatchOperation.DELETE).\n-                            attrTO(new AttrTO.Builder().schema(schema).build()).\n-                            build());\n-                }\n-            });\n+            originalAttrs.keySet().stream().filter(attr -> !updatedAttrs.containsKey(attr)).\n+                    forEach(schema -> {\n+                        result.getPlainAttrs().add(new AttrPatch.Builder().\n+                                operation(PatchOperation.DELETE).\n+                                attrTO(new AttrTO.Builder().schema(schema).build()).\n+                                build());\n+                    });\n         }\n \n-        for (AttrTO attrTO : updatedAttrs.values()) {\n+        updatedAttrs.values().forEach(attrTO -> {\n             if (attrTO.getValues().isEmpty()) {\n                 if (!incremental) {\n                     result.getPlainAttrs().add(new AttrPatch.Builder().\n@@ -163,7 +158,7 @@ public void execute(final String schema) {\n                     result.getPlainAttrs().add(patch);\n                 }\n             }\n-        }\n+        });\n \n         // 4. virtual attributes\n         result.getVirAttrs().clear();\n@@ -173,16 +168,18 @@ public void execute(final String schema) {\n         result.getResources().clear();\n \n         if (!incremental) {\n-            for (String resource : CollectionUtils.subtract(original.getResources(), updated.getResources())) {\n-                result.getResources().add(\n-                        new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build());\n-            }\n+            original.getResources().stream().filter(resource -> !updated.getResources().contains(resource)).\n+                    forEach(resource -> {\n+                        result.getResources().add(new StringPatchItem.Builder().\n+                                operation(PatchOperation.DELETE).value(resource).build());\n+                    });\n         }\n \n-        for (String resource : CollectionUtils.subtract(updated.getResources(), original.getResources())) {\n-            result.getResources().add(\n-                    new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build());\n-        }\n+        updated.getResources().stream().filter(resource -> !original.getResources().contains(resource)).\n+                forEach(resource -> {\n+                    result.getResources().add(new StringPatchItem.Builder().\n+                            operation(PatchOperation.ADD_REPLACE).value(resource).build());\n+                });\n     }\n \n     /**\n@@ -209,38 +206,41 @@ public static AnyObjectPatch diff(\n         Map<Pair<String, String>, RelationshipTO> originalRels =\n                 EntityTOUtils.buildRelationshipMap(original.getRelationships());\n \n-        for (Map.Entry<Pair<String, String>, RelationshipTO> entry : updatedRels.entrySet()) {\n-            if (!originalRels.containsKey(entry.getKey())) {\n-                result.getRelationships().add(new RelationshipPatch.Builder().\n-                        operation(PatchOperation.ADD_REPLACE).\n-                        relationshipTO(entry.getValue()).build());\n-            }\n-        }\n+        updatedRels.entrySet().stream().\n+                filter(entry -> (!originalRels.containsKey(entry.getKey()))).\n+                forEachOrdered(entry -> {\n+                    result.getRelationships().add(new RelationshipPatch.Builder().\n+                            operation(PatchOperation.ADD_REPLACE).\n+                            relationshipTO(entry.getValue()).build());\n+                });\n \n         if (!incremental) {\n-            for (Pair<String, String> key : CollectionUtils.subtract(originalRels.keySet(), updatedRels.keySet())) {\n-                result.getRelationships().add(new RelationshipPatch.Builder().\n-                        operation(PatchOperation.DELETE).\n-                        relationshipTO(originalRels.get(key)).build());\n-            }\n+            originalRels.keySet().stream().filter(relationship -> !updatedRels.containsKey(relationship)).\n+                    forEach(key -> {\n+                        result.getRelationships().add(new RelationshipPatch.Builder().\n+                                operation(PatchOperation.DELETE).\n+                                relationshipTO(originalRels.get(key)).build());\n+                    });\n         }\n \n         // 3. memberships\n         Map<String, MembershipTO> updatedMembs = EntityTOUtils.buildMembershipMap(updated.getMemberships());\n         Map<String, MembershipTO> originalMembs = EntityTOUtils.buildMembershipMap(original.getMemberships());\n \n-        for (Map.Entry<String, MembershipTO> entry : updatedMembs.entrySet()) {\n-            if (!originalMembs.containsKey(entry.getKey())) {\n-                result.getMemberships().add(new MembershipPatch.Builder().\n-                        operation(PatchOperation.ADD_REPLACE).group(entry.getValue().getGroupKey()).build());\n-            }\n-        }\n+        updatedMembs.entrySet().stream().\n+                filter(entry -> (!originalMembs.containsKey(entry.getKey()))).\n+                forEachOrdered(entry -> {\n+                    result.getMemberships().add(new MembershipPatch.Builder().\n+                            operation(PatchOperation.ADD_REPLACE).group(entry.getValue().getGroupKey()).\n+                            build());\n+                });\n \n         if (!incremental) {\n-            for (String key : CollectionUtils.subtract(originalMembs.keySet(), updatedMembs.keySet())) {\n-                result.getMemberships().add(new MembershipPatch.Builder().\n-                        operation(PatchOperation.DELETE).group(originalMembs.get(key).getGroupKey()).build());\n-            }\n+            originalMembs.keySet().stream().filter(membership -> !updatedMembs.containsKey(membership)).\n+                    forEach(key -> {\n+                        result.getMemberships().add(new MembershipPatch.Builder().\n+                                operation(PatchOperation.DELETE).group(originalMembs.get(key).getGroupKey()).build());\n+                    });\n         }\n \n         return result;\n@@ -290,65 +290,71 @@ public static UserPatch diff(final UserTO updated, final UserTO original, final\n \n         // 4. roles\n         if (!incremental) {\n-            for (String toRemove : CollectionUtils.subtract(original.getRoles(), updated.getRoles())) {\n-                result.getRoles().add(\n-                        new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(toRemove).build());\n-            }\n+            original.getRoles().stream().filter(role -> !updated.getRoles().contains(role)).\n+                    forEach(toRemove -> {\n+                        result.getRoles().add(new StringPatchItem.Builder().\n+                                operation(PatchOperation.DELETE).value(toRemove).build());\n+                    });\n         }\n \n-        for (String toAdd : CollectionUtils.subtract(updated.getRoles(), original.getRoles())) {\n-            result.getRoles().add(\n-                    new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(toAdd).build());\n-        }\n+        updated.getRoles().stream().filter(role -> !original.getRoles().contains(role)).\n+                forEach(toAdd -> {\n+                    result.getRoles().add(new StringPatchItem.Builder().\n+                            operation(PatchOperation.ADD_REPLACE).value(toAdd).build());\n+                });\n \n         // 5. relationships\n         Map<Pair<String, String>, RelationshipTO> updatedRels =\n                 EntityTOUtils.buildRelationshipMap(updated.getRelationships());\n         Map<Pair<String, String>, RelationshipTO> originalRels =\n                 EntityTOUtils.buildRelationshipMap(original.getRelationships());\n \n-        for (Map.Entry<Pair<String, String>, RelationshipTO> entry : updatedRels.entrySet()) {\n-            if (!originalRels.containsKey(entry.getKey())) {\n-                result.getRelationships().add(new RelationshipPatch.Builder().\n-                        operation(PatchOperation.ADD_REPLACE).\n-                        relationshipTO(entry.getValue()).build());\n-            }\n-        }\n+        updatedRels.entrySet().stream().\n+                filter(entry -> (!originalRels.containsKey(entry.getKey()))).\n+                forEachOrdered(entry -> {\n+                    result.getRelationships().add(new RelationshipPatch.Builder().\n+                            operation(PatchOperation.ADD_REPLACE).\n+                            relationshipTO(entry.getValue()).build());\n+                });\n \n         if (!incremental) {\n-            for (Pair<String, String> key : CollectionUtils.subtract(originalRels.keySet(), updatedRels.keySet())) {\n-                result.getRelationships().add(new RelationshipPatch.Builder().\n-                        operation(PatchOperation.DELETE).\n-                        relationshipTO(originalRels.get(key)).build());\n-            }\n+            originalRels.keySet().stream().filter(relationship -> !updatedRels.containsKey(relationship)).\n+                    forEach(key -> {\n+                        result.getRelationships().add(new RelationshipPatch.Builder().\n+                                operation(PatchOperation.DELETE).\n+                                relationshipTO(originalRels.get(key)).build());\n+                    });\n         }\n \n         // 6. memberships\n         Map<String, MembershipTO> updatedMembs = EntityTOUtils.buildMembershipMap(updated.getMemberships());\n         Map<String, MembershipTO> originalMembs = EntityTOUtils.buildMembershipMap(original.getMemberships());\n \n-        for (Map.Entry<String, MembershipTO> entry : updatedMembs.entrySet()) {\n-            MembershipPatch membershipPatch = new MembershipPatch.Builder().\n-                    operation(PatchOperation.ADD_REPLACE).group(entry.getValue().getGroupKey()).build();\n-\n-            MembershipTO omemb;\n-            if (originalMembs.containsKey(entry.getKey())) {\n-                // get the original membership\n-                omemb = originalMembs.get(entry.getKey());\n-            } else {\n-                // create an empty one to generate the patch\n-                omemb = new MembershipTO.Builder().group(entry.getKey()).build();\n-            }\n-\n-            diff(entry.getValue(), omemb, membershipPatch, incremental);\n-            result.getMemberships().add(membershipPatch);\n-        }\n+        updatedMembs.entrySet().stream().\n+                map(entry -> {\n+                    MembershipPatch membershipPatch = new MembershipPatch.Builder().\n+                            operation(PatchOperation.ADD_REPLACE).group(entry.getValue().getGroupKey()).build();\n+                    MembershipTO omemb;\n+                    if (originalMembs.containsKey(entry.getKey())) {\n+                        // get the original membership\n+                        omemb = originalMembs.get(entry.getKey());\n+                    } else {\n+                        // create an empty one to generate the patch\n+                        omemb = new MembershipTO.Builder().group(entry.getKey()).build();\n+                    }\n+                    diff(entry.getValue(), omemb, membershipPatch, incremental);\n+                    return membershipPatch;\n+                }).\n+                forEachOrdered(membershipPatch -> {\n+                    result.getMemberships().add(membershipPatch);\n+                });\n \n         if (!incremental) {\n-            for (String key : CollectionUtils.subtract(originalMembs.keySet(), updatedMembs.keySet())) {\n-                result.getMemberships().add(new MembershipPatch.Builder().\n-                        operation(PatchOperation.DELETE).group(originalMembs.get(key).getGroupKey()).build());\n-            }\n+            originalMembs.keySet().stream().filter(membership -> !updatedMembs.containsKey(membership)).\n+                    forEach(key -> {\n+                        result.getMemberships().add(new MembershipPatch.Builder().\n+                                operation(PatchOperation.DELETE).group(originalMembs.get(key).getGroupKey()).build());\n+                    });\n         }\n \n         return result;\n@@ -403,7 +409,7 @@ public static <TO extends AnyTO, P extends AnyPatch> P diff(\n \n     private static Collection<AttrTO> patch(final Map<String, AttrTO> attrs, final Set<AttrPatch> attrPatches) {\n         Map<String, AttrTO> rwattrs = new HashMap<>(attrs);\n-        for (AttrPatch patch : attrPatches) {\n+        attrPatches.forEach(patch -> {\n             if (patch.getAttrTO() == null) {\n                 LOG.warn(\"Invalid {} specified: {}\", AttrPatch.class.getName(), patch);\n             } else {\n@@ -412,7 +418,7 @@ private static Collection<AttrTO> patch(final Map<String, AttrTO> attrs, final S\n                     rwattrs.put(patch.getAttrTO().getSchema(), patch.getAttrTO());\n                 }\n             }\n-        }\n+        });\n \n         return rwattrs.values();\n     }\n@@ -496,46 +502,44 @@ public static AnyObjectTO patch(final AnyObjectTO anyObjectTO, final AnyObjectPa\n         }\n \n         // 1. relationships\n-        for (RelationshipPatch relPatch : anyObjectPatch.getRelationships()) {\n-            if (relPatch.getRelationshipTO() == null) {\n-                LOG.warn(\"Invalid {} specified: {}\", RelationshipPatch.class.getName(), relPatch);\n-            } else {\n-                result.getRelationships().remove(relPatch.getRelationshipTO());\n-                if (relPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                    result.getRelationships().add(relPatch.getRelationshipTO());\n-                }\n-            }\n-        }\n+        anyObjectPatch.getRelationships().\n+                forEach(relPatch -> {\n+                    if (relPatch.getRelationshipTO() == null) {\n+                        LOG.warn(\"Invalid {} specified: {}\", RelationshipPatch.class.getName(), relPatch);\n+                    } else {\n+                        result.getRelationships().remove(relPatch.getRelationshipTO());\n+                        if (relPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                            result.getRelationships().add(relPatch.getRelationshipTO());\n+                        }\n+                    }\n+                });\n \n         // 2. memberships\n-        for (final MembershipPatch membPatch : anyObjectPatch.getMemberships()) {\n-            if (membPatch.getGroup() == null) {\n-                LOG.warn(\"Invalid {} specified: {}\", MembershipPatch.class.getName(), membPatch);\n-            } else {\n-                MembershipTO memb = IterableUtils.find(result.getMemberships(), new Predicate<MembershipTO>() {\n-\n-                    @Override\n-                    public boolean evaluate(final MembershipTO object) {\n-                        return membPatch.getGroup().equals(object.getGroupKey());\n+        anyObjectPatch.getMemberships().\n+                forEach(membPatch -> {\n+                    if (membPatch.getGroup() == null) {\n+                        LOG.warn(\"Invalid {} specified: {}\", MembershipPatch.class.getName(), membPatch);\n+                    } else {\n+                        Optional<MembershipTO> memb = result.getMemberships().stream().\n+                                filter(membership -> membPatch.getGroup().equals(membership.getGroupKey())).findFirst();\n+                        if (memb.isPresent()) {\n+                            result.getMemberships().remove(memb.get());\n+                        }\n+\n+                        if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                            MembershipTO newMembershipTO =\n+                                    new MembershipTO.Builder().group(membPatch.getGroup()).build();\n+\n+                            // 3. plain attributes\n+                            newMembershipTO.getPlainAttrs().addAll(membPatch.getPlainAttrs());\n+\n+                            // 4. virtual attributes\n+                            newMembershipTO.getVirAttrs().addAll(membPatch.getVirAttrs());\n+\n+                            result.getMemberships().add(newMembershipTO);\n+                        }\n                     }\n                 });\n-                if (memb != null) {\n-                    result.getMemberships().remove(memb);\n-                }\n-\n-                if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                    MembershipTO newMembershipTO = new MembershipTO.Builder().group(membPatch.getGroup()).build();\n-\n-                    // 3. plain attributes\n-                    newMembershipTO.getPlainAttrs().addAll(membPatch.getPlainAttrs());\n-\n-                    // 4. virtual attributes\n-                    newMembershipTO.getVirAttrs().addAll(membPatch.getVirAttrs());\n-\n-                    result.getMemberships().add(newMembershipTO);\n-                }\n-            }\n-        }\n \n         return result;\n     }\n@@ -555,46 +559,44 @@ public static UserTO patch(final UserTO userTO, final UserPatch userPatch) {\n         }\n \n         // 3. relationships\n-        for (RelationshipPatch relPatch : userPatch.getRelationships()) {\n-            if (relPatch.getRelationshipTO() == null) {\n-                LOG.warn(\"Invalid {} specified: {}\", RelationshipPatch.class.getName(), relPatch);\n-            } else {\n-                result.getRelationships().remove(relPatch.getRelationshipTO());\n-                if (relPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                    result.getRelationships().add(relPatch.getRelationshipTO());\n-                }\n-            }\n-        }\n+        userPatch.getRelationships().\n+                forEach(relPatch -> {\n+                    if (relPatch.getRelationshipTO() == null) {\n+                        LOG.warn(\"Invalid {} specified: {}\", RelationshipPatch.class.getName(), relPatch);\n+                    } else {\n+                        result.getRelationships().remove(relPatch.getRelationshipTO());\n+                        if (relPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                            result.getRelationships().add(relPatch.getRelationshipTO());\n+                        }\n+                    }\n+                });\n \n         // 4. memberships\n-        for (final MembershipPatch membPatch : userPatch.getMemberships()) {\n-            if (membPatch.getGroup() == null) {\n-                LOG.warn(\"Invalid {} specified: {}\", MembershipPatch.class.getName(), membPatch);\n-            } else {\n-                MembershipTO memb = IterableUtils.find(result.getMemberships(), new Predicate<MembershipTO>() {\n-\n-                    @Override\n-                    public boolean evaluate(final MembershipTO object) {\n-                        return membPatch.getGroup().equals(object.getGroupKey());\n+        userPatch.getMemberships().\n+                forEach(membPatch -> {\n+                    if (membPatch.getGroup() == null) {\n+                        LOG.warn(\"Invalid {} specified: {}\", MembershipPatch.class.getName(), membPatch);\n+                    } else {\n+                        Optional<MembershipTO> memb = result.getMemberships().stream().\n+                                filter(membership -> membPatch.getGroup().equals(membership.getGroupKey())).findFirst();\n+                        if (memb.isPresent()) {\n+                            result.getMemberships().remove(memb.get());\n+                        }\n+\n+                        if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                            MembershipTO newMembershipTO =\n+                                    new MembershipTO.Builder().group(membPatch.getGroup()).build();\n+\n+                            // 3. plain attributes\n+                            newMembershipTO.getPlainAttrs().addAll(membPatch.getPlainAttrs());\n+\n+                            // 4. virtual attributes\n+                            newMembershipTO.getVirAttrs().addAll(membPatch.getVirAttrs());\n+\n+                            result.getMemberships().add(newMembershipTO);\n+                        }\n                     }\n                 });\n-                if (memb != null) {\n-                    result.getMemberships().remove(memb);\n-                }\n-\n-                if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                    MembershipTO newMembershipTO = new MembershipTO.Builder().group(membPatch.getGroup()).build();\n-\n-                    // 3. plain attributes\n-                    newMembershipTO.getPlainAttrs().addAll(membPatch.getPlainAttrs());\n-\n-                    // 4. virtual attributes\n-                    newMembershipTO.getVirAttrs().addAll(membPatch.getVirAttrs());\n-\n-                    result.getMemberships().add(newMembershipTO);\n-                }\n-            }\n-        }\n \n         // 5. roles\n         for (StringPatchItem rolePatch : userPatch.getRoles()) {"},{"sha":"38f5202a5dbee9eaf1c90484e8334a94bdb5bb09","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/EntityTOUtils.java","status":"modified","additions":4,"deletions":21,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,30 +22,16 @@\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n \n public final class EntityTOUtils {\n \n-    public static <E extends EntityTO> Transformer<E, String> keyTransformer() {\n-        return new Transformer<E, String>() {\n-\n-            @Override\n-            public String transform(final E input) {\n-                return input.getKey();\n-            }\n-        };\n-    }\n-\n     public static Map<String, AttrTO> buildAttrMap(final Collection<AttrTO> attrs) {\n         Map<String, AttrTO> result = new HashMap<>(attrs.size());\n-        for (AttrTO attributeTO : attrs) {\n-            result.put(attributeTO.getSchema(), attributeTO);\n-        }\n+        attrs.forEach(attrTO -> result.put(attrTO.getSchema(), attrTO));\n \n         return Collections.unmodifiableMap(result);\n     }\n@@ -54,18 +40,15 @@ public static Map<Pair<String, String>, RelationshipTO> buildRelationshipMap(\n             final Collection<RelationshipTO> relationships) {\n \n         Map<Pair<String, String>, RelationshipTO> result = new HashMap<>(relationships.size());\n-        for (RelationshipTO relationship : relationships) {\n-            result.put(Pair.of(relationship.getType(), relationship.getRightKey()), relationship);\n-        }\n+        relationships.forEach(\n+                relationship -> result.put(Pair.of(relationship.getType(), relationship.getRightKey()), relationship));\n \n         return Collections.unmodifiableMap(result);\n     }\n \n     public static Map<String, MembershipTO> buildMembershipMap(final Collection<MembershipTO> memberships) {\n         Map<String, MembershipTO> result = new HashMap<>(memberships.size());\n-        for (MembershipTO membership : memberships) {\n-            result.put(membership.getRightKey(), membership);\n-        }\n+        memberships.forEach(membership -> result.put(membership.getRightKey(), membership));\n \n         return Collections.unmodifiableMap(result);\n     }"},{"sha":"3e7bc0cbe3bbfa2bebbe6beeeb9208502978c1d7","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/SyncopeClientCompositeException.java","status":"modified","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeClientCompositeException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeClientCompositeException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeClientCompositeException.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,9 +20,8 @@\n \n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.Optional;\n import java.util.Set;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n \n public class SyncopeClientCompositeException extends SyncopeClientException {\n@@ -68,17 +67,12 @@ public boolean addException(final SyncopeClientException exception) {\n                     + ClientExceptionType.class.getName() + \" set\");\n         }\n \n-        SyncopeClientException alreadyAdded = IterableUtils.find(exceptions, new Predicate<SyncopeClientException>() {\n+        Optional<SyncopeClientException> alreadyAdded =\n+                exceptions.stream().filter(ex -> ex.getType() == exception.getType()).findFirst();\n \n-            @Override\n-            public boolean evaluate(final SyncopeClientException ex) {\n-                return ex.getType() == exception.getType();\n-            }\n-        });\n-\n-        return alreadyAdded == null\n-                ? exceptions.add(exception)\n-                : alreadyAdded.getElements().addAll(exception.getElements());\n+        return alreadyAdded.isPresent()\n+                ? alreadyAdded.get().getElements().addAll(exception.getElements())\n+                : exceptions.add(exception);\n     }\n \n     @Override"},{"sha":"1977a7efabffc875b3c5ad4a076c2aea46a35426","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/collections/CircularFifoQueue.java","status":"added","additions":427,"deletions":0,"changes":427,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcollections%2FCircularFifoQueue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcollections%2FCircularFifoQueue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcollections%2FCircularFifoQueue.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -0,0 +1,427 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.collections;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.AbstractCollection;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import java.util.Queue;\n+\n+/**\n+ * CircularFifoQueue is a first-in first-out queue with a fixed size that\n+ * replaces its oldest element if full.\n+ *\n+ * The removal order of a {@link CircularFifoQueue} is based on the\n+ * insertion order; elements are removed in the same order in which they\n+ * were added. The iteration order is the same as the removal order.\n+ *\n+ * The {@link #add(Object)}, {@link #remove()}, {@link #peek()}, {@link #poll},\n+ * {@link #offer(Object)} operations all perform in constant time.\n+ * All other operations perform in linear time or worse.\n+ *\n+ * This queue prevents null objects from being added.\n+ *\n+ * @param <E> the type of elements held in this collection\n+ */\n+public class CircularFifoQueue<E> extends AbstractCollection<E> implements Queue<E>, Serializable {\n+\n+    private static final long serialVersionUID = -8423413834657610406L;\n+\n+    /** Underlying storage array. */\n+    private transient E[] elements;\n+\n+    /** Array index of first (oldest) queue element. */\n+    private transient int start = 0;\n+\n+    /**\n+     * Index mod maxElements of the array position following the last queue\n+     * element. Queue elements start at elements[start] and \"wrap around\"\n+     * elements[maxElements-1], ending at elements[decrement(end)].\n+     * For example, elements = {c,a,b}, start=1, end=1 corresponds to\n+     * the queue [a,b,c].\n+     */\n+    private transient int end = 0;\n+\n+    /** Flag to indicate if the queue is currently full. */\n+    private transient boolean full = false;\n+\n+    /** Capacity of the queue. */\n+    private final int maxElements;\n+\n+    /**\n+     * Constructor that creates a queue with the default size of 32.\n+     */\n+    public CircularFifoQueue() {\n+        this(32);\n+    }\n+\n+    /**\n+     * Constructor that creates a queue with the specified size.\n+     *\n+     * @param size the size of the queue (cannot be changed)\n+     * @throws IllegalArgumentException if the size is &lt; 1\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public CircularFifoQueue(final int size) {\n+        if (size <= 0) {\n+            throw new IllegalArgumentException(\"The size must be greater than 0\");\n+        }\n+        elements = (E[]) new Object[size];\n+        maxElements = elements.length;\n+    }\n+\n+    /**\n+     * Constructor that creates a queue from the specified collection.\n+     * The collection size also sets the queue size.\n+     *\n+     * @param coll the collection to copy into the queue, may not be null\n+     * @throws NullPointerException if the collection is null\n+     */\n+    public CircularFifoQueue(final Collection<? extends E> coll) {\n+        this(coll.size());\n+        addAll(coll);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Write the queue out using a custom routine.\n+     *\n+     * @param out the output stream\n+     * @throws IOException if an I/O error occurs while writing to the output stream\n+     */\n+    private void writeObject(final ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        out.writeInt(size());\n+        for (final E e : this) {\n+            out.writeObject(e);\n+        }\n+    }\n+\n+    /**\n+     * Read the queue in using a custom routine.\n+     *\n+     * @param in the input stream\n+     * @throws IOException if an I/O error occurs while writing to the output stream\n+     * @throws ClassNotFoundException if the class of a serialized object can not be found\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        elements = (E[]) new Object[maxElements];\n+        final int size = in.readInt();\n+        for (int i = 0; i < size; i++) {\n+            elements[i] = (E) in.readObject();\n+        }\n+        start = 0;\n+        full = size == maxElements;\n+        if (full) {\n+            end = 0;\n+        } else {\n+            end = size;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns the number of elements stored in the queue.\n+     *\n+     * @return this queue's size\n+     */\n+    @Override\n+    public int size() {\n+        int size;\n+\n+        if (end < start) {\n+            size = maxElements - start + end;\n+        } else if (end == start) {\n+            size = full ? maxElements : 0;\n+        } else {\n+            size = end - start;\n+        }\n+\n+        return size;\n+    }\n+\n+    /**\n+     * Returns true if this queue is empty; false otherwise.\n+     *\n+     * @return true if this queue is empty\n+     */\n+    @Override\n+    public boolean isEmpty() {\n+        return size() == 0;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * <p>\n+     * A {@code CircularFifoQueue} can never be full, thus this returns always\n+     * {@code false}.\n+     *\n+     * @return always returns {@code false}\n+     */\n+    public boolean isFull() {\n+        return false;\n+    }\n+\n+    /**\n+     * Returns {@code true} if the capacity limit of this queue has been reached,\n+     * i.e. the number of elements stored in the queue equals its maximum size.\n+     *\n+     * @return {@code true} if the capacity limit has been reached, {@code false} otherwise\n+     * @since 4.1\n+     */\n+    public boolean isAtFullCapacity() {\n+        return size() == maxElements;\n+    }\n+\n+    /**\n+     * Gets the maximum size of the collection (the bound).\n+     *\n+     * @return the maximum number of elements the collection can hold\n+     */\n+    public int maxSize() {\n+        return maxElements;\n+    }\n+\n+    /**\n+     * Clears this queue.\n+     */\n+    @Override\n+    public void clear() {\n+        full = false;\n+        start = 0;\n+        end = 0;\n+        Arrays.fill(elements, null);\n+    }\n+\n+    /**\n+     * Adds the given element to this queue. If the queue is full, the least recently added\n+     * element is discarded so that a new element can be inserted.\n+     *\n+     * @param element the element to add\n+     * @return true, always\n+     * @throws NullPointerException if the given element is null\n+     */\n+    @Override\n+    public boolean add(final E element) {\n+        if (null == element) {\n+            throw new NullPointerException(\"Attempted to add null object to queue\");\n+        }\n+\n+        if (isAtFullCapacity()) {\n+            remove();\n+        }\n+\n+        elements[end++] = element;\n+\n+        if (end >= maxElements) {\n+            end = 0;\n+        }\n+\n+        if (end == start) {\n+            full = true;\n+        }\n+\n+        return true;\n+    }\n+\n+    /**\n+     * Returns the element at the specified position in this queue.\n+     *\n+     * @param index the position of the element in the queue\n+     * @return the element at position {@code index}\n+     * @throws NoSuchElementException if the requested position is outside the range [0, size)\n+     */\n+    public E get(final int index) {\n+        final int sz = size();\n+        if (index < 0 || index >= sz) {\n+            throw new NoSuchElementException(\n+                    String.format(\"The specified index (%1$d) is outside the available range [0, %2$d)\",\n+                            index, Integer.valueOf(sz)));\n+        }\n+\n+        final int idx = (start + index) % maxElements;\n+        return elements[idx];\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds the given element to this queue. If the queue is full, the least recently added\n+     * element is discarded so that a new element can be inserted.\n+     *\n+     * @param element the element to add\n+     * @return true, always\n+     * @throws NullPointerException if the given element is null\n+     */\n+    @Override\n+    public boolean offer(final E element) {\n+        return add(element);\n+    }\n+\n+    @Override\n+    public E poll() {\n+        if (isEmpty()) {\n+            return null;\n+        }\n+        return remove();\n+    }\n+\n+    @Override\n+    public E element() {\n+        if (isEmpty()) {\n+            throw new NoSuchElementException(\"queue is empty\");\n+        }\n+        return peek();\n+    }\n+\n+    @Override\n+    public E peek() {\n+        if (isEmpty()) {\n+            return null;\n+        }\n+        return elements[start];\n+    }\n+\n+    @Override\n+    public E remove() {\n+        if (isEmpty()) {\n+            throw new NoSuchElementException(\"queue is empty\");\n+        }\n+\n+        final E element = elements[start];\n+        if (null != element) {\n+            elements[start++] = null;\n+\n+            if (start >= maxElements) {\n+                start = 0;\n+            }\n+            full = false;\n+        }\n+        return element;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Increments the internal index.\n+     *\n+     * @param index the index to increment\n+     * @return the updated index\n+     */\n+    private int increment(final int index) {\n+        int result = index;\n+        result++;\n+        if (result >= maxElements) {\n+            result = 0;\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Decrements the internal index.\n+     *\n+     * @param index the index to decrement\n+     * @return the updated index\n+     */\n+    private int decrement(final int index) {\n+        int result = index;\n+        result--;\n+        if (result < 0) {\n+            result = maxElements - 1;\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Returns an iterator over this queue's elements.\n+     *\n+     * @return an iterator over this queue's elements\n+     */\n+    @Override\n+    public Iterator<E> iterator() {\n+        return new Iterator<E>() {\n+\n+            private int index = start;\n+\n+            private int lastReturnedIndex = -1;\n+\n+            private boolean isFirst = full;\n+\n+            @Override\n+            public boolean hasNext() {\n+                return isFirst || index != end;\n+            }\n+\n+            @Override\n+            public E next() {\n+                if (!hasNext()) {\n+                    throw new NoSuchElementException();\n+                }\n+                isFirst = false;\n+                lastReturnedIndex = index;\n+                index = increment(index);\n+                return elements[lastReturnedIndex];\n+            }\n+\n+            @Override\n+            public void remove() {\n+                if (lastReturnedIndex == -1) {\n+                    throw new IllegalStateException();\n+                }\n+\n+                // First element can be removed quickly\n+                if (lastReturnedIndex == start) {\n+                    CircularFifoQueue.this.remove();\n+                    lastReturnedIndex = -1;\n+                    return;\n+                }\n+\n+                int pos = lastReturnedIndex + 1;\n+                if (start < lastReturnedIndex && pos < end) {\n+                    // shift in one part\n+                    System.arraycopy(elements, pos, elements, lastReturnedIndex, end - pos);\n+                } else {\n+                    // Other elements require us to shift the subsequent elements\n+                    while (pos != end) {\n+                        if (pos >= maxElements) {\n+                            elements[pos - 1] = elements[0];\n+                            pos = 0;\n+                        } else {\n+                            elements[decrement(pos)] = elements[pos];\n+                            pos = increment(pos);\n+                        }\n+                    }\n+                }\n+\n+                lastReturnedIndex = -1;\n+                end = decrement(end);\n+                elements[end] = null;\n+                full = false;\n+                index = decrement(index);\n+            }\n+\n+        };\n+    }\n+}"},{"sha":"c26de2aa94c387f71d2813687d138014144fb712","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/collections/IteratorChain.java","status":"added","additions":282,"deletions":0,"changes":282,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcollections%2FIteratorChain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcollections%2FIteratorChain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcollections%2FIteratorChain.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -0,0 +1,282 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.collections;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.Queue;\n+\n+/**\n+ * An IteratorChain is an Iterator that wraps a number of Iterators.\n+ *\n+ * This class makes multiple iterators look like one to the caller. When any\n+ * method from the Iterator interface is called, the IteratorChain will delegate\n+ * to a single underlying Iterator. The IteratorChain will invoke the Iterators\n+ * in sequence until all Iterators are exhausted.\n+ *\n+ * Under many circumstances, linking Iterators together in this manner is more\n+ * efficient (and convenient) than reading out the contents of each Iterator\n+ * into a List and creating a new Iterator.\n+ *\n+ * Calling a method that adds new Iterator <i>after a method in the Iterator\n+ * interface has been called</i> will result in an UnsupportedOperationException.\n+ *\n+ * NOTE: As from version 3.0, the IteratorChain may contain no iterators. In\n+ * this case the class will function as an empty iterator.\n+ *\n+ * NOTE: As from version 4.0, the IteratorChain stores the iterators in a queue\n+ * and removes any reference to them as soon as they are not used anymore. Thus\n+ * the methods {@code setIterator(Iterator)} and {@code getIterators()} have been\n+ * removed and {@link #size()} will return the number of remaining iterators in\n+ * the queue.\n+ *\n+ * @param <E> the type of elements held in this collection\n+ */\n+public class IteratorChain<E> implements Iterator<E> {\n+\n+    /** The chain of iterators. */\n+    private final Queue<Iterator<? extends E>> iteratorChain = new LinkedList<>();\n+\n+    /** The current iterator. */\n+    private Iterator<? extends E> currentIterator = null;\n+\n+    /**\n+     * The \"last used\" Iterator is the Iterator upon which next() or hasNext()\n+     * was most recently called used for the remove() operation only.\n+     */\n+    private Iterator<? extends E> lastUsedIterator = null;\n+\n+    /**\n+     * ComparatorChain is \"locked\" after the first time compare(Object,Object)\n+     * is called.\n+     */\n+    private boolean isLocked = false;\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Construct an IteratorChain with no Iterators.\n+     *\n+     * You will normally use {@link #addIterator(Iterator)} to add some\n+     * iterators after using this constructor.\n+     */\n+    public IteratorChain() {\n+        super();\n+    }\n+\n+    /**\n+     * Construct an IteratorChain with a single Iterator.\n+     *\n+     * This method takes one iterator. The newly constructed iterator will\n+     * iterate through that iterator. Thus calling this constructor on its own\n+     * will have no effect other than decorating the input iterator.\n+     *\n+     * You will normally use {@link #addIterator(Iterator)} to add some more\n+     * iterators after using this constructor.\n+     *\n+     * @param iterator the first child iterator in the IteratorChain, not null\n+     * @throws NullPointerException if the iterator is null\n+     */\n+    public IteratorChain(final Iterator<? extends E> iterator) {\n+        super();\n+        addIterator(iterator);\n+    }\n+\n+    /**\n+     * Constructs a new <code>IteratorChain</code> over the two given iterators.\n+     *\n+     * This method takes two iterators. The newly constructed iterator will\n+     * iterate through each one of the input iterators in turn.\n+     *\n+     * @param first the first child iterator in the IteratorChain, not null\n+     * @param second the second child iterator in the IteratorChain, not null\n+     * @throws NullPointerException if either iterator is null\n+     */\n+    public IteratorChain(final Iterator<? extends E> first, final Iterator<? extends E> second) {\n+        super();\n+        addIterator(first);\n+        addIterator(second);\n+    }\n+\n+    /**\n+     * Constructs a new <code>IteratorChain</code> over the array of iterators.\n+     *\n+     * This method takes an array of iterators. The newly constructed iterator\n+     * will iterate through each one of the input iterators in turn.\n+     *\n+     * @param iteratorChain the array of iterators, not null\n+     * @throws NullPointerException if iterators array is or contains null\n+     */\n+    public IteratorChain(final Iterator<? extends E>... iteratorChain) {\n+        super();\n+        for (final Iterator<? extends E> element : iteratorChain) {\n+            addIterator(element);\n+        }\n+    }\n+\n+    /**\n+     * Constructs a new <code>IteratorChain</code> over the collection of\n+     * iterators.\n+     *\n+     * This method takes a collection of iterators. The newly constructed\n+     * iterator will iterate through each one of the input iterators in turn.\n+     *\n+     * @param iteratorChain the collection of iterators, not null\n+     * @throws NullPointerException if iterators collection is or contains null\n+     * @throws ClassCastException if iterators collection doesn't contain an\n+     * iterator\n+     */\n+    public IteratorChain(final Collection<Iterator<? extends E>> iteratorChain) {\n+        super();\n+        for (final Iterator<? extends E> iterator : iteratorChain) {\n+            addIterator(iterator);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Add an Iterator to the end of the chain\n+     *\n+     * @param iterator Iterator to add\n+     * @throws IllegalStateException if I've already started iterating\n+     * @throws NullPointerException if the iterator is null\n+     */\n+    public void addIterator(final Iterator<? extends E> iterator) {\n+        checkLocked();\n+        if (iterator == null) {\n+            throw new NullPointerException(\"Iterator must not be null\");\n+        }\n+        iteratorChain.add(iterator);\n+    }\n+\n+    /**\n+     * Returns the remaining number of Iterators in the current IteratorChain.\n+     *\n+     * @return Iterator count\n+     */\n+    public int size() {\n+        return iteratorChain.size();\n+    }\n+\n+    /**\n+     * Determine if modifications can still be made to the IteratorChain.\n+     * IteratorChains cannot be modified once they have executed a method from\n+     * the Iterator interface.\n+     *\n+     * @return true if IteratorChain cannot be modified, false if it can\n+     */\n+    public boolean isLocked() {\n+        return isLocked;\n+    }\n+\n+    /**\n+     * Checks whether the iterator chain is now locked and in use.\n+     */\n+    private void checkLocked() {\n+        if (isLocked) {\n+            throw new UnsupportedOperationException(\n+                    \"IteratorChain cannot be changed after the first use of a method from the Iterator interface\");\n+        }\n+    }\n+\n+    /**\n+     * Lock the chain so no more iterators can be added. This must be called\n+     * from all Iterator interface methods.\n+     */\n+    private void lockChain() {\n+        if (!isLocked) {\n+            isLocked = true;\n+        }\n+    }\n+\n+    /**\n+     * Updates the current iterator field to ensure that the current Iterator is\n+     * not exhausted\n+     */\n+    protected void updateCurrentIterator() {\n+        if (currentIterator == null) {\n+            if (iteratorChain.isEmpty()) {\n+                currentIterator = Collections.emptyListIterator();\n+            } else {\n+                currentIterator = iteratorChain.remove();\n+            }\n+            // set last used iterator here, in case the user calls remove\n+            // before calling hasNext() or next() (although they shouldn't)\n+            lastUsedIterator = currentIterator;\n+        }\n+\n+        while (!currentIterator.hasNext() && !iteratorChain.isEmpty()) {\n+            currentIterator = iteratorChain.remove();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Return true if any Iterator in the IteratorChain has a remaining element.\n+     *\n+     * @return true if elements remain\n+     */\n+    @Override\n+    public boolean hasNext() {\n+        lockChain();\n+        updateCurrentIterator();\n+        lastUsedIterator = currentIterator;\n+\n+        return currentIterator.hasNext();\n+    }\n+\n+    /**\n+     * Returns the next Object of the current Iterator\n+     *\n+     * @return Object from the current Iterator\n+     * @throws java.util.NoSuchElementException if all the Iterators are\n+     * exhausted\n+     */\n+    @Override\n+    public E next() {\n+        lockChain();\n+        updateCurrentIterator();\n+        lastUsedIterator = currentIterator;\n+\n+        return currentIterator.next();\n+    }\n+\n+    /**\n+     * Removes from the underlying collection the last element returned by the\n+     * Iterator. As with next() and hasNext(), this method calls remove() on the\n+     * underlying Iterator. Therefore, this method may throw an\n+     * UnsupportedOperationException if the underlying Iterator does not support\n+     * this method.\n+     *\n+     * @throws UnsupportedOperationException if the remove operator is not\n+     * supported by the underlying Iterator\n+     * @throws IllegalStateException if the next method has not yet been called,\n+     * or the remove method has already been called after the last call to the\n+     * next method.\n+     */\n+    @Override\n+    public void remove() {\n+        lockChain();\n+        if (currentIterator == null) {\n+            updateCurrentIterator();\n+        }\n+        lastUsedIterator.remove();\n+    }\n+}"},{"sha":"216316b1a477c89852b562ed1b803e9021968a77","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/info/SystemInfo.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FSystemInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FSystemInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FSystemInfo.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -24,8 +24,8 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.queue.CircularFifoQueue;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.collections.CircularFifoQueue;\n \n @XmlRootElement(name = \"systemInfo\")\n @XmlType"},{"sha":"48dca0b722d5282056475a0b960d137a6502651c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/jaxb/GenericMapType.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FGenericMapType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FGenericMapType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FGenericMapType.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -28,9 +28,7 @@ public GenericMapType() {\n     }\n \n     public GenericMapType(final Map<K, V> map) {\n-        for (Map.Entry<K, V> e : map.entrySet()) {\n-            entry.add(new GenericMapEntryType<>(e));\n-        }\n+        map.entrySet().forEach(e -> entry.add(new GenericMapEntryType<>(e)));\n     }\n \n     public List<GenericMapEntryType<K, V>> getEntry() {"},{"sha":"63d6825135d6bdf71ece206c705935a71df2c062","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/jaxb/XmlGenericMapAdapter.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FXmlGenericMapAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FXmlGenericMapAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FXmlGenericMapAdapter.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -26,9 +26,7 @@\n     public Map<K, V> unmarshal(final GenericMapType<K, V> v) throws Exception {\n         Map<K, V> map = new HashMap<>();\n \n-        for (GenericMapEntryType<K, V> mapEntryType : v.getEntry()) {\n-            map.put(mapEntryType.getKey(), mapEntryType.getValue());\n-        }\n+        v.getEntry().forEach(mapEntryType -> map.put(mapEntryType.getKey(), mapEntryType.getValue()));\n \n         return map;\n     }\n@@ -37,12 +35,12 @@ public Map<K, V> unmarshal(final GenericMapType<K, V> v) throws Exception {\n     public GenericMapType<K, V> marshal(final Map<K, V> v) throws Exception {\n         GenericMapType<K, V> mapType = new GenericMapType<>();\n \n-        for (Map.Entry<K, V> entry : v.entrySet()) {\n+        v.entrySet().stream().map(entry -> {\n             GenericMapEntryType<K, V> mapEntryType = new GenericMapEntryType<>();\n             mapEntryType.setKey(entry.getKey());\n             mapEntryType.setValue(entry.getValue());\n-            mapType.getEntry().add(mapEntryType);\n-        }\n+            return mapEntryType;\n+        }).forEachOrdered(mapEntryType -> mapType.getEntry().add(mapEntryType));\n \n         return mapType;\n     }"},{"sha":"3bfaeabd0047e4fb9ed541928bf55b253786f94e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/GroupPatch.java","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -24,13 +24,12 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n \n@@ -92,14 +91,9 @@ public Map<String, String> getADynMembershipConds() {\n     }\n \n     @JsonIgnore\n-    public TypeExtensionTO getTypeExtension(final String anyType) {\n-        return IterableUtils.find(typeExtensions, new Predicate<TypeExtensionTO>() {\n-\n-            @Override\n-            public boolean evaluate(final TypeExtensionTO typeExtension) {\n-                return anyType != null && anyType.equals(typeExtension.getAnyType());\n-            }\n-        });\n+    public Optional<TypeExtensionTO> getTypeExtension(final String anyType) {\n+        return typeExtensions.stream().filter(\n+                typeExtension -> anyType != null && anyType.equals(typeExtension.getAnyType())).findFirst();\n     }\n \n     @XmlElementWrapper(name = \"typeExtensions\")"},{"sha":"b02e52ee50dab09965366b55727ceac15aefdbe3","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/PasswordPatch.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FPasswordPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FPasswordPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FPasswordPatch.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -27,7 +27,6 @@\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlSeeAlso;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.CollectionUtils;\n \n @XmlRootElement(name = \"passwordPatch\")\n @XmlType\n@@ -56,7 +55,9 @@ public Builder resource(final String resource) {\n         }\n \n         public Builder resources(final String... resources) {\n-            CollectionUtils.addAll(getInstance().getResources(), resources);\n+            for (String resource : resources) {\n+                getInstance().getResources().add(resource);\n+            }\n             return this;\n         }\n "},{"sha":"1a9037647f533e28e1ce570fb11a32823862f811","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/SpecialAttr.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,8 +19,7 @@\n package org.apache.syncope.common.lib.search;\n \n import java.util.Arrays;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.Optional;\n \n public enum SpecialAttr {\n \n@@ -79,14 +78,8 @@ public String toString() {\n         return literal;\n     }\n \n-    public static SpecialAttr fromString(final String value) {\n-        return IterableUtils.find(Arrays.asList(values()), new Predicate<SpecialAttr>() {\n-\n-            @Override\n-            public boolean evaluate(final SpecialAttr specialAttr) {\n-                return specialAttr.literal.equals(value);\n-            }\n-        });\n+    public static Optional<SpecialAttr> fromString(final String value) {\n+        return Arrays.stream(values()).filter(specialAttr -> specialAttr.literal.equals(value)).findFirst();\n     }\n \n }"},{"sha":"7641687359f8526cc5e00b28d25403d5b4cf22b8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyObjectTO.java","status":"modified","additions":7,"deletions":18,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,12 +22,11 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n \n @XmlRootElement(name = \"anyObject\")\n @XmlType\n@@ -53,14 +52,10 @@ public void setName(final String name) {\n \n     @JsonIgnore\n     @Override\n-    public RelationshipTO getRelationship(final String type, final String rightKey) {\n-        return IterableUtils.find(relationships, new Predicate<RelationshipTO>() {\n-\n-            @Override\n-            public boolean evaluate(final RelationshipTO object) {\n-                return type.equals(object.getType()) && rightKey.equals(object.getRightKey());\n-            }\n-        });\n+    public Optional<RelationshipTO> getRelationship(final String type, final String rightKey) {\n+        return relationships.stream().filter(\n+                relationship -> type.equals(relationship.getType()) && rightKey.equals(relationship.getRightKey())).\n+                findFirst();\n     }\n \n     @XmlElementWrapper(name = \"relationships\")\n@@ -73,14 +68,8 @@ public List<RelationshipTO> getRelationships() {\n \n     @JsonIgnore\n     @Override\n-    public MembershipTO getMembership(final String groupKey) {\n-        return IterableUtils.find(memberships, new Predicate<MembershipTO>() {\n-\n-            @Override\n-            public boolean evaluate(final MembershipTO object) {\n-                return groupKey.equals(object.getGroupKey());\n-            }\n-        });\n+    public Optional<MembershipTO> getMembership(final String groupKey) {\n+        return memberships.stream().filter(membership -> groupKey.equals(membership.getGroupKey())).findFirst();\n     }\n \n     @XmlElementWrapper(name = \"memberships\")"},{"sha":"e411e1a418484c49d6c4f82a374e64aeb0998c83","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyTO.java","status":"modified","additions":7,"deletions":26,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -24,13 +24,12 @@\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlSeeAlso;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n \n @XmlType\n @XmlSeeAlso({ UserTO.class, GroupTO.class, AnyObjectTO.class })\n@@ -117,14 +116,8 @@ public Set<AttrTO> getPlainAttrs() {\n \n     @JsonIgnore\n     @Override\n-    public AttrTO getPlainAttr(final String schema) {\n-        return IterableUtils.find(plainAttrs, new Predicate<AttrTO>() {\n-\n-            @Override\n-            public boolean evaluate(final AttrTO object) {\n-                return object.getSchema().equals(schema);\n-            }\n-        });\n+    public Optional<AttrTO> getPlainAttr(final String schema) {\n+        return plainAttrs.stream().filter(attr -> attr.getSchema().equals(schema)).findFirst();\n     }\n \n     @XmlElementWrapper(name = \"derAttrs\")\n@@ -137,14 +130,8 @@ public Set<AttrTO> getDerAttrs() {\n \n     @JsonIgnore\n     @Override\n-    public AttrTO getDerAttr(final String schema) {\n-        return IterableUtils.find(derAttrs, new Predicate<AttrTO>() {\n-\n-            @Override\n-            public boolean evaluate(final AttrTO object) {\n-                return object.getSchema().equals(schema);\n-            }\n-        });\n+    public Optional<AttrTO> getDerAttr(final String schema) {\n+        return derAttrs.stream().filter(attr -> attr.getSchema().equals(schema)).findFirst();\n     }\n \n     @XmlElementWrapper(name = \"virAttrs\")\n@@ -157,14 +144,8 @@ public Set<AttrTO> getVirAttrs() {\n \n     @JsonIgnore\n     @Override\n-    public AttrTO getVirAttr(final String schema) {\n-        return IterableUtils.find(virAttrs, new Predicate<AttrTO>() {\n-\n-            @Override\n-            public boolean evaluate(final AttrTO object) {\n-                return object.getSchema().equals(schema);\n-            }\n-        });\n+    public Optional<AttrTO> getVirAttr(final String schema) {\n+        return virAttrs.stream().filter(attr -> attr.getSchema().equals(schema)).findFirst();\n     }\n \n     @XmlElementWrapper(name = \"resources\")"},{"sha":"0c71ca6ae980eefa31587127198392434f61ff31","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AttrTO.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -28,7 +28,6 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.CollectionUtils;\n \n @XmlRootElement(name = \"attribute\")\n @XmlType\n@@ -56,7 +55,9 @@ public Builder value(final String value) {\n         }\n \n         public Builder values(final String... values) {\n-            CollectionUtils.addAll(instance.getValues(), values);\n+            for (String value : values) {\n+                instance.getValues().add(value);\n+            }\n             return this;\n         }\n "},{"sha":"d0f900ca9d594ac5e4ac50d523ac6e47e80f15ce","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AttributableTO.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttributableTO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,19 +18,20 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import java.util.Optional;\n import java.util.Set;\n \n public interface AttributableTO {\n \n     Set<AttrTO> getPlainAttrs();\n \n-    AttrTO getPlainAttr(String schema);\n+    Optional<AttrTO> getPlainAttr(String schema);\n \n     Set<AttrTO> getDerAttrs();\n \n-    AttrTO getDerAttr(String schema);\n+    Optional<AttrTO> getDerAttr(String schema);\n \n     Set<AttrTO> getVirAttrs();\n \n-    AttrTO getVirAttr(String schema);\n+    Optional<AttrTO> getVirAttr(String schema);\n }"},{"sha":"6458fdbfed758e9379fdce599bff198da26341da","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/BulkActionResult.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkActionResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkActionResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkActionResult.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -69,11 +69,9 @@ public Map<String, Status> getResults() {\n     public List<String> getResultByStatus(final Status status) {\n         final List<String> result = new ArrayList<>();\n \n-        for (Map.Entry<String, Status> entry : results.entrySet()) {\n-            if (entry.getValue() == status) {\n-                result.add(entry.getKey());\n-            }\n-        }\n+        results.entrySet().stream().\n+                filter((entry) -> (entry.getValue() == status)).\n+                forEachOrdered(entry -> result.add(entry.getKey()));\n \n         return Collections.unmodifiableList(result);\n     }"},{"sha":"76424fef8564a44b34f56d1b6a5772d231fbde79","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ConnInstanceTO.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,14 +23,13 @@\n import java.util.ArrayList;\n import java.util.EnumSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n@@ -122,14 +121,8 @@ public List<ConnConfProperty> getConf() {\n     }\n \n     @JsonIgnore\n-    public ConnConfProperty getConf(final String schemaName) {\n-        return IterableUtils.find(conf, new Predicate<ConnConfProperty>() {\n-\n-            @Override\n-            public boolean evaluate(final ConnConfProperty object) {\n-                return object.getSchema().getName().equals(schemaName);\n-            }\n-        });\n+    public Optional<ConnConfProperty> getConf(final String schemaName) {\n+        return conf.stream().filter(property -> property.getSchema().getName().equals(schemaName)).findFirst();\n     }\n \n     @XmlElementWrapper(name = \"capabilities\")"},{"sha":"6086066e8579148afebf185108c21f92d1250701","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ConnObjectTO.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObjectTO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,13 +21,12 @@\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.LinkedHashSet;\n+import java.util.Optional;\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n @XmlRootElement(name = \"connObject\")\n@@ -46,13 +45,7 @@ public Set<AttrTO> getAttrs() {\n     }\n \n     @JsonIgnore\n-    public AttrTO getAttr(final String schema) {\n-        return IterableUtils.find(attrs, new Predicate<AttrTO>() {\n-\n-            @Override\n-            public boolean evaluate(final AttrTO object) {\n-                return object.getSchema().equals(schema);\n-            }\n-        });\n+    public Optional<AttrTO> getAttr(final String schema) {\n+        return attrs.stream().filter(attr -> attr.getSchema().equals(schema)).findFirst();\n     }\n }"},{"sha":"c5318400db16955d58fcc1816744b789174e4f34","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -24,13 +24,12 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n@@ -102,14 +101,10 @@ public Map<String, String> getADynMembershipConds() {\n     }\n \n     @JsonIgnore\n-    public TypeExtensionTO getTypeExtension(final String anyType) {\n-        return IterableUtils.find(typeExtensions, new Predicate<TypeExtensionTO>() {\n-\n-            @Override\n-            public boolean evaluate(final TypeExtensionTO typeExtension) {\n-                return anyType != null && anyType.equals(typeExtension.getAnyType());\n-            }\n-        });\n+    public Optional<TypeExtensionTO> getTypeExtension(final String anyType) {\n+        return typeExtensions.stream().filter(\n+                typeExtension -> anyType != null && anyType.equals(typeExtension.getAnyType())).\n+                findFirst();\n     }\n \n     @XmlElementWrapper(name = \"typeExtensions\")"},{"sha":"37fcb3a3473a13e0d292eaeb563454ef0f9fe888","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupableRelatableTO.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupableRelatableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupableRelatableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupableRelatableTO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,16 +19,17 @@\n package org.apache.syncope.common.lib.to;\n \n import java.util.List;\n+import java.util.Optional;\n \n public interface GroupableRelatableTO {\n \n-    MembershipTO getMembership(String groupKey);\n+    Optional<MembershipTO> getMembership(String groupKey);\n \n     List<MembershipTO> getMemberships();\n \n     List<MembershipTO> getDynMemberships();\n \n-    RelationshipTO getRelationship(String type, String rightKey);\n+    Optional<RelationshipTO> getRelationship(String type, String rightKey);\n \n     List<RelationshipTO> getRelationships();\n }"},{"sha":"c3be6f29e143684caa6e39aed7cb340e1ea07b02","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/MappingTO.java","status":"modified","additions":1,"deletions":9,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -25,8 +25,6 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n @XmlRootElement(name = \"mapping\")\n@@ -51,13 +49,7 @@ public void setConnObjectLink(final String connObjectLink) {\n \n     @Override\n     public ItemTO getConnObjectKeyItem() {\n-        return IterableUtils.find(getItems(), new Predicate<ItemTO>() {\n-\n-            @Override\n-            public boolean evaluate(final ItemTO item) {\n-                return item.isConnObjectKey();\n-            }\n-        });\n+        return getItems().stream().filter(item -> item.isConnObjectKey()).findFirst().get();\n     }\n \n     protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {"},{"sha":"9163aba638dcf75f060132bf4a2ff7790f909d61","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/MembershipTO.java","status":"modified","additions":7,"deletions":26,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,13 +21,12 @@\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.HashSet;\n+import java.util.Optional;\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n @XmlRootElement(name = \"membership\")\n@@ -111,14 +110,8 @@ public Set<AttrTO> getPlainAttrs() {\n \n     @JsonIgnore\n     @Override\n-    public AttrTO getPlainAttr(final String schema) {\n-        return IterableUtils.find(plainAttrs, new Predicate<AttrTO>() {\n-\n-            @Override\n-            public boolean evaluate(final AttrTO object) {\n-                return object.getSchema().equals(schema);\n-            }\n-        });\n+    public Optional<AttrTO> getPlainAttr(final String schema) {\n+        return plainAttrs.stream().filter(attr -> attr.getSchema().equals(schema)).findFirst();\n     }\n \n     @XmlElementWrapper(name = \"derAttrs\")\n@@ -131,14 +124,8 @@ public Set<AttrTO> getDerAttrs() {\n \n     @JsonIgnore\n     @Override\n-    public AttrTO getDerAttr(final String schema) {\n-        return IterableUtils.find(derAttrs, new Predicate<AttrTO>() {\n-\n-            @Override\n-            public boolean evaluate(final AttrTO object) {\n-                return object.getSchema().equals(schema);\n-            }\n-        });\n+    public Optional<AttrTO> getDerAttr(final String schema) {\n+        return derAttrs.stream().filter(attr -> attr.getSchema().equals(schema)).findFirst();\n     }\n \n     @XmlElementWrapper(name = \"virAttrs\")\n@@ -151,13 +138,7 @@ public Set<AttrTO> getVirAttrs() {\n \n     @JsonIgnore\n     @Override\n-    public AttrTO getVirAttr(final String schema) {\n-        return IterableUtils.find(virAttrs, new Predicate<AttrTO>() {\n-\n-            @Override\n-            public boolean evaluate(final AttrTO object) {\n-                return object.getSchema().equals(schema);\n-            }\n-        });\n+    public Optional<AttrTO> getVirAttr(final String schema) {\n+        return virAttrs.stream().filter(attr -> attr.getSchema().equals(schema)).findFirst();\n     }\n }"},{"sha":"ae4255ff68dea69253d1be7182ad2875a84c00e3","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/OrgUnitTO.java","status":"modified","additions":1,"deletions":9,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -25,8 +25,6 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n @XmlRootElement(name = \"orgUnit\")\n@@ -81,13 +79,7 @@ public void setConnObjectLink(final String connObjectLink) {\n \n     @Override\n     public ItemTO getConnObjectKeyItem() {\n-        return IterableUtils.find(getItems(), new Predicate<ItemTO>() {\n-\n-            @Override\n-            public boolean evaluate(final ItemTO item) {\n-                return item.isConnObjectKey();\n-            }\n-        });\n+        return getItems().stream().filter(item -> item.isConnObjectKey()).findFirst().get();\n     }\n \n     protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {"},{"sha":"6286e9305fb0f8780ff09f820e035d941d4dce27","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ResourceTO.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,14 +23,13 @@\n import java.util.ArrayList;\n import java.util.EnumSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n@@ -186,14 +185,10 @@ public void setPullPolicy(final String pullPolicy) {\n     }\n \n     @JsonIgnore\n-    public ProvisionTO getProvision(final String anyType) {\n-        return IterableUtils.find(provisions, new Predicate<ProvisionTO>() {\n-\n-            @Override\n-            public boolean evaluate(final ProvisionTO provisionTO) {\n-                return anyType != null && anyType.equals(provisionTO.getAnyType());\n-            }\n-        });\n+    public Optional<ProvisionTO> getProvision(final String anyType) {\n+        return provisions.stream().filter(\n+                provision -> anyType != null && anyType.equals(provision.getAnyType())).\n+                findFirst();\n     }\n \n     @XmlElementWrapper(name = \"provisions\")"},{"sha":"3e9cd4d809e18ee135575316c42ec7e8d6a3cc6a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java","status":"modified","additions":7,"deletions":18,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -24,12 +24,11 @@\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n+import java.util.Optional;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang3.builder.ToStringStyle;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -197,14 +196,10 @@ public void setMustChangePassword(final boolean mustChangePassword) {\n \n     @JsonIgnore\n     @Override\n-    public RelationshipTO getRelationship(final String type, final String rightKey) {\n-        return IterableUtils.find(relationships, new Predicate<RelationshipTO>() {\n-\n-            @Override\n-            public boolean evaluate(final RelationshipTO object) {\n-                return type.equals(object.getType()) && rightKey.equals(object.getRightKey());\n-            }\n-        });\n+    public Optional<RelationshipTO> getRelationship(final String type, final String rightKey) {\n+        return relationships.stream().filter(\n+                relationship -> type.equals(relationship.getType()) && rightKey.equals(relationship.getRightKey())).\n+                findFirst();\n     }\n \n     @XmlElementWrapper(name = \"relationships\")\n@@ -217,14 +212,8 @@ public List<RelationshipTO> getRelationships() {\n \n     @JsonIgnore\n     @Override\n-    public MembershipTO getMembership(final String groupKey) {\n-        return IterableUtils.find(memberships, new Predicate<MembershipTO>() {\n-\n-            @Override\n-            public boolean evaluate(final MembershipTO object) {\n-                return groupKey.equals(object.getGroupKey());\n-            }\n-        });\n+    public Optional<MembershipTO> getMembership(final String groupKey) {\n+        return memberships.stream().filter(membership -> groupKey.equals(membership.getGroupKey())).findFirst();\n     }\n \n     @XmlElementWrapper(name = \"memberships\")"},{"sha":"2f99b65965bc4ce76017b1c403ab5245045e4cb9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/WorkflowFormTO.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FWorkflowFormTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FWorkflowFormTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FWorkflowFormTO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,12 +23,11 @@\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n+import java.util.Optional;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.patch.UserPatch;\n \n@@ -135,14 +134,8 @@ public void setUserPatch(final UserPatch userPatch) {\n     }\n \n     @JsonIgnore\n-    public WorkflowFormPropertyTO getProperty(final String id) {\n-        return IterableUtils.find(properties, new Predicate<WorkflowFormPropertyTO>() {\n-\n-            @Override\n-            public boolean evaluate(final WorkflowFormPropertyTO object) {\n-                return id.equals(object.getId());\n-            }\n-        });\n+    public Optional<WorkflowFormPropertyTO> getProperty(final String id) {\n+        return properties.stream().filter(property -> id.equals(property.getId())).findFirst();\n     }\n \n     @XmlElementWrapper(name = \"workflowFormProperties\")"},{"sha":"ad43e0ed5aa98b0b89b2e66a8ad132355aa06773","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":6,"deletions":14,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,9 +22,6 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -77,7 +74,7 @@\n     private List<LogicActions> getActions(final Realm realm) {\n         List<LogicActions> actions = new ArrayList<>();\n \n-        for (String className : realm.getActionsClassNames()) {\n+        realm.getActionsClassNames().forEach(className -> {\n             try {\n                 Class<?> actionsClass = Class.forName(className);\n                 LogicActions logicActions = (LogicActions) ApplicationContextProvider.getBeanFactory().\n@@ -87,7 +84,7 @@ private List<LogicActions> getActions(final Realm realm) {\n             } catch (Exception e) {\n                 LOG.warn(\"Class '{}' not found\", className, e);\n             }\n-        }\n+        });\n \n         return actions;\n     }\n@@ -229,20 +226,15 @@ protected ProvisioningResult<TO> afterDelete(\n     }\n \n     protected boolean securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n-        boolean authorized = IterableUtils.matchesAny(effectiveRealms, new Predicate<String>() {\n-\n-            @Override\n-            public boolean evaluate(final String ownedRealm) {\n-                return realm.startsWith(ownedRealm);\n-            }\n-        });\n+        boolean authorized = effectiveRealms.stream().anyMatch(ownedRealm -> realm.startsWith(ownedRealm));\n         if (!authorized) {\n             AnyDAO<?> anyDAO = this instanceof UserLogic\n                     ? userDAO\n                     : this instanceof GroupLogic\n                             ? groupDAO\n                             : anyObjectDAO;\n-            authorized = !CollectionUtils.intersection(anyDAO.findDynRealms(key), effectiveRealms).isEmpty();\n+            authorized = anyDAO.findDynRealms(key).stream().\n+                    filter(dynRealm -> effectiveRealms.contains(dynRealm)).findFirst().isPresent();\n         }\n         if (!authorized) {\n             throw new DelegatedAdministrationException(\n@@ -255,7 +247,7 @@ public boolean evaluate(final String ownedRealm) {\n                     key);\n         }\n \n-        return IterableUtils.matchesAny(effectiveRealms, new RealmUtils.DynRealmsPredicate());\n+        return effectiveRealms.stream().anyMatch(new RealmUtils.DynRealmsPredicate());\n     }\n \n     public abstract TO read(String key);"},{"sha":"ee3877fac55b4c0f7d7f23164699eaf693504dc3","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,13 +21,11 @@\n import static org.apache.syncope.core.logic.AbstractLogic.LOG;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.stream.Collectors;\n import javax.annotation.Resource;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -115,14 +113,8 @@ public List<AccessTokenTO> list(\n             final int size,\n             final List<OrderByClause> orderByClauses) {\n \n-        return CollectionUtils.collect(accessTokenDAO.findAll(page, size, orderByClauses),\n-                new Transformer<AccessToken, AccessTokenTO>() {\n-\n-            @Override\n-            public AccessTokenTO transform(final AccessToken input) {\n-                return binder.getAccessTokenTO(input);\n-            }\n-        }, new ArrayList<AccessTokenTO>());\n+        return accessTokenDAO.findAll(page, size, orderByClauses).stream().\n+                map(accessToken -> binder.getAccessTokenTO(accessToken)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ACCESS_TOKEN_DELETE + \"')\")"},{"sha":"a067ab775968edc3bc83580f821af029ca575a5e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":15,"deletions":39,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,13 +19,11 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -95,14 +93,8 @@ public Pair<Integer, List<AnyObjectTO>> search(\n \n         List<AnyObject> matching = searchDAO.search(\n                 effectiveRealms, searchCond, page, size, orderBy, AnyTypeKind.ANY_OBJECT);\n-        List<AnyObjectTO> result = CollectionUtils.collect(matching, new Transformer<AnyObject, AnyObjectTO>() {\n-\n-            @Transactional(readOnly = true)\n-            @Override\n-            public AnyObjectTO transform(final AnyObject input) {\n-                return binder.getAnyObjectTO(input, details);\n-            }\n-        }, new ArrayList<AnyObjectTO>());\n+        List<AnyObjectTO> result = matching.stream().\n+                map(anyObject -> binder.getAnyObjectTO(anyObject, details)).collect(Collectors.toList());\n \n         return Pair.of(count, result);\n     }\n@@ -184,13 +176,9 @@ public AnyObjectTO unlink(final String key, final Collection<String> resources)\n \n         AnyObjectPatch patch = new AnyObjectPatch();\n         patch.setKey(key);\n-        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n-\n-            @Override\n-            public StringPatchItem transform(final String resource) {\n-                return new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build();\n-            }\n-        }));\n+        patch.getResources().addAll(resources.stream().map(resource\n+                -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build()).\n+                collect(Collectors.toList()));\n \n         return binder.getAnyObjectTO(provisioningManager.unlink(patch));\n     }\n@@ -206,13 +194,9 @@ public AnyObjectTO link(final String key, final Collection<String> resources) {\n \n         AnyObjectPatch patch = new AnyObjectPatch();\n         patch.setKey(key);\n-        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n-\n-            @Override\n-            public StringPatchItem transform(final String resource) {\n-                return new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build();\n-            }\n-        }));\n+        patch.getResources().addAll(resources.stream().map(resource\n+                -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n+                collect(Collectors.toList()));\n \n         return binder.getAnyObjectTO(provisioningManager.link(patch));\n     }\n@@ -230,13 +214,9 @@ public ProvisioningResult<AnyObjectTO> unassign(\n \n         AnyObjectPatch patch = new AnyObjectPatch();\n         patch.setKey(key);\n-        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n-\n-            @Override\n-            public StringPatchItem transform(final String resource) {\n-                return new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build();\n-            }\n-        }));\n+        patch.getResources().addAll(resources.stream().map(resource\n+                -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build()).\n+                collect(Collectors.toList()));\n \n         return update(patch, nullPriorityAsync);\n     }\n@@ -258,13 +238,9 @@ public ProvisioningResult<AnyObjectTO> assign(\n \n         AnyObjectPatch patch = new AnyObjectPatch();\n         patch.setKey(key);\n-        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n-\n-            @Override\n-            public StringPatchItem transform(final String resource) {\n-                return new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build();\n-            }\n-        }));\n+        patch.getResources().addAll(resources.stream().map(resource\n+                -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n+                collect(Collectors.toList()));\n \n         return update(patch, nullPriorityAsync);\n     }"},{"sha":"03f6909770164c5b30e8567cae0622ad119d1a54","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeClassLogic.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,10 +19,8 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -64,13 +62,8 @@ public AnyTypeClassTO read(final String key) {\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPECLASS_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<AnyTypeClassTO> list() {\n-        return CollectionUtils.collect(anyTypeClassDAO.findAll(), new Transformer<AnyTypeClass, AnyTypeClassTO>() {\n-\n-            @Override\n-            public AnyTypeClassTO transform(final AnyTypeClass input) {\n-                return binder.getAnyTypeClassTO(input);\n-            }\n-        }, new ArrayList<AnyTypeClassTO>());\n+        return anyTypeClassDAO.findAll().stream().\n+                map(anyTypeClass -> binder.getAnyTypeClassTO(anyTypeClass)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPECLASS_CREATE + \"')\")"},{"sha":"783d356f96407aa00bfe1459a599688aa5bb3ad7","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeLogic.java","status":"modified","additions":2,"deletions":10,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,10 +19,8 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -64,13 +62,7 @@ public AnyTypeTO read(final String key) {\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPE_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<AnyTypeTO> list() {\n-        return CollectionUtils.collect(anyTypeDAO.findAll(), new Transformer<AnyType, AnyTypeTO>() {\n-\n-            @Override\n-            public AnyTypeTO transform(final AnyType input) {\n-                return binder.getAnyTypeTO(input);\n-            }\n-        }, new ArrayList<AnyTypeTO>());\n+        return anyTypeDAO.findAll().stream().map(anyType -> binder.getAnyTypeTO(anyType)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPE_CREATE + \"')\")"},{"sha":"cc7a4bd59fdcc868cabfc9d51c9b8724366ab17b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConfigurationLogic.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,6 +21,7 @@\n import java.io.OutputStream;\n import java.lang.reflect.Method;\n import java.util.List;\n+import java.util.Optional;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n@@ -65,8 +66,8 @@ public class ConfigurationLogic extends AbstractTransactionalLogic<AttrTO> {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONFIGURATION_DELETE + \"')\")\n     public void delete(final String schema) {\n-        CPlainAttr conf = confDAO.find(schema);\n-        if (conf == null) {\n+        Optional<? extends CPlainAttr> conf = confDAO.find(schema);\n+        if (!conf.isPresent()) {\n             PlainSchema plainSchema = plainSchemaDAO.find(schema);\n             if (plainSchema == null) {\n                 throw new NotFoundException(\"Configuration schema \" + schema);\n@@ -86,17 +87,17 @@ public List<AttrTO> list() {\n     public AttrTO get(final String schema) {\n         AttrTO result;\n \n-        CPlainAttr conf = confDAO.find(schema);\n-        if (conf == null) {\n+        Optional<? extends CPlainAttr> conf = confDAO.find(schema);\n+        if (conf.isPresent()) {\n+            result = binder.getAttrTO(conf.get());\n+        } else {\n             PlainSchema plainSchema = plainSchemaDAO.find(schema);\n             if (plainSchema == null) {\n                 throw new NotFoundException(\"Configuration schema \" + schema);\n             }\n \n             result = new AttrTO();\n             result.setSchema(schema);\n-        } else {\n-            result = binder.getAttrTO(conf);\n         }\n \n         return result;"},{"sha":"e7ff07cdc12efd17e9210d4302761c082c1bdada","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorHistoryLogic.java","status":"modified","additions":3,"deletions":12,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorHistoryLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorHistoryLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorHistoryLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,10 +19,8 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.to.ConnInstanceHistoryConfTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n@@ -64,15 +62,8 @@ public List<ConnInstanceHistoryConfTO> list(final String key) {\n             throw new NotFoundException(\"Connector '\" + key + \"'\");\n         }\n \n-        return CollectionUtils.collect(connInstanceHistoryConfDAO.findByEntity(connInstance),\n-                new Transformer<ConnInstanceHistoryConf, ConnInstanceHistoryConfTO>() {\n-\n-            @Override\n-            public ConnInstanceHistoryConfTO transform(final ConnInstanceHistoryConf input) {\n-                return getConnInstanceHistoryConfTO(input);\n-            }\n-\n-        }, new ArrayList<ConnInstanceHistoryConfTO>());\n+        return connInstanceHistoryConfDAO.findByEntity(connInstance).stream().\n+                map(historyConf -> getConnInstanceHistoryConfTO(historyConf)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_HISTORY_RESTORE + \"')\")"},{"sha":"5d80ef75dbe190a708523229bbf2c6c86ad88137","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":31,"deletions":49,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -25,11 +25,7 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.PredicateUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -51,10 +47,8 @@\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n-import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.api.ConnectorInfoManager;\n import org.identityconnectors.framework.api.ConnectorKey;\n-import org.identityconnectors.framework.common.objects.AttributeInfo;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ObjectClassInfo;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -81,13 +75,7 @@ public class ConnectorLogic extends AbstractTransactionalLogic<ConnInstanceTO> {\n     private ConnectorFactory connFactory;\n \n     protected void securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n-        boolean authorized = IterableUtils.matchesAny(effectiveRealms, new Predicate<String>() {\n-\n-            @Override\n-            public boolean evaluate(final String ownedRealm) {\n-                return realm.startsWith(ownedRealm);\n-            }\n-        });\n+        boolean authorized = effectiveRealms.stream().anyMatch(ownedRealm -> realm.startsWith(ownedRealm));\n         if (!authorized) {\n             throw new DelegatedAdministrationException(realm, ConnInstance.class.getSimpleName(), key);\n         }\n@@ -138,9 +126,9 @@ public ConnInstanceTO delete(final String key) {\n         if (!connInstance.getResources().isEmpty()) {\n             SyncopeClientException associatedResources = SyncopeClientException.build(\n                     ClientExceptionType.AssociatedResources);\n-            for (ExternalResource resource : connInstance.getResources()) {\n+            connInstance.getResources().forEach(resource -> {\n                 associatedResources.getElements().add(resource.getKey());\n-            }\n+            });\n             throw associatedResources;\n         }\n \n@@ -154,23 +142,20 @@ public ConnInstanceTO delete(final String key) {\n     public List<ConnInstanceTO> list(final String lang) {\n         CurrentLocale.set(StringUtils.isBlank(lang) ? Locale.ENGLISH : new Locale(lang));\n \n-        List<ConnInstanceTO> result = CollectionUtils.collect(connInstanceDAO.findAll().iterator(),\n-                new Transformer<ConnInstance, ConnInstanceTO>() {\n-\n-            @Override\n-            public ConnInstanceTO transform(final ConnInstance connInstance) {\n-                ConnInstanceTO result = null;\n-                try {\n-                    result = binder.getConnInstanceTO(connInstance);\n-                } catch (NotFoundException e) {\n-                    LOG.error(\"Connector '{}#{}' not found\", connInstance.getBundleName(), connInstance.getVersion());\n-                }\n-\n-                return result;\n-            }\n-        }, new ArrayList<ConnInstanceTO>());\n-        CollectionUtils.filter(result, PredicateUtils.notNullPredicate());\n-        return result;\n+        return connInstanceDAO.findAll().stream().\n+                filter(connInstance -> connInstance != null).\n+                map(connInstance -> {\n+                    ConnInstanceTO result = null;\n+                    try {\n+                        result = binder.getConnInstanceTO(connInstance);\n+                    } catch (NotFoundException e) {\n+                        LOG.\n+                                error(\"Connector '{}#{}' not found\", connInstance.getBundleName(), connInstance.\n+                                        getVersion());\n+                    }\n+\n+                    return result;\n+                }).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_READ + \"')\")\n@@ -197,25 +182,22 @@ public List<ConnBundleTO> getBundles(final String lang) {\n \n         List<ConnBundleTO> connectorBundleTOs = new ArrayList<>();\n         for (Map.Entry<URI, ConnectorInfoManager> entry : connIdBundleManager.getConnInfoManagers().entrySet()) {\n-            for (ConnectorInfo bundle : entry.getValue().getConnectorInfos()) {\n+            entry.getValue().getConnectorInfos().stream().map(bundle -> {\n                 ConnBundleTO connBundleTO = new ConnBundleTO();\n                 connBundleTO.setDisplayName(bundle.getConnectorDisplayName());\n-\n                 connBundleTO.setLocation(entry.getKey().toString());\n-\n                 ConnectorKey key = bundle.getConnectorKey();\n                 connBundleTO.setBundleName(key.getBundleName());\n                 connBundleTO.setConnectorName(key.getConnectorName());\n                 connBundleTO.setVersion(key.getBundleVersion());\n-\n                 ConfigurationProperties properties = connIdBundleManager.getConfigurationProperties(bundle);\n-\n                 for (String propName : properties.getPropertyNames()) {\n                     connBundleTO.getProperties().add(binder.build(properties.getProperty(propName)));\n                 }\n-\n+                return connBundleTO;\n+            }).forEachOrdered(connBundleTO -> {\n                 connectorBundleTOs.add(connBundleTO);\n-            }\n+            });\n         }\n \n         return connectorBundleTOs;\n@@ -235,20 +217,20 @@ public List<ConnIdObjectClassTO> buildObjectClassInfo(\n                 getObjectClassInfo();\n \n         List<ConnIdObjectClassTO> result = new ArrayList<>(objectClassInfo.size());\n-        for (ObjectClassInfo info : objectClassInfo) {\n+        objectClassInfo.stream().map(info -> {\n             ConnIdObjectClassTO connIdObjectClassTO = new ConnIdObjectClassTO();\n             connIdObjectClassTO.setType(info.getType());\n             connIdObjectClassTO.setAuxiliary(info.isAuxiliary());\n             connIdObjectClassTO.setContainer(info.isContainer());\n-\n-            for (AttributeInfo attrInfo : info.getAttributeInfo()) {\n-                if (includeSpecial || !AttributeUtil.isSpecialName(attrInfo.getName())) {\n-                    connIdObjectClassTO.getAttributes().add(attrInfo.getName());\n-                }\n-            }\n-\n+            info.getAttributeInfo().stream().\n+                    filter(attrInfo -> includeSpecial || !AttributeUtil.isSpecialName(attrInfo.getName())).\n+                    forEachOrdered(attrInfo -> {\n+                        connIdObjectClassTO.getAttributes().add(attrInfo.getName());\n+                    });\n+            return connIdObjectClassTO;\n+        }).forEachOrdered((connIdObjectClassTO) -> {\n             result.add(connIdObjectClassTO);\n-        }\n+        });\n \n         return result;\n     }"},{"sha":"d9d29ba8a560ae4bd3a730aa895175b702a6c48f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/DomainLogic.java","status":"modified","additions":2,"deletions":10,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,10 +19,8 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.DomainTO;\n@@ -63,13 +61,7 @@ public DomainTO read(final String key) {\n \n     @PreAuthorize(\"isAuthenticated()\")\n     public List<DomainTO> list() {\n-        return CollectionUtils.collect(domainDAO.findAll(), new Transformer<Domain, DomainTO>() {\n-\n-            @Override\n-            public DomainTO transform(final Domain input) {\n-                return binder.getDomainTO(input);\n-            }\n-        }, new ArrayList<DomainTO>());\n+        return domainDAO.findAll().stream().map(domain -> binder.getDomainTO(domain)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.DOMAIN_CREATE + \"') and authentication.details.domain == \""},{"sha":"de9e78aaae25cb92a5ba4d365eb5d98652d6d422","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/DynRealmLogic.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDynRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDynRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDynRealmLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,10 +19,8 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.DynRealmTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n@@ -56,13 +54,8 @@ public DynRealmTO read(final String key) {\n     }\n \n     public List<DynRealmTO> list() {\n-        return CollectionUtils.collect(dynRealmDAO.findAll(), new Transformer<DynRealm, DynRealmTO>() {\n-\n-            @Override\n-            public DynRealmTO transform(final DynRealm input) {\n-                return binder.getDynRealmTO(input);\n-            }\n-        }, new ArrayList<DynRealmTO>());\n+        return dynRealmDAO.findAll().stream().\n+                map(dynRealm -> binder.getDynRealmTO(dynRealm)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.DYNREALM_CREATE + \"')\")"},{"sha":"efdab5994e8816484499cb2179538a29d1ac9f83","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":24,"deletions":68,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,17 +19,13 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -110,21 +106,17 @@ public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupPatch> {\n \n     @Override\n     protected boolean securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n-        boolean authorized = IterableUtils.matchesAny(effectiveRealms, new Predicate<String>() {\n-\n-            @Override\n-            public boolean evaluate(final String ownedRealm) {\n-                return realm.startsWith(ownedRealm) || ownedRealm.equals(RealmUtils.getGroupOwnerRealm(realm, key));\n-            }\n-        });\n+        boolean authorized = effectiveRealms.stream().anyMatch(ownedRealm\n+                -> realm.startsWith(ownedRealm) || ownedRealm.equals(RealmUtils.getGroupOwnerRealm(realm, key)));\n         if (!authorized) {\n-            authorized = !CollectionUtils.intersection(groupDAO.findDynRealms(key), effectiveRealms).isEmpty();\n+            authorized = groupDAO.findDynRealms(key).stream().\n+                    filter(dynRealm -> effectiveRealms.contains(dynRealm)).findFirst().isPresent();\n         }\n         if (!authorized) {\n             throw new DelegatedAdministrationException(realm, AnyTypeKind.GROUP.name(), key);\n         }\n \n-        return IterableUtils.matchesAny(effectiveRealms, new RealmUtils.DynRealmsPredicate());\n+        return effectiveRealms.stream().anyMatch(new RealmUtils.DynRealmsPredicate());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_READ + \"')\")\n@@ -137,16 +129,8 @@ public GroupTO read(final String key) {\n     @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + StandardEntitlement.ANONYMOUS + \"'))\")\n     @Transactional(readOnly = true)\n     public List<GroupTO> own() {\n-        return CollectionUtils.collect(\n-                userDAO.findAllGroups(userDAO.findByUsername(AuthContextUtils.getUsername())),\n-                new Transformer<Group, GroupTO>() {\n-\n-            @Transactional(readOnly = true)\n-            @Override\n-            public GroupTO transform(final Group input) {\n-                return binder.getGroupTO(input, true);\n-            }\n-        }, new ArrayList<GroupTO>());\n+        return userDAO.findAllGroups(userDAO.findByUsername(AuthContextUtils.getUsername())).stream().\n+                map(group -> binder.getGroupTO(group, true)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_SEARCH + \"')\")\n@@ -166,14 +150,8 @@ public Pair<Integer, List<GroupTO>> search(\n                 RealmUtils.getEffective(SyncopeConstants.FULL_ADMIN_REALMS, realm),\n                 searchCond == null ? groupDAO.getAllMatchingCond() : searchCond,\n                 page, size, orderBy, AnyTypeKind.GROUP);\n-        List<GroupTO> result = CollectionUtils.collect(matching, new Transformer<Group, GroupTO>() {\n-\n-            @Transactional(readOnly = true)\n-            @Override\n-            public GroupTO transform(final Group input) {\n-                return binder.getGroupTO(input, details);\n-            }\n-        }, new ArrayList<GroupTO>());\n+        List<GroupTO> result = matching.stream().\n+                map(group -> binder.getGroupTO(group, details)).collect(Collectors.toList());\n \n         return Pair.of(count, result);\n     }\n@@ -238,14 +216,8 @@ public ProvisioningResult<GroupTO> delete(final String key, final boolean nullPr\n         List<Group> ownedGroups = groupDAO.findOwnedByGroup(before.getLeft().getKey());\n         if (!ownedGroups.isEmpty()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.GroupOwnership);\n-            sce.getElements().addAll(CollectionUtils.collect(ownedGroups, new Transformer<Group, String>() {\n-\n-                @Transactional(readOnly = true)\n-                @Override\n-                public String transform(final Group group) {\n-                    return group.getKey() + \" \" + group.getName();\n-                }\n-            }, new ArrayList<String>()));\n+            sce.getElements().addAll(ownedGroups.stream().\n+                    map(g -> g.getKey() + \" \" + g.getName()).collect(Collectors.toList()));\n             throw sce;\n         }\n \n@@ -269,13 +241,9 @@ public GroupTO unlink(final String key, final Collection<String> resources) {\n \n         GroupPatch patch = new GroupPatch();\n         patch.setKey(key);\n-        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n-\n-            @Override\n-            public StringPatchItem transform(final String resource) {\n-                return new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build();\n-            }\n-        }));\n+        patch.getResources().addAll(resources.stream().\n+                map(resource -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build()).\n+                collect(Collectors.toList()));\n \n         return binder.getGroupTO(provisioningManager.unlink(patch));\n     }\n@@ -292,13 +260,9 @@ public GroupTO link(final String key, final Collection<String> resources) {\n \n         GroupPatch patch = new GroupPatch();\n         patch.setKey(key);\n-        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n-\n-            @Override\n-            public StringPatchItem transform(final String resource) {\n-                return new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build();\n-            }\n-        }));\n+        patch.getResources().addAll(resources.stream().map(resource\n+                -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n+                collect(Collectors.toList()));\n \n         return binder.getGroupTO(provisioningManager.link(patch));\n     }\n@@ -317,13 +281,9 @@ public ProvisioningResult<GroupTO> unassign(\n \n         GroupPatch patch = new GroupPatch();\n         patch.setKey(key);\n-        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n-\n-            @Override\n-            public StringPatchItem transform(final String resource) {\n-                return new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build();\n-            }\n-        }));\n+        patch.getResources().addAll(resources.stream().map(resource\n+                -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build()).\n+                collect(Collectors.toList()));\n \n         return update(patch, nullPriorityAsync);\n     }\n@@ -346,13 +306,9 @@ public ProvisioningResult<GroupTO> assign(\n \n         GroupPatch patch = new GroupPatch();\n         patch.setKey(key);\n-        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n-\n-            @Override\n-            public StringPatchItem transform(final String resource) {\n-                return new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build();\n-            }\n-        }));\n+        patch.getResources().addAll(resources.stream().map(resource\n+                -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n+                collect(Collectors.toList()));\n \n         return update(patch, nullPriorityAsync);\n     }"},{"sha":"9c8a8b3999e5d18bfe78ad2195b8bfb0e6f89d6c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":26,"deletions":57,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -24,13 +24,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.IteratorUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.PredicateUtils;\n-import org.apache.commons.collections4.Transformer;\n-import org.apache.commons.collections4.TransformerUtils;\n+import java.util.stream.Collectors;\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.core.LoggerContext;\n@@ -60,7 +54,6 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.spring.BeanUtils;\n@@ -99,31 +92,21 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {\n     private EntityFactory entityFactory;\n \n     private List<LoggerTO> list(final LoggerType type) {\n-        return CollectionUtils.collect(loggerDAO.findAll(type), new Transformer<Logger, LoggerTO>() {\n-\n-            @Override\n-            public LoggerTO transform(final Logger logger) {\n-                LoggerTO loggerTO = new LoggerTO();\n-                BeanUtils.copyProperties(logger, loggerTO);\n-                return loggerTO;\n-            }\n-        }, new ArrayList<LoggerTO>());\n+        return loggerDAO.findAll(type).stream().map(logger -> {\n+            LoggerTO loggerTO = new LoggerTO();\n+            BeanUtils.copyProperties(logger, loggerTO);\n+            return loggerTO;\n+        }).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_LIST + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     public List<LogAppender> memoryAppenders() {\n-        return CollectionUtils.collect(\n-                loggerLoader.getMemoryAppenders().keySet(),\n-                new Transformer<String, LogAppender>() {\n-\n-            @Override\n-            public LogAppender transform(final String input) {\n-                LogAppender logAppender = new LogAppender();\n-                logAppender.setName(input);\n-                return logAppender;\n-            }\n-        }, new ArrayList<LogAppender>());\n+        return loggerLoader.getMemoryAppenders().keySet().stream().map(appender -> {\n+            LogAppender logAppender = new LogAppender();\n+            logAppender.setName(appender);\n+            return logAppender;\n+        }).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_READ + \"') and authentication.details.domain == \"\n@@ -134,10 +117,7 @@ public List<LogStatementTO> getLastLogStatements(final String memoryAppender) {\n             throw new NotFoundException(\"Appender \" + memoryAppender);\n         }\n \n-        return CollectionUtils.collect(\n-                appender.getStatements(),\n-                TransformerUtils.<LogStatementTO>nopTransformer(),\n-                new ArrayList<LogStatementTO>());\n+        return appender.getStatements().stream().collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_LIST + \"') and authentication.details.domain == \"\n@@ -150,22 +130,18 @@ public List<LoggerTO> listLogs() {\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.AUDIT_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<AuditLoggerName> listAudits() {\n-        return CollectionUtils.collect(\n-                IteratorUtils.filteredIterator(list(LoggerType.AUDIT).iterator(), PredicateUtils.notNullPredicate()),\n-                new Transformer<LoggerTO, AuditLoggerName>() {\n-\n-            @Override\n-            public AuditLoggerName transform(final LoggerTO logger) {\n-                AuditLoggerName result = null;\n-                try {\n-                    result = AuditLoggerName.fromLoggerName(logger.getKey());\n-                } catch (Exception e) {\n-                    LOG.warn(\"Unexpected audit logger name: {}\", logger.getKey(), e);\n-                }\n+        return list(LoggerType.AUDIT).stream().\n+                filter(logger -> logger != null).\n+                map(logger -> {\n+                    AuditLoggerName result = null;\n+                    try {\n+                        result = AuditLoggerName.fromLoggerName(logger.getKey());\n+                    } catch (Exception e) {\n+                        LOG.warn(\"Unexpected audit logger name: {}\", logger.getKey(), e);\n+                    }\n \n-                return result;\n-            }\n-        }, new ArrayList<AuditLoggerName>());\n+                    return result;\n+                }).collect(Collectors.toList());\n     }\n \n     private void throwInvalidLogger(final LoggerType type) {\n@@ -235,14 +211,7 @@ private LoggerTO setLevel(final String name, final Level level, final LoggerType\n                 logConf = new LoggerConfig(auditLoggerName, null, false);\n             }\n             for (AuditAppender auditAppender : loggerLoader.auditAppenders(AuthContextUtils.getDomain())) {\n-                if (IterableUtils.matchesAny(auditAppender.getEvents(), new Predicate<AuditLoggerName>() {\n-\n-                    @Override\n-                    public boolean evaluate(final AuditLoggerName auditLoggerName) {\n-                        return name.equalsIgnoreCase(auditLoggerName.toLoggerName());\n-                    }\n-                })) {\n-\n+                if (auditAppender.getEvents().stream().anyMatch(event -> name.equalsIgnoreCase(event.toLoggerName()))) {\n                     loggerLoader.addAppenderToContext(ctx, auditAppender, logConf);\n                 }\n             }\n@@ -380,7 +349,7 @@ public List<EventCategoryTO> listAuditEvents() {\n             events.add(new EventCategoryTO(EventCategoryType.PUSH));\n \n             for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {\n-                for (ExternalResource resource : resourceDAO.findAll()) {\n+                resourceDAO.findAll().forEach(resource -> {\n                     EventCategoryTO propEventCategoryTO = new EventCategoryTO(EventCategoryType.PROPAGATION);\n                     EventCategoryTO syncEventCategoryTO = new EventCategoryTO(EventCategoryType.PULL);\n                     EventCategoryTO pushEventCategoryTO = new EventCategoryTO(EventCategoryType.PUSH);\n@@ -414,7 +383,7 @@ public List<EventCategoryTO> listAuditEvents() {\n                     events.add(propEventCategoryTO);\n                     events.add(syncEventCategoryTO);\n                     events.add(pushEventCategoryTO);\n-                }\n+                });\n             }\n \n             for (SchedTask task : taskDAO.<SchedTask>findAll(TaskType.SCHEDULED)) {"},{"sha":"ff742c5fa0360da14ecc4fa3f1d1c978f2830f93","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/MailTemplateLogic.java","status":"modified","additions":6,"deletions":18,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,10 +19,8 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -34,6 +32,7 @@\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n@@ -73,13 +72,8 @@ public MailTemplateTO read(final String key) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.MAIL_TEMPLATE_LIST + \"')\")\n     public List<MailTemplateTO> list() {\n-        return CollectionUtils.collect(mailTemplateDAO.findAll(), new Transformer<MailTemplate, MailTemplateTO>() {\n-\n-            @Override\n-            public MailTemplateTO transform(final MailTemplate input) {\n-                return getMailTemplateTO(input.getKey());\n-            }\n-        }, new ArrayList<MailTemplateTO>());\n+        return mailTemplateDAO.findAll().stream().\n+                map(template -> getMailTemplateTO(template.getKey())).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.MAIL_TEMPLATE_CREATE + \"')\")\n@@ -145,13 +139,7 @@ public MailTemplateTO delete(final String key) {\n         List<Notification> notifications = notificationDAO.findByTemplate(mailTemplate);\n         if (!notifications.isEmpty()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InUseByNotifications);\n-            sce.getElements().addAll(CollectionUtils.collect(notifications, new Transformer<Notification, String>() {\n-\n-                @Override\n-                public String transform(final Notification notification) {\n-                    return String.valueOf(notification.getKey());\n-                }\n-            }, new ArrayList<String>()));\n+            sce.getElements().addAll(notifications.stream().map(Entity::getKey).collect(Collectors.toList()));\n             throw sce;\n         }\n \n@@ -169,7 +157,7 @@ protected MailTemplateTO resolveReference(final Method method, final Object... a\n         if (ArrayUtils.isNotEmpty(args)) {\n             for (int i = 0; key == null && i < args.length; i++) {\n                 if (args[i] instanceof String) {\n-                    key = ((String) args[i]).toString();\n+                    key = ((String) args[i]);\n                 } else if (args[i] instanceof MailTemplateTO) {\n                     key = ((MailTemplateTO) args[i]).getKey();\n                 }"},{"sha":"d78585bd51185f532a8fa1e5e7db06d0245529d2","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/MemoryAppender.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMemoryAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMemoryAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMemoryAppender.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.logic;\n \n import java.util.Queue;\n-import org.apache.commons.collections4.queue.CircularFifoQueue;\n import org.apache.logging.log4j.core.Appender;\n import org.apache.logging.log4j.core.Filter;\n import org.apache.logging.log4j.core.LogEvent;\n@@ -30,6 +29,7 @@\n import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n import org.apache.logging.log4j.message.Message;\n import org.apache.logging.log4j.message.ReusableMessage;\n+import org.apache.syncope.common.lib.collections.CircularFifoQueue;\n import org.apache.syncope.common.lib.log.LogStatementTO;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;"},{"sha":"b594613efc08e5160f0c9381bdef6dd77a311846","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/NotificationLogic.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,10 +19,8 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.to.JobTO;\n@@ -64,13 +62,8 @@ public NotificationTO read(final String key) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_LIST + \"')\")\n     public List<NotificationTO> list() {\n-        return CollectionUtils.collect(notificationDAO.findAll(), new Transformer<Notification, NotificationTO>() {\n-\n-            @Override\n-            public NotificationTO transform(final Notification input) {\n-                return binder.getNotificationTO(input);\n-            }\n-        }, new ArrayList<NotificationTO>());\n+        return notificationDAO.findAll().stream().\n+                map(notification -> binder.getNotificationTO(notification)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_CREATE + \"')\")"},{"sha":"4f5e053ffcdbf0367f3e8e0e79e33d32b2c63dec","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/PolicyLogic.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,10 +19,8 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n@@ -78,13 +76,8 @@ private Class<? extends Policy> getPolicyClass(final PolicyType policyType) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_LIST + \"')\")\n     public <T extends AbstractPolicyTO> List<T> list(final PolicyType type) {\n-        return CollectionUtils.collect(policyDAO.find(getPolicyClass(type)), new Transformer<Policy, T>() {\n-\n-            @Override\n-            public T transform(final Policy input) {\n-                return binder.getPolicyTO(input);\n-            }\n-        }, new ArrayList<T>());\n+        return policyDAO.find(getPolicyClass(type)).stream().\n+                <T>map(policy -> binder.getPolicyTO(policy)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_READ + \"')\")"},{"sha":"03cfe0f94f6b99e3de312bdc79d0258f2bf6c8c0","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":7,"deletions":14,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,12 +19,10 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -81,13 +79,8 @@ public List<RealmTO> list(final String fullPath) {\n         }\n \n         final boolean admin = AuthContextUtils.getAuthorizations().keySet().contains(StandardEntitlement.REALM_LIST);\n-        return CollectionUtils.collect(realmDAO.findDescendants(realm), new Transformer<Realm, RealmTO>() {\n-\n-            @Override\n-            public RealmTO transform(final Realm input) {\n-                return binder.getRealmTO(input, admin);\n-            }\n-        }, new ArrayList<RealmTO>());\n+        return realmDAO.findDescendants(realm).stream().\n+                map(descendant -> binder.getRealmTO(descendant, admin)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REALM_CREATE + \"')\")\n@@ -100,9 +93,9 @@ public ProvisioningResult<RealmTO> create(final String parentPath, final RealmTO\n         Realm realm = realmDAO.save(binder.create(parentPath, realmTO));\n \n         PropagationByResource propByRes = new PropagationByResource();\n-        for (String resource : realm.getResourceKeys()) {\n+        realm.getResourceKeys().forEach(resource -> {\n             propByRes.add(ResourceOperation.CREATE, resource);\n-        }\n+        });\n         List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, false);\n \n@@ -165,9 +158,9 @@ public ProvisioningResult<RealmTO> delete(final String fullPath) {\n         }\n \n         PropagationByResource propByRes = new PropagationByResource();\n-        for (String resource : realm.getResourceKeys()) {\n+        realm.getResourceKeys().forEach(resource -> {\n             propByRes.add(ResourceOperation.DELETE, resource);\n-        }\n+        });\n         List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, false);\n "},{"sha":"30ac9a221b038a7aa12145f61bc7a70957e761b9","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RelationshipTypeLogic.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,10 +19,8 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n@@ -58,14 +56,8 @@ public RelationshipTypeTO read(final String key) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RELATIONSHIPTYPE_LIST + \"')\")\n     public List<RelationshipTypeTO> list() {\n-        return CollectionUtils.collect(relationshipTypeDAO.findAll(),\n-                new Transformer<RelationshipType, RelationshipTypeTO>() {\n-\n-            @Override\n-            public RelationshipTypeTO transform(final RelationshipType input) {\n-                return binder.getRelationshipTypeTO(input);\n-            }\n-        }, new ArrayList<RelationshipTypeTO>());\n+        return relationshipTypeDAO.findAll().stream().\n+                map(relationshipType -> binder.getRelationshipTypeTO(relationshipType)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RELATIONSHIPTYPE_CREATE + \"')\")"},{"sha":"854870f90b2c484a330d19b435ddea1bdbab6922","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":8,"deletions":27,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,20 +22,18 @@\n import java.io.OutputStream;\n import java.lang.reflect.Method;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n import java.util.zip.ZipInputStream;\n import javax.xml.transform.stream.StreamSource;\n import org.apache.cocoon.pipeline.NonCachingPipeline;\n import org.apache.cocoon.pipeline.Pipeline;\n import org.apache.cocoon.sax.SAXPipelineComponent;\n import org.apache.cocoon.sax.component.XMLGenerator;\n import org.apache.cocoon.sax.component.XMLSerializer;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.tuple.Triple;\n@@ -137,13 +135,7 @@ public ReportTO update(final ReportTO reportTO) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_LIST + \"')\")\n     public List<ReportTO> list() {\n-        return CollectionUtils.collect(reportDAO.findAll(), new Transformer<Report, ReportTO>() {\n-\n-            @Override\n-            public ReportTO transform(final Report input) {\n-                return binder.getReportTO(input);\n-            }\n-        }, new ArrayList<ReportTO>());\n+        return reportDAO.findAll().stream().map(report -> binder.getReportTO(report)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_READ + \"')\")\n@@ -314,26 +306,15 @@ public List<ExecTO> listExecutions(\n             throw new NotFoundException(\"Report \" + key);\n         }\n \n-        return CollectionUtils.collect(reportExecDAO.findAll(report, page, size, orderByClauses),\n-                new Transformer<ReportExec, ExecTO>() {\n-\n-            @Override\n-            public ExecTO transform(final ReportExec reportExec) {\n-                return binder.getExecTO(reportExec);\n-            }\n-        }, new ArrayList<ExecTO>());\n+        return reportExecDAO.findAll(report, page, size, orderByClauses).stream().\n+                map(reportExec -> binder.getExecTO(reportExec)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_LIST + \"')\")\n     @Override\n     public List<ExecTO> listRecentExecutions(final int max) {\n-        return CollectionUtils.collect(reportExecDAO.findRecent(max), new Transformer<ReportExec, ExecTO>() {\n-\n-            @Override\n-            public ExecTO transform(final ReportExec reportExec) {\n-                return binder.getExecTO(reportExec);\n-            }\n-        }, new ArrayList<ExecTO>());\n+        return reportExecDAO.findRecent(max).stream().\n+                map(reportExec -> binder.getExecTO(reportExec)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_DELETE + \"')\")\n@@ -362,15 +343,15 @@ public BulkActionResult deleteExecutions(\n \n         BulkActionResult result = new BulkActionResult();\n \n-        for (ReportExec exec : reportExecDAO.findAll(report, startedBefore, startedAfter, endedBefore, endedAfter)) {\n+        reportExecDAO.findAll(report, startedBefore, startedAfter, endedBefore, endedAfter).forEach(exec -> {\n             try {\n                 reportExecDAO.delete(exec);\n                 result.getResults().put(String.valueOf(exec.getKey()), BulkActionResult.Status.SUCCESS);\n             } catch (Exception e) {\n                 LOG.error(\"Error deleting execution {} of report {}\", exec.getKey(), key, e);\n                 result.getResults().put(String.valueOf(exec.getKey()), BulkActionResult.Status.FAILURE);\n             }\n-        }\n+        });\n \n         return result;\n     }"},{"sha":"4d150d9ed54326fb30ec178ed81d2c7a254b6ddf","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportTemplateLogic.java","status":"modified","additions":6,"deletions":19,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,10 +19,8 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -34,6 +32,7 @@\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.ReportTemplateDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.ReportTemplate;\n import org.apache.syncope.core.persistence.api.entity.Report;\n@@ -73,14 +72,8 @@ public ReportTemplateTO read(final String key) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_TEMPLATE_LIST + \"')\")\n     public List<ReportTemplateTO> list() {\n-        return CollectionUtils.collect(\n-                reportTemplateDAO.findAll(), new Transformer<ReportTemplate, ReportTemplateTO>() {\n-\n-            @Override\n-            public ReportTemplateTO transform(final ReportTemplate input) {\n-                return getReportTemplateTO(input.getKey());\n-            }\n-        }, new ArrayList<ReportTemplateTO>());\n+        return reportTemplateDAO.findAll().stream().\n+                map(template -> getReportTemplateTO(template.getKey())).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_TEMPLATE_CREATE + \"')\")\n@@ -158,13 +151,7 @@ public ReportTemplateTO delete(final String key) {\n         List<Report> reports = reportDAO.findByTemplate(reportTemplate);\n         if (!reports.isEmpty()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InUseByNotifications);\n-            sce.getElements().addAll(CollectionUtils.collect(reports, new Transformer<Report, String>() {\n-\n-                @Override\n-                public String transform(final Report report) {\n-                    return String.valueOf(report.getKey());\n-                }\n-            }, new ArrayList<String>()));\n+            sce.getElements().addAll(reports.stream().map(Entity::getKey).collect(Collectors.toList()));\n             throw sce;\n         }\n \n@@ -182,7 +169,7 @@ protected ReportTemplateTO resolveReference(final Method method, final Object...\n         if (ArrayUtils.isNotEmpty(args)) {\n             for (int i = 0; key == null && i < args.length; i++) {\n                 if (args[i] instanceof String) {\n-                    key = ((String) args[i]).toString();\n+                    key = ((String) args[i]);\n                 } else if (args[i] instanceof ReportTemplateTO) {\n                     key = ((ReportTemplateTO) args[i]).getKey();\n                 }"},{"sha":"d027e97a0a4037f975df275a318356db42fe375a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceHistoryLogic.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceHistoryLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceHistoryLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceHistoryLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,10 +19,8 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.to.ResourceHistoryConfTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -64,14 +62,8 @@ public List<ResourceHistoryConfTO> list(final String key) {\n             throw new NotFoundException(\"Resource '\" + key + \"'\");\n         }\n \n-        return CollectionUtils.collect(resourceHistoryConfDAO.findByEntity(resource),\n-                new Transformer<ExternalResourceHistoryConf, ResourceHistoryConfTO>() {\n-\n-            @Override\n-            public ResourceHistoryConfTO transform(final ExternalResourceHistoryConf input) {\n-                return getResourceHistoryConfTO(input);\n-            }\n-        }, new ArrayList<ResourceHistoryConfTO>());\n+        return resourceHistoryConfDAO.findByEntity(resource).stream().\n+                map(historyConf -> getResourceHistoryConfTO(historyConf)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_HISTORY_RESTORE + \"')\")"},{"sha":"eccbd6d744488070ffa2aecc4e759b104ef34379","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":27,"deletions":40,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,18 +23,16 @@\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.IteratorUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.ImmutableTriple;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n+import org.apache.syncope.common.lib.collections.IteratorChain;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n@@ -61,7 +59,6 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n@@ -120,13 +117,8 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {\n     private ConnectorFactory connFactory;\n \n     protected void securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n-        boolean authorized = IterableUtils.matchesAny(effectiveRealms, new Predicate<String>() {\n-\n-            @Override\n-            public boolean evaluate(final String ownedRealm) {\n-                return realm.startsWith(ownedRealm);\n-            }\n-        });\n+        effectiveRealms.stream().anyMatch(ownedRealm -> realm.startsWith(ownedRealm));\n+        boolean authorized = effectiveRealms.stream().anyMatch(ownedRealm -> realm.startsWith(ownedRealm));\n         if (!authorized) {\n             throw new DelegatedAdministrationException(realm, ExternalResource.class.getSimpleName(), key);\n         }\n@@ -201,12 +193,12 @@ public void setLatestSyncToken(final String key, final String anyTypeKey) {\n             if (anyType == null) {\n                 throw new NotFoundException(\"AnyType '\" + anyTypeKey + \"'\");\n             }\n-            Provision provision = resource.getProvision(anyType);\n-            if (provision == null) {\n+            Optional<? extends Provision> provision = resource.getProvision(anyType);\n+            if (!provision.isPresent()) {\n                 throw new NotFoundException(\"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + \"'\");\n             }\n \n-            provision.setSyncToken(connector.getLatestSyncToken(provision.getObjectClass()));\n+            provision.get().setSyncToken(connector.getLatestSyncToken(provision.get().getObjectClass()));\n         }\n \n         Set<String> effectiveRealms = RealmUtils.getEffective(\n@@ -234,12 +226,12 @@ public void removeSyncToken(final String key, final String anyTypeKey) {\n             if (anyType == null) {\n                 throw new NotFoundException(\"AnyType '\" + anyTypeKey + \"'\");\n             }\n-            Provision provision = resource.getProvision(anyType);\n-            if (provision == null) {\n+            Optional<? extends Provision> provision = resource.getProvision(anyType);\n+            if (!provision.isPresent()) {\n                 throw new NotFoundException(\"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + \"'\");\n             }\n \n-            provision.setSyncToken(null);\n+            provision.get().setSyncToken(null);\n         }\n \n         Set<String> effectiveRealms = RealmUtils.getEffective(\n@@ -283,13 +275,8 @@ public ResourceTO read(final String key) {\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<ResourceTO> list() {\n-        return CollectionUtils.collect(resourceDAO.findAll(), new Transformer<ExternalResource, ResourceTO>() {\n-\n-            @Override\n-            public ResourceTO transform(final ExternalResource input) {\n-                return binder.getResourceTO(input);\n-            }\n-        }, new ArrayList<ResourceTO>());\n+        return resourceDAO.findAll().stream().\n+                map(resource -> binder.getResourceTO(resource)).collect(Collectors.toList());\n     }\n \n     private Triple<ExternalResource, AnyType, Provision> connObjectInit(\n@@ -303,12 +290,12 @@ private Triple<ExternalResource, AnyType, Provision> connObjectInit(\n         if (anyType == null) {\n             throw new NotFoundException(\"AnyType '\" + anyTypeKey + \"'\");\n         }\n-        Provision provision = resource.getProvision(anyType);\n-        if (provision == null) {\n+        Optional<? extends Provision> provision = resource.getProvision(anyType);\n+        if (!provision.isPresent()) {\n             throw new NotFoundException(\"Provision on resource '\" + resourceKey + \"' for type '\" + anyTypeKey + \"'\");\n         }\n \n-        return ImmutableTriple.of(resource, anyType, provision);\n+        return ImmutableTriple.of(resource, anyType, provision.get());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_GET_CONNOBJECT + \"')\")\n@@ -327,31 +314,31 @@ public ConnObjectTO readConnObject(final String key, final String anyTypeKey, fi\n         }\n \n         // 2. build connObjectKeyItem\n-        MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(init.getRight());\n-        if (connObjectKeyItem == null) {\n+        Optional<MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(init.getRight());\n+        if (!connObjectKeyItem.isPresent()) {\n             throw new NotFoundException(\n                     \"ConnObjectKey mapping for \" + init.getMiddle() + \" \" + anyKey + \" on resource '\" + key + \"'\");\n         }\n-        String connObjectKeyValue = mappingManager.getConnObjectKeyValue(any, init.getRight());\n+        Optional<String> connObjectKeyValue = mappingManager.getConnObjectKeyValue(any, init.getRight());\n \n         // 3. determine attributes to query\n         Set<MappingItem> linkinMappingItems = new HashSet<>();\n-        for (VirSchema virSchema : virSchemaDAO.findByProvision(init.getRight())) {\n+        virSchemaDAO.findByProvision(init.getRight()).forEach(virSchema -> {\n             linkinMappingItems.add(virSchema.asLinkingMappingItem());\n-        }\n-        Iterator<MappingItem> mapItems = IteratorUtils.chainedIterator(\n+        });\n+        Iterator<MappingItem> mapItems = new IteratorChain<>(\n                 init.getRight().getMapping().getItems().iterator(),\n                 linkinMappingItems.iterator());\n \n         // 4. read from the underlying connector\n         Connector connector = connFactory.getConnector(init.getLeft());\n         ConnectorObject connectorObject = connector.getObject(\n                 init.getRight().getObjectClass(),\n-                AttributeBuilder.build(connObjectKeyItem.getExtAttrName(), connObjectKeyValue),\n+                AttributeBuilder.build(connObjectKeyItem.get().getExtAttrName(), connObjectKeyValue.get()),\n                 MappingUtils.buildOperationOptions(mapItems));\n         if (connectorObject == null) {\n             throw new NotFoundException(\n-                    \"Object \" + connObjectKeyValue + \" with class \" + init.getRight().getObjectClass()\n+                    \"Object \" + connObjectKeyValue.get() + \" with class \" + init.getRight().getObjectClass()\n                     + \" not found on resource \" + key);\n         }\n \n@@ -394,10 +381,10 @@ public Pair<SearchResult, List<ConnObjectTO>> listConnObjects(final String key,\n             init.getRight().getMapping().getItems();\n \n             Set<MappingItem> linkinMappingItems = new HashSet<>();\n-            for (VirSchema virSchema : virSchemaDAO.findByProvision(init.getRight())) {\n+            virSchemaDAO.findByProvision(init.getRight()).forEach(virSchema -> {\n                 linkinMappingItems.add(virSchema.asLinkingMappingItem());\n-            }\n-            Iterator<MappingItem> mapItems = IteratorUtils.chainedIterator(\n+            });\n+            Iterator<MappingItem> mapItems = new IteratorChain<>(\n                     init.getRight().getMapping().getItems().iterator(),\n                     linkinMappingItems.iterator());\n             options = MappingUtils.buildOperationOptions(mapItems);"},{"sha":"e8b9f8a27a5e67b76c26469c13d874bc07125c9e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RoleLogic.java","status":"modified","additions":2,"deletions":10,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,10 +19,8 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.RoleTO;\n@@ -61,13 +59,7 @@ public RoleTO read(final String key) {\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<RoleTO> list() {\n-        return CollectionUtils.collect(roleDAO.findAll(), new Transformer<Role, RoleTO>() {\n-\n-            @Override\n-            public RoleTO transform(final Role input) {\n-                return binder.getRoleTO(input);\n-            }\n-        }, new ArrayList<RoleTO>());\n+        return roleDAO.findAll().stream().map(role -> binder.getRoleTO(role)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_CREATE + \"')\")"},{"sha":"dba439b7a9869873ce25858795b4a91d78766945","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":29,"deletions":32,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,8 +21,8 @@\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -145,61 +145,58 @@ public void delete(final SchemaType schemaType, final String schemaKey) {\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings({ \"unchecked\", \"Convert2Lambda\" })\n     public <T extends AbstractSchemaTO> List<T> list(\n             final SchemaType schemaType, final List<String> anyTypeClasses) {\n \n         List<AnyTypeClass> classes = new ArrayList<>(anyTypeClasses == null ? 0 : anyTypeClasses.size());\n         if (anyTypeClasses != null) {\n             anyTypeClasses.remove(AnyTypeKind.USER.name());\n             anyTypeClasses.remove(AnyTypeKind.GROUP.name());\n-            for (String anyTypeClass : anyTypeClasses) {\n+            anyTypeClasses.forEach(anyTypeClass -> {\n                 AnyTypeClass clazz = anyTypeClassDAO.find(anyTypeClass);\n                 if (clazz == null) {\n                     LOG.warn(\"Ignoring invalid {}: {}\", AnyTypeClass.class.getSimpleName(), anyTypeClass);\n                 } else {\n                     classes.add(clazz);\n                 }\n-            }\n+            });\n         }\n \n         List<T> result;\n         switch (schemaType) {\n             case VIRTUAL:\n-                result = CollectionUtils.collect(\n-                        classes.isEmpty() ? virSchemaDAO.findAll() : virSchemaDAO.findByAnyTypeClasses(classes),\n-                        new Transformer<VirSchema, T>() {\n-\n-                    @Override\n-                    public T transform(final VirSchema input) {\n-                        return (T) binder.getVirSchemaTO(input);\n-                    }\n-                }, new ArrayList<T>());\n+                result = (classes.isEmpty() ? virSchemaDAO.findAll() : virSchemaDAO.findByAnyTypeClasses(classes)).\n+                        stream().map(new Function<VirSchema, T>() {\n+\n+                            @Override\n+                            public T apply(final VirSchema schema) {\n+                                return (T) binder.getVirSchemaTO(schema);\n+                            }\n+                        }).collect(Collectors.toList());\n                 break;\n \n             case DERIVED:\n-                result = CollectionUtils.collect(\n-                        classes.isEmpty() ? derSchemaDAO.findAll() : derSchemaDAO.findByAnyTypeClasses(classes),\n-                        new Transformer<DerSchema, T>() {\n-\n-                    @Override\n-                    public T transform(final DerSchema input) {\n-                        return (T) binder.getDerSchemaTO(input);\n-                    }\n-                }, new ArrayList<T>());\n+                result = (classes.isEmpty() ? derSchemaDAO.findAll() : derSchemaDAO.findByAnyTypeClasses(classes)).\n+                        stream().map(new Function<DerSchema, T>() {\n+\n+                            @Override\n+                            public T apply(final DerSchema schema) {\n+                                return (T) binder.getDerSchemaTO(schema);\n+                            }\n+                        }).collect(Collectors.toList());\n                 break;\n \n             case PLAIN:\n             default:\n-                result = CollectionUtils.collect(\n-                        classes.isEmpty() ? plainSchemaDAO.findAll() : plainSchemaDAO.findByAnyTypeClasses(classes),\n-                        new Transformer<PlainSchema, T>() {\n-\n-                    @Override\n-                    public T transform(final PlainSchema input) {\n-                        return (T) binder.getPlainSchemaTO(input);\n-                    }\n-                }, new ArrayList<T>());\n+                result = (classes.isEmpty() ? plainSchemaDAO.findAll() : plainSchemaDAO.findByAnyTypeClasses(classes)).\n+                        stream().map(new Function<PlainSchema, T>() {\n+\n+                            @Override\n+                            public T apply(final PlainSchema schema) {\n+                                return (T) binder.getPlainSchemaTO(schema);\n+                            }\n+                        }).collect(Collectors.toList());\n         }\n \n         return result;"},{"sha":"f77f2fd4857a9b01a8efadc168ae608aec2124a4","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SecurityQuestionLogic.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,10 +19,8 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n@@ -52,14 +50,8 @@ public class SecurityQuestionLogic extends AbstractTransactionalLogic<SecurityQu\n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n     public List<SecurityQuestionTO> list() {\n-        return CollectionUtils.collect(securityQuestionDAO.findAll(),\n-                new Transformer<SecurityQuestion, SecurityQuestionTO>() {\n-\n-            @Override\n-            public SecurityQuestionTO transform(final SecurityQuestion input) {\n-                return binder.getSecurityQuestionTO(input);\n-            }\n-        }, new ArrayList<SecurityQuestionTO>());\n+        return securityQuestionDAO.findAll().stream().\n+                map(securityQuestion -> binder.getSecurityQuestionTO(securityQuestion)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.SECURITY_QUESTION_READ + \"')\")"},{"sha":"ad3a86df46dfb0f72465ce28e4087d2680f0ff5a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":26,"deletions":48,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,16 +23,14 @@\n import java.lang.management.RuntimeMXBean;\n import java.lang.reflect.Method;\n import java.net.InetAddress;\n-import java.net.URI;\n import java.net.UnknownHostException;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n import javax.annotation.Resource;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -76,7 +74,6 @@\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n-import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n@@ -204,9 +201,8 @@ public PlatformInfo platform() {\n                 PLATFORM_INFO.setBuildNumber(buildNumber);\n \n                 if (bundleManager.getLocations() != null) {\n-                    for (URI location : bundleManager.getLocations()) {\n-                        PLATFORM_INFO.getConnIdLocations().add(location.toASCIIString());\n-                    }\n+                    bundleManager.getLocations().\n+                            forEach(location -> PLATFORM_INFO.getConnIdLocations().add(location.toASCIIString()));\n                 }\n \n                 PLATFORM_INFO.setAnyObjectWorkflowAdapter(AopUtils.getTargetClass(awfAdapter).getName());\n@@ -246,35 +242,23 @@ public PlatformInfo platform() {\n             PLATFORM_INFO.getEntitlements().clear();\n             PLATFORM_INFO.getEntitlements().addAll(EntitlementsHolder.getInstance().getValues());\n \n-            AuthContextUtils.execWithAuthContext(AuthContextUtils.getDomain(), new AuthContextUtils.Executable<Void>() {\n-\n-                @Override\n-                public Void exec() {\n-                    PLATFORM_INFO.getAnyTypes().clear();\n-                    CollectionUtils.collect(\n-                            anyTypeDAO.findAll(),\n-                            EntityUtils.keyTransformer(),\n-                            PLATFORM_INFO.getAnyTypes());\n-\n-                    PLATFORM_INFO.getUserClasses().clear();\n-                    CollectionUtils.collect(\n-                            anyTypeDAO.findUser().getClasses(),\n-                            EntityUtils.keyTransformer(),\n-                            PLATFORM_INFO.getUserClasses());\n-\n-                    PLATFORM_INFO.getAnyTypeClasses().clear();\n-                    CollectionUtils.collect(\n-                            anyTypeClassDAO.findAll(),\n-                            EntityUtils.keyTransformer(),\n-                            PLATFORM_INFO.getAnyTypeClasses());\n-\n-                    PLATFORM_INFO.getResources().clear();\n-                    CollectionUtils.collect(\n-                            resourceDAO.findAll(),\n-                            EntityUtils.keyTransformer(),\n-                            PLATFORM_INFO.getResources());\n-                    return null;\n-                }\n+            AuthContextUtils.execWithAuthContext(AuthContextUtils.getDomain(), () -> {\n+                PLATFORM_INFO.getAnyTypes().clear();\n+                PLATFORM_INFO.getAnyTypes().addAll(anyTypeDAO.findAll().stream().\n+                        map(type -> type.getKey()).collect(Collectors.toList()));\n+\n+                PLATFORM_INFO.getUserClasses().clear();\n+                PLATFORM_INFO.getUserClasses().addAll(anyTypeDAO.findUser().getClasses().stream().\n+                        map(cls -> cls.getKey()).collect(Collectors.toList()));\n+\n+                PLATFORM_INFO.getAnyTypeClasses().clear();\n+                PLATFORM_INFO.getAnyTypeClasses().addAll(anyTypeClassDAO.findAll().stream().\n+                        map(cls -> cls.getKey()).collect(Collectors.toList()));\n+\n+                PLATFORM_INFO.getResources().clear();\n+                PLATFORM_INFO.getResources().addAll(resourceDAO.findAll().stream().\n+                        map(resource -> resource.getKey()).collect(Collectors.toList()));\n+                return null;\n             });\n         }\n \n@@ -394,14 +378,8 @@ public Pair<Integer, List<GroupTO>> searchAssignableGroups(\n                 searchCond,\n                 page, size,\n                 Collections.singletonList(orderByClause), AnyTypeKind.GROUP);\n-        List<GroupTO> result = CollectionUtils.collect(matching, new Transformer<Group, GroupTO>() {\n-\n-            @Transactional(readOnly = true)\n-            @Override\n-            public GroupTO transform(final Group input) {\n-                return groupDataBinder.getGroupTO(input, false);\n-            }\n-        }, new ArrayList<GroupTO>());\n+        List<GroupTO> result = matching.stream().\n+                map(group -> groupDataBinder.getGroupTO(group, false)).collect(Collectors.toList());\n \n         return Pair.of(count, result);\n     }\n@@ -412,12 +390,12 @@ public TypeExtensionTO readTypeExtension(final String groupName) {\n         if (group == null) {\n             throw new NotFoundException(\"Group \" + groupName);\n         }\n-        TypeExtension typeExt = group.getTypeExtension(anyTypeDAO.findUser());\n-        if (typeExt == null) {\n+        Optional<? extends TypeExtension> typeExt = group.getTypeExtension(anyTypeDAO.findUser());\n+        if (!typeExt.isPresent()) {\n             throw new NotFoundException(\"TypeExtension in \" + groupName + \" for users\");\n         }\n \n-        return groupDataBinder.getTypeExtensionTO(typeExt);\n+        return groupDataBinder.getTypeExtensionTO(typeExt.get());\n     }\n \n     @Override"},{"sha":"f7fbe1e7017b773c5cae4af9a08cd3c33272ee07","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":11,"deletions":28,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,12 +19,10 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -170,15 +168,11 @@ public <T extends AbstractTaskTO> List<T> list(\n             final List<OrderByClause> orderByClauses,\n             final boolean details) {\n \n-        return CollectionUtils.collect(taskDAO.findAll(\n+        return taskDAO.findAll(\n                 type, resourceDAO.find(resource), notificationDAO.find(notification), anyTypeKind, entityKey,\n-                page, size, orderByClauses), new Transformer<Task, T>() {\n-\n-            @Override\n-            public T transform(final Task task) {\n-                return (T) binder.getTaskTO(task, taskUtilsFactory.getInstance(type), details);\n-            }\n-        }, new ArrayList<T>());\n+                page, size, orderByClauses).stream().\n+                <T>map(task -> binder.getTaskTO(task, taskUtilsFactory.getInstance(type), details)).\n+                collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n@@ -297,26 +291,15 @@ public List<ExecTO> listExecutions(\n             throw new NotFoundException(\"Task \" + key);\n         }\n \n-        return CollectionUtils.collect(taskExecDAO.findAll(task, page, size, orderByClauses),\n-                new Transformer<TaskExec, ExecTO>() {\n-\n-            @Override\n-            public ExecTO transform(final TaskExec taskExec) {\n-                return binder.getExecTO(taskExec);\n-            }\n-        }, new ArrayList<ExecTO>());\n+        return taskExecDAO.findAll(task, page, size, orderByClauses).stream().\n+                map(taskExec -> binder.getExecTO(taskExec)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n     @Override\n     public List<ExecTO> listRecentExecutions(final int max) {\n-        return CollectionUtils.collect(taskExecDAO.findRecent(max), new Transformer<TaskExec, ExecTO>() {\n-\n-            @Override\n-            public ExecTO transform(final TaskExec taskExec) {\n-                return binder.getExecTO(taskExec);\n-            }\n-        }, new ArrayList<ExecTO>());\n+        return taskExecDAO.findRecent(max).stream().\n+                map(taskExec -> binder.getExecTO(taskExec)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_DELETE + \"')\")\n@@ -345,15 +328,15 @@ public BulkActionResult deleteExecutions(\n \n         BulkActionResult result = new BulkActionResult();\n \n-        for (TaskExec exec : taskExecDAO.findAll(task, startedBefore, startedAfter, endedBefore, endedAfter)) {\n+        taskExecDAO.findAll(task, startedBefore, startedAfter, endedBefore, endedAfter).forEach(exec -> {\n             try {\n                 taskExecDAO.delete(exec);\n                 result.getResults().put(String.valueOf(exec.getKey()), BulkActionResult.Status.SUCCESS);\n             } catch (Exception e) {\n                 LOG.error(\"Error deleting execution {} of task {}\", exec.getKey(), key, e);\n                 result.getResults().put(String.valueOf(exec.getKey()), BulkActionResult.Status.FAILURE);\n             }\n-        }\n+        });\n \n         return result;\n     }"},{"sha":"5f99944c625304bcec799952e878f69d086cc052","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":18,"deletions":46,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,14 +19,12 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n@@ -112,14 +110,9 @@ public Pair<Integer, List<UserTO>> search(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realm),\n                 searchCond == null ? userDAO.getAllMatchingCond() : searchCond,\n                 page, size, orderBy, AnyTypeKind.USER);\n-        List<UserTO> result = CollectionUtils.collect(matching, new Transformer<User, UserTO>() {\n-\n-            @Transactional(readOnly = true)\n-            @Override\n-            public UserTO transform(final User input) {\n-                return binder.returnUserTO(binder.getUserTO(input, details));\n-            }\n-        }, new ArrayList<UserTO>());\n+        List<UserTO> result = matching.stream().\n+                map(user -> binder.returnUserTO(binder.getUserTO(user, details))).\n+                collect(Collectors.toList());\n \n         return Pair.of(count, result);\n     }\n@@ -325,13 +318,8 @@ protected ProvisioningResult<UserTO> doDelete(\n         List<Group> ownedGroups = groupDAO.findOwnedByUser(before.getLeft().getKey());\n         if (!ownedGroups.isEmpty()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.GroupOwnership);\n-            sce.getElements().addAll(CollectionUtils.collect(ownedGroups, new Transformer<Group, String>() {\n-\n-                @Override\n-                public String transform(final Group group) {\n-                    return group.getKey() + \" \" + group.getName();\n-                }\n-            }, new ArrayList<String>()));\n+            sce.getElements().addAll(ownedGroups.stream().\n+                    map(group -> group.getKey() + \" \" + group.getName()).collect(Collectors.toList()));\n             throw sce;\n         }\n \n@@ -360,13 +348,9 @@ public UserTO unlink(final String key, final Collection<String> resources) {\n \n         UserPatch patch = new UserPatch();\n         patch.setKey(key);\n-        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n-\n-            @Override\n-            public StringPatchItem transform(final String resource) {\n-                return new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build();\n-            }\n-        }));\n+        patch.getResources().addAll(resources.stream().map(resource\n+                -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build()).\n+                collect(Collectors.toList()));\n \n         return binder.returnUserTO(binder.getUserTO(provisioningManager.unlink(patch)));\n     }\n@@ -383,13 +367,9 @@ public UserTO link(final String key, final Collection<String> resources) {\n \n         UserPatch patch = new UserPatch();\n         patch.setKey(key);\n-        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n-\n-            @Override\n-            public StringPatchItem transform(final String resource) {\n-                return new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build();\n-            }\n-        }));\n+        patch.getResources().addAll(resources.stream().map(resource\n+                -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n+                collect(Collectors.toList()));\n \n         return binder.returnUserTO(binder.getUserTO(provisioningManager.link(patch)));\n     }\n@@ -408,13 +388,9 @@ public ProvisioningResult<UserTO> unassign(\n \n         UserPatch patch = new UserPatch();\n         patch.setKey(key);\n-        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n-\n-            @Override\n-            public StringPatchItem transform(final String resource) {\n-                return new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build();\n-            }\n-        }));\n+        patch.getResources().addAll(resources.stream().map(resource\n+                -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build()).\n+                collect(Collectors.toList()));\n \n         return update(patch, nullPriorityAsync);\n     }\n@@ -437,13 +413,9 @@ public ProvisioningResult<UserTO> assign(\n \n         UserPatch patch = new UserPatch();\n         patch.setKey(key);\n-        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n-\n-            @Override\n-            public StringPatchItem transform(final String resource) {\n-                return new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build();\n-            }\n-        }));\n+        patch.getResources().addAll(resources.stream().map(resource\n+                -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n+                collect(Collectors.toList()));\n \n         if (changepwd) {\n             patch.setPassword(new PasswordPatch.Builder()."},{"sha":"e6262155df15c8395b7ae30682d01cd904ae9df4","filename":"core/migration/src/main/java/org/apache/syncope/core/migration/MigrationPullActions.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fmigration%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmigration%2FMigrationPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fmigration%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmigration%2FMigrationPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmigration%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmigration%2FMigrationPullActions.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,8 +22,7 @@\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.TransformerUtils;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -73,7 +72,7 @@ public SyncDelta beforeProvision(\n                 && resourcesAttr.getValue() != null && !resourcesAttr.getValue().isEmpty()) {\n \n             ((AnyTO) entity).getResources().addAll(\n-                    CollectionUtils.collect(resourcesAttr.getValue(), TransformerUtils.stringValueTransformer()));\n+                    resourcesAttr.getValue().stream().map(Object::toString).collect(Collectors.toList()));\n         }\n \n         return delta;"},{"sha":"f9db494ebdde6ba1d7bbe756cd1a751d43152d7d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/attrvalue/validation/InvalidEntityException.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -25,8 +25,6 @@\n import java.util.Set;\n import javax.validation.ConstraintViolation;\n import javax.validation.ValidationException;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n \n /**\n@@ -73,7 +71,7 @@ public InvalidEntityException(final String entityClassSimpleName,\n \n         this.entityClassSimpleName = entityClassSimpleName;\n \n-        for (ConstraintViolation<Object> violation : violations) {\n+        violations.forEach((violation) -> {\n             int firstComma = violation.getMessageTemplate().indexOf(';');\n \n             final String key = violation.getMessageTemplate().substring(\n@@ -96,17 +94,11 @@ public InvalidEntityException(final String entityClassSimpleName,\n             }\n \n             this.violations.get(violation.getLeafBean().getClass()).add(entityViolationType);\n-        }\n+        });\n     }\n \n     public final boolean hasViolation(final EntityViolationType type) {\n-        return IterableUtils.matchesAny(violations.keySet(), new Predicate<Class<?>>() {\n-\n-            @Override\n-            public boolean evaluate(final Class<?> entity) {\n-                return violations.get(entity).contains(type);\n-            }\n-        });\n+        return violations.keySet().stream().anyMatch(entity -> violations.get(entity).contains(type));\n     }\n \n     public String getEntityClassSimpleName() {"},{"sha":"54f5e5138978c8015664ac89c9d359cc4b68992c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AllowedSchemas.java","status":"modified","additions":11,"deletions":21,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAllowedSchemas.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAllowedSchemas.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAllowedSchemas.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,14 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.PredicateUtils;\n-import org.apache.commons.collections4.SetUtils;\n+import java.util.function.Predicate;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n \n@@ -40,7 +38,7 @@ public Set<S> getForSelf() {\n     }\n \n     public Set<S> getForMembership(final Group group) {\n-        return SetUtils.emptyIfNull(forMemberships.get(group));\n+        return forMemberships.get(group) == null ? Collections.<S>emptySet() : forMemberships.get(group);\n     }\n \n     public Map<Group, Set<S>> getForMemberships() {\n@@ -52,35 +50,27 @@ public boolean forSelfContains(final S schema) {\n     }\n \n     public boolean forSelfContains(final String schema) {\n-        return IterableUtils.matchesAny(forSelf, new KeyMatches(schema));\n+        return forSelf.stream().anyMatch(new KeyMatches(schema));\n     }\n \n     public boolean forMembershipsContains(final Group group, final S schema) {\n-        return IterableUtils.matchesAny(forMemberships.get(group), PredicateUtils.equalPredicate(schema));\n+        return getForMembership(group).stream().anyMatch(s -> s.equals(schema));\n     }\n \n     public boolean forMembershipsContains(final S schema) {\n-        for (Map.Entry<Group, Set<S>> entry : forMemberships.entrySet()) {\n-            if (entry.getValue().contains(schema)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return forMemberships.entrySet().stream().\n+                anyMatch(entry -> entry.getValue().contains(schema));\n     }\n \n     public boolean forMembershipsContains(final Group group, final String schema) {\n-        return IterableUtils.matchesAny(forMemberships.get(group), new KeyMatches(schema));\n+        return getForMembership(group).stream().anyMatch(new KeyMatches(schema));\n     }\n \n     public boolean forMembershipsContains(final String schema) {\n         KeyMatches keyMatches = new KeyMatches(schema);\n \n-        for (Map.Entry<Group, Set<S>> entry : forMemberships.entrySet()) {\n-            if (IterableUtils.matchesAny(entry.getValue(), keyMatches)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return forMemberships.entrySet().stream().\n+                anyMatch(entry -> entry.getValue().stream().anyMatch(keyMatches));\n     }\n \n     public boolean contains(final S schema) {\n@@ -106,7 +96,7 @@ private class KeyMatches implements Predicate<S> {\n         }\n \n         @Override\n-        public boolean evaluate(final S object) {\n+        public boolean test(final S object) {\n             return object.getKey().equals(schema);\n         }\n "},{"sha":"b150aaab81bf1bcdb2c5e2c256d7ae7dbe519d09","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ConfDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FConfDAO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,12 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n+import java.util.Optional;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n \n public interface ConfDAO extends DAO<Conf> {\n \n-    CPlainAttr find(String key);\n+    Optional<? extends CPlainAttr> find(String key);\n \n     <T> T find(String key, T defaultValue);\n "},{"sha":"4bc14881f610def9ff3bdd75edfcd9d976778304","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n+import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n@@ -46,6 +47,8 @@ public interface GroupDAO extends AnyDAO<Group> {\n \n     List<String> findADynMembers(Group group);\n \n+    Collection<String> findAllResourceKeys(final String key);\n+\n     void clearADynMembers(Group group);\n \n     void refreshDynMemberships(AnyObject anyObject);"},{"sha":"0ec609ea7177cea75d9dfba5656b05ec0d7718a3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Any.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,6 +20,7 @@\n \n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import java.util.List;\n+import java.util.Optional;\n \n public interface Any<P extends PlainAttr<?>> extends AnnotatedEntity {\n \n@@ -43,7 +44,7 @@\n \n     boolean remove(P attr);\n \n-    P getPlainAttr(String plainSchemaName);\n+    Optional<? extends P> getPlainAttr(String plainSchema);\n \n     List<? extends P> getPlainAttrs();\n "},{"sha":"dd13b4af713f455e48ae11a67a04a74e6d81abf3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/GroupableRelatable.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGroupableRelatable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGroupableRelatable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGroupableRelatable.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Collection;\n import java.util.List;\n+import java.util.Optional;\n \n public interface GroupableRelatable<\n         L extends Any<P>, \n@@ -29,31 +30,30 @@\n         REL extends Relationship<L, R>> extends Any<P> {\n \n     @Override\n-    boolean add(final P attr);\n+    boolean add(P attr);\n \n     @Override\n-    boolean remove(final P attr);\n+    boolean remove(P attr);\n \n     /**\n      * Returns the plain attribute for this instance and the given schema name - if found, {@code NULL} otherwise.\n      * <b>IMPORTANT:</b> This method won't return any attribute related to memberships.\n      *\n-     * @param plainSchemaName plain schema name\n-     * @return plain attribute for this instance and the given schema name - if found, {@code NULL} otherwise\n+     * @param plainSchema plain schema name\n+     * @return plain attribute for this instance and the given schema name\n      */\n     @Override\n-    P getPlainAttr(String plainSchemaName);\n+    Optional<? extends P> getPlainAttr(String plainSchema);\n \n     /**\n      * Returns the plain attribute for this instance, the given schema name and the given membership -\n      * if found, {@code NULL} otherwise.\n      *\n-     * @param plainSchemaName plain schema name\n+     * @param plainSchema plain schema name\n      * @param membership membership\n-     * @return plain attribute for this instance, the given schema name and the given membership -\n-     * if found, {@code NULL} otherwise\n+     * @return plain attribute for this instance, the given schema name and the given membership\n      */\n-    P getPlainAttr(String plainSchemaName, Membership<?> membership);\n+    Optional<? extends P> getPlainAttr(String plainSchema, Membership<?> membership);\n \n     /**\n      * Returns the plain attributes for this instance.\n@@ -68,10 +68,10 @@\n      * Returns the list of plain attributes for this instance and the given schema name (including membeship attributes,\n      * as opposite to {@link Any#getPlainAttr(java.lang.String)}).\n      *\n-     * @param plainSchemaName plain schema name\n+     * @param plainSchema plain schema name\n      * @return list of plain attributes for this instance and the given schema name (including membeship attributes)\n      */\n-    Collection<? extends P> getPlainAttrs(String plainSchemaName);\n+    Collection<? extends P> getPlainAttrs(String plainSchema);\n \n     /**\n      * Returns the list of plain attributes for this instance and the given membership.\n@@ -83,13 +83,13 @@\n \n     boolean add(M membership);\n \n-    M getMembership(String groupKey);\n+    Optional<? extends M> getMembership(String groupKey);\n \n     List<? extends M> getMemberships();\n \n     boolean add(REL relationship);\n \n-    REL getRelationship(RelationshipType relationshipType, String otherEndKey);\n+    Optional<? extends REL> getRelationship(RelationshipType relationshipType, String otherEndKey);\n \n     Collection<? extends REL> getRelationships(String otherEndKey);\n "},{"sha":"62d82213c72d7455d10a71e23c4e97eddaf04dbf","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Notification.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNotification.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.entity;\n \n import java.util.List;\n+import java.util.Optional;\n import org.apache.syncope.common.lib.types.TraceLevel;\n \n public interface Notification extends Entity {\n@@ -45,7 +46,7 @@ public interface Notification extends Entity {\n \n     boolean add(AnyAbout about);\n \n-    AnyAbout getAbout(AnyType anyType);\n+    Optional<? extends AnyAbout> getAbout(AnyType anyType);\n \n     List<? extends AnyAbout> getAbouts();\n "},{"sha":"e3459218c7c71cbfd29f891fa515b2b6b17d3dce","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Realm.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.entity;\n \n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n@@ -48,7 +49,7 @@ public interface Realm extends Entity {\n \n     boolean add(AnyTemplateRealm template);\n \n-    AnyTemplateRealm getTemplate(AnyType anyType);\n+    Optional<? extends AnyTemplateRealm> getTemplate(AnyType anyType);\n \n     List<? extends AnyTemplateRealm> getTemplates();\n "},{"sha":"59d7e5e91b5cd7ba5b59eaa5f88045efa6395696","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/Group.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.entity.group;\n \n import java.util.List;\n+import java.util.Optional;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n@@ -43,7 +44,7 @@ public interface Group extends Any<GPlainAttr> {\n     boolean add(GPlainAttr attr);\n \n     @Override\n-    GPlainAttr getPlainAttr(String plainSchemaName);\n+    Optional<? extends GPlainAttr> getPlainAttr(String plainSchema);\n \n     @Override\n     List<? extends GPlainAttr> getPlainAttrs();\n@@ -54,13 +55,13 @@ public interface Group extends Any<GPlainAttr> {\n \n     boolean add(ADynGroupMembership dynGroupMembership);\n \n-    ADynGroupMembership getADynMembership(AnyType anyType);\n+    Optional<? extends ADynGroupMembership> getADynMembership(AnyType anyType);\n \n     List<? extends ADynGroupMembership> getADynMemberships();\n \n     boolean add(TypeExtension typeExtension);\n \n-    TypeExtension getTypeExtension(AnyType anyType);\n+    Optional<? extends TypeExtension> getTypeExtension(AnyType anyType);\n \n     List<? extends TypeExtension> getTypeExtensions();\n }"},{"sha":"bf810b3b7c55735f03d6e74c0525705f0aaf810b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/AccountPolicy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -42,7 +42,7 @@ public interface AccountPolicy extends Policy {\n \n     boolean add(ExternalResource resource);\n \n-    Set<String> getResourceNames();\n+    Set<String> getResourceKeys();\n \n     Set<? extends ExternalResource> getResources();\n }"},{"sha":"4b8ee409fa3859cb63b6b8b0ceaabf50563a4bd4","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/ExternalResource.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.entity.resource;\n \n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n@@ -91,9 +92,9 @@ public interface ExternalResource extends ProvidedKeyEntity {\n \n     boolean add(Provision provision);\n \n-    Provision getProvision(AnyType anyType);\n+    Optional<? extends Provision> getProvision(AnyType anyType);\n \n-    Provision getProvision(ObjectClass objectClass);\n+    Optional<? extends Provision> getProvision(ObjectClass objectClass);\n \n     List<? extends Provision> getProvisions();\n "},{"sha":"ce7abaa8aea976231a4ab0036e32ef56b8e8fdc7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/Mapping.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMapping.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.entity.resource;\n \n import java.util.List;\n+import java.util.Optional;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n \n public interface Mapping extends Entity {\n@@ -33,7 +34,7 @@ public interface Mapping extends Entity {\n \n     boolean add(MappingItem item);\n \n-    MappingItem getConnObjectKeyItem();\n+    Optional<? extends MappingItem> getConnObjectKeyItem();\n \n     void setConnObjectKeyItem(MappingItem item);\n "},{"sha":"89bf153c62efa08c057a82436a4569fe65e01373","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/OrgUnit.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FOrgUnit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FOrgUnit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FOrgUnit.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.entity.resource;\n \n import java.util.List;\n+import java.util.Optional;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.SyncToken;\n@@ -45,7 +46,7 @@ public interface OrgUnit extends Entity {\n \n     boolean add(OrgUnitItem item);\n \n-    OrgUnitItem getConnObjectKeyItem();\n+    Optional<? extends OrgUnitItem> getConnObjectKeyItem();\n \n     void setConnObjectKeyItem(OrgUnitItem item);\n "},{"sha":"0ce891b865c596b25d1c648a1341b95df5bb3e41","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/PullTask.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPullTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPullTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPullTask.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.entity.task;\n \n import java.util.List;\n+import java.util.Optional;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -39,7 +40,7 @@ public interface PullTask extends ProvisioningTask {\n \n     boolean add(AnyTemplatePullTask template);\n \n-    AnyTemplatePullTask getTemplate(AnyType anyType);\n+    Optional<? extends AnyTemplatePullTask> getTemplate(AnyType anyType);\n \n     List<? extends AnyTemplatePullTask> getTemplates();\n }"},{"sha":"b5fa5045c496000cb9a1d0db61efd003e6917b73","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/PushTask.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPushTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPushTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPushTask.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.entity.task;\n \n import java.util.List;\n+import java.util.Optional;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n \n@@ -30,7 +31,7 @@ public interface PushTask extends ProvisioningTask {\n \n     boolean add(PushTaskAnyFilter filter);\n \n-    PushTaskAnyFilter getFilter(AnyType anyType);\n+    Optional<? extends PushTaskAnyFilter> getFilter(AnyType anyType);\n \n     List<? extends PushTaskAnyFilter> getFilters();\n }"},{"sha":"41b677e2cc30f44574f4855a0ee7b07774a6726d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n import org.apache.cxf.jaxrs.ext.search.ConditionType;\n import org.apache.cxf.jaxrs.ext.search.SearchBean;\n import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n@@ -69,11 +70,11 @@ private AttributeCond createAttributeCond(final String schema) {\n \n     private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n         String name = getRealPropertyName(sc.getStatement().getProperty());\n-        SpecialAttr specialAttrName = SpecialAttr.fromString(name);\n+        Optional<SpecialAttr> specialAttrName = SpecialAttr.fromString(name);\n \n         String value = SearchUtils.toSqlWildcardString(sc.getStatement().getValue().toString(), false).\n                 replaceAll(\"\\\\\\\\_\", \"_\");\n-        SpecialAttr specialAttrValue = SpecialAttr.fromString(value);\n+        Optional<SpecialAttr> specialAttrValue = SpecialAttr.fromString(value);\n \n         AttributeCond attributeCond = createAttributeCond(name);\n         attributeCond.setExpression(value);\n@@ -95,8 +96,8 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n         switch (ct) {\n             case EQUALS:\n             case NOT_EQUALS:\n-                if (specialAttrName == null) {\n-                    if (specialAttrValue != null && specialAttrValue == SpecialAttr.NULL) {\n+                if (!specialAttrName.isPresent()) {\n+                    if (specialAttrValue.isPresent() && specialAttrValue.get() == SpecialAttr.NULL) {\n                         attributeCond.setType(AttributeCond.Type.ISNULL);\n                         attributeCond.setExpression(null);\n                     } else if (value.indexOf('%') == -1) {\n@@ -111,7 +112,7 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n \n                     leaf = SearchCond.getLeafCond(attributeCond);\n                 } else {\n-                    switch (specialAttrName) {\n+                    switch (specialAttrName.get()) {\n                         case TYPE:\n                             AnyTypeCond typeCond = new AnyTypeCond();\n                             typeCond.setAnyTypeKey(value);\n@@ -213,11 +214,11 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n \n     private SearchCond visitCompount(final SearchCondition<SearchBean> sc) {\n         List<SearchCond> searchConds = new ArrayList<>();\n-        for (SearchCondition<SearchBean> searchCondition : sc.getSearchConditions()) {\n+        sc.getSearchConditions().forEach(searchCondition -> {\n             searchConds.add(searchCondition.getStatement() == null\n                     ? visitCompount(searchCondition)\n                     : visitPrimitive(searchCondition));\n-        }\n+        });\n \n         SearchCond compound;\n         switch (sc.getConditionType()) {"},{"sha":"0786351e0eda85d3417071d62ec8598d95e26b68","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/ContentLoaderHandler.java","status":"modified","additions":10,"deletions":16,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.content;\n \n import java.sql.ResultSet;\n-import java.sql.SQLException;\n import java.sql.Types;\n import java.text.ParseException;\n import java.util.HashMap;\n@@ -32,7 +31,6 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.dao.DataAccessException;\n import org.springframework.jdbc.core.JdbcTemplate;\n-import org.springframework.jdbc.core.ResultSetExtractor;\n import org.xml.sax.Attributes;\n import org.xml.sax.SAXException;\n import org.xml.sax.helpers.DefaultHandler;\n@@ -59,20 +57,16 @@ public ContentLoaderHandler(final DataSource dataSource, final String rootElemen\n     private Object[] getParameters(final String tableName, final Attributes attrs) {\n         JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n \n-        Map<String, Integer> colTypes = jdbcTemplate.query(\"SELECT * FROM \" + tableName + \" WHERE 0=1\",\n-                new ResultSetExtractor<Map<String, Integer>>() {\n-\n-            @Override\n-            public Map<String, Integer> extractData(final ResultSet rs) throws SQLException {\n-                Map<String, Integer> colTypes = new HashMap<>();\n-                for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {\n-                    colTypes.put(\n-                            rs.getMetaData().getColumnName(i).toUpperCase(),\n-                            rs.getMetaData().getColumnType(i));\n-                }\n-                return colTypes;\n-            }\n-        });\n+        Map<String, Integer> colTypes = jdbcTemplate.query(\n+                \"SELECT * FROM \" + tableName + \" WHERE 0=1\", (final ResultSet rs) -> {\n+                    Map<String, Integer> colTypes1 = new HashMap<>();\n+                    for (int i = 1; i <= rs.getMetaData().getColumnCount();\n+                    i++) {\n+                        colTypes1.\n+                                put(rs.getMetaData().getColumnName(i).toUpperCase(), rs.getMetaData().getColumnType(i));\n+                    }\n+                    return colTypes1;\n+                });\n \n         Object[] parameters = new Object[attrs.getLength()];\n         for (int i = 0; i < attrs.getLength(); i++) {"},{"sha":"c2adeea481e7e0dcef8f734af5b3176c284af6e8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -48,8 +48,6 @@\n import javax.xml.transform.sax.SAXTransformerFactory;\n import javax.xml.transform.sax.TransformerHandler;\n import javax.xml.transform.stream.StreamResult;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n@@ -97,13 +95,8 @@ public class XMLContentExporter extends AbstractContentDealer implements Content\n             Collections.singletonMap(\"SYNCOPEGROUP\", Collections.singleton(\"USEROWNER_ID\"));\n \n     private boolean isTableAllowed(final String tableName) {\n-        return IterableUtils.matchesAll(TABLE_PREFIXES_TO_BE_EXCLUDED, new Predicate<String>() {\n-\n-            @Override\n-            public boolean evaluate(final String prefix) {\n-                return !tableName.toUpperCase().startsWith(prefix.toUpperCase());\n-            }\n-        });\n+        return TABLE_PREFIXES_TO_BE_EXCLUDED.stream().\n+                allMatch(prefix -> !tableName.toUpperCase().startsWith(prefix.toUpperCase()));\n     }\n \n     private List<String> sortByForeignKeys(final String dbSchema, final Connection conn, final Set<String> tableNames)"},{"sha":"d883901c33fa6b46410ca2e9cf1f1481bb0aa6c9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":48,"deletions":53,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,7 +22,6 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -55,12 +54,9 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n@@ -236,12 +232,12 @@ public List<A> findByPlainAttrValue(final String schemaKey, final PlainAttrValue\n         query.setParameter(\"doubleValue\", attrValue.getDoubleValue());\n \n         List<A> result = new ArrayList<>();\n-        for (PlainAttrValue value : (List<PlainAttrValue>) query.getResultList()) {\n+        ((List<PlainAttrValue>) query.getResultList()).stream().forEach(value -> {\n             A any = (A) value.getAttr().getOwner();\n             if (!result.contains(any)) {\n                 result.add(any);\n             }\n-        }\n+        });\n \n         return result;\n     }\n@@ -318,23 +314,19 @@ private Set<String> getWhereClause(final String expression, final String value)\n         }\n \n         // Sort literals in order to process later literals included into others\n-        Collections.sort(literals, new Comparator<String>() {\n-\n-            @Override\n-            public int compare(final String t, final String t1) {\n-                if (t == null && t1 == null) {\n-                    return 0;\n-                } else if (t != null && t1 == null) {\n-                    return -1;\n-                } else if (t == null && t1 != null) {\n-                    return 1;\n-                } else if (t.length() == t1.length()) {\n-                    return 0;\n-                } else if (t.length() > t1.length()) {\n-                    return -1;\n-                } else {\n-                    return 1;\n-                }\n+        Collections.sort(literals, (final String t, final String t1) -> {\n+            if (t == null && t1 == null) {\n+                return 0;\n+            } else if (t != null && t1 == null) {\n+                return -1;\n+            } else if (t == null && t1 != null) {\n+                return 1;\n+            } else if (t.length() == t1.length()) {\n+                return 0;\n+            } else if (t.length() > t1.length()) {\n+                return -1;\n+            } else {\n+                return 1;\n             }\n         });\n \n@@ -483,37 +475,39 @@ public <S extends Schema> AllowedSchemas<S> findAllowedSchemas(final A any, fina\n         typeOwnClasses.addAll(any.getType().getClasses());\n         typeOwnClasses.addAll(any.getAuxClasses());\n \n-        for (AnyTypeClass typeClass : typeOwnClasses) {\n+        typeOwnClasses.forEach(typeClass -> {\n             if (reference.equals(PlainSchema.class)) {\n                 result.getForSelf().addAll((Collection<? extends S>) typeClass.getPlainSchemas());\n             } else if (reference.equals(DerSchema.class)) {\n                 result.getForSelf().addAll((Collection<? extends S>) typeClass.getDerSchemas());\n             } else if (reference.equals(VirSchema.class)) {\n                 result.getForSelf().addAll((Collection<? extends S>) typeClass.getVirSchemas());\n             }\n-        }\n+        });\n \n         // schemas given by type extensions\n         Map<Group, List<? extends AnyTypeClass>> typeExtensionClasses = new HashMap<>();\n         if (any instanceof User) {\n-            for (UMembership memb : ((User) any).getMemberships()) {\n-                for (TypeExtension typeExtension : memb.getRightEnd().getTypeExtensions()) {\n+            ((User) any).getMemberships().forEach(memb -> {\n+                memb.getRightEnd().getTypeExtensions().forEach(typeExtension -> {\n                     typeExtensionClasses.put(memb.getRightEnd(), typeExtension.getAuxClasses());\n-                }\n-            }\n+                });\n+            });\n         } else if (any instanceof AnyObject) {\n-            for (AMembership memb : ((AnyObject) any).getMemberships()) {\n-                for (TypeExtension typeExtension : memb.getRightEnd().getTypeExtensions()) {\n-                    if (any.getType().equals(typeExtension.getAnyType())) {\n-                        typeExtensionClasses.put(memb.getRightEnd(), typeExtension.getAuxClasses());\n-                    }\n-                }\n-            }\n+            ((AnyObject) any).getMemberships().forEach(memb -> {\n+                memb.getRightEnd().getTypeExtensions().stream().\n+                        filter(typeExtension -> any.getType().equals(typeExtension.getAnyType())).\n+                        forEachOrdered((typeExtension) -> {\n+                            typeExtensionClasses.put(memb.getRightEnd(), typeExtension.getAuxClasses());\n+                        });\n+            });\n         }\n \n-        for (Map.Entry<Group, List<? extends AnyTypeClass>> entry : typeExtensionClasses.entrySet()) {\n-            result.getForMemberships().put(entry.getKey(), new HashSet<S>());\n-            for (AnyTypeClass typeClass : entry.getValue()) {\n+        typeExtensionClasses.entrySet().stream().map(entry -> {\n+            result.getForMemberships().put(entry.getKey(), new HashSet<>());\n+            return entry;\n+        }).forEachOrdered((entry) -> {\n+            entry.getValue().forEach(typeClass -> {\n                 if (reference.equals(PlainSchema.class)) {\n                     result.getForMemberships().get(entry.getKey()).\n                             addAll((Collection<? extends S>) typeClass.getPlainSchemas());\n@@ -524,8 +518,8 @@ public <S extends Schema> AllowedSchemas<S> findAllowedSchemas(final A any, fina\n                     result.getForMemberships().get(entry.getKey()).\n                             addAll((Collection<? extends S>) typeClass.getVirSchemas());\n                 }\n-            }\n-        }\n+            });\n+        });\n \n         return result;\n     }\n@@ -547,24 +541,25 @@ public void delete(final String key) {\n \n     @Transactional(readOnly = true)\n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public List<String> findDynRealms(final String key) {\n         Query query = entityManager().createNativeQuery(\n                 \"SELECT dynRealm_id FROM \" + JPADynRealmDAO.DYNMEMB_TABLE + \" WHERE any_id=?\");\n         query.setParameter(1, key);\n \n         List<String> result = new ArrayList<>();\n-        for (Object resultKey : query.getResultList()) {\n-            String actualKey = resultKey instanceof Object[]\n-                    ? (String) ((Object[]) resultKey)[0]\n-                    : ((String) resultKey);\n-\n-            DynRealm dynRealm = dynRealmDAO().find(actualKey);\n-            if (dynRealm == null) {\n-                LOG.error(\"Could not find dynRealm with id {}, even though returned by the native query\", actualKey);\n-            } else if (!result.contains(actualKey)) {\n-                result.add(actualKey);\n-            }\n-        }\n+        query.getResultList().stream().map(resultKey -> resultKey instanceof Object[]\n+                ? (String) ((Object[]) resultKey)[0]\n+                : ((String) resultKey)).\n+                forEachOrdered((actualKey) -> {\n+                    DynRealm dynRealm = dynRealmDAO().find(actualKey.toString());\n+                    if (dynRealm == null) {\n+                        LOG.error(\"Could not find dynRealm with id {}, even though returned by the native query\",\n+                                actualKey);\n+                    } else if (!result.contains(actualKey.toString())) {\n+                        result.add(actualKey.toString());\n+                    }\n+                });\n         return result;\n     }\n "},{"sha":"f20a765265b4e3f44a9bd4ddf604166b1715e11a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":22,"deletions":28,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -25,12 +25,11 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.persistence.Entity;\n import javax.validation.ValidationException;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -100,15 +99,11 @@ public <T extends Any<?>> List<T> searchAssignable(final String realmFullPath, f\n     }\n \n     protected SearchCond buildEffectiveCond(final SearchCond cond, final Set<String> dynRealmKeys) {\n-        List<SearchCond> effectiveConds = CollectionUtils.collect(dynRealmKeys, new Transformer<String, SearchCond>() {\n-\n-            @Override\n-            public SearchCond transform(final String input) {\n-                DynRealmCond dynRealmCond = new DynRealmCond();\n-                dynRealmCond.setDynRealm(input);\n-                return SearchCond.getLeafCond(dynRealmCond);\n-            }\n-        }, new ArrayList<SearchCond>());\n+        List<SearchCond> effectiveConds = dynRealmKeys.stream().map(dynRealmKey -> {\n+            DynRealmCond dynRealmCond = new DynRealmCond();\n+            dynRealmCond.setDynRealm(dynRealmKey);\n+            return SearchCond.getLeafCond(dynRealmCond);\n+        }).collect(Collectors.toList());\n         effectiveConds.add(cond);\n \n         return SearchCond.getAndCond(effectiveConds);\n@@ -314,23 +309,22 @@ protected String check(final MemberCond cond) {\n     protected <T extends Any<?>> List<T> buildResult(final List<Object> raw, final AnyTypeKind kind) {\n         List<T> result = new ArrayList<>();\n \n-        for (Object anyKey : raw) {\n-            String actualKey = anyKey instanceof Object[]\n-                    ? (String) ((Object[]) anyKey)[0]\n-                    : ((String) anyKey);\n-\n-            @SuppressWarnings(\"unchecked\")\n-            T any = kind == AnyTypeKind.USER\n-                    ? (T) userDAO.find(actualKey)\n-                    : kind == AnyTypeKind.GROUP\n-                            ? (T) groupDAO.find(actualKey)\n-                            : (T) anyObjectDAO.find(actualKey);\n-            if (any == null) {\n-                LOG.error(\"Could not find {} with id {}, even if returned by native query\", kind, actualKey);\n-            } else if (!result.contains(any)) {\n-                result.add(any);\n-            }\n-        }\n+        raw.stream().map(anyKey -> anyKey instanceof Object[]\n+                ? (String) ((Object[]) anyKey)[0]\n+                : ((String) anyKey)).\n+                forEachOrdered((actualKey) -> {\n+                    @SuppressWarnings(\"unchecked\")\n+                    T any = kind == AnyTypeKind.USER\n+                            ? (T) userDAO.find(actualKey)\n+                            : kind == AnyTypeKind.GROUP\n+                                    ? (T) groupDAO.find(actualKey)\n+                                    : (T) anyObjectDAO.find(actualKey);\n+                    if (any == null) {\n+                        LOG.error(\"Could not find {} with id {}, even if returned by native query\", kind, actualKey);\n+                    } else if (!result.contains(any)) {\n+                        result.add(any);\n+                    }\n+                });\n \n         return result;\n     }"},{"sha":"c54517fb11bf71551c35f0af613fd486739bb971","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultAccountRule.java","status":"modified","additions":21,"deletions":26,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultAccountRule.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,15 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.List;\n import java.util.regex.Pattern;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n import org.apache.syncope.core.provisioning.api.utils.policy.AccountPolicyException;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.AccountRuleConfClass;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -47,15 +45,12 @@ public void enforce(final AccountRuleConf conf, final User user) {\n                     AccountRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n         }\n \n-        for (String schema : this.conf.getSchemasNotPermitted()) {\n-            PlainAttr<?> attr = user.getPlainAttr(schema);\n-            if (attr != null) {\n-                List<String> values = attr.getValuesAsStrings();\n-                if (values != null && !values.isEmpty()) {\n-                    this.conf.getWordsNotPermitted().add(values.get(0));\n-                }\n-            }\n-        }\n+        this.conf.getSchemasNotPermitted().stream().\n+                map(schema -> user.getPlainAttr(schema)).\n+                filter(attr -> attr.isPresent()).\n+                map(attr -> attr.get().getValuesAsStrings()).\n+                filter(values -> (values != null && !values.isEmpty())).\n+                forEachOrdered(values -> this.conf.getWordsNotPermitted().add(values.get(0)));\n \n         if (user.getUsername() == null) {\n             throw new AccountPolicyException(\"Invalid account\");\n@@ -72,11 +67,11 @@ public void enforce(final AccountRuleConf conf, final User user) {\n         }\n \n         // check words not permitted\n-        for (String word : this.conf.getWordsNotPermitted()) {\n-            if (StringUtils.containsIgnoreCase(user.getUsername(), word)) {\n-                throw new AccountPolicyException(\"Used word(s) not permitted\");\n-            }\n-        }\n+        this.conf.getWordsNotPermitted().stream().\n+                filter(word -> StringUtils.containsIgnoreCase(user.getUsername(), word)).\n+                forEachOrdered(item -> {\n+                    throw new AccountPolicyException(\"Used word(s) not permitted\");\n+                });\n \n         // check case\n         if (this.conf.isAllUpperCase() && !user.getUsername().equals(user.getUsername().toUpperCase())) {\n@@ -93,18 +88,18 @@ public void enforce(final AccountRuleConf conf, final User user) {\n         }\n \n         // check prefix\n-        for (String prefix : this.conf.getPrefixesNotPermitted()) {\n-            if (user.getUsername().startsWith(prefix)) {\n-                throw new AccountPolicyException(\"Prefix not permitted\");\n-            }\n-        }\n+        this.conf.getPrefixesNotPermitted().stream().\n+                filter(prefix -> user.getUsername().startsWith(prefix)).\n+                forEachOrdered(item -> {\n+                    throw new AccountPolicyException(\"Prefix not permitted\");\n+                });\n \n         // check suffix\n-        for (String suffix : this.conf.getSuffixesNotPermitted()) {\n-            if (user.getUsername().endsWith(suffix)) {\n-                throw new AccountPolicyException(\"Suffix not permitted\");\n-            }\n-        }\n+        this.conf.getSuffixesNotPermitted().stream().\n+                filter(suffix -> user.getUsername().endsWith(suffix)).\n+                forEachOrdered(item -> {\n+                    throw new AccountPolicyException(\"Suffix not permitted\");\n+                });\n     }\n \n }"},{"sha":"e3eeacdaed746b151003757a72a8ad729bb0df8d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPasswordRule.java","status":"modified","additions":21,"deletions":26,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPasswordRule.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,15 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.core.provisioning.api.utils.policy.PasswordPolicyException;\n import org.apache.syncope.core.provisioning.api.utils.policy.PolicyPattern;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRuleConfClass;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -45,15 +43,12 @@ public void enforce(final PasswordRuleConf conf, final User user) {\n                     PasswordRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n         }\n \n-        for (String schema : this.conf.getSchemasNotPermitted()) {\n-            PlainAttr<?> attr = user.getPlainAttr(schema);\n-            if (attr != null) {\n-                List<String> values = attr.getValuesAsStrings();\n-                if (values != null && !values.isEmpty()) {\n-                    this.conf.getWordsNotPermitted().add(values.get(0));\n-                }\n-            }\n-        }\n+        this.conf.getSchemasNotPermitted().stream().\n+                map(schema -> user.getPlainAttr(schema)).\n+                filter(attr -> attr.isPresent()).\n+                map(attr -> attr.get().getValuesAsStrings()).\n+                filter(values -> (values != null && !values.isEmpty())).\n+                forEachOrdered(values -> this.conf.getWordsNotPermitted().add(values.get(0)));\n \n         String clearPassword = user.getClearPassword();\n         String password = user.getPassword();\n@@ -69,11 +64,11 @@ public void enforce(final PasswordRuleConf conf, final User user) {\n             }\n \n             // check words not permitted\n-            for (String word : this.conf.getWordsNotPermitted()) {\n-                if (StringUtils.containsIgnoreCase(clearPassword, word)) {\n-                    throw new PasswordPolicyException(\"Used word(s) not permitted\");\n-                }\n-            }\n+            this.conf.getWordsNotPermitted().stream().\n+                    filter(word -> StringUtils.containsIgnoreCase(clearPassword, word)).\n+                    forEachOrdered(item -> {\n+                        throw new PasswordPolicyException(\"Used word(s) not permitted\");\n+                    });\n \n             // check digits occurrence\n             if (this.conf.isDigitRequired() && !checkDigit(clearPassword)) {\n@@ -91,18 +86,18 @@ public void enforce(final PasswordRuleConf conf, final User user) {\n             }\n \n             // check prefix\n-            for (String prefix : this.conf.getPrefixesNotPermitted()) {\n-                if (clearPassword.startsWith(prefix)) {\n-                    throw new PasswordPolicyException(\"Prefix not permitted\");\n-                }\n-            }\n+            this.conf.getPrefixesNotPermitted().stream().\n+                    filter(prefix -> clearPassword.startsWith(prefix)).\n+                    forEachOrdered(item -> {\n+                        throw new PasswordPolicyException(\"Prefix not permitted\");\n+                    });\n \n             // check suffix\n-            for (String suffix : this.conf.getSuffixesNotPermitted()) {\n-                if (clearPassword.endsWith(suffix)) {\n-                    throw new PasswordPolicyException(\"Suffix not permitted\");\n-                }\n-            }\n+            this.conf.getSuffixesNotPermitted().stream().\n+                    filter(suffix -> clearPassword.endsWith(suffix)).\n+                    forEachOrdered(item -> {\n+                        throw new PasswordPolicyException(\"Suffix not permitted\");\n+                    });\n \n             // check digit first occurrence\n             if (this.conf.isMustStartWithDigit() && !checkFirstDigit(clearPassword)) {"},{"sha":"a595389e7c1f09b83f548f21eb397de456d8154e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":41,"deletions":49,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -28,26 +28,20 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.SetUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.types.AnyEntitlement;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n-import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -141,17 +135,16 @@ public Map<String, Integer> countByRealm(final AnyType anyType) {\n \n     @Override\n     protected void securityChecks(final AnyObject anyObject) {\n-        Set<String> authRealms = SetUtils.emptyIfNull(\n-                AuthContextUtils.getAuthorizations().get(AnyEntitlement.READ.getFor(anyObject.getType().getKey())));\n-        boolean authorized = IterableUtils.matchesAny(authRealms, new Predicate<String>() {\n-\n-            @Override\n-            public boolean evaluate(final String realm) {\n-                return anyObject.getRealm().getFullPath().startsWith(realm);\n-            }\n-        });\n+        Map<String, Set<String>> authorizations = AuthContextUtils.getAuthorizations();\n+        Set<String> authRealms = authorizations.containsKey(AnyEntitlement.READ.getFor(anyObject.getType().getKey()))\n+                ? authorizations.get(AnyEntitlement.READ.getFor(anyObject.getType().getKey()))\n+                : Collections.emptySet();\n+        boolean authorized = authRealms.stream().\n+                anyMatch(realm -> anyObject.getRealm().getFullPath().startsWith(realm));\n         if (!authorized) {\n-            authorized = !CollectionUtils.intersection(findDynRealms(anyObject.getKey()), authRealms).isEmpty();\n+            authorized = findDynRealms(anyObject.getKey()).stream().\n+                    filter(dynRealm -> authRealms.contains(dynRealm)).\n+                    count() > 0;\n         }\n         if (authRealms.isEmpty() || !authorized) {\n             throw new DelegatedAdministrationException(\n@@ -236,18 +229,21 @@ public void delete(final AnyObject anyObject) {\n         groupDAO().removeDynMemberships(anyObject);\n         dynRealmDAO().removeDynMemberships(anyObject.getKey());\n \n-        for (ARelationship relationship : findARelationships(anyObject)) {\n+        findARelationships(anyObject).stream().map(relationship -> {\n             relationship.getLeftEnd().getRelationships().remove(relationship);\n+            return relationship;\n+        }).map(relationship -> {\n             save(relationship.getLeftEnd());\n+            return relationship;\n+        }).forEachOrdered(relationship -> entityManager().remove(relationship));\n \n-            entityManager().remove(relationship);\n-        }\n-        for (URelationship relationship : findURelationships(anyObject)) {\n+        findURelationships(anyObject).stream().map(relationship -> {\n             relationship.getLeftEnd().getRelationships().remove(relationship);\n+            return relationship;\n+        }).map(relationship -> {\n             userDAO().save(relationship.getLeftEnd());\n-\n-            entityManager().remove(relationship);\n-        }\n+            return relationship;\n+        }).forEachOrdered(relationship -> entityManager().remove(relationship));\n \n         entityManager().remove(anyObject);\n         publisher.publishEvent(\n@@ -256,63 +252,59 @@ public void delete(final AnyObject anyObject) {\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public List<Group> findDynGroups(final String key) {\n         Query query = entityManager().createNativeQuery(\n                 \"SELECT group_id FROM \" + JPAGroupDAO.ADYNMEMB_TABLE + \" WHERE any_id=?\");\n         query.setParameter(1, key);\n \n         List<Group> result = new ArrayList<>();\n-        for (Object resultKey : query.getResultList()) {\n-            String actualKey = resultKey instanceof Object[]\n-                    ? (String) ((Object[]) resultKey)[0]\n-                    : ((String) resultKey);\n-\n-            Group group = groupDAO().find(actualKey);\n-            if (group == null) {\n-                LOG.error(\"Could not find group with id {}, even though returned by the native query\", actualKey);\n-            } else if (!result.contains(group)) {\n-                result.add(group);\n-            }\n-        }\n+        query.getResultList().stream().map(resultKey -> resultKey instanceof Object[]\n+                ? (String) ((Object[]) resultKey)[0]\n+                : ((String) resultKey)).\n+                forEachOrdered(actualKey -> {\n+                    Group group = groupDAO().find(actualKey.toString());\n+                    if (group == null) {\n+                        LOG.error(\"Could not find group with id {}, even though returned by the native query\",\n+                                actualKey);\n+                    } else if (!result.contains(group)) {\n+                        result.add(group);\n+                    }\n+                });\n         return result;\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public Collection<Group> findAllGroups(final AnyObject anyObject) {\n-        return CollectionUtils.union(\n-                CollectionUtils.collect(anyObject.getMemberships(), new Transformer<AMembership, Group>() {\n+        Set<Group> result = new HashSet<>();\n+        result.addAll(anyObject.getMemberships().stream().\n+                map(membership -> membership.getRightEnd()).collect(Collectors.toSet()));\n+        result.addAll(findDynGroups(anyObject.getKey()));\n \n-                    @Override\n-                    public Group transform(final AMembership input) {\n-                        return input.getRightEnd();\n-                    }\n-                }, new ArrayList<Group>()),\n-                findDynGroups(anyObject.getKey()));\n+        return result;\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public Collection<String> findAllGroupKeys(final AnyObject anyObject) {\n-        return CollectionUtils.collect(findAllGroups(anyObject), EntityUtils.<Group>keyTransformer());\n+        return findAllGroups(anyObject).stream().map(group -> group.getKey()).collect(Collectors.toList());\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public Collection<ExternalResource> findAllResources(final AnyObject anyObject) {\n         Set<ExternalResource> result = new HashSet<>();\n         result.addAll(anyObject.getResources());\n-        for (Group group : findAllGroups(anyObject)) {\n-            result.addAll(group.getResources());\n-        }\n+        findAllGroups(anyObject).forEach(group -> result.addAll(group.getResources()));\n \n         return result;\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n     public Collection<String> findAllResourceKeys(final String key) {\n-        return CollectionUtils.collect(findAllResources(authFind(key)), EntityUtils.<ExternalResource>keyTransformer());\n+        return findAllResources(authFind(key)).stream().map(resource -> resource.getKey()).collect(Collectors.toList());\n     }\n \n }"},{"sha":"a7aae8137d256228a8e6262670e36e3b0c622e23","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -25,9 +25,9 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.persistence.Query;\n import javax.persistence.TemporalType;\n-import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n@@ -36,7 +36,6 @@\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n-import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -80,8 +79,8 @@ private Pair<String, Set<String>> getAdminRealmsFilter(\n                     noRealm.getElements().add(\"Invalid realm specified: \" + realmPath);\n                     throw noRealm;\n                 } else {\n-                    CollectionUtils.collect(\n-                            realmDAO.findDescendants(realm), EntityUtils.<Realm>keyTransformer(), realmKeys);\n+                    realmKeys.addAll(realmDAO.findDescendants(realm).stream().\n+                            map(r -> r.getKey()).collect(Collectors.toSet()));\n                 }\n             } else {\n                 DynRealm dynRealm = dynRealmDAO.find(realmPath);\n@@ -93,7 +92,8 @@ private Pair<String, Set<String>> getAdminRealmsFilter(\n             }\n         }\n         if (!dynRealmKeys.isEmpty()) {\n-            CollectionUtils.collect(realmDAO.findAll(), EntityUtils.keyTransformer(), realmKeys);\n+            realmKeys.addAll(realmDAO.findAll().stream().\n+                    map(r -> r.getKey()).collect(Collectors.toSet()));\n         }\n \n         StringBuilder adminRealmFilter = new StringBuilder(\"u.any_id IN (\")."},{"sha":"29d161ec7baef6527e8c017a90c57e5dc95d2b26","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java","status":"modified","additions":17,"deletions":16,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.Optional;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n@@ -45,35 +46,35 @@ public Conf get() {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public CPlainAttr find(final String key) {\n+    public Optional<? extends CPlainAttr> find(final String key) {\n         return get().getPlainAttr(key);\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n     public <T> T find(final String key, final T defaultValue) {\n-        CPlainAttr result = find(key);\n-        if (result == null) {\n+        Optional<? extends CPlainAttr> result = find(key);\n+        if (!result.isPresent()) {\n             return defaultValue;\n         }\n \n-        return result.getUniqueValue() == null\n-                ? result.getValues().isEmpty()\n+        return result.get().getUniqueValue() == null\n+                ? result.get().getValues().isEmpty()\n                 ? null\n-                : result.getValues().get(0).<T>getValue()\n-                : result.getUniqueValue().<T>getValue();\n+                : result.get().getValues().get(0).<T>getValue()\n+                : result.get().getUniqueValue().<T>getValue();\n     }\n \n     @Override\n     public Conf save(final CPlainAttr attr) {\n         Conf instance = get();\n \n-        CPlainAttr old = instance.getPlainAttr(attr.getSchema().getKey());\n-        if (old != null && (!attr.getSchema().isUniqueConstraint()\n-                || (!attr.getUniqueValue().getStringValue().equals(old.getUniqueValue().getStringValue())))) {\n+        Optional<? extends CPlainAttr> old = instance.getPlainAttr(attr.getSchema().getKey());\n+        if (old.isPresent() && (!attr.getSchema().isUniqueConstraint()\n+                || (!attr.getUniqueValue().getStringValue().equals(old.get().getUniqueValue().getStringValue())))) {\n \n-            old.setOwner(null);\n-            instance.remove(old);\n+            old.get().setOwner(null);\n+            instance.remove(old.get());\n         }\n \n         instance.add(attr);\n@@ -85,10 +86,10 @@ public Conf save(final CPlainAttr attr) {\n     @Override\n     public Conf delete(final String key) {\n         Conf instance = get();\n-        CPlainAttr attr = instance.getPlainAttr(key);\n-        if (attr != null) {\n-            attr.setOwner(null);\n-            instance.remove(attr);\n+        Optional<? extends CPlainAttr> attr = instance.getPlainAttr(key);\n+        if (attr.isPresent()) {\n+            attr.get().setOwner(null);\n+            instance.remove(attr.get());\n \n             instance = entityManager().merge(instance);\n         }"},{"sha":"88af8025c429378fb869366a77d9debc4f4baff9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConnInstanceDAO.java","status":"modified","additions":14,"deletions":39,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,23 +18,18 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n-import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.stream.Collectors;\n import javax.persistence.TypedQuery;\n-import org.apache.commons.collections4.Closure;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceHistoryConfDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.JPAConnInstance;\n import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n@@ -61,20 +56,15 @@ public ConnInstance find(final String key) {\n \n     @Override\n     public ConnInstance authFind(final String key) {\n-        final ConnInstance connInstance = find(key);\n+        ConnInstance connInstance = find(key);\n         if (connInstance == null) {\n             return null;\n         }\n \n-        final Set<String> authRealms = AuthContextUtils.getAuthorizations().get(StandardEntitlement.CONNECTOR_READ);\n+        Set<String> authRealms = AuthContextUtils.getAuthorizations().get(StandardEntitlement.CONNECTOR_READ);\n         if (authRealms == null || authRealms.isEmpty()\n-                || !IterableUtils.matchesAny(authRealms, new Predicate<String>() {\n-\n-                    @Override\n-                    public boolean evaluate(final String realm) {\n-                        return connInstance.getAdminRealm().getFullPath().startsWith(realm);\n-                    }\n-                })) {\n+                || !authRealms.stream().anyMatch(\n+                        realm -> connInstance.getAdminRealm().getFullPath().startsWith(realm))) {\n \n             throw new DelegatedAdministrationException(\n                     connInstance.getAdminRealm().getFullPath(),\n@@ -95,32 +85,22 @@ public List<ConnInstance> findAll() {\n         TypedQuery<ConnInstance> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAConnInstance.class.getSimpleName() + \" e\", ConnInstance.class);\n \n-        return CollectionUtils.select(query.getResultList(), new Predicate<ConnInstance>() {\n-\n-            @Override\n-            public boolean evaluate(final ConnInstance connInstance) {\n-                return IterableUtils.matchesAny(authRealms, new Predicate<String>() {\n-\n-                    @Override\n-                    public boolean evaluate(final String realm) {\n-                        return connInstance.getAdminRealm().getFullPath().startsWith(realm);\n-                    }\n-                });\n-            }\n-        }, new ArrayList<ConnInstance>());\n+        return query.getResultList().stream().filter(connInstance -> authRealms.stream().\n+                anyMatch(realm -> connInstance.getAdminRealm().getFullPath().startsWith(realm))).\n+                collect(Collectors.toList());\n     }\n \n     @Override\n     public ConnInstance save(final ConnInstance connector) {\n         final ConnInstance merged = entityManager().merge(connector);\n \n-        for (ExternalResource resource : merged.getResources()) {\n+        merged.getResources().forEach(resource -> {\n             try {\n                 connRegistry.registerConnector(resource);\n             } catch (NotFoundException e) {\n                 LOG.error(\"While registering connector for resource\", e);\n             }\n-        }\n+        });\n \n         return merged;\n     }\n@@ -132,14 +112,9 @@ public void delete(final String key) {\n             return;\n         }\n \n-        IterableUtils.forEach(new CopyOnWriteArrayList<>(connInstance.getResources()), new Closure<ExternalResource>() {\n-\n-            @Override\n-            public void execute(final ExternalResource input) {\n-                resourceDAO.delete(input.getKey());\n-            }\n-\n-        });\n+        connInstance.getResources().stream().\n+                map(Entity::getKey).collect(Collectors.toList()).\n+                forEach(resource -> resourceDAO.delete(resource));\n \n         connInstanceHistoryConfDAO.deleteByEntity(connInstance);\n "},{"sha":"5822a6eac8e68a3d22fbcb32efaf9142029cc434","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":36,"deletions":70,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,16 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n@@ -45,14 +42,9 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n-import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;\n@@ -174,21 +166,15 @@ public ExternalResource find(final String name) {\n \n     @Override\n     public ExternalResource authFind(final String key) {\n-        final ExternalResource resource = find(key);\n+        ExternalResource resource = find(key);\n         if (resource == null) {\n             return null;\n         }\n \n-        final Set<String> authRealms = AuthContextUtils.getAuthorizations().get(StandardEntitlement.RESOURCE_READ);\n+        Set<String> authRealms = AuthContextUtils.getAuthorizations().get(StandardEntitlement.RESOURCE_READ);\n         if (authRealms == null || authRealms.isEmpty()\n-                || !IterableUtils.matchesAny(authRealms, new Predicate<String>() {\n-\n-                    @Override\n-                    public boolean evaluate(final String realm) {\n-                        return resource.getConnector() != null\n-                                && resource.getConnector().getAdminRealm().getFullPath().startsWith(realm);\n-                    }\n-                })) {\n+                || !authRealms.stream().anyMatch(realm -> resource.getConnector() != null\n+                && resource.getConnector().getAdminRealm().getFullPath().startsWith(realm))) {\n \n             throw new DelegatedAdministrationException(\n                     resource.getConnector().getAdminRealm().getFullPath(),\n@@ -243,20 +229,10 @@ public List<ExternalResource> findAll() {\n         TypedQuery<ExternalResource> query = entityManager().createQuery(\n                 \"SELECT e FROM  \" + JPAExternalResource.class.getSimpleName() + \" e\", ExternalResource.class);\n \n-        return CollectionUtils.select(query.getResultList(), new Predicate<ExternalResource>() {\n-\n-            @Override\n-            public boolean evaluate(final ExternalResource resource) {\n-                return IterableUtils.matchesAny(authRealms, new Predicate<String>() {\n-\n-                    @Override\n-                    public boolean evaluate(final String realm) {\n-                        return resource.getConnector() != null\n-                                && resource.getConnector().getAdminRealm().getFullPath().startsWith(realm);\n-                    }\n-                });\n-            }\n-        }, new ArrayList<ExternalResource>());\n+        return query.getResultList().stream().filter(resource -> authRealms.stream().\n+                anyMatch(realm -> resource.getConnector() != null\n+                && resource.getConnector().getAdminRealm().getFullPath().startsWith(realm))).\n+                collect(Collectors.toList());\n     }\n \n     @Override\n@@ -280,18 +256,15 @@ public void deleteMapping(final String intAttrName) {\n         query.setParameter(\"intAttrName\", intAttrName);\n \n         Set<String> itemKeys = new HashSet<>();\n-        for (MappingItem item : query.getResultList()) {\n-            itemKeys.add(item.getKey());\n-        }\n-        for (String itemKey : itemKeys) {\n-            MappingItem item = entityManager().find(JPAMappingItem.class, itemKey);\n-            if (item != null) {\n-                item.getMapping().getItems().remove(item);\n-                item.setMapping(null);\n-\n-                entityManager().remove(item);\n-            }\n-        }\n+        query.getResultList().forEach(item -> itemKeys.add(item.getKey()));\n+        itemKeys.stream().map(itemKey -> entityManager().find(JPAMappingItem.class, itemKey)).\n+                filter(item -> item != null).map(item -> {\n+            item.getMapping().getItems().remove(item);\n+            return item;\n+        }).map(item -> {\n+            item.setMapping(null);\n+            return item;\n+        }).forEachOrdered(item -> entityManager().remove(item));\n \n         // Make empty query cache for *MappingItem and related *Mapping\n         entityManager().getEntityManagerFactory().getCache().evict(JPAMappingItem.class);\n@@ -309,34 +282,27 @@ public void delete(final String name) {\n         taskDAO().deleteAll(resource, TaskType.PULL);\n         taskDAO().deleteAll(resource, TaskType.PUSH);\n \n-        for (Realm realm : realmDAO().findByResource(resource)) {\n-            realm.getResources().remove(resource);\n-        }\n-        for (AnyObject anyObject : anyObjectDAO().findByResource(resource)) {\n-            anyObject.getResources().remove(resource);\n-        }\n-        for (User user : userDAO().findByResource(resource)) {\n-            user.getResources().remove(resource);\n-        }\n-        for (Group group : groupDAO().findByResource(resource)) {\n-            group.getResources().remove(resource);\n-        }\n-        for (AccountPolicy policy : policyDAO().findByResource(resource)) {\n-            policy.getResources().remove(resource);\n-        }\n-\n-        for (Provision provision : resource.getProvisions()) {\n-            for (MappingItem item : provision.getMapping().getItems()) {\n-                item.setMapping(null);\n-            }\n+        realmDAO().findByResource(resource).\n+                forEach(realm -> realm.getResources().remove(resource));\n+        anyObjectDAO().findByResource(resource).\n+                forEach(anyObject -> anyObject.getResources().remove(resource));\n+        userDAO().findByResource(resource).\n+                forEach(user -> user.getResources().remove(resource));\n+        groupDAO().findByResource(resource).\n+                forEach(group -> group.getResources().remove(resource));\n+        policyDAO().findByResource(resource).\n+                forEach(policy -> policy.getResources().remove(resource));\n+\n+        resource.getProvisions().stream().map(provision -> {\n+            provision.getMapping().getItems().forEach(item -> item.setMapping(null));\n+            return provision;\n+        }).map(provision -> {\n             provision.getMapping().getItems().clear();\n             provision.setMapping(null);\n             provision.setResource(null);\n-\n-            for (VirSchema schema : virSchemaDAO().findByProvision(provision)) {\n-                virSchemaDAO().delete(schema.getKey());\n-            }\n-        }\n+            return provision;\n+        }).forEachOrdered(provision -> virSchemaDAO().findByProvision(provision).\n+                forEach(schema -> virSchemaDAO().delete(schema.getKey())));\n \n         externalResourceHistoryConfDAO().deleteByEntity(resource);\n "},{"sha":"170915c74e38e9b11f9db42a3df67965e9e2394e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":61,"deletions":72,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -26,13 +26,10 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.SetUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -52,15 +49,14 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership;\n@@ -69,7 +65,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n-import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.aop.support.AopUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -177,20 +172,18 @@ public Map<String, Integer> countByRealm() {\n \n     @Override\n     protected void securityChecks(final Group group) {\n-        Set<String> authRealms = SetUtils.emptyIfNull(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_READ));\n-        boolean authorized = IterableUtils.matchesAny(authRealms, new Predicate<String>() {\n-\n-            @Override\n-            public boolean evaluate(final String realm) {\n-                return group.getRealm().getFullPath().startsWith(realm)\n-                        || realm.equals(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey()));\n-            }\n-        });\n+        Map<String, Set<String>> authorizations = AuthContextUtils.getAuthorizations();\n+        Set<String> authRealms = authorizations.containsKey(StandardEntitlement.GROUP_READ)\n+                ? authorizations.get(StandardEntitlement.GROUP_READ)\n+                : Collections.emptySet();\n+\n+        boolean authorized = authRealms.stream().anyMatch(realm -> group.getRealm().getFullPath().startsWith(realm)\n+                || realm.equals(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey())));\n         if (!authorized) {\n-            authorized = !CollectionUtils.intersection(findDynRealms(group.getKey()), authRealms).isEmpty();\n+            authorized = findDynRealms(group.getKey()).stream().\n+                    filter(dynRealm -> authRealms.contains(dynRealm)).\n+                    count() > 0;\n         }\n-\n         if (authRealms.isEmpty() || !authorized) {\n             throw new DelegatedAdministrationException(\n                     group.getRealm().getFullPath(), AnyTypeKind.GROUP.name(), group.getKey());\n@@ -299,32 +292,32 @@ public Group save(final Group group) {\n \n             clearUDynMembers(merged);\n \n-            for (User user : matching) {\n+            matching.forEach(user -> {\n                 Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + UDYNMEMB_TABLE + \" VALUES(?, ?)\");\n                 insert.setParameter(1, user.getKey());\n                 insert.setParameter(2, merged.getKey());\n                 insert.executeUpdate();\n \n                 publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, user, AuthContextUtils.getDomain()));\n-            }\n+            });\n         }\n-        for (ADynGroupMembership memb : merged.getADynMemberships()) {\n-            List<AnyObject> matching = searchDAO().search(\n-                    buildDynMembershipCond(memb.getFIQLCond(), merged.getRealm()),\n-                    AnyTypeKind.ANY_OBJECT);\n-\n+        merged.getADynMemberships().stream().map(memb -> searchDAO().search(\n+                buildDynMembershipCond(memb.getFIQLCond(), merged.getRealm()),\n+                AnyTypeKind.ANY_OBJECT)).forEachOrdered(matching -> {\n             clearADynMembers(merged);\n \n-            for (AnyObject anyObject : matching) {\n-                Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + ADYNMEMB_TABLE + \" VALUES(?, ?, ?)\");\n+            matching.forEach(anyObject -> {\n+                Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + ADYNMEMB_TABLE\n+                        + \" VALUES(?, ?, ?)\");\n                 insert.setParameter(1, anyObject.getType().getKey());\n                 insert.setParameter(2, anyObject.getKey());\n                 insert.setParameter(3, merged.getKey());\n                 insert.executeUpdate();\n \n-                publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, anyObject, AuthContextUtils.getDomain()));\n-            }\n-        }\n+                publisher.publishEvent(\n+                        new AnyCreatedUpdatedEvent<>(this, anyObject, AuthContextUtils.getDomain()));\n+            });\n+        });\n \n         dynRealmDAO().refreshDynMemberships(merged);\n \n@@ -335,34 +328,35 @@ public Group save(final Group group) {\n     public void delete(final Group group) {\n         dynRealmDAO().removeDynMemberships(group.getKey());\n \n-        for (AMembership membership : findAMemberships(group)) {\n+        findAMemberships(group).forEach(membership -> {\n             AnyObject leftEnd = membership.getLeftEnd();\n             leftEnd.getMemberships().remove(membership);\n             membership.setRightEnd(null);\n-            for (APlainAttr attr : leftEnd.getPlainAttrs(membership)) {\n+            leftEnd.getPlainAttrs(membership).stream().map(attr -> {\n                 leftEnd.remove(attr);\n                 attr.setOwner(null);\n                 attr.setMembership(null);\n-                plainAttrDAO.delete(attr);\n-            }\n+                return attr;\n+            }).forEachOrdered(attr -> plainAttrDAO.delete(attr));\n \n             anyObjectDAO().save(leftEnd);\n             publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, leftEnd, AuthContextUtils.getDomain()));\n-        }\n-        for (UMembership membership : findUMemberships(group)) {\n+        });\n+\n+        findUMemberships(group).forEach(membership -> {\n             User leftEnd = membership.getLeftEnd();\n             leftEnd.getMemberships().remove(membership);\n             membership.setRightEnd(null);\n-            for (UPlainAttr attr : leftEnd.getPlainAttrs(membership)) {\n+            leftEnd.getPlainAttrs(membership).stream().map(attr -> {\n                 leftEnd.remove(attr);\n                 attr.setOwner(null);\n                 attr.setMembership(null);\n-                plainAttrDAO.delete(attr);\n-            }\n+                return attr;\n+            }).forEachOrdered(attr -> plainAttrDAO.delete(attr));\n \n             userDAO().save(leftEnd);\n             publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, leftEnd, AuthContextUtils.getDomain()));\n-        }\n+        });\n \n         clearUDynMembers(group);\n         clearADynMembers(group);\n@@ -383,22 +377,22 @@ public List<TypeExtension> findTypeExtensions(final AnyTypeClass anyTypeClass) {\n     }\n \n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public List<String> findADynMembers(final Group group) {\n         List<String> result = new ArrayList<>();\n-        for (ADynGroupMembership memb : group.getADynMemberships()) {\n+        group.getADynMemberships().stream().map(memb -> {\n             Query query = entityManager().createNativeQuery(\n                     \"SELECT any_id FROM \" + ADYNMEMB_TABLE + \" WHERE group_id=? AND anyType_id=?\");\n             query.setParameter(1, group.getKey());\n             query.setParameter(2, memb.getAnyType().getKey());\n+            return query;\n+        }).forEachOrdered((query) -> {\n+            query.getResultList().stream().map(key -> key instanceof Object[]\n+                    ? (String) ((Object[]) key)[0]\n+                    : ((String) key)).\n+                    forEachOrdered(actualKey -> result.add(actualKey.toString()));\n+        });\n \n-            for (Object key : query.getResultList()) {\n-                String actualKey = key instanceof Object[]\n-                        ? (String) ((Object[]) key)[0]\n-                        : ((String) key);\n-\n-                result.add(actualKey);\n-            }\n-        }\n         return result;\n     }\n \n@@ -420,13 +414,12 @@ private List<ADynGroupMembership> findWithADynMemberships(final AnyType anyType)\n     @Transactional\n     @Override\n     public void refreshDynMemberships(final AnyObject anyObject) {\n-        for (ADynGroupMembership memb : findWithADynMemberships(anyObject.getType())) {\n+        findWithADynMemberships(anyObject.getType()).stream().map(memb -> {\n             Query delete = entityManager().createNativeQuery(\n                     \"DELETE FROM \" + ADYNMEMB_TABLE + \" WHERE group_id=? AND any_id=?\");\n             delete.setParameter(1, memb.getGroup().getKey());\n             delete.setParameter(2, anyObject.getKey());\n             delete.executeUpdate();\n-\n             if (jpaAnySearchDAO().matches(\n                     anyObject,\n                     buildDynMembershipCond(memb.getFIQLCond(), memb.getGroup().getRealm()))) {\n@@ -438,9 +431,9 @@ public void refreshDynMemberships(final AnyObject anyObject) {\n                 insert.setParameter(3, memb.getGroup().getKey());\n                 insert.executeUpdate();\n             }\n-\n-            publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, memb.getGroup(), AuthContextUtils.getDomain()));\n-        }\n+            return memb;\n+        }).forEachOrdered(memb -> publisher.publishEvent(\n+                new AnyCreatedUpdatedEvent<>(this, memb.getGroup(), AuthContextUtils.getDomain())));\n     }\n \n     @Override\n@@ -451,12 +444,13 @@ public void removeDynMemberships(final AnyObject anyObject) {\n         delete.setParameter(1, anyObject.getKey());\n         delete.executeUpdate();\n \n-        for (Group group : dynGroups) {\n+        dynGroups.forEach(group -> {\n             publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, group, AuthContextUtils.getDomain()));\n-        }\n+        });\n     }\n \n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public List<String> findUDynMembers(final Group group) {\n         if (group.getUDynMembership() == null) {\n             return Collections.emptyList();\n@@ -467,13 +461,9 @@ public List<String> findUDynMembers(final Group group) {\n         query.setParameter(1, group.getKey());\n \n         List<String> result = new ArrayList<>();\n-        for (Object key : query.getResultList()) {\n-            String actualKey = key instanceof Object[]\n-                    ? (String) ((Object[]) key)[0]\n-                    : ((String) key);\n-\n-            result.add(actualKey);\n-        }\n+        query.getResultList().stream().map(key -> key instanceof Object[]\n+                ? (String) ((Object[]) key)[0]\n+                : ((String) key)).forEachOrdered(actualKey -> result.add(actualKey.toString()));\n         return result;\n     }\n \n@@ -495,13 +485,12 @@ private List<UDynGroupMembership> findWithUDynMemberships() {\n     @Transactional\n     @Override\n     public void refreshDynMemberships(final User user) {\n-        for (UDynGroupMembership memb : findWithUDynMemberships()) {\n+        findWithUDynMemberships().stream().map(memb -> {\n             Query delete = entityManager().createNativeQuery(\n                     \"DELETE FROM \" + UDYNMEMB_TABLE + \" WHERE group_id=? AND any_id=?\");\n             delete.setParameter(1, memb.getGroup().getKey());\n             delete.setParameter(2, user.getKey());\n             delete.executeUpdate();\n-\n             if (jpaAnySearchDAO().matches(\n                     user,\n                     buildDynMembershipCond(memb.getFIQLCond(), memb.getGroup().getRealm()))) {\n@@ -512,9 +501,9 @@ public void refreshDynMemberships(final User user) {\n                 insert.setParameter(2, memb.getGroup().getKey());\n                 insert.executeUpdate();\n             }\n-\n-            publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, memb.getGroup(), AuthContextUtils.getDomain()));\n-        }\n+            return memb;\n+        }).forEachOrdered(memb -> publisher.publishEvent(\n+                new AnyCreatedUpdatedEvent<>(this, memb.getGroup(), AuthContextUtils.getDomain())));\n     }\n \n     @Override\n@@ -525,14 +514,14 @@ public void removeDynMemberships(final User user) {\n         delete.setParameter(1, user.getKey());\n         delete.executeUpdate();\n \n-        for (Group group : dynGroups) {\n+        dynGroups.forEach(group -> {\n             publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, group, AuthContextUtils.getDomain()));\n-        }\n+        });\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n     public Collection<String> findAllResourceKeys(final String key) {\n-        return CollectionUtils.collect(find(key).getResources(), EntityUtils.keyTransformer());\n+        return find(key).getResources().stream().map(Entity::getKey).collect(Collectors.toList());\n     }\n }"},{"sha":"ca5f0c4430c44be2c57eadebb6115ebb6214b094","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPANotificationDAO.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,15 +21,13 @@\n import java.util.Collections;\n import java.util.List;\n import javax.persistence.TypedQuery;\n-import org.apache.commons.collections4.Closure;\n-import org.apache.commons.collections4.IterableUtils;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n-import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.jpa.entity.JPANotification;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n@@ -77,15 +75,9 @@ public void delete(final String key) {\n             return;\n         }\n \n-        IterableUtils.forEach(taskDAO.findAll(\n-                TaskType.NOTIFICATION, null, notification, null, null, -1, -1, Collections.<OrderByClause>emptyList()),\n-                new Closure<Task>() {\n-\n-            @Override\n-            public void execute(final Task input) {\n-                delete(input.getKey());\n-            }\n-        });\n+        taskDAO.findAll(\n+                TaskType.NOTIFICATION, null, notification, null, null, -1, -1, Collections.<OrderByClause>emptyList()).\n+                stream().map(Entity::getKey).forEach(task -> delete(task));\n \n         entityManager().remove(notification);\n     }"},{"sha":"a03451f7154e2119b451fd59876ee1dbee6399ed","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":16,"deletions":22,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,10 +21,9 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Optional;\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n@@ -33,7 +32,6 @@\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -87,14 +85,11 @@ public Realm findByFullPath(final String fullPath) {\n \n         Realm current = root;\n         for (final String pathElement : fullPath.substring(1).split(\"/\")) {\n-            current = IterableUtils.find(findChildren(current), new Predicate<Realm>() {\n-\n-                @Override\n-                public boolean evaluate(final Realm realm) {\n-                    return pathElement.equals(realm.getName());\n-                }\n-            });\n-            if (current == null) {\n+            Optional<Realm> first = findChildren(current).stream().\n+                    filter(realm -> pathElement.equals(realm.getName())).findFirst();\n+            if (first.isPresent()) {\n+                current = first.get();\n+            } else {\n                 return null;\n             }\n         }\n@@ -148,10 +143,11 @@ public <T extends Policy> List<Realm> findByPolicy(final T policy) {\n         query.setParameter(\"policy\", policy);\n \n         List<Realm> result = new ArrayList<>();\n-        for (Realm realm : query.getResultList()) {\n+        query.getResultList().stream().map(realm -> {\n             result.add(realm);\n-            result.addAll(findSamePolicyChildren(realm, policy));\n-        }\n+            return realm;\n+        }).forEachOrdered(realm -> result.addAll(findSamePolicyChildren(realm, policy)));\n+\n         return result;\n     }\n \n@@ -209,15 +205,13 @@ public Realm save(final Realm realm) {\n \n     @Override\n     public void delete(final Realm realm) {\n-        for (Realm toBeDeleted : findDescendants(realm)) {\n-            for (Role role : roleDAO.findByRealm(toBeDeleted)) {\n-                role.getRealms().remove(toBeDeleted);\n-            }\n-\n+        findDescendants(realm).stream().map(toBeDeleted -> {\n+            roleDAO.findByRealm(toBeDeleted).forEach(role -> role.getRealms().remove(toBeDeleted));\n+            return toBeDeleted;\n+        }).map(toBeDeleted -> {\n             toBeDeleted.setParent(null);\n-\n-            entityManager().remove(toBeDeleted);\n-        }\n+            return toBeDeleted;\n+        }).forEachOrdered(toBeDeleted -> entityManager().remove(toBeDeleted));\n     }\n \n     @Override"},{"sha":"fd1f73124f1d22227e2288f6accfaa800e0c6c8d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARelationshipTypeDAO.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARelationshipTypeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARelationshipTypeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARelationshipTypeDAO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n import javax.persistence.TypedQuery;\n-import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.core.persistence.api.dao.RelationshipTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.Relationship;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n@@ -64,7 +64,11 @@ public RelationshipType save(final RelationshipType anyType) {\n                 URelationship.class);\n         uquery.setParameter(\"type\", type);\n \n-        return CollectionUtils.union(aquery.getResultList(), uquery.getResultList());\n+        List<Relationship<?, ?>> result = new ArrayList<>();\n+        result.addAll(aquery.getResultList());\n+        result.addAll(uquery.getResultList());\n+\n+        return result;\n     }\n \n     @Override\n@@ -74,7 +78,7 @@ public void delete(final String key) {\n             return;\n         }\n \n-        for (Relationship<?, ?> relationship : findRelationshipsByType(type)) {\n+        findRelationshipsByType(type).stream().map(relationship -> {\n             if (relationship instanceof URelationship) {\n                 ((URelationship) relationship).getLeftEnd().getRelationships().remove((URelationship) relationship);\n             } else if (relationship instanceof UMembership) {\n@@ -84,10 +88,9 @@ public void delete(final String key) {\n             } else if (relationship instanceof AMembership) {\n                 ((AMembership) relationship).getLeftEnd().getMemberships().remove((AMembership) relationship);\n             }\n-\n             relationship.setLeftEnd(null);\n-            entityManager().remove(relationship);\n-        }\n+            return relationship;\n+        }).forEachOrdered(relationship -> entityManager().remove(relationship));\n \n         entityManager().remove(type);\n     }"},{"sha":"55ca24144e944bc4acf6d0f99bdc84744a02db59","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":5,"deletions":13,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,13 +21,12 @@\n import java.util.Collections;\n import java.util.List;\n import javax.persistence.Query;\n-import org.apache.commons.collections4.Closure;\n-import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n@@ -164,12 +163,12 @@ private String toOrderByStatement(\n \n         StringBuilder statement = new StringBuilder();\n \n-        for (OrderByClause clause : orderByClauses) {\n+        orderByClauses.forEach(clause -> {\n             String field = clause.getField().trim();\n             if (ReflectionUtils.findField(beanClass, field) != null) {\n                 statement.append(\"t.\").append(field).append(' ').append(clause.getDirection().name());\n             }\n-        }\n+        });\n \n         if (statement.length() == 0) {\n             statement.append(\"ORDER BY t.id DESC\");\n@@ -264,14 +263,7 @@ public void delete(final Task task) {\n \n     @Override\n     public void deleteAll(final ExternalResource resource, final TaskType type) {\n-        IterableUtils.forEach(\n-                findAll(type, resource, null, null, null, -1, -1, Collections.<OrderByClause>emptyList()),\n-                new Closure<Task>() {\n-\n-            @Override\n-            public void execute(final Task input) {\n-                delete(input.getKey());\n-            }\n-        });\n+        findAll(type, resource, null, null, null, -1, -1, Collections.<OrderByClause>emptyList()).\n+                stream().map(Entity::getKey).forEach(task -> delete(task));\n     }\n }"},{"sha":"02281fad8c4fa28bdf819f800647e887699d0c0c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":64,"deletions":81,"changes":145,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -28,20 +28,14 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n import javax.annotation.Resource;\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.SetUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.policy.AccountRuleConf;\n-import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n@@ -61,20 +55,19 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n-import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n-import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.stereotype.Repository;\n@@ -185,17 +178,16 @@ protected void securityChecks(final User user) {\n         if (!AuthContextUtils.getUsername().equals(anonymousUser)\n                 && !AuthContextUtils.getUsername().equals(user.getUsername())) {\n \n-            Set<String> authRealms = SetUtils.emptyIfNull(\n-                    AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_READ));\n-            boolean authorized = IterableUtils.matchesAny(authRealms, new Predicate<String>() {\n-\n-                @Override\n-                public boolean evaluate(final String realm) {\n-                    return user.getRealm().getFullPath().startsWith(realm);\n-                }\n-            });\n+            Map<String, Set<String>> authorizations = AuthContextUtils.getAuthorizations();\n+            Set<String> authRealms = authorizations.containsKey(StandardEntitlement.USER_READ)\n+                    ? authorizations.get(StandardEntitlement.USER_READ)\n+                    : Collections.emptySet();\n+            boolean authorized = authRealms.stream().\n+                    anyMatch(realm -> user.getRealm().getFullPath().startsWith(realm));\n             if (!authorized) {\n-                authorized = !CollectionUtils.intersection(findDynRealms(user.getKey()), authRealms).isEmpty();\n+                authorized = findDynRealms(user.getKey()).stream().\n+                        filter(dynRealm -> authRealms.contains(dynRealm)).\n+                        count() > 0;\n             }\n             if (authRealms.isEmpty() || !authorized) {\n                 throw new DelegatedAdministrationException(\n@@ -282,21 +274,17 @@ public List<User> findAll(final int page, final int itemsPerPage) {\n     private List<AccountPolicy> getAccountPolicies(final User user) {\n         List<AccountPolicy> policies = new ArrayList<>();\n \n-        // add resource policies        \n-        for (ExternalResource resource : findAllResources(user)) {\n-            AccountPolicy policy = resource.getAccountPolicy();\n-            if (policy != null) {\n-                policies.add(policy);\n-            }\n-        }\n+        // add resource policies\n+        findAllResources(user).stream().\n+                map(resource -> resource.getAccountPolicy()).\n+                filter(policy -> policy != null).\n+                forEachOrdered(policy -> policies.add(policy));\n \n         // add realm policies\n-        for (Realm realm : realmDAO().findAncestors(user.getRealm())) {\n-            AccountPolicy policy = realm.getAccountPolicy();\n-            if (policy != null) {\n-                policies.add(policy);\n-            }\n-        }\n+        realmDAO().findAncestors(user.getRealm()).stream().\n+                map(realm -> realm.getAccountPolicy()).\n+                filter(policy -> policy != null).\n+                forEachOrdered(policy -> policies.add(policy));\n \n         return policies;\n     }\n@@ -316,7 +304,7 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n                     throw new PasswordPolicyException(\"Password mandatory\");\n                 }\n \n-                for (PasswordRuleConf ruleConf : policy.getRuleConfs()) {\n+                policy.getRuleConfs().forEach(ruleConf -> {\n                     Class<? extends PasswordRule> ruleClass =\n                             implementationLookup.getPasswordRuleClass(ruleConf.getClass());\n                     if (ruleClass == null) {\n@@ -337,7 +325,7 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n                         // enforce rule\n                         rule.enforce(ruleConf, user);\n                     }\n-                }\n+                });\n \n                 if (user.verifyPasswordHistory(user.getClearPassword(), policy.getHistoryLength())) {\n                     throw new PasswordPolicyException(\"Password value was used in the past: not allowed\");\n@@ -384,7 +372,7 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n             }\n \n             for (AccountPolicy policy : getAccountPolicies(user)) {\n-                for (AccountRuleConf ruleConf : policy.getRuleConfs()) {\n+                policy.getRuleConfs().forEach(ruleConf -> {\n                     Class<? extends AccountRule> ruleClass =\n                             implementationLookup.getAccountRuleClass(ruleConf.getClass());\n                     if (ruleClass == null) {\n@@ -405,7 +393,7 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n                         // enforce rule\n                         rule.enforce(ruleConf, user);\n                     }\n-                }\n+                });\n \n                 suspend |= user.getFailedLogins() != null && policy.getMaxAuthenticationAttempts() > 0\n                         && user.getFailedLogins() > policy.getMaxAuthenticationAttempts() && !user.isSuspended();\n@@ -467,103 +455,98 @@ public void delete(final User user) {\n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public Collection<Role> findAllRoles(final User user) {\n-        return CollectionUtils.union(user.getRoles(), findDynRoles(user.getKey()));\n+        Set<Role> result = new HashSet<>();\n+        result.addAll(user.getRoles());\n+        result.addAll(findDynRoles(user.getKey()));\n+\n+        return result;\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public List<Role> findDynRoles(final String key) {\n         Query query = entityManager().createNativeQuery(\n                 \"SELECT role_id FROM \" + JPARoleDAO.DYNMEMB_TABLE + \" WHERE any_id=?\");\n         query.setParameter(1, key);\n \n         List<Role> result = new ArrayList<>();\n-        for (Object resultKey : query.getResultList()) {\n-            String actualKey = resultKey instanceof Object[]\n-                    ? (String) ((Object[]) resultKey)[0]\n-                    : ((String) resultKey);\n-\n-            Role role = roleDAO.find(actualKey);\n-            if (role == null) {\n-                LOG.error(\"Could not find role with id {}, even though returned by the native query\", actualKey);\n-            } else if (!result.contains(role)) {\n-                result.add(role);\n-            }\n-        }\n+        query.getResultList().stream().map(resultKey -> resultKey instanceof Object[]\n+                ? (String) ((Object[]) resultKey)[0]\n+                : ((String) resultKey)).\n+                forEachOrdered(actualKey -> {\n+                    Role role = roleDAO.find(actualKey.toString());\n+                    if (role == null) {\n+                        LOG.error(\"Could not find role with id {}, even though returned by the native query\",\n+                                actualKey);\n+                    } else if (!result.contains(role)) {\n+                        result.add(role);\n+                    }\n+                });\n         return result;\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public List<Group> findDynGroups(final String key) {\n         Query query = entityManager().createNativeQuery(\n                 \"SELECT group_id FROM \" + JPAGroupDAO.UDYNMEMB_TABLE + \" WHERE any_id=?\");\n         query.setParameter(1, key);\n \n         List<Group> result = new ArrayList<>();\n-        for (Object resultKey : query.getResultList()) {\n-            String actualKey = resultKey instanceof Object[]\n-                    ? (String) ((Object[]) resultKey)[0]\n-                    : ((String) resultKey);\n-\n-            Group group = groupDAO().find(actualKey);\n-            if (group == null) {\n-                LOG.error(\"Could not find group with id {}, even though returned by the native query\", actualKey);\n-            } else if (!result.contains(group)) {\n-                result.add(group);\n-            }\n-        }\n+        query.getResultList().stream().map(resultKey -> resultKey instanceof Object[]\n+                ? (String) ((Object[]) resultKey)[0]\n+                : ((String) resultKey)).\n+                forEachOrdered(actualKey -> {\n+                    Group group = groupDAO().find(actualKey.toString());\n+                    if (group == null) {\n+                        LOG.error(\"Could not find group with id {}, even though returned by the native query\",\n+                                actualKey);\n+                    } else if (!result.contains(group)) {\n+                        result.add(group);\n+                    }\n+                });\n         return result;\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public Collection<Group> findAllGroups(final User user) {\n-        return CollectionUtils.union(\n-                CollectionUtils.collect(user.getMemberships(), new Transformer<UMembership, Group>() {\n+        Set<Group> result = new HashSet<>();\n+        result.addAll(user.getMemberships().stream().\n+                map(membership -> membership.getRightEnd()).collect(Collectors.toSet()));\n+        result.addAll(findDynGroups(user.getKey()));\n \n-                    @Override\n-                    public Group transform(final UMembership input) {\n-                        return input.getRightEnd();\n-                    }\n-                }, new ArrayList<Group>()),\n-                findDynGroups(user.getKey()));\n+        return result;\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public Collection<String> findAllGroupKeys(final User user) {\n-        return CollectionUtils.collect(findAllGroups(user), EntityUtils.<Group>keyTransformer());\n+        return findAllGroups(user).stream().map(Entity::getKey).collect(Collectors.toList());\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public Collection<String> findAllGroupNames(final User user) {\n-        return CollectionUtils.collect(findAllGroups(user), new Transformer<Group, String>() {\n-\n-            @Override\n-            public String transform(final Group input) {\n-                return input.getName();\n-            }\n-        });\n+        return findAllGroups(user).stream().map(Group::getName).collect(Collectors.toList());\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public Collection<ExternalResource> findAllResources(final User user) {\n         Set<ExternalResource> result = new HashSet<>();\n         result.addAll(user.getResources());\n-        for (Group group : findAllGroups(user)) {\n-            result.addAll(group.getResources());\n-        }\n+        findAllGroups(user).forEach(group -> result.addAll(group.getResources()));\n \n         return result;\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n     public Collection<String> findAllResourceKeys(final String key) {\n-        return CollectionUtils.collect(findAllResources(authFind(key)), EntityUtils.keyTransformer());\n+        return findAllResources(authFind(key)).stream().map(resource -> resource.getKey()).collect(Collectors.toList());\n     }\n \n }"},{"sha":"4fe46e6ab64a839659a97a741090e1e96f2d3385","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractGroupableRelatable.java","status":"modified","additions":37,"deletions":81,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractGroupableRelatable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractGroupableRelatable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractGroupableRelatable.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,12 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.GroupablePlainAttr;\n import org.apache.syncope.core.persistence.api.entity.Membership;\n@@ -49,110 +47,68 @@ public boolean remove(final P attr) {\n     }\n \n     @Override\n-    public P getPlainAttr(final String plainSchemaName) {\n-        return IterableUtils.find(internalGetPlainAttrs(), new Predicate<P>() {\n-\n-            @Override\n-            public boolean evaluate(final P plainAttr) {\n-                return plainAttr != null && plainAttr.getSchema() != null\n-                        && plainAttr.getMembership() == null\n-                        && plainSchemaName.equals(plainAttr.getSchema().getKey());\n-            }\n-        });\n+    public Optional<? extends P> getPlainAttr(final String plainSchema) {\n+        return internalGetPlainAttrs().stream().filter(plainAttr\n+                -> plainAttr != null && plainAttr.getSchema() != null && plainAttr.getMembership() == null\n+                && plainSchema.equals(plainAttr.getSchema().getKey())).findFirst();\n     }\n \n     @Override\n-    public P getPlainAttr(final String plainSchemaName, final Membership<?> membership) {\n-        return IterableUtils.find(internalGetPlainAttrs(), new Predicate<P>() {\n-\n-            @Override\n-            public boolean evaluate(final P plainAttr) {\n-                return plainAttr != null && plainAttr.getSchema() != null\n-                        && plainAttr.getMembership() != null && plainAttr.getMembership().equals(membership)\n-                        && plainSchemaName.equals(plainAttr.getSchema().getKey());\n-            }\n-        });\n+    public Optional<? extends P> getPlainAttr(final String plainSchema, final Membership<?> membership) {\n+        return internalGetPlainAttrs().stream().filter(plainAttr\n+                -> plainAttr != null && plainAttr.getSchema() != null\n+                && plainAttr.getMembership() != null && plainAttr.getMembership().equals(membership)\n+                && plainSchema.equals(plainAttr.getSchema().getKey())).findFirst();\n     }\n \n     @Override\n     public List<? extends P> getPlainAttrs() {\n-        return CollectionUtils.select(internalGetPlainAttrs(), new Predicate<P>() {\n-\n-            @Override\n-            public boolean evaluate(final P plainAttr) {\n-                return plainAttr != null && plainAttr.getSchema() != null\n-                        && plainAttr.getMembership() == null;\n-            }\n-        }, new ArrayList<P>());\n+        return internalGetPlainAttrs().stream().filter(plainAttr\n+                -> plainAttr != null && plainAttr.getSchema() != null && plainAttr.getMembership() == null).\n+                collect(Collectors.toList());\n     }\n \n     @Override\n-    public Collection<? extends P> getPlainAttrs(final String plainSchemaName) {\n-        return CollectionUtils.select(internalGetPlainAttrs(), new Predicate<P>() {\n-\n-            @Override\n-            public boolean evaluate(final P plainAttr) {\n-                return plainAttr != null && plainAttr.getSchema() != null\n-                        && plainSchemaName.equals(plainAttr.getSchema().getKey());\n-            }\n-        });\n+    public Collection<? extends P> getPlainAttrs(final String plainSchema) {\n+        return internalGetPlainAttrs().stream().filter(plainAttr\n+                -> plainAttr != null && plainAttr.getSchema() != null\n+                && plainSchema.equals(plainAttr.getSchema().getKey())).\n+                collect(Collectors.toList());\n     }\n \n     @Override\n     public Collection<? extends P> getPlainAttrs(final Membership<?> membership) {\n-        return CollectionUtils.select(internalGetPlainAttrs(), new Predicate<P>() {\n-\n-            @Override\n-            public boolean evaluate(final P plainAttr) {\n-                return plainAttr != null && plainAttr.getSchema() != null\n-                        && membership.equals(plainAttr.getMembership());\n-            }\n-        });\n+        return internalGetPlainAttrs().stream().filter(plainAttr\n+                -> plainAttr != null && plainAttr.getSchema() != null\n+                && membership.equals(plainAttr.getMembership())).\n+                collect(Collectors.toList());\n     }\n \n     @Override\n-    public M getMembership(final String groupKey) {\n-        return IterableUtils.find(getMemberships(), new Predicate<M>() {\n-\n-            @Override\n-            public boolean evaluate(final M membership) {\n-                return groupKey != null && groupKey.equals(membership.getRightEnd().getKey());\n-            }\n-        });\n+    public Optional<? extends M> getMembership(final String groupKey) {\n+        return getMemberships().stream().filter(membership\n+                -> groupKey != null && groupKey.equals(membership.getRightEnd().getKey())).findFirst();\n     }\n \n     @Override\n-    public REL getRelationship(final RelationshipType relationshipType, final String otherEndKey) {\n-        return IterableUtils.find(getRelationships(), new Predicate<REL>() {\n-\n-            @Override\n-            public boolean evaluate(final REL relationship) {\n-                return otherEndKey != null && otherEndKey.equals(relationship.getRightEnd().getKey())\n-                        && ((relationshipType == null && relationship.getType() == null)\n-                        || (relationshipType != null && relationshipType.equals(relationship.getType())));\n-            }\n-        });\n+    public Optional<? extends REL> getRelationship(final RelationshipType relationshipType, final String otherEndKey) {\n+        return getRelationships().stream().filter(relationship\n+                -> otherEndKey != null && otherEndKey.equals(relationship.getRightEnd().getKey())\n+                && ((relationshipType == null && relationship.getType() == null)\n+                || (relationshipType != null && relationshipType.equals(relationship.getType())))).findFirst();\n     }\n \n     @Override\n     public Collection<? extends REL> getRelationships(final RelationshipType relationshipType) {\n-        return CollectionUtils.select(getRelationships(), new Predicate<REL>() {\n-\n-            @Override\n-            public boolean evaluate(final REL relationship) {\n-                return relationshipType != null && relationshipType.equals(relationship.getType());\n-            }\n-        });\n+        return getRelationships().stream().filter(relationship\n+                -> relationshipType != null && relationshipType.equals(relationship.getType())).\n+                collect(Collectors.toList());\n     }\n \n     @Override\n     public Collection<? extends REL> getRelationships(final String otherEndKey) {\n-        return CollectionUtils.select(getRelationships(), new Predicate<REL>() {\n-\n-            @Override\n-            public boolean evaluate(final REL relationship) {\n-                return otherEndKey != null && otherEndKey.equals(relationship.getRightEnd().getKey());\n-            }\n-        });\n+        return getRelationships().stream().filter(relationship\n+                -> otherEndKey != null && otherEndKey.equals(relationship.getRightEnd().getKey())).\n+                collect(Collectors.toList());\n     }\n }"},{"sha":"0070fdedf2e91ad3de149fc2dfdc419242d3d904","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttr.java","status":"modified","additions":2,"deletions":10,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,17 +18,15 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.stream.Collectors;\n import javax.persistence.Column;\n import javax.persistence.EntityListeners;\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n import javax.persistence.MappedSuperclass;\n import javax.validation.constraints.NotNull;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n@@ -104,13 +102,7 @@ public void add(final String value, final AnyUtils anyUtils) {\n     public List<String> getValuesAsStrings() {\n         List<String> result;\n         if (getUniqueValue() == null) {\n-            result = CollectionUtils.collect(getValues(), new Transformer<PlainAttrValue, String>() {\n-\n-                @Override\n-                public String transform(final PlainAttrValue input) {\n-                    return input.getValueAsString();\n-                }\n-            }, new ArrayList<String>());\n+            result = getValues().stream().map(value -> value.getValueAsString()).collect(Collectors.toList());\n         } else {\n             result = Collections.singletonList(getUniqueValue().getValueAsString());\n         }"},{"sha":"8feb82d4853dc954bd19c44fd3c0861ec2bb79a8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnInstance.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -37,7 +38,6 @@\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n-import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n@@ -185,7 +185,7 @@ public void setVersion(final String version) {\n     public Set<ConnConfProperty> getConf() {\n         Set<ConnConfProperty> configuration = new HashSet<>();\n         if (!StringUtils.isBlank(jsonConf)) {\n-            CollectionUtils.addAll(configuration, POJOHelper.deserialize(jsonConf, ConnConfProperty[].class));\n+            configuration.addAll(Arrays.asList(POJOHelper.deserialize(jsonConf, ConnConfProperty[].class)));\n         }\n \n         return configuration;"},{"sha":"bd9a1486f0e7fad136aa4510e40b4782f130efce","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPANotification.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n import javax.persistence.Basic;\n import javax.persistence.CascadeType;\n import javax.persistence.CollectionTable;\n@@ -36,8 +37,6 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -153,14 +152,8 @@ public boolean add(final AnyAbout about) {\n     }\n \n     @Override\n-    public AnyAbout getAbout(final AnyType anyType) {\n-        return IterableUtils.find(abouts, new Predicate<AnyAbout>() {\n-\n-            @Override\n-            public boolean evaluate(final AnyAbout about) {\n-                return anyType != null && anyType.equals(about.getAnyType());\n-            }\n-        });\n+    public Optional<? extends AnyAbout> getAbout(final AnyType anyType) {\n+        return abouts.stream().filter(about -> anyType != null && anyType.equals(about.getAnyType())).findFirst();\n     }\n \n     @Override"},{"sha":"e9199100f3cc5fafe632f3db2d81c0377491809c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARealm.java","status":"modified","additions":7,"deletions":15,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,7 +21,9 @@\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n import javax.persistence.CollectionTable;\n@@ -37,12 +39,8 @@\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n import javax.validation.constraints.Size;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n import org.apache.syncope.core.persistence.api.entity.AnyTemplateRealm;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n@@ -53,7 +51,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.validation.entity.RealmCheck;\n-import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n \n @Entity\n @Table(name = JPARealm.TABLE, uniqueConstraints =\n@@ -157,14 +154,10 @@ public boolean add(final AnyTemplateRealm template) {\n     }\n \n     @Override\n-    public AnyTemplateRealm getTemplate(final AnyType anyType) {\n-        return IterableUtils.find(templates, new Predicate<AnyTemplate>() {\n-\n-            @Override\n-            public boolean evaluate(final AnyTemplate template) {\n-                return anyType != null && anyType.equals(template.getAnyType());\n-            }\n-        });\n+    public Optional<? extends AnyTemplateRealm> getTemplate(final AnyType anyType) {\n+        return templates.stream().\n+                filter(template -> anyType != null && anyType.equals(template.getAnyType())).\n+                findFirst();\n     }\n \n     @Override\n@@ -180,8 +173,7 @@ public boolean add(final ExternalResource resource) {\n \n     @Override\n     public List<String> getResourceKeys() {\n-        return CollectionUtils.collect(\n-                getResources(), EntityUtils.<ExternalResource>keyTransformer(), new ArrayList<String>());\n+        return getResources().stream().map(resource -> resource.getKey()).collect(Collectors.toList());\n     }\n \n     @Override"},{"sha":"a048ef47c7e1bbf1be0578ec3bdd274ec6ef3570","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAReport.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.stream.Collectors;\n import javax.persistence.Basic;\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n@@ -32,8 +33,6 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n@@ -111,13 +110,7 @@ public void removeAllReportletConfs() {\n \n     @Override\n     public List<ReportletConf> getReportletConfs() {\n-        return CollectionUtils.collect(reportletConfs, new Transformer<JPAReportletConfInstance, ReportletConf>() {\n-\n-            @Override\n-            public ReportletConf transform(final JPAReportletConfInstance input) {\n-                return input.getInstance();\n-            }\n-        }, new ArrayList<ReportletConf>());\n+        return reportletConfs.stream().map(input -> input.getInstance()).collect(Collectors.toList());\n     }\n \n     @Override"},{"sha":"b84330b1838e4974b8fa69d212dff9d18e36403b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPAConf.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,14 +22,13 @@\n import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.Optional;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.validation.Valid;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -64,15 +63,10 @@ public boolean remove(final CPlainAttr attr) {\n     }\n \n     @Override\n-    public CPlainAttr getPlainAttr(final String plainSchemaName) {\n-        return IterableUtils.find(plainAttrs, new Predicate<CPlainAttr>() {\n-\n-            @Override\n-            public boolean evaluate(final CPlainAttr plainAttr) {\n-                return plainAttr != null && plainAttr.getSchema() != null\n-                        && plainSchemaName.equals(plainAttr.getSchema().getKey());\n-            }\n-        });\n+    public Optional<? extends CPlainAttr> getPlainAttr(final String plainSchema) {\n+        return plainAttrs.stream().filter(plainAttr\n+                -> plainAttr != null && plainAttr.getSchema() != null\n+                && plainSchema.equals(plainAttr.getSchema().getKey())).findFirst();\n     }\n \n     @Override"},{"sha":"2bddf1c69467f162b6d777bf2f5452f50ba90817","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java","status":"modified","additions":11,"deletions":27,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n@@ -34,8 +35,6 @@\n import javax.persistence.Table;\n import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -169,15 +168,10 @@ public boolean remove(final GPlainAttr attr) {\n     }\n \n     @Override\n-    public GPlainAttr getPlainAttr(final String plainSchemaName) {\n-        return IterableUtils.find(getPlainAttrs(), new Predicate<GPlainAttr>() {\n-\n-            @Override\n-            public boolean evaluate(final GPlainAttr plainAttr) {\n-                return plainAttr != null && plainAttr.getSchema() != null\n-                        && plainSchemaName.equals(plainAttr.getSchema().getKey());\n-            }\n-        });\n+    public Optional<? extends GPlainAttr> getPlainAttr(final String plainSchema) {\n+        return getPlainAttrs().stream().filter(plainAttr\n+                -> plainAttr != null && plainAttr.getSchema() != null\n+                && plainSchema.equals(plainAttr.getSchema().getKey())).findFirst();\n     }\n \n     @Override\n@@ -214,14 +208,9 @@ public boolean add(final ADynGroupMembership dynGroupMembership) {\n     }\n \n     @Override\n-    public ADynGroupMembership getADynMembership(final AnyType anyType) {\n-        return IterableUtils.find(aDynMemberships, new Predicate<ADynGroupMembership>() {\n-\n-            @Override\n-            public boolean evaluate(final ADynGroupMembership dynGroupMembership) {\n-                return anyType != null && anyType.equals(dynGroupMembership.getAnyType());\n-            }\n-        });\n+    public Optional<? extends ADynGroupMembership> getADynMembership(final AnyType anyType) {\n+        return aDynMemberships.stream().filter(dynGroupMembership\n+                -> anyType != null && anyType.equals(dynGroupMembership.getAnyType())).findFirst();\n     }\n \n     @Override\n@@ -236,14 +225,9 @@ public boolean add(final TypeExtension typeExtension) {\n     }\n \n     @Override\n-    public TypeExtension getTypeExtension(final AnyType anyType) {\n-        return IterableUtils.find(typeExtensions, new Predicate<TypeExtension>() {\n-\n-            @Override\n-            public boolean evaluate(final TypeExtension typeExtension) {\n-                return typeExtension.getAnyType().equals(anyType);\n-            }\n-        });\n+    public Optional<? extends TypeExtension> getTypeExtension(final AnyType anyType) {\n+        return typeExtensions.stream().filter(typeExtension\n+                -> typeExtension.getAnyType().equals(anyType)).findFirst();\n     }\n \n     @Override"},{"sha":"200716dd058a1ebe6cdd2fcf84f0f8d3e69c079a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAccountPolicy.java","status":"modified","additions":4,"deletions":13,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,6 +22,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.persistence.Basic;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n@@ -33,10 +34,7 @@\n import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n-import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n@@ -109,13 +107,7 @@ public void removeAllRuleConfs() {\n \n     @Override\n     public List<AccountRuleConf> getRuleConfs() {\n-        return CollectionUtils.collect(ruleConfs, new Transformer<JPAAccountRuleConfInstance, AccountRuleConf>() {\n-\n-            @Override\n-            public AccountRuleConf transform(final JPAAccountRuleConfInstance input) {\n-                return input.getInstance();\n-            }\n-        }, new ArrayList<AccountRuleConf>());\n+        return ruleConfs.stream().map(input -> input.getInstance()).collect(Collectors.toList());\n     }\n \n     @Override\n@@ -130,8 +122,7 @@ public Set<? extends ExternalResource> getResources() {\n     }\n \n     @Override\n-    public Set<String> getResourceNames() {\n-        return CollectionUtils.collect(\n-                getResources(), EntityUtils.<ExternalResource>keyTransformer(), new HashSet<String>());\n+    public Set<String> getResourceKeys() {\n+        return getResources().stream().map(resource -> resource.getKey()).collect(Collectors.toSet());\n     }\n }"},{"sha":"1ea375de69ed0bbe6cbf53fe4be108f84a01cfea","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPasswordPolicy.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.stream.Collectors;\n import javax.persistence.Basic;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n@@ -28,8 +29,6 @@\n import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n \n@@ -91,12 +90,6 @@ public void removeAllRuleConfs() {\n \n     @Override\n     public List<PasswordRuleConf> getRuleConfs() {\n-        return CollectionUtils.collect(ruleConfs, new Transformer<JPAPasswordRuleConfInstance, PasswordRuleConf>() {\n-\n-            @Override\n-            public PasswordRuleConf transform(final JPAPasswordRuleConfInstance input) {\n-                return input.getInstance();\n-            }\n-        }, new ArrayList<PasswordRuleConf>());\n+        return ruleConfs.stream().map(input -> input.getInstance()).collect(Collectors.toList());\n     }\n }"},{"sha":"511b5861bea698dfe892ef193ca666003f7dfb17","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":7,"deletions":20,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,8 +19,10 @@\n package org.apache.syncope.core.persistence.jpa.entity.resource;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import javax.persistence.Basic;\n import javax.persistence.CascadeType;\n@@ -40,9 +42,6 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n@@ -208,25 +207,13 @@ public boolean add(final Provision provision) {\n     }\n \n     @Override\n-    public Provision getProvision(final ObjectClass objectClass) {\n-        return IterableUtils.find(provisions, new Predicate<Provision>() {\n-\n-            @Override\n-            public boolean evaluate(final Provision provision) {\n-                return provision.getObjectClass().equals(objectClass);\n-            }\n-        });\n+    public Optional<? extends Provision> getProvision(final ObjectClass objectClass) {\n+        return provisions.stream().filter(provision -> provision.getObjectClass().equals(objectClass)).findFirst();\n     }\n \n     @Override\n-    public Provision getProvision(final AnyType anyType) {\n-        return IterableUtils.find(provisions, new Predicate<Provision>() {\n-\n-            @Override\n-            public boolean evaluate(final Provision provision) {\n-                return provision.getAnyType().equals(anyType);\n-            }\n-        });\n+    public Optional<? extends Provision> getProvision(final AnyType anyType) {\n+        return provisions.stream().filter(provision -> provision.getAnyType().equals(anyType)).findFirst();\n     }\n \n     @Override\n@@ -343,7 +330,7 @@ public void setPullPolicy(final PullPolicy pullPolicy) {\n     public Set<ConnConfProperty> getConfOverride() {\n         Set<ConnConfProperty> confOverride = new HashSet<>();\n         if (!StringUtils.isBlank(jsonConf)) {\n-            CollectionUtils.addAll(confOverride, POJOHelper.deserialize(jsonConf, ConnConfProperty[].class));\n+            confOverride.addAll(Arrays.asList(POJOHelper.deserialize(jsonConf, ConnConfProperty[].class)));\n         }\n \n         return confOverride;"},{"sha":"d0d6ede63b95ce0fbfd9070cca926055f565d886","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMapping.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,15 +20,14 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -77,14 +76,8 @@ public List<? extends MappingItem> getItems() {\n     }\n \n     @Override\n-    public MappingItem getConnObjectKeyItem() {\n-        return IterableUtils.find(getItems(), new Predicate<MappingItem>() {\n-\n-            @Override\n-            public boolean evaluate(final MappingItem item) {\n-                return item.isConnObjectKey();\n-            }\n-        });\n+    public Optional<? extends MappingItem> getConnObjectKeyItem() {\n+        return getItems().stream().filter(MappingItem::isConnObjectKey).findFirst();\n     }\n \n     @Override"},{"sha":"6a763584eff3a4ebbd88b5a5ba6e9e88e73f6b26","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAOrgUnit.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnit.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n@@ -29,8 +30,6 @@\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n@@ -125,14 +124,8 @@ public List<? extends OrgUnitItem> getItems() {\n     }\n \n     @Override\n-    public OrgUnitItem getConnObjectKeyItem() {\n-        return IterableUtils.find(getItems(), new Predicate<OrgUnitItem>() {\n-\n-            @Override\n-            public boolean evaluate(final OrgUnitItem item) {\n-                return item.isConnObjectKey();\n-            }\n-        });\n+    public Optional<? extends OrgUnitItem> getConnObjectKeyItem() {\n+        return getItems().stream().filter(OrgUnitItem::isConnObjectKey).findFirst();\n     }\n \n     @Override"},{"sha":"ce029d896a21c5357f6ed3de67ba52322970f7dd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPropagationTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.task;\n \n+import java.util.Arrays;\n import java.util.HashSet;\n import java.util.Set;\n import javax.persistence.DiscriminatorValue;\n@@ -26,7 +27,6 @@\n import javax.persistence.Enumerated;\n import javax.persistence.Lob;\n import javax.persistence.ManyToOne;\n-import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -113,7 +113,7 @@ public String getSerializedAttributes() {\n     public Set<Attribute> getAttributes() {\n         Set<Attribute> result = new HashSet<>();\n         if (StringUtils.isNotBlank(this.attributes)) {\n-            CollectionUtils.addAll(result, POJOHelper.deserialize(this.attributes, Attribute[].class));\n+            result.addAll(Arrays.asList(POJOHelper.deserialize(this.attributes, Attribute[].class)));\n         }\n \n         return result;"},{"sha":"54f70cf797de78c75ad5be8f82fcd45fa20682bd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPullTask.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPullTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPullTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPullTask.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import javax.persistence.CascadeType;\n import javax.persistence.CollectionTable;\n@@ -35,12 +36,9 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.validation.constraints.NotNull;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n@@ -113,14 +111,10 @@ public boolean add(final AnyTemplatePullTask template) {\n     }\n \n     @Override\n-    public AnyTemplatePullTask getTemplate(final AnyType anyType) {\n-        return IterableUtils.find(templates, new Predicate<AnyTemplate>() {\n-\n-            @Override\n-            public boolean evaluate(final AnyTemplate template) {\n-                return anyType != null && anyType.equals(template.getAnyType());\n-            }\n-        });\n+    public Optional<? extends AnyTemplatePullTask> getTemplate(final AnyType anyType) {\n+        return templates.stream().\n+                filter(template -> anyType != null && anyType.equals(template.getAnyType())).\n+                findFirst();\n     }\n \n     @Override"},{"sha":"efa84b7e137718022bb4cbf3cb07e54d3ae75025","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPushTask.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import javax.persistence.CascadeType;\n import javax.persistence.CollectionTable;\n@@ -32,8 +33,6 @@\n import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n@@ -82,14 +81,8 @@ public boolean add(final PushTaskAnyFilter filter) {\n     }\n \n     @Override\n-    public PushTaskAnyFilter getFilter(final AnyType anyType) {\n-        return IterableUtils.find(filters, new Predicate<PushTaskAnyFilter>() {\n-\n-            @Override\n-            public boolean evaluate(final PushTaskAnyFilter filter) {\n-                return anyType != null && anyType.equals(filter.getAnyType());\n-            }\n-        });\n+    public Optional<? extends PushTaskAnyFilter> getFilter(final AnyType anyType) {\n+        return filters.stream().filter(filter -> anyType != null && anyType.equals(filter.getAnyType())).findFirst();\n     }\n \n     @Override"},{"sha":"dcf205e2abf8fa4f4f45d37f8487717b44cc5bd4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -374,7 +374,7 @@ public void setChangePwdDate(final Date changePwdDate) {\n \n     @Override\n     public Integer getFailedLogins() {\n-        return failedLogins == null ? Integer.valueOf(0) : failedLogins;\n+        return failedLogins == null ? 0 : failedLogins;\n     }\n \n     @Override"},{"sha":"7d8883af6c900702fef6a32d8c98f86e09086095","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/spring/DomainTransactionInterceptor.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FDomainTransactionInterceptor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FDomainTransactionInterceptor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FDomainTransactionInterceptor.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -43,18 +43,14 @@ public class DomainTransactionInterceptor extends TransactionInterceptor {\n     public TransactionAttributeSource getTransactionAttributeSource() {\n         final TransactionAttributeSource origTxAttrSource = super.getTransactionAttributeSource();\n \n-        return new TransactionAttributeSource() {\n+        return (final Method method, final Class<?> targetClass) -> {\n+            TransactionAttribute txAttr = origTxAttrSource.getTransactionAttribute(method, targetClass);\n \n-            @Override\n-            public TransactionAttribute getTransactionAttribute(final Method method, final Class<?> targetClass) {\n-                TransactionAttribute txAttr = origTxAttrSource.getTransactionAttribute(method, targetClass);\n-\n-                if (txAttr instanceof DefaultTransactionAttribute) {\n-                    ((DefaultTransactionAttribute) txAttr).setQualifier(AuthContextUtils.getDomain());\n-                }\n-\n-                return txAttr;\n+            if (txAttr instanceof DefaultTransactionAttribute) {\n+                ((DefaultTransactionAttribute) txAttr).setQualifier(AuthContextUtils.getDomain());\n             }\n+\n+            return txAttr;\n         };\n     }\n "},{"sha":"5bedb072c24cd761c6369f2aaa19e6999d12c147","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ExternalResourceValidator.java","status":"modified","additions":7,"deletions":26,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,30 +22,21 @@\n import java.util.List;\n import java.util.Set;\n import javax.validation.ConstraintValidatorContext;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n public class ExternalResourceValidator extends AbstractValidator<ExternalResourceCheck, ExternalResource> {\n \n     private boolean isValid(final List<? extends Item> items, final ConstraintValidatorContext context) {\n-        long connObjectKeys = IterableUtils.countMatches(items, new Predicate<Item>() {\n-\n-            @Override\n-            public boolean evaluate(final Item item) {\n-                return item.isConnObjectKey();\n-            }\n-        });\n+        long connObjectKeys = items.stream().filter(Item::isConnObjectKey).count();\n         if (connObjectKeys != 1) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidMapping, \"Single ConnObjectKey mapping is required\")).\n@@ -94,13 +85,7 @@ private boolean isValid(final Mapping mapping, final ConstraintValidatorContext\n \n         boolean isValid = true;\n \n-        long passwords = IterableUtils.countMatches(mapping.getItems(), new Predicate<MappingItem>() {\n-\n-            @Override\n-            public boolean evaluate(final MappingItem item) {\n-                return item.isPassword();\n-            }\n-        });\n+        long passwords = mapping.getItems().stream().filter(MappingItem::isPassword).count();\n         if (passwords > 1) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidMapping, \"One password mapping is allowed at most\")).\n@@ -144,16 +129,12 @@ public boolean isValid(final ExternalResource resource, final ConstraintValidato\n \n         final Set<AnyType> anyTypes = new HashSet<>();\n         final Set<String> objectClasses = new HashSet<>();\n-        boolean validMappings = IterableUtils.matchesAll(resource.getProvisions(), new Predicate<Provision>() {\n-\n-            @Override\n-            public boolean evaluate(final Provision provision) {\n-                anyTypes.add(provision.getAnyType());\n-                if (provision.getObjectClass() != null) {\n-                    objectClasses.add(provision.getObjectClass().getObjectClassValue());\n-                }\n-                return isValid(provision.getMapping(), context);\n+        boolean validMappings = resource.getProvisions().stream().allMatch(provision -> {\n+            anyTypes.add(provision.getAnyType());\n+            if (provision.getObjectClass() != null) {\n+                objectClasses.add(provision.getObjectClass().getObjectClassValue());\n             }\n+            return isValid(provision.getMapping(), context);\n         });\n         validMappings &= isValid(resource.getOrgUnit(), context);\n "},{"sha":"b6cfd266d422bb885c1694aa01254c3fbe159c3b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ReportValidator.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,11 +19,9 @@\n package org.apache.syncope.core.persistence.jpa.validation.entity;\n \n import java.text.ParseException;\n-import java.util.HashSet;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.validation.ConstraintValidatorContext;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.Report;\n@@ -50,14 +48,8 @@ public boolean isValid(final Report object, final ConstraintValidatorContext con\n             }\n         }\n \n-        Set<String> reportletNames = CollectionUtils.collect(object.getReportletConfs(),\n-                new Transformer<ReportletConf, String>() {\n-\n-                    @Override\n-                    public String transform(final ReportletConf input) {\n-                        return input.getName();\n-                    }\n-                }, new HashSet<String>());\n+        Set<String> reportletNames = object.getReportletConfs().stream().\n+                map(ReportletConf::getName).collect(Collectors.toSet());\n         if (reportletNames.size() != object.getReportletConfs().size()) {\n             LOG.error(\"Reportlet name must be unique\");\n             isValid = false;"},{"sha":"a6bcf52450a9ceacfe811d060e125773bbfca726","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":18,"deletions":67,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -25,11 +25,9 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n@@ -50,8 +48,8 @@\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -203,10 +201,7 @@ public void searchWithNotCondition() {\n         assertNotNull(users);\n         assertEquals(4, users.size());\n \n-        Set<String> ids = new HashSet<>(users.size());\n-        for (User user : users) {\n-            ids.add(user.getKey());\n-        }\n+        Set<String> ids = users.stream().map(Entity::getKey).collect(Collectors.toSet());\n         assertTrue(ids.contains(\"1417acbe-cbf6-4277-9372-e75e04f97000\"));\n         assertTrue(ids.contains(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\"));\n     }\n@@ -224,10 +219,7 @@ public void searchCaseInsensitiveWithNotCondition() {\n         assertNotNull(users);\n         assertEquals(4, users.size());\n \n-        Set<String> ids = new HashSet<>(users.size());\n-        for (User user : users) {\n-            ids.add(user.getKey());\n-        }\n+        Set<String> ids = users.stream().map(Entity::getKey).collect(Collectors.toSet());\n         assertTrue(ids.contains(\"1417acbe-cbf6-4277-9372-e75e04f97000\"));\n         assertTrue(ids.contains(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\"));\n     }\n@@ -484,36 +476,18 @@ public void searchByRelationshipType() {\n                 SearchCond.getLeafCond(relationshipTypeCond), SearchCond.getLeafCond(tcond));\n         assertTrue(searchCondition.isValid());\n \n-        List<AnyObject> matching = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n-        assertNotNull(matching);\n-        assertEquals(2, matching.size());\n-        assertTrue(IterableUtils.matchesAny(matching, new Predicate<AnyObject>() {\n-\n-            @Override\n-            public boolean evaluate(final AnyObject any) {\n-                return \"fc6dbc3a-6c07-4965-8781-921e7401a4a5\".equals(any.getKey());\n-            }\n-        }));\n-        assertTrue(IterableUtils.matchesAny(matching, new Predicate<AnyObject>() {\n-\n-            @Override\n-            public boolean evaluate(final AnyObject any) {\n-                return \"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\".equals(any.getKey());\n-            }\n-        }));\n+        List<AnyObject> anyObjects = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n+        assertNotNull(anyObjects);\n+        assertEquals(2, anyObjects.size());\n+        assertTrue(anyObjects.stream().anyMatch(any -> \"fc6dbc3a-6c07-4965-8781-921e7401a4a5\".equals(any.getKey())));\n+        assertTrue(anyObjects.stream().anyMatch(any -> \"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\".equals(any.getKey())));\n \n         // 2. search for users involved in \"neighborhood\" relationship\n         searchCondition = SearchCond.getLeafCond(relationshipTypeCond);\n-        matching = searchDAO.search(searchCondition, AnyTypeKind.USER);\n-        assertNotNull(matching);\n-        assertEquals(1, matching.size());\n-        assertTrue(IterableUtils.matchesAny(matching, new Predicate<Any<?>>() {\n-\n-            @Override\n-            public boolean evaluate(final Any<?> any) {\n-                return \"c9b2dec2-00a7-4855-97c0-d854842b4b24\".equals(any.getKey());\n-            }\n-        }));\n+        List<User> users = searchDAO.search(searchCondition, AnyTypeKind.USER);\n+        assertNotNull(users);\n+        assertEquals(1, users.size());\n+        assertTrue(users.stream().anyMatch(any -> \"c9b2dec2-00a7-4855-97c0-d854842b4b24\".equals(any.getKey())));\n     }\n \n     @Test\n@@ -569,34 +543,17 @@ public void assignable() {\n         assertTrue(searchCondition.isValid());\n \n         List<Group> groups = searchDAO.search(searchCondition, AnyTypeKind.GROUP);\n-        assertTrue(IterableUtils.matchesAny(groups, new Predicate<Group>() {\n-\n-            @Override\n-            public boolean evaluate(final Group group) {\n-                return \"additional\".equals(group.getName());\n-            }\n-        }));\n-        assertFalse(IterableUtils.matchesAny(groups, new Predicate<Group>() {\n-\n-            @Override\n-            public boolean evaluate(final Group group) {\n-                return \"fake\".equals(group.getName());\n-            }\n-        }));\n+        assertTrue(groups.stream().anyMatch(group -> \"additional\".equals(group.getName())));\n+        assertFalse(groups.stream().anyMatch(group -> \"fake\".equals(group.getName())));\n \n         assignableCond = new AssignableCond();\n         assignableCond.setRealmFullPath(\"/odd\");\n         searchCondition = SearchCond.getLeafCond(assignableCond);\n         assertTrue(searchCondition.isValid());\n \n         List<AnyObject> anyObjects = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n-        assertFalse(IterableUtils.matchesAny(anyObjects, new Predicate<AnyObject>() {\n-\n-            @Override\n-            public boolean evaluate(final AnyObject anyObject) {\n-                return \"9e1d130c-d6a3-48b1-98b3-182477ed0688\".equals(anyObject.getKey());\n-            }\n-        }));\n+        assertFalse(anyObjects.stream().\n+                anyMatch(anyObject -> \"9e1d130c-d6a3-48b1-98b3-182477ed0688\".equals(anyObject.getKey())));\n     }\n \n     @Test\n@@ -627,13 +584,7 @@ public void issue202() {\n         List<User> users = searchDAO.search(searchCondition, AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(2, users.size());\n-        assertTrue(IterableUtils.matchesAny(users, new Predicate<User>() {\n-\n-            @Override\n-            public boolean evaluate(final User user) {\n-                return \"c9b2dec2-00a7-4855-97c0-d854842b4b24\".equals(user.getKey());\n-            }\n-        }));\n+        assertTrue(users.stream().anyMatch(user -> \"c9b2dec2-00a7-4855-97c0-d854842b4b24\".equals(user.getKey())));\n     }\n \n     @Test"},{"sha":"d72ea142e1c6bd97795ca589ab8940c5cec9ac85","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ConfTest.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConfTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,11 +19,11 @@\n package org.apache.syncope.core.persistence.jpa.inner;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.util.Optional;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n@@ -49,16 +49,16 @@ public class ConfTest extends AbstractTest {\n \n     @Test\n     public void read() {\n-        CPlainAttr conf = confDAO.find(\"selfRegistration.allowed\");\n-        assertNotNull(conf);\n-        assertTrue(conf.getValues().get(0).getBooleanValue());\n+        Optional<? extends CPlainAttr> conf = confDAO.find(\"selfRegistration.allowed\");\n+        assertTrue(conf.isPresent());\n+        assertTrue(conf.get().getValues().get(0).getBooleanValue());\n \n         conf = confDAO.find(\"authentication.statuses\");\n-        assertNotNull(conf);\n-        assertEquals(2, conf.getValues().size());\n+        assertTrue(conf.isPresent());\n+        assertEquals(2, conf.get().getValues().size());\n \n         conf = confDAO.find(\"non.existing\");\n-        assertNull(conf);\n+        assertFalse(conf.isPresent());\n     }\n \n     private void add(final CPlainAttr newAttr, final String value) {\n@@ -88,20 +88,20 @@ public void setAndDelete() {\n         add(newConf, \"2014-06-20\");\n         confDAO.save(newConf);\n \n-        CPlainAttr actual = confDAO.find(\"useless\");\n-        assertEquals(actual.getValuesAsStrings(), newConf.getValuesAsStrings());\n+        Optional<? extends CPlainAttr> actual = confDAO.find(\"useless\");\n+        assertEquals(actual.get().getValuesAsStrings(), newConf.getValuesAsStrings());\n \n         // 3. update conf\n         newConf.getValues().clear();\n         add(newConf, \"2014-06-20\");\n         confDAO.save(newConf);\n \n         actual = confDAO.find(\"useless\");\n-        assertEquals(actual.getValuesAsStrings(), newConf.getValuesAsStrings());\n+        assertEquals(actual.get().getValuesAsStrings(), newConf.getValuesAsStrings());\n \n         // 4. delete conf\n         confDAO.delete(\"useless\");\n-        assertNull(confDAO.find(\"useless\"));\n+        assertFalse(confDAO.find(\"useless\").isPresent());\n     }\n \n     @Test"},{"sha":"fd471753f82a682955cd50a12556d558dd719ae3","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ConnInstanceTest.java","status":"modified","additions":4,"deletions":11,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -26,12 +26,10 @@\n import static org.junit.Assert.fail;\n \n import java.io.File;\n-import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n@@ -57,14 +55,9 @@ public class ConnInstanceTest extends AbstractTest {\n \n     @Test\n     public void findAll() {\n-        List<GrantedAuthority> authorities = CollectionUtils.collect(StandardEntitlement.values(),\n-                new Transformer<String, GrantedAuthority>() {\n-\n-            @Override\n-            public GrantedAuthority transform(final String entitlement) {\n-                return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n-            }\n-        }, new ArrayList<GrantedAuthority>());\n+        List<GrantedAuthority> authorities = StandardEntitlement.values().stream().\n+                map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n+                collect(Collectors.toList());\n \n         UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n                 new org.springframework.security.core.userdetails.User("},{"sha":"6a4057bcbadc62fbaa03c7a6c733ec491d27d473","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/GroupTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -59,7 +59,7 @@ public void find() {\n         group = groupDAO.findByName(\"additional\");\n         assertNotNull(group);\n         assertEquals(1, group.getTypeExtensions().size());\n-        assertEquals(2, group.getTypeExtension(anyTypeDAO.findUser()).getAuxClasses().size());\n+        assertEquals(2, group.getTypeExtension(anyTypeDAO.findUser()).get().getAuxClasses().size());\n     }\n \n     @Test"},{"sha":"5ca623c46f182175e0d38e55d2331041f9feffdf","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/MultitenancyTest.java","status":"modified","additions":4,"deletions":11,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,10 +23,8 @@\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n@@ -60,14 +58,9 @@ public class MultitenancyTest extends AbstractTest {\n \n     @BeforeClass\n     public static void setAuthContext() {\n-        List<GrantedAuthority> authorities = CollectionUtils.collect(StandardEntitlement.values(),\n-                new Transformer<String, GrantedAuthority>() {\n-\n-            @Override\n-            public GrantedAuthority transform(final String entitlement) {\n-                return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n-            }\n-        }, new ArrayList<GrantedAuthority>());\n+        List<GrantedAuthority> authorities = StandardEntitlement.values().stream().\n+                map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n+                collect(Collectors.toList());\n \n         UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n                 new org.springframework.security.core.userdetails.User("},{"sha":"c80caafdb65c414ab8b80f911dea2c847ec87b67","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainAttrTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -190,7 +190,7 @@ public void saveWithEncrypted() throws Exception {\n \n         userDAO.save(user);\n \n-        UPlainAttr obscure = user.getPlainAttr(\"obscure\");\n+        UPlainAttr obscure = user.getPlainAttr(\"obscure\").get();\n         assertNotNull(obscure);\n         assertEquals(1, obscure.getValues().size());\n         assertEquals(Encryptor.getInstance(obscureSchema.getSecretKey()).\n@@ -217,10 +217,10 @@ public void saveWithBinary() throws UnsupportedEncodingException {\n \n         userDAO.save(user);\n \n-        UPlainAttr obscure = user.getPlainAttr(\"photo\");\n-        assertNotNull(obscure);\n-        assertEquals(1, obscure.getValues().size());\n-        assertTrue(Arrays.equals(bytes, obscure.getValues().get(0).getBinaryValue()));\n+        UPlainAttr photo = user.getPlainAttr(\"photo\").get();\n+        assertNotNull(photo);\n+        assertEquals(1, photo.getValues().size());\n+        assertTrue(Arrays.equals(bytes, photo.getValues().get(0).getBinaryValue()));\n     }\n \n     @Test"},{"sha":"2e8d215ebc8672bb91acb55e8d536cd4d1c8b45c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RealmTest.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -26,7 +26,6 @@\n import static org.junit.Assert.fail;\n \n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n@@ -92,12 +91,6 @@ public void findChildren() {\n         assertTrue(children.isEmpty());\n     }\n \n-    @Test\n-    public void findDescendants() {\n-        assertTrue(CollectionUtils.disjunction(realmDAO.findAll(), realmDAO.findDescendants(realmDAO.getRoot())).\n-                isEmpty());\n-    }\n-\n     @Test\n     public void findAll() {\n         List<Realm> list = realmDAO.findAll();"},{"sha":"a1fe83e85da1080b7970e08ddc650297bf528cf0","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ResourceTest.java","status":"modified","additions":12,"deletions":26,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -25,12 +25,8 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n@@ -75,16 +71,11 @@ public void findById() {\n                 \"net.tirasa.connid.bundles.soap.WebServiceConnector\", connector.getConnectorName());\n         assertEquals(\"invalid bundle name\", \"net.tirasa.connid.bundles.soap\", connector.getBundleName());\n \n-        Mapping mapping = resource.getProvision(anyTypeDAO.findUser()).getMapping();\n+        Mapping mapping = resource.getProvision(anyTypeDAO.findUser()).get().getMapping();\n         assertFalse(\"no mapping specified\", mapping.getItems().isEmpty());\n \n-        assertTrue(IterableUtils.matchesAny(mapping.getItems(), new Predicate<MappingItem>() {\n-\n-            @Override\n-            public boolean evaluate(final MappingItem item) {\n-                return \"7f55b09c-b573-41dc-a9eb-ccd80bd3ea7a\".equals(item.getKey());\n-            }\n-        }));\n+        assertTrue(mapping.getItems().stream().\n+                anyMatch(item -> \"7f55b09c-b573-41dc-a9eb-ccd80bd3ea7a\".equals(item.getKey())));\n \n         try {\n             resourceDAO.authFind(\"ws-target-resource-1\");\n@@ -103,14 +94,9 @@ public void findWithOrgUnit() {\n \n     @Test\n     public void findAll() {\n-        List<GrantedAuthority> authorities = CollectionUtils.collect(StandardEntitlement.values(),\n-                new Transformer<String, GrantedAuthority>() {\n-\n-            @Override\n-            public GrantedAuthority transform(final String entitlement) {\n-                return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n-            }\n-        }, new ArrayList<GrantedAuthority>());\n+        List<GrantedAuthority> authorities = StandardEntitlement.values().stream().\n+                map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n+                collect(Collectors.toList());\n \n         UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n                 new org.springframework.security.core.userdetails.User(\n@@ -131,8 +117,8 @@ public GrantedAuthority transform(final String entitlement) {\n     public void getConnObjectKey() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-2\");\n         assertNotNull(resource);\n-        assertEquals(\"fullname\",\n-                resource.getProvision(anyTypeDAO.findUser()).getMapping().getConnObjectKeyItem().getIntAttrName());\n+        assertEquals(\"fullname\", resource.getProvision(anyTypeDAO.findUser()).get().\n+                getMapping().getConnObjectKeyItem().get().getIntAttrName());\n     }\n \n     @Test\n@@ -165,8 +151,8 @@ public void save() {\n \n         assertNotNull(actual);\n         assertNotNull(actual.getConnector());\n-        assertNotNull(actual.getProvision(anyTypeDAO.findUser()).getMapping());\n-        assertFalse(actual.getProvision(anyTypeDAO.findUser()).getMapping().getItems().isEmpty());\n+        assertNotNull(actual.getProvision(anyTypeDAO.findUser()).get().getMapping());\n+        assertFalse(actual.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems().isEmpty());\n         assertEquals(Integer.valueOf(2), actual.getPropagationPriority());\n     }\n \n@@ -335,7 +321,7 @@ public void saveWithGroupMappingType() {\n         ExternalResource actual = resourceDAO.save(resource);\n         assertNotNull(actual);\n \n-        assertEquals(3, actual.getProvision(anyTypeDAO.findUser()).getMapping().getItems().size());\n+        assertEquals(3, actual.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems().size());\n     }\n \n     @Test"},{"sha":"e6b04100e710bc1e113d120d7914fe23fbb0c76c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/VirSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -62,7 +62,7 @@ public void findByName() {\n     @Test\n     public void save() {\n         ExternalResource csv = resourceDAO.find(\"resource-csv\");\n-        Provision provision = csv.getProvision(ObjectClass.ACCOUNT);\n+        Provision provision = csv.getProvision(ObjectClass.ACCOUNT).get();\n         assertNotNull(provision);\n \n         VirSchema virSchema = entityFactory.newEntity(VirSchema.class);"},{"sha":"c5559df6b856626a51c801579324510e98df60d5","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ConfTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConfTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -53,7 +53,7 @@ private void add(final CPlainAttr newAttr, final String value) {\n \n     @Test\n     public void update() {\n-        CPlainAttr expireTime = confDAO.find(\"token.expireTime\");\n+        CPlainAttr expireTime = confDAO.find(\"token.expireTime\").get();\n         assertNotNull(expireTime);\n         long value = expireTime.getValues().get(0).getLongValue();\n         value++;\n@@ -65,7 +65,7 @@ public void update() {\n         confDAO.save(expireTime);\n         confDAO.flush();\n \n-        CPlainAttr actual = confDAO.find(\"token.expireTime\");\n+        CPlainAttr actual = confDAO.find(\"token.expireTime\").get();\n         assertEquals(expireTime, actual);\n     }\n "},{"sha":"bf003613def6d17695ba6a26560fceb7e3beeb87","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/GroupTest.java","status":"modified","additions":35,"deletions":44,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -29,9 +29,8 @@\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.stream.Collectors;\n import javax.persistence.Query;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n@@ -146,7 +145,7 @@ public void create() {\n         group = groupDAO.findByName(\"new\");\n         assertNotNull(group);\n         assertEquals(1, group.getTypeExtensions().size());\n-        assertEquals(2, group.getTypeExtension(anyTypeDAO.findUser()).getAuxClasses().size());\n+        assertEquals(2, group.getTypeExtension(anyTypeDAO.findUser()).get().getAuxClasses().size());\n     }\n \n     @Test\n@@ -179,22 +178,23 @@ public void delete() {\n      * required for avoiding creating of a new transaction - good for general use case but bad for the way how\n      * this test class is architected.\n      */\n-    private List<Group> findDynGroups(final User user) {\n+    @SuppressWarnings(\"unchecked\")\n+    public List<Group> findDynGroups(final User user) {\n         Query query = entityManager().createNativeQuery(\n                 \"SELECT group_id FROM \" + JPAGroupDAO.UDYNMEMB_TABLE + \" WHERE any_id=?\");\n         query.setParameter(1, user.getKey());\n \n         List<Group> result = new ArrayList<>();\n-        for (Object key : query.getResultList()) {\n-            String actualKey = key instanceof Object[]\n-                    ? (String) ((Object[]) key)[0]\n-                    : ((String) key);\n-\n-            Group group = groupDAO.find(actualKey);\n-            if (group != null && !result.contains(group)) {\n-                result.add(group);\n-            }\n-        }\n+        query.getResultList().stream().map(resultKey -> resultKey instanceof Object[]\n+                ? (String) ((Object[]) resultKey)[0]\n+                : ((String) resultKey)).\n+                forEachOrdered(actualKey -> {\n+                    Group group = groupDAO.find(actualKey.toString());\n+                    if (group == null) {\n+                    } else if (!result.contains(group)) {\n+                        result.add(group);\n+                    }\n+                });\n         return result;\n     }\n \n@@ -279,22 +279,23 @@ public void udynMembership() {\n      * required for avoiding creating of a new transaction - good for general use case but bad for the way how\n      * this test class is architected.\n      */\n-    private List<Group> findDynGroups(final AnyObject anyObject) {\n+    @SuppressWarnings(\"unchecked\")\n+    public List<Group> findDynGroups(final AnyObject anyObject) {\n         Query query = entityManager().createNativeQuery(\n                 \"SELECT group_id FROM \" + JPAGroupDAO.ADYNMEMB_TABLE + \" WHERE any_id=?\");\n         query.setParameter(1, anyObject.getKey());\n \n         List<Group> result = new ArrayList<>();\n-        for (Object key : query.getResultList()) {\n-            String actualKey = key instanceof Object[]\n-                    ? (String) ((Object[]) key)[0]\n-                    : ((String) key);\n-\n-            Group group = groupDAO.find(actualKey);\n-            if (group != null && !result.contains(group)) {\n-                result.add(group);\n-            }\n-        }\n+        query.getResultList().stream().map(resultKey -> resultKey instanceof Object[]\n+                ? (String) ((Object[]) resultKey)[0]\n+                : ((String) resultKey)).\n+                forEachOrdered(actualKey -> {\n+                    Group group = groupDAO.find(actualKey.toString());\n+                    if (group == null) {\n+                    } else if (!result.contains(group)) {\n+                        result.add(group);\n+                    }\n+                });\n         return result;\n     }\n \n@@ -336,18 +337,13 @@ public void adynMembership() {\n         // 2. verify that dynamic membership is there\n         actual = groupDAO.find(actual.getKey());\n         assertNotNull(actual);\n-        assertNotNull(actual.getADynMembership(anyTypeDAO.find(\"PRINTER\")));\n-        assertNotNull(actual.getADynMembership(anyTypeDAO.find(\"PRINTER\")).getKey());\n-        assertEquals(actual, actual.getADynMembership(anyTypeDAO.find(\"PRINTER\")).getGroup());\n+        assertNotNull(actual.getADynMembership(anyTypeDAO.find(\"PRINTER\")).get());\n+        assertNotNull(actual.getADynMembership(anyTypeDAO.find(\"PRINTER\")).get().getKey());\n+        assertEquals(actual, actual.getADynMembership(anyTypeDAO.find(\"PRINTER\")).get().getGroup());\n \n         // 3. verify that expected any objects have the created group dynamically assigned\n-        List<String> members = CollectionUtils.select(groupDAO.findADynMembers(actual), new Predicate<String>() {\n-\n-            @Override\n-            public boolean evaluate(final String object) {\n-                return \"PRINTER\".equals(anyObjectDAO.find(object).getType().getKey());\n-            }\n-        }, new ArrayList<String>());\n+        List<String> members = groupDAO.findADynMembers(actual).stream().filter(object\n+                -> \"PRINTER\".equals(anyObjectDAO.find(object).getType().getKey())).collect(Collectors.toList());\n         assertEquals(2, members.size());\n         assertEquals(\n                 new HashSet<>(Arrays.asList(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\", newAnyObjectKey)),\n@@ -357,26 +353,21 @@ public boolean evaluate(final String object) {\n         assertNotNull(anyObject);\n         Collection<Group> dynGroupMemberships = findDynGroups(anyObject);\n         assertEquals(1, dynGroupMemberships.size());\n-        assertTrue(dynGroupMemberships.contains(actual.getADynMembership(anyTypeDAO.find(\"PRINTER\")).getGroup()));\n+        assertTrue(dynGroupMemberships.contains(actual.getADynMembership(anyTypeDAO.find(\"PRINTER\")).get().getGroup()));\n \n         // 4. delete the new any object and verify that dynamic membership was updated\n         anyObjectDAO.delete(newAnyObjectKey);\n \n         anyObjectDAO.flush();\n \n         actual = groupDAO.find(actual.getKey());\n-        members = CollectionUtils.select(groupDAO.findADynMembers(actual), new Predicate<String>() {\n-\n-            @Override\n-            public boolean evaluate(final String object) {\n-                return \"PRINTER\".equals(anyObjectDAO.find(object).getType().getKey());\n-            }\n-        }, new ArrayList<String>());\n+        members = groupDAO.findADynMembers(actual).stream().filter(object\n+                -> \"PRINTER\".equals(anyObjectDAO.find(object).getType().getKey())).collect(Collectors.toList());\n         assertEquals(1, members.size());\n         assertEquals(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\", members.get(0));\n \n         // 5. delete group and verify that dynamic membership was also removed\n-        String dynMembershipKey = actual.getADynMembership(anyTypeDAO.find(\"PRINTER\")).getKey();\n+        String dynMembershipKey = actual.getADynMembership(anyTypeDAO.find(\"PRINTER\")).get().getKey();\n \n         groupDAO.delete(actual);\n "},{"sha":"16a80df4a838f371db4e364433068b4f4c31498e","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainSchemaTest.java","status":"modified","additions":18,"deletions":25,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -25,14 +25,12 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import java.util.UUID;\n+import java.util.stream.Collectors;\n import javax.persistence.EntityExistsException;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n@@ -81,14 +79,9 @@ public class PlainSchemaTest extends AbstractTest {\n \n     @BeforeClass\n     public static void setAuthContext() {\n-        List<GrantedAuthority> authorities = CollectionUtils.collect(StandardEntitlement.values(),\n-                new Transformer<String, GrantedAuthority>() {\n-\n-            @Override\n-            public GrantedAuthority transform(final String entitlement) {\n-                return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n-            }\n-        }, new ArrayList<GrantedAuthority>());\n+        List<GrantedAuthority> authorities = StandardEntitlement.values().stream().\n+                map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n+                collect(Collectors.toList());\n \n         UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n                 new org.springframework.security.core.userdetails.User(\n@@ -124,7 +117,7 @@ public void deleteFullname() {\n         // fullname is mapped as ConnObjectKey for ws-target-resource-2, need to swap it otherwise validation errors \n         // will be raised\n         for (MappingItem item : resourceDAO.find(\"ws-target-resource-2\").\n-                getProvision(anyTypeDAO.findUser()).getMapping().getItems()) {\n+                getProvision(anyTypeDAO.findUser()).get().getMapping().getItems()) {\n \n             if (\"fullname\".equals(item.getIntAttrName())) {\n                 item.setConnObjectKey(false);\n@@ -140,10 +133,10 @@ public void deleteFullname() {\n         // check for associated mappings\n         Set<MappingItem> mapItems = new HashSet<>();\n         for (ExternalResource resource : resourceDAO.findAll()) {\n-            if (resource.getProvision(anyTypeDAO.findUser()) != null\n-                    && resource.getProvision(anyTypeDAO.findUser()).getMapping() != null) {\n+            if (resource.getProvision(anyTypeDAO.findUser()).isPresent()\n+                    && resource.getProvision(anyTypeDAO.findUser()).get().getMapping() != null) {\n \n-                for (MappingItem mapItem : resource.getProvision(anyTypeDAO.findUser()).getMapping().getItems()) {\n+                for (MappingItem mapItem : resource.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems()) {\n                     if (schema.getKey().equals(mapItem.getIntAttrName())) {\n                         mapItems.add(mapItem);\n                     }\n@@ -166,10 +159,10 @@ public void deleteFullname() {\n         // check for mappings deletion\n         mapItems = new HashSet<>();\n         for (ExternalResource resource : resourceDAO.findAll()) {\n-            if (resource.getProvision(anyTypeDAO.findUser()) != null\n-                    && resource.getProvision(anyTypeDAO.findUser()).getMapping() != null) {\n+            if (resource.getProvision(anyTypeDAO.findUser()).isPresent()\n+                    && resource.getProvision(anyTypeDAO.findUser()).get().getMapping() != null) {\n \n-                for (MappingItem mapItem : resource.getProvision(anyTypeDAO.findUser()).getMapping().getItems()) {\n+                for (MappingItem mapItem : resource.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems()) {\n                     if (\"fullname\".equals(mapItem.getIntAttrName())) {\n                         mapItems.add(mapItem);\n                     }\n@@ -180,8 +173,8 @@ public void deleteFullname() {\n \n         assertNull(plainAttrDAO.find(\"01f22fbd-b672-40af-b528-686d9b27ebc4\", UPlainAttr.class));\n         assertNull(plainAttrDAO.find(UUID.randomUUID().toString(), UPlainAttr.class));\n-        assertNull(userDAO.findByUsername(\"rossini\").getPlainAttr(\"fullname\"));\n-        assertNull(userDAO.findByUsername(\"vivaldi\").getPlainAttr(\"fullname\"));\n+        assertFalse(userDAO.findByUsername(\"rossini\").getPlainAttr(\"fullname\").isPresent());\n+        assertFalse(userDAO.findByUsername(\"vivaldi\").getPlainAttr(\"fullname\").isPresent());\n     }\n \n     @Test\n@@ -193,10 +186,10 @@ public void deleteSurname() {\n         // check for associated mappings\n         Set<MappingItem> mappings = new HashSet<>();\n         for (ExternalResource resource : resourceDAO.findAll()) {\n-            if (resource.getProvision(anyTypeDAO.findUser()) != null\n-                    && resource.getProvision(anyTypeDAO.findUser()).getMapping() != null) {\n+            if (resource.getProvision(anyTypeDAO.findUser()).isPresent()\n+                    && resource.getProvision(anyTypeDAO.findUser()).get().getMapping() != null) {\n \n-                for (MappingItem mapItem : resource.getProvision(anyTypeDAO.findUser()).getMapping().getItems()) {\n+                for (MappingItem mapItem : resource.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems()) {\n                     if (schema.getKey().equals(mapItem.getIntAttrName())) {\n                         mappings.add(mapItem);\n                     }\n@@ -218,14 +211,14 @@ public void deleteSurname() {\n     @Test\n     public void deleteFirstname() {\n         assertEquals(5, resourceDAO.find(\"resource-db-pull\").\n-                getProvision(anyTypeDAO.findUser()).getMapping().getItems().size());\n+                getProvision(anyTypeDAO.findUser()).get().getMapping().getItems().size());\n \n         plainSchemaDAO.delete(\"firstname\");\n         assertNull(plainSchemaDAO.find(\"firstname\"));\n \n         plainSchemaDAO.flush();\n \n         assertEquals(4, resourceDAO.find(\"resource-db-pull\").\n-                getProvision(anyTypeDAO.findUser()).getMapping().getItems().size());\n+                getProvision(anyTypeDAO.findUser()).get().getMapping().getItems().size());\n     }\n }"},{"sha":"de6d91123950c28daa26c21a3eb11c1a27fee27e","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":28,"deletions":39,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -24,11 +24,10 @@\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -40,7 +39,7 @@\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n@@ -156,7 +155,7 @@ public void save() {\n         // save the resource\n         ExternalResource actual = resourceDAO.save(resource);\n         assertNotNull(actual);\n-        assertNotNull(actual.getProvision(anyTypeDAO.findUser()).getMapping());\n+        assertNotNull(actual.getProvision(anyTypeDAO.findUser()).get().getMapping());\n \n         resourceDAO.flush();\n         resourceDAO.detach(actual);\n@@ -184,7 +183,7 @@ public void save() {\n         assertTrue(resource.getConnector().equals(connector));\n \n         // check mappings\n-        List<? extends MappingItem> items = resource.getProvision(anyTypeDAO.findUser()).getMapping().getItems();\n+        List<? extends MappingItem> items = resource.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems();\n         assertNotNull(items);\n         assertEquals(5, items.size());\n \n@@ -213,10 +212,7 @@ public void delete() {\n         List<User> users = userDAO.findByResource(resource);\n         assertNotNull(users);\n \n-        Set<String> userKeys = new HashSet<>();\n-        for (User user : users) {\n-            userKeys.add(user.getKey());\n-        }\n+        Set<String> userKeys = users.stream().map(Entity::getKey).collect(Collectors.toSet());\n         // -------------------------------------\n \n         // Get tasks\n@@ -235,57 +231,50 @@ public void delete() {\n         assertNull(\"delete did not work\", actual);\n \n         // resource must be not referenced any more from users\n-        for (String key : userKeys) {\n-            User actualUser = userDAO.find(key);\n-            assertNotNull(actualUser);\n-            for (ExternalResource res : userDAO.findAllResources(actualUser)) {\n-                assertFalse(res.getKey().equalsIgnoreCase(resource.getKey()));\n-            }\n-        }\n+        userKeys.stream().\n+                map(key -> userDAO.find(key)).\n+                map(actualUser -> {\n+                    assertNotNull(actualUser);\n+                    return actualUser;\n+                }).forEachOrdered((actualUser) -> {\n+            userDAO.findAllResources(actualUser).\n+                    forEach(res -> assertFalse(res.getKey().equalsIgnoreCase(resource.getKey())));\n+        });\n \n         // resource must be not referenced any more from the connector\n         ConnInstance actualConnector = connInstanceDAO.find(connector.getKey());\n         assertNotNull(actualConnector);\n-        for (ExternalResource res : actualConnector.getResources()) {\n-            assertFalse(res.getKey().equalsIgnoreCase(resource.getKey()));\n-        }\n+        actualConnector.getResources().\n+                forEach(res -> assertFalse(res.getKey().equalsIgnoreCase(resource.getKey())));\n \n         // there must be no tasks\n-        for (PropagationTask task : propagationTasks) {\n-            assertNull(taskDAO.find(task.getKey()));\n-        }\n+        propagationTasks.forEach(task -> assertNull(taskDAO.find(task.getKey())));\n     }\n \n     @Test\n     public void emptyMapping() {\n         ExternalResource ldap = resourceDAO.find(\"resource-ldap\");\n         assertNotNull(ldap);\n-        assertNotNull(ldap.getProvision(anyTypeDAO.findUser()).getMapping());\n-        assertNotNull(ldap.getProvision(anyTypeDAO.findGroup()).getMapping());\n+        assertNotNull(ldap.getProvision(anyTypeDAO.findUser()).get().getMapping());\n+        assertNotNull(ldap.getProvision(anyTypeDAO.findGroup()).get().getMapping());\n \n         // need to avoid any class not defined in this Maven module\n         ldap.getPropagationActionsClassNames().clear();\n \n-        List<? extends MappingItem> items = ldap.getProvision(anyTypeDAO.findGroup()).getMapping().getItems();\n+        List<? extends MappingItem> items = ldap.getProvision(anyTypeDAO.findGroup()).get().getMapping().getItems();\n         assertNotNull(items);\n         assertFalse(items.isEmpty());\n-        List<String> itemKeys = new ArrayList<>(items.size());\n-        for (MappingItem item : items) {\n-            itemKeys.add(item.getKey());\n-        }\n+        List<String> itemKeys = items.stream().map(Entity::getKey).collect(Collectors.toList());\n \n-        Provision groupProvision = ldap.getProvision(anyTypeDAO.findGroup());\n-        for (VirSchema schema : virSchemaDAO.findByProvision(groupProvision)) {\n-            virSchemaDAO.delete(schema.getKey());\n-        }\n+        Provision groupProvision = ldap.getProvision(anyTypeDAO.findGroup()).get();\n+        virSchemaDAO.findByProvision(groupProvision).\n+                forEach(schema -> virSchemaDAO.delete(schema.getKey()));\n         ldap.getProvisions().remove(groupProvision);\n \n         resourceDAO.save(ldap);\n         resourceDAO.flush();\n \n-        for (String itemKey : itemKeys) {\n-            assertNull(entityManager().find(JPAMappingItem.class, itemKey));\n-        }\n+        itemKeys.forEach(itemKey -> assertNull(entityManager().find(JPAMappingItem.class, itemKey)));\n     }\n \n     @Test\n@@ -314,19 +303,19 @@ public void issue243() {\n         ExternalResource csv = resourceDAO.find(\"resource-csv\");\n         assertNotNull(csv);\n \n-        int origMapItems = csv.getProvision(anyTypeDAO.findUser()).getMapping().getItems().size();\n+        int origMapItems = csv.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems().size();\n \n         MappingItem newMapItem = entityFactory.newEntity(MappingItem.class);\n         newMapItem.setIntAttrName(\"TEST\");\n         newMapItem.setExtAttrName(\"TEST\");\n         newMapItem.setPurpose(MappingPurpose.PROPAGATION);\n-        csv.getProvision(anyTypeDAO.findUser()).getMapping().add(newMapItem);\n+        csv.getProvision(anyTypeDAO.findUser()).get().getMapping().add(newMapItem);\n \n         resourceDAO.save(csv);\n         resourceDAO.flush();\n \n         csv = resourceDAO.find(\"resource-csv\");\n         assertNotNull(csv);\n-        assertEquals(origMapItems + 1, csv.getProvision(anyTypeDAO.findUser()).getMapping().getItems().size());\n+        assertEquals(origMapItems + 1, csv.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems().size());\n     }\n }"},{"sha":"074488f21eccdffdb59af33965b5d036e9a6e11c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/UserTest.java","status":"modified","additions":8,"deletions":22,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -28,8 +28,6 @@\n import java.util.Date;\n import java.util.List;\n import java.util.UUID;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n@@ -181,8 +179,8 @@ public void membershipWithAttrs() {\n \n         // replace 'artDirector' with 'additional', which defines type extension with class 'other' and 'csv':\n         // now it works\n-        membership = user.getMembership(groupDAO.findByName(\"artDirector\").getKey());\n-        user.remove(user.getPlainAttr(\"obscure\", membership));\n+        membership = user.getMembership(groupDAO.findByName(\"artDirector\").getKey()).get();\n+        user.remove(user.getPlainAttr(\"obscure\", membership).get());\n         user.getMemberships().remove(membership);\n         membership.setLeftEnd(null);\n \n@@ -204,26 +202,14 @@ public void membershipWithAttrs() {\n         user = userDAO.findByUsername(\"vivaldi\");\n         assertEquals(1, user.getMemberships().size());\n \n-        final UMembership newM = user.getMembership(groupDAO.findByName(\"additional\").getKey());\n+        final UMembership newM = user.getMembership(groupDAO.findByName(\"additional\").getKey()).get();\n         assertEquals(1, user.getPlainAttrs(newM).size());\n \n-        assertNull(user.getPlainAttr(\"obscure\").getMembership());\n+        assertNull(user.getPlainAttr(\"obscure\").get().getMembership());\n         assertEquals(2, user.getPlainAttrs(\"obscure\").size());\n-        assertTrue(user.getPlainAttrs(\"obscure\").contains(user.getPlainAttr(\"obscure\")));\n-        assertTrue(IterableUtils.matchesAny(user.getPlainAttrs(\"obscure\"), new Predicate<UPlainAttr>() {\n-\n-            @Override\n-            public boolean evaluate(final UPlainAttr object) {\n-                return object.getMembership() == null;\n-            }\n-        }));\n-        assertTrue(IterableUtils.matchesAny(user.getPlainAttrs(\"obscure\"), new Predicate<UPlainAttr>() {\n-\n-            @Override\n-            public boolean evaluate(final UPlainAttr object) {\n-                return newM.equals(object.getMembership());\n-            }\n-        }));\n+        assertTrue(user.getPlainAttrs(\"obscure\").contains(user.getPlainAttr(\"obscure\").get()));\n+        assertTrue(user.getPlainAttrs(\"obscure\").stream().anyMatch(plainAttr -> plainAttr.getMembership() == null));\n+        assertTrue(user.getPlainAttrs(\"obscure\").stream().anyMatch(plainAttr -> newM.equals(plainAttr.getMembership())));\n     }\n \n     /**\n@@ -251,7 +237,7 @@ public void issueSYNCOPE800() {\n         User owner = userDAO.findByUsername(\"vivaldi\");\n         assertNotNull(\"did not get expected user\", owner);\n \n-        String firstname = owner.getPlainAttr(\"firstname\").getValuesAsStrings().iterator().next();\n+        String firstname = owner.getPlainAttr(\"firstname\").get().getValuesAsStrings().iterator().next();\n         assertNotNull(firstname);\n \n         // search by ksuffix derived attribute"},{"sha":"21d9c5aff5996de0a2a3c2d90a530711da98ab3c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/VirSchemaTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -48,7 +48,7 @@ public class VirSchemaTest extends AbstractTest {\n \n     @Test\n     public void deal() {\n-        Provision provision = resourceDAO.find(\"ws-target-resource-1\").getProvision(anyTypeDAO.findUser());\n+        Provision provision = resourceDAO.find(\"ws-target-resource-1\").getProvision(anyTypeDAO.findUser()).get();\n         assertNotNull(provision);\n         assertTrue(virSchemaDAO.findByProvision(provision).isEmpty());\n \n@@ -66,7 +66,7 @@ public void deal() {\n         assertTrue(virSchema.isReadonly());\n         assertEquals(\"EXT_ATTR\", virSchema.getExtAttrName());\n \n-        provision = resourceDAO.find(\"ws-target-resource-1\").getProvision(anyTypeDAO.findUser());\n+        provision = resourceDAO.find(\"ws-target-resource-1\").getProvision(anyTypeDAO.findUser()).get();\n         assertNotNull(provision);\n         assertFalse(virSchemaDAO.findByProvision(provision).isEmpty());\n         assertTrue(virSchemaDAO.findByProvision(provision).contains(virSchema));"},{"sha":"9f085d44069d5424e633a2690cc5bab7a46362d0","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/XMLContentExporterTest.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FXMLContentExporterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FXMLContentExporterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FXMLContentExporterTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,10 +22,8 @@\n import static org.junit.Assert.assertTrue;\n \n import java.nio.charset.Charset;\n-import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.stream.Collectors;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.io.output.ByteArrayOutputStream;\n import org.apache.commons.lang3.StringUtils;\n@@ -50,15 +48,9 @@ public void issueSYNCOPE1128() throws Exception {\n         String exported = baos.toString(Charset.defaultCharset());\n         assertTrue(StringUtils.isNotBlank(exported));\n \n-        List<String> realms = CollectionUtils.select(\n-                IOUtils.readLines(IOUtils.toInputStream(exported, Charset.defaultCharset()), Charset.defaultCharset()),\n-                new Predicate<String>() {\n-\n-            @Override\n-            public boolean evaluate(final String row) {\n-                return row.startsWith(\"<REALM\");\n-            }\n-        }, new ArrayList<String>());\n+        List<String> realms = IOUtils.readLines(\n+                IOUtils.toInputStream(exported, Charset.defaultCharset()), Charset.defaultCharset()).stream().\n+                filter(row -> row.startsWith(\"<REALM\")).collect(Collectors.toList());\n         assertEquals(4, realms.size());\n         assertTrue(realms.get(0).contains(\"NAME=\\\"/\\\"\"));\n         assertTrue(realms.get(1).contains(\"NAME=\\\"two\\\"\"));"},{"sha":"90a5d9e377a6deca21b4140b265b8c4a2d884f49","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -1331,15 +1331,15 @@ we are happy to inform you that the password request was successfully executed f\n &lt;/html&gt;\"/>\n   <MailTemplate id=\"test\"/>\n   <MailTemplate id=\"optin\"\n-                textTemplate=\"Hi ${user.getPlainAttr(&quot;firstname&quot;).values[0]} ${user.getPlainAttr(&quot;surname&quot;).values[0]}, welcome to Syncope!\n+                textTemplate=\"Hi ${user.getPlainAttr(&quot;firstname&quot;).get().values[0]} ${user.getPlainAttr(&quot;surname&quot;).get().values[0]}, welcome to Syncope!\n \n Your username is ${user.username}.\n-Your email address is ${user.getPlainAttr(&quot;email&quot;).values[0]}.\n-Your email address inside a link: http://localhost/?email=${user.getPlainAttr(&quot;email&quot;).values[0].replace('@', '%40')}\n+Your email address is ${user.getPlainAttr(&quot;email&quot;).get().values[0]}.\n+Your email address inside a link: http://localhost/?email=${user.getPlainAttr(&quot;email&quot;).get().values[0].replace('@', '%40')}\n \n This message was sent to the following recipients:&#10;\n $$ for (recipient: recipients) {&#10;\n-  * ${recipient.getPlainAttr(&quot;email&quot;).values[0]}&#10;\n+  * ${recipient.getPlainAttr(&quot;email&quot;).get().values[0]}&#10;\n $$ }&#10;\n &#10;\n because one of the following events occurred:&#10;\n@@ -1355,19 +1355,19 @@ $$ }&#10;\n $$ }&#10;\"\n                 htmlTemplate=\"&lt;html&gt;\n &lt;body&gt;\n-&lt;h3&gt;Hi ${user.getPlainAttr(&quot;firstname&quot;).values[0]} ${user.getPlainAttr(&quot;surname&quot;).values[0]}, welcome to Syncope!&lt;/h3&gt;\n+&lt;h3&gt;Hi ${user.getPlainAttr(&quot;firstname&quot;).get().values[0]} ${user.getPlainAttr(&quot;surname&quot;).get().values[0]}, welcome to Syncope!&lt;/h3&gt;\n \n &lt;p&gt;\n    Your username is ${user.username}.&lt;br/&gt;\n-   Your email address is ${user.getPlainAttr(&quot;email&quot;).values[0]}.\n-   Your email address inside a &lt;a href=&quot;http://localhost/?email=${user.getPlainAttr(&quot;email&quot;).values[0].replace('@', '%40')}&quot;&gt;link&lt;/a&gt;.\n+   Your email address is ${user.getPlainAttr(&quot;email&quot;).get().values[0]}.\n+   Your email address inside a &lt;a href=&quot;http://localhost/?email=${user.getPlainAttr(&quot;email&quot;).get().values[0].replace('@', '%40')}&quot;&gt;link&lt;/a&gt;.\n &lt;/p&gt;\n \n &lt;p&gt;\n     This message was sent to the following recipients:\n &lt;ul&gt;&#10;\n $$ for (recipient: recipients) {&#10;Na\n-  &lt;li&gt;${recipient.getPlainAttr(&quot;email&quot;).values[0]}&lt;/li&gt;&#10;\n+  &lt;li&gt;${recipient.getPlainAttr(&quot;email&quot;).get().values[0]}&lt;/li&gt;&#10;\n $$ }&#10;\n &lt;/ul&gt;&#10;\n "},{"sha":"338a94e5bb3e9c862ce02a4b16e24815697cd04f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/MappingManager.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.provisioning.api;\n \n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -42,7 +43,7 @@ public interface MappingManager {\n      * @param provision provision information\n      * @return connObjectKey internal value\n      */\n-    String getConnObjectKeyValue(Any<?> any, Provision provision);\n+    Optional<String> getConnObjectKeyValue(Any<?> any, Provision provision);\n \n     /**\n      * Get connObjectKey internal value."},{"sha":"264df5d5c308e222760c00900c2a667ac7f2d3a1","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/utils/EntityUtils.java","status":"removed","additions":0,"deletions":41,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa093b39c7539f5b74a4a3c0a9e31fa4cd475ecc/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FEntityUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa093b39c7539f5b74a4a3c0a9e31fa4cd475ecc/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FEntityUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FEntityUtils.java?ref=fa093b39c7539f5b74a4a3c0a9e31fa4cd475ecc","patch":"@@ -1,41 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.api.utils;\n-\n-import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n-\n-public final class EntityUtils {\n-\n-    public static <E extends Entity> Transformer<E, String> keyTransformer() {\n-        return new Transformer<E, String>() {\n-\n-            @Override\n-            public String transform(final E input) {\n-                return input.getKey();\n-            }\n-        };\n-    }\n-\n-    /**\n-     * Private default constructor, for static-only classes.\n-     */\n-    private EntityUtils() {\n-    }\n-}"},{"sha":"c4de5492e6d6e9e9713f564689bf036d9a536f87","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/utils/RealmUtils.java","status":"modified","additions":11,"deletions":18,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,9 +21,8 @@\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n \n public final class RealmUtils {\n \n@@ -52,9 +51,7 @@ public static boolean normalizingAddTo(final Set<String> realms, final String ne\n     public static Set<String> normalize(final Collection<String> realms) {\n         Set<String> normalized = new HashSet<>();\n         if (realms != null) {\n-            for (String realm : realms) {\n-                normalizingAddTo(normalized, realm);\n-            }\n+            realms.forEach(realm -> normalizingAddTo(normalized, realm));\n         }\n \n         return normalized;\n@@ -69,22 +66,16 @@ private static class StartsWithPredicate implements Predicate<String> {\n         }\n \n         @Override\n-        public boolean evaluate(final String realm) {\n-            return IterableUtils.matchesAny(targets, new Predicate<String>() {\n-\n-                @Override\n-                public boolean evaluate(final String target) {\n-                    return realm.startsWith(target);\n-                }\n-            });\n+        public boolean test(final String realm) {\n+            return targets.stream().anyMatch(target -> realm.startsWith(target));\n         }\n \n     }\n \n     public static class DynRealmsPredicate implements Predicate<String> {\n \n         @Override\n-        public boolean evaluate(final String realm) {\n+        public boolean test(final String realm) {\n             return !realm.startsWith(\"/\");\n         }\n     }\n@@ -95,11 +86,13 @@ public static Set<String> getEffective(final Set<String> allowedRealms, final St\n         requested.add(requestedRealm);\n \n         Set<String> effective = new HashSet<>();\n-        CollectionUtils.select(requested, new StartsWithPredicate(allowed), effective);\n-        CollectionUtils.select(allowed, new StartsWithPredicate(requested), effective);\n+        effective.addAll(requested.stream().filter(new StartsWithPredicate(allowed)).collect(Collectors.toSet()));\n+        effective.addAll(allowed.stream().filter(new StartsWithPredicate(requested)).collect(Collectors.toSet()));\n \n         // includes dynamic realms\n-        CollectionUtils.select(allowedRealms, new DynRealmsPredicate(), effective);\n+        if (allowedRealms != null) {\n+            effective.addAll(allowedRealms.stream().filter(new DynRealmsPredicate()).collect(Collectors.toSet()));\n+        }\n \n         return effective;\n     }"},{"sha":"f1c463dbf8455c9bc7c36641ba6f12ebe95a50a7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java","status":"modified","additions":10,"deletions":17,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,14 +20,11 @@\n \n import java.io.File;\n import java.net.URI;\n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n@@ -108,12 +105,12 @@ public ConnectorFacadeProxy(final ConnInstance connInstance) {\n \n         // set connector configuration according to conninstance's\n         ConfigurationProperties properties = apiConfig.getConfigurationProperties();\n-        for (ConnConfProperty property : connInstance.getConf()) {\n-            if (property.getValues() != null && !property.getValues().isEmpty()) {\n-                properties.setPropertyValue(property.getSchema().getName(),\n-                        getPropertyValue(property.getSchema().getType(), property.getValues()));\n-            }\n-        }\n+        connInstance.getConf().stream().\n+                filter(property -> (property.getValues() != null && !property.getValues().isEmpty())).\n+                forEachOrdered(property -> {\n+                    properties.setPropertyValue(property.getSchema().getName(),\n+                            getPropertyValue(property.getSchema().getType(), property.getValues()));\n+                });\n \n         // set pooling configuration (if supported) according to conninstance's\n         if (connInstance.getPoolConf() != null) {\n@@ -476,13 +473,9 @@ public void search(\n         if (pagedResultsCookie != null) {\n             builder.setPagedResultsCookie(pagedResultsCookie);\n         }\n-        builder.setSortKeys(CollectionUtils.collect(orderBy, new Transformer<OrderByClause, SortKey>() {\n-\n-            @Override\n-            public SortKey transform(final OrderByClause clause) {\n-                return new SortKey(clause.getField(), clause.getDirection() == OrderByClause.Direction.ASC);\n-            }\n-        }, new ArrayList<SortKey>(orderBy.size())));\n+        builder.setSortKeys(orderBy.stream().map(clause\n+                -> new SortKey(clause.getField(), clause.getDirection() == OrderByClause.Direction.ASC)).\n+                collect(Collectors.toList()));\n \n         builder.setAttributesToGet(options.getAttributesToGet());\n "},{"sha":"0113ebf481edc5763eecebfff06df92b25a24052","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,8 +22,7 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.lang3.tuple.ImmutablePair;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n@@ -84,7 +83,7 @@ public Pair<String, List<PropagationStatus>> create(\n                 excludedResources);\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n-        return new ImmutablePair<>(created.getResult(), propagationReporter.getStatuses());\n+        return Pair.of(created.getResult(), propagationReporter.getStatuses());\n     }\n \n     @Override\n@@ -111,7 +110,7 @@ public Pair<String, List<PropagationStatus>> update(\n                 excludedResources);\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n-        return new ImmutablePair<>(updated.getResult(), propagationReporter.getStatuses());\n+        return Pair.of(updated.getResult(), propagationReporter.getStatuses());\n     }\n \n     @Override\n@@ -189,7 +188,9 @@ public List<PropagationStatus> deprovision(\n                 AnyTypeKind.ANY_OBJECT,\n                 key,\n                 propByRes,\n-                CollectionUtils.removeAll(anyObjectDAO.findAllResourceKeys(key), resources));\n+                anyObjectDAO.findAllResourceKeys(key).stream().\n+                        filter(resource -> !resources.contains(resource)).\n+                        collect(Collectors.toList()));\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n         return propagationReporter.getStatuses();"},{"sha":"141561bc017be93680bf0e9edaa884baee09eb01","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":27,"deletions":27,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,11 +23,11 @@\n import java.util.Map;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n+import java.util.stream.Collectors;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -81,7 +81,7 @@ public Pair<String, List<PropagationStatus>> create(final GroupTO groupTO, final\n                 Collections.<String>emptySet());\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n-        return new ImmutablePair<>(created.getResult(), propagationReporter.getStatuses());\n+        return Pair.of(created.getResult(), propagationReporter.getStatuses());\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n@@ -95,9 +95,9 @@ public Pair<String, List<PropagationStatus>> create(\n         WorkflowResult<String> created = gwfAdapter.create(groupTO);\n \n         // see ConnObjectUtils#getAnyTOFromConnObject for GroupOwnerSchema\n-        AttrTO groupOwner = groupTO.getPlainAttr(StringUtils.EMPTY);\n-        if (groupOwner != null) {\n-            groupOwnerMap.put(created.getResult(), groupOwner.getValues().iterator().next());\n+        Optional<AttrTO> groupOwner = groupTO.getPlainAttr(StringUtils.EMPTY);\n+        if (groupOwner.isPresent()) {\n+            groupOwnerMap.put(created.getResult(), groupOwner.get().getValues().iterator().next());\n         }\n \n         List<PropagationTask> tasks = propagationManager.getCreateTasks(\n@@ -108,7 +108,7 @@ public Pair<String, List<PropagationStatus>> create(\n                 excludedResources);\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n-        return new ImmutablePair<>(created.getResult(), propagationReporter.getStatuses());\n+        return Pair.of(created.getResult(), propagationReporter.getStatuses());\n     }\n \n     @Override\n@@ -133,7 +133,7 @@ public Pair<String, List<PropagationStatus>> update(\n                 excludedResources);\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n-        return new ImmutablePair<>(updated.getResult(), propagationReporter.getStatuses());\n+        return Pair.of(updated.getResult(), propagationReporter.getStatuses());\n     }\n \n     @Override\n@@ -150,24 +150,22 @@ public List<PropagationStatus> delete(\n \n         // Generate propagation tasks for deleting users and any objects from group resources, \n         // if they are on those resources only because of the reason being deleted (see SYNCOPE-357)\n-        for (Map.Entry<String, PropagationByResource> entry\n-                : groupDataBinder.findUsersWithTransitiveResources(key).entrySet()) {\n-\n-            tasks.addAll(propagationManager.getDeleteTasks(\n-                    AnyTypeKind.USER,\n-                    entry.getKey(),\n-                    entry.getValue(),\n-                    excludedResources));\n-        }\n-        for (Map.Entry<String, PropagationByResource> entry\n-                : groupDataBinder.findAnyObjectsWithTransitiveResources(key).entrySet()) {\n-\n-            tasks.addAll(propagationManager.getDeleteTasks(\n-                    AnyTypeKind.ANY_OBJECT,\n-                    entry.getKey(),\n-                    entry.getValue(),\n-                    excludedResources));\n-        }\n+        groupDataBinder.findUsersWithTransitiveResources(key).entrySet().\n+                forEach(entry -> {\n+                    tasks.addAll(propagationManager.getDeleteTasks(\n+                            AnyTypeKind.USER,\n+                            entry.getKey(),\n+                            entry.getValue(),\n+                            excludedResources));\n+                });\n+        groupDataBinder.findAnyObjectsWithTransitiveResources(key).entrySet().\n+                forEach(entry -> {\n+                    tasks.addAll(propagationManager.getDeleteTasks(\n+                            AnyTypeKind.ANY_OBJECT,\n+                            entry.getKey(),\n+                            entry.getValue(),\n+                            excludedResources));\n+                });\n \n         // Generate propagation tasks for deleting this group from resources\n         tasks.addAll(propagationManager.getDeleteTasks(\n@@ -220,7 +218,9 @@ public List<PropagationStatus> deprovision(\n                 AnyTypeKind.GROUP,\n                 key,\n                 propByRes,\n-                CollectionUtils.removeAll(groupDAO.findAllResourceKeys(key), resources));\n+                groupDAO.findAllResourceKeys(key).stream().\n+                        filter(resource -> !resources.contains(resource)).\n+                        collect(Collectors.toList()));\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n         return propagationReporter.getStatuses();"},{"sha":"eda96c47cb201bfa031e2c278c20eb7e341e8230","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":18,"deletions":22,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,8 +23,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n@@ -109,7 +108,7 @@ public Pair<String, List<PropagationStatus>> create(\n                 excludedResources);\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n-        return new ImmutablePair<>(created.getResult().getLeft(), propagationReporter.getStatuses());\n+        return Pair.of(created.getResult().getLeft(), propagationReporter.getStatuses());\n     }\n \n     @Override\n@@ -119,7 +118,7 @@ public Pair<String, List<PropagationStatus>> update(final UserPatch userPatch, f\n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n-        return new ImmutablePair<>(updated.getResult().getLeft().getKey(), propagationReporter.getStatuses());\n+        return Pair.of(updated.getResult().getLeft().getKey(), propagationReporter.getStatuses());\n     }\n \n     @Override\n@@ -148,9 +147,9 @@ public Pair<String, List<PropagationStatus>> update(\n             result.setStatus(ProvisioningReport.Status.FAILURE);\n             result.setMessage(\"Update failed, trying to pull status anyway (if configured)\\n\" + e.getMessage());\n \n-            updated = new WorkflowResult<Pair<UserPatch, Boolean>>(\n-                    new ImmutablePair<>(userPatch, false), new PropagationByResource(),\n-                    new HashSet<String>());\n+            updated = new WorkflowResult<>(\n+                    Pair.of(userPatch, false), new PropagationByResource(),\n+                    new HashSet<>());\n         }\n \n         if (enabled != null) {\n@@ -178,7 +177,7 @@ public Pair<String, List<PropagationStatus>> update(\n                 updated, updated.getResult().getLeft().getPassword() != null, excludedResources);\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n-        return new ImmutablePair<>(updated.getResult().getLeft().getKey(), propagationReporter.getStatuses());\n+        return Pair.of(updated.getResult().getLeft().getKey(), propagationReporter.getStatuses());\n     }\n \n     @Override\n@@ -234,7 +233,7 @@ public Pair<String, List<PropagationStatus>> activate(\n                 ? uwfAdapter.activate(statusPatch.getKey(), statusPatch.getToken())\n                 : new WorkflowResult<>(statusPatch.getKey(), null, statusPatch.getType().name().toLowerCase());\n \n-        return new ImmutablePair<>(updated.getResult(), propagateStatus(statusPatch, nullPriorityAsync));\n+        return Pair.of(updated.getResult(), propagateStatus(statusPatch, nullPriorityAsync));\n     }\n \n     @Override\n@@ -245,7 +244,7 @@ public Pair<String, List<PropagationStatus>> reactivate(\n                 ? uwfAdapter.reactivate(statusPatch.getKey())\n                 : new WorkflowResult<>(statusPatch.getKey(), null, statusPatch.getType().name().toLowerCase());\n \n-        return new ImmutablePair<>(updated.getResult(), propagateStatus(statusPatch, nullPriorityAsync));\n+        return Pair.of(updated.getResult(), propagateStatus(statusPatch, nullPriorityAsync));\n     }\n \n     @Override\n@@ -256,7 +255,7 @@ public Pair<String, List<PropagationStatus>> suspend(\n                 ? uwfAdapter.suspend(statusPatch.getKey())\n                 : new WorkflowResult<>(statusPatch.getKey(), null, statusPatch.getType().name().toLowerCase());\n \n-        return new ImmutablePair<>(updated.getResult(), propagateStatus(statusPatch, nullPriorityAsync));\n+        return Pair.of(updated.getResult(), propagateStatus(statusPatch, nullPriorityAsync));\n     }\n \n     protected List<PropagationStatus> propagateStatus(\n@@ -288,7 +287,7 @@ public void internalSuspend(final String key) {\n \n             List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n                     new WorkflowResult<Pair<UserPatch, Boolean>>(\n-                            new ImmutablePair<>(userPatch, Boolean.FALSE),\n+                            Pair.of(userPatch, Boolean.FALSE),\n                             updated.getLeft().getPropByRes(), updated.getLeft().getPerformedTasks()));\n             taskExecutor.execute(tasks, false);\n         }\n@@ -304,14 +303,9 @@ public List<PropagationStatus> provision(\n \n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(key);\n-        userPatch.getResources().addAll(CollectionUtils.collect(resources,\n-                new Transformer<String, StringPatchItem>() {\n-\n-            @Override\n-            public StringPatchItem transform(final String input) {\n-                return new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(input).build();\n-            }\n-        }, new HashSet<StringPatchItem>()));\n+        userPatch.getResources().addAll(resources.stream().map(resource\n+                -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n+                collect(Collectors.toSet()));\n \n         if (changePwd) {\n             PasswordPatch passwordPatch = new PasswordPatch();\n@@ -324,7 +318,7 @@ public StringPatchItem transform(final String input) {\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n-        WorkflowResult<Pair<UserPatch, Boolean>> wfResult = new WorkflowResult<Pair<UserPatch, Boolean>>(\n+        WorkflowResult<Pair<UserPatch, Boolean>> wfResult = new WorkflowResult<>(\n                 ImmutablePair.of(userPatch, (Boolean) null), propByRes, \"update\");\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(wfResult, changePwd, null);\n@@ -344,7 +338,9 @@ public List<PropagationStatus> deprovision(\n                 AnyTypeKind.USER,\n                 key,\n                 propByRes,\n-                CollectionUtils.removeAll(userDAO.findAllResourceKeys(key), resources));\n+                userDAO.findAllResourceKeys(key).stream().\n+                        filter(resource -> !resources.contains(resource)).\n+                        collect(Collectors.toList()));\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n         return propagationReporter.getStatuses();"},{"sha":"1597b1145362c2d6fd45d65ec88e755ee88e81e8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":55,"deletions":54,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,9 +22,8 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.ListUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.reflect.FieldUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -159,26 +158,26 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n             try {\n                 Pair<String, Attribute> preparedAttr = prepareAttr(provision, mapItem, any, password);\n                 if (preparedAttr != null) {\n-                    if (preparedAttr.getKey() != null) {\n-                        connObjectKey = preparedAttr.getKey();\n+                    if (preparedAttr.getLeft() != null) {\n+                        connObjectKey = preparedAttr.getLeft();\n                     }\n \n-                    if (preparedAttr.getValue() != null) {\n-                        Attribute alreadyAdded = AttributeUtil.find(preparedAttr.getValue().getName(), attributes);\n+                    if (preparedAttr.getRight() != null) {\n+                        Attribute alreadyAdded = AttributeUtil.find(preparedAttr.getRight().getName(), attributes);\n \n                         if (alreadyAdded == null) {\n-                            attributes.add(preparedAttr.getValue());\n+                            attributes.add(preparedAttr.getRight());\n                         } else {\n                             attributes.remove(alreadyAdded);\n \n                             Set<Object> values = new HashSet<>();\n-                            if (CollectionUtils.isNotEmpty(alreadyAdded.getValue())) {\n+                            if (alreadyAdded.getValue() != null && !alreadyAdded.getValue().isEmpty()) {\n                                 values.addAll(alreadyAdded.getValue());\n                             }\n \n-                            values.addAll(preparedAttr.getValue().getValue());\n+                            values.addAll(preparedAttr.getRight().getValue());\n \n-                            attributes.add(AttributeBuilder.build(preparedAttr.getValue().getName(), values));\n+                            attributes.add(AttributeBuilder.build(preparedAttr.getRight().getName(), values));\n                         }\n                     }\n                 }\n@@ -188,11 +187,11 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n         }\n \n         Attribute connObjectKeyExtAttr =\n-                AttributeUtil.find(MappingUtils.getConnObjectKeyItem(provision).getExtAttrName(), attributes);\n+                AttributeUtil.find(MappingUtils.getConnObjectKeyItem(provision).get().getExtAttrName(), attributes);\n         if (connObjectKeyExtAttr != null) {\n             attributes.remove(connObjectKeyExtAttr);\n             attributes.add(AttributeBuilder.build(\n-                    MappingUtils.getConnObjectKeyItem(provision).getExtAttrName(), connObjectKey));\n+                    MappingUtils.getConnObjectKeyItem(provision).get().getExtAttrName(), connObjectKey));\n         }\n         attributes.add(MappingUtils.evaluateNAME(any, provision, connObjectKey));\n \n@@ -257,7 +256,7 @@ public Pair<String, Set<Attribute>> prepareAttrs(final Realm realm, final OrgUni\n                 attributes.remove(alreadyAdded);\n \n                 Set<Object> values = new HashSet<>();\n-                if (CollectionUtils.isNotEmpty(alreadyAdded.getValue())) {\n+                if (alreadyAdded.getValue() != null && !alreadyAdded.getValue().isEmpty()) {\n                     values.addAll(alreadyAdded.getValue());\n                 }\n                 values.add(value);\n@@ -267,10 +266,11 @@ public Pair<String, Set<Attribute>> prepareAttrs(final Realm realm, final OrgUni\n         }\n \n         Attribute connObjectKeyExtAttr =\n-                AttributeUtil.find(orgUnit.getConnObjectKeyItem().getExtAttrName(), attributes);\n+                AttributeUtil.find(orgUnit.getConnObjectKeyItem().get().getExtAttrName(), attributes);\n         if (connObjectKeyExtAttr != null) {\n             attributes.remove(connObjectKeyExtAttr);\n-            attributes.add(AttributeBuilder.build(orgUnit.getConnObjectKeyItem().getExtAttrName(), connObjectKey));\n+            attributes.add(\n+                    AttributeBuilder.build(orgUnit.getConnObjectKeyItem().get().getExtAttrName(), connObjectKey));\n         }\n         attributes.add(MappingUtils.evaluateNAME(realm, orgUnit, connObjectKey));\n \n@@ -412,7 +412,7 @@ public List<PlainAttrValue> getIntValues(\n                 }\n             } else if (intAttrName.getMembershipOfGroup() != null) {\n                 Group group = groupDAO.findByName(intAttrName.getMembershipOfGroup());\n-                membership = groupableRelatable.getMembership(group.getKey());\n+                membership = groupableRelatable.getMembership(group.getKey()).orElse(null);\n             }\n         }\n         if (reference == null) {\n@@ -498,18 +498,16 @@ public List<PlainAttrValue> getIntValues(\n                 case PLAIN:\n                     PlainAttr<?> attr;\n                     if (membership == null) {\n-                        attr = reference.getPlainAttr(intAttrName.getSchemaName());\n+                        attr = reference.getPlainAttr(intAttrName.getSchemaName()).orElse(null);\n                     } else {\n                         attr = ((GroupableRelatable<?, ?, ?, ?, ?>) reference).getPlainAttr(\n-                                intAttrName.getSchemaName(), membership);\n+                                intAttrName.getSchemaName(), membership).orElse(null);\n                     }\n                     if (attr != null) {\n                         if (attr.getUniqueValue() != null) {\n                             values.add(anyUtils.clonePlainAttrValue(attr.getUniqueValue()));\n                         } else if (attr.getValues() != null) {\n-                            for (PlainAttrValue value : attr.getValues()) {\n-                                values.add(anyUtils.clonePlainAttrValue(value));\n-                            }\n+                            attr.getValues().forEach(value -> values.add(anyUtils.clonePlainAttrValue(value)));\n                         }\n                     }\n                     break;\n@@ -541,11 +539,13 @@ public List<PlainAttrValue> getIntValues(\n                         List<String> virValues = membership == null\n                                 ? virAttrHandler.getValues(reference, virSchema)\n                                 : virAttrHandler.getValues(reference, membership, virSchema);\n-                        for (String value : virValues) {\n-                            PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n-                            attrValue.setStringValue(value);\n-                            values.add(attrValue);\n-                        }\n+                        virValues.stream().\n+                                map(value -> {\n+                                    PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n+                                    attrValue.setStringValue(value);\n+                                    return attrValue;\n+                                }).\n+                                forEachOrdered(attrValue -> values.add(attrValue));\n                     }\n                     break;\n \n@@ -570,30 +570,30 @@ public List<PlainAttrValue> getIntValues(\n \n     private String getGroupOwnerValue(final Provision provision, final Any<?> any) {\n         Pair<String, Attribute> preparedAttr =\n-                prepareAttr(provision, MappingUtils.getConnObjectKeyItem(provision), any, null);\n+                prepareAttr(provision, MappingUtils.getConnObjectKeyItem(provision).get(), any, null);\n         String connObjectKey = preparedAttr.getKey();\n \n         return MappingUtils.evaluateNAME(any, provision, connObjectKey).getNameValue();\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n-    public String getConnObjectKeyValue(final Any<?> any, final Provision provision) {\n-        MappingItem mapItem = provision.getMapping().getConnObjectKeyItem();\n+    public Optional<String> getConnObjectKeyValue(final Any<?> any, final Provision provision) {\n+        MappingItem mapItem = provision.getMapping().getConnObjectKeyItem().get();\n         List<PlainAttrValue> values = getIntValues(\n                 provision,\n                 mapItem,\n                 intAttrNameParser.parse(mapItem.getIntAttrName(), provision.getAnyType().getKind()),\n                 any);\n-        return values.isEmpty()\n+        return Optional.ofNullable(values.isEmpty()\n                 ? null\n-                : values.get(0).getValueAsString();\n+                : values.get(0).getValueAsString());\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n     public String getConnObjectKeyValue(final Realm realm, final OrgUnit orgUnit) {\n-        OrgUnitItem orgUnitItem = orgUnit.getConnObjectKeyItem();\n+        OrgUnitItem orgUnitItem = orgUnit.getConnObjectKeyItem().get();\n \n         return getIntValue(realm, orgUnitItem);\n     }\n@@ -610,7 +610,7 @@ public void setIntValues(\n                 values = transformer.beforePull(mapItem, anyTO, values);\n             }\n         }\n-        values = ListUtils.emptyIfNull(values);\n+        values = values == null ? Collections.emptyList() : values;\n \n         IntAttrName intAttrName =\n                 intAttrNameParser.parse(mapItem.getIntAttrName(), anyUtils.getAnyTypeKind());\n@@ -707,12 +707,13 @@ public void setIntValues(\n                     if (groupableTO == null || group == null) {\n                         anyTO.getPlainAttrs().add(attrTO);\n                     } else {\n-                        MembershipTO membership = groupableTO.getMembership(group.getKey());\n-                        if (membership == null) {\n-                            membership = new MembershipTO.Builder().group(group.getKey(), group.getName()).build();\n-                            groupableTO.getMemberships().add(membership);\n+                        Optional<MembershipTO> membership = groupableTO.getMembership(group.getKey());\n+                        if (!membership.isPresent()) {\n+                            membership = Optional.of(\n+                                    new MembershipTO.Builder().group(group.getKey(), group.getName()).build());\n+                            groupableTO.getMemberships().add(membership.get());\n                         }\n-                        membership.getPlainAttrs().add(attrTO);\n+                        membership.get().getPlainAttrs().add(attrTO);\n                     }\n                     break;\n \n@@ -722,12 +723,13 @@ public void setIntValues(\n                     if (groupableTO == null || group == null) {\n                         anyTO.getDerAttrs().add(attrTO);\n                     } else {\n-                        MembershipTO membership = groupableTO.getMembership(group.getKey());\n-                        if (membership == null) {\n-                            membership = new MembershipTO.Builder().group(group.getKey(), group.getName()).build();\n-                            groupableTO.getMemberships().add(membership);\n+                        Optional<MembershipTO> membership = groupableTO.getMembership(group.getKey());\n+                        if (!membership.isPresent()) {\n+                            membership = Optional.of(\n+                                    new MembershipTO.Builder().group(group.getKey(), group.getName()).build());\n+                            groupableTO.getMemberships().add(membership.get());\n                         }\n-                        membership.getDerAttrs().add(attrTO);\n+                        membership.get().getDerAttrs().add(attrTO);\n                     }\n                     break;\n \n@@ -736,23 +738,22 @@ public void setIntValues(\n                     attrTO.setSchema(intAttrName.getSchemaName());\n \n                     // virtual attributes don't get transformed, iterate over original attr.getValue()\n-                    for (Object value : (attr == null || attr.getValue() == null)\n-                            ? Collections.emptyList() : attr.getValue()) {\n-\n-                        if (value != null) {\n-                            attrTO.getValues().add(value.toString());\n-                        }\n+                    if (attr != null && attr.getValue() != null && !attr.getValue().isEmpty()) {\n+                        attr.getValue().stream().\n+                                filter(value -> value != null).\n+                                forEachOrdered(value -> attrTO.getValues().add(value.toString()));\n                     }\n \n                     if (groupableTO == null || group == null) {\n                         anyTO.getVirAttrs().add(attrTO);\n                     } else {\n-                        MembershipTO membership = groupableTO.getMembership(group.getKey());\n-                        if (membership == null) {\n-                            membership = new MembershipTO.Builder().group(group.getKey(), group.getName()).build();\n-                            groupableTO.getMemberships().add(membership);\n+                        Optional<MembershipTO> membership = groupableTO.getMembership(group.getKey());\n+                        if (!membership.isPresent()) {\n+                            membership = Optional.of(\n+                                    new MembershipTO.Builder().group(group.getKey(), group.getName()).build());\n+                            groupableTO.getMemberships().add(membership.get());\n                         }\n-                        membership.getVirAttrs().add(attrTO);\n+                        membership.get().getVirAttrs().add(attrTO);\n                     }\n                     break;\n "},{"sha":"2caac56306ee476cc8ecbc63271b2323dc9ef9d7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java","status":"modified","additions":15,"deletions":13,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,8 +23,8 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n-import org.apache.commons.collections4.ListUtils;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Membership;\n@@ -98,15 +98,15 @@ private Map<VirSchema, List<String>> getValues(final Any<?> any, final Set<VirSc\n         for (Map.Entry<Provision, Set<VirSchema>> entry : toRead.entrySet()) {\n             LOG.debug(\"About to read from {}: {}\", entry.getKey(), entry.getValue());\n \n-            MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(entry.getKey());\n-            String connObjectKeyValue = connObjectKeyItem == null\n-                    ? null\n-                    : mappingManager.getConnObjectKeyValue(any, entry.getKey());\n-            if (connObjectKeyItem == null) {\n+            Optional<MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(entry.getKey());\n+            String connObjectKeyValue = connObjectKeyItem.isPresent()\n+                    ? mappingManager.getConnObjectKeyValue(any, entry.getKey()).orElse(null)\n+                    : null;\n+            if (!connObjectKeyItem.isPresent()) {\n                 LOG.error(\"No ConnObjectKey found for {}, ignoring...\", entry.getKey());\n             } else {\n                 Set<MappingItem> linkingMappingItems = new HashSet<>();\n-                linkingMappingItems.add(connObjectKeyItem);\n+                linkingMappingItems.add(connObjectKeyItem.get());\n                 for (VirSchema schema : entry.getValue()) {\n                     linkingMappingItems.add(schema.asLinkingMappingItem());\n                 }\n@@ -115,14 +115,14 @@ private Map<VirSchema, List<String>> getValues(final Any<?> any, final Set<VirSc\n                 try {\n                     ConnectorObject connectorObject = connector.getObject(\n                             entry.getKey().getObjectClass(),\n-                            AttributeBuilder.build(connObjectKeyItem.getExtAttrName(), connObjectKeyValue),\n+                            AttributeBuilder.build(connObjectKeyItem.get().getExtAttrName(), connObjectKeyValue),\n                             MappingUtils.buildOperationOptions(linkingMappingItems.iterator()));\n \n                     if (connectorObject == null) {\n                         LOG.debug(\"No read from {} with filter '{} == {}'\",\n-                                entry.getKey(), connObjectKeyItem.getExtAttrName(), connObjectKeyValue);\n+                                entry.getKey(), connObjectKeyItem.get().getExtAttrName(), connObjectKeyValue);\n                     } else {\n-                        for (VirSchema schema : entry.getValue()) {\n+                        entry.getValue().forEach(schema -> {\n                             Attribute attr = connectorObject.getAttributeByName(schema.getExtAttrName());\n                             if (attr != null) {\n                                 VirAttrCacheValue virAttrCacheValue = new VirAttrCacheValue();\n@@ -134,7 +134,7 @@ private Map<VirSchema, List<String>> getValues(final Any<?> any, final Set<VirSc\n \n                                 result.put(schema, virAttrCacheValue.getValues());\n                             }\n-                        }\n+                        });\n                     }\n                 } catch (Exception e) {\n                     LOG.error(\"Error reading from {}\", entry.getKey(), e);\n@@ -154,7 +154,8 @@ public List<String> getValues(final Any<?> any, final VirSchema schema) {\n             return Collections.emptyList();\n         }\n \n-        return ListUtils.emptyIfNull(getValues(any, Collections.singleton(schema)).get(schema));\n+        List<String> result = getValues(any, Collections.singleton(schema)).get(schema);\n+        return result == null ? Collections.emptyList() : result;\n     }\n \n     @Override\n@@ -166,7 +167,8 @@ public List<String> getValues(final Any<?> any, final Membership<?> membership,\n             return Collections.emptyList();\n         }\n \n-        return ListUtils.emptyIfNull(getValues(any, Collections.singleton(schema)).get(schema));\n+        List<String> result = getValues(any, Collections.singleton(schema)).get(schema);\n+        return result == null ? Collections.emptyList() : result;\n     }\n \n     @Override"},{"sha":"dbf992bc0851e8fd77e861b27bce7fb0a1ab7891","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":137,"deletions":131,"changes":268,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -24,8 +24,9 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -81,7 +82,6 @@\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.data.SchemaDataBinder;\n-import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n@@ -193,7 +193,7 @@ private void fillAttr(\n                 ? Collections.<String>emptyList()\n                 : Collections.singletonList(values.iterator().next()));\n \n-        for (String value : valuesProvided) {\n+        valuesProvided.forEach(value -> {\n             if (StringUtils.isBlank(value)) {\n                 LOG.debug(\"Null value for {}, ignoring\", schema.getKey());\n             } else {\n@@ -205,40 +205,40 @@ private void fillAttr(\n                     invalidValues.getElements().add(schema.getKey() + \": \" + value + \" - \" + e.getMessage());\n                 }\n             }\n-        }\n+        });\n     }\n \n     private List<String> evaluateMandatoryCondition(final Provision provision, final Any<?> any) {\n         List<String> missingAttrNames = new ArrayList<>();\n \n-        for (MappingItem mapItem : MappingUtils.getPropagationItems(provision)) {\n-            IntAttrName intAttrName =\n-                    intAttrNameParser.parse(mapItem.getIntAttrName(), provision.getAnyType().getKind());\n+        MappingUtils.getPropagationItems(provision).forEach(mapItem -> {\n+            IntAttrName intAttrName = intAttrNameParser.\n+                    parse(mapItem.getIntAttrName(), provision.getAnyType().getKind());\n             if (intAttrName.getSchemaType() != null) {\n                 List<PlainAttrValue> values = mappingManager.getIntValues(provision, mapItem, intAttrName, any);\n                 if (values.isEmpty() && JexlUtils.evaluateMandatoryCondition(mapItem.getMandatoryCondition(), any)) {\n                     missingAttrNames.add(mapItem.getIntAttrName());\n                 }\n             }\n-        }\n+        });\n \n         return missingAttrNames;\n     }\n \n     private SyncopeClientException checkMandatoryOnResources(final Any<?> any, final Set<ExternalResource> resources) {\n         SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n-        for (ExternalResource resource : resources) {\n-            Provision provision = resource.getProvision(any.getType());\n-            if (resource.isEnforceMandatoryCondition() && provision != null) {\n-                List<String> missingAttrNames = evaluateMandatoryCondition(provision, any);\n+        resources.forEach(resource -> {\n+            Optional<? extends Provision> provision = resource.getProvision(any.getType());\n+            if (resource.isEnforceMandatoryCondition() && provision.isPresent()) {\n+                List<String> missingAttrNames = evaluateMandatoryCondition(provision.get(), any);\n                 if (!missingAttrNames.isEmpty()) {\n                     LOG.error(\"Mandatory schemas {} not provided with values\", missingAttrNames);\n \n                     reqValMissing.getElements().addAll(missingAttrNames);\n                 }\n             }\n-        }\n+        });\n \n         return reqValMissing;\n     }\n@@ -264,18 +264,20 @@ private SyncopeClientException checkMandatory(final Any<?> any, final AnyUtils a\n \n         // Check if there is some mandatory schema defined for which no value has been provided\n         AllowedSchemas<PlainSchema> allowedPlainSchemas = anyUtils.getAllowedSchemas(any, PlainSchema.class);\n-        for (PlainSchema schema : allowedPlainSchemas.getForSelf()) {\n-            checkMandatory(schema, any.getPlainAttr(schema.getKey()), any, reqValMissing);\n-        }\n-        for (Map.Entry<Group, Set<PlainSchema>> entry : allowedPlainSchemas.getForMemberships().entrySet()) {\n-            if (any instanceof GroupableRelatable) {\n-                GroupableRelatable<?, ?, ?, ?, ?> groupable = GroupableRelatable.class.cast(any);\n-                Membership<?> membership = groupable.getMembership(entry.getKey().getKey());\n-                for (PlainSchema schema : entry.getValue()) {\n-                    checkMandatory(schema, groupable.getPlainAttr(schema.getKey(), membership), any, reqValMissing);\n-                }\n-            }\n-        }\n+        allowedPlainSchemas.getForSelf().\n+                forEach(schema -> {\n+                    checkMandatory(schema, any.getPlainAttr(schema.getKey()).orElse(null), any, reqValMissing);\n+                });\n+        allowedPlainSchemas.getForMemberships().entrySet().stream().\n+                filter(entry -> any instanceof GroupableRelatable).\n+                forEachOrdered(entry -> {\n+                    GroupableRelatable<?, ?, ?, ?, ?> groupable = GroupableRelatable.class.cast(any);\n+                    Membership<?> membership = groupable.getMembership(entry.getKey().getKey()).orElse(null);\n+                    entry.getValue().forEach(schema -> {\n+                        checkMandatory(schema, groupable.getPlainAttr(schema.getKey(), membership).orElse(null),\n+                                any, reqValMissing);\n+                    });\n+                });\n \n         return reqValMissing;\n     }\n@@ -302,11 +304,11 @@ protected void processAttrPatch(\n                         plainAttrValueDAO.delete(attr.getUniqueValue().getKey(), anyUtils.plainAttrUniqueValueClass());\n                     }\n                 } else {\n-                    Collection<String> valuesToBeRemoved =\n-                            CollectionUtils.collect(attr.getValues(), EntityUtils.keyTransformer());\n-                    for (String attrValueKey : valuesToBeRemoved) {\n+                    Collection<String> valuesToBeRemoved = attr.getValues().stream().\n+                            map(value -> value.getKey()).collect(Collectors.toSet());\n+                    valuesToBeRemoved.forEach(attrValueKey -> {\n                         plainAttrValueDAO.delete(attrValueKey, anyUtils.plainAttrValueClass());\n-                    }\n+                    });\n                 }\n \n                 // 1.2 add values\n@@ -330,17 +332,16 @@ protected void processAttrPatch(\n                 plainAttrDAO.delete(attr.getKey(), anyUtils.plainAttrClass());\n         }\n \n-        for (ExternalResource resource : resources) {\n-            for (MappingItem item : MappingUtils.getPropagationItems(resource.getProvision(any.getType()))) {\n-                if (schema.getKey().equals(item.getIntAttrName())) {\n-                    propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n-\n-                    if (item.isConnObjectKey() && !attr.getValuesAsStrings().isEmpty()) {\n-                        propByRes.addOldConnObjectKey(resource.getKey(), attr.getValuesAsStrings().get(0));\n-                    }\n-                }\n-            }\n-        }\n+        resources.forEach(resource -> {\n+            MappingUtils.getPropagationItems(resource.getProvision(any.getType()).get()).stream().\n+                    filter(item -> (schema.getKey().equals(item.getIntAttrName()))).\n+                    forEachOrdered(item -> {\n+                        propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n+                        if (item.isConnObjectKey() && !attr.getValuesAsStrings().isEmpty()) {\n+                            propByRes.addOldConnObjectKey(resource.getKey(), attr.getValuesAsStrings().get(0));\n+                        }\n+                    });\n+        });\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n@@ -394,31 +395,30 @@ protected PropagationByResource fill(\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // 3. plain attributes\n-        for (AttrPatch patch : anyPatch.getPlainAttrs()) {\n-            if (patch.getAttrTO() != null) {\n-                PlainSchema schema = getPlainSchema(patch.getAttrTO().getSchema());\n-                if (schema == null) {\n-                    LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName()\n-                            + \"{}, ignoring...\", patch.getAttrTO().getSchema());\n-                } else {\n-                    PlainAttr<?> attr = any.getPlainAttr(schema.getKey());\n-                    if (attr == null) {\n-                        LOG.debug(\"No plain attribute found for schema {}\", schema);\n+        anyPatch.getPlainAttrs().stream().\n+                filter(patch -> patch.getAttrTO() != null).forEach(patch -> {\n+            PlainSchema schema = getPlainSchema(patch.getAttrTO().getSchema());\n+            if (schema == null) {\n+                LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName()\n+                        + \"{}, ignoring...\", patch.getAttrTO().getSchema());\n+            } else {\n+                PlainAttr<?> attr = (PlainAttr<?>) any.getPlainAttr(schema.getKey()).orElse(null);\n+                if (attr == null) {\n+                    LOG.debug(\"No plain attribute found for schema {}\", schema);\n \n-                        if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                            attr = anyUtils.newPlainAttr();\n-                            ((PlainAttr) attr).setOwner(any);\n-                            attr.setSchema(schema);\n-                            any.add(attr);\n+                    if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                        attr = anyUtils.newPlainAttr();\n+                        ((PlainAttr) attr).setOwner(any);\n+                        attr.setSchema(schema);\n+                        any.add(attr);\n \n-                        }\n-                    }\n-                    if (attr != null) {\n-                        processAttrPatch(any, patch, schema, attr, anyUtils, resources, propByRes, invalidValues);\n                     }\n                 }\n+                if (attr != null) {\n+                    processAttrPatch(any, patch, schema, attr, anyUtils, resources, propByRes, invalidValues);\n+                }\n             }\n-        }\n+        });\n         if (!invalidValues.isEmpty()) {\n             scce.addException(invalidValues);\n         }\n@@ -444,39 +444,39 @@ protected void fill(\n \n         // 0. aux classes\n         any.getAuxClasses().clear();\n-        for (String className : anyTO.getAuxClasses()) {\n-            AnyTypeClass auxClass = anyTypeClassDAO.find(className);\n-            if (auxClass == null) {\n-                LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \"{}, ignoring...\", auxClass);\n-            } else {\n-                any.add(auxClass);\n-            }\n-        }\n+        anyTO.getAuxClasses().stream().\n+                map(className -> anyTypeClassDAO.find(className)).\n+                forEachOrdered(auxClass -> {\n+                    if (auxClass == null) {\n+                        LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \"{}, ignoring...\", auxClass);\n+                    } else {\n+                        any.add(auxClass);\n+                    }\n+                });\n \n         // 1. attributes\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n-        for (AttrTO attrTO : anyTO.getPlainAttrs()) {\n-            // Only consider attributeTO with values\n-            if (!attrTO.getValues().isEmpty()) {\n-                PlainSchema schema = getPlainSchema(attrTO.getSchema());\n-                if (schema != null) {\n-                    PlainAttr attr = any.getPlainAttr(schema.getKey());\n-                    if (attr == null) {\n-                        attr = anyUtils.newPlainAttr();\n-                        attr.setOwner(any);\n-                        attr.setSchema(schema);\n-                    }\n-                    fillAttr(attrTO.getValues(), anyUtils, schema, attr, invalidValues);\n+        anyTO.getPlainAttrs().stream().\n+                filter(attrTO -> !attrTO.getValues().isEmpty()).\n+                forEach(attrTO -> {\n+                    PlainSchema schema = getPlainSchema(attrTO.getSchema());\n+                    if (schema != null) {\n+                        PlainAttr<?> attr = (PlainAttr<?>) any.getPlainAttr(schema.getKey()).orElse(null);\n+                        if (attr == null) {\n+                            attr = anyUtils.newPlainAttr();\n+                            ((PlainAttr) attr).setOwner(any);\n+                            attr.setSchema(schema);\n+                        }\n+                        fillAttr(attrTO.getValues(), anyUtils, schema, attr, invalidValues);\n \n-                    if (attr.getValuesAsStrings().isEmpty()) {\n-                        attr.setOwner(null);\n-                    } else {\n-                        any.add(attr);\n+                        if (attr.getValuesAsStrings().isEmpty()) {\n+                            attr.setOwner(null);\n+                        } else {\n+                            any.add(attr);\n+                        }\n                     }\n-                }\n-            }\n-        }\n+                });\n \n         if (!invalidValues.isEmpty()) {\n             scce.addException(invalidValues);\n@@ -488,14 +488,14 @@ protected void fill(\n         }\n \n         // 2. resources\n-        for (String resourceKey : anyTO.getResources()) {\n+        anyTO.getResources().forEach(resourceKey -> {\n             ExternalResource resource = resourceDAO.find(resourceKey);\n             if (resource == null) {\n                 LOG.debug(\"Invalid \" + ExternalResource.class.getSimpleName() + \"{}, ignoring...\", resourceKey);\n             } else {\n                 any.add(resource);\n             }\n-        }\n+        });\n \n         requiredValuesMissing = checkMandatoryOnResources(any, anyUtils.getAllResources(any));\n         if (!requiredValuesMissing.isEmpty()) {\n@@ -513,28 +513,28 @@ protected void fill(\n \n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n-        for (AttrTO attrTO : membershipTO.getPlainAttrs()) {\n-            if (!attrTO.getValues().isEmpty()) {\n-                PlainSchema schema = getPlainSchema(attrTO.getSchema());\n-                if (schema != null) {\n-                    GroupablePlainAttr attr = GroupableRelatable.class.cast(any).\n-                            getPlainAttr(schema.getKey(), membership);\n-                    if (attr == null) {\n-                        attr = anyUtils.newPlainAttr();\n-                        attr.setOwner(any);\n-                        attr.setMembership(membership);\n-                        attr.setSchema(schema);\n-                    }\n-                    fillAttr(attrTO.getValues(), anyUtils, schema, attr, invalidValues);\n+        membershipTO.getPlainAttrs().stream().\n+                filter(attrTO -> !attrTO.getValues().isEmpty()).\n+                forEach(attrTO -> {\n+                    PlainSchema schema = getPlainSchema(attrTO.getSchema());\n+                    if (schema != null) {\n+                        GroupablePlainAttr attr = (GroupablePlainAttr) GroupableRelatable.class.cast(any).\n+                                getPlainAttr(schema.getKey(), membership).orElse(null);\n+                        if (attr == null) {\n+                            attr = anyUtils.newPlainAttr();\n+                            attr.setOwner(any);\n+                            attr.setMembership(membership);\n+                            attr.setSchema(schema);\n+                        }\n+                        fillAttr(attrTO.getValues(), anyUtils, schema, attr, invalidValues);\n \n-                    if (attr.getValuesAsStrings().isEmpty()) {\n-                        attr.setOwner(null);\n-                    } else {\n-                        any.add(attr);\n+                        if (attr.getValuesAsStrings().isEmpty()) {\n+                            attr.setOwner(null);\n+                        } else {\n+                            any.add(attr);\n+                        }\n                     }\n-                }\n-            }\n-        }\n+                });\n \n         if (!invalidValues.isEmpty()) {\n             scce.addException(invalidValues);\n@@ -553,41 +553,47 @@ protected void fillTO(\n \n         anyTO.setRealm(realmFullPath);\n \n-        CollectionUtils.collect(auxClasses, EntityUtils.<AnyTypeClass>keyTransformer(), anyTO.getAuxClasses());\n+        anyTO.getAuxClasses().addAll(auxClasses.stream().map(cls -> cls.getKey()).collect(Collectors.toList()));\n \n-        for (PlainAttr<?> plainAttr : plainAttrs) {\n+        plainAttrs.stream().map(plainAttr -> {\n             AttrTO.Builder attrTOBuilder = new AttrTO.Builder().\n                     schema(plainAttr.getSchema().getKey()).\n                     values(plainAttr.getValuesAsStrings());\n             if (details) {\n                 attrTOBuilder.schemaInfo(schemaDataBinder.getPlainSchemaTO(plainAttr.getSchema()));\n             }\n+            return attrTOBuilder;\n+        }).forEachOrdered(attrTOBuilder -> {\n             anyTO.getPlainAttrs().add(attrTOBuilder.build());\n-        }\n+        });\n \n-        for (Map.Entry<DerSchema, String> entry : derAttrs.entrySet()) {\n+        derAttrs.entrySet().stream().map(entry -> {\n             AttrTO.Builder attrTOBuilder = new AttrTO.Builder().\n                     schema(entry.getKey().getKey()).\n                     value(entry.getValue());\n             if (details) {\n                 attrTOBuilder.schemaInfo(schemaDataBinder.getDerSchemaTO(entry.getKey()));\n             }\n+            return attrTOBuilder;\n+        }).forEachOrdered(attrTOBuilder -> {\n             anyTO.getDerAttrs().add(attrTOBuilder.build());\n-        }\n+        });\n \n-        for (Map.Entry<VirSchema, List<String>> entry : virAttrs.entrySet()) {\n+        virAttrs.entrySet().stream().map(entry -> {\n             AttrTO.Builder attrTOBuilder = new AttrTO.Builder().\n                     schema(entry.getKey().getKey()).\n                     values(entry.getValue());\n             if (details) {\n                 attrTOBuilder.schemaInfo(schemaDataBinder.getVirSchemaTO(entry.getKey()));\n             }\n+            return attrTOBuilder;\n+        }).forEachOrdered(attrTOBuilder -> {\n             anyTO.getVirAttrs().add(attrTOBuilder.build());\n-        }\n+        });\n \n-        for (ExternalResource resource : resources) {\n+        resources.forEach(resource -> {\n             anyTO.getResources().add(resource.getKey());\n-        }\n+        });\n     }\n \n     protected RelationshipTO getRelationshipTO(final Relationship<? extends Any<?>, AnyObject> relationship) {\n@@ -607,29 +613,29 @@ protected MembershipTO getMembershipTO(\n                 group(membership.getRightEnd().getKey(), membership.getRightEnd().getName()).\n                 build();\n \n-        for (PlainAttr<?> plainAttr : plainAttrs) {\n+        plainAttrs.forEach(plainAttr -> {\n             membershipTO.getPlainAttrs().add(new AttrTO.Builder().\n                     schema(plainAttr.getSchema().getKey()).\n                     values(plainAttr.getValuesAsStrings()).\n                     schemaInfo(schemaDataBinder.getPlainSchemaTO(plainAttr.getSchema())).\n                     build());\n-        }\n+        });\n \n-        for (Map.Entry<DerSchema, String> entry : derAttrs.entrySet()) {\n+        derAttrs.entrySet().forEach(entry -> {\n             membershipTO.getDerAttrs().add(new AttrTO.Builder().\n                     schema(entry.getKey().getKey()).\n                     value(entry.getValue()).\n                     schemaInfo(schemaDataBinder.getDerSchemaTO(entry.getKey())).\n                     build());\n-        }\n+        });\n \n-        for (Map.Entry<VirSchema, List<String>> entry : virAttrs.entrySet()) {\n+        virAttrs.entrySet().forEach(entry -> {\n             membershipTO.getVirAttrs().add(new AttrTO.Builder().\n                     schema(entry.getKey().getKey()).\n                     values(entry.getValue()).\n                     schemaInfo(schemaDataBinder.getVirSchemaTO(entry.getKey())).\n                     build());\n-        }\n+        });\n \n         return membershipTO;\n     }\n@@ -643,18 +649,18 @@ protected Map<String, String> getConnObjectKeys(final Any<?> any) {\n                         ? anyObjectDAO.findAllResources((AnyObject) any)\n                         : ((Group) any).getResources();\n         for (ExternalResource resource : iterable) {\n-            Provision provision = resource.getProvision(any.getType());\n-            if (provision != null && provision.getMapping() != null) {\n-                MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n-                if (connObjectKeyItem == null) {\n+            Optional<? extends Provision> provision = resource.getProvision(any.getType());\n+            if (provision.isPresent() && provision.get().getMapping() != null) {\n+                Optional<MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision.get());\n+                if (!connObjectKeyItem.isPresent()) {\n                     throw new NotFoundException(\n                             \"ConnObjectKey mapping for \" + any.getType().getKey() + \" \" + any.getKey()\n                             + \" on resource '\" + resource.getKey() + \"'\");\n                 }\n \n-                String connObjectKey = mappingManager.getConnObjectKeyValue(any, provision);\n-                if (connObjectKey != null) {\n-                    connObjectKeys.put(resource.getKey(), connObjectKey);\n+                Optional<String> connObjectKey = mappingManager.getConnObjectKeyValue(any, provision.get());\n+                if (connObjectKey.isPresent()) {\n+                    connObjectKeys.put(resource.getKey(), connObjectKey.get());\n                 }\n             }\n         }"},{"sha":"c9b177efb607e3a37de049e95e21724619d0c943","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":145,"deletions":166,"changes":311,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,27 +23,22 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.patch.MembershipPatch;\n-import org.apache.syncope.common.lib.patch.RelationshipPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n-import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n-import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.spring.BeanUtils;\n-import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n@@ -103,41 +98,27 @@ public AnyObjectTO getAnyObjectTO(final AnyObject anyObject, final boolean detai\n             anyObjectTO.getDynRealms().addAll(userDAO.findDynRealms(anyObject.getKey()));\n \n             // relationships\n-            CollectionUtils.collect(anyObject.getRelationships(), new Transformer<ARelationship, RelationshipTO>() {\n-\n-                @Override\n-                public RelationshipTO transform(final ARelationship relationship) {\n-                    return AnyObjectDataBinderImpl.this.getRelationshipTO(relationship);\n-                }\n-\n-            }, anyObjectTO.getRelationships());\n+            anyObjectTO.getRelationships().addAll(\n+                    anyObject.getRelationships().stream().map(relationship -> getRelationshipTO(relationship)).\n+                            collect(Collectors.toList()));\n \n             // memberships\n-            CollectionUtils.collect(anyObject.getMemberships(), new Transformer<AMembership, MembershipTO>() {\n-\n-                @Override\n-                public MembershipTO transform(final AMembership membership) {\n-                    return getMembershipTO(\n-                            anyObject.getPlainAttrs(membership),\n-                            derAttrHandler.getValues(anyObject, membership),\n-                            virAttrHandler.getValues(anyObject, membership),\n-                            membership);\n-                }\n-            }, anyObjectTO.getMemberships());\n+            anyObjectTO.getMemberships().addAll(\n+                    anyObject.getMemberships().stream().map(membership -> {\n+                        return getMembershipTO(\n+                                anyObject.getPlainAttrs(membership),\n+                                derAttrHandler.getValues(anyObject, membership),\n+                                virAttrHandler.getValues(anyObject, membership),\n+                                membership);\n+                    }).collect(Collectors.toList()));\n \n             // dynamic memberships\n-            CollectionUtils.collect(anyObjectDAO.findDynGroups(anyObject.getKey()),\n-                    new Transformer<Group, MembershipTO>() {\n-\n-                @Override\n-                public MembershipTO transform(final Group group) {\n-                    MembershipTO membershipTO = new MembershipTO.Builder().\n-                            group(group.getKey(), group.getName()).\n-                            build();\n-                    return membershipTO;\n-\n-                }\n-            }, anyObjectTO.getDynMemberships());\n+            anyObjectTO.getDynMemberships().addAll(\n+                    anyObjectDAO.findDynGroups(anyObject.getKey()).stream().map(group -> {\n+                        return new MembershipTO.Builder().\n+                                group(group.getKey(), group.getName()).\n+                                build();\n+                    }).collect(Collectors.toList()));\n         }\n \n         return anyObjectTO;\n@@ -177,11 +158,11 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n         AnyUtils anyUtils = anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT);\n         if (anyObject.getRealm() != null) {\n             // relationships\n-            Collection<String> assignableAnyObjects = CollectionUtils.collect(\n-                    searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT),\n-                    EntityUtils.keyTransformer());\n+            Collection<String> assignableAnyObjects =\n+                    searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT).stream().\n+                            map(a -> a.getKey()).collect(Collectors.toList());\n \n-            for (RelationshipTO relationshipTO : anyObjectTO.getRelationships()) {\n+            anyObjectTO.getRelationships().forEach(relationshipTO -> {\n                 if (StringUtils.isBlank(relationshipTO.getRightType())\n                         || AnyTypeKind.USER.name().equals(relationshipTO.getRightType())\n                         || AnyTypeKind.GROUP.name().equals(relationshipTO.getRightType())) {\n@@ -216,14 +197,14 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n                         scce.addException(unassignabled);\n                     }\n                 }\n-            }\n+            });\n \n             // memberships\n-            Collection<String> assignableGroups = CollectionUtils.collect(\n-                    searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.GROUP),\n-                    EntityUtils.keyTransformer());\n+            Collection<String> assignableGroups =\n+                    searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.GROUP).stream().\n+                            map(g -> g.getKey()).collect(Collectors.toList());\n \n-            for (MembershipTO membershipTO : anyObjectTO.getMemberships()) {\n+            anyObjectTO.getMemberships().forEach(membershipTO -> {\n                 Group group = membershipTO.getRightKey() == null\n                         ? groupDAO.findByName(membershipTO.getGroupName())\n                         : groupDAO.find(membershipTO.getRightKey());\n@@ -247,7 +228,7 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n                     unassignable.getElements().add(\"Cannot be assigned: \" + group);\n                     scce.addException(unassignable);\n                 }\n-            }\n+            });\n         }\n \n         // attributes and resources\n@@ -291,136 +272,134 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n         Set<String> toBeProvisioned = new HashSet<>();\n \n         // relationships\n-        Collection<String> assignableAnyObjects = CollectionUtils.collect(\n-                searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT),\n-                EntityUtils.keyTransformer());\n-\n-        for (RelationshipPatch patch : anyObjectPatch.getRelationships()) {\n-            if (patch.getRelationshipTO() != null) {\n-                RelationshipType relationshipType = relationshipTypeDAO.find(patch.getRelationshipTO().getType());\n-                if (relationshipType == null) {\n-                    LOG.debug(\"Ignoring invalid relationship type {}\", patch.getRelationshipTO().getType());\n-                } else {\n-                    ARelationship relationship =\n-                            anyObject.getRelationship(relationshipType, patch.getRelationshipTO().getRightKey());\n-                    if (relationship != null) {\n-                        anyObject.getRelationships().remove(relationship);\n-                        relationship.setLeftEnd(null);\n-\n-                        toBeDeprovisioned.addAll(\n-                                anyObjectDAO.findAllResourceKeys(relationship.getRightEnd().getKey()));\n-                    }\n+        Collection<String> assignableAnyObjects =\n+                searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT).stream().\n+                        map(a -> a.getKey()).collect(Collectors.toList());\n+\n+        anyObjectPatch.getRelationships().stream().\n+                filter(patch -> patch.getRelationshipTO() != null).forEachOrdered((patch) -> {\n+            RelationshipType relationshipType = relationshipTypeDAO.find(patch.getRelationshipTO().getType());\n+            if (relationshipType == null) {\n+                LOG.debug(\"Ignoring invalid relationship type {}\", patch.getRelationshipTO().getType());\n+            } else {\n+                Optional<? extends ARelationship> relationship =\n+                        anyObject.getRelationship(relationshipType, patch.getRelationshipTO().getRightKey());\n+                if (relationship.isPresent()) {\n+                    anyObject.getRelationships().remove(relationship.get());\n+                    relationship.get().setLeftEnd(null);\n+\n+                    toBeDeprovisioned.addAll(\n+                            anyObjectDAO.findAllResourceKeys(relationship.get().getRightEnd().getKey()));\n+                }\n \n-                    if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                        if (StringUtils.isBlank(patch.getRelationshipTO().getRightType())\n-                                || AnyTypeKind.USER.name().equals(patch.getRelationshipTO().getRightType())\n-                                || AnyTypeKind.GROUP.name().equals(patch.getRelationshipTO().getRightType())) {\n+                if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                    if (StringUtils.isBlank(patch.getRelationshipTO().getRightType())\n+                            || AnyTypeKind.USER.name().equals(patch.getRelationshipTO().getRightType())\n+                            || AnyTypeKind.GROUP.name().equals(patch.getRelationshipTO().getRightType())) {\n \n-                            SyncopeClientException invalidAnyType =\n-                                    SyncopeClientException.build(ClientExceptionType.InvalidAnyType);\n-                            invalidAnyType.getElements().add(AnyType.class.getSimpleName()\n-                                    + \" not allowed for relationship: \" + patch.getRelationshipTO().getRightType());\n-                            scce.addException(invalidAnyType);\n+                        SyncopeClientException invalidAnyType =\n+                                SyncopeClientException.build(ClientExceptionType.InvalidAnyType);\n+                        invalidAnyType.getElements().add(AnyType.class.getSimpleName()\n+                                + \" not allowed for relationship: \" + patch.getRelationshipTO().getRightType());\n+                        scce.addException(invalidAnyType);\n+                    } else {\n+                        AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());\n+                        if (otherEnd == null) {\n+                            LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());\n+                        } else if (assignableAnyObjects.contains(otherEnd.getKey())) {\n+                            ARelationship newRelationship = entityFactory.newEntity(ARelationship.class);\n+                            newRelationship.setType(relationshipType);\n+                            newRelationship.setRightEnd(otherEnd);\n+                            newRelationship.setLeftEnd(anyObject);\n+\n+                            anyObject.add(newRelationship);\n+\n+                            toBeProvisioned.addAll(anyObjectDAO.findAllResourceKeys(otherEnd.getKey()));\n                         } else {\n-                            AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());\n-                            if (otherEnd == null) {\n-                                LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());\n-                            } else if (assignableAnyObjects.contains(otherEnd.getKey())) {\n-                                relationship = entityFactory.newEntity(ARelationship.class);\n-                                relationship.setType(relationshipType);\n-                                relationship.setRightEnd(otherEnd);\n-                                relationship.setLeftEnd(anyObject);\n-\n-                                anyObject.add(relationship);\n-\n-                                toBeProvisioned.addAll(anyObjectDAO.findAllResourceKeys(otherEnd.getKey()));\n-                            } else {\n-                                LOG.error(\"{} cannot be assigned to {}\", otherEnd, anyObject);\n-\n-                                SyncopeClientException unassignable =\n-                                        SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n-                                unassignable.getElements().add(\"Cannot be assigned: \" + otherEnd);\n-                                scce.addException(unassignable);\n-                            }\n+                            LOG.error(\"{} cannot be assigned to {}\", otherEnd, anyObject);\n+\n+                            SyncopeClientException unassignable =\n+                                    SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n+                            unassignable.getElements().add(\"Cannot be assigned: \" + otherEnd);\n+                            scce.addException(unassignable);\n                         }\n                     }\n                 }\n             }\n-        }\n+        });\n \n         Collection<ExternalResource> resources = anyObjectDAO.findAllResources(anyObject);\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // memberships\n-        Collection<String> assignableGroups = CollectionUtils.collect(\n-                searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.GROUP),\n-                EntityUtils.keyTransformer());\n-\n-        for (MembershipPatch membPatch : anyObjectPatch.getMemberships()) {\n-            if (membPatch.getGroup() != null) {\n-                AMembership membership = anyObject.getMembership(membPatch.getGroup());\n-                if (membership != null) {\n-                    anyObject.getMemberships().remove(membership);\n-                    membership.setLeftEnd(null);\n-                    for (APlainAttr attr : anyObject.getPlainAttrs(membership)) {\n-                        anyObject.remove(attr);\n-                        attr.setOwner(null);\n-                    }\n+        Collection<String> assignableGroups =\n+                searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.GROUP).stream().\n+                        map(g -> g.getKey()).collect(Collectors.toList());\n+\n+        anyObjectPatch.getMemberships().stream().\n+                filter((membPatch) -> (membPatch.getGroup() != null)).forEachOrdered(membPatch -> {\n+            Optional<? extends AMembership> membership = anyObject.getMembership(membPatch.getGroup());\n+            if (membership.isPresent()) {\n+                anyObject.getMemberships().remove(membership.get());\n+                membership.get().setLeftEnd(null);\n+                anyObject.getPlainAttrs(membership.get()).forEach(attr -> {\n+                    anyObject.remove(attr);\n+                    attr.setOwner(null);\n+                });\n+\n+                toBeDeprovisioned.addAll(groupDAO.findAllResourceKeys(membership.get().getRightEnd().getKey()));\n+            }\n+            if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                Group group = groupDAO.find(membPatch.getGroup());\n+                if (group == null) {\n+                    LOG.debug(\"Ignoring invalid group {}\", membPatch.getGroup());\n+                } else if (assignableGroups.contains(group.getKey())) {\n+                    AMembership newMembership = entityFactory.newEntity(AMembership.class);\n+                    newMembership.setRightEnd(group);\n+                    newMembership.setLeftEnd(anyObject);\n \n-                    toBeDeprovisioned.addAll(groupDAO.findAllResourceKeys(membership.getRightEnd().getKey()));\n-                }\n+                    anyObject.add(newMembership);\n \n-                if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                    Group group = groupDAO.find(membPatch.getGroup());\n-                    if (group == null) {\n-                        LOG.debug(\"Ignoring invalid group {}\", membPatch.getGroup());\n-                    } else if (assignableGroups.contains(group.getKey())) {\n-                        membership = entityFactory.newEntity(AMembership.class);\n-                        membership.setRightEnd(group);\n-                        membership.setLeftEnd(anyObject);\n-\n-                        anyObject.add(membership);\n-\n-                        for (AttrTO attrTO : membPatch.getPlainAttrs()) {\n-                            PlainSchema schema = getPlainSchema(attrTO.getSchema());\n-                            if (schema == null) {\n-                                LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName()\n-                                        + \"{}, ignoring...\", attrTO.getSchema());\n-                            } else {\n-                                APlainAttr attr = anyObject.getPlainAttr(schema.getKey(), membership);\n-                                if (attr == null) {\n-                                    LOG.debug(\"No plain attribute found for {} and membership of {}\",\n-                                            schema, membership.getRightEnd());\n-\n-                                    attr = anyUtils.newPlainAttr();\n-                                    attr.setOwner(anyObject);\n-                                    attr.setMembership(membership);\n-                                    attr.setSchema(schema);\n-                                    anyObject.add(attr);\n-\n-                                    AttrPatch patch = new AttrPatch.Builder().attrTO(attrTO).build();\n-                                    processAttrPatch(\n-                                            anyObject, patch, schema, attr, anyUtils,\n-                                            resources, propByRes, invalidValues);\n-                                }\n+                    membPatch.getPlainAttrs().forEach(attrTO -> {\n+                        PlainSchema schema = getPlainSchema(attrTO.getSchema());\n+                        if (schema == null) {\n+                            LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName()\n+                                    + \"{}, ignoring...\", attrTO.getSchema());\n+                        } else {\n+                            Optional<? extends APlainAttr> attr =\n+                                    anyObject.getPlainAttr(schema.getKey(), newMembership);\n+                            if (!attr.isPresent()) {\n+                                LOG.debug(\"No plain attribute found for {} and membership of {}\",\n+                                        schema, newMembership.getRightEnd());\n+\n+                                APlainAttr newAttr = anyUtils.newPlainAttr();\n+                                newAttr.setOwner(anyObject);\n+                                newAttr.setMembership(newMembership);\n+                                newAttr.setSchema(schema);\n+                                anyObject.add(newAttr);\n+\n+                                AttrPatch patch = new AttrPatch.Builder().attrTO(attrTO).build();\n+                                processAttrPatch(\n+                                        anyObject, patch, schema, newAttr, anyUtils,\n+                                        resources, propByRes, invalidValues);\n                             }\n                         }\n-                        if (!invalidValues.isEmpty()) {\n-                            scce.addException(invalidValues);\n-                        }\n+                    });\n+                    if (!invalidValues.isEmpty()) {\n+                        scce.addException(invalidValues);\n+                    }\n \n-                        toBeProvisioned.addAll(groupDAO.findAllResourceKeys(group.getKey()));\n-                    } else {\n-                        LOG.error(\"{} cannot be assigned to {}\", group, anyObject);\n+                    toBeProvisioned.addAll(groupDAO.findAllResourceKeys(group.getKey()));\n+                } else {\n+                    LOG.error(\"{} cannot be assigned to {}\", group, anyObject);\n \n-                        SyncopeClientException unassignabled =\n-                                SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n-                        unassignabled.getElements().add(\"Cannot be assigned: \" + group);\n-                        scce.addException(unassignabled);\n-                    }\n+                    SyncopeClientException unassignabled =\n+                            SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n+                    unassignabled.getElements().add(\"Cannot be assigned: \" + group);\n+                    scce.addException(unassignabled);\n                 }\n             }\n-        }\n+        });\n \n         propByRes.addAll(ResourceOperation.DELETE, toBeDeprovisioned);\n         propByRes.addAll(ResourceOperation.UPDATE, toBeProvisioned);\n@@ -436,14 +415,14 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n \n         // check if some connObjectKey was changed by the update above\n         Map<String, String> newcCnnObjectKeys = getConnObjectKeys(anyObject);\n-        for (Map.Entry<String, String> entry : oldConnObjectKeys.entrySet()) {\n-            if (newcCnnObjectKeys.containsKey(entry.getKey())\n-                    && !entry.getValue().equals(newcCnnObjectKeys.get(entry.getKey()))) {\n-\n-                propByRes.addOldConnObjectKey(entry.getKey(), entry.getValue());\n-                propByRes.add(ResourceOperation.UPDATE, entry.getKey());\n-            }\n-        }\n+        oldConnObjectKeys.entrySet().stream().\n+                filter(entry -> newcCnnObjectKeys.containsKey(entry.getKey())\n+                && !entry.getValue().equals(newcCnnObjectKeys.get(entry.getKey()))).\n+                forEach(entry -> {\n+\n+                    propByRes.addOldConnObjectKey(entry.getKey(), entry.getValue());\n+                    propByRes.add(ResourceOperation.UPDATE, entry.getKey());\n+                });\n \n         anyObjectDAO.save(anyObject);\n "},{"sha":"45b508977f695d556157fafba1478d19e8b1cf81","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeDataBinderImpl.java","status":"modified","additions":9,"deletions":15,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,9 +21,8 @@\n import com.fasterxml.jackson.core.type.TypeReference;\n import java.util.HashSet;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.annotation.Resource;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n@@ -85,9 +84,9 @@ public AnyType create(final AnyTypeTO anyTypeTO) {\n                         new TypeReference<Set<SyncopeGrantedAuthority>>() {\n                 }));\n \n-                for (String entitlement : added) {\n+                added.forEach(entitlement -> {\n                     authorities.add(new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM));\n-                }\n+                });\n \n                 accessToken.setAuthorities(ENCRYPTOR.encode(\n                         POJOHelper.serialize(authorities), CipherAlgorithm.AES).\n@@ -117,14 +116,14 @@ public void update(final AnyType anyType, final AnyTypeTO anyTypeTO) {\n         }\n \n         anyType.getClasses().clear();\n-        for (String anyTypeClassName : anyTypeTO.getClasses()) {\n+        anyTypeTO.getClasses().forEach(anyTypeClassName -> {\n             AnyTypeClass anyTypeClass = anyTypeClassDAO.find(anyTypeClassName);\n             if (anyTypeClass == null) {\n                 LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \"{}, ignoring...\", anyTypeClassName);\n             } else {\n                 anyType.add(anyTypeClass);\n             }\n-        }\n+        });\n     }\n \n     @Override\n@@ -143,13 +142,8 @@ public AnyTypeTO delete(final AnyType anyType) {\n                         new TypeReference<Set<SyncopeGrantedAuthority>>() {\n                 }));\n \n-                CollectionUtils.filterInverse(authorities, new Predicate<SyncopeGrantedAuthority>() {\n-\n-                    @Override\n-                    public boolean evaluate(final SyncopeGrantedAuthority authority) {\n-                        return removed.contains(authority.getAuthority());\n-                    }\n-                });\n+                authorities.removeAll(authorities.stream().\n+                        filter(authority -> removed.contains(authority.getAuthority())).collect(Collectors.toList()));\n \n                 accessToken.setAuthorities(ENCRYPTOR.encode(\n                         POJOHelper.serialize(authorities), CipherAlgorithm.AES).\n@@ -170,9 +164,9 @@ public AnyTypeTO getAnyTypeTO(final AnyType anyType) {\n \n         anyTypeTO.setKey(anyType.getKey());\n         anyTypeTO.setKind(anyType.getKind());\n-        for (AnyTypeClass anyTypeClass : anyType.getClasses()) {\n+        anyType.getClasses().forEach(anyTypeClass -> {\n             anyTypeTO.getClasses().add(anyTypeClass.getKey());\n-        }\n+        });\n \n         return anyTypeTO;\n     }"},{"sha":"d4b9206bf1f7c30484d40b8bb64ade44a624fa9f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -25,6 +25,7 @@\n import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.Optional;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n@@ -249,16 +250,16 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n         connInstanceTO.getConf().addAll(connInstance.getConf());\n         // refresh stored properties in the given connInstance with direct information from underlying connector\n         ConfigurationProperties properties = connIdBundleManager.getConfigurationProperties(info.getRight());\n-        for (String propName : properties.getPropertyNames()) {\n+        properties.getPropertyNames().forEach(propName -> {\n             ConnConfPropSchema schema = build(properties.getProperty(propName));\n \n-            ConnConfProperty property = connInstanceTO.getConf(propName);\n-            if (property == null) {\n-                property = new ConnConfProperty();\n-                connInstanceTO.getConf().add(property);\n+            Optional<ConnConfProperty> property = connInstanceTO.getConf(propName);\n+            if (!property.isPresent()) {\n+                property = Optional.of(new ConnConfProperty());\n+                connInstanceTO.getConf().add(property.get());\n             }\n-            property.setSchema(schema);\n-        }\n+            property.get().setSchema(schema);\n+        });\n         Collections.sort(connInstanceTO.getConf());\n \n         // pool configuration"},{"sha":"3105e19e7b06efc883287783e25e9161c1803f9f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":31,"deletions":41,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,8 +23,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -46,14 +45,12 @@\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n-import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n@@ -74,7 +71,7 @@ private void setDynMembership(final Group group, final AnyType anyType, final St\n         }\n \n         DynGroupMembership<?> dynMembership;\n-        if (anyType.getKind() == AnyTypeKind.ANY_OBJECT && group.getADynMembership(anyType) == null) {\n+        if (anyType.getKind() == AnyTypeKind.ANY_OBJECT && !group.getADynMembership(anyType).isPresent()) {\n             dynMembership = entityFactory.newEntity(ADynGroupMembership.class);\n             dynMembership.setGroup(group);\n             group.add((ADynGroupMembership) dynMembership);\n@@ -85,7 +82,7 @@ private void setDynMembership(final Group group, final AnyType anyType, final St\n             group.setUDynMembership((UDynGroupMembership) dynMembership);\n         } else {\n             dynMembership = anyType.getKind() == AnyTypeKind.ANY_OBJECT\n-                    ? group.getADynMembership(anyType)\n+                    ? group.getADynMembership(anyType).get()\n                     : group.getUDynMembership();\n         }\n         dynMembership.setFIQLCond(dynMembershipFIQL);\n@@ -139,17 +136,17 @@ public void create(final Group group, final GroupTO groupTO) {\n         if (groupTO.getUDynMembershipCond() != null) {\n             setDynMembership(group, anyTypeDAO.findUser(), groupTO.getUDynMembershipCond());\n         }\n-        for (Map.Entry<String, String> entry : groupTO.getADynMembershipConds().entrySet()) {\n+        groupTO.getADynMembershipConds().entrySet().forEach(entry -> {\n             AnyType anyType = anyTypeDAO.find(entry.getKey());\n             if (anyType == null) {\n                 LOG.warn(\"Ignoring invalid {}: {}\", AnyType.class.getSimpleName(), entry.getKey());\n             } else {\n                 setDynMembership(group, anyType, entry.getValue());\n             }\n-        }\n+        });\n \n         // type extensions\n-        for (TypeExtensionTO typeExtTO : groupTO.getTypeExtensions()) {\n+        groupTO.getTypeExtensions().forEach(typeExtTO -> {\n             AnyType anyType = anyTypeDAO.find(typeExtTO.getAnyType());\n             if (anyType == null) {\n                 LOG.warn(\"Ignoring invalid {}: {}\", AnyType.class.getSimpleName(), typeExtTO.getAnyType());\n@@ -159,21 +156,21 @@ public void create(final Group group, final GroupTO groupTO) {\n                 typeExt.setGroup(group);\n                 group.add(typeExt);\n \n-                for (String name : typeExtTO.getAuxClasses()) {\n+                typeExtTO.getAuxClasses().forEach(name -> {\n                     AnyTypeClass anyTypeClass = anyTypeClassDAO.find(name);\n                     if (anyTypeClass == null) {\n                         LOG.warn(\"Ignoring invalid {}: {}\", AnyTypeClass.class.getSimpleName(), name);\n                     } else {\n                         typeExt.add(anyTypeClass);\n                     }\n-                }\n+                });\n \n                 if (typeExt.getAuxClasses().isEmpty()) {\n                     group.getTypeExtensions().remove(typeExt);\n                     typeExt.setGroup(null);\n                 }\n             }\n-        }\n+        });\n \n         // Throw composite exception if there is at least one element set in the composing exceptions\n         if (scce.hasExceptions()) {\n@@ -220,14 +217,14 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n \n         // check if some connObjectKey was changed by the update above\n         Map<String, String> newConnObjectKeys = getConnObjectKeys(group);\n-        for (Map.Entry<String, String> entry : oldConnObjectKeys.entrySet()) {\n-            if (newConnObjectKeys.containsKey(entry.getKey())\n-                    && !entry.getValue().equals(newConnObjectKeys.get(entry.getKey()))) {\n+        oldConnObjectKeys.entrySet().stream().\n+                filter(entry -> newConnObjectKeys.containsKey(entry.getKey())\n+                && !entry.getValue().equals(newConnObjectKeys.get(entry.getKey()))).\n+                forEach(entry -> {\n \n-                propByRes.addOldConnObjectKey(entry.getKey(), entry.getValue());\n-                propByRes.add(ResourceOperation.UPDATE, entry.getKey());\n-            }\n-        }\n+                    propByRes.addOldConnObjectKey(entry.getKey(), entry.getValue());\n+                    propByRes.add(ResourceOperation.UPDATE, entry.getKey());\n+                });\n \n         group = groupDAO.save(group);\n \n@@ -262,7 +259,7 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n             if (anyType == null) {\n                 LOG.warn(\"Ignoring invalid {}: {}\", AnyType.class.getSimpleName(), typeExtTO.getAnyType());\n             } else {\n-                TypeExtension typeExt = group.getTypeExtension(anyType);\n+                TypeExtension typeExt = group.getTypeExtension(anyType).orElse(null);\n                 if (typeExt == null) {\n                     typeExt = entityFactory.newEntity(TypeExtension.class);\n                     typeExt.setAnyType(anyType);\n@@ -297,7 +294,7 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n         // remove all type extensions not contained in the TO\n         for (Iterator<? extends TypeExtension> itor = group.getTypeExtensions().iterator(); itor.hasNext();) {\n             TypeExtension typeExt = itor.next();\n-            if (groupPatch.getTypeExtension(typeExt.getAnyType().getKey()) == null) {\n+            if (!groupPatch.getTypeExtension(typeExt.getAnyType().getKey()).isPresent()) {\n                 itor.remove();\n             }\n         }\n@@ -314,15 +311,8 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n     public TypeExtensionTO getTypeExtensionTO(final TypeExtension typeExt) {\n         TypeExtensionTO typeExtTO = new TypeExtensionTO();\n         typeExtTO.setAnyType(typeExt.getAnyType().getKey());\n-        typeExtTO.getAuxClasses().addAll(CollectionUtils.collect(typeExt.getAuxClasses(),\n-                new Transformer<AnyTypeClass, String>() {\n-\n-            @Override\n-            public String transform(final AnyTypeClass clazz) {\n-                return clazz.getKey();\n-            }\n-        }));\n-\n+        typeExtTO.getAuxClasses().addAll(\n+                typeExt.getAuxClasses().stream().map(Entity::getKey).collect(Collectors.toList()));\n         return typeExtTO;\n     }\n \n@@ -368,13 +358,13 @@ public GroupTO getGroupTO(final Group group, final boolean details) {\n         if (group.getUDynMembership() != null) {\n             groupTO.setUDynMembershipCond(group.getUDynMembership().getFIQLCond());\n         }\n-        for (ADynGroupMembership memb : group.getADynMemberships()) {\n+        group.getADynMemberships().forEach(memb -> {\n             groupTO.getADynMembershipConds().put(memb.getAnyType().getKey(), memb.getFIQLCond());\n-        }\n+        });\n \n-        for (TypeExtension typeExt : group.getTypeExtensions()) {\n+        group.getTypeExtensions().forEach(typeExt -> {\n             groupTO.getTypeExtensions().add(getTypeExtensionTO(typeExt));\n-        }\n+        });\n \n         return groupTO;\n     }\n@@ -389,15 +379,15 @@ private void populateTransitiveResources(\n             final Group group, final Any<?> any, final Map<String, PropagationByResource> result) {\n \n         PropagationByResource propByRes = new PropagationByResource();\n-        for (ExternalResource resource : group.getResources()) {\n+        group.getResources().forEach(resource -> {\n             if (!any.getResources().contains(resource)) {\n                 propByRes.add(ResourceOperation.DELETE, resource.getKey());\n             }\n \n             if (!propByRes.isEmpty()) {\n                 result.put(any.getKey(), propByRes);\n             }\n-        }\n+        });\n     }\n \n     @Transactional(readOnly = true)\n@@ -407,9 +397,9 @@ public Map<String, PropagationByResource> findAnyObjectsWithTransitiveResources(\n \n         Map<String, PropagationByResource> result = new HashMap<>();\n \n-        for (AMembership membership : groupDAO.findAMemberships(group)) {\n+        groupDAO.findAMemberships(group).forEach((membership) -> {\n             populateTransitiveResources(group, membership.getLeftEnd(), result);\n-        }\n+        });\n \n         return result;\n     }\n@@ -421,9 +411,9 @@ public Map<String, PropagationByResource> findUsersWithTransitiveResources(final\n \n         Map<String, PropagationByResource> result = new HashMap<>();\n \n-        for (UMembership membership : groupDAO.findUMemberships(group)) {\n+        groupDAO.findUMemberships(group).forEach((membership) -> {\n             populateTransitiveResources(group, membership.getLeftEnd(), result);\n-        }\n+        });\n \n         return result;\n     }"},{"sha":"3afe62249344df658ca557bdab6cb8ce4f2c6164","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/NotificationDataBinderImpl.java","status":"modified","additions":26,"deletions":31,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,10 +18,8 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import java.util.Map;\n import java.util.regex.Matcher;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -70,9 +68,9 @@ public NotificationTO getNotificationTO(final Notification notification) {\n \n         BeanUtils.copyProperties(notification, result, IGNORE_PROPERTIES);\n \n-        for (AnyAbout about : notification.getAbouts()) {\n+        notification.getAbouts().forEach(about -> {\n             result.getAbouts().put(about.getAnyType().getKey(), about.get());\n-        }\n+        });\n \n         return result;\n     }\n@@ -101,47 +99,44 @@ public void update(final Notification notification, final NotificationTO notific\n         }\n \n         if (!notification.getStaticRecipients().isEmpty()) {\n-            for (String mail : notification.getStaticRecipients()) {\n+            notification.getStaticRecipients().forEach(mail -> {\n                 Matcher matcher = SyncopeConstants.EMAIL_PATTERN.matcher(mail);\n                 if (!matcher.matches()) {\n                     LOG.error(\"Invalid mail address: {}\", mail);\n                     sce.getElements().add(\"staticRecipients: \" + mail);\n                 }\n-            }\n+            });\n         }\n \n         if (!sce.isEmpty()) {\n             throw sce;\n         }\n \n         // 1. add or update all (valid) abouts from TO\n-        for (Map.Entry<String, String> entry : notificationTO.getAbouts().entrySet()) {\n-            if (StringUtils.isNotBlank(entry.getValue())) {\n-                AnyType anyType = anyTypeDAO.find(entry.getKey());\n-                if (anyType == null) {\n-                    LOG.debug(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());\n-                } else {\n-                    AnyAbout about = notification.getAbout(anyType);\n-                    if (about == null) {\n-                        about = entityFactory.newEntity(AnyAbout.class);\n-                        about.setAnyType(anyType);\n-                        about.setNotification(notification);\n-\n-                        notification.add(about);\n+        notificationTO.getAbouts().entrySet().stream().\n+                filter(entry -> StringUtils.isNotBlank(entry.getValue())).\n+                forEachOrdered((entry) -> {\n+\n+                    AnyType anyType = anyTypeDAO.find(entry.getKey());\n+                    if (anyType == null) {\n+                        LOG.debug(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());\n+                    } else {\n+                        AnyAbout about = notification.getAbout(anyType).orElse(null);\n+                        if (about == null) {\n+                            about = entityFactory.newEntity(AnyAbout.class);\n+                            about.setAnyType(anyType);\n+                            about.setNotification(notification);\n+\n+                            notification.add(about);\n+                        }\n+                        about.set(entry.getValue());\n                     }\n-                    about.set(entry.getValue());\n-                }\n-            }\n-        }\n+                });\n \n         // 2. remove all abouts not contained in the TO\n-        CollectionUtils.filter(notification.getAbouts(), new Predicate<AnyAbout>() {\n-\n-            @Override\n-            public boolean evaluate(final AnyAbout anyAbout) {\n-                return notificationTO.getAbouts().containsKey(anyAbout.getAnyType().getKey());\n-            }\n-        });\n+        notification.getAbouts().removeAll(notification.getAbouts().stream().\n+                filter(anyAbout -> !notificationTO.getAbouts().containsKey(anyAbout.getAnyType().getKey())).\n+                collect(Collectors.toList()));\n \n         // 3. verify recipientAttrName\n         intAttrNameParser.parse(notification.getRecipientAttrName(), AnyTypeKind.USER);"},{"sha":"a049fe8706c69788e2f10e47945cd5f78a1ab546","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -152,7 +152,7 @@ public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n                 accountPolicyTO.getRuleConfs().add((AbstractAccountRuleConf) ruleConf);\n             }\n \n-            accountPolicyTO.getPassthroughResources().addAll(accountPolicy.getResourceNames());\n+            accountPolicyTO.getPassthroughResources().addAll(accountPolicy.getResourceKeys());\n         } else if (policy instanceof PullPolicy) {\n             policyTO = (T) new PullPolicyTO();\n             ((PullPolicyTO) policyTO).setSpecification(((PullPolicy) policy).getSpecification());"},{"sha":"c7fc089a836eee9c34dbc106db8bb6906e28893c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java","status":"modified","additions":20,"deletions":29,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,11 +18,8 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n@@ -73,12 +70,12 @@ public class RealmDataBinderImpl implements RealmDataBinder {\n     private void setTemplates(final RealmTO realmTO, final Realm realm) {\n         // validate JEXL expressions from templates and proceed if fine\n         templateUtils.check(realmTO.getTemplates(), ClientExceptionType.InvalidPullTask);\n-        for (Map.Entry<String, AnyTO> entry : realmTO.getTemplates().entrySet()) {\n+        realmTO.getTemplates().entrySet().forEach(entry -> {\n             AnyType type = anyTypeDAO.find(entry.getKey());\n             if (type == null) {\n                 LOG.debug(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());\n             } else {\n-                AnyTemplateRealm anyTemplate = realm.getTemplate(type);\n+                AnyTemplateRealm anyTemplate = realm.getTemplate(type).orElse(null);\n                 if (anyTemplate == null) {\n                     anyTemplate = entityFactory.newEntity(AnyTemplateRealm.class);\n                     anyTemplate.setAnyType(type);\n@@ -88,15 +85,12 @@ private void setTemplates(final RealmTO realmTO, final Realm realm) {\n                 }\n                 anyTemplate.set(entry.getValue());\n             }\n-        }\n-        // remove all templates not contained in the TO\n-        CollectionUtils.filter(realm.getTemplates(), new Predicate<AnyTemplate>() {\n-\n-            @Override\n-            public boolean evaluate(final AnyTemplate anyTemplate) {\n-                return realmTO.getTemplates().containsKey(anyTemplate.getAnyType().getKey());\n-            }\n         });\n+        // remove all templates not contained in the TO\n+        realm.getTemplates().removeAll(\n+                realm.getTemplates().stream().\n+                        filter(anyTemplate -> !realmTO.getTemplates().containsKey(anyTemplate.getAnyType().getKey())).\n+                        collect(Collectors.toList()));\n     }\n \n     @Override\n@@ -133,14 +127,14 @@ public Realm create(final String parentPath, final RealmTO realmTO) {\n \n         setTemplates(realmTO, realm);\n \n-        for (String resourceKey : realmTO.getResources()) {\n+        realmTO.getResources().forEach(resourceKey -> {\n             ExternalResource resource = resourceDAO.find(resourceKey);\n             if (resource == null) {\n                 LOG.debug(\"Invalid \" + ExternalResource.class.getSimpleName() + \"{}, ignoring...\", resourceKey);\n             } else {\n                 realm.add(resource);\n             }\n-        }\n+        });\n \n         return realm;\n     }\n@@ -184,27 +178,24 @@ public PropagationByResource update(final Realm realm, final RealmTO realmTO) {\n         setTemplates(realmTO, realm);\n \n         final PropagationByResource propByRes = new PropagationByResource();\n-        for (String resourceKey : realmTO.getResources()) {\n+        realmTO.getResources().forEach(resourceKey -> {\n             ExternalResource resource = resourceDAO.find(resourceKey);\n             if (resource == null) {\n                 LOG.debug(\"Invalid \" + ExternalResource.class.getSimpleName() + \"{}, ignoring...\", resourceKey);\n             } else {\n                 realm.add(resource);\n                 propByRes.add(ResourceOperation.CREATE, resource.getKey());\n             }\n-        }\n-        // remove all resources not contained in the TO\n-        CollectionUtils.filter(realm.getResources(), new Predicate<ExternalResource>() {\n-\n-            @Override\n-            public boolean evaluate(final ExternalResource resource) {\n-                boolean contained = realmTO.getResources().contains(resource.getKey());\n-                if (!contained) {\n-                    propByRes.add(ResourceOperation.DELETE, resource.getKey());\n-                }\n-                return contained;\n-            }\n         });\n+        // remove all resources not contained in the TO\n+        realm.getResources().removeAll(\n+                realm.getResources().stream().filter(resource -> {\n+                    boolean contained = realmTO.getResources().contains(resource.getKey());\n+                    if (!contained) {\n+                        propByRes.add(ResourceOperation.DELETE, resource.getKey());\n+                    }\n+                    return !contained;\n+                }).collect(Collectors.toList()));\n \n         return propByRes;\n     }"},{"sha":"07ddf15b6987cc0ebd057de6d859ac1ca3460332","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":24,"deletions":29,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,8 +23,8 @@\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IteratorUtils;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.collections.IteratorChain;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n@@ -55,8 +55,6 @@\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n@@ -67,7 +65,6 @@\n import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n-import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.slf4j.Logger;\n@@ -158,13 +155,13 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n         resource.setRandomPwdIfNotProvided(resourceTO.isRandomPwdIfNotProvided());\n \n         // 1. add or update all (valid) provisions from TO\n-        for (ProvisionTO provisionTO : resourceTO.getProvisions()) {\n+        resourceTO.getProvisions().forEach(provisionTO -> {\n             AnyType anyType = anyTypeDAO.find(provisionTO.getAnyType());\n             if (anyType == null) {\n                 LOG.debug(\"Invalid {} specified {}, ignoring...\",\n                         AnyType.class.getSimpleName(), provisionTO.getAnyType());\n             } else {\n-                Provision provision = resource.getProvision(anyType);\n+                Provision provision = resource.getProvision(anyType).orElse(null);\n                 if (provision == null) {\n                     provision = entityFactory.newEntity(Provision.class);\n                     provision.setResource(resource);\n@@ -209,20 +206,17 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                     }\n \n                     AnyTypeClassTO allowedSchemas = new AnyTypeClassTO();\n-                    for (Iterator<AnyTypeClass> itor = IteratorUtils.chainedIterator(\n+                    for (Iterator<AnyTypeClass> itor = new IteratorChain<>(\n                             provision.getAnyType().getClasses().iterator(),\n                             provision.getAuxClasses().iterator()); itor.hasNext();) {\n \n                         AnyTypeClass anyTypeClass = itor.next();\n-                        allowedSchemas.getPlainSchemas().addAll(\n-                                CollectionUtils.collect(anyTypeClass.getPlainSchemas(),\n-                                        EntityUtils.<PlainSchema>keyTransformer()));\n-                        allowedSchemas.getDerSchemas().addAll(\n-                                CollectionUtils.collect(anyTypeClass.getDerSchemas(),\n-                                        EntityUtils.<DerSchema>keyTransformer()));\n-                        allowedSchemas.getVirSchemas().addAll(\n-                                CollectionUtils.collect(anyTypeClass.getVirSchemas(),\n-                                        EntityUtils.<VirSchema>keyTransformer()));\n+                        allowedSchemas.getPlainSchemas().addAll(anyTypeClass.getPlainSchemas().stream().\n+                                map(s -> s.getKey()).collect(Collectors.toList()));\n+                        allowedSchemas.getDerSchemas().addAll(anyTypeClass.getDerSchemas().stream().\n+                                map(s -> s.getKey()).collect(Collectors.toList()));\n+                        allowedSchemas.getVirSchemas().addAll(anyTypeClass.getVirSchemas().stream().\n+                                map(s -> s.getKey()).collect(Collectors.toList()));\n                     }\n \n                     populateMapping(\n@@ -247,15 +241,15 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                     }\n                 }\n             }\n-        }\n+        });\n \n         // 2. remove all provisions not contained in the TO\n         for (Iterator<? extends Provision> itor = resource.getProvisions().iterator(); itor.hasNext();) {\n             Provision provision = itor.next();\n             if (resourceTO.getProvision(provision.getAnyType().getKey()) == null) {\n-                for (VirSchema schema : virSchemaDAO.findByProvision(provision)) {\n+                virSchemaDAO.findByProvision(provision).forEach(schema -> {\n                     virSchemaDAO.delete(schema.getKey());\n-                }\n+                });\n \n                 itor.remove();\n             }\n@@ -491,7 +485,7 @@ private void populateMapping(\n     }\n \n     private void populateItems(final List<? extends Item> items, final ItemContainerTO containerTO) {\n-        for (Item item : items) {\n+        items.forEach(item -> {\n             ItemTO itemTO = new ItemTO();\n             itemTO.setKey(item.getKey());\n             BeanUtils.copyProperties(item, itemTO, ITEM_IGNORE_PROPERTIES);\n@@ -501,7 +495,7 @@ private void populateItems(final List<? extends Item> items, final ItemContainer\n             } else {\n                 containerTO.add(itemTO);\n             }\n-        }\n+        });\n     }\n \n     @Override\n@@ -518,13 +512,13 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n         resourceTO.setConnectorDisplayName(connector == null ? null : connector.getDisplayName());\n \n         // set the provision information\n-        for (Provision provision : resource.getProvisions()) {\n+        resource.getProvisions().stream().map(provision -> {\n             ProvisionTO provisionTO = new ProvisionTO();\n             provisionTO.setKey(provision.getKey());\n             provisionTO.setAnyType(provision.getAnyType().getKey());\n             provisionTO.setObjectClass(provision.getObjectClass().getObjectClassValue());\n-            provisionTO.getAuxClasses().addAll(CollectionUtils.collect(\n-                    provision.getAuxClasses(), EntityUtils.<AnyTypeClass>keyTransformer()));\n+            provisionTO.getAuxClasses().addAll(provision.getAuxClasses().stream().\n+                    map(cls -> cls.getKey()).collect(Collectors.toList()));\n             provisionTO.setSyncToken(provision.getSerializedSyncToken());\n \n             if (provision.getMapping() != null) {\n@@ -534,7 +528,7 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n                 populateItems(provision.getMapping().getItems(), mappingTO);\n             }\n \n-            for (VirSchema virSchema : virSchemaDAO.findByProvision(provision)) {\n+            virSchemaDAO.findByProvision(provision).forEach(virSchema -> {\n                 provisionTO.getVirSchemas().add(virSchema.getKey());\n \n                 MappingItem linkingMappingItem = virSchema.asLinkingMappingItem();\n@@ -544,10 +538,11 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n                 BeanUtils.copyProperties(linkingMappingItem, itemTO, ITEM_IGNORE_PROPERTIES);\n \n                 provisionTO.getMapping().getLinkingItems().add(itemTO);\n-            }\n-\n+            });\n+            return provisionTO;\n+        }).forEachOrdered(provisionTO -> {\n             resourceTO.getProvisions().add(provisionTO);\n-        }\n+        });\n \n         if (resource.getOrgUnit() != null) {\n             OrgUnit orgUnit = resource.getOrgUnit();"},{"sha":"f15011eccadbc706cdeade80f5c13d7e3c11ce62","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RoleDataBinderImpl.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,8 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -34,7 +33,6 @@\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.user.DynRoleMembership;\n import org.apache.syncope.core.provisioning.api.data.RoleDataBinder;\n-import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -135,15 +133,11 @@ public RoleTO getRoleTO(final Role role) {\n         roleTO.setKey(role.getKey());\n         roleTO.getEntitlements().addAll(role.getEntitlements());\n \n-        CollectionUtils.collect(role.getRealms(), new Transformer<Realm, String>() {\n+        roleTO.getRealms().addAll(role.getRealms().stream().\n+                map(r -> r.getFullPath()).collect(Collectors.toList()));\n \n-            @Override\n-            public String transform(final Realm input) {\n-                return input.getFullPath();\n-            }\n-        }, roleTO.getRealms());\n-\n-        CollectionUtils.collect(role.getDynRealms(), EntityUtils.keyTransformer(), roleTO.getDynRealms());\n+        roleTO.getDynRealms().addAll(role.getDynRealms().stream().\n+                map(r -> r.getKey()).collect(Collectors.toList()));\n \n         if (role.getDynMembership() != null) {\n             roleTO.setDynMembershipCond(role.getDynMembership().getFIQLCond());"},{"sha":"dfa3a8ec357a3b39ad3778483ac640422f25bd2c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -256,7 +256,7 @@ private VirSchema fill(final VirSchema schema, final VirSchemaTO schemaTO) {\n             sce.getElements().add(\"AnyType \" + schemaTO.getAnyType() + \" not found\");\n             throw sce;\n         }\n-        Provision provision = resource.getProvision(anyType);\n+        Provision provision = resource.getProvision(anyType).orElse(null);\n         if (provision == null) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSchemaDefinition);\n             sce.getElements().add(\"Provision for AnyType\" + schemaTO.getAnyType()"},{"sha":"646e950c30de171d48867cbf185833456eae63cb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":22,"deletions":34,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,15 +18,12 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import java.util.Map;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.stream.Collectors;\n import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AbstractProvisioningTaskTO;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n-import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n@@ -57,7 +54,6 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n@@ -123,12 +119,12 @@ private void fill(final ProvisioningTask task, final AbstractProvisioningTaskTO\n             pushTask.setUnmatchingRule(pushTaskTO.getUnmatchingRule() == null\n                     ? UnmatchingRule.ASSIGN : pushTaskTO.getUnmatchingRule());\n \n-            for (Map.Entry<String, String> entry : pushTaskTO.getFilters().entrySet()) {\n+            pushTaskTO.getFilters().entrySet().forEach(entry -> {\n                 AnyType type = anyTypeDAO.find(entry.getKey());\n                 if (type == null) {\n                     LOG.debug(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());\n                 } else {\n-                    PushTaskAnyFilter filter = pushTask.getFilter(type);\n+                    PushTaskAnyFilter filter = pushTask.getFilter(type).orElse(null);\n                     if (filter == null) {\n                         filter = entityFactory.newEntity(PushTaskAnyFilter.class);\n                         filter.setAnyType(anyTypeDAO.find(entry.getKey()));\n@@ -137,15 +133,12 @@ private void fill(final ProvisioningTask task, final AbstractProvisioningTaskTO\n                     }\n                     filter.setFIQLCond(entry.getValue());\n                 }\n-            }\n-            // remove all filters not contained in the TO\n-            CollectionUtils.filter(pushTask.getFilters(), new Predicate<PushTaskAnyFilter>() {\n-\n-                @Override\n-                public boolean evaluate(final PushTaskAnyFilter anyFilter) {\n-                    return pushTaskTO.getFilters().containsKey(anyFilter.getAnyType().getKey());\n-                }\n             });\n+            // remove all filters not contained in the TO\n+            pushTask.getFilters().removeAll(\n+                    pushTask.getFilters().stream().filter(anyFilter\n+                            -> !pushTaskTO.getFilters().containsKey(anyFilter.getAnyType().getKey())).\n+                            collect(Collectors.toList()));\n         } else if (task instanceof PullTask && taskTO instanceof PullTaskTO) {\n             PullTask pullTask = (PullTask) task;\n             final PullTaskTO pullTaskTO = (PullTaskTO) taskTO;\n@@ -164,12 +157,12 @@ public boolean evaluate(final PushTaskAnyFilter anyFilter) {\n \n             // validate JEXL expressions from templates and proceed if fine\n             templateUtils.check(pullTaskTO.getTemplates(), ClientExceptionType.InvalidPullTask);\n-            for (Map.Entry<String, AnyTO> entry : pullTaskTO.getTemplates().entrySet()) {\n+            pullTaskTO.getTemplates().entrySet().forEach(entry -> {\n                 AnyType type = anyTypeDAO.find(entry.getKey());\n                 if (type == null) {\n                     LOG.debug(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());\n                 } else {\n-                    AnyTemplatePullTask anyTemplate = pullTask.getTemplate(type);\n+                    AnyTemplatePullTask anyTemplate = pullTask.getTemplate(type).orElse(null);\n                     if (anyTemplate == null) {\n                         anyTemplate = entityFactory.newEntity(AnyTemplatePullTask.class);\n                         anyTemplate.setAnyType(type);\n@@ -179,15 +172,12 @@ public boolean evaluate(final PushTaskAnyFilter anyFilter) {\n                     }\n                     anyTemplate.set(entry.getValue());\n                 }\n-            }\n-            // remove all templates not contained in the TO\n-            CollectionUtils.filter(pullTask.getTemplates(), new Predicate<AnyTemplate>() {\n-\n-                @Override\n-                public boolean evaluate(final AnyTemplate anyTemplate) {\n-                    return pullTaskTO.getTemplates().containsKey(anyTemplate.getAnyType().getKey());\n-                }\n             });\n+            // remove all templates not contained in the TO\n+            pullTask.getTemplates().removeAll(\n+                    pullTask.getTemplates().stream().filter(anyTemplate\n+                            -> !pullTaskTO.getTemplates().containsKey(anyTemplate.getAnyType().getKey())).\n+                            collect(Collectors.toList()));\n         }\n \n         // 3. fill the remaining fields\n@@ -313,11 +303,9 @@ public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtils t\n         }\n \n         if (details) {\n-            for (TaskExec execution : task.getExecs()) {\n-                if (execution != null) {\n-                    taskTO.getExecutions().add(getExecTO(execution));\n-                }\n-            }\n+            task.getExecs().stream().\n+                    filter(execution -> execution != null).\n+                    forEachOrdered(execution -> taskTO.getExecutions().add(getExecTO(execution)));\n         }\n \n         switch (taskUtils.getType()) {\n@@ -341,9 +329,9 @@ public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtils t\n                 ((PullTaskTO) taskTO).setUnmatchingRule(((PullTask) task).getUnmatchingRule() == null\n                         ? UnmatchingRule.PROVISION : ((PullTask) task).getUnmatchingRule());\n \n-                for (AnyTemplate template : ((PullTask) task).getTemplates()) {\n+                ((PullTask) task).getTemplates().forEach(template -> {\n                     ((PullTaskTO) taskTO).getTemplates().put(template.getAnyType().getKey(), template.get());\n-                }\n+                });\n                 break;\n \n             case PUSH:\n@@ -355,9 +343,9 @@ public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtils t\n                 ((PushTaskTO) taskTO).setUnmatchingRule(((PushTask) task).getUnmatchingRule() == null\n                         ? UnmatchingRule.ASSIGN : ((PushTask) task).getUnmatchingRule());\n \n-                for (PushTaskAnyFilter filter : ((PushTask) task).getFilters()) {\n+                ((PushTask) task).getFilters().forEach(filter -> {\n                     ((PushTaskTO) taskTO).getFilters().put(filter.getAnyType().getKey(), filter.getFIQLCond());\n-                }\n+                });\n                 break;\n \n             case NOTIFICATION:"},{"sha":"5bae8519a54d94d137d1708e59599d93ed1aaa18","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":154,"deletions":183,"changes":337,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -24,24 +24,18 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.annotation.Resource;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.patch.MembershipPatch;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.RelationshipPatch;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n-import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -59,19 +53,18 @@\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.core.spring.BeanUtils;\n-import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n@@ -189,14 +182,14 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n         user.setSecurityAnswer(userTO.getSecurityAnswer());\n \n         // roles\n-        for (String roleKey : userTO.getRoles()) {\n+        userTO.getRoles().forEach(roleKey -> {\n             Role role = roleDAO.find(roleKey);\n             if (role == null) {\n                 LOG.warn(\"Ignoring unknown role with id {}\", roleKey);\n             } else {\n                 user.add(role);\n             }\n-        }\n+        });\n \n         // realm\n         Realm realm = realmDAO.findByFullPath(userTO.getRealm());\n@@ -210,11 +203,11 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n         AnyUtils anyUtils = anyUtilsFactory.getInstance(AnyTypeKind.USER);\n         if (user.getRealm() != null) {\n             // relationships\n-            Collection<String> assignableAnyObjects = CollectionUtils.collect(\n-                    searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT),\n-                    EntityUtils.keyTransformer());\n+            Collection<String> assignableAnyObjects =\n+                    searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT).stream().\n+                            map(a -> a.getKey()).collect(Collectors.toList());\n \n-            for (RelationshipTO relationshipTO : userTO.getRelationships()) {\n+            userTO.getRelationships().forEach(relationshipTO -> {\n                 AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getRightKey());\n                 if (otherEnd == null) {\n                     LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n@@ -239,14 +232,14 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n                     unassignabled.getElements().add(\"Cannot be assigned: \" + otherEnd);\n                     scce.addException(unassignabled);\n                 }\n-            }\n+            });\n \n             // memberships\n-            Collection<String> assignableGroups = CollectionUtils.collect(\n-                    searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.GROUP),\n-                    EntityUtils.keyTransformer());\n+            Collection<String> assignableGroups =\n+                    searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.GROUP).stream().\n+                            map(g -> g.getKey()).collect(Collectors.toList());\n \n-            for (MembershipTO membershipTO : userTO.getMemberships()) {\n+            userTO.getMemberships().forEach(membershipTO -> {\n                 Group group = membershipTO.getRightKey() == null\n                         ? groupDAO.findByName(membershipTO.getGroupName())\n                         : groupDAO.find(membershipTO.getRightKey());\n@@ -270,7 +263,7 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n                     unassignable.getElements().add(\"Cannot be assigned: \" + group);\n                     scce.addException(unassignable);\n                 }\n-            }\n+            });\n         }\n \n         // attributes and resources\n@@ -285,15 +278,9 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n     private boolean isPasswordMapped(final ExternalResource resource) {\n         boolean result = false;\n \n-        Provision provision = resource.getProvision(anyTypeDAO.findUser());\n-        if (provision != null && provision.getMapping() != null) {\n-            result = IterableUtils.matchesAny(provision.getMapping().getItems(), new Predicate<MappingItem>() {\n-\n-                @Override\n-                public boolean evaluate(final MappingItem item) {\n-                    return item.isPassword();\n-                }\n-            });\n+        Optional<? extends Provision> provision = resource.getProvision(anyTypeDAO.findUser());\n+        if (provision.isPresent() && provision.get().getMapping() != null) {\n+            result = provision.get().getMapping().getItems().stream().anyMatch(item -> item.isPassword());\n         }\n \n         return result;\n@@ -389,139 +376,136 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n         Set<String> toBeProvisioned = new HashSet<>();\n \n         // relationships\n-        Collection<String> assignableAnyObjects = CollectionUtils.collect(\n-                searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT),\n-                EntityUtils.keyTransformer());\n-\n-        for (RelationshipPatch patch : userPatch.getRelationships()) {\n-            if (patch.getRelationshipTO() != null) {\n-                RelationshipType relationshipType = relationshipTypeDAO.find(patch.getRelationshipTO().getType());\n-                if (relationshipType == null) {\n-                    LOG.debug(\"Ignoring invalid relationship type {}\", patch.getRelationshipTO().getType());\n-                } else {\n-                    URelationship relationship =\n-                            user.getRelationship(relationshipType, patch.getRelationshipTO().getRightKey());\n-                    if (relationship != null) {\n-                        user.getRelationships().remove(relationship);\n-                        relationship.setLeftEnd(null);\n-\n-                        toBeDeprovisioned.addAll(\n-                                anyObjectDAO.findAllResourceKeys(relationship.getRightEnd().getKey()));\n-                    }\n+        Collection<String> assignableAnyObjects =\n+                searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT).stream().\n+                        map(a -> a.getKey()).collect(Collectors.toList());\n+\n+        userPatch.getRelationships().stream().\n+                filter(patch -> patch.getRelationshipTO() != null).forEachOrdered((patch) -> {\n+            RelationshipType relationshipType = relationshipTypeDAO.find(patch.getRelationshipTO().getType());\n+            if (relationshipType == null) {\n+                LOG.debug(\"Ignoring invalid relationship type {}\", patch.getRelationshipTO().getType());\n+            } else {\n+                Optional<? extends URelationship> relationship =\n+                        user.getRelationship(relationshipType, patch.getRelationshipTO().getRightKey());\n+                if (relationship.isPresent()) {\n+                    user.getRelationships().remove(relationship.get());\n+                    relationship.get().setLeftEnd(null);\n+\n+                    toBeDeprovisioned.addAll(\n+                            anyObjectDAO.findAllResourceKeys(relationship.get().getRightEnd().getKey()));\n+                }\n \n-                    if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                        AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());\n-                        if (otherEnd == null) {\n-                            LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());\n-                        } else if (assignableAnyObjects.contains(otherEnd.getKey())) {\n-                            relationship = entityFactory.newEntity(URelationship.class);\n-                            relationship.setType(relationshipType);\n-                            relationship.setRightEnd(otherEnd);\n-                            relationship.setLeftEnd(user);\n+                if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                    AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());\n+                    if (otherEnd == null) {\n+                        LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());\n+                    } else if (assignableAnyObjects.contains(otherEnd.getKey())) {\n+                        URelationship newRelationship = entityFactory.newEntity(URelationship.class);\n+                        newRelationship.setType(relationshipType);\n+                        newRelationship.setRightEnd(otherEnd);\n+                        newRelationship.setLeftEnd(user);\n \n-                            user.add(relationship);\n+                        user.add(newRelationship);\n \n-                            toBeProvisioned.addAll(anyObjectDAO.findAllResourceKeys(otherEnd.getKey()));\n-                        } else {\n-                            LOG.error(\"{} cannot be assigned to {}\", otherEnd, user);\n+                        toBeProvisioned.addAll(anyObjectDAO.findAllResourceKeys(otherEnd.getKey()));\n+                    } else {\n+                        LOG.error(\"{} cannot be assigned to {}\", otherEnd, user);\n \n-                            SyncopeClientException unassignable =\n-                                    SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n-                            unassignable.getElements().add(\"Cannot be assigned: \" + otherEnd);\n-                            scce.addException(unassignable);\n-                        }\n+                        SyncopeClientException unassignable =\n+                                SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n+                        unassignable.getElements().add(\"Cannot be assigned: \" + otherEnd);\n+                        scce.addException(unassignable);\n                     }\n                 }\n             }\n-        }\n+        });\n \n         Collection<ExternalResource> resources = userDAO.findAllResources(user);\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // memberships\n-        Collection<String> assignableGroups = CollectionUtils.collect(\n-                searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.GROUP),\n-                EntityUtils.keyTransformer());\n-\n-        for (MembershipPatch membPatch : userPatch.getMemberships()) {\n-            if (membPatch.getGroup() != null) {\n-                UMembership membership = user.getMembership(membPatch.getGroup());\n-                if (membership != null) {\n-                    user.getMemberships().remove(membership);\n-                    membership.setLeftEnd(null);\n-                    for (UPlainAttr attr : user.getPlainAttrs(membership)) {\n-                        user.remove(attr);\n-                        attr.setOwner(null);\n-                        attr.setMembership(null);\n-                    }\n+        Collection<String> assignableGroups =\n+                searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.GROUP).stream().\n+                        map(g -> g.getKey()).collect(Collectors.toList());\n+\n+        userPatch.getMemberships().stream().\n+                filter(membPatch -> membPatch.getGroup() != null).forEachOrdered((membPatch) -> {\n+            Optional<? extends UMembership> membership = user.getMembership(membPatch.getGroup());\n+            if (membership.isPresent()) {\n+                user.getMemberships().remove(membership.get());\n+                membership.get().setLeftEnd(null);\n+                user.getPlainAttrs(membership.get()).forEach(attr -> {\n+                    user.remove(attr);\n+                    attr.setOwner(null);\n+                    attr.setMembership(null);\n+                });\n+\n+                toBeDeprovisioned.addAll(groupDAO.findAllResourceKeys(membership.get().getRightEnd().getKey()));\n+            }\n+            if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                Group group = groupDAO.find(membPatch.getGroup());\n+                if (group == null) {\n+                    LOG.debug(\"Ignoring invalid group {}\", membPatch.getGroup());\n+                } else if (assignableGroups.contains(group.getKey())) {\n+                    UMembership newMembership = entityFactory.newEntity(UMembership.class);\n+                    newMembership.setRightEnd(group);\n+                    newMembership.setLeftEnd(user);\n \n-                    toBeDeprovisioned.addAll(groupDAO.findAllResourceKeys(membership.getRightEnd().getKey()));\n-                }\n+                    user.add(newMembership);\n \n-                if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                    Group group = groupDAO.find(membPatch.getGroup());\n-                    if (group == null) {\n-                        LOG.debug(\"Ignoring invalid group {}\", membPatch.getGroup());\n-                    } else if (assignableGroups.contains(group.getKey())) {\n-                        membership = entityFactory.newEntity(UMembership.class);\n-                        membership.setRightEnd(group);\n-                        membership.setLeftEnd(user);\n-\n-                        user.add(membership);\n-\n-                        for (AttrTO attrTO : membPatch.getPlainAttrs()) {\n-                            PlainSchema schema = getPlainSchema(attrTO.getSchema());\n-                            if (schema == null) {\n-                                LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName()\n-                                        + \"{}, ignoring...\", attrTO.getSchema());\n-                            } else {\n-                                UPlainAttr attr = user.getPlainAttr(schema.getKey(), membership);\n-                                if (attr == null) {\n-                                    LOG.debug(\"No plain attribute found for {} and membership of {}\",\n-                                            schema, membership.getRightEnd());\n-\n-                                    attr = anyUtils.newPlainAttr();\n-                                    attr.setOwner(user);\n-                                    attr.setMembership(membership);\n-                                    attr.setSchema(schema);\n-                                    user.add(attr);\n-\n-                                    AttrPatch patch = new AttrPatch.Builder().attrTO(attrTO).build();\n-                                    processAttrPatch(\n-                                            user, patch, schema, attr, anyUtils,\n-                                            resources, propByRes, invalidValues);\n-                                }\n+                    membPatch.getPlainAttrs().forEach(attrTO -> {\n+                        PlainSchema schema = getPlainSchema(attrTO.getSchema());\n+                        if (schema == null) {\n+                            LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName()\n+                                    + \"{}, ignoring...\", attrTO.getSchema());\n+                        } else {\n+                            UPlainAttr attr = user.getPlainAttr(schema.getKey(), newMembership).orElse(null);\n+                            if (attr == null) {\n+                                LOG.debug(\"No plain attribute found for {} and membership of {}\",\n+                                        schema, newMembership.getRightEnd());\n+\n+                                attr = anyUtils.newPlainAttr();\n+                                attr.setOwner(user);\n+                                attr.setMembership(newMembership);\n+                                attr.setSchema(schema);\n+                                user.add(attr);\n+\n+                                AttrPatch patch = new AttrPatch.Builder().attrTO(attrTO).build();\n+                                processAttrPatch(\n+                                        user, patch, schema, attr, anyUtils,\n+                                        resources, propByRes, invalidValues);\n                             }\n                         }\n-                        if (!invalidValues.isEmpty()) {\n-                            scce.addException(invalidValues);\n-                        }\n+                    });\n+                    if (!invalidValues.isEmpty()) {\n+                        scce.addException(invalidValues);\n+                    }\n \n-                        toBeProvisioned.addAll(groupDAO.findAllResourceKeys(group.getKey()));\n+                    toBeProvisioned.addAll(groupDAO.findAllResourceKeys(group.getKey()));\n \n-                        // SYNCOPE-686: if password is invertible and we are adding resources with password mapping,\n-                        // ensure that they are counted for password propagation\n-                        if (toBeUpdated.canDecodePassword()) {\n-                            if (userPatch.getPassword() == null) {\n-                                userPatch.setPassword(new PasswordPatch());\n-                            }\n-                            for (ExternalResource resource : group.getResources()) {\n-                                if (isPasswordMapped(resource)) {\n-                                    userPatch.getPassword().getResources().add(resource.getKey());\n-                                }\n-                            }\n+                    // SYNCOPE-686: if password is invertible and we are adding resources with password mapping,\n+                    // ensure that they are counted for password propagation\n+                    if (toBeUpdated.canDecodePassword()) {\n+                        if (userPatch.getPassword() == null) {\n+                            userPatch.setPassword(new PasswordPatch());\n                         }\n-                    } else {\n-                        LOG.error(\"{} cannot be assigned to {}\", group, user);\n-\n-                        SyncopeClientException unassignabled =\n-                                SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n-                        unassignabled.getElements().add(\"Cannot be assigned: \" + group);\n-                        scce.addException(unassignabled);\n+                        group.getResources().stream().\n+                                filter(resource -> isPasswordMapped(resource)).\n+                                forEachOrdered(resource -> {\n+                                    userPatch.getPassword().getResources().add(resource.getKey());\n+                                });\n                     }\n+                } else {\n+                    LOG.error(\"{} cannot be assigned to {}\", group, user);\n+\n+                    SyncopeClientException unassignabled =\n+                            SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n+                    unassignabled.getElements().add(\"Cannot be assigned: \" + group);\n+                    scce.addException(unassignabled);\n                 }\n             }\n-        }\n+        });\n \n         propByRes.addAll(ResourceOperation.DELETE, toBeDeprovisioned);\n         propByRes.addAll(ResourceOperation.UPDATE, toBeProvisioned);\n@@ -535,14 +519,14 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n \n         // check if some connObjectKey was changed by the update above\n         Map<String, String> newcCnnObjectKeys = getConnObjectKeys(user);\n-        for (Map.Entry<String, String> entry : oldConnObjectKeys.entrySet()) {\n-            if (newcCnnObjectKeys.containsKey(entry.getKey())\n-                    && !entry.getValue().equals(newcCnnObjectKeys.get(entry.getKey()))) {\n+        oldConnObjectKeys.entrySet().stream().\n+                filter(entry -> newcCnnObjectKeys.containsKey(entry.getKey())\n+                && !entry.getValue().equals(newcCnnObjectKeys.get(entry.getKey()))).\n+                forEach(entry -> {\n \n-                propByRes.addOldConnObjectKey(entry.getKey(), entry.getValue());\n-                propByRes.add(ResourceOperation.UPDATE, entry.getKey());\n-            }\n-        }\n+                    propByRes.addOldConnObjectKey(entry.getKey(), entry.getValue());\n+                    propByRes.add(ResourceOperation.UPDATE, entry.getKey());\n+                });\n \n         userDAO.save(user);\n \n@@ -581,46 +565,33 @@ public UserTO getUserTO(final User user, final boolean details) {\n             userTO.getDynRealms().addAll(userDAO.findDynRealms(user.getKey()));\n \n             // roles\n-            CollectionUtils.collect(user.getRoles(),\n-                    EntityUtils.<Role>keyTransformer(), userTO.getRoles());\n+            userTO.getRoles().addAll(user.getRoles().stream().map(r -> r.getKey()).collect(Collectors.toList()));\n \n             // relationships\n-            CollectionUtils.collect(user.getRelationships(), new Transformer<URelationship, RelationshipTO>() {\n-\n-                @Override\n-                public RelationshipTO transform(final URelationship relationship) {\n-                    return UserDataBinderImpl.this.getRelationshipTO(relationship);\n-                }\n-\n-            }, userTO.getRelationships());\n+            userTO.getRelationships().addAll(\n+                    user.getRelationships().stream().map(relationship -> getRelationshipTO(relationship)).\n+                            collect(Collectors.toList()));\n \n             // memberships\n-            CollectionUtils.collect(user.getMemberships(), new Transformer<UMembership, MembershipTO>() {\n-\n-                @Override\n-                public MembershipTO transform(final UMembership membership) {\n-                    return getMembershipTO(\n-                            user.getPlainAttrs(membership),\n-                            derAttrHandler.getValues(user, membership),\n-                            virAttrHandler.getValues(user, membership),\n-                            membership);\n-                }\n-            }, userTO.getMemberships());\n+            userTO.getMemberships().addAll(\n+                    user.getMemberships().stream().map(membership -> {\n+                        return getMembershipTO(\n+                                user.getPlainAttrs(membership),\n+                                derAttrHandler.getValues(user, membership),\n+                                virAttrHandler.getValues(user, membership),\n+                                membership);\n+                    }).collect(Collectors.toList()));\n \n             // dynamic memberships\n-            CollectionUtils.collect(userDAO.findDynRoles(user.getKey()),\n-                    EntityUtils.<Role>keyTransformer(), userTO.getDynRoles());\n-            CollectionUtils.collect(userDAO.findDynGroups(user.getKey()), new Transformer<Group, MembershipTO>() {\n-\n-                @Override\n-                public MembershipTO transform(final Group group) {\n-                    MembershipTO membershipTO = new MembershipTO.Builder().\n-                            group(group.getKey(), group.getName()).\n-                            build();\n-                    return membershipTO;\n-\n-                }\n-            }, userTO.getDynMemberships());\n+            userTO.getDynRoles().addAll(\n+                    userDAO.findDynRoles(user.getKey()).stream().map(Entity::getKey).collect(Collectors.toList()));\n+\n+            userTO.getDynMemberships().addAll(\n+                    userDAO.findDynGroups(user.getKey()).stream().map(group -> {\n+                        return new MembershipTO.Builder().\n+                                group(group.getKey(), group.getName()).\n+                                build();\n+                    }).collect(Collectors.toList()));\n         }\n \n         return userTO;"},{"sha":"62587e170a2d9aa4798a44092dd03515fe4035ae","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/JexlUtils.java","status":"modified","additions":16,"deletions":19,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FJexlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FJexlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FJexlUtils.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -37,7 +37,6 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -168,27 +167,25 @@ public static JexlContext addFieldsToContext(final Object object, final JexlCont\n     public static void addPlainAttrsToContext(\n             final Collection<? extends PlainAttr<?>> attrs, final JexlContext jexlContext) {\n \n-        for (PlainAttr<?> attr : attrs) {\n-            if (attr.getSchema() != null) {\n-                List<String> attrValues = attr.getValuesAsStrings();\n-                String expressionValue = attrValues.isEmpty()\n-                        ? StringUtils.EMPTY\n-                        : attrValues.get(0);\n+        attrs.stream().filter(attr -> attr.getSchema() != null).forEachOrdered((attr) -> {\n+            List<String> attrValues = attr.getValuesAsStrings();\n+            String expressionValue = attrValues.isEmpty()\n+                    ? StringUtils.EMPTY\n+                    : attrValues.get(0);\n \n-                LOG.debug(\"Add attribute {} with value {}\", attr.getSchema().getKey(), expressionValue);\n+            LOG.debug(\"Add attribute {} with value {}\", attr.getSchema().getKey(), expressionValue);\n \n-                jexlContext.set(attr.getSchema().getKey(), expressionValue);\n-            }\n-        }\n+            jexlContext.set(attr.getSchema().getKey(), expressionValue);\n+        });\n     }\n \n     public static void addDerAttrsToContext(final Any<?> any, final JexlContext jexlContext) {\n         Map<DerSchema, String> derAttrs =\n                 ApplicationContextProvider.getBeanFactory().getBean(DerAttrHandler.class).getValues(any);\n \n-        for (Map.Entry<DerSchema, String> entry : derAttrs.entrySet()) {\n+        derAttrs.entrySet().forEach(entry -> {\n             jexlContext.set(entry.getKey().getKey(), entry.getValue());\n-        }\n+        });\n     }\n \n     public static boolean evaluateMandatoryCondition(final String mandatoryCondition, final Any<?> any) {\n@@ -202,7 +199,7 @@ public static boolean evaluateMandatoryCondition(final String mandatoryCondition\n     public static String evaluate(final String expression, final AnyTO anyTO, final JexlContext context) {\n         addFieldsToContext(anyTO, context);\n \n-        for (AttrTO plainAttr : anyTO.getPlainAttrs()) {\n+        anyTO.getPlainAttrs().forEach(plainAttr -> {\n             List<String> values = plainAttr.getValues();\n             String expressionValue = values.isEmpty()\n                     ? StringUtils.EMPTY\n@@ -211,8 +208,8 @@ public static String evaluate(final String expression, final AnyTO anyTO, final\n             LOG.debug(\"Add plain attribute {} with value {}\", plainAttr.getSchema(), expressionValue);\n \n             context.set(plainAttr.getSchema(), expressionValue);\n-        }\n-        for (AttrTO derAttr : anyTO.getDerAttrs()) {\n+        });\n+        anyTO.getDerAttrs().forEach(derAttr -> {\n             List<String> values = derAttr.getValues();\n             String expressionValue = values.isEmpty()\n                     ? StringUtils.EMPTY\n@@ -221,8 +218,8 @@ public static String evaluate(final String expression, final AnyTO anyTO, final\n             LOG.debug(\"Add derived attribute {} with value {}\", derAttr.getSchema(), expressionValue);\n \n             context.set(derAttr.getSchema(), expressionValue);\n-        }\n-        for (AttrTO virAttr : anyTO.getVirAttrs()) {\n+        });\n+        anyTO.getVirAttrs().forEach(virAttr -> {\n             List<String> values = virAttr.getValues();\n             String expressionValue = values.isEmpty()\n                     ? StringUtils.EMPTY\n@@ -231,7 +228,7 @@ public static String evaluate(final String expression, final AnyTO anyTO, final\n             LOG.debug(\"Add virtual attribute {} with value {}\", virAttr.getSchema(), expressionValue);\n \n             context.set(virAttr.getSchema(), expressionValue);\n-        }\n+        });\n \n         // Evaluate expression using the context prepared before\n         return evaluate(expression, context);"},{"sha":"684c0215c112528a3f01f92519ab7d8fec6ed73f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/SyncopeJexlFunctions.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FSyncopeJexlFunctions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FSyncopeJexlFunctions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FSyncopeJexlFunctions.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.core.provisioning.java.jexl;\n \n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.lang3.StringUtils;\n \n /**\n@@ -61,7 +61,8 @@ public String fullPath2Dn(final String fullPath, final String attr, final String\n         }\n \n         List<String> headless = Arrays.asList(fullPathSplitted).subList(1, fullPathSplitted.length);\n-        return prefix + attr + \"=\" + StringUtils.join(IterableUtils.reversedIterable(headless), \",\" + attr + \"=\");\n+        Collections.reverse(headless);\n+        return prefix + attr + \"=\" + StringUtils.join(headless, \",\" + attr + \"=\");\n     }\n \n }"},{"sha":"f9d310f8d216b1c6621f82f70d9877dc1ec698b2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/IdentityRecertification.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FIdentityRecertification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FIdentityRecertification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FIdentityRecertification.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,6 +18,7 @@\n  */\r\n package org.apache.syncope.core.provisioning.java.job;\r\n \r\n+import java.util.Optional;\r\n import org.apache.commons.lang3.StringUtils;\r\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\r\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\r\n@@ -47,15 +48,16 @@ public class IdentityRecertification extends AbstractSchedTaskJobDelegate {\n     protected void init() {\r\n         synchronized (this) {\r\n             if (recertificationTime == -1) {\r\n-                CPlainAttr recertificationTimeAttr = confDAO.find(RECERTIFICATION_TIME);\r\n-                if (recertificationTimeAttr == null\r\n-                        || recertificationTimeAttr.getValues().get(0).getLongValue() == null) {\r\n+                Optional<? extends CPlainAttr> recertificationTimeAttr = confDAO.find(RECERTIFICATION_TIME);\r\n+                if (!recertificationTimeAttr.isPresent()\r\n+                        || recertificationTimeAttr.get().getValues().get(0).getLongValue() == null) {\r\n \r\n                     recertificationTime = -1;\r\n                     return;\r\n                 }\r\n \r\n-                recertificationTime = recertificationTimeAttr.getValues().get(0).getLongValue() * 1000 * 60 * 60 * 24;\r\n+                recertificationTime = recertificationTimeAttr.get().getValues().\r\n+                        get(0).getLongValue() * 1000 * 60 * 60 * 24;\r\n             }\r\n         }\r\n     }\r"},{"sha":"f82c24322d34db017bb98ad6bdac53699da93fca","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java","status":"modified","additions":33,"deletions":50,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -26,9 +26,8 @@\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -53,7 +52,6 @@\n import org.quartz.Job;\n import org.quartz.JobBuilder;\n import org.quartz.JobDataMap;\n-import org.quartz.JobExecutionContext;\n import org.quartz.JobKey;\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n@@ -100,14 +98,8 @@ public void setDisableQuartzInstance(final boolean disableQuartzInstance) {\n     }\n \n     private boolean isRunningHere(final JobKey jobKey) throws SchedulerException {\n-        return IterableUtils.matchesAny(scheduler.getScheduler().getCurrentlyExecutingJobs(),\n-                new Predicate<JobExecutionContext>() {\n-\n-            @Override\n-            public boolean evaluate(final JobExecutionContext jec) {\n-                return jobKey.equals(jec.getJobDetail().getKey());\n-            }\n-        });\n+        return scheduler.getScheduler().getCurrentlyExecutingJobs().stream().\n+                anyMatch(jec -> jobKey.equals(jec.getJobDetail().getKey()));\n     }\n \n     private boolean isRunningElsewhere(final JobKey jobKey) throws SchedulerException {\n@@ -299,54 +291,45 @@ public void load() {\n             }\n         }\n \n-        final Pair<String, Long> conf = AuthContextUtils.execWithAuthContext(\n-                SyncopeConstants.MASTER_DOMAIN, new AuthContextUtils.Executable<Pair<String, Long>>() {\n+        final Pair<String, Long> conf = AuthContextUtils.execWithAuthContext(SyncopeConstants.MASTER_DOMAIN, () -> {\n+            String notificationJobCronExpression = StringUtils.EMPTY;\n \n-            @Override\n-            public Pair<String, Long> exec() {\n-                String notificationJobCronExpression = StringUtils.EMPTY;\n-\n-                CPlainAttr notificationJobCronExp = confDAO.find(\"notificationjob.cronExpression\");\n-                if (notificationJobCronExp == null) {\n-                    notificationJobCronExpression = NotificationJob.DEFAULT_CRON_EXP;\n-                } else if (!notificationJobCronExp.getValuesAsStrings().isEmpty()) {\n-                    notificationJobCronExpression = notificationJobCronExp.getValuesAsStrings().get(0);\n-                }\n+            Optional<? extends CPlainAttr> notificationJobCronExp = confDAO.find(\"notificationjob.cronExpression\");\n+            if (!notificationJobCronExp.isPresent()) {\n+                notificationJobCronExpression = NotificationJob.DEFAULT_CRON_EXP;\n+            } else if (!notificationJobCronExp.get().getValuesAsStrings().isEmpty()) {\n+                notificationJobCronExpression = notificationJobCronExp.get().getValuesAsStrings().get(0);\n+            }\n \n-                long interruptMaxRetries = confDAO.find(\"tasks.interruptMaxRetries\", 1L);\n+            long interruptMaxRetries = confDAO.find(\"tasks.interruptMaxRetries\", 1L);\n \n-                return Pair.of(notificationJobCronExpression, interruptMaxRetries);\n-            }\n+            return Pair.of(notificationJobCronExpression, interruptMaxRetries);\n         });\n \n         for (String domain : domainsHolder.getDomains().keySet()) {\n-            AuthContextUtils.execWithAuthContext(domain, new AuthContextUtils.Executable<Void>() {\n-\n-                @Override\n-                public Void exec() {\n-                    // 1. jobs for SchedTasks\n-                    Set<SchedTask> tasks = new HashSet<>(taskDAO.<SchedTask>findAll(TaskType.SCHEDULED));\n-                    tasks.addAll(taskDAO.<PullTask>findAll(TaskType.PULL));\n-                    tasks.addAll(taskDAO.<PushTask>findAll(TaskType.PUSH));\n-                    for (SchedTask task : tasks) {\n-                        try {\n-                            register(task, task.getStartAt(), conf.getRight());\n-                        } catch (Exception e) {\n-                            LOG.error(\"While loading job instance for task \" + task.getKey(), e);\n-                        }\n+            AuthContextUtils.execWithAuthContext(domain, () -> {\n+                // 1. jobs for SchedTasks\n+                Set<SchedTask> tasks = new HashSet<>(taskDAO.<SchedTask>findAll(TaskType.SCHEDULED));\n+                tasks.addAll(taskDAO.<PullTask>findAll(TaskType.PULL));\n+                tasks.addAll(taskDAO.<PushTask>findAll(TaskType.PUSH));\n+                tasks.forEach(task -> {\n+                    try {\n+                        register(task, task.getStartAt(), conf.getRight());\n+                    } catch (Exception e) {\n+                        LOG.error(\"While loading job instance for task \" + task.getKey(), e);\n                     }\n-\n-                    // 2. jobs for Reports\n-                    for (Report report : reportDAO.findAll()) {\n-                        try {\n-                            register(report, null, conf.getRight());\n-                        } catch (Exception e) {\n-                            LOG.error(\"While loading job instance for report \" + report.getName(), e);\n-                        }\n+                });\n+\n+                // 2. jobs for Reports\n+                reportDAO.findAll().forEach(report -> {\n+                    try {\n+                        register(report, null, conf.getRight());\n+                    } catch (Exception e) {\n+                        LOG.error(\"While loading job instance for report \" + report.getName(), e);\n                     }\n+                });\n \n-                    return null;\n-                }\n+                return null;\n             });\n         }\n "},{"sha":"2e973b0f7c4b23929583e144ef63fb70c55723e3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReconciliationReportlet.java","status":"modified","additions":36,"deletions":43,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,16 +18,15 @@\n  */\n package org.apache.syncope.core.provisioning.java.job.report;\n \n+import java.util.Base64;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n+import java.util.Optional;\n import java.util.Set;\n-import org.apache.commons.collections4.Closure;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -52,15 +51,13 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n-import org.identityconnectors.common.Base64;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n@@ -266,9 +263,9 @@ private Set<Object> getValues(final Attribute attr) {\n             values = Collections.emptySet();\n         } else if (attr.getValue().get(0) instanceof byte[]) {\n             values = new HashSet<>(attr.getValue().size());\n-            for (Object single : attr.getValue()) {\n-                values.add(Base64.encode((byte[]) single));\n-            }\n+            attr.getValue().forEach(single -> {\n+                values.add(Base64.getMimeEncoder().encode((byte[]) single));\n+            });\n         } else {\n             values = new HashSet<>(attr.getValue());\n         }\n@@ -287,18 +284,18 @@ private void doExtract(final ContentHandler handler, final List<? extends Any<?>\n             misaligned.clear();\n \n             AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n-            for (final ExternalResource resource : anyUtils.getAllResources(any)) {\n-                Provision provision = resource.getProvision(any.getType());\n-                MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n-                final String connObjectKeyValue = connObjectKeyItem == null\n-                        ? StringUtils.EMPTY\n-                        : mappingManager.getConnObjectKeyValue(any, provision);\n-                if (provision != null && connObjectKeyItem != null && StringUtils.isNotBlank(connObjectKeyValue)) {\n+            anyUtils.getAllResources(any).forEach(resource -> {\n+                Provision provision = resource.getProvision(any.getType()).orElse(null);\n+                Optional<MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n+                final String connObjectKeyValue = connObjectKeyItem.isPresent()\n+                        ? mappingManager.getConnObjectKeyValue(any, provision).get()\n+                        : StringUtils.EMPTY;\n+                if (provision != null && connObjectKeyItem.isPresent() && StringUtils.isNotBlank(connObjectKeyValue)) {\n                     // 1. read from the underlying connector\n                     Connector connector = connFactory.getConnector(resource);\n                     ConnectorObject connectorObject = connector.getObject(\n                             provision.getObjectClass(),\n-                            AttributeBuilder.build(connObjectKeyItem.getExtAttrName(), connObjectKeyValue),\n+                            AttributeBuilder.build(connObjectKeyItem.get().getExtAttrName(), connObjectKeyValue),\n                             MappingUtils.buildOperationOptions(provision.getMapping().getItems().iterator()));\n \n                     if (connectorObject == null) {\n@@ -314,37 +311,33 @@ private void doExtract(final ContentHandler handler, final List<? extends Any<?>\n                         preparedAttrs.getRight().add(AttributeBuilder.build(\n                                 Uid.NAME, preparedAttrs.getLeft()));\n                         preparedAttrs.getRight().add(AttributeBuilder.build(\n-                                connObjectKeyItem.getExtAttrName(), preparedAttrs.getLeft()));\n+                                connObjectKeyItem.get().getExtAttrName(), preparedAttrs.getLeft()));\n \n                         final Map<String, Set<Object>> syncopeAttrs = new HashMap<>();\n-                        for (Attribute attr : preparedAttrs.getRight()) {\n+                        preparedAttrs.getRight().forEach(attr -> {\n                             syncopeAttrs.put(attr.getName(), getValues(attr));\n-                        }\n+                        });\n \n                         final Map<String, Set<Object>> resourceAttrs = new HashMap<>();\n-                        for (Attribute attr : connectorObject.getAttributes()) {\n-                            if (!OperationalAttributes.PASSWORD_NAME.equals(attr.getName())\n-                                    && !OperationalAttributes.ENABLE_NAME.equals(attr.getName())) {\n-\n-                                resourceAttrs.put(attr.getName(), getValues(attr));\n-                            }\n-                        }\n-\n-                        IterableUtils.forEach(CollectionUtils.subtract(syncopeAttrs.keySet(), resourceAttrs.keySet()),\n-                                new Closure<String>() {\n-\n-                            @Override\n-                            public void execute(final String name) {\n-                                misaligned.add(new Misaligned(\n-                                        resource.getKey(),\n-                                        connObjectKeyValue,\n-                                        name,\n-                                        syncopeAttrs.get(name),\n-                                        Collections.emptySet()));\n-                            }\n-                        });\n+                        connectorObject.getAttributes().stream().\n+                                filter(attr -> (!OperationalAttributes.PASSWORD_NAME.equals(attr.getName())\n+                                && !OperationalAttributes.ENABLE_NAME.equals(attr.getName()))).\n+                                forEachOrdered(attr -> {\n+                                    resourceAttrs.put(attr.getName(), getValues(attr));\n+                                });\n+\n+                        syncopeAttrs.keySet().stream().\n+                                filter(syncopeAttr -> !resourceAttrs.containsKey(syncopeAttr)).\n+                                forEach(name -> {\n+                                    misaligned.add(new Misaligned(\n+                                            resource.getKey(),\n+                                            connObjectKeyValue,\n+                                            name,\n+                                            syncopeAttrs.get(name),\n+                                            Collections.emptySet()));\n+                                });\n \n-                        for (Map.Entry<String, Set<Object>> entry : resourceAttrs.entrySet()) {\n+                        resourceAttrs.entrySet().forEach(entry -> {\n                             if (syncopeAttrs.containsKey(entry.getKey())) {\n                                 if (!Objects.equals(syncopeAttrs.get(entry.getKey()), entry.getValue())) {\n                                     misaligned.add(new Misaligned(\n@@ -362,10 +355,10 @@ public void execute(final String name) {\n                                         Collections.emptySet(),\n                                         entry.getValue()));\n                             }\n-                        }\n+                        });\n                     }\n                 }\n-            }\n+            });\n \n             if (!missing.isEmpty() || !misaligned.isEmpty()) {\n                 doExtract(handler, any, missing, misaligned);"},{"sha":"a485672f3cb0b303b45c1e8ae08b1dbd9cd9f4ac","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/UserReportlet.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FUserReportlet.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -287,7 +287,7 @@ private void doExtract(final ContentHandler handler, final List<User> users) thr\n                     handler.startElement(\"\", \"\", \"membership\", atts);\n \n                     if (conf.getFeatures().contains(Feature.resources)) {\n-                        UMembership actualMemb = user.getMembership(memb.getRightKey());\n+                        UMembership actualMemb = user.getMembership(memb.getRightKey()).orElse(null);\n                         if (actualMemb == null) {\n                             LOG.warn(\"Unexpected: cannot find membership for group {} for user {}\",\n                                     memb.getRightKey(), user);"},{"sha":"f2eeaf4e30e9548a6dd47279b4198c5b6510b551","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":18,"deletions":22,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -25,9 +25,8 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -63,7 +62,6 @@\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n@@ -196,7 +194,7 @@ private NotificationTask getNotificationTask(\n \n         Set<String> recipientEmails = new HashSet<>();\n         List<UserTO> recipientTOs = new ArrayList<>(recipients.size());\n-        for (User recipient : recipients) {\n+        recipients.forEach(recipient -> {\n             virAttrHander.getValues(recipient);\n \n             String email = getRecipientEmail(notification.getRecipientAttrName(), recipient);\n@@ -206,7 +204,7 @@ private NotificationTask getNotificationTask(\n                 recipientEmails.add(email);\n                 recipientTOs.add(userDataBinder.getUserTO(recipient, true));\n             }\n-        }\n+        });\n \n         if (notification.getStaticRecipients() != null) {\n             recipientEmails.addAll(notification.getStaticRecipients());\n@@ -266,15 +264,10 @@ public boolean notificationsAvailable(\n \n         final String successEvent = AuditLoggerName.buildEvent(type, category, subcategory, event, Result.SUCCESS);\n         final String failureEvent = AuditLoggerName.buildEvent(type, category, subcategory, event, Result.FAILURE);\n-        return IterableUtils.matchesAny(notificationDAO.findAll(), new Predicate<Notification>() {\n-\n-            @Override\n-            public boolean evaluate(final Notification notification) {\n-                return notification.isActive()\n-                        && (notification.getEvents().contains(successEvent)\n-                        || notification.getEvents().contains(failureEvent));\n-            }\n-        });\n+        return notificationDAO.findAll().stream().\n+                anyMatch(notification -> notification.isActive()\n+                && (notification.getEvents().contains(successEvent)\n+                || notification.getEvents().contains(failureEvent)));\n     }\n \n     @Override\n@@ -339,18 +332,19 @@ public List<NotificationTask> createTasks(\n         List<NotificationTask> notifications = new ArrayList<>();\n         for (Notification notification : notificationDAO.findAll()) {\n             if (LOG.isDebugEnabled()) {\n-                for (AnyAbout about : notification.getAbouts()) {\n+                notification.getAbouts().forEach(about -> {\n                     LOG.debug(\"Notification about {} defined: {}\", about.getAnyType(), about.get());\n-                }\n+                });\n             }\n \n             if (notification.isActive()) {\n                 String currentEvent = AuditLoggerName.buildEvent(type, category, subcategory, event, condition);\n                 if (!notification.getEvents().contains(currentEvent)) {\n                     LOG.debug(\"No events found about {}\", any);\n                 } else if (anyType == null || any == null\n-                        || notification.getAbout(anyType) == null\n-                        || searchDAO.matches(any, SearchCondConverter.convert(notification.getAbout(anyType).get()))) {\n+                        || !notification.getAbout(anyType).isPresent()\n+                        || searchDAO.matches(\n+                                any, SearchCondConverter.convert(notification.getAbout(anyType).get().get()))) {\n \n                     LOG.debug(\"Creating notification task for event {} about {}\", currentEvent, any);\n \n@@ -395,17 +389,19 @@ private String getRecipientEmail(final String recipientAttrName, final User user\n             if (intAttrName.getMembershipOfGroup() != null) {\n                 Group group = groupDAO.findByName(intAttrName.getMembershipOfGroup());\n                 if (group != null) {\n-                    membership = user.getMembership(group.getKey());\n+                    membership = user.getMembership(group.getKey()).orElse(null);\n                 }\n             }\n \n             switch (intAttrName.getSchemaType()) {\n                 case PLAIN:\n-                    UPlainAttr attr = membership == null\n+                    Optional<? extends UPlainAttr> attr = membership == null\n                             ? user.getPlainAttr(recipientAttrName)\n                             : user.getPlainAttr(recipientAttrName, membership);\n-                    if (attr != null) {\n-                        email = attr.getValuesAsStrings().isEmpty() ? null : attr.getValuesAsStrings().get(0);\n+                    if (attr.isPresent()) {\n+                        email = attr.get().getValuesAsStrings().isEmpty()\n+                                ? null\n+                                : attr.get().getValuesAsStrings().get(0);\n                     }\n                     break;\n "},{"sha":"833edfc69500fbe09c0ed5d8296abb758e98fb7e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":19,"deletions":21,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -27,7 +27,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.commons.collections4.IteratorUtils;\n+import org.apache.syncope.common.lib.collections.IteratorChain;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n@@ -52,7 +52,6 @@\n import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n@@ -160,15 +159,15 @@ protected List<PropagationActions> getPropagationActions(final ExternalResource\n         List<PropagationActions> result = new ArrayList<>();\n \n         if (!resource.getPropagationActionsClassNames().isEmpty()) {\n-            for (String className : resource.getPropagationActionsClassNames()) {\n+            resource.getPropagationActionsClassNames().forEach(className -> {\n                 try {\n                     Class<?> actionsClass = Class.forName(className);\n                     result.add((PropagationActions) ApplicationContextProvider.getBeanFactory().\n                             createBean(actionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true));\n                 } catch (ClassNotFoundException e) {\n                     LOG.error(\"Invalid PropagationAction class name '{}' for resource {}\", resource, className, e);\n                 }\n-            }\n+            });\n         }\n \n         return result;\n@@ -192,9 +191,9 @@ protected List<PropagationActions> getPropagationActions(final ExternalResource\n      */\n     private Map<String, Attribute> toMap(final Collection<? extends Attribute> attributes) {\n         Map<String, Attribute> map = new HashMap<>();\n-        for (Attribute attr : attributes) {\n+        attributes.forEach(attr -> {\n             map.put(attr.getName().toUpperCase(), attr);\n-        }\n+        });\n         return map;\n     }\n \n@@ -254,9 +253,9 @@ protected Uid createOrUpdate(\n             // Only compare attribute from beforeObj that are also being updated\n             Set<String> skipAttrNames = originalAttrMap.keySet();\n             skipAttrNames.removeAll(updateAttrMap.keySet());\n-            for (String attrName : new HashSet<>(skipAttrNames)) {\n+            new HashSet<>(skipAttrNames).forEach(attrName -> {\n                 originalAttrMap.remove(attrName);\n-            }\n+            });\n \n             Set<Attribute> originalAttrs = new HashSet<>(originalAttrMap.values());\n \n@@ -267,11 +266,10 @@ protected Uid createOrUpdate(\n                 LOG.debug(\"Attributes that would be updated {}\", attributes);\n \n                 Set<Attribute> strictlyModified = new HashSet<>();\n-                for (Attribute attr : attributes) {\n-                    if (!originalAttrs.contains(attr)) {\n-                        strictlyModified.add(attr);\n-                    }\n-                }\n+                attributes.stream().filter(attr -> (!originalAttrs.contains(attr))).\n+                        forEachOrdered(attr -> {\n+                            strictlyModified.add(attr);\n+                        });\n \n                 // 3. provision entry\n                 LOG.debug(\"Update {} on {}\", strictlyModified, task.getResource().getKey());\n@@ -377,7 +375,7 @@ protected TaskExec execute(final PropagationTask task, final PropagationReporter\n         Connector connector = null;\n         Result result;\n         try {\n-            provision = task.getResource().getProvision(new ObjectClass(task.getObjectClassName()));\n+            provision = task.getResource().getProvision(new ObjectClass(task.getObjectClassName())).orElse(null);\n             orgUnit = task.getResource().getOrgUnit();\n             connector = connFactory.getConnector(task.getResource());\n \n@@ -439,9 +437,9 @@ protected TaskExec execute(final PropagationTask task, final PropagationReporter\n \n             propagationAttempted[0] = true;\n \n-            for (PropagationActions action : actions) {\n+            actions.forEach(action -> {\n                 action.onError(task, execution, e);\n-            }\n+            });\n         } finally {\n             // Try to read remote object AFTER any actual operation\n             if (connector != null) {\n@@ -602,17 +600,17 @@ protected ConnectorObject getRemoteObject(\n                 : task.getOldConnObjectKey();\n \n         List<MappingItem> linkingMappingItems = new ArrayList<>();\n-        for (VirSchema schema : virSchemaDAO.findByProvision(provision)) {\n+        virSchemaDAO.findByProvision(provision).forEach(schema -> {\n             linkingMappingItems.add(schema.asLinkingMappingItem());\n-        }\n+        });\n \n         ConnectorObject obj = null;\n         try {\n             obj = connector.getObject(\n                     new ObjectClass(task.getObjectClassName()),\n                     AttributeBuilder.build(\n-                            MappingUtils.getConnObjectKeyItem(provision).getExtAttrName(), connObjectKey),\n-                    MappingUtils.buildOperationOptions(IteratorUtils.chainedIterator(\n+                            MappingUtils.getConnObjectKeyItem(provision).get().getExtAttrName(), connObjectKey),\n+                    MappingUtils.buildOperationOptions(new IteratorChain<>(\n                             MappingUtils.getPropagationItems(provision).iterator(),\n                             linkingMappingItems.iterator())));\n \n@@ -658,7 +656,7 @@ protected ConnectorObject getRemoteObject(\n         ConnectorObject obj = null;\n         try {\n             obj = connector.getObject(new ObjectClass(task.getObjectClassName()),\n-                    AttributeBuilder.build(orgUnit.getConnObjectKeyItem().getExtAttrName(), connObjectKey),\n+                    AttributeBuilder.build(orgUnit.getConnObjectKeyItem().get().getExtAttrName(), connObjectKey),\n                     MappingUtils.buildOperationOptions(MappingUtils.getPropagationItems(orgUnit).iterator()));\n         } catch (TimeoutException toe) {\n             LOG.debug(\"Request timeout\", toe);"},{"sha":"a40d9b29cd2faa2f97a9af03d154b35599706a74","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DBPasswordPropagationActions.java","status":"modified","additions":9,"deletions":20,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,9 +19,8 @@\n package org.apache.syncope.core.provisioning.java.propagation;\n \n import java.util.HashSet;\n+import java.util.Optional;\n import java.util.Set;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n@@ -86,19 +85,13 @@ && cipherAlgorithmMatches(getCipherAlgorithm(connInstance), user.getCipherAlgori\n     }\n \n     private String getCipherAlgorithm(final ConnInstance connInstance) {\n-        ConnConfProperty cipherAlgorithm =\n-                IterableUtils.find(connInstance.getConf(), new Predicate<ConnConfProperty>() {\n-\n-                    @Override\n-                    public boolean evaluate(final ConnConfProperty property) {\n-                        return \"cipherAlgorithm\".equals(property.getSchema().getName())\n-                                && property.getValues() != null && !property.getValues().isEmpty();\n-                    }\n-                });\n-\n-        return cipherAlgorithm == null\n-                ? CLEARTEXT\n-                : (String) cipherAlgorithm.getValues().get(0);\n+        Optional<ConnConfProperty> cipherAlgorithm = connInstance.getConf().stream().\n+                filter(property -> \"cipherAlgorithm\".equals(property.getSchema().getName())\n+                && property.getValues() != null && !property.getValues().isEmpty()).findFirst();\n+\n+        return cipherAlgorithm.isPresent()\n+                ? (String) cipherAlgorithm.get().getValues().get(0)\n+                : CLEARTEXT;\n     }\n \n     private boolean cipherAlgorithmMatches(final String connectorAlgorithm, final CipherAlgorithm userAlgorithm) {\n@@ -111,11 +104,7 @@ private boolean cipherAlgorithmMatches(final String connectorAlgorithm, final Ci\n         }\n \n         // Special check for \"SHA\" (user sync'd from LDAP)\n-        if (\"SHA1\".equals(connectorAlgorithm) && \"SHA\".equals(userAlgorithm.name())) {\n-            return true;\n-        }\n-\n-        return false;\n+        return \"SHA1\".equals(connectorAlgorithm) && \"SHA\".equals(userAlgorithm.name());\n     }\n \n }"},{"sha":"6e582811dca41876da5e6878fb5d678a2f979d3b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationReporter.java","status":"modified","additions":8,"deletions":20,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,8 +22,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.Optional;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -44,13 +43,7 @@ public class DefaultPropagationReporter implements PropagationReporter {\n     protected final List<PropagationStatus> statuses = new ArrayList<>();\n \n     protected boolean add(final PropagationStatus status) {\n-        return IterableUtils.matchesAny(statuses, new Predicate<PropagationStatus>() {\n-\n-            @Override\n-            public boolean evaluate(final PropagationStatus item) {\n-                return item.getResource().equals(status.getResource());\n-            }\n-        })\n+        return statuses.stream().anyMatch(item -> item.getResource().equals(status.getResource()))\n                 ? false\n                 : statuses.add(status);\n     }\n@@ -83,23 +76,18 @@ public void onSuccessOrNonPriorityResourceFailures(\n     public void onPriorityResourceFailure(final String failingResource, final Collection<PropagationTask> tasks) {\n         LOG.debug(\"Propagation error: {} priority resource failed to propagate\", failingResource);\n \n-        final PropagationTask propagationTask = IterableUtils.find(tasks, new Predicate<PropagationTask>() {\n-\n-            @Override\n-            public boolean evaluate(final PropagationTask task) {\n-                return task.getResource().getKey().equals(failingResource);\n-            }\n-        });\n+        Optional<PropagationTask> propagationTask = tasks.stream().\n+                filter(task -> task.getResource().getKey().equals(failingResource)).findFirst();\n \n-        if (propagationTask == null) {\n-            LOG.error(\"Could not find {} for {}\", PropagationTask.class.getName(), failingResource);\n-        } else {\n+        if (propagationTask.isPresent()) {\n             PropagationStatus status = new PropagationStatus();\n-            status.setResource(propagationTask.getResource().getKey());\n+            status.setResource(propagationTask.get().getResource().getKey());\n             status.setStatus(PropagationTaskExecStatus.FAILURE);\n             status.setFailureReason(\n                     \"Propagation error: \" + failingResource + \" priority resource failed to propagate.\");\n             add(status);\n+        } else {\n+            LOG.error(\"Could not find {} for {}\", PropagationTask.class.getName(), failingResource);\n         }\n     }\n "},{"sha":"58fc0d3472100475d42fab69e138acbd3ed7b3fa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPMembershipPropagationActions.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import org.apache.commons.jexl3.JexlContext;\n import org.apache.commons.jexl3.MapContext;\n@@ -75,42 +76,40 @@ protected String getGroupMembershipAttrName() {\n     @Transactional(readOnly = true)\n     @Override\n     public void before(final PropagationTask task, final ConnectorObject beforeObj) {\n-        Provision provision = task.getResource().getProvision(anyTypeDAO.findGroup());\n+        Optional<? extends Provision> provision = task.getResource().getProvision(anyTypeDAO.findGroup());\n         if (AnyTypeKind.USER == task.getAnyTypeKind()\n-                && provision != null && provision.getMapping() != null\n-                && StringUtils.isNotBlank(provision.getMapping().getConnObjectLink())) {\n+                && provision.isPresent() && provision.get().getMapping() != null\n+                && StringUtils.isNotBlank(provision.get().getMapping().getConnObjectLink())) {\n \n             User user = userDAO.find(task.getEntityKey());\n             if (user != null) {\n                 List<String> groupConnObjectLinks = new ArrayList<>();\n-                for (String groupKey : userDAO.findAllGroupKeys(user)) {\n+                userDAO.findAllGroupKeys(user).forEach(groupKey -> {\n                     Group group = groupDAO.find(groupKey);\n                     if (group != null && groupDAO.findAllResourceKeys(groupKey).contains(task.getResource().getKey())) {\n                         LOG.debug(\"Evaluating connObjectLink for {}\", group);\n-\n                         JexlContext jexlContext = new MapContext();\n                         JexlUtils.addFieldsToContext(group, jexlContext);\n                         JexlUtils.addPlainAttrsToContext(group.getPlainAttrs(), jexlContext);\n                         JexlUtils.addDerAttrsToContext(group, jexlContext);\n-\n                         String groupConnObjectLinkLink =\n-                                JexlUtils.evaluate(provision.getMapping().getConnObjectLink(), jexlContext);\n+                                JexlUtils.evaluate(provision.get().getMapping().getConnObjectLink(), jexlContext);\n                         LOG.debug(\"ConnObjectLink for {} is '{}'\", group, groupConnObjectLinkLink);\n                         if (StringUtils.isNotBlank(groupConnObjectLinkLink)) {\n                             groupConnObjectLinks.add(groupConnObjectLinkLink);\n                         }\n                     }\n-                }\n+                });\n                 LOG.debug(\"Group connObjectLinks to propagate for membership: {}\", groupConnObjectLinks);\n \n                 Set<Attribute> attributes = new HashSet<>(task.getAttributes());\n \n                 Set<String> groups = new HashSet<>(groupConnObjectLinks);\n                 Attribute ldapGroups = AttributeUtil.find(getGroupMembershipAttrName(), attributes);\n                 if (ldapGroups != null) {\n-                    for (Object obj : ldapGroups.getValue()) {\n+                    ldapGroups.getValue().forEach(obj -> {\n                         groups.add(obj.toString());\n-                    }\n+                    });\n                     attributes.remove(ldapGroups);\n                 }\n                 attributes.add(AttributeBuilder.build(getGroupMembershipAttrName(), groups));"},{"sha":"ea4f37d4b1b86315b984fb246846f4ff4f1d10ce","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPPasswordPropagationActions.java","status":"modified","additions":9,"deletions":20,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,9 +19,8 @@\n package org.apache.syncope.core.provisioning.java.propagation;\n \n import java.util.HashSet;\n+import java.util.Optional;\n import java.util.Set;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n@@ -92,19 +91,13 @@ && cipherAlgorithmMatches(getCipherAlgorithm(connInstance), user.getCipherAlgori\n     }\n \n     private String getCipherAlgorithm(final ConnInstance connInstance) {\n-        ConnConfProperty cipherAlgorithm =\n-                IterableUtils.find(connInstance.getConf(), new Predicate<ConnConfProperty>() {\n-\n-                    @Override\n-                    public boolean evaluate(final ConnConfProperty property) {\n-                        return \"passwordHashAlgorithm\".equals(property.getSchema().getName())\n-                                && property.getValues() != null && !property.getValues().isEmpty();\n-                    }\n-                });\n-\n-        return cipherAlgorithm == null\n-                ? CLEARTEXT\n-                : (String) cipherAlgorithm.getValues().get(0);\n+        Optional<ConnConfProperty> cipherAlgorithm = connInstance.getConf().stream().\n+                filter(property -> \"passwordHashAlgorithm\".equals(property.getSchema().getName())\n+                && property.getValues() != null && !property.getValues().isEmpty()).findFirst();\n+\n+        return cipherAlgorithm.isPresent()\n+                ? (String) cipherAlgorithm.get().getValues().get(0)\n+                : CLEARTEXT;\n     }\n \n     private boolean cipherAlgorithmMatches(final String connectorAlgorithm, final CipherAlgorithm userAlgorithm) {\n@@ -117,11 +110,7 @@ private boolean cipherAlgorithmMatches(final String connectorAlgorithm, final Ci\n         }\n \n         // Special check for \"SHA\" (user sync'd from LDAP)\n-        if (\"SHA\".equals(connectorAlgorithm) && \"SHA1\".equals(userAlgorithm.name())) {\n-            return true;\n-        }\n-\n-        return false;\n+        return \"SHA\".equals(connectorAlgorithm) && \"SHA1\".equals(userAlgorithm.name());\n     }\n \n }"},{"sha":"8322635e231ff729263630e47a13d5d7eccf1c43","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":19,"deletions":29,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.java.propagation;\n \n import java.io.Serializable;\n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n@@ -32,9 +31,8 @@\n import java.util.concurrent.ExecutorCompletionService;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n import javax.annotation.Resource;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -84,21 +82,17 @@ protected void doExecute(\n             final PropagationReporter reporter,\n             final boolean nullPriorityAsync) {\n \n-        List<PropagationTask> prioritizedTasks = CollectionUtils.select(tasks, new Predicate<PropagationTask>() {\n-\n-            @Override\n-            public boolean evaluate(final PropagationTask task) {\n-                return task.getResource().getPropagationPriority() != null;\n-            }\n-        }, new ArrayList<PropagationTask>());\n+        List<PropagationTask> prioritizedTasks = tasks.stream().\n+                filter(task -> task.getResource().getPropagationPriority() != null).collect(Collectors.toList());\n         Collections.sort(prioritizedTasks, new PriorityComparator());\n         LOG.debug(\"Propagation tasks sorted by priority, for serial execution: {}\", prioritizedTasks);\n \n-        Collection<PropagationTask> concurrentTasks = CollectionUtils.subtract(tasks, prioritizedTasks);\n+        Collection<PropagationTask> concurrentTasks = tasks.stream().\n+                filter(task -> !prioritizedTasks.contains(task)).collect(Collectors.toSet());\n         LOG.debug(\"Propagation tasks for concurrent execution: {}\", concurrentTasks);\n \n         // first process priority resources sequentially and fail as soon as any propagation failure is reported\n-        for (PropagationTask task : prioritizedTasks) {\n+        prioritizedTasks.forEach(task -> {\n             TaskExec execution = null;\n             PropagationTaskExecStatus execStatus;\n             try {\n@@ -112,49 +106,45 @@ public boolean evaluate(final PropagationTask task) {\n                 throw new PropagationException(\n                         task.getResource().getKey(), execution == null ? null : execution.getMessage());\n             }\n-        }\n+        });\n \n         // then process non-priority resources concurrently...\n         final CompletionService<TaskExec> completionService = new ExecutorCompletionService<>(executor);\n         Map<PropagationTask, Future<TaskExec>> nullPriority = new HashMap<>(concurrentTasks.size());\n-        for (PropagationTask task : concurrentTasks) {\n+        concurrentTasks.forEach(task -> {\n             try {\n                 nullPriority.put(\n                         task,\n                         completionService.submit(newPropagationTaskCallable(task, reporter)));\n             } catch (Exception e) {\n                 LOG.error(\"Unexpected exception\", e);\n             }\n-        }\n+        });\n         // ...waiting for all callables to complete, if async processing was not required\n         if (!nullPriority.isEmpty()) {\n             if (nullPriorityAsync) {\n-                for (Map.Entry<PropagationTask, Future<TaskExec>> entry : nullPriority.entrySet()) {\n+                nullPriority.entrySet().forEach(entry -> {\n                     reporter.onSuccessOrNonPriorityResourceFailures(\n                             entry.getKey(), PropagationTaskExecStatus.CREATED, null, null, null);\n-                }\n+                });\n             } else {\n                 final Set<Future<TaskExec>> nullPriorityFutures = new HashSet<>(nullPriority.values());\n                 try {\n-                    executor.submit(new Runnable() {\n-\n-                        @Override\n-                        public void run() {\n-                            while (!nullPriorityFutures.isEmpty()) {\n-                                try {\n-                                    nullPriorityFutures.remove(completionService.take());\n-                                } catch (Exception e) {\n-                                    LOG.error(\"Unexpected exception\", e);\n-                                }\n+                    executor.submit(() -> {\n+                        while (!nullPriorityFutures.isEmpty()) {\n+                            try {\n+                                nullPriorityFutures.remove(completionService.take());\n+                            } catch (Exception e) {\n+                                LOG.error(\"Unexpected exception\", e);\n                             }\n                         }\n                     }).get(60, TimeUnit.SECONDS);\n                 } catch (Exception e) {\n                     LOG.error(\"Unexpected exception\", e);\n                 } finally {\n-                    for (Future<TaskExec> future : nullPriorityFutures) {\n+                    nullPriorityFutures.forEach(future -> {\n                         future.cancel(true);\n-                    }\n+                    });\n                     nullPriorityFutures.clear();\n                     nullPriority.clear();\n                 }"},{"sha":"14a8d5fe7c019becc0b9209fa43055f2fefc5b88","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":38,"deletions":45,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -26,11 +26,9 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -228,13 +226,8 @@ public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserPa\n             pwdWFResult.getPropByRes().addAll(ResourceOperation.UPDATE, pwdResourceNames);\n             if (!pwdWFResult.getPropByRes().isEmpty()) {\n                 Set<String> toBeExcluded = new HashSet<>(allResourceNames);\n-                CollectionUtils.collect(userPatch.getResources(), new Transformer<StringPatchItem, String>() {\n-\n-                    @Override\n-                    public String transform(final StringPatchItem input) {\n-                        return input.getValue();\n-                    }\n-                }, toBeExcluded);\n+                toBeExcluded.addAll(userPatch.getResources().stream().\n+                        map(patchItem -> patchItem.getValue()).collect(Collectors.toList()));\n                 toBeExcluded.removeAll(pwdResourceNames);\n \n                 tasks.addAll(getUserUpdateTasks(pwdWFResult, true, toBeExcluded));\n@@ -339,35 +332,37 @@ protected List<PropagationTask> createTasks(final Any<?> any,\n         virtualResources.addAll(dao(any.getType().getKind()).findAllResourceKeys(any.getKey()));\n \n         Map<String, Set<Attribute>> vAttrMap = new HashMap<>();\n-        for (AttrTO vAttr : CollectionUtils.emptyIfNull(vAttrs)) {\n-            VirSchema schema = virSchemaDAO.find(vAttr.getSchema());\n-            if (schema == null) {\n-                LOG.warn(\"Ignoring invalid {} {}\", VirSchema.class.getSimpleName(), vAttr.getSchema());\n-            } else if (schema.isReadonly()) {\n-                LOG.warn(\"Ignoring read-only {} {}\", VirSchema.class.getSimpleName(), vAttr.getSchema());\n-            } else if (anyUtilsFactory.getInstance(any).getAllowedSchemas(any, VirSchema.class).contains(schema)\n-                    && virtualResources.contains(schema.getProvision().getResource().getKey())) {\n-\n-                Set<Attribute> values = vAttrMap.get(schema.getProvision().getResource().getKey());\n-                if (values == null) {\n-                    values = new HashSet<>();\n-                    vAttrMap.put(schema.getProvision().getResource().getKey(), values);\n-                }\n-                values.add(AttributeBuilder.build(schema.getExtAttrName(), vAttr.getValues()));\n+        if (vAttrs != null) {\n+            vAttrs.forEach(vAttr -> {\n+                VirSchema schema = virSchemaDAO.find(vAttr.getSchema());\n+                if (schema == null) {\n+                    LOG.warn(\"Ignoring invalid {} {}\", VirSchema.class.getSimpleName(), vAttr.getSchema());\n+                } else if (schema.isReadonly()) {\n+                    LOG.warn(\"Ignoring read-only {} {}\", VirSchema.class.getSimpleName(), vAttr.getSchema());\n+                } else if (anyUtilsFactory.getInstance(any).getAllowedSchemas(any, VirSchema.class).contains(schema)\n+                        && virtualResources.contains(schema.getProvision().getResource().getKey())) {\n+\n+                    Set<Attribute> values = vAttrMap.get(schema.getProvision().getResource().getKey());\n+                    if (values == null) {\n+                        values = new HashSet<>();\n+                        vAttrMap.put(schema.getProvision().getResource().getKey(), values);\n+                    }\n+                    values.add(AttributeBuilder.build(schema.getExtAttrName(), vAttr.getValues()));\n \n-                propByRes.add(ResourceOperation.UPDATE, schema.getProvision().getResource().getKey());\n-            } else {\n-                LOG.warn(\"{} not owned by or {} not allowed for {}\",\n-                        schema.getProvision().getResource(), schema, any);\n-            }\n+                    propByRes.add(ResourceOperation.UPDATE, schema.getProvision().getResource().getKey());\n+                } else {\n+                    LOG.warn(\"{} not owned by or {} not allowed for {}\",\n+                            schema.getProvision().getResource(), schema, any);\n+                }\n+            });\n         }\n         LOG.debug(\"With virtual attributes {}:\\n{}\\n{}\", any, propByRes, vAttrMap);\n \n         List<PropagationTask> tasks = new ArrayList<>();\n \n         for (Map.Entry<String, ResourceOperation> entry : propByRes.asMap().entrySet()) {\n             ExternalResource resource = resourceDAO.find(entry.getKey());\n-            Provision provision = resource == null ? null : resource.getProvision(any.getType());\n+            Provision provision = resource == null ? null : resource.getProvision(any.getType()).orElse(null);\n             List<? extends MappingItem> mappingItems = provision == null\n                     ? Collections.<MappingItem>emptyList()\n                     : MappingUtils.getPropagationItems(provision);\n@@ -400,18 +395,16 @@ protected List<PropagationTask> createTasks(final Any<?> any,\n                 // if so, add special attributes that will be evaluated by PropagationTaskExecutor\n                 List<String> mandatoryMissing = new ArrayList<>();\n                 List<String> mandatoryNullOrEmpty = new ArrayList<>();\n-                for (MappingItem item : mappingItems) {\n-                    if (!item.isConnObjectKey()\n-                            && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any)) {\n-\n-                        Attribute attr = AttributeUtil.find(item.getExtAttrName(), preparedAttrs.getValue());\n-                        if (attr == null) {\n-                            mandatoryMissing.add(item.getExtAttrName());\n-                        } else if (attr.getValue() == null || attr.getValue().isEmpty()) {\n-                            mandatoryNullOrEmpty.add(item.getExtAttrName());\n-                        }\n-                    }\n-                }\n+                mappingItems.stream().filter(item -> (!item.isConnObjectKey()\n+                        && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any))).\n+                        forEachOrdered(item -> {\n+                            Attribute attr = AttributeUtil.find(item.getExtAttrName(), preparedAttrs.getValue());\n+                            if (attr == null) {\n+                                mandatoryMissing.add(item.getExtAttrName());\n+                            } else if (attr.getValue() == null || attr.getValue().isEmpty()) {\n+                                mandatoryNullOrEmpty.add(item.getExtAttrName());\n+                            }\n+                        });\n                 if (!mandatoryMissing.isEmpty()) {\n                     preparedAttrs.getValue().add(AttributeBuilder.build(\n                             PropagationTaskExecutor.MANDATORY_MISSING_ATTR_NAME, mandatoryMissing));\n@@ -454,7 +447,7 @@ public List<PropagationTask> createTasks(\n \n         List<PropagationTask> tasks = new ArrayList<>();\n \n-        for (Map.Entry<String, ResourceOperation> entry : propByRes.asMap().entrySet()) {\n+        propByRes.asMap().entrySet().forEach(entry -> {\n             ExternalResource resource = resourceDAO.find(entry.getKey());\n             OrgUnit orgUnit = resource == null ? null : resource.getOrgUnit();\n \n@@ -481,7 +474,7 @@ public List<PropagationTask> createTasks(\n \n                 LOG.debug(\"PropagationTask created: {}\", task);\n             }\n-        }\n+        });\n \n         return tasks;\n     }"},{"sha":"e611e34e84dcafe878604fd1210e88ee58432bc4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractProvisioningJobDelegate.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,8 +23,6 @@\n import java.util.Collection;\n import java.util.List;\n import javax.annotation.Resource;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -311,13 +309,8 @@ protected String createReport(\n         // Summary, also to be included for FAILURE and ALL, so create it anyway.\n         boolean includeUser = resource.getProvision(anyTypeDAO.findUser()) != null;\n         boolean includeGroup = resource.getProvision(anyTypeDAO.findGroup()) != null;\n-        boolean includeAnyObject = IterableUtils.matchesAny(resource.getProvisions(), new Predicate<Provision>() {\n-\n-            @Override\n-            public boolean evaluate(final Provision object) {\n-                return object.getAnyType().getKind() == AnyTypeKind.ANY_OBJECT;\n-            }\n-        });\n+        boolean includeAnyObject = resource.getProvisions().stream().anyMatch(\n+                provision -> provision.getAnyType().getKind() == AnyTypeKind.ANY_OBJECT);\n         boolean includeRealm = resource.getOrgUnit() != null;\n \n         if (includeUser) {"},{"sha":"74928d94935277a69461cfede3c80acf6066c6b1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -122,7 +122,7 @@ public void setPullExecutor(final SyncopePullExecutor executor) {\n     public boolean handle(final SyncDelta delta) {\n         Provision provision = null;\n         try {\n-            provision = profile.getTask().getResource().getProvision(delta.getObject().getObjectClass());\n+            provision = profile.getTask().getResource().getProvision(delta.getObject().getObjectClass()).orElse(null);\n             if (provision == null) {\n                 throw new JobExecutionException(\"No provision found on \" + profile.getTask().getResource() + \" for \"\n                         + delta.getObject().getObjectClass());"},{"sha":"395ec3e80eb9568f8502542bc8f84e39654992f6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -24,6 +24,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n@@ -261,15 +262,15 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n         Result resultStatus = null;\n \n         // Try to read remote object BEFORE any actual operation\n-        Provision provision = profile.getTask().getResource().getProvision(any.getType());\n-        MappingItem connObjectKey = MappingUtils.getConnObjectKeyItem(provision);\n-        String connObjecKeyValue = mappingManager.getConnObjectKeyValue(any, provision);\n+        Optional<? extends Provision> provision = profile.getTask().getResource().getProvision(any.getType());\n+        Optional<MappingItem> connObjectKey = MappingUtils.getConnObjectKeyItem(provision.get());\n+        Optional<String> connObjecKeyValue = mappingManager.getConnObjectKeyValue(any, provision.get());\n \n         ConnectorObject beforeObj = getRemoteObject(\n-                provision.getObjectClass(),\n-                connObjectKey.getExtAttrName(),\n-                connObjecKeyValue,\n-                provision.getMapping().getItems().iterator());\n+                provision.get().getObjectClass(),\n+                connObjectKey.get().getExtAttrName(),\n+                connObjecKeyValue.get(),\n+                provision.get().getMapping().getItems().iterator());\n \n         Boolean status = profile.getTask().isSyncStatus() ? enabled : null;\n \n@@ -435,10 +436,10 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n                 }\n                 resultStatus = AuditElements.Result.SUCCESS;\n                 output = getRemoteObject(\n-                        provision.getObjectClass(),\n-                        connObjectKey.getExtAttrName(),\n-                        connObjecKeyValue,\n-                        provision.getMapping().getItems().iterator());\n+                        provision.get().getObjectClass(),\n+                        connObjectKey.get().getExtAttrName(),\n+                        connObjecKeyValue.get(),\n+                        provision.get().getMapping().getItems().iterator());\n             } catch (IgnoreProvisionException e) {\n                 throw e;\n             } catch (Exception e) {"},{"sha":"c0a7eb47af18135c47a9c384789ddf1ca40c42fe","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DBPasswordPullActions.java","status":"modified","additions":8,"deletions":15,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,8 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.Optional;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n@@ -108,19 +107,13 @@ private void parseEncodedPassword(final String password, final Connector connect\n     }\n \n     private String getCipherAlgorithm(final ConnInstance connInstance) {\n-        ConnConfProperty cipherAlgorithm =\n-                IterableUtils.find(connInstance.getConf(), new Predicate<ConnConfProperty>() {\n-\n-                    @Override\n-                    public boolean evaluate(final ConnConfProperty property) {\n-                        return \"cipherAlgorithm\".equals(property.getSchema().getName())\n-                                && property.getValues() != null && !property.getValues().isEmpty();\n-                    }\n-                });\n-\n-        return cipherAlgorithm == null\n-                ? CLEARTEXT\n-                : (String) cipherAlgorithm.getValues().get(0);\n+        Optional<ConnConfProperty> cipherAlgorithm = connInstance.getConf().stream().\n+                filter(property -> \"cipherAlgorithm\".equals(property.getSchema().getName())\n+                && property.getValues() != null && !property.getValues().isEmpty()).findFirst();\n+\n+        return cipherAlgorithm.isPresent()\n+                ? (String) cipherAlgorithm.get().getValues().get(0)\n+                : CLEARTEXT;\n     }\n \n     @Transactional"},{"sha":"52619261c09c0de57158edc9ab78278476c6b711","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java","status":"modified","additions":19,"deletions":24,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,9 +23,8 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n@@ -78,19 +77,13 @@ public class LDAPMembershipPullActions extends SchedulingPullActions {\n      * @return the name of the attribute used to keep track of group memberships\n      */\n     protected String getGroupMembershipAttrName(final Connector connector) {\n-        ConnConfProperty groupMembership = IterableUtils.find(connector.getConnInstance().getConf(),\n-                new Predicate<ConnConfProperty>() {\n+        Optional<ConnConfProperty> groupMembership = connector.getConnInstance().getConf().stream().\n+                filter(property -> \"groupMemberAttribute\".equals(property.getSchema().getName())\n+                && property.getValues() != null && !property.getValues().isEmpty()).findFirst();\n \n-            @Override\n-            public boolean evaluate(final ConnConfProperty property) {\n-                return \"groupMemberAttribute\".equals(property.getSchema().getName())\n-                        && property.getValues() != null && !property.getValues().isEmpty();\n-            }\n-        });\n-\n-        return groupMembership == null\n-                ? \"uniquemember\"\n-                : (String) groupMembership.getValues().get(0);\n+        return groupMembership.isPresent()\n+                ? (String) groupMembership.get().getValues().get(0)\n+                : \"uniquemember\";\n     }\n \n     /**\n@@ -139,14 +132,16 @@ protected void populateMemberships(\n             throws JobExecutionException {\n \n         Connector connector = profile.getConnector();\n-        for (Object membValue : getMembAttrValues(delta, connector)) {\n+        getMembAttrValues(delta, connector).stream().map(membValue -> {\n             Set<String> memb = memberships.get(membValue.toString());\n             if (memb == null) {\n                 memb = new HashSet<>();\n                 memberships.put(membValue.toString(), memb);\n             }\n+            return memb;\n+        }).forEachOrdered(memb -> {\n             memb.add(groupTO.getKey());\n-        }\n+        });\n     }\n \n     /**\n@@ -165,8 +160,8 @@ public void after(\n         }\n \n         if (!(entity instanceof GroupTO)\n-                || profile.getTask().getResource().getProvision(anyTypeDAO.findUser()) == null\n-                || profile.getTask().getResource().getProvision(anyTypeDAO.findUser()).getMapping() == null) {\n+                || !profile.getTask().getResource().getProvision(anyTypeDAO.findUser()).isPresent()\n+                || profile.getTask().getResource().getProvision(anyTypeDAO.findUser()).get().getMapping() == null) {\n \n             super.after(profile, delta, entity, result);\n         } else {\n@@ -177,18 +172,18 @@ public void after(\n     @Override\n     public void afterAll(final ProvisioningProfile<?, ?> profile) throws JobExecutionException {\n         Map<String, Set<String>> resolvedMemberships = new HashMap<>();\n-        for (Map.Entry<String, Set<String>> entry : this.memberships.entrySet()) {\n-            String userKey = pullUtils.findMatchingAnyKey(\n+        this.memberships.entrySet().forEach(entry -> {\n+            Optional<String> userKey = pullUtils.findMatchingAnyKey(\n                     anyTypeDAO.findUser(),\n                     entry.getKey(),\n                     profile.getTask().getResource(),\n                     profile.getConnector());\n-            if (userKey == null) {\n-                LOG.warn(\"Could not find matching user for {}\", entry.getKey());\n+            if (userKey.isPresent()) {\n+                resolvedMemberships.put(userKey.get(), entry.getValue());\n             } else {\n-                resolvedMemberships.put(userKey, entry.getValue());\n+                LOG.warn(\"Could not find matching user for {}\", entry.getKey());\n             }\n-        }\n+        });\n \n         Map<String, Object> jobMap = new HashMap<>();\n         jobMap.put(SetUMembershipsJob.MEMBERSHIPS_KEY, resolvedMemberships);"},{"sha":"eb94ba9bf375e492745bb90468d5c780e7f63f6b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":18,"deletions":18,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -24,16 +24,16 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n-import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.collections.IteratorChain;\n import org.apache.syncope.common.lib.policy.PullPolicySpec;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n@@ -79,39 +79,39 @@ public void setLatestSyncToken(final ObjectClass objectClass, final SyncToken la\n     }\n \n     private void setGroupOwners(final GroupPullResultHandler ghandler) {\n-        for (Map.Entry<String, String> entry : ghandler.getGroupOwnerMap().entrySet()) {\n+        ghandler.getGroupOwnerMap().entrySet().stream().map(entry -> {\n             Group group = groupDAO.find(entry.getKey());\n             if (group == null) {\n                 throw new NotFoundException(\"Group \" + entry.getKey());\n             }\n-\n             if (StringUtils.isBlank(entry.getValue())) {\n                 group.setGroupOwner(null);\n                 group.setUserOwner(null);\n             } else {\n-                String userKey = pullUtils.findMatchingAnyKey(\n+                Optional<String> userKey = pullUtils.findMatchingAnyKey(\n                         anyTypeDAO.findUser(),\n                         entry.getValue(),\n                         ghandler.getProfile().getTask().getResource(),\n                         ghandler.getProfile().getConnector());\n \n-                if (userKey == null) {\n-                    String groupKey = pullUtils.findMatchingAnyKey(\n+                if (userKey.isPresent()) {\n+                    group.setUserOwner(userDAO.find(userKey.get()));\n+                } else {\n+                    Optional<String> groupKey = pullUtils.findMatchingAnyKey(\n                             anyTypeDAO.findGroup(),\n                             entry.getValue(),\n                             ghandler.getProfile().getTask().getResource(),\n                             ghandler.getProfile().getConnector());\n \n-                    if (groupKey != null) {\n-                        group.setGroupOwner(groupDAO.find(groupKey));\n+                    if (groupKey.isPresent()) {\n+                        group.setGroupOwner(groupDAO.find(groupKey.get()));\n                     }\n-                } else {\n-                    group.setUserOwner(userDAO.find(userKey));\n                 }\n             }\n-\n+            return group;\n+        }).forEachOrdered(group -> {\n             groupDAO.save(group);\n-        }\n+        });\n     }\n \n     @Override\n@@ -123,7 +123,7 @@ protected String doExecuteProvisioning(\n         LOG.debug(\"Executing pull on {}\", pullTask.getResource());\n \n         List<PullActions> actions = new ArrayList<>();\n-        for (String className : pullTask.getActionsClassNames()) {\n+        pullTask.getActionsClassNames().forEach(className -> {\n             try {\n                 Class<?> actionsClass = Class.forName(className);\n                 PullActions pullActions = (PullActions) ApplicationContextProvider.getBeanFactory().\n@@ -133,7 +133,7 @@ protected String doExecuteProvisioning(\n             } catch (Exception e) {\n                 LOG.warn(\"Class '{}' not found\", className, e);\n             }\n-        }\n+        });\n \n         ProvisioningProfile<PullTask, PullActions> profile = new ProvisioningProfile<>(connector, pullTask);\n         profile.getActions().addAll(actions);\n@@ -236,10 +236,10 @@ protected String doExecuteProvisioning(\n \n                 try {\n                     Set<MappingItem> linkinMappingItems = new HashSet<>();\n-                    for (VirSchema virSchema : virSchemaDAO.findByProvision(provision)) {\n+                    virSchemaDAO.findByProvision(provision).forEach(virSchema -> {\n                         linkinMappingItems.add(virSchema.asLinkingMappingItem());\n-                    }\n-                    Iterator<MappingItem> mapItems = IteratorUtils.chainedIterator(\n+                    });\n+                    Iterator<MappingItem> mapItems = new IteratorChain<>(\n                             provision.getMapping().getItems().iterator(),\n                             linkinMappingItems.iterator());\n                     OperationOptions options = MappingUtils.buildOperationOptions(mapItems);"},{"sha":"ad431bf3f5278bad42e5fd9ed3daf3f68a6d27fa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java","status":"modified","additions":30,"deletions":36,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,7 +21,8 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.policy.PullPolicySpec;\n@@ -58,15 +59,13 @@\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n-import org.identityconnectors.framework.common.objects.ResultsHandler;\n import org.identityconnectors.framework.common.objects.filter.EqualsFilter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.provisioning.api.pushpull.PullCorrelationRule;\n-import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n@@ -115,51 +114,45 @@ public class PullUtils {\n     @Autowired\n     private IntAttrNameParser intAttrNameParser;\n \n-    public String findMatchingAnyKey(\n+    public Optional<String> findMatchingAnyKey(\n             final AnyType anyType,\n             final String name,\n             final ExternalResource resource,\n             final Connector connector) {\n \n-        Provision provision = resource.getProvision(anyType);\n-        if (provision == null) {\n-            return null;\n+        Optional<? extends Provision> provision = resource.getProvision(anyType);\n+        if (!provision.isPresent()) {\n+            return Optional.empty();\n         }\n \n-        String result = null;\n+        Optional<String> result = Optional.empty();\n \n         AnyUtils anyUtils = anyUtilsFactory.getInstance(anyType.getKind());\n \n         final List<ConnectorObject> found = new ArrayList<>();\n-        connector.search(provision.getObjectClass(),\n-                new EqualsFilter(new Name(name)),\n-                new ResultsHandler() {\n-\n-            @Override\n-            public boolean handle(final ConnectorObject obj) {\n-                return found.add(obj);\n-            }\n-        }, MappingUtils.buildOperationOptions(MappingUtils.getPullItems(provision).iterator()));\n+        connector.search(provision.get().getObjectClass(),\n+                new EqualsFilter(new Name(name)), obj -> found.add(obj),\n+                MappingUtils.buildOperationOptions(MappingUtils.getPullItems(provision.get()).iterator()));\n \n         if (found.isEmpty()) {\n-            LOG.debug(\"No {} found on {} with __NAME__ {}\", provision.getObjectClass(), resource, name);\n+            LOG.debug(\"No {} found on {} with __NAME__ {}\", provision.get().getObjectClass(), resource, name);\n         } else {\n             if (found.size() > 1) {\n                 LOG.warn(\"More than one {} found on {} with __NAME__ {} - taking first only\",\n-                        provision.getObjectClass(), resource, name);\n+                        provision.get().getObjectClass(), resource, name);\n             }\n \n             ConnectorObject connObj = found.iterator().next();\n             try {\n-                List<String> anyKeys = findExisting(connObj.getUid().getUidValue(), connObj, provision, anyUtils);\n+                List<String> anyKeys = findExisting(connObj.getUid().getUidValue(), connObj, provision.get(), anyUtils);\n                 if (anyKeys.isEmpty()) {\n                     LOG.debug(\"No matching {} found for {}, aborting\", anyUtils.getAnyTypeKind(), connObj);\n                 } else {\n                     if (anyKeys.size() > 1) {\n                         LOG.warn(\"More than one {} found {} - taking first only\", anyUtils.getAnyTypeKind(), anyKeys);\n                     }\n \n-                    result = anyKeys.iterator().next();\n+                    result = Optional.ofNullable(anyKeys.iterator().next());\n                 }\n             } catch (IllegalArgumentException e) {\n                 LOG.warn(e.getMessage());\n@@ -180,12 +173,12 @@ private AnyDAO<?> getAnyDAO(final AnyTypeKind anyTypeKind) {\n     private List<String> findByConnObjectKeyItem(\n             final String uid, final Provision provision, final AnyUtils anyUtils) {\n \n-        MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n+        Optional<MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n \n         String transfUid = uid;\n-        for (ItemTransformer transformer : MappingUtils.getItemTransformers(connObjectKeyItem)) {\n+        for (ItemTransformer transformer : MappingUtils.getItemTransformers(connObjectKeyItem.get())) {\n             List<Object> output = transformer.beforePull(\n-                    connObjectKeyItem,\n+                    connObjectKeyItem.get(),\n                     null,\n                     Collections.<Object>singletonList(transfUid));\n             if (output != null && !output.isEmpty()) {\n@@ -196,7 +189,7 @@ private List<String> findByConnObjectKeyItem(\n         List<String> result = new ArrayList<>();\n \n         IntAttrName intAttrName = intAttrNameParser.parse(\n-                connObjectKeyItem.getIntAttrName(),\n+                connObjectKeyItem.get().getIntAttrName(),\n                 provision.getAnyType().getKind());\n \n         if (intAttrName.getField() != null) {\n@@ -247,17 +240,17 @@ private List<String> findByConnObjectKeyItem(\n \n                     List<? extends Any<?>> anys = getAnyDAO(provision.getAnyType().getKind()).\n                             findByPlainAttrValue(intAttrName.getSchemaName(), value);\n-                    for (Any<?> any : anys) {\n+                    anys.forEach(any -> {\n                         result.add(any.getKey());\n-                    }\n+                    });\n                     break;\n \n                 case DERIVED:\n                     anys = getAnyDAO(provision.getAnyType().getKind()).\n                             findByDerAttrValue(intAttrName.getSchemaName(), transfUid);\n-                    for (Any<?> any : anys) {\n+                    anys.forEach(any -> {\n                         result.add(any.getKey());\n-                    }\n+                    });\n                     break;\n \n                 default:\n@@ -271,9 +264,9 @@ private List<String> findByCorrelationRule(\n             final ConnectorObject connObj, final PullCorrelationRule rule, final AnyTypeKind type) {\n \n         List<String> result = new ArrayList<>();\n-        for (Any<?> any : searchDAO.search(rule.getSearchCond(connObj), type)) {\n+        searchDAO.search(rule.getSearchCond(connObj), type).forEach(any -> {\n             result.add(any.getKey());\n-        }\n+        });\n \n         return result;\n     }\n@@ -337,12 +330,12 @@ public List<String> findExisting(\n             final ConnectorObject connObj,\n             final OrgUnit orgUnit) {\n \n-        OrgUnitItem connObjectKeyItem = orgUnit.getConnObjectKeyItem();\n+        Optional<? extends OrgUnitItem> connObjectKeyItem = orgUnit.getConnObjectKeyItem();\n \n         String transfUid = uid;\n-        for (ItemTransformer transformer : MappingUtils.getItemTransformers(connObjectKeyItem)) {\n+        for (ItemTransformer transformer : MappingUtils.getItemTransformers(connObjectKeyItem.get())) {\n             List<Object> output = transformer.beforePull(\n-                    connObjectKeyItem,\n+                    connObjectKeyItem.get(),\n                     null,\n                     Collections.<Object>singletonList(transfUid));\n             if (output != null && !output.isEmpty()) {\n@@ -353,7 +346,7 @@ public List<String> findExisting(\n         List<String> result = new ArrayList<>();\n \n         Realm realm;\n-        switch (connObjectKeyItem.getIntAttrName()) {\n+        switch (connObjectKeyItem.get().getIntAttrName()) {\n             case \"key\":\n                 realm = realmDAO.find(transfUid);\n                 if (realm != null) {\n@@ -362,7 +355,8 @@ public List<String> findExisting(\n                 break;\n \n             case \"name\":\n-                CollectionUtils.collect(realmDAO.findByName(transfUid), EntityUtils.keyTransformer(), result);\n+                result.addAll(realmDAO.findByName(transfUid).stream().\n+                        map(r -> r.getKey()).collect(Collectors.toList()));\n                 break;\n \n             case \"fullpath\":"},{"sha":"996ccad60222db9a27d090fe138b8f3f2057739d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n@@ -38,6 +39,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n+import org.apache.syncope.core.persistence.api.entity.task.PushTaskAnyFilter;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.pushpull.AnyObjectPushResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.GroupPushResultHandler;\n@@ -119,7 +121,7 @@ protected String doExecuteProvisioning(\n         LOG.debug(\"Executing push on {}\", pushTask.getResource());\n \n         List<PushActions> actions = new ArrayList<>();\n-        for (String className : pushTask.getActionsClassNames()) {\n+        pushTask.getActionsClassNames().forEach(className -> {\n             try {\n                 Class<?> actionsClass = Class.forName(className);\n \n@@ -129,7 +131,7 @@ protected String doExecuteProvisioning(\n             } catch (Exception e) {\n                 LOG.info(\"Class '{}' not found\", className, e);\n             }\n-        }\n+        });\n \n         ProvisioningProfile<PushTask, PushActions> profile = new ProvisioningProfile<>(connector, pushTask);\n         profile.getActions().addAll(actions);\n@@ -195,9 +197,10 @@ protected String doExecuteProvisioning(\n                         handler = ahandler;\n                 }\n \n-                String filter = pushTask.getFilter(provision.getAnyType()) == null\n-                        ? null\n-                        : pushTask.getFilter(provision.getAnyType()).getFIQLCond();\n+                Optional<? extends PushTaskAnyFilter> anyFilter = pushTask.getFilter(provision.getAnyType());\n+                String filter = anyFilter.isPresent()\n+                        ? anyFilter.get().getFIQLCond()\n+                        : null;\n                 SearchCond cond = StringUtils.isBlank(filter)\n                         ? anyDAO.getAllMatchingCond()\n                         : SearchCondConverter.convert(filter);"},{"sha":"655f0c503619e5472f6deef92c467edb113a357b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/RealmPushResultHandlerImpl.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPushResultHandlerImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,6 +23,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n@@ -195,12 +196,12 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n \n         // Try to read remote object BEFORE any actual operation\n         OrgUnit orgUnit = profile.getTask().getResource().getOrgUnit();\n-        OrgUnitItem connObjectKey = orgUnit.getConnObjectKeyItem();\n+        Optional<? extends OrgUnitItem> connObjectKey = orgUnit.getConnObjectKeyItem();\n         String connObjecKeyValue = mappingManager.getConnObjectKeyValue(realm, orgUnit);\n \n         ConnectorObject beforeObj = getRemoteObject(\n                 orgUnit.getObjectClass(),\n-                connObjectKey.getExtAttrName(),\n+                connObjectKey.get().getExtAttrName(),\n                 connObjecKeyValue,\n                 orgUnit.getItems().iterator());\n \n@@ -374,7 +375,7 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n                 resultStatus = AuditElements.Result.SUCCESS;\n                 output = getRemoteObject(\n                         orgUnit.getObjectClass(),\n-                        connObjectKey.getExtAttrName(),\n+                        connObjectKey.get().getExtAttrName(),\n                         connObjecKeyValue,\n                         orgUnit.getItems().iterator());\n             } catch (IgnoreProvisionException e) {"},{"sha":"ca98f76577073c6ee82c064e019009f4b4864877","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java","status":"modified","additions":26,"deletions":33,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -34,16 +34,13 @@\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n@@ -52,7 +49,6 @@\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.common.security.SecurityUtil;\n-import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -134,19 +130,18 @@ public <T extends AnyTO> T getAnyTO(\n \n             Realm realm = realmDAO.findByFullPath(userTO.getRealm());\n             if (realm != null) {\n-                for (Realm ancestor : realmDAO.findAncestors(realm)) {\n-                    if (ancestor.getPasswordPolicy() != null) {\n-                        ruleConfs.addAll(ancestor.getPasswordPolicy().getRuleConfs());\n-                    }\n-                }\n+                realmDAO.findAncestors(realm).stream().\n+                        filter(ancestor -> (ancestor.getPasswordPolicy() != null)).\n+                        forEachOrdered(ancestor -> {\n+                            ruleConfs.addAll(ancestor.getPasswordPolicy().getRuleConfs());\n+                        });\n             }\n \n-            for (String resName : userTO.getResources()) {\n-                ExternalResource resource = resourceDAO.find(resName);\n-                if (resource != null && resource.getPasswordPolicy() != null) {\n-                    ruleConfs.addAll(resource.getPasswordPolicy().getRuleConfs());\n-                }\n-            }\n+            userTO.getResources().stream().map(resName -> resourceDAO.find(resName)).\n+                    filter(resource -> (resource != null && resource.getPasswordPolicy() != null)).\n+                    forEachOrdered(resource -> {\n+                        ruleConfs.addAll(resource.getPasswordPolicy().getRuleConfs());\n+                    });\n \n             String password;\n             try {\n@@ -165,9 +160,9 @@ public <T extends AnyTO> T getAnyTO(\n     public RealmTO getRealmTO(final ConnectorObject obj, final PullTask task, final OrgUnit orgUnit) {\n         RealmTO realmTO = new RealmTO();\n \n-        for (OrgUnitItem item : MappingUtils.getPullItems(orgUnit)) {\n+        MappingUtils.getPullItems(orgUnit).forEach(item -> {\n             mappingManager.setIntValues(item, obj.getAttributeByName(item.getExtAttrName()), realmTO);\n-        }\n+        });\n \n         return realmTO;\n     }\n@@ -268,9 +263,9 @@ private <T extends AnyTO> T getAnyTOFromConnObject(\n \n         // 1. fill with data from connector object\n         anyTO.setRealm(pullTask.getDestinatioRealm().getFullPath());\n-        for (MappingItem item : MappingUtils.getPullItems(provision)) {\n+        MappingUtils.getPullItems(provision).forEach(item -> {\n             mappingManager.setIntValues(item, obj.getAttributeByName(item.getExtAttrName()), anyTO, anyUtils);\n-        }\n+        });\n \n         // 2. add data from defined template (if any)\n         templateUtils.apply(anyTO, pullTask.getTemplate(provision.getAnyType()));\n@@ -288,26 +283,24 @@ public ConnObjectTO getConnObjectTO(final ConnectorObject connObject) {\n         final ConnObjectTO connObjectTO = new ConnObjectTO();\n \n         if (connObject != null) {\n-            for (Attribute attr : connObject.getAttributes()) {\n+            connObject.getAttributes().stream().map(attr -> {\n                 AttrTO attrTO = new AttrTO();\n                 attrTO.setSchema(attr.getName());\n-\n                 if (attr.getValue() != null) {\n-                    for (Object value : attr.getValue()) {\n-                        if (value != null) {\n-                            if (value instanceof GuardedString || value instanceof GuardedByteArray) {\n-                                attrTO.getValues().add(getPassword(value));\n-                            } else if (value instanceof byte[]) {\n-                                attrTO.getValues().add(Base64.encode((byte[]) value));\n-                            } else {\n-                                attrTO.getValues().add(value.toString());\n-                            }\n+                    attr.getValue().stream().filter(value -> value != null).forEachOrdered(value -> {\n+                        if (value instanceof GuardedString || value instanceof GuardedByteArray) {\n+                            attrTO.getValues().add(getPassword(value));\n+                        } else if (value instanceof byte[]) {\n+                            attrTO.getValues().add(Base64.encode((byte[]) value));\n+                        } else {\n+                            attrTO.getValues().add(value.toString());\n                         }\n-                    }\n+                    });\n                 }\n-\n+                return attrTO;\n+            }).forEachOrdered((attrTO) -> {\n                 connObjectTO.getAttrs().add(attrTO);\n-            }\n+            });\n         }\n \n         return connObjectTO;"},{"sha":"ebe4e2b4246121d2296b04f4535274e8e80067fd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java","status":"modified","additions":24,"deletions":35,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,12 +19,13 @@\n package org.apache.syncope.core.provisioning.java.utils;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n-import org.apache.commons.collections4.ListUtils;\n-import org.apache.commons.collections4.Predicate;\n+import java.util.stream.Collectors;\n import org.apache.commons.jexl3.JexlContext;\n import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.ClassUtils;\n@@ -57,55 +58,43 @@ public final class MappingUtils {\n \n     private static final Logger LOG = LoggerFactory.getLogger(MappingUtils.class);\n \n-    public static MappingItem getConnObjectKeyItem(final Provision provision) {\n+    public static Optional<MappingItem> getConnObjectKeyItem(final Provision provision) {\n         Mapping mapping = null;\n         if (provision != null) {\n             mapping = provision.getMapping();\n         }\n \n-        return mapping == null\n+        return Optional.ofNullable(mapping == null\n                 ? null\n-                : mapping.getConnObjectKeyItem();\n+                : mapping.getConnObjectKeyItem().get());\n     }\n \n     public static List<? extends MappingItem> getPropagationItems(final Provision provision) {\n-        return ListUtils.select(provision.getMapping().getItems(), new Predicate<MappingItem>() {\n-\n-            @Override\n-            public boolean evaluate(final MappingItem item) {\n-                return item.getPurpose() == MappingPurpose.PROPAGATION || item.getPurpose() == MappingPurpose.BOTH;\n-            }\n-        });\n+        return provision == null\n+                ? Collections.emptyList()\n+                : provision.getMapping().getItems().stream().\n+                        filter(item -> item.getPurpose() == MappingPurpose.PROPAGATION\n+                        || item.getPurpose() == MappingPurpose.BOTH).collect(Collectors.toList());\n     }\n \n     public static List<? extends MappingItem> getPullItems(final Provision provision) {\n-        return ListUtils.select(provision.getMapping().getItems(), new Predicate<MappingItem>() {\n-\n-            @Override\n-            public boolean evaluate(final MappingItem item) {\n-                return item.getPurpose() == MappingPurpose.PULL || item.getPurpose() == MappingPurpose.BOTH;\n-            }\n-        });\n+        return provision == null\n+                ? Collections.emptyList()\n+                : provision.getMapping().getItems().stream().\n+                        filter(item -> item.getPurpose() == MappingPurpose.PULL\n+                        || item.getPurpose() == MappingPurpose.BOTH).collect(Collectors.toList());\n     }\n \n     public static List<? extends OrgUnitItem> getPropagationItems(final OrgUnit orgUnit) {\n-        return ListUtils.select(orgUnit.getItems(), new Predicate<OrgUnitItem>() {\n-\n-            @Override\n-            public boolean evaluate(final OrgUnitItem item) {\n-                return item.getPurpose() == MappingPurpose.PROPAGATION || item.getPurpose() == MappingPurpose.BOTH;\n-            }\n-        });\n+        return orgUnit.getItems().stream().\n+                filter(item -> item.getPurpose() == MappingPurpose.PROPAGATION\n+                || item.getPurpose() == MappingPurpose.BOTH).collect(Collectors.toList());\n     }\n \n     public static List<? extends OrgUnitItem> getPullItems(final OrgUnit orgUnit) {\n-        return ListUtils.select(orgUnit.getItems(), new Predicate<OrgUnitItem>() {\n-\n-            @Override\n-            public boolean evaluate(final OrgUnitItem item) {\n-                return item.getPurpose() == MappingPurpose.PULL || item.getPurpose() == MappingPurpose.BOTH;\n-            }\n-        });\n+        return orgUnit.getItems().stream().\n+                filter(item -> item.getPurpose() == MappingPurpose.PULL\n+                || item.getPurpose() == MappingPurpose.BOTH).collect(Collectors.toList());\n     }\n \n     private static Name evaluateNAME(final String evalConnObjectLink, final String connObjectKey) {\n@@ -209,7 +198,7 @@ private static List<ItemTransformer> getItemTransformers(\n         }\n \n         // Then other custom tranaformers\n-        for (String className : mappingItemTransformerClassNames) {\n+        mappingItemTransformerClassNames.forEach(className -> {\n             try {\n                 Class<?> transformerClass = ClassUtils.getClass(className);\n \n@@ -218,7 +207,7 @@ private static List<ItemTransformer> getItemTransformers(\n             } catch (Exception e) {\n                 LOG.error(\"Could not instantiate {}, ignoring...\", className, e);\n             }\n-        }\n+        });\n \n         return result;\n     }"},{"sha":"09942524324c008c0225fba92622ce7132633317","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java","status":"modified","additions":32,"deletions":30,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.provisioning.java.utils;\n \n import java.util.Map;\n+import java.util.Optional;\n import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.EntityTOUtils;\n@@ -28,8 +29,6 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.GroupableRelatableTO;\n-import org.apache.syncope.common.lib.to.MembershipTO;\n-import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n@@ -56,12 +55,12 @@ private AttrTO evaluateAttr(final AnyTO anyTO, final AttrTO template) {\n         result.setSchema(template.getSchema());\n \n         if (template.getValues() != null && !template.getValues().isEmpty()) {\n-            for (String value : template.getValues()) {\n+            template.getValues().forEach(value -> {\n                 String evaluated = JexlUtils.evaluate(value, anyTO, new MapContext());\n                 if (StringUtils.isNotBlank(evaluated)) {\n                     result.getValues().add(evaluated);\n                 }\n-            }\n+            });\n         }\n \n         return result;\n@@ -108,25 +107,26 @@ private void fill(final AnyTO anyTO, final AnyTO template) {\n     }\n \n     private void fillRelationships(final GroupableRelatableTO any, final GroupableRelatableTO template) {\n-        for (RelationshipTO relationship : template.getRelationships()) {\n-            if (any.getRelationship(relationship.getRightKey(), relationship.getRightKey()) == null) {\n-                any.getRelationships().add(relationship);\n-            }\n-        }\n+        template.getRelationships().stream().\n+                filter(relationship\n+                        -> !any.getRelationship(relationship.getRightKey(), relationship.getRightKey()).isPresent()).\n+                forEachOrdered(relationship -> {\n+                    any.getRelationships().add(relationship);\n+                });\n     }\n \n     private void fillMemberships(final GroupableRelatableTO any, final GroupableRelatableTO template) {\n-        for (MembershipTO membership : template.getMemberships()) {\n-            if (any.getMembership(membership.getGroupKey()) == null) {\n-                any.getMemberships().add(membership);\n-            }\n-        }\n+        template.getMemberships().stream().\n+                filter(membership -> !any.getMembership(membership.getGroupKey()).isPresent()).\n+                forEachOrdered(membership -> {\n+                    any.getMemberships().add(membership);\n+                });\n     }\n \n     @Transactional(readOnly = true)\n-    public <T extends AnyTO> void apply(final T anyTO, final AnyTemplate anyTemplate) {\n-        if (anyTemplate != null) {\n-            apply(anyTO, anyTemplate.get());\n+    public <T extends AnyTO> void apply(final T anyTO, final Optional<? extends AnyTemplate> anyTemplate) {\n+        if (anyTemplate.isPresent()) {\n+            apply(anyTO, anyTemplate.get().get());\n         }\n     }\n \n@@ -180,18 +180,20 @@ public <T extends AnyTO> void apply(final T anyTO, final AnyTO template) {\n     public void check(final Map<String, AnyTO> templates, final ClientExceptionType clientExceptionType) {\n         SyncopeClientException sce = SyncopeClientException.build(clientExceptionType);\n \n-        for (Map.Entry<String, AnyTO> entry : templates.entrySet()) {\n-            for (AttrTO attrTO : entry.getValue().getPlainAttrs()) {\n-                if (!attrTO.getValues().isEmpty() && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))) {\n-                    sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n-                }\n-            }\n-\n-            for (AttrTO attrTO : entry.getValue().getVirAttrs()) {\n-                if (!attrTO.getValues().isEmpty() && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))) {\n-                    sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n-                }\n-            }\n+        templates.entrySet().forEach(entry -> {\n+            entry.getValue().getPlainAttrs().stream().\n+                    filter(attrTO -> !attrTO.getValues().isEmpty()\n+                    && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))).\n+                    forEachOrdered(attrTO -> {\n+                        sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n+                    });\n+\n+            entry.getValue().getVirAttrs().stream().\n+                    filter(attrTO -> !attrTO.getValues().isEmpty()\n+                    && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))).\n+                    forEachOrdered((attrTO) -> {\n+                        sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n+                    });\n \n             if (entry.getValue() instanceof UserTO) {\n                 UserTO template = (UserTO) entry.getValue();\n@@ -213,7 +215,7 @@ public void check(final Map<String, AnyTO> templates, final ClientExceptionType\n                     sce.getElements().add(\"Invalid JEXL: \" + template.getName());\n                 }\n             }\n-        }\n+        });\n \n         if (!sce.isEmpty()) {\n             throw sce;"},{"sha":"ebf1807f37f490b14c4c96aff8e484d356cc0ac7","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/ConnectorManagerTest.java","status":"modified","additions":2,"deletions":10,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManagerTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,10 +20,7 @@\n \n import static org.junit.Assert.assertEquals;\n \n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n@@ -59,13 +56,8 @@ public void load() {\n         connManager.load();\n \n         // only consider local connector bundles\n-        long expected = IterableUtils.countMatches(resourceDAO.findAll(), new Predicate<ExternalResource>() {\n-\n-            @Override\n-            public boolean evaluate(final ExternalResource resource) {\n-                return resource.getConnector().getLocation().startsWith(\"file\");\n-            }\n-        });\n+        long expected = resourceDAO.findAll().stream().\n+                filter(resource -> resource.getConnector().getLocation().startsWith(\"file\")).count();\n \n         assertEquals(expected,\n                 ApplicationContextProvider.getBeanFactory()."},{"sha":"8e3fa9ba43f927f76270138cc3d5120c3e0dd1d9","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/MailTemplateTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMailTemplateTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMailTemplateTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMailTemplateTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -59,7 +59,7 @@ private String evaluate(final String template, final Map<String, Object> jexlVar\n     public void confirmPasswordReset() throws IOException {\n         String htmlBody = evaluate(\n                 mailTemplateDAO.find(\"confirmPasswordReset\").getHTMLTemplate(),\n-                new HashMap<String, Object>());\n+                new HashMap<>());\n \n         assertNotNull(htmlBody);\n     }\n@@ -111,7 +111,7 @@ public void optin() throws IOException {\n         ctx.put(\"input\", input);\n \n         UserTO recipient = SerializationUtils.clone(user);\n-        recipient.getPlainAttr(\"email\").getValues().set(0, \"another@syncope.apache.org\");\n+        recipient.getPlainAttr(\"email\").get().getValues().set(0, \"another@syncope.apache.org\");\n         ctx.put(\"recipients\", Collections.singletonList(recipient));\n \n         String htmlBody = evaluate("},{"sha":"8e6887a6ab8fe5a2d8073ff96b5b8421a593b510","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/MappingTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -58,7 +58,7 @@ public void anyConnObjectLink() {\n         ExternalResource ldap = resourceDAO.find(\"resource-ldap\");\n         assertNotNull(ldap);\n \n-        Provision provision = ldap.getProvision(anyTypeDAO.findUser());\n+        Provision provision = ldap.getProvision(anyTypeDAO.findUser()).get();\n         assertNotNull(provision);\n         assertNotNull(provision.getMapping());\n         assertNotNull(provision.getMapping().getConnObjectLink());"},{"sha":"af4247c4defb8a9263b32cc247bdde163a437bd0","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/ResourceDataBinderTest.java","status":"modified","additions":12,"deletions":19,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,12 +21,10 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n \n-import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n@@ -71,14 +69,9 @@ public class ResourceDataBinderTest extends AbstractTest {\n \n     @BeforeClass\n     public static void setAuthContext() {\n-        List<GrantedAuthority> authorities = CollectionUtils.collect(StandardEntitlement.values(),\n-                new Transformer<String, GrantedAuthority>() {\n-\n-            @Override\n-            public GrantedAuthority transform(final String entitlement) {\n-                return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n-            }\n-        }, new ArrayList<GrantedAuthority>());\n+        List<GrantedAuthority> authorities = StandardEntitlement.values().stream().\n+                map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n+                collect(Collectors.toList());\n \n         UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n                 new org.springframework.security.core.userdetails.User(\n@@ -98,10 +91,10 @@ public void issue42() {\n \n         Set<MappingItem> beforeUserIdMappings = new HashSet<>();\n         for (ExternalResource res : resourceDAO.findAll()) {\n-            if (res.getProvision(anyTypeDAO.findUser()) != null\n-                    && res.getProvision(anyTypeDAO.findUser()).getMapping() != null) {\n+            if (res.getProvision(anyTypeDAO.findUser()).isPresent()\n+                    && res.getProvision(anyTypeDAO.findUser()).get().getMapping() != null) {\n \n-                for (MappingItem mapItem : res.getProvision(anyTypeDAO.findUser()).getMapping().getItems()) {\n+                for (MappingItem mapItem : res.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems()) {\n                     if (userId.getKey().equals(mapItem.getIntAttrName())) {\n                         beforeUserIdMappings.add(mapItem);\n                     }\n@@ -133,8 +126,8 @@ public void issue42() {\n         ExternalResource resource = resourceDataBinder.create(resourceTO);\n         resource = resourceDAO.save(resource);\n         assertNotNull(resource);\n-        assertNotNull(resource.getProvision(anyTypeDAO.findUser()).getMapping());\n-        assertEquals(1, resource.getProvision(anyTypeDAO.findUser()).getMapping().getItems().size());\n+        assertNotNull(resource.getProvision(anyTypeDAO.findUser()).get().getMapping());\n+        assertEquals(1, resource.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems().size());\n \n         resourceDAO.flush();\n \n@@ -146,10 +139,10 @@ public void issue42() {\n \n         Set<MappingItem> afterUserIdMappings = new HashSet<>();\n         for (ExternalResource res : resourceDAO.findAll()) {\n-            if (res.getProvision(anyTypeDAO.findUser()) != null\n-                    && res.getProvision(anyTypeDAO.findUser()).getMapping() != null) {\n+            if (res.getProvision(anyTypeDAO.findUser()).isPresent()\n+                    && res.getProvision(anyTypeDAO.findUser()).get().getMapping() != null) {\n \n-                for (MappingItem mapItem : res.getProvision(anyTypeDAO.findUser()).getMapping().getItems()) {\n+                for (MappingItem mapItem : res.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems()) {\n                     if (userId.getKey().equals(mapItem.getIntAttrName())) {\n                         afterUserIdMappings.add(mapItem);\n                     }"},{"sha":"e2a18583759d8f46d195451864318e6911b54785","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/WadlGenerator.java","status":"modified","additions":13,"deletions":19,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -24,10 +24,9 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import javax.ws.rs.Path;\n import javax.ws.rs.container.ContainerRequestContext;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.cxf.BusFactory;\n import org.apache.cxf.common.util.ClasspathScanner;\n import org.apache.cxf.jaxrs.model.ClassResourceInfo;\n@@ -84,27 +83,22 @@ public String getWadl() {\n \n                 List<ClassResourceInfo> classResourceInfos = new ArrayList<>();\n                 for (final Class<?> beanClass : resourceClasses) {\n-                    ClassResourceInfo cri = IterableUtils.find(classResourceInfos, new Predicate<ClassResourceInfo>() {\n-\n-                        @Override\n-                        public boolean evaluate(final ClassResourceInfo cri) {\n-                            return cri.isCreatedFromModel() && cri.isRoot()\n-                                    && cri.getServiceClass().isAssignableFrom(beanClass);\n-                        }\n-                    });\n-                    if (cri != null) {\n-                        if (!InjectionUtils.isConcreteClass(cri.getServiceClass())) {\n-                            cri = new ClassResourceInfo(cri);\n-                            classResourceInfos.add(cri);\n+                    Optional<ClassResourceInfo> cri = classResourceInfos.stream().filter(c\n+                            -> c.isCreatedFromModel() && c.isRoot() && c.getServiceClass().isAssignableFrom(beanClass)).\n+                            findFirst();\n+                    if (cri.isPresent()) {\n+                        if (!InjectionUtils.isConcreteClass(cri.get().getServiceClass())) {\n+                            cri = Optional.of(new ClassResourceInfo(cri.get()));\n+                            classResourceInfos.add(cri.get());\n                         }\n-                        cri.setResourceClass(beanClass);\n+                        cri.get().setResourceClass(beanClass);\n                         continue;\n                     }\n \n-                    cri = ResourceUtils.createClassResourceInfo(\n-                            beanClass, beanClass, true, true, BusFactory.getDefaultBus());\n-                    if (cri != null) {\n-                        classResourceInfos.add(cri);\n+                    cri = Optional.ofNullable(ResourceUtils.createClassResourceInfo(\n+                            beanClass, beanClass, true, true, BusFactory.getDefaultBus()));\n+                    if (cri.isPresent()) {\n+                        classResourceInfos.add(cri.get());\n                     }\n                 }\n "},{"sha":"ed0f2dd8ad026316b7df8aa7d359acada03cbebc","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":28,"deletions":26,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Date;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import javax.ws.rs.BadRequestException;\n import javax.ws.rs.core.Response;\n@@ -40,7 +41,6 @@\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n@@ -101,7 +101,7 @@ public Set<AttrTO> read(final String key, final SchemaType schemaType) {\n     @Override\n     public AttrTO read(final String key, final SchemaType schemaType, final String schema) {\n         TO any = read(key);\n-        AttrTO result;\n+        Optional<AttrTO> result;\n         switch (schemaType) {\n             case DERIVED:\n                 result = any.getDerAttr(schema);\n@@ -116,11 +116,11 @@ public AttrTO read(final String key, final SchemaType schemaType, final String s\n                 result = any.getPlainAttr(schema);\n         }\n \n-        if (result == null) {\n+        if (!result.isPresent()) {\n             throw new NotFoundException(\"Attribute for type \" + schemaType + \" and schema \" + schema);\n         }\n \n-        return result;\n+        return result.get();\n     }\n \n     @Override\n@@ -267,17 +267,18 @@ public Response deassociate(final DeassociationPatch patch) {\n         BulkActionResult result = new BulkActionResult();\n \n         if (patch.getAction() == ResourceDeassociationAction.UNLINK) {\n-            for (String resource : patch.getResources()) {\n-                result.getResults().put(resource,\n+            patch.getResources().forEach(resource -> {\n+                result.getResults().put(\n+                        resource,\n                         updated.getEntity().getResources().contains(resource)\n                         ? BulkActionResult.Status.FAILURE\n                         : BulkActionResult.Status.SUCCESS);\n-            }\n+            });\n         } else {\n-            for (PropagationStatus propagationStatusTO : updated.getPropagationStatuses()) {\n-                result.getResults().put(propagationStatusTO.getResource(),\n-                        BulkActionResult.Status.valueOf(propagationStatusTO.getStatus().toString()));\n-            }\n+            updated.getPropagationStatuses().forEach(propagationStatusTO\n+                    -> result.getResults().put(\n+                            propagationStatusTO.getResource(),\n+                            BulkActionResult.Status.valueOf(propagationStatusTO.getStatus().toString())));\n         }\n \n         return modificationResponse(result);\n@@ -323,17 +324,18 @@ public Response associate(final AssociationPatch patch) {\n         BulkActionResult result = new BulkActionResult();\n \n         if (patch.getAction() == ResourceAssociationAction.LINK) {\n-            for (String resource : patch.getResources()) {\n-                result.getResults().put(resource,\n+            patch.getResources().forEach(resource -> {\n+                result.getResults().put(\n+                        resource,\n                         updated.getEntity().getResources().contains(resource)\n                         ? BulkActionResult.Status.SUCCESS\n                         : BulkActionResult.Status.FAILURE);\n-            }\n+            });\n         } else {\n-            for (PropagationStatus propagationStatusTO : updated.getPropagationStatuses()) {\n-                result.getResults().put(propagationStatusTO.getResource(),\n-                        BulkActionResult.Status.valueOf(propagationStatusTO.getStatus().toString()));\n-            }\n+            updated.getPropagationStatuses().forEach(propagationStatusTO\n+                    -> result.getResults().put(\n+                            propagationStatusTO.getResource(),\n+                            BulkActionResult.Status.valueOf(propagationStatusTO.getStatus().toString())));\n         }\n \n         return modificationResponse(result);\n@@ -348,7 +350,7 @@ public Response bulk(final BulkAction bulkAction) {\n         switch (bulkAction.getType()) {\n             case MUSTCHANGEPASSWORD:\n                 if (logic instanceof UserLogic) {\n-                    for (String key : bulkAction.getTargets()) {\n+                    bulkAction.getTargets().forEach(key -> {\n                         try {\n                             final UserPatch userPatch = new UserPatch();\n                             userPatch.setKey(key);\n@@ -361,14 +363,14 @@ public Response bulk(final BulkAction bulkAction) {\n                             LOG.error(\"Error performing delete for user {}\", key, e);\n                             result.getResults().put(key, BulkActionResult.Status.FAILURE);\n                         }\n-                    }\n+                    });\n                 } else {\n                     throw new BadRequestException();\n                 }\n                 break;\n \n             case DELETE:\n-                for (String key : bulkAction.getTargets()) {\n+                bulkAction.getTargets().forEach(key -> {\n                     try {\n                         result.getResults().put(\n                                 logic.delete(key, isNullPriorityAsync()).getEntity().getKey(),\n@@ -377,12 +379,12 @@ public Response bulk(final BulkAction bulkAction) {\n                         LOG.error(\"Error performing delete for user {}\", key, e);\n                         result.getResults().put(key, BulkActionResult.Status.FAILURE);\n                     }\n-                }\n+                });\n                 break;\n \n             case SUSPEND:\n                 if (logic instanceof UserLogic) {\n-                    for (String key : bulkAction.getTargets()) {\n+                    bulkAction.getTargets().forEach(key -> {\n                         StatusPatch statusPatch = new StatusPatch();\n                         statusPatch.setKey(key);\n                         statusPatch.setType(StatusPatchType.SUSPEND);\n@@ -397,15 +399,15 @@ public Response bulk(final BulkAction bulkAction) {\n                             LOG.error(\"Error performing suspend for user {}\", key, e);\n                             result.getResults().put(key, BulkActionResult.Status.FAILURE);\n                         }\n-                    }\n+                    });\n                 } else {\n                     throw new BadRequestException();\n                 }\n                 break;\n \n             case REACTIVATE:\n                 if (logic instanceof UserLogic) {\n-                    for (String key : bulkAction.getTargets()) {\n+                    bulkAction.getTargets().forEach(key -> {\n                         StatusPatch statusPatch = new StatusPatch();\n                         statusPatch.setKey(key);\n                         statusPatch.setType(StatusPatchType.REACTIVATE);\n@@ -420,7 +422,7 @@ public Response bulk(final BulkAction bulkAction) {\n                             LOG.error(\"Error performing reactivate for user {}\", key, e);\n                             result.getResults().put(key, BulkActionResult.Status.FAILURE);\n                         }\n-                    }\n+                    });\n                 } else {\n                     throw new BadRequestException();\n                 }"},{"sha":"80806767d82da46c6680df797042ad8f1c4774e2","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthContextUtils.java","status":"modified","additions":8,"deletions":18,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,16 +18,13 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.MapUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n@@ -69,11 +66,9 @@ public static Set<SyncopeGrantedAuthority> getAuthorities() {\n         SecurityContext ctx = SecurityContextHolder.getContext();\n         if (ctx != null && ctx.getAuthentication() != null && ctx.getAuthentication().getAuthorities() != null) {\n             Set<SyncopeGrantedAuthority> result = new HashSet<>();\n-            for (GrantedAuthority authority : ctx.getAuthentication().getAuthorities()) {\n-                if (authority instanceof SyncopeGrantedAuthority) {\n-                    result.add(SyncopeGrantedAuthority.class.cast(authority));\n-                }\n-            }\n+            ctx.getAuthentication().getAuthorities().stream().\n+                    filter(authority -> (authority instanceof SyncopeGrantedAuthority)).\n+                    forEachOrdered(authority -> result.add(SyncopeGrantedAuthority.class.cast(authority)));\n \n             return result;\n         }\n@@ -96,7 +91,7 @@ public static Map<String, Set<String>> getAuthorizations() {\n             }\n         }\n \n-        return MapUtils.emptyIfNull(result);\n+        return result == null ? Collections.emptyMap() : result;\n     }\n \n     public static String getDomain() {\n@@ -113,14 +108,9 @@ public static String getDomain() {\n     }\n \n     private static void setFakeAuth(final String domain) {\n-        List<GrantedAuthority> authorities = CollectionUtils.collect(EntitlementsHolder.getInstance().getValues(),\n-                new Transformer<String, GrantedAuthority>() {\n-\n-            @Override\n-            public GrantedAuthority transform(final String entitlement) {\n-                return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n-            }\n-        }, new ArrayList<GrantedAuthority>());\n+        List<GrantedAuthority> authorities = EntitlementsHolder.getInstance().getValues().stream().\n+                map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n+                collect(Collectors.toList());\n \n         UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n                 new User(ApplicationContextProvider.getBeanFactory().getBean(\"adminUser\", String.class),"},{"sha":"3a5ee7b5a2b749e367dfb3a3395de595cf040ea9","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":34,"deletions":49,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -25,11 +25,10 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.annotation.Resource;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.SetUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -52,16 +51,13 @@\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.Domain;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n-import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n@@ -144,11 +140,12 @@ public JWTSSOProvider getJWTSSOProvider(final String issuer) {\n             if (jwtSSOProviders == null) {\n                 jwtSSOProviders = new HashMap<>();\n \n-                for (Class<?> clazz : implementationLookup.getJWTSSOProviderClasses()) {\n-                    JWTSSOProvider jwtSSOProvider = (JWTSSOProvider) ApplicationContextProvider.getBeanFactory().\n-                            createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n-                    jwtSSOProviders.put(jwtSSOProvider.getIssuer(), jwtSSOProvider);\n-                }\n+                implementationLookup.getJWTSSOProviderClasses().stream().\n+                        map((clazz) -> (JWTSSOProvider) ApplicationContextProvider.getBeanFactory().\n+                        createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true)).\n+                        forEachOrdered(jwtSSOProvider -> {\n+                            jwtSSOProviders.put(jwtSSOProvider.getIssuer(), jwtSSOProvider);\n+                        });\n             }\n         }\n \n@@ -184,10 +181,10 @@ public Domain findDomain(final String key) {\n     public Pair<User, Boolean> authenticate(final Authentication authentication) {\n         User user = null;\n \n-        CPlainAttr authAttrs = confDAO.find(\"authentication.attributes\");\n-        List<String> authAttrValues = authAttrs == null\n-                ? Collections.singletonList(\"username\")\n-                : authAttrs.getValuesAsStrings();\n+        Optional<? extends CPlainAttr> authAttrs = confDAO.find(\"authentication.attributes\");\n+        List<String> authAttrValues = authAttrs.isPresent()\n+                ? authAttrs.get().getValuesAsStrings()\n+                : Collections.singletonList(\"username\");\n         for (int i = 0; user == null && i < authAttrValues.size(); i++) {\n             if (\"username\".equals(authAttrValues.get(i))) {\n                 user = userDAO.findByUsername(authentication.getName());\n@@ -213,8 +210,8 @@ public Pair<User, Boolean> authenticate(final Authentication authentication) {\n                 throw new DisabledException(\"User \" + user.getUsername() + \" is suspended\");\n             }\n \n-            CPlainAttr authStatuses = confDAO.find(\"authentication.statuses\");\n-            if (authStatuses != null && !authStatuses.getValuesAsStrings().contains(user.getStatus())) {\n+            Optional<? extends CPlainAttr> authStatuses = confDAO.find(\"authentication.statuses\");\n+            if (authStatuses.isPresent() && !authStatuses.get().getValuesAsStrings().contains(user.getStatus())) {\n                 throw new DisabledException(\"User \" + user.getUsername() + \" not allowed to authenticate\");\n             }\n \n@@ -255,7 +252,7 @@ protected boolean authenticate(final User user, final String password) {\n             String connObjectKey = null;\n             try {\n                 connObjectKey = mappingManager.getConnObjectKeyValue(\n-                        user, resource.getProvision(anyTypeDAO.findUser()));\n+                        user, resource.getProvision(anyTypeDAO.findUser()).get()).get();\n                 Uid uid = connFactory.getConnector(resource).authenticate(connObjectKey, password, null);\n                 if (uid != null) {\n                     authenticated = true;\n@@ -295,18 +292,13 @@ protected Set<? extends ExternalResource> getPassthroughResources(final User use\n             }\n         }\n \n-        return SetUtils.emptyIfNull(result);\n+        return result == null ? Collections.emptySet() : result;\n     }\n \n     protected Set<SyncopeGrantedAuthority> getAdminAuthorities() {\n-        return CollectionUtils.collect(EntitlementsHolder.getInstance().getValues(),\n-                new Transformer<String, SyncopeGrantedAuthority>() {\n-\n-            @Override\n-            public SyncopeGrantedAuthority transform(final String entitlement) {\n-                return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n-            }\n-        }, new HashSet<SyncopeGrantedAuthority>());\n+        return EntitlementsHolder.getInstance().getValues().stream().\n+                map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n+                collect(Collectors.toSet());\n     }\n \n     protected Set<SyncopeGrantedAuthority> getUserAuthorities(final User user) {\n@@ -319,30 +311,23 @@ protected Set<SyncopeGrantedAuthority> getUserAuthorities(final User user) {\n \n             // Give entitlements as assigned by roles (with static or dynamic realms, where applicable) - assigned\n             // either statically and dynamically\n-            for (Role role : userDAO.findAllRoles(user)) {\n-                for (String entitlement : role.getEntitlements()) {\n+            userDAO.findAllRoles(user).forEach(role -> {\n+                role.getEntitlements().forEach(entitlement -> {\n                     Set<String> realms = entForRealms.get(entitlement);\n                     if (realms == null) {\n                         realms = new HashSet<>();\n                         entForRealms.put(entitlement, realms);\n                     }\n-\n-                    CollectionUtils.collect(role.getRealms(), new Transformer<Realm, String>() {\n-\n-                        @Override\n-                        public String transform(final Realm realm) {\n-                            return realm.getFullPath();\n-                        }\n-                    }, realms);\n-\n+                    realms.addAll(role.getRealms().stream().\n+                            map(realm -> realm.getFullPath()).collect(Collectors.toSet()));\n                     if (!entitlement.endsWith(\"_CREATE\") && !entitlement.endsWith(\"_DELETE\")) {\n-                        CollectionUtils.collect(role.getDynRealms(), EntityUtils.keyTransformer(), realms);\n+                        realms.addAll(role.getDynRealms().stream().map(r -> r.getKey()).collect(Collectors.toList()));\n                     }\n-                }\n-            }\n+                });\n+            });\n \n             // Give group entitlements for owned groups\n-            for (Group group : groupDAO.findOwnedByUser(user.getKey())) {\n+            groupDAO.findOwnedByUser(user.getKey()).forEach((group) -> {\n                 for (String entitlement : GROUP_OWNER_ENTITLEMENTS) {\n                     Set<String> realms = entForRealms.get(entitlement);\n                     if (realms == null) {\n@@ -352,14 +337,14 @@ public String transform(final Realm realm) {\n \n                     realms.add(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey()));\n                 }\n-            }\n+            });\n \n             // Finally normalize realms for each given entitlement and generate authorities\n-            for (Map.Entry<String, Set<String>> entry : entForRealms.entrySet()) {\n+            entForRealms.entrySet().stream().map(entry -> {\n                 SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entry.getKey());\n                 authority.addRealms(RealmUtils.normalize(entry.getValue()));\n-                authorities.add(authority);\n-            }\n+                return authority;\n+            }).forEachOrdered(authority -> authorities.add(authority));\n         }\n \n         return authorities;\n@@ -410,7 +395,7 @@ public Pair<String, Set<SyncopeGrantedAuthority>> authenticate(final JWTAuthenti\n \n             User user = resolved.getLeft();\n             username = user.getUsername();\n-            authorities = SetUtils.emptyIfNull(resolved.getRight());\n+            authorities = resolved.getRight() == null ? Collections.emptySet() : resolved.getRight();\n             LOG.debug(\"JWT {} issued by {} resolved to User {} with authorities {}\",\n                     authentication.getClaims().getTokenId(),\n                     authentication.getClaims().getIssuer(),\n@@ -420,8 +405,8 @@ public Pair<String, Set<SyncopeGrantedAuthority>> authenticate(final JWTAuthenti\n                 throw new DisabledException(\"User \" + username + \" is suspended\");\n             }\n \n-            CPlainAttr authStatuses = confDAO.find(\"authentication.statuses\");\n-            if (authStatuses != null && !authStatuses.getValuesAsStrings().contains(user.getStatus())) {\n+            Optional<? extends CPlainAttr> authStatuses = confDAO.find(\"authentication.statuses\");\n+            if (authStatuses.isPresent() && !authStatuses.get().getValuesAsStrings().contains(user.getStatus())) {\n                 throw new DisabledException(\"User \" + username + \" not allowed to authenticate\");\n             }\n "},{"sha":"c901c0b408edf8dace368d5a4c2fdaec11914403","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/MustChangePasswordFilter.java","status":"modified","additions":3,"deletions":12,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FMustChangePasswordFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FMustChangePasswordFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FMustChangePasswordFilter.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -25,12 +25,9 @@\n import javax.servlet.ServletException;\n import javax.servlet.ServletRequest;\n import javax.servlet.ServletResponse;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.springframework.security.access.AccessDeniedException;\n-import org.springframework.security.core.GrantedAuthority;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper;\n \n@@ -55,15 +52,9 @@ public void doFilter(final ServletRequest request, final ServletResponse respons\n             throws IOException, ServletException {\n \n         if (request instanceof SecurityContextHolderAwareRequestWrapper) {\n-            boolean isMustChangePassword = IterableUtils.matchesAny(\n-                    SecurityContextHolder.getContext().getAuthentication().getAuthorities(),\n-                    new Predicate<GrantedAuthority>() {\n-\n-                @Override\n-                public boolean evaluate(final GrantedAuthority authority) {\n-                    return StandardEntitlement.MUST_CHANGE_PASSWORD.equals(authority.getAuthority());\n-                }\n-            });\n+            boolean isMustChangePassword =\n+                    SecurityContextHolder.getContext().getAuthentication().getAuthorities().stream().anyMatch(\n+                            authority -> StandardEntitlement.MUST_CHANGE_PASSWORD.equals(authority.getAuthority()));\n \n             SecurityContextHolderAwareRequestWrapper wrapper =\n                     SecurityContextHolderAwareRequestWrapper.class.cast(request);"},{"sha":"bca6990e9b2d03c6f884bc75ee82b6e411154a0d","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeGrantedAuthority.java","status":"modified","additions":3,"deletions":12,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeGrantedAuthority.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeGrantedAuthority.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeGrantedAuthority.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,11 +23,8 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashSet;\n import java.util.Set;\n-import org.apache.commons.collections4.Closure;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.SetUtils;\n+import java.util.TreeSet;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n@@ -42,7 +39,7 @@ public class SyncopeGrantedAuthority implements GrantedAuthority {\n     @JsonProperty\n     private final String entitlement;\n \n-    private final Set<String> realms = SetUtils.orderedSet(new HashSet<String>());\n+    private final Set<String> realms = new TreeSet<>();\n \n     @JsonCreator\n     public SyncopeGrantedAuthority(@JsonProperty(\"entitlement\") final String entitlement) {\n@@ -59,13 +56,7 @@ public boolean addRealm(final String newRealm) {\n     }\n \n     public void addRealms(final Collection<String> newRealms) {\n-        IterableUtils.forEach(newRealms, new Closure<String>() {\n-\n-            @Override\n-            public void execute(final String newRealm) {\n-                addRealm(newRealm);\n-            }\n-        });\n+        newRealms.forEach(newRealm -> addRealm(newRealm));\n     }\n \n     public Set<String> getRealms() {"},{"sha":"bf5a18f57c203dafe35cec3c3ca82b6530b4ff44","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":38,"deletions":60,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -31,6 +31,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.annotation.Resource;\n import org.activiti.bpmn.converter.BpmnXMLConverter;\n import org.activiti.bpmn.model.BpmnModel;\n@@ -41,7 +42,6 @@\n import org.activiti.engine.form.FormType;\n import org.activiti.engine.form.TaskFormData;\n import org.activiti.engine.history.HistoricActivityInstance;\n-import org.activiti.engine.history.HistoricDetail;\n import org.activiti.engine.history.HistoricTaskInstance;\n import org.activiti.engine.impl.persistence.entity.HistoricFormPropertyEntity;\n import org.activiti.engine.query.Query;\n@@ -50,8 +50,6 @@\n import org.activiti.engine.repository.ProcessDefinition;\n import org.activiti.engine.runtime.ProcessInstance;\n import org.activiti.engine.task.Task;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n@@ -182,11 +180,9 @@ protected String getFormTask(final User user) {\n     protected Set<String> getPerformedTasks(final User user) {\n         final Set<String> result = new HashSet<>();\n \n-        for (HistoricActivityInstance task : engine.getHistoryService().createHistoricActivityInstanceQuery().\n-                executionId(user.getWorkflowId()).list()) {\n-\n-            result.add(task.getActivityId());\n-        }\n+        engine.getHistoryService().createHistoricActivityInstanceQuery().\n+                executionId(user.getWorkflowId()).list().\n+                forEach(task -> result.add(task.getActivityId()));\n \n         return result;\n     }\n@@ -263,8 +259,7 @@ protected WorkflowResult<Pair<String, Boolean>> doCreate(\n \n         Set<String> tasks = getPerformedTasks(user);\n \n-        return new WorkflowResult<Pair<String, Boolean>>(\n-                new ImmutablePair<>(user.getKey(), propagateEnable), propByRes, tasks);\n+        return new WorkflowResult<>(new ImmutablePair<>(user.getKey(), propagateEnable), propByRes, tasks);\n     }\n \n     protected Set<String> doExecuteTask(final User user, final String task, final Map<String, Object> moreVariables) {\n@@ -333,8 +328,7 @@ protected WorkflowResult<Pair<UserPatch, Boolean>> doUpdate(final User user, fin\n         Boolean propagateEnable = engine.getRuntimeService().getVariable(\n                 user.getWorkflowId(), PROPAGATE_ENABLE, Boolean.class);\n \n-        return new WorkflowResult<Pair<UserPatch, Boolean>>(\n-                new ImmutablePair<>(updatedPatch, propagateEnable), propByRes, tasks);\n+        return new WorkflowResult<>(new ImmutablePair<>(updatedPatch, propagateEnable), propByRes, tasks);\n     }\n \n     @Override\n@@ -403,8 +397,7 @@ protected WorkflowResult<Pair<UserPatch, Boolean>> doConfirmPasswordReset(\n         Boolean propagateEnable = engine.getRuntimeService().getVariable(\n                 user.getWorkflowId(), PROPAGATE_ENABLE, Boolean.class);\n \n-        return new WorkflowResult<Pair<UserPatch, Boolean>>(\n-                new ImmutablePair<>(updatedPatch, propagateEnable), propByRes, tasks);\n+        return new WorkflowResult<>(new ImmutablePair<>(updatedPatch, propagateEnable), propByRes, tasks);\n     }\n \n     @Override\n@@ -483,13 +476,9 @@ protected WorkflowFormTO getFormTO(final Task task, final TaskFormData fd) {\n     protected WorkflowFormTO getFormTO(final HistoricTaskInstance task) {\n         final List<HistoricFormPropertyEntity> props = new ArrayList<>();\n \n-        for (HistoricDetail historicDetail\n-                : engine.getHistoryService().createHistoricDetailQuery().taskId(task.getId()).list()) {\n-\n-            if (historicDetail instanceof HistoricFormPropertyEntity) {\n-                props.add((HistoricFormPropertyEntity) historicDetail);\n-            }\n-        }\n+        engine.getHistoryService().createHistoricDetailQuery().taskId(task.getId()).list().stream().\n+                filter(historicDetail -> (historicDetail instanceof HistoricFormPropertyEntity)).\n+                forEachOrdered(historicDetail -> props.add((HistoricFormPropertyEntity) historicDetail));\n \n         WorkflowFormTO formTO = getHistoricFormTO(\n                 task.getProcessInstanceId(), task.getId(), task.getFormKey(), props);\n@@ -527,13 +516,13 @@ protected WorkflowFormTO getHistoricFormTO(\n         formTO.setUserTO(engine.getRuntimeService().getVariable(processInstanceId, USER_TO, UserTO.class));\n         formTO.setUserPatch(engine.getRuntimeService().getVariable(processInstanceId, USER_PATCH, UserPatch.class));\n \n-        for (HistoricFormPropertyEntity prop : props) {\n+        props.stream().map(prop -> {\n             WorkflowFormPropertyTO propertyTO = new WorkflowFormPropertyTO();\n             propertyTO.setId(prop.getPropertyId());\n             propertyTO.setName(prop.getPropertyId());\n             propertyTO.setValue(prop.getPropertyValue());\n-            formTO.getProperties().add(propertyTO);\n-        }\n+            return propertyTO;\n+        }).forEachOrdered(propertyTO -> formTO.getProperties().add(propertyTO));\n \n         return formTO;\n     }\n@@ -559,20 +548,18 @@ protected WorkflowFormTO getFormTO(\n         formTO.setUserTO(engine.getRuntimeService().getVariable(processInstanceId, USER_TO, UserTO.class));\n         formTO.setUserPatch(engine.getRuntimeService().getVariable(processInstanceId, USER_PATCH, UserPatch.class));\n \n-        for (FormProperty fProp : properties) {\n+        properties.stream().map(fProp -> {\n             WorkflowFormPropertyTO propertyTO = new WorkflowFormPropertyTO();\n             BeanUtils.copyProperties(fProp, propertyTO, PROPERTY_IGNORE_PROPS);\n             propertyTO.setType(fromActivitiFormType(fProp.getType()));\n-\n             if (propertyTO.getType() == WorkflowFormPropertyType.Date) {\n                 propertyTO.setDatePattern((String) fProp.getType().getInformation(\"datePattern\"));\n             }\n             if (propertyTO.getType() == WorkflowFormPropertyType.Enum) {\n                 propertyTO.getEnumValues().putAll((Map<String, String>) fProp.getType().getInformation(\"values\"));\n             }\n-\n-            formTO.getProperties().add(propertyTO);\n-        }\n+            return propertyTO;\n+        }).forEachOrdered(propertyTO -> formTO.getProperties().add(propertyTO));\n \n         return formTO;\n     }\n@@ -597,9 +584,7 @@ public List<WorkflowFormTO> getForms() {\n                     taskCandidateOrAssigned(user.getKey())));\n \n             List<String> candidateGroups = new ArrayList<>();\n-            for (String groupName : userDAO.findAllGroupNames(user)) {\n-                candidateGroups.add(groupName);\n-            }\n+            userDAO.findAllGroupNames(user).forEach(groupName -> candidateGroups.add(groupName));\n             if (!candidateGroups.isEmpty()) {\n                 forms.addAll(getForms(engine.getTaskService().createTaskQuery().\n                         taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE).\n@@ -613,7 +598,7 @@ public List<WorkflowFormTO> getForms() {\n     protected <T extends Query<?, ?>, U extends Object> List<WorkflowFormTO> getForms(final Query<T, U> query) {\n         List<WorkflowFormTO> forms = new ArrayList<>();\n \n-        for (U obj : query.list()) {\n+        query.list().forEach(obj -> {\n             try {\n                 if (obj instanceof HistoricTaskInstance) {\n                     forms.add(getFormTO((HistoricTaskInstance) obj));\n@@ -626,7 +611,7 @@ public List<WorkflowFormTO> getForms() {\n             } catch (ActivitiException e) {\n                 LOG.debug(\"No form found for task {}\", obj, e);\n             }\n-        }\n+        });\n \n         return forms;\n     }\n@@ -711,11 +696,9 @@ public WorkflowFormTO claimForm(final String taskId) {\n \n     private Map<String, String> getPropertiesForSubmit(final WorkflowFormTO form) {\n         Map<String, String> props = new HashMap<>();\n-        for (WorkflowFormPropertyTO prop : form.getProperties()) {\n-            if (prop.isWritable()) {\n-                props.put(prop.getId(), prop.getValue());\n-            }\n-        }\n+        form.getProperties().stream().\n+                filter(prop -> (prop.isWritable())).\n+                forEachOrdered(prop -> props.put(prop.getId(), prop.getValue()));\n \n         return Collections.unmodifiableMap(props);\n     }\n@@ -794,27 +777,22 @@ protected Model getModel(final ProcessDefinition procDef) {\n     @Override\n     public List<WorkflowDefinitionTO> getDefinitions() {\n         try {\n-            return CollectionUtils.collect(\n-                    engine.getRepositoryService().createProcessDefinitionQuery().latestVersion().list(),\n-                    new Transformer<ProcessDefinition, WorkflowDefinitionTO>() {\n-\n-                @Override\n-                public WorkflowDefinitionTO transform(final ProcessDefinition procDef) {\n-                    WorkflowDefinitionTO defTO = new WorkflowDefinitionTO();\n-                    defTO.setKey(procDef.getKey());\n-                    defTO.setName(procDef.getName());\n-\n-                    try {\n-                        defTO.setModelId(getModel(procDef).getId());\n-                    } catch (NotFoundException e) {\n-                        LOG.warn(\"No model found for definition {}, ignoring\", procDef.getDeploymentId(), e);\n-                    }\n-\n-                    defTO.setMain(WF_PROCESS_ID.equals(procDef.getKey()));\n-\n-                    return defTO;\n-                }\n-            }, new ArrayList<WorkflowDefinitionTO>());\n+            return engine.getRepositoryService().createProcessDefinitionQuery().latestVersion().list().stream().\n+                    map(procDef -> {\n+                        WorkflowDefinitionTO defTO = new WorkflowDefinitionTO();\n+                        defTO.setKey(procDef.getKey());\n+                        defTO.setName(procDef.getName());\n+\n+                        try {\n+                            defTO.setModelId(getModel(procDef).getId());\n+                        } catch (NotFoundException e) {\n+                            LOG.warn(\"No model found for definition {}, ignoring\", procDef.getDeploymentId(), e);\n+                        }\n+\n+                        defTO.setMain(WF_PROCESS_ID.equals(procDef.getKey()));\n+\n+                        return defTO;\n+                    }).collect(Collectors.toList());\n         } catch (ActivitiException e) {\n             throw new WorkflowException(\"While listing available process definitions\", e);\n         }"},{"sha":"31eb7bcffa5a8e5d35a4d57aa0876bc035542270","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUtils.java","status":"modified","additions":2,"deletions":10,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUtils.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,22 +18,14 @@\n  */\n package org.apache.syncope.core.workflow.activiti;\n \n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.springframework.transaction.annotation.Transactional;\n \n public class ActivitiUtils {\n \n     @Transactional(readOnly = true)\n     public boolean isUserIngroup(final User user, final String groupName) {\n-        return IterableUtils.matchesAny(user.getMemberships(), new Predicate<UMembership>() {\n-\n-            @Override\n-            public boolean evaluate(final UMembership membership) {\n-                return groupName != null && groupName.equals(membership.getRightEnd().getName());\n-            }\n-        });\n+        return user.getMemberships().stream().\n+                anyMatch(membership -> groupName != null && groupName.equals(membership.getRightEnd().getName()));\n     }\n }"},{"sha":"500ef842881d694d56e93d94da6416d9e948baed","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/SyncopeGroupQueryImpl.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupQueryImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,12 +21,11 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.stream.Collectors;\n import org.activiti.engine.ActivitiException;\n import org.activiti.engine.identity.Group;\n import org.activiti.engine.identity.GroupQuery;\n import org.activiti.engine.impl.persistence.entity.GroupEntity;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n \n@@ -114,14 +113,8 @@ private void execute() {\n         if (result == null) {\n             result = new ArrayList<>();\n             for (int page = 1; page <= (groupDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n-                CollectionUtils.collect(groupDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE),\n-                        new Transformer<org.apache.syncope.core.persistence.api.entity.group.Group, Group>() {\n-\n-                    @Override\n-                    public Group transform(final org.apache.syncope.core.persistence.api.entity.group.Group group) {\n-                        return fromSyncopeGroup(group);\n-                    }\n-                }, result);\n+                result.addAll(groupDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE).stream().\n+                        map(group -> fromSyncopeGroup(group)).collect(Collectors.toList()));\n             }\n         }\n     }"},{"sha":"cb9e541c17af360350afb1ed0dd5d4860bd4439c","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/SyncopeUserQueryImpl.java","status":"modified","additions":8,"deletions":16,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,12 +21,11 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.stream.Collectors;\n import org.activiti.engine.ActivitiException;\n import org.activiti.engine.identity.User;\n import org.activiti.engine.identity.UserQuery;\n import org.activiti.engine.impl.persistence.entity.UserEntity;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -147,26 +146,19 @@ private void execute() {\n             } else {\n                 result = new ArrayList<>();\n                 List<UMembership> memberships = groupDAO.findUMemberships(group);\n-                for (UMembership membership : memberships) {\n-                    User user = fromSyncopeUser(membership.getLeftEnd());\n-                    if (!result.contains(user)) {\n-                        result.add(user);\n-                    }\n-                }\n+                memberships.stream().map(membership -> fromSyncopeUser(membership.getLeftEnd())).\n+                        filter((user) -> (!result.contains(user))).\n+                        forEachOrdered((user) -> {\n+                            result.add(user);\n+                        });\n             }\n         }\n         // THIS CAN BE *VERY* DANGEROUS\n         if (result == null) {\n             result = new ArrayList<>();\n             for (int page = 1; page <= (userDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n-                CollectionUtils.collect(userDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE),\n-                        new Transformer<org.apache.syncope.core.persistence.api.entity.user.User, User>() {\n-\n-                    @Override\n-                    public User transform(final org.apache.syncope.core.persistence.api.entity.user.User user) {\n-                        return fromSyncopeUser(user);\n-                    }\n-                }, result);\n+                result.addAll(userDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE).stream().\n+                        map(user -> fromSyncopeUser(user)).collect(Collectors.toList()));\n             }\n         }\n     }"},{"sha":"c0274315ecd1b6ff2c08a750a32e249c01b7be0e","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapter.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -79,8 +79,7 @@ protected WorkflowResult<Pair<String, Boolean>> doCreate(\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.set(ResourceOperation.CREATE, userDAO.findAllResourceKeys(user.getKey()));\n \n-        return new WorkflowResult<Pair<String, Boolean>>(\n-                new ImmutablePair<>(user.getKey(), propagateEnable), propByRes, \"create\");\n+        return new WorkflowResult<>(new ImmutablePair<>(user.getKey(), propagateEnable), propByRes, \"create\");\n     }\n \n     @Override\n@@ -102,8 +101,7 @@ protected WorkflowResult<Pair<UserPatch, Boolean>> doUpdate(final User user, fin\n \n         userDAO.save(user);\n \n-        return new WorkflowResult<Pair<UserPatch, Boolean>>(\n-                new ImmutablePair<>(userPatch, !user.isSuspended()), propByRes, \"update\");\n+        return new WorkflowResult<>(new ImmutablePair<>(userPatch, !user.isSuspended()), propByRes, \"update\");\n     }\n \n     @Override"},{"sha":"c691a6c416cccc94f517232f7284db8aa0371388","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/CamelRouteLogic.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -27,7 +27,6 @@\n import java.util.List;\n import org.apache.camel.component.metrics.routepolicy.MetricsRegistryService;\n import java.util.Map;\n-import org.apache.commons.collections4.ComparatorUtils;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.CamelMetrics;\n@@ -122,14 +121,9 @@ public CamelMetrics metrics() {\n                 metrics.getResponseMeanRates().add(meanRate);\n             }\n \n-            Collections.sort(metrics.getResponseMeanRates(), new Comparator<CamelMetrics.MeanRate>() {\n-\n-                @Override\n-                public int compare(final CamelMetrics.MeanRate o1, final CamelMetrics.MeanRate o2) {\n-                    return ComparatorUtils.reversedComparator(ComparatorUtils.<Double>naturalComparator()).\n-                            compare(o1.getValue(), o2.getValue());\n-                }\n-            });\n+            Collections.sort(metrics.getResponseMeanRates(),\n+                    (o1, o2) -> Collections.reverseOrder(Comparator.<Double>naturalOrder()).\n+                            compare(o1.getValue(), o2.getValue()));\n         }\n \n         return metrics;"},{"sha":"222f547f9d595ffe48d076084b3a22dfaa16a52a","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/SyncopeCamelContext.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -24,14 +24,13 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.stream.Collectors;\n import javax.xml.bind.JAXBContext;\n import javax.xml.bind.Unmarshaller;\n import org.apache.camel.component.metrics.routepolicy.MetricsRoutePolicyFactory;\n import org.apache.camel.model.Constants;\n import org.apache.camel.model.RouteDefinition;\n import org.apache.camel.spring.SpringCamelContext;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;\n@@ -71,13 +70,7 @@ public SpringCamelContext getContext() {\n         if (camelContext.getRouteDefinitions().isEmpty()) {\n             List<CamelRoute> routes = routeDAO.findAll();\n             LOG.debug(\"{} route(s) are going to be loaded \", routes.size());\n-            loadContext(CollectionUtils.collect(routes, new Transformer<CamelRoute, String>() {\n-\n-                @Override\n-                public String transform(final CamelRoute input) {\n-                    return input.getContent();\n-                }\n-            }));\n+            loadContext(routes.stream().map(input -> input.getContent()).collect(Collectors.toList()));\n             try {\n                 camelContext.start();\n             } catch (Exception e) {"},{"sha":"6782330cad68cab728d6e6813e8a1d18a3239125","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n \n import org.apache.camel.Endpoint;\n@@ -72,9 +73,9 @@ public void process(final Exchange exchange) throws Exception {\n \n                 if (actual instanceof GroupTO && isPull()) {\n                     Map<String, String> groupOwnerMap = exchange.getProperty(\"groupOwnerMap\", Map.class);\n-                    AttrTO groupOwner = ((GroupTO) actual).getPlainAttr(StringUtils.EMPTY);\n-                    if (groupOwner != null) {\n-                        groupOwnerMap.put(created.getResult(), groupOwner.getValues().iterator().next());\n+                    Optional<AttrTO> groupOwner = ((GroupTO) actual).getPlainAttr(StringUtils.EMPTY);\n+                    if (groupOwner.isPresent()) {\n+                        groupOwnerMap.put(created.getResult(), groupOwner.get().getValues().iterator().next());\n                     }\n \n                     List<PropagationTask> tasks = getPropagationManager().getCreateTasks("},{"sha":"50f2713d2352190e2add98b63af5b4f815f38855","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeprovisionProducer.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,10 +19,10 @@\n package org.apache.syncope.core.provisioning.camel.producer;\n \n import java.util.List;\n+import java.util.stream.Collectors;\n \n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n-import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n@@ -71,7 +71,8 @@ public void process(final Exchange exchange) throws Exception {\n                             AnyTypeKind.USER,\n                             key,\n                             propByRes,\n-                            CollectionUtils.removeAll(userDAO.findAllResourceKeys(key), resources));\n+                            userDAO.findAllResourceKeys(key).stream().\n+                                    filter(resource -> !resources.contains(resource)).collect(Collectors.toList()));\n                     propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n                     exchange.getOut().setBody(propagationReporter.getStatuses());\n                     break;\n@@ -82,7 +83,8 @@ public void process(final Exchange exchange) throws Exception {\n                             AnyTypeKind.GROUP,\n                             key,\n                             propByRes,\n-                            CollectionUtils.removeAll(groupDAO.findAllResourceKeys(key), resources));\n+                            groupDAO.findAllResourceKeys(key).stream().\n+                                    filter(resource -> !resources.contains(resource)).collect(Collectors.toList()));\n                     propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n                     exchange.getOut().setBody(propagationReporter.getStatuses());\n                     break;\n@@ -93,7 +95,8 @@ public void process(final Exchange exchange) throws Exception {\n                             AnyTypeKind.ANY_OBJECT,\n                             key,\n                             propByRes,\n-                            CollectionUtils.removeAll(anyObjectDAO.findAllResourceKeys(key), resources));\n+                            anyObjectDAO.findAllResourceKeys(key).stream().\n+                                    filter(resource -> !resources.contains(resource)).collect(Collectors.toList()));\n                     propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n                     exchange.getOut().setBody(propagationReporter.getStatuses());\n                     break;"},{"sha":"2377d4bd6cc26aea3abc217bf68940c1a295e718","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ProvisionProducer.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,11 +19,10 @@\n package org.apache.syncope.core.provisioning.camel.producer;\n \n import java.util.List;\n+import java.util.stream.Collectors;\n \n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n@@ -56,14 +55,9 @@ public void process(final Exchange exchange) throws Exception {\n \n             UserPatch userPatch = new UserPatch();\n             userPatch.setKey(key);\n-            userPatch.getResources().addAll(CollectionUtils.collect(resources,\n-                    new Transformer<String, StringPatchItem>() {\n-\n-                @Override\n-                public StringPatchItem transform(final String resource) {\n-                    return new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build();\n-                }\n-            }));\n+            userPatch.getResources().addAll(resources.stream().map(resource\n+                    -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n+                    collect(Collectors.toList()));\n \n             if (changePwd) {\n                 userPatch.setPassword(\n@@ -73,7 +67,7 @@ public StringPatchItem transform(final String resource) {\n             PropagationByResource propByRes = new PropagationByResource();\n             propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n-            WorkflowResult<Pair<UserPatch, Boolean>> wfResult = new WorkflowResult<Pair<UserPatch, Boolean>>(\n+            WorkflowResult<Pair<UserPatch, Boolean>> wfResult = new WorkflowResult<>(\n                     ImmutablePair.of(userPatch, (Boolean) null), propByRes, \"update\");\n \n             List<PropagationTask> tasks = getPropagationManager().getUserUpdateTasks(wfResult, changePwd, null);"},{"sha":"3612c5d619a8af8e0404536f96c1a6eacaa741a7","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java","status":"modified","additions":22,"deletions":42,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -23,23 +23,15 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.Role;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n-import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n import org.elasticsearch.common.xcontent.XContentFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -115,15 +107,18 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n             AnyObject anyObject = ((AnyObject) any);\n             builder = builder.field(\"name\", anyObject.getName());\n \n-            List<Object> memberships = new ArrayList<Object>(anyObjectDAO.findAllGroupKeys(anyObject));\n+            List<Object> memberships = new ArrayList<>(anyObjectDAO.findAllGroupKeys(anyObject));\n             builder = builder.field(\"memberships\", memberships);\n \n             List<Object> relationships = new ArrayList<>();\n             List<Object> relationshipTypes = new ArrayList<>();\n-            for (ARelationship relationship : anyObjectDAO.findAllRelationships(anyObject)) {\n-                relationships.add(relationship.getRightEnd().getKey());\n+            anyObjectDAO.findAllRelationships(anyObject).stream().\n+                    map(relationship -> {\n+                        relationships.add(relationship.getRightEnd().getKey());\n+                        return relationship;\n+                    }).forEachOrdered(relationship -> {\n                 relationshipTypes.add(relationship.getType().getKey());\n-            }\n+            });\n             builder = builder.field(\"relationships\", relationships);\n             builder = builder.field(\"relationshipTypes\", relationshipTypes);\n         } else if (any instanceof Group) {\n@@ -136,23 +131,11 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n                 builder = builder.field(\"groupOwner\", group.getGroupOwner().getKey());\n             }\n \n-            List<Object> members = CollectionUtils.collect(groupDAO.findUMemberships(group),\n-                    new Transformer<UMembership, Object>() {\n-\n-                @Override\n-                public Object transform(final UMembership input) {\n-                    return input.getLeftEnd().getKey();\n-                }\n-            }, new ArrayList<>());\n+            List<Object> members = groupDAO.findUMemberships(group).stream().\n+                    map(membership -> membership.getLeftEnd().getKey()).collect(Collectors.toList());\n             members.add(groupDAO.findUDynMembers(group));\n-            CollectionUtils.collect(groupDAO.findAMemberships(group),\n-                    new Transformer<AMembership, Object>() {\n-\n-                @Override\n-                public Object transform(final AMembership input) {\n-                    return input.getLeftEnd().getKey();\n-                }\n-            }, members);\n+            members.addAll(groupDAO.findAMemberships(group).stream().\n+                    map(membership -> membership.getLeftEnd().getKey()).collect(Collectors.toList()));\n             members.add(groupDAO.findADynMembers(group));\n             builder = builder.field(\"members\", members);\n         } else if (any instanceof User) {\n@@ -163,33 +146,30 @@ public Object transform(final AMembership input) {\n                     field(\"lastRecertification\", user.getLastRecertification()).\n                     field(\"lastRecertificator\", user.getLastRecertificator());\n \n-            List<Object> roles = CollectionUtils.collect(userDAO.findAllRoles(user),\n-                    EntityUtils.<Role>keyTransformer(), new ArrayList<>());\n+            List<Object> roles = userDAO.findAllRoles(user).stream().\n+                    map(r -> r.getKey()).collect(Collectors.toList());\n             builder = builder.field(\"roles\", roles);\n \n-            List<Object> memberships = new ArrayList<Object>(userDAO.findAllGroupKeys(user));\n+            List<Object> memberships = new ArrayList<>(userDAO.findAllGroupKeys(user));\n             builder = builder.field(\"memberships\", memberships);\n \n             List<Object> relationships = new ArrayList<>();\n             Set<Object> relationshipTypes = new HashSet<>();\n-            for (URelationship relationship : user.getRelationships()) {\n+            user.getRelationships().stream().map(relationship -> {\n                 relationships.add(relationship.getRightEnd().getKey());\n+                return relationship;\n+            }).forEachOrdered(relationship -> {\n                 relationshipTypes.add(relationship.getType().getKey());\n-            }\n+            });\n             builder = builder.field(\"relationships\", relationships);\n             builder = builder.field(\"relationshipTypes\", relationshipTypes);\n         }\n \n         if (any.getPlainAttrs() != null) {\n             for (PlainAttr<?> plainAttr : any.getPlainAttrs()) {\n-                List<Object> values = CollectionUtils.collect(plainAttr.getValues(),\n-                        new Transformer<PlainAttrValue, Object>() {\n-\n-                    @Override\n-                    public Object transform(final PlainAttrValue input) {\n-                        return input.getValue();\n-                    }\n-                }, new ArrayList<>(plainAttr.getValues().size()));\n+                List<Object> values = plainAttr.getValues().stream().\n+                        map(value -> value.getValue()).collect(Collectors.toList());\n+\n                 if (plainAttr.getUniqueValue() != null) {\n                     values.add(plainAttr.getUniqueValue().getValue());\n                 }"},{"sha":"b8a2d586a89427ced1ea8c1530c752881ba91e71","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":14,"deletions":24,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,13 +19,11 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.lang.reflect.Field;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -62,7 +60,6 @@\n import org.elasticsearch.index.query.MatchNoneQueryBuilder;\n import org.elasticsearch.index.query.QueryBuilder;\n import org.elasticsearch.index.query.QueryBuilders;\n-import org.elasticsearch.search.SearchHit;\n import org.elasticsearch.search.sort.SortOrder;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.util.ReflectionUtils;\n@@ -84,17 +81,17 @@ private Pair<DisMaxQueryBuilder, Set<String>> adminRealmsFilter(final Set<String\n         DisMaxQueryBuilder builder = QueryBuilders.disMaxQuery();\n \n         Set<String> dynRealmKeys = new HashSet<>();\n-        for (String realmPath : RealmUtils.normalize(adminRealms)) {\n+        RealmUtils.normalize(adminRealms).forEach(realmPath -> {\n             if (realmPath.startsWith(\"/\")) {\n                 Realm realm = realmDAO.findByFullPath(realmPath);\n                 if (realm == null) {\n                     SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n                     noRealm.getElements().add(\"Invalid realm specified: \" + realmPath);\n                     throw noRealm;\n                 } else {\n-                    for (Realm descendant : realmDAO.findDescendants(realm)) {\n+                    realmDAO.findDescendants(realm).forEach(descendant -> {\n                         builder.add(QueryBuilders.termQuery(\"realm\", descendant.getFullPath()));\n-                    }\n+                    });\n                 }\n             } else {\n                 DynRealm dynRealm = dynRealmDAO.find(realmPath);\n@@ -105,11 +102,11 @@ private Pair<DisMaxQueryBuilder, Set<String>> adminRealmsFilter(final Set<String\n                     builder.add(QueryBuilders.termQuery(\"dynRealm\", dynRealm.getKey()));\n                 }\n             }\n-        }\n+        });\n         if (!dynRealmKeys.isEmpty()) {\n-            for (Realm descendant : realmDAO.findAll()) {\n+            realmDAO.findAll().forEach(descendant -> {\n                 builder.add(QueryBuilders.termQuery(\"realm\", descendant.getFullPath()));\n-            }\n+            });\n         }\n \n         return Pair.of(builder, dynRealmKeys);\n@@ -147,7 +144,7 @@ private void addSort(\n \n         AnyUtils attrUtils = anyUtilsFactory.getInstance(kind);\n \n-        for (OrderByClause clause : orderBy) {\n+        orderBy.forEach(clause -> {\n             String sortName = null;\n \n             // Manage difference among external key attribute and internal JPA @Id\n@@ -168,7 +165,7 @@ private void addSort(\n             } else {\n                 builder.addSort(sortName, SortOrder.valueOf(clause.getDirection().name()));\n             }\n-        }\n+        });\n     }\n \n     @Override\n@@ -185,15 +182,8 @@ protected <T extends Any<?>> List<T> doSearch(\n                 setSize(itemsPerPage < 0 ? elasticsearchUtils.getIndexMaxResultWindow() : itemsPerPage);\n         addSort(builder, kind, orderBy);\n \n-        return buildResult(\n-                CollectionUtils.collect(Arrays.asList(builder.get().getHits().getHits()),\n-                        new Transformer<SearchHit, Object>() {\n-\n-                    @Override\n-                    public Object transform(final SearchHit input) {\n-                        return input.getId();\n-                    }\n-                }, new ArrayList<>()),\n+        return buildResult(Stream.of(builder.get().getHits().getHits()).\n+                map(hit -> hit.getId()).collect(Collectors.toList()),\n                 kind);\n     }\n \n@@ -304,9 +294,9 @@ private QueryBuilder getQueryBuilder(final AssignableCond cond) {\n             }\n             builder.add(QueryBuilders.termQuery(\"realm\", realmDAO.getRoot().getFullPath()));\n         } else {\n-            for (Realm current : realmDAO.findDescendants(realm)) {\n+            realmDAO.findDescendants(realm).forEach(current -> {\n                 builder.add(QueryBuilders.termQuery(\"realm\", current.getFullPath()));\n-            }\n+            });\n         }\n \n         return builder;"},{"sha":"7b8b2419b6ff81bca11a36deca4da07168d18882","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPTO.java","status":"modified","additions":1,"deletions":9,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -28,8 +28,6 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n \n@@ -148,13 +146,7 @@ public void setUserTemplate(final UserTO userTemplate) {\n \n     @Override\n     public ItemTO getConnObjectKeyItem() {\n-        return IterableUtils.find(getItems(), new Predicate<ItemTO>() {\n-\n-            @Override\n-            public boolean evaluate(final ItemTO item) {\n-                return item.isConnObjectKey();\n-            }\n-        });\n+        return getItems().stream().filter(item -> item.isConnObjectKey()).findFirst().get();\n     }\n \n     protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {"},{"sha":"9eaca74693833d5b3c09de71e2a95620268b91a2","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2LoginResponseTO.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2LoginResponseTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2LoginResponseTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2LoginResponseTO.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -22,13 +22,12 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.Date;\n import java.util.HashSet;\n+import java.util.Optional;\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n @XmlRootElement(name = \"saml2LoginResponse\")\n@@ -128,14 +127,8 @@ public void setUsername(final String username) {\n     }\n \n     @JsonIgnore\n-    public AttrTO getAttr(final String schema) {\n-        return IterableUtils.find(attrs, new Predicate<AttrTO>() {\n-\n-            @Override\n-            public boolean evaluate(final AttrTO object) {\n-                return object.getSchema().equals(schema);\n-            }\n-        });\n+    public Optional<AttrTO> getAttr(final String schema) {\n+        return attrs.stream().filter(attr -> attr.getSchema().equals(schema)).findFirst();\n     }\n \n     @XmlElementWrapper(name = \"attrs\")"},{"sha":"170aff926dd264a62f91bc278170cdd6eeefb6a6","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPLogic.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -27,8 +27,7 @@\n import java.util.Base64;\n import java.util.List;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ItemTO;\n@@ -100,13 +99,7 @@ private SAML2IdPTO complete(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n     public List<SAML2IdPTO> list() {\n-        return CollectionUtils.collect(idpDAO.findAll(), new Transformer<SAML2IdP, SAML2IdPTO>() {\n-\n-            @Override\n-            public SAML2IdPTO transform(final SAML2IdP input) {\n-                return complete(input, binder.getIdPTO(input));\n-            }\n-        }, new ArrayList<SAML2IdPTO>());\n+        return idpDAO.findAll().stream().map(idp -> complete(idp, binder.getIdPTO(idp))).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + SAML2SPEntitlement.IDP_READ + \"')\")"},{"sha":"80a3ce684bc6dc084e5c4f27e3224c2db3ec6b12","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":4,"deletions":16,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -472,14 +472,8 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n             if (idp.isCreateUnmatching()) {\n                 LOG.debug(\"No user matching NameID {}, about to create\", nameID.getValue());\n \n-                username = AuthContextUtils.execWithAuthContext(\n-                        AuthContextUtils.getDomain(), new AuthContextUtils.Executable<String>() {\n-\n-                    @Override\n-                    public String exec() {\n-                        return userManager.create(idp, responseTO, nameIDValue);\n-                    }\n-                });\n+                username = AuthContextUtils.execWithAuthContext(AuthContextUtils.getDomain(), ()\n+                        -> userManager.create(idp, responseTO, nameIDValue));\n             } else {\n                 throw new NotFoundException(\"User matching the provided NameID value \" + nameID.getValue());\n             }\n@@ -489,14 +483,8 @@ public String exec() {\n             if (idp.isUpdateMatching()) {\n                 LOG.debug(\"About to update {} for NameID {}\", matchingUsers.get(0), nameID.getValue());\n \n-                username = AuthContextUtils.execWithAuthContext(\n-                        AuthContextUtils.getDomain(), new AuthContextUtils.Executable<String>() {\n-\n-                    @Override\n-                    public String exec() {\n-                        return userManager.update(matchingUsers.get(0), idp, responseTO);\n-                    }\n-                });\n+                username = AuthContextUtils.execWithAuthContext(AuthContextUtils.getDomain(), ()\n+                        -> userManager.update(matchingUsers.get(0), idp, responseTO));\n             } else {\n                 username = matchingUsers.get(0);\n             }"},{"sha":"e0001b1e7438aa8ff54a96c9da253055f5858e80","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2UserManager.java","status":"modified","additions":19,"deletions":32,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,8 +21,8 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.AnyOperations;\n@@ -137,27 +137,13 @@ public List<String> findMatchingUser(final String keyValue, final ItemTO connObj\n                         }\n                     }\n \n-                    CollectionUtils.collect(\n-                            userDAO.findByPlainAttrValue(intAttrName.getSchemaName(), value),\n-                            new Transformer<User, String>() {\n-\n-                        @Override\n-                        public String transform(final User input) {\n-                            return input.getUsername();\n-                        }\n-                    }, result);\n+                    result.addAll(userDAO.findByPlainAttrValue(intAttrName.getSchemaName(), value).stream().\n+                            map(user -> user.getUsername()).collect(Collectors.toList()));\n                     break;\n \n                 case DERIVED:\n-                    CollectionUtils.collect(\n-                            userDAO.findByDerAttrValue(intAttrName.getSchemaName(), transformed),\n-                            new Transformer<User, String>() {\n-\n-                        @Override\n-                        public String transform(final User input) {\n-                            return input.getUsername();\n-                        }\n-                    }, result);\n+                    result.addAll(userDAO.findByDerAttrValue(intAttrName.getSchemaName(), transformed).stream().\n+                            map(user -> user.getUsername()).collect(Collectors.toList()));\n                     break;\n \n                 default:\n@@ -170,7 +156,7 @@ public String transform(final User input) {\n     private List<SAML2IdPActions> getActions(final SAML2IdPEntity idp) {\n         List<SAML2IdPActions> actions = new ArrayList<>();\n \n-        for (String className : idp.getActionsClassNames()) {\n+        idp.getActionsClassNames().forEach((className) -> {\n             try {\n                 Class<?> actionsClass = Class.forName(className);\n                 SAML2IdPActions idpActions = (SAML2IdPActions) ApplicationContextProvider.getBeanFactory().\n@@ -180,7 +166,7 @@ private List<SAML2IdPActions> getActions(final SAML2IdPEntity idp) {\n             } catch (Exception e) {\n                 LOG.warn(\"Class '{}' not found\", className, e);\n             }\n-        }\n+        });\n \n         return actions;\n     }\n@@ -190,11 +176,11 @@ private void fill(final SAML2IdPEntity idp, final SAML2LoginResponseTO responseT\n             IntAttrName intAttrName = intAttrNameParser.parse(item.getIntAttrName(), AnyTypeKind.USER);\n \n             List<String> values = Collections.emptyList();\n-            AttrTO samlAttr = responseTO.getAttr(item.getExtAttrName());\n-            if (samlAttr != null && !samlAttr.getValues().isEmpty()) {\n-                values = samlAttr.getValues();\n+            Optional<AttrTO> samlAttr = responseTO.getAttr(item.getExtAttrName());\n+            if (samlAttr.isPresent() && !samlAttr.get().getValues().isEmpty()) {\n+                values = samlAttr.get().getValues();\n \n-                List<Object> transformed = new ArrayList<Object>(values);\n+                List<Object> transformed = new ArrayList<>(values);\n                 for (ItemTransformer transformer : MappingUtils.getItemTransformers(item)) {\n                     transformed = transformer.beforePull(null, userTO, transformed);\n                 }\n@@ -218,13 +204,14 @@ private void fill(final SAML2IdPEntity idp, final SAML2LoginResponseTO responseT\n             } else if (intAttrName.getSchemaType() != null) {\n                 switch (intAttrName.getSchemaType()) {\n                     case PLAIN:\n-                        AttrTO attr = userTO.getPlainAttr(intAttrName.getSchemaName());\n-                        if (attr == null) {\n-                            attr = new AttrTO.Builder().schema(intAttrName.getSchemaName()).build();\n-                            userTO.getPlainAttrs().add(attr);\n+                        Optional<AttrTO> attr = userTO.getPlainAttr(intAttrName.getSchemaName());\n+                        if (!attr.isPresent()) {\n+                            attr = Optional.of(new AttrTO.Builder().schema(intAttrName.getSchemaName()).build());\n+                            userTO.getPlainAttrs().add(attr.get());\n+                        } else {\n+                            attr.get().getValues().clear();\n                         }\n-                        attr.getValues().clear();\n-                        attr.getValues().addAll(values);\n+                        attr.get().getValues().addAll(values);\n                         break;\n \n                     default:"},{"sha":"1aa1116cac86c4df5759d130b8e9d074de12cc86","filename":"ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2IdP.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.entity;\n \n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n \n@@ -56,7 +57,7 @@ public interface SAML2IdP extends Entity {\n \n     void setUserTemplate(SAML2UserTemplate userTemplate);\n \n-    SAML2IdPItem getConnObjectKeyItem();\n+    Optional<? extends SAML2IdPItem> getConnObjectKeyItem();\n \n     void setConnObjectKeyItem(SAML2IdPItem item);\n "},{"sha":"8b3943f2a55a9a8436fb92ffe12efc90a2b8af41","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdP.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n@@ -37,8 +38,6 @@\n import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n@@ -190,14 +189,8 @@ public List<? extends SAML2IdPItem> getItems() {\n     }\n \n     @Override\n-    public SAML2IdPItem getConnObjectKeyItem() {\n-        return IterableUtils.find(getItems(), new Predicate<SAML2IdPItem>() {\n-\n-            @Override\n-            public boolean evaluate(final SAML2IdPItem item) {\n-                return item.isConnObjectKey();\n-            }\n-        });\n+    public Optional<? extends SAML2IdPItem> getConnObjectKeyItem() {\n+        return getItems().stream().filter(item -> item.isConnObjectKey()).findFirst();\n     }\n \n     @Override"},{"sha":"f3b91e9123563f5488a792e2377cfd7be3aad6f9","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SAML2IdPValidator.java","status":"modified","additions":2,"deletions":16,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.validation.entity;\n \n import javax.validation.ConstraintValidatorContext;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n@@ -30,13 +28,7 @@ public class SAML2IdPValidator extends AbstractValidator<SAML2IdPCheck, SAML2IdP\n \n     @Override\n     public boolean isValid(final SAML2IdP value, final ConstraintValidatorContext context) {\n-        long connObjectKeys = IterableUtils.countMatches(value.getItems(), new Predicate<SAML2IdPItem>() {\n-\n-            @Override\n-            public boolean evaluate(final SAML2IdPItem item) {\n-                return item.isConnObjectKey();\n-            }\n-        });\n+        long connObjectKeys = value.getItems().stream().filter(item -> item.isConnObjectKey()).count();\n         if (!value.getItems().isEmpty() && connObjectKeys != 1) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidMapping, \"Single ConnObjectKey mapping is required\")).\n@@ -46,13 +38,7 @@ public boolean evaluate(final SAML2IdPItem item) {\n \n         boolean isValid = true;\n \n-        long passwords = IterableUtils.countMatches(value.getItems(), new Predicate<SAML2IdPItem>() {\n-\n-            @Override\n-            public boolean evaluate(final SAML2IdPItem item) {\n-                return item.isPassword();\n-            }\n-        });\n+        long passwords = value.getItems().stream().filter(item -> item.isPassword()).count();\n         if (passwords > 0) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidMapping, \"No password mapping is allowed\"))."},{"sha":"bf7d4096b0fd1035f24858f1dae61ab366d377c0","filename":"ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java","status":"modified","additions":7,"deletions":14,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import org.apache.commons.collections4.CollectionUtils;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n@@ -32,16 +32,12 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.SAML2EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n import org.apache.syncope.core.persistence.api.entity.SAML2UserTemplate;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.data.SAML2IdPDataBinder;\n-import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n import org.apache.syncope.core.spring.BeanUtils;\n@@ -191,15 +187,12 @@ public SAML2IdP update(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n         idp.getItems().clear();\n         AnyTypeClassTO allowedSchemas = new AnyTypeClassTO();\n         for (AnyTypeClass anyTypeClass : anyTypeDAO.findUser().getClasses()) {\n-            allowedSchemas.getPlainSchemas().addAll(\n-                    CollectionUtils.collect(anyTypeClass.getPlainSchemas(),\n-                            EntityUtils.<PlainSchema>keyTransformer()));\n-            allowedSchemas.getDerSchemas().addAll(\n-                    CollectionUtils.collect(anyTypeClass.getDerSchemas(),\n-                            EntityUtils.<DerSchema>keyTransformer()));\n-            allowedSchemas.getVirSchemas().addAll(\n-                    CollectionUtils.collect(anyTypeClass.getVirSchemas(),\n-                            EntityUtils.<VirSchema>keyTransformer()));\n+            allowedSchemas.getPlainSchemas().addAll(anyTypeClass.getPlainSchemas().stream().\n+                    map(s -> s.getKey()).collect(Collectors.toList()));\n+            allowedSchemas.getDerSchemas().addAll(anyTypeClass.getDerSchemas().stream().\n+                    map(s -> s.getKey()).collect(Collectors.toList()));\n+            allowedSchemas.getVirSchemas().addAll(anyTypeClass.getVirSchemas().stream().\n+                    map(s -> s.getKey()).collect(Collectors.toList()));\n         }\n         populateItems(idpTO, idp, allowedSchemas);\n "},{"sha":"a32a1be928836a6b700c9c8d39594f44a4d16604","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPullActions.java","status":"modified","additions":8,"deletions":14,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import org.apache.commons.collections4.IterableUtils;\n+import java.util.Optional;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -47,20 +47,14 @@ public SyncDelta beforeProvision(\n         if (entity instanceof AnyTO) {\n             AnyTO any = (AnyTO) entity;\n \n-            AttrTO attrTO = null;\n-            for (int i = 0; i < any.getPlainAttrs().size(); i++) {\n-                AttrTO plainAttr = IterableUtils.get(any.getPlainAttrs(), i);\n-                if (\"fullname\".equals(plainAttr.getSchema())) {\n-                    attrTO = plainAttr;\n-                }\n+            Optional<AttrTO> attrTO = any.getPlainAttr(\"fullname\");\n+            if (!attrTO.isPresent()) {\n+                attrTO = Optional.of(new AttrTO());\n+                attrTO.get().setSchema(\"fullname\");\n+                any.getPlainAttrs().add(attrTO.get());\n             }\n-            if (attrTO == null) {\n-                attrTO = new AttrTO();\n-                attrTO.setSchema(\"fullname\");\n-                any.getPlainAttrs().add(attrTO);\n-            }\n-            attrTO.getValues().clear();\n-            attrTO.getValues().add(String.valueOf(counter++));\n+            attrTO.get().getValues().clear();\n+            attrTO.get().getValues().add(String.valueOf(counter++));\n         }\n \n         return delta;"},{"sha":"f29786d9fe16fa2cb93f91dded778b09a1a59e6c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -24,6 +24,7 @@\n \n import java.io.InputStream;\n import java.net.URI;\n+import java.util.Arrays;\n import java.util.Locale;\n import java.util.Properties;\n import java.util.UUID;\n@@ -37,7 +38,6 @@\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -388,7 +388,7 @@ protected Pair<String, String> createNotificationTask(\n         notification.setSelfAsRecipient(true);\n         notification.setRecipientAttrName(\"email\");\n         if (staticRecipients != null) {\n-            CollectionUtils.addAll(notification.getStaticRecipients(), staticRecipients);\n+            notification.getStaticRecipients().addAll(Arrays.asList(staticRecipients));\n         }\n \n         notification.setSender(sender);\n@@ -517,13 +517,13 @@ protected InitialDirContext getLdapResourceDirContext(final String bindDn, final\n \n         Properties env = new Properties();\n         env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n-        env.put(Context.PROVIDER_URL, \"ldap://\" + ldapConn.getConf(\"host\").getValues().get(0)\n-                + \":\" + ldapConn.getConf(\"port\").getValues().get(0) + \"/\");\n+        env.put(Context.PROVIDER_URL, \"ldap://\" + ldapConn.getConf(\"host\").get().getValues().get(0)\n+                + \":\" + ldapConn.getConf(\"port\").get().getValues().get(0) + \"/\");\n         env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n         env.put(Context.SECURITY_PRINCIPAL,\n-                bindDn == null ? ldapConn.getConf(\"principal\").getValues().get(0) : bindDn);\n+                bindDn == null ? ldapConn.getConf(\"principal\").get().getValues().get(0) : bindDn);\n         env.put(Context.SECURITY_CREDENTIALS,\n-                bindPwd == null ? ldapConn.getConf(\"credentials\").getValues().get(0) : bindPwd);\n+                bindPwd == null ? ldapConn.getConf(\"credentials\").get().getValues().get(0) : bindPwd);\n \n         return new InitialDirContext(env);\n     }"},{"sha":"c902481817478232c1591d400c34edce635b287d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/cli/CLIITCase.java","status":"modified","additions":8,"deletions":31,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -27,11 +27,9 @@\n import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Properties;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.SystemUtils;\n import org.apache.syncope.client.cli.Command;\n@@ -96,7 +94,7 @@ private static String[] getCommand(final String... arguments) {\n             command.add(SCRIPT_FILENAME + \".sh\");\n         }\n \n-        CollectionUtils.addAll(command, arguments);\n+        command.addAll(Arrays.asList(arguments));\n \n         return command.toArray(new String[command.size()]);\n     }\n@@ -137,15 +135,8 @@ public void entitlementCount() {\n                     EntitlementCommand.EntitlementOptions.LIST.getOptionName()));\n             process = PROCESS_BUILDER.start();\n \n-            long entitlements = IterableUtils.countMatches(\n-                    IOUtils.readLines(process.getInputStream(), StandardCharsets.UTF_8),\n-                    new Predicate<String>() {\n-\n-                @Override\n-                public boolean evaluate(final String line) {\n-                    return line.startsWith(\"-\");\n-                }\n-            });\n+            long entitlements = IOUtils.readLines(process.getInputStream(), StandardCharsets.UTF_8).\n+                    stream().filter(line -> line.startsWith(\"-\")).count();\n             assertEquals(syncopeService.platform().getEntitlements().size(), entitlements);\n         } catch (IOException e) {\n             fail(e.getMessage());\n@@ -165,15 +156,8 @@ public void connectorCount() {\n                     ConnectorCommand.ConnectorOptions.LIST_BUNDLES.getOptionName()));\n             process = PROCESS_BUILDER.start();\n \n-            long bundles = IterableUtils.countMatches(\n-                    IOUtils.readLines(process.getInputStream(), StandardCharsets.UTF_8),\n-                    new Predicate<String>() {\n-\n-                @Override\n-                public boolean evaluate(final String line) {\n-                    return line.startsWith(\" > BUNDLE NAME:\");\n-                }\n-            });\n+            long bundles = IOUtils.readLines(process.getInputStream(), StandardCharsets.UTF_8).\n+                    stream().filter(line -> line.startsWith(\" > BUNDLE NAME:\")).count();\n             assertEquals(connectorService.getBundles(null).size(), bundles);\n         } catch (IOException e) {\n             fail(e.getMessage());\n@@ -209,15 +193,8 @@ public void userRead() {\n                     String.valueOf(userKey1), String.valueOf(userKey2),\n                     String.valueOf(userKey3), String.valueOf(userKey4), String.valueOf(userKey5)));\n             process2 = PROCESS_BUILDER.start();\n-            long users = IterableUtils.countMatches(\n-                    IOUtils.readLines(process2.getInputStream(), StandardCharsets.UTF_8),\n-                    new Predicate<String>() {\n-\n-                @Override\n-                public boolean evaluate(final String line) {\n-                    return line.startsWith(\" > USER KEY:\");\n-                }\n-            });\n+            long users = IOUtils.readLines(process2.getInputStream(), StandardCharsets.UTF_8).\n+                    stream().filter(line -> line.startsWith(\" > USER KEY:\")).count();\n             assertEquals(5, users);\n \n             PROCESS_BUILDER.command(getCommand("},{"sha":"31e7f1b0af57ef6d192528530f1eb09dc2f649f1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AnyObjectITCase.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1","patch":"@@ -69,8 +69,8 @@ public void create() {\n         assertNotNull(connObjectTO);\n         assertNotNull(connObjectTO.getAttr(\"LOCATION\"));\n         assertEquals(\n-                anyObjectTO.getPlainAttr(\"location\").getValues(),\n-                connObjectTO.getAttr(\"LOCATION\").getValues());\n+                anyObjectTO.getPlainAttr(\"location\").get().getValues(),\n+                connObjectTO.getAttr(\"LOCATION\").get().getValues());\n     }\n \n     @Test\n@@ -127,9 +127,7 @@ public void list() {\n                         build());\n         assertNotNull(anyObjectTOs);\n         assertTrue(anyObjectTOs.getResult().size() >= 2);\n-        for (AnyObjectTO anyObjectTO : anyObjectTOs.getResult()) {\n-            assertNotNull(anyObjectTO);\n-        }\n+        anyObjectTOs.getResult().forEach(anyObjectTO -> assertNotNull(anyObjectTO));\n     }\n \n     @Test\n@@ -154,7 +152,7 @@ public void update() {\n \n         anyObjectTO = updateAnyObject(anyObjectPatch).getEntity();\n \n-        assertEquals(newLocation, anyObjectTO.getPlainAttr(\"location\").getValues().get(0));\n+        assertEquals(newLocation, anyObjectTO.getPlainAttr(\"location\").get().getValues().get(0));\n     }\n \n     @Test\n@@ -167,7 +165,7 @@ public void readAttrs() {\n         assertEquals(anyObjectTO.getPlainAttrs(), attrs);\n \n         AttrTO location = anyObjectService.read(anyObjectTO.getKey(), SchemaType.PLAIN, \"location\");\n-        assertEquals(anyObjectTO.getPlainAttr(\"location\"), location);\n+        assertEquals(anyObjectTO.getPlainAttr(\"location\").get(), location);\n     }\n \n     @Test"},{"sha":"a2cad27b5e59db702298b43ff7a6ccd72b976c40","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74ee038a4b52bb58954900c3ad6692eb1d6176c1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74ee038a4b52bb58954900c3ad6692eb1d6176c1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=74ee038a4b52bb58954900c3ad6692eb1d6176c1"}]}