{"sha":"34a0422aec960f6e9bb459e69e8453bd8bf21b6f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM0YTA0MjJhZWM5NjBmNmU5YmI0NTllNjllODQ1M2JkOGJmMjFiNmY=","commit":{"author":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2015-05-29T09:50:07Z"},"committer":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2015-05-29T09:50:07Z"},"message":"[SYNCOPE-660] Merge from 1_2_X; This closes #6","tree":{"sha":"8a817cbc747cd6c4279417440e27bbf7172adc52","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8a817cbc747cd6c4279417440e27bbf7172adc52"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/34a0422aec960f6e9bb459e69e8453bd8bf21b6f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/34a0422aec960f6e9bb459e69e8453bd8bf21b6f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/34a0422aec960f6e9bb459e69e8453bd8bf21b6f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/comments","author":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"committer":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"parents":[{"sha":"8ea1e6acc0972628aaf7a011e04370fc1cbd87df","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8ea1e6acc0972628aaf7a011e04370fc1cbd87df","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8ea1e6acc0972628aaf7a011e04370fc1cbd87df"},{"sha":"790704c08790f8a2536af84ed46290f1596851f0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/790704c08790f8a2536af84ed46290f1596851f0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/790704c08790f8a2536af84ed46290f1596851f0"}],"stats":{"total":700,"additions":566,"deletions":134},"files":[{"sha":"88fdf1cc352c5e37d6d14b878b56ed2e782023b5","filename":"client/old_console/src/main/java/org/apache/syncope/client/console/pages/Reports.java","status":"modified","additions":46,"deletions":33,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.java?ref=34a0422aec960f6e9bb459e69e8453bd8bf21b6f","patch":"@@ -16,29 +16,31 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.pages;\n+package org.apache.syncope.console.pages;\n \n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.syncope.client.console.commons.PreferenceManager;\n-import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n-import org.apache.syncope.client.console.panels.LoggerCategoryPanel;\n-import org.apache.syncope.client.console.panels.SelectedEventsPanel;\n-import org.apache.syncope.client.console.rest.LoggerRestClient;\n-import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxLink;\n-import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n-import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n-import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n-import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.EventCategoryTO;\n-import org.apache.syncope.common.lib.to.ReportTO;\n-import org.apache.syncope.common.lib.types.AuditElements.Result;\n-import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import java.util.Map;\n+import org.apache.syncope.common.to.EventCategoryTO;\n+import org.apache.syncope.common.to.ReportTO;\n+import org.apache.syncope.common.types.AuditElements.Result;\n+import org.apache.syncope.common.types.AuditLoggerName;\n+import org.apache.syncope.common.util.LoggerEventUtils;\n+import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.console.commons.Constants;\n+import org.apache.syncope.console.commons.PreferenceManager;\n+import org.apache.syncope.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.console.pages.panels.LoggerCategoryPanel;\n+import org.apache.syncope.console.pages.panels.SelectedEventsPanel;\n+import org.apache.syncope.console.rest.LoggerRestClient;\n+import org.apache.syncope.console.wicket.ajax.markup.html.ClearIndicatingAjaxLink;\n+import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n+import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n+import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.JobColumn;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -60,6 +62,7 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.StringResourceModel;\n import org.apache.wicket.model.util.ListModel;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n@@ -113,15 +116,17 @@ private void setupReport() {\n \n         paginatorRows = prefMan.getPaginatorRows(getRequest(), Constants.PREF_REPORT_PAGINATOR_ROWS);\n \n-        List<IColumn<ReportTO, String>> columns = new ArrayList<>();\n-        columns.add(new PropertyColumn<ReportTO, String>(new ResourceModel(\"key\"), \"key\", \"key\"));\n+        List<IColumn<ReportTO, String>> columns = new ArrayList<IColumn<ReportTO, String>>();\n+        columns.add(new PropertyColumn<ReportTO, String>(new ResourceModel(\"id\"), \"id\", \"id\"));\n         columns.add(new PropertyColumn<ReportTO, String>(new ResourceModel(\"name\"), \"name\", \"name\"));\n         columns.add(new DatePropertyColumn<ReportTO>(new ResourceModel(\"lastExec\"), \"lastExec\", \"lastExec\"));\n         columns.add(new DatePropertyColumn<ReportTO>(new ResourceModel(\"nextExec\"), \"nextExec\", \"nextExec\"));\n         columns.add(new DatePropertyColumn<ReportTO>(new ResourceModel(\"startDate\"), \"startDate\", \"startDate\"));\n         columns.add(new DatePropertyColumn<ReportTO>(new ResourceModel(\"endDate\"), \"endDate\", \"endDate\"));\n         columns.add(new PropertyColumn<ReportTO, String>(\n                 new ResourceModel(\"latestExecStatus\"), \"latestExecStatus\", \"latestExecStatus\"));\n+        columns.add(new JobColumn<ReportTO, String>(new StringResourceModel(\"\", this, null, \"\"), \"runtime\",\n+                getPageReference(), reportRestClient));\n         columns.add(new ActionColumn<ReportTO, String>(new ResourceModel(\"actions\", \"\")) {\n \n             private static final long serialVersionUID = 2054811145491901166L;\n@@ -161,7 +166,7 @@ public Page createPage() {\n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            reportRestClient.startExecution(reportTO.getKey());\n+                            reportRestClient.startExecution(reportTO.getId());\n                             getSession().info(getString(Constants.OPERATION_SUCCEEDED));\n                         } catch (SyncopeClientException scce) {\n                             error(scce.getMessage());\n@@ -179,7 +184,7 @@ public void onClick(final AjaxRequestTarget target) {\n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            reportRestClient.delete(reportTO.getKey());\n+                            reportRestClient.delete(reportTO.getId());\n                             info(getString(Constants.OPERATION_SUCCEEDED));\n                         } catch (SyncopeClientException scce) {\n                             error(scce.getMessage());\n@@ -213,7 +218,8 @@ public void onClick(final AjaxRequestTarget target) {\n         });\n \n         final AjaxFallbackDefaultDataTable<ReportTO, String> reportTable =\n-                new AjaxFallbackDefaultDataTable<>(\"reportTable\", columns, new ReportProvider(), paginatorRows);\n+                new AjaxFallbackDefaultDataTable<ReportTO, String>(\n+                        \"reportTable\", columns, new ReportProvider(), paginatorRows);\n \n         reportContainer.add(reportTable);\n         reportContainer.setOutputMarkupId(true);\n@@ -247,7 +253,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         paginatorForm.add(rowsChooser);\n         add(paginatorForm);\n \n-        AjaxLink<Void> createLink = new ClearIndicatingAjaxLink<Void>(\"createLink\", getPageReference()) {\n+        AjaxLink createLink = new ClearIndicatingAjaxLink(\"createLink\", getPageReference()) {\n \n             private static final long serialVersionUID = -7978723352517770644L;\n \n@@ -285,19 +291,19 @@ private void setupAudit() {\n         final Form form = new Form(\"auditForm\");\n         auditContainer.add(form);\n \n-        final List<String> events = new ArrayList<>();\n+        final List<String> events = new ArrayList<String>();\n \n         final List<AuditLoggerName> audits = loggerRestClient.listAudits();\n         for (AuditLoggerName audit : audits) {\n-            events.add(AuditLoggerName.buildEvent(\n+            events.add(LoggerEventUtils.buildEvent(\n                     audit.getType(),\n                     audit.getCategory(),\n                     audit.getSubcategory(),\n                     audit.getEvent(),\n                     audit.getResult()));\n         }\n \n-        final ListModel<String> model = new ListModel<>(new ArrayList<>(events));\n+        final ListModel<String> model = new ListModel<String>(new ArrayList<String>(events));\n \n         form.add(new LoggerCategoryPanel(\n                 \"events\", loggerRestClient.listEvents(), model, getPageReference(), \"Reports\") {\n@@ -328,8 +334,8 @@ public void onEventAction(final IEvent<?> event) {\n \n                             for (String toBeRemoved : eventSelectionChanged.getToBeRemoved()) {\n                                 if (events.contains(toBeRemoved)) {\n-                                    Pair<EventCategoryTO, Result> eventCategory =\n-                                    AuditLoggerName.parseEventCategory(toBeRemoved);\n+                                    final Map.Entry<EventCategoryTO, Result> eventCategory =\n+                                    LoggerEventUtils.parseEventCategory(toBeRemoved);\n \n                                     final AuditLoggerName auditLoggerName = new AuditLoggerName(\n                                             eventCategory.getKey().getType(),\n@@ -346,8 +352,8 @@ public void onEventAction(final IEvent<?> event) {\n \n                             for (String toBeAdded : eventSelectionChanged.getToBeAdded()) {\n                                 if (!events.contains(toBeAdded)) {\n-                                    Pair<EventCategoryTO, Result> eventCategory =\n-                                    AuditLoggerName.parseEventCategory(toBeAdded);\n+                                    final Map.Entry<EventCategoryTO, Result> eventCategory =\n+                                    LoggerEventUtils.parseEventCategory(toBeAdded);\n \n                                     final AuditLoggerName auditLoggerName = new AuditLoggerName(\n                                             eventCategory.getKey().getType(),\n@@ -376,8 +382,8 @@ public ReportProvider() {\n             super();\n \n             //Default sorting\n-            setSort(\"key\", SortOrder.ASCENDING);\n-            comparator = new SortableDataProviderComparator<>(this);\n+            setSort(\"id\", SortOrder.ASCENDING);\n+            comparator = new SortableDataProviderComparator<ReportTO>(this);\n         }\n \n         @Override\n@@ -409,4 +415,11 @@ public ReportTO getObject() {\n             };\n         }\n     }\n+    /**\n+     * IndicatorMarkupId behaviour is embedded in Reports.html\n+     */\n+    @Override\n+    public String getAjaxIndicatorMarkupId() {\n+        return \"\";\n+    }\n }"},{"sha":"11819c681d613b4d833491ab0fd2a233bec71f12","filename":"client/old_console/src/main/java/org/apache/syncope/client/console/pages/Tasks.java","status":"modified","additions":29,"deletions":20,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FTasks.java?ref=34a0422aec960f6e9bb459e69e8453bd8bf21b6f","patch":"@@ -16,27 +16,27 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.pages;\n+package org.apache.syncope.console.pages;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.Iterator;\n import java.util.List;\n-import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n-import org.apache.syncope.client.console.panels.AjaxDataTablePanel;\n-import org.apache.syncope.client.console.panels.NotificationTasks;\n-import org.apache.syncope.client.console.panels.PropagationTasks;\n-import org.apache.syncope.client.console.panels.PushTasksPanel;\n-import org.apache.syncope.client.console.panels.SchedTasks;\n-import org.apache.syncope.client.console.panels.SyncTasksPanel;\n-import org.apache.syncope.client.console.rest.BaseRestClient;\n-import org.apache.syncope.client.console.rest.TaskRestClient;\n-import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n-import org.apache.syncope.common.lib.to.SchedTaskTO;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.to.SchedTaskTO;\n+import org.apache.syncope.common.to.TaskExecTO;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n+import org.apache.syncope.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.console.pages.panels.AjaxDataTablePanel;\n+import org.apache.syncope.console.pages.panels.NotificationTasks;\n+import org.apache.syncope.console.pages.panels.PropagationTasks;\n+import org.apache.syncope.console.pages.panels.SchedTasks;\n+import org.apache.syncope.console.pages.panels.PushTasksPanel;\n+import org.apache.syncope.console.pages.panels.SyncTasksPanel;\n+import org.apache.syncope.console.rest.BaseRestClient;\n+import org.apache.syncope.console.rest.TaskRestClient;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n@@ -141,8 +141,8 @@ public TasksProvider(\n             super();\n \n             //Default sorting\n-            setSort(\"key\", SortOrder.DESCENDING);\n-            comparator = new SortableDataProviderComparator<>(this);\n+            setSort(\"id\", SortOrder.DESCENDING);\n+            comparator = new SortableDataProviderComparator<T>(this);\n             this.paginatorRows = paginatorRows;\n             this.restClient = restClient;\n             this.id = id;\n@@ -151,7 +151,7 @@ public TasksProvider(\n \n         @Override\n         public Iterator<T> iterator(final long first, final long count) {\n-            final List<T> tasks = new ArrayList<>();\n+            final List<T> tasks = new ArrayList<T>();\n \n             final int page = ((int) first / paginatorRows);\n \n@@ -184,7 +184,7 @@ public long size() {\n \n         @Override\n         public IModel<T> model(final T object) {\n-            return new CompoundPropertyModel<>(object);\n+            return new CompoundPropertyModel<T>(object);\n         }\n     }\n \n@@ -208,15 +208,15 @@ public static AjaxDataTablePanel<AbstractTaskTO, String> updateTaskTable(\n             final BaseRestClient restClient) {\n \n         @SuppressWarnings(\"unchecked\")\n-        final AjaxDataTablePanel<AbstractTaskTO, String> table = new AjaxDataTablePanel<>(\n+        final AjaxDataTablePanel<AbstractTaskTO, String> table = new AjaxDataTablePanel<AbstractTaskTO, String>(\n                 \"datatable\",\n                 columns,\n                 (ISortableDataProvider<AbstractTaskTO, String>) dataProvider,\n                 dataProvider.paginatorRows,\n                 Arrays.asList(new ActionLink.ActionType[] {\n                     ActionLink.ActionType.DELETE, ActionLink.ActionType.DRYRUN, ActionLink.ActionType.EXECUTE }),\n                 restClient,\n-                \"key\",\n+                \"id\",\n                 TASKS,\n                 pageRef);\n \n@@ -227,4 +227,13 @@ public static AjaxDataTablePanel<AbstractTaskTO, String> updateTaskTable(\n \n         return table;\n     }\n+\n+    /**\n+     * IndicatorMarkupId behaviour is embedded in Tasks.html\n+     */\n+    @Override\n+    public String getAjaxIndicatorMarkupId() {\n+        return \"\";\n+    }\n+\n }"},{"sha":"9c7b4589a5fd33260832c356b32c7f57470b1308","filename":"client/old_console/src/main/java/org/apache/syncope/client/console/panels/NotificationTasks.java","status":"modified","additions":19,"deletions":15,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNotificationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNotificationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNotificationTasks.java?ref=34a0422aec960f6e9bb459e69e8453bd8bf21b6f","patch":"@@ -16,20 +16,21 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.panels;\n+package org.apache.syncope.console.pages.panels;\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.syncope.client.console.pages.NotificationTaskModalPage;\n-import org.apache.syncope.client.console.pages.Tasks;\n-import org.apache.syncope.client.console.pages.Tasks.TasksProvider;\n-import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n-import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n-import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n-import org.apache.syncope.common.lib.to.NotificationTaskTO;\n+import org.apache.syncope.common.to.NotificationTaskTO;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n+import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.console.commons.Constants;\n+import org.apache.syncope.console.pages.NotificationTaskModalPage;\n+import org.apache.syncope.console.pages.Tasks;\n+import org.apache.syncope.console.pages.Tasks.TasksProvider;\n+import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n+import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.JobColumn;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n import org.apache.wicket.PageReference;\n@@ -137,10 +138,10 @@ protected void onUpdate(final AjaxRequestTarget target) {\n     }\n \n     private List<IColumn<AbstractTaskTO, String>> getColumns() {\n-        final List<IColumn<AbstractTaskTO, String>> columns = new ArrayList<>();\n+        final List<IColumn<AbstractTaskTO, String>> columns = new ArrayList<IColumn<AbstractTaskTO, String>>();\n \n         columns.add(new PropertyColumn<AbstractTaskTO, String>(\n-                new StringResourceModel(\"key\", this, null), \"key\", \"key\"));\n+                new StringResourceModel(\"id\", this, null), \"id\", \"id\"));\n         columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"sender\", this, null), \"sender\", \"sender\"));\n         columns.add(new PropertyColumn<AbstractTaskTO, String>(\n@@ -152,6 +153,9 @@ private List<IColumn<AbstractTaskTO, String>> getColumns() {\n         columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"latestExecStatus\", this, null), \"latestExecStatus\", \"latestExecStatus\"));\n \n+        columns.add(new JobColumn<AbstractTaskTO, String>(new StringResourceModel(\"\", this, null, \"\"), \"runtime\",\n+                pageRef, restClient)); \n+\n         columns.add(new ActionColumn<AbstractTaskTO, String>(new StringResourceModel(\"actions\", this, null, \"\")) {\n \n             private static final long serialVersionUID = 2054811145491901166L;\n@@ -191,7 +195,7 @@ public Page createPage() {\n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            restClient.startExecution(taskTO.getKey(), false);\n+                            restClient.startExecution(taskTO.getId(), false);\n                             getSession().info(getString(Constants.OPERATION_SUCCEEDED));\n                         } catch (SyncopeClientException scce) {\n                             error(scce.getMessage());\n@@ -209,7 +213,7 @@ public void onClick(final AjaxRequestTarget target) {\n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            restClient.delete(taskTO.getKey(), NotificationTaskTO.class);\n+                            restClient.delete(taskTO.getId(), NotificationTaskTO.class);\n                             info(getString(Constants.OPERATION_SUCCEEDED));\n                         } catch (SyncopeClientException scce) {\n                             error(scce.getMessage());"},{"sha":"34e058ecc0302e1b80cb80ac98cf6cc9c58d9089","filename":"client/old_console/src/main/java/org/apache/syncope/client/console/panels/RuntimePanel.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRuntimePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRuntimePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRuntimePanel.java?ref=34a0422aec960f6e9bb459e69e8453bd8bf21b6f","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import org.apache.syncope.client.console.rest.JobRestClient;\n+import org.apache.syncope.console.wicket.ajax.markup.html.ClearIndicatingAjaxLink;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AbstractAjaxTimerBehavior;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.markup.html.panel.Fragment;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.markup.html.panel.Panel;\n+\n+public class RuntimePanel extends Panel {\n+\n+    private static final long serialVersionUID = -9002724127542172464L;\n+\n+    private boolean latestStatus;\n+\n+    private Fragment fragmentStop, fragmentSpinner;\n+\n+    public AbstractAjaxTimerBehavior timer;\n+\n+    private final PageReference pageRef;\n+\n+    private final long jobId;\n+\n+    private final JobRestClient jobRestClient;\n+\n+    public RuntimePanel(final String componentId, final IModel<?> model, final PageReference pageRef, final long jobId,\n+            final JobRestClient jobRestClient) {\n+        super(componentId, model);\n+        this.pageRef = pageRef;\n+        this.jobId = jobId;\n+        this.jobRestClient = jobRestClient;\n+        latestStatus = false;\n+        this.refresh();\n+\n+    }\n+\n+    public final void refresh() {\n+        boolean currentStatus = jobRestClient.isJobRunning(jobId);\n+        if (currentStatus && !latestStatus) {\n+            setRunning();\n+        } else if (!currentStatus) {\n+            setNotRunning();\n+        }\n+        latestStatus = currentStatus;\n+    }\n+\n+    public void setRunning() {\n+        fragmentStop = new Fragment(\"panelStop\", \"fragmentStop\", this);\n+        fragmentStop.addOrReplace(new ClearIndicatingAjaxLink<Void>(\"stopLink\", pageRef) {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            protected void onClickInternal(final AjaxRequestTarget target) {\n+                jobRestClient.stopJob(jobId);\n+                this.setEnabled(false);\n+                target.add(this);\n+            }\n+\n+            @Override\n+            public String getAjaxIndicatorMarkupId() {\n+                return \"\";\n+            }\n+        });\n+        addOrReplace(fragmentStop);\n+        fragmentSpinner = new Fragment(\"panelSpinner\", \"fragmentSpinner\", this);\n+        addOrReplace(fragmentSpinner);\n+    }\n+\n+    public void setNotRunning() {\n+        fragmentStop = new Fragment(\"panelStop\", \"emptyFragment\", this);\n+        addOrReplace(fragmentStop);\n+        fragmentSpinner = new Fragment(\"panelSpinner\", \"emptyFragment\", this);\n+        addOrReplace(fragmentSpinner);\n+    }\n+\n+    public void setTimer(AbstractAjaxTimerBehavior timer) {\n+        if (this.timer != null) {\n+            remove(this.timer);\n+        }\n+        this.timer = timer;\n+        this.add(this.timer);\n+    }\n+\n+}"},{"sha":"78591a82befd5701b06beb3e07ed139535be2da1","filename":"client/old_console/src/main/java/org/apache/syncope/client/console/panels/SchedTasks.java","status":"modified","additions":23,"deletions":17,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchedTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchedTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchedTasks.java?ref=34a0422aec960f6e9bb459e69e8453bd8bf21b6f","patch":"@@ -16,22 +16,25 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.panels;\n+package org.apache.syncope.console.pages.panels;\n+\n+import static org.apache.syncope.console.pages.panels.AbstractTasks.TASKS;\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.syncope.client.console.pages.SchedTaskModalPage;\n-import org.apache.syncope.client.console.pages.Tasks;\n-import org.apache.syncope.client.console.pages.Tasks.TasksProvider;\n-import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxLink;\n-import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n-import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n-import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n-import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n-import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.to.SchedTaskTO;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n+import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.console.commons.Constants;\n+import org.apache.syncope.console.pages.SchedTaskModalPage;\n+import org.apache.syncope.console.pages.Tasks;\n+import org.apache.syncope.console.pages.Tasks.TasksProvider;\n+import org.apache.syncope.console.wicket.ajax.markup.html.ClearIndicatingAjaxLink;\n+import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n+import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n+import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.JobColumn;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n import org.apache.wicket.PageReference;\n@@ -153,7 +156,7 @@ private List<IColumn<AbstractTaskTO, String>> getColumns() {\n         final List<IColumn<AbstractTaskTO, String>> columns = new ArrayList<IColumn<AbstractTaskTO, String>>();\n \n         columns.add(new PropertyColumn<AbstractTaskTO, String>(\n-                new StringResourceModel(\"key\", this, null), \"key\", \"key\"));\n+                new StringResourceModel(\"id\", this, null), \"id\", \"id\"));\n         columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"name\", this, null), \"name\", \"name\"));\n         columns.add(new PropertyColumn<AbstractTaskTO, String>(\n@@ -167,6 +170,9 @@ private List<IColumn<AbstractTaskTO, String>> getColumns() {\n         columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"latestExecStatus\", this, null), \"latestExecStatus\", \"latestExecStatus\"));\n \n+        columns.add(new JobColumn<AbstractTaskTO, String>(new StringResourceModel(\"\", this, null, \"\"), \"runtime\",\n+                pageRef, restClient)); \n+\n         columns.add(new ActionColumn<AbstractTaskTO, String>(new StringResourceModel(\"actions\", this, null, \"\")) {\n \n             private static final long serialVersionUID = 2054811145491901166L;\n@@ -205,7 +211,7 @@ public Page createPage() {\n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            restClient.startExecution(taskTO.getKey(), false);\n+                            restClient.startExecution(taskTO.getId(), false);\n                             getSession().info(getString(Constants.OPERATION_SUCCEEDED));\n                         } catch (SyncopeClientException scce) {\n                             error(scce.getMessage());\n@@ -223,7 +229,7 @@ public void onClick(final AjaxRequestTarget target) {\n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            restClient.startExecution(taskTO.getKey(), true);\n+                            restClient.startExecution(taskTO.getId(), true);\n                             getSession().info(getString(Constants.OPERATION_SUCCEEDED));\n                         } catch (SyncopeClientException scce) {\n                             error(scce.getMessage());\n@@ -241,7 +247,7 @@ public void onClick(final AjaxRequestTarget target) {\n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            restClient.delete(taskTO.getKey(), SchedTaskTO.class);\n+                            restClient.delete(taskTO.getId(), SchedTaskTO.class);\n                             info(getString(Constants.OPERATION_SUCCEEDED));\n                         } catch (SyncopeClientException scce) {\n                             error(scce.getMessage());"},{"sha":"032f4e48f1a037d184213dbbdaac9dac809308e8","filename":"client/old_console/src/main/java/org/apache/syncope/client/console/panels/SyncTasksPanel.java","status":"modified","additions":27,"deletions":22,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSyncTasksPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSyncTasksPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSyncTasksPanel.java?ref=34a0422aec960f6e9bb459e69e8453bd8bf21b6f","patch":"@@ -16,21 +16,22 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.panels;\n+package org.apache.syncope.console.pages.panels;\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.syncope.client.console.pages.GroupTemplateModalPage;\n-import org.apache.syncope.client.console.pages.SyncTaskModalPage;\n-import org.apache.syncope.client.console.pages.UserTemplateModalPage;\n-import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n-import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n-import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n-import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n-import org.apache.syncope.common.lib.to.SyncTaskTO;\n+import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n+import org.apache.syncope.common.to.SyncTaskTO;\n+import org.apache.syncope.console.commons.Constants;\n+import org.apache.syncope.console.pages.RoleTemplateModalPage;\n+import org.apache.syncope.console.pages.SyncTaskModalPage;\n+import org.apache.syncope.console.pages.UserTemplateModalPage;\n+import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n+import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n+import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.JobColumn;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n import org.apache.wicket.PageReference;\n@@ -42,7 +43,7 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.StringResourceModel;\n \n-public class SyncTasksPanel extends AbstractProvisioningTasksPanel<SyncTaskTO> {\n+public class SyncTasksPanel extends AbstractSyncTasksPanel<SyncTaskTO> {\n \n     private static final long serialVersionUID = 53189199346016099L;\n \n@@ -53,10 +54,10 @@ public SyncTasksPanel(final String id, final PageReference pageRef) {\n \n     @Override\n     protected List<IColumn<AbstractTaskTO, String>> getColumns() {\n-        final List<IColumn<AbstractTaskTO, String>> syncTaskscolumns = new ArrayList<>();\n+        final List<IColumn<AbstractTaskTO, String>> syncTaskscolumns = new ArrayList<IColumn<AbstractTaskTO, String>>();\n \n         syncTaskscolumns.add(new PropertyColumn<AbstractTaskTO, String>(\n-                new StringResourceModel(\"key\", this, null), \"key\", \"key\"));\n+                new StringResourceModel(\"id\", this, null), \"id\", \"id\"));\n         syncTaskscolumns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"name\", this, null), \"name\", \"name\"));\n         syncTaskscolumns.add(new PropertyColumn<AbstractTaskTO, String>(\n@@ -69,8 +70,12 @@ protected List<IColumn<AbstractTaskTO, String>> getColumns() {\n                 new StringResourceModel(\"nextExec\", this, null), \"nextExec\", \"nextExec\"));\n         syncTaskscolumns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"latestExecStatus\", this, null), \"latestExecStatus\", \"latestExecStatus\"));\n+        \n+        syncTaskscolumns.add(new JobColumn<AbstractTaskTO, String>(new StringResourceModel(\"\", this, null, \"\"), \"runtime\",\n+                pageRef, restClient));        \n \n-        syncTaskscolumns.add(new ActionColumn<AbstractTaskTO, String>(new StringResourceModel(\"actions\", this, null, \"\")) {\n+        syncTaskscolumns.add(\n+                new ActionColumn<AbstractTaskTO, String>(new StringResourceModel(\"actions\", this, null, \"\")) {\n \n                     private static final long serialVersionUID = 2054811145491901166L;\n \n@@ -136,13 +141,13 @@ public void onClick(final AjaxRequestTarget target) {\n \n                                     @Override\n                                     public Page createPage() {\n-                                        return new GroupTemplateModalPage(pageRef, window, taskTO);\n+                                        return new RoleTemplateModalPage(pageRef, window, taskTO);\n                                     }\n                                 });\n \n                                 window.show(target);\n                             }\n-                        }, ActionLink.ActionType.GROUP_TEMPLATE, TASKS);\n+                        }, ActionLink.ActionType.ROLE_TEMPLATE, TASKS);\n \n                         panel.add(new ActionLink() {\n \n@@ -151,7 +156,7 @@ public Page createPage() {\n                             @Override\n                             public void onClick(final AjaxRequestTarget target) {\n                                 try {\n-                                    restClient.startExecution(taskTO.getKey(), false);\n+                                    restClient.startExecution(taskTO.getId(), false);\n                                     getSession().info(getString(Constants.OPERATION_SUCCEEDED));\n                                 } catch (SyncopeClientException scce) {\n                                     error(scce.getMessage());\n@@ -169,7 +174,7 @@ public void onClick(final AjaxRequestTarget target) {\n                             @Override\n                             public void onClick(final AjaxRequestTarget target) {\n                                 try {\n-                                    restClient.startExecution(taskTO.getKey(), true);\n+                                    restClient.startExecution(taskTO.getId(), true);\n                                     getSession().info(getString(Constants.OPERATION_SUCCEEDED));\n                                 } catch (SyncopeClientException scce) {\n                                     error(scce.getMessage());\n@@ -187,7 +192,7 @@ public void onClick(final AjaxRequestTarget target) {\n                             @Override\n                             public void onClick(final AjaxRequestTarget target) {\n                                 try {\n-                                    restClient.delete(taskTO.getKey(), SyncTaskTO.class);\n+                                    restClient.delete(taskTO.getId(), SyncTaskTO.class);\n                                     info(getString(Constants.OPERATION_SUCCEEDED));\n                                 } catch (SyncopeClientException scce) {\n                                     error(scce.getMessage());\n@@ -201,7 +206,7 @@ public void onClick(final AjaxRequestTarget target) {\n                     }\n \n                     @Override\n-                    public Component getHeader(final String componentId) {\n+                    public Component getHeader(String componentId) {\n                         final ActionLinksPanel panel = new ActionLinksPanel(componentId, new Model(), pageRef);\n \n                         panel.add(new ActionLink() {"},{"sha":"06346583ce47ab45fc5dec517aaa226d3252aa7a","filename":"client/old_console/src/main/java/org/apache/syncope/client/console/rest/JobRestClient.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FJobRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FJobRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FJobRestClient.java?ref=34a0422aec960f6e9bb459e69e8453bd8bf21b6f","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.rest;\n+\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public abstract class JobRestClient extends BaseRestClient{\n+\n+    public abstract boolean isJobRunning(final long id);\n+\n+    public abstract void startJob(final long id);\n+\n+    public abstract void stopJob(final long id);\n+}"},{"sha":"9b8afdb74fc3a99dbf17546fc2daece7569a0502","filename":"client/old_console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java","status":"modified","additions":31,"deletions":8,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java?ref=34a0422aec960f6e9bb459e69e8453bd8bf21b6f","patch":"@@ -16,21 +16,24 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.rest;\n+package org.apache.syncope.console.rest;\n \n import java.util.ArrayList;\n import java.util.List;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.ReportTO;\n-import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n-import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n-import org.apache.syncope.common.rest.api.service.ReportService;\n+import org.apache.syncope.common.services.ReportService;\n+import org.apache.syncope.common.to.ReportTO;\n+import org.apache.syncope.common.types.ReportExecExportFormat;\n+import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.to.ReportExecTO;\n+import org.apache.syncope.common.types.JobAction;\n+import org.apache.syncope.common.types.JobStatusType;\n+import org.apache.syncope.common.wrap.ReportletConfClass;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.springframework.stereotype.Component;\n \n @Component\n-public class ReportRestClient extends BaseRestClient implements ExecutionRestClient {\n+public class ReportRestClient extends JobRestClient implements ExecutionRestClient {\n \n     private static final long serialVersionUID = 1644689667998953604L;\n \n@@ -70,7 +73,7 @@ public void create(final ReportTO reportTO) {\n     }\n \n     public void update(final ReportTO reportTO) {\n-        getService(ReportService.class).update(reportTO.getKey(), reportTO);\n+        getService(ReportService.class).update(reportTO.getId(), reportTO);\n     }\n \n     /**\n@@ -105,4 +108,24 @@ public void deleteExecution(final long reportExecId) {\n     public Response exportExecutionResult(final Long executionId, final ReportExecExportFormat fmt) {\n         return getService(ReportService.class).exportExecutionResult(executionId, fmt);\n     }\n+\n+    @Override\n+    public boolean isJobRunning(final long reportId) {\n+        for (ReportExecTO reportExecTO : getService(ReportService.class).listJobs(JobStatusType.RUNNING)) {\n+            if (reportExecTO.getReport() == reportId) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public void startJob(final long reportId) {\n+        getService(ReportService.class).actionJob(reportId, JobAction.START);\n+    }\n+\n+    @Override\n+    public void stopJob(final long reportId) {\n+        getService(ReportService.class).actionJob(reportId, JobAction.STOP);\n+    }\n }"},{"sha":"c83ce88ee728faae1265a107ba8c2b2c34cd62c1","filename":"client/old_console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":70,"deletions":18,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=34a0422aec960f6e9bb459e69e8453bd8bf21b6f","patch":"@@ -16,41 +16,75 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.rest;\n+package org.apache.syncope.console.rest;\n \n+import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.client.console.SyncopeSession;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n-import org.apache.syncope.common.lib.to.BulkAction;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n-import org.apache.syncope.common.lib.to.NotificationTaskTO;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n-import org.apache.syncope.common.lib.to.PushTaskTO;\n-import org.apache.syncope.common.lib.to.SchedTaskTO;\n-import org.apache.syncope.common.lib.to.SyncTaskTO;\n-import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.common.rest.api.service.TaskService;\n+import org.apache.syncope.common.services.TaskService;\n+import org.apache.syncope.common.reqres.BulkAction;\n+import org.apache.syncope.common.reqres.BulkActionResult;\n+import org.apache.syncope.common.wrap.JobClass;\n+import org.apache.syncope.common.to.NotificationTaskTO;\n+import org.apache.syncope.common.to.PropagationTaskTO;\n+import org.apache.syncope.common.to.SchedTaskTO;\n+import org.apache.syncope.common.wrap.SyncActionClass;\n+import org.apache.syncope.common.to.SyncTaskTO;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n+import org.apache.syncope.common.types.TaskType;\n+import org.apache.syncope.common.util.CollectionWrapper;\n+import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.to.PushTaskTO;\n+import org.apache.syncope.common.to.TaskExecTO;\n+import org.apache.syncope.common.types.JobAction;\n+import org.apache.syncope.common.types.JobStatusType;\n+import org.apache.syncope.common.wrap.PushActionClass;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.springframework.stereotype.Component;\n \n /**\n  * Console client for invoking Rest Tasks services.\n  */\n @Component\n-public class TaskRestClient extends BaseRestClient implements ExecutionRestClient {\n+public class TaskRestClient extends JobRestClient implements ExecutionRestClient {\n \n     private static final long serialVersionUID = 6284485820911028843L;\n \n+    /**\n+     * Return a list of job classes.\n+     *\n+     * @return list of classes.\n+     */\n     public List<String> getJobClasses() {\n-        return SyncopeSession.get().getSyncopeTO().getTaskJobs();\n+        List<JobClass> jobClasses = null;\n+\n+        try {\n+            jobClasses = new ArrayList<JobClass>(getService(TaskService.class).getJobClasses());\n+        } catch (SyncopeClientException e) {\n+            LOG.error(\"While getting all job classes\", e);\n+        }\n+        return CollectionWrapper.unwrap(jobClasses);\n     }\n \n     public List<String> getSyncActionsClasses() {\n-        return SyncopeSession.get().getSyncopeTO().getSyncActions();\n+        List<SyncActionClass> actions = null;\n+\n+        try {\n+            actions = new ArrayList<SyncActionClass>(getService(TaskService.class).getSyncActionsClasses());\n+        } catch (SyncopeClientException e) {\n+            LOG.error(\"While getting all sync actions classes\", e);\n+        }\n+        return CollectionWrapper.unwrap(actions);\n     }\n \n     public List<String> getPushActionsClasses() {\n-        return SyncopeSession.get().getSyncopeTO().getPushActions();\n+        List<PushActionClass> actions = null;\n+\n+        try {\n+            actions = new ArrayList<PushActionClass>(getService(TaskService.class).getPushActionsClasses());\n+        } catch (SyncopeClientException e) {\n+            LOG.error(\"While getting all sync actions classes\", e);\n+        }\n+        return CollectionWrapper.unwrap(actions);\n     }\n \n     /**\n@@ -126,14 +160,32 @@ public void createSchedTask(final SchedTaskTO taskTO) {\n     }\n \n     public void updateSchedTask(final SchedTaskTO taskTO) {\n-        getService(TaskService.class).update(taskTO.getKey(), taskTO);\n+        getService(TaskService.class).update(taskTO.getId(), taskTO);\n     }\n \n     public void updateSyncTask(final SyncTaskTO taskTO) {\n-        getService(TaskService.class).update(taskTO.getKey(), taskTO);\n+        getService(TaskService.class).update(taskTO.getId(), taskTO);\n     }\n \n     public BulkActionResult bulkAction(final BulkAction action) {\n         return getService(TaskService.class).bulk(action);\n     }\n+    \n+    @Override\n+    public boolean isJobRunning(final long taskId){\n+        for(TaskExecTO taskExecTO : getService(TaskService.class).listJobs(JobStatusType.RUNNING)){\n+            if(taskExecTO.getTask()== taskId) return true;\n+        }\n+        return false;\n+    }\n+    \n+    @Override\n+    public void startJob(final long taskId){\n+        getService(TaskService.class).actionJob(taskId, JobAction.START);\n+    }\n+\n+    @Override\n+    public void stopJob(final long taskId) {\n+        getService(TaskService.class).actionJob(taskId, JobAction.STOP);\n+    }\n }"},{"sha":"ba4742166044887c629880e4242405f56cd68bd3","filename":"client/old_console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/JobColumn.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FJobColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FJobColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FJobColumn.java?ref=34a0422aec960f6e9bb459e69e8453bd8bf21b6f","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table;\n+\n+import org.apache.syncope.client.console.panels.RuntimePanel;\n+import org.apache.syncope.client.console.rest.JobRestClient;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n+import org.apache.syncope.common.to.ReportTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AbstractAjaxTimerBehavior;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.util.time.Duration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JobColumn<T, S> extends AbstractColumn<T, S> {\n+\n+    private static final long serialVersionUID = 7955560320949560725L;\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(JobColumn.class);\n+\n+    private final PageReference pageRef;\n+\n+    private RuntimePanel panel;\n+\n+    private final JobRestClient jobRestClient;\n+\n+    public JobColumn(final IModel<String> displayModel, final S sortProperty, final PageReference pageRef,\n+            final JobRestClient jobRestClient) {\n+        super(displayModel, sortProperty);\n+        this.pageRef = pageRef;\n+        this.jobRestClient = jobRestClient;\n+    }\n+\n+    @Override\n+    public void populateItem(final Item<ICellPopulator<T>> item, final String componentId, final IModel<T> model) {\n+        Long jobId = null;\n+        if (model.getObject() instanceof AbstractTaskTO) {\n+            jobId = ((AbstractTaskTO) model.getObject()).getId();\n+        } else if (model.getObject() instanceof ReportTO) {\n+            jobId = ((ReportTO) model.getObject()).getId();\n+        }\n+        if (jobId != null) {\n+            panel = new RuntimePanel(componentId, model, pageRef, jobId, jobRestClient);\n+            startPolling(10);\n+            item.add(panel);\n+        }\n+    }\n+\n+    public void startPolling(final int seconds) {\n+        AbstractAjaxTimerBehavior timer = new AbstractAjaxTimerBehavior(Duration.seconds(seconds)) {\n+\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            protected void onTimer(AjaxRequestTarget target) {\n+                panel.refresh();\n+                target.add(panel);\n+            }\n+\n+            @Override\n+            protected void updateAjaxAttributes(AjaxRequestAttributes attributes) {\n+                super.updateAjaxAttributes(attributes);\n+                attributes.getExtraParameters().put(\"pollingTimeout\", \"true\");\n+            }\n+\n+        };\n+\n+        panel.setTimer(timer);\n+\n+    }\n+\n+}"},{"sha":"ff5fb37f86f50a853d37fff9a481d8f0bd8338c8","filename":"client/old_console/src/main/resources/org/apache/syncope/client/console/pages/Reports.html","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fold_console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.html?ref=34a0422aec960f6e9bb459e69e8453bd8bf21b6f","patch":"@@ -18,7 +18,20 @@\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:extend>\n+    <script type=\"text/javascript\">\n+      window.onload = setupFunc;\n \n+      function setupFunc() {\n+        Wicket.Event.subscribe('/ajax/call/beforeSend', function (attributes, jqXHR, settings) {\n+          if (!jqXHR.ep || !jqXHR.ep[0] || !jqXHR.ep[0][\"value\"]) {\n+            document.getElementById(\"veil\").style.display = \"block\";\n+          }\n+        });\n+        Wicket.Event.subscribe('/ajax/call/complete', function (attributes, jqXHR, textStatus) {\n+          document.getElementById(\"veil\").style.display = \"none\";\n+        });\n+      }\n+    </script>\n     <div id=\"tabs\">\n       <ul>\n         <li class=\"tabs-selected\"><a href=\"#tabs-1\"><span><wicket:message key=\"reports\"/></span></a></li>"},{"sha":"81c9237ce574ebd257cd6d715682d02753137c4d","filename":"client/old_console/src/main/resources/org/apache/syncope/client/console/pages/Tasks.html","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FTasks.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FTasks.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fold_console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FTasks.html?ref=34a0422aec960f6e9bb459e69e8453bd8bf21b6f","patch":"@@ -18,6 +18,21 @@\n -->\n <wicket:extend>\n \n+  <script type=\"text/javascript\">\n+    window.onload = setupFunc;\n+\n+    function setupFunc() {\n+      Wicket.Event.subscribe('/ajax/call/beforeSend', function (attributes, jqXHR, settings) {\n+        if (!jqXHR.ep || !jqXHR.ep[0] || !jqXHR.ep[0][\"value\"]){\n+          document.getElementById(\"veil\").style.display = \"block\";\n+        }\n+      });\n+      Wicket.Event.subscribe('/ajax/call/complete', function (attributes, jqXHR, textStatus) {\n+        document.getElementById(\"veil\").style.display = \"none\";\n+      });\n+    }\n+  </script>\n+\n   <div id=\"tabs\">\n     <ul>\n       <li class=\"tabs-selected\"><a href=\"#tabs-1\"><span><wicket:message key=\"tab1\"/></span></a></li>"},{"sha":"828192c85851884a464af28682581ad91272f6c4","filename":"client/old_console/src/main/resources/org/apache/syncope/client/console/panels/RuntimePanel.html","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRuntimePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/client%2Fold_console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRuntimePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fold_console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRuntimePanel.html?ref=34a0422aec960f6e9bb459e69e8453bd8bf21b6f","patch":"@@ -0,0 +1,49 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:head>\n+    <style>\n+      #runtime{\n+        text-align: center;\n+      }\n+    </style>\n+  </wicket:head>\n+  <wicket:panel wicket:id=\"runtime\">\n+    <div>\n+      <div id=\"runtime\">\n+        <div id=\"runtimePanel\">\n+          <span wicket:id=\"panelStop\"></span>\n+          <span wicket:id=\"panelSpinner\"></span>\n+\n+          <wicket:fragment wicket:id=\"fragmentStop\">\n+            <a href=\"#\" wicket:id=\"stopLink\"><img src=\"img/actions/suspend.png\" alt=\"stop icon\" title=\"Stop Now\"/></a>\n+          </wicket:fragment>\n+\n+          <wicket:fragment wicket:id=\"fragmentSpinner\">\n+            <img src=\"img/loading.gif\" alt=\"spinner icon\" title=\"Spinner\"/>\n+          </wicket:fragment>\n+\n+          <wicket:fragment wicket:id=\"emptyFragment\"></wicket:fragment>\n+\n+        </div>\n+\n+      </div>\n+    </div>\n+  </wicket:panel>\n+</html>"},{"sha":"fb5648f956a50d1d8c3fea0c98c9653d611ec869","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractJobLogic.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a0422aec960f6e9bb459e69e8453bd8bf21b6f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java?ref=34a0422aec960f6e9bb459e69e8453bd8bf21b6f","patch":"@@ -156,7 +156,20 @@ protected void actionJob(final String jobName, final JobAction action) {\n                 if (scheduler.getScheduler().checkExists(jobKey)) {\n                     switch (action) {\n                         case START:\n-                            scheduler.getScheduler().triggerJob(jobKey);\n+                            Long currentKey = getKeyFromJobName(jobKey);\n+                            boolean found = false;\n+                            //Two or more equals jobs cannot be executed concurrently\n+                            for (int i = 0; i < scheduler.getScheduler().getCurrentlyExecutingJobs().size() && !found;\n+                                    i++) {\n+                                JobExecutionContext jec = scheduler.getScheduler().getCurrentlyExecutingJobs().get(i);\n+                                Long execJobKey = getKeyFromJobName(jec.getJobDetail().getKey());\n+                                if (execJobKey == currentKey) {\n+                                    found = true;\n+                                }\n+                            }\n+                            if (!found) {\n+                                scheduler.getScheduler().triggerJob(jobKey);\n+                            }\n                             break;\n \n                         case STOP:"}]}