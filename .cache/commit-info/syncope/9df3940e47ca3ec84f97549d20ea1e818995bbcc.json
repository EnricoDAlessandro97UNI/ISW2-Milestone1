{"sha":"9df3940e47ca3ec84f97549d20ea1e818995bbcc","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjlkZjM5NDBlNDdjYTNlYzg0Zjk3NTQ5ZDIwZWExZTgxODk5NWJiY2M=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-02-27T15:25:01Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-02-27T15:25:01Z"},"message":"Enhancing AttrSchemaType type resolution","tree":{"sha":"13b607fa70774ffc9ab9d23ae466e23d17a2719d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/13b607fa70774ffc9ab9d23ae466e23d17a2719d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9df3940e47ca3ec84f97549d20ea1e818995bbcc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9df3940e47ca3ec84f97549d20ea1e818995bbcc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9df3940e47ca3ec84f97549d20ea1e818995bbcc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9df3940e47ca3ec84f97549d20ea1e818995bbcc/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"062803068e88ac7838c4b1bc7c0de84c09184fde","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/062803068e88ac7838c4b1bc7c0de84c09184fde","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/062803068e88ac7838c4b1bc7c0de84c09184fde"}],"stats":{"total":83,"additions":77,"deletions":6},"files":[{"sha":"86fd8a85971f6cf9b3583c66d4ec211b78ab3519","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/AttrSchemaType.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9df3940e47ca3ec84f97549d20ea1e818995bbcc/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAttrSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9df3940e47ca3ec84f97549d20ea1e818995bbcc/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAttrSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAttrSchemaType.java?ref=9df3940e47ca3ec84f97549d20ea1e818995bbcc","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Date;\n import java.util.stream.Stream;\n+import org.apache.commons.lang3.ClassUtils;\n \n public enum AttrSchemaType {\n \n@@ -29,8 +30,8 @@ public enum AttrSchemaType {\n     Boolean(Boolean.class),\n     Date(Date.class),\n     Enum(Enum.class),\n-    Encrypted(byte[].class),\n-    Binary(byte[].class);\n+    Binary(byte[].class),\n+    Encrypted(byte[].class);\n \n     private final Class<?> type;\n \n@@ -49,10 +50,11 @@ public boolean isConversionPatternNeeded() {\n     }\n \n     public static AttrSchemaType getAttrSchemaTypeByClass(final Class<?> type) {\n-        return type == boolean.class\n-                ? AttrSchemaType.Boolean\n-                : Stream.of(AttrSchemaType.values()).filter(item -> type == item.getType()).\n-                        findFirst().orElse(AttrSchemaType.String);\n+        return Stream.of(AttrSchemaType.values()).\n+                filter(item -> type.isArray()\n+                ? ClassUtils.isAssignable(type.getComponentType(), item.getType().getComponentType(), true)\n+                : ClassUtils.isAssignable(type, item.getType(), true)).\n+                findFirst().orElse(AttrSchemaType.String);\n     }\n \n }"},{"sha":"eb447cf23226bfc62e47c2c204472471658cb671","filename":"common/idrepo/lib/src/test/java/org/apache/syncope/common/lib/types/AttrSchemaTypeTest.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9df3940e47ca3ec84f97549d20ea1e818995bbcc/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAttrSchemaTypeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9df3940e47ca3ec84f97549d20ea1e818995bbcc/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAttrSchemaTypeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAttrSchemaTypeTest.java?ref=9df3940e47ca3ec84f97549d20ea1e818995bbcc","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.Date;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.junit.jupiter.api.Test;\n+\n+public class AttrSchemaTypeTest {\n+\n+    @Test\n+    void checkLong() {\n+        assertEquals(AttrSchemaType.Long, AttrSchemaType.getAttrSchemaTypeByClass(Long.class));\n+        assertEquals(AttrSchemaType.Long, AttrSchemaType.getAttrSchemaTypeByClass(long.class));\n+    }\n+\n+    @Test\n+    void checkDouble() {\n+        assertEquals(AttrSchemaType.Double, AttrSchemaType.getAttrSchemaTypeByClass(Double.class));\n+        assertEquals(AttrSchemaType.Double, AttrSchemaType.getAttrSchemaTypeByClass(double.class));\n+    }\n+\n+    @Test\n+    void checkBoolean() {\n+        assertEquals(AttrSchemaType.Boolean, AttrSchemaType.getAttrSchemaTypeByClass(Boolean.class));\n+        assertEquals(AttrSchemaType.Boolean, AttrSchemaType.getAttrSchemaTypeByClass(boolean.class));\n+    }\n+\n+    @Test\n+    void checkDate() {\n+        assertEquals(AttrSchemaType.Date, AttrSchemaType.getAttrSchemaTypeByClass(Date.class));\n+    }\n+\n+    @Test\n+    void checkEnum() {\n+        assertEquals(AttrSchemaType.Enum, AttrSchemaType.getAttrSchemaTypeByClass(Enum.class));\n+        assertEquals(AttrSchemaType.Enum, AttrSchemaType.getAttrSchemaTypeByClass(CipherAlgorithm.class));\n+    }\n+\n+    @Test\n+    void checkBinary() {\n+        assertEquals(AttrSchemaType.Binary, AttrSchemaType.getAttrSchemaTypeByClass(Byte[].class));\n+        assertEquals(AttrSchemaType.Binary, AttrSchemaType.getAttrSchemaTypeByClass(byte[].class));\n+    }\n+\n+    @Test\n+    void checkString() {\n+        assertEquals(AttrSchemaType.String, AttrSchemaType.getAttrSchemaTypeByClass(String.class));\n+        assertEquals(AttrSchemaType.String, AttrSchemaType.getAttrSchemaTypeByClass(UserTO.class));\n+    }\n+}"}]}