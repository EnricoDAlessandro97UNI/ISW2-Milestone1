{"sha":"3316fd2447e5c4b7dc73106aaf35eef9a77baeca","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjMzMTZmZDI0NDdlNWM0YjdkYzczMTA2YWFmMzVlZWY5YTc3YmFlY2E=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-12-17T15:20:49Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-12-17T15:20:49Z"},"message":"paginated searc/list with some more information: total number of records, records in page, page size and page number\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246701 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b525f2a9174e08759c59c2582752493b8b7e7c02","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b525f2a9174e08759c59c2582752493b8b7e7c02"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3316fd2447e5c4b7dc73106aaf35eef9a77baeca","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3316fd2447e5c4b7dc73106aaf35eef9a77baeca","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3316fd2447e5c4b7dc73106aaf35eef9a77baeca","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3316fd2447e5c4b7dc73106aaf35eef9a77baeca/comments","author":null,"committer":null,"parents":[{"sha":"19767ed1ed0f82b0922afda7784484ec84a8a145","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/19767ed1ed0f82b0922afda7784484ec84a8a145","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/19767ed1ed0f82b0922afda7784484ec84a8a145"}],"stats":{"total":141,"additions":131,"deletions":10},"files":[{"sha":"cff88bea92257945721dc1add45954edc8c57d95","filename":"client/src/main/java/org/syncope/client/search/PaginatedResult.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3316fd2447e5c4b7dc73106aaf35eef9a77baeca/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FPaginatedResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3316fd2447e5c4b7dc73106aaf35eef9a77baeca/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FPaginatedResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FPaginatedResult.java?ref=3316fd2447e5c4b7dc73106aaf35eef9a77baeca","patch":"@@ -0,0 +1,75 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.search;\n+\n+import java.util.List;\n+import org.syncope.client.AbstractBaseBean;\n+import org.syncope.client.to.UserTO;\n+\n+/**\n+ * Search condition to be applied when comparing attribute values.\n+ */\n+public class PaginatedResult extends AbstractBaseBean {\n+\n+    private List<UserTO> records;\n+\n+    private Long totalRecords;\n+\n+    private int recordsInPage;\n+\n+    private int pageNumber;\n+\n+    private int pageSize;\n+\n+    public int getPageNumber() {\n+        return pageNumber;\n+    }\n+\n+    public void setPageNumber(int pageNumber) {\n+        this.pageNumber = pageNumber;\n+    }\n+\n+    public int getPageSize() {\n+        return pageSize;\n+    }\n+\n+    public void setPageSize(int pageSize) {\n+        this.pageSize = pageSize;\n+    }\n+\n+    public List<UserTO> getRecords() {\n+        return records;\n+    }\n+\n+    public void setRecords(List<UserTO> records) {\n+        this.records = records;\n+    }\n+\n+    public int getRecordsInPage() {\n+        return recordsInPage;\n+    }\n+\n+    public void setRecordsInPage(int recordsInPage) {\n+        this.recordsInPage = recordsInPage;\n+    }\n+\n+    public Long getTotalRecords() {\n+        return totalRecords;\n+    }\n+\n+    public void setTotalRecords(Long totalRecords) {\n+        this.totalRecords = totalRecords;\n+    }\n+}"},{"sha":"472a9a5db45243578552a26871f9f1b18710aa97","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeUserDAO.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3316fd2447e5c4b7dc73106aaf35eef9a77baeca/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3316fd2447e5c4b7dc73106aaf35eef9a77baeca/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java?ref=3316fd2447e5c4b7dc73106aaf35eef9a77baeca","patch":"@@ -16,6 +16,7 @@\n \n import java.util.List;\n import org.syncope.client.search.NodeCond;\n+import org.syncope.client.search.PaginatedResult;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n@@ -32,10 +33,12 @@ public interface SyncopeUserDAO extends DAO {\n \n     List<SyncopeUser> findAll(int page, int itemsPerPage);\n \n+    Long count();\n+\n     List<SyncopeUser> search(NodeCond searchCondition);\n \n     List<SyncopeUser> search(NodeCond searchCondition,\n-            int page, int itemsPerPage);\n+            int page, int itemsPerPage, PaginatedResult paginatedResult);\n \n     SyncopeUser save(SyncopeUser syncopeUser)\n             throws InvalidEntityException;"},{"sha":"9fa69daaeaea636467305eee1a54c55f6d7b0fd0","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3316fd2447e5c4b7dc73106aaf35eef9a77baeca/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3316fd2447e5c4b7dc73106aaf35eef9a77baeca/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=3316fd2447e5c4b7dc73106aaf35eef9a77baeca","patch":"@@ -29,6 +29,7 @@\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n+import org.syncope.client.search.PaginatedResult;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -146,6 +147,15 @@ public final List<SyncopeUser> findAll(\n         return query.getResultList();\n     }\n \n+    @Override\n+    public final Long count() {\n+\n+        final Query query = entityManager.createQuery(\n+                \"SELECT count(e.id) FROM SyncopeUser e\");\n+\n+        return (Long) query.getSingleResult();\n+    }\n+\n     @Override\n     public SyncopeUser save(final SyncopeUser syncopeUser) {\n         return entityManager.merge(syncopeUser);\n@@ -177,12 +187,14 @@ public void delete(final Long id) {\n \n     @Override\n     public List<SyncopeUser> search(final NodeCond searchCondition) {\n-        return search(searchCondition, -1, -1);\n+        return search(searchCondition, -1, -1, null);\n     }\n \n     @Override\n     public List<SyncopeUser> search(final NodeCond searchCondition,\n-            final int page, final int itemsPerPage) {\n+            final int page,\n+            final int itemsPerPage,\n+            final PaginatedResult paginatedResult) {\n \n         LOG.debug(\"Search condition:\\n{}\", searchCondition);\n \n@@ -195,6 +207,11 @@ public List<SyncopeUser> search(final NodeCond searchCondition,\n             result = Collections.EMPTY_LIST;\n         }\n \n+        if (paginatedResult != null) {\n+            paginatedResult.setTotalRecords(\n+                    new Long((long) result.size()));\n+        }\n+\n         // TODO: temporary solution to the paginated search\n         int from = itemsPerPage * (page <= 0 ? 0 : page - 1);\n "},{"sha":"95f7f48a412c73227ea0cdc99e1e845cbd3bb05e","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":26,"deletions":7,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3316fd2447e5c4b7dc73106aaf35eef9a77baeca/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3316fd2447e5c4b7dc73106aaf35eef9a77baeca/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=3316fd2447e5c4b7dc73106aaf35eef9a77baeca","patch":"@@ -48,6 +48,7 @@\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.search.NodeCond;\n+import org.syncope.client.search.PaginatedResult;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.WorkflowActionsTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -229,17 +230,27 @@ public List<UserTO> list() {\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/paginatedList/{page}/{size}\")\n     @Transactional(readOnly = true)\n-    public List<UserTO> paginatedList(\n+    public PaginatedResult paginatedList(\n             @PathVariable(\"page\") final int page,\n             @PathVariable(\"size\") final int size) {\n \n+        PaginatedResult paginatedResult = new PaginatedResult();\n+        paginatedResult.setPageNumber(page);\n+        paginatedResult.setPageSize(size);\n+\n+        Long totalUsers = syncopeUserDAO.count();\n+        paginatedResult.setTotalRecords(totalUsers);\n+\n         List<SyncopeUser> users = syncopeUserDAO.findAll(page, size);\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n         for (SyncopeUser user : users) {\n             userTOs.add(userDataBinder.getUserTO(user, userWorkflow));\n         }\n \n-        return userTOs;\n+        paginatedResult.setRecordsInPage(userTOs.size());\n+        paginatedResult.setRecords(userTOs);\n+\n+        return paginatedResult;\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n@@ -310,27 +321,35 @@ public List<UserTO> search(@RequestBody NodeCond searchCondition)\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/paginatedSearch/{page}/{size}\")\n     @Transactional(readOnly = true)\n-    public List<UserTO> paginatedSearch(\n+    public PaginatedResult paginatedSearch(\n             @RequestBody final NodeCond searchCondition,\n             @PathVariable(\"page\") final int page,\n             @PathVariable(\"size\") final int size)\n             throws InvalidSearchConditionException {\n \n         LOG.debug(\"User search called with condition {}\", searchCondition);\n \n+        PaginatedResult paginatedResult = new PaginatedResult();\n+        paginatedResult.setPageNumber(page);\n+        paginatedResult.setPageSize(size);\n+\n         if (!searchCondition.checkValidity()) {\n             LOG.error(\"Invalid search condition: {}\", searchCondition);\n             throw new InvalidSearchConditionException();\n         }\n \n-        List<SyncopeUser> matchingUsers =\n-                syncopeUserDAO.search(searchCondition, page, size);\n-        List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n+        final List<SyncopeUser> matchingUsers = syncopeUserDAO.search(\n+                searchCondition, page, size, paginatedResult);\n+\n+        final List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n             result.add(userDataBinder.getUserTO(user, userWorkflow));\n         }\n \n-        return result;\n+        paginatedResult.setRecordsInPage(result.size());\n+        paginatedResult.setRecords(result);\n+\n+        return paginatedResult;\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")"},{"sha":"1c6b5cf4f46bad74488953f09c59507643911249","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3316fd2447e5c4b7dc73106aaf35eef9a77baeca/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3316fd2447e5c4b7dc73106aaf35eef9a77baeca/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=3316fd2447e5c4b7dc73106aaf35eef9a77baeca","patch":"@@ -41,6 +41,13 @@ public final void findAll() {\n         assertEquals(\"did not get expected number of users \", 4, list.size());\n     }\n \n+    @Test\n+    public final void count() {\n+        Long count = syncopeUserDAO.count();\n+        assertNotNull(count);\n+        assertEquals(4L, count.longValue());\n+    }\n+\n     @Test\n     public final void findAllByPageAndSize() {\n         // get first page"}]}