{"sha":"62f0bd6b004f795771cba22771b5d3c4ab3587a0","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjYyZjBiZDZiMDA0Zjc5NTc3MWNiYTIyNzcxYjVkM2M0YWIzNTg3YTA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-05-10T12:26:26Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-05-10T13:17:28Z"},"message":"[SYNCOPE-1460] Dynamic Domain Management","tree":{"sha":"3ba06b7555590fa1748c2ce002dc66cfbc357aca","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3ba06b7555590fa1748c2ce002dc66cfbc357aca"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/62f0bd6b004f795771cba22771b5d3c4ab3587a0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/62f0bd6b004f795771cba22771b5d3c4ab3587a0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/62f0bd6b004f795771cba22771b5d3c4ab3587a0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/62f0bd6b004f795771cba22771b5d3c4ab3587a0/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"824066b70d3f041a1d76aa85b1f6709bea88440e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/824066b70d3f041a1d76aa85b1f6709bea88440e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/824066b70d3f041a1d76aa85b1f6709bea88440e"}],"stats":{"total":3653,"additions":2224,"deletions":1429},"files":[{"sha":"747ab5061ab9e9bca51a580b6b810de1243d83ce","filename":"client/enduser/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/client%2Fenduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/client%2Fenduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fpom.xml?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -180,6 +180,11 @@ under the License.\n       <artifactId>jquery-ui</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.apache.commons</groupId>\n+      <artifactId>commons-text</artifactId>\n+    </dependency>\n+            \n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>"},{"sha":"dbf4854e9db05ccece4104bcc5206ce0c41cb0cf","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeWebApplication.java","status":"modified","additions":8,"deletions":11,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -32,7 +32,6 @@\n import java.util.Map;\n import java.util.Properties;\n import java.util.stream.Collectors;\n-import org.apache.commons.collections4.ListUtils;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -44,12 +43,8 @@\n import org.apache.syncope.client.console.pages.Dashboard;\n import org.apache.syncope.client.console.pages.Login;\n import org.apache.syncope.client.console.themes.AdminLTE;\n-import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.PropertyUtils;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.EntityTO;\n-import org.apache.syncope.common.rest.api.service.DomainService;\n import org.apache.wicket.Page;\n import org.apache.wicket.authroles.authentication.AbstractAuthenticatedWebSession;\n import org.apache.wicket.authroles.authentication.AuthenticatedWebSession;\n@@ -76,8 +71,11 @@\n import org.apache.syncope.client.ui.commons.BaseApplication;\n import org.apache.syncope.client.ui.commons.SyncopeUIRequestCycleListener;\n import org.apache.syncope.client.ui.commons.Constants;\n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.wicket.request.component.IRequestablePage;\n import org.apache.wicket.request.cycle.IRequestCycleListener;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n@@ -107,6 +105,9 @@ public static SyncopeWebApplication get() {\n     @Autowired\n     private ServiceOps serviceOps;\n \n+    @Autowired\n+    private DomainOps domainOps;\n+\n     @Value(\"${service.discovery.address}\")\n     private String address;\n \n@@ -368,12 +369,8 @@ public SyncopeClientFactoryBean newClientFactory() {\n     public List<String> getDomains() {\n         synchronized (LOG) {\n             if (domains == null) {\n-                domains = newClientFactory().create(\n-                        new AnonymousAuthenticationHandler(anonymousUser, anonymousKey)).\n-                        getService(DomainService.class).list().stream().map(EntityTO::getKey).\n-                        collect(Collectors.toList());\n+                domains = domainOps.list().stream().map(Domain::getKey).sorted().collect(Collectors.toList());\n                 domains.add(0, SyncopeConstants.MASTER_DOMAIN);\n-                domains = ListUtils.unmodifiableList(domains);\n             }\n         }\n         return domains;"},{"sha":"d0cc73d0717285674a97f5a4c84a214bd462422c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/NetworkServices.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FNetworkServices.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FNetworkServices.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FNetworkServices.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -24,7 +24,7 @@\n import java.util.stream.Stream;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.panels.NetworkServiceDirectoryPanel;\n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.html.WebMarkupContainer;"},{"sha":"206cd2e8bcbbcb45d2e6a8bec4fcaed220612d8b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/NetworkServiceDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNetworkServiceDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNetworkServiceDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNetworkServiceDirectoryPanel.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.client.console.rest.SyncopeRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;"},{"sha":"cda2a385706342c857e80a643f496affff24d631","filename":"client/idrepo/enduser/pom.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/client%2Fidrepo%2Fenduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/client%2Fidrepo%2Fenduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fpom.xml?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -154,7 +154,12 @@ under the License.\n       <groupId>org.webjars</groupId>\n       <artifactId>jQuery-slimScroll</artifactId>\n     </dependency>\n-    \n+\n+    <dependency>\n+      <groupId>org.apache.commons</groupId>\n+      <artifactId>commons-text</artifactId>\n+    </dependency>\n+            \n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>"},{"sha":"d1c2a2bfd579b54c17d103fb5bd037cbbf4f2930","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeWebApplication.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -35,7 +35,6 @@\n import java.util.Map;\n import java.util.Properties;\n import java.util.stream.Collectors;\n-import org.apache.commons.collections4.ListUtils;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.monitor.FileAlterationListener;\n import org.apache.commons.io.monitor.FileAlterationListenerAdaptor;\n@@ -50,16 +49,15 @@\n import org.apache.syncope.client.enduser.pages.MustChangePassword;\n import org.apache.syncope.client.enduser.pages.Self;\n import org.apache.syncope.client.enduser.pages.SelfConfirmPasswordReset;\n-import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.client.ui.commons.BaseApplication;\n import org.apache.syncope.client.ui.commons.SyncopeUIRequestCycleListener;\n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n import org.apache.syncope.common.lib.PropertyUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.EntityTO;\n-import org.apache.syncope.common.rest.api.service.DomainService;\n import org.apache.wicket.Page;\n import org.apache.wicket.Session;\n import org.apache.wicket.WicketRuntimeException;\n@@ -107,6 +105,9 @@ public static SyncopeWebApplication get() {\n     @Autowired\n     private ServiceOps serviceOps;\n \n+    @Autowired\n+    private DomainOps domainOps;\n+\n     @Value(\"${service.discovery.address}\")\n     private String address;\n \n@@ -337,12 +338,8 @@ public SyncopeClientFactoryBean newClientFactory() {\n     public List<String> getDomains() {\n         synchronized (LOG) {\n             if (domains == null) {\n-                domains = newClientFactory().create(\n-                        new AnonymousAuthenticationHandler(anonymousUser, anonymousKey)).\n-                        getService(DomainService.class).list().stream().map(EntityTO::getKey).\n-                        collect(Collectors.toList());\n+                domains = domainOps.list().stream().map(Domain::getKey).sorted().collect(Collectors.toList());\n                 domains.add(0, SyncopeConstants.MASTER_DOMAIN);\n-                domains = ListUtils.unmodifiableList(domains);\n             }\n         }\n         return domains;"},{"sha":"b5c3a37612e524f2f571f26dcc3874d8c2064332","filename":"common/idrepo/lib/pom.xml","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fidrepo%2Flib%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fidrepo%2Flib%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fpom.xml?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -57,10 +57,6 @@ under the License.\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-lang3</artifactId>\n     </dependency>\n-    <dependency>\n-      <groupId>org.apache.commons</groupId>\n-      <artifactId>commons-text</artifactId>\n-    </dependency>\n       \n     <dependency>\n       <groupId>org.slf4j</groupId>"},{"sha":"540eccd5c868759ff2acd4817eade57f29994689","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/DomainCR.java","status":"removed","additions":0,"deletions":197,"changes":197,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824066b70d3f041a1d76aa85b1f6709bea88440e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FDomainCR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824066b70d3f041a1d76aa85b1f6709bea88440e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FDomainCR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FDomainCR.java?ref=824066b70d3f041a1d76aa85b1f6709bea88440e","patch":"@@ -1,197 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.request;\n-\n-import java.io.Serializable;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-\n-@XmlRootElement(name = \"domainCR\")\n-@XmlType\n-public class DomainCR implements Serializable {\n-\n-    private static final long serialVersionUID = 3842608635517859919L;\n-\n-    public static class Builder {\n-\n-        private final DomainCR conf;\n-\n-        public Builder(final String domainName) {\n-            this.conf = new DomainCR();\n-            this.conf.domainName = domainName;\n-        }\n-\n-        public Builder jdbcDriver(final String jdbcDriver) {\n-            this.conf.jdbcDriver = jdbcDriver;\n-            return this;\n-        }\n-\n-        public Builder jdbcURL(final String jdbcURL) {\n-            this.conf.jdbcURL = jdbcURL;\n-            return this;\n-        }\n-\n-        public Builder dbSchema(final String dbSchema) {\n-            if (StringUtils.isNotBlank(dbSchema)) {\n-                this.conf.dbSchema = dbSchema;\n-            }\n-            return this;\n-        }\n-\n-        public Builder dbUsername(final String dbUsername) {\n-            this.conf.dbUsername = dbUsername;\n-            return this;\n-        }\n-\n-        public Builder dbPassword(final String dbPassword) {\n-            this.conf.dbPassword = dbPassword;\n-            return this;\n-        }\n-\n-        public Builder transactionIsolation(final String transactionIsolation) {\n-            this.conf.transactionIsolation = transactionIsolation;\n-            return this;\n-        }\n-\n-        public Builder maxPoolSize(final int maxPoolSize) {\n-            this.conf.maxPoolSize = maxPoolSize;\n-            return this;\n-        }\n-\n-        public Builder minIdle(final int minIdle) {\n-            this.conf.minIdle = minIdle;\n-            return this;\n-        }\n-\n-        public Builder auditSql(final String auditSql) {\n-            this.conf.auditSql = auditSql;\n-            return this;\n-        }\n-\n-        public Builder orm(final String orm) {\n-            this.conf.orm = orm;\n-            return this;\n-        }\n-\n-        public Builder databasePlatform(final String databasePlatform) {\n-            this.conf.databasePlatform = databasePlatform;\n-            return this;\n-        }\n-\n-        public Builder adminPassword(final String adminPassword) {\n-            this.conf.adminPassword = adminPassword;\n-            return this;\n-        }\n-\n-        public Builder adminCipherAlgorithm(final CipherAlgorithm adminCipherAlgorithm) {\n-            this.conf.adminCipherAlgorithm = adminCipherAlgorithm;\n-            return this;\n-        }\n-\n-        public DomainCR build() {\n-            return this.conf;\n-        }\n-    }\n-\n-    private String domainName;\n-\n-    private String jdbcDriver;\n-\n-    private String jdbcURL;\n-\n-    private String dbSchema;\n-\n-    private String dbUsername;\n-\n-    private String dbPassword;\n-\n-    private String transactionIsolation = \"TRANSACTION_READ_COMMITTED\";\n-\n-    private int maxPoolSize = 10;\n-\n-    private int minIdle = 2;\n-\n-    private String auditSql = \"audit.sql\";\n-\n-    private String orm = \"META-INF/spring-orm.xml\";\n-\n-    private String databasePlatform;\n-\n-    private String adminPassword;\n-\n-    private CipherAlgorithm adminCipherAlgorithm = CipherAlgorithm.SHA512;\n-\n-    public String getDomainName() {\n-        return domainName;\n-    }\n-\n-    public String getJdbcDriver() {\n-        return jdbcDriver;\n-    }\n-\n-    public String getJdbcURL() {\n-        return jdbcURL;\n-    }\n-\n-    public String getDbSchema() {\n-        return dbSchema;\n-    }\n-\n-    public String getDbUsername() {\n-        return dbUsername;\n-    }\n-\n-    public String getDbPassword() {\n-        return dbPassword;\n-    }\n-\n-    public String getTransactionIsolation() {\n-        return transactionIsolation;\n-    }\n-\n-    public int getMaxPoolSize() {\n-        return maxPoolSize;\n-    }\n-\n-    public int getMinIdle() {\n-        return minIdle;\n-    }\n-\n-    public String getAuditSql() {\n-        return auditSql;\n-    }\n-\n-    public String getOrm() {\n-        return orm;\n-    }\n-\n-    public String getDatabasePlatform() {\n-        return databasePlatform;\n-    }\n-\n-    public String getAdminPassword() {\n-        return adminPassword;\n-    }\n-\n-    public CipherAlgorithm getAdminCipherAlgorithm() {\n-        return adminCipherAlgorithm;\n-    }\n-}"},{"sha":"4e9c1d9468532caaaf2335c3ba4c9189e1c0acfc","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/DomainTO.java","status":"removed","additions":0,"deletions":63,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824066b70d3f041a1d76aa85b1f6709bea88440e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDomainTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824066b70d3f041a1d76aa85b1f6709bea88440e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDomainTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDomainTO.java?ref=824066b70d3f041a1d76aa85b1f6709bea88440e","patch":"@@ -1,63 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.to;\n-\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-\n-@XmlRootElement(name = \"domain\")\n-@XmlType\n-public class DomainTO implements EntityTO {\n-\n-    private static final long serialVersionUID = -7938075259986084934L;\n-\n-    private String key;\n-\n-    private String adminPwd;\n-\n-    private CipherAlgorithm adminCipherAlgorithm;\n-\n-    @Override\n-    public String getKey() {\n-        return key;\n-    }\n-\n-    @Override\n-    public void setKey(final String key) {\n-        this.key = key;\n-    }\n-\n-    public String getAdminPwd() {\n-        return adminPwd;\n-    }\n-\n-    public void setAdminPwd(final String adminPwd) {\n-        this.adminPwd = adminPwd;\n-    }\n-\n-    public CipherAlgorithm getAdminCipherAlgorithm() {\n-        return adminCipherAlgorithm;\n-    }\n-\n-    public void setAdminCipherAlgorithm(final CipherAlgorithm adminCipherAlgorithm) {\n-        this.adminCipherAlgorithm = adminCipherAlgorithm;\n-    }\n-\n-}"},{"sha":"93c717ac6af0d758c7124904ab53f3165a62bbdd","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java","status":"removed","additions":0,"deletions":122,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824066b70d3f041a1d76aa85b1f6709bea88440e/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDomainService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824066b70d3f041a1d76aa85b1f6709bea88440e/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDomainService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDomainService.java?ref=824066b70d3f041a1d76aa85b1f6709bea88440e","patch":"@@ -1,122 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.rest.api.service;\n-\n-import io.swagger.v3.oas.annotations.Parameter;\n-import io.swagger.v3.oas.annotations.enums.ParameterIn;\n-import io.swagger.v3.oas.annotations.headers.Header;\n-import io.swagger.v3.oas.annotations.media.Schema;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n-import java.util.List;\n-import javax.validation.constraints.NotNull;\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.DELETE;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.PUT;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.DomainTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-\n-/**\n- * REST operations for domains.\n- */\n-@Tag(name = \"Domains\")\n-@SecurityRequirements({\n-    @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\") })\n-@Path(\"domains\")\n-public interface DomainService extends JAXRSService {\n-\n-    /**\n-     * Returns a list of all domains.\n-     *\n-     * @return list of all domains.\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<DomainTO> list();\n-\n-    /**\n-     * Returns domain with matching key.\n-     *\n-     * @param key domain key to be read\n-     * @return domain with matching key\n-     */\n-    @GET\n-    @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    DomainTO read(@NotNull @PathParam(\"key\") String key);\n-\n-    /**\n-     * Creates a new domain.\n-     *\n-     * @param domainTO domain to be created\n-     * @return Response object featuring Location header of created domain\n-     */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"201\",\n-                    description = \"Domain successfully created\", headers = {\n-                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-                        @Schema(type = \"string\"),\n-                        description = \"Key value for the entity created\"),\n-                @Header(name = HttpHeaders.LOCATION, schema =\n-                        @Schema(type = \"string\"),\n-                        description = \"URL of the entity created\") }))\n-    @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response create(@NotNull DomainTO domainTO);\n-\n-    /**\n-     * Updates the domain matching the provided key.\n-     *\n-     * @param domainTO domain to be stored\n-     */\n-    @Parameter(name = \"key\", description = \"Domain's key\", in = ParameterIn.PATH, schema =\n-            @Schema(type = \"string\"))\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n-    @PUT\n-    @Path(\"{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void update(@NotNull DomainTO domainTO);\n-\n-    /**\n-     * Deletes the domain matching the provided key.\n-     *\n-     * @param key domain key to be deleted\n-     */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n-    @DELETE\n-    @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void delete(@NotNull @PathParam(\"key\") String key);\n-}"},{"sha":"5dcf5ad8a688461ab8f9a3c9b8ad8a387ca8b246","filename":"common/keymaster/client-api/pom.xml","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-api%2Fpom.xml?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -43,11 +43,6 @@ under the License.\n       <artifactId>syncope-common-idrepo-lib</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n-\n-    <dependency>\n-      <groupId>org.springframework</groupId>\n-      <artifactId>spring-beans</artifactId>\n-    </dependency>\n   </dependencies>\n \n   <build>"},{"sha":"00224b2c7b9eb36502b8af623c8ef8e115bbddb0","filename":"common/keymaster/client-api/src/main/java/org/apache/syncope/common/keymaster/client/api/DomainOps.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FDomainOps.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.keymaster.client.api;\n+\n+import java.util.List;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+\n+/**\n+ * Operations available for domains.\n+ */\n+public interface DomainOps {\n+\n+    List<Domain> list();\n+\n+    Domain read(String key);\n+\n+    void create(Domain domain);\n+\n+    void changeAdminPassword(String key, String password, CipherAlgorithm cipherAlgorithm);\n+\n+    void adjustPoolSize(String key, int maxPoolSize, int minIdle);\n+\n+    void delete(String key);\n+}"},{"sha":"95feeaf18fe3cafd3ea100187dcdf3d0f1c40ecd","filename":"common/keymaster/client-api/src/main/java/org/apache/syncope/common/keymaster/client/api/DomainWatcher.java","status":"renamed","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FDomainWatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FDomainWatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FDomainWatcher.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -16,16 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.api.data;\n+package org.apache.syncope.common.keymaster.client.api;\n \n-import org.apache.syncope.common.lib.to.DomainTO;\n-import org.apache.syncope.core.persistence.api.entity.Domain;\n+import java.util.List;\n \n-public interface DomainDataBinder {\n-\n-    Domain create(DomainTO domainTO);\n-\n-    void update(Domain domain, DomainTO domainTO);\n+/**\n+ * Interface to be implemented by anyone that wants to be notified when domains are created / updated / deleted.\n+ */\n+public interface DomainWatcher {\n \n-    DomainTO getDomainTO(Domain domain);\n+    void update(List<String> domains);\n }","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/DomainDataBinder.java"},{"sha":"75dc3cb28ccef689a293ef3759e3916ccd0b7843","filename":"common/keymaster/client-api/src/main/java/org/apache/syncope/common/keymaster/client/api/ServiceOps.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FServiceOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FServiceOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FServiceOps.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.keymaster.client.api;\n \n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import java.util.List;\n \n /**"},{"sha":"3e659acdd84fc15bf47557f8a6376e050248b30c","filename":"common/keymaster/client-api/src/main/java/org/apache/syncope/common/keymaster/client/api/model/Domain.java","status":"added","additions":343,"deletions":0,"changes":343,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2Fmodel%2FDomain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2Fmodel%2FDomain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2Fmodel%2FDomain.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,343 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.keymaster.client.api.model;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.cxf.helpers.IOUtils;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class Domain implements Serializable {\n+\n+    private static final long serialVersionUID = -5881851479361505961L;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(Domain.class);\n+\n+    public enum TransactionIsolation {\n+        TRANSACTION_NONE,\n+        TRANSACTION_READ_COMMITTED,\n+        TRANSACTION_READ_UNCOMMITTED,\n+        TRANSACTION_REPEATABLE_READ,\n+        TRANSACTION_SERIALIZABLE\n+\n+    }\n+\n+    public static class Builder {\n+\n+        private final Domain domain;\n+\n+        public Builder(final String key) {\n+            this.domain = new Domain();\n+            this.domain.key = key;\n+        }\n+\n+        public Builder jdbcDriver(final String jdbcDriver) {\n+            this.domain.jdbcDriver = jdbcDriver;\n+            return this;\n+        }\n+\n+        public Builder jdbcURL(final String jdbcURL) {\n+            this.domain.jdbcURL = jdbcURL;\n+            return this;\n+        }\n+\n+        public Builder dbSchema(final String dbSchema) {\n+            if (StringUtils.isNotBlank(dbSchema)) {\n+                this.domain.dbSchema = dbSchema;\n+            }\n+            return this;\n+        }\n+\n+        public Builder dbUsername(final String dbUsername) {\n+            this.domain.dbUsername = dbUsername;\n+            return this;\n+        }\n+\n+        public Builder dbPassword(final String dbPassword) {\n+            this.domain.dbPassword = dbPassword;\n+            return this;\n+        }\n+\n+        public Builder transactionIsolation(final TransactionIsolation transactionIsolation) {\n+            this.domain.transactionIsolation = transactionIsolation;\n+            return this;\n+        }\n+\n+        public Builder maxPoolSize(final int maxPoolSize) {\n+            this.domain.maxPoolSize = maxPoolSize;\n+            return this;\n+        }\n+\n+        public Builder minIdle(final int minIdle) {\n+            this.domain.minIdle = minIdle;\n+            return this;\n+        }\n+\n+        public Builder auditSql(final String auditSql) {\n+            this.domain.auditSql = auditSql;\n+            return this;\n+        }\n+\n+        public Builder orm(final String orm) {\n+            this.domain.orm = orm;\n+            return this;\n+        }\n+\n+        public Builder databasePlatform(final String databasePlatform) {\n+            this.domain.databasePlatform = databasePlatform;\n+            return this;\n+        }\n+\n+        public Builder adminPassword(final String adminPassword) {\n+            this.domain.adminPassword = adminPassword;\n+            return this;\n+        }\n+\n+        public Builder adminCipherAlgorithm(final CipherAlgorithm adminCipherAlgorithm) {\n+            this.domain.adminCipherAlgorithm = adminCipherAlgorithm;\n+            return this;\n+        }\n+\n+        public Builder content(final String content) {\n+            this.domain.content = content;\n+            return this;\n+        }\n+\n+        public Builder keymasterConfParams(final String keymasterConfParams) {\n+            this.domain.keymasterConfParams = keymasterConfParams;\n+            return this;\n+        }\n+\n+        public Domain build() {\n+            return this.domain;\n+        }\n+    }\n+\n+    private String key;\n+\n+    private String jdbcDriver;\n+\n+    private String jdbcURL;\n+\n+    private String dbSchema;\n+\n+    private String dbUsername;\n+\n+    private String dbPassword;\n+\n+    private TransactionIsolation transactionIsolation = TransactionIsolation.TRANSACTION_READ_COMMITTED;\n+\n+    private int maxPoolSize = 10;\n+\n+    private int minIdle = 2;\n+\n+    private String auditSql = \"audit.sql\";\n+\n+    private String orm = \"META-INF/spring-orm.xml\";\n+\n+    private String databasePlatform;\n+\n+    private String adminPassword;\n+\n+    private CipherAlgorithm adminCipherAlgorithm = CipherAlgorithm.SHA512;\n+\n+    private String content;\n+\n+    private String keymasterConfParams;\n+\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    public String getJdbcDriver() {\n+        return jdbcDriver;\n+    }\n+\n+    public String getJdbcURL() {\n+        return jdbcURL;\n+    }\n+\n+    public String getDbSchema() {\n+        return dbSchema;\n+    }\n+\n+    public String getDbUsername() {\n+        return dbUsername;\n+    }\n+\n+    public String getDbPassword() {\n+        return dbPassword;\n+    }\n+\n+    public TransactionIsolation getTransactionIsolation() {\n+        return transactionIsolation;\n+    }\n+\n+    public int getMaxPoolSize() {\n+        return maxPoolSize;\n+    }\n+\n+    public void setMaxPoolSize(final int maxPoolSize) {\n+        this.maxPoolSize = maxPoolSize;\n+    }\n+\n+    public int getMinIdle() {\n+        return minIdle;\n+    }\n+\n+    public void setMinIdle(final int minIdle) {\n+        this.minIdle = minIdle;\n+    }\n+\n+    public String getAuditSql() {\n+        return auditSql;\n+    }\n+\n+    public String getOrm() {\n+        return orm;\n+    }\n+\n+    public String getDatabasePlatform() {\n+        return databasePlatform;\n+    }\n+\n+    public String getAdminPassword() {\n+        return adminPassword;\n+    }\n+\n+    public void setAdminPassword(final String adminPassword) {\n+        this.adminPassword = adminPassword;\n+    }\n+\n+    public CipherAlgorithm getAdminCipherAlgorithm() {\n+        return adminCipherAlgorithm;\n+    }\n+\n+    public void setAdminCipherAlgorithm(final CipherAlgorithm adminCipherAlgorithm) {\n+        this.adminCipherAlgorithm = adminCipherAlgorithm;\n+    }\n+\n+    private String read(final String filename) {\n+        String read = null;\n+        try {\n+            read = IOUtils.toString(getClass().getResourceAsStream(\"/\" + filename));\n+        } catch (IOException e) {\n+            LOG.error(\"Could not read {}\", filename, e);\n+        }\n+\n+        return read;\n+    }\n+\n+    public String getContent() {\n+        if (content == null) {\n+            content = read(\"defaultContent.xml\");\n+        }\n+\n+        return content;\n+    }\n+\n+    public String getKeymasterConfParams() {\n+        if (keymasterConfParams == null) {\n+            keymasterConfParams = read(\"defaultKeymasterConfParams.json\");\n+        }\n+\n+        return keymasterConfParams;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(key).\n+                append(jdbcDriver).\n+                append(jdbcURL).\n+                append(dbSchema).\n+                append(dbUsername).\n+                append(dbPassword).\n+                append(transactionIsolation).\n+                append(maxPoolSize).\n+                append(minIdle).\n+                append(auditSql).\n+                append(orm).\n+                append(databasePlatform).\n+                append(adminPassword).\n+                append(adminCipherAlgorithm).\n+                append(content).\n+                append(keymasterConfParams).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final Domain other = (Domain) obj;\n+        return new EqualsBuilder().\n+                append(key, other.key).\n+                append(jdbcDriver, other.jdbcDriver).\n+                append(jdbcURL, other.jdbcURL).\n+                append(dbSchema, other.dbSchema).\n+                append(dbUsername, other.dbUsername).\n+                append(dbPassword, other.dbPassword).\n+                append(transactionIsolation, other.transactionIsolation).\n+                append(maxPoolSize, other.maxPoolSize).\n+                append(minIdle, other.minIdle).\n+                append(auditSql, other.auditSql).\n+                append(orm, other.orm).\n+                append(databasePlatform, other.databasePlatform).\n+                append(adminPassword, other.adminPassword).\n+                append(adminCipherAlgorithm, other.adminCipherAlgorithm).\n+                append(content, other.content).\n+                append(keymasterConfParams, other.keymasterConfParams).\n+                build();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Domain{\"\n+                + \"key=\" + key\n+                + \", jdbcDriver=\" + jdbcDriver\n+                + \", jdbcURL=\" + jdbcURL\n+                + \", dbSchema=\" + dbSchema\n+                + \", dbUsername=\" + dbUsername\n+                + \", dbPassword=\" + dbPassword\n+                + \", transactionIsolation=\" + transactionIsolation\n+                + \", maxPoolSize=\" + maxPoolSize\n+                + \", minIdle=\" + minIdle\n+                + \", auditSql=\" + auditSql\n+                + \", orm=\" + orm\n+                + \", databasePlatform=\" + databasePlatform\n+                + \", adminPassword=\" + adminPassword\n+                + \", adminCipherAlgorithm=\" + adminCipherAlgorithm\n+                + \", content=\" + content\n+                + \", keymasterConfParams=\" + keymasterConfParams\n+                + '}';\n+    }\n+}"},{"sha":"42579d9d0faa2ae203a624269ffcd544d1f9f421","filename":"common/keymaster/client-api/src/main/java/org/apache/syncope/common/keymaster/client/api/model/NetworkService.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2Fmodel%2FNetworkService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2Fmodel%2FNetworkService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2Fmodel%2FNetworkService.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.keymaster.client.api;\n+package org.apache.syncope.common.keymaster.client.api.model;\n \n import java.io.Serializable;\n import org.apache.commons.lang3.builder.EqualsBuilder;","previous_filename":"common/keymaster/client-api/src/main/java/org/apache/syncope/common/keymaster/client/api/NetworkService.java"},{"sha":"477768a789edcdae7b7f08a6a07a38a07d86876d","filename":"common/keymaster/client-api/src/main/resources/defaultContent.xml","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fresources%2FdefaultContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fresources%2FdefaultContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fresources%2FdefaultContent.xml?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,96 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<dataset>\n+  <Realm id=\"ea696a4f-e77a-4ef1-be67-8f8093bc8686\" name=\"/\"/>\n+\n+  <AnyType id=\"USER\" kind=\"USER\"/>\n+  <AnyTypeClass id=\"BaseUser\"/>\n+  <AnyType_AnyTypeClass anyType_id=\"USER\" anyTypeClass_id=\"BaseUser\"/>\n+\n+  <AnyType id=\"GROUP\" kind=\"GROUP\"/>\n+        \n+  <!-- Actual plain schemas -->\n+  <Implementation id=\"EmailAddressValidator\" type=\"VALIDATOR\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.EmailAddressValidator\"/>\n+  <SyncopeSchema id=\"email\"/>\n+  <PlainSchema id=\"email\" type=\"String\" anyTypeClass_id=\"BaseUser\"\n+               mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n+               validator_id=\"EmailAddressValidator\"/>\n+\n+  <Implementation id=\"PullJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate\"/>\n+  <Implementation id=\"PushJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate\"/>\n+\n+  <Implementation id=\"ExpiredAccessTokenCleanup\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.provisioning.java.job.ExpiredAccessTokenCleanup\"/>\n+  <Task DTYPE=\"SchedTask\" id=\"89de5014-e3f5-4462-84d8-d97575740baf\" name=\"Access Token Cleanup Task\"  active=\"1\"\n+        jobDelegate_id=\"ExpiredAccessTokenCleanup\" cronExpression=\"0 0/5 * * * ?\"/>\n+  \n+  <!-- Password reset notifications -->\n+  <MailTemplate id=\"requestPasswordReset\"\n+                textTemplate=\"Hi,\n+a password reset was request for ${user.getUsername()}.\n+\n+In order to complete this request, you need to visit this link:\n+\n+http://localhost:9080/syncope-enduser/confirmpasswordreset?token=${input.get(0).replaceAll(' ', '%20')}\n+\n+If you did not request this reset, just ignore the present e-mail.\n+\n+Best regards.\"\n+                htmlTemplate=\"&lt;html&gt;\n+&lt;body&gt;\n+&lt;p&gt;Hi,\n+a password reset was request for ${user.getUsername()}.&lt;/p&gt;\n+\n+&lt;p&gt;In order to complete this request, you need to visit this \n+&lt;a href=&quot;http://localhost:9080/syncope-enduser/confirmpasswordreset?token=${input.get(0).replaceAll(' ', '%20')}&quot;&gt;link&lt;/a&gt;&lt;/p&gt;.\n+\n+&lt;p&gt;If you did not request this reset, just ignore the present e-mail.&lt;/p&gt;\n+\n+&lt;p&gt;Best regards.&lt;/p&gt;\n+&lt;/body&gt;\n+&lt;/html&gt;\"/>\n+  <MailTemplate id=\"confirmPasswordReset\"\n+                textTemplate=\"Hi,\n+we are happy to inform you that the password request was successfully executed for your account.\n+\n+Best regards.\"\n+                htmlTemplate=\"&lt;html&gt;\n+&lt;body&gt;\n+&lt;p&gt;Hi,&lt;/br&gt;\n+we are happy to inform you that the password request was successfully executed for your account.&lt;/p&gt;\n+\n+&lt;p&gt;Best regards.&lt;/p&gt;\n+&lt;/body&gt;\n+&lt;/html&gt;\"/>\n+\n+  <Notification id=\"c74b4616-9c63-4350-b4bf-ae0077b1ae6a\" active=\"1\" recipientAttrName=\"email\" selfAsRecipient=\"1\" \n+                sender=\"admin@syncope.apache.org\" subject=\"Password Reset request\" template_id=\"requestPasswordReset\" \n+                traceLevel=\"FAILURES\"/> \n+  <AnyAbout id=\"0d4e37a1-a4f4-4865-afcb-4be01da3da53\" anyType_id=\"USER\" notification_id=\"c74b4616-9c63-4350-b4bf-ae0077b1ae6a\" filter=\"token!=$null\"/>\n+  <Notification_events notification_id=\"c74b4616-9c63-4350-b4bf-ae0077b1ae6a\" event=\"[CUSTOM]:[]:[]:[requestPasswordReset]:[SUCCESS]\"/>\n+  \n+  <Notification id=\"71769807-7f74-4dc3-ba61-e4a7a00eb8ad\" active=\"1\" recipientAttrName=\"email\" selfAsRecipient=\"1\" \n+                sender=\"admin@syncope.apache.org\" subject=\"Password Reset successful\" template_id=\"confirmPasswordReset\" \n+                traceLevel=\"FAILURES\"/> \n+  <Notification_events notification_id=\"71769807-7f74-4dc3-ba61-e4a7a00eb8ad\" event=\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"/>\n+</dataset>"},{"sha":"796f3a047249cbded71d40388e48af3b6b9e5a48","filename":"common/keymaster/client-api/src/main/resources/defaultKeymasterConfParams.json","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fresources%2FdefaultKeymasterConfParams.json","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fresources%2FdefaultKeymasterConfParams.json","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fresources%2FdefaultKeymasterConfParams.json?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","previous_filename":"core/persistence-jpa/src/test/resources/domains/TwoKeymasterContent.json"},{"sha":"17952bf704dd2622101d4ebde690aa202ccecfaa","filename":"common/keymaster/client-zookeeper/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fpom.xml?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -46,7 +46,7 @@ under the License.\n \n     <dependency>\n       <groupId>org.apache.curator</groupId>\n-      <artifactId>curator-framework</artifactId>\n+      <artifactId>curator-x-async</artifactId>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.curator</groupId>"},{"sha":"fae643dcfc0f915db64ef63fb49c8b10e8a15008","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperConfParamOps.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOps.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -73,7 +73,6 @@ public <T> T get(final String domain, final String key, final T defaultValue, fi\n         } catch (KeeperException.NoNodeException e) {\n             LOG.debug(\"Node {} was not found\", buildConfPath(domain, key));\n         } catch (Exception e) {\n-            LOG.error(\"While reading {}\", buildConfPath(domain, key), e);\n             throw new KeymasterException(e);\n         }\n \n@@ -92,7 +91,6 @@ public <T> void set(final String domain, final String key, final T value) {\n \n                 client.setData().forPath(buildConfPath(domain, key), MAPPER.writeValueAsBytes(value));\n             } catch (Exception e) {\n-                LOG.error(\"While writing {}\", buildConfPath(domain, key), e);\n                 throw new KeymasterException(e);\n             }\n         }"},{"sha":"a66b89b7db70388ebb17545865d0e8d08fbbc32c","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperDomainOps.java","status":"added","additions":177,"deletions":0,"changes":177,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOps.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.keymaster.client.zookeper;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.x.async.AsyncCuratorFramework;\n+import org.apache.curator.x.async.WatchMode;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.keymaster.client.api.DomainWatcher;\n+import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.zookeeper.Watcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * Implements {@link DomainOps} via Apache Curator / Zookeeper.\n+ */\n+public class ZookeeperDomainOps implements DomainOps, InitializingBean {\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DomainOps.class);\n+\n+    private static final String DOMAIN_PATH = \"/domains\";\n+\n+    @Autowired\n+    private CuratorFramework client;\n+\n+    @Autowired(required = false)\n+    private DomainWatcher watcher;\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        if (watcher != null) {\n+            if (client.checkExists().forPath(buildDomainPath()) == null) {\n+                client.create().creatingParentContainersIfNeeded().forPath(buildDomainPath());\n+            }\n+\n+            AsyncCuratorFramework.wrap(client).with(WatchMode.successOnly).watched().getChildren().\n+                    forPath(buildDomainPath()).event().thenAccept(event -> {\n+                if (event.getType() == Watcher.Event.EventType.NodeChildrenChanged) {\n+                    try {\n+                        List<String> children = client.getChildren().\n+                                forPath(event.getPath()).stream().collect(Collectors.toList());\n+                        watcher.update(children);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Unexpected exception\", e);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private String buildDomainPath(final String... parts) {\n+        String prefix = DOMAIN_PATH;\n+        String suffix = StringUtils.EMPTY;\n+        if (parts != null && parts.length > 0) {\n+            suffix = \"/\" + String.join(\"/\", parts);\n+        }\n+        return prefix + suffix;\n+    }\n+\n+    @Override\n+    public List<Domain> list() {\n+        try {\n+            if (client.checkExists().forPath(buildDomainPath()) == null) {\n+                client.create().creatingParentContainersIfNeeded().forPath(buildDomainPath());\n+            }\n+\n+            List<Domain> list = new ArrayList<>();\n+            for (String child : client.getChildren().forPath(buildDomainPath())) {\n+                list.add(MAPPER.readValue(client.getData().forPath(buildDomainPath(child)), Domain.class));\n+            }\n+\n+            return list;\n+        } catch (Exception e) {\n+            throw new KeymasterException(e);\n+        }\n+    }\n+\n+    @Override\n+    public Domain read(final String key) {\n+        try {\n+            return MAPPER.readValue(client.getData().forPath(buildDomainPath(key)), Domain.class);\n+        } catch (Exception e) {\n+            throw new KeymasterException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void create(final Domain domain) {\n+        if (Objects.equals(domain.getKey(), SyncopeConstants.MASTER_DOMAIN)) {\n+            throw new KeymasterException(\"Cannot create domain \" + SyncopeConstants.MASTER_DOMAIN);\n+        }\n+\n+        try {\n+            if (client.checkExists().forPath(buildDomainPath(domain.getKey())) != null) {\n+                throw new KeymasterException(\"Domain \" + domain.getKey() + \" existing\");\n+            }\n+\n+            client.create().creatingParentContainersIfNeeded().forPath(buildDomainPath(domain.getKey()));\n+            client.setData().forPath(buildDomainPath(domain.getKey()), MAPPER.writeValueAsBytes(domain));\n+        } catch (KeymasterException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new KeymasterException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void changeAdminPassword(\n+            final String key, final String password, final CipherAlgorithm cipherAlgorithm) {\n+\n+        try {\n+            Domain domain = read(key);\n+\n+            domain.setAdminPassword(password);\n+            domain.setAdminCipherAlgorithm(cipherAlgorithm);\n+            client.setData().forPath(buildDomainPath(key), MAPPER.writeValueAsBytes(domain));\n+        } catch (KeymasterException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new KeymasterException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void adjustPoolSize(final String key, final int maxPoolSize, final int minIdle) {\n+        try {\n+            Domain domain = read(key);\n+\n+            domain.setMaxPoolSize(maxPoolSize);\n+            domain.setMinIdle(minIdle);\n+            client.setData().forPath(buildDomainPath(key), MAPPER.writeValueAsBytes(domain));\n+        } catch (KeymasterException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new KeymasterException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        try {\n+            client.delete().forPath(buildDomainPath(key));\n+        } catch (Exception e) {\n+            throw new KeymasterException(e);\n+        }\n+    }\n+}"},{"sha":"234093f1a6ac802cb97990b73ce26048252eaefc","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperKeymasterClientContext.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperKeymasterClientContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperKeymasterClientContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperKeymasterClientContext.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -28,6 +28,7 @@\n import org.apache.curator.framework.api.ACLProvider;\n import org.apache.curator.retry.ExponentialBackoffRetry;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.zookeeper.ZooDefs;\n import org.apache.zookeeper.data.ACL;\n@@ -119,4 +120,10 @@ public ServiceOps serviceOps() {\n         return new ZookeeperServiceDiscoveryOps();\n         //return new ZookeeperServiceOps();\n     }\n+\n+    @ConditionalOnExpression(\"#{'${keymaster.address}' matches '^(?!http).+'}\")\n+    @Bean\n+    public DomainOps domainOps() {\n+        return new ZookeeperDomainOps();\n+    }\n }"},{"sha":"de715cb39b21933481be9f5b9152f8f0759056d7","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperServiceDiscoveryOps.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceDiscoveryOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceDiscoveryOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceDiscoveryOps.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -28,7 +28,7 @@\n import org.apache.curator.x.discovery.ServiceInstance;\n import org.apache.curator.x.discovery.ServiceProvider;\n import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;"},{"sha":"c1300afc93ea8ff7a9f0f09dbcea83ea9a11fbb3","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperServiceOps.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceOps.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -25,7 +25,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.curator.framework.CuratorFramework;\n import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.zookeeper.CreateMode;\n import org.slf4j.Logger;"},{"sha":"ed5373803ddc123e92d46705b7195edfd4560744","filename":"common/keymaster/client-zookeeper/src/test/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperDomainOpsITCase.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOpsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOpsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOpsITCase.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.keymaster.client.zookeper;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.List;\n+import java.util.UUID;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+@SpringJUnitConfig(classes = { ZookeeperKeymasterClientContext.class, ZookeeperTestContext.class })\n+public class ZookeeperDomainOpsITCase {\n+\n+    @Autowired\n+    private DomainOps domainOps;\n+\n+    @Test\n+    public void crud() {\n+        String key = UUID.randomUUID().toString();\n+\n+        domainOps.create(new Domain.Builder(key).\n+                jdbcDriver(\"org.h2.Driver\").\n+                jdbcURL(\"jdbc:h2:mem:syncopetest;DB_CLOSE_DELAY=-1\").\n+                dbUsername(\"sa\").\n+                dbPassword(\"\").\n+                databasePlatform(\"org.apache.openjpa.jdbc.sql.H2Dictionary\").\n+                transactionIsolation(Domain.TransactionIsolation.TRANSACTION_READ_UNCOMMITTED).\n+                adminPassword(\"password\").\n+                adminCipherAlgorithm(CipherAlgorithm.BCRYPT).\n+                build());\n+\n+        Domain domain = domainOps.read(key);\n+        assertEquals(Domain.TransactionIsolation.TRANSACTION_READ_UNCOMMITTED, domain.getTransactionIsolation());\n+        assertEquals(\"password\", domain.getAdminPassword());\n+        assertEquals(CipherAlgorithm.BCRYPT, domain.getAdminCipherAlgorithm());\n+        assertEquals(10, domain.getMaxPoolSize());\n+        assertEquals(2, domain.getMinIdle());\n+\n+        List<Domain> list = domainOps.list();\n+        assertNotNull(list);\n+        assertEquals(domain, list.get(0));\n+\n+        domainOps.changeAdminPassword(key, \"newpassword\", CipherAlgorithm.SSHA512);\n+\n+        domain = domainOps.read(key);\n+        assertEquals(\"newpassword\", domain.getAdminPassword());\n+        assertEquals(CipherAlgorithm.SSHA512, domain.getAdminCipherAlgorithm());\n+\n+        domainOps.adjustPoolSize(key, 100, 23);\n+\n+        domain = domainOps.read(key);\n+        assertEquals(100, domain.getMaxPoolSize());\n+        assertEquals(23, domain.getMinIdle());\n+\n+        domainOps.delete(key);\n+\n+        list = domainOps.list();\n+        assertNotNull(list);\n+        assertTrue(list.isEmpty());\n+    }\n+\n+    @Test\n+    public void createMaster() {\n+        assertThrows(KeymasterException.class, () -> {\n+            domainOps.create(new Domain.Builder(SyncopeConstants.MASTER_DOMAIN).build());\n+        });\n+    }\n+}"},{"sha":"b8488dc2e35f05d1f545c8e2728caa667a5c0cb8","filename":"common/keymaster/client-zookeeper/src/test/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperDomainOpsTest.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOpsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOpsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOpsTest.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.keymaster.client.zookeper;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+\n+public class ZookeeperDomainOpsTest extends ZookeeperDomainOpsITCase {\n+\n+    @BeforeAll\n+    public static void setUp() throws Exception {\n+        ZookeeperTestServer.start();\n+    }\n+}"},{"sha":"96f3b695fda8a970e0f180fa8586034a4468fc06","filename":"common/keymaster/client-zookeeper/src/test/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperServiceOpsITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceOpsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceOpsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceOpsITCase.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -27,7 +27,7 @@\n import java.util.List;\n import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;"},{"sha":"b71d74068c248d7dacb25a2d86bfb423322eadf3","filename":"common/keymaster/client-zookeeper/src/test/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperTestContentLoader.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperTestContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperTestContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperTestContentLoader.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -35,7 +35,7 @@ public class ZookeeperTestContentLoader implements InitializingBean {\n \n     @Override\n     public void afterPropertiesSet() throws Exception {\n-        JsonNode content = MAPPER.readTree(getClass().getResourceAsStream(\"/keymasterContent.json\"));\n+        JsonNode content = MAPPER.readTree(getClass().getResourceAsStream(\"/testKeymasterConfParams.json\"));\n         for (Iterator<Map.Entry<String, JsonNode>> itor = content.fields(); itor.hasNext();) {\n             Map.Entry<String, JsonNode> param = itor.next();\n             Object value = MAPPER.treeToValue(param.getValue(), Object.class);"},{"sha":"741e1ad9e528b04b389534db66a6f688bd1d9b6b","filename":"common/keymaster/client-zookeeper/src/test/resources/testKeymasterConfParams.json","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fresources%2FtestKeymasterConfParams.json","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fresources%2FtestKeymasterConfParams.json","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fresources%2FtestKeymasterConfParams.json?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","previous_filename":"common/keymaster/client-zookeeper/src/test/resources/keymasterContent.json"},{"sha":"51c5d3035d5bf6f152f37d72c4dc5b9883ebb221","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/DomainLogic.java","status":"removed","additions":0,"deletions":138,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824066b70d3f041a1d76aa85b1f6709bea88440e/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824066b70d3f041a1d76aa85b1f6709bea88440e/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java?ref=824066b70d3f041a1d76aa85b1f6709bea88440e","patch":"@@ -1,138 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic;\n-\n-import java.lang.reflect.Method;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.to.DomainTO;\n-import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n-import org.apache.syncope.core.persistence.api.DomainsHolder;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n-import org.apache.syncope.core.persistence.api.entity.Domain;\n-import org.apache.syncope.core.provisioning.api.data.DomainDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-@Component\n-public class DomainLogic extends AbstractTransactionalLogic<DomainTO> {\n-\n-    @Autowired\n-    private DomainsHolder domainsHolder;\n-\n-    @Autowired\n-    private DomainDataBinder binder;\n-\n-    @Autowired\n-    private DomainDAO domainDAO;\n-\n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.DOMAIN_READ + \"') and authentication.details.domain == \"\n-            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n-    @Transactional(readOnly = true)\n-    public DomainTO read(final String key) {\n-        Domain domain = domainDAO.find(key);\n-        if (domain == null) {\n-            LOG.error(\"Could not find domain '\" + key + \"'\");\n-\n-            throw new NotFoundException(key);\n-        }\n-\n-        return binder.getDomainTO(domain);\n-    }\n-\n-    @PreAuthorize(\"isAuthenticated()\")\n-    @Transactional(readOnly = true)\n-    public List<DomainTO> list() {\n-        return domainDAO.findAll().stream().map(binder::getDomainTO).collect(Collectors.toList());\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.DOMAIN_CREATE + \"') and authentication.details.domain == \"\n-            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n-    public DomainTO create(final DomainTO domainTO) {\n-        if (!domainsHolder.getDomains().keySet().contains(domainTO.getKey())) {\n-            throw new NotFoundException(\"No configuration is available for domain \" + domainTO.getKey());\n-        }\n-\n-        return binder.getDomainTO(domainDAO.save(binder.create(domainTO)));\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.DOMAIN_UPDATE + \"') and authentication.details.domain == \"\n-            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n-    public DomainTO update(final DomainTO domainTO) {\n-        Domain domain = domainDAO.find(domainTO.getKey());\n-        if (domain == null) {\n-            LOG.error(\"Could not find domain '\" + domainTO.getKey() + \"'\");\n-            throw new NotFoundException(domainTO.getKey());\n-        }\n-\n-        binder.update(domain, domainTO);\n-        domain = domainDAO.save(domain);\n-\n-        return binder.getDomainTO(domain);\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.DOMAIN_DELETE + \"') and authentication.details.domain == \"\n-            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n-    public DomainTO delete(final String key) {\n-        Domain domain = domainDAO.find(key);\n-        if (domain == null) {\n-            LOG.error(\"Could not find domain '\" + key + \"'\");\n-\n-            throw new NotFoundException(key);\n-        }\n-\n-        DomainTO deleted = binder.getDomainTO(domain);\n-        domainDAO.delete(key);\n-        return deleted;\n-    }\n-\n-    @Override\n-    protected DomainTO resolveReference(final Method method, final Object... args)\n-            throws UnresolvedReferenceException {\n-\n-        String key = null;\n-\n-        if (ArrayUtils.isNotEmpty(args)) {\n-            for (int i = 0; key == null && i < args.length; i++) {\n-                if (args[i] instanceof String) {\n-                    key = (String) args[i];\n-                } else if (args[i] instanceof DomainTO) {\n-                    key = ((DomainTO) args[i]).getKey();\n-                }\n-            }\n-        }\n-\n-        if (StringUtils.isNotBlank(key)) {\n-            try {\n-                return binder.getDomainTO(domainDAO.find(key));\n-            } catch (Throwable ignore) {\n-                LOG.debug(\"Unresolved reference\", ignore);\n-                throw new UnresolvedReferenceException(ignore);\n-            }\n-        }\n-\n-        throw new UnresolvedReferenceException();\n-    }\n-\n-}"},{"sha":"05b5dcbfb6851ed37c80a8fd693eb69e623e945b","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -50,7 +50,7 @@\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.logic.audit.AuditAppender;\n import org.apache.syncope.core.logic.init.LoggerLoader;\n-import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -76,6 +76,9 @@\n @Component\n public class LoggerLogic extends AbstractTransactionalLogic<EntityTO> {\n \n+    @Autowired\n+    private DomainHolder domainHolder;\n+\n     @Autowired\n     private LoggerLoader loggerLoader;\n \n@@ -85,9 +88,6 @@ public class LoggerLogic extends AbstractTransactionalLogic<EntityTO> {\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    private DomainDAO domainDAO;\n-\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -129,8 +129,8 @@ private List<LoggerTO> list(final LoggerType type) {\n     public List<LoggerTO> listLogs() {\n         return list(LoggerType.LOG).stream().\n                 filter(logger -> !logger.getKey().startsWith(SyncopeConstants.MASTER_DOMAIN)).\n-                filter(logger -> domainDAO.findAll().stream().\n-                noneMatch(domain -> logger.getKey().startsWith(domain.getKey()))).\n+                filter(logger -> domainHolder.getDomains().keySet().stream().\n+                noneMatch(domain -> logger.getKey().startsWith(domain))).\n                 collect(Collectors.toList());\n     }\n "},{"sha":"ea23ee10a95c4545adcbd0bd6e5adf41c1de900b","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/CheckDomainFilter.java","status":"modified","additions":20,"deletions":24,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FCheckDomainFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FCheckDomainFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FCheckDomainFilter.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -30,8 +30,7 @@\n import org.apache.syncope.common.lib.to.ErrorTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n@@ -42,35 +41,32 @@\n public class CheckDomainFilter implements ContainerRequestFilter {\n \n     @Autowired\n-    private DomainDAO domainDAO;\n+    private DomainHolder domainHolder;\n \n     @Override\n     public void filter(final ContainerRequestContext reqContext) throws IOException {\n         final String domain = reqContext.getHeaderString(RESTHeaders.DOMAIN);\n         if (domain != null && !SyncopeConstants.MASTER_DOMAIN.equals(domain)) {\n-            AuthContextUtils.callAsAdmin(SyncopeConstants.MASTER_DOMAIN, () -> {\n-                if (domainDAO.find(domain) == null) {\n-                    String message = \"Domain '\" + domain + \"' not available\";\n+            if (!domainHolder.getDomains().containsKey(domain)) {\n+                String message = \"Domain '\" + domain + \"' not available\";\n \n-                    ErrorTO error = new ErrorTO();\n-                    error.setStatus(Response.Status.NOT_FOUND.getStatusCode());\n-                    error.setType(ClientExceptionType.NotFound);\n-                    error.getElements().add(message);\n+                ErrorTO error = new ErrorTO();\n+                error.setStatus(Response.Status.NOT_FOUND.getStatusCode());\n+                error.setType(ClientExceptionType.NotFound);\n+                error.getElements().add(message);\n \n-                    reqContext.abortWith(Response.status(Response.Status.NOT_FOUND).\n-                            entity(error).\n-                            header(HttpHeaders.CONTENT_TYPE,\n-                                    reqContext.getAcceptableMediaTypes().isEmpty()\n-                                    ? MediaType.APPLICATION_JSON\n-                                    : reqContext.getAcceptableMediaTypes().get(0).toString()).\n-                            header(RESTHeaders.ERROR_CODE,\n-                                    ClientExceptionType.NotFound.name()).\n-                            header(RESTHeaders.ERROR_INFO,\n-                                    ClientExceptionType.NotFound.getInfoHeaderValue(message)).\n-                            build());\n-                }\n-                return null;\n-            });\n+                reqContext.abortWith(Response.status(Response.Status.NOT_FOUND).\n+                        entity(error).\n+                        header(HttpHeaders.CONTENT_TYPE,\n+                                reqContext.getAcceptableMediaTypes().isEmpty()\n+                                ? MediaType.APPLICATION_JSON\n+                                : reqContext.getAcceptableMediaTypes().get(0).toString()).\n+                        header(RESTHeaders.ERROR_CODE,\n+                                ClientExceptionType.NotFound.name()).\n+                        header(RESTHeaders.ERROR_INFO,\n+                                ClientExceptionType.NotFound.getInfoHeaderValue(message)).\n+                        build());\n+            }\n         }\n     }\n }"},{"sha":"b15233615c03995223aff0a1c96d84f2f404e575","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.rest.cxf;\n \n+import static org.codehaus.groovy.tools.shell.util.Logger.io;\n+\n import io.swagger.v3.oas.integration.api.OpenAPIConfiguration;\n import io.swagger.v3.oas.models.Operation;\n import io.swagger.v3.oas.models.headers.Header;\n@@ -46,7 +48,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ErrorTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.core.persistence.api.DomainsHolder;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -87,7 +89,7 @@ private void init() {\n                 super.setJavadocProvider(javaDocProvider);\n \n                 domains = new ArrayList<>(ApplicationContextProvider.getApplicationContext().\n-                        getBean(DomainsHolder.class).getDomains().keySet());\n+                        getBean(DomainHolder.class).getDomains().keySet());\n \n                 inited = true;\n             }"},{"sha":"fbfdcfb34362e4a1cd4868bf919b5cfa148a183f","filename":"core/persistence-api/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fpom.xml?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -72,6 +72,12 @@ under the License.\n       <version>${project.version}</version>\n     </dependency>\n     \n+    <dependency>\n+      <groupId>org.apache.syncope.common.keymaster</groupId>\n+      <artifactId>syncope-common-keymaster-client-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    \n     <!-- TEST -->\n     <dependency>\n       <groupId>org.slf4j</groupId>"},{"sha":"32b8c92a0a488c31c0e611b4f7d7c7dba4d4771e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/DomainHolder.java","status":"renamed","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FDomainHolder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FDomainHolder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FDomainHolder.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -21,7 +21,10 @@\n import java.util.Map;\n import javax.sql.DataSource;\n \n-public interface DomainsHolder {\n+/**\n+ * Holds information about domain effectively available at runtime.\n+ */\n+public interface DomainHolder {\n \n     Map<String, DataSource> getDomains();\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/DomainsHolder.java"},{"sha":"3d7e6567ac089436178b10aa7cbc62cabbead585","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/DomainRegistry.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FDomainRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FDomainRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FDomainRegistry.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api;\n+\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+\n+/**\n+ * Allows to register domains, to make available at runtime.\n+ */\n+public interface DomainRegistry {\n+\n+    void register(Domain req);\n+}"},{"sha":"b15447cbded1eae5d8a502e4db33645118649222","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/content/ConfParamLoader.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fcontent%2FConfParamLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fcontent%2FConfParamLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fcontent%2FConfParamLoader.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.content;\n+\n+import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n+\n+public interface ConfParamLoader extends SyncopeCoreLoader {\n+}"},{"sha":"e0eeab13cf20fc4d1ac41d633a1ea37239c7e523","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/DomainConfFactory.java","status":"modified","additions":39,"deletions":55,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainConfFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainConfFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainConfFactory.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -20,16 +20,14 @@\n \n import com.zaxxer.hikari.HikariConfig;\n import com.zaxxer.hikari.HikariDataSource;\n+import java.io.ByteArrayInputStream;\n import java.nio.charset.StandardCharsets;\n import java.util.Collections;\n import javax.sql.DataSource;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.request.DomainCR;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n import org.apache.syncope.core.persistence.jpa.spring.DomainEntityManagerFactoryBean;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.spring.ResourceWithFallbackLoader;\n import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.beans.factory.annotation.Value;\n import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.beans.factory.support.AutowireCandidateQualifier;\n@@ -43,12 +41,10 @@\n import org.springframework.orm.jpa.JpaTransactionManager;\n import org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter;\n import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.persistence.api.DomainRegistry;\n \n @Component\n-public class DomainConfFactory implements EnvironmentAware {\n-\n-    @Value(\"${content.directory}\")\n-    private String contentDirectory;\n+public class DomainConfFactory implements DomainRegistry, EnvironmentAware {\n \n     private Environment env;\n \n@@ -71,97 +67,85 @@ private void registerBeanDefinition(final String name, final BeanDefinition bean\n         ApplicationContextProvider.getBeanFactory().registerBeanDefinition(name, beanDefinition);\n     }\n \n-    public void register(final DomainCR req) {\n+    @Override\n+    public void register(final Domain domain) {\n         // localDomainDataSource\n         HikariConfig hikariConfig = new HikariConfig();\n-        hikariConfig.setDriverClassName(req.getJdbcDriver());\n-        hikariConfig.setJdbcUrl(req.getJdbcURL());\n-        hikariConfig.setUsername(req.getDbUsername());\n-        hikariConfig.setPassword(req.getDbPassword());\n-        hikariConfig.setSchema(req.getDbSchema());\n-        hikariConfig.setTransactionIsolation(req.getTransactionIsolation());\n-        hikariConfig.setMaximumPoolSize(req.getMaxPoolSize());\n-        hikariConfig.setMinimumIdle(req.getMinIdle());\n-        String domainName = StringUtils.capitalize(req.getDomainName());\n+        hikariConfig.setDriverClassName(domain.getJdbcDriver());\n+        hikariConfig.setJdbcUrl(domain.getJdbcURL());\n+        hikariConfig.setUsername(domain.getDbUsername());\n+        hikariConfig.setPassword(domain.getDbPassword());\n+        hikariConfig.setSchema(domain.getDbSchema());\n+        hikariConfig.setTransactionIsolation(domain.getTransactionIsolation().name());\n+        hikariConfig.setMaximumPoolSize(domain.getMaxPoolSize());\n+        hikariConfig.setMinimumIdle(domain.getMinIdle());\n \n         HikariDataSource localDomainDataSource = new HikariDataSource(hikariConfig);\n \n         // domainDataSource\n         registerBeanDefinition(\n-                domainName + \"DataSource\",\n+                domain.getKey() + \"DataSource\",\n                 BeanDefinitionBuilder.rootBeanDefinition(JndiObjectFactoryBean.class).\n-                        addPropertyValue(\"jndiName\", \"java:comp/env/jdbc/syncope\" + domainName + \"DataSource\").\n+                        addPropertyValue(\"jndiName\", \"java:comp/env/jdbc/syncope\" + domain.getKey() + \"DataSource\").\n                         addPropertyValue(\"defaultObject\", localDomainDataSource).\n                         getBeanDefinition());\n         DataSource initedDataSource = ApplicationContextProvider.getBeanFactory().\n-                getBean(domainName + \"DataSource\", DataSource.class);\n+                getBean(domain.getKey() + \"DataSource\", DataSource.class);\n \n         // domainResourceDatabasePopulator\n         ResourceDatabasePopulator databasePopulator = new ResourceDatabasePopulator();\n         databasePopulator.setContinueOnError(true);\n         databasePopulator.setIgnoreFailedDrops(true);\n         databasePopulator.setSqlScriptEncoding(StandardCharsets.UTF_8.name());\n-        databasePopulator.addScript(new ClassPathResource(\"/audit/\" + req.getAuditSql()));\n+        databasePopulator.addScript(new ClassPathResource(\"/audit/\" + domain.getAuditSql()));\n \n-        registerSingleton(domainName.toLowerCase() + \"ResourceDatabasePopulator\", databasePopulator);\n+        registerSingleton(domain.getKey().toLowerCase() + \"ResourceDatabasePopulator\", databasePopulator);\n \n         // domainDataSourceInitializer\n         DataSourceInitializer dataSourceInitializer = new DataSourceInitializer();\n         dataSourceInitializer.setDataSource(initedDataSource);\n         dataSourceInitializer.setEnabled(true);\n         dataSourceInitializer.setDatabasePopulator(databasePopulator);\n-        registerSingleton(domainName.toLowerCase() + \"DataSourceInitializer\", dataSourceInitializer);\n+        registerSingleton(domain.getKey().toLowerCase() + \"DataSourceInitializer\", dataSourceInitializer);\n \n         // domainEntityManagerFactory\n         OpenJpaVendorAdapter vendorAdapter = new OpenJpaVendorAdapter();\n         vendorAdapter.setShowSql(false);\n         vendorAdapter.setGenerateDdl(true);\n-        vendorAdapter.setDatabasePlatform(req.getDatabasePlatform());\n+        vendorAdapter.setDatabasePlatform(domain.getDatabasePlatform());\n \n         BeanDefinitionBuilder emf = BeanDefinitionBuilder.rootBeanDefinition(DomainEntityManagerFactoryBean.class).\n-                addPropertyValue(\"mappingResources\", req.getOrm()).\n-                addPropertyValue(\"persistenceUnitName\", domainName).\n-                addPropertyReference(\"dataSource\", domainName + \"DataSource\").\n+                addPropertyValue(\"mappingResources\", domain.getOrm()).\n+                addPropertyValue(\"persistenceUnitName\", domain.getKey()).\n+                addPropertyReference(\"dataSource\", domain.getKey() + \"DataSource\").\n                 addPropertyValue(\"jpaVendorAdapter\", vendorAdapter).\n                 addPropertyReference(\"commonEntityManagerFactoryConf\", \"commonEMFConf\");\n         if (env.containsProperty(\"openjpaMetaDataFactory\")) {\n-            emf.addPropertyValue(\"jpaPropertyMap\",\n-                    Collections.singletonMap(\n-                            \"openjpa.MetaDataFactory\",\n-                            env.getProperty(\"openjpaMetaDataFactory\").replace(\"##orm##\", req.getOrm())));\n+            emf.addPropertyValue(\"jpaPropertyMap\", Collections.singletonMap(\n+                    \"openjpa.MetaDataFactory\",\n+                    env.getProperty(\"openjpaMetaDataFactory\").replace(\"##orm##\", domain.getOrm())));\n         }\n-        registerBeanDefinition(domainName + \"EntityManagerFactory\", emf.getBeanDefinition());\n-        ApplicationContextProvider.getBeanFactory().getBean(domainName + \"EntityManagerFactory\");\n+        registerBeanDefinition(domain.getKey() + \"EntityManagerFactory\", emf.getBeanDefinition());\n+        ApplicationContextProvider.getBeanFactory().getBean(domain.getKey() + \"EntityManagerFactory\");\n \n         // domainTransactionManager\n         AbstractBeanDefinition domainTransactionManager =\n                 BeanDefinitionBuilder.rootBeanDefinition(JpaTransactionManager.class).\n-                        addPropertyReference(\"entityManagerFactory\", domainName + \"EntityManagerFactory\").\n+                        addPropertyReference(\"entityManagerFactory\", domain.getKey() + \"EntityManagerFactory\").\n                         getBeanDefinition();\n-        domainTransactionManager.addQualifier(new AutowireCandidateQualifier(Qualifier.class, domainName));\n-        registerBeanDefinition(domainName + \"TransactionManager\", domainTransactionManager);\n+        domainTransactionManager.addQualifier(new AutowireCandidateQualifier(Qualifier.class, domain.getKey()));\n+        registerBeanDefinition(domain.getKey() + \"TransactionManager\", domainTransactionManager);\n \n         // domainContentXML\n-        registerBeanDefinition(domainName + \"ContentXML\",\n-                BeanDefinitionBuilder.rootBeanDefinition(ResourceWithFallbackLoader.class).\n-                        addPropertyValue(\n-                                \"primary\",\n-                                \"file:\" + contentDirectory + \"/domains/\" + domainName + \"Content.xml\").\n-                        addPropertyValue(\n-                                \"fallback\",\n-                                \"classpath:domains/\" + domainName + \"Content.xml\").\n+        registerBeanDefinition(domain.getKey() + \"ContentXML\",\n+                BeanDefinitionBuilder.rootBeanDefinition(ByteArrayInputStream.class).\n+                        addConstructorArgValue(domain.getContent().getBytes()).\n                         getBeanDefinition());\n \n-        // domainKeymasterContentJSON\n-        registerBeanDefinition(domainName + \"KeymasterContentJSON\",\n-                BeanDefinitionBuilder.rootBeanDefinition(ResourceWithFallbackLoader.class).\n-                        addPropertyValue(\n-                                \"primary\",\n-                                \"file:\" + contentDirectory + \"/domains/\" + domainName + \"KeymasterContent.json\").\n-                        addPropertyValue(\n-                                \"fallback\",\n-                                \"classpath:domains/\" + domainName + \"KeymasterContent.json\").\n+        // domainKeymasterConfParamsJSON\n+        registerBeanDefinition(domain.getKey() + \"KeymasterConfParamsJSON\",\n+                BeanDefinitionBuilder.rootBeanDefinition(ByteArrayInputStream.class).\n+                        addConstructorArgValue(domain.getKeymasterConfParams().getBytes()).\n                         getBeanDefinition());\n-\n     }\n }"},{"sha":"277bebcb5a7c4385e8b6b26f19fd2f094910a892","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/DomainLoader.java","status":"removed","additions":0,"deletions":105,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824066b70d3f041a1d76aa85b1f6709bea88440e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824066b70d3f041a1d76aa85b1f6709bea88440e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainLoader.java?ref=824066b70d3f041a1d76aa85b1f6709bea88440e","patch":"@@ -1,105 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa;\n-\n-import java.io.IOException;\n-import java.util.Enumeration;\n-import java.util.Properties;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.PropertyUtils;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.request.DomainCR;\n-import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.core.Ordered;\n-import org.springframework.core.io.Resource;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class DomainLoader implements SyncopeCoreLoader {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(DomainLoader.class);\n-\n-    @Autowired\n-    private ApplicationContext ctx;\n-\n-    @Autowired\n-    private DomainConfFactory domainConfFactory;\n-\n-    @Value(\"${content.directory}\")\n-    private String contentDirectory;\n-\n-    @Override\n-    public int getOrder() {\n-        return Ordered.HIGHEST_PRECEDENCE;\n-    }\n-\n-    @Override\n-    public void load() {\n-        try {\n-            for (Resource domainProp : ctx.getResources(\"classpath:/domains/*.properties\")) {\n-                String domainPropFile = StringUtils.substringAfterLast(domainProp.getURL().toExternalForm(), \"/\");\n-                String domain = StringUtils.substringBefore(domainPropFile, \".\");\n-\n-                if (!SyncopeConstants.MASTER_DOMAIN.equals(domain)) {\n-                    DomainCR.Builder builder = new DomainCR.Builder(domain);\n-\n-                    LOG.info(\"Domain {} initialization\", domain);\n-\n-                    Properties props = PropertyUtils.read(getClass(), \"domains/\" + domainPropFile, contentDirectory);\n-                    for (Enumeration<?> e = props.propertyNames(); e.hasMoreElements();) {\n-                        String prop = (String) e.nextElement();\n-\n-                        if (prop.endsWith(\".driverClassName\")) {\n-                            builder.jdbcDriver(props.getProperty(prop));\n-                        } else if (prop.endsWith(\".url\")) {\n-                            builder.jdbcURL(props.getProperty(prop));\n-                        } else if (prop.endsWith(\".schema\")) {\n-                            builder.dbSchema(props.getProperty(prop));\n-                        } else if (prop.endsWith(\".username\")) {\n-                            builder.dbUsername(props.getProperty(prop));\n-                        } else if (prop.endsWith(\".password\")) {\n-                            builder.dbPassword(props.getProperty(prop));\n-                        } else if (prop.endsWith(\".databasePlatform\")) {\n-                            builder.databasePlatform(props.getProperty(prop));\n-                        } else if (prop.endsWith(\".orm\")) {\n-                            builder.orm(props.getProperty(prop));\n-                        } else if (prop.endsWith(\".pool.maxActive\")) {\n-                            builder.maxPoolSize(Integer.parseInt(props.getProperty(prop)));\n-                        } else if (prop.endsWith(\".pool.minIdle\")) {\n-                            builder.minIdle(Integer.parseInt(props.getProperty(prop)));\n-                        } else if (prop.endsWith(\".audit.sql\")) {\n-                            builder.auditSql(props.getProperty(prop));\n-                        }\n-                    }\n-\n-                    domainConfFactory.register(builder.build());\n-\n-                    LOG.info(\"Domain {} successfully inited\", domain);\n-                }\n-            }\n-        } catch (IOException e) {\n-            LOG.error(\"Error during domain initialization\", e);\n-        }\n-    }\n-}"},{"sha":"c60b1242fa96570c4c364f72877787db516702c3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/MasterDomain.java","status":"modified","additions":17,"deletions":9,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -20,6 +20,8 @@\n \n import com.zaxxer.hikari.HikariConfig;\n import com.zaxxer.hikari.HikariDataSource;\n+import java.io.IOException;\n+import java.io.InputStream;\n import java.util.Collections;\n import javax.sql.DataSource;\n import org.apache.syncope.core.persistence.jpa.spring.CommonEntityManagerFactoryConf;\n@@ -28,6 +30,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.EnvironmentAware;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -52,6 +55,9 @@ public class MasterDomain implements EnvironmentAware {\n     @Autowired\n     private CommonEntityManagerFactoryConf commonEMFConf;\n \n+    @Autowired\n+    private ConfigurableApplicationContext ctx;\n+\n     @Value(\"${Master.driverClassName}\")\n     private String driverClassName;\n \n@@ -170,19 +176,21 @@ public ResourceWithFallbackLoader masterProperties() {\n     }\n \n     @Bean(\"MasterContentXML\")\n-    public ResourceWithFallbackLoader masterContentXML() {\n-        ResourceWithFallbackLoader masterContentXML = new ResourceWithFallbackLoader();\n+    public InputStream masterContentXML() throws IOException {\n+        ResourceWithFallbackLoader masterContentXML =\n+                ctx.getBeanFactory().createBean(ResourceWithFallbackLoader.class);\n         masterContentXML.setPrimary(\"file:\" + contentDirectory + \"/domains/MasterContent.xml\");\n         masterContentXML.setFallback(\"classpath:domains/MasterContent.xml\");\n-        return masterContentXML;\n+        return masterContentXML.getResource().getInputStream();\n     }\n \n-    @Bean(\"MasterKeymasterContentJSON\")\n-    public ResourceWithFallbackLoader masterKeymasterContentJSON() {\n-        ResourceWithFallbackLoader masterKeymasterContentJSON = new ResourceWithFallbackLoader();\n-        masterKeymasterContentJSON.setPrimary(\"file:\" + contentDirectory + \"/domains/MasterKeymasterContent.json\");\n-        masterKeymasterContentJSON.setFallback(\"classpath:domains/MasterKeymasterContent.json\");\n-        return masterKeymasterContentJSON;\n+    @Bean(\"MasterKeymasterConfParamsJSON\")\n+    public InputStream masterKeymasterConfParamsJSON() throws IOException {\n+        ResourceWithFallbackLoader keymasterConfParamsJSON =\n+                ctx.getBeanFactory().createBean(ResourceWithFallbackLoader.class);\n+        keymasterConfParamsJSON.setPrimary(\"file:\" + contentDirectory + \"/domains/MasterKeymasterConfParams.json\");\n+        keymasterConfParamsJSON.setFallback(\"classpath:domains/MasterKeymasterConfParams.json\");\n+        return keymasterConfParamsJSON.getResource().getInputStream();\n     }\n \n     @Bean(\"MasterDatabaseSchema\")"},{"sha":"031927c7dcb03b46ba14befcb9c159284dee1cf1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/RuntimeDomainLoader.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FRuntimeDomainLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FRuntimeDomainLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FRuntimeDomainLoader.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Objects;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.keymaster.client.api.DomainWatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.persistence.api.DomainRegistry;\n+import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.springframework.aop.support.AopUtils;\n+\n+@Component\n+public class RuntimeDomainLoader implements DomainWatcher {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RuntimeDomainLoader.class);\n+\n+    @Autowired\n+    private DomainHolder domainHolder;\n+\n+    @Autowired\n+    private DomainOps domainOps;\n+\n+    @Autowired\n+    private DomainRegistry domainRegistry;\n+\n+    @Override\n+    public void update(final List<String> domains) {\n+        domains.stream().filter(domain -> !domainHolder.getDomains().containsKey(domain)).\n+                map(domain -> {\n+                    try {\n+                        return domainOps.read(domain);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Could not read {}\", domain, e);\n+                        return null;\n+                    }\n+                }).\n+                filter(Objects::nonNull).\n+                forEach(domain -> {\n+                    LOG.info(\"Domain {} initialization\", domain.getKey());\n+\n+                    domainRegistry.register(domain);\n+\n+                    ApplicationContextProvider.getApplicationContext().getBeansOfType(SyncopeCoreLoader.class).values().\n+                            stream().sorted(Comparator.comparing(SyncopeCoreLoader::getOrder)).\n+                            forEach(loader -> {\n+                                String loaderName = AopUtils.getTargetClass(loader).getName();\n+\n+                                loader.load();\n+\n+                                LOG.debug(\"[{}] Starting on domain '{}'\", loaderName, domain);\n+                                loader.load(domain.getKey(), domainHolder.getDomains().get(domain.getKey()));\n+                                LOG.debug(\"[{}] Completed on domain '{}'\", loaderName, domain);\n+                            });\n+\n+                    LOG.info(\"Domain {} successfully inited\", domain.getKey());\n+                });\n+    }\n+}"},{"sha":"c933ff5a07184badf0e71a669e79473bdebeb98d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/StartupDomainLoader.java","status":"added","additions":155,"deletions":0,"changes":155,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FStartupDomainLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FStartupDomainLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FStartupDomainLoader.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.util.Enumeration;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.helpers.IOUtils;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.lib.PropertyUtils;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.persistence.api.DomainRegistry;\n+import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n+import org.apache.syncope.core.spring.ResourceWithFallbackLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.io.Resource;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StartupDomainLoader implements SyncopeCoreLoader {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(StartupDomainLoader.class);\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    @Autowired\n+    private DomainOps domainOps;\n+\n+    @Autowired\n+    private ConfigurableApplicationContext ctx;\n+\n+    @Autowired\n+    private DomainHolder domainHolder;\n+\n+    @Autowired\n+    private DomainRegistry domainRegistry;\n+\n+    @Value(\"${content.directory}\")\n+    private String contentDirectory;\n+\n+    @Override\n+    public int getOrder() {\n+        return Ordered.HIGHEST_PRECEDENCE;\n+    }\n+\n+    @Override\n+    public void load() {\n+        try {\n+            Map<String, Domain> keymasterDomains = domainOps.list().stream().\n+                    collect(Collectors.toMap(Domain::getKey, Function.identity()));\n+\n+            for (Resource domainProp : ctx.getResources(\"classpath:/domains/*.properties\")) {\n+                String domainPropFile = StringUtils.substringAfterLast(domainProp.getURL().toExternalForm(), \"/\");\n+                String key = StringUtils.substringBefore(domainPropFile, \".\");\n+\n+                if (!domainHolder.getDomains().containsKey(key)) {\n+                    if (keymasterDomains.containsKey(key)) {\n+                        LOG.info(\"Domain {} initialization\", key);\n+\n+                        domainRegistry.register(keymasterDomains.get(key));\n+\n+                        LOG.info(\"Domain {} successfully inited\", key);\n+                    } else {\n+                        Domain.Builder builder = new Domain.Builder(key);\n+\n+                        Properties props = PropertyUtils.read(getClass(),\n+                                \"domains/\" + domainPropFile, contentDirectory);\n+                        for (Enumeration<?> e = props.propertyNames(); e.hasMoreElements();) {\n+                            String prop = (String) e.nextElement();\n+\n+                            if (prop.endsWith(\".driverClassName\")) {\n+                                builder.jdbcDriver(props.getProperty(prop));\n+                            } else if (prop.endsWith(\".url\")) {\n+                                builder.jdbcURL(props.getProperty(prop));\n+                            } else if (prop.endsWith(\".schema\")) {\n+                                builder.dbSchema(props.getProperty(prop));\n+                            } else if (prop.endsWith(\".username\")) {\n+                                builder.dbUsername(props.getProperty(prop));\n+                            } else if (prop.endsWith(\".password\")) {\n+                                builder.dbPassword(props.getProperty(prop));\n+                            } else if (prop.endsWith(\".databasePlatform\")) {\n+                                builder.databasePlatform(props.getProperty(prop));\n+                            } else if (prop.endsWith(\".orm\")) {\n+                                builder.orm(props.getProperty(prop));\n+                            } else if (prop.endsWith(\".pool.maxActive\")) {\n+                                builder.maxPoolSize(Integer.parseInt(props.getProperty(prop)));\n+                            } else if (prop.endsWith(\".pool.minIdle\")) {\n+                                builder.minIdle(Integer.parseInt(props.getProperty(prop)));\n+                            } else if (prop.endsWith(\".audit.sql\")) {\n+                                builder.auditSql(props.getProperty(prop));\n+                            }\n+                        }\n+\n+                        ResourceWithFallbackLoader content =\n+                                ctx.getBeanFactory().createBean(ResourceWithFallbackLoader.class);\n+                        content.setPrimary(\"file:\" + contentDirectory + \"/domains/\" + key + \"Content.xml\");\n+                        content.setFallback(\"classpath:domains/\" + key + \"Content.xml\");\n+                        builder.content(IOUtils.toString(content.getResource().getInputStream()));\n+\n+                        ResourceWithFallbackLoader keymasterConfParams =\n+                                ctx.getBeanFactory().createBean(ResourceWithFallbackLoader.class);\n+                        keymasterConfParams.setPrimary(\n+                                \"file:\" + contentDirectory + \"/domains/\" + key + \"KeymasterConfParams.json\");\n+                        keymasterConfParams.setFallback(\"classpath:domains/\" + key + \"KeymasterConfParams.json\");\n+                        builder.keymasterConfParams(\n+                                IOUtils.toString(keymasterConfParams.getResource().getInputStream()));\n+\n+                        ResourceWithFallbackLoader security =\n+                                ctx.getBeanFactory().createBean(ResourceWithFallbackLoader.class);\n+                        security.setPrimary(\"file:\" + contentDirectory + \"/domains/\" + key + \"Security.json\");\n+                        security.setFallback(\"classpath:domains/\" + key + \"Security.json\");\n+\n+                        JsonNode securityInfo = MAPPER.readTree(security.getResource().getInputStream());\n+                        builder.adminPassword(securityInfo.get(\"password\").asText());\n+                        builder.adminCipherAlgorithm(\n+                                CipherAlgorithm.valueOf(securityInfo.get(\"cipherAlgorithm\").asText()));\n+\n+                        domainOps.create(builder.build());\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            LOG.error(\"Error during domain initialization\", e);\n+        }\n+    }\n+}"},{"sha":"5de3ed4b3fba5658bbec57c5fbb00363125487ee","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/ContentLoaderHandler.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.content;\n \n-import java.sql.ResultSet;\n import java.sql.Types;\n import java.text.ParseException;\n import java.util.HashMap;\n@@ -55,12 +54,11 @@ public ContentLoaderHandler(final DataSource dataSource, final String rootElemen\n \n     private Object[] getParameters(final String tableName, final Attributes attrs) {\n         Map<String, Integer> colTypes = jdbcTemplate.query(\n-                \"SELECT * FROM \" + tableName + \" WHERE 0=1\", (final ResultSet rs) -> {\n+                \"SELECT * FROM \" + tableName + \" WHERE 0=1\", rs -> {\n                     Map<String, Integer> colTypes1 = new HashMap<>();\n-                    for (int i = 1; i <= rs.getMetaData().getColumnCount();\n-                    i++) {\n-                        colTypes1.\n-                                put(rs.getMetaData().getColumnName(i).toUpperCase(), rs.getMetaData().getColumnType(i));\n+                    for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {\n+                        colTypes1.put(\n+                                rs.getMetaData().getColumnName(i).toUpperCase(), rs.getMetaData().getColumnType(i));\n                     }\n                     return colTypes1;\n                 });"},{"sha":"fcda05babc4ff285012501b34f0f5046d1fee835","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/KeymasterConfParamLoader.java","status":"renamed","additions":15,"deletions":27,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FKeymasterConfParamLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FKeymasterConfParamLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FKeymasterConfParamLoader.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -21,14 +21,13 @@\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.IOException;\n-import java.io.Serializable;\n+import java.io.InputStream;\n import java.util.Iterator;\n import java.util.Map;\n import javax.sql.DataSource;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n-import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n+import org.apache.syncope.core.persistence.api.content.ConfParamLoader;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.spring.ResourceWithFallbackLoader;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -38,9 +37,9 @@\n  * Initialize Keymaster with default content if no data is present already.\n  */\n @Component\n-public class KeymasterContentLoader implements SyncopeCoreLoader {\n+public class KeymasterConfParamLoader implements ConfParamLoader {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(KeymasterContentLoader.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(KeymasterConfParamLoader.class);\n \n     private static final ObjectMapper MAPPER = new ObjectMapper();\n \n@@ -68,37 +67,26 @@ public void load(final String domain, final DataSource datasource) {\n             LOG.info(\"[{}] Empty Keymaster found, loading default content\", domain);\n \n             try {\n-                ResourceWithFallbackLoader contentJSON = ApplicationContextProvider.getBeanFactory().\n-                        getBean(domain + \"KeymasterContentJSON\", ResourceWithFallbackLoader.class);\n+                InputStream contentJSON = ApplicationContextProvider.getBeanFactory().\n+                        getBean(domain + \"KeymasterConfParamsJSON\", InputStream.class);\n                 loadDefaultContent(domain, contentJSON);\n             } catch (Exception e) {\n                 LOG.error(\"[{}] While loading default Keymaster content\", domain, e);\n             }\n         }\n     }\n \n-    private Serializable parse(final JsonNode valueNode) {\n-        Serializable value = null;\n-        if (valueNode.isTextual()) {\n-            value = valueNode.textValue();\n-        } else if (valueNode.isNumber()) {\n-            value = valueNode.numberValue();\n-        } else if (valueNode.isBoolean()) {\n-            value = valueNode.booleanValue();\n-        }\n-\n-        return value;\n-    }\n-\n-    private void loadDefaultContent(final String domain, final ResourceWithFallbackLoader contentJSON)\n+    private void loadDefaultContent(final String domain, final InputStream contentJSON)\n             throws IOException {\n \n-        JsonNode content = MAPPER.readTree(contentJSON.getResource().getInputStream());\n-        for (Iterator<Map.Entry<String, JsonNode>> itor = content.fields(); itor.hasNext();) {\n-            Map.Entry<String, JsonNode> param = itor.next();\n-            Object value = MAPPER.treeToValue(param.getValue(), Object.class);\n-            if (value != null) {\n-                confParamOps.set(domain, param.getKey(), value);\n+        try (contentJSON) {\n+            JsonNode content = MAPPER.readTree(contentJSON);\n+            for (Iterator<Map.Entry<String, JsonNode>> itor = content.fields(); itor.hasNext();) {\n+                Map.Entry<String, JsonNode> param = itor.next();\n+                Object value = MAPPER.treeToValue(param.getValue(), Object.class);\n+                if (value != null) {\n+                    confParamOps.set(domain, param.getKey(), value);\n+                }\n             }\n         }\n     }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/KeymasterContentLoader.java"},{"sha":"a5e379d4e32900aba0f5d725d9532e24f143edd3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -53,7 +53,6 @@\n import javax.xml.transform.stream.StreamResult;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.content.ContentExporter;\n@@ -81,6 +80,7 @@\n import org.springframework.stereotype.Component;\n import org.xml.sax.SAXException;\n import org.xml.sax.helpers.AttributesImpl;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n \n /**\n  * Export internal storage content as XML.\n@@ -105,7 +105,7 @@ public class XMLContentExporter implements ContentExporter {\n             Collections.singletonMap(\"SYNCOPEGROUP\", Collections.singleton(\"USEROWNER_ID\"));\n \n     @Autowired\n-    private DomainsHolder domainsHolder;\n+    private DomainHolder domainHolder;\n \n     @Autowired\n     private RealmDAO realmDAO;\n@@ -379,7 +379,7 @@ public void export(\n         handler.startDocument();\n         handler.startElement(\"\", \"\", ROOT_ELEMENT, new AttributesImpl());\n \n-        DataSource dataSource = domainsHolder.getDomains().get(domain);\n+        DataSource dataSource = domainHolder.getDomains().get(domain);\n         if (dataSource == null) {\n             throw new IllegalArgumentException(\"Could not find DataSource for domain \" + domain);\n         }"},{"sha":"106dcb681ad7014ca07e6daea0029810f36422b6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentLoader.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -92,8 +92,8 @@ public void load(final String domain, final DataSource datasource) {\n                 LOG.error(\"[{}] While creating indexes\", domain, e);\n             }\n             try {\n-                ResourceWithFallbackLoader contentXML = ApplicationContextProvider.getBeanFactory().\n-                        getBean(domain + \"ContentXML\", ResourceWithFallbackLoader.class);\n+                InputStream contentXML = ApplicationContextProvider.getBeanFactory().\n+                        getBean(domain + \"ContentXML\", InputStream.class);\n                 loadDefaultContent(domain, contentXML, datasource);\n             } catch (Exception e) {\n                 LOG.error(\"[{}] While loading default content\", domain, e);\n@@ -102,14 +102,14 @@ public void load(final String domain, final DataSource datasource) {\n     }\n \n     private void loadDefaultContent(\n-            final String domain, final ResourceWithFallbackLoader contentXML, final DataSource dataSource)\n+            final String domain, final InputStream contentXML, final DataSource dataSource)\n             throws IOException, ParserConfigurationException, SAXException {\n \n         SAXParserFactory factory = SAXParserFactory.newInstance();\n         factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE);\n-        try (InputStream in = contentXML.getResource().getInputStream()) {\n+        try (contentXML) {\n             SAXParser parser = factory.newSAXParser();\n-            parser.parse(in, new ContentLoaderHandler(dataSource, ROOT_ELEMENT, true));\n+            parser.parse(contentXML, new ContentLoaderHandler(dataSource, ROOT_ELEMENT, true));\n             LOG.debug(\"[{}] Default content successfully loaded\", domain);\n         }\n     }"},{"sha":"7e0c45654b36507c76a526d4e3d26c27c435f3a2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPADomain.java","status":"removed","additions":0,"deletions":67,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824066b70d3f041a1d76aa85b1f6709bea88440e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADomain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824066b70d3f041a1d76aa85b1f6709bea88440e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADomain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADomain.java?ref=824066b70d3f041a1d76aa85b1f6709bea88440e","patch":"@@ -1,67 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.EnumType;\n-import javax.persistence.Enumerated;\n-import javax.persistence.Table;\n-import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.core.spring.security.Encryptor;\n-import org.apache.syncope.core.persistence.api.entity.Domain;\n-import org.apache.syncope.core.persistence.jpa.validation.entity.DomainCheck;\n-\n-@Entity\n-@Table(name = JPADomain.TABLE)\n-@DomainCheck\n-public class JPADomain extends AbstractProvidedKeyEntity implements Domain {\n-\n-    private static final long serialVersionUID = -5891241943464285840L;\n-\n-    public static final String TABLE = \"SyncopeDomain\";\n-\n-    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n-\n-    private String adminPwd;\n-\n-    @Enumerated(EnumType.STRING)\n-    private CipherAlgorithm adminCipherAlgorithm;\n-\n-    @Override\n-    public String getAdminPwd() {\n-        return adminPwd;\n-    }\n-\n-    @Override\n-    public CipherAlgorithm getAdminCipherAlgorithm() {\n-        return adminCipherAlgorithm;\n-    }\n-\n-    @Override\n-    public void setPassword(final String password, final CipherAlgorithm cipherAlgoritm) {\n-        try {\n-            this.adminPwd = ENCRYPTOR.encode(password, cipherAlgoritm);\n-            this.adminCipherAlgorithm = cipherAlgoritm;\n-        } catch (Exception e) {\n-            LOG.error(\"Could not encode password\", e);\n-            this.adminPwd = null;\n-        }\n-    }\n-\n-}"},{"sha":"ac8865ab7dd7750b4b9833ccbf088507c3af594f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -38,7 +38,6 @@\n import org.apache.syncope.core.persistence.api.entity.ConnInstanceHistoryConf;\n import org.apache.syncope.core.persistence.api.entity.ConnPoolConf;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.Domain;\n import org.apache.syncope.core.persistence.api.entity.user.DynRoleMembership;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n@@ -145,9 +144,7 @@ public class JPAEntityFactory implements EntityFactory {\n     public <E extends Entity> E newEntity(final Class<E> reference) {\n         E result;\n \n-        if (reference.equals(Domain.class)) {\n-            result = (E) new JPADomain();\n-        } else if (reference.equals(Realm.class)) {\n+        if (reference.equals(Realm.class)) {\n             result = (E) new JPARealm();\n         } else if (reference.equals(DynRealm.class)) {\n             result = (E) new JPADynRealm();"},{"sha":"c7bbe775fa50d0dd295893d00336be58d7469097","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/spring/CommonEntityManagerFactoryConf.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FCommonEntityManagerFactoryConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FCommonEntityManagerFactoryConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FCommonEntityManagerFactoryConf.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -22,14 +22,14 @@\n import java.util.Map;\n import javax.persistence.ValidationMode;\n import javax.sql.DataSource;\n-import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.springframework.orm.jpa.persistenceunit.PersistenceUnitPostProcessor;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n \n /**\n  * Container for common configuration options among all EntityManagerFactory entities (one for each domain).\n  * Acts as a commodity place for fetching each domain's {@link DataSource}..\n  */\n-public class CommonEntityManagerFactoryConf implements DomainsHolder {\n+public class CommonEntityManagerFactoryConf implements DomainHolder {\n \n     private final Map<String, DataSource> domains = new HashMap<>();\n "},{"sha":"f40c37e4aa10acc8452ca4467647dc61f9d21c38","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/DomainCheck.java","status":"removed","additions":0,"deletions":41,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824066b70d3f041a1d76aa85b1f6709bea88440e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDomainCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824066b70d3f041a1d76aa85b1f6709bea88440e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDomainCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDomainCheck.java?ref=824066b70d3f041a1d76aa85b1f6709bea88440e","patch":"@@ -1,41 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.validation.entity;\n-\n-import java.lang.annotation.Documented;\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-\n-import javax.validation.Constraint;\n-import javax.validation.Payload;\n-\n-@Target({ ElementType.TYPE })\n-@Retention(RetentionPolicy.RUNTIME)\n-@Constraint(validatedBy = DomainValidator.class)\n-@Documented\n-public @interface DomainCheck {\n-\n-    String message() default \"{org.apache.syncope.core.persistence.validation.domain}\";\n-\n-    Class<?>[] groups() default {};\n-\n-    Class<? extends Payload>[] payload() default {};\n-}"},{"sha":"2829e69f58cc478a55757dbff3002fefa630d5ae","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/DomainValidator.java","status":"removed","additions":0,"deletions":42,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824066b70d3f041a1d76aa85b1f6709bea88440e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDomainValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824066b70d3f041a1d76aa85b1f6709bea88440e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDomainValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDomainValidator.java?ref=824066b70d3f041a1d76aa85b1f6709bea88440e","patch":"@@ -1,42 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.validation.entity;\n-\n-import javax.validation.ConstraintValidatorContext;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.types.EntityViolationType;\n-import org.apache.syncope.core.persistence.api.entity.Domain;\n-\n-public class DomainValidator extends AbstractValidator<DomainCheck, Domain> {\n-\n-    @Override\n-    public boolean isValid(final Domain object, final ConstraintValidatorContext context) {\n-        context.disableDefaultConstraintViolation();\n-\n-        if (SyncopeConstants.MASTER_DOMAIN.equals(object.getKey())) {\n-            context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidKey, \"Reserved: \" + SyncopeConstants.MASTER_DOMAIN)).\n-                    addPropertyNode(\"key\").addConstraintViolation();\n-\n-            return false;\n-        }\n-\n-        return true;\n-    }\n-}"},{"sha":"56ec96963c07776767afa32e27ea2251a7afb2ec","filename":"core/persistence-jpa/src/main/java/org/springframework/orm/jpa/vendor/OpenJpaDialect.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fvendor%2FOpenJpaDialect.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fvendor%2FOpenJpaDialect.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fvendor%2FOpenJpaDialect.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -155,5 +155,4 @@ public void releaseConnection(final Connection con) {\n             JdbcUtils.closeConnection(con);\n         }\n     }\n-\n }"},{"sha":"009a5e01d5cfecfd7daf54f1e113d89b09387f1c","filename":"core/persistence-jpa/src/main/java/org/springframework/orm/jpa/vendor/OpenJpaVendorAdapter.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fvendor%2FOpenJpaVendorAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fvendor%2FOpenJpaVendorAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fvendor%2FOpenJpaVendorAdapter.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -127,5 +127,4 @@ public Class<? extends EntityManagerFactory> getEntityManagerFactoryInterface()\n     public Class<? extends EntityManager> getEntityManagerInterface() {\n         return OpenJPAEntityManagerSPI.class;\n     }\n-\n }"},{"sha":"846244d67457f169abfe747aaa76cb2c1d008390","filename":"core/persistence-jpa/src/main/resources/domains/MasterKeymasterConfParams.json","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterKeymasterConfParams.json","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterKeymasterConfParams.json","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterKeymasterConfParams.json?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","previous_filename":"core/persistence-jpa/src/main/resources/domains/MasterKeymasterContent.json"},{"sha":"89832a12e0a1c3171670d5f79f5b6e5fd5a66451","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyDomainOps.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyDomainOps.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.DomainRegistry;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DummyDomainOps implements DomainOps {\n+\n+    @Autowired\n+    private DomainRegistry domainRegistry;\n+\n+    @Override\n+    public List<Domain> list() {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public Domain read(final String key) {\n+        return new Domain.Builder(key).build();\n+    }\n+\n+    @Override\n+    public void create(final Domain domain) {\n+        domainRegistry.register(domain);\n+    }\n+\n+    @Override\n+    public void changeAdminPassword(final String key, final String password, final CipherAlgorithm cipherAlgorithm) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void adjustPoolSize(final String key, final int maxPoolSize, final int minIdle) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        // nothing to do\n+    }\n+}"},{"sha":"4d378ac0bcc8f50f43dd021b6a26efbba93b758e","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/TestInitializer.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FTestInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FTestInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FTestInitializer.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.persistence.jpa;\n \n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.core.persistence.api.DomainsHolder;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.persistence.api.content.ContentLoader;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.beans.BeansException;\n@@ -37,10 +37,10 @@ public class TestInitializer implements InitializingBean, ApplicationContextAwar\n     private ConfigurableApplicationContext ctx;\n \n     @Autowired\n-    private DomainLoader domainLoader;\n+    private StartupDomainLoader domainLoader;\n \n     @Autowired\n-    private DomainsHolder domainsHolder;\n+    private DomainHolder domainHolder;\n \n     @Autowired\n     private ContentLoader contentLoader;\n@@ -59,11 +59,11 @@ public void afterPropertiesSet() throws Exception {\n \n         contentLoader.load(\n                 SyncopeConstants.MASTER_DOMAIN,\n-                domainsHolder.getDomains().get(SyncopeConstants.MASTER_DOMAIN));\n-        if (domainsHolder.getDomains().containsKey(\"Two\")) {\n+                domainHolder.getDomains().get(SyncopeConstants.MASTER_DOMAIN));\n+        if (domainHolder.getDomains().containsKey(\"Two\")) {\n             contentLoader.load(\n                     \"Two\",\n-                    domainsHolder.getDomains().get(\"Two\"));\n+                    domainHolder.getDomains().get(\"Two\"));\n         }\n     }\n }"},{"sha":"52b421ea41caaf36bdc0036227b7b34242eb475b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/DomainTest.java","status":"removed","additions":0,"deletions":91,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824066b70d3f041a1d76aa85b1f6709bea88440e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDomainTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824066b70d3f041a1d76aa85b1f6709bea88440e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDomainTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDomainTest.java?ref=824066b70d3f041a1d76aa85b1f6709bea88440e","patch":"@@ -1,91 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.inner;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-\n-import java.util.List;\n-import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n-import org.apache.syncope.core.persistence.api.entity.Domain;\n-import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.jupiter.api.Tag;\n-import org.junit.jupiter.api.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-@Transactional(\"Master\")\n-public class DomainTest extends AbstractTest {\n-\n-    @Autowired\n-    private DomainDAO domainDAO;\n-\n-    @Tag(\"multitenancy\")\n-    @Test\n-    public void find() {\n-        Domain two = domainDAO.find(\"Two\");\n-        assertNotNull(two);\n-        assertEquals(CipherAlgorithm.SHA, two.getAdminCipherAlgorithm());\n-\n-        assertNull(domainDAO.find(\"none\"));\n-    }\n-\n-    @Tag(\"multitenancy\")\n-    @Test\n-    public void findAll() {\n-        List<Domain> list = domainDAO.findAll();\n-        assertNotNull(list);\n-        assertFalse(list.isEmpty());\n-        list.forEach(domain -> {\n-            assertNotNull(domain);\n-        });\n-    }\n-\n-    @Test\n-    public void save() {\n-        Domain domain = entityFactory.newEntity(Domain.class);\n-        domain.setKey(\"new\");\n-        domain.setPassword(\"password\", CipherAlgorithm.SSHA512);\n-\n-        Domain actual = domainDAO.save(domain);\n-        assertNotNull(actual);\n-        assertEquals(CipherAlgorithm.SSHA512, actual.getAdminCipherAlgorithm());\n-        assertNotEquals(\"password\", actual.getAdminPwd());\n-    }\n-\n-    @Test\n-    public void delete() {\n-        Domain domain = entityFactory.newEntity(Domain.class);\n-        domain.setKey(\"todelete\");\n-        domain.setPassword(\"password\", CipherAlgorithm.SSHA512);\n-\n-        Domain actual = domainDAO.save(domain);\n-        assertNotNull(actual);\n-\n-        String id = actual.getKey();\n-        assertNotNull(domainDAO.find(id));\n-\n-        domainDAO.delete(id);\n-        assertNull(domainDAO.find(id));\n-    }\n-}"},{"sha":"0809c012916150e5b9537317b47fdd02a50780ff","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -18,8 +18,6 @@ specific language governing permissions and limitations\n under the License.\n -->\n <dataset>\n-  <SyncopeDomain id=\"Two\" adminCipherAlgorithm=\"SHA\" adminPwd=\"2AA60A8FF7FCD473D321E0146AFD9E26DF395147\"/>\n-  \n   <!-- sample policies -->\n   <PasswordPolicy id=\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\" description=\"a password policy\"\n                   historyLength=\"1\" allowNullPassword=\"1\"/>"},{"sha":"9fa010a8d2d7cdadf3731cffcd68616990267d71","filename":"core/persistence-jpa/src/test/resources/domains/MasterKeymasterConfParams.json","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterKeymasterConfParams.json","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterKeymasterConfParams.json","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterKeymasterConfParams.json?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","previous_filename":"core/persistence-jpa/src/test/resources/domains/MasterKeymasterContent.json"},{"sha":"796f3a047249cbded71d40388e48af3b6b9e5a48","filename":"core/persistence-jpa/src/test/resources/domains/TwoKeymasterConfParams.json","status":"added","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoKeymasterConfParams.json","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoKeymasterConfParams.json","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoKeymasterConfParams.json?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,15 @@\n+{\n+  \"password.cipher.algorithm\": \"SHA1\",\n+  \"token.length\": 256,\n+  \"token.expireTime\": 60,\n+  \"selfRegistration.allowed\": true,\n+  \"passwordReset.allowed\": true,\n+  \"passwordReset.securityQuestion\": true,\n+  \"authentication.attributes\": [\"username\"],\n+  \"authentication.statuses\": [\"created\", \"active\"],\n+  \"log.lastlogindate\": true,\n+  \"return.password.value\": false,\n+  \"jwt.lifetime.minutes\": 120,\n+  \"connector.conf.history.size\": 10,\n+  \"resource.conf.history.size\": 10\n+}\n\\ No newline at end of file"},{"sha":"53e0269b717e7cdf6bf1fdf71fea22a5d088a105","filename":"core/persistence-jpa/src/test/resources/domains/TwoSecurity.json","status":"added","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoSecurity.json","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoSecurity.json","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoSecurity.json?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,4 @@\n+{\n+  \"password\": \"2AA60A8FF7FCD473D321E0146AFD9E26DF395147\",\n+  \"cipherAlgorithm\": \"SHA\"\n+}"},{"sha":"4ef408ce7f1885f4b54d9a93e7e6ca3323de5aca","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/DomainDataBinderImpl.java","status":"removed","additions":0,"deletions":70,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824066b70d3f041a1d76aa85b1f6709bea88440e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDomainDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824066b70d3f041a1d76aa85b1f6709bea88440e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDomainDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDomainDataBinderImpl.java?ref=824066b70d3f041a1d76aa85b1f6709bea88440e","patch":"@@ -1,70 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java.data;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.DomainTO;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.Domain;\n-import org.apache.syncope.core.provisioning.api.data.DomainDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class DomainDataBinderImpl implements DomainDataBinder {\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    @Override\n-    public Domain create(final DomainTO domainTO) {\n-        Domain domain = entityFactory.newEntity(Domain.class);\n-        update(domain, domainTO);\n-        return domain;\n-    }\n-\n-    @Override\n-    public void update(final Domain domain, final DomainTO domainTO) {\n-        if (domain.getKey() == null) {\n-            domain.setKey(domainTO.getKey());\n-        }\n-\n-        if (StringUtils.isBlank(domainTO.getAdminPwd()) || domainTO.getAdminCipherAlgorithm() == null) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n-            sce.getElements().add(\"Actual password value and / or cipher algorithm\");\n-        }\n-\n-        domain.setPassword(domainTO.getAdminPwd(), domainTO.getAdminCipherAlgorithm());\n-    }\n-\n-    @Override\n-    public DomainTO getDomainTO(final Domain domain) {\n-        DomainTO domainTO = new DomainTO();\n-\n-        domainTO.setKey(domain.getKey());\n-\n-        domainTO.setAdminCipherAlgorithm(domain.getAdminCipherAlgorithm());\n-        domainTO.setAdminPwd(domainTO.getAdminPwd());\n-\n-        return domainTO;\n-    }\n-\n-}"},{"sha":"8ea7a4051a11720903fd5f2de1195666a741b6a8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n@@ -46,7 +47,6 @@\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n@@ -82,7 +82,7 @@ public class JobManagerImpl implements JobManager, SyncopeCoreLoader {\n     private static final Logger LOG = LoggerFactory.getLogger(JobManager.class);\n \n     @Autowired\n-    private DomainsHolder domainsHolder;\n+    private DomainHolder domainHolder;\n \n     @Autowired\n     private SchedulerFactoryBean scheduler;\n@@ -115,7 +115,7 @@ private boolean isRunningElsewhere(final JobKey jobKey) throws SchedulerExceptio\n             return false;\n         }\n \n-        DataSource dataSource = domainsHolder.getDomains().get(SyncopeConstants.MASTER_DOMAIN);\n+        DataSource dataSource = domainHolder.getDomains().get(SyncopeConstants.MASTER_DOMAIN);\n         Connection conn = DataSourceUtils.getConnection(dataSource);\n         PreparedStatement stmt = null;\n         ResultSet resultSet = null;"},{"sha":"1ccf5692dc173f78aabfb4d66e2ffe3f829abc27","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/NotificationJob.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJob.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.provisioning.java.job.notification;\n \n+import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.apache.syncope.core.provisioning.api.job.JobDelegate;\n import org.apache.syncope.core.provisioning.api.notification.NotificationJobDelegate;\n import org.apache.syncope.core.provisioning.java.job.AbstractInterruptableJob;\n@@ -50,7 +50,7 @@ public enum Status {\n     private static final Logger LOG = LoggerFactory.getLogger(NotificationJob.class);\n \n     @Autowired\n-    private DomainsHolder domainsHolder;\n+    private DomainHolder domainHolder;\n \n     @Autowired\n     private NotificationJobDelegate delegate;\n@@ -64,7 +64,7 @@ public JobDelegate getDelegate() {\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n         LOG.debug(\"Waking up...\");\n \n-        for (String domain : domainsHolder.getDomains().keySet()) {\n+        for (String domain : domainHolder.getDomains().keySet()) {\n             try {\n                 AuthContextUtils.callAsAdmin(domain, () -> {\n                     try {"},{"sha":"84483c6981ecb6a23b6311da66601b7a409ae278","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/AuditReportlet.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -27,10 +27,10 @@\n import org.apache.commons.lang3.builder.ToStringStyle;\n import org.apache.syncope.common.lib.report.AuditReportletConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.provisioning.java.AuditEntry;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.core.JdbcTemplate;\n@@ -42,7 +42,7 @@\n public class AuditReportlet extends AbstractReportlet {\n \n     @Autowired\n-    private DomainsHolder domainsHolder;\n+    private DomainHolder domainHolder;\n \n     private AuditReportletConf conf;\n \n@@ -140,7 +140,7 @@ protected void doExtract(\n             throw new ReportException(new IllegalArgumentException(\"Invalid configuration provided\"));\n         }\n \n-        datasource = domainsHolder.getDomains().get(AuthContextUtils.getDomain());\n+        datasource = domainHolder.getDomains().get(AuthContextUtils.getDomain());\n         if (datasource == null) {\n             throw new ReportException(new IllegalArgumentException(\"Could not get to DataSource\"));\n         }"},{"sha":"dfb493549b99499376f64d5647e58327f316d62c","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DummyDomainOps.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyDomainOps.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DummyDomainOps implements DomainOps {\n+\n+    @Override\n+    public List<Domain> list() {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public Domain read(final String key) {\n+        return new Domain.Builder(key).build();\n+    }\n+\n+    @Override\n+    public void create(final Domain domain) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void changeAdminPassword(final String key, final String password, final CipherAlgorithm cipherAlgorithm) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void adjustPoolSize(final String key, final int maxPoolSize, final int minIdle) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        // nothing to do\n+    }\n+}"},{"sha":"64c824078ccc173a190691eb6dc850b7528fe765","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/TestInitializer.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FTestInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FTestInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FTestInitializer.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -19,9 +19,9 @@\n package org.apache.syncope.core.provisioning.java;\n \n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.core.persistence.api.DomainsHolder;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.persistence.api.content.ContentLoader;\n-import org.apache.syncope.core.persistence.jpa.DomainLoader;\n+import org.apache.syncope.core.persistence.jpa.StartupDomainLoader;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.InitializingBean;\n@@ -39,10 +39,10 @@ public class TestInitializer implements InitializingBean, ApplicationContextAwar\n     private ConfigurableApplicationContext ctx;\n \n     @Autowired\n-    private DomainLoader domainLoader;\n+    private StartupDomainLoader domainLoader;\n \n     @Autowired\n-    private DomainsHolder domainsHolder;\n+    private DomainHolder domainHolder;\n \n     @Autowired\n     private ContentLoader contentLoader;\n@@ -65,6 +65,6 @@ public void afterPropertiesSet() throws Exception {\n \n         contentLoader.load(\n                 SyncopeConstants.MASTER_DOMAIN,\n-                domainsHolder.getDomains().get(SyncopeConstants.MASTER_DOMAIN));\n+                domainHolder.getDomains().get(SyncopeConstants.MASTER_DOMAIN));\n     }\n }"},{"sha":"71a03c99a0dbdfad87b4b0261b902ca7966905a9","filename":"core/spring/pom.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fspring%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fspring%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fpom.xml?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -48,6 +48,10 @@ under the License.\n       <groupId>commons-io</groupId>\n       <artifactId>commons-io</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.commons</groupId>\n+      <artifactId>commons-text</artifactId>\n+    </dependency>\n \n     <dependency>\n       <groupId>org.jasypt</groupId>"},{"sha":"0e14a23448bdefbf9b56864747f2fb244bf5274d","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":0,"deletions":15,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -42,14 +42,12 @@\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n-import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n-import org.apache.syncope.core.persistence.api.entity.Domain;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -63,7 +61,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;\n-import org.springframework.security.authentication.AuthenticationServiceException;\n import org.springframework.security.authentication.DisabledException;\n import org.springframework.security.core.Authentication;\n import org.springframework.transaction.annotation.Transactional;\n@@ -94,9 +91,6 @@ public class AuthDataAccessor {\n     @Resource(name = \"anonymousUser\")\n     protected String anonymousUser;\n \n-    @Autowired\n-    protected DomainDAO domainDAO;\n-\n     @Autowired\n     protected RealmDAO realmDAO;\n \n@@ -158,15 +152,6 @@ public JWTSSOProvider getJWTSSOProvider(final String issuer) {\n         return provider;\n     }\n \n-    @Transactional(readOnly = true)\n-    public Domain findDomain(final String key) {\n-        Domain domain = domainDAO.find(key);\n-        if (domain == null) {\n-            throw new AuthenticationServiceException(\"Could not find domain \" + key);\n-        }\n-        return domain;\n-    }\n-\n     /**\n      * Attempts to authenticate the given credentials against internal storage and pass-through resources (if\n      * configured): the first succeeding causes global success."},{"sha":"a54691c80691ffa40f55d075adaa9fcdf9db5888","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/UsernamePasswordAuthenticationProvider.java","status":"modified","additions":15,"deletions":8,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FUsernamePasswordAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FUsernamePasswordAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FUsernamePasswordAuthenticationProvider.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -21,11 +21,13 @@\n import javax.annotation.Resource;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.core.persistence.api.entity.Domain;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.slf4j.Logger;\n@@ -44,6 +46,9 @@ public class UsernamePasswordAuthenticationProvider implements AuthenticationPro\n \n     protected static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n \n+    @Autowired\n+    protected DomainOps domainOps;\n+\n     @Autowired\n     protected AuthDataAccessor dataAccessor;\n \n@@ -109,14 +114,16 @@ public Authentication authenticate(final Authentication authentication) {\n                         CipherAlgorithm.valueOf(adminPasswordAlgorithm),\n                         adminPassword);\n             } else {\n-                authenticated = AuthContextUtils.callAsAdmin(SyncopeConstants.MASTER_DOMAIN, () -> {\n-                    Domain domainEntity = dataAccessor.findDomain(domain);\n-\n-                    return ENCRYPTOR.verify(\n+                try {\n+                    Domain domainObj = domainOps.read(domain);\n+                    authenticated = ENCRYPTOR.verify(\n                             authentication.getCredentials().toString(),\n-                            domainEntity.getAdminCipherAlgorithm(),\n-                            domainEntity.getAdminPwd());\n-                });\n+                            domainObj.getAdminCipherAlgorithm(),\n+                            domainObj.getAdminPassword());\n+                } catch (KeymasterException e) {\n+                    LOG.error(\"While attempting to read domain {}\", domain, e);\n+                    authenticated = false;\n+                }\n             }\n         } else {\n             Pair<User, Boolean> authResult = AuthContextUtils.callAsAdmin(domain,"},{"sha":"5c2bbffe9c4f44f60226e51dd5b208a85a33dcb2","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/SyncopeCoreInitializer.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreInitializer.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -19,9 +19,9 @@\n package org.apache.syncope.core.starter;\n \n import java.util.Comparator;\n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n-import org.apache.syncope.core.persistence.api.DomainsHolder;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -42,7 +42,7 @@ public class SyncopeCoreInitializer implements ApplicationListener<ContextRefres\n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeCoreInitializer.class);\n \n     @Autowired\n-    private DomainsHolder domainsHolder;\n+    private DomainHolder domainHolder;\n \n     @Autowired\n     private ServiceOps serviceOps;\n@@ -66,7 +66,7 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {\n \n                     loader.load();\n \n-                    domainsHolder.getDomains().forEach((domain, datasource) -> {\n+                    domainHolder.getDomains().forEach((domain, datasource) -> {\n                         LOG.debug(\"[{}] Starting on domain '{}'\", loaderName, domain);\n                         loader.load(domain, datasource);\n                         LOG.debug(\"[{}] Completed on domain '{}'\", loaderName, domain);"},{"sha":"ca22267b16c645b027a11a934807fa0af8ef89f8","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DomainProcessEngineFactoryBean.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngineFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngineFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngineFactoryBean.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -22,7 +22,7 @@\n import java.util.HashMap;\n import java.util.Map;\n import javax.sql.DataSource;\n-import org.apache.syncope.core.persistence.api.DomainsHolder;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n import org.flowable.engine.ProcessEngine;\n import org.flowable.common.engine.impl.cfg.SpringBeanFactoryProxyMap;\n@@ -106,7 +106,7 @@ public DomainProcessEngine getObject() throws Exception {\n         if (engine == null) {\n             Map<String, ProcessEngine> engines = new HashMap<>();\n \n-            ctx.getBean(DomainsHolder.class).getDomains().forEach((domain, datasource) -> {\n+            ctx.getBean(DomainHolder.class).getDomains().forEach((domain, datasource) -> {\n                 engines.put(domain, build(domain, datasource));\n             });\n "},{"sha":"b484f56d6412e934bf7b562fa5ca12835720295a","filename":"ext/oidcclient/agent/src/main/java/org/apache/syncope/ext/oidcclient/agent/AbstractOIDCClientServlet.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FAbstractOIDCClientServlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FAbstractOIDCClientServlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FAbstractOIDCClientServlet.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -23,7 +23,7 @@\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;"},{"sha":"cedd074311516b1bb33f3a5ca747c1bac7c26838","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/AbstractSAML2SPServlet.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAbstractSAML2SPServlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAbstractSAML2SPServlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAbstractSAML2SPServlet.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.lib.SSOConstants;\n import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;"},{"sha":"5e938f4dfc3a1618b763464da3ef683e0f1caba6","filename":"ext/self-keymaster/client/src/main/java/org/apache/syncope/common/keymaster/client/self/SelfKeymasterClientContext.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientContext.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -23,6 +23,7 @@\n import org.apache.cxf.ext.logging.LoggingFeature;\n import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n@@ -54,7 +55,8 @@ public JAXRSClientFactoryBean selfKeymasterRESTClientFactoryBean() {\n         restClientFactoryBean.setThreadSafe(true);\n         restClientFactoryBean.setInheritHeaders(true);\n         restClientFactoryBean.setFeatures(Arrays.asList(new LoggingFeature()));\n-        restClientFactoryBean.setProviders(Arrays.asList(new JacksonJsonProvider()));\n+        restClientFactoryBean.setProviders(\n+                Arrays.asList(new JacksonJsonProvider(), new SelfKeymasterClientExceptionMapper()));\n         return restClientFactoryBean;\n     }\n \n@@ -69,4 +71,10 @@ public ConfParamOps selfConfParamOps() {\n     public ServiceOps selfServiceOps() {\n         return new SelfKeymasterServiceOps(selfKeymasterRESTClientFactoryBean(), 5);\n     }\n+\n+    @ConditionalOnExpression(\"#{'${keymaster.address}' matches '^http.+'}\")\n+    @Bean\n+    public DomainOps domainOps() {\n+        return new SelfKeymasterDomainOps(selfKeymasterRESTClientFactoryBean());\n+    }\n }"},{"sha":"055605745db1e5d4e7faf26fec03041fe50e0c23","filename":"ext/self-keymaster/client/src/main/java/org/apache/syncope/common/keymaster/client/self/SelfKeymasterClientExceptionMapper.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientExceptionMapper.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.keymaster.client.self;\n+\n+import java.security.AccessControlException;\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.ForbiddenException;\n+import javax.ws.rs.NotFoundException;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.Provider;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\n+import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Provider\n+public class SelfKeymasterClientExceptionMapper implements ResponseExceptionMapper<Exception> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SelfKeymasterClientExceptionMapper.class);\n+\n+    @Override\n+    public Exception fromResponse(final Response response) {\n+        int statusCode = response.getStatus();\n+        String message = response.readEntity(String.class);\n+\n+        Exception ex;\n+        if (statusCode == Response.Status.UNAUTHORIZED.getStatusCode()) {\n+            // 1. Map SC_UNAUTHORIZED\n+            ex = new AccessControlException(StringUtils.isBlank(message)\n+                    ? \"Remote unauthorized exception\"\n+                    : message);\n+        } else if (statusCode == Response.Status.FORBIDDEN.getStatusCode()) {\n+            // 2. Map SC_FORBIDDEN\n+            ex = new ForbiddenException(StringUtils.isBlank(message)\n+                    ? \"Remote forbidden exception\"\n+                    : message);\n+        } else if (statusCode == Response.Status.NOT_FOUND.getStatusCode()) {\n+            // 3. Map SC_NOT_FOUND\n+            ex = StringUtils.isBlank(message)\n+                    ? new NotFoundException()\n+                    : new NotFoundException(message);\n+        } else if (statusCode == Response.Status.BAD_REQUEST.getStatusCode()) {\n+            // 4. Map SC_BAD_REQUEST\n+            ex = StringUtils.isBlank(message)\n+                    ? new BadRequestException()\n+                    : message.contains(KeymasterException.class.getSimpleName())\n+                    ? new KeymasterException(message)\n+                    : new BadRequestException(message);\n+        } else {\n+            // 5. All other codes are mapped to runtime exception with HTTP code information\n+            ex = new WebServiceException(String.format(\"Remote exception with status code: %s\",\n+                    Response.Status.fromStatusCode(statusCode).name()));\n+        }\n+        LOG.error(\"Exception thrown\", ex);\n+        return ex;\n+    }\n+}"},{"sha":"57c2c88c04319db49374fb260a349b5fcf3f327f","filename":"ext/self-keymaster/client/src/main/java/org/apache/syncope/common/keymaster/client/self/SelfKeymasterDomainOps.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterDomainOps.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.keymaster.client.self;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.ext.self.keymaster.api.service.DomainService;\n+\n+public class SelfKeymasterDomainOps extends SelfKeymasterOps implements DomainOps {\n+\n+    public SelfKeymasterDomainOps(final JAXRSClientFactoryBean clientFactory) {\n+        super(clientFactory);\n+    }\n+\n+    @Override\n+    public List<Domain> list() {\n+        return client(DomainService.class, Collections.emptyMap()).list();\n+    }\n+\n+    @Override\n+    public Domain read(final String key) {\n+        try {\n+            return client(DomainService.class, Collections.emptyMap()).read(key);\n+        } catch (KeymasterException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new KeymasterException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void create(final Domain domain) {\n+        try {\n+            client(DomainService.class, Collections.emptyMap()).create(domain);\n+        } catch (KeymasterException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new KeymasterException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void changeAdminPassword(final String key, final String password, final CipherAlgorithm cipherAlgorithm) {\n+        try {\n+            client(DomainService.class, Collections.emptyMap()).changeAdminPassword(key, password, cipherAlgorithm);\n+        } catch (KeymasterException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new KeymasterException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void adjustPoolSize(final String key, final int maxPoolSize, final int minIdle) {\n+        try {\n+            client(DomainService.class, Collections.emptyMap()).adjustPoolSize(key, maxPoolSize, minIdle);\n+        } catch (KeymasterException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new KeymasterException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        try {\n+            client(DomainService.class, Collections.emptyMap()).delete(key);\n+        } catch (KeymasterException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new KeymasterException(e);\n+        }\n+    }\n+}"},{"sha":"f9695650173b73d1619055900b7f6efe742e2f4e","filename":"ext/self-keymaster/client/src/main/java/org/apache/syncope/common/keymaster/client/self/SelfKeymasterServiceOps.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterServiceOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterServiceOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterServiceOps.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -28,7 +28,7 @@\n import javax.ws.rs.core.Response;\n import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.ext.self.keymaster.api.service.NetworkServiceService;\n import org.slf4j.Logger;\n@@ -60,6 +60,8 @@ public SelfKeymasterServiceOps(final JAXRSClientFactoryBean clientFactory, final\n     public List<NetworkService> list(final NetworkService.Type serviceType) {\n         try {\n             return client(NetworkServiceService.class, Collections.emptyMap()).list(serviceType);\n+        } catch (KeymasterException e) {\n+            throw e;\n         } catch (Exception e) {\n             throw new KeymasterException(e);\n         }\n@@ -69,6 +71,8 @@ public List<NetworkService> list(final NetworkService.Type serviceType) {\n     public NetworkService get(final NetworkService.Type serviceType) {\n         try {\n             return client(NetworkServiceService.class, Collections.emptyMap()).get(serviceType);\n+        } catch (KeymasterException e) {\n+            throw e;\n         } catch (Exception e) {\n             throw new KeymasterException(e);\n         }\n@@ -108,7 +112,7 @@ private void retry(\n             final BackOffExecution backOffExecution) {\n \n         completionStage.whenComplete((response, throwable) -> {\n-            if (throwable == null) {\n+            if (throwable == null && response.getStatus() < 300) {\n                 LOG.info(\"{} successfully \" + action + \"ed\", service);\n             } else {\n                 LOG.error(\"Could not \" + action + \" {}\", service, throwable);"},{"sha":"2362bb00f5d020b808a7d91d40ef369cfb073adc","filename":"ext/self-keymaster/logic/src/main/java/org/apache/syncope/core/logic/DomainLogic.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.common.keymaster.client.api.DomainWatcher;\n+import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.entity.DomainEntity;\n+import org.apache.syncope.core.persistence.api.entity.SelfKeymasterEntityFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DomainLogic extends AbstractTransactionalLogic<EntityTO> {\n+\n+    @Autowired\n+    private DomainDAO domainDAO;\n+\n+    @Autowired\n+    private SelfKeymasterEntityFactory entityFactory;\n+\n+    @Autowired\n+    private DomainWatcher domainWatcher;\n+\n+    @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n+    public List<Domain> list() {\n+        return domainDAO.findAll().stream().map(DomainEntity::get).collect(Collectors.toList());\n+    }\n+\n+    @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n+    public Domain read(final String key) {\n+        DomainEntity domain = domainDAO.find(key);\n+        if (domain == null) {\n+            throw new NotFoundException(\"Domain \" + key);\n+        }\n+\n+        return domain.get();\n+    }\n+\n+    @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n+    public Domain create(final Domain domain) {\n+        if (Objects.equals(domain.getKey(), SyncopeConstants.MASTER_DOMAIN)) {\n+            throw new KeymasterException(\"Cannot create domain \" + SyncopeConstants.MASTER_DOMAIN);\n+        }\n+\n+        DomainEntity domainEntity = entityFactory.newDomainEntity();\n+        domainEntity.setKey(domain.getKey());\n+        domainEntity.set(domain);\n+        domainEntity = domainDAO.save(domainEntity);\n+\n+        domainWatcher.update(Collections.singletonList(domain.getKey()));\n+\n+        return domainEntity.get();\n+    }\n+\n+    @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n+    public void changeAdminPassword(final String key, final String password, final CipherAlgorithm cipherAlgorithm) {\n+        DomainEntity domain = domainDAO.find(key);\n+        if (domain == null) {\n+            throw new NotFoundException(\"Domain \" + key);\n+        }\n+\n+        Domain domainObj = domain.get();\n+        domainObj.setAdminPassword(password);\n+        domainObj.setAdminCipherAlgorithm(cipherAlgorithm);\n+        domain.set(domainObj);\n+        domainDAO.save(domain);\n+    }\n+\n+    @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n+    public void adjustPoolSize(final String key, final int maxPoolSize, final int minIdle) {\n+        DomainEntity domain = domainDAO.find(key);\n+        if (domain == null) {\n+            throw new NotFoundException(\"Domain \" + key);\n+        }\n+\n+        Domain domainObj = domain.get();\n+        domainObj.setMaxPoolSize(maxPoolSize);\n+        domainObj.setMinIdle(minIdle);\n+        domain.set(domainObj);\n+        domainDAO.save(domain);\n+    }\n+\n+    @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n+    public void delete(final String key) {\n+        domainDAO.delete(key);\n+    }\n+\n+    @Override\n+    protected EntityTO resolveReference(final Method method, final Object... args) throws UnresolvedReferenceException {\n+        throw new UnsupportedOperationException();\n+    }\n+}"},{"sha":"76b5494788ed94cfb0c0e411ccd1ed208f7be26f","filename":"ext/self-keymaster/logic/src/main/java/org/apache/syncope/core/logic/NetworkServiceLogic.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNetworkServiceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNetworkServiceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNetworkServiceLogic.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -22,29 +22,29 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.RandomUtils;\n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.ServiceDAO;\n import org.apache.syncope.core.persistence.api.entity.SelfKeymasterEntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.Service;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.dao.NetworkServiceDAO;\n+import org.apache.syncope.core.persistence.api.entity.NetworkServiceEntity;\n \n @Component\n public class NetworkServiceLogic extends AbstractTransactionalLogic<EntityTO> {\n \n     @Autowired\n-    private ServiceDAO serviceDAO;\n+    private NetworkServiceDAO serviceDAO;\n \n     @Autowired\n     private SelfKeymasterEntityFactory entityFactory;\n \n     private NetworkService toNetworkService(\n             final NetworkService.Type serviceType,\n-            final Service service) {\n+            final NetworkServiceEntity service) {\n \n         NetworkService ns = new NetworkService();\n         ns.setType(serviceType);\n@@ -72,17 +72,15 @@ public NetworkService get(final NetworkService.Type serviceType) {\n                 : list.get(RandomUtils.nextInt(0, list.size()));\n     }\n \n-    @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n     public void register(final NetworkService networkService) {\n         unregister(networkService);\n \n-        Service service = entityFactory.newService();\n+        NetworkServiceEntity service = entityFactory.newNetworkService();\n         service.setType(networkService.getType());\n         service.setAddress(networkService.getAddress());\n         serviceDAO.save(service);\n     }\n \n-    @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n     public void unregister(final NetworkService networkService) {\n         serviceDAO.findAll(networkService.getType()).stream().\n                 filter(service -> service.getAddress().equals(networkService.getAddress()))."},{"sha":"cd6a296f1fe10e3c28966be1d3651a15953b9df6","filename":"ext/self-keymaster/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DomainDAO.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDomainDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDomainDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDomainDAO.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -19,15 +19,15 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.Domain;\n+import org.apache.syncope.core.persistence.api.entity.DomainEntity;\n \n-public interface DomainDAO extends DAO<Domain> {\n+public interface DomainDAO extends DAO<DomainEntity> {\n \n-    Domain find(String key);\n+    List<DomainEntity> findAll();\n \n-    List<Domain> findAll();\n+    DomainEntity find(String key);\n \n-    Domain save(Domain domain);\n+    DomainEntity save(DomainEntity domain);\n \n     void delete(String key);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DomainDAO.java"},{"sha":"ccf2735112636e595dc37860e03d83ec062bad28","filename":"ext/self-keymaster/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/NetworkServiceDAO.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FNetworkServiceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FNetworkServiceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FNetworkServiceDAO.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -19,14 +19,14 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n-import org.apache.syncope.core.persistence.api.entity.Service;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+import org.apache.syncope.core.persistence.api.entity.NetworkServiceEntity;\n \n-public interface ServiceDAO extends DAO<Service> {\n+public interface NetworkServiceDAO extends DAO<NetworkServiceEntity> {\n \n-    List<Service> findAll(NetworkService.Type serviceType);\n+    List<NetworkServiceEntity> findAll(NetworkService.Type serviceType);\n \n-    Service save(Service service);\n+    NetworkServiceEntity save(NetworkServiceEntity service);\n \n-    void delete(Service service);\n+    void delete(NetworkServiceEntity service);\n }","previous_filename":"ext/self-keymaster/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ServiceDAO.java"},{"sha":"e49835c0d753ed56045585ba83a7a3dfbbdaece5","filename":"ext/self-keymaster/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DomainEntity.java","status":"renamed","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDomainEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDomainEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDomainEntity.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -18,13 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n \n-public interface Domain extends ProvidedKeyEntity {\n+public interface DomainEntity extends ProvidedKeyEntity {\n \n-    String getAdminPwd();\n+    Domain get();\n \n-    CipherAlgorithm getAdminCipherAlgorithm();\n-\n-    void setPassword(String password, CipherAlgorithm cipherAlgoritm);\n+    void set(Domain domain);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Domain.java"},{"sha":"d3dbad729d9cb9e323504aa0df2c46c180674c92","filename":"ext/self-keymaster/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/NetworkServiceEntity.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNetworkServiceEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNetworkServiceEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNetworkServiceEntity.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n \n-public interface Service extends Entity {\n+public interface NetworkServiceEntity extends Entity {\n \n     NetworkService.Type getType();\n ","previous_filename":"ext/self-keymaster/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Service.java"},{"sha":"7725093b1cdefe5921c0e0b52bfdeaffd244ac88","filename":"ext/self-keymaster/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SelfKeymasterEntityFactory.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSelfKeymasterEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSelfKeymasterEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSelfKeymasterEntityFactory.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -22,5 +22,7 @@ public interface SelfKeymasterEntityFactory {\n \n     ConfParam newConfParam();\n \n-    Service newService();\n+    NetworkServiceEntity newNetworkService();\n+\n+    DomainEntity newDomainEntity();\n }"},{"sha":"fa8f2fe72354512219df33eee400250a15316846","filename":"ext/self-keymaster/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADomainDAO.java","status":"renamed","additions":13,"deletions":17,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADomainDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADomainDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADomainDAO.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -21,39 +21,35 @@\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n-import org.apache.syncope.core.persistence.api.entity.Domain;\n+import org.apache.syncope.core.persistence.api.entity.DomainEntity;\n import org.apache.syncope.core.persistence.jpa.entity.JPADomain;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n-public class JPADomainDAO extends AbstractDAO<Domain> implements DomainDAO {\n+public class JPADomainDAO extends AbstractDAO<DomainEntity> implements DomainDAO {\n \n-    @Transactional(readOnly = true)\n     @Override\n-    public Domain find(final String key) {\n-        return entityManager().find(JPADomain.class, key);\n+    public List<DomainEntity> findAll() {\n+        TypedQuery<DomainEntity> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPADomain.class.getSimpleName() + \" e\", DomainEntity.class);\n+        return query.getResultList();\n     }\n \n     @Override\n-    public List<Domain> findAll() {\n-        TypedQuery<Domain> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPADomain.class.getSimpleName() + \" e \", Domain.class);\n-        return query.getResultList();\n+    public DomainEntity find(final String key) {\n+        return entityManager().find(JPADomain.class, key);\n     }\n \n     @Override\n-    public Domain save(final Domain anyTypeClass) {\n-        return entityManager().merge(anyTypeClass);\n+    public DomainEntity save(final DomainEntity domain) {\n+        return entityManager().merge(domain);\n     }\n \n     @Override\n     public void delete(final String key) {\n-        Domain domain = find(key);\n-        if (domain == null) {\n-            return;\n+        DomainEntity domain = find(key);\n+        if (domain != null) {\n+            entityManager().remove(domain);\n         }\n-\n-        entityManager().remove(domain);\n     }\n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADomainDAO.java"},{"sha":"f1218fc208465da87391c0c31a9f23e95fb218de","filename":"ext/self-keymaster/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPANetworkServiceDAO.java","status":"renamed","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANetworkServiceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANetworkServiceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANetworkServiceDAO.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -20,32 +20,33 @@\n \n import java.util.List;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n-import org.apache.syncope.core.persistence.api.dao.ServiceDAO;\n-import org.apache.syncope.core.persistence.api.entity.Service;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAService;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+import org.apache.syncope.core.persistence.jpa.entity.JPANetworkService;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.dao.NetworkServiceDAO;\n+import org.apache.syncope.core.persistence.api.entity.NetworkServiceEntity;\n \n @Repository\n-public class JPAServiceDAO extends AbstractDAO<Service> implements ServiceDAO {\n+public class JPANetworkServiceDAO extends AbstractDAO<NetworkServiceEntity> implements NetworkServiceDAO {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public List<Service> findAll(final NetworkService.Type serviceType) {\n-        TypedQuery<Service> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAService.class.getSimpleName() + \" e WHERE e.type=:serviceType\", Service.class);\n+    public List<NetworkServiceEntity> findAll(final NetworkService.Type serviceType) {\n+        TypedQuery<NetworkServiceEntity> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPANetworkService.class.getSimpleName()\n+                + \" e WHERE e.type=:serviceType\", NetworkServiceEntity.class);\n         query.setParameter(\"serviceType\", serviceType);\n         return query.getResultList();\n     }\n \n     @Override\n-    public Service save(final Service service) {\n+    public NetworkServiceEntity save(final NetworkServiceEntity service) {\n         return entityManager().merge(service);\n     }\n \n     @Override\n-    public void delete(final Service service) {\n+    public void delete(final NetworkServiceEntity service) {\n         entityManager().remove(service);\n     }\n }","previous_filename":"ext/self-keymaster/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAServiceDAO.java"},{"sha":"a54a4945f253dc4ec80c56e6f806703fbe8e8899","filename":"ext/self-keymaster/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPADomain.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADomain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADomain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADomain.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.core.persistence.api.entity.DomainEntity;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+@Entity\n+@Table(name = JPADomain.TABLE)\n+public class JPADomain extends AbstractProvidedKeyEntity implements DomainEntity {\n+\n+    private static final long serialVersionUID = -9028021617728866693L;\n+\n+    public static final String TABLE = \"SyncopeDomain\";\n+\n+    @Lob\n+    private String spec;\n+\n+    @Override\n+    public Domain get() {\n+        return StringUtils.isBlank(spec)\n+                ? null\n+                : POJOHelper.deserialize(spec, Domain.class);\n+    }\n+\n+    @Override\n+    public void set(final Domain domain) {\n+        spec = POJOHelper.serialize(domain);\n+    }\n+}"},{"sha":"10e9f0226aada7ebb3c39cb930077f463ceb178f","filename":"ext/self-keymaster/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPANetworkService.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANetworkService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANetworkService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANetworkService.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -23,16 +23,16 @@\n import javax.persistence.Enumerated;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n-import org.apache.syncope.core.persistence.api.entity.Service;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+import org.apache.syncope.core.persistence.api.entity.NetworkServiceEntity;\n \n @Entity\n-@Table(name = JPAService.TABLE)\n-public class JPAService extends AbstractGeneratedKeyEntity implements Service {\n+@Table(name = JPANetworkService.TABLE)\n+public class JPANetworkService extends AbstractGeneratedKeyEntity implements NetworkServiceEntity {\n \n     private static final long serialVersionUID = 8742750097008236475L;\n \n-    public static final String TABLE = \"Service\";\n+    public static final String TABLE = \"NetworkService\";\n \n     @NotNull\n     @Enumerated(EnumType.STRING)","previous_filename":"ext/self-keymaster/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAService.java"},{"sha":"18d856da82455e3d8d713b4d1acdd27841678d18","filename":"ext/self-keymaster/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASelfKeymasterEntityFactory.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASelfKeymasterEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASelfKeymasterEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASelfKeymasterEntityFactory.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -19,10 +19,11 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import org.apache.syncope.core.persistence.api.entity.ConfParam;\n+import org.apache.syncope.core.persistence.api.entity.DomainEntity;\n import org.apache.syncope.core.persistence.api.entity.SelfKeymasterEntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.Service;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.persistence.api.entity.NetworkServiceEntity;\n \n @Component\n public class JPASelfKeymasterEntityFactory implements SelfKeymasterEntityFactory {\n@@ -33,9 +34,14 @@ public ConfParam newConfParam() {\n     }\n \n     @Override\n-    public Service newService() {\n-        JPAService service = new JPAService();\n+    public NetworkServiceEntity newNetworkService() {\n+        JPANetworkService service = new JPANetworkService();\n         service.setKey(SecureRandomUtils.generateRandomUUID().toString());\n         return service;\n     }\n+\n+    @Override\n+    public DomainEntity newDomainEntity() {\n+        return new JPADomain();\n+    }\n }"},{"sha":"40a390d14b7b228b1373d3f283c5dce07ab59485","filename":"ext/self-keymaster/rest-api/src/main/java/org/apache/syncope/ext/self/keymaster/api/service/DomainService.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fapi%2Fservice%2FDomainService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fapi%2Fservice%2FDomainService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fapi%2Fservice%2FDomainService.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.self.keymaster.api.service;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+\n+/**\n+ * REST operations for Self Keymaster's domains.\n+ */\n+@Path(\"domains\")\n+public interface DomainService extends Serializable {\n+\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    List<Domain> list();\n+\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    Domain read(@NotNull @PathParam(\"key\") String key);\n+\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_JSON })\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    Response create(Domain domain);\n+\n+    @POST\n+    @Path(\"{key}/changeAdminPassword\")\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    Response changeAdminPassword(\n+            @NotNull @PathParam(\"key\") String key,\n+            @QueryParam(\"password\") String password,\n+            @QueryParam(\"cipherAlgorithm\") CipherAlgorithm cipherAlgorithm);\n+\n+    @POST\n+    @Path(\"{key}/adjustPoolSize\")\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    Response adjustPoolSize(\n+            @NotNull @PathParam(\"key\") String key,\n+            @QueryParam(\"maxPoolSize\") int maxPoolSize,\n+            @QueryParam(\"minIdle\") int minIdle);\n+\n+    @DELETE\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    Response delete(@NotNull @PathParam(\"key\") String key);\n+}"},{"sha":"d7d1845ab27adb9422bd2be0cccca521bf89ca50","filename":"ext/self-keymaster/rest-api/src/main/java/org/apache/syncope/ext/self/keymaster/api/service/NetworkServiceService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fapi%2Fservice%2FNetworkServiceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fapi%2Fservice%2FNetworkServiceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fapi%2Fservice%2FNetworkServiceService.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -31,7 +31,7 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n \n /**\n  * REST operations for Self Keymaster's service discovery."},{"sha":"9088a83b72f4401c958ae35252b64aac61b752f0","filename":"ext/self-keymaster/rest-cxf/src/main/java/org/apache/syncope/ext/self/keymaster/cxf/SelfKeymasterContext.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2FSelfKeymasterContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2FSelfKeymasterContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2FSelfKeymasterContext.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -31,10 +31,12 @@\n import org.apache.cxf.transport.common.gzip.GZIPInInterceptor;\n import org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.core.spring.security.UsernamePasswordAuthenticationProvider;\n import org.apache.syncope.core.spring.security.WebSecurityContext;\n import org.apache.syncope.ext.self.keymaster.cxf.client.SelfKeymasterInternalConfParamOps;\n+import org.apache.syncope.ext.self.keymaster.cxf.client.SelfKeymasterInternalDomainOps;\n import org.apache.syncope.ext.self.keymaster.cxf.client.SelfKeymasterInternalServiceOps;\n import org.apache.syncope.ext.self.keymaster.cxf.security.SelfKeymasterUsernamePasswordAuthenticationProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -129,4 +131,9 @@ public ConfParamOps internalConfParamOps() {\n     public ServiceOps internalServiceOps() {\n         return new SelfKeymasterInternalServiceOps();\n     }\n+\n+    @Bean\n+    public DomainOps domainOps() {\n+        return new SelfKeymasterInternalDomainOps();\n+    }\n }"},{"sha":"6415f50342069bd45cf4a52d58960261ee276a2e","filename":"ext/self-keymaster/rest-cxf/src/main/java/org/apache/syncope/ext/self/keymaster/cxf/SelfKeymasterExceptionMapper.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2FSelfKeymasterExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2FSelfKeymasterExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2FSelfKeymasterExceptionMapper.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -27,6 +27,7 @@\n import javax.ws.rs.ext.ExceptionMapper;\n import javax.ws.rs.ext.Provider;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.slf4j.Logger;\n@@ -53,6 +54,9 @@ public Response toResponse(final Exception ex) {\n         } else if (ex instanceof NotFoundException) {\n             builder = Response.status(Response.Status.NOT_FOUND).\n                     entity(ExceptionUtils.getRootCauseMessage(ex));\n+        } else if (ex instanceof KeymasterException) {\n+            builder = Response.status(Response.Status.BAD_REQUEST).\n+                    entity(ExceptionUtils.getRootCauseMessage(ex));\n         } else if (ex instanceof SyncopeClientException) {\n             SyncopeClientException sce = (SyncopeClientException) ex;\n             builder = builder(sce.getType(), ExceptionUtils.getRootCauseMessage(ex));"},{"sha":"38a4c8571309b48c18810647a8b4218c9b80e68e","filename":"ext/self-keymaster/rest-cxf/src/main/java/org/apache/syncope/ext/self/keymaster/cxf/client/SelfKeymasterInternalDomainOps.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalDomainOps.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.self.keymaster.cxf.client;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.logic.DomainLogic;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+\n+public class SelfKeymasterInternalDomainOps implements DomainOps {\n+\n+    @Autowired\n+    private DomainLogic logic;\n+\n+    @Value(\"${keymaster.username}\")\n+    private String keymasterUser;\n+\n+    @Override\n+    public List<Domain> list() {\n+        return AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, Collections.emptyList(), () -> {\n+            return logic.list();\n+        });\n+    }\n+\n+    @Override\n+    public Domain read(final String key) {\n+        return AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, Collections.emptyList(), () -> {\n+            return logic.read(key);\n+        });\n+    }\n+\n+    @Override\n+    public void create(final Domain domain) {\n+        AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, Collections.emptyList(), () -> {\n+            logic.create(domain);\n+            return null;\n+        });\n+    }\n+\n+    @Override\n+    public void changeAdminPassword(final String key, final String password, final CipherAlgorithm cipherAlgorithm) {\n+        AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, Collections.emptyList(), () -> {\n+            logic.changeAdminPassword(key, password, cipherAlgorithm);\n+            return null;\n+        });\n+    }\n+\n+    @Override\n+    public void adjustPoolSize(final String key, final int maxPoolSize, final int minIdle) {\n+        AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, Collections.emptyList(), () -> {\n+            logic.adjustPoolSize(keymasterUser, maxPoolSize, minIdle);\n+            return null;\n+        });\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, Collections.emptyList(), () -> {\n+            logic.delete(key);\n+            return null;\n+        });\n+    }\n+}"},{"sha":"bd06859b0121d514c4278a9cd092f589eeccb878","filename":"ext/self-keymaster/rest-cxf/src/main/java/org/apache/syncope/ext/self/keymaster/cxf/client/SelfKeymasterInternalServiceOps.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalServiceOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalServiceOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalServiceOps.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -21,7 +21,7 @@\n import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.logic.NetworkServiceLogic;"},{"sha":"a181c2026dc6850a1cca765a3962b6c57a9bde24","filename":"ext/self-keymaster/rest-cxf/src/main/java/org/apache/syncope/ext/self/keymaster/cxf/service/DomainServiceImpl.java","status":"renamed","additions":29,"deletions":12,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fservice%2FDomainServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fservice%2FDomainServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fservice%2FDomainServiceImpl.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -16,51 +16,68 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.rest.cxf.service;\n+package org.apache.syncope.ext.self.keymaster.cxf.service;\n \n import java.net.URI;\n import java.util.List;\n+import javax.ws.rs.core.Context;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.DomainTO;\n+import javax.ws.rs.core.UriInfo;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.DomainService;\n import org.apache.syncope.core.logic.DomainLogic;\n+import org.apache.syncope.ext.self.keymaster.api.service.DomainService;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class DomainServiceImpl extends AbstractServiceImpl implements DomainService {\n+public class DomainServiceImpl implements DomainService {\n+\n+    private static final long serialVersionUID = -375255764389240615L;\n+\n+    @Context\n+    private UriInfo uriInfo;\n \n     @Autowired\n     private DomainLogic logic;\n \n     @Override\n-    public List<DomainTO> list() {\n+    public List<Domain> list() {\n         return logic.list();\n     }\n \n     @Override\n-    public DomainTO read(final String key) {\n+    public Domain read(final String key) {\n         return logic.read(key);\n     }\n \n     @Override\n-    public Response create(final DomainTO anyTypeTO) {\n-        DomainTO created = logic.create(anyTypeTO);\n+    public Response create(final Domain domain) {\n+        Domain created = logic.create(domain);\n         URI location = uriInfo.getAbsolutePathBuilder().path(created.getKey()).build();\n         return Response.created(location).\n                 header(RESTHeaders.RESOURCE_KEY, created.getKey()).\n                 build();\n     }\n \n     @Override\n-    public void update(final DomainTO anyTypeTO) {\n-        logic.update(anyTypeTO);\n+    public Response changeAdminPassword(\n+            final String key, final String password, final CipherAlgorithm cipherAlgorithm) {\n+\n+        logic.changeAdminPassword(key, password, cipherAlgorithm);\n+        return Response.noContent().build();\n     }\n \n     @Override\n-    public void delete(final String key) {\n-        logic.delete(key);\n+    public Response adjustPoolSize(final String key, final int maxPoolSize, final int minIdle) {\n+        logic.adjustPoolSize(key, maxPoolSize, minIdle);\n+        return Response.noContent().build();\n     }\n \n+    @Override\n+    public Response delete(final String key) {\n+        logic.delete(key);\n+        return Response.noContent().build();\n+    }\n }","previous_filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/DomainServiceImpl.java"},{"sha":"8bf3ed8416a9ac8163f19378295275e46dff9291","filename":"ext/self-keymaster/rest-cxf/src/main/java/org/apache/syncope/ext/self/keymaster/cxf/service/NetworkServiceServiceImpl.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fservice%2FNetworkServiceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fservice%2FNetworkServiceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fservice%2FNetworkServiceServiceImpl.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -21,10 +21,11 @@\n import java.util.List;\n import java.util.concurrent.CompletableFuture;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.core.logic.NetworkServiceLogic;\n import org.apache.syncope.ext.self.keymaster.api.service.NetworkServiceService;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Service;\n \n @Service\n@@ -45,6 +46,7 @@ public NetworkService get(final NetworkService.Type serviceType) {\n         return logic.get(serviceType);\n     }\n \n+    @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n     @Override\n     public CompletableFuture<Response> register(final NetworkService networkService) {\n         return CompletableFuture.supplyAsync(() -> {\n@@ -53,6 +55,7 @@ public CompletableFuture<Response> register(final NetworkService networkService)\n         });\n     }\n \n+    @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n     @Override\n     public CompletableFuture<Response> unregister(final NetworkService networkService) {\n         return CompletableFuture.supplyAsync(() -> {"},{"sha":"d5ee498dc1e2e95dea1a02afdacec5b895fd67cd","filename":"fit/console-reference/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/fit%2Fconsole-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/fit%2Fconsole-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fpom.xml?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -222,7 +222,7 @@ under the License.\n                   <cargo.jvmargs>\n                     -Dspring.profiles.active=embedded\n                     -Xdebug -Djaxb.debug=true -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n\n-                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx1024m -Xms512m</cargo.jvmargs>\n+                    -XX:+CMSClassUnloadingEnabled -XX:+UseG1GC -Xmx1024m -Xms512m</cargo.jvmargs>\n                 </properties>\n               </configuration>\n             </configuration>"},{"sha":"ecd6d7214e5cd8ae7464fbdbbb76bdb6fa1d9149","filename":"fit/core-reference/pom.xml","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -305,7 +305,7 @@ under the License.\n             <properties>\n               <cargo.jvmargs>\n                 -Dspring.profiles.active=embedded\n-                -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx1024m -Xms512m</cargo.jvmargs>\n+                -XX:+CMSClassUnloadingEnabled -XX:+UseG1GC -Xmx1024m -Xms512m</cargo.jvmargs>\n             </properties>\n           </configuration>\n           <deployables>\n@@ -1358,7 +1358,7 @@ under the License.\n               <configuration>\n                 <properties>\n                   <cargo.jvmargs>-Dspring.profiles.active=embedded\n-                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx2048m -Xms1024m</cargo.jvmargs>\n+                    -XX:+CMSClassUnloadingEnabled -XX:+UseG1GC -Xmx2048m -Xms1024m</cargo.jvmargs>\n                 </properties>\n               </configuration>\n             </configuration>\n@@ -1398,7 +1398,7 @@ under the License.\n               <configuration>\n                 <properties>\n                   <cargo.jvmargs>-Dspring.profiles.active=embedded\n-                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx2048m -Xms1024m</cargo.jvmargs>\n+                    -XX:+CMSClassUnloadingEnabled -XX:+UseG1GC -Xmx2048m -Xms1024m</cargo.jvmargs>\n                 </properties>\n               </configuration>\n             </configuration>\n@@ -1470,7 +1470,7 @@ under the License.\n               <configuration>\n                 <properties>\n                   <cargo.jvmargs>-Dspring.profiles.active=wildfly,embedded\n-                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx2048m -Xms1024m</cargo.jvmargs>\n+                    -XX:+CMSClassUnloadingEnabled -XX:+UseG1GC -Xmx2048m -Xms1024m</cargo.jvmargs>\n                 </properties>\n               </configuration>\n             </configuration>\n@@ -1517,7 +1517,7 @@ under the License.\n                   <cargo.jvmargs>\n                     -Dspring.profiles.active=embedded\n                     -Xdebug -Djaxb.debug=true -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n\n-                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx1024m -Xms512m</cargo.jvmargs>\n+                    -XX:+CMSClassUnloadingEnabled -XX:+UseG1GC -Xmx1024m -Xms512m</cargo.jvmargs>\n                 </properties>\n               </configuration>\n             </configuration>\n@@ -1549,7 +1549,7 @@ under the License.\n                     -Dspring.profiles.active=embedded\n                     -javaagent:${java.home}/lib/hotswap/hotswap-agent.jar=autoHotswap=true,disablePlugin=Spring,disablePlugin=Hibernate\n                     -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000\n-                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx1024m -Xms512m</cargo.jvmargs>\n+                    -XX:+CMSClassUnloadingEnabled -XX:+UseG1GC -Xmx1024m -Xms512m</cargo.jvmargs>\n                 </properties>\n               </configuration>\n             </configuration>"},{"sha":"ebbd2e23648fe1314595950e0f9200bffab67aef","filename":"fit/core-reference/src/main/resources/log4j2.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -110,6 +110,10 @@ under the License.\n       <appender-ref ref=\"restFile\"/>\n       <appender-ref ref=\"rest\"/>\n     </asyncLogger>\n+    <asyncLogger name=\"org.apache.syncope.ext.self.keymaster\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"restFile\"/>\n+      <appender-ref ref=\"rest\"/>\n+    </asyncLogger>\n     \n     <asyncLogger name=\"org.identityconnectors\" additivity=\"false\" level=\"DEBUG\">\n       <appender-ref ref=\"connidFile\"/>"},{"sha":"75e8f45b1546c9aa981777d4f20ffe613aac2009","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -49,6 +49,7 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.keymaster.client.self.SelfKeymasterClientContext;\n import org.apache.syncope.common.keymaster.client.zookeper.ZookeeperKeymasterClientContext;\n@@ -87,7 +88,6 @@\n import org.apache.syncope.common.rest.api.service.CamelRouteService;\n import org.apache.syncope.common.rest.api.service.ConnectorHistoryService;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n-import org.apache.syncope.common.rest.api.service.DomainService;\n import org.apache.syncope.common.rest.api.service.DynRealmService;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n@@ -210,8 +210,6 @@ public abstract class AbstractITCase {\n \n     protected static SyncopeService syncopeService;\n \n-    protected static DomainService domainService;\n-\n     protected static ApplicationService applicationService;\n \n     protected static AnyTypeClassService anyTypeClassService;\n@@ -320,7 +318,6 @@ public static void restSetup() {\n         adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n \n         syncopeService = adminClient.getService(SyncopeService.class);\n-        domainService = adminClient.getService(DomainService.class);\n         applicationService = adminClient.getService(ApplicationService.class);\n         anyTypeClassService = adminClient.getService(AnyTypeClassService.class);\n         anyTypeService = adminClient.getService(AnyTypeService.class);\n@@ -366,6 +363,9 @@ public static void restSetup() {\n     @Autowired\n     protected ServiceOps serviceOps;\n \n+    @Autowired\n+    protected DomainOps domainOps;\n+\n     @Autowired\n     protected DataSource testDataSource;\n "},{"sha":"096e37bd29ee1fc7abce5b133808f3c940ec1e4b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DomainITCase.java","status":"removed","additions":0,"deletions":125,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824066b70d3f041a1d76aa85b1f6709bea88440e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDomainITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824066b70d3f041a1d76aa85b1f6709bea88440e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDomainITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDomainITCase.java?ref=824066b70d3f041a1d76aa85b1f6709bea88440e","patch":"@@ -1,125 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit.core;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.fail;\n-import static org.junit.jupiter.api.Assumptions.assumeFalse;\n-\n-import java.security.AccessControlException;\n-import java.util.List;\n-import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.DomainTO;\n-import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.jupiter.api.Test;\n-\n-public class DomainITCase extends AbstractITCase {\n-\n-    @Test\n-    public void list() {\n-        assumeFalse(domainService.list().isEmpty());\n-\n-        List<DomainTO> domains = domainService.list();\n-        assertNotNull(domains);\n-        assertFalse(domains.isEmpty());\n-        domains.forEach(domain -> {\n-            assertNotNull(domain);\n-        });\n-    }\n-\n-    @Test\n-    public void create() {\n-        DomainTO domain = new DomainTO();\n-        domain.setKey(\"last\");\n-        domain.setAdminCipherAlgorithm(CipherAlgorithm.SSHA512);\n-        domain.setAdminPwd(\"password\");\n-\n-        try {\n-            domainService.create(domain);\n-            fail(\"This should not happen\");\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.NotFound, e.getType());\n-        }\n-    }\n-\n-    private void restoreTwo() {\n-        DomainTO two = new DomainTO();\n-        two.setKey(\"Two\");\n-        two.setAdminCipherAlgorithm(CipherAlgorithm.SHA);\n-        two.setAdminPwd(\"password2\");\n-        domainService.create(two);\n-    }\n-\n-    @Test\n-    public void update() {\n-        assumeFalse(domainService.list().isEmpty());\n-\n-        DomainTO two = domainService.read(\"Two\");\n-        assertNotNull(two);\n-\n-        try {\n-            // 1. change admin pwd for domain Two\n-            two.setAdminCipherAlgorithm(CipherAlgorithm.AES);\n-            two.setAdminPwd(\"password3\");\n-            domainService.update(two);\n-\n-            // 2. attempt to access with old pwd -> fail\n-            try {\n-                new SyncopeClientFactoryBean().\n-                        setAddress(ADDRESS).setDomain(\"Two\").setContentType(clientFactory.getContentType()).\n-                        create(ADMIN_UNAME, \"password2\").self();\n-            } catch (AccessControlException e) {\n-                assertNotNull(e);\n-            }\n-\n-            // 3. access with new pwd -> succeed\n-            new SyncopeClientFactoryBean().\n-                    setAddress(ADDRESS).setDomain(\"Two\").setContentType(clientFactory.getContentType()).\n-                    create(ADMIN_UNAME, \"password3\").self();\n-        } finally {\n-            restoreTwo();\n-        }\n-    }\n-\n-    @Test\n-    public void delete() {\n-        assumeFalse(domainService.list().isEmpty());\n-\n-        DomainTO two = domainService.read(\"Two\");\n-        assertNotNull(two);\n-\n-        try {\n-            domainService.delete(two.getKey());\n-\n-            try {\n-                domainService.read(two.getKey());\n-                fail(\"This should not happen\");\n-            } catch (SyncopeClientException e) {\n-                assertEquals(ClientExceptionType.NotFound, e.getType());\n-            }\n-        } finally {\n-            restoreTwo();\n-        }\n-    }\n-}"},{"sha":"caf836dc0f72e3f2a3e73df215cd79cc93d365fd","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/KeymasterITCase.java","status":"modified","additions":129,"deletions":1,"changes":130,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -22,9 +22,12 @@\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeFalse;\n \n+import java.security.AccessControlException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n@@ -33,9 +36,21 @@\n import java.util.Map;\n import java.util.UUID;\n import java.util.function.Function;\n+import javax.ws.rs.core.GenericType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n-import org.apache.syncope.common.keymaster.client.api.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.UserCR;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n+import org.apache.syncope.common.rest.api.service.UserService;\n+import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n \n@@ -199,4 +214,117 @@ public void serviceRun() {\n             assertNotNull(e);\n         }\n     }\n+\n+    @Test\n+    public void domainCRUD() throws Exception {\n+        List<Domain> initial = domainOps.list();\n+        assertNotNull(initial);\n+\n+        // 1. create new domain\n+        String key = UUID.randomUUID().toString();\n+\n+        domainOps.create(new Domain.Builder(key).\n+                jdbcDriver(\"org.h2.Driver\").\n+                jdbcURL(\"jdbc:h2:mem:syncopetest;DB_CLOSE_DELAY=-1\").\n+                dbUsername(\"sa\").\n+                dbPassword(\"\").\n+                databasePlatform(\"org.apache.openjpa.jdbc.sql.H2Dictionary\").\n+                transactionIsolation(Domain.TransactionIsolation.TRANSACTION_READ_UNCOMMITTED).\n+                adminPassword(Encryptor.getInstance().encode(\"password\", CipherAlgorithm.BCRYPT)).\n+                adminCipherAlgorithm(CipherAlgorithm.BCRYPT).\n+                build());\n+\n+        Domain domain = domainOps.read(key);\n+        assertEquals(Domain.TransactionIsolation.TRANSACTION_READ_UNCOMMITTED, domain.getTransactionIsolation());\n+        assertEquals(CipherAlgorithm.BCRYPT, domain.getAdminCipherAlgorithm());\n+        assertEquals(10, domain.getMaxPoolSize());\n+        assertEquals(2, domain.getMinIdle());\n+\n+        assertEquals(domain, domainOps.read(key));\n+\n+        // 2. update domain\n+        domainOps.adjustPoolSize(key, 100, 23);\n+\n+        domain = domainOps.read(key);\n+        assertEquals(100, domain.getMaxPoolSize());\n+        assertEquals(23, domain.getMinIdle());\n+\n+        // 3. work with new domain - create user\n+        clientFactory = new SyncopeClientFactoryBean().setAddress(ADDRESS).setDomain(key);\n+        adminClient = clientFactory.create(ADMIN_UNAME, \"password\");\n+\n+        userService = adminClient.getService(UserService.class);\n+\n+        PagedResult<UserTO> users = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).page(1).size(1).build());\n+        assertNotNull(users);\n+        assertTrue(users.getResult().isEmpty());\n+        assertEquals(0, users.getTotalCount());\n+\n+        Response response = userService.create(\n+                new UserCR.Builder(SyncopeConstants.ROOT_REALM, \"monteverdi\").\n+                        password(\"password123\").\n+                        plainAttr(attr(\"email\", \"monteverdi@syncope.apache.org\")).\n+                        build());\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+\n+        UserTO user = response.readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getEntity();\n+        assertNotNull(user);\n+        assertEquals(\"monteverdi\", user.getUsername());\n+\n+        users = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).page(1).size(1).build());\n+        assertNotNull(users);\n+        assertFalse(users.getResult().isEmpty());\n+        assertEquals(1, users.getTotalCount());\n+\n+        // 4. delete domain\n+        domainOps.delete(key);\n+\n+        List<Domain> list = domainOps.list();\n+        assertEquals(initial, list);\n+    }\n+\n+    @Test\n+    public void domainCreateMaster() {\n+        assertThrows(KeymasterException.class, () -> {\n+            domainOps.create(new Domain.Builder(SyncopeConstants.MASTER_DOMAIN).build());\n+        });\n+    }\n+\n+    @Test\n+    public void domainUpdateAdminPassword() throws Exception {\n+        assumeFalse(domainOps.list().isEmpty());\n+\n+        Domain two = domainOps.read(\"Two\");\n+        assertNotNull(two);\n+\n+        String origPasswowrd = two.getAdminPassword();\n+        CipherAlgorithm origCipherAlgo = two.getAdminCipherAlgorithm();\n+\n+        try {\n+            // 1. change admin pwd for domain Two\n+            domainOps.changeAdminPassword(\n+                    two.getKey(),\n+                    Encryptor.getInstance().encode(\"password3\", CipherAlgorithm.AES),\n+                    CipherAlgorithm.AES);\n+\n+            // 2. attempt to access with old pwd -> fail\n+            try {\n+                new SyncopeClientFactoryBean().\n+                        setAddress(ADDRESS).setDomain(two.getKey()).setContentType(clientFactory.getContentType()).\n+                        create(ADMIN_UNAME, \"password2\").self();\n+            } catch (AccessControlException e) {\n+                assertNotNull(e);\n+            }\n+\n+            // 3. access with new pwd -> succeed\n+            new SyncopeClientFactoryBean().\n+                    setAddress(ADDRESS).setDomain(two.getKey()).setContentType(clientFactory.getContentType()).\n+                    create(ADMIN_UNAME, \"password3\").self();\n+        } finally {\n+            domainOps.changeAdminPassword(two.getKey(), origPasswowrd, origCipherAlgo);\n+        }\n+    }\n }"},{"sha":"3a8566b5a15ce2de5beb0cc94936bf30b47bde4d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":9,"deletions":23,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -61,7 +61,6 @@\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n-import org.apache.syncope.common.rest.api.service.DomainService;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n import org.apache.syncope.common.rest.api.service.RealmService;\n import org.apache.syncope.common.rest.api.service.ReconciliationService;\n@@ -73,41 +72,28 @@\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.ElasticsearchDetector;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n public class MultitenancyITCase extends AbstractITCase {\n \n-    @BeforeAll\n-    public static void domainSetup() {\n-        if (!domainService.list().isEmpty()) {\n-            clientFactory = new SyncopeClientFactoryBean().setAddress(ADDRESS).setDomain(\"Two\");\n+    @BeforeEach\n+    public void multitenancyCheck() {\n+        assumeFalse(domainOps.list().isEmpty());\n \n-            String envContentType = System.getProperty(ENV_KEY_CONTENT_TYPE);\n-            if (StringUtils.isNotBlank(envContentType)) {\n-                clientFactory.setContentType(envContentType);\n-            }\n-            LOG.info(\"Performing IT with content type {}\", clientFactory.getContentType().getMediaType());\n+        clientFactory = new SyncopeClientFactoryBean().setAddress(ADDRESS).setDomain(\"Two\");\n \n-            adminClient = clientFactory.create(ADMIN_UNAME, \"password2\");\n+        String envContentType = System.getProperty(ENV_KEY_CONTENT_TYPE);\n+        if (StringUtils.isNotBlank(envContentType)) {\n+            clientFactory.setContentType(envContentType);\n         }\n-    }\n+        LOG.info(\"Performing IT with content type {}\", clientFactory.getContentType().getMediaType());\n \n-    @BeforeEach\n-    public void multitenancyCheck() {\n-        assumeFalse(domainService.list().isEmpty());\n+        adminClient = clientFactory.create(ADMIN_UNAME, \"password2\");\n     }\n \n     @Test\n     public void masterOnly() {\n-        try {\n-            adminClient.getService(DomainService.class).read(\"Two\");\n-            fail(\"This should not happen\");\n-        } catch (ForbiddenException e) {\n-            assertNotNull(e);\n-        }\n-\n         try {\n             adminClient.getService(LoggerService.class).list(LoggerType.LOG);\n             fail(\"This should not happen\");"},{"sha":"fe68df82f163f6892e20ef409dbf0391f8da1a94","filename":"fit/core-reference/src/test/resources/log4j2.xml","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -45,6 +45,10 @@ under the License.\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n \n+    <asyncLogger name=\"org.apache.syncope.common.keymaster\" additivity=\"false\" level=\"DEBUG\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+\n     <asyncLogger name=\"org.apache.syncope.fit\" additivity=\"false\" level=\"DEBUG\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n@@ -53,4 +57,4 @@ under the License.\n       <appenderRef ref=\"main\"/>\n     </root>\n   </loggers>\n-</configuration>\n\\ No newline at end of file\n+</configuration>"},{"sha":"8cd5fe2bec7eb82b3c3b638d765c6c773dbf36f9","filename":"fit/enduser-reference/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/fit%2Fenduser-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/fit%2Fenduser-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fpom.xml?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -210,7 +210,7 @@ under the License.\n                   <cargo.jvmargs>\n                     -Dspring.profiles.active=embedded\n                     -Xdebug -Djaxb.debug=true -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n\n-                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx1024m -Xms512m</cargo.jvmargs>\n+                    -XX:+CMSClassUnloadingEnabled -XX:+UseG1GC -Xmx1024m -Xms512m</cargo.jvmargs>\n                 </properties>\n               </configuration>\n             </configuration>"},{"sha":"e58d3dd4d162996f51d46d7f744d66686f8a99fe","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f0bd6b004f795771cba22771b5d3c4ab3587a0/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f0bd6b004f795771cba22771b5d3c4ab3587a0/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=62f0bd6b004f795771cba22771b5d3c4ab3587a0","patch":"@@ -1821,7 +1821,7 @@ under the License.\n \n       <dependency>\n         <groupId>org.apache.curator</groupId>\n-        <artifactId>curator-framework</artifactId>\n+        <artifactId>curator-x-async</artifactId>\n         <version>${curator.version}</version>\n         <exclusions>\n           <exclusion>"}]}