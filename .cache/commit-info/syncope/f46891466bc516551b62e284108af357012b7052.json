{"sha":"f46891466bc516551b62e284108af357012b7052","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY0Njg5MTQ2NmJjNTE2NTUxYjYyZTI4NDEwOGFmMzU3MDEyYjcwNTI=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2017-02-28T11:43:10Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2017-02-28T11:44:27Z"},"message":"[SYNCOPE-1027] improve provision mappings management from administration console","tree":{"sha":"6efcf9575e303eb2e745a7a4a372b52bc721dd8d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6efcf9575e303eb2e745a7a4a372b52bc721dd8d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f46891466bc516551b62e284108af357012b7052","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f46891466bc516551b62e284108af357012b7052","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f46891466bc516551b62e284108af357012b7052","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f46891466bc516551b62e284108af357012b7052/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"6d81b69ac52a5a7773f600e5168f32ffb0dde79c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6d81b69ac52a5a7773f600e5168f32ffb0dde79c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6d81b69ac52a5a7773f600e5168f32ffb0dde79c"}],"stats":{"total":27,"additions":24,"deletions":3},"files":[{"sha":"7e7f375d4011ed344f66e3cb0cbe0782747a6cf8","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ProvisionWizardBuilder.java","status":"modified","additions":24,"deletions":3,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f46891466bc516551b62e284108af357012b7052/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f46891466bc516551b62e284108af357012b7052/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java?ref=f46891466bc516551b62e284108af357012b7052","patch":"@@ -22,6 +22,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.ListUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n@@ -241,8 +242,8 @@ protected WizardModel buildModelSteps(final ProvisionTO modelObject, final Wizar\n         Mapping mapping = new Mapping(modelObject);\n         mapping.setOutputMarkupId(true);\n \n-        MappingItemTransformersTogglePanel mapItemTransformers =\n-                new MappingItemTransformersTogglePanel(mapping, pageRef);\n+        MappingItemTransformersTogglePanel mapItemTransformers\n+                = new MappingItemTransformersTogglePanel(mapping, pageRef);\n         addOuterObject(mapItemTransformers);\n         JEXLTransformersTogglePanel jexlTransformers = new JEXLTransformersTogglePanel(mapping, pageRef);\n         addOuterObject(jexlTransformers);\n@@ -257,9 +258,29 @@ protected WizardModel buildModelSteps(final ProvisionTO modelObject, final Wizar\n \n     @Override\n     protected Serializable onApplyInternal(final ProvisionTO modelObject) {\n+        final List<ProvisionTO> provisions;\n         if (modelObject.getKey() == null) {\n-            this.resourceTO.getProvisions().add(modelObject);\n+            provisions\n+                    = ListUtils.select(this.resourceTO.getProvisions(), new Predicate<ProvisionTO>() {\n+\n+                        @Override\n+                        public boolean evaluate(final ProvisionTO object) {\n+                            return !modelObject.getAnyType().equals(object.getAnyType());\n+                        }\n+                    });\n+        } else {\n+            provisions\n+                    = ListUtils.select(this.resourceTO.getProvisions(), new Predicate<ProvisionTO>() {\n+\n+                        @Override\n+                        public boolean evaluate(final ProvisionTO object) {\n+                            return !modelObject.getKey().equals(object.getKey());\n+                        }\n+                    });\n         }\n+        provisions.add(modelObject);\n+        this.resourceTO.getProvisions().clear();\n+        this.resourceTO.getProvisions().addAll(provisions);\n         return modelObject;\n     }\n }"}]}