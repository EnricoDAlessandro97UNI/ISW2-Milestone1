{"sha":"f57cb310537d9a907c4aa55484938e02c9361733","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY1N2NiMzEwNTM3ZDlhOTA3YzRhYTU1NDg0OTM4ZTAyYzkzNjE3MzM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-06-10T16:01:20Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-06-10T16:01:20Z"},"message":"[SYNCOPE-1270] Adjusting test code","tree":{"sha":"ede1098ef23c118789ede03f4a38bd79ef1d3cd4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ede1098ef23c118789ede03f4a38bd79ef1d3cd4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f57cb310537d9a907c4aa55484938e02c9361733","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f57cb310537d9a907c4aa55484938e02c9361733","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f57cb310537d9a907c4aa55484938e02c9361733","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f57cb310537d9a907c4aa55484938e02c9361733/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"ff597a7d53a7a7e602a71db0a2a70f9c074aaf40","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ff597a7d53a7a7e602a71db0a2a70f9c074aaf40","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ff597a7d53a7a7e602a71db0a2a70f9c074aaf40"}],"stats":{"total":101,"additions":38,"deletions":63},"files":[{"sha":"69500e8640c895af5dd962f7aaa106d9b65c216c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/MappingTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f57cb310537d9a907c4aa55484938e02c9361733/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f57cb310537d9a907c4aa55484938e02c9361733/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java?ref=f57cb310537d9a907c4aa55484938e02c9361733","patch":"@@ -49,7 +49,7 @@ public void setConnObjectLink(final String connObjectLink) {\n \n     @Override\n     public ItemTO getConnObjectKeyItem() {\n-        return getItems().stream().filter(ItemTO::isConnObjectKey).findFirst().get();\n+        return getItems().stream().filter(item -> item.isConnObjectKey()).findFirst().orElse(null);\n     }\n \n     protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {"},{"sha":"8c4b8b15a7243c287254da77782406c06ca78b63","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/OrgUnitTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f57cb310537d9a907c4aa55484938e02c9361733/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f57cb310537d9a907c4aa55484938e02c9361733/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java?ref=f57cb310537d9a907c4aa55484938e02c9361733","patch":"@@ -89,7 +89,7 @@ public void setConnObjectLink(final String connObjectLink) {\n \n     @Override\n     public ItemTO getConnObjectKeyItem() {\n-        return getItems().stream().filter(item -> item.isConnObjectKey()).findFirst().get();\n+        return getItems().stream().filter(item -> item.isConnObjectKey()).findFirst().orElse(null);\n     }\n \n     protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {"},{"sha":"7a3545f93183cf43723c40ce388a7f60ae1bbbf6","filename":"ext/oidcclient/common-lib/src/main/java/org/apache/syncope/common/lib/to/OIDCProviderTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f57cb310537d9a907c4aa55484938e02c9361733/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCProviderTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f57cb310537d9a907c4aa55484938e02c9361733/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCProviderTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCProviderTO.java?ref=f57cb310537d9a907c4aa55484938e02c9361733","patch":"@@ -195,7 +195,7 @@ public void setSelfRegUnmatching(final boolean selfRegUnmatching) {\n \n     @Override\n     public ItemTO getConnObjectKeyItem() {\n-        return getItems().stream().filter(ItemTO::isConnObjectKey).findFirst().get();\n+        return getItems().stream().filter(item -> item.isConnObjectKey()).findFirst().orElse(null);\n     }\n \n     protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {"},{"sha":"851ff3a204fe7fba48ebe433dfe07fb4ae4bd8e2","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f57cb310537d9a907c4aa55484938e02c9361733/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f57cb310537d9a907c4aa55484938e02c9361733/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java?ref=f57cb310537d9a907c4aa55484938e02c9361733","patch":"@@ -156,7 +156,7 @@ public void setUserTemplate(final UserTO userTemplate) {\n \n     @Override\n     public ItemTO getConnObjectKeyItem() {\n-        return getItems().stream().filter(item -> item.isConnObjectKey()).findFirst().get();\n+        return getItems().stream().filter(item -> item.isConnObjectKey()).findFirst().orElse(null);\n     }\n \n     protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {"},{"sha":"b32682a0fd38cfd559fad239ed2d214d0ed98ef8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/OIDCClientDetector.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f57cb310537d9a907c4aa55484938e02c9361733/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FOIDCClientDetector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f57cb310537d9a907c4aa55484938e02c9361733/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FOIDCClientDetector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FOIDCClientDetector.java?ref=f57cb310537d9a907c4aa55484938e02c9361733","patch":"@@ -36,7 +36,7 @@ public static boolean isOIDCClientAvailable() {\n                 try {\n                     new SyncopeClientFactoryBean().\n                             setAddress(AbstractITCase.ADDRESS).\n-                            setContentType(SyncopeClientFactoryBean.ContentType.XML).\n+                            setContentType(SyncopeClientFactoryBean.ContentType.JSON).\n                             create(new AnonymousAuthenticationHandler(\n                                     AbstractITCase.ANONYMOUS_UNAME, AbstractITCase.ANONYMOUS_KEY)).\n                             getService(OIDCProviderService.class).list();"},{"sha":"1721b9b990e5d5c348d7514c78a39ebb7622cf21","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/OIDCClientITCase.java","status":"modified","additions":33,"deletions":58,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f57cb310537d9a907c4aa55484938e02c9361733/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCClientITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f57cb310537d9a907c4aa55484938e02c9361733/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCClientITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCClientITCase.java?ref=f57cb310537d9a907c4aa55484938e02c9361733","patch":"@@ -26,18 +26,13 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n-import org.apache.syncope.client.lib.BasicAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.OIDCLoginRequestTO;\n import org.apache.syncope.common.lib.to.OIDCProviderTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.service.OIDCClientService;\n-import org.apache.syncope.common.rest.api.service.OIDCProviderService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.OIDCClientDetector;\n import org.junit.jupiter.api.AfterAll;\n@@ -46,21 +41,6 @@\n \n public class OIDCClientITCase extends AbstractITCase {\n \n-    private static SyncopeClient anonymous;\n-\n-    private static SyncopeClient admin;\n-\n-    @BeforeAll\n-    public static void setup() {\n-        anonymous = new SyncopeClientFactoryBean().\n-                setAddress(ADDRESS).\n-                create(new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n-\n-        admin = new SyncopeClientFactoryBean().\n-                setAddress(ADDRESS).\n-                create(new BasicAuthenticationHandler(ADMIN_UNAME, ADMIN_PWD));\n-    }\n-\n     @BeforeAll\n     public static void createOIDCProviderWithoutDiscovery() throws Exception {\n         if (!OIDCClientDetector.isOIDCClientAvailable()) {\n@@ -69,17 +49,17 @@ public static void createOIDCProviderWithoutDiscovery() throws Exception {\n \n         assertTrue(oidcProviderService.list().isEmpty());\n \n-        OIDCProviderTO oidcProviderTO = new OIDCProviderTO();\n-        oidcProviderTO.setAuthorizationEndpoint(\"AuthorizationEndpoint\");\n-        oidcProviderTO.setClientID(\"ClientID\");\n-        oidcProviderTO.setClientSecret(\"ClientSecret\");\n-        oidcProviderTO.setIssuer(\"https://accounts.google.com\");\n-        oidcProviderTO.setJwksUri(\"JwksUri\");\n-        oidcProviderTO.setName(\"Google\");\n-        oidcProviderTO.setTokenEndpoint(\"TokenEndpoint\");\n-        oidcProviderTO.setUserinfoEndpoint(\"UserinfoEndpoint\");\n-\n-        admin.getService(OIDCProviderService.class).create(oidcProviderTO);\n+        OIDCProviderTO google = new OIDCProviderTO();\n+        google.setAuthorizationEndpoint(\"AuthorizationEndpoint\");\n+        google.setClientID(\"ClientID\");\n+        google.setClientSecret(\"ClientSecret\");\n+        google.setIssuer(\"https://accounts.google.com\");\n+        google.setJwksUri(\"JwksUri\");\n+        google.setName(\"Google\");\n+        google.setTokenEndpoint(\"TokenEndpoint\");\n+        google.setUserinfoEndpoint(\"UserinfoEndpoint\");\n+\n+        oidcProviderService.create(google);\n     }\n \n     @AfterAll\n@@ -88,15 +68,17 @@ public static void clearProviders() throws Exception {\n             return;\n         }\n \n-        for (OIDCProviderTO op : oidcProviderService.list()) {\n+        oidcProviderService.list().forEach(op -> {\n             oidcProviderService.delete(op.getKey());\n-        }\n+        });\n     }\n \n     @Test\n     public void createLoginRequest() {\n         assumeTrue(OIDCClientDetector.isOIDCClientAvailable());\n \n+        SyncopeClient anonymous = clientFactory.create(\n+                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n         OIDCLoginRequestTO loginRequest = anonymous.getService(OIDCClientService.class).\n                 createLoginRequest(\"http://localhost:9080/syncope-console/oidcclient/code-consumer\", \"Google\");\n \n@@ -113,40 +95,33 @@ public void createLoginRequest() {\n     public void setProviderMapping() {\n         assumeTrue(OIDCClientDetector.isOIDCClientAvailable());\n \n-        OIDCProviderTO ssoCircle = IterableUtils.find(oidcProviderService.list(), new Predicate<OIDCProviderTO>() {\n+        OIDCProviderTO google = oidcProviderService.list().stream().\n+                filter(object -> \"Google\".equals(object.getName())).findFirst().orElse(null);\n+        assertNotNull(google);\n+        assertFalse(google.isCreateUnmatching());\n+        assertNull(google.getUserTemplate());\n+        assertFalse(google.getItems().isEmpty());\n+        assertNotEquals(\"fullname\", google.getConnObjectKeyItem().getIntAttrName());\n+        assertNotEquals(\"given_name\", google.getConnObjectKeyItem().getExtAttrName());\n \n-            @Override\n-            public boolean evaluate(final OIDCProviderTO object) {\n-                return \"Google\".equals(object.getName());\n-            }\n-        });\n-        assertNotNull(ssoCircle);\n-        assertFalse(ssoCircle.isCreateUnmatching());\n-        assertNull(ssoCircle.getUserTemplate());\n-        assertFalse(ssoCircle.getItems().isEmpty());\n-        assertNotNull(ssoCircle.getConnObjectKeyItem());\n-        assertNotEquals(\"fullname\", ssoCircle.getConnObjectKeyItem().getIntAttrName());\n-        assertNotEquals(\"given_name\", ssoCircle.getConnObjectKeyItem().getExtAttrName());\n-\n-        ssoCircle.setCreateUnmatching(true);\n+        google.setCreateUnmatching(true);\n \n         UserTO userTemplate = new UserTO();\n         userTemplate.setRealm(\"'/'\");\n-        ssoCircle.setUserTemplate(userTemplate);\n+        google.setUserTemplate(userTemplate);\n \n-        ssoCircle.getItems().clear();\n+        google.getItems().clear();\n         ItemTO keyMapping = new ItemTO();\n         keyMapping.setIntAttrName(\"fullname\");\n         keyMapping.setExtAttrName(\"given_name\");\n-        ssoCircle.setConnObjectKeyItem(keyMapping);\n+        google.setConnObjectKeyItem(keyMapping);\n \n-        oidcProviderService.update(ssoCircle);\n+        oidcProviderService.update(google);\n \n-        ssoCircle = oidcProviderService.read(ssoCircle.getKey());\n-        assertTrue(ssoCircle.isCreateUnmatching());\n-        assertEquals(userTemplate, ssoCircle.getUserTemplate());\n-        assertEquals(\"fullname\", ssoCircle.getConnObjectKeyItem().getIntAttrName());\n-        assertEquals(\"given_name\", ssoCircle.getConnObjectKeyItem().getExtAttrName());\n+        google = oidcProviderService.read(google.getKey());\n+        assertTrue(google.isCreateUnmatching());\n+        assertEquals(userTemplate, google.getUserTemplate());\n+        assertEquals(\"fullname\", google.getConnObjectKeyItem().getIntAttrName());\n+        assertEquals(\"given_name\", google.getConnObjectKeyItem().getExtAttrName());\n     }\n-\n }"}]}