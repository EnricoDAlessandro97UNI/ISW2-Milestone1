{"sha":"272fcb759421bec3ea467b9fad92ea9df69cbccc","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI3MmZjYjc1OTQyMWJlYzNlYTQ2N2I5ZmFkOTJlYTlkZjY5Y2JjY2M=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2020-05-12T09:31:46Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-05-12T09:31:46Z"},"message":"SYNCOPE-1558: restful SAML SP metadata/keystore for WA authN delegation (#181)","tree":{"sha":"32b9a9a3c126d45053c8edd5aaac608d45edbe84","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/32b9a9a3c126d45053c8edd5aaac608d45edbe84"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/272fcb759421bec3ea467b9fad92ea9df69cbccc","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeum0CCRBK7hj4Ov3rIwAAdHIIAE9ESDEFJhHVrkDp9jTnq+ld\nXFo/hkE04xibfdmRBNiq07vFPMoRtc7XmsCi8K2DxRG3wpjnzigZdqMdAxx2GDUE\nhrqli3EBj3zggbTEl0x+K7R5wVIG/nDrjNlsUditVfV+UqvO9q9RFvA5I0cG18eH\ndJhwYjXQx1oTAZxBlF3DbDMbnnFsP+TLjuXABKGe/Dc9JwjlvfU4J5vwcdDjdgoi\nmjUlMZofsZkpW1E84vMAySs9X/LuhCDUB6ZAZchj9bjmF00/zfup1d+sFnvemknd\n6CxQHEg+o6nyDpi08s1xHCcQXqk1jgLSKhB5E4R3jW7aBHXEaebq4WEcG4KrO5c=\n=IP9r\n-----END PGP SIGNATURE-----\n","payload":"tree 32b9a9a3c126d45053c8edd5aaac608d45edbe84\nparent cabd48d37ec539322cb1c23c2523b394b489efd2\nauthor Misagh Moayyed <mm1844@gmail.com> 1589275906 +0430\ncommitter GitHub <noreply@github.com> 1589275906 +0430\n\nSYNCOPE-1558: restful SAML SP metadata/keystore for WA authN delegation (#181)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/272fcb759421bec3ea467b9fad92ea9df69cbccc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/272fcb759421bec3ea467b9fad92ea9df69cbccc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/272fcb759421bec3ea467b9fad92ea9df69cbccc/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"cabd48d37ec539322cb1c23c2523b394b489efd2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cabd48d37ec539322cb1c23c2523b394b489efd2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cabd48d37ec539322cb1c23c2523b394b489efd2"}],"stats":{"total":3638,"additions":3517,"deletions":121},"files":[{"sha":"32079b4cfc409badc58e7c847d465996cd054d2c","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/SAML2IdPAuthModuleConf.java","status":"modified","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -55,10 +55,6 @@ public class SAML2IdPAuthModuleConf extends AbstractAuthModuleConf {\n      */\n     private String privateKeyPassword;\n \n-    /**\n-     * Location of the keystore to use and generate the SP keystore.\n-     */\n-    private String keystorePath;\n \n     /**\n      * The metadata location of the identity provider that is to handle authentications.\n@@ -92,11 +88,6 @@ public class SAML2IdPAuthModuleConf extends AbstractAuthModuleConf {\n      */\n     private String serviceProviderEntityId;\n \n-    /**\n-     * Location of the SP metadata to use and generate.\n-     */\n-    private String serviceProviderMetadataPath;\n-\n     /**\n      * Whether authentication requests should be tagged as forced auth.\n      */\n@@ -232,14 +223,6 @@ public void setPrivateKeyPassword(final String privateKeyPassword) {\n         this.privateKeyPassword = privateKeyPassword;\n     }\n \n-    public String getKeystorePath() {\n-        return keystorePath;\n-    }\n-\n-    public void setKeystorePath(final String keystorePath) {\n-        this.keystorePath = keystorePath;\n-    }\n-\n     public String getIdentityProviderMetadataPath() {\n         return identityProviderMetadataPath;\n     }\n@@ -272,14 +255,6 @@ public void setServiceProviderEntityId(final String serviceProviderEntityId) {\n         this.serviceProviderEntityId = serviceProviderEntityId;\n     }\n \n-    public String getServiceProviderMetadataPath() {\n-        return serviceProviderMetadataPath;\n-    }\n-\n-    public void setServiceProviderMetadataPath(final String serviceProviderMetadataPath) {\n-        this.serviceProviderMetadataPath = serviceProviderMetadataPath;\n-    }\n-\n     public boolean isForceAuth() {\n         return forceAuth;\n     }"},{"sha":"c3cd496508b94c11630cae0d39913bf03b477c40","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/SAML2SPKeystoreTO.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPKeystoreTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPKeystoreTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPKeystoreTO.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.apache.syncope.common.lib.BaseBean;\n+\n+import javax.ws.rs.PathParam;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"saml2spMetadataKeystore\")\n+@XmlType\n+public class SAML2SPKeystoreTO extends BaseBean implements EntityTO {\n+\n+    private static final long serialVersionUID = 3211073386484148953L;\n+\n+    private String key;\n+\n+    private String keystore;\n+\n+    private String owner;\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getKeystore() {\n+        return keystore;\n+    }\n+\n+    public void setKeystore(final String keystore) {\n+        this.keystore = keystore;\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public void setOwner(final String owner) {\n+        this.owner = owner;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+            append(key).\n+            append(keystore).\n+            append(owner).\n+            build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        SAML2SPKeystoreTO other = (SAML2SPKeystoreTO) obj;\n+        return new EqualsBuilder().\n+            append(key, other.key).\n+            append(keystore, other.keystore).\n+            append(owner, other.owner).\n+            build();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this)\n+            .appendSuper(super.toString())\n+            .append(\"key\", key)\n+            .append(\"owner\", owner)\n+            .toString();\n+    }\n+\n+    public static class Builder {\n+\n+        private final SAML2SPKeystoreTO instance = new SAML2SPKeystoreTO();\n+\n+        public Builder keystore(final String keystore) {\n+            instance.setKeystore(keystore);\n+            return this;\n+        }\n+\n+        public Builder owner(final String owner) {\n+            instance.setOwner(owner);\n+            return this;\n+        }\n+\n+        public SAML2SPKeystoreTO build() {\n+            return instance;\n+        }\n+    }\n+\n+}"},{"sha":"104b90fec99cc3c7ceb3776e66eb1efe83a07799","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/SAML2SPMetadataTO.java","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPMetadataTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPMetadataTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPMetadataTO.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.apache.syncope.common.lib.BaseBean;\n+\n+import javax.ws.rs.PathParam;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"saml2spMetadata\")\n+@XmlType\n+public class SAML2SPMetadataTO extends BaseBean implements EntityTO {\n+\n+    private static final long serialVersionUID = 6215073386484048953L;\n+\n+    private String key;\n+\n+    private String metadata;\n+\n+    private String owner;\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getMetadata() {\n+        return metadata;\n+    }\n+\n+    public void setMetadata(final String metadata) {\n+        this.metadata = metadata;\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public void setOwner(final String owner) {\n+        this.owner = owner;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+            append(key).\n+            append(metadata).\n+            append(owner).\n+            build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        SAML2SPMetadataTO other = (SAML2SPMetadataTO) obj;\n+        return new EqualsBuilder().\n+            append(key, other.key).\n+            append(metadata, other.metadata).\n+            append(owner, other.owner).\n+            build();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this)\n+            .appendSuper(super.toString())\n+            .append(\"key\", key)\n+            .append(\"owner\", owner)\n+            .toString();\n+    }\n+\n+\n+    public static class Builder {\n+\n+        private final SAML2SPMetadataTO instance = new SAML2SPMetadataTO();\n+\n+        public Builder metadata(final String metadata) {\n+            instance.setMetadata(metadata);\n+            return this;\n+        }\n+\n+        public Builder owner(final String owner) {\n+            instance.setOwner(owner);\n+            return this;\n+        }\n+\n+        public SAML2SPMetadataTO build() {\n+            return instance;\n+        }\n+    }\n+\n+}"},{"sha":"6f28b1f279458497b5f3dff60bb27dc50034fe2a","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMEntitlement.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -60,6 +60,18 @@ public final class AMEntitlement {\n \n     public static final String SAML2_IDP_METADATA_READ = \"SAML2_IDP_METADATA_READ\";\n \n+    public static final String SAML2_SP_METADATA_CREATE = \"SAML2_SP_METADATA_CREATE\";\n+\n+    public static final String SAML2_SP_METADATA_UPDATE = \"SAML2_SP_METADATA_UPDATE\";\n+\n+    public static final String SAML2_SP_METADATA_READ = \"SAML2_SP_METADATA_READ\";\n+\n+    public static final String SAML2_SP_KEYSTORE_CREATE = \"SAML2_SP_KEYSTORE_CREATE\";\n+\n+    public static final String SAML2_SP_KEYSTORE_UPDATE = \"SAML2_SP_KEYSTORE_UPDATE\";\n+\n+    public static final String SAML2_SP_KEYSTORE_READ = \"SAML2_SP_KEYSTORE_READ\";\n+\n     private static final Set<String> VALUES;\n \n     static {"},{"sha":"ffc169e6f00f10a1906f1598fe6d223dff1278af","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPKeystoreConfService.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPKeystoreConfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPKeystoreConfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPKeystoreConfService.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+/**\n+ * REST operations for SAML 2.0 SP Keystore.\n+ */\n+@Tag(name = \"SAML 2.0 SP Keystore\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\") })\n+@Path(\"saml2sp/conf/keystore\")\n+public interface SAML2SPKeystoreConfService extends JAXRSService {\n+\n+    /**\n+     * Updates SAML 2.0 SP keystore matching the given key.\n+     *\n+     * @param keystoreTO SAML2SPKeystoreTO to replace existing SAML 2.0 SP metadata\n+     */\n+    @Parameter(name = \"key\", description = \"SAML2SPKeystoreTO's key\", in = ParameterIn.PATH, schema =\n+            @Schema(type = \"string\"))\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @PUT\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void update(@NotNull SAML2SPKeystoreTO keystoreTO);\n+\n+}"},{"sha":"227a0d0bc6c470463ffa6ef2e2b6345baab12487","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPMetadataConfService.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPMetadataConfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPMetadataConfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPMetadataConfService.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+/**\n+ * REST operations for SAML 2.0 SP metadata.\n+ */\n+@Tag(name = \"SAML 2.0 SP Metadata\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\")})\n+@Path(\"saml2sp/conf/metadata\")\n+public interface SAML2SPMetadataConfService extends JAXRSService {\n+\n+    /**\n+     * Updates SAML 2.0 SP metadata matching the given key.\n+     *\n+     * @param metadataTO SAML2SPMetadata to replace existing SAML 2.0 SP metadata\n+     */\n+    @Parameter(name = \"key\", description = \"SAML2SPMetadata's key\", in = ParameterIn.PATH, schema =\n+    @Schema(type = \"string\"))\n+    @ApiResponses(\n+        @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @PUT\n+    @Path(\"{key}\")\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    void update(@NotNull SAML2SPMetadataTO metadataTO);\n+\n+}"},{"sha":"00201b72df40e0c3fb9cfb0a11c08c37470f7021","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/SAML2IdPMetadataService.java","status":"renamed","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FSAML2IdPMetadataService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FSAML2IdPMetadataService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FSAML2IdPMetadataService.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.rest.api.service;\n+package org.apache.syncope.common.rest.api.service.wa;\n \n import io.swagger.v3.oas.annotations.headers.Header;\n import io.swagger.v3.oas.annotations.media.Schema;\n@@ -39,6 +39,7 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n /**\n  * REST operations for SAML 2.0 IdP metadata.\n@@ -47,7 +48,7 @@\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n     @SecurityRequirement(name = \"Bearer\") })\n-@Path(\"saml2idp/metadata\")\n+@Path(\"wa/saml2idp/metadata\")\n public interface SAML2IdPMetadataService extends JAXRSService {\n \n     /**\n@@ -59,7 +60,7 @@ public interface SAML2IdPMetadataService extends JAXRSService {\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    SAML2IdPMetadataTO get(@QueryParam(\"appliesTo\") @DefaultValue(\"Syncope\") String appliesTo);\n+    SAML2IdPMetadataTO getByOwner(@QueryParam(\"appliesTo\") @DefaultValue(\"Syncope\") String appliesTo);\n \n     /**\n      * Returns the SAML 2.0 IdP metadata matching the given key.","previous_filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPMetadataService.java"},{"sha":"549af136f93db182d1ecd0528f1fd7d45c578b76","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/SAML2SPKeystoreService.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FSAML2SPKeystoreService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FSAML2SPKeystoreService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FSAML2SPKeystoreService.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service.wa;\n+\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n+\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+/**\n+ * REST operations for SAML 2.0 IdP keystore.\n+ */\n+@Tag(name = \"SAML 2.0 SP Metadata Keystore\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\") })\n+@Path(\"wa/saml2sp/keystore\")\n+public interface SAML2SPKeystoreService extends JAXRSService {\n+\n+    /**\n+     * Returns a document outlining keystore for Syncope as SAML 2.0 SP.\n+     *\n+     * @param name indicates the SAML 2.0 SP keystore document owner.\n+     * @return SAML 2.0 SP keystore\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    SAML2SPKeystoreTO getByOwner(@QueryParam(\"name\") String name);\n+\n+    /**\n+     * Returns the SAML 2.0 SP keystore matching the given key.\n+     *\n+     * @param key key of requested SAML 2.0 SP keystore\n+     * @return SAML 2.0 SP keystore with matching id\n+     */\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    SAML2SPKeystoreTO read(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Store the keystore to finalize the keystore generation process.\n+     *\n+     * @param keystoreTO SAML2SPMetadataKeystoreTO to be created\n+     * @return Response object featuring Location header of created SAML 2.0 SP keystore\n+     */\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"201\",\n+            description = \"SAML2SPKeystoreTO successfully created\", headers = {\n+            @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+            @Schema(type = \"string\"),\n+                description = \"UUID generated for the entity created\"),\n+            @Header(name = HttpHeaders.LOCATION, schema =\n+            @Schema(type = \"string\"),\n+                description = \"URL of the entity created\") }),\n+        @ApiResponse(responseCode = \"409\",\n+            description = \"Metadata already existing\") })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    Response set(@NotNull SAML2SPKeystoreTO keystoreTO);\n+\n+}"},{"sha":"24bb91858f22f1ca62eca24f50454baa04b952ef","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/SAML2SPMetadataService.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FSAML2SPMetadataService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FSAML2SPMetadataService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FSAML2SPMetadataService.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service.wa;\n+\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n+\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+/**\n+ * REST operations for SAML 2.0 SP metadata.\n+ */\n+@Tag(name = \"SAML 2.0 SP Metadata\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\") })\n+@Path(\"wa/saml2sp/metadata\")\n+public interface SAML2SPMetadataService extends JAXRSService {\n+\n+    /**\n+     * Returns a document outlining metadata for Syncope as SAML 2.0 SP.\n+     *\n+     * @param name indicates the SAML 2.0 SP metadata document owner.\n+     * @return SAML 2.0 SP metadata\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    SAML2SPMetadataTO getByOwner(@QueryParam(\"name\") String name);\n+\n+    /**\n+     * Returns the SAML 2.0 SP metadata matching the given key.\n+     *\n+     * @param key key of requested SAML 2.0 SP metadata\n+     * @return SAML 2.0 SP metadata with matching id\n+     */\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    SAML2SPMetadataTO read(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Store the metadata to finalize the metadata generation process.\n+     *\n+     * @param metadataTO SAML2SPMetadataTO to be created\n+     * @return Response object featuring Location header of created SAML 2.0 SP metadata\n+     */\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"201\",\n+            description = \"SAML2SPMetadata successfully created\", headers = {\n+            @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+            @Schema(type = \"string\"),\n+                description = \"UUID generated for the entity created\"),\n+            @Header(name = HttpHeaders.LOCATION, schema =\n+            @Schema(type = \"string\"),\n+                description = \"URL of the entity created\") }),\n+        @ApiResponse(responseCode = \"409\",\n+            description = \"Metadata already existing\") })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    Response set(@NotNull SAML2SPMetadataTO metadataTO);\n+\n+}"},{"sha":"103850cf8bd8286015c3a3ed1864540a8acfe8b3","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPKeystoreLogic.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPKeystoreLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPKeystoreLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPKeystoreLogic.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPKeystoreDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPKeystore;\n+import org.apache.syncope.core.provisioning.api.data.SAML2SPKeystoreBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.lang.reflect.Method;\n+\n+@Component\n+public class SAML2SPKeystoreLogic extends AbstractTransactionalLogic<SAML2SPKeystoreTO> {\n+\n+    @Autowired\n+    private SAML2SPKeystoreBinder binder;\n+\n+    @Autowired\n+    private SAML2SPKeystoreDAO saml2SPKeystoreDAO;\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_KEYSTORE_READ + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public SAML2SPKeystoreTO read(final String key) {\n+        final SAML2SPKeystore keystore = saml2SPKeystoreDAO.find(key);\n+        if (keystore == null) {\n+            throw new NotFoundException(key + \" not found\");\n+        }\n+        return binder.getSAML2SPKeystoreTO(keystore);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_KEYSTORE_READ + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public SAML2SPKeystoreTO get(final String name) {\n+        final SAML2SPKeystore keystore = saml2SPKeystoreDAO.findByOwner(name);\n+        if (keystore == null) {\n+            throw new NotFoundException(\"SAML2 SP keystore owned by \" + name + \" not found\");\n+        }\n+\n+        return binder.getSAML2SPKeystoreTO(keystore);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_KEYSTORE_CREATE + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public SAML2SPKeystoreTO set(final SAML2SPKeystoreTO keystoreTO) {\n+        final SAML2SPKeystore keystore = saml2SPKeystoreDAO.findByOwner(keystoreTO.getOwner());\n+        if (keystore == null) {\n+            return binder.getSAML2SPKeystoreTO(saml2SPKeystoreDAO.save(binder.create(keystoreTO)));\n+        }\n+        throw SyncopeClientException.build(ClientExceptionType.EntityExists);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_KEYSTORE_UPDATE + \"')\")\n+    public SAML2SPKeystoreTO update(final SAML2SPKeystoreTO keystoreTO) {\n+        final SAML2SPKeystore keystore = saml2SPKeystoreDAO.find(keystoreTO.getKey());\n+        if (keystore == null) {\n+            throw new NotFoundException(keystoreTO.getKey() + \" not found\");\n+        }\n+        return binder.getSAML2SPKeystoreTO(saml2SPKeystoreDAO.save(binder.update(keystore, keystoreTO)));\n+    }\n+\n+    @Override\n+    protected SAML2SPKeystoreTO resolveReference(final Method method, final Object... args)\n+        throws UnresolvedReferenceException {\n+        String name = null;\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; name == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    name = (String) args[i];\n+                } else if (args[i] instanceof SAML2SPKeystoreTO) {\n+                    name = ((SAML2SPKeystoreTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (name != null) {\n+            try {\n+                return binder.getSAML2SPKeystoreTO(saml2SPKeystoreDAO.findByOwner(name));\n+            } catch (final Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+        throw new UnresolvedReferenceException();\n+    }\n+}"},{"sha":"09182bcff5d92c1dd42164870bbf298a6dfe454d","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPMetadataLogic.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPMetadataLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPMetadataLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPMetadataLogic.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPMetadataDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPMetadata;\n+import org.apache.syncope.core.provisioning.api.data.SAML2SPMetadataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.lang.reflect.Method;\n+\n+@Component\n+public class SAML2SPMetadataLogic extends AbstractTransactionalLogic<SAML2SPMetadataTO> {\n+\n+    @Autowired\n+    private SAML2SPMetadataBinder binder;\n+\n+    @Autowired\n+    private SAML2SPMetadataDAO saml2SPMetadataDAO;\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_METADATA_READ + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public SAML2SPMetadataTO read(final String key) {\n+        final SAML2SPMetadata metadata = saml2SPMetadataDAO.find(key);\n+        if (metadata == null) {\n+            throw new NotFoundException(key + \" not found\");\n+        }\n+        return binder.getSAML2SPMetadataTO(metadata);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_METADATA_READ + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public SAML2SPMetadataTO get(final String name) {\n+        final SAML2SPMetadata metadata = saml2SPMetadataDAO.findByOwner(name);\n+        if (metadata == null) {\n+            throw new NotFoundException(\"SAML2 SP Metadata owned by \" + name + \" not found\");\n+        }\n+\n+        return binder.getSAML2SPMetadataTO(metadata);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_METADATA_CREATE + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public SAML2SPMetadataTO set(final SAML2SPMetadataTO metadataTO) {\n+        SAML2SPMetadata metadata = saml2SPMetadataDAO.findByOwner(metadataTO.getOwner());\n+        if (metadata == null) {\n+            return binder.getSAML2SPMetadataTO(saml2SPMetadataDAO.save(binder.create(metadataTO)));\n+        }\n+        throw SyncopeClientException.build(ClientExceptionType.EntityExists);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_METADATA_UPDATE + \"')\")\n+    public SAML2SPMetadataTO update(final SAML2SPMetadataTO metadataTO) {\n+        final SAML2SPMetadata metadata = saml2SPMetadataDAO.find(metadataTO.getKey());\n+        if (metadata == null) {\n+            throw new NotFoundException(metadataTO.getKey() + \" not found\");\n+        }\n+        return binder.getSAML2SPMetadataTO(saml2SPMetadataDAO.save(binder.update(metadata, metadataTO)));\n+    }\n+\n+    @Override\n+    protected SAML2SPMetadataTO resolveReference(final Method method, final Object... args)\n+        throws UnresolvedReferenceException {\n+        String name = null;\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; name == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    name = (String) args[i];\n+                } else if (args[i] instanceof SAML2SPMetadataTO) {\n+                    name = ((SAML2SPMetadataTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (name != null) {\n+            try {\n+                return binder.getSAML2SPMetadataTO(saml2SPMetadataDAO.findByOwner(name));\n+            } catch (final Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+        throw new UnresolvedReferenceException();\n+    }\n+}"},{"sha":"43aaedf5356c97750bfcb7832779ba94aeb3fb49","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPKeystoreConfServiceImpl.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPKeystoreConfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPKeystoreConfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPKeystoreConfServiceImpl.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n+import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreConfService;\n+import org.apache.syncope.core.logic.SAML2SPKeystoreLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SAML2SPKeystoreConfServiceImpl extends AbstractServiceImpl implements SAML2SPKeystoreConfService {\n+\n+    @Autowired\n+    private SAML2SPKeystoreLogic logic;\n+\n+    @Override\n+    public void update(final SAML2SPKeystoreTO metadataTO) {\n+        logic.update(metadataTO);\n+    }\n+}"},{"sha":"13f92390992681a48ec1f48bf357228e4c72c012","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPMetadataConfServiceImpl.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPMetadataConfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPMetadataConfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPMetadataConfServiceImpl.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.rest.api.service.SAML2SPMetadataConfService;\n+import org.apache.syncope.core.logic.SAML2SPMetadataLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SAML2SPMetadataConfServiceImpl extends AbstractServiceImpl implements SAML2SPMetadataConfService {\n+\n+    @Autowired\n+    private SAML2SPMetadataLogic logic;\n+\n+    @Override\n+    public void update(final SAML2SPMetadataTO metadataTO) {\n+        logic.update(metadataTO);\n+    }\n+}"},{"sha":"6bc3dc2f850c96db36226ea278dd2af4e1edb161","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/SAML2IdPMetadataServiceImpl.java","status":"renamed","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FSAML2IdPMetadataServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FSAML2IdPMetadataServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FSAML2IdPMetadataServiceImpl.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -16,14 +16,15 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.rest.cxf.service;\n+package org.apache.syncope.core.rest.cxf.service.wa;\n \n import java.net.URI;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n+import org.apache.syncope.common.rest.api.service.wa.SAML2IdPMetadataService;\n import org.apache.syncope.core.logic.SAML2IdPMetadataLogic;\n+import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n@@ -34,7 +35,7 @@ public class SAML2IdPMetadataServiceImpl extends AbstractServiceImpl implements\n     private SAML2IdPMetadataLogic logic;\n \n     @Override\n-    public SAML2IdPMetadataTO get(final String appliesTo) {\n+    public SAML2IdPMetadataTO getByOwner(final String appliesTo) {\n         return logic.get(appliesTo);\n     }\n ","previous_filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPMetadataServiceImpl.java"},{"sha":"852a70195afc665052005ac419bb2f8fdf405ade","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/SAML2SPKeystoreServiceImpl.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FSAML2SPKeystoreServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FSAML2SPKeystoreServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FSAML2SPKeystoreServiceImpl.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service.wa;\n+\n+import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.wa.SAML2SPKeystoreService;\n+import org.apache.syncope.core.logic.SAML2SPKeystoreLogic;\n+import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.net.URI;\n+\n+@Service\n+public class SAML2SPKeystoreServiceImpl extends AbstractServiceImpl implements SAML2SPKeystoreService {\n+\n+    @Autowired\n+    private SAML2SPKeystoreLogic logic;\n+\n+    @Override\n+    public SAML2SPKeystoreTO getByOwner(final String name) {\n+        return logic.get(name);\n+    }\n+\n+    @Override\n+    public SAML2SPKeystoreTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public Response set(final SAML2SPKeystoreTO keystoreTO) {\n+        final SAML2SPKeystoreTO keystore = logic.set(keystoreTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(keystore.getKey()).build();\n+        return Response.created(location).\n+            header(RESTHeaders.RESOURCE_KEY, keystore.getKey()).\n+            build();\n+    }\n+}"},{"sha":"3a8bf556d9f43d6965aabb2d5b270cefca077b09","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/SAML2SPMetadataServiceImpl.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FSAML2SPMetadataServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FSAML2SPMetadataServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FSAML2SPMetadataServiceImpl.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service.wa;\n+\n+import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.wa.SAML2SPMetadataService;\n+import org.apache.syncope.core.logic.SAML2SPMetadataLogic;\n+import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.net.URI;\n+\n+@Service\n+public class SAML2SPMetadataServiceImpl extends AbstractServiceImpl implements SAML2SPMetadataService {\n+\n+    @Autowired\n+    private SAML2SPMetadataLogic logic;\n+\n+    @Override\n+    public SAML2SPMetadataTO getByOwner(final String name) {\n+        return logic.get(name);\n+    }\n+\n+    @Override\n+    public SAML2SPMetadataTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public Response set(final SAML2SPMetadataTO metadataTO) {\n+        SAML2SPMetadataTO spMetadata = logic.set(metadataTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(spMetadata.getKey()).build();\n+        return Response.created(location).\n+            header(RESTHeaders.RESOURCE_KEY, spMetadata.getKey()).\n+            build();\n+    }\n+}"},{"sha":"5352a288c3dbce3e3332446cc8ae8b17f5a95e40","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/SAML2SPKeystoreDAO.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2SPKeystoreDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2SPKeystoreDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2SPKeystoreDAO.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao.auth;\n+\n+import org.apache.syncope.core.persistence.api.dao.DAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPKeystore;\n+\n+public interface SAML2SPKeystoreDAO extends DAO<SAML2SPKeystore> {\n+\n+    SAML2SPKeystore find(String key);\n+\n+    SAML2SPKeystore findByOwner(String name);\n+\n+    SAML2SPKeystore save(SAML2SPKeystore keystore);\n+\n+}"},{"sha":"ef1894f5611142808a680866865c589824d8ccee","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/SAML2SPMetadataDAO.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2SPMetadataDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2SPMetadataDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2SPMetadataDAO.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao.auth;\n+\n+import org.apache.syncope.core.persistence.api.dao.DAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPMetadata;\n+\n+public interface SAML2SPMetadataDAO extends DAO<SAML2SPMetadata> {\n+\n+    SAML2SPMetadata find(String key);\n+\n+    SAML2SPMetadata findByOwner(String name);\n+\n+    SAML2SPMetadata save(SAML2SPMetadata metadata);\n+\n+}"},{"sha":"83fe69620bc268f308c613bb6a598ee34017229d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/SAML2SPKeystore.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SPKeystore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SPKeystore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SPKeystore.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.auth;\n+\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+\n+public interface SAML2SPKeystore extends Entity {\n+\n+    String getKeystore();\n+\n+    void setKeystore(String keystore);\n+\n+    String getOwner();\n+\n+    void setOwner(String owner);\n+}"},{"sha":"78b4c10ee299f5d6b4d32ed34d1ee4944f65eeb3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/SAML2SPMetadata.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SPMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SPMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SPMetadata.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.auth;\n+\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+\n+public interface SAML2SPMetadata extends Entity {\n+\n+    String getMetadata();\n+\n+    void setMetadata(String metadata);\n+\n+    String getOwner();\n+\n+    void setOwner(String owner);\n+}"},{"sha":"83db64dd94909191256d87931d21fd85478f1ac1","filename":"core/persistence-jpa-json/pom.xml","status":"modified","additions":30,"deletions":22,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa-json%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa-json%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fpom.xml?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -45,6 +45,16 @@ under the License.\n     </dependency>\n \n     <!-- TEST -->\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcpkix-jdk15on</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcprov-jdk15on</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency> \n       <groupId>javax.servlet</groupId> \n       <artifactId>javax.servlet-api</artifactId> \n@@ -125,6 +135,26 @@ under the License.\n         <filtering>true</filtering>\n       </resource>\n     </resources>\n+    <testResources>\n+      <testResource>\n+        <directory>src/test/resources</directory>\n+        <filtering>true</filtering>\n+      </testResource>\n+      <testResource>\n+        <directory>src/main/resources</directory>\n+        <filtering>true</filtering>\n+        <excludes>\n+          <exclude>domains/MasterContent.xml</exclude>\n+        </excludes>\n+      </testResource>\n+      <testResource>\n+        <directory>${basedir}/../persistence-jpa/src/test/resources</directory>\n+        <filtering>true</filtering>\n+        <includes>\n+          <include>*-metadata.xml</include>\n+        </includes>\n+      </testResource>\n+    </testResources>\n   </build>\n \n   <profiles>\n@@ -285,21 +315,10 @@ under the License.\n         </plugins>\n         \n         <testResources>\n-          <testResource>\n-            <directory>src/test/resources</directory>\n-            <filtering>true</filtering>\n-          </testResource>\n           <testResource>\n             <directory>src/test/resources/pgjsonb</directory>\n             <filtering>true</filtering>\n           </testResource>\n-          <testResource>\n-            <directory>src/main/resources</directory>\n-            <filtering>true</filtering>\n-            <excludes>\n-              <exclude>domains/MasterContent.xml</exclude>\n-            </excludes>\n-          </testResource>\n           <testResource>\n             <directory>src/main/resources/pgjsonb</directory>\n             <filtering>true</filtering>\n@@ -412,21 +431,10 @@ under the License.\n         </plugins>\n         \n         <testResources>\n-          <testResource>\n-            <directory>src/test/resources</directory>\n-            <filtering>true</filtering>\n-          </testResource>\n           <testResource>\n             <directory>src/test/resources/myjson</directory>\n             <filtering>true</filtering>\n           </testResource>\n-          <testResource>\n-            <directory>src/main/resources</directory>\n-            <filtering>true</filtering>\n-            <excludes>\n-              <exclude>domains/MasterContent.xml</exclude>\n-            </excludes>\n-          </testResource>\n           <testResource>\n             <directory>src/main/resources/myjson</directory>\n             <filtering>true</filtering>"},{"sha":"3394661b7f54185c05eb795ea1ea98f1ae72ee6a","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -68,9 +68,10 @@ under the License.\n   <AuthModule id=\"4c3ed4e6-7008-11ea-bc55-0242ac130003\" name=\"DefaultGoogleMfaAuthModule\"\n               description=\"Google Mfa auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf\",\"name\":\"MyGoogleMfaAuthModuleConf\",\"codeDigits\":6,\"issuer\":\"SyncopeTest\"}'/>\n   <AuthModule id=\"4c3ed8f6-7008-11ea-bc55-0242ac130003\" name=\"DefaultOIDCAuthModule\"\n-              description=\"OIDC auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"name\":\"MyOIDCAuthModuleConf\", \"discoveryUri\":\"www.testurl.com\"}'/>\n+              description=\"OIDC auth module\"\n+              jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"name\":\"MyOIDCAuthModuleConf\", \"discoveryUri\":\"https://accounts.google.com/.well-known/openid-configuration\", \"id\":\"client-id\", \"secret\": \"client-secret\" }'/>\n   <AuthModule id=\"4c3ed9d2-7008-11ea-bc55-0242ac130003\" name=\"DefaultSAML2IdPAuthModule\"\n-              description=\"SAML2 IdP auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf\",\"name\":\"MySAML2IdPAuthModuleConf\", \"providerName\":\"testProviderName\",\"serviceProviderMetadataPath\":\"file:/etc/metadata\"}'/>\n+              description=\"SAML2 IdP auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf\",\"name\":\"MySAML2IdPAuthModuleConf\", \"keystorePassword\":\"p@$$word\",\"privateKeyPassword\":\"p@$$word\",\"identityProviderMetadataPath\":\"classpath:/idp-metadata.xml\", \"serviceProviderEntityId\":\"syncope:apache:org\"}'/>\n   <AuthModule id=\"4c3edbbc-7008-11ea-bc55-0242ac130003\" name=\"DefaultJaasAuthModule\"\n               description=\"Jaas auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.JaasAuthModuleConf\",\"name\":\"MyJaasAuthModuleConf\",\"realm\":\"SYNCOPE\",\"kerberosRealmSystemProperty\":\"sample-value\"}'/>\n   <AuthModule id=\"4c3edc98-7008-11ea-bc55-0242ac130003\" name=\"DefaultStaticAuthModule\""},{"sha":"0d6b81000200deb070bcbac5cc1139018f374b87","filename":"core/persistence-jpa/pom.xml","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fpom.xml?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -128,6 +128,16 @@ under the License.\n       <artifactId>junit-jupiter</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcpkix-jdk15on</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcprov-jdk15on</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n \n   <build>"},{"sha":"c3b97616c5bc5d8f5bc2c9d1ee9b039e98b3ec87","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPASAML2SPKeystoreDAO.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPKeystoreDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPKeystoreDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPKeystoreDAO.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao.auth;\n+\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPKeystoreDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPKeystore;\n+import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPKeystore;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import javax.persistence.NoResultException;\n+import javax.persistence.TypedQuery;\n+\n+@Repository\n+public class JPASAML2SPKeystoreDAO extends AbstractDAO<SAML2SPKeystore> implements SAML2SPKeystoreDAO {\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public SAML2SPKeystore find(final String key) {\n+        return entityManager().find(JPASAML2SPKeystore.class, key);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public SAML2SPKeystore findByOwner(final String owner) {\n+        TypedQuery<SAML2SPKeystore> query = entityManager().createQuery(\n+            \"SELECT e FROM \" + JPASAML2SPKeystore.class.getSimpleName() + \" e WHERE e.owner=:owner\",\n+            SAML2SPKeystore.class);\n+        query.setParameter(\"owner\", owner);\n+\n+        SAML2SPKeystore result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (final NoResultException e) {\n+            LOG.debug(\"No SAML2 SP Keystore found with appliesTo = {}\", owner);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public SAML2SPKeystore save(final SAML2SPKeystore saml2IdPMetadata) {\n+        return entityManager().merge(saml2IdPMetadata);\n+    }\n+\n+}"},{"sha":"21ee9bf997de954f7f9c42fef71e957f887ebc34","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPASAML2SPMetadataDAO.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPMetadataDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPMetadataDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPMetadataDAO.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao.auth;\n+\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPMetadataDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPMetadata;\n+import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPMetadata;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import javax.persistence.NoResultException;\n+import javax.persistence.TypedQuery;\n+\n+@Repository\n+public class JPASAML2SPMetadataDAO extends AbstractDAO<SAML2SPMetadata> implements SAML2SPMetadataDAO {\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public SAML2SPMetadata find(final String key) {\n+        return entityManager().find(JPASAML2SPMetadata.class, key);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public SAML2SPMetadata findByOwner(final String owner) {\n+        TypedQuery<SAML2SPMetadata> query = entityManager().createQuery(\n+            \"SELECT e FROM \" + JPASAML2SPMetadata.class.getSimpleName() + \" e WHERE e.owner=:owner\",\n+            SAML2SPMetadata.class);\n+        query.setParameter(\"owner\", owner);\n+\n+        SAML2SPMetadata result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (final NoResultException e) {\n+            LOG.debug(\"No SAML2 SP Metadata found with appliesTo = {}\", owner);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public SAML2SPMetadata save(final SAML2SPMetadata saml2IdPMetadata) {\n+        return entityManager().merge(saml2IdPMetadata);\n+    }\n+\n+}"},{"sha":"7eafee6d4dcca2e1c893ce440710ea1bdec158a5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -61,6 +61,8 @@\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPKeystore;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPMetadata;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n@@ -112,6 +114,8 @@\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCRP;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SP;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPKeystore;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPMetadata;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrValue;\n@@ -325,6 +329,10 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPASAML2SP();\n         } else if (reference.equals(SAML2IdPMetadata.class)) {\n             result = (E) new JPASAML2IdPMetadata();\n+        } else if (reference.equals(SAML2SPMetadata.class)) {\n+            result = (E) new JPASAML2SPMetadata();\n+        } else if (reference.equals(SAML2SPKeystore.class)) {\n+            result = (E) new JPASAML2SPKeystore();\n         } else {\n             throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n         }"},{"sha":"b7ef84c2c8b15e5877ab6ecefde5be547af58843","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2SPKeystore.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPKeystore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPKeystore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPKeystore.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.auth;\n+\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPKeystore;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = JPASAML2SPKeystore.TABLE)\n+public class JPASAML2SPKeystore extends AbstractGeneratedKeyEntity implements SAML2SPKeystore {\n+\n+    public static final String TABLE = \"SAML2SPKeystore\";\n+\n+    private static final long serialVersionUID = 22342617217394093L;\n+\n+    @Column(unique = true)\n+    private String owner;\n+\n+    @Lob\n+    @Column\n+    private String keystore;\n+\n+    @Override\n+    public String getKeystore() {\n+        return keystore;\n+    }\n+\n+    @Override\n+    public void setKeystore(final String keystore) {\n+        this.keystore = keystore;\n+    }\n+\n+    @Override\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final String name) {\n+        this.owner = name;\n+    }\n+\n+}"},{"sha":"e43e5ac1f72c6cb5826338ab5dbd1d1740ab4258","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2SPMetadata.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPMetadata.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.auth;\n+\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPMetadata;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = JPASAML2SPMetadata.TABLE)\n+public class JPASAML2SPMetadata extends AbstractGeneratedKeyEntity implements SAML2SPMetadata {\n+\n+    public static final String TABLE = \"SAML2SPMetadata\";\n+\n+    private static final long serialVersionUID = 12342617217394093L;\n+\n+    @Column(unique = true)\n+    private String owner;\n+\n+    @Lob\n+    @Column\n+    private String metadata;\n+\n+    @Override\n+    public String getMetadata() {\n+        return metadata;\n+    }\n+\n+    @Override\n+    public void setMetadata(final String metadata) {\n+        this.metadata = metadata;\n+    }\n+\n+    @Override\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final String name) {\n+        this.owner = name;\n+    }\n+\n+}"},{"sha":"730a67e7b993252b223cfd3ea621408e465ea8c9","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthModuleTest.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -267,8 +267,6 @@ public void saveWithSAML2IdPModule() {\n         SAML2IdPAuthModuleConf conf = new SAML2IdPAuthModuleConf();\n         conf.setServiceProviderEntityId(\"testEntityId\");\n         conf.setProviderName(\"testProviderName\");\n-        conf.setServiceProviderMetadataPath(\"file:/etc/metadata\");\n-\n         saveAuthModule(\"SAML2IdPAuthModuleTest\", conf);\n     }\n "},{"sha":"9dfbcd4599669b2757287f5ac47cd50b2d67655b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SAML2SPKeystoreTest.java","status":"added","additions":157,"deletions":0,"changes":157,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPKeystoreTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPKeystoreTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPKeystoreTest.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.inner;\n+\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPKeystoreDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPKeystore;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.bouncycastle.asn1.ASN1EncodableVector;\n+import org.bouncycastle.asn1.ASN1Encoding;\n+import org.bouncycastle.asn1.ASN1Integer;\n+import org.bouncycastle.asn1.DERBitString;\n+import org.bouncycastle.asn1.DERNull;\n+import org.bouncycastle.asn1.DERSequence;\n+import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.asn1.x509.AlgorithmIdentifier;\n+import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;\n+import org.bouncycastle.asn1.x509.TBSCertificate;\n+import org.bouncycastle.asn1.x509.Time;\n+import org.bouncycastle.asn1.x509.V3TBSCertificateGenerator;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.math.BigInteger;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.Signature;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.util.Base64;\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@Transactional(\"Master\")\n+public class SAML2SPKeystoreTest extends AbstractTest {\n+\n+    @Autowired\n+    private SAML2SPKeystoreDAO saml2SPKeystoreDAO;\n+\n+    private static Certificate createSelfSignedCert(final KeyPair keyPair) throws Exception {\n+        final X500Name dn = new X500Name(\"cn=Unknown\");\n+        final V3TBSCertificateGenerator certGen = new V3TBSCertificateGenerator();\n+\n+        certGen.setSerialNumber(new ASN1Integer(BigInteger.valueOf(1)));\n+        certGen.setIssuer(dn);\n+        certGen.setSubject(dn);\n+        certGen.setStartDate(new Time(new Date(System.currentTimeMillis() - 1000L)));\n+\n+        final Date expiration = new Date(System.currentTimeMillis() + 100000);\n+        certGen.setEndDate(new Time(expiration));\n+\n+        final AlgorithmIdentifier sigAlgID = new AlgorithmIdentifier(PKCSObjectIdentifiers.sha1WithRSAEncryption, DERNull.INSTANCE);\n+        certGen.setSignature(sigAlgID);\n+        certGen.setSubjectPublicKeyInfo(SubjectPublicKeyInfo.getInstance(keyPair.getPublic().getEncoded()));\n+\n+        final Signature sig = Signature.getInstance(\"SHA1WithRSA\");\n+        sig.initSign(keyPair.getPrivate());\n+        sig.update(certGen.generateTBSCertificate().getEncoded(ASN1Encoding.DER));\n+\n+        final TBSCertificate tbsCert = certGen.generateTBSCertificate();\n+        final ASN1EncodableVector v = new ASN1EncodableVector();\n+\n+        v.add(tbsCert);\n+        v.add(sigAlgID);\n+        v.add(new DERBitString(sig.sign()));\n+\n+        final Certificate cert = CertificateFactory.getInstance(\"X.509\")\n+            .generateCertificate(new ByteArrayInputStream(new DERSequence(v).getEncoded(ASN1Encoding.DER)));\n+        cert.verify(keyPair.getPublic());\n+        return cert;\n+    }\n+\n+    @Test\n+    public void find() throws Exception {\n+        create(\"Syncope\");\n+        SAML2SPKeystore saml2SPKeystore = saml2SPKeystoreDAO.findByOwner(\"Syncope\");\n+        assertNotNull(saml2SPKeystore);\n+\n+        saml2SPKeystore = saml2SPKeystoreDAO.findByOwner(UUID.randomUUID().toString());\n+        assertNull(saml2SPKeystore);\n+    }\n+\n+    @Test\n+    public void save() throws Exception {\n+        final SAML2SPKeystore keystore = create(\"SyncopeCreate\");\n+        final KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n+        char[] pwdArray = \"password\".toCharArray();\n+        ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(keystore.getKeystore())), pwdArray);\n+        assertTrue(ks.size() > 0);\n+    }\n+\n+    @Test\n+    public void update() throws Exception {\n+        SAML2SPKeystore saml2SPKeystore = create(\"SyncopeUpdate\");\n+        assertNotNull(saml2SPKeystore);\n+        saml2SPKeystore.setOwner(\"OtherSyncope\");\n+\n+        saml2SPKeystore = saml2SPKeystoreDAO.save(saml2SPKeystore);\n+        assertNotNull(saml2SPKeystore);\n+        assertNotNull(saml2SPKeystore.getKey());\n+        SAML2SPKeystore found = saml2SPKeystoreDAO.findByOwner(saml2SPKeystore.getOwner());\n+        assertNotNull(found);\n+        assertEquals(\"OtherSyncope\", found.getOwner());\n+    }\n+\n+    private SAML2SPKeystore create(final String owner) throws Exception {\n+        final SAML2SPKeystore saml2SPKeystore = entityFactory.newEntity(SAML2SPKeystore.class);\n+        saml2SPKeystore.setOwner(owner);\n+\n+        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n+        char[] pwdArray = \"password\".toCharArray();\n+        ks.load(null, pwdArray);\n+\n+        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n+        keyPairGenerator.initialize(4096);\n+        KeyPair keyPair = keyPairGenerator.generateKeyPair();\n+        Certificate certificate = createSelfSignedCert(keyPair);\n+        ks.setKeyEntry(\"main\", keyPair.getPrivate(), \"password\".toCharArray(), new Certificate[]{certificate});\n+\n+        try (ByteArrayOutputStream fos = new ByteArrayOutputStream()) {\n+            ks.store(fos, pwdArray);\n+            fos.flush();\n+            String keystore = Base64.getEncoder().encodeToString(fos.toByteArray());\n+            saml2SPKeystore.setKeystore(keystore);\n+        }\n+        saml2SPKeystoreDAO.save(saml2SPKeystore);\n+        assertNotNull(saml2SPKeystore);\n+        assertNotNull(saml2SPKeystore.getKey());\n+        assertNotNull(saml2SPKeystoreDAO.findByOwner(saml2SPKeystore.getOwner()));\n+        return saml2SPKeystore;\n+    }\n+}"},{"sha":"f6cbeae9acfd8a75fc2548be801d5d7eb42cb4d1","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SAML2SPMetadataTest.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPMetadataTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPMetadataTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPMetadataTest.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.inner;\n+\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPMetadataDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPMetadata;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.tika.io.IOUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+@Transactional(\"Master\")\n+public class SAML2SPMetadataTest extends AbstractTest {\n+\n+    @Autowired\n+    private SAML2SPMetadataDAO saml2SPMetadataDAO;\n+\n+    @Test\n+    public void find() throws Exception {\n+        create(\"Syncope\");\n+        SAML2SPMetadata saml2SPMetadata = saml2SPMetadataDAO.findByOwner(\"Syncope\");\n+        assertNotNull(saml2SPMetadata);\n+\n+        saml2SPMetadata = saml2SPMetadataDAO.findByOwner(UUID.randomUUID().toString());\n+        assertNull(saml2SPMetadata);\n+    }\n+\n+    @Test\n+    public void save() throws Exception {\n+        create(\"SyncopeCreate\");\n+    }\n+\n+    @Test\n+    public void update() throws Exception {\n+        SAML2SPMetadata saml2SPMetadata = create(\"SyncopeUpdate\");\n+        assertNotNull(saml2SPMetadata);\n+        saml2SPMetadata.setOwner(\"OtherSyncope\");\n+\n+        saml2SPMetadata = saml2SPMetadataDAO.save(saml2SPMetadata);\n+        assertNotNull(saml2SPMetadata);\n+        assertNotNull(saml2SPMetadata.getKey());\n+        SAML2SPMetadata found = saml2SPMetadataDAO.findByOwner(saml2SPMetadata.getOwner());\n+        assertNotNull(found);\n+        assertEquals(\"OtherSyncope\", found.getOwner());\n+    }\n+\n+    private SAML2SPMetadata create(final String owner) throws Exception {\n+        SAML2SPMetadata saml2SPMetadata = entityFactory.newEntity(SAML2SPMetadata.class);\n+        saml2SPMetadata.setOwner(owner);\n+        String metadata = IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream());\n+        saml2SPMetadata.setMetadata(metadata);\n+        saml2SPMetadataDAO.save(saml2SPMetadata);\n+        assertNotNull(saml2SPMetadata);\n+        assertNotNull(saml2SPMetadata.getKey());\n+        assertNotNull(saml2SPMetadataDAO.findByOwner(saml2SPMetadata.getOwner()));\n+        return saml2SPMetadata;\n+    }\n+\n+}"},{"sha":"7e1c33b6f5896e5c9d64a71553cebbc3fcce9aee","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -68,9 +68,10 @@ under the License.\n   <AuthModule id=\"4c3ed4e6-7008-11ea-bc55-0242ac130003\" name=\"DefaultGoogleMfaAuthModule\"\n               description=\"Google Mfa auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf\",\"name\":\"MyGoogleMfaAuthModuleConf\",\"codeDigits\":6,\"issuer\":\"SyncopeTest\"}'/>\n   <AuthModule id=\"4c3ed8f6-7008-11ea-bc55-0242ac130003\" name=\"DefaultOIDCAuthModule\"\n-              description=\"OIDC auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"name\":\"MyOIDCAuthModuleConf\", \"discoveryUri\":\"www.testurl.com\", \"id\":\"client-id\", \"secret\": \"client-secret\" }'/>\n+              description=\"OIDC auth module\"\n+              jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"name\":\"MyOIDCAuthModuleConf\", \"discoveryUri\":\"https://accounts.google.com/.well-known/openid-configuration\", \"id\":\"client-id\", \"secret\": \"client-secret\" }'/>\n   <AuthModule id=\"4c3ed9d2-7008-11ea-bc55-0242ac130003\" name=\"DefaultSAML2IdPAuthModule\"\n-              description=\"SAML2 IdP auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf\",\"name\":\"MySAML2IdPAuthModuleConf\", \"keystorePassword\":\"p@$$word\",\"privateKeyPassword\":\"p@$$word\",\"keystorePath\":\"file:/etc/metadata/keystore.jks\",\"identityProviderMetadataPath\":\"file:/etc/metadata/idp.xml\", \"serviceProviderMetadataPath\":\"file:/etc/metadata/sp.xml\", \"serviceProviderEntityId\":\"syncope:apache:org\"}'/>\n+              description=\"SAML2 IdP auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf\",\"name\":\"MySAML2IdPAuthModuleConf\", \"keystorePassword\":\"p@$$word\",\"privateKeyPassword\":\"p@$$word\",\"identityProviderMetadataPath\":\"classpath:/idp-metadata.xml\", \"serviceProviderEntityId\":\"syncope:apache:org\"}'/>\n   <AuthModule id=\"4c3edbbc-7008-11ea-bc55-0242ac130003\" name=\"DefaultJaasAuthModule\"\n               description=\"Jaas auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.JaasAuthModuleConf\",\"name\":\"MyJaasAuthModuleConf\",\"realm\":\"SYNCOPE\",\"kerberosRealmSystemProperty\":\"sample-value\", \"loginConfigType\": \"JavaLoginConfig\", \"loginConfigurationFile\": \"file:/etc/jaas/login.conf\"}'/>\n   <AuthModule id=\"4c3edc98-7008-11ea-bc55-0242ac130003\" name=\"DefaultStaticAuthModule\""},{"sha":"2e0162ba733b1f00d255c12d0921b7b55e4e1ec4","filename":"core/persistence-jpa/src/test/resources/idp-metadata.xml","status":"added","additions":144,"deletions":0,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fidp-metadata.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fidp-metadata.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fidp-metadata.xml?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,144 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~    http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+<EntityDescriptor xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" xmlns:shibmd=\"urn:mace:shibboleth:metadata:1.0\" xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xmlns:mdui=\"urn:oasis:names:tc:SAML:metadata:ui\" entityID=\"https://syncope.apache.org/idp\">\n+    <IDPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol urn:oasis:names:tc:SAML:1.1:protocol urn:mace:shibboleth:1.0\">\n+        <Extensions>\n+            <shibmd:Scope regexp=\"false\">example.net</shibmd:Scope>\n+        </Extensions>\n+        <KeyDescriptor use=\"signing\">\n+            <ds:KeyInfo>\n+                <ds:X509Data>\n+                    <ds:X509Certificate>MIIDLTCCAhWgAwIBAgIUVqwgQMQunB5UtoiiOqP1oQeg7lcwDQYJKoZIhvcNAQEL\n+                        BQAwHjEcMBoGA1UEAwwTbW1vYXl5ZWQudW5pY29uLm5ldDAeFw0xOTExMDExNDQ3\n+                        NDhaFw0zOTExMDExNDQ3NDhaMB4xHDAaBgNVBAMME21tb2F5eWVkLnVuaWNvbi5u\n+                        ZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDLXKHf93KZztJfCpNg\n+                        R/ip6EdOp3Z52HmwT32QlOzeby+2prqbOanQcs5oEeXoz6cdzjwOO6isnqZ3ES7p\n+                        BuVyuUoYVZyuXY6dsk6ANxeOXBRzGBS3ZemzYRQVmvQudNHUqdXpJelkFZvz3Au2\n+                        I594V2PZjywtuGIUb+T7j+8hh6Srf8c/W/KmC3KLFfU2yDQrcjuhGv+0Py5ZUpXs\n+                        EANs/d/AYV+LbMp3UtvWSOy8xGb+xxjS2KhTd53Oc6xsCgTPgTM5Y3DVA0ERNH+n\n+                        ppngRi/t3NggIN0EKYAS6ZqJi1GBEVHFOoacebLSy/UQA8tYI170/gf03/OYwO2S\n+                        9GATAgMBAAGjYzBhMB0GA1UdDgQWBBQxJh8NNf+qGJNZPlOItCWFQFY/wDBABgNV\n+                        HREEOTA3ghNtbW9heXllZC51bmljb24ubmV0hiBtbW9heXllZC51bmljb24ubmV0\n+                        L2lkcC9tZXRhZGF0YTANBgkqhkiG9w0BAQsFAAOCAQEAMMOb+f4Log69KUeAEvgh\n+                        sWTjiZujvl44nY4roXofAoXYc3vos/p5JVwEtrxgTLdyTsz65kZtaRISRrUJ3k0n\n+                        K22L2eXGa85qPhdKivRyNip5AMVi0zSXC6uhG50571Gy5UK/Rh3gvg7VM8GUFDHL\n+                        +Zay9ffV9lf0UVmFObA+PAe+HNY/dYRLIP9/pFW0+c1MmFtwCTrO4xbecfzA+Yde\n+                        9dbaBjS4veOSvFKiaCOvsiIVEUt1J7NrqM5sgYvOR5Q5zv0G72pmzS8cuGe2UP7e\n+                        i24oGm471cMDTLyFLYMCL8veHydcgfIV9z5g0PksV0kQL91r4XVkIp3iFZJ+TUBF\n+                        zg==</ds:X509Certificate>\n+                </ds:X509Data>\n+            </ds:KeyInfo>\n+        </KeyDescriptor>\n+        <KeyDescriptor use=\"encryption\">\n+            <ds:KeyInfo>\n+                <ds:X509Data>\n+                    <ds:X509Certificate>MIIDLTCCAhWgAwIBAgIUKymtgciRE6pWwDfrsI58qL9pQMgwDQYJKoZIhvcNAQEL\n+                        BQAwHjEcMBoGA1UEAwwTbW1vYXl5ZWQudW5pY29uLm5ldDAeFw0xOTExMDExNDQ3\n+                        NDhaFw0zOTExMDExNDQ3NDhaMB4xHDAaBgNVBAMME21tb2F5eWVkLnVuaWNvbi5u\n+                        ZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCKrT805sny3vlaYjTn\n+                        +m6m3VbUoStvnacgwHH+orNFhHoV1HP2ndoH5BsEDB9tQYuyRbGUm/nYVOSHayzB\n+                        G3bzMGdU7woO6rsCqpHuxUyEvojd/y/N/r9jMzeBOCu0KDBTrn3BJhnGSwSTfhOS\n+                        3r20JFmDuTkHmabRs7ro0BvDaQ29jh38ro1iwB4E/4mqb1zYP13NI3ooErN/o6pl\n+                        XKpnFY37bDDOyOuocjN9tfPNIANNFKah0HjWOP0Nso0D1g6jHOSzmOw/Yxg61vBk\n+                        qOD4aKhLYPAxsXRl80nDrwTnm3/9xLQj9D3uLAtDLnn9pSqn3jCLxsxsHfKL/zkB\n+                        IKEBAgMBAAGjYzBhMB0GA1UdDgQWBBSrPjAgCJIHYmsofDcDIPzEhnYxmTBABgNV\n+                        HREEOTA3ghNtbW9heXllZC51bmljb24ubmV0hiBtbW9heXllZC51bmljb24ubmV0\n+                        L2lkcC9tZXRhZGF0YTANBgkqhkiG9w0BAQsFAAOCAQEAI8MlofbE0tbq8ez2d0Lq\n+                        Syhp4Q/shMEwjqcDarOwR+ACB9McOannUpAG7TCDp8Ch5E/V1B0Uo/5DF2tAzB1y\n+                        7sgAmy2mY9/mFhMYpOqTCagufwewaMkn9n7ETzC/6vQEjYrjiNyNR0F3UQQz2bhe\n+                        ROM3YuKctuOnMthc+ZE7vn+AXCGumRHBhyCaYdzfeUh7id+yrd9B51+o3iF4eu6w\n+                        zJi5z7FMCS6I4PSc/uWYDw1ahzoPONjazWSEWGUibZaJYM3pJHkuwqyWKOFGVknH\n+                        J1Qv4WCfSPb6eva94TZX0lkLM01C7NZObnfxY3fvJGcyFl8wlRTUYvuqM8md5CEp\n+                        LA==</ds:X509Certificate>\n+                </ds:X509Data>\n+            </ds:KeyInfo>\n+        </KeyDescriptor>\n+\n+        <!--\n+        <ArtifactResolutionService Binding=\"urn:oasis:names:tc:SAML:1.0:bindings:SOAP-binding\"\n+                                   Location=\"https://syncope.apache.org/cas/idp/profile/SAML1/SOAP/ArtifactResolution\" index=\"1\"/>\n+        -->\n+\n+        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/POST/SLO\"/>\n+        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/Redirect/SLO\" />\n+\n+        <NameIDFormat>urn:mace:shibboleth:1.0:nameIdentifier</NameIDFormat>\n+        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</NameIDFormat>\n+\n+        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/POST/SSO\"/>\n+        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/POST-SimpleSign/SSO\"/>\n+        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/Redirect/SSO\"/>\n+        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/SOAP/ECP\"/>\n+    </IDPSSODescriptor>\n+\n+    <!--\n+    <AttributeAuthorityDescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:1.1:protocol urn:oasis:names:tc:SAML:2.0:protocol\">\n+        <Extensions>\n+            <shibmd:Scope regexp=\"false\">example.net</shibmd:Scope>\n+        </Extensions>\n+        <KeyDescriptor use=\"signing\">\n+            <ds:KeyInfo>\n+                <ds:X509Data>\n+                    <ds:X509Certificate>MIIDLTCCAhWgAwIBAgIUVqwgQMQunB5UtoiiOqP1oQeg7lcwDQYJKoZIhvcNAQEL\n+BQAwHjEcMBoGA1UEAwwTbW1vYXl5ZWQudW5pY29uLm5ldDAeFw0xOTExMDExNDQ3\n+NDhaFw0zOTExMDExNDQ3NDhaMB4xHDAaBgNVBAMME21tb2F5eWVkLnVuaWNvbi5u\n+ZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDLXKHf93KZztJfCpNg\n+R/ip6EdOp3Z52HmwT32QlOzeby+2prqbOanQcs5oEeXoz6cdzjwOO6isnqZ3ES7p\n+BuVyuUoYVZyuXY6dsk6ANxeOXBRzGBS3ZemzYRQVmvQudNHUqdXpJelkFZvz3Au2\n+I594V2PZjywtuGIUb+T7j+8hh6Srf8c/W/KmC3KLFfU2yDQrcjuhGv+0Py5ZUpXs\n+EANs/d/AYV+LbMp3UtvWSOy8xGb+xxjS2KhTd53Oc6xsCgTPgTM5Y3DVA0ERNH+n\n+ppngRi/t3NggIN0EKYAS6ZqJi1GBEVHFOoacebLSy/UQA8tYI170/gf03/OYwO2S\n+9GATAgMBAAGjYzBhMB0GA1UdDgQWBBQxJh8NNf+qGJNZPlOItCWFQFY/wDBABgNV\n+HREEOTA3ghNtbW9heXllZC51bmljb24ubmV0hiBtbW9heXllZC51bmljb24ubmV0\n+L2lkcC9tZXRhZGF0YTANBgkqhkiG9w0BAQsFAAOCAQEAMMOb+f4Log69KUeAEvgh\n+sWTjiZujvl44nY4roXofAoXYc3vos/p5JVwEtrxgTLdyTsz65kZtaRISRrUJ3k0n\n+K22L2eXGa85qPhdKivRyNip5AMVi0zSXC6uhG50571Gy5UK/Rh3gvg7VM8GUFDHL\n++Zay9ffV9lf0UVmFObA+PAe+HNY/dYRLIP9/pFW0+c1MmFtwCTrO4xbecfzA+Yde\n+9dbaBjS4veOSvFKiaCOvsiIVEUt1J7NrqM5sgYvOR5Q5zv0G72pmzS8cuGe2UP7e\n+i24oGm471cMDTLyFLYMCL8veHydcgfIV9z5g0PksV0kQL91r4XVkIp3iFZJ+TUBF\n+zg==</ds:X509Certificate>\n+                </ds:X509Data>\n+            </ds:KeyInfo>\n+        </KeyDescriptor>\n+        <AttributeService Binding=\"urn:oasis:names:tc:SAML:1.0:bindings:SOAP-binding\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML1/SOAP/AttributeQuery\"/>\n+        <AttributeService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/SOAP/AttributeQuery\"/>\n+    </AttributeAuthorityDescriptor>\n+    -->\n+\n+    <!--\n+    <Organization>\n+        <OrganizationName xml:lang=\"en\">Institution Name</OrganizationName>\n+        <OrganizationDisplayName xml:lang=\"en\">Institution DisplayName</OrganizationDisplayName>\n+        <OrganizationURL xml:lang=\"en\">URL</OrganizationURL>\n+    </Organization>\n+    <ContactPerson contactType=\"administrative\">\n+        <GivenName>John Smith</GivenName>\n+        <EmailAddress>jsmith@example.org</EmailAddress>\n+    </ContactPerson>\n+    <ContactPerson contactType=\"technical\">\n+        <GivenName>John Smith</GivenName>\n+        <EmailAddress>jsmith@example.org</EmailAddress>\n+    </ContactPerson>\n+    <ContactPerson contactType=\"support\">\n+        <GivenName>IT Services Support</GivenName>\n+        <EmailAddress>support@example.org</EmailAddress>\n+    </ContactPerson>\n+    -->\n+</EntityDescriptor>"},{"sha":"351d556af461d127ecaae96f99648a50296f6c2c","filename":"core/persistence-jpa/src/test/resources/sp-metadata.xml","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fsp-metadata.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fsp-metadata.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fsp-metadata.xml?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~    http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+<md:EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" ID=\"_lipmbmwyb3ujt0osvfect39lzglxnsdi7bxhvf5\" entityID=\"urn:mace:saml:pac4j.org\" validUntil=\"2038-08-10T19:43:10.846Z\">\n+    <md:Extensions xmlns:alg=\"urn:oasis:names:tc:SAML:metadata:algsupport\">\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha512\"/>\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#sha384\"/>\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/>\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#sha224\"/>\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/>\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha512\"/>\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha384\"/>\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"/>\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/>\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#dsa-sha1\"/>\n+    </md:Extensions>\n+    <md:SPSSODescriptor AuthnRequestsSigned=\"false\" WantAssertionsSigned=\"false\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol urn:oasis:names:tc:SAML:1.0:protocol urn:oasis:names:tc:SAML:1.1:protocol\">\n+        <md:Extensions xmlns:init=\"urn:oasis:names:tc:SAML:profiles:SSO:request-init\">\n+            <init:RequestInitiator Binding=\"urn:oasis:names:tc:SAML:profiles:SSO:request-init\" Location=\"https://mmoayyed.unicon.net:8443/cas/login?client_name=SAML2Client\"/>\n+        </md:Extensions>\n+        <md:NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</md:NameIDFormat>\n+        <md:NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</md:NameIDFormat>\n+        <md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</md:NameIDFormat>\n+        <md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat>\n+        <md:AssertionConsumerService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://mmoayyed.unicon.net:8443/cas/login?client_name=SAML2Client\" index=\"0\"/>\n+    </md:SPSSODescriptor>\n+</md:EntityDescriptor>"},{"sha":"e0cc306cbcf7b88f846fd9a36fdfd8ed5ab5a1a2","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/SAML2SPKeystoreBinder.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2SPKeystoreBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2SPKeystoreBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2SPKeystoreBinder.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPKeystore;\n+\n+public interface SAML2SPKeystoreBinder {\n+\n+    SAML2SPKeystore create(SAML2SPKeystoreTO keystoreTO);\n+\n+    SAML2SPKeystore update(SAML2SPKeystore keystore, SAML2SPKeystoreTO keystoreTO);\n+\n+    SAML2SPKeystoreTO getSAML2SPKeystoreTO(SAML2SPKeystore keystore);\n+\n+}"},{"sha":"c49d64f56b55b77798b1405dc29fb7153257d772","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/SAML2SPMetadataBinder.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2SPMetadataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2SPMetadataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2SPMetadataBinder.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPMetadata;\n+\n+public interface SAML2SPMetadataBinder {\n+\n+    SAML2SPMetadata create(SAML2SPMetadataTO metadataTO);\n+\n+    SAML2SPMetadata update(SAML2SPMetadata metadata, SAML2SPMetadataTO metadataTO);\n+\n+    SAML2SPMetadataTO getSAML2SPMetadataTO(SAML2SPMetadata metadata);\n+\n+}"},{"sha":"02fd80510ef3e4f1d7fa7523748bccfc1b45c0f0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2SPKeystoreBinderImpl.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPKeystoreBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPKeystoreBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPKeystoreBinderImpl.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPKeystore;\n+import org.apache.syncope.core.provisioning.api.data.SAML2SPKeystoreBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SAML2SPKeystoreBinderImpl implements SAML2SPKeystoreBinder {\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    private SAML2SPKeystore getSAML2SPKeystore(\n+        final SAML2SPKeystore keystore,\n+        final SAML2SPKeystoreTO keystoreTO) {\n+\n+        SAML2SPKeystore result = keystore;\n+        if (result == null) {\n+            result = entityFactory.newEntity(SAML2SPKeystore.class);\n+        }\n+        result.setKeystore(keystoreTO.getKeystore());\n+        result.setOwner(keystoreTO.getOwner());\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public SAML2SPKeystore create(final SAML2SPKeystoreTO keystoreTO) {\n+        return update(entityFactory.newEntity(SAML2SPKeystore.class), keystoreTO);\n+    }\n+\n+    @Override\n+    public SAML2SPKeystore update(\n+        final SAML2SPKeystore keystore,\n+        final SAML2SPKeystoreTO keystoreTO) {\n+\n+        return getSAML2SPKeystore(keystore, keystoreTO);\n+    }\n+\n+    @Override\n+    public SAML2SPKeystoreTO getSAML2SPKeystoreTO(final SAML2SPKeystore keystore) {\n+        SAML2SPKeystoreTO keystoreTO = new SAML2SPKeystoreTO();\n+\n+        keystoreTO.setKey(keystore.getKey());\n+        keystoreTO.setKeystore(keystore.getKeystore());\n+        keystoreTO.setOwner(keystore.getOwner());\n+\n+        return keystoreTO;\n+    }\n+}"},{"sha":"3e4e62b0bbb8c6c025c35256b851a3b7736afe75","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2SPMetadataBinderImpl.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPMetadataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPMetadataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPMetadataBinderImpl.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPMetadata;\n+import org.apache.syncope.core.provisioning.api.data.SAML2SPMetadataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SAML2SPMetadataBinderImpl implements SAML2SPMetadataBinder {\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    private SAML2SPMetadata getSAML2SPMetadata(\n+        final SAML2SPMetadata metadata,\n+        final SAML2SPMetadataTO metadataTO) {\n+\n+        SAML2SPMetadata result = metadata;\n+        if (result == null) {\n+            result = entityFactory.newEntity(SAML2SPMetadata.class);\n+        }\n+\n+        result.setMetadata(metadataTO.getMetadata());\n+        result.setOwner(metadataTO.getOwner());\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public SAML2SPMetadata create(final SAML2SPMetadataTO metadataTO) {\n+        return update(entityFactory.newEntity(SAML2SPMetadata.class), metadataTO);\n+    }\n+\n+    @Override\n+    public SAML2SPMetadata update(\n+        final SAML2SPMetadata metadata,\n+        final SAML2SPMetadataTO metadataTO) {\n+\n+        return getSAML2SPMetadata(metadata, metadataTO);\n+    }\n+\n+    @Override\n+    public SAML2SPMetadataTO getSAML2SPMetadataTO(final SAML2SPMetadata saml2IdPMetadata) {\n+        SAML2SPMetadataTO metadataTO = new SAML2SPMetadataTO();\n+\n+        metadataTO.setKey(saml2IdPMetadata.getKey());\n+        metadataTO.setMetadata(saml2IdPMetadata.getMetadata());\n+        metadataTO.setOwner(saml2IdPMetadata.getOwner());\n+\n+        return metadataTO;\n+    }\n+}"},{"sha":"8a3a33c995515c46f0bc7bd92fa55d0dcc0cae71","filename":"fit/core-reference/pom.xml","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -222,6 +222,11 @@ under the License.\n       <artifactId>bcpkix-jdk15on</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcprov-jdk15on</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n \n   <build>\n@@ -788,6 +793,16 @@ under the License.\n           <version>${jdbc.postgresql.version}</version>\n           <scope>test</scope>\n         </dependency>\n+        <dependency>\n+          <groupId>org.bouncycastle</groupId>\n+          <artifactId>bcpkix-jdk15on</artifactId>\n+          <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+          <groupId>org.bouncycastle</groupId>\n+          <artifactId>bcprov-jdk15on</artifactId>\n+          <scope>test</scope>\n+        </dependency>\n       </dependencies>\n \n       <build>\n@@ -1060,6 +1075,16 @@ under the License.\n           <version>${jdbc.mysql.version}</version>\n           <scope>test</scope>\n         </dependency>\n+        <dependency>\n+          <groupId>org.bouncycastle</groupId>\n+          <artifactId>bcpkix-jdk15on</artifactId>\n+          <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+          <groupId>org.bouncycastle</groupId>\n+          <artifactId>bcprov-jdk15on</artifactId>\n+          <scope>test</scope>\n+        </dependency>\n       </dependencies>\n \n       <build>"},{"sha":"01936ca896c15d077c760e6cfb2b1497683987f8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":42,"deletions":6,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -63,11 +63,12 @@\n import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.UserCR;\n+import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n+import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n@@ -84,13 +85,11 @@\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n-import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.client.ClientAppTO;\n import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientAppType;\n-import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PolicyType;\n@@ -111,6 +110,10 @@\n import org.apache.syncope.common.rest.api.service.DynRealmService;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n+import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreConfService;\n+import org.apache.syncope.common.rest.api.service.wa.SAML2SPKeystoreService;\n+import org.apache.syncope.common.rest.api.service.SAML2SPMetadataConfService;\n+import org.apache.syncope.common.rest.api.service.wa.SAML2SPMetadataService;\n import org.apache.syncope.common.rest.api.service.SAML2SPService;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n import org.apache.syncope.common.rest.api.service.ReportService;\n@@ -138,9 +141,8 @@\n import org.apache.syncope.common.rest.api.service.BpmnProcessService;\n import org.apache.syncope.common.rest.api.service.GatewayRouteService;\n import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataConfService;\n-import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n+import org.apache.syncope.common.rest.api.service.wa.SAML2IdPMetadataService;\n import org.apache.syncope.common.rest.api.service.UserWorkflowTaskService;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.core.CoreITContext;\n import org.apache.syncope.fit.core.UserITCase;\n import org.identityconnectors.common.security.Encryptor;\n@@ -292,6 +294,14 @@ public abstract class AbstractITCase {\n \n     protected static AuthModuleService authModuleService;\n \n+    protected static SAML2SPMetadataService saml2SPMetadataService;\n+\n+    protected static SAML2SPMetadataConfService saml2SPMetadataConfService;\n+\n+    protected static SAML2SPKeystoreService saml2SPKeystoreService;\n+\n+    protected static SAML2SPKeystoreConfService saml2SPKeystoreConfService;\n+\n     protected static SAML2IdPMetadataService saml2IdPMetadataService;\n \n     protected static SAML2IdPMetadataConfService saml2IdPMetadataConfService;\n@@ -382,15 +392,19 @@ public static void restSetup() {\n         remediationService = adminClient.getService(RemediationService.class);\n         gatewayRouteService = adminClient.getService(GatewayRouteService.class);\n         camelRouteService = adminClient.getService(CamelRouteService.class);\n-        saml2SpService = adminClient.getService(org.apache.syncope.common.rest.api.service.SAML2SPService.class);\n+        saml2SpService = adminClient.getService(SAML2SPService.class);\n         saml2IdPService = adminClient.getService(SAML2IdPService.class);\n         oidcClientService = adminClient.getService(OIDCClientService.class);\n         oidcProviderService = adminClient.getService(OIDCProviderService.class);\n         scimConfService = adminClient.getService(SCIMConfService.class);\n         clientAppService = adminClient.getService(ClientAppService.class);\n         authModuleService = adminClient.getService(AuthModuleService.class);\n+        saml2SPMetadataService = adminClient.getService(SAML2SPMetadataService.class);\n+        saml2SPMetadataConfService = adminClient.getService(SAML2SPMetadataConfService.class);\n         saml2IdPMetadataService = adminClient.getService(SAML2IdPMetadataService.class);\n         saml2IdPMetadataConfService = adminClient.getService(SAML2IdPMetadataConfService.class);\n+        saml2SPKeystoreService = adminClient.getService(SAML2SPKeystoreService.class);\n+        saml2SPKeystoreConfService = adminClient.getService(SAML2SPKeystoreConfService.class);\n     }\n \n     @Autowired\n@@ -617,6 +631,28 @@ protected SAML2IdPMetadataTO createSAML2IdPMetadata(final SAML2IdPMetadataTO sam\n         return getObject(response.getLocation(), SAML2IdPMetadataService.class, saml2IdPMetadata.getClass());\n     }\n \n+    protected SAML2SPMetadataTO createSAML2SPMetadata(final SAML2SPMetadataTO metadata) {\n+        Response response = saml2SPMetadataService.set(metadata);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+        return getObject(response.getLocation(), SAML2SPMetadataService.class, metadata.getClass());\n+    }\n+\n+    protected SAML2SPKeystoreTO createSAML2SPKeystore(final SAML2SPKeystoreTO keystoreTO) {\n+        Response response = saml2SPKeystoreService.set(keystoreTO);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+        return getObject(response.getLocation(), SAML2SPKeystoreService.class, keystoreTO.getClass());\n+    }\n+\n     protected ResourceTO createResource(final ResourceTO resourceTO) {\n         Response response = resourceService.create(resourceTO);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {"},{"sha":"ba5fc5a52dcdeb0c69a7e36d4ac9bad149a04cc5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthModuleITCase.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -126,8 +126,6 @@ private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type\n                 SAML2IdPAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n                 SAML2IdPAuthModuleConf.class.cast(conf).setServiceProviderEntityId(\"testEntityId\");\n                 SAML2IdPAuthModuleConf.class.cast(conf).setProviderName(\"testProviderName\");\n-                SAML2IdPAuthModuleConf.class.cast(conf).setServiceProviderMetadataPath(\n-                        \"file:/etc/metadata\");\n                 break;\n \n             case SYNCOPE:"},{"sha":"2971cb769ab104c67f176563c72c946b4ee0d997","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2IdPMetadataITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2IdPMetadataITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2IdPMetadataITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2IdPMetadataITCase.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -63,7 +63,7 @@ private void testIsValid(final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n     public void read() {\n         SAML2IdPMetadataTO saml2IdPMetadataTO = null;\n         try {\n-            saml2IdPMetadataTO = saml2IdPMetadataService.get(APPLIES_TO);\n+            saml2IdPMetadataTO = saml2IdPMetadataService.getByOwner(APPLIES_TO);\n         } catch (SyncopeClientException e) {\n             saml2IdPMetadataTO = createSAML2IdPMetadata();\n         }\n@@ -76,7 +76,7 @@ public void read() {\n     @Test\n     public void create() {\n         try {\n-            saml2IdPMetadataService.get(APPLIES_TO);\n+            saml2IdPMetadataService.getByOwner(APPLIES_TO);\n         } catch (SyncopeClientException e) {\n             createSAML2IdPMetadata();\n         }\n@@ -96,15 +96,15 @@ public void create() {\n     public void update() {\n         SAML2IdPMetadataTO saml2IdPMetadataTO = null;\n         try {\n-            saml2IdPMetadataTO = saml2IdPMetadataService.get(APPLIES_TO);\n+            saml2IdPMetadataTO = saml2IdPMetadataService.getByOwner(APPLIES_TO);\n         } catch (NotFoundException e) {\n             saml2IdPMetadataTO = createSAML2IdPMetadata();\n         }\n \n         assertNotNull(saml2IdPMetadataTO);\n         saml2IdPMetadataTO.setEncryptionKey(\"newKey\");\n         saml2IdPMetadataConfService.update(saml2IdPMetadataTO);\n-        saml2IdPMetadataTO = saml2IdPMetadataService.get(saml2IdPMetadataTO.getAppliesTo());\n+        saml2IdPMetadataTO = saml2IdPMetadataService.getByOwner(saml2IdPMetadataTO.getAppliesTo());\n         assertNotNull(saml2IdPMetadataTO);\n \n         assertEquals(\"newKey\", saml2IdPMetadataTO.getEncryptionKey());"},{"sha":"cc7e40c14cc31a67b89112cc2efdb51cf1ce477e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2SPKeystoreITCase.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPKeystoreITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPKeystoreITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPKeystoreITCase.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n+import org.junit.platform.commons.util.StringUtils;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class SAML2SPKeystoreITCase extends AbstractITCase {\n+\n+    private static final String OWNER = \"Syncope\";\n+\n+    private static void testIsValid(final SAML2SPKeystoreTO keystoreTO) {\n+        assertFalse(StringUtils.isBlank(keystoreTO.getOwner()));\n+        assertFalse(StringUtils.isBlank(keystoreTO.getKeystore()));\n+    }\n+\n+    private SAML2SPKeystoreTO createSAML2SPKeystore() {\n+        SAML2SPKeystoreTO result = createSAML2SPKeystore(new SAML2SPKeystoreTO.Builder().\n+            owner(OWNER).\n+            keystore(\"testkyStore\").\n+            build());\n+        assertNotNull(result);\n+        testIsValid(result);\n+        return result;\n+    }\n+\n+    @Test\n+    public void read() {\n+        SAML2SPKeystoreTO keystoreTO;\n+        try {\n+            keystoreTO = saml2SPKeystoreService.getByOwner(OWNER);\n+        } catch (SyncopeClientException e) {\n+            keystoreTO = createSAML2SPKeystore();\n+        }\n+        assertNotNull(keystoreTO);\n+        assertEquals(OWNER, keystoreTO.getOwner());\n+        testIsValid(keystoreTO);\n+    }\n+\n+    @Test\n+    public void create() {\n+        try {\n+            saml2SPMetadataService.getByOwner(OWNER);\n+        } catch (SyncopeClientException e) {\n+            createSAML2SPKeystore();\n+        }\n+\n+        try {\n+            createSAML2SPKeystore(new SAML2SPKeystoreTO.Builder().\n+                owner(OWNER).\n+                keystore(\"testMetadata\").\n+                build());\n+            fail(\"This should not happen\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.EntityExists, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void update() {\n+        SAML2SPKeystoreTO keystoreTO;\n+        try {\n+            keystoreTO = saml2SPKeystoreService.getByOwner(OWNER);\n+        } catch (NotFoundException e) {\n+            keystoreTO = createSAML2SPKeystore();\n+        }\n+        assertNotNull(keystoreTO);\n+        keystoreTO.setKeystore(\"new-keystore\");\n+        keystoreTO.setOwner(\"Syncope4\");\n+\n+        saml2SPKeystoreConfService.update(keystoreTO);\n+        keystoreTO = saml2SPKeystoreService.read(keystoreTO.getKey());\n+        assertNotNull(keystoreTO);\n+        assertEquals(\"new-keystore\", keystoreTO.getKeystore());\n+        assertEquals(\"Syncope4\", keystoreTO.getOwner());\n+    }\n+\n+}"},{"sha":"3fe0f0dd59bb080c9b62d428573ad80f8ed023eb","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2SPMetadataITCase.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPMetadataITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPMetadataITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPMetadataITCase.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n+import org.junit.platform.commons.util.StringUtils;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class SAML2SPMetadataITCase extends AbstractITCase {\n+\n+    private static final String OWNER = \"Syncope\";\n+\n+    private static void testIsValid(final SAML2SPMetadataTO metadataTO) {\n+        assertFalse(StringUtils.isBlank(metadataTO.getOwner()));\n+        assertFalse(StringUtils.isBlank(metadataTO.getMetadata()));\n+    }\n+\n+    private SAML2SPMetadataTO createSAML2SPMetadata() {\n+        SAML2SPMetadataTO result = createSAML2SPMetadata(new SAML2SPMetadataTO.Builder().\n+            owner(OWNER).\n+            metadata(\"testMetadata\").\n+            build());\n+        assertNotNull(result);\n+        testIsValid(result);\n+        return result;\n+    }\n+\n+    @Test\n+    public void read() {\n+        SAML2SPMetadataTO metadataTO;\n+        try {\n+            metadataTO = saml2SPMetadataService.getByOwner(OWNER);\n+        } catch (SyncopeClientException e) {\n+            metadataTO = createSAML2SPMetadata();\n+        }\n+        assertNotNull(metadataTO);\n+        assertEquals(OWNER, metadataTO.getOwner());\n+        testIsValid(metadataTO);\n+    }\n+\n+    @Test\n+    public void create() {\n+        try {\n+            saml2SPMetadataService.getByOwner(OWNER);\n+        } catch (SyncopeClientException e) {\n+            createSAML2SPMetadata();\n+        }\n+\n+        try {\n+            createSAML2SPMetadata(new SAML2SPMetadataTO.Builder().\n+                owner(OWNER).\n+                metadata(\"testMetadata\").\n+                build());\n+            fail(\"This should not happen\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.EntityExists, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void update() {\n+        SAML2SPMetadataTO metadataTO;\n+        try {\n+            metadataTO = saml2SPMetadataService.getByOwner(OWNER);\n+        } catch (NotFoundException e) {\n+            metadataTO = createSAML2SPMetadata();\n+        }\n+        assertNotNull(metadataTO);\n+        metadataTO.setMetadata(\"new-metadata\");\n+        metadataTO.setOwner(\"Syncope4\");\n+\n+        saml2SPMetadataConfService.update(metadataTO);\n+        metadataTO = saml2SPMetadataService.read(metadataTO.getKey());\n+        assertNotNull(metadataTO);\n+        assertEquals(\"new-metadata\", metadataTO.getMetadata());\n+        assertEquals(\"Syncope4\", metadataTO.getOwner());\n+    }\n+\n+}"},{"sha":"0e5e1222374a4107db8fc86551ce07df9817be63","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -44,7 +44,6 @@\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.request.AttrPatch;\n-import org.apache.syncope.common.lib.search.UserPartialCondition;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.PagedResult;"},{"sha":"2e0162ba733b1f00d255c12d0921b7b55e4e1ec4","filename":"fit/wa-reference/src/main/resources/idp-metadata.xml","status":"added","additions":144,"deletions":0,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Fidp-metadata.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Fidp-metadata.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Fidp-metadata.xml?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,144 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~    http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+<EntityDescriptor xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" xmlns:shibmd=\"urn:mace:shibboleth:metadata:1.0\" xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xmlns:mdui=\"urn:oasis:names:tc:SAML:metadata:ui\" entityID=\"https://syncope.apache.org/idp\">\n+    <IDPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol urn:oasis:names:tc:SAML:1.1:protocol urn:mace:shibboleth:1.0\">\n+        <Extensions>\n+            <shibmd:Scope regexp=\"false\">example.net</shibmd:Scope>\n+        </Extensions>\n+        <KeyDescriptor use=\"signing\">\n+            <ds:KeyInfo>\n+                <ds:X509Data>\n+                    <ds:X509Certificate>MIIDLTCCAhWgAwIBAgIUVqwgQMQunB5UtoiiOqP1oQeg7lcwDQYJKoZIhvcNAQEL\n+                        BQAwHjEcMBoGA1UEAwwTbW1vYXl5ZWQudW5pY29uLm5ldDAeFw0xOTExMDExNDQ3\n+                        NDhaFw0zOTExMDExNDQ3NDhaMB4xHDAaBgNVBAMME21tb2F5eWVkLnVuaWNvbi5u\n+                        ZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDLXKHf93KZztJfCpNg\n+                        R/ip6EdOp3Z52HmwT32QlOzeby+2prqbOanQcs5oEeXoz6cdzjwOO6isnqZ3ES7p\n+                        BuVyuUoYVZyuXY6dsk6ANxeOXBRzGBS3ZemzYRQVmvQudNHUqdXpJelkFZvz3Au2\n+                        I594V2PZjywtuGIUb+T7j+8hh6Srf8c/W/KmC3KLFfU2yDQrcjuhGv+0Py5ZUpXs\n+                        EANs/d/AYV+LbMp3UtvWSOy8xGb+xxjS2KhTd53Oc6xsCgTPgTM5Y3DVA0ERNH+n\n+                        ppngRi/t3NggIN0EKYAS6ZqJi1GBEVHFOoacebLSy/UQA8tYI170/gf03/OYwO2S\n+                        9GATAgMBAAGjYzBhMB0GA1UdDgQWBBQxJh8NNf+qGJNZPlOItCWFQFY/wDBABgNV\n+                        HREEOTA3ghNtbW9heXllZC51bmljb24ubmV0hiBtbW9heXllZC51bmljb24ubmV0\n+                        L2lkcC9tZXRhZGF0YTANBgkqhkiG9w0BAQsFAAOCAQEAMMOb+f4Log69KUeAEvgh\n+                        sWTjiZujvl44nY4roXofAoXYc3vos/p5JVwEtrxgTLdyTsz65kZtaRISRrUJ3k0n\n+                        K22L2eXGa85qPhdKivRyNip5AMVi0zSXC6uhG50571Gy5UK/Rh3gvg7VM8GUFDHL\n+                        +Zay9ffV9lf0UVmFObA+PAe+HNY/dYRLIP9/pFW0+c1MmFtwCTrO4xbecfzA+Yde\n+                        9dbaBjS4veOSvFKiaCOvsiIVEUt1J7NrqM5sgYvOR5Q5zv0G72pmzS8cuGe2UP7e\n+                        i24oGm471cMDTLyFLYMCL8veHydcgfIV9z5g0PksV0kQL91r4XVkIp3iFZJ+TUBF\n+                        zg==</ds:X509Certificate>\n+                </ds:X509Data>\n+            </ds:KeyInfo>\n+        </KeyDescriptor>\n+        <KeyDescriptor use=\"encryption\">\n+            <ds:KeyInfo>\n+                <ds:X509Data>\n+                    <ds:X509Certificate>MIIDLTCCAhWgAwIBAgIUKymtgciRE6pWwDfrsI58qL9pQMgwDQYJKoZIhvcNAQEL\n+                        BQAwHjEcMBoGA1UEAwwTbW1vYXl5ZWQudW5pY29uLm5ldDAeFw0xOTExMDExNDQ3\n+                        NDhaFw0zOTExMDExNDQ3NDhaMB4xHDAaBgNVBAMME21tb2F5eWVkLnVuaWNvbi5u\n+                        ZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCKrT805sny3vlaYjTn\n+                        +m6m3VbUoStvnacgwHH+orNFhHoV1HP2ndoH5BsEDB9tQYuyRbGUm/nYVOSHayzB\n+                        G3bzMGdU7woO6rsCqpHuxUyEvojd/y/N/r9jMzeBOCu0KDBTrn3BJhnGSwSTfhOS\n+                        3r20JFmDuTkHmabRs7ro0BvDaQ29jh38ro1iwB4E/4mqb1zYP13NI3ooErN/o6pl\n+                        XKpnFY37bDDOyOuocjN9tfPNIANNFKah0HjWOP0Nso0D1g6jHOSzmOw/Yxg61vBk\n+                        qOD4aKhLYPAxsXRl80nDrwTnm3/9xLQj9D3uLAtDLnn9pSqn3jCLxsxsHfKL/zkB\n+                        IKEBAgMBAAGjYzBhMB0GA1UdDgQWBBSrPjAgCJIHYmsofDcDIPzEhnYxmTBABgNV\n+                        HREEOTA3ghNtbW9heXllZC51bmljb24ubmV0hiBtbW9heXllZC51bmljb24ubmV0\n+                        L2lkcC9tZXRhZGF0YTANBgkqhkiG9w0BAQsFAAOCAQEAI8MlofbE0tbq8ez2d0Lq\n+                        Syhp4Q/shMEwjqcDarOwR+ACB9McOannUpAG7TCDp8Ch5E/V1B0Uo/5DF2tAzB1y\n+                        7sgAmy2mY9/mFhMYpOqTCagufwewaMkn9n7ETzC/6vQEjYrjiNyNR0F3UQQz2bhe\n+                        ROM3YuKctuOnMthc+ZE7vn+AXCGumRHBhyCaYdzfeUh7id+yrd9B51+o3iF4eu6w\n+                        zJi5z7FMCS6I4PSc/uWYDw1ahzoPONjazWSEWGUibZaJYM3pJHkuwqyWKOFGVknH\n+                        J1Qv4WCfSPb6eva94TZX0lkLM01C7NZObnfxY3fvJGcyFl8wlRTUYvuqM8md5CEp\n+                        LA==</ds:X509Certificate>\n+                </ds:X509Data>\n+            </ds:KeyInfo>\n+        </KeyDescriptor>\n+\n+        <!--\n+        <ArtifactResolutionService Binding=\"urn:oasis:names:tc:SAML:1.0:bindings:SOAP-binding\"\n+                                   Location=\"https://syncope.apache.org/cas/idp/profile/SAML1/SOAP/ArtifactResolution\" index=\"1\"/>\n+        -->\n+\n+        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/POST/SLO\"/>\n+        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/Redirect/SLO\" />\n+\n+        <NameIDFormat>urn:mace:shibboleth:1.0:nameIdentifier</NameIDFormat>\n+        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</NameIDFormat>\n+\n+        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/POST/SSO\"/>\n+        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/POST-SimpleSign/SSO\"/>\n+        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/Redirect/SSO\"/>\n+        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/SOAP/ECP\"/>\n+    </IDPSSODescriptor>\n+\n+    <!--\n+    <AttributeAuthorityDescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:1.1:protocol urn:oasis:names:tc:SAML:2.0:protocol\">\n+        <Extensions>\n+            <shibmd:Scope regexp=\"false\">example.net</shibmd:Scope>\n+        </Extensions>\n+        <KeyDescriptor use=\"signing\">\n+            <ds:KeyInfo>\n+                <ds:X509Data>\n+                    <ds:X509Certificate>MIIDLTCCAhWgAwIBAgIUVqwgQMQunB5UtoiiOqP1oQeg7lcwDQYJKoZIhvcNAQEL\n+BQAwHjEcMBoGA1UEAwwTbW1vYXl5ZWQudW5pY29uLm5ldDAeFw0xOTExMDExNDQ3\n+NDhaFw0zOTExMDExNDQ3NDhaMB4xHDAaBgNVBAMME21tb2F5eWVkLnVuaWNvbi5u\n+ZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDLXKHf93KZztJfCpNg\n+R/ip6EdOp3Z52HmwT32QlOzeby+2prqbOanQcs5oEeXoz6cdzjwOO6isnqZ3ES7p\n+BuVyuUoYVZyuXY6dsk6ANxeOXBRzGBS3ZemzYRQVmvQudNHUqdXpJelkFZvz3Au2\n+I594V2PZjywtuGIUb+T7j+8hh6Srf8c/W/KmC3KLFfU2yDQrcjuhGv+0Py5ZUpXs\n+EANs/d/AYV+LbMp3UtvWSOy8xGb+xxjS2KhTd53Oc6xsCgTPgTM5Y3DVA0ERNH+n\n+ppngRi/t3NggIN0EKYAS6ZqJi1GBEVHFOoacebLSy/UQA8tYI170/gf03/OYwO2S\n+9GATAgMBAAGjYzBhMB0GA1UdDgQWBBQxJh8NNf+qGJNZPlOItCWFQFY/wDBABgNV\n+HREEOTA3ghNtbW9heXllZC51bmljb24ubmV0hiBtbW9heXllZC51bmljb24ubmV0\n+L2lkcC9tZXRhZGF0YTANBgkqhkiG9w0BAQsFAAOCAQEAMMOb+f4Log69KUeAEvgh\n+sWTjiZujvl44nY4roXofAoXYc3vos/p5JVwEtrxgTLdyTsz65kZtaRISRrUJ3k0n\n+K22L2eXGa85qPhdKivRyNip5AMVi0zSXC6uhG50571Gy5UK/Rh3gvg7VM8GUFDHL\n++Zay9ffV9lf0UVmFObA+PAe+HNY/dYRLIP9/pFW0+c1MmFtwCTrO4xbecfzA+Yde\n+9dbaBjS4veOSvFKiaCOvsiIVEUt1J7NrqM5sgYvOR5Q5zv0G72pmzS8cuGe2UP7e\n+i24oGm471cMDTLyFLYMCL8veHydcgfIV9z5g0PksV0kQL91r4XVkIp3iFZJ+TUBF\n+zg==</ds:X509Certificate>\n+                </ds:X509Data>\n+            </ds:KeyInfo>\n+        </KeyDescriptor>\n+        <AttributeService Binding=\"urn:oasis:names:tc:SAML:1.0:bindings:SOAP-binding\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML1/SOAP/AttributeQuery\"/>\n+        <AttributeService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/SOAP/AttributeQuery\"/>\n+    </AttributeAuthorityDescriptor>\n+    -->\n+\n+    <!--\n+    <Organization>\n+        <OrganizationName xml:lang=\"en\">Institution Name</OrganizationName>\n+        <OrganizationDisplayName xml:lang=\"en\">Institution DisplayName</OrganizationDisplayName>\n+        <OrganizationURL xml:lang=\"en\">URL</OrganizationURL>\n+    </Organization>\n+    <ContactPerson contactType=\"administrative\">\n+        <GivenName>John Smith</GivenName>\n+        <EmailAddress>jsmith@example.org</EmailAddress>\n+    </ContactPerson>\n+    <ContactPerson contactType=\"technical\">\n+        <GivenName>John Smith</GivenName>\n+        <EmailAddress>jsmith@example.org</EmailAddress>\n+    </ContactPerson>\n+    <ContactPerson contactType=\"support\">\n+        <GivenName>IT Services Support</GivenName>\n+        <EmailAddress>support@example.org</EmailAddress>\n+    </ContactPerson>\n+    -->\n+</EntityDescriptor>"},{"sha":"f1d594196072bac01920331cc6e4e733d088ce6f","filename":"pom.xml","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -405,6 +405,7 @@ under the License.\n     <connid.servicenow.version>1.0.0</connid.servicenow.version>\n \n     <cxf.version>3.3.6</cxf.version>\n+    <bouncycastle.version>1.65</bouncycastle.version>\n \n     <jackson.version>2.11.0</jackson.version>\n \n@@ -1623,6 +1624,11 @@ under the License.\n         <artifactId>cas-server-support-pac4j-webflow</artifactId>\n         <version>${cas.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-support-pac4j-core-clients</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.apereo.cas</groupId>\n         <artifactId>cas-server-support-consent-webflow</artifactId>\n@@ -1984,7 +1990,12 @@ under the License.\n       <dependency>\n         <groupId>org.bouncycastle</groupId>\n         <artifactId>bcpkix-jdk15on</artifactId>\n-        <version>1.65</version>\n+        <version>${bouncycastle.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.bouncycastle</groupId>\n+        <artifactId>bcprov-jdk15on</artifactId>\n+        <version>${bouncycastle.version}</version>\n       </dependency>\n \n       <!-- TEST -->"},{"sha":"a93aa9d814580497558d859302b37fa57144d120","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWAPropertySourceLocator.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -80,6 +80,7 @@ private static void mapSyncopeAuthModuleConf(\n         syncopeProps.setUrl(conf.getUrl());\n \n         casProperties.getAuthn().setSyncope(syncopeProps);\n+        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n     }\n \n     private static void mapStaticAuthModuleConf(\n@@ -96,6 +97,7 @@ private static void mapStaticAuthModuleConf(\n         staticProps.setUsers(users);\n \n         casProperties.getAuthn().setAccept(staticProps);\n+        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n     }\n \n     private static void mapLdapAuthModuleConf(\n@@ -115,6 +117,7 @@ private static void mapLdapAuthModuleConf(\n         ldapProps.setPrincipalAttributeList(conf.getPrincipalAttributeList());\n \n         casProperties.getAuthn().getLdap().add(ldapProps);\n+        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n     }\n \n     private static void mapGoogleMfaAuthModuleConf(\n@@ -132,6 +135,7 @@ private static void mapGoogleMfaAuthModuleConf(\n         props.setWindowSize(conf.getWindowSize());\n \n         casProperties.getAuthn().getMfa().setGauth(props);\n+        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n     }\n \n     private static void mapU2fAuthModuleConf(\n@@ -148,6 +152,7 @@ private static void mapU2fAuthModuleConf(\n         props.setExpireRegistrationsTimeUnit(TimeUnit.valueOf(conf.getExpireRegistrationsTimeUnit()));\n \n         casProperties.getAuthn().getMfa().setU2f(props);\n+        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n     }\n \n     private static void mapJaasAuthModuleConf(\n@@ -165,6 +170,7 @@ private static void mapJaasAuthModuleConf(\n         props.setRealm(conf.getRealm());\n \n         casProperties.getAuthn().getJaas().add(props);\n+        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n     }\n \n     private static void mapJdbcAuthModuleConf(\n@@ -187,6 +193,7 @@ private static void mapJdbcAuthModuleConf(\n         props.setPrincipalAttributeList(conf.getPrincipalAttributeList());\n \n         casProperties.getAuthn().getJdbc().getQuery().add(props);\n+        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n     }\n \n     private static void mapOidcAuthModuleConf(\n@@ -211,6 +218,7 @@ private static void mapOidcAuthModuleConf(\n         client.setGeneric(props);\n \n         casProperties.getAuthn().getPac4j().getOidc().add(client);\n+        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n     }\n \n     private static void mapRadiusAuthModuleConf(\n@@ -239,6 +247,7 @@ private static void mapRadiusAuthModuleConf(\n         props.getServer().setRetries(conf.getRetries());\n \n         casProperties.getAuthn().setRadius(props);\n+        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n     }\n \n     private static void mapSaml2IdPAuthModuleConf(\n@@ -258,13 +267,11 @@ private static void mapSaml2IdPAuthModuleConf(\n         props.setIdentityProviderMetadataPath(conf.getIdentityProviderMetadataPath());\n         props.setKeystoreAlias(conf.getKeystoreAlias());\n         props.setKeystorePassword(conf.getKeystorePassword());\n-        props.setKeystorePath(conf.getKeystorePath());\n         props.setMaximumAuthenticationLifetime(conf.getMaximumAuthenticationLifetime());\n         props.setNameIdPolicyFormat(conf.getNameIdPolicyFormat());\n         props.setPrivateKeyPassword(conf.getPrivateKeyPassword());\n         props.setProviderName(conf.getProviderName());\n         props.setServiceProviderEntityId(conf.getServiceProviderEntityId());\n-        props.setServiceProviderMetadataPath(conf.getServiceProviderMetadataPath());\n         props.setSignatureAlgorithms(conf.getSignatureAlgorithms());\n         props.setSignatureCanonicalizationAlgorithm(conf.getSignatureCanonicalizationAlgorithm());\n         props.setSignatureReferenceDigestMethods(conf.getSignatureReferenceDigestMethods());\n@@ -274,6 +281,7 @@ private static void mapSaml2IdPAuthModuleConf(\n                 : TriStateBoolean.valueOf(conf.getNameIdPolicyAllowCreate().toUpperCase()));\n \n         casProperties.getAuthn().getPac4j().getSaml().add(props);\n+        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n     }\n \n     @Override"},{"sha":"18d92b4e619e98a4e1d009804cc930130a2979d7","filename":"wa/starter/pom.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fpom.xml?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -190,6 +190,10 @@ under the License.\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-support-pac4j-webflow</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-support-pac4j-core-clients</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-support-consent-webflow</artifactId>\n@@ -238,6 +242,10 @@ under the License.\n       <artifactId>spring-boot-starter-security</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcprov-jdk15on</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.bouncycastle</groupId>\n       <artifactId>bcpkix-jdk15on</artifactId>"},{"sha":"e82294c085fdc464cbbfcdeb00e2ddfdc32e6989","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAApplication.java","status":"modified","additions":4,"deletions":16,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -18,11 +18,9 @@\n  */\n package org.apache.syncope.wa.starter;\n \n-import org.apache.commons.lang.StringUtils;\n import org.apereo.cas.configuration.CasConfigurationProperties;\n import org.apereo.cas.configuration.CasConfigurationPropertiesValidator;\n-import org.apereo.cas.util.AsciiArtUtils;\n-import org.apereo.cas.util.DateTimeUtils;\n+\n import org.quartz.JobBuilder;\n import org.quartz.JobDetail;\n import org.quartz.JobKey;\n@@ -57,6 +55,7 @@\n import org.springframework.scheduling.annotation.EnableScheduling;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.transaction.annotation.EnableTransactionManagement;\n+\n import java.time.LocalDateTime;\n import java.time.ZoneId;\n import java.util.Date;\n@@ -96,17 +95,8 @@ public static void main(final String[] args) {\n         new SpringApplicationBuilder(SyncopeWAApplication.class).run(args);\n     }\n \n-    private static void advertiseReady(final ApplicationReadyEvent event) {\n-        AsciiArtUtils.printAsciiArtReady(LOG, StringUtils.EMPTY);\n-        LOG.info(\"Ready to process requests @ [{}]\", DateTimeUtils.zonedDateTimeOf(event.getTimestamp()));\n-    }\n-\n     private static void validateConfiguration(final ApplicationReadyEvent event) {\n-        if (!Boolean.getBoolean(\"SKIP_CONFIG_VALIDATION\")) {\n-            CasConfigurationPropertiesValidator validator =\n-                    new CasConfigurationPropertiesValidator(event.getApplicationContext());\n-            validator.validate();\n-        }\n+        new CasConfigurationPropertiesValidator(event.getApplicationContext()).validate();\n     }\n \n     /**\n@@ -118,7 +108,6 @@ private static void validateConfiguration(final ApplicationReadyEvent event) {\n     public void handleApplicationReadyEvent(final ApplicationReadyEvent event) {\n         validateConfiguration(event);\n         scheduleJobToRefreshContext();\n-        advertiseReady(event);\n     }\n \n     private void scheduleJobToRefreshContext() {\n@@ -131,9 +120,8 @@ private void scheduleJobToRefreshContext() {\n             JobDetail job = JobBuilder.newJob(SyncopeWARefreshContextJob.class).\n                     withIdentity(jobKey).\n                     build();\n-\n+            LOG.info(\"Scheduled job to refresh application context @ [{}]\", date);\n             scheduler.getScheduler().scheduleJob(job, trigger);\n-\n         } catch (final SchedulerException e) {\n             throw new RuntimeException(\"Could not schedule refresh job\", e);\n         }"},{"sha":"2a85826434d9eb74283f3d2a910f171716c135dc","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAConfiguration.java","status":"modified","additions":36,"deletions":25,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -18,9 +18,17 @@\n  */\n package org.apache.syncope.wa.starter;\n \n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.Map;\n+import org.apereo.cas.audit.AuditTrailExecutionPlanConfigurer;\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.services.ServiceRegistryExecutionPlanConfigurer;\n+import org.apereo.cas.services.ServiceRegistryListener;\n+import org.apereo.cas.support.pac4j.authentication.DelegatedClientFactoryCustomizer;\n+import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGenerator;\n+import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGeneratorConfigurationContext;\n+import org.apereo.cas.support.saml.idp.metadata.locator.SamlIdPMetadataLocator;\n+import org.apereo.cas.support.saml.idp.metadata.writer.SamlIdPCertificateAndKeyWriter;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStart;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n@@ -34,17 +42,10 @@\n import org.apache.syncope.wa.starter.mapping.ClientAppMapFor;\n import org.apache.syncope.wa.starter.mapping.ClientAppMapper;\n import org.apache.syncope.wa.starter.mapping.RegisteredServiceMapper;\n+import org.apache.syncope.wa.starter.pac4j.saml.SyncopeWASAML2ClientCustomizer;\n import org.apache.syncope.wa.starter.saml.idp.metadata.RestfulSamlIdPMetadataGenerator;\n import org.apache.syncope.wa.starter.saml.idp.metadata.RestfulSamlIdPMetadataLocator;\n-import org.apereo.cas.audit.AuditTrailExecutionPlanConfigurer;\n-import org.apereo.cas.configuration.CasConfigurationProperties;\n-import org.apereo.cas.services.ServiceRegistryExecutionPlanConfigurer;\n-import org.apereo.cas.services.ServiceRegistryListener;\n-import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGenerator;\n-import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGeneratorConfigurationContext;\n-import org.apereo.cas.support.saml.idp.metadata.locator.SamlIdPMetadataLocator;\n-import org.apereo.cas.support.saml.idp.metadata.writer.SamlIdPCertificateAndKeyWriter;\n-import org.apereo.cas.util.crypto.CipherExecutor;\n+import org.pac4j.core.client.Client;\n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n@@ -55,6 +56,10 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.io.ResourceLoader;\n \n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n @Configuration\n public class SyncopeWAConfiguration {\n \n@@ -114,33 +119,33 @@ public RegisteredServiceMapper registeredServiceMapper() {\n         });\n \n         return new RegisteredServiceMapper(\n-                authPolicyConfMappers,\n-                accessPolicyConfMappers,\n-                attrReleasePolicyConfMappers,\n-                clientAppTOMappers);\n+            authPolicyConfMappers,\n+            accessPolicyConfMappers,\n+            attrReleasePolicyConfMappers,\n+            clientAppTOMappers);\n     }\n \n     @Autowired\n     @Bean\n     public ServiceRegistryExecutionPlanConfigurer syncopeServiceRegistryConfigurer(\n-            final WARestClient restClient, final RegisteredServiceMapper registeredServiceMapper) {\n+        final WARestClient restClient, final RegisteredServiceMapper registeredServiceMapper) {\n \n         SyncopeServiceRegistry registry = new SyncopeServiceRegistry(\n-                restClient, registeredServiceMapper, applicationContext, serviceRegistryListeners);\n+            restClient, registeredServiceMapper, applicationContext, serviceRegistryListeners);\n         return plan -> plan.registerServiceRegistry(registry);\n     }\n \n     @Autowired\n     @Bean\n     public SamlIdPMetadataGenerator samlIdPMetadataGenerator(final WARestClient restClient) {\n         SamlIdPMetadataGeneratorConfigurationContext context =\n-                SamlIdPMetadataGeneratorConfigurationContext.builder().\n-                        samlIdPMetadataLocator(samlIdPMetadataLocator(restClient)).\n-                        samlIdPCertificateAndKeyWriter(samlSelfSignedCertificateWriter.getObject()).\n-                        resourceLoader(resourceLoader).\n-                        casProperties(casProperties).\n-                        metadataCipherExecutor(CipherExecutor.noOpOfStringToString()).\n-                        build();\n+            SamlIdPMetadataGeneratorConfigurationContext.builder().\n+                samlIdPMetadataLocator(samlIdPMetadataLocator(restClient)).\n+                samlIdPCertificateAndKeyWriter(samlSelfSignedCertificateWriter.getObject()).\n+                resourceLoader(resourceLoader).\n+                casProperties(casProperties).\n+                metadataCipherExecutor(CipherExecutor.noOpOfStringToString()).\n+                build();\n         return new RestfulSamlIdPMetadataGenerator(context, restClient);\n     }\n \n@@ -156,6 +161,12 @@ public AuditTrailExecutionPlanConfigurer auditConfigurer(final WARestClient rest\n         return plan -> plan.registerAuditTrailManager(new SyncopeWAAuditTrailManager(restClient));\n     }\n \n+    @Autowired\n+    @Bean\n+    public DelegatedClientFactoryCustomizer<Client> delegatedClientCustomizer(final WARestClient restClient) {\n+        return new SyncopeWASAML2ClientCustomizer(restClient);\n+    }\n+\n     @Bean\n     public KeymasterStart keymasterStart() {\n         return new KeymasterStart(NetworkService.Type.WA);"},{"sha":"8f4edf76a5c40cc89b1d24c2b29a9a258bb1b20b","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWARefreshContextJob.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWARefreshContextJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWARefreshContextJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWARefreshContextJob.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -19,8 +19,11 @@\n package org.apache.syncope.wa.starter;\n \n import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.apache.commons.lang.StringUtils;\n import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGenerator;\n import org.apereo.cas.support.saml.services.idp.metadata.SamlIdPMetadataDocument;\n+import org.apereo.cas.util.AsciiArtUtils;\n+\n import org.quartz.Job;\n import org.quartz.JobExecutionContext;\n import org.slf4j.Logger;\n@@ -46,19 +49,27 @@ public SyncopeWARefreshContextJob() {\n     @Override\n     public void execute(final JobExecutionContext jobExecutionContext) throws JobExecutionException {\n         try {\n-            LOG.debug(\"Refreshing WA application context\");\n+            LOG.debug(\"Attempting to refresh WA application context\");\n             if (!WARestClient.isReady()) {\n                 LOG.debug(\"Syncope client is not yet ready\");\n                 throw new RuntimeException(\"Syncope core is not yet ready to access requests\");\n             }\n             contextRefresher.refresh();\n+            LOG.info(\"Refreshed application context to bootstrap property sources, etc...\");\n \n             LOG.info(\"Generating SAML2 IdP metadata metadata\");\n             SamlIdPMetadataDocument document = metadataGenerator.generate(Optional.empty());\n             LOG.info(\"Generated SAML2 IdP metadata for {}\", document.getAppliesTo());\n \n+            advertiseReady();\n+\n         } catch (RuntimeException e) {\n             throw new JobExecutionException(\"While generating SAML2 IdP metadata\", e);\n         }\n     }\n+\n+    private static void advertiseReady() {\n+        AsciiArtUtils.printAsciiArtReady(LOG, StringUtils.EMPTY);\n+        LOG.info(\"Ready to process requests\");\n+    }\n }"},{"sha":"0dfc40391877846c232f4f4ef9b44d710bee13cb","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientCustomizer.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizer.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.wa.starter.pac4j.saml;\n+\n+import org.apereo.cas.support.pac4j.authentication.DelegatedClientFactoryCustomizer;\n+\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.pac4j.core.client.Client;\n+import org.pac4j.saml.client.SAML2Client;\n+import org.pac4j.saml.config.SAML2Configuration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SyncopeWASAML2ClientCustomizer implements DelegatedClientFactoryCustomizer<Client> {\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWASAML2ClientCustomizer.class);\n+\n+    private final WARestClient restClient;\n+\n+    public SyncopeWASAML2ClientCustomizer(final WARestClient restClient) {\n+        this.restClient = restClient;\n+    }\n+\n+    @Override\n+    public void customize(final Client client) {\n+        if (client instanceof SAML2Client) {\n+            LOG.debug(\"Customizing SAML2 client {}\", client.getName());\n+            final SAML2Client saml2Client = (SAML2Client) client;\n+            SAML2Configuration configuration = saml2Client.getConfiguration();\n+            configuration.setKeystoreGenerator(new SyncopeWASAML2ClientKeystoreGenerator(restClient, saml2Client));\n+            configuration.setMetadataGenerator(new SyncopeWASAML2ClientMetadataGenerator(restClient, saml2Client));\n+        }\n+    }\n+}"},{"sha":"77f84f6541fa5a85d905077c4b7425b1890613ae","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientKeystoreGenerator.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGenerator.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.wa.starter.pac4j.saml;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.service.wa.SAML2SPKeystoreService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.pac4j.saml.client.SAML2Client;\n+import org.pac4j.saml.metadata.keystore.BaseSAML2KeystoreGenerator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.Base64;\n+\n+public class SyncopeWASAML2ClientKeystoreGenerator extends BaseSAML2KeystoreGenerator {\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWASAML2ClientKeystoreGenerator.class);\n+\n+    private final WARestClient restClient;\n+\n+    private final SAML2Client saml2Client;\n+\n+    SyncopeWASAML2ClientKeystoreGenerator(final WARestClient restClient, final SAML2Client saml2Client) {\n+        super(saml2Client.getConfiguration());\n+        this.restClient = restClient;\n+        this.saml2Client = saml2Client;\n+    }\n+\n+    @Override\n+    public boolean shouldGenerate() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected void store(final KeyStore ks, final X509Certificate certificate,\n+                         final PrivateKey privateKey) throws Exception {\n+        try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n+            char[] password = saml2Configuration.getKeystorePassword().toCharArray();\n+            ks.store(out, password);\n+            out.flush();\n+            String encodedKeystore = Base64.getEncoder().encodeToString(out.toByteArray());\n+            LOG.debug(\"Encoded keystore {}\", encodedKeystore);\n+\n+            SAML2SPKeystoreService keystoreService = restClient.getSyncopeClient().\n+                getService(SAML2SPKeystoreService.class);\n+\n+            SAML2SPKeystoreTO keystoreTO = new SAML2SPKeystoreTO.Builder().\n+                keystore(encodedKeystore).\n+                owner(saml2Client.getName()).\n+                build();\n+\n+            LOG.debug(\"Storing keystore {}\", keystoreTO);\n+            Response response = keystoreService.set(keystoreTO);\n+            if (response.getStatus() == Response.Status.CREATED.getStatusCode()) {\n+                LOG.info(\"Stored keystore for SAML2 SP {}\", saml2Client.getName());\n+            } else if (response.getStatus() == Response.Status.CONFLICT.getStatusCode()) {\n+                LOG.info(\"Stored keystore for SAML2 SP {} already exists\", saml2Client.getName());\n+            } else {\n+                LOG.error(\"Unexpected response when storing SAML2 SP keystore: {}\\n{}\",\n+                    response.getStatus(), response.getHeaders());\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+                sce.getElements().add(\"Unexpected response when storing SAML2 SP keystore\");\n+                throw sce;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public InputStream retrieve() throws Exception {\n+        try {\n+            SAML2SPKeystoreService keystoreService = restClient.getSyncopeClient().\n+                getService(SAML2SPKeystoreService.class);\n+            SAML2SPKeystoreTO keystoreTO = keystoreService.getByOwner(saml2Client.getName());\n+            LOG.debug(\"Retrieved keystore {}\", keystoreTO);\n+            byte[] decode = Base64.getDecoder().decode(keystoreTO.getKeystore());\n+            return new ByteArrayInputStream(decode);\n+        } catch (final Exception e) {\n+            final String message = \"Unable to fetch SAML2 SP keystore for \" + saml2Client.getName();\n+            LOG.error(message, e);\n+            throw new Exception(message);\n+        }\n+    }\n+}"},{"sha":"9ba283ccaa7a4c3fdf777ca3a6ba65b5080de96d","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientMetadataGenerator.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGenerator.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.wa.starter.pac4j.saml;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.service.wa.SAML2SPMetadataService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.opensaml.saml.metadata.resolver.impl.AbstractBatchMetadataResolver;\n+import org.pac4j.saml.client.SAML2Client;\n+import org.pac4j.saml.metadata.BaseSAML2MetadataGenerator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.core.io.Resource;\n+\n+import javax.ws.rs.core.Response;\n+\n+public class SyncopeWASAML2ClientMetadataGenerator extends BaseSAML2MetadataGenerator {\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWASAML2ClientMetadataGenerator.class);\n+\n+    private final WARestClient restClient;\n+\n+    private final SAML2Client saml2Client;\n+\n+    SyncopeWASAML2ClientMetadataGenerator(final WARestClient restClient, final SAML2Client saml2Client) {\n+        this.restClient = restClient;\n+        this.saml2Client = saml2Client;\n+    }\n+\n+    @Override\n+    protected AbstractBatchMetadataResolver createMetadataResolver(final Resource metadataResource) {\n+        return new SyncopeWASAML2MetadataResolver(restClient, saml2Client);\n+    }\n+\n+    @Override\n+    public boolean storeMetadata(final String metadata, final Resource resource, final boolean force) throws Exception {\n+        SAML2SPMetadataService metadataService = restClient.getSyncopeClient().\n+            getService(SAML2SPMetadataService.class);\n+        SAML2SPMetadataTO metadataTO = new SAML2SPMetadataTO.Builder().\n+            metadata(metadata).\n+            owner(saml2Client.getName()).\n+            build();\n+        LOG.debug(\"Storing metadata {}\", metadataTO);\n+        Response response = metadataService.set(metadataTO);\n+        if (response.getStatus() == Response.Status.CREATED.getStatusCode()) {\n+            LOG.info(\"Stored metadata for SAML2 SP {}\", saml2Client.getName());\n+            return true;\n+        }\n+        if (response.getStatus() == Response.Status.CONFLICT.getStatusCode()) {\n+            LOG.info(\"Stored metadata for SAML2 SP {} already exists\", saml2Client.getName());\n+            return true;\n+        }\n+        LOG.error(\"Unexpected response when storing SAML2 SP metadata: {}\\n{}\",\n+            response.getStatus(), response.getHeaders());\n+        SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+        sce.getElements().add(\"Unexpected response when storing SAML2 SP metadata\");\n+        throw sce;\n+    }\n+}"},{"sha":"da71d2a5ca8b16ec3e2205eea1e89bbf2f2220eb","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2MetadataResolver.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolver.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolver.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolver.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.wa.starter.pac4j.saml;\n+\n+import net.shibboleth.utilities.java.support.resolver.ResolverException;\n+import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.rest.api.service.wa.SAML2SPMetadataService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.opensaml.saml.metadata.resolver.impl.AbstractReloadingMetadataResolver;\n+import org.pac4j.saml.client.SAML2Client;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+public class SyncopeWASAML2MetadataResolver extends AbstractReloadingMetadataResolver {\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWASAML2MetadataResolver.class);\n+\n+    private final WARestClient restClient;\n+\n+    private final SAML2Client saml2Client;\n+\n+    SyncopeWASAML2MetadataResolver(final WARestClient restClient, final SAML2Client saml2Client) {\n+        this.restClient = restClient;\n+        this.saml2Client = saml2Client;\n+    }\n+\n+    @Override\n+    protected String getMetadataIdentifier() {\n+        return saml2Client.getName();\n+    }\n+\n+    @Override\n+    protected byte[] fetchMetadata() throws ResolverException {\n+        try {\n+            SAML2SPMetadataService metadataService = restClient.getSyncopeClient().\n+                getService(SAML2SPMetadataService.class);\n+            SAML2SPMetadataTO metadataTO = metadataService.getByOwner(saml2Client.getName());\n+            return metadataTO.getMetadata().getBytes(StandardCharsets.UTF_8);\n+        } catch (final Exception e) {\n+            final String message = \"Unable to fetch SP metadata for \" + saml2Client.getName();\n+            LOG.error(message, e);\n+            throw new ResolverException(message);\n+        }\n+    }\n+}"},{"sha":"dd33e68723e44da5f5d3bdf554d6d938628bc9fd","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/RestfulSamlIdPMetadataGenerator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -21,7 +21,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n-import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n+import org.apache.syncope.common.rest.api.service.wa.SAML2IdPMetadataService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.cas.support.saml.idp.metadata.generator.BaseSamlIdPMetadataGenerator;\n import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGeneratorConfigurationContext;"},{"sha":"eb2c2205ba35e38604b7d605e2c04d6f1977c015","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/RestfulSamlIdPMetadataLocator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -22,7 +22,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n+import org.apache.syncope.common.rest.api.service.wa.SAML2IdPMetadataService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.cas.support.saml.idp.metadata.locator.AbstractSamlIdPMetadataLocator;\n import org.apereo.cas.support.saml.services.SamlRegisteredService;\n@@ -59,7 +59,7 @@ public SamlIdPMetadataDocument fetchInternal(final Optional<SamlRegisteredServic\n         try {\n             LOG.info(\"Locating SAML2 IdP metadata document\");\n             SAML2IdPMetadataTO saml2IdPMetadataTO = getSyncopeClient().getService(SAML2IdPMetadataService.class).\n-                    get(getAppliesToFor(registeredService));\n+                getByOwner(getAppliesToFor(registeredService));\n \n             if (saml2IdPMetadataTO == null) {\n                 LOG.warn(\"No SAML2 IdP metadata document obtained from core\");"},{"sha":"8a344e6468fcd00ba7f86b5c8c5257f38b44d7db","filename":"wa/starter/src/main/resources/wa.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -21,7 +21,7 @@ useGZIPCompression=true\n \n # Conf directories\n conf.directory=${conf.directory}\n-cas.standalone.configurationDirectory=${conf.directory}\n+cas.standalone.configuration-directory=${conf.directory}\n cas.authn.oidc.jwks.jwksFile=file:${conf.directory}/oidc.keystore\n \n cas.server.name=http://localhost:8080"},{"sha":"253b6f8e13fe5ad66cb491cfa48263e1b3c0a75b","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/BaseSyncopeWASAML2ClientTest.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FBaseSyncopeWASAML2ClientTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FBaseSyncopeWASAML2ClientTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FBaseSyncopeWASAML2ClientTest.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.wa.starter.pac4j.saml;\n+\n+import org.bouncycastle.asn1.ASN1EncodableVector;\n+import org.bouncycastle.asn1.ASN1Encoding;\n+import org.bouncycastle.asn1.ASN1Integer;\n+import org.bouncycastle.asn1.DERBitString;\n+import org.bouncycastle.asn1.DERNull;\n+import org.bouncycastle.asn1.DERSequence;\n+import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.asn1.x509.AlgorithmIdentifier;\n+import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;\n+import org.bouncycastle.asn1.x509.TBSCertificate;\n+import org.bouncycastle.asn1.x509.Time;\n+import org.bouncycastle.asn1.x509.V3TBSCertificateGenerator;\n+import org.pac4j.saml.client.SAML2Client;\n+import org.pac4j.saml.config.SAML2Configuration;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.math.BigInteger;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.Signature;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.util.Base64;\n+import java.util.Date;\n+\n+public abstract class BaseSyncopeWASAML2ClientTest {\n+\n+    protected static Certificate createSelfSignedCert(final KeyPair keyPair) throws Exception {\n+        final X500Name dn = new X500Name(\"cn=Unknown\");\n+        final V3TBSCertificateGenerator certGen = new V3TBSCertificateGenerator();\n+\n+        certGen.setSerialNumber(new ASN1Integer(BigInteger.valueOf(1)));\n+        certGen.setIssuer(dn);\n+        certGen.setSubject(dn);\n+        certGen.setStartDate(new Time(new Date(System.currentTimeMillis() - 1000L)));\n+\n+        final Date expiration = new Date(System.currentTimeMillis() + 100000);\n+        certGen.setEndDate(new Time(expiration));\n+\n+        final AlgorithmIdentifier sigAlgID = new AlgorithmIdentifier(PKCSObjectIdentifiers.sha1WithRSAEncryption, DERNull.INSTANCE);\n+        certGen.setSignature(sigAlgID);\n+        certGen.setSubjectPublicKeyInfo(SubjectPublicKeyInfo.getInstance(keyPair.getPublic().getEncoded()));\n+\n+        final Signature sig = Signature.getInstance(\"SHA1WithRSA\");\n+        sig.initSign(keyPair.getPrivate());\n+        sig.update(certGen.generateTBSCertificate().getEncoded(ASN1Encoding.DER));\n+\n+        final TBSCertificate tbsCert = certGen.generateTBSCertificate();\n+        final ASN1EncodableVector v = new ASN1EncodableVector();\n+\n+        v.add(tbsCert);\n+        v.add(sigAlgID);\n+        v.add(new DERBitString(sig.sign()));\n+\n+        final Certificate cert = CertificateFactory.getInstance(\"X.509\")\n+            .generateCertificate(new ByteArrayInputStream(new DERSequence(v).getEncoded(ASN1Encoding.DER)));\n+        cert.verify(keyPair.getPublic());\n+        return cert;\n+    }\n+\n+    protected static SAML2Client getSAML2Client() {\n+        SAML2Configuration saml2Configuration = new SAML2Configuration();\n+        saml2Configuration.setKeystorePassword(\"password\");\n+        saml2Configuration.setPrivateKeyPassword(\"password\");\n+        saml2Configuration.setKeystoreAlias(\"Syncope\");\n+        saml2Configuration.setIdentityProviderMetadataResource(new ClassPathResource(\"idp-metadata.xml\"));\n+        SAML2Client client = new SAML2Client(saml2Configuration);\n+        client.setCallbackUrl(\"https://syncope.apache.org\");\n+        return client;\n+    }\n+\n+    protected static KeyStore getKeystore() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n+        char[] pwdArray = \"password\".toCharArray();\n+        ks.load(null, pwdArray);\n+        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n+        keyPairGenerator.initialize(4096);\n+        KeyPair keyPair = keyPairGenerator.generateKeyPair();\n+        Certificate certificate = createSelfSignedCert(keyPair);\n+        ks.setKeyEntry(\"Syncope\", keyPair.getPrivate(), \"password\".toCharArray(), new Certificate[]{certificate});\n+        return ks;\n+    }\n+\n+    protected static String getKeystoreAsString() throws Exception {\n+        char[] pwdArray = \"password\".toCharArray();\n+        try (ByteArrayOutputStream fos = new ByteArrayOutputStream()) {\n+            getKeystore().store(fos, pwdArray);\n+            fos.flush();\n+            return Base64.getEncoder().encodeToString(fos.toByteArray());\n+        }\n+    }\n+}"},{"sha":"f752fddf15a6de829f0703c6a8c8618eebdef7a2","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientCustomizerTest.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizerTest.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.wa.starter.pac4j.saml;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n+import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.rest.api.service.wa.SAML2SPKeystoreService;\n+import org.apache.syncope.common.rest.api.service.wa.SAML2SPMetadataService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.junit.jupiter.api.Test;\n+import org.pac4j.saml.client.SAML2Client;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class SyncopeWASAML2ClientCustomizerTest extends BaseSyncopeWASAML2ClientTest {\n+\n+    @Test\n+    public void customize() throws Exception {\n+\n+        SAML2SPKeystoreTO keystoreTO = new SAML2SPKeystoreTO.Builder()\n+            .keystore(getKeystoreAsString())\n+            .owner(\"CAS\")\n+            .build();\n+        SAML2SPKeystoreService saml2SPKeystoreService = mock(SAML2SPKeystoreService.class);\n+        when(saml2SPKeystoreService.getByOwner(anyString())).thenReturn(keystoreTO);\n+        when(saml2SPKeystoreService.set(any())).thenReturn(Response.created(new URI(\"http://localhost:9080/syncop-wa\")).build());\n+\n+        SAML2SPMetadataTO metadataTO = new SAML2SPMetadataTO.Builder()\n+            .owner(\"Syncope\")\n+            .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(), StandardCharsets.UTF_8))\n+            .build();\n+\n+        SAML2SPMetadataService saml2SPMetadataService = mock(SAML2SPMetadataService.class);\n+        when(saml2SPMetadataService.getByOwner(anyString())).thenReturn(metadataTO);\n+        when(saml2SPMetadataService.set(any())).thenReturn(Response.created(new URI(\"http://localhost:9080/syncop-wa\")).build());\n+\n+        WARestClient restClient = mock(WARestClient.class);\n+\n+        SyncopeClient syncopeClient = mock(SyncopeClient.class);\n+        when(syncopeClient.getService(SAML2SPKeystoreService.class)).thenReturn(saml2SPKeystoreService);\n+        when(syncopeClient.getService(SAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n+        when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n+\n+        SyncopeWASAML2ClientCustomizer customizer = new SyncopeWASAML2ClientCustomizer(restClient);\n+        SAML2Client client = getSAML2Client();\n+        customizer.customize(client);\n+        client.init();\n+        assertTrue(client.getConfiguration().getKeystoreGenerator() instanceof SyncopeWASAML2ClientKeystoreGenerator);\n+        assertTrue(client.getConfiguration().toMetadataGenerator() instanceof SyncopeWASAML2ClientMetadataGenerator);\n+    }\n+}"},{"sha":"8c50d2215495d465cf995e0c8d5a8fc1b7d997de","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientKeystoreGeneratorTest.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGeneratorTest.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.wa.starter.pac4j.saml;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+\n+import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n+import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.rest.api.service.wa.SAML2SPKeystoreService;\n+import org.apache.syncope.common.rest.api.service.wa.SAML2SPMetadataService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.function.Executable;\n+import org.pac4j.saml.exceptions.SAMLException;\n+import org.pac4j.saml.client.SAML2Client;\n+import org.pac4j.saml.metadata.keystore.SAML2KeystoreGenerator;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class SyncopeWASAML2ClientKeystoreGeneratorTest extends BaseSyncopeWASAML2ClientTest {\n+    private static WARestClient getWaRestClient(final Response response) throws Exception {\n+        WARestClient restClient = mock(WARestClient.class);\n+\n+        SAML2SPKeystoreTO keystoreTO = new SAML2SPKeystoreTO.Builder()\n+            .keystore(getKeystoreAsString())\n+            .owner(\"CAS\")\n+            .build();\n+        SAML2SPKeystoreService saml2SPKeystoreService = mock(SAML2SPKeystoreService.class);\n+        when(saml2SPKeystoreService.getByOwner(anyString())).thenReturn(keystoreTO);\n+        when(saml2SPKeystoreService.set(any())).thenReturn(response);\n+\n+        SAML2SPMetadataTO metadataTO = new SAML2SPMetadataTO.Builder()\n+            .owner(\"Syncope\")\n+            .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(), StandardCharsets.UTF_8))\n+            .build();\n+\n+        SAML2SPMetadataService saml2SPMetadataService = mock(SAML2SPMetadataService.class);\n+        when(saml2SPMetadataService.getByOwner(anyString())).thenReturn(metadataTO);\n+        when(saml2SPMetadataService.set(any())).thenReturn(response);\n+\n+        SyncopeClient syncopeClient = mock(SyncopeClient.class);\n+\n+        when(syncopeClient.getService(SAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n+        when(syncopeClient.getService(SAML2SPKeystoreService.class)).thenReturn(saml2SPKeystoreService);\n+\n+        when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n+        return restClient;\n+    }\n+\n+    @Test\n+    public void generate() throws Exception {\n+        SAML2Client client = getSAML2Client();\n+        SAML2KeystoreGenerator generator1 = new SyncopeWASAML2ClientKeystoreGenerator(\n+            getWaRestClient(Response.created(new URI(\"http://localhost:9080/syncop-wa\")).build()), client);\n+        assertDoesNotThrow(new Executable() {\n+            @Override\n+            public void execute() throws Throwable {\n+                generator1.generate();\n+            }\n+        });\n+        SAML2KeystoreGenerator generator2 = new SyncopeWASAML2ClientKeystoreGenerator(getWaRestClient(Response.serverError().build()), client);\n+        assertThrows(SAMLException.class, () -> generator2.generate());\n+    }\n+}"},{"sha":"11d01aed2fc29f1b5e6f6391bff52d8456346838","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientMetadataGeneratorTest.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGeneratorTest.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.wa.starter.pac4j.saml;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.rest.api.service.wa.SAML2SPMetadataService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.junit.jupiter.api.Test;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.pac4j.saml.client.SAML2Client;\n+import org.pac4j.saml.metadata.SAML2MetadataGenerator;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class SyncopeWASAML2ClientMetadataGeneratorTest extends BaseSyncopeWASAML2ClientTest {\n+    private static WARestClient getWaRestClient(final Response response) throws IOException {\n+        WARestClient restClient = mock(WARestClient.class);\n+        SAML2SPMetadataTO metadataTO = new SAML2SPMetadataTO.Builder()\n+            .owner(\"Syncope\")\n+            .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(), StandardCharsets.UTF_8))\n+            .build();\n+\n+        SAML2SPMetadataService saml2SPMetadataService = mock(SAML2SPMetadataService.class);\n+        when(saml2SPMetadataService.getByOwner(anyString())).thenReturn(metadataTO);\n+        when(saml2SPMetadataService.set(any())).thenReturn(response);\n+\n+        SyncopeClient syncopeClient = mock(SyncopeClient.class);\n+        when(syncopeClient.getService(SAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n+        when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n+        return restClient;\n+    }\n+\n+    @Test\n+    public void storeMetadata() throws Exception {\n+        SAML2Client client = getSAML2Client();\n+        String keystoreFile = File.createTempFile(\"keystore\", \"jks\").getCanonicalPath();\n+        client.getConfiguration().setKeystoreResourceFilepath(keystoreFile);\n+\n+        SAML2MetadataGenerator generator = new SyncopeWASAML2ClientMetadataGenerator(\n+            getWaRestClient(Response.created(new URI(\"http://localhost:9080/syncop-wa\")).build()), client);\n+        EntityDescriptor entityDescriptor = generator.buildEntityDescriptor();\n+        String metadata = generator.getMetadata(entityDescriptor);\n+        assertNotNull(generator.storeMetadata(metadata, null, false));\n+    }\n+\n+    @Test\n+    public void storeMetadataFails() throws Exception {\n+        SAML2Client client = getSAML2Client();\n+        String keystoreFile = File.createTempFile(\"keystore\", \"jks\").getCanonicalPath();\n+        client.getConfiguration().setKeystoreResourceFilepath(keystoreFile);\n+        WARestClient restClient = getWaRestClient(Response.serverError().build());\n+        SAML2MetadataGenerator generator = new SyncopeWASAML2ClientMetadataGenerator(restClient, client);\n+        EntityDescriptor entityDescriptor = generator.buildEntityDescriptor();\n+        String metadata = generator.getMetadata(entityDescriptor);\n+        assertThrows(SyncopeClientException.class, () -> generator.storeMetadata(metadata, null, false));\n+    }\n+}"},{"sha":"b7a630f06be5df5f9e5b2b0cbd6ad85c05ed750b","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2MetadataResolverTest.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolverTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolverTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolverTest.java?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.wa.starter.pac4j.saml;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.rest.api.service.wa.SAML2SPMetadataService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.junit.jupiter.api.Test;\n+import org.pac4j.saml.client.SAML2Client;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class SyncopeWASAML2MetadataResolverTest extends BaseSyncopeWASAML2ClientTest {\n+    @Test\n+    public void fetchMetadata() throws Exception {\n+        SAML2Client client = getSAML2Client();\n+        String keystoreFile = File.createTempFile(\"keystore\", \"jks\").getCanonicalPath();\n+        client.getConfiguration().setKeystoreResourceFilepath(keystoreFile);\n+        WARestClient restClient = mock(WARestClient.class);\n+\n+        SAML2SPMetadataTO metadataTO = new SAML2SPMetadataTO.Builder()\n+            .owner(\"Syncope\")\n+            .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(), StandardCharsets.UTF_8))\n+            .build();\n+\n+        SAML2SPMetadataService saml2SPMetadataService = mock(SAML2SPMetadataService.class);\n+        when(saml2SPMetadataService.getByOwner(anyString())).thenReturn(metadataTO);\n+        when(saml2SPMetadataService.set(any())).thenReturn(Response.created(new URI(\"http://localhost:9080/syncop-wa\")).build());\n+\n+        SyncopeClient syncopeClient = mock(SyncopeClient.class);\n+        when(syncopeClient.getService(SAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n+        when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n+\n+        SyncopeWASAML2MetadataResolver resolver = new SyncopeWASAML2MetadataResolver(restClient, client);\n+        assertNotNull(resolver.fetchMetadata());\n+    }\n+}"},{"sha":"6e8f2f94370d624cad69c39016781908be403384","filename":"wa/starter/src/test/resources/idp-metadata.xml","status":"added","additions":144,"deletions":0,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fidp-metadata.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fidp-metadata.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fidp-metadata.xml?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,144 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<EntityDescriptor xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" xmlns:shibmd=\"urn:mace:shibboleth:metadata:1.0\" xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xmlns:mdui=\"urn:oasis:names:tc:SAML:metadata:ui\" entityID=\"https://syncope.apache.org/idp\">\n+    <IDPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol urn:oasis:names:tc:SAML:1.1:protocol urn:mace:shibboleth:1.0\">\n+        <Extensions>\n+            <shibmd:Scope regexp=\"false\">example.net</shibmd:Scope>\n+        </Extensions>\n+        <KeyDescriptor use=\"signing\">\n+            <ds:KeyInfo>\n+                <ds:X509Data>\n+                    <ds:X509Certificate>MIIDLTCCAhWgAwIBAgIUVqwgQMQunB5UtoiiOqP1oQeg7lcwDQYJKoZIhvcNAQEL\n+BQAwHjEcMBoGA1UEAwwTbW1vYXl5ZWQudW5pY29uLm5ldDAeFw0xOTExMDExNDQ3\n+NDhaFw0zOTExMDExNDQ3NDhaMB4xHDAaBgNVBAMME21tb2F5eWVkLnVuaWNvbi5u\n+ZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDLXKHf93KZztJfCpNg\n+R/ip6EdOp3Z52HmwT32QlOzeby+2prqbOanQcs5oEeXoz6cdzjwOO6isnqZ3ES7p\n+BuVyuUoYVZyuXY6dsk6ANxeOXBRzGBS3ZemzYRQVmvQudNHUqdXpJelkFZvz3Au2\n+I594V2PZjywtuGIUb+T7j+8hh6Srf8c/W/KmC3KLFfU2yDQrcjuhGv+0Py5ZUpXs\n+EANs/d/AYV+LbMp3UtvWSOy8xGb+xxjS2KhTd53Oc6xsCgTPgTM5Y3DVA0ERNH+n\n+ppngRi/t3NggIN0EKYAS6ZqJi1GBEVHFOoacebLSy/UQA8tYI170/gf03/OYwO2S\n+9GATAgMBAAGjYzBhMB0GA1UdDgQWBBQxJh8NNf+qGJNZPlOItCWFQFY/wDBABgNV\n+HREEOTA3ghNtbW9heXllZC51bmljb24ubmV0hiBtbW9heXllZC51bmljb24ubmV0\n+L2lkcC9tZXRhZGF0YTANBgkqhkiG9w0BAQsFAAOCAQEAMMOb+f4Log69KUeAEvgh\n+sWTjiZujvl44nY4roXofAoXYc3vos/p5JVwEtrxgTLdyTsz65kZtaRISRrUJ3k0n\n+K22L2eXGa85qPhdKivRyNip5AMVi0zSXC6uhG50571Gy5UK/Rh3gvg7VM8GUFDHL\n++Zay9ffV9lf0UVmFObA+PAe+HNY/dYRLIP9/pFW0+c1MmFtwCTrO4xbecfzA+Yde\n+9dbaBjS4veOSvFKiaCOvsiIVEUt1J7NrqM5sgYvOR5Q5zv0G72pmzS8cuGe2UP7e\n+i24oGm471cMDTLyFLYMCL8veHydcgfIV9z5g0PksV0kQL91r4XVkIp3iFZJ+TUBF\n+zg==</ds:X509Certificate>\n+                </ds:X509Data>\n+            </ds:KeyInfo>\n+        </KeyDescriptor>\n+        <KeyDescriptor use=\"encryption\">\n+            <ds:KeyInfo>\n+                <ds:X509Data>\n+                    <ds:X509Certificate>MIIDLTCCAhWgAwIBAgIUKymtgciRE6pWwDfrsI58qL9pQMgwDQYJKoZIhvcNAQEL\n+BQAwHjEcMBoGA1UEAwwTbW1vYXl5ZWQudW5pY29uLm5ldDAeFw0xOTExMDExNDQ3\n+NDhaFw0zOTExMDExNDQ3NDhaMB4xHDAaBgNVBAMME21tb2F5eWVkLnVuaWNvbi5u\n+ZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCKrT805sny3vlaYjTn\n++m6m3VbUoStvnacgwHH+orNFhHoV1HP2ndoH5BsEDB9tQYuyRbGUm/nYVOSHayzB\n+G3bzMGdU7woO6rsCqpHuxUyEvojd/y/N/r9jMzeBOCu0KDBTrn3BJhnGSwSTfhOS\n+3r20JFmDuTkHmabRs7ro0BvDaQ29jh38ro1iwB4E/4mqb1zYP13NI3ooErN/o6pl\n+XKpnFY37bDDOyOuocjN9tfPNIANNFKah0HjWOP0Nso0D1g6jHOSzmOw/Yxg61vBk\n+qOD4aKhLYPAxsXRl80nDrwTnm3/9xLQj9D3uLAtDLnn9pSqn3jCLxsxsHfKL/zkB\n+IKEBAgMBAAGjYzBhMB0GA1UdDgQWBBSrPjAgCJIHYmsofDcDIPzEhnYxmTBABgNV\n+HREEOTA3ghNtbW9heXllZC51bmljb24ubmV0hiBtbW9heXllZC51bmljb24ubmV0\n+L2lkcC9tZXRhZGF0YTANBgkqhkiG9w0BAQsFAAOCAQEAI8MlofbE0tbq8ez2d0Lq\n+Syhp4Q/shMEwjqcDarOwR+ACB9McOannUpAG7TCDp8Ch5E/V1B0Uo/5DF2tAzB1y\n+7sgAmy2mY9/mFhMYpOqTCagufwewaMkn9n7ETzC/6vQEjYrjiNyNR0F3UQQz2bhe\n+ROM3YuKctuOnMthc+ZE7vn+AXCGumRHBhyCaYdzfeUh7id+yrd9B51+o3iF4eu6w\n+zJi5z7FMCS6I4PSc/uWYDw1ahzoPONjazWSEWGUibZaJYM3pJHkuwqyWKOFGVknH\n+J1Qv4WCfSPb6eva94TZX0lkLM01C7NZObnfxY3fvJGcyFl8wlRTUYvuqM8md5CEp\n+LA==</ds:X509Certificate>\n+                </ds:X509Data>\n+            </ds:KeyInfo>\n+        </KeyDescriptor>\n+\n+        <!--\n+        <ArtifactResolutionService Binding=\"urn:oasis:names:tc:SAML:1.0:bindings:SOAP-binding\" \n+                                   Location=\"https://syncope.apache.org/cas/idp/profile/SAML1/SOAP/ArtifactResolution\" index=\"1\"/>\n+        -->\n+        \n+        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/POST/SLO\"/>\n+        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/Redirect/SLO\" />\n+\n+        <NameIDFormat>urn:mace:shibboleth:1.0:nameIdentifier</NameIDFormat>\n+        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</NameIDFormat>\n+\n+        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/POST/SSO\"/>\n+        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/POST-SimpleSign/SSO\"/>\n+        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/Redirect/SSO\"/>\n+        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/SOAP/ECP\"/>\n+    </IDPSSODescriptor>\n+\n+    <!--\n+    <AttributeAuthorityDescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:1.1:protocol urn:oasis:names:tc:SAML:2.0:protocol\">\n+        <Extensions>\n+            <shibmd:Scope regexp=\"false\">example.net</shibmd:Scope>\n+        </Extensions>\n+        <KeyDescriptor use=\"signing\">\n+            <ds:KeyInfo>\n+                <ds:X509Data>\n+                    <ds:X509Certificate>MIIDLTCCAhWgAwIBAgIUVqwgQMQunB5UtoiiOqP1oQeg7lcwDQYJKoZIhvcNAQEL\n+BQAwHjEcMBoGA1UEAwwTbW1vYXl5ZWQudW5pY29uLm5ldDAeFw0xOTExMDExNDQ3\n+NDhaFw0zOTExMDExNDQ3NDhaMB4xHDAaBgNVBAMME21tb2F5eWVkLnVuaWNvbi5u\n+ZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDLXKHf93KZztJfCpNg\n+R/ip6EdOp3Z52HmwT32QlOzeby+2prqbOanQcs5oEeXoz6cdzjwOO6isnqZ3ES7p\n+BuVyuUoYVZyuXY6dsk6ANxeOXBRzGBS3ZemzYRQVmvQudNHUqdXpJelkFZvz3Au2\n+I594V2PZjywtuGIUb+T7j+8hh6Srf8c/W/KmC3KLFfU2yDQrcjuhGv+0Py5ZUpXs\n+EANs/d/AYV+LbMp3UtvWSOy8xGb+xxjS2KhTd53Oc6xsCgTPgTM5Y3DVA0ERNH+n\n+ppngRi/t3NggIN0EKYAS6ZqJi1GBEVHFOoacebLSy/UQA8tYI170/gf03/OYwO2S\n+9GATAgMBAAGjYzBhMB0GA1UdDgQWBBQxJh8NNf+qGJNZPlOItCWFQFY/wDBABgNV\n+HREEOTA3ghNtbW9heXllZC51bmljb24ubmV0hiBtbW9heXllZC51bmljb24ubmV0\n+L2lkcC9tZXRhZGF0YTANBgkqhkiG9w0BAQsFAAOCAQEAMMOb+f4Log69KUeAEvgh\n+sWTjiZujvl44nY4roXofAoXYc3vos/p5JVwEtrxgTLdyTsz65kZtaRISRrUJ3k0n\n+K22L2eXGa85qPhdKivRyNip5AMVi0zSXC6uhG50571Gy5UK/Rh3gvg7VM8GUFDHL\n++Zay9ffV9lf0UVmFObA+PAe+HNY/dYRLIP9/pFW0+c1MmFtwCTrO4xbecfzA+Yde\n+9dbaBjS4veOSvFKiaCOvsiIVEUt1J7NrqM5sgYvOR5Q5zv0G72pmzS8cuGe2UP7e\n+i24oGm471cMDTLyFLYMCL8veHydcgfIV9z5g0PksV0kQL91r4XVkIp3iFZJ+TUBF\n+zg==</ds:X509Certificate>\n+                </ds:X509Data>\n+            </ds:KeyInfo>\n+        </KeyDescriptor>\n+        <AttributeService Binding=\"urn:oasis:names:tc:SAML:1.0:bindings:SOAP-binding\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML1/SOAP/AttributeQuery\"/>\n+        <AttributeService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/SOAP/AttributeQuery\"/>\n+    </AttributeAuthorityDescriptor>\n+    -->\n+    \n+    <!--\n+    <Organization>\n+        <OrganizationName xml:lang=\"en\">Institution Name</OrganizationName>\n+        <OrganizationDisplayName xml:lang=\"en\">Institution DisplayName</OrganizationDisplayName>\n+        <OrganizationURL xml:lang=\"en\">URL</OrganizationURL>\n+    </Organization>\n+    <ContactPerson contactType=\"administrative\">\n+        <GivenName>John Smith</GivenName>\n+        <EmailAddress>jsmith@example.org</EmailAddress>\n+    </ContactPerson>\n+    <ContactPerson contactType=\"technical\">\n+        <GivenName>John Smith</GivenName>\n+        <EmailAddress>jsmith@example.org</EmailAddress>\n+    </ContactPerson>\n+    <ContactPerson contactType=\"support\">\n+        <GivenName>IT Services Support</GivenName>\n+        <EmailAddress>support@example.org</EmailAddress>\n+    </ContactPerson>\n+    -->\n+</EntityDescriptor>"},{"sha":"351d556af461d127ecaae96f99648a50296f6c2c","filename":"wa/starter/src/test/resources/sp-metadata.xml","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fsp-metadata.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/272fcb759421bec3ea467b9fad92ea9df69cbccc/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fsp-metadata.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fsp-metadata.xml?ref=272fcb759421bec3ea467b9fad92ea9df69cbccc","patch":"@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~    http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+<md:EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" ID=\"_lipmbmwyb3ujt0osvfect39lzglxnsdi7bxhvf5\" entityID=\"urn:mace:saml:pac4j.org\" validUntil=\"2038-08-10T19:43:10.846Z\">\n+    <md:Extensions xmlns:alg=\"urn:oasis:names:tc:SAML:metadata:algsupport\">\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha512\"/>\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#sha384\"/>\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/>\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#sha224\"/>\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/>\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha512\"/>\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha384\"/>\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"/>\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/>\n+        <alg:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#dsa-sha1\"/>\n+    </md:Extensions>\n+    <md:SPSSODescriptor AuthnRequestsSigned=\"false\" WantAssertionsSigned=\"false\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol urn:oasis:names:tc:SAML:1.0:protocol urn:oasis:names:tc:SAML:1.1:protocol\">\n+        <md:Extensions xmlns:init=\"urn:oasis:names:tc:SAML:profiles:SSO:request-init\">\n+            <init:RequestInitiator Binding=\"urn:oasis:names:tc:SAML:profiles:SSO:request-init\" Location=\"https://mmoayyed.unicon.net:8443/cas/login?client_name=SAML2Client\"/>\n+        </md:Extensions>\n+        <md:NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</md:NameIDFormat>\n+        <md:NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</md:NameIDFormat>\n+        <md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</md:NameIDFormat>\n+        <md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat>\n+        <md:AssertionConsumerService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://mmoayyed.unicon.net:8443/cas/login?client_name=SAML2Client\" index=\"0\"/>\n+    </md:SPSSODescriptor>\n+</md:EntityDescriptor>"}]}