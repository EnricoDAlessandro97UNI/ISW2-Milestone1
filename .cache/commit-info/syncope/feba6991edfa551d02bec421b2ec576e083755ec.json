{"sha":"feba6991edfa551d02bec421b2ec576e083755ec","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZlYmE2OTkxZWRmYTU1MWQwMmJlYzQyMWIyZWM1NzZlMDgzNzU1ZWM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-11T14:19:14Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-13T15:16:51Z"},"message":"[SYNCOPE-652] Adjusting log management","tree":{"sha":"0351044d40a80a737f77650563af6c1b4d9f60eb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0351044d40a80a737f77650563af6c1b4d9f60eb"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/feba6991edfa551d02bec421b2ec576e083755ec","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/feba6991edfa551d02bec421b2ec576e083755ec","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/feba6991edfa551d02bec421b2ec576e083755ec","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/feba6991edfa551d02bec421b2ec576e083755ec/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"bcb9a0d7b0a792eba87046853510376cf4e58131","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bcb9a0d7b0a792eba87046853510376cf4e58131","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bcb9a0d7b0a792eba87046853510376cf4e58131"}],"stats":{"total":362,"additions":222,"deletions":140},"files":[{"sha":"469e68a22f19dc58c736ef2215fb71c0a101cc02","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/LoggerCommand.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feba6991edfa551d02bec421b2ec576e083755ec/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feba6991edfa551d02bec421b2ec576e083755ec/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java?ref=feba6991edfa551d02bec421b2ec576e083755ec","patch":"@@ -105,7 +105,7 @@ public void execute() {\n                 final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, log.getKey());\n                 try {\n                     loggerTO.setLevel(LoggerLevel.valueOf(log.getValue()));\n-                    loggerService.update(LoggerType.LOG, loggerTO.getKey(), loggerTO);\n+                    loggerService.update(LoggerType.LOG, loggerTO);\n                     System.out.println(\" - Logger \" + loggerTO.getKey() + \" new level -> \" + loggerTO.getLevel());\n                 } catch (final SyncopeClientException ex) {\n                     System.out.println(\" - Error: \" + ex.getMessage());\n@@ -121,7 +121,7 @@ public void execute() {\n             for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n                 try {\n                     loggerTO.setLevel(LoggerLevel.valueOf(logLevel));\n-                    loggerService.update(LoggerType.LOG, loggerTO.getKey(), loggerTO);\n+                    loggerService.update(LoggerType.LOG, loggerTO);\n                     System.out.println(\" - Logger \" + loggerTO.getKey() + \" new level -> \" + loggerTO.getLevel());\n                 } catch (final SyncopeClientException ex) {\n                     System.out.println(\" - Error: \" + ex.getMessage());\n@@ -140,7 +140,7 @@ public void execute() {\n                 try {\n                     loggerTO.setKey(entrySet.getKey());\n                     loggerTO.setLevel(LoggerLevel.valueOf(entrySet.getValue()));\n-                    loggerService.update(LoggerType.LOG, loggerTO.getKey(), loggerTO);\n+                    loggerService.update(LoggerType.LOG, loggerTO);\n                     System.out.println(\" - Logger \" + loggerTO.getKey() + \" created with level -> \" + loggerTO.\n                             getLevel());\n                 } catch (final SyncopeClientException ex) {"},{"sha":"627e828e81bfe3c6521e14021c640e21d4cdc750","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/LoggerRestClient.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feba6991edfa551d02bec421b2ec576e083755ec/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feba6991edfa551d02bec421b2ec576e083755ec/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java?ref=feba6991edfa551d02bec421b2ec576e083755ec","patch":"@@ -59,19 +59,18 @@ public Map<String, Set<AuditLoggerName>> listAuditsByCategory() {\n         return result;\n     }\n \n-    public void setLogLevel(final String name, final LoggerLevel level) {\n+    public void setLogLevel(final String key, final LoggerLevel level) {\n         LoggerTO loggerTO = new LoggerTO();\n-        loggerTO.setKey(name);\n+        loggerTO.setKey(key);\n         loggerTO.setLevel(level);\n-        getService(LoggerService.class).update(LoggerType.LOG, name, loggerTO);\n+        getService(LoggerService.class).update(LoggerType.LOG, loggerTO);\n     }\n \n     public void enableAudit(final AuditLoggerName auditLoggerName) {\n-        String name = auditLoggerName.toLoggerName();\n         LoggerTO loggerTO = new LoggerTO();\n-        loggerTO.setKey(name);\n+        loggerTO.setKey(auditLoggerName.toLoggerName());\n         loggerTO.setLevel(LoggerLevel.DEBUG);\n-        getService(LoggerService.class).update(LoggerType.AUDIT, name, loggerTO);\n+        getService(LoggerService.class).update(LoggerType.AUDIT, loggerTO);\n     }\n \n     public void deleteLog(final String name) {"},{"sha":"6e1ce1dc3395ac2bbb9613e8bc69b535fed81ac0","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/LoggerTO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feba6991edfa551d02bec421b2ec576e083755ec/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FLoggerTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feba6991edfa551d02bec421b2ec576e083755ec/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FLoggerTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FLoggerTO.java?ref=feba6991edfa551d02bec421b2ec576e083755ec","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n@@ -41,6 +42,7 @@ public void setLevel(final LoggerLevel level) {\n         this.level = level;\n     }\n \n+    @PathParam(\"key\")\n     public String getKey() {\n         return key;\n     }"},{"sha":"3b89b7c5eda5e27120bdc758ec71910ea44aaaf3","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feba6991edfa551d02bec421b2ec576e083755ec/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feba6991edfa551d02bec421b2ec576e083755ec/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java?ref=feba6991edfa551d02bec421b2ec576e083755ec","patch":"@@ -76,14 +76,12 @@ public interface LoggerService extends JAXRSService {\n      * Creates or updates (if existing) the logger with matching name.\n      *\n      * @param type LoggerType to be selected\n-     * @param name Logger name to be updated\n      * @param logger Logger to be created or updated\n      */\n     @PUT\n-    @Path(\"{type}/{name}\")\n+    @Path(\"{type}/{key}\")\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    void update(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") String name,\n-            @NotNull LoggerTO logger);\n+    void update(@NotNull @PathParam(\"type\") LoggerType type, @NotNull LoggerTO logger);\n \n     /**\n      * Deletes the logger with matching name."},{"sha":"d652f3ef38d10658da09941caeb2ae572feead0e","filename":"core/logic/pom.xml","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feba6991edfa551d02bec421b2ec576e083755ec/core%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feba6991edfa551d02bec421b2ec576e083755ec/core%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fpom.xml?ref=feba6991edfa551d02bec421b2ec576e083755ec","patch":"@@ -163,6 +163,13 @@ under the License.\n         <directory>${basedir}/../persistence-jpa/src/test/resources</directory>\n         <filtering>true</filtering>\n       </testResource>\n+      <testResource>\n+        <directory>${basedir}/../provisioning-java/src/main/resources</directory>\n+        <includes>\n+          <include>connid.properties</include>\n+        </includes>\n+        <filtering>true</filtering>\n+      </testResource>\n     </testResources>\n     \n     <plugins>"},{"sha":"e83a76896843ba9f2d6b123b782588e38a911791","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerAccessor.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feba6991edfa551d02bec421b2ec576e083755ec/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feba6991edfa551d02bec421b2ec576e083755ec/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerAccessor.java?ref=feba6991edfa551d02bec421b2ec576e083755ec","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.init;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.LoggerLevel;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * Domain-sensible (via {@code @Transactional} access to logger / audit data.\n+ *\n+ * @see LoggerLoader\n+ */\n+@Component\n+public class LoggerAccessor {\n+\n+    @Autowired\n+    private LoggerDAO loggerDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Transactional\n+    public void synchronizeLog4J(final LoggerContext ctx) {\n+        Map<String, Logger> syncopeLoggers = new HashMap<>();\n+        if (SyncopeConstants.MASTER_DOMAIN.equals(AuthContextUtils.getDomain())) {\n+            for (Logger syncopeLogger : loggerDAO.findAll(LoggerType.LOG)) {\n+                syncopeLoggers.put(syncopeLogger.getKey(), syncopeLogger);\n+            }\n+        }\n+        for (Logger syncopeLogger : loggerDAO.findAll(LoggerType.AUDIT)) {\n+            syncopeLoggers.put(syncopeLogger.getKey(), syncopeLogger);\n+        }\n+\n+        /*\n+         * Traverse all defined log4j loggers: if there is a matching SyncopeLogger, set log4j level accordingly,\n+         * otherwise create a SyncopeLogger instance with given name and level.\n+         */\n+        for (LoggerConfig logConf : ctx.getConfiguration().getLoggers().values()) {\n+            if (!LogManager.ROOT_LOGGER_NAME.equals(logConf.getName()) && logConf.getLevel() != null) {\n+                String loggerName = logConf.getName();\n+                if (syncopeLoggers.containsKey(loggerName)) {\n+                    logConf.setLevel(syncopeLoggers.get(loggerName).getLevel().getLevel());\n+                    syncopeLoggers.remove(loggerName);\n+                } else if (!loggerName.equals(LoggerType.AUDIT.getPrefix())) {\n+                    Logger syncopeLogger = entityFactory.newEntity(Logger.class);\n+                    syncopeLogger.setKey(loggerName);\n+                    syncopeLogger.setLevel(LoggerLevel.fromLevel(logConf.getLevel()));\n+                    syncopeLogger.setType(loggerName.startsWith(LoggerType.AUDIT.getPrefix())\n+                            ? LoggerType.AUDIT\n+                            : LoggerType.LOG);\n+                    loggerDAO.save(syncopeLogger);\n+                }\n+            }\n+        }\n+\n+        /*\n+         * Foreach SyncopeLogger not found in log4j create a new log4j logger with given name and level.\n+         */\n+        for (Logger syncopeLogger : syncopeLoggers.values()) {\n+            LoggerConfig logConf = ctx.getConfiguration().getLoggerConfig(syncopeLogger.getKey());\n+            if (!LogManager.ROOT_LOGGER_NAME.equals(logConf.getName()) && logConf.getLevel() != null) {\n+                logConf.setLevel(syncopeLogger.getLevel().getLevel());\n+            }\n+        }\n+    }\n+}"},{"sha":"61879599eddca68560d727f48f23f537c3910675","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java","status":"modified","additions":11,"deletions":54,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feba6991edfa551d02bec421b2ec576e083755ec/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feba6991edfa551d02bec421b2ec576e083755ec/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java?ref=feba6991edfa551d02bec421b2ec576e083755ec","patch":"@@ -20,7 +20,6 @@\n \n import java.sql.Connection;\n import java.sql.SQLException;\n-import java.util.HashMap;\n import java.util.Map;\n import javax.sql.DataSource;\n import org.apache.logging.log4j.Level;\n@@ -31,15 +30,10 @@\n import org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource;\n import org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender;\n import org.apache.logging.log4j.core.config.LoggerConfig;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.core.misc.AuditManager;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.apache.syncope.core.persistence.api.SyncopeLoader;\n-import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.Logger;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.datasource.DataSourceUtils;\n import org.springframework.stereotype.Component;\n@@ -52,10 +46,7 @@ public class LoggerLoader implements SyncopeLoader {\n     private DomainsHolder domainsHolder;\n \n     @Autowired\n-    private LoggerDAO loggerDAO;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n+    private LoggerAccessor loggerAccessor;\n \n     @Override\n     public Integer getPriority() {\n@@ -65,9 +56,9 @@ public Integer getPriority() {\n     @Transactional\n     @Override\n     public void load() {\n-        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n+        final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n \n-        // 1. Audit table and DataSource for each configured domain\n+        // Audit table and DataSource for each configured domain\n         ColumnConfig[] columns = {\n             ColumnConfig.createColumnConfig(ctx.getConfiguration(), \"EVENT_DATE\", null, null, \"true\", null, null),\n             ColumnConfig.createColumnConfig(ctx.getConfiguration(), \"LOGGER_LEVEL\", \"%level\", null, null, null, null),\n@@ -90,52 +81,18 @@ public void load() {\n                 ctx.getConfiguration().addAppender(appender);\n             }\n \n-            LoggerConfig logConf = new LoggerConfig(\n-                    AuditManager.getDomainAuditLoggerName(entry.getKey()), null, false);\n+            LoggerConfig logConf = new LoggerConfig(AuditManager.getDomainAuditLoggerName(entry.getKey()), null, false);\n             logConf.addAppender(appender, Level.DEBUG, null);\n             ctx.getConfiguration().addLogger(AuditManager.getDomainAuditLoggerName(entry.getKey()), logConf);\n-        }\n-        ctx.updateLoggers();\n-\n-        // 2. Aligning log4j conf with database content\n-        Map<String, Logger> syncopeLoggers = new HashMap<>();\n-        for (Logger syncopeLogger : loggerDAO.findAll(LoggerType.LOG)) {\n-            syncopeLoggers.put(syncopeLogger.getKey(), syncopeLogger);\n-        }\n \n-        for (Logger syncopeLogger : loggerDAO.findAll(LoggerType.AUDIT)) {\n-            syncopeLoggers.put(syncopeLogger.getKey(), syncopeLogger);\n-        }\n+            AuthContextUtils.execWithAuthContext(entry.getKey(), new AuthContextUtils.Executable<Void>() {\n \n-        /*\n-         * Traverse all defined log4j loggers: if there is a matching SyncopeLogger, set log4j level accordingly,\n-         * otherwise create a SyncopeLogger instance with given name and level.\n-         */\n-        for (LoggerConfig logConf : ctx.getConfiguration().getLoggers().values()) {\n-            final String loggerName = LogManager.ROOT_LOGGER_NAME.equals(logConf.getName())\n-                    ? SyncopeConstants.ROOT_LOGGER : logConf.getName();\n-            if (logConf.getLevel() != null) {\n-                if (syncopeLoggers.containsKey(loggerName)) {\n-                    logConf.setLevel(syncopeLoggers.get(loggerName).getLevel().getLevel());\n-                    syncopeLoggers.remove(loggerName);\n-                } else if (!loggerName.equals(LoggerType.AUDIT.getPrefix())) {\n-                    Logger syncopeLogger = entityFactory.newEntity(Logger.class);\n-                    syncopeLogger.setKey(loggerName);\n-                    syncopeLogger.setLevel(LoggerLevel.fromLevel(logConf.getLevel()));\n-                    syncopeLogger.setType(loggerName.startsWith(LoggerType.AUDIT.getPrefix())\n-                            ? LoggerType.AUDIT\n-                            : LoggerType.LOG);\n-                    loggerDAO.save(syncopeLogger);\n+                @Override\n+                public Void exec() {\n+                    loggerAccessor.synchronizeLog4J(ctx);\n+                    return null;\n                 }\n-            }\n-        }\n-\n-        /*\n-         * Foreach SyncopeLogger not found in log4j create a new log4j logger with given name and level.\n-         */\n-        for (Logger syncopeLogger : syncopeLoggers.values()) {\n-            LoggerConfig logConf = ctx.getConfiguration().getLoggerConfig(syncopeLogger.getKey());\n-            logConf.setLevel(syncopeLogger.getLevel().getLevel());\n+            });\n         }\n \n         ctx.updateLoggers();"},{"sha":"32ae36720f337f6569f55ae85848619678197ae9","filename":"core/logic/src/test/java/org/apache/syncope/core/logic/AbstractTest.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feba6991edfa551d02bec421b2ec576e083755ec/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feba6991edfa551d02bec421b2ec576e083755ec/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTest.java?ref=feba6991edfa551d02bec421b2ec576e083755ec","patch":"@@ -30,7 +30,6 @@\n     \"classpath:provisioningContext.xml\",\n     \"classpath:logicContext.xml\",\n     \"classpath:workflowContext.xml\",\n-    \"classpath:persistenceTest.xml\",\n     \"classpath:logicTest.xml\"\n })\n @TransactionConfiguration(transactionManager = \"MasterTransactionManager\")"},{"sha":"fd6edd633938269563438319cb148b60e83788e6","filename":"core/logic/src/test/resources/logicTest.xml","status":"modified","additions":18,"deletions":1,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feba6991edfa551d02bec421b2ec576e083755ec/core%2Flogic%2Fsrc%2Ftest%2Fresources%2FlogicTest.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feba6991edfa551d02bec421b2ec576e083755ec/core%2Flogic%2Fsrc%2Ftest%2Fresources%2FlogicTest.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Ftest%2Fresources%2FlogicTest.xml?ref=feba6991edfa551d02bec421b2ec576e083755ec","patch":"@@ -19,8 +19,11 @@ under the License.\n -->\n <beans xmlns=\"http://www.springframework.org/schema/beans\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:context=\"http://www.springframework.org/schema/context\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n-                           http://www.springframework.org/schema/beans/spring-beans.xsd\">\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\n+                           http://www.springframework.org/schema/context\n+                           http://www.springframework.org/schema/context/spring-context.xsd\">\n     \n   <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n     <property name=\"locations\">\n@@ -39,4 +42,18 @@ under the License.\n     <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/>\n   </bean>\n \n+  <bean class=\"org.apache.syncope.core.misc.spring.ApplicationContextProvider\"/>\n+\n+  <bean id=\"adminUser\" class=\"java.lang.String\">\n+    <constructor-arg value=\"${adminUser}\"/>\n+  </bean>\n+  <bean id=\"anonymousUser\" class=\"java.lang.String\">\n+    <constructor-arg value=\"${anonymousUser}\"/>\n+  </bean>\n+  \n+  <context:component-scan base-package=\"org.apache.syncope.core.misc.policy\"/>\n+  <context:component-scan base-package=\"org.apache.syncope.core.misc.security\"/>\n+\n+  <import resource=\"persistenceContext.xml\"/>\n+  \n </beans>"},{"sha":"4586ee306c5e6469ea19da8c574f6c0581424ff3","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/AuthContextUtils.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feba6991edfa551d02bec421b2ec576e083755ec/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feba6991edfa551d02bec421b2ec576e083755ec/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java?ref=feba6991edfa551d02bec421b2ec576e083755ec","patch":"@@ -39,6 +39,11 @@\n \n public final class AuthContextUtils {\n \n+    public interface Executable<T> {\n+\n+        T exec();\n+    }\n+\n     public static String getUsername() {\n         Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n         return authentication == null ? SyncopeConstants.UNAUTHENTICATED : authentication.getName();\n@@ -106,6 +111,17 @@ public static void clearFakeAuth() {\n         SecurityContextHolder.clearContext();\n     }\n \n+    public static <T> T execWithAuthContext(final String domainKey, final Executable<T> executable) {\n+        SecurityContext ctx = SecurityContextHolder.getContext();\n+        setFakeAuth(domainKey);\n+        try {\n+            return executable.exec();\n+        } finally {\n+            clearFakeAuth();\n+            SecurityContextHolder.setContext(ctx);\n+        }\n+    }\n+\n     /**\n      * Private default constructor, for static-only classes.\n      */"},{"sha":"052cc30b1bfaf51aedff731a4ee61d05b046a47f","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/AuthDataAccessor.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feba6991edfa551d02bec421b2ec576e083755ec/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feba6991edfa551d02bec421b2ec576e083755ec/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java?ref=feba6991edfa551d02bec421b2ec576e083755ec","patch":"@@ -64,6 +64,12 @@\n import org.springframework.security.core.userdetails.UsernameNotFoundException;\n import org.springframework.transaction.annotation.Transactional;\n \n+/**\n+ * Domain-sensible (via {@code @Transactional} access to authentication / authorization data.\n+ *\n+ * @see SyncopeAuthenticationProvider\n+ * @see SyncopeAuthenticationDetails\n+ */\n public class AuthDataAccessor {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AuthDataAccessor.class);"},{"sha":"ff7e45385c771f8f7a295d0f4fa2e88884e11336","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeAuthenticationProvider.java","status":"modified","additions":42,"deletions":57,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feba6991edfa551d02bec421b2ec576e083755ec/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feba6991edfa551d02bec421b2ec576e083755ec/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=feba6991edfa551d02bec421b2ec576e083755ec","patch":"@@ -25,6 +25,7 @@\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.misc.security.AuthContextUtils.Executable;\n import org.apache.syncope.core.persistence.api.entity.Domain;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.slf4j.Logger;\n@@ -35,8 +36,6 @@\n import org.springframework.security.authentication.BadCredentialsException;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.Authentication;\n-import org.springframework.security.core.context.SecurityContext;\n-import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.core.userdetails.UserDetailsService;\n \n @Configurable\n@@ -91,17 +90,6 @@ public void setUserDetailsService(final UserDetailsService syncopeUserDetailsSer\n         this.userDetailsService = syncopeUserDetailsService;\n     }\n \n-    protected <T> T execWithAuthContext(final String domainKey, final Executable<T> executable) {\n-        SecurityContext ctx = SecurityContextHolder.getContext();\n-        AuthContextUtils.setFakeAuth(domainKey);\n-        try {\n-            return executable.exec();\n-        } finally {\n-            AuthContextUtils.clearFakeAuth();\n-            SecurityContextHolder.setContext(ctx);\n-        }\n-    }\n-\n     @Override\n     public Authentication authenticate(final Authentication authentication) {\n         String domainKey = SyncopeAuthenticationDetails.class.cast(authentication.getDetails()).getDomain();\n@@ -121,22 +109,23 @@ public Authentication authenticate(final Authentication authentication) {\n                         adminPassword);\n             } else {\n                 final String domainToFind = domainKey;\n-                authenticated = execWithAuthContext(SyncopeConstants.MASTER_DOMAIN, new Executable<Boolean>() {\n-\n-                    @Override\n-                    public Boolean exec() {\n-                        Domain domain = dataAccessor.findDomain(domainToFind);\n-\n-                        return encryptor.verify(\n-                                authentication.getCredentials().toString(),\n-                                domain.getAdminCipherAlgorithm(),\n-                                domain.getAdminPwd());\n-                    }\n-                });\n+                authenticated = AuthContextUtils.execWithAuthContext(\n+                        SyncopeConstants.MASTER_DOMAIN, new Executable<Boolean>() {\n+\n+                            @Override\n+                            public Boolean exec() {\n+                                Domain domain = dataAccessor.findDomain(domainToFind);\n+\n+                                return encryptor.verify(\n+                                        authentication.getCredentials().toString(),\n+                                        domain.getAdminCipherAlgorithm(),\n+                                        domain.getAdminPwd());\n+                            }\n+                        });\n             }\n         } else {\n             final Pair<Long, Boolean> authResult =\n-                    execWithAuthContext(domainKey, new Executable<Pair<Long, Boolean>>() {\n+                    AuthContextUtils.execWithAuthContext(domainKey, new Executable<Pair<Long, Boolean>>() {\n \n                         @Override\n                         public Pair<Long, Boolean> exec() {\n@@ -145,7 +134,7 @@ public Pair<Long, Boolean> exec() {\n                     });\n             authenticated = authResult.getValue();\n             if (!authenticated) {\n-                execWithAuthContext(domainKey, new Executable<Void>() {\n+                AuthContextUtils.execWithAuthContext(domainKey, new Executable<Void>() {\n \n                     @Override\n                     public Void exec() {\n@@ -159,35 +148,36 @@ public Void exec() {\n         final boolean isAuthenticated = authenticated;\n         UsernamePasswordAuthenticationToken token;\n         if (isAuthenticated) {\n-            token = execWithAuthContext(domainKey, new Executable<UsernamePasswordAuthenticationToken>() {\n-\n-                @Override\n-                public UsernamePasswordAuthenticationToken exec() {\n-                    UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(\n-                            authentication.getPrincipal(),\n-                            null,\n-                            userDetailsService.loadUserByUsername(authentication.getPrincipal().toString()).\n-                            getAuthorities());\n-                    token.setDetails(authentication.getDetails());\n+            token = AuthContextUtils.execWithAuthContext(\n+                    domainKey, new Executable<UsernamePasswordAuthenticationToken>() {\n \n-                    dataAccessor.audit(\n-                            AuditElements.EventCategoryType.REST,\n-                            AuditElements.AUTHENTICATION_CATEGORY,\n-                            null,\n-                            AuditElements.LOGIN_EVENT,\n-                            Result.SUCCESS,\n-                            null,\n-                            isAuthenticated,\n-                            authentication,\n-                            \"Successfully authenticated, with entitlements: \" + token.getAuthorities());\n-                    return token;\n-                }\n-            });\n+                        @Override\n+                        public UsernamePasswordAuthenticationToken exec() {\n+                            UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(\n+                                    authentication.getPrincipal(),\n+                                    null,\n+                                    userDetailsService.loadUserByUsername(authentication.getPrincipal().toString()).\n+                                    getAuthorities());\n+                            token.setDetails(authentication.getDetails());\n+\n+                            dataAccessor.audit(\n+                                    AuditElements.EventCategoryType.REST,\n+                                    AuditElements.AUTHENTICATION_CATEGORY,\n+                                    null,\n+                                    AuditElements.LOGIN_EVENT,\n+                                    Result.SUCCESS,\n+                                    null,\n+                                    isAuthenticated,\n+                                    authentication,\n+                                    \"Successfully authenticated, with entitlements: \" + token.getAuthorities());\n+                            return token;\n+                        }\n+                    });\n \n-            LOG.debug(\"User {} successfully authenticated, with groups {}\",\n+            LOG.debug(\"User {} successfully authenticated, with entitlements {}\",\n                     authentication.getPrincipal(), token.getAuthorities());\n         } else {\n-            execWithAuthContext(domainKey, new Executable<Void>() {\n+            AuthContextUtils.execWithAuthContext(domainKey, new Executable<Void>() {\n \n                 @Override\n                 public Void exec() {\n@@ -217,9 +207,4 @@ public Void exec() {\n     public boolean supports(final Class<? extends Object> type) {\n         return type.equals(UsernamePasswordAuthenticationToken.class);\n     }\n-\n-    protected interface Executable<T> {\n-\n-        T exec();\n-    }\n }"},{"sha":"eb100f39878fadc742eed69859551a99ab0e4f19","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/MappingTest.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feba6991edfa551d02bec421b2ec576e083755ec/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feba6991edfa551d02bec421b2ec576e083755ec/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingTest.java?ref=feba6991edfa551d02bec421b2ec576e083755ec","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.logic;\n+package org.apache.syncope.core.provisioning.java;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;","previous_filename":"core/logic/src/test/java/org/apache/syncope/core/logic/MappingTest.java"},{"sha":"f0a706c4c6b01bbdd2d471de704c1abae54cb2a1","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/ResourceDataBinderTest.java","status":"renamed","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feba6991edfa551d02bec421b2ec576e083755ec/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feba6991edfa551d02bec421b2ec576e083755ec/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java?ref=feba6991edfa551d02bec421b2ec576e083755ec","patch":"@@ -16,9 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.java.data;\n-\n-import org.apache.syncope.core.provisioning.java.AbstractTest;\n+package org.apache.syncope.core.provisioning.java;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;","previous_filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderTest.java"},{"sha":"4379754ff2d8fe74e6cd34393a373d187c53a186","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/LoggerServiceImpl.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feba6991edfa551d02bec421b2ec576e083755ec/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feba6991edfa551d02bec421b2ec576e083755ec/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java?ref=feba6991edfa551d02bec421b2ec576e083755ec","patch":"@@ -48,9 +48,7 @@ public void delete(final LoggerType type, final String name) {\n             case AUDIT:\n                 try {\n                     logic.disableAudit(AuditLoggerName.fromLoggerName(name));\n-                } catch (IllegalArgumentException e) {\n-                    throw new BadRequestException(e);\n-                } catch (ParseException e) {\n+                } catch (IllegalArgumentException | ParseException e) {\n                     throw new BadRequestException(e);\n                 }\n                 break;\n@@ -88,15 +86,15 @@ public LoggerTO read(final LoggerType type, final String name) {\n     }\n \n     @Override\n-    public void update(final LoggerType type, final String name, final LoggerTO logger) {\n+    public void update(final LoggerType type, final LoggerTO logger) {\n         switch (type) {\n             case LOG:\n-                logic.setLogLevel(name, logger.getLevel().getLevel());\n+                logic.setLogLevel(logger.getKey(), logger.getLevel().getLevel());\n                 break;\n \n             case AUDIT:\n                 try {\n-                    logic.enableAudit(AuditLoggerName.fromLoggerName(name));\n+                    logic.enableAudit(AuditLoggerName.fromLoggerName(logger.getKey()));\n                 } catch (Exception e) {\n                     throw new BadRequestException(e);\n                 }"},{"sha":"df1de40fb3940ed651726129709dd13a966ccbf4","filename":"fit/core-reference/src/main/resources/log4j2.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feba6991edfa551d02bec421b2ec576e083755ec/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feba6991edfa551d02bec421b2ec576e083755ec/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=feba6991edfa551d02bec421b2ec576e083755ec","patch":"@@ -103,6 +103,9 @@ under the License.\n       <appender-ref ref=\"connid\"/>\n     </asyncLogger>\n     \n+    <asyncLogger name=\"org.apache.syncope\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n     <asyncLogger name=\"org.apache.syncope.core.provisioning\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n@@ -115,6 +118,9 @@ under the License.\n     <asyncLogger name=\"org.quartz\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n+    <asyncLogger name=\"org.activiti\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n     <asyncLogger name=\"org.apache.camel\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>"},{"sha":"fb936183f60617a83f8f2ff1a95a88580a7ead2d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/LoggerITCase.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feba6991edfa551d02bec421b2ec576e083755ec/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FLoggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feba6991edfa551d02bec421b2ec576e083755ec/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FLoggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FLoggerITCase.java?ref=feba6991edfa551d02bec421b2ec576e083755ec","patch":"@@ -76,7 +76,7 @@ public void setLevel() {\n         LoggerTO logger = new LoggerTO();\n         logger.setKey(\"TEST\");\n         logger.setLevel(LoggerLevel.INFO);\n-        loggerService.update(LoggerType.LOG, logger.getKey(), logger);\n+        loggerService.update(LoggerType.LOG, logger);\n         logger = loggerService.read(LoggerType.LOG, logger.getKey());\n         assertNotNull(logger);\n         assertEquals(LoggerLevel.INFO, logger.getLevel());\n@@ -106,10 +106,9 @@ public void enableDisableAudit() {\n         assertFalse(audits.contains(auditLoggerName));\n \n         LoggerTO loggerTO = new LoggerTO();\n-        String name = auditLoggerName.toLoggerName();\n-        loggerTO.setKey(name);\n+        loggerTO.setKey(auditLoggerName.toLoggerName());\n         loggerTO.setLevel(LoggerLevel.DEBUG);\n-        loggerService.update(LoggerType.AUDIT, name, loggerTO);\n+        loggerService.update(LoggerType.AUDIT, loggerTO);\n \n         audits = CollectionWrapper.wrapLogger(loggerService.list(LoggerType.AUDIT));\n         assertNotNull(audits);"}]}