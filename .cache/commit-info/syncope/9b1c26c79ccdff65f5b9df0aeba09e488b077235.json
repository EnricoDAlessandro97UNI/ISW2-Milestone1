{"sha":"9b1c26c79ccdff65f5b9df0aeba09e488b077235","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjliMWMyNmM3OWNjZGZmNjVmNWI5ZGYwYWViYTA5ZTQ4OGIwNzcyMzU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-22T07:31:45Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-22T07:31:45Z"},"message":"Upgrading to CXF 3.2.4-SNAPSHOT as fix for CXF-7670","tree":{"sha":"9c378e3ee6e8c4d47e78feb1d0fcbd282c2ec81d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9c378e3ee6e8c4d47e78feb1d0fcbd282c2ec81d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9b1c26c79ccdff65f5b9df0aeba09e488b077235","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9b1c26c79ccdff65f5b9df0aeba09e488b077235","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9b1c26c79ccdff65f5b9df0aeba09e488b077235","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9b1c26c79ccdff65f5b9df0aeba09e488b077235/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"1669101c975e3045b58a561348b5f4f97dba39c5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1669101c975e3045b58a561348b5f4f97dba39c5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1669101c975e3045b58a561348b5f4f97dba39c5"}],"stats":{"total":1016,"additions":1,"deletions":1015},"files":[{"sha":"9115db4da79065e5e69689a57b7435220358f995","filename":"core/rest-cxf/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java","status":"removed","additions":0,"deletions":1012,"changes":1012,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1669101c975e3045b58a561348b5f4f97dba39c5/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Fjaxrs%2Futils%2FResourceUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1669101c975e3045b58a561348b5f4f97dba39c5/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Fjaxrs%2Futils%2FResourceUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Fjaxrs%2Futils%2FResourceUtils.java?ref=1669101c975e3045b58a561348b5f4f97dba39c5","patch":"@@ -1,1012 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.cxf.jaxrs.utils;\n-\n-import java.io.File;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.lang.annotation.Annotation;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n-import java.lang.reflect.Type;\n-import java.lang.reflect.TypeVariable;\n-import java.net.URL;\n-import java.nio.charset.StandardCharsets;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-import java.util.ResourceBundle;\n-import java.util.Set;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-\n-import javax.annotation.PostConstruct;\n-import javax.annotation.PreDestroy;\n-import javax.ws.rs.ApplicationPath;\n-import javax.ws.rs.BeanParam;\n-import javax.ws.rs.CookieParam;\n-import javax.ws.rs.Encoded;\n-import javax.ws.rs.FormParam;\n-import javax.ws.rs.HeaderParam;\n-import javax.ws.rs.MatrixParam;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.container.AsyncResponse;\n-import javax.ws.rs.container.Suspended;\n-import javax.ws.rs.core.Application;\n-import javax.ws.rs.core.Context;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.MultivaluedMap;\n-import javax.ws.rs.core.Response;\n-import javax.ws.rs.ext.MessageBodyWriter;\n-import javax.ws.rs.ext.Provider;\n-import javax.xml.bind.JAXBContext;\n-import javax.xml.bind.JAXBElement;\n-import javax.xml.bind.JAXBException;\n-import javax.xml.namespace.QName;\n-\n-import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-\n-import org.apache.cxf.Bus;\n-import org.apache.cxf.BusFactory;\n-import org.apache.cxf.common.classloader.ClassLoaderUtils;\n-import org.apache.cxf.common.i18n.BundleUtils;\n-import org.apache.cxf.common.jaxb.JAXBUtils;\n-import org.apache.cxf.common.logging.LogUtils;\n-import org.apache.cxf.common.util.StringUtils;\n-import org.apache.cxf.feature.Feature;\n-import org.apache.cxf.helpers.CastUtils;\n-import org.apache.cxf.helpers.DOMUtils;\n-import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;\n-import org.apache.cxf.jaxrs.ext.DefaultMethod;\n-import org.apache.cxf.jaxrs.ext.xml.ElementClass;\n-import org.apache.cxf.jaxrs.ext.xml.XMLName;\n-import org.apache.cxf.jaxrs.lifecycle.PerRequestResourceProvider;\n-import org.apache.cxf.jaxrs.lifecycle.ResourceProvider;\n-import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;\n-import org.apache.cxf.jaxrs.model.ClassResourceInfo;\n-import org.apache.cxf.jaxrs.model.MethodDispatcher;\n-import org.apache.cxf.jaxrs.model.OperationResourceInfo;\n-import org.apache.cxf.jaxrs.model.Parameter;\n-import org.apache.cxf.jaxrs.model.ParameterType;\n-import org.apache.cxf.jaxrs.model.ResourceTypes;\n-import org.apache.cxf.jaxrs.model.URITemplate;\n-import org.apache.cxf.jaxrs.model.UserOperation;\n-import org.apache.cxf.jaxrs.model.UserResource;\n-import org.apache.cxf.jaxrs.provider.JAXBElementProvider;\n-import org.apache.cxf.message.Message;\n-import org.apache.cxf.message.MessageImpl;\n-import org.apache.cxf.resource.ResourceManager;\n-import org.apache.cxf.staxutils.StaxUtils;\n-\n-public final class ResourceUtils {\n-\n-    //CHECKSTYLE:OFF\n-    private static final Logger LOG = LogUtils.getL7dLogger(ResourceUtils.class);\n-    private static final ResourceBundle BUNDLE = BundleUtils.getBundle(ResourceUtils.class);\n-    private static final String CLASSPATH_PREFIX = \"classpath:\";\n-    private static final String NOT_RESOURCE_METHOD_MESSAGE_ID = \"NOT_RESOURCE_METHOD\";\n-    private static final String NOT_SUSPENDED_ASYNC_MESSAGE_ID = \"NOT_SUSPENDED_ASYNC_METHOD\";\n-    private static final String NO_VOID_RETURN_ASYNC_MESSAGE_ID = \"NO_VOID_RETURN_ASYNC_METHOD\";\n-    private static final Set<String> SERVER_PROVIDER_CLASS_NAMES;\n-    static {\n-        SERVER_PROVIDER_CLASS_NAMES = new HashSet<>();\n-        SERVER_PROVIDER_CLASS_NAMES.add(\"javax.ws.rs.ext.MessageBodyWriter\");\n-        SERVER_PROVIDER_CLASS_NAMES.add(\"javax.ws.rs.ext.MessageBodyReader\");\n-        SERVER_PROVIDER_CLASS_NAMES.add(\"javax.ws.rs.ext.ExceptionMapper\");\n-        SERVER_PROVIDER_CLASS_NAMES.add(\"javax.ws.rs.ext.ContextResolver\");\n-        SERVER_PROVIDER_CLASS_NAMES.add(\"javax.ws.rs.ext.ReaderInterceptor\");\n-        SERVER_PROVIDER_CLASS_NAMES.add(\"javax.ws.rs.ext.WriterInterceptor\");\n-        SERVER_PROVIDER_CLASS_NAMES.add(\"javax.ws.rs.ext.ParamConverterProvider\");\n-        SERVER_PROVIDER_CLASS_NAMES.add(\"javax.ws.rs.container.ContainerRequestFilter\");\n-        SERVER_PROVIDER_CLASS_NAMES.add(\"javax.ws.rs.container.ContainerResponseFilter\");\n-        SERVER_PROVIDER_CLASS_NAMES.add(\"javax.ws.rs.container.DynamicFeature\");\n-        SERVER_PROVIDER_CLASS_NAMES.add(\"javax.ws.rs.core.Feature\");\n-        SERVER_PROVIDER_CLASS_NAMES.add(\"org.apache.cxf.jaxrs.ext.ContextProvider\");\n-\n-    }\n-\n-    private ResourceUtils() {\n-    }\n-\n-    private static Method[] getDeclaredMethods(final Class<?> c) {\n-        return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {\n-            @Override\n-            public Method[] run() {\n-                return c.getDeclaredMethods();\n-            }\n-        });\n-    }\n-    public static Method findPostConstructMethod(Class<?> c) {\n-        return findPostConstructMethod(c, null);\n-    }\n-    public static Method findPostConstructMethod(Class<?> c, String name) {\n-        if (Object.class == c || null == c) {\n-            return null;\n-        }\n-        for (Method m : getDeclaredMethods(c)) {\n-            if (name != null) {\n-                if (m.getName().equals(name)) {\n-                    return m;\n-                }\n-            } else if (m.getAnnotation(PostConstruct.class) != null) {\n-                return m;\n-            }\n-        }\n-        Method m = findPostConstructMethod(c.getSuperclass(), name);\n-        if (m != null) {\n-            return m;\n-        }\n-        for (Class<?> i : c.getInterfaces()) {\n-            m = findPostConstructMethod(i, name);\n-            if (m != null) {\n-                return m;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    public static Method findPreDestroyMethod(Class<?> c) {\n-        return findPreDestroyMethod(c, null);\n-    }\n-\n-    public static Method findPreDestroyMethod(Class<?> c, String name) {\n-        if (Object.class == c || null == c) {\n-            return null;\n-        }\n-        for (Method m : getDeclaredMethods(c)) {\n-            if (name != null) {\n-                if (m.getName().equals(name)) {\n-                    return m;\n-                }\n-            } else if (m.getAnnotation(PreDestroy.class) != null) {\n-                return m;\n-            }\n-        }\n-        Method m = findPreDestroyMethod(c.getSuperclass(), name);\n-        if (m != null) {\n-            return m;\n-        }\n-        for (Class<?> i : c.getInterfaces()) {\n-            m = findPreDestroyMethod(i, name);\n-            if (m != null) {\n-                return m;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    public static ClassResourceInfo createClassResourceInfo(\n-        Map<String, UserResource> resources, UserResource model,\n-        Class<?> defaultClass,\n-        boolean isRoot, boolean enableStatic,\n-        Bus bus) {\n-        final boolean isDefaultClass = defaultClass != null;\n-        Class<?> sClass = !isDefaultClass  ? loadClass(model.getName()) : defaultClass;\n-        return createServiceClassResourceInfo(resources, model, sClass, isRoot, enableStatic, bus);\n-    }\n-\n-    public static ClassResourceInfo createServiceClassResourceInfo(\n-        Map<String, UserResource> resources, UserResource model,\n-        Class<?> sClass, boolean isRoot, boolean enableStatic, Bus bus) {\n-        if (model == null) {\n-            throw new RuntimeException(\"Resource class \" + sClass.getName() + \" has no model info\");\n-        }\n-        ClassResourceInfo cri =\n-            new ClassResourceInfo(sClass, sClass, isRoot, enableStatic, true,\n-                                  model.getConsumes(), model.getProduces(), bus);\n-        URITemplate t = URITemplate.createTemplate(model.getPath());\n-        cri.setURITemplate(t);\n-\n-        MethodDispatcher md = new MethodDispatcher();\n-        Map<String, UserOperation> ops = model.getOperationsAsMap();\n-\n-        Method defaultMethod = null;\n-        Map<String, Method> methodNames = new HashMap<>();\n-        for (Method m : cri.getServiceClass().getMethods()) {\n-            if (m.getAnnotation(DefaultMethod.class) != null) {\n-                // if needed we can also support multiple default methods\n-                defaultMethod = m;\n-            }\n-            methodNames.put(m.getName(), m);\n-        }\n-\n-        for (Map.Entry<String, UserOperation> entry : ops.entrySet()) {\n-            UserOperation op = entry.getValue();\n-            Method actualMethod = methodNames.get(op.getName());\n-            if (actualMethod == null) {\n-                actualMethod = defaultMethod;\n-            }\n-            if (actualMethod == null) {\n-                continue;\n-            }\n-            OperationResourceInfo ori =\n-                new OperationResourceInfo(actualMethod, cri, URITemplate.createTemplate(op.getPath()),\n-                                          op.getVerb(), op.getConsumes(), op.getProduces(),\n-                                          op.getParameters(),\n-                                          op.isOneway());\n-            String rClassName = actualMethod.getReturnType().getName();\n-            if (op.getVerb() == null) {\n-                if (resources.containsKey(rClassName)) {\n-                    ClassResourceInfo subCri = rClassName.equals(model.getName()) ? cri\n-                        : createServiceClassResourceInfo(resources, resources.get(rClassName),\n-                                                         actualMethod.getReturnType(), false, enableStatic, bus);\n-                    if (subCri != null) {\n-                        cri.addSubClassResourceInfo(subCri);\n-                        md.bind(ori, actualMethod);\n-                    }\n-                }\n-            } else {\n-                md.bind(ori, actualMethod);\n-            }\n-        }\n-\n-        cri.setMethodDispatcher(md);\n-        return checkMethodDispatcher(cri) ? cri : null;\n-\n-    }\n-\n-    public static ClassResourceInfo createClassResourceInfo(final Class<?> rClass,\n-                                                            final Class<?> sClass,\n-                                                            boolean root,\n-                                                            boolean enableStatic) {\n-        return createClassResourceInfo(rClass, sClass, root, enableStatic, BusFactory.getThreadDefaultBus());\n-\n-    }\n-\n-    public static ClassResourceInfo createClassResourceInfo(final Class<?> rClass,\n-                                                            final Class<?> sClass,\n-                                                            boolean root,\n-                                                            boolean enableStatic,\n-                                                            Bus bus) {\n-        return createClassResourceInfo(rClass, sClass, null, root, enableStatic, bus);\n-    }\n-\n-    public static ClassResourceInfo createClassResourceInfo(final Class<?> rClass,\n-                                                            final Class<?> sClass,\n-                                                            ClassResourceInfo parent,\n-                                                            boolean root,\n-                                                            boolean enableStatic,\n-                                                            Bus bus) {\n-        ClassResourceInfo cri = new ClassResourceInfo(rClass, sClass, root, enableStatic, bus);\n-        cri.setParent(parent);\n-\n-        if (root) {\n-            URITemplate t = URITemplate.createTemplate(cri.getPath());\n-            cri.setURITemplate(t);\n-        }\n-\n-        evaluateResourceClass(cri, enableStatic);\n-        return checkMethodDispatcher(cri) ? cri : null;\n-    }\n-\n-    private static void evaluateResourceClass(ClassResourceInfo cri, boolean enableStatic) {\n-        MethodDispatcher md = new MethodDispatcher();\n-        Class<?> serviceClass = cri.getServiceClass();\n-\n-        for (Method m : serviceClass.getMethods()) {\n-\n-            Method annotatedMethod = AnnotationUtils.getAnnotatedMethod(serviceClass, m);\n-\n-            String httpMethod = AnnotationUtils.getHttpMethodValue(annotatedMethod);\n-            Path path = AnnotationUtils.getMethodAnnotation(annotatedMethod, Path.class);\n-\n-            if (httpMethod != null || path != null) {\n-                if (!checkAsyncResponse(annotatedMethod)) {\n-                    continue;\n-                }\n-\n-                md.bind(createOperationInfo(m, annotatedMethod, cri, path, httpMethod), m);\n-                if (httpMethod == null) {\n-                    // subresource locator\n-                    Class<?> subClass = m.getReturnType();\n-                    if (subClass == Class.class) {\n-                        subClass = InjectionUtils.getActualType(m.getGenericReturnType());\n-                    }\n-                    if (enableStatic) {\n-                        ClassResourceInfo subCri = cri.findResource(subClass, subClass);\n-                        if (subCri == null) {\n-                            ClassResourceInfo ancestor = getAncestorWithSameServiceClass(cri, subClass);\n-                            subCri = ancestor != null ? ancestor\n-                                     : createClassResourceInfo(subClass, subClass, cri, false, enableStatic,\n-                                                               cri.getBus());\n-                        }\n-\n-                        if (subCri != null) {\n-                            cri.addSubClassResourceInfo(subCri);\n-                        }\n-                    }\n-                }\n-            } else {\n-                reportInvalidResourceMethod(m, NOT_RESOURCE_METHOD_MESSAGE_ID, Level.FINE);\n-            }\n-        }\n-        cri.setMethodDispatcher(md);\n-    }\n-\n-    private static void reportInvalidResourceMethod(Method m, String messageId, Level logLevel) {\n-        if (LOG.isLoggable(logLevel)) {\n-            LOG.log(logLevel, new org.apache.cxf.common.i18n.Message(messageId,\n-                                                             BUNDLE,\n-                                                             m.getDeclaringClass().getName(),\n-                                                             m.getName()).toString());\n-        }\n-    }\n-\n-    private static boolean checkAsyncResponse(Method m) {\n-        Class<?>[] types = m.getParameterTypes();\n-        for (int i = 0; i < types.length; i++) {\n-            if (types[i] == AsyncResponse.class) {\n-                if (AnnotationUtils.getAnnotation(m.getParameterAnnotations()[i], Suspended.class) == null) {\n-                    reportInvalidResourceMethod(m, NOT_SUSPENDED_ASYNC_MESSAGE_ID, Level.FINE);\n-                    return false;\n-                }\n-                if (m.getReturnType() == Void.TYPE || m.getReturnType() == Void.class) {\n-                    return true;\n-                }\n-                reportInvalidResourceMethod(m, NO_VOID_RETURN_ASYNC_MESSAGE_ID, Level.WARNING);\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    private static ClassResourceInfo getAncestorWithSameServiceClass(ClassResourceInfo parent, Class<?> subClass) {\n-        if (parent == null) {\n-            return null;\n-        }\n-        if (parent.getServiceClass() == subClass) {\n-            return parent;\n-        }\n-        return getAncestorWithSameServiceClass(parent.getParent(), subClass);\n-    }\n-\n-    public static Constructor<?> findResourceConstructor(Class<?> resourceClass, boolean perRequest) {\n-        List<Constructor<?>> cs = new LinkedList<Constructor<?>>();\n-        for (Constructor<?> c : resourceClass.getConstructors()) {\n-            Class<?>[] params = c.getParameterTypes();\n-            Annotation[][] anns = c.getParameterAnnotations();\n-            boolean match = true;\n-            for (int i = 0; i < params.length; i++) {\n-                if (!perRequest) {\n-                    if (AnnotationUtils.getAnnotation(anns[i], Context.class) == null) {\n-                        match = false;\n-                        break;\n-                    }\n-                } else if (!AnnotationUtils.isValidParamAnnotations(anns[i])) {\n-                    match = false;\n-                    break;\n-                }\n-            }\n-            if (match) {\n-                cs.add(c);\n-            }\n-        }\n-        Collections.sort(cs, new Comparator<Constructor<?>>() {\n-\n-            public int compare(Constructor<?> c1, Constructor<?> c2) {\n-                int p1 = c1.getParameterTypes().length;\n-                int p2 = c2.getParameterTypes().length;\n-                return p1 > p2 ? -1 : p1 < p2 ? 1 : 0;\n-            }\n-\n-        });\n-        return cs.isEmpty() ? null : cs.get(0);\n-    }\n-\n-    public static List<Parameter> getParameters(Method resourceMethod) {\n-        Annotation[][] paramAnns = resourceMethod.getParameterAnnotations();\n-        if (paramAnns.length == 0) {\n-            return CastUtils.cast(Collections.emptyList(), Parameter.class);\n-        }\n-        Class<?>[] types = resourceMethod.getParameterTypes();\n-        List<Parameter> params = new ArrayList<>(paramAnns.length);\n-        for (int i = 0; i < paramAnns.length; i++) {\n-            Parameter p = getParameter(i, paramAnns[i], types[i]);\n-            params.add(p);\n-        }\n-        return params;\n-    }\n-\n-    public static Parameter getParameter(int index, Annotation[] anns, Class<?> type) {\n-\n-        Context ctx = AnnotationUtils.getAnnotation(anns, Context.class);\n-        if (ctx != null) {\n-            return new Parameter(ParameterType.CONTEXT, index, null);\n-        }\n-\n-        boolean isEncoded = AnnotationUtils.getAnnotation(anns, Encoded.class) != null;\n-\n-        BeanParam bp = AnnotationUtils.getAnnotation(anns, BeanParam.class);\n-        if (bp != null) {\n-            return new Parameter(ParameterType.BEAN, index, null, isEncoded, null);\n-        }\n-\n-        String dValue = AnnotationUtils.getDefaultParameterValue(anns);\n-\n-        PathParam a = AnnotationUtils.getAnnotation(anns, PathParam.class);\n-        if (a != null) {\n-            return new Parameter(ParameterType.PATH, index, a.value(), isEncoded, dValue);\n-        }\n-        QueryParam q = AnnotationUtils.getAnnotation(anns, QueryParam.class);\n-        if (q != null) {\n-            return new Parameter(ParameterType.QUERY, index, q.value(), isEncoded, dValue);\n-        }\n-        MatrixParam m = AnnotationUtils.getAnnotation(anns, MatrixParam.class);\n-        if (m != null) {\n-            return new Parameter(ParameterType.MATRIX, index, m.value(), isEncoded, dValue);\n-        }\n-\n-        FormParam f = AnnotationUtils.getAnnotation(anns, FormParam.class);\n-        if (f != null) {\n-            return new Parameter(ParameterType.FORM, index, f.value(), isEncoded, dValue);\n-        }\n-\n-        HeaderParam h = AnnotationUtils.getAnnotation(anns, HeaderParam.class);\n-        if (h != null) {\n-            return new Parameter(ParameterType.HEADER, index, h.value(), isEncoded, dValue);\n-        }\n-\n-        CookieParam c = AnnotationUtils.getAnnotation(anns, CookieParam.class);\n-        if (c != null) {\n-            return new Parameter(ParameterType.COOKIE, index, c.value(), isEncoded, dValue);\n-        }\n-\n-        return new Parameter(ParameterType.REQUEST_BODY, index, null);\n-\n-    }\n-\n-    private static OperationResourceInfo createOperationInfo(Method m, Method annotatedMethod,\n-                                                      ClassResourceInfo cri, Path path, String httpMethod) {\n-        OperationResourceInfo ori = new OperationResourceInfo(m, annotatedMethod, cri);\n-        URITemplate t = URITemplate.createTemplate(path);\n-        ori.setURITemplate(t);\n-        ori.setHttpMethod(httpMethod);\n-        return ori;\n-    }\n-\n-\n-    private static boolean checkMethodDispatcher(ClassResourceInfo cr) {\n-        if (cr.getMethodDispatcher().getOperationResourceInfos().isEmpty()) {\n-            LOG.warning(new org.apache.cxf.common.i18n.Message(\"NO_RESOURCE_OP_EXC\",\n-                                                               BUNDLE,\n-                                                               cr.getServiceClass().getName()).toString());\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-\n-    private static Class<?> loadClass(String cName) {\n-        try {\n-            return ClassLoaderUtils.loadClass(cName.trim(), ResourceUtils.class);\n-        } catch (ClassNotFoundException ex) {\n-            throw new RuntimeException(\"No class \" + cName.trim() + \" can be found\", ex);\n-        }\n-    }\n-\n-\n-    public static List<UserResource> getUserResources(String loc, Bus bus) {\n-        try {\n-            InputStream is = ResourceUtils.getResourceStream(loc, bus);\n-            if (is == null) {\n-                return null;\n-            }\n-            return getUserResources(is);\n-        } catch (Exception ex) {\n-            LOG.warning(\"Problem with processing a user model at \" + loc);\n-        }\n-\n-        return null;\n-    }\n-\n-    public static InputStream getResourceStream(String loc, Bus bus) throws Exception {\n-        URL url = getResourceURL(loc, bus);\n-        return url == null ? null : url.openStream();\n-    }\n-\n-    public static URL getResourceURL(String loc, Bus bus) throws Exception {\n-        URL url = null;\n-        if (loc.startsWith(CLASSPATH_PREFIX)) {\n-            String path = loc.substring(CLASSPATH_PREFIX.length());\n-            url = ResourceUtils.getClasspathResourceURL(path, ResourceUtils.class, bus);\n-        } else {\n-            try {\n-                url = new URL(loc);\n-            } catch (Exception ex) {\n-                // it can be either a classpath or file resource without a scheme\n-                url = ResourceUtils.getClasspathResourceURL(loc, ResourceUtils.class, bus);\n-                if (url == null) {\n-                    File file = new File(loc);\n-                    if (file.exists()) {\n-                        url = file.toURI().toURL();\n-                    }\n-                }\n-            }\n-        }\n-        if (url == null) {\n-            LOG.warning(\"No resource \" + loc + \" is available\");\n-        }\n-        return url;\n-    }\n-\n-    public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n-        InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n-        return is == null ? getResource(path, InputStream.class, bus) : is;\n-    }\n-\n-    public static URL getClasspathResourceURL(String path, Class<?> callingClass, Bus bus) {\n-        URL url = ClassLoaderUtils.getResource(path, callingClass);\n-        return url == null ? getResource(path, URL.class, bus) : url;\n-    }\n-\n-    public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n-        if (bus != null) {\n-            ResourceManager rm = bus.getExtension(ResourceManager.class);\n-            if (rm != null) {\n-                return rm.resolveResource(path, resourceClass);\n-            }\n-        }\n-        return null;\n-    }\n-\n-    public static Properties loadProperties(String propertiesLocation, Bus bus) throws Exception {\n-        Properties props = new Properties();\n-        InputStream is = getResourceStream(propertiesLocation, bus);\n-        props.load(is);\n-        return props;\n-    }\n-\n-    public static List<UserResource> getUserResources(String loc) {\n-        return getUserResources(loc, BusFactory.getThreadDefaultBus());\n-    }\n-\n-    public static List<UserResource> getUserResources(InputStream is) throws Exception {\n-        Document doc = StaxUtils.read(new InputStreamReader(is, StandardCharsets.UTF_8));\n-        return getResourcesFromElement(doc.getDocumentElement());\n-    }\n-\n-    public static List<UserResource> getResourcesFromElement(Element modelEl) {\n-        List<UserResource> resources = new ArrayList<>();\n-        List<Element> resourceEls =\n-            DOMUtils.findAllElementsByTagNameNS(modelEl,\n-                                                \"http://cxf.apache.org/jaxrs\", \"resource\");\n-        for (Element e : resourceEls) {\n-            resources.add(getResourceFromElement(e));\n-        }\n-        return resources;\n-    }\n-\n-\n-    public static ResourceTypes getAllRequestResponseTypes(List<ClassResourceInfo> cris,\n-                                                           boolean jaxbOnly) {\n-        return getAllRequestResponseTypes(cris, jaxbOnly, null);\n-    }\n-\n-    public static ResourceTypes getAllRequestResponseTypes(List<ClassResourceInfo> cris,\n-                                                           boolean jaxbOnly,\n-                                                           MessageBodyWriter<?> jaxbWriter) {\n-        ResourceTypes types = new ResourceTypes();\n-        for (ClassResourceInfo resource : cris) {\n-            getAllTypesForResource(resource, types, jaxbOnly, jaxbWriter);\n-        }\n-        return types;\n-    }\n-\n-    public static Class<?> getActualJaxbType(Class<?> type, Method resourceMethod, boolean inbound) {\n-        ElementClass element = resourceMethod.getAnnotation(ElementClass.class);\n-        if  (element != null) {\n-            Class<?> cls = inbound ? element.request() : element.response();\n-            if (cls != Object.class) {\n-                return cls;\n-            }\n-        }\n-        return type;\n-    }\n-\n-    private static void getAllTypesForResource(ClassResourceInfo resource,\n-                                               ResourceTypes types,\n-                                               boolean jaxbOnly,\n-                                               MessageBodyWriter<?> jaxbWriter) {\n-        for (OperationResourceInfo ori : resource.getMethodDispatcher().getOperationResourceInfos()) {\n-            Method method = ori.getAnnotatedMethod() == null ? ori.getMethodToInvoke() : ori.getAnnotatedMethod();\n-            Class<?> realReturnType = method.getReturnType();\n-            Class<?> cls = realReturnType;\n-            if (cls == Response.class || ori.isAsync()) {\n-                cls = getActualJaxbType(cls, method, false);\n-            }\n-            Type type = method.getGenericReturnType();\n-            if (jaxbOnly) {\n-                checkJaxbType(resource.getServiceClass(), cls, realReturnType == Response.class || ori.isAsync()\n-                    ? cls : type, types, method.getAnnotations(), jaxbWriter);\n-            } else {\n-                types.getAllTypes().put(cls, type);\n-            }\n-\n-            for (Parameter pm : ori.getParameters()) {\n-                if (pm.getType() == ParameterType.REQUEST_BODY) {\n-                    Class<?> inType = method.getParameterTypes()[pm.getIndex()];\n-                    if (inType != AsyncResponse.class) {\n-                        Type paramType = method.getGenericParameterTypes()[pm.getIndex()];\n-                        if (jaxbOnly) {\n-                            checkJaxbType(resource.getServiceClass(), inType, paramType, types,\n-                                          method.getParameterAnnotations()[pm.getIndex()], jaxbWriter);\n-                        } else {\n-                            types.getAllTypes().put(inType, paramType);\n-                        }\n-                    }\n-                }\n-            }\n-\n-        }\n-\n-        for (ClassResourceInfo sub : resource.getSubResources()) {\n-            if (!isRecursiveSubResource(resource, sub)) {\n-                getAllTypesForResource(sub, types, jaxbOnly, jaxbWriter);\n-            }\n-        }\n-    }\n-\n-    private static boolean isRecursiveSubResource(ClassResourceInfo parent, ClassResourceInfo sub) {\n-        if (parent == null) {\n-            return false;\n-        }\n-        if (parent == sub) {\n-            return true;\n-        }\n-        return isRecursiveSubResource(parent.getParent(), sub);\n-    }\n-\n-    private static void checkJaxbType(Class<?> serviceClass,\n-                                      Class<?> type,\n-                                      Type genericType,\n-                                      ResourceTypes types,\n-                                      Annotation[] anns,\n-                                      MessageBodyWriter<?> jaxbWriter) {\n-        boolean isCollection = false;\n-        if (InjectionUtils.isSupportedCollectionOrArray(type)) {\n-            type = InjectionUtils.getActualType(genericType);\n-            isCollection = true;\n-        }\n-        if (type == Object.class && !(genericType instanceof Class)\n-            || genericType instanceof TypeVariable) {\n-            Type theType = InjectionUtils.processGenericTypeIfNeeded(serviceClass,\n-                                                      Object.class,\n-                                                      genericType);\n-            type = InjectionUtils.getActualType(theType);\n-        }\n-        if (type == null\n-            || InjectionUtils.isPrimitive(type)\n-            || JAXBElement.class.isAssignableFrom(type)\n-            || Response.class.isAssignableFrom(type)\n-            || type.isInterface()) {\n-            return;\n-        }\n-\n-        MessageBodyWriter<?> writer = jaxbWriter;\n-        if (writer == null) {\n-            JAXBElementProvider<Object> defaultWriter = new JAXBElementProvider<Object>();\n-            defaultWriter.setMarshallAsJaxbElement(true);\n-            defaultWriter.setXmlTypeAsJaxbElementOnly(true);\n-            writer = defaultWriter;\n-        }\n-        if (writer.isWriteable(type, type, anns, MediaType.APPLICATION_XML_TYPE)) {\n-            types.getAllTypes().put(type, type);\n-            Class<?> genCls = InjectionUtils.getActualType(genericType);\n-            if (genCls != type && genCls != null && genCls != Object.class\n-                && !InjectionUtils.isSupportedCollectionOrArray(genCls)) {\n-                types.getAllTypes().put(genCls, genCls);\n-            }\n-\n-            XMLName name = AnnotationUtils.getAnnotation(anns, XMLName.class);\n-            QName qname = name != null ? JAXRSUtils.convertStringToQName(name.value()) : null;\n-            if (isCollection) {\n-                types.getCollectionMap().put(type, qname);\n-            } else {\n-                types.getXmlNameMap().put(type, qname);\n-            }\n-        }\n-    }\n-\n-    private static UserResource getResourceFromElement(Element e) {\n-        UserResource resource = new UserResource();\n-        resource.setName(e.getAttribute(\"name\"));\n-        resource.setPath(e.getAttribute(\"path\"));\n-        resource.setConsumes(e.getAttribute(\"consumes\"));\n-        resource.setProduces(e.getAttribute(\"produces\"));\n-        List<Element> operEls =\n-            DOMUtils.findAllElementsByTagNameNS(e,\n-                 \"http://cxf.apache.org/jaxrs\", \"operation\");\n-        List<UserOperation> opers = new ArrayList<>(operEls.size());\n-        for (Element operEl : operEls) {\n-            opers.add(getOperationFromElement(operEl));\n-        }\n-        resource.setOperations(opers);\n-        return resource;\n-    }\n-\n-    private static UserOperation getOperationFromElement(Element e) {\n-        UserOperation op = new UserOperation();\n-        op.setName(e.getAttribute(\"name\"));\n-        op.setVerb(e.getAttribute(\"verb\"));\n-        op.setPath(e.getAttribute(\"path\"));\n-        op.setOneway(Boolean.parseBoolean(e.getAttribute(\"oneway\")));\n-        op.setConsumes(e.getAttribute(\"consumes\"));\n-        op.setProduces(e.getAttribute(\"produces\"));\n-        List<Element> paramEls =\n-            DOMUtils.findAllElementsByTagNameNS(e,\n-                 \"http://cxf.apache.org/jaxrs\", \"param\");\n-        List<Parameter> params = new ArrayList<>(paramEls.size());\n-        for (int i = 0; i < paramEls.size(); i++) {\n-            Element paramEl = paramEls.get(i);\n-            Parameter p = new Parameter(paramEl.getAttribute(\"type\"), i, paramEl.getAttribute(\"name\"));\n-            p.setEncoded(Boolean.valueOf(paramEl.getAttribute(\"encoded\")));\n-            p.setDefaultValue(paramEl.getAttribute(\"defaultValue\"));\n-            String pClass = paramEl.getAttribute(\"class\");\n-            if (!StringUtils.isEmpty(pClass)) {\n-                try {\n-                    p.setJavaType(ClassLoaderUtils.loadClass(pClass, ResourceUtils.class));\n-                } catch (Exception ex) {\n-                    throw new RuntimeException(ex);\n-                }\n-            }\n-            params.add(p);\n-        }\n-        op.setParameters(params);\n-        return op;\n-    }\n-\n-    public static Object[] createConstructorArguments(Constructor<?> c,\n-                                                      Message m,\n-                                                      boolean perRequest) {\n-        return createConstructorArguments(c, m, perRequest, null);\n-    }\n-\n-    public static Object[] createConstructorArguments(Constructor<?> c,\n-                                                      Message m,\n-                                                      boolean perRequest,\n-                                                      Map<Class<?>, Object> contextValues) {\n-        if (m == null) {\n-            m = new MessageImpl();\n-        }\n-        Class<?>[] params = c.getParameterTypes();\n-        Annotation[][] anns = c.getParameterAnnotations();\n-        Type[] genericTypes = c.getGenericParameterTypes();\n-        @SuppressWarnings(\"unchecked\")\n-        MultivaluedMap<String, String> templateValues = \n-            (MultivaluedMap<String, String>)m.get(URITemplate.TEMPLATE_PARAMETERS);\n-        Object[] values = new Object[params.length];\n-        for (int i = 0; i < params.length; i++) {\n-            if (AnnotationUtils.getAnnotation(anns[i], Context.class) != null) {\n-                Object contextValue = contextValues != null ? contextValues.get(params[i]) : null;\n-                if (contextValue == null) {\n-                    if (perRequest || InjectionUtils.VALUE_CONTEXTS.contains(params[i].getName())) {\n-                        values[i] = JAXRSUtils.createContextValue(m, genericTypes[i], params[i]);\n-                    } else {\n-                        values[i] = InjectionUtils.createThreadLocalProxy(params[i]);\n-                    }\n-                } else {\n-                    values[i] = contextValue;\n-                }\n-            } else {\n-                // this branch won't execute for singletons given that the found constructor\n-                // is guaranteed to have only Context parameters, if any, for singletons\n-                Parameter p = ResourceUtils.getParameter(i, anns[i], params[i]);\n-                values[i] = JAXRSUtils.createHttpParameterValue(\n-                                p, params[i], genericTypes[i], anns[i], m, templateValues, null);\n-            }\n-        }\n-        return values;\n-    }\n-    \n-    @SuppressWarnings(\"unchecked\")\n-    public static JAXRSServerFactoryBean createApplication(Application app, \n-                                                           boolean ignoreAppPath,\n-                                                           boolean staticSubresourceResolution, \n-                                                           boolean useSingletonResourceProvider,\n-                                                           Bus bus) {\n-\n-        Set<Object> singletons = app.getSingletons();\n-        verifySingletons(singletons);\n-\n-        List<Class<?>> resourceClasses = new ArrayList<Class<?>>();\n-        List<Object> providers = new ArrayList<>();\n-        List<Feature> features = new ArrayList<>();\n-        Map<Class<?>, ResourceProvider> map = new HashMap<>();\n-\n-        // Note, app.getClasses() returns a list of per-request classes\n-        // or singleton provider classes\n-        for (Class<?> cls : app.getClasses()) {\n-            if (isValidApplicationClass(cls, singletons)) {\n-                if (isValidProvider(cls)) {\n-                    providers.add(createProviderInstance(cls));\n-                } else if (Feature.class.isAssignableFrom(cls)) {\n-                    features.add(createFeatureInstance((Class<? extends Feature>) cls));\n-                } else {\n-                    resourceClasses.add(cls);\n-                    if (useSingletonResourceProvider) {\n-                        map.put(cls, new SingletonResourceProvider(createProviderInstance(cls)));\n-                    } else {\n-                        map.put(cls, new PerRequestResourceProvider(cls));\n-                    }\n-                }\n-            }\n-        }\n-\n-        // we can get either a provider or resource class here\n-        for (Object o : singletons) {\n-            if (isValidProvider(o.getClass())) {\n-                providers.add(o);\n-            } else if (o instanceof Feature) {\n-                features.add((Feature) o);\n-            } else {\n-                resourceClasses.add(o.getClass());\n-                map.put(o.getClass(), new SingletonResourceProvider(o));\n-            }\n-        }\n-\n-        JAXRSServerFactoryBean bean = new JAXRSServerFactoryBean();\n-        if (bus != null) {\n-            bean.setBus(bus);\n-        }\n-\n-        String address = \"/\";\n-        if (!ignoreAppPath) {\n-            ApplicationPath appPath = locateApplicationPath(app.getClass());\n-            if (appPath != null) {\n-                address = appPath.value();\n-            }\n-        }\n-        if (!address.startsWith(\"/\")) {\n-            address = \"/\" + address;\n-        }\n-        bean.setAddress(address);\n-        bean.setStaticSubresourceResolution(staticSubresourceResolution);\n-        bean.setResourceClasses(resourceClasses);\n-        bean.setProviders(providers);\n-        bean.setFeatures(features);\n-        for (Map.Entry<Class<?>, ResourceProvider> entry : map.entrySet()) {\n-            bean.setResourceProvider(entry.getKey(), entry.getValue());\n-        }\n-        Map<String, Object> appProps = app.getProperties();\n-        if (appProps != null) {\n-            bean.getProperties(true).putAll(appProps);\n-        }\n-        bean.setApplication(app);\n-        return bean;\n-    }\n-\n-    public static Object createProviderInstance(Class<?> cls) {\n-        try {\n-            Constructor<?> c = ResourceUtils.findResourceConstructor(cls, false);\n-            if (c != null && c.getParameterTypes().length == 0) {\n-                return c.newInstance();\n-            }\n-            return c;\n-        } catch (Throwable ex) {\n-            throw new RuntimeException(\"Provider \" + cls.getName() + \" can not be created\", ex);\n-        }\n-    }\n-\n-    public static Feature createFeatureInstance(Class<? extends Feature> cls) {\n-        try {\n-            Constructor<?> c = ResourceUtils.findResourceConstructor(cls, false);\n-\n-            if (c == null) {\n-                throw new RuntimeException(\"No valid constructor found for \" + cls.getName());\n-            }\n-\n-            return (Feature) c.newInstance();\n-        } catch (Throwable ex) {\n-            throw new RuntimeException(\"Feature \" + cls.getName() + \" can not be created\", ex);\n-        }\n-    }\n-\n-    private static boolean isValidProvider(Class<?> c) {\n-        if (c == null || c == Object.class) {\n-            return false;\n-        }\n-        if (c.getAnnotation(Provider.class) != null) {\n-            return true;\n-        }\n-        for (Class<?> itf : c.getInterfaces()) {\n-            if (SERVER_PROVIDER_CLASS_NAMES.contains(itf.getName())) {\n-                return true;\n-            }\n-        }\n-        return isValidProvider(c.getSuperclass());\n-    }\n-\n-    private static void verifySingletons(Set<Object> singletons) {\n-        if (singletons.isEmpty()) {\n-            return;\n-        }\n-        Set<String> map = new HashSet<>();\n-        for (Object s : singletons) {\n-            if (map.contains(s.getClass().getName())) {\n-                throw new RuntimeException(\"More than one instance of the same singleton class \"\n-                                           + s.getClass().getName() + \" is available\");\n-            }\n-            map.add(s.getClass().getName());\n-        }\n-    }\n-\n-    public static boolean isValidResourceClass(Class<?> c) {\n-        if (c.isInterface() || Modifier.isAbstract(c.getModifiers())) {\n-            LOG.info(\"Ignoring invalid resource class \" + c.getName());\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-    public static ApplicationPath locateApplicationPath(Class<?> appClass) {\n-        ApplicationPath appPath = appClass.getAnnotation(ApplicationPath.class);\n-        if (appPath == null && appClass.getSuperclass() != Application.class) {\n-            return locateApplicationPath(appClass.getSuperclass());\n-        }\n-        return appPath;\n-    }\n-\n-    private static boolean isValidApplicationClass(Class<?> c, Set<Object> singletons) {\n-        if (!isValidResourceClass(c)) {\n-            return false;\n-        }\n-        for (Object s : singletons) {\n-            if (c == s.getClass()) {\n-                LOG.info(\"Ignoring per-request resource class \" + c.getName()\n-                         + \" as it is also registered as singleton\");\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    //TODO : consider moving JAXBDataBinding.createContext to JAXBUtils\n-    public static JAXBContext createJaxbContext(Set<Class<?>> classes, Class<?>[] extraClass,\n-                                          Map<String, Object> contextProperties) {\n-        if (classes == null || classes.isEmpty()) {\n-            return null;\n-        }\n-        JAXBUtils.scanPackages(classes, extraClass, null);\n-\n-        JAXBContext ctx;\n-        try {\n-            ctx = JAXBContext.newInstance(classes.toArray(new Class[classes.size()]),\n-                                          contextProperties);\n-            return ctx;\n-        } catch (JAXBException ex) {\n-            LOG.log(Level.SEVERE, \"No JAXB context can be created\", ex);\n-        }\n-        return null;\n-    }\n-\n-    //CHECKSTYLE:ON\n-}\n-"},{"sha":"87e98407cfab4f5d2c31d8b81e418c4d3eed5789","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/cli/CLIITCase.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b1c26c79ccdff65f5b9df0aeba09e488b077235/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b1c26c79ccdff65f5b9df0aeba09e488b077235/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java?ref=9b1c26c79ccdff65f5b9df0aeba09e488b077235","patch":"@@ -42,7 +42,6 @@\n import org.apache.syncope.client.cli.commands.role.RoleCommand;\n import org.apache.syncope.client.cli.commands.user.UserCommand;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Ignore;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n \n@@ -166,7 +165,6 @@ public void connectorCount() {\n     }\n \n     @Test\n-    @Ignore(\"Ignore until CXF-7670 gets fixed\")\n     public void userRead() {\n         final String userKey1 = \"1417acbe-cbf6-4277-9372-e75e04f97000\";\n         final String userKey2 = \"74cd8ece-715a-44a4-a736-e17b46c4e7e6\";"},{"sha":"1dc78cd3ad8d86315d26d8477a3ead31e97f3c55","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b1c26c79ccdff65f5b9df0aeba09e488b077235/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b1c26c79ccdff65f5b9df0aeba09e488b077235/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=9b1c26c79ccdff65f5b9df0aeba09e488b077235","patch":"@@ -365,7 +365,7 @@ under the License.\n     <connid.ad.version>1.3.4</connid.ad.version>\n     <connid.googleapps.version>1.4.1</connid.googleapps.version>\n \n-    <cxf.version>3.2.3</cxf.version>\n+    <cxf.version>3.2.4-SNAPSHOT</cxf.version>\n \n     <jackson.version>2.9.4</jackson.version>\n "}]}