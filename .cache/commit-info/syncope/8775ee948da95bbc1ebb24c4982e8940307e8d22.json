{"sha":"8775ee948da95bbc1ebb24c4982e8940307e8d22","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg3NzVlZTk0OGRhOTViYmMxZWJiMjRjNDk4MmU4OTQwMzA3ZThkMjI=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-09-17T10:50:22Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-09-17T10:50:22Z"},"message":"SYNCOPE-133 Fixed\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1523980 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0b642ddcb49acfa67f46a10d4ee7a6982ac86c72","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0b642ddcb49acfa67f46a10d4ee7a6982ac86c72"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8775ee948da95bbc1ebb24c4982e8940307e8d22","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8775ee948da95bbc1ebb24c4982e8940307e8d22","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8775ee948da95bbc1ebb24c4982e8940307e8d22","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8775ee948da95bbc1ebb24c4982e8940307e8d22/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"7c3c2bd0bc6f45b96e9a94a81fa9913bc50fb535","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7c3c2bd0bc6f45b96e9a94a81fa9913bc50fb535","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7c3c2bd0bc6f45b96e9a94a81fa9913bc50fb535"}],"stats":{"total":266,"additions":250,"deletions":16},"files":[{"sha":"d9f49c4d185a38917dfeb3ab339d6e5446b6f5e9","filename":"common/src/main/java/org/apache/syncope/common/services/UserRequestService.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8775ee948da95bbc1ebb24c4982e8940307e8d22/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserRequestService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8775ee948da95bbc1ebb24c4982e8940307e8d22/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserRequestService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserRequestService.java?ref=8775ee948da95bbc1ebb24c4982e8940307e8d22","patch":"@@ -27,8 +27,10 @@\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n import javax.ws.rs.core.Response;\r\n+import org.apache.syncope.common.mod.UserMod;\r\n \r\n import org.apache.syncope.common.to.UserRequestTO;\r\n+import org.apache.syncope.common.to.UserTO;\r\n \r\n @Path(\"requests/user\")\r\n public interface UserRequestService {\r\n@@ -80,4 +82,16 @@ public interface UserRequestService {\n     @DELETE\r\n     @Path(\"{requestId}\")\r\n     void delete(@PathParam(\"requestId\") Long requestId);\r\n+\r\n+    @POST\r\n+    @Path(\"create/execute/{requestId}\")\r\n+    UserTO executeCreate(@PathParam(\"requestId\") Long requestId, UserTO reviewed);\r\n+\r\n+    @POST\r\n+    @Path(\"update/execute/{requestId}\")\r\n+    UserTO executeUpdate(@PathParam(\"requestId\") Long requestId, UserMod changes);\r\n+\r\n+    @POST\r\n+    @Path(\"delete/execute{requestId}\")\r\n+    UserTO executeDelete(@PathParam(\"requestId\") Long requestId);\r\n }\r"},{"sha":"8d599fd579828f61869140ed8e4cf6e94a5dc8f0","filename":"common/src/main/java/org/apache/syncope/common/to/UserRequestTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8775ee948da95bbc1ebb24c4982e8940307e8d22/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8775ee948da95bbc1ebb24c4982e8940307e8d22/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestTO.java?ref=8775ee948da95bbc1ebb24c4982e8940307e8d22","patch":"@@ -41,6 +41,8 @@ public class UserRequestTO extends AbstractBaseBean {\n \r\n     private UserRequestType type;\r\n \r\n+    private boolean executed;\r\n+\r\n     public UserRequestTO() {\r\n     }\r\n \r\n@@ -119,4 +121,12 @@ public Long getUserId() {\n     public void setUserId(final Long userId) {\r\n         this.userId = userId;\r\n     }\r\n+\r\n+    public void setExecuted(boolean executed) {\r\n+        this.executed = executed;\r\n+    }\r\n+\r\n+    public boolean isExecuted() {\r\n+        return executed;\r\n+    }\r\n }\r"},{"sha":"3c0e7a45290013f326c872487590b6ea213925c5","filename":"common/src/main/java/org/apache/syncope/common/types/AuditElements.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8775ee948da95bbc1ebb24c4982e8940307e8d22/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8775ee948da95bbc1ebb24c4982e8940307e8d22/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java?ref=8775ee948da95bbc1ebb24c4982e8940307e8d22","patch":"@@ -241,7 +241,8 @@ public enum UserRequestSubCategory {\n         read,\r\n         update,\r\n         delete,\r\n-        isCreateAllowed\r\n+        isCreateAllowed,\r\n+        execute\r\n \r\n     }\r\n \r"},{"sha":"f7879267672c1b7d3156eebbf55ab4a353101ee6","filename":"console/src/main/java/org/apache/syncope/console/pages/UserRequestModalPage.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8775ee948da95bbc1ebb24c4982e8940307e8d22/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserRequestModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8775ee948da95bbc1ebb24c4982e8940307e8d22/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserRequestModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserRequestModalPage.java?ref=8775ee948da95bbc1ebb24c4982e8940307e8d22","patch":"@@ -64,7 +64,6 @@ public UserRequestModalPage(final PageReference callerPageRef, final ModalWindow\n \n             case UPDATE:\n                 this.initialUserTO = userRestClient.read(userRequestTO.getUserMod().getId());\n-\n                 userTO = AttributableOperations.apply(initialUserTO, userRequestTO.getUserMod());\n                 break;\n \n@@ -88,10 +87,7 @@ protected void submitAction(final AjaxRequestTarget target, final Form form) {\n                     break;\n \n                 case ADMIN:\n-                    userRestClient.create(updatedUserTO);\n-                    if (userRequestTO != null) {\n-                        requestRestClient.delete(userRequestTO.getId());\n-                    }\n+                    requestRestClient.executeCreate(userRequestTO.getId(), userTO);\n                     break;\n \n                 default:\n@@ -111,10 +107,7 @@ protected void submitAction(final AjaxRequestTarget target, final Form form) {\n                         break;\n \n                     case ADMIN:\n-                        userRestClient.update(userMod);\n-                        if (userRequestTO != null) {\n-                            requestRestClient.delete(userRequestTO.getId());\n-                        }\n+                        requestRestClient.executeUpdate(userRequestTO.getId(), userMod);\n                         break;\n \n                     default:"},{"sha":"e94a78785e6a638db4761440c258c8a9ab171a4f","filename":"console/src/main/java/org/apache/syncope/console/rest/UserRequestRestClient.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8775ee948da95bbc1ebb24c4982e8940307e8d22/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8775ee948da95bbc1ebb24c4982e8940307e8d22/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java?ref=8775ee948da95bbc1ebb24c4982e8940307e8d22","patch":"@@ -60,4 +60,16 @@ public void requestDelete(final Long userId) {\n         userRequestTO.setUserId(userId);\n         getService(UserRequestService.class).create(userRequestTO);\n     }\n+\n+    public UserTO executeCreate(final Long requestId, final UserTO reviewed) {\n+        return getService(UserRequestService.class).executeCreate(requestId, reviewed);\n+    }\n+\n+    public UserTO executeUpdate(final Long requestId, final UserMod changes) {\n+        return getService(UserRequestService.class).executeUpdate(requestId, changes);\n+    }\n+\n+    public UserTO executeDelete(final Long requestId) {\n+        return getService(UserRequestService.class).executeDelete(requestId);\n+    }\n }"},{"sha":"1be45d4988bfb4b070e9b42c03f48ba702185313","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/UserRequest.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8775ee948da95bbc1ebb24c4982e8940307e8d22/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FUserRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8775ee948da95bbc1ebb24c4982e8940307e8d22/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FUserRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FUserRequest.java?ref=8775ee948da95bbc1ebb24c4982e8940307e8d22","patch":"@@ -18,13 +18,16 @@\n  */\n package org.apache.syncope.core.persistence.beans;\n \n+import javax.persistence.Basic;\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.Lob;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n \n import org.apache.syncope.common.mod.UserMod;\n@@ -49,6 +52,15 @@ public class UserRequest extends AbstractBaseBean {\n     @Enumerated(EnumType.STRING)\n     private UserRequestType type;\n \n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer executed;\n+\n+    public UserRequest() {\n+        this.executed = 0;\n+    }\n+\n     public Long getId() {\n         return id;\n     }\n@@ -89,4 +101,12 @@ public void setUserId(final Long userId) {\n         type = UserRequestType.DELETE;\n         payload = String.valueOf(userId);\n     }\n+\n+    public boolean isExecuted() {\n+        return isBooleanAsInteger(executed);\n+    }\n+\n+    public void setExecuted(boolean executed) {\n+        this.executed = getBooleanAsInteger(executed);\n+    }\n }"},{"sha":"ba63f2d24987eb5e219cee6f870e979ec3cf6a43","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/UserRequestDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8775ee948da95bbc1ebb24c4982e8940307e8d22/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserRequestDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8775ee948da95bbc1ebb24c4982e8940307e8d22/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserRequestDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserRequestDAO.java?ref=8775ee948da95bbc1ebb24c4982e8940307e8d22","patch":"@@ -28,6 +28,8 @@ public interface UserRequestDAO extends DAO {\n     UserRequest find(Long id);\n \n     List<UserRequest> findAll();\n+    \n+    List<UserRequest> findAll(final boolean executed);\n \n     UserRequest save(UserRequest userRequest) throws InvalidEntityException;\n "},{"sha":"fa8759e397e4e60ad05137cc899db170e88d47a4","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/UserRequestDAOImpl.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8775ee948da95bbc1ebb24c4982e8940307e8d22/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserRequestDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8775ee948da95bbc1ebb24c4982e8940307e8d22/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserRequestDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserRequestDAOImpl.java?ref=8775ee948da95bbc1ebb24c4982e8940307e8d22","patch":"@@ -44,6 +44,17 @@ public List<UserRequest> findAll() {\n         return query.getResultList();\n     }\n \n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<UserRequest> findAll(final boolean executed) {\n+        TypedQuery<UserRequest> query = entityManager.createQuery(\n+                \"SELECT e \" + \"FROM \" + UserRequest.class.getSimpleName() + \" e WHERE e.executed = :executed\",\n+                UserRequest.class);\n+        query.setParameter(\"executed\", executed ? 1 : 0);\n+\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public UserRequest save(final UserRequest userRequest) throws InvalidEntityException {\n         return entityManager.merge(userRequest);"},{"sha":"601c01d1d53f1df1b9794d692c1358fbfd1769a3","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserRequestController.java","status":"modified","additions":68,"deletions":3,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8775ee948da95bbc1ebb24c4982e8940307e8d22/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8775ee948da95bbc1ebb24c4982e8940307e8d22/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java?ref=8775ee948da95bbc1ebb24c4982e8940307e8d22","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import static org.apache.syncope.common.types.UserRequestType.CREATE;\n+import static org.apache.syncope.common.types.UserRequestType.DELETE;\n+import static org.apache.syncope.common.types.UserRequestType.UPDATE;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -60,6 +63,9 @@ public class UserRequestController {\n     @Autowired\n     private UserRequestDAO userRequestDAO;\n \n+    @Autowired\n+    private UserController userController;\n+\n     @Autowired\n     private UserRequestDataBinder binder;\n \n@@ -112,7 +118,7 @@ public UserRequestTO update(final UserMod userMod) {\n         request = userRequestDAO.save(request);\n \n         auditManager.audit(Category.userRequest, UserRequestSubCategory.update, Result.success,\n-                \"Successfully updated user request for \" + request.getUserMod().getUsername());\n+                \"Successfully updated user request for \" + request.getUserMod().getId());\n \n         return binder.getUserRequestTO(request);\n     }\n@@ -132,6 +138,22 @@ public List<UserRequestTO> list() {\n         return result;\n     }\n \n+    @PreAuthorize(\"hasRole('USER_REQUEST_LIST')\")\n+    @Transactional(readOnly = true)\n+    public List<UserRequestTO> list(final boolean executed) {\n+        List<UserRequestTO> result = new ArrayList<UserRequestTO>();\n+\n+        for (UserRequest request : userRequestDAO.findAll(executed)) {\n+            result.add(binder.getUserRequestTO(request));\n+        }\n+\n+        auditManager.audit(Category.userRequest, UserRequestSubCategory.list, Result.success,\n+                String.format(\"Successfully listed all %s executed user requests: %d\",\n+                (executed ? \"\" : \"not\"), result.size()));\n+\n+        return result;\n+    }\n+\n     @PreAuthorize(\"hasRole('USER_REQUEST_READ')\")\n     @Transactional(readOnly = true)\n     public UserRequestTO read(final Long requestId) {\n@@ -140,10 +162,11 @@ public UserRequestTO read(final Long requestId) {\n             throw new NotFoundException(\"User request \" + requestId);\n         }\n \n+        final UserRequestTO userRequestTO = binder.getUserRequestTO(request);\n         auditManager.audit(Category.userRequest, UserRequestSubCategory.read, Result.success,\n-                \"Successfully read user request for \" + request.getUserTO().getUsername());\n+                \"Successfully read user request for \" + getUserId(userRequestTO));\n \n-        return binder.getUserRequestTO(request);\n+        return userRequestTO;\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n@@ -182,4 +205,46 @@ public UserRequestTO deleteRequest(final Long requestId) {\n \n         return requestToDelete;\n     }\n+\n+    @PreAuthorize(\"hasRole('USER_REQUEST_READ') and (\"\n+            + \"(hasRole('USER_CREATE') and #request.type == #request.type.CREATE) or \"\n+            + \"(hasRole('USER_UPDATE') and #request.type == #request.type.UPDATE) or \"\n+            + \"(hasRole('USER_DELETE') and #request.type == #request.type.DELETE))\")\n+    public UserTO execute(final UserRequestTO request, final UserTO reviewed, final UserMod changes) {\n+        UserRequest userRequest = userRequestDAO.find(request.getId());\n+        if (request == null || request.isExecuted()) {\n+            throw new NotFoundException(\"Executable user request \" + request.getId());\n+        }\n+\n+        final UserTO res;\n+\n+        switch (request.getType()) {\n+            case CREATE:\n+                res = userController.create(reviewed == null ? request.getUserTO() : reviewed);\n+                break;\n+            case UPDATE:\n+                res = userController.update(changes == null ? request.getUserMod() : changes);\n+                break;\n+            case DELETE:\n+                res = userController.delete(request.getUserId());\n+                break;\n+            default:\n+                throw new NotFoundException(\"User request \" + request.getType());\n+        }\n+\n+        userRequest.setExecuted(true);\n+        userRequestDAO.save(userRequest);\n+\n+        auditManager.audit(Category.userRequest, UserRequestSubCategory.execute, Result.success,\n+                String.format(\"Successfully executed %s request for user %s\",\n+                request.getType(), getUserId(request)));\n+\n+        return res;\n+    }\n+\n+    private String getUserId(final UserRequestTO request) {\n+        return request.getType() == CREATE ? request.getUserTO().getUsername()\n+                : request.getType() == UPDATE ? String.valueOf(request.getUserMod().getId())\n+                : String.valueOf(request.getUserId());\n+    }\n }"},{"sha":"1492d2fe500e4f1c3699423e52310a6640506df6","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserRequestDataBinder.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8775ee948da95bbc1ebb24c4982e8940307e8d22/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserRequestDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8775ee948da95bbc1ebb24c4982e8940307e8d22/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserRequestDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserRequestDataBinder.java?ref=8775ee948da95bbc1ebb24c4982e8940307e8d22","patch":"@@ -70,7 +70,8 @@ public UserTO getAuthUserTO() throws NotFoundException {\n \n     public UserRequestTO getUserRequestTO(final UserRequest request) {\n         UserRequestTO result = new UserRequestTO();\n-        BeanUtils.copyProperties(request, result);\n+        BeanUtils.copyProperties(request, result, new String[] {\"executed\"});\n+        result.setExecuted(request.isExecuted());\n \n         return result;\n     }"},{"sha":"110b5f6aad7edc48268330176df908aacb63021f","filename":"core/src/main/java/org/apache/syncope/core/services/UserRequestServiceImpl.java","status":"modified","additions":18,"deletions":1,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8775ee948da95bbc1ebb24c4982e8940307e8d22/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8775ee948da95bbc1ebb24c4982e8940307e8d22/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java?ref=8775ee948da95bbc1ebb24c4982e8940307e8d22","patch":"@@ -24,8 +24,10 @@\n import javax.ws.rs.core.Response;\n \n import org.apache.syncope.common.SyncopeConstants;\n+import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.services.UserRequestService;\n import org.apache.syncope.common.to.UserRequestTO;\n+import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.core.rest.controller.UserRequestController;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n@@ -74,7 +76,7 @@ public Response create(final UserRequestTO userRequestTO) {\n \n     @Override\n     public List<UserRequestTO> list() {\n-        return controller.list();\n+        return controller.list(false);\n     }\n \n     @Override\n@@ -86,4 +88,19 @@ public UserRequestTO read(final Long requestId) {\n     public void delete(final Long requestId) {\n         controller.deleteRequest(requestId);\n     }\n+\n+    @Override\n+    public UserTO executeCreate(final Long requestId, final UserTO reviewed) {\n+        return controller.execute(controller.read(requestId), reviewed, null);\n+    }\n+\n+    @Override\n+    public UserTO executeUpdate(final Long requestId, final UserMod changes) {\n+        return controller.execute(controller.read(requestId), null, changes);\n+    }\n+\n+    @Override\n+    public UserTO executeDelete(final Long requestId) {\n+        return controller.execute(controller.read(requestId), null, null);\n+    }\n }"},{"sha":"ac7d8466d64d8a8683f42e32bd269de9a766f67b","filename":"core/src/test/java/org/apache/syncope/core/rest/UserRequestTestITCase.java","status":"modified","additions":89,"deletions":1,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8775ee948da95bbc1ebb24c4982e8940307e8d22/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8775ee948da95bbc1ebb24c4982e8940307e8d22/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java?ref=8775ee948da95bbc1ebb24c4982e8940307e8d22","patch":"@@ -21,6 +21,7 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.fail;\n \n import java.security.AccessControlException;\n@@ -82,7 +83,7 @@ public void create() throws InvalidSearchConditionException {\n \n         // 4. as anonymous, request user create works\n         UserRequestService userRequestService2 = createServiceInstance(UserRequestService.class, null, null);\n-        response = createUserRequest(userRequestService2, new UserRequestTO(userTO));\n+        createUserRequest(userRequestService2, new UserRequestTO(userTO));\n \n         // 5. try to find user\n         AttributeCond attrCond = new AttributeCond(AttributeCond.Type.EQ);\n@@ -199,6 +200,93 @@ public void delete() {\n         }\n     }\n \n+    @Test\n+    public void execute() {\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"ex.create@syncope.apache.org\");\n+        final String initialPassword = userTO.getPassword();\n+\n+        UserRequestService selfservice = createServiceInstance(UserRequestService.class, null, null);\n+        Response response = createUserRequest(selfservice, new UserRequestTO(userTO));\n+\n+        UserRequestTO userRequest = getObject(response, UserRequestTO.class, userRequestService);\n+        assertNotNull(userRequest);\n+\n+        try {\n+            userService.read(userTO.getUsername());\n+            fail();\n+        } catch (Exception ignore) {\n+            // ignore\n+        }\n+\n+        assertFalse(userRequestService.read(userRequest.getId()).isExecuted());\n+        assertNotNull(userRequestService.executeCreate(userRequest.getId(), userTO));\n+        assertTrue(userRequestService.read(userRequest.getId()).isExecuted());\n+\n+        for (UserRequestTO userRequestTO : userRequestService.list()) {\n+            assertFalse(userRequestTO.isExecuted());\n+        }\n+\n+        userTO = userService.read(userTO.getUsername());\n+        assertNotNull(userTO);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+\n+        selfservice = createServiceInstance(UserRequestService.class, userTO.getUsername(), initialPassword);\n+\n+        userMod.setPassword(\"new\" + initialPassword);\n+        response = createUserRequest(selfservice, new UserRequestTO(userMod));\n+\n+        userRequest = getObject(response, UserRequestTO.class, userRequestService);\n+        assertNotNull(userRequest);\n+\n+        final String newpwd = \"new\" + initialPassword + \"!\";\n+\n+        UserMod furtherChanges = new UserMod();\n+        furtherChanges.setId(userMod.getId());\n+        furtherChanges.setPassword(newpwd);\n+\n+        assertFalse(userRequestService.read(userRequest.getId()).isExecuted());\n+        assertNotNull(userRequestService.executeUpdate(userRequest.getId(), furtherChanges));\n+        assertTrue(userRequestService.read(userRequest.getId()).isExecuted());\n+\n+        for (UserRequestTO userRequestTO : userRequestService.list()) {\n+            assertFalse(userRequestTO.isExecuted());\n+        }\n+\n+        assertNotNull(userService.read(userTO.getUsername()));\n+\n+        try {\n+            createServiceInstance(UserService.class, userTO.getUsername(), \"new\" + initialPassword).readSelf();\n+            fail(\"Credentials are not updated yet, thus request should raise AccessControlException\");\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+\n+        assertNotNull(createServiceInstance(UserService.class, userTO.getUsername(), newpwd).readSelf());\n+\n+        selfservice = createServiceInstance(UserRequestService.class, userTO.getUsername(), newpwd);\n+        response = createUserRequest(selfservice, new UserRequestTO(userTO.getId()));\n+\n+        userRequest = getObject(response, UserRequestTO.class, userRequestService);\n+        assertNotNull(userRequest);\n+\n+        assertFalse(userRequestService.read(userRequest.getId()).isExecuted());\n+        userRequestService.executeDelete(userRequest.getId());\n+        assertTrue(userRequestService.read(userRequest.getId()).isExecuted());\n+\n+        for (UserRequestTO userRequestTO : userRequestService.list()) {\n+            assertFalse(userRequestTO.isExecuted());\n+        }\n+\n+        try {\n+            userService.read(userTO.getUsername());\n+            fail();\n+        } catch (Exception ignore) {\n+            // ignore\n+        }\n+    }\n+\n     private Response createUserRequest(final UserRequestService service, final UserRequestTO userRequestTO) {\n         Response response = service.create(userRequestTO);\n         if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {"}]}